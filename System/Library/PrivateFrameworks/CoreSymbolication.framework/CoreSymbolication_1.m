uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a2, a3, a4, a6);
  v12 = *a5;
  v13 = *a4;
  v14 = *a6;
  result = strcmp((const char *)(v14 + *(unsigned int *)(*a5 + 12)), (const char *)(v14 + *(unsigned int *)(*a4 + 12)));
  if ((result & 0x80000000) != 0)
  {
    *a4 = v12;
    *a5 = v13;
    v16 = *a4;
    v17 = *a3;
    result = strcmp((const char *)(v14 + *(unsigned int *)(*a4 + 12)), (const char *)(v14 + *(unsigned int *)(*a3 + 12)));
    if ((result & 0x80000000) != 0)
    {
      *a3 = v16;
      *a4 = v17;
      v18 = *a3;
      v19 = *a2;
      result = strcmp((const char *)(v14 + *(unsigned int *)(*a3 + 12)), (const char *)(v14 + *(unsigned int *)(*a2 + 12)));
      if ((result & 0x80000000) != 0)
      {
        *a2 = v18;
        *a3 = v19;
        v20 = *a2;
        v21 = *a1;
        result = strcmp((const char *)(v14 + *(unsigned int *)(*a2 + 12)), (const char *)(v14 + *(unsigned int *)(*a1 + 12)));
        if ((result & 0x80000000) != 0)
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,CSCppMMapSymbol const**>(char *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        uint64_t v15 = *(void *)v14;
        uint64_t v16 = *(void *)a1;
        if (strcmp((const char *)(*a4 + *(unsigned int *)(*(void *)v14 + 12)), (const char *)(*a4 + *(unsigned int *)(*(void *)a1 + 12))) < 0)
        {
          *(void *)v14 = v16;
          *(void *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v17 = (unint64_t)v8 >> 3;
      v18 = a2 - 8;
      do
      {
        uint64_t v19 = *(void *)a1;
        v20 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a4, v17);
        if (v18 == v20)
        {
          *(void *)v20 = v19;
        }
        else
        {
          *(void *)v20 = *(void *)v18;
          *(void *)v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>((uint64_t)a1, (uint64_t)(v20 + 8), a4, (v20 + 8 - a1) >> 3);
        }
        v18 -= 8;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t result, uint64_t *a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    v4 = a4;
    uint64_t v5 = result;
    if ((uint64_t)((unint64_t)(a3 - 2) >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      unint64_t v22 = (unint64_t)(a3 - 2) >> 1;
      uint64_t v7 = ((uint64_t)a4 - result) >> 2;
      uint64_t v8 = v7 + 1;
      uint64_t v9 = (void *)(result + 8 * (v7 + 1));
      uint64_t v10 = v7 + 2;
      uint64_t v11 = *v9;
      if (v7 + 2 >= a3)
      {
        uint64_t v13 = *a2;
      }
      else
      {
        uint64_t v12 = v9[1];
        uint64_t v13 = *a2;
        if (strcmp((const char *)(*a2 + *(unsigned int *)(v11 + 12)), (const char *)(*a2 + *(unsigned int *)(v12 + 12))) < 0)
        {
          uint64_t v11 = v12;
          ++v9;
          uint64_t v8 = v10;
        }
      }
      uint64_t v14 = *v4;
      __s2 = (char *)(v13 + *(unsigned int *)(*v4 + 12));
      result = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 12)), __s2);
      int64_t v15 = v22;
      if ((result & 0x80000000) == 0)
      {
        uint64_t v21 = v14;
        do
        {
          uint64_t v16 = v9;
          void *v4 = v11;
          if (v15 < v8) {
            break;
          }
          uint64_t v17 = (2 * v8) | 1;
          uint64_t v9 = (void *)(v5 + 8 * v17);
          uint64_t v11 = *v9;
          if (2 * v8 + 2 < a3)
          {
            uint64_t v18 = v5;
            uint64_t v19 = v9[1];
            int v20 = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 12)), (const char *)(v13 + *(unsigned int *)(v19 + 12)));
            if (v20 < 0) {
              uint64_t v11 = v19;
            }
            uint64_t v5 = v18;
            int64_t v15 = v22;
            if (v20 < 0)
            {
              ++v9;
              uint64_t v17 = 2 * v8 + 2;
            }
          }
          result = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 12)), __s2);
          v4 = v16;
          uint64_t v8 = v17;
        }
        while ((result & 0x80000000) == 0);
        *uint64_t v16 = v21;
      }
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  uint64_t v8 = *a2;
  do
  {
    uint64_t v9 = &a1[v5];
    uint64_t v12 = v9[1];
    uint64_t v10 = v9 + 1;
    uint64_t v11 = v12;
    uint64_t v13 = (2 * v5) | 1;
    uint64_t v14 = 2 * v5 + 2;
    if (v14 < a3)
    {
      uint64_t v15 = v10[1];
      if (strcmp((const char *)(v8 + *(unsigned int *)(v11 + 12)), (const char *)(v8 + *(unsigned int *)(v15 + 12))) < 0)
      {
        uint64_t v11 = v15;
        ++v10;
        uint64_t v13 = v14;
      }
    }
    *a1 = v11;
    a1 = v10;
    uint64_t v5 = v13;
  }
  while (v13 <= v7);
  return v10;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (void *)(result + 8 * (v4 >> 1));
    uint64_t v8 = (void *)(a2 - 8);
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v10 = *v7;
    uint64_t v11 = *a3;
    uint64_t v12 = (const char *)(*a3 + *(unsigned int *)(v9 + 12));
    result = strcmp((const char *)(*a3 + *(unsigned int *)(*v7 + 12)), v12);
    if ((result & 0x80000000) != 0)
    {
      do
      {
        uint64_t v13 = v7;
        *uint64_t v8 = v10;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (void *)(v5 + 8 * v6);
        uint64_t v10 = *v7;
        result = strcmp((const char *)(v11 + *(unsigned int *)(*v7 + 12)), v12);
        uint64_t v8 = v13;
      }
      while ((result & 0x80000000) != 0);
      void *v13 = v9;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(uint64_t result, char *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - (char *)v11;
    unint64_t v15 = (a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v22 = *((void *)a2 - 1);
          uint64_t v23 = *v11;
          result = strcmp((const char *)(*a3 + *(unsigned int *)(v22 + 16)), (const char *)(*a3 + *(unsigned int *)(*v11 + 16)));
          if ((result & 0x80000000) != 0)
          {
            *uint64_t v11 = v22;
            *((void *)a2 - 1) = v23;
          }
          break;
        case 3uLL:
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, v11 + 1, (uint64_t *)a2 - 1, a3);
          break;
        case 4uLL:
          result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, v11 + 1, v11 + 2, (uint64_t *)a2 - 1, a3);
          break;
        case 5uLL:
          result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, v11 + 1, v11 + 2, v11 + 3, (uint64_t *)a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,CSCppMMapSymbol const**>((char *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, &v11[v15 >> 1], (uint64_t *)a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11 + 1, v17 - 1, (uint64_t *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11 + 2, &v11[v16 + 1], (uint64_t *)a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v17 - 1, v17, &v11[v16 + 1], a3);
      uint64_t v18 = *v11;
      *uint64_t v11 = *v17;
      *uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(&v11[v15 >> 1], v11, (uint64_t *)a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if ((strcmp((const char *)(*a3 + *(unsigned int *)(*(v11 - 1) + 16)), (const char *)(*a3 + *(unsigned int *)(*v11 + 16))) & 0x80000000) == 0)
    {
      result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(v11, (uint64_t *)a2, a3);
      uint64_t v11 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(v11, a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, v19, a3);
    uint64_t v11 = v19 + 1;
    result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v19 + 1, (uint64_t *)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      result = std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, (uint64_t *)a2, a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, a2, a3);
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  if (result != a2)
  {
    unint64_t v4 = result;
    char v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *a3;
      uint64_t v8 = result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t v11 = (const char *)(v7 + *(unsigned int *)(v9 + 16));
        result = (uint64_t *)strcmp(v11, (const char *)(v7 + *(unsigned int *)(v10 + 16)));
        if ((result & 0x80000000) != 0)
        {
          uint64_t v12 = v6;
          while (1)
          {
            *(uint64_t *)((char *)v4 + v12 + 8) = v10;
            if (!v12) {
              break;
            }
            uint64_t v10 = *(uint64_t *)((char *)v4 + v12 - 8);
            result = (uint64_t *)strcmp(v11, (const char *)(v7 + *(unsigned int *)(v10 + 16)));
            v12 -= 8;
            if ((result & 0x80000000) == 0)
            {
              uint64_t v13 = (uint64_t *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          uint64_t *v13 = v9;
        }
        char v5 = v8 + 1;
        v6 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

void *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(void *result, void *a2, uint64_t *a3)
{
  if (result != a2)
  {
    unint64_t v4 = result;
    char v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v6 = *a3;
      do
      {
        uint64_t v8 = *v4;
        uint64_t v7 = v4[1];
        unint64_t v4 = v5;
        uint64_t v9 = (const char *)(v6 + *(unsigned int *)(v7 + 16));
        result = (void *)strcmp(v9, (const char *)(v6 + *(unsigned int *)(v8 + 16)));
        if ((result & 0x80000000) != 0)
        {
          uint64_t v10 = v4;
          do
          {
            *uint64_t v10 = v8;
            uint64_t v8 = *(v10 - 2);
            result = (void *)strcmp(v9, (const char *)(v6 + *(unsigned int *)(v8 + 16)));
            --v10;
          }
          while ((result & 0x80000000) != 0);
          *uint64_t v10 = v7;
        }
        char v5 = v4 + 1;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = *a1;
  uint64_t v9 = *a4;
  uint64_t v10 = (const char *)(*a4 + *(unsigned int *)(*a2 + 16));
  uint64_t v11 = (const char *)(*a4 + *(unsigned int *)(*a1 + 16));
  int v12 = strcmp(v10, v11);
  uint64_t v13 = *a3;
  int v14 = strcmp((const char *)(v9 + *(unsigned int *)(*a3 + 16)), v10);
  if (v12 < 0)
  {
    if (v14 < 0)
    {
      *a1 = v13;
      *a3 = v8;
      return 1;
    }
    *a1 = v7;
    *a2 = v8;
    uint64_t v17 = *a3;
    if ((strcmp((const char *)(v9 + *(unsigned int *)(*a3 + 16)), v11) & 0x80000000) == 0) {
      return 1;
    }
    *a2 = v17;
    *a3 = v8;
    return 2;
  }
  if (v14 < 0)
  {
    *a2 = v13;
    *a3 = v7;
    uint64_t v15 = *a2;
    uint64_t v16 = *a1;
    if ((strcmp((const char *)(v9 + *(unsigned int *)(*a2 + 16)), (const char *)(v9 + *(unsigned int *)(*a1 + 16))) & 0x80000000) == 0) {
      return 1;
    }
    *a1 = v15;
    *a2 = v16;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  v3 = a2;
  uint64_t v5 = *a1;
  uint64_t v6 = *a3;
  uint64_t v7 = (const char *)(*a3 + *(unsigned int *)(*a1 + 16));
  if (strcmp(v7, (const char *)(*a3 + *(unsigned int *)(*(a2 - 1) + 16))) < 0)
  {
    uint64_t v8 = a1;
    do
    {
      uint64_t v9 = v8[1];
      ++v8;
    }
    while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(v9 + 16))) & 0x80000000) == 0);
  }
  else
  {
    uint64_t v10 = a1 + 1;
    do
    {
      uint64_t v8 = v10;
      if (v10 >= v3) {
        break;
      }
      ++v10;
    }
    while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(*v8 + 16))) & 0x80000000) == 0);
  }
  if (v8 < v3)
  {
    do
      uint64_t v11 = *--v3;
    while (strcmp(v7, (const char *)(v6 + *(unsigned int *)(v11 + 16))) < 0);
  }
  if (v8 < v3)
  {
    uint64_t v12 = *v8;
    uint64_t v13 = *v3;
    do
    {
      *uint64_t v8 = v13;
      uint64_t *v3 = v12;
      do
      {
        uint64_t v14 = v8[1];
        ++v8;
        uint64_t v12 = v14;
      }
      while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(v14 + 16))) & 0x80000000) == 0);
      do
      {
        uint64_t v15 = *--v3;
        uint64_t v13 = v15;
      }
      while (strcmp(v7, (const char *)(v6 + *(unsigned int *)(v15 + 16))) < 0);
    }
    while (v8 < v3);
  }
  if (v8 - 1 != a1) {
    *a1 = *(v8 - 1);
  }
  *(v8 - 1) = v5;
  return v8;
}

void *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = *a1;
  uint64_t v7 = *a3;
  uint64_t v8 = (const char *)(*a3 + *(unsigned int *)(*a1 + 16));
  do
    uint64_t v9 = a1[++v5];
  while (strcmp((const char *)(v7 + *(unsigned int *)(v9 + 16)), v8) < 0);
  unint64_t v10 = (unint64_t)&a1[v5];
  uint64_t v11 = &a1[v5 - 1];
  if (v5 == 1)
  {
    do
    {
      if (v10 >= (unint64_t)a2) {
        break;
      }
      uint64_t v13 = *--a2;
    }
    while ((strcmp((const char *)(v7 + *(unsigned int *)(v13 + 16)), v8) & 0x80000000) == 0);
  }
  else
  {
    do
      uint64_t v12 = *--a2;
    while ((strcmp((const char *)(v7 + *(unsigned int *)(v12 + 16)), v8) & 0x80000000) == 0);
  }
  if (v10 < (unint64_t)a2)
  {
    uint64_t v14 = *a2;
    uint64_t v15 = &a1[v5];
    uint64_t v16 = a2;
    do
    {
      *uint64_t v15 = v14;
      *uint64_t v16 = v9;
      do
      {
        uint64_t v17 = v15[1];
        ++v15;
        uint64_t v9 = v17;
      }
      while (strcmp((const char *)(v7 + *(unsigned int *)(v17 + 16)), v8) < 0);
      do
      {
        uint64_t v18 = *--v16;
        uint64_t v14 = v18;
      }
      while ((strcmp((const char *)(v7 + *(unsigned int *)(v18 + 16)), v8) & 0x80000000) == 0);
    }
    while (v15 < v16);
    uint64_t v11 = v15 - 1;
  }
  if (v11 != a1) {
    *a1 = *v11;
  }
  *uint64_t v11 = v6;
  return v11;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (strcmp((const char *)(*a3 + *(unsigned int *)(v8 + 16)), (const char *)(*a3 + *(unsigned int *)(*a1 + 16))) < 0)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    uint64_t v17 = (const char *)(v13 + *(unsigned int *)(*v11 + 16));
    if (strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 16))) < 0)
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        int v20 = strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 16)));
        uint64_t v18 = v19;
        if ((v20 & 0x80000000) == 0)
        {
          BOOL v21 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      BOOL v21 = a1;
LABEL_12:
      *BOOL v21 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    unint64_t v10 = v11;
    v14 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v11 = *a3;
  uint64_t v12 = *a5;
  uint64_t result = strcmp((const char *)(v12 + *(unsigned int *)(*a4 + 16)), (const char *)(v12 + *(unsigned int *)(*a3 + 16)));
  if ((result & 0x80000000) != 0)
  {
    *a3 = v10;
    *a4 = v11;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    uint64_t result = strcmp((const char *)(v12 + *(unsigned int *)(*a3 + 16)), (const char *)(v12 + *(unsigned int *)(*a2 + 16)));
    if ((result & 0x80000000) != 0)
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      uint64_t result = strcmp((const char *)(v12 + *(unsigned int *)(*a2 + 16)), (const char *)(v12 + *(unsigned int *)(*a1 + 16)));
      if ((result & 0x80000000) != 0)
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v13 = *a4;
  uint64_t v14 = *a6;
  uint64_t result = strcmp((const char *)(v14 + *(unsigned int *)(*a5 + 16)), (const char *)(v14 + *(unsigned int *)(*a4 + 16)));
  if ((result & 0x80000000) != 0)
  {
    *a4 = v12;
    *a5 = v13;
    uint64_t v16 = *a4;
    uint64_t v17 = *a3;
    uint64_t result = strcmp((const char *)(v14 + *(unsigned int *)(*a4 + 16)), (const char *)(v14 + *(unsigned int *)(*a3 + 16)));
    if ((result & 0x80000000) != 0)
    {
      *a3 = v16;
      *a4 = v17;
      uint64_t v18 = *a3;
      uint64_t v19 = *a2;
      uint64_t result = strcmp((const char *)(v14 + *(unsigned int *)(*a3 + 16)), (const char *)(v14 + *(unsigned int *)(*a2 + 16)));
      if ((result & 0x80000000) != 0)
      {
        *a2 = v18;
        *a3 = v19;
        uint64_t v20 = *a2;
        uint64_t v21 = *a1;
        uint64_t result = strcmp((const char *)(v14 + *(unsigned int *)(*a2 + 16)), (const char *)(v14 + *(unsigned int *)(*a1 + 16)));
        if ((result & 0x80000000) != 0)
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,CSCppMMapSymbol const**>(char *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = *(void *)v14;
        uint64_t v16 = *(void *)a1;
        if (strcmp((const char *)(*a4 + *(unsigned int *)(*(void *)v14 + 16)), (const char *)(*a4 + *(unsigned int *)(*(void *)a1 + 16))) < 0)
        {
          *(void *)uint64_t v14 = v16;
          *(void *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v17 = (unint64_t)v8 >> 3;
      uint64_t v18 = a2 - 8;
      do
      {
        uint64_t v19 = *(void *)a1;
        uint64_t v20 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a4, v17);
        if (v18 == v20)
        {
          *(void *)uint64_t v20 = v19;
        }
        else
        {
          *(void *)uint64_t v20 = *(void *)v18;
          *(void *)uint64_t v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>((uint64_t)a1, (uint64_t)(v20 + 8), a4, (v20 + 8 - a1) >> 3);
        }
        v18 -= 8;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t result, uint64_t *a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    unint64_t v4 = a4;
    uint64_t v5 = result;
    if ((uint64_t)((unint64_t)(a3 - 2) >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      unint64_t v22 = (unint64_t)(a3 - 2) >> 1;
      uint64_t v7 = ((uint64_t)a4 - result) >> 2;
      uint64_t v8 = v7 + 1;
      uint64_t v9 = (void *)(result + 8 * (v7 + 1));
      uint64_t v10 = v7 + 2;
      uint64_t v11 = *v9;
      if (v7 + 2 >= a3)
      {
        uint64_t v13 = *a2;
      }
      else
      {
        uint64_t v12 = v9[1];
        uint64_t v13 = *a2;
        if (strcmp((const char *)(*a2 + *(unsigned int *)(v11 + 16)), (const char *)(*a2 + *(unsigned int *)(v12 + 16))) < 0)
        {
          uint64_t v11 = v12;
          ++v9;
          uint64_t v8 = v10;
        }
      }
      uint64_t v14 = *v4;
      __s2 = (char *)(v13 + *(unsigned int *)(*v4 + 16));
      uint64_t result = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 16)), __s2);
      int64_t v15 = v22;
      if ((result & 0x80000000) == 0)
      {
        uint64_t v21 = v14;
        do
        {
          uint64_t v16 = v9;
          void *v4 = v11;
          if (v15 < v8) {
            break;
          }
          uint64_t v17 = (2 * v8) | 1;
          uint64_t v9 = (void *)(v5 + 8 * v17);
          uint64_t v11 = *v9;
          if (2 * v8 + 2 < a3)
          {
            uint64_t v18 = v5;
            uint64_t v19 = v9[1];
            int v20 = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 16)), (const char *)(v13 + *(unsigned int *)(v19 + 16)));
            if (v20 < 0) {
              uint64_t v11 = v19;
            }
            uint64_t v5 = v18;
            int64_t v15 = v22;
            if (v20 < 0)
            {
              ++v9;
              uint64_t v17 = 2 * v8 + 2;
            }
          }
          uint64_t result = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 16)), __s2);
          unint64_t v4 = v16;
          uint64_t v8 = v17;
        }
        while ((result & 0x80000000) == 0);
        *uint64_t v16 = v21;
      }
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  uint64_t v8 = *a2;
  do
  {
    uint64_t v9 = &a1[v5];
    uint64_t v12 = v9[1];
    uint64_t v10 = v9 + 1;
    uint64_t v11 = v12;
    uint64_t v13 = (2 * v5) | 1;
    uint64_t v14 = 2 * v5 + 2;
    if (v14 < a3)
    {
      uint64_t v15 = v10[1];
      if (strcmp((const char *)(v8 + *(unsigned int *)(v11 + 16)), (const char *)(v8 + *(unsigned int *)(v15 + 16))) < 0)
      {
        uint64_t v11 = v15;
        ++v10;
        uint64_t v13 = v14;
      }
    }
    *a1 = v11;
    a1 = v10;
    uint64_t v5 = v13;
  }
  while (v13 <= v7);
  return v10;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (void *)(result + 8 * (v4 >> 1));
    uint64_t v8 = (void *)(a2 - 8);
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v10 = *v7;
    uint64_t v11 = *a3;
    uint64_t v12 = (const char *)(*a3 + *(unsigned int *)(v9 + 16));
    uint64_t result = strcmp((const char *)(*a3 + *(unsigned int *)(*v7 + 16)), v12);
    if ((result & 0x80000000) != 0)
    {
      do
      {
        uint64_t v13 = v7;
        *uint64_t v8 = v10;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (void *)(v5 + 8 * v6);
        uint64_t v10 = *v7;
        uint64_t result = strcmp((const char *)(v11 + *(unsigned int *)(*v7 + 16)), v12);
        uint64_t v8 = v13;
      }
      while ((result & 0x80000000) != 0);
      void *v13 = v9;
    }
  }
  return result;
}

uint64_t CSCppTRawSymbolNameGuard<Pointer32>::~CSCppTRawSymbolNameGuard(uint64_t a1)
{
  if (!*(unsigned char *)a1)
  {
    v3 = *(uint64_t **)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = *v3;
      uint64_t v5 = v3[1];
      while (v4 != v5)
      {
        TRawSymbol<Pointer32>::rollback_mmap_archive_naming(v4);
        v4 += 96;
      }
    }
  }
  return a1;
}

uint64_t TRawSymbol<Pointer32>::rollback_mmap_archive_naming(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 56);
  uint64_t v3 = *(void *)(result + 64);
  while (v2 != v3)
  {
    uint64_t result = TRawSymbol<Pointer32>::rollback_mmap_archive_naming(v2);
    v2 += 96;
  }
  uint64_t v4 = (atomic_uint *)(v1 + 20);
  unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(v1 + 20), memory_order_acquire);
  if ((atomic_load_explicit((atomic_uint *volatile)(v1 + 20), memory_order_acquire) & 0x40000) == 0)
  {
    explicit &= ~0x20000u;
    *(void *)(v1 + 24) = *(void *)(v1 + 32);
  }
  if ((atomic_load_explicit(v4, memory_order_acquire) & 0x800000) == 0) {
    explicit &= 0xFEBFFFFB;
  }
  atomic_store(explicit, (unsigned int *)v4);
  return result;
}

void create_traw_symbol_owner_data_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2;
  operator new();
}

void sub_1B900E27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  std::unique_ptr<CSCppDsymData>::reset[abi:ne180100](&a24, 0);
  uint64_t v27 = *(void *)(v25 - 160);
  *(void *)(v25 - 160) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(uint64_t a1, uint64_t a2, CSCppAddressSet *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  if (!_do_traw_segments_overlap(a2 + 384))
  {
    if (a3) {
      CSCppAddressSet::sort(a3);
    }
    MMapArchiveNameBuffer::MMapArchiveNameBuffer((MMapArchiveNameBuffer *)v6);
  }
  return 0;
}

void sub_1B900FEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,mach_vm_address_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  v65 = *(void **)(v63 - 144);
  if (v65)
  {
    *(void *)(v63 - 136) = v65;
    operator delete(v65);
  }
  MachVMAllocatePtr<TMMapArchive>::~MachVMAllocatePtr(&a31);
  if (__p) {
    operator delete(__p);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  CSCppTRawSymbolNameGuard<Pointer64>::~CSCppTRawSymbolNameGuard((uint64_t)&a41);
  DemanglingUtilities::CSCppReusableDemanglingBuffer::~CSCppReusableDemanglingBuffer(&a43);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a45);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a51);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a57);
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  a57 = a25;
  std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  _Unwind_Resume(a1);
}

_DWORD *record_sod_header_version<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(uint64_t *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::version_from_source_version_load_command(*a1, (uint64_t)v6);
  if (v7) {
    *(void *)(a2 + 272) = CSCppStringCache::intern((CSCppStringCache *)(a2 + 96), v6);
  }
  uint64_t result = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::id_dylib(*(void *)(*a1 + 24));
  if (result)
  {
    *(_DWORD *)(a2 + 264) = result[4];
    *(_DWORD *)(a2 + 268) = result[5];
    if (!v7)
    {
      TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::version_from_id_dylib_load_command(*a1, (uint64_t)v5);
      if (!v5[32]) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      uint64_t result = CSCppStringCache::intern((CSCppStringCache *)(a2 + 96), v5);
      *(void *)(a2 + 272) = result;
    }
  }
  return result;
}

uint64_t dsym_header_for_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>@<X0>(uint64_t a1@<X0>, void ***a2@<X2>, void ***a3@<X3>, void *a4@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  if ((result & 0x80000) == 0
    && (*(unsigned char *)(a1 + 109) & 0x40) == 0
    && ((uint64_t v9 = *a3) != 0
     || (uint64_t v10 = (void **)dsym_data_for_symbol_owner((const CSCppSymbolOwner *)a1, 0, 0, 0, 0),
         uint64_t result = (uint64_t)std::unique_ptr<CSCppDsymData>::reset[abi:ne180100](a2, v10),
         uint64_t v9 = *a2,
         *a3 = *a2,
         v9))
    && (uint64_t result = new_file_memory_for_uuid_and_arch((uint64_t)(v9 + 9), a1 + 16, *(void *)(a1 + 112), 2)) != 0)
  {
    uint64_t v11 = result;
    uint64_t v12 = result;
    if (TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::macho_header_at(&v12, 0, 1)) {
      operator new();
    }
    *a4 = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

void sub_1B90103B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    sod_header_from_local_dyld_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>();
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  _Unwind_Resume(a1);
}

void extract_dwarf_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(void *a1, uint64_t a2, char a3, void *a4, uint64_t (***a5)(void, std::vector<std::string>::pointer))
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(a1[3], "__DWARF");
  if (!v5)
  {
    unint64_t v5 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(a1[3], "__DWARFA");
    if (!v5)
    {
      unint64_t v5 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(a1[3], "");
      if (!v5) {
        return;
      }
    }
  }
  uint64_t v6 = *(unsigned int *)(v5 + 64);
  if (!v6) {
    return;
  }
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  v86 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = (const char *)(v5 + 72);
  do
  {
    if (!v7 && !strcmp(v15, "__debug_info"))
    {
      char v7 = v15;
    }
    else if (!v8 && !strcmp(v15, "__debug_abbrev"))
    {
      uint64_t v8 = v15;
    }
    else if (!v9 && !strcmp(v15, "__debug_line"))
    {
      uint64_t v9 = v15;
    }
    else if (!v10 && !strcmp(v15, "__debug_str"))
    {
      uint64_t v10 = v15;
    }
    else if (!v11 && !strncmp(v15, "__debug_line_str", 0x10uLL))
    {
      uint64_t v11 = v15;
    }
    else if (!v12 && !strcmp(v15, "__debug_ranges"))
    {
      uint64_t v12 = v15;
    }
    else if (!v13 && !strncmp(v15, "__debug_rnglists", 0x10uLL))
    {
      uint64_t v13 = v15;
    }
    else if (!strcmp(v15, "__debug_addr"))
    {
      v86 = v15;
    }
    else if (!strncmp(v15, "__debug_str_offs", 0x10uLL))
    {
      uint64_t v14 = v15;
    }
    v15 += 80;
    --v6;
  }
  while (v6);
  if (!v7 || !v8 || !*((void *)v7 + 5) || !*((void *)v8 + 5)) {
    return;
  }
  uint64_t v16 = a1[1];
  if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 16))(v16))
  {
    uint64_t v17 = a1[4];
    if (v9) {
      uint64_t v18 = *((void *)v9 + 4) + v17;
    }
    else {
      uint64_t v18 = 0;
    }
    int v20 = v86;
    if (v10)
    {
      uint64_t v80 = *((void *)v10 + 4) + v17;
      if (v11) {
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v80 = 0;
      if (v11)
      {
LABEL_45:
        uint64_t v21 = *((void *)v11 + 4) + v17;
        if (v12)
        {
LABEL_46:
          uint64_t v22 = *((void *)v12 + 4) + v17;
LABEL_54:
          if (v13) {
            uint64_t v78 = *((void *)v13 + 4) + v17;
          }
          else {
            uint64_t v78 = 0;
          }
          uint64_t v23 = v17 + *((void *)v7 + 4);
          uint64_t v87 = *((void *)v8 + 4) + v17;
          if (v20)
          {
            uint64_t v72 = *((void *)v20 + 4) + v17;
            if (!v14) {
              goto LABEL_82;
            }
          }
          else
          {
            uint64_t v72 = 0;
            if (!v14) {
              goto LABEL_82;
            }
          }
          uint64_t v24 = *((void *)v14 + 4) + v17;
LABEL_74:
          uint64_t v79 = v24;
          if (!v9) {
            goto LABEL_83;
          }
LABEL_75:
          uint64_t v25 = *((void *)v9 + 5);
          if (!v10) {
            goto LABEL_77;
          }
          goto LABEL_76;
        }
LABEL_53:
        uint64_t v22 = 0;
        goto LABEL_54;
      }
    }
    uint64_t v21 = 0;
    if (v12) {
      goto LABEL_46;
    }
    goto LABEL_53;
  }
  uint64_t v19 = a1[2];
  if (v9) {
    uint64_t v18 = v19 + *((unsigned int *)v9 + 12);
  }
  else {
    uint64_t v18 = 0;
  }
  int v20 = v86;
  if (v10)
  {
    uint64_t v80 = v19 + *((unsigned int *)v10 + 12);
    if (v11)
    {
LABEL_50:
      uint64_t v21 = v19 + *((unsigned int *)v11 + 12);
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v80 = 0;
    if (v11) {
      goto LABEL_50;
    }
  }
  uint64_t v21 = 0;
LABEL_58:
  if (v12)
  {
    uint64_t v22 = v19 + *((unsigned int *)v12 + 12);
    if (v13)
    {
LABEL_60:
      uint64_t v78 = v19 + *((unsigned int *)v13 + 12);
      goto LABEL_67;
    }
  }
  else
  {
    uint64_t v22 = 0;
    if (v13) {
      goto LABEL_60;
    }
  }
  uint64_t v78 = 0;
LABEL_67:
  uint64_t v23 = v19 + *((unsigned int *)v7 + 12);
  uint64_t v87 = v19 + *((unsigned int *)v8 + 12);
  if (!v20)
  {
    uint64_t v72 = 0;
    if (!v14) {
      goto LABEL_82;
    }
    goto LABEL_73;
  }
  uint64_t v72 = v19 + *((unsigned int *)v20 + 12);
  if (v14)
  {
LABEL_73:
    uint64_t v24 = v19 + *((unsigned int *)v14 + 12);
    goto LABEL_74;
  }
LABEL_82:
  uint64_t v79 = 0;
  if (v9) {
    goto LABEL_75;
  }
LABEL_83:
  uint64_t v25 = 0;
  if (v10) {
LABEL_76:
  }
    uint64_t v10 = (const char *)*((void *)v10 + 5);
LABEL_77:
  if (v11)
  {
    uint64_t v26 = *((void *)v11 + 5);
    if (v12) {
      goto LABEL_79;
    }
  }
  else
  {
    uint64_t v26 = 0;
    if (v12)
    {
LABEL_79:
      uint64_t v73 = *((void *)v12 + 5);
      if (v13) {
        goto LABEL_80;
      }
LABEL_87:
      uint64_t v71 = 0;
      if (v20) {
        goto LABEL_81;
      }
      goto LABEL_88;
    }
  }
  uint64_t v73 = 0;
  if (!v13) {
    goto LABEL_87;
  }
LABEL_80:
  uint64_t v71 = *((void *)v13 + 5);
  if (v20)
  {
LABEL_81:
    uint64_t v70 = *((void *)v20 + 5);
    goto LABEL_89;
  }
LABEL_88:
  uint64_t v70 = 0;
LABEL_89:
  uint64_t v74 = v26;
  uint64_t v75 = v25;
  uint64_t v76 = v21;
  uint64_t v77 = v22;
  uint64_t v27 = v18;
  size_t v28 = *((void *)v7 + 5);
  if (v14) {
    uint64_t v29 = *((void *)v14 + 5);
  }
  else {
    uint64_t v29 = 0;
  }
  size_t v30 = *((void *)v8 + 5);
  uint64_t v31 = v23;
  v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, size_t))(*(void *)v16 + 32))(v16, v23, v28);
  if (v32)
  {
    v140 = v32;
    int v141 = 0;
    uint64_t v142 = v31;
    size_t v143 = v28;
    madvise(v32, v28, 2);
    v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, size_t))(*(void *)v16 + 32))(v16, v87, v30);
    if (v33)
    {
      v132 = v33;
      int v133 = 0;
      uint64_t v134 = v87;
      unint64_t v135 = v30;
      __int16 v136 = 0;
      uint64_t v137 = 0;
      long long v138 = 0u;
      long long v139 = 0u;
      madvise(v33, v30, 2);
      if (!v10
        || (uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(void *)v16 + 32))(v16, v80, v10)) == 0)
      {
        uint64_t v34 = 0;
        uint64_t v10 = 0;
      }
      uint64_t v128 = v34;
      int v129 = 0;
      uint64_t v130 = v80;
      v131 = v10;
      if (!v29
        || (uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, v79, v29)) == 0)
      {
        uint64_t v35 = 0;
        uint64_t v29 = 0;
      }
      uint64_t v124 = v35;
      int v125 = 0;
      uint64_t v126 = v79;
      uint64_t v127 = v29;
      uint64_t v36 = v75;
      uint64_t v37 = v74;
      if (!v74
        || (uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, v76, v74)) == 0)
      {
        uint64_t v38 = 0;
        uint64_t v37 = 0;
      }
      uint64_t v120 = v38;
      int v121 = 0;
      uint64_t v122 = v76;
      uint64_t v123 = v37;
      uint64_t v39 = v73;
      if (!v75
        || (uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, v27, v75)) == 0)
      {
        uint64_t v40 = 0;
        uint64_t v36 = 0;
      }
      uint64_t v115 = v40;
      int v116 = 0;
      uint64_t v117 = v27;
      uint64_t v118 = v36;
      v119 = &v120;
      if (!v73
        || (uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, v77, v73)) == 0)
      {
        uint64_t v41 = 0;
        uint64_t v39 = 0;
      }
      uint64_t v111 = v41;
      int v112 = 0;
      uint64_t v113 = v77;
      uint64_t v114 = v39;
      uint64_t v42 = v71;
      if (!v71
        || (uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, v78, v71)) == 0)
      {
        uint64_t v43 = 0;
        uint64_t v42 = 0;
      }
      uint64_t v107 = v43;
      int v108 = 0;
      uint64_t v109 = v78;
      uint64_t v110 = v42;
      uint64_t v44 = v70;
      if (!v70
        || (uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, v72, v70)) == 0)
      {
        uint64_t v45 = 0;
        uint64_t v44 = 0;
      }
      uint64_t v103 = v45;
      int v104 = 0;
      uint64_t v105 = v72;
      uint64_t v106 = v44;
      memset(v101, 0, sizeof(v101));
      int v102 = 1065353216;
      v98 = 0;
      v99 = 0;
      uint64_t v100 = 0;
      long long v97 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      if (v141 != (unint64_t)v143)
      {
        v46 = MEMORY[0x1E4F14500];
        do
        {
          v47 = TDwarfInfoStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf32_compile_unit((uint64_t)&v140);
          if (!v47) {
            break;
          }
          unsigned int v88 = 0;
          uint64_t v48 = 8;
          if (*((unsigned __int16 *)v47 + 2) < 5u) {
            uint64_t v48 = 6;
          }
          unsigned int v88 = *(unsigned int *)((char *)v47 + v48);
          *(void *)&long long buf = &v88;
          v49 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v101, &v88, (uint64_t)&std::piecewise_construct, (_DWORD **)&buf);
          uint64_t v51 = v49[3];
          v50 = (std::__shared_weak_count *)v49[4];
          if (v50) {
            atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v51) {
LABEL_123:
          }
            operator new();
          if (v135 >= v88)
          {
            TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor((uint64_t)&v132, v88);
            TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::abbrev_table((uint64_t *)&v132, &buf);
            v52 = (std::__shared_weak_count *)*((void *)&buf + 1);
            uint64_t v53 = buf;
            long long buf = 0uLL;
            if (v50)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v50);
              if (*((void *)&buf + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
              }
            }
            *(void *)&long long buf = &v88;
            v54 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v101, &v88, (uint64_t)&std::piecewise_construct, (_DWORD **)&buf);
            if (v52) {
              atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v55 = (std::__shared_weak_count *)v54[4];
            v54[3] = v53;
            v54[4] = v52;
            if (v55) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v55);
            }
            if (v53) {
              goto LABEL_123;
            }
          }
          else
          {
            v52 = v50;
          }
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_1B8F92000, v46, OS_LOG_TYPE_DEFAULT, "Bad abbrev table offset in compile unit\n", (uint8_t *)&buf, 2u);
          }
          if (v52) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v52);
          }
        }
        while (v141 != (unint64_t)v143);
        v56 = v98;
        for (i = v99; v56 != i; ++v56)
        {
          TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(*v56, *(_DWORD *)(*v56 + 32));
          v147 = 0;
          long long v145 = 0u;
          long long v146 = 0u;
          long long buf = 0u;
          *(void *)&long long buf = *v56;
          *((void *)&buf + 1) = &v132;
          *(void *)&long long v145 = &v115;
          *((void *)&v145 + 1) = &v128;
          *(void *)&long long v146 = &v120;
          *((void *)&v146 + 1) = &v111;
          v147 = &v107;
          parse_dies<Dwarf<Dwarf32,Pointer64,LittleEndian>,TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>(a1[4], *v56, &v98, (uint64_t)&buf, a2, a3, a4, a5, &v92, &v95, &v89);
        }
      }
      TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by(a2, *((uint64_t *)&v94 + 1));
      std::vector<TRawSourceInfo<Pointer64>>::reserve((void **)(a2 + 208), *((unint64_t *)&v97 + 1));
      if ((void)v93 != *((void *)&v92 + 1))
      {
        v58 = (void *)(*((void *)&v92 + 1) + 8 * ((unint64_t)v94 / 0x27));
        v59 = (__n128 *)(*v58 + 104 * ((unint64_t)v94 % 0x27));
        uint64_t v60 = ((unint64_t)(*((void *)&v94 + 1) + v94) * (unsigned __int128)0xA41A41A41A41A41BLL) >> 64;
        unint64_t v61 = (v60 + ((unint64_t)(*((void *)&v94 + 1) + v94 - v60) >> 1)) >> 5;
        uint64_t v62 = *(void *)(*((void *)&v92 + 1) + 8 * v61) + 104 * (*((void *)&v94 + 1) + v94 - 39 * v61);
        while (v59 != (__n128 *)v62)
        {
          TRawSymbolOwnerData<Pointer64>::add_symbol((uint64_t *)a2, v59);
          v59 = (__n128 *)((char *)v59 + 104);
          if ((__n128 *)((char *)v59 - *v58) == (__n128 *)4056)
          {
            uint64_t v63 = (__n128 *)v58[1];
            ++v58;
            v59 = v63;
          }
        }
      }
      if ((void)v96 == *((void *)&v95 + 1))
      {
        v64 = 0;
        v66 = 0;
        v65 = (long long **)(*((void *)&v95 + 1) + 8 * ((*((void *)&v97 + 1) + (void)v97) / 0x66uLL));
      }
      else
      {
        v64 = (long long *)(*(void *)(*((void *)&v95 + 1) + 8 * ((unint64_t)v97 / 0x66))
                         + 40 * ((unint64_t)v97 % 0x66));
        v65 = (long long **)(*((void *)&v95 + 1) + 8 * ((*((void *)&v97 + 1) + (void)v97) / 0x66uLL));
        v66 = (long long *)((char *)*v65 + 40 * ((*((void *)&v97 + 1) + (void)v97) % 0x66uLL));
      }
      *(void *)&long long buf = a2 + 208;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRawSourceInfo<Pointer64>,TRawSourceInfo<Pointer64>*,TRawSourceInfo<Pointer64>&,TRawSourceInfo<Pointer64>**,long,102l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRawSourceInfo<Pointer64>,TRawSourceInfo<Pointer64>*,TRawSourceInfo<Pointer64>&,TRawSourceInfo<Pointer64>**,long,102l>,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>>>((long long **)(*((void *)&v95 + 1) + 8 * ((unint64_t)v97 / 0x66)), v64, v65, v66, (void ***)&buf);
      if (*((void *)&v91 + 1))
      {
        if ((void)v90 == *((void *)&v89 + 1))
        {
          v67 = 0;
          v69 = 0;
          v68 = (long long **)(*((void *)&v89 + 1) + 8 * (((void)v91 + *((void *)&v91 + 1)) / 0xAAuLL));
        }
        else
        {
          v67 = (long long *)(*(void *)(*((void *)&v89 + 1) + 8 * ((unint64_t)v91 / 0xAA))
                           + 24 * ((unint64_t)v91 % 0xAA));
          v68 = (long long **)(*((void *)&v89 + 1) + 8 * (((void)v91 + *((void *)&v91 + 1)) / 0xAAuLL));
          v69 = (long long *)((char *)*v68 + 24 * (((void)v91 + *((void *)&v91 + 1)) % 0xAAuLL));
        }
        *(void *)&long long buf = a2 + 496;
        std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRangeValue<Pointer64,char const*>,TRangeValue<Pointer64,char const*>*,TRangeValue<Pointer64,char const*>&,TRangeValue<Pointer64,char const*>**,long,170l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRangeValue<Pointer64,char const*>,TRangeValue<Pointer64,char const*>*,TRangeValue<Pointer64,char const*>&,TRangeValue<Pointer64,char const*>**,long,170l>,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>>>((long long **)(*((void *)&v89 + 1) + 8 * ((unint64_t)v91 / 0xAA)), v67, v68, v69, (void ***)&buf);
      }
      std::deque<TRangeValue<Pointer64,char const*>>::~deque[abi:ne180100](&v89);
      std::deque<TRawSymbol<Pointer64>>::~deque[abi:ne180100](&v92);
      std::deque<TRawSourceInfo<Pointer64>>::~deque[abi:ne180100](&v95);
      *(void *)&long long buf = &v98;
      std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>>::~__hash_table((uint64_t)v101);
      if ((void)v138)
      {
        *((void *)&v138 + 1) = v138;
        operator delete((void *)v138);
      }
    }
  }
}

void sub_1B9011320()
{
}

void sub_1B901134C()
{
  std::__split_buffer<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>::~__split_buffer(v0 - 160);
  JUMPOUT(0x1B9011358);
}

void sub_1B9011374()
{
}

uint64_t extract_stabs_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(char a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, void *a7)
{
  unint64_t v14 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(void *)(a5 + 24), "__LINKEDIT");
  uint64_t v15 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symtab(*(void *)(a5 + 24));
  uint64_t v16 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::dysymtab(*(void *)(a5 + 24));
  if (!v15) {
    return 0;
  }
  uint64_t v17 = v16;
  uint64_t v48 = a2;
  uint64_t v46 = a3;
  uint64_t v18 = *(void *)(a5 + 8);
  uint64_t v19 = v15[3];
  v47 = a4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 16))(v18))
  {
    uint64_t v20 = v15[2];
    uint64_t v21 = *(void *)(a5 + 32) + *(void *)(v14 + 24) - *(void *)(v14 + 40);
  }
  else
  {
    if ((*(unsigned char *)(a5 + 58) & 8) != 0)
    {
      uint64_t v23 = *(void *)(a5 + 64);
      if (!*(unsigned char *)(a5 + 80)) {
        uint64_t v23 = 0;
      }
      uint64_t v21 = *(void *)(a5 + 16) - v23;
      uint64_t v22 = v21 + v15[2];
      if (!v19) {
        return 1;
      }
      goto LABEL_11;
    }
    uint64_t v21 = *(void *)(a5 + 16);
    uint64_t v20 = v15[2];
  }
  uint64_t v22 = v21 + v20;
  if (!v19) {
    return 1;
  }
LABEL_11:
  if (!v15[5]) {
    return 1;
  }
  char v45 = a1;
  uint64_t v24 = v17;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v27 = v15[4];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, v22, 16 * v19);
  if (result)
  {
    uint64_t v44 = v21 + v27;
    unint64_t v29 = v15[5];
    size_t v30 = v25;
    uint64_t v31 = result;
    if (v45)
    {
      if (v48 && v47)
      {
        extract_direct_stabs_from_header_filtering_redacted<SizeAndEndianness<Pointer64,LittleEndian>>(a5, v30, result, v19, v44, v29);
        extract_stripped_locals_from_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>>(v48, v46, v47, a5, v30);
      }
      else
      {
        extract_direct_stabs_from_header<SizeAndEndianness<Pointer64,LittleEndian>>((void *)a5, (uint64_t)v30, result, v19, v44, v29, v26);
      }
    }
    uint64_t result = 1;
    if (v14)
    {
      if (v24 && v24[14] && (v45 & 2) != 0 && v24[15])
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 16))(v18))
        {
          uint64_t v32 = *(void *)(v14 + 24) - *(void *)(v14 + 40);
          uint64_t v33 = v24[14] + *(void *)(a5 + 32);
        }
        else
        {
          if ((*(unsigned char *)(a5 + 58) & 8) != 0)
          {
            uint64_t v35 = *(void *)(a5 + 64);
            if (!*(unsigned char *)(a5 + 80)) {
              uint64_t v35 = 0;
            }
            uint64_t v34 = *(void *)(a5 + 16) - v35 + v24[14];
LABEL_31:
            uint64_t v36 = v24[15];
            uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, v34, 4 * v36);
            uint64_t v38 = v37;
            if (!v36 || v37)
            {
              uint64_t v39 = *(void *)(a5 + 24);
              uint64_t v40 = *(unsigned int *)(v39 + 20);
              int v49 = *(_DWORD *)(v39 + 16);
              uint64_t v50 = v39;
              uint64_t v51 = v39 + 32 + v40;
              uint64_t v53 = 0;
              uint64_t v54 = 0;
              uint64_t v52 = v39 + 32;
              unint64_t v41 = TSectionIterator<SizeAndEndianness<Pointer64,LittleEndian>>::section((uint64_t)&v49);
              if (v41)
              {
                unint64_t v43 = v41;
                do
                {
                  if (*(unsigned char *)(v43 + 64) == 8) {
                    extract_indirect_stabs_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(a5, v30, v43, v38, v36, v31, v19, v42, v44, v29, v26);
                  }
                  unint64_t v43 = TSectionIterator<SizeAndEndianness<Pointer64,LittleEndian>>::section((uint64_t)&v49);
                }
                while (v43);
              }
              return 1;
            }
            return 0;
          }
          uint64_t v32 = *(void *)(a5 + 16);
          uint64_t v33 = v24[14];
        }
        uint64_t v34 = v32 + v33;
        goto LABEL_31;
      }
    }
  }
  return result;
}

void extract_function_starts_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::function_starts(*(void *)(a1 + 24));
  if (v6)
  {
    char v7 = v6;
    if (v6[3])
    {
      unint64_t v8 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(void *)(a1 + 24), "__LINKEDIT");
      if (v8)
      {
        unint64_t v9 = v8;
        uint64_t v10 = *(void *)(a1 + 8);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 16))(v10))
        {
          uint64_t v11 = *(void *)(v9 + 24) - *(void *)(v9 + 40) + v7[2] + *(void *)(a1 + 32);
        }
        else if ((*(unsigned char *)(a1 + 58) & 8) != 0)
        {
          uint64_t v12 = *(void *)(a1 + 64);
          if (!*(unsigned char *)(a1 + 80)) {
            uint64_t v12 = 0;
          }
          uint64_t v11 = *(void *)(a1 + 16) - v12 + v7[2];
        }
        else
        {
          uint64_t v11 = *(void *)(a1 + 16) + v7[2];
        }
        uint64_t v13 = v7[3];
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, v11, v13);
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v23 = v14;
          unsigned int v24 = 0;
          uint64_t v25 = v11;
          uint64_t v26 = v13;
          unint64_t v16 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(void *)(a1 + 24), "__TEXT");
          if (v16)
          {
            unint64_t v17 = *(void *)(a1 + 32) + *(void *)(v16 + 24);
            unint64_t v22 = *(unsigned int *)(*(void *)(a1 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(void *)(a1 + 24)
                                                                                                + 8) & 0xFFFFFF) << 32);
            if (CSCppArchitecture::matches((CSCppArchitecture *)&v22, 0xCuLL))
            {
              unsigned int v18 = 0;
              goto LABEL_16;
            }
            unint64_t v21 = *(unsigned int *)(*(void *)(a1 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(void *)(a1 + 24)
                                                                                                + 8) & 0xFFFFFF) << 32);
            BOOL v19 = CSCppArchitecture::matches((CSCppArchitecture *)&v21, 0x100000CuLL);
            uint64_t v15 = v23;
            unsigned int v18 = v24;
            if (v19)
            {
LABEL_16:
              if (*(unsigned char *)(v15 + v18))
              {
                do
                {
                  v17 += TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(&v23);
                  if (v17) {
                    int v20 = 272629824;
                  }
                  else {
                    int v20 = 272629760;
                  }
                  TRawSymbolOwnerData<Pointer64>::emplace_symbol(a2, v17 & 0xFFFFFFFFFFFFFFFELL, 0, (uint64_t)"$$$function-starts-fake-name$$$", (uint64_t)"$$$function-starts-fake-mangled-name$$$", v20, 0, a3);
                }
                while (*(unsigned char *)(v23 + v24));
              }
              return;
            }
            while (*(unsigned char *)(v23 + v24))
            {
              v17 += TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(&v23);
              TRawSymbolOwnerData<Pointer64>::emplace_symbol(a2, v17, 0, (uint64_t)"$$$function-starts-fake-name$$$", (uint64_t)"$$$function-starts-fake-mangled-name$$$", 272629760, 0, a3);
            }
          }
        }
      }
    }
  }
}

unsigned int *extract_debug_map_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(void *)(a1 + 24), "__LINKEDIT");
  uint64_t result = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symtab(*(void *)(a1 + 24));
  if (!result || *(_DWORD *)(*(void *)(a1 + 24) + 12) == 9) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = result[3];
  uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  if (result)
  {
    uint64_t v9 = v6[2];
    uint64_t v10 = *(void *)(a1 + 32) + *(void *)(v4 + 24) - *(void *)(v4 + 40);
    goto LABEL_7;
  }
  if ((*(unsigned char *)(a1 + 58) & 8) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v9 = v6[2];
LABEL_7:
    uint64_t v11 = v10 + v9;
    if (!v8) {
      return result;
    }
    goto LABEL_12;
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!*(unsigned char *)(a1 + 80)) {
    uint64_t v12 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 16) - v12;
  uint64_t v11 = v10 + v6[2];
  if (v8)
  {
LABEL_12:
    if (v6[5])
    {
      uint64_t v13 = v6[4];
      uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, v11, 16 * v8);
      if (result)
      {
        uint64_t v14 = (uint64_t)result;
        uint64_t v15 = v10 + v13;
        uint64_t v16 = v6[5];
        extract_debug_maps_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(a1, a2, (uint64_t)result, v8, v15, v16);
        return extract_relinked_subdylibs_in_debug_maps_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(a1, a2, v14, v8, v15, v16);
      }
    }
  }
  return result;
}

unint64_t TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::gc_support_flags(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned int *)(v2 + 20);
  int v11 = *(_DWORD *)(v2 + 16);
  uint64_t v12 = v2;
  uint64_t v13 = v2 + 32 + v3;
  uint64_t v14 = v2 + 32;
  unint64_t result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
  if (result)
  {
    unint64_t v5 = result;
    while (1)
    {
      if (*(_DWORD *)v5 == 25
        && (!strcmp("__OBJC", (const char *)(v5 + 8)) || !strcmp("__DATA", (const char *)(v5 + 8))))
      {
        uint64_t v6 = *(unsigned int *)(v5 + 64);
        if (v6) {
          break;
        }
      }
LABEL_11:
      unint64_t result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
      unint64_t v5 = result;
      if (!result) {
        return result;
      }
    }
    unint64_t v7 = v5 + 72;
    while (strncmp((const char *)v7, "__image_info", 0x10uLL) && strncmp((const char *)v7, "__objc_imageinfo", 0x10uLL))
    {
      v7 += 80;
      if (!--v6) {
        goto LABEL_11;
      }
    }
    if (*(void *)(v7 + 40) >= 8uLL && *(_DWORD *)(v7 + 48))
    {
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)))
      {
        uint64_t v8 = *(void *)(v7 + 32);
        uint64_t v9 = *(void *)(a1 + 32);
      }
      else
      {
        uint64_t v8 = *(void *)(a1 + 16);
        uint64_t v9 = *(unsigned int *)(v7 + 48);
      }
      uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v9 + v8, 8);
      if (v10) {
        return *(_DWORD *)(v10 + 4) | 1u;
      }
      else {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sort_and_filter_extracted_data<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)TRawSymbolOwnerData<Pointer64>::mutable_sorted_symbols(a2);
  v153 = 0;
  v154 = 0;
  v152 = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(_DWORD *)(v4 + 12);
  if (v6 == 9 || v6 == 10 && (*(_DWORD *)(a1 + 56) & 0x38000000) != 0x10000000)
  {
    size_t v28 = 0;
    unint64_t v29 = (void *)a2;
LABEL_34:
    uint64_t v31 = (uint64_t *)v29[20];
    uint64_t v32 = (uint64_t *)v29[21];
    if (v31 == v32) {
      goto LABEL_186;
    }
    do
    {
      uint64_t v34 = *v31;
      uint64_t v33 = v31[1];
      if (v28 >= v154)
      {
        unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v28 - v152) >> 3);
        unint64_t v36 = v35 + 1;
        if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v154 - v152) >> 3) > v36) {
          unint64_t v36 = 0x5555555555555556 * ((v154 - v152) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v154 - v152) >> 3) >= 0x555555555555555) {
          unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v37 = v36;
        }
        uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v154, v37);
        uint64_t v40 = &v38[24 * v35];
        *(void *)uint64_t v40 = v34;
        *((void *)v40 + 1) = v33;
        *((_DWORD *)v40 + 4) = 0;
        uint64_t v42 = v152;
        unint64_t v41 = v153;
        unint64_t v43 = v40;
        if (v153 != v152)
        {
          do
          {
            long long v44 = *(_OWORD *)(v41 - 24);
            *((_DWORD *)v43 - 2) = *((_DWORD *)v41 - 2);
            *(_OWORD *)(v43 - 24) = v44;
            v43 -= 24;
            v41 -= 24;
          }
          while (v41 != v42);
          unint64_t v41 = v152;
        }
        size_t v28 = v40 + 24;
        v152 = v43;
        v153 = v40 + 24;
        v154 = &v38[24 * v39];
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        *(void *)size_t v28 = v34;
        *((void *)v28 + 1) = v33;
        *((_DWORD *)v28 + 4) = 0;
        v28 += 24;
      }
      v153 = v28;
      v31 += 3;
    }
    while (v31 != v32);
    uint64_t v30 = (uint64_t)v152;
    goto LABEL_50;
  }
  uint64_t v7 = *(unsigned int *)(v4 + 20);
  LODWORD(v146) = *(_DWORD *)(v4 + 16);
  v147 = (void *)v4;
  uint64_t v148 = v4 + 32 + v7;
  uint64_t v150 = 0;
  uint64_t v151 = 0;
  uint64_t v149 = v4 + 32;
  while (1)
  {
    unint64_t v8 = TSectionIterator<SizeAndEndianness<Pointer64,LittleEndian>>::section((uint64_t)&v146);
    unint64_t v9 = v8;
    if (!v8) {
      break;
    }
    uint64_t v10 = *(void *)(v8 + 40);
    if (v10)
    {
      int v11 = *(_DWORD *)(v8 + 64);
      BOOL v27 = 0;
      if (!strcmp((const char *)(v8 + 16), "__TEXT"))
      {
        BOOL v12 = v11 == 11 || v11 == 0;
        if (v12 && (v11 & 0x80000400) != 0) {
          BOOL v27 = 1;
        }
      }
      if (!strstr((char *)(v9 + 16), "__LINKINFO"))
      {
        uint64_t v14 = *(void *)(v9 + 32) + v5;
        uint64_t v15 = v153;
        if (v153 >= v154)
        {
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v153 - v152) >> 3);
          unint64_t v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((v154 - v152) >> 3) > v18) {
            unint64_t v18 = 0x5555555555555556 * ((v154 - v152) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v154 - v152) >> 3) >= 0x555555555555555) {
            unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v19 = v18;
          }
          int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v154, v19);
          unint64_t v22 = &v20[24 * v17];
          *(void *)unint64_t v22 = v14;
          *((void *)v22 + 1) = v10;
          *((_DWORD *)v22 + 4) = v27;
          unsigned int v24 = v152;
          uint64_t v23 = v153;
          uint64_t v25 = v22;
          if (v153 != v152)
          {
            do
            {
              long long v26 = *(_OWORD *)(v23 - 24);
              *((_DWORD *)v25 - 2) = *((_DWORD *)v23 - 2);
              *(_OWORD *)(v25 - 24) = v26;
              v25 -= 24;
              v23 -= 24;
            }
            while (v23 != v24);
            uint64_t v23 = v152;
          }
          uint64_t v16 = v22 + 24;
          v152 = v25;
          v153 = v22 + 24;
          v154 = &v20[24 * v21];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *(void *)v153 = v14;
          *((void *)v15 + 1) = v10;
          uint64_t v16 = v15 + 24;
          *((_DWORD *)v15 + 4) = v27;
        }
        v153 = v16;
      }
    }
  }
  uint64_t v30 = (uint64_t)v152;
  size_t v28 = v153;
  unint64_t v29 = (void *)a2;
  if (v153 == v152) {
    goto LABEL_34;
  }
LABEL_50:
  if ((char *)v30 == v28) {
    goto LABEL_186;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *,false>(v30, (long long *)v28, (uint64_t)&v146, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v28[-v30] >> 3)), 1);
  uint64_t v46 = (uint64_t *)*v3;
  v147 = 0;
  uint64_t v148 = 0;
  long long v146 = 0;
  if ((unint64_t)v46 < v3[1])
  {
    char v47 = 0;
    int v48 = 0;
    unint64_t v49 = 0;
    uint64_t v50 = 0;
    while (2)
    {
      unint64_t v51 = (unint64_t)v46;
      while (2)
      {
        uint64_t v52 = (uint64_t *)(v51 + 104);
        while ((atomic_load_explicit((atomic_uint *volatile)(v51 + 28), memory_order_acquire) & 2) != 0)
        {
          v51 += 104;
          unint64_t v53 = v3[1];
          v52 += 13;
          if (v51 >= v53) {
            goto LABEL_87;
          }
        }
        unint64_t v54 = *(void *)v51;
        if (*(void *)v51 - v50 >= v49)
        {
          if (v153 == v152) {
            goto LABEL_67;
          }
          unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((v153 - v152) >> 3);
          v56 = v152;
          do
          {
            unint64_t v57 = v55 >> 1;
            v58 = (unint64_t *)&v56[24 * (v55 >> 1)];
            unint64_t v60 = *v58;
            v59 = (char *)(v58 + 3);
            v55 += ~(v55 >> 1);
            if (v54 < v60) {
              unint64_t v55 = v57;
            }
            else {
              v56 = v59;
            }
          }
          while (v55);
          if (v56 == v152 || v54 - *((void *)v56 - 3) >= *((void *)v56 - 2))
          {
LABEL_67:
            atomic_fetch_or_explicit((atomic_uint *volatile)(v51 + 28), 0x1000u, memory_order_relaxed);
            v51 += 104;
            unint64_t v53 = v3[1];
            char v47 = 1;
            if (v51 < v53) {
              continue;
            }
            unint64_t v29 = (void *)a2;
            goto LABEL_88;
          }
          int v48 = *((_DWORD *)v56 - 2);
          uint64_t v50 = *((void *)v56 - 3);
          unint64_t v49 = *((void *)v56 - 2);
        }
        break;
      }
      sort_inlined_functions<Pointer64>(v51);
      uint64_t v46 = (uint64_t *)v3[1];
      while (v52 != v46)
      {
        uint64_t v61 = *v52;
        v52 += 13;
        if (v61 != *(void *)v51)
        {
          uint64_t v46 = v52 - 13;
          break;
        }
      }
      if ((atomic_load_explicit((atomic_uint *volatile)(v51 + 28), memory_order_acquire) & 0x100) == 0)
      {
        unint64_t v62 = v49 + v50 - *(void *)v51;
        if (v46 == (uint64_t *)v3[1]) {
          unint64_t v63 = v49 + v50 - *(void *)v51;
        }
        else {
          unint64_t v63 = *v46 - *(void *)v51;
        }
        if (v63 < v62) {
          unint64_t v62 = v63;
        }
        unint64_t v64 = *(void *)(v51 + 8);
        if (v64 >= v62) {
          unint64_t v65 = v62;
        }
        else {
          unint64_t v65 = *(void *)(v51 + 8);
        }
        if (v64) {
          unint64_t v62 = v65;
        }
        *(void *)(v51 + 8) = v62;
      }
      atomic_store(atomic_load_explicit((atomic_uint *volatile)(v51 + 28), memory_order_acquire) | v48, (unsigned int *)(v51 + 28));
      TRawSymbolOwnerData<Pointer64>::aliases_for_symbol(a2, (unint64_t *)v51, (uint64_t *)__p);
      std::vector<TRawSymbol<Pointer64>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>>((uint64_t *)&v146, (uint64_t)v147, (uint64_t)__p[0], (uint64_t)__p[1], 0x4EC4EC4EC4EC4EC5 * (((char *)__p[1] - (char *)__p[0]) >> 3));
      v155 = __p;
      std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v155);
      unint64_t v53 = v3[1];
      if ((unint64_t)v46 < v53) {
        continue;
      }
      break;
    }
LABEL_87:
    unint64_t v29 = (void *)a2;
    if ((v47 & 1) == 0) {
      goto LABEL_89;
    }
LABEL_88:
    uint64_t v66 = std::remove_if[abi:ne180100]<std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__mem_fn<BOOL const (TRawSymbol<Pointer64>::*)(void)const>>(*v3, v53, (unsigned __int8 (*)(void *))TRawSymbol<Pointer64>::is_marked_for_deletion, 0);
    std::vector<TRawSymbol<Pointer64>>::erase((uint64_t)v3, v66, v3[1]);
  }
LABEL_89:
  if (v146 != v147)
  {
    __p[1] = 0;
    long long v145 = 0;
    __p[0] = 0;
    std::vector<TRawSymbol<Pointer64>>::reserve((uint64_t *)__p, 0x4EC4EC4EC4EC4EC5 * (v147 - v146) + 0x4EC4EC4EC4EC4EC5 * ((v3[1] - *v3) >> 3));
    std::__merge[abi:ne180100]<std::__less<void,void> &,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>>((void *)*v3, (void *)v3[1], v146, v147, (uint64_t *)__p);
    std::vector<TRawSymbol<Pointer64>>::__vdeallocate((void **)v3);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)__p;
    v3[2] = (uint64_t)v145;
    __p[0] = 0;
    __p[1] = 0;
    long long v145 = 0;
    v155 = __p;
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v155);
  }
  uint64_t v67 = v29[26];
  v68 = (long long *)v29[27];
  if ((uint64_t)v68 - v67 < 5121)
  {
    v69 = 0;
    uint64_t v71 = 0;
  }
  else
  {
    v69 = (char *)std::get_temporary_buffer[abi:ne180100]<TRawSourceInfo<Pointer64>>(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v68 - v67) >> 3));
    uint64_t v71 = v70;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(v67, v68, (uint64_t)&v155, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v68 - v67) >> 3), v69, v71, v45);
  if (v69) {
    operator delete(v69);
  }
  uint64_t v73 = (unint64_t *)v29[26];
  uint64_t v72 = (unint64_t *)v29[27];
  if (v73 == v72) {
    goto LABEL_138;
  }
  char v74 = 0;
  uint64_t v75 = 0;
  unint64_t v76 = 0;
  unint64_t v77 = *v73;
  uint64_t v78 = (unint64_t *)v29[26];
  while (v77 - v75 >= v76)
  {
    uint64_t v83 = *v3;
    uint64_t v84 = v3[1];
    uint64_t v85 = 0x4EC4EC4EC4EC4EC5 * ((v84 - *v3) >> 3);
    do
    {
      uint64_t v79 = v78;
      if (v84 != v83)
      {
        unint64_t v86 = v85;
        uint64_t v87 = v83;
        do
        {
          unint64_t v88 = v86 >> 1;
          long long v89 = (unint64_t *)(v87 + 104 * (v86 >> 1));
          unint64_t v91 = *v89;
          long long v90 = v89 + 13;
          v86 += ~(v86 >> 1);
          if (v77 < v91) {
            unint64_t v86 = v88;
          }
          else {
            uint64_t v87 = (uint64_t)v90;
          }
        }
        while (v86);
        if (v87 != v83)
        {
          uint64_t v93 = *(void *)(v87 - 104);
          unint64_t v92 = *(void *)(v87 - 96);
          if (v77 - v93 < v92)
          {
            unint64_t v76 = v92;
            uint64_t v75 = v93;
            goto LABEL_100;
          }
        }
      }
      *((_DWORD *)v79 + 7) |= 0x80000000;
      uint64_t v78 = v79 + 5;
      if (v79 + 5 == v72) {
        goto LABEL_125;
      }
      unint64_t v77 = *v78;
      char v74 = 1;
    }
    while (*v78 - v75 >= v76);
    unint64_t v80 = v76 - v77 + v75;
    v79[6] = v80;
    v81 = v79 + 10;
    if (v79 + 10 == v72) {
      goto LABEL_125;
    }
    char v74 = 1;
    unint64_t v82 = v77;
    v79 += 5;
LABEL_115:
    unint64_t v77 = *v81;
    if (*v81 == v82)
    {
      long long v94 = v81 + 5;
      while (1)
      {
        *((_DWORD *)v79 + 7) |= 0x80000000;
        v79[6] = v79[1];
        if (v94 == v72) {
          goto LABEL_125;
        }
        uint64_t v79 = v81;
        v81 += 5;
        unint64_t v95 = *v94;
        v94 += 5;
        unint64_t v77 = v95;
        if (v95 != v82)
        {
          unint64_t v80 = *(v94 - 9);
          uint64_t v79 = v94 - 10;
          uint64_t v78 = v94 - 5;
          char v74 = 1;
          goto LABEL_121;
        }
      }
    }
    uint64_t v78 = v81;
LABEL_121:
    unint64_t v96 = v77 - v82;
    if (v96 < v80) {
      v79[1] = v96;
    }
  }
  uint64_t v79 = v78;
LABEL_100:
  unint64_t v80 = v76 - v77 + v75;
  v79[1] = v80;
  v81 = v79 + 5;
  if (v79 + 5 != v72)
  {
    unint64_t v82 = v77;
    goto LABEL_115;
  }
  if ((v74 & 1) == 0) {
    goto LABEL_138;
  }
LABEL_125:
  long long v97 = v73 + 5;
  while ((*((_DWORD *)v97 - 3) & 0x80000000) == 0)
  {
    BOOL v12 = v97 == v72;
    v97 += 5;
    if (v12) {
      goto LABEL_138;
    }
  }
  v98 = v97 - 5;
  if (v97 - 5 != v72)
  {
    if (v97 != v72)
    {
      do
      {
        if ((*((_DWORD *)v97 + 7) & 0x80000000) == 0)
        {
          long long v99 = *(_OWORD *)v97;
          long long v100 = *((_OWORD *)v97 + 1);
          *((_DWORD *)v98 + 8) = *((_DWORD *)v97 + 8);
          *(_OWORD *)v98 = v99;
          *((_OWORD *)v98 + 1) = v100;
          v98 += 5;
        }
        v97 += 5;
      }
      while (v97 != v72);
      uint64_t v72 = (unint64_t *)v29[27];
    }
    if (v98 != v72) {
      v29[27] = v98;
    }
  }
LABEL_138:
  uint64_t v101 = v29[62];
  int v102 = (unint64_t *)v29[63];
  if ((unint64_t *)v101 == v102) {
    goto LABEL_185;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,char const*> *,false>(v101, v102, (uint64_t)&v155, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v102 - v101) >> 3)), 1);
  __p[0] = 0;
  __p[1] = 0;
  long long v145 = 0;
  std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve(__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29[63] - v29[62]) >> 3));
  int v104 = (uint64_t *)v29[62];
  uint64_t v103 = (uint64_t *)v29[63];
  if (v104 == v103)
  {
    uint64_t v103 = (uint64_t *)v29[62];
LABEL_166:
    int v129 = __p[1];
    uint64_t v130 = a2;
    goto LABEL_181;
  }
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  char v108 = 1;
  do
  {
    uint64_t v109 = (const char *)v104[2];
    if (v108)
    {
      char v108 = 0;
      uint64_t v107 = *v104;
      uint64_t v110 = v104[1];
      v104 += 3;
      uint64_t v105 = v110 + v107;
      uint64_t v106 = v109;
    }
    else
    {
      size_t v111 = strlen(v106);
      if (!strncmp(v106, v109, v111))
      {
        char v108 = 0;
        uint64_t v115 = *v104;
        uint64_t v116 = v104[1];
        v104 += 3;
        uint64_t v105 = v116 + v115;
      }
      else
      {
        uint64_t v112 = v105 - v107;
        uint64_t v113 = __p[1];
        if (__p[1] >= v145)
        {
          unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
          unint64_t v118 = v117 + 1;
          if (v117 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((v145 - (char *)__p[0]) >> 3) > v118) {
            unint64_t v118 = 0x5555555555555556 * ((v145 - (char *)__p[0]) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v145 - (char *)__p[0]) >> 3) >= 0x555555555555555) {
            unint64_t v119 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v119 = v118;
          }
          uint64_t v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v145, v119);
          uint64_t v122 = &v120[24 * v117];
          *(void *)uint64_t v122 = v107;
          *((void *)v122 + 1) = v112;
          *((void *)v122 + 2) = v106;
          uint64_t v124 = (char *)__p[0];
          uint64_t v123 = (char *)__p[1];
          int v125 = v122;
          if (__p[1] != __p[0])
          {
            do
            {
              long long v126 = *(_OWORD *)(v123 - 24);
              *((void *)v125 - 1) = *((void *)v123 - 1);
              *(_OWORD *)(v125 - 24) = v126;
              v125 -= 24;
              v123 -= 24;
            }
            while (v123 != v124);
            uint64_t v123 = (char *)__p[0];
          }
          uint64_t v114 = v122 + 24;
          __p[0] = v125;
          __p[1] = v122 + 24;
          long long v145 = &v120[24 * v121];
          if (v123) {
            operator delete(v123);
          }
        }
        else
        {
          *(void *)__p[1] = v107;
          v113[1] = v112;
          uint64_t v114 = v113 + 3;
          v113[2] = v106;
        }
        uint64_t v107 = 0;
        uint64_t v106 = 0;
        uint64_t v105 = 0;
        __p[1] = v114;
        uint64_t v103 = *(uint64_t **)(a2 + 504);
        char v108 = 1;
      }
    }
  }
  while (v104 != v103);
  if (!v106 || !v107 || !v105) {
    goto LABEL_166;
  }
  uint64_t v127 = v105 - v107;
  uint64_t v128 = __p[1];
  if (__p[1] >= v145)
  {
    unint64_t v131 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
    unint64_t v132 = v131 + 1;
    if (v131 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * ((v145 - (char *)__p[0]) >> 3) > v132) {
      unint64_t v132 = 0x5555555555555556 * ((v145 - (char *)__p[0]) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v145 - (char *)__p[0]) >> 3) >= 0x555555555555555) {
      unint64_t v133 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v133 = v132;
    }
    uint64_t v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v145, v133);
    unint64_t v135 = &v134[24 * v131];
    uint64_t v137 = &v134[24 * v136];
    *(void *)unint64_t v135 = v107;
    *((void *)v135 + 1) = v127;
    *((void *)v135 + 2) = v106;
    int v129 = v135 + 24;
    long long v139 = (char *)__p[0];
    long long v138 = (char *)__p[1];
    if (__p[1] == __p[0])
    {
      uint64_t v130 = a2;
    }
    else
    {
      uint64_t v130 = a2;
      do
      {
        long long v140 = *(_OWORD *)(v138 - 24);
        *((void *)v135 - 1) = *((void *)v138 - 1);
        *(_OWORD *)(v135 - 24) = v140;
        v135 -= 24;
        v138 -= 24;
      }
      while (v138 != v139);
      long long v138 = (char *)__p[0];
    }
    __p[0] = v135;
    __p[1] = v129;
    long long v145 = v137;
    if (v138) {
      operator delete(v138);
    }
  }
  else
  {
    *(void *)__p[1] = v107;
    v128[1] = v127;
    int v129 = v128 + 3;
    v128[2] = v106;
    uint64_t v130 = a2;
  }
  __p[1] = v129;
  uint64_t v103 = *(uint64_t **)(v130 + 504);
LABEL_181:
  int v141 = (long long *)__p[0];
  uint64_t v142 = *(void *)(v130 + 496);
  if (0xAAAAAAAAAAAAAAABLL * ((int64_t)((uint64_t)v129 - (unint64_t)__p[0]) >> 3) < 0xAAAAAAAAAAAAAAABLL
                                                                                                * (((uint64_t)v103 - v142) >> 3))
  {
    *(void *)(v130 + 504) = v142;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer64,char const*> *,TRangeValue<Pointer64,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>,0>(v141, (long long *)v129, (void **)(v130 + 496));
    int v141 = (long long *)__p[0];
  }
  if (v141)
  {
    __p[1] = v141;
    operator delete(v141);
  }
LABEL_185:
  __p[0] = &v146;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  size_t v28 = v152;
LABEL_186:
  if (v28)
  {
    v153 = v28;
    operator delete(v28);
  }
}

void sub_1B9012A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  *(void *)(v21 - 88) = &a11;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a11 = &a14;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void TRawSymbolOwnerData<Pointer64>::slide_to_segment_addresses(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(a2, a3, 0, &__p);
  if (a1 + 384 != a2 && *(void *)(a1 + 384) == *(void *)(a1 + 392)) {
    std::vector<CSCppSegmentRange>::__assign_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>((char *)(a1 + 384), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  uint64_t v7 = __p;
  if (__p == v25) {
    goto LABEL_22;
  }
  adjustVectorToMatchSegmentDeltas<CSCppSegmentRange,Pointer64>((char **)(a1 + 384), &__p);
  if ((a4 & 1) == 0)
  {
    adjustVectorToMatchSegmentDeltas<CSCppSectionRange,Pointer64>((char **)(a1 + 160), &__p);
    uint64_t v8 = *(void *)(a1 + 160);
    unint64_t v9 = *(unint64_t **)(a1 + 168);
    unint64_t v10 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - v8) >> 3));
    if (v9 == (unint64_t *)v8) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *,false>(v8, v9, (uint64_t)&v26, v11, 1);
  }
  adjustSymbolsToMatchSegmentDeltas<Pointer64>(a1 + 184, &__p);
  BOOL v12 = *(__n128 **)(a1 + 184);
  uint64_t v13 = *(__n128 **)(a1 + 192);
  unint64_t v14 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * (((char *)v13 - (char *)v12) >> 3));
  uint64_t v15 = v13 == v12 ? 0 : v14;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,false>(v12, v13, (uint64_t)&v26, v15, 1);
  adjustVectorToMatchSegmentDeltas<TRawSourceInfo<Pointer64>,Pointer64>((char **)(a1 + 208), &__p);
  uint64_t v16 = *(void *)(a1 + 208);
  unint64_t v17 = *(long long **)(a1 + 216);
  unint64_t v18 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v17 - v16) >> 3));
  uint64_t v19 = v17 == (long long *)v16 ? 0 : v18;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,false>(v16, v17, (uint64_t)&v26, v19, 1);
  uint64_t v20 = *(void *)(a1 + 240);
  uint64_t v7 = __p;
  if (!v20 || __p >= v25)
  {
LABEL_22:
    if (!v7) {
      return;
    }
    goto LABEL_23;
  }
  unint64_t v21 = *(void *)(a1 + 232);
  unint64_t v22 = v21 + v20;
  uint64_t v23 = (unint64_t *)__p;
  while (v21 < *v23 || v22 > v23[1] + *v23)
  {
    v23 += 3;
    if (v23 >= v25) {
      goto LABEL_22;
    }
  }
  *(void *)(a1 + 232) = v23[2] + v21;
  if (v7)
  {
LABEL_23:
    uint64_t v25 = v7;
    operator delete(v7);
  }
}

void sub_1B9012CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v7 = *(const void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = v8 - *(void *)a1;
  if (v8 != *(void *)a1 && *(void *)(a2 + 8) != *(void *)a2)
  {
    char v47 = 0;
    int v48 = 0;
    uint64_t v49 = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>(&v47, v7, v8, v9 >> 5);
    uint64_t v11 = *(const void **)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    unint64_t v13 = (v12 - *(void *)a2) >> 5;
    __n128 v45 = 0;
    uint64_t v46 = 0;
    __p = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>(&__p, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 8) - *(void *)a1;
    if (v14 != 32 && *(void *)(a2 + 8) - *(void *)a2 != 32)
    {
      unint64_t v15 = 126 - 2 * __clz((v48 - (unsigned char *)v47) >> 5);
      if (v48 == v47) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v15;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>((unint64_t *)v47, (unint64_t *)v48, (uint64_t)&v50, v16, 1);
      unint64_t v17 = 126 - 2 * __clz((v45 - (unsigned char *)__p) >> 5);
      if (v45 == __p) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v17;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>((unint64_t *)__p, (unint64_t *)v45, (uint64_t)&v50, v18, 1);
      uint64_t v14 = *(void *)(a1 + 8) - *(void *)a1;
    }
    uint64_t v19 = (unint64_t *)v47;
    uint64_t v20 = (CSCppSegmentRange *)__p;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve(a4, v14 >> 5);
    if (v19 != (unint64_t *)v48 && v20 != (CSCppSegmentRange *)v45)
    {
      do
      {
        unint64_t v21 = (const char *)*((void *)v20 + 3);
        if (!v21) {
          unint64_t v21 = (const char *)*((void *)v20 + 2);
        }
        unint64_t v22 = (const char *)v19[3];
        if (!v22) {
          unint64_t v22 = (const char *)v19[2];
        }
        if (!strncmp(v21, v22, 0x10uLL)) {
          goto LABEL_24;
        }
        if (CSCppSegmentRange::is_skippable((CSCppSegmentRange *)v19))
        {
          v19 += 4;
          if (v19 == (unint64_t *)v48) {
            break;
          }
          continue;
        }
        if (!CSCppSegmentRange::is_skippable(v20))
        {
LABEL_24:
          uint64_t v23 = *(void *)v20;
          unint64_t v25 = *v19;
          unint64_t v24 = v19[1];
          unint64_t v26 = *(void *)v20 - *v19;
          size_t v28 = (unint64_t *)a4[1];
          unint64_t v27 = (unint64_t)a4[2];
          if ((unint64_t)v28 >= v27)
          {
            unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (unsigned char *)*a4) >> 3);
            unint64_t v31 = v30 + 1;
            if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (void)*a4) >> 3);
            if (2 * v32 > v31) {
              unint64_t v31 = 2 * v32;
            }
            if (v32 >= 0x555555555555555) {
              unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v33 = v31;
            }
            uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)(a4 + 2), v33);
            unint64_t v36 = (unint64_t *)&v34[24 * v30];
            *unint64_t v36 = v25;
            v36[1] = v24;
            v36[2] = v26;
            uint64_t v38 = (char *)*a4;
            unint64_t v37 = (char *)a4[1];
            uint64_t v39 = v36;
            if (v37 != *a4)
            {
              do
              {
                long long v40 = *(_OWORD *)(v37 - 24);
                *(v39 - 1) = *((void *)v37 - 1);
                *(_OWORD *)(v39 - 3) = v40;
                v39 -= 3;
                v37 -= 24;
              }
              while (v37 != v38);
              unint64_t v37 = (char *)*a4;
            }
            unint64_t v29 = (char *)(v36 + 3);
            *a4 = v39;
            a4[1] = v36 + 3;
            a4[2] = &v34[24 * v35];
            if (v37) {
              operator delete(v37);
            }
          }
          else
          {
            *size_t v28 = v25;
            v28[1] = v24;
            unint64_t v29 = (char *)(v28 + 3);
            v28[2] = v26;
          }
          a4[1] = v29;
          a3 |= v23 != v25;
          v19 += 4;
        }
        if (v19 == (unint64_t *)v48) {
          break;
        }
        uint64_t v20 = (CSCppSegmentRange *)((char *)v20 + 32);
      }
      while (v20 != (CSCppSegmentRange *)v45);
    }
    if (a3)
    {
      unint64_t v41 = (unint64_t *)a4[1];
      unint64_t v42 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (unsigned char *)*a4) >> 3));
      if (v41 == *a4) {
        uint64_t v43 = 0;
      }
      else {
        uint64_t v43 = v42;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,false>((uint64_t)*a4, v41, (uint64_t)&v50, v43, 1);
    }
    else
    {
      a4[1] = *a4;
    }
    if (__p)
    {
      __n128 v45 = (char *)__p;
      operator delete(__p);
    }
    if (v47)
    {
      int v48 = (char *)v47;
      operator delete(v47);
    }
  }
}

void sub_1B9013028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1)) {
        char v6 = (const char *)*(a2 - 1);
      }
      else {
        char v6 = (const char *)*(a2 - 2);
      }
      if (a1[3]) {
        uint64_t v7 = (const char *)a1[3];
      }
      else {
        uint64_t v7 = (const char *)a1[2];
      }
      int v8 = strncmp(v6, v7, 0x10uLL);
      unint64_t v10 = *(v2 - 4);
      uint64_t v9 = v2 - 4;
      BOOL v11 = v10 < *a1;
      if (v8) {
        BOOL v11 = v8 < 0;
      }
      if (v11)
      {
        long long v13 = *(_OWORD *)a1;
        long long v12 = *((_OWORD *)a1 + 1);
        long long v14 = *((_OWORD *)v9 + 1);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *((_OWORD *)a1 + 1) = v14;
        *(_OWORD *)uint64_t v9 = v13;
        *((_OWORD *)v9 + 1) = v12;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      unint64_t v15 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8);
      unint64_t v16 = a1 + 12;
      if (a1 + 12 == v2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      long long v33 = v2;
      break;
  }
  while (1)
  {
    unint64_t v20 = v16[2];
    unint64_t v19 = v16[3];
    if (v19) {
      int v21 = (const char *)v16[3];
    }
    else {
      int v21 = (const char *)v16[2];
    }
    if (v15[3]) {
      BOOL v22 = (const char *)v15[3];
    }
    else {
      BOOL v22 = (const char *)v15[2];
    }
    int v23 = strncmp(v21, v22, 0x10uLL);
    unint64_t v24 = *v16;
    BOOL v25 = *v16 < *v15;
    if (v23) {
      BOOL v25 = v23 < 0;
    }
    if (v25)
    {
      unint64_t v34 = v16[1];
      uint64_t v26 = v17;
      while (1)
      {
        unint64_t v27 = (char *)a1 + v26;
        long long v28 = *(_OWORD *)((char *)a1 + v26 + 80);
        *((_OWORD *)v27 + 6) = *(_OWORD *)((char *)a1 + v26 + 64);
        *((_OWORD *)v27 + 7) = v28;
        if (v26 == -64) {
          break;
        }
        if (*((void *)v27 + 7)) {
          unint64_t v29 = (const char *)*((void *)v27 + 7);
        }
        else {
          unint64_t v29 = (const char *)*((void *)v27 + 6);
        }
        int v30 = strncmp(v21, v29, 0x10uLL);
        BOOL v31 = v24 < *((void *)v27 + 4);
        if (v30) {
          BOOL v31 = v30 < 0;
        }
        v26 -= 32;
        if (!v31)
        {
          long long v32 = (unint64_t *)((char *)a1 + v26 + 96);
          goto LABEL_33;
        }
      }
      long long v32 = a1;
LABEL_33:
      uint64_t v2 = v33;
      unint64_t *v32 = v24;
      v32[1] = v34;
      v32[2] = v20;
      v32[3] = v19;
      if (++v18 == 8) {
        return v16 + 4 == v33;
      }
    }
    unint64_t v15 = v16;
    v17 += 32;
    v16 += 4;
    if (v16 == v2) {
      return 1;
    }
  }
}

unsigned int *TDwarfInfoStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf32_compile_unit(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 < (v1 + 6)) {
    goto LABEL_29;
  }
  BOOL result = (unsigned int *)(*(void *)a1 + v1);
  unsigned int v8 = result[1];
  if ((unsigned __int16)v8 - 6 < 0xFFFFFFFC) {
    return 0;
  }
  uint64_t v9 = *result;
  if (v9 == -1) {
    return 0;
  }
  unint64_t v10 = 11;
  if ((unsigned __int16)v8 >= 5u) {
    unint64_t v10 = 12;
  }
  if (v9 + 4 < v10) {
    return 0;
  }
  unint64_t v11 = (v1 + v9 + 4);
  if (v11 > v1 && v2 >= v11)
  {
    uint64_t v13 = 7;
    if ((unsigned __int16)v8 < 5u) {
      uint64_t v13 = 10;
    }
    if (*((unsigned char *)result + v13) != 8)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        return 0;
      }
      __int16 v16 = 0;
      uint64_t v3 = MEMORY[0x1E4F14500];
      uint64_t v4 = "Compile unit with bad address_size\n";
      char v5 = (uint8_t *)&v16;
      goto LABEL_4;
    }
    if ((unsigned __int16)v8 < 5u || (v8 & 0xFF0000) == 0x10000)
    {
      *(_DWORD *)(a1 + 8) = v11;
      return result;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      __int16 v15 = 0;
      uint64_t v3 = MEMORY[0x1E4F14500];
      uint64_t v4 = "Unsupported compile unit type\n";
      char v5 = (uint8_t *)&v15;
      goto LABEL_4;
    }
  }
  else
  {
LABEL_29:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      __int16 v14 = 0;
      uint64_t v3 = MEMORY[0x1E4F14500];
      uint64_t v4 = "Out of bounds compile unit\n";
      char v5 = (uint8_t *)&v14;
LABEL_4:
      _os_log_impl(&dword_1B8F92000, v3, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
    }
  }
  return 0;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(uint64_t result, unsigned int a2)
{
  if (*(void *)(result + 24) < (unint64_t)a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Attempt to set cursor outside bounds", 36);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v6, &v4);
    Exception::Exception(v3, &v4);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v3);
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void sub_1B901394C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::abbrev_table@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  long long v4 = a1 + 4;
  uint64_t v5 = operator new(0x58uLL);
  v5[1] = 0;
  v5[2] = 0;
  *uint64_t v5 = &unk_1F12C7E48;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  v5[3] = &unk_1F12C7E98;
  v5[10] = v4;
  *a2 = v5 + 3;
  a2[1] = v5;
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
  if (result) {
    TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::abbrev(a1);
  }
  return result;
}

void sub_1B9013A60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void parse_dies<Dwarf<Dwarf32,Pointer64,LittleEndian>,TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, char a6, void *a7, uint64_t (***a8)(void, std::vector<std::string>::pointer), void *a9, void *a10, void *a11)
{
  char v12 = a6;
  uint64_t v13 = a4;
  unint64_t v103 = *(void *)(a2 + 56);
  int v104 = *(_OWORD **)(a2 + 48);
  uint64_t v17 = *(void **)(a2 + 80);
  __int16 v16 = *(std::__shared_weak_count **)(a2 + 88);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = v17[7];
  uint64_t v128 = 0;
  int v129 = 0;
  uint64_t v130 = 0;
  int v125 = 0;
  long long v126 = 0;
  uint64_t v127 = 0;
  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a2 + 24))
  {
    long long v99 = v16;
    int v102 = v17;
    while (1)
    {
      unint64_t v19 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a2);
      if (!v19)
      {
        unint64_t v24 = v126;
        if (v125 != v126)
        {
          --v126;
          if (v125 != v24 - 1)
          {
            uint64_t v25 = *(v24 - 2);
            if (v25)
            {
              uint64_t v26 = v24 - 3;
              do
              {
                if (!*(unsigned char *)(v25 + 88)) {
                  break;
                }
                long long v126 = v26 + 1;
                if (v26 + 1 == v125) {
                  break;
                }
                uint64_t v27 = *v26--;
                uint64_t v25 = v27;
              }
              while (v27);
            }
          }
        }
        goto LABEL_163;
      }
      uint64_t v20 = v17[1];
      if (v19 >= (v17[2] - v20) >> 3 || (uint64_t v21 = *(void *)(v20 + 8 * v19)) == 0)
      {
LABEL_168:
        __int16 v16 = v99;
        if (v125)
        {
          long long v126 = v125;
          operator delete(v125);
        }
        break;
      }
      int v22 = *(unsigned __int8 *)(v21 + 12);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 24))(v21) == 1)
      {
        *(_WORD *)(v18 + 76) = 0;
        *(void *)(v18 + 128) = *(void *)(v18 + 120);
        *(void *)(v18 + 16) = -1;
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v21 + 16))(v21, v13, *(unsigned __int16 *)(a2 + 36));
        LODWORD(v112) = 0;
        for (uint64_t i = parse_die_stream_for_specification<Dwarf<Dwarf32,Pointer64,LittleEndian>,TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>,std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>(v18, a2, a3, &v112);
              i;
              uint64_t i = parse_die_stream_for_specification<Dwarf<Dwarf32,Pointer64,LittleEndian>,TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>,std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>(v18, i, a3, &v112))
        {
          ;
        }
        if ((*(unsigned char *)(v18 + 76) & 0xC) == 0 || (*(unsigned char *)(v18 + 76) & 1) == 0)
        {
          if (v22)
          {
            BOOL v31 = v126;
            if (v126 < (uint64_t *)v127) {
              goto LABEL_41;
            }
            uint64_t v32 = v126 - v125;
            if ((unint64_t)(v32 + 1) >> 61) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v33 = (v127 - (char *)v125) >> 2;
            if (v33 <= v32 + 1) {
              unint64_t v33 = v32 + 1;
            }
            if ((unint64_t)(v127 - (char *)v125) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v33;
            }
            if (v34) {
              long long v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v127, v34);
            }
            else {
              long long v35 = 0;
            }
            uint64_t v52 = (uint64_t *)&v35[8 * v32];
            uint64_t *v52 = 0;
            long long v36 = v52 + 1;
            v69 = v125;
            unint64_t v53 = v126;
            if (v126 != v125)
            {
              do
              {
                uint64_t v70 = *--v53;
                *--uint64_t v52 = v70;
              }
              while (v53 != v69);
              goto LABEL_159;
            }
            goto LABEL_160;
          }
        }
        else
        {
          uint64_t v123 = 0;
          uint64_t v124 = 0;
          int v122 = 0;
          int v37 = resolve_parsed_data_names<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v18, &v124, &v123);
          int v122 = v37;
          if ((*(_WORD *)(v18 + 76) & 2) != 0)
          {
            if ((*(_WORD *)(v18 + 76) & 0x8000) != 0)
            {
              uint64_t v38 = *(void *)v18;
              uint64_t v39 = *(void *)v18 + *(unsigned int *)(v18 + 80);
            }
            else
            {
              uint64_t v38 = *(void *)v18;
              uint64_t v39 = *(void *)(v18 + 8);
            }
            uint64_t v46 = (void *)(v39 - v38);
            if (v46)
            {
              v98 = v46;
              int v122 = v37 | 0x100;
LABEL_66:
              char v47 = (void *)(*(void *)v18 + a1);
              if (a7) {
                char v47 = (void *)TAddressRelocator<Pointer64>::relocate(a7, *(void *)v18 + a1);
              }
              long long v121 = 0uLL;
              if (*(_DWORD *)(v21 + 8) == 29)
              {
                int v48 = 0;
                if (TDwarfAbbrevData<Dwarf<Dwarf32,Pointer64,LittleEndian>>::has_inlined_info(v18, *(unsigned __int16 *)(a2 + 36))&& (v12 & 1) == 0)
                {
                  unsigned int v49 = *(unsigned __int16 *)(a2 + 36);
                  unsigned int v50 = *(unsigned __int16 *)(v18 + 76);
                  if (v49 < 5)
                  {
                    if ((v50 & 0x400) != 0 && *(_DWORD *)(v18 + 64)) {
                      goto LABEL_117;
                    }
LABEL_118:
                    char v74 = 0;
                  }
                  else
                  {
                    if ((v50 & 0x400) == 0) {
                      goto LABEL_118;
                    }
LABEL_117:
                    char v74 = path_from_file_index<Pointer64>(&v128, *(_DWORD *)(v18 + 64), *(unsigned int *)(a2 + 8), a5, v49);
                    unsigned int v50 = *(unsigned __int16 *)(v18 + 76);
                  }
                  *(void *)&long long v121 = v74;
                  *((int8x8_t *)&v121 + 1) = vbic_s8(*(int8x8_t *)(v18 + 68), (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v50), (int8x8_t)0x100000000800)));
                  int v48 = 1;
                }
              }
              else
              {
                int v48 = 0;
              }
              uint64_t v75 = *(void **)(v18 + 120);
              unint64_t v76 = *(void **)(v18 + 128);
              if (v75 == v76)
              {
                unsigned int v87 = v122;
                uint64_t v112 = v47;
                uint64_t v113 = v98;
                unint64_t v114 = 0;
                uint64_t v115 = 0;
                uint64_t v116 = v124;
                uint64_t v117 = v123;
                uint64_t v120 = 0;
                long long v118 = 0u;
                memset(v119, 0, 25);
                if (v48)
                {
                  long long v118 = v121;
                  unsigned int v87 = v122 | 0x80000000;
                }
                HIDWORD(v115) = v87;
                record_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>(&v112, 1, v21, a9, &v125);
                char v12 = a6;
                uint64_t v17 = v102;
                v131[0] = (void **)v119;
                std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v131);
                uint64_t v13 = a4;
              }
              else
              {
                uint64_t v112 = 0;
                uint64_t v113 = 0;
                unint64_t v114 = 0;
                if (v48) {
                  unint64_t v77 = &v121;
                }
                else {
                  unint64_t v77 = 0;
                }
                do
                {
                  v131[0] = 0;
                  uint64_t v78 = (void **)(*v75 + a1);
                  if (a7) {
                    uint64_t v78 = (void **)TAddressRelocator<Pointer64>::relocate(a7, (unint64_t)v78);
                  }
                  v131[0] = v78;
                  uint64_t v111 = 0;
                  uint64_t v79 = v75[1] - *v75;
                  uint64_t v111 = v79;
                  if (v79)
                  {
                    uint64_t v109 = v77;
                    unint64_t v80 = v113;
                    if ((unint64_t)v113 >= v114)
                    {
                      uint64_t v84 = std::vector<TRawSymbol<Pointer64>>::__emplace_back_slow_path<TRawSymbol<Pointer64>::dwarf_ranges_tag,unsigned long long &,unsigned long long &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo *>((uint64_t *)&v112, (uint64_t)&v110, v131, &v111, &v124, &v123, &v122, &v109);
                    }
                    else
                    {
                      uint64_t v82 = v123;
                      uint64_t v81 = v124;
                      int v83 = v122;
                      *uint64_t v113 = v78;
                      v80[1] = v79;
                      v80[2] = 0;
                      v80[3] = 0;
                      v80[4] = v81;
                      v80[5] = v82;
                      *((_OWORD *)v80 + 3) = 0u;
                      v80[12] = 0;
                      *((_OWORD *)v80 + 4) = 0u;
                      *(_OWORD *)((char *)v80 + 73) = 0u;
                      if (v48)
                      {
                        *((_OWORD *)v80 + 3) = v121;
                        v83 |= 0x80000000;
                      }
                      *((_DWORD *)v80 + 7) = v83;
                      *((unsigned char *)v80 + 88) = 1;
                      uint64_t v84 = (uint64_t)(v80 + 13);
                    }
                    uint64_t v113 = (void *)v84;
                  }
                  v75 += 2;
                }
                while (v75 != v76);
                record_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>(v112, 0x4EC4EC4EC4EC4EC5 * (v113 - v112), v21, a9, &v125);
                char v12 = a6;
                uint64_t v13 = a4;
                uint64_t v17 = v102;
                if (v22)
                {
                  uint64_t v85 = v126;
                  if (v126 >= (uint64_t *)v127)
                  {
                    uint64_t v88 = v126 - v125;
                    if ((unint64_t)(v88 + 1) >> 61) {
                      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v89 = (v127 - (char *)v125) >> 2;
                    if (v89 <= v88 + 1) {
                      unint64_t v89 = v88 + 1;
                    }
                    if ((unint64_t)(v127 - (char *)v125) >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v90 = v89;
                    }
                    if (v90) {
                      unint64_t v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v127, v90);
                    }
                    else {
                      unint64_t v91 = 0;
                    }
                    unint64_t v92 = (uint64_t *)&v91[8 * v88];
                    *unint64_t v92 = 0;
                    unint64_t v86 = v92 + 1;
                    long long v94 = v125;
                    uint64_t v93 = v126;
                    if (v126 != v125)
                    {
                      do
                      {
                        uint64_t v95 = *--v93;
                        *--unint64_t v92 = v95;
                      }
                      while (v93 != v94);
                      uint64_t v93 = v125;
                    }
                    int v125 = v92;
                    long long v126 = v86;
                    uint64_t v127 = &v91[8 * v90];
                    if (v93) {
                      operator delete(v93);
                    }
                  }
                  else
                  {
                    *long long v126 = 0;
                    unint64_t v86 = v85 + 1;
                  }
                  long long v126 = v86;
                }
                v131[0] = (void **)&v112;
                std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v131);
              }
              goto LABEL_163;
            }
          }
          else if (*(void *)(v18 + 120) != *(void *)(v18 + 128))
          {
            v98 = 0;
            goto LABEL_66;
          }
          if (v22)
          {
            unint64_t v51 = v126;
            if (v126 >= (uint64_t *)v127)
            {
              uint64_t v71 = v126 - v125;
              unint64_t v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 61) {
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v73 = v127 - (char *)v125;
              if ((v127 - (char *)v125) >> 2 > v72) {
                unint64_t v72 = v73 >> 2;
              }
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v72;
              }
              if (v34) {
                long long v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v127, v34);
              }
              else {
                long long v35 = 0;
              }
              uint64_t v52 = (uint64_t *)&v35[8 * v71];
              uint64_t *v52 = 0;
              long long v36 = v52 + 1;
              unint64_t v96 = v125;
              unint64_t v53 = v126;
              if (v126 != v125)
              {
                do
                {
                  uint64_t v97 = *--v53;
                  *--uint64_t v52 = v97;
                }
                while (v53 != v96);
                goto LABEL_159;
              }
              goto LABEL_160;
            }
            *long long v126 = 0;
            long long v126 = v51 + 1;
          }
        }
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 24))(v21) == 2)
        {
          *(_WORD *)(v18 + 76) = 0;
          *(void *)(v18 + 128) = *(void *)(v18 + 120);
          *(void *)(v18 + 16) = -1;
          *(void *)(v18 + 104) = 0;
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v21 + 16))(v21, v13, *(unsigned __int16 *)(a2 + 36));
          TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_compilation_unit_pc_ranges(v21);
          if (v22)
          {
            long long v28 = v126;
            if (v126 >= (uint64_t *)v127)
            {
              uint64_t v42 = v126 - v125;
              if ((unint64_t)(v42 + 1) >> 61) {
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v43 = (v127 - (char *)v125) >> 2;
              if (v43 <= v42 + 1) {
                unint64_t v43 = v42 + 1;
              }
              if ((unint64_t)(v127 - (char *)v125) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v44 = v43;
              }
              if (v44) {
                __n128 v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v127, v44);
              }
              else {
                __n128 v45 = 0;
              }
              v56 = (uint64_t *)&v45[8 * v42];
              uint64_t *v56 = 0;
              unint64_t v29 = v56 + 1;
              v58 = v125;
              unint64_t v57 = v126;
              if (v126 != v125)
              {
                do
                {
                  uint64_t v59 = *--v57;
                  *--v56 = v59;
                }
                while (v57 != v58);
                unint64_t v57 = v125;
              }
              int v125 = v56;
              long long v126 = v29;
              uint64_t v127 = &v45[8 * v44];
              if (v57) {
                operator delete(v57);
              }
            }
            else
            {
              *long long v126 = 0;
              unint64_t v29 = v28 + 1;
            }
            long long v126 = v29;
          }
          if ((v12 & 1) == 0)
          {
            int v129 = v128;
            long long v60 = v104[1];
            v108[0] = *v104;
            v108[1] = v60;
            uint64_t v61 = "";
            if ((*(unsigned char *)(v18 + 76) & 0x20) != 0) {
              uint64_t v61 = *(const char **)(v18 + 40);
            }
            parse_line_numbers<Dwarf<Dwarf32,Pointer64,LittleEndian>>((uint64_t)v108, v103, *(_DWORD *)(v18 + 52), v18 + 108, v61, a1, a5, a7, a8, (uint64_t)&v128, a10);
            if (*(void *)(v18 + 144))
            {
              uint64_t v112 = *(void **)(v18 + 144);
              unint64_t v62 = *(void **)(v18 + 120);
              unint64_t v63 = *(void **)(v18 + 128);
              if (v62 == v63)
              {
                int v65 = *(unsigned __int16 *)(v18 + 76);
                if ((~v65 & 3) == 0)
                {
                  *(void *)&long long v121 = 0;
                  unint64_t v66 = *(void *)v18 + a1;
                  if (a7)
                  {
                    unint64_t v66 = TAddressRelocator<Pointer64>::relocate(a7, v66);
                    LOWORD(v65) = *(_WORD *)(v18 + 76);
                  }
                  *(void *)&long long v121 = v66;
                  v131[0] = 0;
                  if ((v65 & 0x8000) != 0)
                  {
                    uint64_t v67 = *(void *)v18;
                    uint64_t v68 = *(void *)v18 + *(unsigned int *)(v18 + 80);
                  }
                  else
                  {
                    uint64_t v67 = *(void *)v18;
                    uint64_t v68 = *(void *)(v18 + 8);
                  }
                  v131[0] = (void **)(v68 - v67);
                  std::deque<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*&>(a11, &v121, (uint64_t *)v131, (uint64_t *)&v112);
                }
              }
              else
              {
                do
                {
                  *(void *)&long long v121 = 0;
                  unint64_t v64 = *v62 + a1;
                  if (a7) {
                    unint64_t v64 = TAddressRelocator<Pointer64>::relocate(a7, v64);
                  }
                  *(void *)&long long v121 = v64;
                  v131[0] = 0;
                  v131[0] = (void **)(v62[1] - *v62);
                  std::deque<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*&>(a11, &v121, (uint64_t *)v131, (uint64_t *)&v112);
                  v62 += 2;
                }
                while (v62 != v63);
              }
              uint64_t v17 = v102;
            }
          }
          goto LABEL_163;
        }
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v21 + 16))(v21, v13, *(unsigned __int16 *)(a2 + 36));
        if (v22)
        {
          BOOL v31 = v126;
          if (v126 < (uint64_t *)v127)
          {
LABEL_41:
            *BOOL v31 = 0;
            long long v36 = v31 + 1;
LABEL_162:
            long long v126 = v36;
            goto LABEL_163;
          }
          uint64_t v40 = v126 - v125;
          if ((unint64_t)(v40 + 1) >> 61) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v41 = (v127 - (char *)v125) >> 2;
          if (v41 <= v40 + 1) {
            unint64_t v41 = v40 + 1;
          }
          if ((unint64_t)(v127 - (char *)v125) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v41;
          }
          if (v34) {
            long long v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v127, v34);
          }
          else {
            long long v35 = 0;
          }
          uint64_t v52 = (uint64_t *)&v35[8 * v40];
          uint64_t *v52 = 0;
          long long v36 = v52 + 1;
          unint64_t v54 = v125;
          unint64_t v53 = v126;
          if (v126 != v125)
          {
            do
            {
              uint64_t v55 = *--v53;
              *--uint64_t v52 = v55;
            }
            while (v53 != v54);
LABEL_159:
            unint64_t v53 = v125;
          }
LABEL_160:
          int v125 = v52;
          long long v126 = v36;
          uint64_t v127 = &v35[8 * v34];
          if (v53) {
            operator delete(v53);
          }
          goto LABEL_162;
        }
      }
LABEL_163:
      if (*(_DWORD *)(a2 + 8) == *(_DWORD *)(a2 + 24)) {
        goto LABEL_168;
      }
    }
  }
  if (v128)
  {
    int v129 = v128;
    operator delete(v128);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_1B9014520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  unint64_t v41 = *(void **)(v39 - 160);
  if (v41)
  {
    *(void *)(v39 - 152) = v41;
    operator delete(v41);
  }
  uint64_t v42 = *(void **)(v39 - 136);
  if (v42)
  {
    *(void *)(v39 - 128) = v42;
    operator delete(v42);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<TRawSourceInfo<Pointer64>>::reserve(void **a1, unint64_t a2)
{
  long long v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(v3, a2);
    uint64_t v7 = &v6[v5];
    uint64_t v9 = &v6[40 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    char v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 40);
        long long v14 = *(_OWORD *)(v10 - 24);
        *((_DWORD *)v12 - 2) = *((_DWORD *)v10 - 2);
        *(_OWORD *)(v12 - 24) = v14;
        *(_OWORD *)(v12 - 40) = v13;
        v12 -= 40;
        v10 -= 40;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  long long v13 = (void *)(a1 + 16);
  unint64_t v11 = operator new(0x28uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v11[4] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t v11 = *v21;
LABEL_38:
    *uint64_t v21 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *v13;
  void *v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B90148F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(uint64_t *a1)
{
  uint64_t v1 = *((unsigned int *)a1 + 2);
  uint64_t v2 = a1[3];
  if (v2 <= v1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Cursor overflow, attempt to read ULEB", 37);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v16, &v14);
    Exception::Exception(v13, &v14);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v13);
  }
  uint64_t v3 = *a1;
  unint64_t v4 = (char *)(*a1 + v1);
  int v6 = *v4;
  int64_t v5 = v4 + 1;
  uint64_t v7 = v6;
  if (v6 < 0)
  {
    unint64_t v8 = v3 + v2;
    v7 &= 0x7Fu;
    int v9 = 7;
    do
    {
      if ((unint64_t)v5 >= v8) {
        break;
      }
      char v10 = *v5++;
      v7 |= (unint64_t)(v10 & 0x7F) << v9;
      v9 += 7;
    }
    while (v10 < 0);
  }
  *((_DWORD *)a1 + 2) = v5 - v3;
  return v7;
}

void sub_1B9014A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::abbrev(uint64_t *a1)
{
  int v2 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(a1);
  __p = 0;
  unint64_t v22 = 0;
  int v23 = 0;
  do
  {
    int v3 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    int v4 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    int v5 = v4;
    if (v3) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    char v7 = !v6;
    if (!v6)
    {
      unint64_t v8 = v22;
      if (v22 >= v23)
      {
        uint64_t v10 = (v22 - (unsigned char *)__p) >> 2;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v23 - (unsigned char *)__p;
        if ((v23 - (unsigned char *)__p) >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)&v23, v13);
        uint64_t v16 = &v14[4 * v10];
        *(_WORD *)uint64_t v16 = v3;
        *((_WORD *)v16 + 1) = v5;
        unint64_t v18 = (char *)__p;
        unint64_t v17 = v22;
        size_t v19 = v16;
        if (v22 != __p)
        {
          do
          {
            int v20 = *((_DWORD *)v17 - 1);
            v17 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          while (v17 != v18);
          unint64_t v17 = (char *)__p;
        }
        int v9 = v16 + 4;
        __p = v19;
        unint64_t v22 = v16 + 4;
        int v23 = &v14[4 * v15];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(_WORD *)unint64_t v22 = v3;
        *((_WORD *)v8 + 1) = v4;
        int v9 = v8 + 4;
      }
      unint64_t v22 = v9;
    }
    if (v5 == 33) {
      TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    }
  }
  while ((v7 & 1) != 0);
  if (v2 > 28)
  {
    if (v2 != 46 && v2 != 29) {
      goto LABEL_34;
    }
  }
  else if (v2 != 3)
  {
    if (v2 == 17 && has_minimum_source_info_attributes(&__p)) {
      operator new();
    }
LABEL_34:
    operator new();
  }
  operator new();
}

void sub_1B9014C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x1BA9D1CD0](v11, 0x10A1C400922EF30);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12C7E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12C7E48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1BA9D1CD0);
}

uint64_t std::__shared_ptr_emplace<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfAbbrevTable(CSCppDwarfAbbrevTable *a1)
{
  CSCppDwarfAbbrevTable::~CSCppDwarfAbbrevTable(a1);

  JUMPOUT(0x1BA9D1CD0);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(uint64_t *a1)
{
  unint64_t v1 = *((unsigned int *)a1 + 2);
  if (a1[3] <= v1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read uint8", 38);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  uint64_t v2 = *a1;
  *((_DWORD *)a1 + 2) = v1 + 1;
  return *(unsigned __int8 *)(v2 + v1);
}

void sub_1B9014E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSymbolAbbrev(uint64_t result, int a2, char a3, void *a4, uint64_t a5)
{
  uint64_t v5 = result;
  *(_DWORD *)(result + 8) = a2;
  *(unsigned char *)(result + 12) = a3;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(void *)(result + 16) = *a4;
  *a4 = 0;
  uint64_t v6 = *(void *)(result + 24);
  *(void *)(result + 24) = a4[1];
  a4[1] = v6;
  uint64_t v7 = *(void *)(result + 32);
  *(void *)(result + 32) = a4[2];
  a4[2] = v7;
  *(void *)uint64_t result = &unk_1F12C7ED0;
  *(void *)(result + 64) = a5;
  *(_WORD *)(result + 72) = 0;
  uint64_t v8 = *(unsigned __int16 **)(result + 16);
  if (v8 != *(unsigned __int16 **)(result + 24))
  {
    unsigned int v9 = *v8;
    if (v9 <= 0x54)
    {
      if (*v8 > 0x11u)
      {
        switch(v9)
        {
          case 0x12u:
            __int16 v14 = *(_WORD *)(result + 72);
            *(_WORD *)(result + 72) = v14 | 2;
            int v13 = v8[1];
            if ((v13 - 41) >= 4 && v13 != 27)
            {
              if (v13 == 1) {
                operator new();
              }
              *(_WORD *)(v5 + 72) = v14 | 0x8002;
LABEL_32:
              read_action_for_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v13);
            }
            operator new();
          case 0x31u:
            *(_WORD *)(result + 72) |= 0x200u;
            break;
          case 0x47u:
            *(_WORD *)(result + 72) |= 0x10u;
            break;
          default:
            goto LABEL_44;
        }
        read_action_for_ref_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v8[1]);
      }
      if (v9 != 3)
      {
        if (v9 == 17)
        {
          *(_WORD *)(result + 72) |= 1u;
          int v11 = v8[1];
          if ((v11 - 41) < 4 || v11 == 27) {
            operator new();
          }
          if (v11 == 1) {
            operator new();
          }
LABEL_45:
          skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v11);
        }
        goto LABEL_44;
      }
      *(_WORD *)(result + 72) |= 8u;
    }
    else
    {
      if (*v8 <= 0x6Du)
      {
        switch(*v8)
        {
          case 'U':
            operator new();
          case 'W':
            *(_WORD *)(result + 72) |= 0x1000u;
            int v13 = v8[1];
            goto LABEL_32;
          case 'X':
            *(_WORD *)(result + 72) |= 0x400u;
            int v13 = v8[1];
            goto LABEL_32;
          case 'Y':
            *(_WORD *)(result + 72) |= 0x800u;
            int v13 = v8[1];
            goto LABEL_32;
          default:
            goto LABEL_44;
        }
      }
      if (*v8 > 0x3FE2u)
      {
        if (v9 == 16355)
        {
          *(_WORD *)(result + 72) |= 0x80u;
          operator new();
        }
        if (v9 == 16359) {
          read_action_for_flag_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v8[1]);
        }
        goto LABEL_44;
      }
      if (v9 != 110 && v9 != 8199)
      {
LABEL_44:
        int v11 = v8[1];
        goto LABEL_45;
      }
      *(_WORD *)(result + 72) |= 4u;
    }
    read_action_for_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v8[1]);
  }
  return result;
}

void sub_1B9015558(_Unwind_Exception *a1)
{
  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(v1);
  _Unwind_Resume(a1);
}

void skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1)
{
  switch(a1)
  {
    case 1:
    case 7:
    case 20:
    case 32:
    case 36:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
    case 18:
    case 38:
    case 42:
      operator new();
    case 6:
    case 14:
    case 19:
    case 23:
    case 28:
    case 29:
    case 31:
    case 40:
    case 44:
      operator new();
    case 8:
      operator new();
    case 9:
    case 24:
      operator new();
    case 10:
      operator new();
    case 11:
    case 12:
    case 17:
    case 37:
    case 41:
      operator new();
    case 13:
    case 15:
    case 21:
    case 26:
    case 27:
    case 34:
    case 35:
      operator new();
    case 16:
      operator new();
    case 22:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"DW_FORM_indirect not handled yet... ", 36);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, &v4);
      Exception::Exception(v3, &v4);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v3);
    case 25:
    case 33:
      operator new();
    case 30:
      operator new();
    case 39:
    case 43:
      operator new();
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Unhandled dwarf attribute ", 26);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, &v4);
      Exception::Exception(v3, &v4);
      uint64_t v2 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v2, (uint64_t)v3);
  }
}

void sub_1B90159E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void read_action_for_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1)
{
  switch(a1)
  {
    case 5:
      operator new();
    case 6:
      operator new();
    case 7:
      operator new();
    case 8:
    case 9:
    case 10:
    case 12:
    case 14:
      break;
    case 11:
      operator new();
    case 13:
      operator new();
    case 15:
      operator new();
    default:
      if (a1 == 23) {
        operator new();
      }
      return;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Unhandled form in read data binding ", 36);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
  Exception::Exception(v2, &v3);
  exception = __cxa_allocate_exception(0x20uLL);
  Exception::Exception(exception, (uint64_t)v2);
}

void sub_1B9015D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void read_action_for_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1)
{
  if (a1 <= 36)
  {
    switch(a1)
    {
      case 8:
        operator new();
      case 14:
        operator new();
      case 26:
LABEL_3:
        operator new();
    }
  }
  else if ((a1 - 37) < 4)
  {
    goto LABEL_3;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Unhandled form in read string binding ", 38);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
  Exception::Exception(v2, &v3);
  exception = __cxa_allocate_exception(0x20uLL);
  Exception::Exception(exception, (uint64_t)v2);
}

void sub_1B9015F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void read_action_for_ref_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1)
{
  switch(a1)
  {
    case 16:
      operator new();
    case 17:
      operator new();
    case 18:
      operator new();
    case 19:
      operator new();
    case 20:
      operator new();
    case 21:
      operator new();
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Unhandled form in read ref binding ", 35);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
      Exception::Exception(v2, &v3);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v2);
  }
}

void sub_1B9016210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void read_action_for_flag_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1)
{
  if (a1 != 25)
  {
    if (a1 == 12) {
      operator new();
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Unhandled form in read flag binding ", 36);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
    Exception::Exception(v2, &v3);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v2);
  }
  operator new();
}

void sub_1B90163B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSymbolAbbrev(CSCppDwarfAbbrev *a1)
{
  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(a1);

  JUMPOUT(0x1BA9D1CD0);
}

uint64_t TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::type()
{
  return 1;
}

void TDwarfReadDW_FORM_AddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_AddrAttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_AddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 8;
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(result);
    **(void **)(a1 + 8) = result;
  }
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 8) > *(void *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read dwarf_address", 46);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  uint64_t v2 = *(void *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 8;
  return v2;
}

void sub_1B9016580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_AddrxAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_AddrxAttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_AddrxAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t **a2)
{
  long long v3 = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)v3);
  }
  else if (*(_DWORD *)(*(void *)(a1 + 32) + 104))
  {
    _WORD *v4 = v6 | v5;
    uint64_t v8 = (_OWORD *)v3[9];
    long long v9 = v8[1];
    v13[0] = *v8;
    v13[1] = v9;
    int v10 = *(_DWORD *)(a1 + 48);
    switch(v10)
    {
      case ')':
        unsigned int v11 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(v3);
        goto LABEL_14;
      case '*':
        unsigned int v11 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16((uint64_t)v3);
        goto LABEL_14;
      case '+':
        unsigned int v11 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::threeBytes((uint64_t)v3);
        goto LABEL_14;
      case ',':
        unsigned int v11 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32((uint64_t)v3);
LABEL_14:
        unsigned int v12 = v11;
        break;
      default:
        if (v10 == 27) {
          unsigned int v12 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
        }
        else {
          unsigned int v12 = 0;
        }
        break;
    }
    uint64_t result = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::address_at_base_and_index((uint64_t)v13, *(_DWORD *)(*(void *)(a1 + 32) + 104), v12);
    **(void **)(a1 + 8) = result;
  }
  else
  {
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
    *(void *)(a1 + 40) = result;
  }
  return result;
}

uint64_t TDwarfReadDW_FORM_AddrxAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action_stage2(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(_WORD **)(result + 16);
  int v3 = (unsigned __int16)*v2;
  int v4 = *(unsigned __int16 *)(result + 24);
  if ((v4 & v3) == 0)
  {
    uint64_t v5 = result;
    uint64_t v6 = *a2;
    *uint64_t v2 = v4 | v3;
    uint64_t v7 = *(_OWORD **)(v6 + 72);
    long long v8 = v7[1];
    v9[0] = *v7;
    v9[1] = v8;
    uint64_t result = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::address_at_base_and_index((uint64_t)v9, *(_DWORD *)(*(void *)(result + 32) + 104), *(_DWORD *)(result + 40));
    **(void **)(v5 + 8) = result;
  }
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 8);
  do
  {
    if (*(void *)(result + 24) <= (unint64_t)v1)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Cursor overflow, attempt to skip ULEB", 37);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v7, &v5);
      Exception::Exception(v4, &v5);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v4);
    }
    uint64_t v2 = v1++;
  }
  while (*(char *)(*(void *)result + v2) < 0);
  *(_DWORD *)(result + 8) = v1;
  return result;
}

void sub_1B9016840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::address_at_base_and_index(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::length_from_header(a1, a2);
  if (a3 >> 29)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Base relative index overflow in TDwarfAddressTableStream", 56);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v12);
  }
  if (8 * a3 > v6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Base relative index not in bounds of current address table in TDwarfAddressTableStream", 86);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    int v10 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v10, (uint64_t)v12);
  }
  unint64_t v7 = 8 * a3 + a2;
  if (*(void *)(a1 + 24) < v7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Offset not in bounds of TDwarfAddressTableStream", 48);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    unsigned int v11 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v11, (uint64_t)v12);
  }
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a1, v7);

  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(a1);
}

void sub_1B9016A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 2) > *(void *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read uint16", 39);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  uint64_t v2 = *(unsigned __int16 *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 2;
  return v2;
}

void sub_1B9016BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::threeBytes(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 3) > *(void *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read three bytes", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  uint64_t v2 = *(_DWORD *)(*(void *)a1 + v1) & 0xFFFFFF;
  *(_DWORD *)(a1 + 8) = v1 + 3;
  return v2;
}

void sub_1B9016CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 4) > *(void *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read uint32", 39);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  uint64_t v2 = *(unsigned int *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 4;
  return v2;
}

void sub_1B9016DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::length_from_header(uint64_t a1, unsigned int a2)
{
  if (a2 <= 7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Overflow calculating start of header in TDwarfAddressTableStream", 64);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, &v8);
    Exception::Exception(v7, &v8);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v7);
  }
  unsigned int v3 = a2 - 8;
  if (*(void *)(a1 + 24) < (unint64_t)v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Invalid offset to address table header in TDwarfAddressTableStream", 66);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, &v8);
    Exception::Exception(v7, &v8);
    long long v6 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v6, (uint64_t)v7);
  }
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a1, v3);

  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(a1);
}

void sub_1B9016F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipConstantAttributeAction()
{
}

uint64_t TDwarfSkipConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(void *)a2 + 8) += *(_DWORD *)(result + 8);
  return result;
}

uint64_t TDwarfSkipConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::is_skip_constant()
{
  return 1;
}

void TDwarfSkipDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_RefAddrAttributeAction()
{
}

void TDwarfSkipDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 >= 3) {
    int v3 = 4;
  }
  else {
    int v3 = 8;
  }
  *(_DWORD *)(*(void *)a2 + 8) += v3;
}

void TDwarfSkipDW_FORM_Block1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_Block1AttributeAction()
{
}

uint64_t TDwarfSkipDW_FORM_Block1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block1(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block1(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 24);
  uint64_t v2 = *(unsigned int *)(result + 8);
  if ((v1 - v2) < 0x100)
  {
    if (v1 == v2 || v1 - (int)v2 < (*(unsigned char *)(*(void *)result + v2) + 1))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to skip FORM_block1", 44);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
      Exception::Exception(v5, &v6);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v5);
    }
    int v3 = (*(unsigned char *)(*(void *)result + v2) + 1);
  }
  else
  {
    int v3 = *(unsigned __int8 *)(*(void *)result + v2) + 1;
  }
  *(_DWORD *)(result + 8) = v3 + v2;
  return result;
}

void sub_1B901715C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipDW_FORM_Block2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_Block2AttributeAction()
{
}

uint64_t TDwarfSkipDW_FORM_Block2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block2(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block2(uint64_t a1)
{
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(a1);
  unint64_t v3 = (*(_DWORD *)(a1 + 8) + result);
  if (*(void *)(a1 + 24) < v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to skip FORM_block2", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

void sub_1B901728C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipDW_FORM_Block4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_Block4AttributeAction()
{
}

uint64_t TDwarfSkipDW_FORM_Block4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block4(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block4(uint64_t a1)
{
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(a1);
  unint64_t v3 = (*(_DWORD *)(a1 + 8) + result);
  if (*(void *)(a1 + 24) < v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to skip FORM_block4", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

void sub_1B90173BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_StringAttributeAction()
{
}

size_t TDwarfSkipDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_string(*a2);
}

size_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_string(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a1 + 24) - v2;
  size_t result = strlen((const char *)(*(void *)a1 + v2));
  if ((int)result + 1 > v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Cursor overflow, attempt to skip FORM_string", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v9, &v7);
    Exception::Exception(v6, &v7);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v6);
  }
  *(_DWORD *)(a1 + 8) = result + 1 + v2;
  return result;
}

void sub_1B90174FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_BlockAttributeAction()
{
}

uint64_t TDwarfSkipDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block(uint64_t a1)
{
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
  unint64_t v3 = (*(_DWORD *)(a1 + 8) + result);
  if (*(void *)(a1 + 24) < v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to skip FORM_block", 43);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

void sub_1B901762C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipULEBAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipULEBAttributeAction()
{
}

uint64_t TDwarfSkipULEBAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(*a2);
}

void TDwarfReadDW_FORM_Data1ToOffsetAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Data1ToOffsetAttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_Data1ToOffsetAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Data2AttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Data4AttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Data8AttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 8;
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 8) > *(void *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read uint64", 39);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  uint64_t v2 = *(void *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 8;
  return v2;
}

void sub_1B9017934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_Sec_OffsetAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Sec_OffsetAttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_Sec_OffsetAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 4) > *(void *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read dwarf_offset", 45);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  uint64_t v2 = *(unsigned int *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 4;
  return v2;
}

void sub_1B9017AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_UdataAttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t **a2)
{
  unint64_t v3 = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)v3);
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_SdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_SdataAttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_SdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(v3);
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::LEB(v3);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::LEB(uint64_t a1)
{
  unsigned int v1 = 0;
  uint64_t v2 = 0;
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  do
  {
    if (*(_DWORD *)(a1 + 24) == v3)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Cursor overflow, attempt to read LEB", 36);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
    }
    int v4 = *(char *)(*(void *)a1 + v3);
    unsigned int v5 = v3 + 1;
    v2 |= (unint64_t)(*(unsigned char *)(*(void *)a1 + v3) & 0x7F) << v1;
    v1 += 7;
    ++v3;
  }
  while (v4 < 0);
  BOOL v6 = (v4 & 0x40) == 0 || v1 > 0x3F;
  uint64_t v7 = -1 << v1;
  if (v6) {
    uint64_t v7 = 0;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return v7 | v2;
}

void sub_1B9017D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_AT_ranges()
{
}

void TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a3 == 5)
  {
    TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::extract_dwarf5_ranges(a1, (uint64_t)a2, 5);
  }
  else if (a3 > 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      v4[0] = 67109120;
      v4[1] = a3;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Unexpected DWARF version parsing DW_AT_ranges: %d\n", (uint8_t *)v4, 8u);
    }
  }
  else
  {
    TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::extract_dwarf4_ranges(a1, a2, a3);
  }
}

void TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::extract_dwarf5_ranges(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 48);
  if (!v3) {
    return;
  }
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v3, 0);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)v3);
  int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(v3);
  uint64_t v59 = 0;
  long long v60 = 0;
  uint64_t v61 = 0;
  if (v6)
  {
    int v7 = v6;
    for (int i = 0; i != v7; ++i)
    {
      int v9 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(v3);
      int v10 = v9;
      long long v11 = v60;
      if (v60 >= v61)
      {
        uint64_t v13 = v59;
        uint64_t v14 = (v60 - v59) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v61 - v59;
        if ((v61 - v59) >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)&v61, v17);
          uint64_t v13 = v59;
          long long v11 = v60;
        }
        else
        {
          unint64_t v18 = 0;
        }
        size_t v19 = &v18[4 * v14];
        *(_DWORD *)size_t v19 = v10;
        uint64_t v12 = v19 + 4;
        while (v11 != v13)
        {
          int v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        uint64_t v59 = v19;
        long long v60 = v12;
        uint64_t v61 = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(_DWORD *)long long v60 = v9;
        uint64_t v12 = v11 + 4;
      }
      long long v60 = v12;
    }
  }
  uint64_t v21 = *(uint64_t **)a2;
  if (!v21) {
    goto LABEL_56;
  }
  if (*(_DWORD *)(a1 + 16) == 35)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    unint64_t v23 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v21);
    if (v23 >= (v60 - v59) >> 2) {
      std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
    }
    int v24 = *(_DWORD *)(v22 + 112) + *(_DWORD *)&v59[4 * v23];
  }
  else
  {
    int v24 = TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::offset_into_ranges(a1, (uint64_t)v21, a3);
  }
  if (v24 == -1) {
    goto LABEL_56;
  }
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v3, 0);
  *(_DWORD *)(v3 + 8) += v24;
  uint64_t v25 = (_OWORD *)v21[9];
  long long v26 = v25[1];
  v58[0] = *v25;
  v58[1] = v26;
  if (!*(void *)v3)
  {
    *(_OWORD *)*(void *)(a1 + 8) = xmmword_1B9086FD0;
    goto LABEL_56;
  }
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  unint64_t v29 = -1;
  while (1)
  {
    int v30 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)v3);
    char v31 = v30;
    if (v30 != 1) {
      break;
    }
    unsigned int v38 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)v3);
    uint64_t v27 = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::address_at_base_and_index((uint64_t)v58, *(_DWORD *)(*(void *)(a1 + 8) + 104), v38);
LABEL_49:
    if (!*(void *)v3) {
      goto LABEL_53;
    }
  }
  if (v30 == 4)
  {
    unint64_t v32 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)v3) + v27;
    unint64_t v33 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)v3) + v27;
    unint64_t v34 = *(void **)(a1 + 8);
    long long v35 = (unint64_t *)v34[16];
    unint64_t v36 = v34[17];
    if ((unint64_t)v35 >= v36)
    {
      uint64_t v39 = v34[15];
      uint64_t v40 = ((uint64_t)v35 - v39) >> 4;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 60) {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v42 = v36 - v39;
      if (v42 >> 3 > v41) {
        unint64_t v41 = v42 >> 3;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v41;
      }
      unint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)(v34 + 17), v43);
      uint64_t v46 = (unint64_t *)&v44[16 * v40];
      unint64_t *v46 = v32;
      v46[1] = v33;
      int v48 = (char *)v34[15];
      char v47 = (char *)v34[16];
      unsigned int v49 = v46;
      if (v47 != v48)
      {
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v47 - 1);
          v49 -= 2;
          v47 -= 16;
        }
        while (v47 != v48);
        char v47 = (char *)v34[15];
      }
      int v37 = v46 + 2;
      v34[15] = v49;
      v34[16] = v46 + 2;
      v34[17] = &v44[16 * v45];
      if (v47) {
        operator delete(v47);
      }
    }
    else
    {
      *long long v35 = v32;
      v35[1] = v33;
      int v37 = v35 + 2;
    }
    v34[16] = v37;
    if (v32 < v29) {
      unint64_t v29 = v32;
    }
    if (v28 <= v33) {
      unint64_t v28 = v33;
    }
    goto LABEL_49;
  }
  if (v30)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v56);
    unint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Unimplemented range list entry kind", 35);
    LOBYTE(v54[0]) = v31;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v54, 1);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v57, &v55);
    Exception::Exception(v54, &v55);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v54);
  }
LABEL_53:
  uint64_t v50 = *(void *)(a1 + 8);
  *(void *)uint64_t v50 = v29;
  *(void *)(v50 + 8) = v28;
  if (v29 != -1 && v28) {
    *(_WORD *)(v50 + 76) |= 3u;
  }
LABEL_56:
  if (v59)
  {
    long long v60 = v59;
    operator delete(v59);
  }
}

void sub_1B90182C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  Exception::~Exception(&a11);
  if (a20 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a21);
  unint64_t v23 = *(void **)(v21 - 112);
  if (v23)
  {
    *(void *)(v21 - 104) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::extract_dwarf4_ranges(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t result = TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::offset_into_ranges(result, v4, a3);
    if (result != -1)
    {
      uint64_t v6 = a2[5];
      if (v6)
      {
        *(_DWORD *)(v6 + 8) += result;
        uint64_t v7 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(v6);
        uint64_t v8 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(v6);
        unint64_t v9 = 0;
        if (v7 | v8)
        {
          uint64_t v10 = *(void *)(*(void *)(v5 + 8) + 88);
          unint64_t v11 = -1;
          do
          {
            if (v7 == -1)
            {
              uint64_t v10 = v8;
            }
            else
            {
              unint64_t v12 = v10 + v7;
              unint64_t v13 = v10 + v8;
              uint64_t v14 = *(void **)(v5 + 8);
              unint64_t v15 = (unint64_t *)v14[16];
              unint64_t v16 = v14[17];
              if ((unint64_t)v15 >= v16)
              {
                uint64_t v18 = v14[15];
                uint64_t v19 = ((uint64_t)v15 - v18) >> 4;
                unint64_t v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 60) {
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v21 = v16 - v18;
                if (v21 >> 3 > v20) {
                  unint64_t v20 = v21 >> 3;
                }
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v22 = v20;
                }
                int v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)(v14 + 17), v22);
                uint64_t v25 = (unint64_t *)&v24[16 * v19];
                *uint64_t v25 = v12;
                v25[1] = v13;
                uint64_t v27 = (char *)v14[15];
                long long v26 = (char *)v14[16];
                unint64_t v28 = v25;
                if (v26 != v27)
                {
                  do
                  {
                    *((_OWORD *)v28 - 1) = *((_OWORD *)v26 - 1);
                    v28 -= 2;
                    v26 -= 16;
                  }
                  while (v26 != v27);
                  long long v26 = (char *)v14[15];
                }
                unint64_t v17 = v25 + 2;
                v14[15] = v28;
                v14[16] = v25 + 2;
                v14[17] = &v24[16 * v23];
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                *unint64_t v15 = v12;
                v15[1] = v13;
                unint64_t v17 = v15 + 2;
              }
              v14[16] = v17;
              if (v12 < v11) {
                unint64_t v11 = v12;
              }
              if (v9 <= v13) {
                unint64_t v9 = v13;
              }
            }
            uint64_t v7 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(v6);
            uint64_t v8 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(v6);
          }
          while (v7 | v8);
        }
        else
        {
          unint64_t v11 = -1;
        }
        uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v6, 0);
        uint64_t v29 = *(void *)(v5 + 8);
        *(void *)uint64_t v29 = v11;
        *(void *)(v29 + 8) = v9;
        if (v11 != -1)
        {
          if (v9) {
            *(_WORD *)(v29 + 76) |= 3u;
          }
        }
      }
    }
  }
  return result;
}

uint64_t TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::offset_into_ranges(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 16);
  switch(v3)
  {
    case 6:
      return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(a2);
    case 7:
      return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(a2);
    case 23:
      return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(a2);
    default:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109376;
        int v8 = a3;
        __int16 v9 = 1024;
        int v10 = v3;
        _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "DWARF %d form %u is unrecognized for reading non-indexed ranges.\n", buf, 0xEu);
        int v3 = *(_DWORD *)(a1 + 16);
      }
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "DWARF %d form %u is unrecognized for reading non-indexed ranges.\n", a3, v3);
      return 0xFFFFFFFFLL;
  }
}

void TDwarfReadDW_FORM_StrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_StrpAttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_StrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if ((*(_WORD *)(a1 + 24) & **(_WORD **)(a1 + 16)) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    uint64_t v4 = *(void *)(result + 40);
    unsigned int v5 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(result);
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v4, v5);
    uint64_t v6 = *(void **)(a1 + 8);
    **(_WORD **)(a1 + 16) |= *(_WORD *)(a1 + 24);
    *uint64_t v6 = *(void *)v4 + *(unsigned int *)(v4 + 8);
  }
  return result;
}

void TDwarfReadDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_StringAttributeAction()
{
}

const char *TDwarfReadDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    return (const char *)TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_string(v3);
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string(v3);
    **(void **)(a1 + 8) = result;
  }
  return result;
}

const char *TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a1 + 24) - v2;
  uint64_t v4 = (const char *)(*(void *)a1 + v2);
  unsigned int v5 = strlen(v4) + 1;
  if (v5 > v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Cursor overflow, attempt to read FORM_string", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v11, &v9);
    Exception::Exception(v8, &v9);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v8);
  }
  *(_DWORD *)(a1 + 8) = v5 + v2;
  return v4;
}

void sub_1B90188A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_StrxAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_StrxAttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_StrxAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t result, uint64_t **a2)
{
  uint64_t v2 = *a2;
  if ((*(_WORD *)(result + 24) & **(_WORD **)(result + 16)) != 0)
  {
    *((_DWORD *)v2 + 2) += 4;
  }
  else
  {
    uint64_t v3 = result;
    uint64_t v4 = v2[8];
    int v5 = *(_DWORD *)(result + 40);
    switch(v5)
    {
      case '%':
        int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(*a2);
        goto LABEL_11;
      case '&':
        int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16((uint64_t)*a2);
        goto LABEL_11;
      case '\'':
        int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::threeBytes((uint64_t)*a2);
        goto LABEL_11;
      case '(':
        int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32((uint64_t)*a2);
        goto LABEL_11;
      default:
        if (v5 == 26)
        {
          int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(*a2);
LABEL_11:
          if ((v6 & 0xC0000000) != 0)
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"FORM_strx index overflow", 24);
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
            Exception::Exception(v12, &v13);
            exception = __cxa_allocate_exception(0x20uLL);
            Exception::Exception(exception, (uint64_t)v12);
          }
        }
        else
        {
          int v6 = 0;
        }
        int v7 = **(_DWORD **)(v3 + 32);
        if (__CFADD__(v7, 4 * v6))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"FORM_strx offset overflow", 25);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
          Exception::Exception(v12, &v13);
          uint64_t v10 = __cxa_allocate_exception(0x20uLL);
          Exception::Exception(v10, (uint64_t)v12);
        }
        TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v4, v7 + 4 * v6);
        unsigned int v8 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(v4);
        uint64_t v9 = v2[5];
        uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v9, v8);
        **(_WORD **)(v3 + 16) |= *(_WORD *)(v3 + 24);
        **(void **)(v3 + 8) = *(void *)v9 + *(unsigned int *)(v9 + 8);
        break;
    }
  }
  return result;
}

void sub_1B9018B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_RefAddrAttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t result = *a2;
  int v5 = *(_WORD **)(a1 + 16);
  int v6 = (unsigned __int16)*v5;
  int v7 = *(unsigned __int16 *)(a1 + 24);
  if ((v7 & v6) != 0)
  {
    if (a3 >= 3) {
      int v8 = 4;
    }
    else {
      int v8 = 8;
    }
    *(_DWORD *)(result + 8) += v8;
  }
  else
  {
    *int v5 = v7 | v6;
    if (a3 > 2) {
      uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(result);
    }
    else {
      uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(result);
    }
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Ref1AttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_Ref1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Ref2AttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_Ref2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Ref4AttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_Ref4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Ref8AttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_Ref8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 8;
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Ref_UdataAttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_Ref_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)v3);
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Data1AttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(unsigned char **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_FlagAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_FlagAttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_FlagAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(unsigned char **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_FlagPresentAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_FlagPresentAttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_FlagPresentAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t result)
{
  unsigned int v1 = *(unsigned char **)(result + 8);
  **(_WORD **)(result + 16) |= *(_WORD *)(result + 24);
  *unsigned int v1 = 1;
  return result;
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSourceInfoAbbrev(uint64_t result, int a2, char a3, void *a4, uint64_t a5)
{
  *(_DWORD *)(result + 8) = a2;
  *(unsigned char *)(result + 12) = a3;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(void *)(result + 16) = *a4;
  *a4 = 0;
  uint64_t v5 = *(void *)(result + 24);
  *(void *)(result + 24) = a4[1];
  a4[1] = v5;
  uint64_t v6 = *(void *)(result + 32);
  *(void *)(result + 32) = a4[2];
  a4[2] = v6;
  *(void *)uint64_t result = &unk_1F12C8878;
  *(void *)(result + 64) = a5;
  int v7 = *(unsigned __int16 **)(result + 16);
  if (v7 != *(unsigned __int16 **)(result + 24))
  {
    unsigned int v8 = *v7;
    if (v8 > 0x51)
    {
      if (*v7 > 0x72u)
      {
        switch(v8)
        {
          case 0x73u:
            int v11 = v7[1];
            break;
          case 0x74u:
            int v11 = v7[1];
            break;
          case 0x3FF0u:
LABEL_19:
            read_action_for_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v7[1]);
          default:
            goto LABEL_39;
        }
LABEL_38:
        read_action_for_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v11);
      }
      if (v8 != 82)
      {
        if (v8 == 114)
        {
          int v11 = v7[1];
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      int v9 = v7[1];
      if ((v9 - 41) < 4 || v9 == 27) {
        operator new();
      }
      if (v9 == 1) {
        operator new();
      }
LABEL_40:
      skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v9);
    }
    if (*v7 > 0x11u)
    {
      if (v8 == 18)
      {
        int v11 = v7[1];
        if ((v11 - 41) < 4 || v11 == 27) {
          operator new();
        }
        if (v11 == 1) {
          operator new();
        }
        goto LABEL_38;
      }
      if (v8 == 27) {
        goto LABEL_19;
      }
    }
    else
    {
      if (v8 == 16)
      {
        int v11 = v7[1];
        goto LABEL_38;
      }
      if (v8 == 17)
      {
        int v9 = v7[1];
        if ((v9 - 41) < 4 || v9 == 27) {
          operator new();
        }
        if (v9 == 1) {
          operator new();
        }
        goto LABEL_40;
      }
    }
LABEL_39:
    int v9 = v7[1];
    goto LABEL_40;
  }
  return result;
}

void sub_1B901953C(_Unwind_Exception *a1)
{
  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(v1);
  _Unwind_Resume(a1);
}

void TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSourceInfoAbbrev(CSCppDwarfAbbrev *a1)
{
  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(a1);

  JUMPOUT(0x1BA9D1CD0);
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::type()
{
  return 2;
}

uint64_t TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSkipAbbrev(uint64_t result, int a2, char a3, void *a4)
{
  *(_DWORD *)(result + 8) = a2;
  *(unsigned char *)(result + 12) = a3;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(void *)(result + 16) = *a4;
  *a4 = 0;
  uint64_t v4 = *(void *)(result + 24);
  *(void *)(result + 24) = a4[1];
  a4[1] = v4;
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = a4[2];
  a4[2] = v5;
  *(void *)uint64_t result = &unk_1F12C88C0;
  uint64_t v6 = *(void *)(result + 16);
  if (v6 != *(void *)(result + 24)) {
    skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(*(unsigned __int16 *)(v6 + 2));
  }
  return result;
}

void sub_1B90197C0(_Unwind_Exception *a1)
{
  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(v1);
  _Unwind_Resume(a1);
}

void TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipAbbrev(CSCppDwarfAbbrev *a1)
{
  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(a1);

  JUMPOUT(0x1BA9D1CD0);
}

uint64_t TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::type()
{
  return 0;
}

uint64_t std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::reverse_iterator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>*>,std::reverse_iterator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>*>,std::reverse_iterator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::reverse_iterator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>*>,std::reverse_iterator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>*>,std::reverse_iterator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    int v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::reverse_iterator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::reverse_iterator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::reverse_iterator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::reverse_iterator<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  unsigned int v1 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    *unsigned int v1 = 0;
    if (v3) {
      std::default_delete<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::operator()[abi:ne180100]((uint64_t)v1, v3);
    }
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v5) {
      std::default_delete<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::operator()[abi:ne180100](i - 8, v5);
    }
  }
}

void std::default_delete<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 88);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    JUMPOUT(0x1BA9D1CD0);
  }
}

uint64_t parse_die_stream_for_specification<Dwarf<Dwarf32,Pointer64,LittleEndian>,TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>,std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>(uint64_t a1, uint64_t a2, uint64_t **a3, _DWORD *a4)
{
  uint64_t v4 = a2;
  int v6 = *(unsigned __int16 *)(a1 + 76);
  if ((v6 & 0x10) != 0)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 48) & (v6 << 18 >> 31);
    if ((v6 & 0x2000) != 0) {
      unsigned int v8 = 0;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a1 + 48);
    }
    __int16 v9 = -8209;
  }
  else
  {
    if ((v6 & 0x200) == 0) {
      return 0;
    }
    unsigned int v7 = *(_DWORD *)(a1 + 60) & (v6 << 17 >> 31);
    if ((v6 & 0x4000) != 0) {
      unsigned int v8 = 0;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a1 + 60);
    }
    __int16 v9 = -16897;
  }
  *(_WORD *)(a1 + 76) = v6 & v9;
  int v10 = (*a4)++;
  if (v10 < 10)
  {
    if (v8) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = v7 == 0;
    }
    if (v14)
    {
      unint64_t v15 = *(void *)(a2 + 24);
    }
    else
    {
      long long v16 = *a3;
      unint64_t v17 = a3[1];
      if (v17 != *a3)
      {
        unint64_t v18 = v17 - *a3;
        do
        {
          unint64_t v19 = v18 >> 1;
          unint64_t v20 = &v16[v18 >> 1];
          uint64_t v22 = *v20;
          uint64_t v21 = v20 + 1;
          v18 += ~(v18 >> 1);
          if (*(void *)(v22 + 24) + *(void *)(v22 + 16) > (unint64_t)v7) {
            unint64_t v18 = v19;
          }
          else {
            long long v16 = v21;
          }
        }
        while (v18);
      }
      if (v16 == v17
        || (v4 = *v16, v23 = *(void *)(*v16 + 16), unint64_t v15 = *(void *)(*v16 + 24), (unint64_t)v7 - v23 >= v15))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          uint64_t v11 = MEMORY[0x1E4F14500];
          unint64_t v12 = "Ref addr is not within the bounds of any compile unit";
          long long v13 = buf;
          goto LABEL_34;
        }
        return 0;
      }
      unsigned int v8 = v7 - v23;
    }
    if (v15 >= v8)
    {
      read_specification_abbrev_at<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v8, v4);
      return v4;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      __int16 v25 = 0;
      uint64_t v11 = MEMORY[0x1E4F14500];
      unint64_t v12 = "Out-of-bounds abstract origin or specification offset";
      long long v13 = (uint8_t *)&v25;
      goto LABEL_34;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    __int16 v27 = 0;
    uint64_t v11 = MEMORY[0x1E4F14500];
    unint64_t v12 = "Possible reference cycle in DIE";
    long long v13 = (uint8_t *)&v27;
LABEL_34:
    _os_log_impl(&dword_1B8F92000, v11, OS_LOG_TYPE_DEFAULT, v12, v13, 2u);
  }
  return 0;
}

uint64_t resolve_parsed_data_names<Dwarf<Dwarf32,Pointer64,LittleEndian>>(uint64_t a1, void *a2, void *a3)
{
  __int16 v3 = *(_WORD *)(a1 + 76);
  uint64_t v4 = (void *)(a1 + 24);
  if ((v3 & 0xC) == 8) {
    uint64_t v5 = (uint64_t *)(a1 + 32);
  }
  else {
    uint64_t v5 = (uint64_t *)(a1 + 24);
  }
  uint64_t v6 = *v5;
  if ((v3 & 0xC) == 8) {
    int v7 = 67141633;
  }
  else {
    int v7 = 67174401;
  }
  *a2 = v6;
  if ((v3 & 4) != 0) {
    int v8 = 0x200000;
  }
  else {
    int v8 = 0x100000;
  }
  int v9 = v7 | v8;
  if ((v3 & 4) == 0) {
    uint64_t v4 = (void *)(a1 + 32);
  }
  *a3 = *v4;
  if (*(unsigned char *)(a1 + 56) == 1 && (v3 & 0x80u) != 0) {
    unsigned int v11 = v9 | 0x40;
  }
  else {
    unsigned int v11 = v9;
  }
  if (*(unsigned char *)(a1 + 57) == 1) {
    unsigned int v12 = v11 | 0x80;
  }
  else {
    unsigned int v12 = v11;
  }
  if ((v3 & 0x100) != 0) {
    return v12;
  }
  else {
    return v11;
  }
}

unint64_t TAddressRelocator<Pointer64>::relocate(void *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  __int16 v3 = (void *)a1[3];
  if (a2 - *v3 < v3[1]) {
    return v3[2] + a2;
  }
  uint64_t v4 = a1[1] - *a1;
  if (v4)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    uint64_t v6 = (void *)*a1;
    do
    {
      unint64_t v7 = v5 >> 1;
      int v8 = &v6[3 * (v5 >> 1)];
      unint64_t v10 = *v8;
      int v9 = v8 + 3;
      v5 += ~(v5 >> 1);
      if (v10 > a2) {
        unint64_t v5 = v7;
      }
      else {
        uint64_t v6 = v9;
      }
    }
    while (v5);
    if (v6 != (void *)*a1)
    {
      uint64_t v11 = *(v6 - 3);
      unint64_t v12 = *(v6 - 2);
      __int16 v3 = v6 - 3;
      if (a2 - v11 < v12)
      {
        a1[3] = v3;
        return v3[2] + a2;
      }
    }
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 134217984;
    unint64_t v15 = v2;
    _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Attempt to relocate address [0x%llx], which is outside segment deltas\n", (uint8_t *)&v14, 0xCu);
  }
  return v2;
}

uint64_t TDwarfAbbrevData<Dwarf<Dwarf32,Pointer64,LittleEndian>>::has_inlined_info(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 76);
  if (a2 >= 5)
  {
    int v3 = (v2 >> 10) & 1;
LABEL_8:
    uint64_t result = 1;
    if ((v3 & 1) == 0 && (v2 & 0x800) == 0) {
      return (v2 >> 12) & 1;
    }
    return result;
  }
  if ((v2 & 0x400) != 0)
  {
    LOBYTE(v3) = *(_DWORD *)(a1 + 64) != 0;
    goto LABEL_8;
  }
  if ((v2 & 0x800) == 0) {
    return (v2 >> 12) & 1;
  }
  return 1;
}

const char *path_from_file_index<Pointer64>(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (__PAIR64__(a2, a5) - 5) >> 32;
  if (v5 < (uint64_t)(a1[1] - *a1) >> 3) {
    return *(const char **)(*a1 + 8 * v5);
  }
  if ((path_from_file_index<Pointer64>(std::vector<char const*> const&,unsigned int,unsigned long long,TRawSymbolOwnerData<Pointer64> &,unsigned int)::suppress_error & 1) == 0)
  {
    path_from_file_index<Pointer64>(std::vector<char const*> const&,unsigned int,unsigned long long,TRawSymbolOwnerData<Pointer64> &,unsigned int)::suppress_error = 1;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a4 + 232))(__p, a4);
      int v9 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v15 = 2048;
      uint64_t v16 = a3;
      __int16 v17 = 1024;
      int v18 = v5;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "[CoreSymbolication] In DWARF data from %s:\n  .debug_line[%llx] file = %d is not a valid index\n", buf, 0x1Cu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a4 + 232))(buf, a4);
    if (v17 >= 0) {
      uint64_t v11 = buf;
    }
    else {
      uint64_t v11 = *(const char **)buf;
    }
    fprintf(v10, "[CoreSymbolication] In DWARF data from %s:\n  .debug_line[%llx] file = %d is not a valid index\n", v11, a3, v5);
    if (SHIBYTE(v17) < 0) {
      operator delete(*(void **)buf);
    }
  }
  return "<Bad file name in .debug_info>";
}

void record_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  if (*(_DWORD *)(a3 + 8) == 29) {
    record_inlined_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>>(a1, a2, a3, a5);
  }
  else {
    record_concrete_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>((uint64_t)a1, a2, a3, a4, (void **)a5);
  }
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_compilation_unit_pc_ranges(uint64_t result)
{
  unsigned int v1 = *(uint64_t **)(result + 64);
  __int16 v2 = *((_WORD *)v1 + 38);
  if (v2)
  {
    uint64_t v3 = *v1;
LABEL_6:
    v1[11] = v3;
    if ((v2 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v3 = v1[2];
  if (v3 != -1) {
    goto LABEL_6;
  }
  if ((*((_WORD *)v1 + 38) & 2) == 0) {
    return result;
  }
LABEL_7:
  if (v2 < 0) {
    uint64_t v4 = *v1 + *((unsigned int *)v1 + 20);
  }
  else {
    uint64_t v4 = v1[1];
  }
  v1[12] = v4;
  return result;
}

void parse_line_numbers<Dwarf<Dwarf32,Pointer64,LittleEndian>>(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t (***a9)(void, std::vector<std::string>::pointer), uint64_t a10, void *a11)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a1, a3);
  int v17 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(a1);
  unsigned int v18 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(a1);
  if (v18 - 6 >= 0xFFFFFFFC)
  {
    unsigned int v19 = v18;
    if (v18 == 5)
    {
      TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
      TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    }
    unint64_t v54 = (CSCppStringCache *)(a7 + 96);
    TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(a1);
    unsigned int v52 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    if (v19 >= 4) {
      TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    }
    TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    char v55 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    unsigned int v20 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    uint64_t v21 = *(unsigned int *)(a1 + 8);
    uint64_t v59 = (unsigned __int8 *)(*(void *)a1 + v21);
    unsigned int v22 = *v59;
    *(_DWORD *)(a1 + 8) = v21 + v22;
    __p = 0;
    int v65 = 0;
    uint64_t v66 = 0;
    if (v19 == 5)
    {
      parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>((uint64_t *)a1, a2, 5u, a9, v54, a4, (uint64_t)&__p, (char **)&__p);
      parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>((uint64_t *)a1, a2, 5u, a9, v54, a4, (uint64_t)&__p, (char **)a10);
    }
    else
    {
      parse_dwarf2_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>((uint64_t *)a1, a5, (uint64_t (***)(void, char *))a9, v54, &__p, (void **)a10);
    }
    unsigned int v62 = 0;
    int v63 = 1;
    unsigned int v23 = a3 + v17 + 4;
    if (*(_DWORD *)(a1 + 8) < v23)
    {
      uint64_t v24 = 0;
      uint64_t v56 = v52;
      unsigned int v25 = 1;
      uint64_t v53 = (v22 ^ 0xFF) / v20 * v52;
      do
      {
        unsigned int v26 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
        if (v26 >= v22)
        {
          v24 += v56 * (unint64_t)((v26 - v22) / v20);
          v63 += v55 + (v26 - v22) % v20;
          *(void *)__s1 = 0;
          unint64_t v36 = v24 + a6;
          if (a8) {
            unint64_t v36 = TAddressRelocator<Pointer64>::relocate(a8, v36);
          }
LABEL_22:
          *(void *)__s1 = v36;
          uint64_t v61 = 0;
          uint64_t v61 = (void *)path_from_file_index<Pointer64>((void *)a10, v25, *(unsigned int *)(a1 + 8), a7, v19);
          int v60 = 0;
          std::deque<TRawSourceInfo<Pointer64>>::emplace_back<unsigned long long &,int,char const*&,int &,unsigned int &>(a11, __s1, &v60, (uint64_t *)&v61, &v63, &v62);
        }
        else
        {
          uint64_t v27 = v26;
          switch(v26)
          {
            case 0u:
              int v28 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
              if (!v28) {
                goto LABEL_62;
              }
              int v29 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
              switch(v29)
              {
                case 1:
                  uint64_t v24 = 0;
                  unsigned int v25 = 1;
                  unsigned int v62 = 0;
                  int v63 = 1;
                  break;
                case 2:
                  uint64_t v24 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(a1);
                  break;
                case 3:
                  int v30 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string(a1);
                  unsigned int v31 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
                  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(a1);
                  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(a1);
                  if (*v30 == 47)
                  {
                    uint64_t v32 = (**a9)(a9, (std::vector<std::string>::pointer)v30);
                    uint64_t v33 = v32;
                    long long v35 = *(uint64_t **)(a10 + 8);
                    unint64_t v34 = *(void *)(a10 + 16);
                    if ((unint64_t)v35 >= v34)
                    {
                      uint64_t v41 = ((uint64_t)v35 - *(void *)a10) >> 3;
                      unint64_t v42 = v41 + 1;
                      if ((unint64_t)(v41 + 1) >> 61) {
                        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v43 = v34 - *(void *)a10;
                      if (v43 >> 2 > v42) {
                        unint64_t v42 = v43 >> 2;
                      }
                      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v44 = v42;
                      }
                      if (v44) {
                        uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a10 + 16, v44);
                      }
                      else {
                        uint64_t v45 = 0;
                      }
                      uint64_t v46 = (uint64_t *)&v45[8 * v41];
                      uint64_t *v46 = v33;
                      char v47 = v46 + 1;
                      unsigned int v49 = *(char **)a10;
                      int v48 = *(char **)(a10 + 8);
                      if (v48 == *(char **)a10)
                      {
                        unint64_t v51 = (uint64_t **)a10;
                      }
                      else
                      {
                        do
                        {
                          uint64_t v50 = *((void *)v48 - 1);
                          v48 -= 8;
                          *--uint64_t v46 = v50;
                        }
                        while (v48 != v49);
                        unint64_t v51 = (uint64_t **)a10;
                        int v48 = *(char **)a10;
                      }
                      *unint64_t v51 = v46;
                      v51[1] = v47;
                      v51[2] = (uint64_t *)&v45[8 * v44];
                      if (v48) {
                        operator delete(v48);
                      }
                      *(void *)(a10 + 8) = v47;
                    }
                    else
                    {
                      *long long v35 = v32;
                      *(void *)(a10 + 8) = v35 + 1;
                    }
                  }
                  else
                  {
                    if (v31 >= (unint64_t)((v65 - (unsigned char *)__p) >> 3)) {
                      std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
                    }
                    uint64_t v39 = (const char *)*((void *)__p + v31);
                    if (v39)
                    {
                      stringByAppendingPathComponents(__s1, 0x400uLL, v39, v30);
                      uint64_t v40 = (char *)(**a9)(a9, (std::vector<std::string>::pointer)__s1);
                      uint64_t v61 = CSCppStringCache::intern(v54, v40);
                      std::vector<char const*>::push_back[abi:ne180100]((void **)a10, &v61);
                    }
                    else
                    {
                      *(void *)__s1 = (**a9)(a9, (std::vector<std::string>::pointer)v30);
                      std::vector<char const*>::push_back[abi:ne180100]((void **)a10, __s1);
                    }
                  }
                  break;
                default:
                  *(_DWORD *)(a1 + 8) = v28 + *(_DWORD *)(a1 + 8) - 1;
                  break;
              }
              break;
            case 1u:
              *(void *)__s1 = 0;
              unint64_t v36 = v24 + a6;
              if (a8) {
                unint64_t v36 = TAddressRelocator<Pointer64>::relocate(a8, v36);
              }
              goto LABEL_22;
            case 2u:
              v24 += TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1) * v56;
              break;
            case 3u:
              int v37 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::LEB(a1);
              v63 += v37;
              break;
            case 4u:
              unsigned int v25 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
              break;
            case 5u:
              unsigned int v62 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
              break;
            case 6u:
            case 7u:
            case 0xAu:
            case 0xBu:
              break;
            case 8u:
              v24 += v53;
              break;
            case 9u:
              v24 += TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(a1);
              break;
            case 0xCu:
              TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(a1);
              break;
            default:
              if (v59[v26])
              {
                unsigned int v38 = 0;
                do
                {
                  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(a1);
                  ++v38;
                }
                while (v38 < v59[v27]);
              }
              break;
          }
        }
      }
      while (*(_DWORD *)(a1 + 8) < v23);
    }
LABEL_62:
    if (__p)
    {
      int v65 = __p;
      operator delete(__p);
    }
  }
}

void sub_1B901A700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*&>(void *a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[1];
  if (v8 == v9) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 170 * ((v8 - v9) >> 3) - 1;
  }
  uint64_t v11 = a1[4];
  uint64_t v12 = a1[5];
  unint64_t v13 = v12 + v11;
  if (v10 == v12 + v11)
  {
    std::deque<TRangeValue<Pointer64,char const*>>::__add_back_capacity(a1);
    uint64_t v11 = a1[4];
    uint64_t v12 = a1[5];
    uint64_t v9 = a1[1];
    unint64_t v13 = v11 + v12;
  }
  int v14 = (void *)(*(void *)(v9 + 8 * (v13 / 0xAA)) + 24 * (v13 % 0xAA));
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  void *v14 = *a2;
  v14[1] = v15;
  v14[2] = v16;
  uint64_t v17 = v12 + 1;
  a1[5] = v17;
  unint64_t v18 = v11 + v17;
  unsigned int v19 = (void *)(v9 + 8 * (v18 / 0xAA));
  unint64_t v20 = v18 % 0xAA;
  if (v20) {
    uint64_t v21 = *v19 + 24 * v20;
  }
  else {
    uint64_t v21 = *(v19 - 1) + 4080;
  }
  return v21 - 24;
}

void read_specification_abbrev_at<Dwarf<Dwarf32,Pointer64,LittleEndian>>(unsigned int a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a2, a1);
  unsigned int v4 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a2);
  uint64_t v6 = *(CSCppDwarfAbbrevTable **)(a2 + 80);
  unint64_t v5 = *(std::__shared_weak_count **)(a2 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v4 || (uint64_t v7 = v4, v4 >= (unint64_t)((uint64_t)(*((void *)v6 + 2) - *((void *)v6 + 1)) >> 3)))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Invalid specification abbrev index in DWARF: ", 45);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19, &v17);
    Exception::Exception(v16, &v17);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v16);
  }
  uint64_t v8 = CSCppDwarfAbbrevTable::specification_abbrev_at(v6, v4);
  if (!v8)
  {
    uint64_t v9 = *(void *)(*((void *)v6 + 1) + 8 * v7);
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v9 + 8);
      if (v10 <= 0x2E && ((1 << v10) & 0x400020000008) != 0)
      {
        v19[0] = 0uLL;
        __p = 0;
        std::vector<CSCppDwarfAttribute>::__init_with_size[abi:ne180100]<CSCppDwarfAttribute*,CSCppDwarfAttribute*>(&__p, *(const void **)(v9 + 16), *(void *)(v9 + 24), (uint64_t)(*(void *)(v9 + 24) - *(void *)(v9 + 16)) >> 2);
        operator new();
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Invalid abbrev tag ", 19);
      int v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" for symbol entry.", 18);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19, &v17);
      Exception::Exception(v16, &v17);
      uint64_t v15 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v15, (uint64_t)v16);
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Null abbrev discovered in DWARF at index ", 41);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19, &v17);
    Exception::Exception(v16, &v17);
    unint64_t v13 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v13, (uint64_t)v16);
  }
  memset(v19, 0, 48);
  __p = (void *)a2;
  (*(void (**)(uint64_t, void **, void))(*(void *)v8 + 16))(v8, &__p, *(unsigned __int16 *)(a2 + 36));
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a2, v3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1B901ABBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void record_concrete_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void **a5)
{
  if (a2)
  {
    uint64_t v9 = 0;
    uint64_t v25 = (uint64_t)(a5 + 2);
    int v10 = *(unsigned __int8 *)(a3 + 12);
    do
    {
      std::deque<TRawSymbol<Pointer64>>::push_back(a4, a1 + 104 * v9);
      if (v10)
      {
        unint64_t v11 = a4[5] + a4[4] - 1;
        unint64_t v12 = *(void *)(a4[1] + 8 * (v11 / 0x27)) + 104 * (v11 % 0x27);
        int v14 = (unint64_t *)a5[1];
        unint64_t v13 = (unint64_t)a5[2];
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v16 = ((char *)v14 - (unsigned char *)*a5) >> 3;
          if ((unint64_t)(v16 + 1) >> 61) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v13 - (void)*a5;
          uint64_t v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
            uint64_t v18 = v16 + 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v18;
          }
          if (v19) {
            unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v25, v19);
          }
          else {
            unint64_t v20 = 0;
          }
          uint64_t v21 = (unint64_t *)&v20[8 * v16];
          *uint64_t v21 = v12;
          uint64_t v15 = v21 + 1;
          unsigned int v23 = (char *)*a5;
          unsigned int v22 = (char *)a5[1];
          if (v22 != *a5)
          {
            do
            {
              unint64_t v24 = *((void *)v22 - 1);
              v22 -= 8;
              *--uint64_t v21 = v24;
            }
            while (v22 != v23);
            unsigned int v22 = (char *)*a5;
          }
          *a5 = v21;
          a5[1] = v15;
          a5[2] = &v20[8 * v19];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          unint64_t *v14 = v12;
          uint64_t v15 = v14 + 1;
        }
        a5[1] = v15;
      }
      ++v9;
    }
    while (v9 != a2);
  }
}

void record_inlined_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v5 = a1;
  int v6 = *(unsigned __int8 *)(a3 + 12);
  __p = 0;
  uint64_t v61 = 0;
  unsigned int v62 = 0;
  uint64_t v7 = &a1[13 * a2];
  uint64_t v9 = (char *)*a4;
  uint64_t v8 = (char *)a4[1];
  do
  {
    if (v8 == v9)
    {
      unint64_t v11 = (char *)*a4;
      if (a2) {
        goto LABEL_10;
      }
      goto LABEL_60;
    }
    uint64_t v10 = *((void *)v8 - 1);
    v8 -= 8;
  }
  while (!v10);
  unint64_t v11 = v8 + 8;
  while (v8 != v9)
  {
    unint64_t v12 = v8;
    uint64_t v14 = *((void *)v8 - 1);
    v8 -= 8;
    uint64_t v13 = v14;
    if (!v14 || !*(unsigned char *)(v13 + 88))
    {
      uint64_t v9 = v12;
      break;
    }
  }
  if (!a2)
  {
LABEL_60:
    uint64_t v46 = 0;
    if (!v6) {
      goto LABEL_81;
    }
    goto LABEL_61;
  }
LABEL_10:
  BOOL v16 = a2 != 1 || v6 == 0;
  uint64_t v59 = (uint64_t)(a4 + 2);
  do
  {
    uint64_t v17 = v11;
    while (v17 != v9)
    {
      unint64_t v19 = (uint64_t *)*((void *)v17 - 1);
      v17 -= 8;
      uint64_t v18 = v19;
      if (*v5 - *v19 < (unint64_t)v19[1])
      {
        unint64_t v20 = v18[9];
        if (v20 >= v18[10])
        {
          uint64_t v21 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(v18 + 8, (uint64_t)v5);
        }
        else
        {
          *(void *)(v20 + 96) = 0;
          *(_OWORD *)unint64_t v20 = 0u;
          *(_OWORD *)(v20 + 16) = 0u;
          *(_OWORD *)(v20 + 48) = 0u;
          *(_OWORD *)(v20 + 64) = 0u;
          *(_OWORD *)(v20 + 73) = 0u;
          TRawSymbol<Pointer64>::operator=(v20, (uint64_t)v5);
          uint64_t v21 = v20 + 104;
        }
        v18[9] = v21;
        if (v16)
        {
          if (v6)
          {
            uint64_t v22 = 0x4EC4EC4EC4EC4EC5 * ((v21 - v18[8]) >> 3) - 1;
            if (v61 >= v62)
            {
              uint64_t v33 = (v61 - __p) >> 4;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 60) {
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v35 = v62 - __p;
              if ((v62 - __p) >> 3 > v34) {
                unint64_t v34 = v35 >> 3;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              int v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v62, v36);
              uint64_t v39 = (uint64_t **)&v37[16 * v33];
              *uint64_t v39 = v18;
              v39[1] = (uint64_t *)v22;
              uint64_t v40 = v61;
              uint64_t v41 = v39;
              if (v61 != __p)
              {
                do
                {
                  *((_OWORD *)v41 - 1) = *((_OWORD *)v40 - 1);
                  v41 -= 2;
                  v40 -= 16;
                }
                while (v40 != __p);
                uint64_t v40 = __p;
              }
              unsigned int v23 = (char *)(v39 + 2);
              __p = (char *)v41;
              unsigned int v62 = &v37[16 * v38];
              if (v40) {
                operator delete(v40);
              }
            }
            else
            {
              *(void *)uint64_t v61 = v18;
              *((void *)v61 + 1) = v22;
              unsigned int v23 = v61 + 16;
            }
            uint64_t v61 = v23;
          }
        }
        else
        {
          uint64_t v24 = v21 - 104;
          unsigned int v26 = a4[1];
          unint64_t v25 = (unint64_t)a4[2];
          if ((unint64_t)v26 >= v25)
          {
            uint64_t v28 = v26 - *a4;
            if ((unint64_t)(v28 + 1) >> 61) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v29 = v25 - (void)*a4;
            uint64_t v30 = v29 >> 2;
            if (v29 >> 2 <= (unint64_t)(v28 + 1)) {
              uint64_t v30 = v28 + 1;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v30;
            }
            if (v31) {
              uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v59, v31);
            }
            else {
              uint64_t v32 = 0;
            }
            unint64_t v42 = (uint64_t *)&v32[8 * v28];
            *unint64_t v42 = v24;
            uint64_t v27 = v42 + 1;
            unint64_t v44 = *a4;
            uint64_t v43 = (char *)a4[1];
            if (v43 != (char *)*a4)
            {
              do
              {
                uint64_t v45 = *((void *)v43 - 1);
                v43 -= 8;
                *--unint64_t v42 = v45;
              }
              while (v43 != (char *)v44);
              uint64_t v43 = (char *)*a4;
            }
            *a4 = v42;
            a4[1] = v27;
            a4[2] = (uint64_t *)&v32[8 * v31];
            if (v43) {
              operator delete(v43);
            }
          }
          else
          {
            *unsigned int v26 = v24;
            uint64_t v27 = v26 + 1;
          }
          a4[1] = v27;
        }
        break;
      }
    }
    v5 += 13;
  }
  while (v5 != v7);
  uint64_t v46 = __p;
  if (v6)
  {
LABEL_61:
    if (v46 != v61)
    {
      char v47 = a4 + 2;
      int v48 = a4[1];
      do
      {
        uint64_t v49 = *(void *)(*(void *)v46 + 64) + 104 * *((void *)v46 + 1);
        if ((unint64_t)v48 >= *v47)
        {
          uint64_t v50 = v48 - *a4;
          if ((unint64_t)(v50 + 1) >> 61) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v51 = *v47 - (void)*a4;
          uint64_t v52 = v51 >> 2;
          if (v51 >> 2 <= (unint64_t)(v50 + 1)) {
            uint64_t v52 = v50 + 1;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v52;
          }
          if (v53) {
            unint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a4 + 2), v53);
          }
          else {
            unint64_t v54 = 0;
          }
          char v55 = (uint64_t *)&v54[8 * v50];
          uint64_t *v55 = v49;
          int v48 = v55 + 1;
          uint64_t v57 = *a4;
          uint64_t v56 = (char *)a4[1];
          if (v56 != (char *)*a4)
          {
            do
            {
              uint64_t v58 = *((void *)v56 - 1);
              v56 -= 8;
              *--char v55 = v58;
            }
            while (v56 != (char *)v57);
            uint64_t v56 = (char *)*a4;
          }
          *a4 = v55;
          a4[1] = v48;
          a4[2] = (uint64_t *)&v54[8 * v53];
          if (v56) {
            operator delete(v56);
          }
        }
        else
        {
          *v48++ = v49;
        }
        a4[1] = v48;
        v46 += 16;
      }
      while (v46 != v61);
      uint64_t v46 = __p;
    }
  }
LABEL_81:
  if (v46) {
    operator delete(v46);
  }
}

void sub_1B901B1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<TRawSymbol<Pointer64>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 39 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<TRawSymbol<Pointer64>>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x27)) + 104 * (v7 % 0x27);
  }
  *(void *)(v8 + 96) = 0;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 73) = 0u;
  uint64_t result = TRawSymbol<Pointer64>::operator=(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<TRawSymbol<Pointer64>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x27;
  unint64_t v4 = v2 - 39;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFD8uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFD8uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0xFD8uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B901B5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__emplace_back_slow_path<TRawSymbol<Pointer64>::dwarf_ranges_tag,unsigned long long &,unsigned long long &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo *>(uint64_t *a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int *a7, _OWORD **a8)
{
  uint64_t v9 = *a1;
  uint64_t v10 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) > 0x276276276276276) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (uint64_t)(a1 + 2);
  unint64_t v19 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v9) >> 3);
  if (2 * v19 > v11) {
    unint64_t v11 = 2 * v19;
  }
  if (v19 >= 0x13B13B13B13B13BLL) {
    unint64_t v20 = 0x276276276276276;
  }
  else {
    unint64_t v20 = v11;
  }
  v31[4] = a1 + 2;
  if (v20) {
    uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>>(v18, v20);
  }
  else {
    uint64_t v21 = 0;
  }
  unint64_t v22 = &v21[104 * v10];
  v31[0] = v21;
  v31[1] = v22;
  v31[3] = &v21[104 * v20];
  uint64_t v23 = *a4;
  uint64_t v24 = *a5;
  uint64_t v25 = *a6;
  int v26 = *a7;
  uint64_t v27 = *a8;
  *(void *)unint64_t v22 = *a3;
  *((void *)v22 + 1) = v23;
  *((void *)v22 + 2) = 0;
  *((void *)v22 + 3) = 0;
  *((void *)v22 + 4) = v24;
  *((void *)v22 + 5) = v25;
  *((_OWORD *)v22 + 3) = 0u;
  *((void *)v22 + 12) = 0;
  *(_OWORD *)(v22 + 73) = 0u;
  *((_OWORD *)v22 + 4) = 0u;
  if (v27)
  {
    *((_OWORD *)v22 + 3) = *v27;
    v26 |= 0x80000000;
  }
  uint64_t v28 = &v21[104 * v10];
  *((_DWORD *)v28 + 7) = v26;
  v28[88] = 1;
  v31[2] = v22 + 104;
  std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(a1, v31);
  uint64_t v29 = a1[1];
  std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer(v31);
  return v29;
}

void sub_1B901B79C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>(uint64_t *a1, unint64_t a2, unsigned __int16 a3, uint64_t (***a4)(void, std::vector<std::string>::pointer), CSCppStringCache *a5, uint64_t a6, uint64_t a7, char **a8)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  size_t v13 = *(void *)(a7 + 8) - *(void *)a7;
  BOOL v80 = v13 == a8[1] - *a8 && memcmp(*(const void **)a7, *a8, v13) == 0;
  __int16 v90 = 0;
  unsigned int v89 = 0;
  __s = 0;
  unsigned int v14 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(a1);
  std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::vector(&v86, v14);
  if (v86 != v87)
  {
    int v15 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    int v16 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    if (v15 <= 2)
    {
      if (v15 == 1) {
        read_action_for_line_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v16);
      }
      if (v15 == 2) {
        read_action_for_line_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v16);
      }
    }
    else if ((v15 - 3) < 3 || v15 == 8193)
    {
      skip_action_for_line_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v16);
    }
    skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v16);
  }
  unint64_t v17 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
  std::vector<CSCppSymbolOwner *>::reserve((void **)a8, v17);
  v84[0] = 0u;
  v84[1] = (unint64_t)a1;
  uint64_t v85 = 0;
  v84[2] = a2;
  if (v17)
  {
    uint64_t v18 = 0;
    p_end_cap = &v83.__end_cap_;
    uint64_t v77 = (uint64_t)(a8 + 2);
    unint64_t v20 = MEMORY[0x1E4F14500];
    uint64_t v21 = a3;
    do
    {
      unint64_t v22 = (std::allocator<std::string> *)p_end_cap;
      unint64_t v23 = v17;
      memset(&v83, 0, sizeof(v83));
      uint64_t v24 = v86;
      uint64_t v25 = v87;
      if (v86 != v87)
      {
        while (1)
        {
          __int16 v90 = 0;
          (*(void (**)(void, _OWORD *, uint64_t))(*(void *)*v24 + 16))(*v24, v84, v21);
          if (!(*(unsigned int (**)(void))(*(void *)*v24 + 32))())
          {
            if (!__s)
            {
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf[0].__first_) = 0;
                _os_log_impl(&dword_1B8F92000, v20, OS_LOG_TYPE_DEFAULT, "No string extracted from DWARF5 path list", (uint8_t *)buf, 2u);
              }
              goto LABEL_18;
            }
            if (v90 == 2)
            {
              if (v89 > (unint64_t)((uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 3)) {
                goto LABEL_18;
              }
              if (isAbsolutePath(__s)) {
                goto LABEL_18;
              }
              begin = v83.__begin_;
              std::string::basic_string[abi:ne180100]<0>(buf, *(char **)(*(void *)a7 + 8 * v89));
              v29.__i_ = begin;
              std::vector<std::string>::insert(&v83, v29, (std::vector<std::string>::value_type *)buf);
              if ((SHIBYTE(buf[0].__end_) & 0x80000000) == 0) {
                goto LABEL_18;
              }
              std::__split_buffer<std::string>::pointer first = buf[0].__first_;
              goto LABEL_58;
            }
            if (v90 == 1)
            {
              if (v80 && *(void *)(a7 + 8) != *(void *)a7 && !isAbsolutePath(__s))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, **(char ***)a7);
                std::vector<std::string>::pointer end = v83.__end_;
                if (v83.__end_ >= v83.__end_cap_.__value_)
                {
                  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v83.__end_ - (char *)v83.__begin_) >> 3);
                  unint64_t v32 = v31 + 1;
                  if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5555555555555556 * (((char *)v83.__end_cap_.__value_ - (char *)v83.__begin_) >> 3) > v32) {
                    unint64_t v32 = 0x5555555555555556 * (((char *)v83.__end_cap_.__value_ - (char *)v83.__begin_) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v83.__end_cap_.__value_ - (char *)v83.__begin_) >> 3) >= 0x555555555555555) {
                    unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v33 = v32;
                  }
                  buf[0].__end_cap_.__value_ = v22;
                  if (v33) {
                    unint64_t v34 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)v22, v33);
                  }
                  else {
                    unint64_t v34 = 0;
                  }
                  uint64_t v35 = v34 + v31;
                  buf[0].__first_ = v34;
                  buf[0].__begin_ = v35;
                  buf[0].__end_cap_.__value_ = &v34[v33];
                  long long v36 = *(_OWORD *)__p;
                  v35->__r_.__value_.__r.__words[2] = v82;
                  *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
                  __p[1] = 0;
                  std::string::size_type v82 = 0;
                  __p[0] = 0;
                  buf[0].__end_ = v35 + 1;
                  std::vector<std::string>::__swap_out_circular_buffer(&v83, buf);
                  int v37 = v83.__end_;
                  std::__split_buffer<std::string>::~__split_buffer(buf);
                  v83.__end_ = v37;
                  if (SHIBYTE(v82) < 0) {
                    operator delete(__p[0]);
                  }
                }
                else
                {
                  long long v27 = *(_OWORD *)__p;
                  v83.__end_->__r_.__value_.__r.__words[2] = v82;
                  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v27;
                  v83.__end_ = end + 1;
                }
              }
              std::string::basic_string[abi:ne180100]<0>(__p, __s);
              std::vector<std::string>::pointer v38 = v83.__end_;
              if (v83.__end_ >= v83.__end_cap_.__value_)
              {
                unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (((char *)v83.__end_ - (char *)v83.__begin_) >> 3);
                unint64_t v41 = v40 + 1;
                if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * (((char *)v83.__end_cap_.__value_ - (char *)v83.__begin_) >> 3) > v41) {
                  unint64_t v41 = 0x5555555555555556 * (((char *)v83.__end_cap_.__value_ - (char *)v83.__begin_) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v83.__end_cap_.__value_ - (char *)v83.__begin_) >> 3) >= 0x555555555555555) {
                  unint64_t v42 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v42 = v41;
                }
                buf[0].__end_cap_.__value_ = v22;
                if (v42) {
                  uint64_t v43 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)v22, v42);
                }
                else {
                  uint64_t v43 = 0;
                }
                unint64_t v44 = v43 + v40;
                buf[0].__first_ = v43;
                buf[0].__begin_ = v44;
                buf[0].__end_cap_.__value_ = &v43[v42];
                long long v45 = *(_OWORD *)__p;
                v44->__r_.__value_.__r.__words[2] = v82;
                *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
                __p[1] = 0;
                std::string::size_type v82 = 0;
                __p[0] = 0;
                buf[0].__end_ = v44 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&v83, buf);
                unint64_t v46 = v83.__end_;
                std::__split_buffer<std::string>::~__split_buffer(buf);
                v83.__end_ = v46;
                if ((SHIBYTE(v82) & 0x80000000) == 0) {
                  goto LABEL_18;
                }
                std::__split_buffer<std::string>::pointer first = (std::__split_buffer<std::string>::pointer)__p[0];
LABEL_58:
                operator delete(first);
                goto LABEL_18;
              }
              long long v39 = *(_OWORD *)__p;
              v83.__end_->__r_.__value_.__r.__words[2] = v82;
              *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
              v83.__end_ = v38 + 1;
            }
          }
LABEL_18:
          if (++v24 == v25)
          {
            std::vector<std::string>::pointer v48 = v83.__begin_;
            std::vector<std::string>::pointer v47 = v83.__end_;
            goto LABEL_60;
          }
        }
      }
      std::vector<std::string>::pointer v48 = 0;
      std::vector<std::string>::pointer v47 = 0;
LABEL_60:
      p_end_cap = (std::__compressed_pair<std::string *> *)v22;
      if ((char *)v47 - (char *)v48 == 24)
      {
        if (SHIBYTE(v48->__r_.__value_.__r.__words[2]) < 0) {
          std::vector<std::string>::pointer v48 = (std::vector<std::string>::pointer)v48->__r_.__value_.__r.__words[0];
        }
        uint64_t v49 = (char *)(**a4)(a4, v48);
        uint64_t v50 = CSCppStringCache::intern(a5, v49);
        uint64_t v52 = (unsigned __int8 **)a8[1];
        unint64_t v51 = (unint64_t)a8[2];
        if ((unint64_t)v52 >= v51)
        {
          uint64_t v53 = ((char *)v52 - *a8) >> 3;
          if ((unint64_t)(v53 + 1) >> 61) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v54 = v51 - (void)*a8;
          uint64_t v55 = v54 >> 2;
          if (v54 >> 2 <= (unint64_t)(v53 + 1)) {
            uint64_t v55 = v53 + 1;
          }
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v55;
          }
          if (v56) {
            uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v77, v56);
          }
          else {
            uint64_t v57 = 0;
          }
          v69 = (unsigned __int8 **)&v57[8 * v53];
          uint64_t *v69 = v50;
          int v65 = (char *)(v69 + 1);
          uint64_t v71 = *a8;
          uint64_t v70 = a8[1];
          if (v70 != *a8)
          {
            do
            {
              unint64_t v72 = (unsigned __int8 *)*((void *)v70 - 1);
              v70 -= 8;
              *--v69 = v72;
            }
            while (v70 != v71);
            goto LABEL_108;
          }
          goto LABEL_109;
        }
      }
      else if (0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (char *)v48) >> 3) < 2)
      {
        uint64_t v50 = CSCppStringCache::intern(a5, "");
        uint64_t v52 = (unsigned __int8 **)a8[1];
        unint64_t v59 = (unint64_t)a8[2];
        if ((unint64_t)v52 >= v59)
        {
          uint64_t v60 = ((char *)v52 - *a8) >> 3;
          if ((unint64_t)(v60 + 1) >> 61) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v61 = v59 - (void)*a8;
          uint64_t v62 = v61 >> 2;
          if (v61 >> 2 <= (unint64_t)(v60 + 1)) {
            uint64_t v62 = v60 + 1;
          }
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v62;
          }
          if (v56) {
            uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v77, v56);
          }
          else {
            uint64_t v57 = 0;
          }
          v69 = (unsigned __int8 **)&v57[8 * v60];
          uint64_t *v69 = v50;
          int v65 = (char *)(v69 + 1);
          uint64_t v73 = *a8;
          uint64_t v70 = a8[1];
          if (v70 != *a8)
          {
            do
            {
              char v74 = (unsigned __int8 *)*((void *)v70 - 1);
              v70 -= 8;
              *--v69 = v74;
            }
            while (v70 != v73);
LABEL_108:
            uint64_t v70 = *a8;
          }
LABEL_109:
          *a8 = (char *)v69;
          a8[1] = v65;
          a8[2] = &v57[8 * v56];
          if (v70) {
            operator delete(v70);
          }
          goto LABEL_111;
        }
      }
      else
      {
        LOBYTE(buf[0].__first_) = 0;
        while (v48 != v47)
        {
          uint64_t v58 = (const char *)v48;
          if (SHIBYTE(v48->__r_.__value_.__r.__words[2]) < 0) {
            uint64_t v58 = (const char *)v48->__r_.__value_.__r.__words[0];
          }
          stringByAppendingPathComponents((char *)buf, 0x400uLL, (const char *)buf, v58);
          ++v48;
        }
        int v63 = (char *)(**a4)(a4, (std::vector<std::string>::pointer)buf);
        uint64_t v50 = CSCppStringCache::intern(a5, v63);
        uint64_t v52 = (unsigned __int8 **)a8[1];
        unint64_t v64 = (unint64_t)a8[2];
        if ((unint64_t)v52 >= v64)
        {
          uint64_t v66 = ((char *)v52 - *a8) >> 3;
          if ((unint64_t)(v66 + 1) >> 61) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v67 = v64 - (void)*a8;
          uint64_t v68 = v67 >> 2;
          if (v67 >> 2 <= (unint64_t)(v66 + 1)) {
            uint64_t v68 = v66 + 1;
          }
          if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v68;
          }
          if (v56) {
            uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v77, v56);
          }
          else {
            uint64_t v57 = 0;
          }
          v69 = (unsigned __int8 **)&v57[8 * v66];
          uint64_t *v69 = v50;
          int v65 = (char *)(v69 + 1);
          uint64_t v75 = *a8;
          uint64_t v70 = a8[1];
          if (v70 != *a8)
          {
            do
            {
              unint64_t v76 = (unsigned __int8 *)*((void *)v70 - 1);
              v70 -= 8;
              *--v69 = v76;
            }
            while (v70 != v75);
            goto LABEL_108;
          }
          goto LABEL_109;
        }
      }
      uint64_t *v52 = v50;
      int v65 = (char *)(v52 + 1);
LABEL_111:
      a8[1] = v65;
      buf[0].__first_ = (std::__split_buffer<std::string>::pointer)&v83;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      ++v18;
      unint64_t v17 = v23;
    }
    while (v18 != v23);
  }
  buf[0].__first_ = (std::__split_buffer<std::string>::pointer)&v86;
  std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1B901C01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__split_buffer<std::string> *a34)
{
}

const char *parse_dwarf2_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>(uint64_t *a1, const char *a2, uint64_t (***a3)(void, char *), CSCppStringCache *a4, void **a5, void **a6)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = (uint64_t)(a5 + 2);
  unint64_t v12 = (unint64_t)a5[2];
  unsigned int v14 = (const char **)a5[1];
  if ((unint64_t)v14 >= v12)
  {
    uint64_t v16 = ((char *)v14 - (unsigned char *)*a5) >> 3;
    if ((unint64_t)(v16 + 1) >> 61) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v12 - (void)*a5;
    uint64_t v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
      uint64_t v18 = v16 + 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19) {
      unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a5 + 2), v19);
    }
    else {
      unint64_t v20 = 0;
    }
    uint64_t v21 = (const char **)&v20[8 * v16];
    unint64_t v22 = &v20[8 * v19];
    *uint64_t v21 = a2;
    int v15 = v21 + 1;
    uint64_t v24 = (char *)*a5;
    unint64_t v23 = (char *)a5[1];
    if (v23 != *a5)
    {
      do
      {
        uint64_t v25 = (const char *)*((void *)v23 - 1);
        v23 -= 8;
        *--uint64_t v21 = v25;
      }
      while (v23 != v24);
      unint64_t v23 = (char *)*a5;
    }
    *a5 = v21;
    a5[1] = v15;
    a5[2] = v22;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    unint64_t *v14 = a2;
    int v15 = v14 + 1;
  }
  a5[1] = v15;
  int v26 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string((uint64_t)a1);
  if (*v26)
  {
    long long v27 = v26;
    do
    {
      if (isAbsolutePath(v27))
      {
        std::vector<std::string>::const_iterator v29 = (const char **)a5[1];
        unint64_t v28 = (unint64_t)a5[2];
        if ((unint64_t)v29 >= v28)
        {
          uint64_t v30 = ((char *)v29 - (unsigned char *)*a5) >> 3;
          if ((unint64_t)(v30 + 1) >> 61) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v31 = v28 - (void)*a5;
          uint64_t v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
            uint64_t v32 = v30 + 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v32;
          }
          if (v33) {
            unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13, v33);
          }
          else {
            unint64_t v34 = 0;
          }
          unint64_t v41 = (const char **)&v34[8 * v30];
          *unint64_t v41 = v27;
          int v37 = v41 + 1;
          uint64_t v43 = (char *)*a5;
          unint64_t v42 = (char *)a5[1];
          if (v42 != *a5)
          {
            do
            {
              unint64_t v44 = (const char *)*((void *)v42 - 1);
              v42 -= 8;
              *--unint64_t v41 = v44;
            }
            while (v42 != v43);
            goto LABEL_46;
          }
          goto LABEL_47;
        }
      }
      else
      {
        stringByAppendingPathComponents(v76, 0x400uLL, a2, v27);
        uint64_t v35 = (char *)(**a3)(a3, v76);
        long long v27 = (const char *)CSCppStringCache::intern(a4, v35);
        std::vector<std::string>::const_iterator v29 = (const char **)a5[1];
        unint64_t v36 = (unint64_t)a5[2];
        if ((unint64_t)v29 >= v36)
        {
          uint64_t v38 = ((char *)v29 - (unsigned char *)*a5) >> 3;
          if ((unint64_t)(v38 + 1) >> 61) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = v36 - (void)*a5;
          uint64_t v40 = v39 >> 2;
          if (v39 >> 2 <= (unint64_t)(v38 + 1)) {
            uint64_t v40 = v38 + 1;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v40;
          }
          if (v33) {
            unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13, v33);
          }
          else {
            unint64_t v34 = 0;
          }
          unint64_t v41 = (const char **)&v34[8 * v38];
          *unint64_t v41 = v27;
          int v37 = v41 + 1;
          long long v45 = (char *)*a5;
          unint64_t v42 = (char *)a5[1];
          if (v42 != *a5)
          {
            do
            {
              unint64_t v46 = (const char *)*((void *)v42 - 1);
              v42 -= 8;
              *--unint64_t v41 = v46;
            }
            while (v42 != v45);
LABEL_46:
            unint64_t v42 = (char *)*a5;
          }
LABEL_47:
          *a5 = v41;
          a5[1] = v37;
          a5[2] = &v34[8 * v33];
          if (v42) {
            operator delete(v42);
          }
          goto LABEL_49;
        }
      }
      *std::vector<std::string>::const_iterator v29 = v27;
      int v37 = v29 + 1;
LABEL_49:
      a5[1] = v37;
      long long v27 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string((uint64_t)a1);
    }
    while (*v27);
  }
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string((uint64_t)a1);
  for (uint64_t i = result; *result; uint64_t i = result)
  {
    unsigned int v49 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)a1);
    TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)a1);
    if (*i == 47)
    {
      uint64_t v50 = (unsigned __int8 *)(**a3)(a3, (char *)i);
      uint64_t v52 = (unsigned __int8 **)a6[1];
      unint64_t v51 = (unint64_t)a6[2];
      if ((unint64_t)v52 >= v51)
      {
        uint64_t v53 = ((char *)v52 - (unsigned char *)*a6) >> 3;
        if ((unint64_t)(v53 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v54 = v51 - (void)*a6;
        uint64_t v55 = v54 >> 2;
        if (v54 >> 2 <= (unint64_t)(v53 + 1)) {
          uint64_t v55 = v53 + 1;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v55;
        }
        if (v56) {
          uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a6 + 2), v56);
        }
        else {
          uint64_t v57 = 0;
        }
        uint64_t v68 = (unsigned __int8 **)&v57[8 * v53];
        long long *v68 = v50;
        unint64_t v64 = v68 + 1;
        uint64_t v70 = (char *)*a6;
        v69 = (char *)a6[1];
        if (v69 != *a6)
        {
          do
          {
            uint64_t v71 = (unsigned __int8 *)*((void *)v69 - 1);
            v69 -= 8;
            *--uint64_t v68 = v71;
          }
          while (v69 != v70);
          goto LABEL_92;
        }
        goto LABEL_93;
      }
    }
    else if (v49 >= (unint64_t)(((unsigned char *)a5[1] - (unsigned char *)*a5) >> 3))
    {
      uint64_t v50 = (unsigned __int8 *)(**a3)(a3, (char *)i);
      uint64_t v52 = (unsigned __int8 **)a6[1];
      unint64_t v63 = (unint64_t)a6[2];
      if ((unint64_t)v52 >= v63)
      {
        uint64_t v65 = ((char *)v52 - (unsigned char *)*a6) >> 3;
        if ((unint64_t)(v65 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v66 = v63 - (void)*a6;
        uint64_t v67 = v66 >> 2;
        if (v66 >> 2 <= (unint64_t)(v65 + 1)) {
          uint64_t v67 = v65 + 1;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v67;
        }
        if (v56) {
          uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a6 + 2), v56);
        }
        else {
          uint64_t v57 = 0;
        }
        uint64_t v68 = (unsigned __int8 **)&v57[8 * v65];
        long long *v68 = v50;
        unint64_t v64 = v68 + 1;
        unint64_t v72 = (char *)*a6;
        v69 = (char *)a6[1];
        if (v69 != *a6)
        {
          do
          {
            uint64_t v73 = (unsigned __int8 *)*((void *)v69 - 1);
            v69 -= 8;
            *--uint64_t v68 = v73;
          }
          while (v69 != v72);
LABEL_92:
          v69 = (char *)*a6;
        }
LABEL_93:
        *a6 = v68;
        a6[1] = v64;
        a6[2] = &v57[8 * v56];
        if (v69) {
          operator delete(v69);
        }
        goto LABEL_95;
      }
    }
    else
    {
      stringByAppendingPathComponents(v76, 0x400uLL, *((const char **)*a5 + v49), i);
      uint64_t v58 = (char *)(**a3)(a3, v76);
      uint64_t v50 = CSCppStringCache::intern(a4, v58);
      uint64_t v52 = (unsigned __int8 **)a6[1];
      unint64_t v59 = (unint64_t)a6[2];
      if ((unint64_t)v52 >= v59)
      {
        uint64_t v60 = ((char *)v52 - (unsigned char *)*a6) >> 3;
        if ((unint64_t)(v60 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v61 = v59 - (void)*a6;
        uint64_t v62 = v61 >> 2;
        if (v61 >> 2 <= (unint64_t)(v60 + 1)) {
          uint64_t v62 = v60 + 1;
        }
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v62;
        }
        if (v56) {
          uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a6 + 2), v56);
        }
        else {
          uint64_t v57 = 0;
        }
        uint64_t v68 = (unsigned __int8 **)&v57[8 * v60];
        long long *v68 = v50;
        unint64_t v64 = v68 + 1;
        char v74 = (char *)*a6;
        v69 = (char *)a6[1];
        if (v69 != *a6)
        {
          do
          {
            uint64_t v75 = (unsigned __int8 *)*((void *)v69 - 1);
            v69 -= 8;
            *--uint64_t v68 = v75;
          }
          while (v69 != v74);
          goto LABEL_92;
        }
        goto LABEL_93;
      }
    }
    uint64_t *v52 = v50;
    unint64_t v64 = v52 + 1;
LABEL_95:
    a6[1] = v64;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string((uint64_t)a1);
  }
  return result;
}

uint64_t std::deque<TRawSourceInfo<Pointer64>>::emplace_back<unsigned long long &,int,char const*&,int &,unsigned int &>(void *a1, void *a2, int *a3, uint64_t *a4, int *a5, unsigned int *a6)
{
  uint64_t v12 = a1[2];
  uint64_t v13 = a1[1];
  if (v12 == v13) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = 102 * ((v12 - v13) >> 3) - 1;
  }
  uint64_t v15 = a1[4];
  uint64_t v16 = a1[5];
  unint64_t v17 = v16 + v15;
  if (v14 == v16 + v15)
  {
    std::deque<TRawSourceInfo<Pointer64>>::__add_back_capacity(a1);
    uint64_t v15 = a1[4];
    uint64_t v16 = a1[5];
    uint64_t v13 = a1[1];
    unint64_t v17 = v15 + v16;
  }
  unint64_t v18 = *(void *)(v13 + 8 * (v17 / 0x66)) + 40 * (v17 % 0x66);
  uint64_t v19 = *a3;
  uint64_t v20 = *a4;
  int v21 = *a5;
  unsigned int v22 = *a6;
  *(void *)unint64_t v18 = *a2;
  *(void *)(v18 + 8) = v19;
  *(void *)(v18 + 16) = v20;
  *(_DWORD *)(v18 + 24) = v21;
  *(void *)(v18 + 28) = v22;
  uint64_t v23 = v16 + 1;
  a1[5] = v23;
  unint64_t v24 = v15 + v23;
  uint64_t v25 = (void *)(v13 + 8 * (v24 / 0x66));
  unint64_t v26 = v24 % 0x66;
  if (v26) {
    uint64_t v27 = *v25 + 40 * v26;
  }
  else {
    uint64_t v27 = *(v25 - 1) + 4080;
  }
  return v27 - 40;
}

void read_action_for_line_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1)
{
  if (a1 != 8)
  {
    if (a1 != 31 && a1 != 14)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Unhandled form in read string binding ", 38);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
      Exception::Exception(v2, &v3);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v2);
    }
    operator new();
  }
  operator new();
}

void sub_1B901C910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void read_action_for_line_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1)
{
  switch(a1)
  {
    case 5:
      operator new();
    case 6:
      operator new();
    case 7:
      operator new();
    case 11:
      operator new();
    case 15:
      operator new();
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Unhandled form in read data binding ", 36);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
      Exception::Exception(v2, &v3);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v2);
  }
}

void sub_1B901CB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void skip_action_for_line_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1)
{
  switch(a1)
  {
    case 5:
      operator new();
    case 6:
      operator new();
    case 7:
      operator new();
    case 8:
      operator new();
    case 9:
      operator new();
    case 10:
    case 12:
    case 13:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      goto LABEL_12;
    case 11:
      goto LABEL_4;
    case 14:
    case 23:
    case 31:
      operator new();
    case 15:
      operator new();
    case 30:
      operator new();
    default:
      if (a1 == 37) {
LABEL_4:
      }
        operator new();
LABEL_12:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Unhandled dwarf attribute in Debug Line Table ", 46);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
      Exception::Exception(v2, &v3);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v2);
  }
}

void sub_1B901CEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_LineStrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_LineStrpAttributeAction()
{
}

uint64_t TDwarfReadDW_FORM_LineStrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  if ((*(_WORD *)(a1 + 24) & **(_WORD **)(a1 + 16)) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    unsigned int v5 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(result);
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v4, v5);
    uint64_t v6 = *(void **)(a1 + 8);
    **(_WORD **)(a1 + 16) |= *(_WORD *)(a1 + 24);
    *uint64_t v6 = *(void *)v4 + *(unsigned int *)(v4 + 8);
  }
  return result;
}

void TDwarfReadLineDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadLineDW_FORM_Data1AttributeAction()
{
}

uint64_t TDwarfReadLineDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadLineDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadLineDW_FORM_Data2AttributeAction()
{
}

uint64_t TDwarfReadLineDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadLineDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadLineDW_FORM_Data4AttributeAction()
{
}

uint64_t TDwarfReadLineDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadLineDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadLineDW_FORM_Data8AttributeAction()
{
}

uint64_t TDwarfReadLineDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadLineDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadLineDW_FORM_UdataAttributeAction()
{
}

uint64_t TDwarfReadLineDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  long long v3 = *(uint64_t **)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)v3);
  }
  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfSkipDW_FORM_Line_StrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_Line_StrpAttributeAction()
{
}

void TDwarfSkipDW_FORM_Line_StrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(a2 + 16) + 8) += 4;
}

uint64_t TDwarfSkipDW_FORM_Line_StrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::is_skip_constant()
{
  return 1;
}

void TDwarfSkipDW_FORM_Line_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_Line_StringAttributeAction()
{
}

size_t TDwarfSkipDW_FORM_Line_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_string(*(void *)(a2 + 16));
}

uint64_t TDwarfSkipDW_FORM_Line_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::is_skip_constant()
{
  return 1;
}

void TDwarfSkipLineConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipLineConstantAttributeAction()
{
}

uint64_t TDwarfSkipLineConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(void *)(a2 + 16) + 8) += *(_DWORD *)(result + 8);
  return result;
}

uint64_t TDwarfSkipLineConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::is_skip_constant()
{
  return 1;
}

void TDwarfSkipLineDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipLineDW_FORM_BlockAttributeAction()
{
}

uint64_t TDwarfSkipLineDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block(*(void *)(a2 + 16));
}

void TDwarfSkipLineULEBAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipLineULEBAttributeAction()
{
}

uint64_t TDwarfSkipLineULEBAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(*(void *)(a2 + 16));
}

void std::deque<TRawSourceInfo<Pointer64>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    int v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      std::vector<std::string>::pointer v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front((uint64_t)&v54, v27);
  }
  std::vector<std::string>::const_iterator v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B901D5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<TRangeValue<Pointer64,char const*>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    int v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      std::vector<std::string>::pointer v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front((uint64_t)&v54, v27);
  }
  std::vector<std::string>::const_iterator v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B901D90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

long long *std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRawSourceInfo<Pointer64>,TRawSourceInfo<Pointer64>*,TRawSourceInfo<Pointer64>&,TRawSourceInfo<Pointer64>**,long,102l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRawSourceInfo<Pointer64>,TRawSourceInfo<Pointer64>*,TRawSourceInfo<Pointer64>&,TRawSourceInfo<Pointer64>**,long,102l>,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>>>(long long **a1, long long *a2, long long **a3, long long *a4, void ***a5)
{
  uint64_t v8 = *a5;
  if (a1 == a3)
  {
    uint64_t v15 = a2;
  }
  else
  {
    uint64_t v9 = a1 + 1;
    uint64_t v10 = (uint64_t)(*a1 + 255);
    uint64_t v11 = a2;
    for (uint64_t i = (long long *)v10; ; uint64_t i = v14 + 255)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>,0>(v11, i, v8);
      uint64_t v8 = v13;
      *a5 = v13;
      if (v9 == a3) {
        break;
      }
      BOOL v14 = *v9++;
      uint64_t v11 = v14;
    }
    uint64_t v15 = *a3;
  }
  uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>,0>(v15, a4, v8);
  *a5 = v17;
  return result;
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>,0>(long long *a1, long long *a2, void **a3)
{
  BOOL v3 = a1;
  int v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>::operator=[abi:ne180100](&v6, v3);
    BOOL v3 = (long long *)((char *)v3 + 40);
  }
  while (v3 != v4);
  return v4;
}

void ***std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>::operator=[abi:ne180100](void ***a1, long long *a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = (char *)(*a1)[1];
  int v6 = *a1;
  uint64_t v9 = (char *)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  uint64_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*v4) >> 3);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x666666666666666) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (unsigned char *)*v4) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x333333333333333) {
      unint64_t v16 = 0x666666666666666;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(v7, v16);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = &v17[40 * v13];
    uint64_t v19 = &v17[40 * v16];
    long long v20 = *a2;
    long long v21 = a2[1];
    *((void *)v18 + 4) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v18 = v20;
    *((_OWORD *)v18 + 1) = v21;
    uint64_t v12 = v18 + 40;
    uint64_t v23 = (char *)*v4;
    unint64_t v22 = (char *)v4[1];
    if (v22 != *v4)
    {
      do
      {
        long long v24 = *(_OWORD *)(v22 - 40);
        long long v25 = *(_OWORD *)(v22 - 24);
        *((_DWORD *)v18 - 2) = *((_DWORD *)v22 - 2);
        *(_OWORD *)(v18 - 24) = v25;
        *(_OWORD *)(v18 - 40) = v24;
        v18 -= 40;
        v22 -= 40;
      }
      while (v22 != v23);
      unint64_t v22 = (char *)*v4;
    }
    long long *v4 = v18;
    v4[1] = v12;
    _DWORD v4[2] = v19;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    long long v10 = *a2;
    long long v11 = a2[1];
    *((void *)v5 + 4) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v5 = v10;
    *((_OWORD *)v5 + 1) = v11;
    uint64_t v12 = v5 + 40;
  }
  v4[1] = v12;
  return a1;
}

long long *std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRangeValue<Pointer64,char const*>,TRangeValue<Pointer64,char const*>*,TRangeValue<Pointer64,char const*>&,TRangeValue<Pointer64,char const*>**,long,170l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRangeValue<Pointer64,char const*>,TRangeValue<Pointer64,char const*>*,TRangeValue<Pointer64,char const*>&,TRangeValue<Pointer64,char const*>**,long,170l>,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>>>(long long **a1, long long *a2, long long **a3, long long *a4, void ***a5)
{
  uint64_t v8 = *a5;
  if (a1 == a3)
  {
    unint64_t v15 = a2;
  }
  else
  {
    uint64_t v9 = a1 + 1;
    uint64_t v10 = (uint64_t)(*a1 + 255);
    long long v11 = a2;
    for (uint64_t i = (long long *)v10; ; uint64_t i = v14 + 255)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer64,char const*> *,TRangeValue<Pointer64,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>,0>(v11, i, v8);
      uint64_t v8 = v13;
      *a5 = v13;
      if (v9 == a3) {
        break;
      }
      unint64_t v14 = *v9++;
      long long v11 = v14;
    }
    unint64_t v15 = *a3;
  }
  uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer64,char const*> *,TRangeValue<Pointer64,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>,0>(v15, a4, v8);
  *a5 = v17;
  return result;
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer64,char const*> *,TRangeValue<Pointer64,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>,0>(long long *a1, long long *a2, void **a3)
{
  BOOL v3 = a1;
  int v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<CSCppFlatbufferRelocation>>::operator=[abi:ne180100](&v6, v3);
    BOOL v3 = (long long *)((char *)v3 + 24);
  }
  while (v3 != v4);
  return v4;
}

uint64_t std::deque<TRangeValue<Pointer64,char const*>>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<TRawSymbol<Pointer64>>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    BOOL v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x27];
    unint64_t v7 = (unint64_t)*v6 + 104 * (v5 % 0x27);
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x27] + 104 * ((a1[5] + v5) % 0x27);
    if (v7 != v8)
    {
      do
      {
        unint64_t v15 = (void **)(v7 + 64);
        std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v15);
        v7 += 104;
        if (v7 - (void)*v6 == 4056)
        {
          unint64_t v9 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      unint64_t v2 = (void **)a1[1];
      BOOL v3 = (void **)a1[2];
    }
  }
  void *v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 19;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 39;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    unint64_t v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<TRawSourceInfo<Pointer64>>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 51;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 102;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

void std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    unint64_t v5 = v4 - 1;
    do
    {
      uint64_t v6 = *v5;
      *unint64_t v5 = 0;
      if (v6) {
        std::default_delete<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::operator()[abi:ne180100]((uint64_t)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void extract_direct_stabs_from_header_filtering_redacted<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6)
{
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v19 + 32))(v19, a5, a6);
  uint64_t v10 = a4;
  TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by((uint64_t)a2, a4);
  if (a4)
  {
    unint64_t v11 = 0;
    uint64_t v12 = (unsigned __int8 *)(a3 + 4);
    do
    {
      unsigned int v13 = *v12;
      BOOL v14 = v13 <= 0x1F && (v13 & 0xE) == 14;
      if (!v14 || !v12[1]) {
        goto LABEL_21;
      }
      unint64_t v15 = "$$$bad-name-in-nlist$$$";
      if (a6 > *((unsigned int *)v12 - 1))
      {
        if (!TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::string_at((uint64_t)&v19))
        {
          unint64_t v15 = "$$$bad-name-in-nlist$$$";
          if (v11) {
            goto LABEL_16;
          }
          goto LABEL_13;
        }
        unint64_t v15 = (const char *)(v17 + *((unsigned int *)v12 - 1));
      }
      if (v11) {
        goto LABEL_16;
      }
LABEL_13:
      if (!strcmp(v15, "<redacted>")) {
        unint64_t v11 = v15;
      }
      else {
        unint64_t v11 = 0;
      }
LABEL_16:
      if (v15 == v11)
      {
        unint64_t v11 = v15;
      }
      else
      {
        int v16 = 38289424;
        if ((v13 & 1) == 0) {
          int v16 = 38289408;
        }
        TRawSymbolOwnerData<Pointer64>::emplace_symbol(a2, *(void *)(v12 + 4) + v18, 0, (uint64_t)v15, (uint64_t)v15, v16 | (2 * v13) & 0x20 | (8 * *((unsigned __int16 *)v12 + 1)) & 0x40, 0, 0);
      }
LABEL_21:
      v12 += 16;
      --v10;
    }
    while (v10);
  }
}

void extract_stripped_locals_from_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  int v6 = *((_DWORD *)a3 + 2);
  int v5 = *((_DWORD *)a3 + 3);
  if (v5 != v6)
  {
    uint64_t v10 = *(void *)(a4 + 32);
    uint64_t v11 = *a3;
    TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by((uint64_t)a5, (v5 - v6));
    unint64_t v13 = *((unsigned int *)a3 + 2);
    unint64_t v12 = *((unsigned int *)a3 + 3);
    if (v13 < v12)
    {
      BOOL v14 = (void *)(v11 + a1 + 16 * v13 + 8);
      do
      {
        unsigned int v15 = *((unsigned __int8 *)v14 - 4);
        BOOL v16 = v15 <= 0x1F && (v15 & 0xE) == 14;
        if (v16 && *((unsigned char *)v14 - 3))
        {
          int v17 = 38289440;
          if ((v15 & 0x10) == 0) {
            int v17 = 38289408;
          }
          uint64_t v18 = *((unsigned int *)v14 - 2);
          if (v18 >= *((_DWORD *)a3 + 4) || (uint64_t v19 = (const char *)(a1 + v18 + a3[3])) == 0 || !*v19) {
            uint64_t v19 = "$$$bad-name-in-nlist$$$";
          }
          TRawSymbolOwnerData<Pointer64>::emplace_symbol(a5, *v14 + v10, 0, (uint64_t)v19, (uint64_t)v19, v17 | (8 * *((unsigned __int16 *)v14 - 1)) & 0x40, 0, 0);
          unint64_t v12 = *((unsigned int *)a3 + 3);
        }
        ++v13;
        v14 += 2;
      }
      while (v13 < v12);
    }
  }
}

void extract_direct_stabs_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, void *a7)
{
  uint64_t v22 = a1[4];
  uint64_t v24 = a1[1];
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v24 + 32))(v24, a5, a6);
  uint64_t v13 = a4;
  uint64_t v23 = (uint64_t *)a2;
  TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by(a2, a4);
  if (a4)
  {
    BOOL v14 = (unsigned __int8 *)(a3 + 4);
    do
    {
      unsigned int v15 = *v14;
      BOOL v16 = v15 <= 0x1F && (v15 & 0xE) == 14;
      if (v16 && v14[1])
      {
        if (v15) {
          int v17 = 38289424;
        }
        else {
          int v17 = 38289408;
        }
        int v18 = *((unsigned __int16 *)v14 + 1);
        uint64_t v19 = "$$$bad-name-in-nlist$$$";
        if (a6 > *((unsigned int *)v14 - 1)
          && TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::string_at((uint64_t)&v24))
        {
          uint64_t v19 = (const char *)(v21 + *((unsigned int *)v14 - 1));
        }
        if (*(_DWORD *)(a1[3] + 12) != 1 || strncmp(v19, "ltmp", 4uLL))
        {
          unint64_t v20 = *(void *)(v14 + 4) + v22;
          if (a7) {
            unint64_t v20 = TAddressRelocator<Pointer64>::relocate(a7, v20);
          }
          TRawSymbolOwnerData<Pointer64>::emplace_symbol(v23, v20, 0, (uint64_t)v19, (uint64_t)v19, v17 | (2 * v15) & 0x20 | (8 * v18) & 0x40, 0, 0);
        }
      }
      v14 += 16;
      --v13;
    }
    while (v13);
  }
}

void extract_indirect_stabs_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, unint64_t a10, void *a11)
{
  unint64_t v11 = *(unsigned int *)(a3 + 72);
  unsigned int v12 = *(_DWORD *)(a3 + 40);
  if (v11 <= v12)
  {
    uint64_t v13 = *(void *)(a3 + 32);
    if (v13)
    {
      uint64_t v17 = v12 / v11;
      uint64_t v18 = *(unsigned int *)(a3 + 68);
      uint64_t v19 = *(void *)(a1 + 32) + v13;
      uint64_t v31 = *(void *)(a1 + 8);
      uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 32))(v31);
      TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by((uint64_t)a2, v17);
      unsigned int v20 = 0;
      if (a5 >= v18) {
        uint64_t v21 = a5 - v18;
      }
      else {
        uint64_t v21 = 0;
      }
      if (v17 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v17;
      }
      uint64_t v22 = (unsigned int *)(a4 + 4 * v18);
      unsigned int v28 = a7;
      while (1)
      {
        if (!v21) {
          return;
        }
        uint64_t v23 = *v22;
        unint64_t v24 = v19 + v20;
        long long v25 = "$$$indirect-absolute-symbol$$$";
        if ((v23 & 0x40000000) != 0) {
          goto LABEL_21;
        }
        if ((v23 & 0x80000000) != 0) {
          break;
        }
        if (v23 < a7)
        {
          uint64_t v26 = (unsigned int *)(a6 + 16 * v23);
          long long v25 = "$$$bad-name-in-nlist$$$";
          if (a10 > *v26 && TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::string_at((uint64_t)&v31)) {
            long long v25 = (const char *)(v27 + *v26);
          }
          if (a11) {
            unint64_t v24 = TAddressRelocator<Pointer64>::relocate(a11, v19 + v20);
          }
          a7 = v28;
          goto LABEL_23;
        }
LABEL_24:
        --v21;
        v20 += v11;
        ++v22;
        if (!--v17) {
          return;
        }
      }
      long long v25 = "$$$indirect-local-symbol$$$";
LABEL_21:
      if (a11) {
        unint64_t v24 = TAddressRelocator<Pointer64>::relocate(a11, v19 + v20);
      }
LABEL_23:
      TRawSymbolOwnerData<Pointer64>::emplace_symbol(a2, v24, v11, (uint64_t)v25, (uint64_t)v25, 34095362, 0, 0);
      goto LABEL_24;
    }
  }
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symtab(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 20);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = a1;
  uint64_t v5 = a1 + 32 + v1;
  uint64_t v6 = a1 + 32;
  do
    uint64_t result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 2);
  return result;
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::dysymtab(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 20);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = a1;
  uint64_t v5 = a1 + 32 + v1;
  uint64_t v6 = a1 + 32;
  do
    uint64_t result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 11);
  return result;
}

uint64_t TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::string_at(uint64_t a1)
{
  for (uint64_t i = *(uint64_t (**)(void))(**(void **)a1 + 32); ; uint64_t i = *(uint64_t (**)(void))(**(void **)a1 + 32))
  {
    uint64_t result = i();
    if (!result) {
      break;
    }
    uint64_t v5 = 0;
    while (v4 != v5)
    {
      if (!*(unsigned __int8 *)(result + v5++)) {
        return result;
      }
    }
  }
  return result;
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::function_starts(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 20);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = a1;
  uint64_t v5 = a1 + 32 + v1;
  uint64_t v6 = a1 + 32;
  do
    uint64_t result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 38);
  return result;
}

void extract_debug_maps_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 32);
  v37[0] = 0;
  v37[1] = v37;
  v37[2] = 0x2000000000;
  v37[3] = a2 + 208;
  v36[0] = 0;
  v36[1] = v36;
  v36[2] = 0x2000000000;
  v36[3] = a2 + 96;
  uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a5, a6);
  uint64_t v28 = 0;
  std::vector<std::string>::const_iterator v29 = &v28;
  uint64_t v30 = 0x3802000000;
  uint64_t v31 = __Block_byref_object_copy__444;
  long long v32 = __Block_byref_object_dispose__445;
  uint64_t v33 = a3;
  int v34 = a4;
  int v35 = 0;
  if (!a4) {
    goto LABEL_19;
  }
  uint64_t v12 = v11;
  uint64_t v13 = &v28;
  while (1)
  {
    uint64_t v24 = 0;
    long long v25 = &v24;
    uint64_t v26 = 0x2000000000;
    uint64_t v27 = 0;
    uint64_t v27 = NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(v13 + 5);
    uint64_t v14 = v25[3];
    if (*(unsigned char *)(v14 + 4) != 100 || *(void *)(v14 + 8)) {
      goto LABEL_15;
    }
    uint64_t v15 = *((unsigned int *)v29 + 13);
    if (v15 >= *((_DWORD *)v29 + 12)) {
      break;
    }
    BOOL v16 = v29 + 5;
    uint64_t v17 = v29[5];
    uint64_t v18 = v17 + 16 * v15;
    v25[3] = v18;
    if (!v17) {
      goto LABEL_18;
    }
    if (*(unsigned char *)(v18 + 4) == 102 && *(_WORD *)(v18 + 6) == 1)
    {
      uint64_t v19 = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(v16);
      v25[3] = (uint64_t)v19;
      unsigned int v20 = (char *)(v12 + *v19);
      if (!*v20)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = *(void *)(a1 + 48);
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v21;
          _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Empty object_file_path in mach-o header: %s\n", (uint8_t *)&buf, 0xCu);
        }
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Empty object_file_path in mach-o header: %s\n", *(const char **)(a1 + 48));
      }
      if (!deny_nfs_mount_lookup(v20))
      {
        *(void *)&long long buf = CSSymbolicatorCreateWithPathArchitectureFlagsAndNotification(v20, *(unsigned int *)(*(void *)(a1 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(void *)(a1 + 24) + 8) & 0xFFFFFF) << 32), 537657344);
        *((void *)&buf + 1) = v22;
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 0x40000000;
        v23[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke;
        v23[3] = &unk_1E61D0078;
        v23[4] = &v24;
        v23[5] = &v28;
        v23[8] = v10;
        v23[9] = v12;
        v23[10] = a1;
        v23[11] = a2;
        v23[6] = v36;
        v23[7] = v37;
        CSSymbolicatorForeachSymbolOwnerAtTime(buf, v22, 0x8000000000000000, (uint64_t)v23);
        CSCppTypeRefMark::~CSCppTypeRefMark((CSCppTypeRefMark *)&buf);
      }
    }
LABEL_15:
    _Block_object_dispose(&v24, 8);
    uint64_t v13 = v29;
    if (*((_DWORD *)v29 + 13) >= *((_DWORD *)v29 + 12)) {
      goto LABEL_19;
    }
  }
  v25[3] = 0;
LABEL_18:
  _Block_object_dispose(&v24, 8);
LABEL_19:
  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(v36, 8);
  _Block_object_dispose(v37, 8);
}

void sub_1B901EAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  CSCppTypeRefMark::~CSCppTypeRefMark((CSCppTypeRefMark *)(v30 - 128));
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 192), 8);
  _Block_object_dispose((const void *)(v30 - 160), 8);
  _Unwind_Resume(a1);
}

unsigned int *extract_relinked_subdylibs_in_debug_maps_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a5, a6);
  uint64_t v23 = a3;
  unsigned int v24 = a4;
  unsigned int v25 = 0;
  if (a4)
  {
    uint64_t v11 = result;
    uint64_t v12 = (void **)(a2 + 496);
    uint64_t v13 = (CSCppStringCache *)(a2 + 96);
    while (1)
    {
      uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
      if (*((unsigned char *)result + 4) == 100 && !*((void *)result + 1))
      {
        if (v25 >= v24 || !v23) {
          return result;
        }
        if (*(unsigned char *)(v23 + 16 * v25 + 4) == 104)
        {
          uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
          if (v25 >= v24) {
            return result;
          }
          uint64_t v14 = *result;
          uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
          if (*((unsigned char *)result + 4) == 100)
          {
            if (v25 >= v24) {
              return result;
            }
            uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
            if (*((unsigned char *)result + 4) == 100)
            {
              if (v25 >= v24) {
                return result;
              }
              uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
              if (*((unsigned char *)result + 4) == 102)
              {
                uint64_t v15 = v25;
                if (v25 < (unint64_t)v24) {
                  break;
                }
              }
            }
          }
        }
      }
LABEL_30:
      if (v25 >= v24) {
        return result;
      }
    }
    BOOL v16 = (char *)v11 + v14;
    while (1)
    {
      if (!v23) {
        goto LABEL_20;
      }
      uint64_t v17 = v23 + 16 * v15;
      int v18 = *(unsigned __int8 *)(v17 + 4);
      if (v18 == 100)
      {
        if (!*(void *)(v17 + 8)) {
          goto LABEL_30;
        }
      }
      else if (v18 == 46)
      {
        NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
LABEL_20:
        uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
        if (*((unsigned char *)result + 4) == 36)
        {
          uint64_t v22 = *((void *)result + 1) + v9;
          do
          {
            uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
            int v19 = *((unsigned __int8 *)result + 4);
          }
          while (v19 == 132);
          if (v19 == 36)
          {
            uint64_t v21 = *((void *)result + 1);
            if (v25 >= v24) {
              goto LABEL_30;
            }
            uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
            if (*((unsigned char *)result + 4) == 78)
            {
              unsigned int v20 = CSCppStringCache::intern(v13, v16);
              uint64_t result = (unsigned int *)std::vector<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*>(v12, &v22, &v21, (uint64_t *)&v20);
            }
          }
        }
        goto LABEL_29;
      }
      uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
LABEL_29:
      uint64_t v15 = v25;
      if (v25 >= (unint64_t)v24) {
        goto LABEL_30;
      }
    }
  }
  return result;
}

__n128 __Block_byref_object_copy__444(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(uint64_t *a1)
{
  uint64_t v1 = *((unsigned int *)a1 + 3);
  if (v1 >= *((_DWORD *)a1 + 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"out of range index into nlist array", 35);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  uint64_t v2 = *a1;
  *((_DWORD *)a1 + 3) = v1 + 1;
  return v2 + 16 * v1;
}

void sub_1B901EE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke(void *a1, char a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 8);
  uint64_t result = CSSymbolOwnerGetLastModifiedTimestamp(a2, a3);
  unint64_t v8 = result - v6;
  if (v6 > result) {
    unint64_t v8 = v6 - result;
  }
  if (v6) {
    BOOL v9 = v8 > 5;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9)
  {
    uint64_t v10 = MEMORY[0x1E4F14500];
    while (1)
    {
      while (1)
      {
        uint64_t result = NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next((uint64_t *)(*(void *)(a1[5] + 8)
                                                                                              + 40));
        *(void *)(*(void *)(a1[4] + 8) + 24) = result;
        int v11 = *(unsigned __int8 *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 4);
        if (v11 == 46) {
          break;
        }
        if (v11 == 100) {
          return result;
        }
      }
      uint64_t result = NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next((uint64_t *)(*(void *)(a1[5] + 8)
                                                                                            + 40));
      *(void *)(*(void *)(a1[4] + 8) + 24) = result;
      uint64_t v12 = *(unsigned int **)(*(void *)(a1[4] + 8) + 24);
      if (*((unsigned char *)v12 + 4) != 36) {
        break;
      }
      if (!*(unsigned char *)(a1[9] + *v12))
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          uint64_t v13 = *(void *)(a1[10] + 48);
          *(_DWORD *)long long buf = 136315138;
          uint64_t v16 = v13;
          _os_log_impl(&dword_1B8F92000, v10, OS_LOG_TYPE_ERROR, "Empty function_name in mach-o header: %s\n", buf, 0xCu);
        }
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Empty function_name in mach-o header: %s\n", *(const char **)(a1[10] + 48));
      }
      do
      {
        uint64_t result = NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next((uint64_t *)(*(void *)(a1[5] + 8)
                                                                                              + 40));
        *(void *)(*(void *)(a1[4] + 8) + 24) = result;
        int v14 = *(unsigned __int8 *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 4);
      }
      while (v14 == 132);
      if (v14 != 36) {
        break;
      }
      uint64_t result = NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next((uint64_t *)(*(void *)(a1[5] + 8)
                                                                                            + 40));
      *(void *)(*(void *)(a1[4] + 8) + 24) = result;
      if (*(unsigned char *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 4) != 78) {
        break;
      }
      CSSymbolOwnerForeachSymbolWithMangledName(a2, a3);
    }
  }
  return result;
}

unint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v44[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 48) - CSSymbolGetRange(a2, a3);
  if (CSSymbolIsKnownLength(a2, a3)) {
    int v7 = 256;
  }
  else {
    int v7 = 0;
  }
  if (CSSymbolIsOmitFramePointer(a2, a3)) {
    int v8 = v7 | 0x80;
  }
  else {
    int v8 = v7;
  }
  if (v8)
  {
    uint64_t v43 = 0;
    *(void *)long long buf = &unk_1F12C8CB0;
    *(void *)&buf[8] = v42;
    int v35 = buf;
    std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](buf, v42);
    std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](buf);
    uint64_t v9 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8));
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    if ((v10 - 1) >= 2)
    {
      if (v10 != 4)
      {
LABEL_27:
        std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](v42);
        goto LABEL_28;
      }
      uint64_t v15 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v29 = 0;
      if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v15, *(unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFCLL), &v29) & 1) == 0)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Could not remap archive address to real in debug maps", buf, 2u);
        }
        fwrite("Could not remap archive address to real in debug maps", 0x35uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        goto LABEL_27;
      }
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      uint64_t v34 = 0x9002000000;
      int v35 = (uint8_t *)__Block_byref_object_copy__450;
      uint64_t v36 = __Block_byref_object_dispose__451;
      unint64_t v16 = *(unsigned int *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 4);
      int v37 = (const char *)(v29 + v6);
      long long v38 = v16;
      *(_DWORD *)uint64_t v39 = 0;
      *(void *)&v39[8] = "$$$debug-map-fake-name$$$";
      *(void *)&v39[16] = "$$$debug-map-fake-mangled-name$$$";
      uint64_t v41 = 0;
      *(_OWORD *)&v39[24] = 0u;
      memset(v40, 0, 25);
      *(_DWORD *)&v39[4] = v8 | 0x8000000;
      v32[3] = 0;
      uint64_t v17 = operator new(0x20uLL);
      *uint64_t v17 = &unk_1F12C8D40;
      v17[1] = v32;
      v17[2] = v15;
      v17[3] = v6;
      v44[3] = v17;
      std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](v44, v32);
      std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](v44);
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 1174405120;
      v30[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_452;
      v30[3] = &unk_1F12C8C70;
      std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__value_func[abi:ne180100]((uint64_t)v31, (uint64_t)v32);
      uint64_t v18 = *(void *)(a1 + 32);
      v30[4] = buf;
      v30[5] = v18;
      TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v15, a3 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)v30);
      TRawSymbolOwnerData<Pointer64>::add_symbol(*(uint64_t **)(a1 + 56), (__n128 *)(*(void *)&buf[8] + 40));
      std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](v31);
      std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](v32);
      _Block_object_dispose(buf, 8);
      v44[0] = v40;
      int v19 = (void ***)v44;
    }
    else
    {
      unint64_t v11 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v12 = *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 48);
      if (v12)
      {
        uint64_t v13 = *(void *)(v11 + 56);
        int v14 = CSCppStringCache::intern(*(CSCppStringCache **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v12);
      }
      else
      {
        int v14 = 0;
        uint64_t v13 = 0;
      }
      v44[0] = v14;
      v44[1] = v13;
      long long v20 = *(_OWORD *)v11;
      if ((atomic_load_explicit((atomic_uint *volatile)(v11 + 28), memory_order_acquire) & 0x80000000) != 0)
      {
        uint64_t v21 = (long long *)v44;
        if (!*(void *)(v11 + 48)) {
          uint64_t v21 = 0;
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      *(_OWORD *)long long buf = v20;
      uint64_t v34 = 0;
      int v35 = 0;
      uint64_t v36 = (void (*)(uint64_t))"$$$debug-map-fake-name$$$";
      int v37 = "$$$debug-map-fake-mangled-name$$$";
      *(void *)&v39[32] = 0;
      long long v38 = 0u;
      memset(v39, 0, 25);
      if (v21)
      {
        long long v38 = *v21;
        unsigned int v22 = v8 | 0x88000000;
      }
      else
      {
        unsigned int v22 = v8 | 0x8000000;
      }
      HIDWORD(v35) = v22;
      uint64_t v23 = *(void *)(v11 + 64);
      for (uint64_t i = *(void *)(v11 + 72); v23 != i; v23 += 104)
      {
        if (!v43) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t, unsigned char *, void))(*(void *)v43 + 48))(v43, v23, v39, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      }
      slideSymbolsByOffset<Pointer64>(buf, v6);
      TRawSymbolOwnerData<Pointer64>::add_symbol(*(uint64_t **)(a1 + 56), (__n128 *)buf);
      v32[0] = v39;
      int v19 = (void ***)v32;
    }
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v19);
    goto LABEL_27;
  }
LABEL_28:
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 0x40000000;
  v26[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_454;
  v26[3] = &unk_1E61D0028;
  long long v27 = *(_OWORD *)(a1 + 32);
  uint64_t v28 = v6;
  return CSSymbolForeachSourceInfo(a2, a3, (uint64_t)v26);
}

void sub_1B901F5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](v44);
  std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](&a27);
  _Block_object_dispose(&a31, 8);
  *(void *)(v45 - 120) = &a44;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 120));
  std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100]((void *)(v45 - 152));
  _Unwind_Resume(a1);
}

void *slideSymbolsByOffset<Pointer64>(void *result, uint64_t a2)
{
  *result += a2;
  uint64_t v2 = result[8];
  for (uint64_t i = result[9]; v2 != i; v2 += 104)
    uint64_t result = (void *)slideSymbolsByOffset<Pointer64>(v2, a2);
  return result;
}

uint64_t __Block_byref_object_copy__450(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v2 = a1 + 40;
  *(void *)(v2 + 96) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 73) = 0u;
  return TRawSymbol<Pointer64>::operator=(v2, a2 + 40);
}

void __Block_byref_object_dispose__451(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 104);
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_452(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator()(a1 + 48, a2);
}

uint64_t std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t __copy_helper_block_e8_48c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

void *__destroy_helper_block_e8_48c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
}

void ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_454(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8));
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
  if ((v7 - 1) >= 2)
  {
    if (v7 != 4) {
      return;
    }
    uint64_t v18 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(v5);
    int v19 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    long long v20 = (_DWORD *)*((void *)v18 + 11);
    uint64_t v21 = *(CSCppStringCache **)(*(void *)(a1[4] + 8) + 24);
    unsigned int v22 = (char *)CSCppMMapSourceInfo::path((CSCppMMapSourceInfo *)v19, (uint64_t)v20+ 32 * v20[2]+ 24 * v20[3]+ (24 * v20[4])+ (unint64_t)(4 * v20[4])+ (36 * v20[5])+ (20 * v20[6])+ v20[22]+ v20[20]+ 96);
    uint64_t v23 = CSCppStringCache::intern(v21, v22);
    unint64_t v52 = 0;
    TMMapSymbolOwnerData::convert_archive_address_to_real_address(v18, *v19, &v52);
    uint64_t v24 = a1[6];
    unint64_t v11 = *(void ***)(*(void *)(a1[5] + 8) + 24);
    uint64_t v25 = v24 + v52;
    uint64_t v26 = v19[1];
    unsigned int v28 = v19[3];
    unsigned int v27 = v19[4];
    unint64_t v16 = (char *)v11[1];
    unint64_t v29 = (char *)v11[2];
    if (v16 < v29)
    {
      *(void *)unint64_t v16 = v25;
      *((void *)v16 + 1) = v26;
      *((void *)v16 + 2) = v23;
      *((_DWORD *)v16 + 6) = v28;
      *((_DWORD *)v16 + 7) = v27;
      goto LABEL_7;
    }
    unint64_t v43 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (unsigned char *)*v11) >> 3);
    unint64_t v44 = v43 + 1;
    if (v43 + 1 <= 0x666666666666666)
    {
      unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((v29 - (unsigned char *)*v11) >> 3);
      if (2 * v45 > v44) {
        unint64_t v44 = 2 * v45;
      }
      if (v45 >= 0x333333333333333) {
        unint64_t v46 = 0x666666666666666;
      }
      else {
        unint64_t v46 = v44;
      }
      uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)(v11 + 2), v46);
      uint64_t v36 = &v47[40 * v43];
      long long v38 = &v47[40 * v48];
      *(void *)uint64_t v36 = v25;
      *((void *)v36 + 1) = v26;
      *((void *)v36 + 2) = v23;
      *((_DWORD *)v36 + 6) = v28;
      *((_DWORD *)v36 + 7) = v27;
      *((_DWORD *)v36 + 8) = 0;
      uint64_t v30 = v36 + 40;
      uint64_t v49 = (char *)*v11;
      uint64_t v39 = (char *)v11[1];
      if (v39 == *v11) {
        goto LABEL_26;
      }
      do
      {
        long long v50 = *(_OWORD *)(v39 - 40);
        long long v51 = *(_OWORD *)(v39 - 24);
        *((_DWORD *)v36 - 2) = *((_DWORD *)v39 - 2);
        *(_OWORD *)(v36 - 24) = v51;
        *(_OWORD *)(v36 - 40) = v50;
        v36 -= 40;
        v39 -= 40;
      }
      while (v39 != v49);
      goto LABEL_25;
    }
LABEL_30:
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v9 = CSCppStringCache::intern(*(CSCppStringCache **)(*(void *)(a1[4] + 8) + 24), *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 16));
  uint64_t v10 = a1[6];
  unint64_t v11 = *(void ***)(*(void *)(a1[5] + 8) + 24);
  uint64_t v12 = *(void *)(v8 + 8);
  uint64_t v13 = v10 + *(void *)v8;
  int v14 = *(_DWORD *)(v8 + 24);
  int v15 = *(_DWORD *)(v8 + 28) & 0x7FFFFFFF;
  unint64_t v16 = (char *)v11[1];
  uint64_t v17 = (char *)v11[2];
  if (v16 >= v17)
  {
    unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (unsigned char *)*v11) >> 3);
    unint64_t v32 = v31 + 1;
    if (v31 + 1 <= 0x666666666666666)
    {
      unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - (unsigned char *)*v11) >> 3);
      if (2 * v33 > v32) {
        unint64_t v32 = 2 * v33;
      }
      if (v33 >= 0x333333333333333) {
        unint64_t v34 = 0x666666666666666;
      }
      else {
        unint64_t v34 = v32;
      }
      int v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)(v11 + 2), v34);
      uint64_t v36 = &v35[40 * v31];
      long long v38 = &v35[40 * v37];
      *(void *)uint64_t v36 = v13;
      *((void *)v36 + 1) = v12;
      *((void *)v36 + 2) = v9;
      *((_DWORD *)v36 + 6) = v14;
      *((_DWORD *)v36 + 7) = v15;
      *((_DWORD *)v36 + 8) = 0;
      uint64_t v30 = v36 + 40;
      uint64_t v40 = (char *)*v11;
      uint64_t v39 = (char *)v11[1];
      if (v39 == *v11) {
        goto LABEL_26;
      }
      do
      {
        long long v41 = *(_OWORD *)(v39 - 40);
        long long v42 = *(_OWORD *)(v39 - 24);
        *((_DWORD *)v36 - 2) = *((_DWORD *)v39 - 2);
        *(_OWORD *)(v36 - 24) = v42;
        *(_OWORD *)(v36 - 40) = v41;
        v36 -= 40;
        v39 -= 40;
      }
      while (v39 != v40);
LABEL_25:
      uint64_t v39 = (char *)*v11;
LABEL_26:
      *unint64_t v11 = v36;
      v11[1] = v30;
      v11[2] = v38;
      if (v39) {
        operator delete(v39);
      }
      goto LABEL_28;
    }
    goto LABEL_30;
  }
  *(void *)unint64_t v16 = v13;
  *((void *)v16 + 1) = v12;
  *((void *)v16 + 2) = v9;
  *((_DWORD *)v16 + 6) = v14;
  *((_DWORD *)v16 + 7) = v15;
LABEL_7:
  uint64_t v30 = v16 + 40;
  *((_DWORD *)v16 + 8) = 0;
LABEL_28:
  v11[1] = v30;
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F12C8CB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE7__cloneEPNS0_6__baseISX_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F12C8CB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EEclESN_SS_SU_(uint64_t a1, uint64_t a2, uint64_t *a3, CSCppStringCache *this)
{
  unint64_t v8 = *(char **)(a2 + 48);
  if (v8)
  {
    *((void *)&v24 + 1) = *(void *)(a2 + 56);
    *(void *)&long long v24 = CSCppStringCache::intern(this, v8);
  }
  else
  {
    long long v24 = 0uLL;
  }
  unsigned int v9 = atomic_load_explicit((atomic_uint *volatile)(a2 + 28), memory_order_acquire) & 0xF77BFFFF;
  unsigned int v10 = v9 | 0x8000000;
  uint64_t v12 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v13 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::EphemeralMangledName>(a2);
  int v14 = CSCppStringCache::intern(this, v13);
  int v15 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::EphemeralMangledName>(a2);
  unint64_t v16 = CSCppStringCache::intern(this, v15);
  unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(a2 + 28), memory_order_acquire);
  uint64_t v18 = *(void *)(a2 + 48);
  v25[0] = v12;
  v25[1] = v11;
  v25[2] = 0;
  uint64_t v26 = 0;
  unsigned int v27 = v14;
  unsigned int v28 = v16;
  uint64_t v31 = 0;
  long long v29 = 0u;
  memset(v30, 0, 25);
  if ((explicit & 0x80000000) != 0 && v18)
  {
    long long v29 = v24;
    unsigned int v10 = v9 | 0x88000000;
  }
  HIDWORD(v26) = v10;
  uint64_t v19 = *(void *)(a2 + 64);
  for (uint64_t i = *(void *)(a2 + 72); v19 != i; v19 += 104)
  {
    uint64_t v21 = *(void *)(*(void *)(a1 + 8) + 24);
    if (!v21) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t, _OWORD *, CSCppStringCache *))(*(void *)v21 + 48))(v21, v19, v30, this);
  }
  unint64_t v22 = a3[1];
  if (v22 >= a3[2])
  {
    uint64_t v23 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, (uint64_t)v25);
  }
  else
  {
    *(void *)(v22 + 96) = 0;
    *(_OWORD *)unint64_t v22 = 0u;
    *(_OWORD *)(v22 + 16) = 0u;
    *(_OWORD *)(v22 + 48) = 0u;
    *(_OWORD *)(v22 + 64) = 0u;
    *(_OWORD *)(v22 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(v22, (uint64_t)v25);
    uint64_t v23 = v22 + 104;
  }
  a3[1] = v23;
  unint64_t v32 = (void **)v30;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v32);
}

void sub_1B901FD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(void *)(v19 - 88) = &a19;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 88));
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlR10TRawSymbolIS1_ERNSt3__16vectorISJ_NSL_9allocatorISJ_EEEER16CSCppStringCacheE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE11target_typeEv()
{
  return &_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlR10TRawSymbolIS1_ERNSt3__16vectorISJ_NSL_9allocatorISJ_EEEER16CSCppStringCacheE_;
}

uint64_t TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::EphemeralMangledName>(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uint *volatile)(a1 + 28), memory_order_acquire) & 0x400000) == 0)
  {
    v2[0] = 0;
    v2[1] = v2;
    v2[2] = 0x2000000000;
    v2[3] = 0;
    operator new();
  }
  return *(void *)(a1 + 40);
}

void sub_1B901FF18(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

atomic_uint *volatile *___ZN10TRawSymbolI9Pointer64E21_resolve_mangled_nameINS1_20EphemeralMangledNameEEEPKcT__block_invoke(atomic_uint *volatile *result)
{
  uint64_t v1 = *((void *)result + 5);
  uint64_t v2 = (atomic_uint *)(v1 + 28);
  if ((atomic_load_explicit((atomic_uint *volatile)(v1 + 28), memory_order_acquire) & 0x400000) != 0) {
    return result;
  }
  int v3 = result;
  unsigned int explicit = atomic_load_explicit(v2, memory_order_acquire);
  unsigned int v5 = atomic_load_explicit(v2, memory_order_acquire);
  if ((explicit & 0x80000) != 0)
  {
    unsigned int v6 = 0x400000;
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    int v7 = "DYLD-STUB$$";
LABEL_11:
    *(void *)(v1 + 96) = v7;
    goto LABEL_12;
  }
  if ((v5 & 0x100000) != 0
    || (atomic_load_explicit((atomic_uint *volatile)(v1 + 28), memory_order_acquire) & 0x200000) != 0)
  {
    int is_objc_method_internal = TRawSymbol<Pointer32>::is_objc_method_internal(v1, *(char **)(v1 + 40));
    unsigned int v6 = is_objc_method_internal | 0x400000;
    if ((is_objc_method_internal & 4) != 0) {
      goto LABEL_12;
    }
    int v7 = "_";
    goto LABEL_11;
  }
  unsigned int v6 = 0x400000;
LABEL_12:
  unsigned int v9 = *(atomic_uint *volatile **)(*(void *)(*((void *)v3 + 4) + 8) + 24);

  return CSCppBitLock::set_bits(v9, v6);
}

CSCppBitLock *___ZN10TRawSymbolI9Pointer64E21_resolve_mangled_nameINS1_20EphemeralMangledNameEEEPKcT__block_invoke_2(uint64_t a1)
{
  __n128 result = *(CSCppBitLock **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (result)
  {
    CSCppBitLock::~CSCppBitLock(result);
    __n128 result = (CSCppBitLock *)MEMORY[0x1BA9D1CD0]();
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  return result;
}

void *std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    int v3 = result;
    uint64_t v4 = (void *)result[3];
    unsigned int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B90202B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F12C8D40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F12C8D40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EEclEOSM_ST_SV_(void *a1, uint64_t *a2, uint64_t *a3, CSCppStringCache *this)
{
  int v7 = (long long *)*a2;
  unint64_t v8 = (TMMapSymbolOwnerData *)a1[2];
  unsigned int v9 = (_DWORD *)*((void *)v8 + 11);
  unint64_t v10 = (unint64_t)v9
      + 32 * v9[2]
      + 24 * v9[3]
      + (24 * v9[4])
      + (unint64_t)(4 * v9[4])
      + (36 * v9[5])
      + (20 * v9[6])
      + v9[22]
      + v9[20]
      + 96;
  if ((*(_DWORD *)(*a2 + 8) & 0x80000000) != 0 && (uint64_t v11 = *((unsigned int *)v7 + 6), v10 + v11))
  {
    uint64_t v12 = CSCppStringCache::intern(this, (char *)(v10 + v11));
    if ((*((_DWORD *)v7 + 2) & 0x80000000) != 0) {
      uint64_t v24 = *(void *)((char *)v7 + 28);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v31 = v24;
    unint64_t v8 = (TMMapSymbolOwnerData *)a1[2];
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v31 = 0;
  }
  long long v13 = *v7;
  uint64_t v49 = *((void *)v7 + 2);
  long long v48 = v13;
  unint64_t v47 = 0;
  if (TMMapSymbolOwnerData::convert_archive_address_to_real_address(v8, v13, &v47))
  {
    uint64_t v30 = v12;
    int v14 = (char *)(v10 + v49);
    int v15 = DWORD2(v48);
    if (HIDWORD(v48)) {
      unint64_t v16 = (char *)(v10 + HIDWORD(v48));
    }
    else {
      unint64_t v16 = (char *)(v10 + v49);
    }
    if (HIDWORD(v48)) {
      unsigned int v17 = DWORD2(v48);
    }
    else {
      unsigned int v17 = DWORD2(v48) & 0xF779FFFF;
    }
    unsigned int v18 = v17 & 0xF77BFFFF;
    *(void *)long long buf = 0;
    unint64_t v34 = buf;
    uint64_t v35 = 0x9002000000;
    uint64_t v36 = __Block_byref_object_copy__450;
    uint64_t v37 = __Block_byref_object_dispose__451;
    unint64_t v19 = a1[3] + v47;
    uint64_t v20 = DWORD1(v48);
    uint64_t v21 = CSCppStringCache::intern(this, v16);
    unint64_t v22 = CSCppStringCache::intern(this, v14);
    unint64_t v38 = v19;
    uint64_t v39 = v20;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    long long v42 = v21;
    unint64_t v43 = v22;
    uint64_t v46 = 0;
    long long v44 = 0u;
    memset(v45, 0, 25);
    if (v15 < 0)
    {
      *(void *)&long long v44 = v30;
      *((void *)&v44 + 1) = v31;
      unsigned int v23 = v18 | 0x88000000;
    }
    else
    {
      unsigned int v23 = v18 | 0x8000000;
    }
    HIDWORD(v41) = v23;
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 0x40000000;
    v32[2] = ___ZZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_ENKUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_clESJ_SR_ST__block_invoke;
    v32[3] = &unk_1E61D00F0;
    uint64_t v26 = a1[1];
    uint64_t v25 = a1[2];
    void v32[4] = buf;
    v32[5] = v26;
    v32[6] = this;
    TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v25, (uint64_t)&v48, (uint64_t)v32);
    uint64_t v27 = (uint64_t)(v34 + 40);
    unint64_t v28 = a3[1];
    if (v28 >= a3[2])
    {
      uint64_t v29 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, v27);
    }
    else
    {
      *(void *)(v28 + 96) = 0;
      *(_OWORD *)unint64_t v28 = 0u;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_OWORD *)(v28 + 48) = 0u;
      *(_OWORD *)(v28 + 64) = 0u;
      *(_OWORD *)(v28 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v28, v27);
      uint64_t v29 = v28 + 104;
    }
    a3[1] = v29;
    _Block_object_dispose(buf, 8);
    long long v50 = (void **)v45;
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v50);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Could not remap archive address to real in debug maps inline enumeration", buf, 2u);
    }
    fwrite("Could not remap archive address to real in debug maps inline enumeration", 0x48uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  }
}

void sub_1B90206A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  _Block_object_dispose(&a21, 8);
  *(void *)(v34 - 104) = &a34;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 104));
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE11target_typeEv()
{
  return &_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_;
}

uint64_t ___ZZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_ENKUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_clESJ_SR_ST__block_invoke(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator()(*(void *)(a1 + 40), a2);
}

void *std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    int v3 = result;
    uint64_t v4 = (void *)result[3];
    unsigned int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B9020990(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*>(void **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v10 = (unint64_t)a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  uint64_t v11 = *(void **)(v8 - 8);
  if ((unint64_t)v11 >= v10)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (unsigned char *)*a1) >> 3);
    unint64_t v16 = v15 + 1;
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v16;
    }
    unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v8, v18);
    uint64_t v20 = &v19[24 * v15];
    unint64_t v22 = &v19[24 * v21];
    uint64_t v23 = *a3;
    uint64_t v24 = *a4;
    *(void *)uint64_t v20 = *a2;
    *((void *)v20 + 1) = v23;
    *((void *)v20 + 2) = v24;
    int v14 = v20 + 24;
    uint64_t v26 = (char *)*a1;
    uint64_t v25 = (char *)a1[1];
    if (v25 != *a1)
    {
      do
      {
        long long v27 = *(_OWORD *)(v25 - 24);
        *((void *)v20 - 1) = *((void *)v25 - 1);
        *(_OWORD *)(v20 - 24) = v27;
        v20 -= 24;
        v25 -= 24;
      }
      while (v25 != v26);
      uint64_t v25 = (char *)*a1;
    }
    *a1 = v20;
    a1[1] = v14;
    a1[2] = v22;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    uint64_t v12 = *a3;
    uint64_t v13 = *a4;
    *uint64_t v11 = *a2;
    v11[1] = v12;
    v11[2] = v13;
    int v14 = v11 + 3;
  }
  a1[1] = v14;
  return v14 - 3;
}

void sort_inlined_functions<Pointer64>(uint64_t a1)
{
  uint64_t v2 = *(__n128 **)(a1 + 64);
  uint64_t v3 = *(__n128 **)(a1 + 72);
  unint64_t v4 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * (((char *)v3 - (char *)v2) >> 3));
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,false>(v2, v3, (uint64_t)&v8, v5, 1);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  while (v6 != v7)
  {
    sort_inlined_functions<Pointer64>(v6);
    v6 += 104;
  }
}

uint64_t std::vector<TRawSymbol<Pointer64>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>(a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = v7 - 104;
        unint64_t v10 = (void **)(v7 - 40);
        std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v10);
        uint64_t v7 = v8;
      }
      while (v8 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t std::remove_if[abi:ne180100]<std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__mem_fn<BOOL const (TRawSymbol<Pointer64>::*)(void)const>>(uint64_t a1, uint64_t a2, unsigned __int8 (*a3)(void *), uint64_t a4)
{
  uint64_t v7 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      uint64_t v8 = (void *)(v7 + (a4 >> 1));
      char v9 = (a4 & 1) != 0 ? (*(uint64_t (**)(void *))(*v8 + a3))(v8) : a3(v8);
      if (v9) {
        break;
      }
      v7 += 104;
      if (v7 == a2) {
        return a2;
      }
    }
  }
  if (v7 == a2) {
    return a2;
  }
  for (uint64_t i = v7 + 104; i != a2; i += 104)
  {
    uint64_t v11 = (void *)(i + (a4 >> 1));
    if (a4) {
      unsigned __int8 v12 = (*(uint64_t (**)(void *))(*v11 + a3))(v11);
    }
    else {
      unsigned __int8 v12 = a3(v11);
    }
    if ((v12 & 1) == 0)
    {
      TRawSymbol<Pointer64>::operator=(v7, i);
      v7 += 104;
    }
  }
  return v7;
}

uint64_t TRawSymbol<Pointer64>::is_marked_for_deletion(uint64_t a1)
{
  return (atomic_load_explicit((atomic_uint *volatile)(a1 + 28), memory_order_acquire) >> 12) & 1;
}

void **std::vector<TRawSymbol<Pointer64>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  __n128 result = (void **)(a1 + 2);
  if (0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x276276276276277) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 104 * v6;
    std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B9020F38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *,false>(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        unint64_t v6 = *(void *)(v4 + 24);
        if (v6 < *(void *)v4)
        {
          long long v10 = *(_OWORD *)(v4 + 32);
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(_DWORD *)(v8 + 40) = *(_DWORD *)(result + v7 + 16);
            if (!v7) {
              break;
            }
            v7 -= 24;
            if (v6 >= *(void *)(v8 - 24))
            {
              uint64_t v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v9 = result;
LABEL_10:
          *(void *)uint64_t v9 = v6;
          *(void *)(v9 + 8) = v10;
          *(_DWORD *)(v9 + 16) = DWORD2(v10);
        }
        uint64_t v2 = v5 + 24;
        v3 += 24;
        uint64_t v4 = v5;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(long long *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 < *(void *)a1)
  {
    if (v4 < v3)
    {
      long long v5 = *a1;
      uint64_t v6 = *((void *)a1 + 2);
      int v7 = *((_DWORD *)a3 + 4);
      *a1 = *(_OWORD *)a3;
      *((_DWORD *)a1 + 4) = v7;
      *((_DWORD *)a3 + 4) = v6;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v14 = *a1;
    uint64_t v15 = *((void *)a1 + 2);
    int v16 = *((_DWORD *)a2 + 4);
    *a1 = *(_OWORD *)a2;
    *((_DWORD *)a1 + 4) = v16;
    *((_DWORD *)a2 + 4) = v15;
    *(_OWORD *)a2 = v14;
    if (*a3 >= *a2) {
      return 1;
    }
    long long v17 = *(_OWORD *)a2;
    unint64_t v18 = a2[2];
    int v19 = *((_DWORD *)a3 + 4);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_DWORD *)a2 + 4) = v19;
    *((_DWORD *)a3 + 4) = v18;
    *(_OWORD *)a3 = v17;
    return 2;
  }
  if (v4 < v3)
  {
    long long v8 = *(_OWORD *)a2;
    unint64_t v9 = a2[2];
    int v10 = *((_DWORD *)a3 + 4);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_DWORD *)a2 + 4) = v10;
    *((_DWORD *)a3 + 4) = v9;
    *(_OWORD *)a3 = v8;
    if (*a2 >= *(void *)a1) {
      return 1;
    }
    long long v11 = *a1;
    uint64_t v12 = *((void *)a1 + 2);
    int v13 = *((_DWORD *)a2 + 4);
    *a1 = *(_OWORD *)a2;
    *((_DWORD *)a1 + 4) = v13;
    *((_DWORD *)a2 + 4) = v12;
    *(_OWORD *)a2 = v11;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned int> *,std::__less<void,void> &>(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = *a1;
  long long v14 = *(_OWORD *)(a1 + 1);
  if (*a1 >= *(void *)(a2 - 24))
  {
    long long v5 = a1 + 3;
    do
    {
      unint64_t v3 = v5;
      if ((unint64_t)v5 >= a2) {
        break;
      }
      v5 += 3;
    }
    while (v2 >= *v3);
  }
  else
  {
    unint64_t v3 = a1;
    do
    {
      unint64_t v4 = v3[3];
      v3 += 3;
    }
    while (v2 >= v4);
  }
  if ((unint64_t)v3 < a2)
  {
    do
    {
      unint64_t v6 = *(void *)(a2 - 24);
      a2 -= 24;
    }
    while (v2 < v6);
  }
  while ((unint64_t)v3 < a2)
  {
    unint64_t v13 = v3[2];
    long long v12 = *(_OWORD *)v3;
    long long v7 = *(_OWORD *)a2;
    *((_DWORD *)v3 + 4) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v3 = v7;
    *(_DWORD *)(a2 + 16) = v13;
    *(_OWORD *)a2 = v12;
    do
    {
      unint64_t v8 = v3[3];
      v3 += 3;
    }
    while (v2 >= v8);
    do
    {
      unint64_t v9 = *(void *)(a2 - 24);
      a2 -= 24;
    }
    while (v2 < v9);
  }
  if (v3 - 3 != a1)
  {
    long long v10 = *(_OWORD *)(v3 - 3);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v3 - 2);
    *(_OWORD *)a1 = v10;
  }
  *(v3 - 3) = v2;
  *((_DWORD *)v3 - 2) = DWORD2(v14);
  *(v3 - 2) = v14;
  return v3;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned int> *,std::__less<void,void> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  long long v17 = *(_OWORD *)(a1 + 1);
  do
  {
    unint64_t v4 = a1[v2 + 3];
    v2 += 3;
  }
  while (v4 < v3);
  unint64_t v5 = (unint64_t)&a1[v2];
  if (v2 == 3)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      unint64_t v7 = *(void *)(a2 - 24);
      a2 -= 24;
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      unint64_t v6 = *(void *)(a2 - 24);
      a2 -= 24;
    }
    while (v6 >= v3);
  }
  unint64_t v8 = &a1[v2];
  if (v5 < a2)
  {
    unint64_t v9 = a2;
    do
    {
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = v8[2];
      int v12 = *(_DWORD *)(v9 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      *((_DWORD *)v8 + 4) = v12;
      *(_DWORD *)(v9 + 16) = v11;
      *(_OWORD *)unint64_t v9 = v10;
      do
      {
        unint64_t v13 = v8[3];
        v8 += 3;
      }
      while (v13 < v3);
      do
      {
        unint64_t v14 = *(void *)(v9 - 24);
        v9 -= 24;
      }
      while (v14 >= v3);
    }
    while ((unint64_t)v8 < v9);
  }
  if (v8 - 3 != a1)
  {
    long long v15 = *(_OWORD *)(v8 - 3);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v8 - 2);
    *(_OWORD *)a1 = v15;
  }
  *(v8 - 3) = v3;
  *((_DWORD *)v8 - 2) = DWORD2(v17);
  *(v8 - 2) = v17;
  return v8 - 3;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = (long long *)(a2 - 24);
      if (*(void *)(a2 - 24) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a1 + 16);
        int v9 = *(_DWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_DWORD *)(a1 + 16) = v9;
        *(_DWORD *)(a2 - 8) = v8;
        *unint64_t v6 = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((long long *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((__n128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      long long v10 = (void *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((long long *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unint64_t v14 = *(void *)v11;
    if (*(void *)v11 < *v10)
    {
      long long v18 = *(_OWORD *)(v11 + 8);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(_DWORD *)(v16 + 88) = *(_DWORD *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24;
        if (v14 >= *(void *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(void *)uint64_t v17 = v14;
      *(void *)(v17 + 8) = v18;
      *(_DWORD *)(v17 + 16) = DWORD2(v18);
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    long long v10 = (void *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((long long *)a1, a2, a3);
  if (*(void *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    unint64_t v9 = a3[2];
    int v10 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_DWORD *)a3 + 4) = v10;
    *(_DWORD *)(a4 + 16) = v9;
    *(__n128 *)a4 = result;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      unint64_t v11 = a2[2];
      int v12 = *((_DWORD *)a3 + 4);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_DWORD *)a2 + 4) = v12;
      *((_DWORD *)a3 + 4) = v11;
      *(__n128 *)a3 = result;
      if (*a2 < *(void *)a1)
      {
        __n128 result = *(__n128 *)a1;
        uint64_t v13 = *(void *)(a1 + 16);
        int v14 = *((_DWORD *)a2 + 4);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v14;
        *((_DWORD *)a2 + 4) = v13;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(__n128 *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((uint64_t)a1, a2, a3, (uint64_t)a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    __n128 result = *a4;
    unint64_t v11 = a4[1].n128_u64[0];
    unsigned __int32 v12 = a5[1].n128_u32[0];
    *a4 = *a5;
    a4[1].n128_u32[0] = v12;
    a5[1].n128_u32[0] = v11;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      __n128 result = *(__n128 *)a3;
      unint64_t v13 = a3[2];
      unsigned __int32 v14 = a4[1].n128_u32[0];
      *(__n128 *)a3 = *a4;
      *((_DWORD *)a3 + 4) = v14;
      a4[1].n128_u32[0] = v13;
      *a4 = result;
      if (*a3 < *a2)
      {
        __n128 result = *(__n128 *)a2;
        unint64_t v15 = a2[2];
        int v16 = *((_DWORD *)a3 + 4);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_DWORD *)a2 + 4) = v16;
        *((_DWORD *)a3 + 4) = v15;
        *(__n128 *)a3 = result;
        if (*a2 < a1->n128_u64[0])
        {
          __n128 result = *a1;
          unint64_t v17 = a1[1].n128_u64[0];
          unsigned __int32 v18 = *((_DWORD *)a2 + 4);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u32[0] = v18;
          *((_DWORD *)a2 + 4) = v17;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *,TRangeValue<Pointer64,unsigned int> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unsigned __int32 v12 = (unint64_t *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = v6;
    if (v6 != a3)
    {
      unsigned __int32 v14 = v6;
      do
      {
        if (*(void *)v14 < *(void *)a1)
        {
          long long v15 = *v14;
          uint64_t v16 = *((void *)v14 + 2);
          int v17 = *(_DWORD *)(a1 + 16);
          long long *v14 = *(_OWORD *)a1;
          *((_DWORD *)v14 + 4) = v17;
          *(_DWORD *)(a1 + 16) = v16;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(a1, a4, v9, (unint64_t *)a1);
        }
        unsigned __int32 v14 = (long long *)((char *)v14 + 24);
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      do
      {
        uint64_t v19 = 0;
        long long v28 = *(_OWORD *)a1;
        uint64_t v29 = *(void *)(a1 + 16);
        uint64_t v20 = a1;
        do
        {
          uint64_t v21 = v20 + 24 * v19 + 24;
          uint64_t v22 = (2 * v19) | 1;
          uint64_t v23 = 2 * v19 + 2;
          if (v23 < v18 && *(void *)v21 < *(void *)(v21 + 24))
          {
            v21 += 24;
            uint64_t v22 = v23;
          }
          long long v24 = *(_OWORD *)v21;
          *(_DWORD *)(v20 + 16) = *(_DWORD *)(v21 + 16);
          *(_OWORD *)uint64_t v20 = v24;
          uint64_t v20 = v21;
          uint64_t v19 = v22;
        }
        while (v22 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        unint64_t v6 = (long long *)((char *)v6 - 24);
        if ((long long *)v21 == v6)
        {
          *(_DWORD *)(v21 + 16) = v29;
          *(_OWORD *)uint64_t v21 = v28;
        }
        else
        {
          long long v25 = *v6;
          *(_DWORD *)(v21 + 16) = *((_DWORD *)v6 + 4);
          *(_OWORD *)uint64_t v21 = v25;
          *unint64_t v6 = v28;
          *((_DWORD *)v6 + 4) = v29;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(a1, v21 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - a1) >> 3));
        }
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
      unint64_t v6 = (unint64_t *)(result + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 >= a3)
      {
        unint64_t v7 = *v6;
      }
      else
      {
        unint64_t v7 = *v6;
        unint64_t v8 = v6[3];
        if (*v6 <= v8) {
          unint64_t v7 = v6[3];
        }
        if (*v6 < v8)
        {
          v6 += 3;
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
        }
      }
      unint64_t v9 = *a4;
      if (v7 >= *a4)
      {
        long long v15 = *(_OWORD *)(a4 + 1);
        do
        {
          unint64_t v10 = a4;
          a4 = v6;
          long long v11 = *(_OWORD *)v6;
          *((_DWORD *)v10 + 4) = *((_DWORD *)v6 + 4);
          *(_OWORD *)unint64_t v10 = v11;
          if (v4 < v5) {
            break;
          }
          uint64_t v12 = (2 * v5) | 1;
          unint64_t v6 = (unint64_t *)(result + 24 * v12);
          uint64_t v5 = 2 * v5 + 2;
          if (v5 >= a3)
          {
            unint64_t v13 = *v6;
            uint64_t v5 = v12;
          }
          else
          {
            unint64_t v13 = *v6;
            unint64_t v14 = v6[3];
            if (*v6 <= v14) {
              unint64_t v13 = v6[3];
            }
            if (*v6 >= v14) {
              uint64_t v5 = v12;
            }
            else {
              v6 += 3;
            }
          }
        }
        while (v13 >= v9);
        *a4 = v9;
        a4[1] = v15;
        *((_DWORD *)a4 + 4) = DWORD2(v15);
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    unint64_t v6 = (long long *)(result + 24 * (v4 >> 1));
    unint64_t v7 = (long long *)(a2 - 24);
    unint64_t v8 = *(void *)(a2 - 24);
    if (*(void *)v6 < v8)
    {
      long long v11 = *(_OWORD *)(a2 - 16);
      do
      {
        unint64_t v9 = v7;
        unint64_t v7 = v6;
        long long v10 = *v6;
        *((_DWORD *)v9 + 4) = *((_DWORD *)v6 + 4);
        *unint64_t v9 = v10;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        unint64_t v6 = (long long *)(result + 24 * v5);
      }
      while (*(void *)v6 < v8);
      *(void *)unint64_t v7 = v8;
      *((void *)v7 + 1) = v11;
      *((_DWORD *)v7 + 4) = DWORD2(v11);
    }
  }
  return result;
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    unint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        uint64_t v21 = a3 + 104 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,TRawSymbol<Pointer64>*>((uint64_t)v9, v21, a4, *(v9 - 1));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<TRawSymbol<Pointer64>>::__move_range((uint64_t)a1, v5, v12, v5 + 104 * a5);
      if (v21 != v7)
      {
        uint64_t v22 = v5;
        do
        {
          TRawSymbol<Pointer64>::operator=(v22, v7);
          v7 += 104;
          v22 += 104;
        }
        while (v7 != v21);
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x276276276276276) {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x4EC4EC4EC4EC4EC5 * ((a2 - v13) >> 3);
      unint64_t v16 = 0x4EC4EC4EC4EC4EC5 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x13B13B13B13B13BLL) {
        unint64_t v18 = 0x276276276276276;
      }
      else {
        unint64_t v18 = v17;
      }
      v27[4] = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>>((uint64_t)v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v23 = &v19[104 * v15];
      v27[0] = v19;
      v27[1] = v23;
      v27[3] = &v19[104 * v18];
      uint64_t v24 = 104 * a5;
      long long v25 = &v23[104 * a5];
      do
      {
        *((void *)v23 + 12) = 0;
        *(_OWORD *)uint64_t v23 = 0u;
        *((_OWORD *)v23 + 1) = 0u;
        *((_OWORD *)v23 + 3) = 0u;
        *((_OWORD *)v23 + 4) = 0u;
        *(_OWORD *)(v23 + 73) = 0u;
        TRawSymbol<Pointer64>::operator=((uint64_t)v23, v7);
        v23 += 104;
        v7 += 104;
        v24 -= 104;
      }
      while (v24);
      v27[2] = v25;
      uint64_t v5 = std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(a1, v27, v5);
      std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer(v27);
    }
  }
  return v5;
}

void sub_1B90222BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(void *)(v8 + 96) = 0;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v8, v10);
      v10 += 104;
      v8 += 104;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;

  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>(a2, v7, v6);
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,std::reverse_iterator<TRawSymbol<Pointer64>*>,std::reverse_iterator<TRawSymbol<Pointer64>*>,std::reverse_iterator<TRawSymbol<Pointer64>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,TRawSymbol<Pointer64>*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,TRawSymbol<Pointer64>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)(v4 + 96) = 0;
      *(_OWORD *)uint64_t v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v4, v6);
      v6 += 104;
      uint64_t v4 = v11 + 104;
      v11 += 104;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer64>>,TRawSymbol<Pointer64>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      v6 -= 104;
      a3 -= 104;
      TRawSymbol<Pointer64>::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      TRawSymbol<Pointer64>::operator=(a3, v4);
      v4 += 104;
      a3 += 104;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t *std::__merge[abi:ne180100]<std::__less<void,void> &,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>>(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = a5;
  if (a1 != a2)
  {
    uint64_t v8 = a1;
    while (a3 != a4)
    {
      if (*a3 >= *v8)
      {
        std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100](&v10, (uint64_t)v8);
        v8 += 13;
      }
      else
      {
        std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100](&v10, (uint64_t)a3);
        a3 += 13;
      }
      if (v8 == a2)
      {
        a5 = v10;
        goto LABEL_9;
      }
    }
    uint64_t v11 = v10;
    do
    {
      std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100](&v11, (uint64_t)v8);
      v8 += 13;
    }
    while (v8 != a2);
    return v11;
  }
LABEL_9:
  uint64_t v11 = a5;
  if (a3 != a4)
  {
    do
    {
      std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100](&v11, (uint64_t)a3);
      a3 += 13;
    }
    while (a3 != a4);
    return v11;
  }
  return a5;
}

uint64_t **std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100](uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    uint64_t v5 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(*a1, a2);
  }
  else
  {
    *(void *)(v4 + 96) = 0;
    *(_OWORD *)unint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(v4, a2);
    uint64_t v5 = v4 + 104;
  }
  v3[1] = v5;
  return a1;
}

void *std::get_temporary_buffer[abi:ne180100]<TRawSourceInfo<Pointer64>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x333333333333333) {
    unint64_t v1 = 0x333333333333333;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    __n128 result = operator new(40 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(uint64_t a1, long long *a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      char v9 = (long long *)((char *)a2 - 40);
      if (*((void *)a2 - 5) < *(void *)a1)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        a7 = *(__n128 *)a1;
        long long v11 = *(_OWORD *)(a1 + 16);
        int v12 = *((_DWORD *)a2 - 2);
        long long v13 = *(long long *)((char *)a2 - 24);
        *(_OWORD *)a1 = *v9;
        *(_OWORD *)(a1 + 16) = v13;
        *(_DWORD *)(a1 + 32) = v12;
        *char v9 = a7;
        *(long long *)((char *)a2 - 24) = v11;
        *((_DWORD *)a2 - 2) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v18 = a4 >> 1;
      uint64_t v19 = (long long *)(a1 + 40 * (a4 >> 1));
      unint64_t v20 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v21.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1, v19, a3, v20, (uint64_t)a5, a7);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1 + 40 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), (uint64_t)&a5[40 * v18], v21);
        a7.n128_u64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>((uint64_t)a5, (uint64_t)&a5[40 * v18], (uint64_t)&a5[40 * v18], (uint64_t)&a5[40 * a4], a1).n128_u64[0];
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1, v19, a3, v20, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1 + 40 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5, a6);
        a7.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>((char *)a1, (long long *)(a1 + 40 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6).n128_u64[0];
      }
    }
    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1, (unint64_t *)a2);
    }
  }
  return a7.n128_f64[0];
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(uint64_t result, unint64_t *a2)
{
  if ((unint64_t *)result != a2)
  {
    uint64_t v2 = (unint64_t *)(result + 40);
    if ((unint64_t *)(result + 40) != a2)
    {
      uint64_t v3 = 0;
      BOOL v4 = (unint64_t *)result;
      do
      {
        uint64_t v5 = v2;
        unint64_t v6 = *v2;
        if (v6 < *v4)
        {
          *(_OWORD *)long long v11 = *((_OWORD *)v4 + 3);
          *(_OWORD *)&v11[16] = *((_OWORD *)v4 + 4);
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            long long v9 = *(_OWORD *)(result + v7 + 16);
            *(_OWORD *)(v8 + 40) = *(_OWORD *)(result + v7);
            *(_OWORD *)(v8 + 56) = v9;
            *(_DWORD *)(v8 + 72) = *(_DWORD *)(result + v7 + 32);
            if (!v7) {
              break;
            }
            v7 -= 40;
            if (v6 >= *(void *)(v8 - 40))
            {
              uint64_t v10 = result + v7 + 40;
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *(void *)uint64_t v10 = v6;
          *(_OWORD *)(v10 + 8) = *(_OWORD *)v11;
          *(_OWORD *)(v10 + 20) = *(_OWORD *)&v11[12];
        }
        uint64_t v2 = v5 + 5;
        v3 += 40;
        BOOL v4 = v5;
      }
      while (v5 + 5 != a2);
    }
  }
  return result;
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(uint64_t a1, long long *a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  if (a4)
  {
    if (a4 == 2)
    {
      long long v11 = (__n128 *)((char *)a2 - 40);
      if (*((void *)a2 - 5) >= *(void *)a1)
      {
        __n128 v17 = *(__n128 *)a1;
        long long v18 = *(_OWORD *)(a1 + 16);
        *(void *)(a5 + 32) = *(void *)(a1 + 32);
        *(__n128 *)a5 = v17;
        *(_OWORD *)(a5 + 16) = v18;
        a6 = *v11;
        long long v14 = *(long long *)((char *)a2 - 24);
        uint64_t v15 = *((void *)a2 - 1);
      }
      else
      {
        __n128 v12 = *v11;
        long long v13 = *(long long *)((char *)a2 - 24);
        *(void *)(a5 + 32) = *((void *)a2 - 1);
        *(__n128 *)a5 = v12;
        *(_OWORD *)(a5 + 16) = v13;
        a6 = *(__n128 *)a1;
        long long v14 = *(_OWORD *)(a1 + 16);
        uint64_t v15 = *(void *)(a1 + 32);
      }
      *(void *)(a5 + 72) = v15;
      *(__n128 *)(a5 + 40) = a6;
      *(_OWORD *)(a5 + 56) = v14;
    }
    else if (a4 == 1)
    {
      a6 = *(__n128 *)a1;
      long long v10 = *(_OWORD *)(a1 + 16);
      *(void *)(a5 + 32) = *(void *)(a1 + 32);
      *(__n128 *)a5 = a6;
      *(_OWORD *)(a5 + 16) = v10;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1, a1 + 40 * (a4 >> 1), a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1 + 40 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5 + 40 * (a4 >> 1), a4 - (a4 >> 1));
      a6.n128_u64[0] = std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1, a1 + 40 * (a4 >> 1), a1 + 40 * (a4 >> 1), (uint64_t)a2, a5).n128_u64[0];
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>((long long *)a1, a2, (unint64_t *)a5);
    }
  }
  return a6.n128_f64[0];
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        __n128 result = *(__n128 *)a3;
        long long v8 = *(_OWORD *)(a3 + 16);
        *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
        *(__n128 *)a5 = result;
        *(_OWORD *)(a5 + 16) = v8;
        a3 += 40;
        a5 += 40;
      }
      return result;
    }
    if (a3 == a4) {
      break;
    }
    if (*(void *)a3 >= *(void *)a1)
    {
      __n128 result = *(__n128 *)a1;
      long long v7 = *(_OWORD *)(a1 + 16);
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
      *(__n128 *)a5 = result;
      *(_OWORD *)(a5 + 16) = v7;
      a1 += 40;
    }
    else
    {
      __n128 result = *(__n128 *)a3;
      long long v6 = *(_OWORD *)(a3 + 16);
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      *(__n128 *)a5 = result;
      *(_OWORD *)(a5 + 16) = v6;
      a3 += 40;
    }
    a5 += 40;
  }
  if (a1 != a2)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = a5 + v9;
      __n128 result = *(__n128 *)(a1 + v9);
      long long v11 = *(_OWORD *)(a1 + v9 + 16);
      *(_DWORD *)(v10 + 32) = *(_DWORD *)(a1 + v9 + 32);
      *(__n128 *)uint64_t v10 = result;
      *(_OWORD *)(v10 + 16) = v11;
      v9 += 40;
    }
    while (a1 + v9 != a2);
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(char *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v9 = a6;
    while (v9 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v12 = 0;
      uint64_t v13 = -a5;
      while (*(void *)a2 >= *(void *)&a1[v12])
      {
        v12 += 40;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v15 = -v13;
      unint64_t v43 = a3;
      uint64_t v44 = a8;
      long long v42 = &a1[v12];
      if (-v13 >= v9)
      {
        if (v13 == -1)
        {
          uint64_t v39 = &a1[v12];
          uint64_t v49 = *(void *)&a1[v12 + 32];
          __n128 v47 = *(__n128 *)&a1[v12];
          long long v48 = *(_OWORD *)&a1[v12 + 16];
          long long v40 = *a2;
          long long v41 = a2[1];
          *((_DWORD *)v39 + 8) = *((_DWORD *)a2 + 8);
          *(_OWORD *)uint64_t v39 = v40;
          *((_OWORD *)v39 + 1) = v41;
          __n128 result = v47;
          *a2 = (__int128)v47;
          a2[1] = v48;
          *((_DWORD *)a2 + 8) = v49;
          return result;
        }
        if (v13 > 0) {
          uint64_t v15 = 1 - v13;
        }
        uint64_t v25 = v15 >> 1;
        uint64_t v19 = (long long *)&a1[40 * (v15 >> 1) + v12];
        long long v18 = a2;
        if (a2 != a3)
        {
          unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 3);
          long long v18 = a2;
          do
          {
            unint64_t v27 = v26 >> 1;
            long long v28 = (void *)v18 + 5 * (v26 >> 1);
            unint64_t v30 = *v28;
            uint64_t v29 = (long long *)(v28 + 5);
            v26 += ~(v26 >> 1);
            if (v30 < *(void *)v19) {
              long long v18 = v29;
            }
            else {
              unint64_t v26 = v27;
            }
          }
          while (v26);
        }
        uint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v18 - (char *)a2) >> 3);
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v16 = v9;
        }
        else {
          uint64_t v16 = v9 + 1;
        }
        uint64_t v17 = v16 >> 1;
        long long v18 = (long long *)((char *)a2 + 40 * (v16 >> 1));
        uint64_t v19 = a2;
        if ((char *)a2 - a1 != v12)
        {
          unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - a1 - v12) >> 3);
          uint64_t v19 = (long long *)&a1[v12];
          do
          {
            unint64_t v21 = v20 >> 1;
            uint64_t v22 = (void *)v19 + 5 * (v20 >> 1);
            unint64_t v24 = *v22;
            uint64_t v23 = (long long *)(v22 + 5);
            v20 += ~(v20 >> 1);
            if (*(void *)v18 < v24) {
              unint64_t v20 = v21;
            }
            else {
              uint64_t v19 = v23;
            }
          }
          while (v20);
        }
        uint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v19 - a1 - v12) >> 3);
      }
      a5 = -v25 - v13;
      uint64_t v31 = v9 - v17;
      uint64_t v32 = v25;
      unint64_t v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(v19, a2, v18);
      uint64_t v34 = v32;
      long long v35 = v33;
      if (v34 + v17 >= v9 - (v34 + v17) - v13)
      {
        uint64_t v38 = v34;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(v33, v18, v43, a4, a5, v9 - v17, a7, v44);
        a2 = v19;
        uint64_t v31 = v17;
        a8 = v44;
        a5 = v38;
        a3 = v35;
        a1 = v42;
      }
      else
      {
        uint64_t v36 = v17;
        a8 = v44;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(&a1[v12], v19, v33, a4, v34, v36, a7, v44);
        a1 = (char *)v35;
        a2 = v18;
        a3 = v43;
      }
      uint64_t v9 = v31;
      if (!v31) {
        return result;
      }
    }
    std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1, a2, a3, a4, a5, v9, a7);
  }
  return result;
}

long long *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(long long *result, long long *a2, unint64_t *a3)
{
  if (result != a2)
  {
    long long v3 = *result;
    long long v4 = result[1];
    a3[4] = *((void *)result + 4);
    *(_OWORD *)a3 = v3;
    *((_OWORD *)a3 + 1) = v4;
    uint64_t v5 = (long long *)((char *)result + 40);
    if ((long long *)((char *)result + 40) != a2)
    {
      uint64_t v6 = 0;
      long long v7 = a3;
      long long v8 = a3;
      do
      {
        unint64_t v9 = *v8;
        v8 += 5;
        if (*(void *)v5 >= v9)
        {
          long long v16 = *v5;
          long long v17 = v5[1];
          void v8[4] = *((void *)v5 + 4);
          *(_OWORD *)long long v8 = v16;
          *((_OWORD *)v8 + 1) = v17;
        }
        else
        {
          long long v10 = *((_OWORD *)v7 + 1);
          *(_OWORD *)long long v8 = *(_OWORD *)v7;
          *((_OWORD *)v8 + 1) = v10;
          void v8[4] = v7[4];
          long long v11 = a3;
          if (v7 != a3)
          {
            uint64_t v12 = v6;
            while (1)
            {
              long long v11 = (unint64_t *)((char *)a3 + v12);
              if (*(void *)v5 >= *(unint64_t *)((char *)a3 + v12 - 40)) {
                break;
              }
              long long v13 = *(_OWORD *)((char *)a3 + v12 - 24);
              *(_OWORD *)long long v11 = *(_OWORD *)((char *)a3 + v12 - 40);
              *((_OWORD *)v11 + 1) = v13;
              *((_DWORD *)v11 + 8) = *(_DWORD *)((char *)a3 + v12 - 8);
              v12 -= 40;
              if (!v12)
              {
                long long v11 = a3;
                break;
              }
            }
          }
          long long v14 = *v5;
          long long v15 = v5[1];
          *((_DWORD *)v11 + 8) = *((_DWORD *)v5 + 8);
          *(_OWORD *)long long v11 = v14;
          *((_OWORD *)v11 + 1) = v15;
        }
        uint64_t v5 = (long long *)((char *)v5 + 40);
        v6 += 40;
        long long v7 = v8;
      }
      while (v5 != a2);
    }
  }
  return result;
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        __n128 result = *(__n128 *)a3;
        long long v8 = *(_OWORD *)(a3 + 16);
        *(void *)(a5 + 32) = *(void *)(a3 + 32);
        *(__n128 *)a5 = result;
        *(_OWORD *)(a5 + 16) = v8;
        a3 += 40;
        a5 += 40;
      }
      return result;
    }
    if (a3 == a4) {
      break;
    }
    if (*(void *)a3 >= *(void *)a1)
    {
      __n128 result = *(__n128 *)a1;
      long long v7 = *(_OWORD *)(a1 + 16);
      *(void *)(a5 + 32) = *(void *)(a1 + 32);
      *(__n128 *)a5 = result;
      *(_OWORD *)(a5 + 16) = v7;
      a1 += 40;
    }
    else
    {
      __n128 result = *(__n128 *)a3;
      long long v6 = *(_OWORD *)(a3 + 16);
      *(void *)(a5 + 32) = *(void *)(a3 + 32);
      *(__n128 *)a5 = result;
      *(_OWORD *)(a5 + 16) = v6;
      a3 += 40;
    }
    a5 += 40;
  }
  if (a1 != a2)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = a5 + v9;
      __n128 result = *(__n128 *)(a1 + v9);
      long long v11 = *(_OWORD *)(a1 + v9 + 16);
      *(void *)(v10 + 32) = *(void *)(a1 + v9 + 32);
      *(__n128 *)uint64_t v10 = result;
      *(_OWORD *)(v10 + 16) = v11;
      v9 += 40;
    }
    while (a1 + v9 != a2);
  }
  return result;
}

_DWORD *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(_DWORD *result, _OWORD *a2, _OWORD *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  if (a5 <= a6)
  {
    if (result != (_DWORD *)a2)
    {
      uint64_t v19 = 0;
      do
      {
        unint64_t v20 = &__src[v19 * 4];
        long long v21 = *(_OWORD *)&result[v19];
        long long v22 = *(_OWORD *)&result[v19 + 4];
        *((void *)v20 + 4) = *(void *)&result[v19 + 8];
        *(_OWORD *)unint64_t v20 = v21;
        *((_OWORD *)v20 + 1) = v22;
        v19 += 10;
      }
      while (&result[v19] != (_DWORD *)a2);
      if (v19 * 4)
      {
        uint64_t v23 = __src;
        while (a2 != a3)
        {
          if (*(void *)a2 >= *(void *)v23)
          {
            long long v26 = *(_OWORD *)v23;
            long long v27 = *((_OWORD *)v23 + 1);
            result[8] = *((_DWORD *)v23 + 8);
            *(_OWORD *)__n128 result = v26;
            *((_OWORD *)result + 1) = v27;
            v23 += 40;
          }
          else
          {
            long long v24 = *a2;
            long long v25 = a2[1];
            result[8] = *((_DWORD *)a2 + 8);
            *(_OWORD *)__n128 result = v24;
            *((_OWORD *)result + 1) = v25;
            a2 = (_OWORD *)((char *)a2 + 40);
          }
          result += 10;
          if (&__src[v19 * 4] == v23) {
            return result;
          }
        }
        return memmove(result, v23, __src - v23 + v19 * 4 - 4);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      long long v8 = &__src[v7];
      long long v9 = *(_OWORD *)((char *)a2 + v7);
      long long v10 = *(_OWORD *)((char *)a2 + v7 + 16);
      *((void *)v8 + 4) = *(void *)((char *)a2 + v7 + 32);
      *(_OWORD *)long long v8 = v9;
      *((_OWORD *)v8 + 1) = v10;
      v7 += 40;
    }
    while ((_OWORD *)((char *)a2 + v7) != a3);
    if (v7)
    {
      long long v11 = &__src[v7];
      uint64_t v12 = (uint64_t)a3 - 40;
      while (a2 != (_OWORD *)result)
      {
        unint64_t v13 = *((void *)v11 - 5);
        unint64_t v14 = *((void *)a2 - 5);
        BOOL v15 = v13 >= v14;
        if (v13 >= v14) {
          long long v16 = v11 - 40;
        }
        else {
          long long v16 = (char *)a2 - 40;
        }
        if (v15) {
          v11 -= 40;
        }
        else {
          a2 = (_OWORD *)((char *)a2 - 40);
        }
        long long v17 = *(_OWORD *)v16;
        long long v18 = *((_OWORD *)v16 + 1);
        *(_DWORD *)(v12 + 32) = *((_DWORD *)v16 + 8);
        *(_OWORD *)uint64_t v12 = v17;
        *(_OWORD *)(v12 + 16) = v18;
        v12 -= 40;
        if (v11 == __src) {
          return result;
        }
      }
      uint64_t v28 = 0;
      do
      {
        uint64_t v29 = v12 + v28;
        long long v30 = *(_OWORD *)&v11[v28 - 40];
        long long v31 = *(_OWORD *)&v11[v28 - 24];
        *(_DWORD *)(v29 + 32) = *(_DWORD *)&v11[v28 - 8];
        *(_OWORD *)uint64_t v29 = v30;
        *(_OWORD *)(v29 + 16) = v31;
        v28 -= 40;
      }
      while (&v11[v28] != __src);
    }
  }
  return result;
}

long long *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(long long *__src, long long *a2, long long *a3)
{
  long long v3 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if ((long long *)((char *)__src + 40) == a2)
    {
      long long v7 = *__src;
      long long v9 = __src[1];
      uint64_t v11 = *((void *)__src + 4);
      int64_t v5 = (char *)a3 - (char *)a2;
      memmove(__src, a2, (char *)a3 - (char *)a2 - 4);
      long long v3 = (long long *)((char *)__src + v5);
      long long *v3 = v7;
      v3[1] = v9;
      *((_DWORD *)v3 + 8) = v11;
    }
    else if ((long long *)((char *)a2 + 40) == a3)
    {
      long long v3 = (long long *)((char *)__src + 40);
      long long v8 = *(long long *)((char *)a3 - 40);
      long long v10 = *(long long *)((char *)a3 - 24);
      uint64_t v12 = *((void *)a3 - 1);
      if ((long long *)((char *)a3 - 40) != __src) {
        memmove((char *)__src + 40, __src, (char *)a3 - 40 - (char *)__src - 4);
      }
      *__src = v8;
      __src[1] = v10;
      *((_DWORD *)__src + 8) = v12;
    }
    else
    {
      return std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(__src, a2, a3);
    }
  }
  return v3;
}

long long *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(long long *a1, long long *a2, long long *a3)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 3);
  if (v3 == 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 3))
  {
    if (a1 != a2 && a2 != a3)
    {
      long long v4 = (long long *)((char *)a1 + 40);
      int64_t v5 = (long long *)((char *)a2 + 40);
      do
      {
        uint64_t v6 = *((void *)v4 - 1);
        long long v7 = *(long long *)((char *)v4 - 40);
        long long v8 = *(long long *)((char *)v4 - 24);
        int v9 = *((_DWORD *)v5 - 2);
        long long v10 = *(long long *)((char *)v5 - 24);
        *(long long *)((char *)v4 - 40) = *(long long *)((char *)v5 - 40);
        *(long long *)((char *)v4 - 24) = v10;
        *((_DWORD *)v4 - 2) = v9;
        *(long long *)((char *)v5 - 24) = v8;
        *(long long *)((char *)v5 - 40) = v7;
        *((_DWORD *)v5 - 2) = v6;
        if (v4 == a2) {
          break;
        }
        long long v4 = (long long *)((char *)v4 + 40);
        BOOL v11 = v5 == a3;
        int64_t v5 = (long long *)((char *)v5 + 40);
      }
      while (!v11);
    }
  }
  else
  {
    uint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 3);
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 3);
    do
    {
      uint64_t v14 = v13;
      unint64_t v13 = v12;
      uint64_t v12 = v14 % v12;
    }
    while (v12);
    if (v13)
    {
      BOOL v15 = (long long *)((char *)a1 + 40 * v13);
      do
      {
        long long v16 = *(long long *)((char *)v15 - 40);
        long long v17 = *(long long *)((char *)v15 - 24);
        uint64_t v18 = *((void *)v15 - 1);
        BOOL v15 = (long long *)((char *)v15 - 40);
        long long v30 = v16;
        long long v31 = v17;
        int v32 = v18;
        uint64_t v19 = (long long *)((char *)v15 + 8 * (((char *)a2 - (char *)a1) >> 3));
        unint64_t v20 = v15;
        do
        {
          long long v21 = v19;
          long long v22 = *v19;
          long long v23 = v19[1];
          *((_DWORD *)v20 + 8) = *((_DWORD *)v19 + 8);
          long long *v20 = v22;
          v20[1] = v23;
          unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)v19) >> 3);
          uint64_t v19 = (long long *)((char *)v19 + 8 * (((char *)a2 - (char *)a1) >> 3));
          BOOL v25 = __OFSUB__(v3, v24);
          uint64_t v27 = v3 - v24;
          char v26 = (v27 < 0) ^ v25;
          uint64_t v28 = (long long *)((char *)a1 + 40 * v27);
          if (!v26) {
            uint64_t v19 = v28;
          }
          unint64_t v20 = v21;
        }
        while (v19 != v15);
        *((_DWORD *)v21 + 8) = v32;
        *long long v21 = v30;
        v21[1] = v31;
      }
      while (v15 != a1);
    }
    return (long long *)((char *)a1 + 8 * (((char *)a3 - (char *)a2) >> 3));
  }
  return a2;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,char const*> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,char const*> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v6 = (long long *)(a2 - 24);
      if (*(void *)(a2 - 24) < *(void *)a1)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v9;
        *char v6 = v8;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((long long *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__n128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      long long v10 = (void *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((long long *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unint64_t v14 = *(void *)v11;
    if (*(void *)v11 < *v10)
    {
      long long v18 = *(_OWORD *)(v11 + 8);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(void *)(v16 + 88) = *(void *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24;
        if (v14 >= *(void *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(void *)uint64_t v17 = v14;
      *(_OWORD *)(v17 + 8) = v18;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    long long v10 = (void *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

char **adjustVectorToMatchSegmentDeltas<CSCppSegmentRange,Pointer64>(char **result, void *a2)
{
  unint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    char v5 = result;
    do
    {
      uint64_t v6 = a2[1];
      uint64_t v7 = v6 - *a2;
      if (v6 == *a2) {
        goto LABEL_12;
      }
      unint64_t v8 = *(void *)v3;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      long long v10 = (void *)*a2;
      do
      {
        unint64_t v11 = v9 >> 1;
        uint64_t v12 = &v10[3 * (v9 >> 1)];
        unint64_t v14 = *v12;
        int v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v8 < v14) {
          unint64_t v9 = v11;
        }
        else {
          long long v10 = v13;
        }
      }
      while (v9);
      if (v10 == (void *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        int64_t v15 = v2 - (v3 + 32);
        if (v2 != v3 + 32) {
          BOOL result = (char **)memmove(v3, v3 + 32, v2 - (v3 + 32));
        }
        uint64_t v2 = &v3[v15];
        v5[1] = &v3[v15];
      }
      else
      {
        *(void *)unint64_t v3 = *(v10 - 1) + v8;
        v3 += 32;
      }
    }
    while (v3 != v2);
  }
  return result;
}

char **adjustVectorToMatchSegmentDeltas<CSCppSectionRange,Pointer64>(char **result, void *a2)
{
  unint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    char v5 = result;
    do
    {
      uint64_t v6 = a2[1];
      uint64_t v7 = v6 - *a2;
      if (v6 == *a2) {
        goto LABEL_12;
      }
      unint64_t v8 = *(void *)v3;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      long long v10 = (void *)*a2;
      do
      {
        unint64_t v11 = v9 >> 1;
        uint64_t v12 = &v10[3 * (v9 >> 1)];
        unint64_t v14 = *v12;
        int v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v8 < v14) {
          unint64_t v9 = v11;
        }
        else {
          long long v10 = v13;
        }
      }
      while (v9);
      if (v10 == (void *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        int64_t v15 = v2 - (v3 + 24);
        if (v2 != v3 + 24) {
          BOOL result = (char **)memmove(v3, v3 + 24, v2 - (v3 + 24));
        }
        uint64_t v2 = &v3[v15];
        v5[1] = &v3[v15];
      }
      else
      {
        *(void *)unint64_t v3 = *(v10 - 1) + v8;
        v3 += 24;
      }
    }
    while (v3 != v2);
  }
  return result;
}

void adjustSymbolsToMatchSegmentDeltas<Pointer64>(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unint64_t **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)a1 != v3)
  {
    do
    {
      uint64_t v6 = a2[1];
      uint64_t v7 = v6 - *a2;
      if (v6 == *a2) {
        goto LABEL_11;
      }
      unint64_t v8 = *v2;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      long long v10 = (void *)*a2;
      do
      {
        unint64_t v11 = v9 >> 1;
        uint64_t v12 = &v10[3 * (v9 >> 1)];
        unint64_t v14 = *v12;
        int v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v8 < v14) {
          unint64_t v9 = v11;
        }
        else {
          long long v10 = v13;
        }
      }
      while (v9);
      if (v10 == (void *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_11:
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>((uint64_t)(v2 + 13), v3, (uint64_t)v2);
        uint64_t v3 = v15;
        uint64_t v16 = *(void *)(a1 + 8);
        if (v16 != v15)
        {
          do
          {
            uint64_t v17 = v16 - 104;
            long long v18 = (void **)(v16 - 40);
            std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v18);
            uint64_t v16 = v17;
          }
          while (v17 != v3);
        }
        *(void *)(a1 + 8) = v3;
      }
      else
      {
        slideSymbolsByOffset<Pointer64>(v2, *(v10 - 1));
        v2 += 13;
        uint64_t v3 = *(void *)(a1 + 8);
      }
    }
    while (v2 != (unint64_t *)v3);
  }
}

char **adjustVectorToMatchSegmentDeltas<TRawSourceInfo<Pointer64>,Pointer64>(char **result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    char v5 = result;
    do
    {
      uint64_t v6 = a2[1];
      uint64_t v7 = v6 - *a2;
      if (v6 == *a2) {
        goto LABEL_12;
      }
      unint64_t v8 = *(void *)v3;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      long long v10 = (void *)*a2;
      do
      {
        unint64_t v11 = v9 >> 1;
        uint64_t v12 = &v10[3 * (v9 >> 1)];
        unint64_t v14 = *v12;
        int v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v8 < v14) {
          unint64_t v9 = v11;
        }
        else {
          long long v10 = v13;
        }
      }
      while (v9);
      if (v10 == (void *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        int64_t v15 = v2 - (v3 + 40);
        if (v2 != v3 + 40) {
          BOOL result = (char **)memmove(v3, v3 + 40, v15 - 4);
        }
        uint64_t v2 = &v3[v15];
        v5[1] = &v3[v15];
      }
      else
      {
        *(void *)uint64_t v3 = *(v10 - 1) + v8;
        v3 += 40;
      }
    }
    while (v3 != v2);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,false>(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 40;
    if (result + 40 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        unint64_t v6 = *(void *)(v4 + 40);
        if (v6 < *(void *)v4)
        {
          *(_OWORD *)unint64_t v11 = *(_OWORD *)(v4 + 48);
          *(_OWORD *)&v11[16] = *(_OWORD *)(v4 + 64);
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            long long v9 = *(_OWORD *)(result + v7 + 16);
            *(_OWORD *)(v8 + 40) = *(_OWORD *)(result + v7);
            *(_OWORD *)(v8 + 56) = v9;
            *(_DWORD *)(v8 + 72) = *(_DWORD *)(result + v7 + 32);
            if (!v7) {
              break;
            }
            v7 -= 40;
            if (v6 >= *(void *)(v8 - 40))
            {
              uint64_t v10 = result + v7 + 40;
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *(void *)uint64_t v10 = v6;
          *(_OWORD *)(v10 + 8) = *(_OWORD *)v11;
          *(_OWORD *)(v10 + 20) = *(_OWORD *)&v11[12];
        }
        uint64_t v2 = v5 + 40;
        v3 += 40;
        uint64_t v4 = v5;
      }
      while (v5 + 40 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(long long *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 >= *(void *)a1)
  {
    if (v4 >= v3) {
      return 0;
    }
    unint64_t v11 = a2[4];
    long long v12 = *(_OWORD *)a2;
    long long v13 = *((_OWORD *)a2 + 1);
    int v14 = *((_DWORD *)a3 + 8);
    long long v15 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v15;
    *((_DWORD *)a2 + 8) = v14;
    *(_OWORD *)a3 = v12;
    *((_OWORD *)a3 + 1) = v13;
    *((_DWORD *)a3 + 8) = v11;
    if (*a2 < *(void *)a1)
    {
      uint64_t v16 = *((void *)a1 + 4);
      long long v17 = *a1;
      long long v18 = a1[1];
      int v19 = *((_DWORD *)a2 + 8);
      long long v20 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v20;
      *((_DWORD *)a1 + 8) = v19;
      *(_OWORD *)a2 = v17;
      *((_OWORD *)a2 + 1) = v18;
      uint64_t result = 2;
      *((_DWORD *)a2 + 8) = v16;
      return result;
    }
  }
  else
  {
    if (v4 < v3)
    {
      unint64_t v5 = *((void *)a1 + 4);
      long long v6 = *a1;
      long long v7 = a1[1];
      int v8 = *((_DWORD *)a3 + 8);
      long long v9 = *((_OWORD *)a3 + 1);
      *a1 = *(_OWORD *)a3;
      a1[1] = v9;
      *((_DWORD *)a1 + 8) = v8;
      *(_OWORD *)a3 = v6;
      *((_OWORD *)a3 + 1) = v7;
      uint64_t result = 1;
LABEL_9:
      *((_DWORD *)a3 + 8) = v5;
      return result;
    }
    uint64_t v21 = *((void *)a1 + 4);
    long long v22 = *a1;
    long long v23 = a1[1];
    int v24 = *((_DWORD *)a2 + 8);
    long long v25 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v25;
    *((_DWORD *)a1 + 8) = v24;
    *(_OWORD *)a2 = v22;
    *((_OWORD *)a2 + 1) = v23;
    *((_DWORD *)a2 + 8) = v21;
    if (*a3 < *a2)
    {
      unint64_t v5 = a2[4];
      long long v26 = *(_OWORD *)a2;
      long long v27 = *((_OWORD *)a2 + 1);
      int v28 = *((_DWORD *)a3 + 8);
      long long v29 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v29;
      *((_DWORD *)a2 + 8) = v28;
      *(_OWORD *)a3 = v26;
      *((_OWORD *)a3 + 1) = v27;
      uint64_t result = 2;
      goto LABEL_9;
    }
  }
  return 1;
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer64> *,std::__less<void,void> &>(uint64_t *a1, long long *a2)
{
  unint64_t v2 = *a1;
  *(_OWORD *)long long v17 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 3);
  if ((unint64_t)*a1 >= *((void *)a2 - 5))
  {
    unint64_t v5 = (long long *)(a1 + 5);
    do
    {
      unint64_t v3 = v5;
      if (v5 >= a2) {
        break;
      }
      unint64_t v5 = (long long *)((char *)v5 + 40);
    }
    while (v2 >= *(void *)v3);
  }
  else
  {
    unint64_t v3 = (long long *)a1;
    do
    {
      unint64_t v4 = *((void *)v3 + 5);
      unint64_t v3 = (long long *)((char *)v3 + 40);
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      unint64_t v6 = *((void *)a2 - 5);
      a2 = (long long *)((char *)a2 - 40);
    }
    while (v2 < v6);
  }
  while (v3 < a2)
  {
    uint64_t v16 = *((void *)v3 + 4);
    long long v14 = *v3;
    long long v15 = v3[1];
    long long v7 = *a2;
    long long v8 = a2[1];
    *((_DWORD *)v3 + 8) = *((_DWORD *)a2 + 8);
    long long *v3 = v7;
    v3[1] = v8;
    *((_DWORD *)a2 + 8) = v16;
    *a2 = v14;
    a2[1] = v15;
    do
    {
      unint64_t v9 = *((void *)v3 + 5);
      unint64_t v3 = (long long *)((char *)v3 + 40);
    }
    while (v2 >= v9);
    do
    {
      unint64_t v10 = *((void *)a2 - 5);
      a2 = (long long *)((char *)a2 - 40);
    }
    while (v2 < v10);
  }
  if ((uint64_t *)((char *)v3 - 40) != a1)
  {
    long long v11 = *(long long *)((char *)v3 - 40);
    long long v12 = *(long long *)((char *)v3 - 24);
    *((_DWORD *)a1 + 8) = *((_DWORD *)v3 - 2);
    *(_OWORD *)a1 = v11;
    *((_OWORD *)a1 + 1) = v12;
  }
  *((void *)v3 - 5) = v2;
  *(long long *)((char *)v3 - 20) = *(_OWORD *)&v17[12];
  *(v3 - 2) = *(_OWORD *)v17;
  return v3;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer64> *,std::__less<void,void> &>(uint64_t *a1, long long *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  *(_OWORD *)long long v20 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 3);
  do
  {
    unint64_t v4 = a1[v2 + 5];
    v2 += 5;
  }
  while (v4 < v3);
  unint64_t v5 = (unint64_t)&a1[v2];
  if (v2 == 5)
  {
    do
    {
      if (v5 >= (unint64_t)a2) {
        break;
      }
      unint64_t v7 = *((void *)a2 - 5);
      a2 = (long long *)((char *)a2 - 40);
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      unint64_t v6 = *((void *)a2 - 5);
      a2 = (long long *)((char *)a2 - 40);
    }
    while (v6 >= v3);
  }
  long long v8 = &a1[v2];
  if (v5 < (unint64_t)a2)
  {
    unint64_t v9 = a2;
    do
    {
      long long v10 = *(_OWORD *)v8;
      long long v19 = *((_OWORD *)v8 + 1);
      uint64_t v11 = v8[4];
      long long v13 = *v9;
      long long v12 = v9[1];
      *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
      *(_OWORD *)long long v8 = v13;
      *((_OWORD *)v8 + 1) = v12;
      *((_DWORD *)v9 + 8) = v11;
      *unint64_t v9 = v10;
      v9[1] = v19;
      do
      {
        unint64_t v14 = v8[5];
        v8 += 5;
      }
      while (v14 < v3);
      do
      {
        unint64_t v15 = *((void *)v9 - 5);
        unint64_t v9 = (long long *)((char *)v9 - 40);
      }
      while (v15 >= v3);
    }
    while (v8 < (uint64_t *)v9);
  }
  if (v8 - 5 != a1)
  {
    long long v16 = *(_OWORD *)(v8 - 5);
    long long v17 = *(_OWORD *)(v8 - 3);
    *((_DWORD *)a1 + 8) = *((_DWORD *)v8 - 2);
    *(_OWORD *)a1 = v16;
    *((_OWORD *)a1 + 1) = v17;
  }
  *(v8 - 5) = v3;
  *(_OWORD *)((char *)v8 - 20) = *(_OWORD *)&v20[12];
  *((_OWORD *)v8 - 2) = *(_OWORD *)v20;
  return v8 - 5;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = (long long *)(a2 - 40);
      if (*(void *)(a2 - 40) < *(void *)a1)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        long long v8 = *(_OWORD *)a1;
        long long v9 = *(_OWORD *)(a1 + 16);
        int v10 = *(_DWORD *)(a2 - 8);
        long long v11 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v11;
        *(_DWORD *)(a1 + 32) = v10;
        *unint64_t v6 = v8;
        *(_OWORD *)(a2 - 24) = v9;
        *(_DWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>((long long *)a1, (unint64_t *)(a1 + 40), (unint64_t *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      long long v12 = (void *)(a1 + 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>((long long *)a1, (unint64_t *)(a1 + 40), (unint64_t *)(a1 + 80));
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unint64_t v16 = *(void *)v13;
    if (*(void *)v13 < *v12)
    {
      *(_OWORD *)uint64_t v21 = *(_OWORD *)(v13 + 8);
      *(_OWORD *)&v21[16] = *(_OWORD *)(v13 + 24);
      uint64_t v17 = v14;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_DWORD *)(v18 + 152) = *(_DWORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v16 >= *(void *)(v18 + 40))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(_OWORD *)(v20 + 8) = *(_OWORD *)v21;
      *(_OWORD *)(v20 + 20) = *(_OWORD *)&v21[12];
      if (++v15 == 8) {
        return v13 + 40 == a2;
      }
    }
    long long v12 = (void *)v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>((long long *)a1, (unint64_t *)a2, (unint64_t *)a3);
  if (*(void *)a4 < *(void *)a3)
  {
    uint64_t v9 = *(void *)(a3 + 32);
    __n128 result = *(__n128 *)a3;
    long long v10 = *(_OWORD *)(a3 + 16);
    int v11 = *(_DWORD *)(a4 + 32);
    long long v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_DWORD *)(a3 + 32) = v11;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v10;
    *(_DWORD *)(a4 + 32) = v9;
    if (*(void *)a3 < *(void *)a2)
    {
      uint64_t v13 = *(void *)(a2 + 32);
      __n128 result = *(__n128 *)a2;
      long long v14 = *(_OWORD *)(a2 + 16);
      int v15 = *(_DWORD *)(a3 + 32);
      long long v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(_DWORD *)(a2 + 32) = v15;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v14;
      *(_DWORD *)(a3 + 32) = v13;
      if (*(void *)a2 < *(void *)a1)
      {
        uint64_t v17 = *(void *)(a1 + 32);
        __n128 result = *(__n128 *)a1;
        long long v18 = *(_OWORD *)(a1 + 16);
        int v19 = *(_DWORD *)(a2 + 32);
        long long v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_DWORD *)(a1 + 32) = v19;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v18;
        *(_DWORD *)(a2 + 32) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(a1, a2, a3, a4).n128_u64[0];
  if (*(void *)a5 < *(void *)a4)
  {
    uint64_t v11 = *(void *)(a4 + 32);
    __n128 result = *(__n128 *)a4;
    long long v12 = *(_OWORD *)(a4 + 16);
    int v13 = *(_DWORD *)(a5 + 32);
    long long v14 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v14;
    *(_DWORD *)(a4 + 32) = v13;
    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 16) = v12;
    *(_DWORD *)(a5 + 32) = v11;
    if (*(void *)a4 < *(void *)a3)
    {
      uint64_t v15 = *(void *)(a3 + 32);
      __n128 result = *(__n128 *)a3;
      long long v16 = *(_OWORD *)(a3 + 16);
      int v17 = *(_DWORD *)(a4 + 32);
      long long v18 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v18;
      *(_DWORD *)(a3 + 32) = v17;
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v16;
      *(_DWORD *)(a4 + 32) = v15;
      if (*(void *)a3 < *(void *)a2)
      {
        uint64_t v19 = *(void *)(a2 + 32);
        __n128 result = *(__n128 *)a2;
        long long v20 = *(_OWORD *)(a2 + 16);
        int v21 = *(_DWORD *)(a3 + 32);
        long long v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v22;
        *(_DWORD *)(a2 + 32) = v21;
        *(__n128 *)a3 = result;
        *(_OWORD *)(a3 + 16) = v20;
        *(_DWORD *)(a3 + 32) = v19;
        if (*(void *)a2 < *(void *)a1)
        {
          uint64_t v23 = *(void *)(a1 + 32);
          __n128 result = *(__n128 *)a1;
          long long v24 = *(_OWORD *)(a1 + 16);
          int v25 = *(_DWORD *)(a2 + 32);
          long long v26 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v26;
          *(_DWORD *)(a1 + 32) = v25;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v24;
          *(_DWORD *)(a2 + 32) = v23;
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (unint64_t *)(a1 + 40 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(a1, a4, v9, v12);
        v12 -= 5;
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != a3)
    {
      long long v14 = v6;
      do
      {
        if (*(void *)v14 < *(void *)a1)
        {
          uint64_t v15 = *((void *)v14 + 4);
          long long v16 = *v14;
          long long v17 = v14[1];
          int v18 = *(_DWORD *)(a1 + 32);
          long long v19 = *(_OWORD *)(a1 + 16);
          long long *v14 = *(_OWORD *)a1;
          v14[1] = v19;
          *((_DWORD *)v14 + 8) = v18;
          *(_OWORD *)a1 = v16;
          *(_OWORD *)(a1 + 16) = v17;
          *(_DWORD *)(a1 + 32) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(a1, a4, v9, (unint64_t *)a1);
        }
        long long v14 = (long long *)((char *)v14 + 40);
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 41)
    {
      int64_t v20 = v8 / 0x28uLL;
      do
      {
        uint64_t v21 = 0;
        long long v32 = *(_OWORD *)a1;
        long long v33 = *(_OWORD *)(a1 + 16);
        uint64_t v34 = *(void *)(a1 + 32);
        uint64_t v22 = a1;
        do
        {
          uint64_t v23 = v22 + 40 * v21 + 40;
          uint64_t v24 = (2 * v21) | 1;
          uint64_t v25 = 2 * v21 + 2;
          if (v25 < v20 && *(void *)v23 < *(void *)(v23 + 40))
          {
            v23 += 40;
            uint64_t v24 = v25;
          }
          long long v26 = *(_OWORD *)v23;
          long long v27 = *(_OWORD *)(v23 + 16);
          *(_DWORD *)(v22 + 32) = *(_DWORD *)(v23 + 32);
          *(_OWORD *)uint64_t v22 = v26;
          *(_OWORD *)(v22 + 16) = v27;
          uint64_t v22 = v23;
          uint64_t v21 = v24;
        }
        while (v24 <= (uint64_t)((unint64_t)(v20 - 2) >> 1));
        unint64_t v6 = (long long *)((char *)v6 - 40);
        if ((long long *)v23 == v6)
        {
          *(_DWORD *)(v23 + 32) = v34;
          *(_OWORD *)uint64_t v23 = v32;
          *(_OWORD *)(v23 + 16) = v33;
        }
        else
        {
          long long v28 = *v6;
          long long v29 = v6[1];
          *(_DWORD *)(v23 + 32) = *((_DWORD *)v6 + 8);
          *(_OWORD *)uint64_t v23 = v28;
          *(_OWORD *)(v23 + 16) = v29;
          *unint64_t v6 = v32;
          v6[1] = v33;
          *((_DWORD *)v6 + 8) = v34;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(a1, v23 + 40, a4, 0xCCCCCCCCCCCCCCCDLL * ((v23 + 40 - a1) >> 3));
        }
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      int64_t v5 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      unint64_t v6 = (unint64_t *)(a1 + 40 * v5);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2) >= a3)
      {
        unint64_t v7 = *v6;
      }
      else
      {
        unint64_t v7 = *v6;
        unint64_t v8 = v6[5];
        if (*v6 <= v8) {
          unint64_t v7 = v6[5];
        }
        if (*v6 < v8)
        {
          v6 += 5;
          int64_t v5 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }
      unint64_t v9 = *a4;
      if (v7 >= *a4)
      {
        *(_OWORD *)long long v17 = *(_OWORD *)(a4 + 1);
        *(_OWORD *)&v17[16] = *(_OWORD *)(a4 + 3);
        do
        {
          unint64_t v10 = a4;
          a4 = v6;
          long long v11 = *(_OWORD *)v6;
          long long v12 = *((_OWORD *)v6 + 1);
          *((_DWORD *)v10 + 8) = *((_DWORD *)v6 + 8);
          *(_OWORD *)unint64_t v10 = v11;
          *((_OWORD *)v10 + 1) = v12;
          if (v4 < v5) {
            break;
          }
          uint64_t v13 = (2 * v5) | 1;
          unint64_t v6 = (unint64_t *)(a1 + 40 * v13);
          int64_t v5 = 2 * v5 + 2;
          if (v5 >= a3)
          {
            unint64_t v14 = *v6;
            int64_t v5 = v13;
          }
          else
          {
            unint64_t v14 = *v6;
            unint64_t v15 = v6[5];
            if (*v6 <= v15) {
              unint64_t v14 = v6[5];
            }
            if (*v6 >= v15) {
              int64_t v5 = v13;
            }
            else {
              v6 += 5;
            }
          }
        }
        while (v14 >= v9);
        *a4 = v9;
        __n128 result = *(__n128 *)v17;
        *(_OWORD *)((char *)a4 + 20) = *(_OWORD *)&v17[12];
        *(_OWORD *)(a4 + 1) = *(_OWORD *)v17;
      }
    }
  }
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    unint64_t v6 = (long long *)(a1 + 40 * (v4 >> 1));
    unint64_t v7 = (long long *)(a2 - 40);
    unint64_t v8 = *(void *)(a2 - 40);
    if (*(void *)v6 < v8)
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)&v13[16] = *(_OWORD *)(a2 - 16);
      do
      {
        unint64_t v9 = v7;
        unint64_t v7 = v6;
        long long v10 = *v6;
        long long v11 = v6[1];
        *((_DWORD *)v9 + 8) = *((_DWORD *)v6 + 8);
        *unint64_t v9 = v10;
        v9[1] = v11;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        unint64_t v6 = (long long *)(a1 + 40 * v5);
      }
      while (*(void *)v6 < v8);
      *(void *)unint64_t v7 = v8;
      *(long long *)((char *)v7 + 8) = *(_OWORD *)v13;
      __n128 result = *(__n128 *)&v13[12];
      *(long long *)((char *)v7 + 20) = *(_OWORD *)&v13[12];
    }
  }
  return result;
}

uint64_t intern_symbol_names_and_path<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>(uint64_t a1, CSCppMMapStringTable *a2, DemanglingUtilities::CSCppReusableDemanglingBuffer *a3, void *a4, void *a5, int a6)
{
  if ((atomic_load_explicit((atomic_uint *volatile)(a1 + 28), memory_order_acquire) & 0x400000) != 0)
  {
    long long v12 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>(a1);
    uint64_t v13 = "";
  }
  else
  {
    long long v12 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::EphemeralMangledName>(a1);
    uint64_t v13 = *(const char **)(a1 + 96);
  }
  *(void *)&long long v25 = v13;
  *((void *)&v25 + 1) = v12;
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::find<std::pair<unsigned long,unsigned long>>(a4, &v25);
  if (result)
  {
    unsigned int v15 = *(_DWORD *)(result + 32);
    LODWORD(v16) = *(_DWORD *)(result + 36);
    goto LABEL_30;
  }
  unsigned int v15 = CSCppMMapStringTable::intern_with_prefix(a2, v13, v12);
  if (DemanglingUtilities::is_simple_mangled_name((DemanglingUtilities *)v12, (const char *)atomic_load_explicit((atomic_uint *volatile)(a1 + 28), memory_order_acquire)))
  {
    long long v17 = DemanglingUtilities::simple_demangle(v12, (const char *)atomic_load_explicit((atomic_uint *volatile)(a1 + 28), memory_order_acquire));
  }
  else
  {
    if (a6)
    {
      DemanglingUtilities::CSCppReusableDemanglingBuffer::reusable_buffer(a3);
      CSCppAddressSet::sort(a3);
      uint64_t v18 = a1;
    }
    else
    {
      if ((atomic_load_explicit((atomic_uint *volatile)(a1 + 28), memory_order_acquire) & 0x20000) == 0) {
        goto LABEL_17;
      }
      uint64_t v18 = a1;
    }
    long long v17 = (const char *)TRawSymbol<Pointer64>::_resolve_name(v18);
  }
  long long v19 = (char *)v17;
  if (v17)
  {
    if (v17 == v12 + 1 || v17 == v12)
    {
      BOOL v20 = v17 != v12;
      if ((atomic_load_explicit((atomic_uint *volatile)(a1 + 28), memory_order_acquire) & 0x80000) != 0)
      {
        unsigned int v21 = 0;
      }
      else if ((atomic_load_explicit((atomic_uint *volatile)(a1 + 28), memory_order_acquire) & 0x8000) != 0)
      {
        unsigned int v21 = 1;
      }
      else
      {
        unsigned int v21 = (atomic_load_explicit((atomic_uint *volatile)(a1 + 28), memory_order_acquire) >> 16) & 1;
      }
      char is_objc_method = TRawSymbol<Pointer64>::is_objc_method(a1);
      if (v19 == v12) {
        int v23 = v21;
      }
      else {
        int v23 = 1;
      }
      if (is_objc_method) {
        int v23 = v20;
      }
      uint64_t v16 = v15 + v23;
    }
    else
    {
      uint64_t v16 = CSCppMMapStringTable::intern_with_prefix(a2, 0, v17);
    }
    goto LABEL_29;
  }
LABEL_17:
  uint64_t v16 = 0;
LABEL_29:
  unint64_t v24 = v15 | (unint64_t)(v16 << 32);
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>&,std::pair<unsigned int,unsigned int>>((uint64_t)a4, &v25, &v25, &v24);
LABEL_30:
  *(_DWORD *)(a1 + 16) = v16;
  *(_DWORD *)(a1 + 20) = v15;
  if ((atomic_load_explicit((atomic_uint *volatile)(a1 + 28), memory_order_acquire) & 0x80000000) != 0)
  {
    uint64_t result = *(void *)(a1 + 48);
    if (result)
    {
      uint64_t result = intern_string<std::unordered_map<unsigned long,unsigned int>>((const char *)result, a2, a5);
      *(_DWORD *)(a1 + 24) = result;
    }
  }
  return result;
}

uint64_t write_symbols_and_inlined_functions<Pointer64>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t **a5, uint64_t a6, uint64_t a7)
{
  int v41 = 0;
  long long v40 = *a5;
  long long v39 = 0u;
  memset(v38, 0, sizeof(v38));
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    long long v10 = a5;
    do
    {
      if (!a6 || CSCppAddressSet::_intersects_range(a6, *(void *)v8, *(void *)(v8 + 8)))
      {
        int v12 = children_index_for_symbol<Pointer64>(v8, &v41, a6);
        if (*(void *)(v8 + 72) != *(void *)(v8 + 64))
        {
          uint64_t v37 = v8;
          std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::push_back(v38, &v37);
        }
        if (*v10 == v10[1])
        {
          unint64_t v13 = *(void *)v8;
        }
        else
        {
          advance_delta_iterator_to_containing_range<Pointer64>((unint64_t *)v8, (uint64_t)v10, &v40);
          unint64_t v13 = *(void *)v8 + v40[2];
        }
        uint64_t v14 = *(void *)(v8 + 8);
        *(_DWORD *)a2 = v13;
        *(_DWORD *)(a2 + 4) = v14;
        TRawSymbol<Pointer64>::is_objc_method(v8);
        *(_DWORD *)(a2 + 8) = atomic_load_explicit((atomic_uint *volatile)(v8 + 28), memory_order_acquire);
        *(_DWORD *)(a2 + 20) = v12;
        *(void *)(a2 + 12) = *(void *)(v8 + 16);
        a2 += 24;
      }
      v8 += 104;
    }
    while (v8 != v7);
    uint64_t v15 = *((void *)&v39 + 1);
    if (*((void *)&v39 + 1))
    {
      unint64_t v16 = v39;
      long long v32 = v10;
      do
      {
        uint64_t v17 = *(void *)(*(void *)(*((void *)&v38[0] + 1) + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v16 & 0x1FF));
        long long v40 = *v10;
        uint64_t v18 = *(void *)(v17 + 72) - *(void *)(v17 + 64);
        if (v18)
        {
          uint64_t v19 = 0;
          unint64_t v20 = 0;
          unint64_t v21 = v18 / 104;
          if ((unint64_t)(v18 / 104) <= 1) {
            uint64_t v22 = 1;
          }
          else {
            uint64_t v22 = v18 / 104;
          }
          uint64_t v35 = v22;
          do
          {
            uint64_t v23 = *(void *)(v17 + 64);
            uint64_t v24 = v23 + 104 * v20;
            if (!a6 || CSCppAddressSet::_intersects_range(a6, *(void *)v24, *(void *)(v24 + 8)))
            {
              int v25 = children_index_for_symbol<Pointer64>(v23 + 104 * v20, &v41, a6);
              if (*(void *)(v23 + 104 * v20 + 72) != *(void *)(v23 + 104 * v20 + 64))
              {
                uint64_t v37 = v23 + 104 * v20;
                std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::push_back(v38, &v37);
              }
              if (a6)
              {
                uint64_t v26 = v19;
                unint64_t v27 = v20;
                do
                {
                  BOOL v28 = ++v27 >= v21;
                  if (v27 >= v21) {
                    break;
                  }
                  BOOL v29 = CSCppAddressSet::_intersects_range(a6, *(void *)(*(void *)(v17 + 64) + v26 + 104), *(void *)(*(void *)(v17 + 64) + v26 + 112));
                  v26 += 104;
                }
                while (!v29);
              }
              else
              {
                BOOL v28 = v20 + 1 >= v21;
              }
              long long v10 = v32;
              if (*v32 == v32[1])
              {
                LODWORD(v30) = 0;
              }
              else
              {
                advance_delta_iterator_to_containing_range<Pointer64>((unint64_t *)v24, (uint64_t)v32, &v40);
                unint64_t v30 = v40[2];
              }
              CSCppMMapInlinedSymbol::CSCppMMapInlinedSymbol<Pointer64>(a3, v30, a7, v24, a4, v25, v28);
              a3 += 36;
            }
            ++v20;
            v19 += 104;
          }
          while (v20 != v35);
          uint64_t v15 = *((void *)&v39 + 1);
          unint64_t v16 = v39;
        }
        --v15;
        *(void *)&long long v39 = ++v16;
        *((void *)&v39 + 1) = v15;
        if (v16 >= 0x400)
        {
          operator delete(**((void ***)&v38[0] + 1));
          unint64_t v16 = v39 - 512;
          *((void *)&v38[0] + 1) += 8;
          *(void *)&long long v39 = v39 - 512;
          uint64_t v15 = *((void *)&v39 + 1);
        }
      }
      while (v15);
    }
  }
  return std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::~deque[abi:ne180100](v38);
}

void sub_1B90255C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>&,std::pair<unsigned int,unsigned int>>(uint64_t a1, void *a2, _OWORD *a3, void *a4)
{
  unint64_t v8 = a2[1];
  unint64_t v9 = (*a2 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v4 = (*a2 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
      if (v9 >= v10) {
        uint64_t v4 = v9 % v10;
      }
    }
    else
    {
      uint64_t v4 = v9 & (v10 - 1);
    }
    int v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2 && i[3] == v8) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  void *i = 0;
  i[1] = v9;
  *((_OWORD *)i + 1) = *a3;
  i[4] = *a4;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        uint64_t v4 = v9 % v10;
      }
      else {
        uint64_t v4 = v9;
      }
    }
    else
    {
      uint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    void *i = *v23;
LABEL_42:
    *uint64_t v23 = i;
    goto LABEL_43;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B902582C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t recursive_intern_inlined_function_names_with_name_cache<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>(uint64_t a1, CSCppMMapStringTable *a2, uint64_t a3, DemanglingUtilities::CSCppReusableDemanglingBuffer *a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  if (v7 == v8) {
    return 0;
  }
  uint64_t v15 = 0;
  do
  {
    if (!a3 || CSCppAddressSet::_intersects_range(a3, *(void *)v7, *(void *)(v7 + 8)))
    {
      intern_symbol_names_and_path<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>(v7, a2, a4, a5, a6, a7);
      uint64_t v15 = v15
          + recursive_intern_inlined_function_names_with_name_cache<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>(v7, a2, a3, a4, a5, a6, a7)+ 1;
    }
    v7 += 104;
  }
  while (v7 != v8);
  return v15;
}

unint64_t **std::__introsort<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**,false>(unint64_t **result, unint64_t **a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                long long v40 = *(a2 - 1);
                int v41 = *v10;
                if (*v40 < **v10)
                {
                  *unint64_t v10 = v40;
                  *(a2 - 1) = v41;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                uint64_t v42 = v10 + 1;
                uint64_t v43 = v10 + 2;
                uint64_t v44 = v10 + 3;
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v10, v10 + 1, v10 + 2, v10 + 3);
                unint64_t v45 = *(a2 - 1);
                uint64_t v46 = v10[3];
                if (*v45 < *v46)
                {
                  *uint64_t v44 = v45;
                  *(a2 - 1) = v46;
                  __n128 v47 = *v44;
                  long long v48 = *v43;
                  unint64_t v49 = **v44;
                  if (v49 < **v43)
                  {
                    *uint64_t v43 = v47;
                    *uint64_t v44 = v48;
                    long long v50 = *v42;
                    if (v49 < **v42)
                    {
                      v10[1] = v47;
                      v10[2] = v50;
                      long long v51 = *v10;
                      if (v49 < **v10)
                      {
                        *unint64_t v10 = v47;
                        v10[1] = v51;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unint64_t v52 = v10 + 1;
            BOOL v54 = v10 == a2 || v52 == a2;
            if (a4)
            {
              if (!v54)
              {
                uint64_t v55 = 0;
                unint64_t v56 = v10;
                do
                {
                  uint64_t v58 = *v56;
                  uint64_t v57 = v56[1];
                  unint64_t v56 = v52;
                  unint64_t v59 = *v57;
                  if (*v57 < *v58)
                  {
                    uint64_t v60 = v55;
                    while (1)
                    {
                      *(unint64_t **)((char *)v10 + v60 + 8) = v58;
                      if (!v60) {
                        break;
                      }
                      uint64_t v58 = *(unint64_t **)((char *)v10 + v60 - 8);
                      v60 -= 8;
                      if (v59 >= *v58)
                      {
                        uint64_t v61 = (unint64_t **)((char *)v10 + v60 + 8);
                        goto LABEL_84;
                      }
                    }
                    uint64_t v61 = v10;
LABEL_84:
                    *uint64_t v61 = v57;
                  }
                  unint64_t v52 = v56 + 1;
                  v55 += 8;
                }
                while (v56 + 1 != a2);
              }
            }
            else if (!v54)
            {
              do
              {
                uint64_t v97 = *v9;
                unint64_t v96 = v9[1];
                unint64_t v9 = v52;
                unint64_t v98 = *v96;
                if (*v96 < *v97)
                {
                  do
                  {
                    uint64_t *v52 = v97;
                    uint64_t v97 = *(v52 - 2);
                    --v52;
                  }
                  while (v98 < *v97);
                  uint64_t *v52 = v96;
                }
                unint64_t v52 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  uint64_t v66 = &v10[v65];
                  uint64_t v67 = *v66;
                  if (2 * v64 + 2 < (uint64_t)v12)
                  {
                    uint64_t v68 = v66[1];
                    unint64_t v70 = *v67;
                    BOOL v69 = *v67 >= *v68;
                    if (*v67 <= *v68) {
                      unint64_t v70 = *v68;
                    }
                    if (*v67 < *v68) {
                      uint64_t v67 = v66[1];
                    }
                    if (!v69)
                    {
                      ++v66;
                      uint64_t v65 = 2 * v64 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v70 = *v67;
                  }
                  uint64_t result = &v10[v64];
                  uint64_t v71 = *result;
                  unint64_t v72 = **result;
                  if (v70 >= v72)
                  {
                    do
                    {
                      uint64_t v73 = v66;
                      *uint64_t result = v67;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v74 = (2 * v65) | 1;
                      uint64_t v66 = &v10[v74];
                      uint64_t v65 = 2 * v65 + 2;
                      uint64_t v67 = *v66;
                      if (v65 < (uint64_t)v12)
                      {
                        uint64_t v75 = v66[1];
                        unint64_t v77 = *v67;
                        BOOL v76 = *v67 >= *v75;
                        if (*v67 <= *v75) {
                          unint64_t v77 = *v75;
                        }
                        if (*v67 < *v75) {
                          uint64_t v67 = v66[1];
                        }
                        if (v76) {
                          uint64_t v65 = v74;
                        }
                        else {
                          ++v66;
                        }
                      }
                      else
                      {
                        unint64_t v77 = *v67;
                        uint64_t v65 = v74;
                      }
                      uint64_t result = v73;
                    }
                    while (v77 >= v72);
                    *uint64_t v73 = v71;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              uint64_t v78 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v79 = 0;
                BOOL v80 = *v10;
                uint64_t v81 = v10;
                do
                {
                  std::string::size_type v82 = &v81[v79];
                  uint64_t v85 = (unint64_t ***)v82[1];
                  std::vector<std::string> v83 = (unint64_t **)(v82 + 1);
                  uint64_t v84 = v85;
                  uint64_t v86 = (2 * v79) | 1;
                  uint64_t v87 = 2 * v79 + 2;
                  if (v87 < v78)
                  {
                    uint64_t result = *v84;
                    if ((unint64_t)*v84 < *v83[1])
                    {
                      uint64_t v84 = (unint64_t ***)v83[1];
                      ++v83;
                      uint64_t v86 = v87;
                    }
                  }
                  void *v81 = v84;
                  uint64_t v81 = v83;
                  uint64_t v79 = v86;
                }
                while (v86 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
                if (v83 == --a2)
                {
                  *std::vector<std::string> v83 = v80;
                }
                else
                {
                  *std::vector<std::string> v83 = *a2;
                  *a2 = v80;
                  uint64_t v88 = (char *)v83 - (char *)v10 + 8;
                  if (v88 >= 9)
                  {
                    unint64_t v89 = (((unint64_t)v88 >> 3) - 2) >> 1;
                    __int16 v90 = &v10[v89];
                    unint64_t v91 = *v90;
                    uint64_t v92 = *v83;
                    unint64_t v93 = **v83;
                    if (**v90 < v93)
                    {
                      do
                      {
                        long long v94 = v90;
                        *std::vector<std::string> v83 = v91;
                        if (!v89) {
                          break;
                        }
                        unint64_t v89 = (v89 - 1) >> 1;
                        __int16 v90 = &v10[v89];
                        unint64_t v91 = *v90;
                        std::vector<std::string> v83 = v94;
                      }
                      while (**v90 < v93);
                      *long long v94 = v92;
                    }
                  }
                }
              }
              while (v78-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v9, &v9[v12 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v9 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *unint64_t v9 = *v14;
            long long *v14 = v15;
          }
          else
          {
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          float v16 = *v9;
          unint64_t v17 = **v9;
          if ((a4 & 1) != 0 || **(v9 - 1) < v17) {
            break;
          }
          if (v17 >= **(a2 - 1))
          {
            long long v32 = v9 + 1;
            do
            {
              unint64_t v10 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 >= **v10);
          }
          else
          {
            unint64_t v10 = v9;
            do
            {
              unint64_t v31 = v10[1];
              ++v10;
            }
            while (v17 >= *v31);
          }
          long long v33 = a2;
          if (v10 < a2)
          {
            long long v33 = a2;
            do
              uint64_t v34 = *--v33;
            while (v17 < *v34);
          }
          if (v10 < v33)
          {
            uint64_t v35 = *v10;
            unint64_t v36 = *v33;
            do
            {
              *unint64_t v10 = v36;
              long long *v33 = v35;
              do
              {
                uint64_t v37 = v10[1];
                ++v10;
                uint64_t v35 = v37;
              }
              while (v17 >= *v37);
              do
              {
                long long v38 = *--v33;
                unint64_t v36 = v38;
              }
              while (v17 < *v38);
            }
            while (v10 < v33);
          }
          long long v39 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *unint64_t v9 = *v39;
          }
          a4 = 0;
          *long long v39 = v16;
        }
        uint64_t v18 = 0;
        do
          unint64_t v19 = v9[++v18];
        while (*v19 < v17);
        unint64_t v20 = &v9[v18];
        size_t v21 = a2;
        if (v18 == 1)
        {
          size_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*v23 >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*v22 >= v17);
        }
        if (v20 >= v21)
        {
          BOOL v29 = v20 - 1;
        }
        else
        {
          unint64_t v24 = *v21;
          int v25 = &v9[v18];
          uint64_t v26 = v21;
          do
          {
            *int v25 = v24;
            *uint64_t v26 = v19;
            do
            {
              unint64_t v27 = v25[1];
              ++v25;
              unint64_t v19 = v27;
            }
            while (*v27 < v17);
            do
            {
              BOOL v28 = *--v26;
              unint64_t v24 = v28;
            }
            while (*v28 >= v17);
          }
          while (v25 < v26);
          BOOL v29 = v25 - 1;
        }
        if (v29 != v9) {
          *unint64_t v9 = *v29;
        }
        *BOOL v29 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_33:
        uint64_t result = (unint64_t **)std::__introsort<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**,false>(v9, v29, a3, a4 & 1);
        a4 = 0;
        unint64_t v10 = v29 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v9, v29);
      unint64_t v10 = v29 + 1;
      uint64_t result = (unint64_t **)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_33;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

unint64_t **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(unint64_t **result, unint64_t **a2, unint64_t **a3)
{
  unint64_t v3 = *a2;
  BOOL v4 = *result;
  unint64_t v5 = **a2;
  unint64_t v6 = **result;
  uint64_t v7 = *a3;
  unint64_t v8 = **a3;
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      unint64_t v9 = *result;
      if (**a2 < **result)
      {
        *uint64_t result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *uint64_t result = v3;
      *a2 = v4;
      if (**a3 >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      unint64_t v19 = a1 + 2;
      unint64_t v20 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(a1, a1 + 1, a1 + 2, a1 + 3);
      size_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*v21 < *v22)
      {
        long long *v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        unint64_t v24 = *v19;
        unint64_t v25 = **v20;
        if (v25 < **v19)
        {
          *unint64_t v19 = v23;
          long long *v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < **v18)
          {
            a1[1] = v23;
            a1[2] = v26;
            unint64_t v27 = *a1;
            if (v25 < **a1)
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(a1, a1 + 1, a1 + 2);
      unint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    unint64_t v13 = *v8;
    unint64_t v14 = **v9;
    if (v14 < **v8)
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(unint64_t **)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        unint64_t v13 = *(unint64_t **)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *v13)
        {
          unint64_t v17 = (unint64_t **)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      unint64_t v17 = a1;
LABEL_13:
      *unint64_t v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

unint64_t **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(a1, a2, a3);
  unint64_t v9 = *a3;
  if (**a4 < **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    int v10 = *a2;
    if (**a3 < **a2)
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (**a2 < **a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *BOOL result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    BOOL result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t children_index_for_symbol<Pointer64>(uint64_t a1, int *a2, uint64_t a3)
{
  if (a3)
  {
    int v4 = *(unint64_t **)(a1 + 64);
    unint64_t v5 = *(unint64_t **)(a1 + 72);
    if (v4 == v5)
    {
      int v7 = 0;
LABEL_10:
      unint64_t v10 = &CSCppMMapSymbol::kNoChildren;
      goto LABEL_11;
    }
    int v7 = 0;
    do
    {
      unint64_t v8 = *v4;
      uint64_t v9 = v4[1];
      v4 += 13;
      v7 += CSCppAddressSet::_intersects_range(a3, v8, v9);
    }
    while (v4 != v5);
  }
  else
  {
    int v7 = -991146299 * ((*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3);
  }
  unint64_t v10 = a2;
  if (!v7) {
    goto LABEL_10;
  }
LABEL_11:
  uint64_t result = *v10;
  *a2 += v7;
  return result;
}

unint64_t *advance_delta_iterator_to_containing_range<Pointer64>(unint64_t *result, uint64_t a2, unint64_t **a3)
{
  uint64_t v3 = (uint64_t)result;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *result;
  unint64_t v5 = *a3;
  unint64_t v6 = *(void *)(a2 + 8);
  while (v4 < *v5 || result[1] + v4 > v5[1] + *v5)
  {
    v5 += 3;
    *a3 = v5;
    if ((unint64_t)v5 >= v6)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        if ((atomic_load_explicit((atomic_uint *volatile)(v3 + 28), memory_order_acquire) & 0x1C000) != 0) {
          int v7 = (const char *)TRawSymbol<Pointer64>::_resolve_name(v3);
        }
        else {
          int v7 = "UNNAMED";
        }
        uint64_t v8 = *(void *)v3;
        uint64_t v9 = *(void *)(v3 + 8);
        *(_DWORD *)long long buf = 136315650;
        uint64_t v13 = v7;
        __int16 v14 = 2048;
        uint64_t v15 = v8;
        __int16 v16 = 2048;
        uint64_t v17 = v9;
        _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Symbol %s [%llx -> %llx) outside of relocations in mmap SOD\n", buf, 0x20u);
      }
      unint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      if ((atomic_load_explicit((atomic_uint *volatile)(v3 + 28), memory_order_acquire) & 0x1C000) != 0) {
        unint64_t v11 = (const char *)TRawSymbol<Pointer64>::_resolve_name(v3);
      }
      else {
        unint64_t v11 = "UNNAMED";
      }
      return (unint64_t *)fprintf(v10, "Symbol %s [%llx -> %llx) outside of relocations in mmap SOD\n", v11, *(void *)v3, *(void *)(v3 + 8));
    }
  }
  return result;
}

void std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B9026B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t CSCppMMapInlinedSymbol::CSCppMMapInlinedSymbol<Pointer64>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v11 = *(void *)(a4 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a4 + a2;
  *(_DWORD *)(a1 + 4) = v11;
  TRawSymbol<Pointer64>::is_objc_method(a4);
  uint64_t v12 = (atomic_uint *)(a4 + 28);
  unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(a4 + 28), memory_order_acquire);
  *(_DWORD *)(a1 + 8) = explicit;
  *(_DWORD *)(a1 + 20) = a6;
  *(void *)(a1 + 12) = *(void *)(a4 + 16);
  if (a7) {
    *(_DWORD *)(a1 + 8) = explicit | 0x40000000;
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a4 + 24);
  int v14 = atomic_load_explicit(v12, memory_order_acquire);
  if (*(void *)(a4 + 48)) {
    BOOL v15 = v14 < 0;
  }
  else {
    BOOL v15 = 0;
  }
  int v16 = *(_DWORD *)(a4 + 56);
  if (!v15) {
    int v16 = 0;
  }
  *(_DWORD *)(a1 + 28) = v16;
  int v17 = atomic_load_explicit(v12, memory_order_acquire);
  if (*(void *)(a4 + 48)) {
    BOOL v18 = v17 < 0;
  }
  else {
    BOOL v18 = 0;
  }
  int v19 = *(_DWORD *)(a4 + 60);
  if (!v18) {
    int v19 = 0;
  }
  *(_DWORD *)(a1 + 32) = v19;
  return a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(uint64_t result, char *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - (char *)v11;
    unint64_t v15 = (a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v22 = *((void *)a2 - 1);
          uint64_t v23 = *v11;
          uint64_t result = strcmp((const char *)(*a3 + *(unsigned int *)(v22 + 12)), (const char *)(*a3 + *(unsigned int *)(*v11 + 12)));
          if ((result & 0x80000000) != 0)
          {
            *uint64_t v11 = v22;
            *((void *)a2 - 1) = v23;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, v11 + 1, (uint64_t *)a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, v11 + 1, v11 + 2, (uint64_t *)a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, v11 + 1, v11 + 2, v11 + 3, (uint64_t *)a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,CSCppMMapSymbol const**>((char *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, &v11[v15 >> 1], (uint64_t *)a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11 + 1, v17 - 1, (uint64_t *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11 + 2, &v11[v16 + 1], (uint64_t *)a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v17 - 1, v17, &v11[v16 + 1], a3);
      uint64_t v18 = *v11;
      *uint64_t v11 = *v17;
      *int v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(&v11[v15 >> 1], v11, (uint64_t *)a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if ((strcmp((const char *)(*a3 + *(unsigned int *)(*(v11 - 1) + 12)), (const char *)(*a3 + *(unsigned int *)(*v11 + 12))) & 0x80000000) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(v11, (uint64_t *)a2, a3);
      uint64_t v11 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    int v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(v11, a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, v19, a3);
    uint64_t v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v19 + 1, (uint64_t *)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, (uint64_t *)a2, a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (strcmp((const char *)(*a3 + *(unsigned int *)(v8 + 12)), (const char *)(*a3 + *(unsigned int *)(*a1 + 12))) < 0)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    int v17 = (const char *)(v13 + *(unsigned int *)(*v11 + 12));
    if (strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 12))) < 0)
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        int v20 = strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 12)));
        uint64_t v18 = v19;
        if ((v20 & 0x80000000) == 0)
        {
          BOOL v21 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      BOOL v21 = a1;
LABEL_12:
      *BOOL v21 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(uint64_t result, char *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - (char *)v11;
    unint64_t v15 = (a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v22 = *((void *)a2 - 1);
          uint64_t v23 = *v11;
          BOOL result = strcmp((const char *)(*a3 + *(unsigned int *)(v22 + 16)), (const char *)(*a3 + *(unsigned int *)(*v11 + 16)));
          if ((result & 0x80000000) != 0)
          {
            *uint64_t v11 = v22;
            *((void *)a2 - 1) = v23;
          }
          break;
        case 3uLL:
          BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, v11 + 1, (uint64_t *)a2 - 1, a3);
          break;
        case 4uLL:
          BOOL result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, v11 + 1, v11 + 2, (uint64_t *)a2 - 1, a3);
          break;
        case 5uLL:
          BOOL result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, v11 + 1, v11 + 2, v11 + 3, (uint64_t *)a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,CSCppMMapSymbol const**>((char *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, &v11[v15 >> 1], (uint64_t *)a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11 + 1, v17 - 1, (uint64_t *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11 + 2, &v11[v16 + 1], (uint64_t *)a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v17 - 1, v17, &v11[v16 + 1], a3);
      uint64_t v18 = *v11;
      *uint64_t v11 = *v17;
      *int v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(&v11[v15 >> 1], v11, (uint64_t *)a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if ((strcmp((const char *)(*a3 + *(unsigned int *)(*(v11 - 1) + 16)), (const char *)(*a3 + *(unsigned int *)(*v11 + 16))) & 0x80000000) == 0)
    {
      BOOL result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(v11, (uint64_t *)a2, a3);
      uint64_t v11 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(v11, a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, v19, a3);
    uint64_t v11 = v19 + 1;
    BOOL result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v19 + 1, (uint64_t *)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      BOOL result = std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, (uint64_t *)a2, a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v11, a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (strcmp((const char *)(*a3 + *(unsigned int *)(v8 + 16)), (const char *)(*a3 + *(unsigned int *)(*a1 + 16))) < 0)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    int v17 = (const char *)(v13 + *(unsigned int *)(*v11 + 16));
    if (strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 16))) < 0)
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        int v20 = strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 16)));
        uint64_t v18 = v19;
        if ((v20 & 0x80000000) == 0)
        {
          BOOL v21 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      BOOL v21 = a1;
LABEL_12:
      *BOOL v21 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t CSCppTRawSymbolNameGuard<Pointer64>::~CSCppTRawSymbolNameGuard(uint64_t a1)
{
  if (!*(unsigned char *)a1)
  {
    BOOL v3 = *(uint64_t **)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = *v3;
      uint64_t v5 = v3[1];
      while (v4 != v5)
      {
        TRawSymbol<Pointer64>::rollback_mmap_archive_naming(v4);
        v4 += 104;
      }
    }
  }
  return a1;
}

uint64_t TRawSymbol<Pointer64>::rollback_mmap_archive_naming(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 64);
  uint64_t v3 = *(void *)(result + 72);
  while (v2 != v3)
  {
    BOOL result = TRawSymbol<Pointer64>::rollback_mmap_archive_naming(v2);
    v2 += 104;
  }
  uint64_t v4 = (atomic_uint *)(v1 + 28);
  unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(v1 + 28), memory_order_acquire);
  if ((atomic_load_explicit((atomic_uint *volatile)(v1 + 28), memory_order_acquire) & 0x40000) == 0)
  {
    explicit &= ~0x20000u;
    *(void *)(v1 + 32) = *(void *)(v1 + 40);
  }
  if ((atomic_load_explicit(v4, memory_order_acquire) & 0x800000) == 0) {
    explicit &= 0xFEBFFFFB;
  }
  atomic_store(explicit, (unsigned int *)v4);
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      CSCppSymbolOwner::~CSCppSymbolOwner((CSCppSymbolOwner *)(v2 + 16));
    }
    operator delete((void *)v2);
  }
}

void *_copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  char v23 = 0;
  v28[3] = 0;
  v26[0] = &unk_1F12C8E08;
  v26[1] = v28;
  v26[3] = v26;
  std::__function::__value_func<void ()(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100](v26, v28);
  std::__function::__value_func<void ()(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](v26);
  unint64_t v21 = a3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = &v24;
  create_segment_relocation_deltas<Pointer32,CSCppSegmentRange,CSCppSegmentRange>((a3 & 0xFFFFFFFFFFFFFFF8) + 32, a1 + 32, 0, (uint64_t)&v19);
  uint64_t v9 = a2 + 96;
  v18[0] = &v21;
  v18[1] = &v22;
  v18[2] = &v23;
  v18[3] = a2 + 96;
  v18[4] = v28;
  v18[5] = &v19;
  v18[6] = &v24;
  _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator()((uint64_t)v18, (uint64_t)v26);
  if (v26[0])
  {
    v17[0] = 0;
    v17[1] = (void **)v17;
    v17[2] = (void **)0x2000000000;
    v17[3] = (void **)(a2 + 208);
    uint64_t v10 = v24;
    uint64_t v11 = v25;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 1174405120;
    _OWORD v13[2] = ___Z29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRef_block_invoke;
    void v13[3] = &unk_1F12C8DC8;
    void v13[4] = v17;
    v13[5] = v21;
    v13[6] = v9;
    __p = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    std::vector<TRangeValue<Pointer32,unsigned int>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer32,unsigned int>*,TRangeValue<Pointer32,unsigned int>*>(&__p, v19, (uint64_t)v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (unsigned char *)v19) >> 2));
    CSSymbolForeachSourceInfo(v10, v11, (uint64_t)v13);
    *(void *)(a5 + 88) = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(void *)a5 = 0;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_OWORD *)(a5 + 65) = 0u;
    TRawSymbol<Pointer32>::operator=(a5, (uint64_t)v26);
    *(unsigned char *)(a5 + 96) = 1;
    if (__p)
    {
      uint64_t v15 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(v17, 8);
  }
  else
  {
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 96) = 0;
  }
  v17[0] = (void **)&v27;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](v17);
  if (v19)
  {
    int v20 = v19;
    operator delete(v19);
  }
  return std::__function::__value_func<void ()(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](v28);
}

void sub_1B9027B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a19, 8);
  a19 = v31 - 144;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  std::__function::__value_func<void ()(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__value_func[abi:ne180100]((void *)(v31 - 104));
  _Unwind_Resume(a1);
}

unsigned __int8 *intern_name_or_default(char *a1, const void *a2, CSCppStringCache *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    return CSCppStringCache::intern(this, a1);
  }
  else
  {
    snprintf(__str, 0x10uLL, "%p", a2);
    return CSCppStringCache::intern(this, __str);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CSUserSuppliedSymbolData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

void *_copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
  BOOL result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  if ((result - 1) >= 2)
  {
    if (result == 4)
    {
      uint64_t v18 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
      uint64_t v19 = (unsigned int *)(*(void *)(**(void **)(a1 + 8) + 8) & 0xFFFFFFFFFFFFFFFCLL);
      unint64_t v63 = 0;
      if (TMMapSymbolOwnerData::convert_archive_address_to_real_address(v18, *v19, &v63))
      {
        uint64_t v70 = 0;
        *(void *)long long buf = &unk_1F12C8EE8;
        unint64_t v72 = &v68;
        uint64_t v73 = v18;
        uint64_t v74 = buf;
        std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100](buf, &v68);
        std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](buf);
        unsigned int v20 = v19[2];
        if ((v20 & 0x1C000) != 0)
        {
          unint64_t v21 = (_DWORD *)*((void *)v18 + 11);
          unint64_t v22 = (unint64_t)v21
              + 32 * v21[2]
              + 24 * v21[3]
              + (24 * v21[4])
              + (unint64_t)(4 * v21[4])
              + (36 * v21[5])
              + (20 * v21[6])
              + v21[22]
              + v21[20]
              + 96;
          uint64_t v23 = v19[3];
          uint64_t v24 = (char *)(v22 + v19[4]);
          uint64_t v25 = (char *)(v22 + v23);
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          LODWORD(v23) = v19[3];
        }
        int v54 = v23 != 0;
        if (v23) {
          long long v55 = v25;
        }
        else {
          long long v55 = v24;
        }
        int v56 = v63;
        unsigned int v57 = v19[1];
        uint64_t v58 = intern_name_or_default(v55, (const void *)v63, *(CSCppStringCache **)(a1 + 24));
        unint64_t v59 = intern_name_or_default(v24, (const void *)v63, *(CSCppStringCache **)(a1 + 24));
        *(_DWORD *)a2 = v56;
        *(_DWORD *)(a2 + 4) = v57;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 24) = v58;
        *(void *)(a2 + 32) = v59;
        *(void *)(a2 + 88) = 0;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)(a2 + 65) = 0u;
        *(_DWORD *)(a2 + 20) = (v20 & 0x7F39FBFF | (v54 << 17)) + 4195328;
        v66[0] = MEMORY[0x1E4F143A8];
        v66[1] = 1174405120;
        v66[2] = ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke;
        v66[3] = &__block_descriptor_tmp_486;
        std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100]((uint64_t)v67, (uint64_t)&v68);
        uint64_t v60 = *(void *)(a1 + 24);
        v67[4] = a2;
        v67[5] = v60;
        TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v18, (uint64_t)v19, (uint64_t)v66);
        uint64_t v61 = slide_for_remote_address<Pointer32,unsigned int>(*(void **)(a1 + 40), *(_DWORD *)a2);
        slideSymbolsByOffset<Pointer32>(a2, v61);
        std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](v67);
        return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](&v68);
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Could not remap archive address to real in debug maps", buf, 2u);
      }
      BOOL result = (void *)fwrite("Could not remap archive address to real in debug maps", 0x35uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    }
    else if (result == 5)
    {
      uint64_t v6 = (FlatbufferSymbolOwnerData *)CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
      uint64_t v74 = 0;
      *(void *)&long long v68 = buf;
      *((void *)&v68 + 1) = v6;
      BOOL v69 = *(CSCppSymbolOwner ***)a1;
      std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},void>(buf, (uint64_t)&v68);
      unint64_t v63 = *(void *)(**(void **)(a1 + 8) + 8) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v7 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v63);
      uint64_t v8 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v6, v7);
      if (v9)
      {
        uint64_t v10 = (const void *)v8;
        if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v63)
          || (uint64_t v11 = (unsigned __int16 *)(v63 - *(int *)v63), *v11 < 9u)
          || (uint64_t v12 = v11[4]) == 0)
        {
          uint64_t v13 = 0;
        }
        else
        {
          uint64_t v13 = (char *)(v63 + v12 + *(unsigned int *)(v63 + v12) + 4);
        }
        if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v63)
          || (long long v38 = (unsigned __int16 *)(v63 - *(int *)v63), *v38 < 0xBu)
          || (uint64_t v39 = v38[5]) == 0)
        {
          uint64_t v40 = 0;
        }
        else
        {
          uint64_t v40 = (char *)(v63 + v39 + *(unsigned int *)(v63 + v39) + 4);
        }
        int v41 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::flags(&v63);
        FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v63);
        int v43 = v42;
        uint64_t v44 = intern_name_or_default(v40, v10, *(CSCppStringCache **)(a1 + 24));
        uint64_t v45 = intern_name_or_default(v13, v10, *(CSCppStringCache **)(a1 + 24));
        *(_DWORD *)a2 = v10;
        *(_DWORD *)(a2 + 4) = v43;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 24) = v44;
        *(void *)(a2 + 32) = v45;
        *(void *)(a2 + 88) = 0;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)(a2 + 65) = 0u;
        *(_DWORD *)(a2 + 20) = v41 & 0xFF39FBFF | 0x420400;
        unint64_t v46 = *(uint64_t **)(a1 + 48);
        uint64_t v47 = *v46;
        uint64_t v48 = v46[1];
        v64[0] = MEMORY[0x1E4F143A8];
        v64[1] = 1174405120;
        v64[2] = ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke_488;
        v64[3] = &__block_descriptor_tmp_490;
        std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100]((uint64_t)v65, (uint64_t)buf);
        uint64_t v49 = *(void *)(a1 + 24);
        v65[4] = a2;
        v65[5] = v49;
        FlatbufferSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v6, v47, v48, (uint64_t)v64);
        uint64_t v50 = slide_for_remote_address<Pointer32,unsigned int>(*(void **)(a1 + 40), *(_DWORD *)a2);
        slideSymbolsByOffset<Pointer32>(a2, v50);
        std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](v65);
        return std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](buf);
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v51 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v63);
        LODWORD(v68) = 134217984;
        *(void *)((char *)&v68 + 4) = v51;
        _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to relocate address %#llx in flatbuffer SOD", (uint8_t *)&v68, 0xCu);
      }
      uint64_t v52 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v53 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v63);
      fprintf(v52, "Failed to relocate address %#llx in flatbuffer SOD", v53);
      BOOL result = std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](buf);
    }
    *(void *)(a2 + 88) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(unsigned char *)(a2 + 80) = 0;
    *(_DWORD *)(a2 + 20) = 0;
    return result;
  }
  uint64_t v14 = (unsigned int *)(*(void *)(**(void **)(a1 + 8) + 8) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v15 = (char *)*((void *)v14 + 5);
  if (v15)
  {
    uint64_t v16 = (long long *)*((void *)v14 + 6);
    int v17 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 24), v15);
  }
  else
  {
    int v17 = 0;
    uint64_t v16 = 0;
  }
  *(void *)long long buf = v17;
  unint64_t v72 = v16;
  if ((atomic_load_explicit((atomic_uint *volatile)v14 + 5, memory_order_acquire) & 0x1C000) != 0) {
    uint64_t v26 = (char *)TRawSymbol<Pointer32>::_resolve_name((uint64_t)v14);
  }
  else {
    uint64_t v26 = 0;
  }
  if ((atomic_load_explicit((atomic_uint *volatile)v14 + 5, memory_order_acquire) & 0x1C000) != 0) {
    uint64_t v27 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>((uint64_t)v14);
  }
  else {
    uint64_t v27 = 0;
  }
  unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v14 + 5, memory_order_acquire);
  uint64_t v62 = *(void *)v14;
  unsigned int v29 = *(void *)v14;
  long long v30 = intern_name_or_default(v26, (const void *)v29, *(CSCppStringCache **)(a1 + 24));
  uint64_t v31 = intern_name_or_default(v27, (const void *)*v14, *(CSCppStringCache **)(a1 + 24));
  if ((atomic_load_explicit((atomic_uint *volatile)v14 + 5, memory_order_acquire) & 0x80000000) != 0)
  {
    long long v32 = buf;
    if (!*((void *)v14 + 5)) {
      long long v32 = 0;
    }
  }
  else
  {
    long long v32 = 0;
  }
  *(void *)a2 = v62;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v30;
  *(void *)(a2 + 32) = v31;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 65) = 0u;
  if (v32)
  {
    *(_OWORD *)(a2 + 40) = *(_OWORD *)v32;
    int v33 = -2143157248;
  }
  else
  {
    int v33 = 4326400;
  }
  *(_DWORD *)(a2 + 20) = explicit & 0xFF39FBFF | v33;
  uint64_t v34 = *((void *)v14 + 7);
  uint64_t v35 = *((void *)v14 + 8);
  if (v34 != v35)
  {
    do
    {
      uint64_t v36 = *(void *)(*(void *)(a1 + 32) + 24);
      if (!v36) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v36 + 48))(v36, v34, a2 + 56, *(void *)(a1 + 24));
      v34 += 96;
    }
    while (v34 != v35);
    unsigned int v29 = *(_DWORD *)a2;
  }
  uint64_t v37 = slide_for_remote_address<Pointer32,unsigned int>(*(void **)(a1 + 40), v29);
  return (void *)slideSymbolsByOffset<Pointer32>(a2, v37);
}

void sub_1B9028468(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__value_func[abi:ne180100]((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

void ___Z29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRef_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = CSCppSymbolOwner::data(*(CSCppSymbolOwner **)(a1 + 40));
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  if ((v6 - 1) < 2)
  {
    unint64_t v21 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    unint64_t v22 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 48), *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 8));
    uint64_t v13 = *(void ***)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    unsigned int v23 = *v21;
    int v24 = slide_for_remote_address<Pointer32,unsigned int>((void *)(a1 + 56), *v21) + v23;
    unsigned int v25 = v21[1];
    unsigned int v26 = v21[4];
    int v17 = v21[5] & 0x7FFFFFFF;
    uint64_t v19 = (char *)v13[1];
    uint64_t v27 = (char *)v13[2];
    if (v19 < v27)
    {
      *(_DWORD *)uint64_t v19 = v24;
      *((_DWORD *)v19 + 1) = v25;
      *((void *)v19 + 1) = v22;
      *((_DWORD *)v19 + 4) = v26;
      goto LABEL_8;
    }
    uint64_t v34 = (v19 - (unsigned char *)*v13) >> 5;
    unint64_t v35 = v34 + 1;
    if (!((unint64_t)(v34 + 1) >> 59))
    {
      uint64_t v36 = v27 - (unsigned char *)*v13;
      if (v36 >> 4 > v35) {
        unint64_t v35 = v36 >> 4;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v37 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      long long v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)(v13 + 2), v37);
      uint64_t v39 = &v38[32 * v34];
      int v41 = &v38[32 * v40];
      *(_DWORD *)uint64_t v39 = v24;
      *((_DWORD *)v39 + 1) = v25;
      *((void *)v39 + 1) = v22;
      *((_DWORD *)v39 + 4) = v26;
      *((_DWORD *)v39 + 5) = v17;
      *((_DWORD *)v39 + 6) = 0;
      int v42 = v39 + 32;
      uint64_t v44 = (char *)*v13;
      int v43 = (char *)v13[1];
      if (v43 == *v13) {
        goto LABEL_60;
      }
      do
      {
        long long v45 = *((_OWORD *)v43 - 2);
        *(_OWORD *)(v39 - 20) = *(_OWORD *)(v43 - 20);
        *((_OWORD *)v39 - 2) = v45;
        v39 -= 32;
        v43 -= 32;
      }
      while (v43 != v44);
      goto LABEL_59;
    }
LABEL_64:
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  if (v6 == 5)
  {
    uint64_t v28 = (char *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v29 = *(int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v30 = -v29;
    uint64_t v31 = (unsigned __int16 *)((a3 & 0xFFFFFFFFFFFFFFFCLL) - v29);
    if (*v31 >= 5u && (uint64_t v32 = v31[2]) != 0)
    {
      int v33 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 48), &v28[v32 + 4 + *(unsigned int *)&v28[v32]]);
      uint64_t v30 = -(uint64_t)*(int *)v28;
    }
    else
    {
      int v33 = "<Invalid file path>";
    }
    uint64_t v13 = *(void ***)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    unint64_t v46 = &v28[v30];
    if (*(unsigned __int16 *)v46 >= 0xDu && (uint64_t v47 = *((unsigned __int16 *)v46 + 6)) != 0)
    {
      uint64_t v48 = *(void *)&v28[v47];
      unsigned int v49 = v48;
    }
    else
    {
      unsigned int v49 = -1;
      LODWORD(v48) = -1;
    }
    int v50 = v48 + slide_for_remote_address<Pointer32,unsigned int>((void *)(a1 + 56), v49);
    uint64_t v51 = (unsigned __int16 *)&v28[-*(int *)v28];
    unsigned int v52 = *v51;
    if (v52 < 0xF)
    {
      int v53 = 0;
      int v62 = 0;
      int v63 = 0;
      if (v52 < 9) {
        goto LABEL_48;
      }
    }
    else if (v51[7])
    {
      int v53 = *(_DWORD *)&v28[v51[7]];
    }
    else
    {
      int v53 = 0;
    }
    if (v51[4]) {
      int v62 = *(_DWORD *)&v28[v51[4]];
    }
    else {
      int v62 = 0;
    }
    if (v52 >= 0xB && (uint64_t v64 = v51[5]) != 0) {
      int v63 = *(_DWORD *)&v28[v64];
    }
    else {
      int v63 = 0;
    }
LABEL_48:
    uint64_t v65 = (char *)v13[2];
    uint64_t v19 = (char *)v13[1];
    if (v19 < v65)
    {
      *(_DWORD *)uint64_t v19 = v50;
      *((_DWORD *)v19 + 1) = v53;
      *((void *)v19 + 1) = v33;
      *((_DWORD *)v19 + 4) = v62;
      *((_DWORD *)v19 + 5) = v63;
      goto LABEL_50;
    }
    uint64_t v66 = (v19 - (unsigned char *)*v13) >> 5;
    unint64_t v67 = v66 + 1;
    if (!((unint64_t)(v66 + 1) >> 59))
    {
      uint64_t v68 = v65 - (unsigned char *)*v13;
      if (v68 >> 4 > v67) {
        unint64_t v67 = v68 >> 4;
      }
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v69 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v69 = v67;
      }
      uint64_t v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)(v13 + 2), v69);
      uint64_t v39 = &v70[32 * v66];
      int v41 = &v70[32 * v71];
      *(_DWORD *)uint64_t v39 = v50;
      *((_DWORD *)v39 + 1) = v53;
      *((void *)v39 + 1) = v33;
      *((_DWORD *)v39 + 4) = v62;
      *((_DWORD *)v39 + 5) = v63;
      *((_DWORD *)v39 + 6) = 0;
      int v42 = v39 + 32;
      unint64_t v72 = (char *)*v13;
      int v43 = (char *)v13[1];
      if (v43 == *v13) {
        goto LABEL_60;
      }
      do
      {
        long long v73 = *((_OWORD *)v43 - 2);
        *(_OWORD *)(v39 - 20) = *(_OWORD *)(v43 - 20);
        *((_OWORD *)v39 - 2) = v73;
        v39 -= 32;
        v43 -= 32;
      }
      while (v43 != v72);
      goto LABEL_59;
    }
    goto LABEL_64;
  }
  if (v6 != 4) {
    return;
  }
  unint64_t v7 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(*(CSCppSymbolOwner **)(a1 + 40));
  uint64_t v8 = (CSCppMMapSourceInfo *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
  char v9 = (_DWORD *)*((void *)v7 + 11);
  uint64_t v10 = *(CSCppStringCache **)(a1 + 48);
  uint64_t v11 = (char *)CSCppMMapSourceInfo::path(v8, (uint64_t)v9+ 32 * v9[2]+ 24 * v9[3]+ (24 * v9[4])+ (unint64_t)(4 * v9[4])+ (36 * v9[5])+ (20 * v9[6])+ v9[22]+ v9[20]+ 96);
  uint64_t v12 = CSCppStringCache::intern(v10, v11);
  unint64_t v74 = 0;
  TMMapSymbolOwnerData::convert_archive_address_to_real_address(v7, *(unsigned int *)v8, &v74);
  uint64_t v13 = *(void ***)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  int v14 = v74;
  int v15 = v14 + slide_for_remote_address<Pointer32,unsigned int>((void *)(a1 + 56), v74);
  unsigned int v16 = *((_DWORD *)v8 + 1);
  unsigned int v18 = *((_DWORD *)v8 + 3);
  int v17 = *((_DWORD *)v8 + 4);
  uint64_t v19 = (char *)v13[1];
  unsigned int v20 = (char *)v13[2];
  if (v19 >= v20)
  {
    uint64_t v54 = (v19 - (unsigned char *)*v13) >> 5;
    unint64_t v55 = v54 + 1;
    if (!((unint64_t)(v54 + 1) >> 59))
    {
      uint64_t v56 = v20 - (unsigned char *)*v13;
      if (v56 >> 4 > v55) {
        unint64_t v55 = v56 >> 4;
      }
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v57 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v57 = v55;
      }
      uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)(v13 + 2), v57);
      uint64_t v39 = &v58[32 * v54];
      int v41 = &v58[32 * v59];
      *(_DWORD *)uint64_t v39 = v15;
      *((_DWORD *)v39 + 1) = v16;
      *((void *)v39 + 1) = v12;
      *((_DWORD *)v39 + 4) = v18;
      *((_DWORD *)v39 + 5) = v17;
      *((_DWORD *)v39 + 6) = 0;
      int v42 = v39 + 32;
      uint64_t v60 = (char *)*v13;
      int v43 = (char *)v13[1];
      if (v43 == *v13) {
        goto LABEL_60;
      }
      do
      {
        long long v61 = *((_OWORD *)v43 - 2);
        *(_OWORD *)(v39 - 20) = *(_OWORD *)(v43 - 20);
        *((_OWORD *)v39 - 2) = v61;
        v39 -= 32;
        v43 -= 32;
      }
      while (v43 != v60);
LABEL_59:
      int v43 = (char *)*v13;
LABEL_60:
      char *v13 = v39;
      v13[1] = v42;
      _OWORD v13[2] = v41;
      if (v43) {
        operator delete(v43);
      }
      goto LABEL_62;
    }
    goto LABEL_64;
  }
  *(_DWORD *)uint64_t v19 = v15;
  *((_DWORD *)v19 + 1) = v16;
  *((void *)v19 + 1) = v12;
  *((_DWORD *)v19 + 4) = v18;
LABEL_8:
  *((_DWORD *)v19 + 5) = v17;
LABEL_50:
  int v42 = v19 + 32;
  *((_DWORD *)v19 + 6) = 0;
LABEL_62:
  v13[1] = v42;
}

uint64_t slide_for_remote_address<Pointer32,unsigned int>(void *a1, unsigned int a2)
{
  uint64_t v2 = a1[1] - *a1;
  if (!v2) {
    return 0;
  }
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 2);
  uint64_t v4 = (_DWORD *)*a1;
  do
  {
    unint64_t v5 = v3 >> 1;
    int v6 = &v4[3 * (v3 >> 1)];
    unsigned int v8 = *v6;
    unint64_t v7 = v6 + 3;
    v3 += ~(v3 >> 1);
    if (v8 > a2) {
      unint64_t v3 = v5;
    }
    else {
      uint64_t v4 = v7;
    }
  }
  while (v3);
  if (v4 != (_DWORD *)*a1 && (unsigned int v9 = *(v4 - 3), v9 <= a2) && a2 + 1 <= *(v4 - 2) + v9) {
    return *(v4 - 1);
  }
  else {
    return 0;
  }
}

void *__copy_helper_block_e8_56c66_ZTSNSt3__16vectorI11TRangeValueI9Pointer32jENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = (void *)(a1 + 56);
  v2[2] = 0;
  return std::vector<TRangeValue<Pointer32,unsigned int>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer32,unsigned int>*,TRangeValue<Pointer32,unsigned int>*>(v2, *(const void **)(a2 + 56), *(void *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2));
}

void __destroy_helper_block_e8_56c66_ZTSNSt3__16vectorI11TRangeValueI9Pointer32jENS_9allocatorIS3_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::~__func()
{
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F12C8E08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F12C8E08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t *a3, CSCppStringCache *a4)
{
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::target_type()
{
}

void _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}::operator()(uint64_t a1, unsigned int *a2, uint64_t *a3, CSCppStringCache *this)
{
  unsigned int v8 = (char *)*((void *)a2 + 5);
  if (v8)
  {
    uint64_t v23 = *((void *)a2 + 6);
    unsigned int v9 = CSCppStringCache::intern(this, v8);
  }
  else
  {
    unsigned int v9 = 0;
    uint64_t v23 = 0;
  }
  if ((atomic_load_explicit((atomic_uint *volatile)a2 + 5, memory_order_acquire) & 0x1C000) != 0) {
    uint64_t v10 = (char *)TRawSymbol<Pointer32>::_resolve_name((uint64_t)a2);
  }
  else {
    uint64_t v10 = 0;
  }
  if ((atomic_load_explicit((atomic_uint *volatile)a2 + 5, memory_order_acquire) & 0x1C000) != 0) {
    uint64_t v11 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>((uint64_t)a2);
  }
  else {
    uint64_t v11 = 0;
  }
  unsigned int v12 = atomic_load_explicit((atomic_uint *volatile)a2 + 5, memory_order_acquire) & 0xFF39FBFF;
  unsigned int v13 = v12 | 0x420400;
  uint64_t v24 = *(void *)a2;
  int v14 = intern_name_or_default(v10, (const void *)*(void *)a2, this);
  int v15 = intern_name_or_default(v11, (const void *)*a2, this);
  unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)a2 + 5, memory_order_acquire);
  uint64_t v17 = *((void *)a2 + 5);
  v25[0] = v24;
  v25[1] = 0;
  uint64_t v26 = 0;
  uint64_t v27 = v14;
  uint64_t v28 = v15;
  uint64_t v31 = 0;
  long long v29 = 0u;
  memset(v30, 0, 25);
  if ((explicit & 0x80000000) != 0 && v17)
  {
    *(void *)&long long v29 = v9;
    *((void *)&v29 + 1) = v23;
    unsigned int v13 = v12 | 0x80420400;
  }
  HIDWORD(v26) = v13;
  uint64_t v18 = *((void *)a2 + 7);
  for (uint64_t i = *((void *)a2 + 8); v18 != i; v18 += 96)
  {
    uint64_t v20 = *(void *)(*(void *)a1 + 24);
    if (!v20) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t, _OWORD *, CSCppStringCache *))(*(void *)v20 + 48))(v20, v18, v30, this);
  }
  unint64_t v21 = a3[1];
  if (v21 >= a3[2])
  {
    uint64_t v22 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a3, (uint64_t)v25);
  }
  else
  {
    *(void *)(v21 + 88) = 0;
    *(void *)(v21 + 8) = 0;
    *(void *)(v21 + 16) = 0;
    *(void *)unint64_t v21 = 0;
    *(_OWORD *)(v21 + 40) = 0u;
    *(_OWORD *)(v21 + 56) = 0u;
    *(_OWORD *)(v21 + 65) = 0u;
    TRawSymbol<Pointer32>::operator=(v21, (uint64_t)v25);
    uint64_t v22 = v21 + 96;
  }
  a3[1] = v22;
  uint64_t v32 = (void **)v30;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v32);
}

void sub_1B9028DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  *(void *)(v21 - 88) = &a21;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  _Unwind_Resume(a1);
}

uint64_t ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator()(a1 + 32, a2);
}

uint64_t __copy_helper_block_e8_32c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void *__destroy_helper_block_e8_32c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void *std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},void>(void *a1, uint64_t a2)
{
  void v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v4 = &unk_1F12C8F68;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *((void *)v4 + 3) = *(void *)(a2 + 16);
  void v6[3] = v4;
  std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100](v6, a1);
  std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](v6);
  return a1;
}

uint64_t ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke_488(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator()(a1 + 32, a2);
}

uint64_t std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t __copy_helper_block_e8_32c139_ZTSNSt3__18functionIFvPKN17FlatbufferSymbols12InlineSymbolERNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS8_EEEER16CSCppStringCacheEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void *__destroy_helper_block_e8_32c139_ZTSNSt3__18functionIFvPKN17FlatbufferSymbols12InlineSymbolERNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS8_EEEER16CSCppStringCacheEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__func()
{
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F12C8EE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F12C8EE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator()(uint64_t a1, long long **a2, uint64_t *a3, CSCppStringCache *a4)
{
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::target_type()
{
}

void std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}::operator()(void *a1, long long *a2, uint64_t *a3, CSCppStringCache *this)
{
  unsigned int v8 = (TMMapSymbolOwnerData *)a1[1];
  unsigned int v9 = (_DWORD *)*((void *)v8 + 11);
  unint64_t v10 = (unint64_t)v9
      + 32 * v9[2]
      + 24 * v9[3]
      + (24 * v9[4])
      + (unint64_t)(4 * v9[4])
      + (36 * v9[5])
      + (20 * v9[6])
      + v9[22]
      + v9[20]
      + 96;
  if ((*((_DWORD *)a2 + 2) & 0x80000000) != 0 && (uint64_t v11 = *((unsigned int *)a2 + 6), v10 + v11))
  {
    unsigned int v12 = CSCppStringCache::intern(this, (char *)(v10 + v11));
    if ((*((_DWORD *)a2 + 2) & 0x80000000) != 0) {
      uint64_t v19 = *(void *)((char *)a2 + 28);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v23 = v19;
    unsigned int v8 = (TMMapSymbolOwnerData *)a1[1];
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t v23 = 0;
  }
  long long v35 = *a2;
  uint64_t v36 = *((void *)a2 + 2);
  unint64_t v34 = 0;
  if (TMMapSymbolOwnerData::convert_archive_address_to_real_address(v8, v35, &v34))
  {
    int v13 = DWORD2(v35);
    if ((DWORD2(v35) & 0x1C000) != 0) {
      int v14 = (char *)(v10 + v36);
    }
    else {
      int v14 = 0;
    }
    if ((DWORD2(v35) & 0x1C000) != 0) {
      int v15 = (char *)(v10 + HIDWORD(v35));
    }
    else {
      int v15 = 0;
    }
    if (HIDWORD(v35)) {
      unsigned int v16 = v15;
    }
    else {
      unsigned int v16 = v14;
    }
    unsigned int v17 = DWORD2(v35) & 0xFF39FBFF | ((HIDWORD(v35) != 0) << 17);
    *(_DWORD *)long long buf = v34;
    int v26 = DWORD1(v35);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    long long v29 = intern_name_or_default(v16, (const void *)v34, this);
    uint64_t v30 = intern_name_or_default(v14, (const void *)v34, this);
    uint64_t v33 = 0;
    long long v31 = 0u;
    memset(v32, 0, 25);
    if (v13 < 0)
    {
      *(void *)&long long v31 = v12;
      *((void *)&v31 + 1) = v23;
      int v18 = -2143288320;
    }
    else
    {
      int v18 = 4195328;
    }
    HIDWORD(v28) = v17 | v18;
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 0x40000000;
    v24[2] = ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlP22CSCppMMapInlinedSymbolRNS4_6vectorIS6_IS1_ENS4_9allocatorISK_EEEER16CSCppStringCacheE_clESI_SO_SQ__block_invoke;
    v24[3] = &__block_descriptor_tmp_491;
    uint64_t v20 = a1[1];
    v24[4] = *a1;
    v24[5] = buf;
    v24[6] = this;
    TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v20, (uint64_t)&v35, (uint64_t)v24);
    unint64_t v21 = a3[1];
    if (v21 >= a3[2])
    {
      uint64_t v22 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a3, (uint64_t)buf);
    }
    else
    {
      *(void *)(v21 + 88) = 0;
      *(void *)(v21 + 8) = 0;
      *(void *)(v21 + 16) = 0;
      *(void *)unint64_t v21 = 0;
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)(v21 + 56) = 0u;
      *(_OWORD *)(v21 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v21, (uint64_t)buf);
      uint64_t v22 = v21 + 96;
    }
    a3[1] = v22;
    unint64_t v37 = (void **)v32;
    std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v37);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Could not remap archive address to real in debug maps inline enumeration", buf, 2u);
    }
    fwrite("Could not remap archive address to real in debug maps inline enumeration", 0x48uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  }
}

void sub_1B902932C(_Unwind_Exception *a1)
{
  *(void *)(v2 - 96) = v1 + 56;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 96));
  _Unwind_Resume(a1);
}

uint64_t ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlP22CSCppMMapInlinedSymbolRNS4_6vectorIS6_IS1_ENS4_9allocatorISK_EEEER16CSCppStringCacheE_clESI_SO_SQ__block_invoke(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator()(*(void *)(a1 + 32), a2);
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__func()
{
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F12C8F68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F12C8F68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3, CSCppStringCache *a4)
{
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::target_type()
{
}

void std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}::operator()(uint64_t a1, unint64_t a2, uint64_t *a3, CSCppStringCache *this)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v53 = 0;
  uint64_t v54 = (int *)a2;
  unsigned int v52 = 0;
  unsigned int v8 = (unsigned __int16 *)(a2 - *(int *)a2);
  if (*v8 >= 0xDu)
  {
    uint64_t v9 = v8[6];
    if (v9)
    {
      unint64_t v10 = (int *)(a2 + v9 + *(unsigned int *)(a2 + v9));
      uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v11 >= 5u && (uint64_t v12 = v11[2]) != 0) {
        int v13 = (char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12);
      }
      else {
        int v13 = 0;
      }
      unsigned int v52 = CSCppStringCache::intern(this, v13 + 4);
      int v14 = (unsigned __int16 *)(a2 - *(int *)a2);
      unsigned int v15 = *v14;
      if (v15 < 0xD)
      {
        unsigned int v16 = 0;
      }
      else
      {
        unsigned int v16 = (int *)v14[6];
        if (v14[6]) {
          unsigned int v16 = (int *)((char *)v16 + a2 + *(unsigned int *)((char *)v16 + a2));
        }
      }
      unsigned int v17 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0) {
        int v19 = *(int *)((char *)v16 + v18);
      }
      else {
        int v19 = 0;
      }
      LODWORD(v53) = v19;
      if (v15 < 0xD)
      {
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v20 = (int *)v14[6];
        if (v20) {
          uint64_t v20 = (int *)((char *)v20 + a2 + *(unsigned int *)((char *)v20 + a2));
        }
      }
      unint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 >= 0xBu && (uint64_t v22 = v21[5]) != 0) {
        int v23 = *(int *)((char *)v20 + v22);
      }
      else {
        int v23 = 0;
      }
      HIDWORD(v53) = v23;
    }
  }
  uint64_t v24 = *(FlatbufferSymbolOwnerData **)(a1 + 8);
  unint64_t v25 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
  uint64_t v26 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v24, v25);
  if (v27)
  {
    uint64_t v28 = (const void *)v26;
    if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v54)
      || (long long v29 = (unsigned __int16 *)((char *)v54 - *v54), *v29 < 9u)
      || (uint64_t v30 = v29[4]) == 0)
    {
      long long v31 = 0;
    }
    else
    {
      long long v31 = (char *)v54 + v30 + *(unsigned int *)((char *)v54 + v30) + 4;
    }
    if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v54)
      || (uint64_t v32 = (unsigned __int16 *)((char *)v54 - *v54), *v32 < 0xBu)
      || (uint64_t v33 = v32[5]) == 0)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v34 = (char *)v54 + v33 + *(unsigned int *)((char *)v54 + v33) + 4;
    }
    int v35 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::flags(&v54);
    FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
    int v37 = v36;
    long long v38 = intern_name_or_default(v34, v28, this);
    uint64_t v39 = intern_name_or_default(v31, v28, this);
    uint64_t v40 = (unsigned __int16 *)((char *)v54 - *v54);
    if (*v40 < 0xDu)
    {
      int v42 = 0;
    }
    else
    {
      BOOL v41 = v40[6] == 0;
      int v42 = &v52;
      if (v41) {
        int v42 = 0;
      }
    }
    *(_DWORD *)long long buf = v28;
    *(_DWORD *)unint64_t v57 = v37;
    *(void *)&v57[4] = 0;
    uint64_t v58 = 0;
    uint64_t v59 = v38;
    uint64_t v60 = v39;
    uint64_t v63 = 0;
    long long v61 = 0u;
    memset(v62, 0, 25);
    if (v42)
    {
      long long v61 = *(_OWORD *)v42;
      int v46 = -2143288320;
    }
    else
    {
      int v46 = 4195328;
    }
    HIDWORD(v58) = v35 & 0xFF3BFBFF | v46;
    uint64_t v47 = *(void *)(a1 + 8);
    uint64_t v48 = **(void **)(a1 + 16) | 2;
    v51[0] = MEMORY[0x1E4F143A8];
    v51[1] = 0x40000000;
    v51[2] = ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlPKN17FlatbufferSymbols12InlineSymbolERNS4_6vectorIS6_IS1_ENS4_9allocatorISM_EEEER16CSCppStringCacheE_clESK_SQ_SS__block_invoke;
    v51[3] = &__block_descriptor_tmp_499;
    v51[4] = *(void *)a1;
    v51[5] = buf;
    v51[6] = this;
    FlatbufferSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v47, v48, a2 | 1, (uint64_t)v51);
    unint64_t v49 = a3[1];
    if (v49 >= a3[2])
    {
      uint64_t v50 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a3, (uint64_t)buf);
    }
    else
    {
      *(void *)(v49 + 88) = 0;
      *(void *)(v49 + 8) = 0;
      *(void *)(v49 + 16) = 0;
      *(void *)unint64_t v49 = 0;
      *(_OWORD *)(v49 + 40) = 0u;
      *(_OWORD *)(v49 + 56) = 0u;
      *(_OWORD *)(v49 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v49, (uint64_t)buf);
      uint64_t v50 = v49 + 96;
    }
    a3[1] = v50;
    unint64_t v55 = (void **)v62;
    std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v55);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
      *(_DWORD *)long long buf = 134217984;
      *(void *)unint64_t v57 = v43;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to relocate address %#llx in flatbuffer SOD", buf, 0xCu);
    }
    uint64_t v44 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v45 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
    fprintf(v44, "Failed to relocate address %#llx in flatbuffer SOD", v45);
  }
}

void sub_1B90298B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  a20 = (void **)&a28;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

uint64_t ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlPKN17FlatbufferSymbols12InlineSymbolERNS4_6vectorIS6_IS1_ENS4_9allocatorISM_EEEER16CSCppStringCacheE_clESK_SQ_SS__block_invoke(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator()(*(void *)(a1 + 32), a2);
}

void *std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B9029B50(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL are_symbols_aliases<Pointer32>(_DWORD *a1, _DWORD *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1]) {
    return 0;
  }
  unint64_t v5 = (const char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>((uint64_t)a1);
  int v6 = (const char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>((uint64_t)a2);
  return strcmp(v5, v6) != 0;
}

void ***std::back_insert_iterator<std::vector<CSUserSuppliedSymbolData>>::operator=[abi:ne180100](void ***a1, long long *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  int v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*v4) >> 4);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x555555555555555) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*v4) >> 4);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x555555555555555;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      unsigned int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSUserSuppliedSymbolData>>(v7, v16);
    }
    else {
      unsigned int v17 = 0;
    }
    uint64_t v18 = &v17[48 * v13];
    int v19 = &v17[48 * v16];
    long long v20 = *a2;
    long long v21 = a2[2];
    *((_OWORD *)v18 + 1) = a2[1];
    *((_OWORD *)v18 + 2) = v21;
    *(_OWORD *)uint64_t v18 = v20;
    uint64_t v12 = v18 + 48;
    int v23 = (char *)*v4;
    uint64_t v22 = (char *)v4[1];
    if (v22 != *v4)
    {
      do
      {
        long long v24 = *((_OWORD *)v22 - 3);
        long long v25 = *((_OWORD *)v22 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v22 - 2);
        *((_OWORD *)v18 - 1) = v25;
        *((_OWORD *)v18 - 3) = v24;
        v18 -= 48;
        v22 -= 48;
      }
      while (v22 != v23);
      uint64_t v22 = (char *)*v4;
    }
    void *v4 = v18;
    v4[1] = v12;
    _DWORD v4[2] = v19;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    long long v10 = *a2;
    long long v11 = a2[2];
    v5[1] = a2[1];
    v5[2] = v11;
    *unint64_t v5 = v10;
    uint64_t v12 = v5 + 3;
  }
  v4[1] = v12;
  return a1;
}

void *std::get_temporary_buffer[abi:ne180100]<TRawSymbol<Pointer32>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x155555555555555) {
    unint64_t v1 = 0x155555555555555;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    __n128 result = operator new(96 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(int *a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      if (*(a2 - 24) < *a1)
      {
        swap(a1, (int *)a2 - 24);
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>((unsigned int *)a1, a2);
    }
    else
    {
      uint64_t v12 = a4 >> 1;
      unint64_t v13 = &a1[24 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        v17[0] = a5;
        v17[1] = (uint64_t)&v18;
        unint64_t v18 = 0;
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>((unsigned int *)a1, (unsigned int *)&a1[24 * (a4 >> 1)], a3, a4 >> 1, a5);
        unint64_t v18 = a4 >> 1;
        unint64_t v15 = a4 - v12;
        unint64_t v16 = (_DWORD *)(a5 + 96 * v12);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>((unsigned int *)&a1[24 * (a4 >> 1)], a2, a3, v15, (uint64_t)v16);
        unint64_t v18 = a4;
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>>(a5, v16, v16, (_DWORD *)(a5 + 96 * a4), (uint64_t)a1);
        std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v17, 0);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(a1, &a1[24 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        uint64_t v14 = a4 - v12;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(v13, a2, a3, v14, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>((uint64_t)a1, v13, (int *)a2, a3, v12, v14, a5, a6);
      }
    }
  }
}

void sub_1B902A070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(unsigned int *a1, unsigned int *a2)
{
  if (a1 != a2)
  {
    v17[9] = v2;
    v17[10] = v3;
    int v6 = a1 + 24;
    if (a1 + 24 != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = a1;
      do
      {
        unsigned int v9 = *v8;
        unint64_t v8 = v6;
        if (*v6 < v9)
        {
          uint64_t v16 = 0;
          memset(v13, 0, 24);
          long long v14 = 0u;
          memset(v15, 0, 25);
          TRawSymbol<Pointer32>::operator=((uint64_t)v13, (uint64_t)v6);
          uint64_t v10 = v7;
          while (1)
          {
            TRawSymbol<Pointer32>::operator=((uint64_t)a1 + v10 + 96, (uint64_t)a1 + v10);
            if (!v10) {
              break;
            }
            unsigned int v11 = *(unsigned int *)((char *)a1 + v10 - 96);
            v10 -= 96;
            if (LODWORD(v13[0]) >= v11)
            {
              uint64_t v12 = (uint64_t)a1 + v10 + 96;
              goto LABEL_10;
            }
          }
          uint64_t v12 = (uint64_t)a1;
LABEL_10:
          TRawSymbol<Pointer32>::operator=(v12, (uint64_t)v13);
          v17[0] = (void **)v15;
          std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](v17);
        }
        int v6 = v8 + 24;
        v7 += 96;
      }
      while (v8 + 24 != a2);
    }
  }
}

void std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(unsigned int *a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    unint64_t v8 = a1;
    if (a4 == 2)
    {
      v16[1] = (uint64_t)&v17;
      uint64_t v17 = 0;
      unsigned int v10 = *(a2 - 24);
      unsigned int v9 = a2 - 24;
      unsigned int v11 = *a1;
      *(void *)(a5 + 88) = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)a5 = 0;
      *(_OWORD *)(a5 + 40) = 0u;
      *(_OWORD *)(a5 + 56) = 0u;
      *(_OWORD *)(a5 + 65) = 0u;
      BOOL v12 = v10 >= v11;
      if (v10 >= v11) {
        uint64_t v13 = (uint64_t)a1;
      }
      else {
        uint64_t v13 = (uint64_t)(a2 - 24);
      }
      if (v12) {
        unint64_t v8 = v9;
      }
      TRawSymbol<Pointer32>::operator=(a5, v13);
      ++v17;
      *(void *)(a5 + 96) = 0;
      uint64_t v14 = a5 + 96;
      *(void *)(v14 + 88) = 0;
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *(_OWORD *)(v14 + 40) = 0u;
      *(_OWORD *)(v14 + 56) = 0u;
      *(_OWORD *)(v14 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v14, (uint64_t)v8);
      v16[0] = 0;
      std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v16, 0);
    }
    else if (a4 == 1)
    {
      *(void *)(a5 + 88) = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)a5 = 0;
      *(_OWORD *)(a5 + 40) = 0u;
      *(_OWORD *)(a5 + 56) = 0u;
      *(_OWORD *)(a5 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(a5, (uint64_t)a1);
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(a1, &a1[24 * (a4 >> 1)], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(&v8[24 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5 + 96 * (a4 >> 1), a4 - (a4 >> 1));
      std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>>(v8, &v8[24 * (a4 >> 1)], &v8[24 * (a4 >> 1)], a2, a5);
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>((uint64_t)a1, a2, a5);
    }
  }
}

uint64_t std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>>(uint64_t result, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  if ((_DWORD *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      __n128 result = TRawSymbol<Pointer32>::operator=(a5, (uint64_t)a3);
      a3 += 24;
      a5 += 96;
    }
  }
  else
  {
    unsigned int v9 = (_DWORD *)result;
    while (a3 != a4)
    {
      if (*a3 >= *v9)
      {
        __n128 result = TRawSymbol<Pointer32>::operator=(a5, (uint64_t)v9);
        v9 += 24;
      }
      else
      {
        __n128 result = TRawSymbol<Pointer32>::operator=(a5, (uint64_t)a3);
        a3 += 24;
      }
      a5 += 96;
      if (v9 == a2) {
        goto LABEL_10;
      }
    }
    if (v9 != a2)
    {
      uint64_t v10 = 0;
      do
      {
        __n128 result = TRawSymbol<Pointer32>::operator=(a5 + v10 * 4, (uint64_t)&v9[v10]);
        v10 += 24;
      }
      while (&v9[v10] != a2);
    }
  }
  return result;
}

double std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(uint64_t a1, int *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v8 = a6;
    while (v8 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      unsigned int v11 = 0;
      uint64_t v12 = -a5;
      while (*a2 >= *(unsigned int *)((char *)v11 + a1))
      {
        v11 += 24;
        if (__CFADD__(v12++, 1)) {
          return result;
        }
      }
      uint64_t v14 = -v12;
      if (-v12 >= v8)
      {
        if (v12 == -1)
        {
          *(void *)&double result = swap((int *)((char *)v11 + a1), a2).n128_u64[0];
          return result;
        }
        if (v12 > 0) {
          uint64_t v14 = 1 - v12;
        }
        uint64_t v24 = v14 >> 1;
        unint64_t v18 = (int *)((char *)&v11[24 * (v14 >> 1)] + a1);
        uint64_t v17 = a2;
        if (a2 != a3)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 5);
          uint64_t v17 = a2;
          do
          {
            unint64_t v26 = v25 >> 1;
            char v27 = &v17[24 * (v25 >> 1)];
            unsigned int v29 = *v27;
            uint64_t v28 = v27 + 24;
            v25 += ~(v25 >> 1);
            if (v29 < *v18) {
              uint64_t v17 = v28;
            }
            else {
              unint64_t v25 = v26;
            }
          }
          while (v25);
        }
        uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)a2) >> 5);
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v15 = v8;
        }
        else {
          uint64_t v15 = v8 + 1;
        }
        uint64_t v16 = v15 >> 1;
        uint64_t v17 = &a2[24 * (v15 >> 1)];
        unint64_t v18 = a2;
        if ((int *)((char *)a2 - a1) != v11)
        {
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - a1 - (char *)v11) >> 5);
          unint64_t v18 = (int *)((char *)v11 + a1);
          do
          {
            unint64_t v20 = v19 >> 1;
            long long v21 = &v18[24 * (v19 >> 1)];
            unsigned int v23 = *v21;
            uint64_t v22 = v21 + 24;
            v19 += ~(v19 >> 1);
            if (*v17 < v23) {
              unint64_t v19 = v20;
            }
            else {
              unint64_t v18 = v22;
            }
          }
          while (v19);
        }
        uint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - a1 - (char *)v11) >> 5);
      }
      uint64_t v52 = (uint64_t)v11 + a1;
      if (v18 == a2)
      {
        unint64_t v34 = v17;
      }
      else if (v17 == a2)
      {
        unint64_t v34 = v18;
      }
      else
      {
        uint64_t v50 = a7;
        uint64_t v51 = a3;
        uint64_t v30 = a4;
        uint64_t v31 = a8;
        uint64_t v32 = v24;
        uint64_t v49 = v16;
        uint64_t v33 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSymbol<Pointer32> *>>(v18, a2, v17);
        uint64_t v16 = v49;
        a7 = v50;
        uint64_t v24 = v32;
        a3 = v51;
        a8 = v31;
        a4 = v30;
        unint64_t v34 = v33;
      }
      a5 = -v24 - v12;
      uint64_t v35 = v8 - v16;
      if (v24 + v16 >= v8 - (v24 + v16) - v12)
      {
        uint64_t v43 = v17;
        uint64_t v44 = a4;
        uint64_t v45 = v24;
        uint64_t v46 = v16;
        uint64_t v47 = a7;
        uint64_t v48 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(v34, v43, a3);
        a8 = v48;
        a4 = v44;
        a7 = v47;
        a2 = v18;
        uint64_t v35 = v46;
        a5 = v45;
        a3 = v34;
        a1 = v52;
      }
      else
      {
        int v36 = (char *)v11 + a1;
        int v37 = v18;
        long long v38 = a3;
        uint64_t v39 = a4;
        uint64_t v40 = a7;
        uint64_t v41 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(v36, v37, v34);
        a3 = v38;
        a8 = v41;
        a4 = v39;
        a7 = v40;
        a1 = (uint64_t)v34;
        a2 = v17;
      }
      uint64_t v8 = v35;
      if (!v35) {
        return result;
      }
    }
    std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(a1, a2, a3, a4, a5, v8, a7);
  }
  return result;
}

void std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)a1 != a2)
  {
    v17[7] = v3;
    v17[8] = v4;
    v16[0] = a3;
    v16[1] = (uint64_t)v17;
    v17[0] = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 65) = 0u;
    TRawSymbol<Pointer32>::operator=(a3, a1);
    ++v17[0];
    uint64_t v8 = (unsigned int *)(a1 + 96);
    if (v8 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = a3;
      uint64_t v11 = a3;
      do
      {
        unsigned int v12 = *v8;
        *(void *)(v11 + 96) = 0;
        v11 += 96;
        unsigned int v13 = *(_DWORD *)v10;
        *(void *)(v10 + 184) = 0;
        *(void *)(v10 + 104) = 0;
        *(void *)(v10 + 112) = 0;
        *(_OWORD *)(v10 + 136) = 0u;
        *(_OWORD *)(v10 + 152) = 0u;
        *(_OWORD *)(v10 + 161) = 0u;
        if (v12 >= v13)
        {
          TRawSymbol<Pointer32>::operator=(v11, (uint64_t)v8);
          ++v17[0];
        }
        else
        {
          TRawSymbol<Pointer32>::operator=(v11, v10);
          ++v17[0];
          uint64_t v14 = a3;
          if (v10 != a3)
          {
            uint64_t v15 = v9;
            while (1)
            {
              uint64_t v14 = a3 + v15;
              if (*v8 >= *(_DWORD *)(a3 + v15 - 96)) {
                break;
              }
              TRawSymbol<Pointer32>::operator=(v14, a3 + v15 - 96);
              v15 -= 96;
              if (!v15)
              {
                uint64_t v14 = a3;
                break;
              }
            }
          }
          TRawSymbol<Pointer32>::operator=(v14, (uint64_t)v8);
        }
        v8 += 24;
        v9 += 96;
        uint64_t v10 = v11;
      }
      while (v8 != a2);
    }
    v16[0] = 0;
    std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v16, 0);
  }
}

void std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v5 = a5;
  v14[0] = a5;
  v14[1] = (uint64_t)&v15;
  uint64_t v15 = 0;
  if (a1 == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      *(void *)(v5 + 88) = 0;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      *(void *)uint64_t v5 = 0;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 56) = 0u;
      *(_OWORD *)(v5 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v5, (uint64_t)a3);
      a3 += 24;
      v5 += 96;
      ++v15;
    }
  }
  else
  {
    uint64_t v9 = a1;
    while (a3 != a4)
    {
      unsigned int v10 = *a3;
      unsigned int v11 = *v9;
      *(void *)(v5 + 88) = 0;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      *(void *)uint64_t v5 = 0;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 56) = 0u;
      *(_OWORD *)(v5 + 65) = 0u;
      if (v10 >= v11)
      {
        TRawSymbol<Pointer32>::operator=(v5, (uint64_t)v9);
        v9 += 24;
      }
      else
      {
        TRawSymbol<Pointer32>::operator=(v5, (uint64_t)a3);
        a3 += 24;
      }
      ++v15;
      v5 += 96;
      if (v9 == a2) {
        goto LABEL_10;
      }
    }
    if (v9 != a2)
    {
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = v5 + v12 * 4;
        *(void *)(v13 + 88) = 0;
        *(void *)(v13 + 8) = 0;
        *(void *)(v13 + 16) = 0;
        *(void *)uint64_t v13 = 0;
        *(_OWORD *)(v13 + 40) = 0u;
        *(_OWORD *)(v13 + 56) = 0u;
        *(_OWORD *)(v13 + 65) = 0u;
        TRawSymbol<Pointer32>::operator=(v5 + v12 * 4, (uint64_t)&v9[v12]);
        ++v15;
        v12 += 24;
      }
      while (&v9[v12] != a2);
    }
  }
  v14[0] = 0;
  std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v14, 0);
}

void std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    if (*v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = (void **)(v2 + 56);
      do
      {
        int v6 = v5;
        std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v6);
        ++v4;
        v5 += 12;
      }
      while (v4 < *v3);
    }
  }
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v14[0] = a7;
  v14[1] = (uint64_t)&v15;
  uint64_t v15 = 0;
  uint64_t v11 = a7;
  if (a5 <= a6)
  {
    if ((_DWORD *)a1 != a2)
    {
      uint64_t v11 = a7;
      uint64_t v13 = a1;
      do
      {
        *(void *)(v11 + 88) = 0;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)uint64_t v11 = 0;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_OWORD *)(v11 + 56) = 0u;
        *(_OWORD *)(v11 + 65) = 0u;
        TRawSymbol<Pointer32>::operator=(v11, v13);
        ++v15;
        v13 += 96;
        v11 += 96;
      }
      while ((_DWORD *)v13 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>>(a7, v11, a2, a3, a1);
  }
  else
  {
    if (a2 != a3)
    {
      uint64_t v11 = a7;
      uint64_t v12 = (uint64_t)a2;
      do
      {
        *(void *)(v11 + 88) = 0;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)uint64_t v11 = 0;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_OWORD *)(v11 + 56) = 0u;
        *(_OWORD *)(v11 + 65) = 0u;
        TRawSymbol<Pointer32>::operator=(v11, v12);
        ++v15;
        v12 += 96;
        v11 += 96;
      }
      while ((_DWORD *)v12 != a3);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer32> *>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer32> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>>(v11, a7, (uint64_t)a2, a1, (uint64_t)a3);
  }
  std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v14, 0);
}

void sub_1B902AC20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>>(uint64_t result, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  if (result != a2)
  {
    uint64_t v5 = a5;
    uint64_t v9 = (_DWORD *)result;
    uint64_t v10 = a5;
    while (a3 != a4)
    {
      if (*a3 >= *v9)
      {
        double result = TRawSymbol<Pointer32>::operator=(v10, (uint64_t)v9);
        v9 += 24;
      }
      else
      {
        double result = TRawSymbol<Pointer32>::operator=(v10, (uint64_t)a3);
        a3 += 24;
      }
      v10 += 96;
      v5 += 96;
      if (v9 == (_DWORD *)a2) {
        return result;
      }
    }
    return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>,0>((uint64_t)v9, a2, v5);
  }
  return result;
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer32> *>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer32> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result != a2)
  {
    uint64_t v8 = result;
    uint64_t v9 = a5 - 96;
    while (a3 != a4)
    {
      unsigned int v10 = *(_DWORD *)(v8 - 96);
      unsigned int v11 = *(_DWORD *)(a3 - 96);
      if (v10 >= v11) {
        uint64_t v12 = v8 - 96;
      }
      else {
        uint64_t v12 = a3 - 96;
      }
      if (v10 >= v11) {
        v8 -= 96;
      }
      else {
        a3 -= 96;
      }
      double result = TRawSymbol<Pointer32>::operator=(v9, v12);
      v9 -= 96;
      if (v8 == a2) {
        return result;
      }
    }
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v9 + v13;
      v13 -= 96;
      double result = TRawSymbol<Pointer32>::operator=(v14, v8 + v13);
    }
    while (v8 + v13 != a2);
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      TRawSymbol<Pointer32>::operator=(v6, v4);
      v4 += 96;
      v6 += 96;
      v3 += 96;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

int *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSymbol<Pointer32> *>>(int *a1, int *a2, int *a3)
{
  uint64_t v4 = a2;
  swap(a1, a2);
  uint64_t v6 = a1 + 24;
  for (uint64_t i = v4 + 24; i != a3; i += 24)
  {
    if (v6 == v4) {
      uint64_t v4 = i;
    }
    swap(v6, i);
    v6 += 24;
  }
  if (v6 != v4)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v4;
    do
    {
      while (1)
      {
        swap(v8, v9);
        v8 += 24;
        v9 += 24;
        if (v9 == a3) {
          break;
        }
        if (v8 == v4) {
          uint64_t v4 = v9;
        }
      }
      uint64_t v9 = v4;
    }
    while (v8 != v4);
  }
  return v6;
}

void *std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::__emplace_unique_key_args<TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unsigned int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  long long v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *long long v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    long long v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B902B10C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::find<TRawSymbol<Pointer32> *>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  double result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

long long *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__equal_to &>(long long *a1, long long *a2)
{
  double result = a2;
  if (a1 != a2)
  {
    unint64_t v4 = a1 - 2;
    do
    {
      if (v4 + 4 == a2) {
        return a2;
      }
      int v5 = *((_DWORD *)v4 + 8);
      int v6 = *((_DWORD *)v4 + 9);
      v4 += 2;
    }
    while (v5 != *((_DWORD *)v4 + 8) || v6 != *((_DWORD *)v4 + 9));
    for (uint64_t i = v4 + 4; i != a2; i += 2)
    {
      if (*(_DWORD *)v4 != *(_DWORD *)i || *((_DWORD *)v4 + 1) != *((_DWORD *)i + 1))
      {
        long long v10 = *i;
        *(long long *)((char *)v4 + 44) = *(long long *)((char *)i + 12);
        _DWORD v4[2] = v10;
        v4 += 2;
      }
    }
    return v4 + 2;
  }
  return result;
}

void *std::__hash_table<TRawSourceInfo<Pointer32> *,std::hash<TRawSourceInfo<Pointer32> *>,std::equal_to<TRawSourceInfo<Pointer32> *>,std::allocator<TRawSourceInfo<Pointer32> *>>::__emplace_unique_key_args<TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unsigned int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  long long v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *long long v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    long long v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B902B4C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v29[4] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  char v23 = 0;
  v29[3] = 0;
  *(void *)&long long v26 = &unk_1F12C9030;
  *((void *)&v26 + 1) = v29;
  char v27 = &v26;
  std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](&v26, v29);
  std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](&v26);
  unint64_t v21 = a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = &v24;
  create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>((a3 & 0xFFFFFFFFFFFFFFF8) + 32, a1 + 32, 0, &v19);
  uint64_t v9 = a2 + 96;
  v18[0] = &v21;
  v18[1] = &v22;
  v18[2] = &v23;
  v18[3] = a2 + 96;
  v18[4] = v29;
  v18[5] = &v19;
  v18[6] = &v24;
  _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator()((uint64_t)v18, (uint64_t)&v26);
  if (v26 == 0)
  {
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 104) = 0;
  }
  else
  {
    v17[0] = 0;
    v17[1] = (void **)v17;
    uint64_t v17[2] = (void **)0x2000000000;
    v17[3] = (void **)(a2 + 208);
    uint64_t v10 = v24;
    uint64_t v11 = v25;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 1174405120;
    _OWORD v13[2] = ___Z29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRef_block_invoke;
    void v13[3] = &unk_1F12C8FF0;
    void v13[4] = v17;
    void v13[5] = v21;
    v13[6] = v9;
    __p = 0;
    float v15 = 0;
    uint64_t v16 = 0;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>(&__p, v19, (uint64_t)v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (unsigned char *)v19) >> 3));
    CSSymbolForeachSourceInfo(v10, v11, (uint64_t)v13);
    *(void *)(a5 + 96) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(a5, (uint64_t)&v26);
    *(unsigned char *)(a5 + 104) = 1;
    if (__p)
    {
      float v15 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(v17, 8);
  }
  v17[0] = (void **)&v28;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v17);
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  return std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](v29);
}

void sub_1B902B718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a20, 8);
  a20 = v32 - 144;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100]((void *)(v32 - 104));
  _Unwind_Resume(a1);
}

void *_copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
  double result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  if ((result - 1) >= 2)
  {
    if (result == 4)
    {
      unint64_t v18 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
      size_t v19 = (unsigned int *)(*(void *)(**(void **)(a1 + 8) + 8) & 0xFFFFFFFFFFFFFFFCLL);
      unint64_t v63 = 0;
      if (TMMapSymbolOwnerData::convert_archive_address_to_real_address(v18, *v19, &v63))
      {
        uint64_t v70 = 0;
        *(void *)long long buf = &unk_1F12C9110;
        unint64_t v72 = &v68;
        long long v73 = v18;
        unint64_t v74 = buf;
        std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](buf, &v68);
        std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](buf);
        unsigned int v20 = v19[2];
        if ((v20 & 0x1C000) != 0)
        {
          unint64_t v21 = (_DWORD *)*((void *)v18 + 11);
          unint64_t v22 = (unint64_t)v21
              + 32 * v21[2]
              + 24 * v21[3]
              + (24 * v21[4])
              + (unint64_t)(4 * v21[4])
              + (36 * v21[5])
              + (20 * v21[6])
              + v21[22]
              + v21[20]
              + 96;
          uint64_t v23 = v19[3];
          uint64_t v24 = (char *)(v22 + v19[4]);
          uint64_t v25 = (char *)(v22 + v23);
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          LODWORD(v23) = v19[3];
        }
        int v55 = v23 != 0;
        if (v23) {
          uint64_t v56 = v25;
        }
        else {
          uint64_t v56 = v24;
        }
        unint64_t v57 = v63;
        uint64_t v58 = v19[1];
        uint64_t v59 = intern_name_or_default(v56, (const void *)v63, *(CSCppStringCache **)(a1 + 24));
        uint64_t v60 = intern_name_or_default(v24, (const void *)v63, *(CSCppStringCache **)(a1 + 24));
        *(void *)a2 = v57;
        *(void *)(a2 + 8) = v58;
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 32) = v59;
        *(void *)(a2 + 40) = v60;
        *(void *)(a2 + 96) = 0;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 73) = 0u;
        *(_DWORD *)(a2 + 28) = (v20 & 0x7F39FBFF | (v55 << 17)) + 4195328;
        v66[0] = MEMORY[0x1E4F143A8];
        v66[1] = 1174405120;
        v66[2] = ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke;
        v66[3] = &__block_descriptor_tmp_503;
        std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__value_func[abi:ne180100]((uint64_t)v67, (uint64_t)&v68);
        uint64_t v61 = *(void *)(a1 + 24);
        v67[4] = a2;
        v67[5] = v61;
        TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v18, (uint64_t)v19, (uint64_t)v66);
        uint64_t v62 = slide_for_remote_address<Pointer64,unsigned long long>(*(void **)(a1 + 40), *(void *)a2);
        slideSymbolsByOffset<Pointer64>((void *)a2, v62);
        std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](v67);
        return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](&v68);
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Could not remap archive address to real in debug maps", buf, 2u);
      }
      double result = (void *)fwrite("Could not remap archive address to real in debug maps", 0x35uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    }
    else if (result == 5)
    {
      unint64_t v6 = (FlatbufferSymbolOwnerData *)CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
      unint64_t v74 = 0;
      *(void *)&long long v68 = buf;
      *((void *)&v68 + 1) = v6;
      unint64_t v69 = *(CSCppSymbolOwner ***)a1;
      std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},void>(buf, (uint64_t)&v68);
      unint64_t v63 = *(void *)(**(void **)(a1 + 8) + 8) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v7 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v63);
      uint64_t v8 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v6, v7);
      if (v9)
      {
        uint64_t v10 = (const void *)v8;
        if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v63)
          || (uint64_t v11 = (unsigned __int16 *)(v63 - *(int *)v63), *v11 < 9u)
          || (uint64_t v12 = v11[4]) == 0)
        {
          unint64_t v13 = 0;
        }
        else
        {
          unint64_t v13 = (char *)(v63 + v12 + *(unsigned int *)(v63 + v12) + 4);
        }
        if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v63)
          || (uint64_t v39 = (unsigned __int16 *)(v63 - *(int *)v63), *v39 < 0xBu)
          || (uint64_t v40 = v39[5]) == 0)
        {
          uint64_t v41 = 0;
        }
        else
        {
          uint64_t v41 = (char *)(v63 + v40 + *(unsigned int *)(v63 + v40) + 4);
        }
        int v42 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::flags(&v63);
        FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v63);
        uint64_t v44 = v43;
        uint64_t v45 = intern_name_or_default(v41, v10, *(CSCppStringCache **)(a1 + 24));
        uint64_t v46 = intern_name_or_default(v13, v10, *(CSCppStringCache **)(a1 + 24));
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v44;
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 32) = v45;
        *(void *)(a2 + 40) = v46;
        *(void *)(a2 + 96) = 0;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 73) = 0u;
        *(_DWORD *)(a2 + 28) = v42 & 0xFF39FBFF | 0x420400;
        uint64_t v47 = *(uint64_t **)(a1 + 48);
        uint64_t v48 = *v47;
        uint64_t v49 = v47[1];
        v64[0] = MEMORY[0x1E4F143A8];
        v64[1] = 1174405120;
        v64[2] = ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke_505;
        v64[3] = &__block_descriptor_tmp_506;
        std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__value_func[abi:ne180100]((uint64_t)v65, (uint64_t)buf);
        uint64_t v50 = *(void *)(a1 + 24);
        v65[4] = a2;
        v65[5] = v50;
        FlatbufferSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v6, v48, v49, (uint64_t)v64);
        uint64_t v51 = slide_for_remote_address<Pointer64,unsigned long long>(*(void **)(a1 + 40), *(void *)a2);
        slideSymbolsByOffset<Pointer64>((void *)a2, v51);
        std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](v65);
        return std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](buf);
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v52 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v63);
        LODWORD(v68) = 134217984;
        *(void *)((char *)&v68 + 4) = v52;
        _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to relocate address %#llx in flatbuffer SOD", (uint8_t *)&v68, 0xCu);
      }
      uint64_t v53 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v54 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v63);
      fprintf(v53, "Failed to relocate address %#llx in flatbuffer SOD", v54);
      double result = std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](buf);
    }
    *(void *)(a2 + 96) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 73) = 0u;
    *(_DWORD *)(a2 + 28) = 0;
    return result;
  }
  unint64_t v14 = *(void *)(**(void **)(a1 + 8) + 8) & 0xFFFFFFFFFFFFFFFCLL;
  float v15 = *(char **)(v14 + 48);
  if (v15)
  {
    uint64_t v16 = *(long long **)(v14 + 56);
    unint64_t v17 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 24), v15);
  }
  else
  {
    unint64_t v17 = 0;
    uint64_t v16 = 0;
  }
  *(void *)long long buf = v17;
  unint64_t v72 = v16;
  if ((atomic_load_explicit((atomic_uint *volatile)(v14 + 28), memory_order_acquire) & 0x1C000) != 0) {
    long long v26 = (char *)TRawSymbol<Pointer64>::_resolve_name(v14);
  }
  else {
    long long v26 = 0;
  }
  if ((atomic_load_explicit((atomic_uint *volatile)(v14 + 28), memory_order_acquire) & 0x1C000) != 0) {
    char v27 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>(v14);
  }
  else {
    char v27 = 0;
  }
  unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(v14 + 28), memory_order_acquire);
  unsigned int v29 = *(const void **)v14;
  uint64_t v30 = *(void *)(v14 + 8);
  uint64_t v31 = intern_name_or_default(v26, *(const void **)v14, *(CSCppStringCache **)(a1 + 24));
  uint64_t v32 = intern_name_or_default(v27, *(const void **)v14, *(CSCppStringCache **)(a1 + 24));
  if ((atomic_load_explicit((atomic_uint *volatile)(v14 + 28), memory_order_acquire) & 0x80000000) != 0)
  {
    uint64_t v33 = buf;
    if (!*(void *)(v14 + 48)) {
      uint64_t v33 = 0;
    }
  }
  else
  {
    uint64_t v33 = 0;
  }
  *(void *)a2 = v29;
  *(void *)(a2 + 8) = v30;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = v31;
  *(void *)(a2 + 40) = v32;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 73) = 0u;
  if (v33)
  {
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v33;
    int v34 = -2143157248;
  }
  else
  {
    int v34 = 4326400;
  }
  *(_DWORD *)(a2 + 28) = explicit & 0xFF39FBFF | v34;
  uint64_t v35 = *(void *)(v14 + 64);
  uint64_t v36 = *(void *)(v14 + 72);
  if (v35 != v36)
  {
    do
    {
      uint64_t v37 = *(void *)(*(void *)(a1 + 32) + 24);
      if (!v37) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v37 + 48))(v37, v35, a2 + 64, *(void *)(a1 + 24));
      v35 += 104;
    }
    while (v35 != v36);
    unsigned int v29 = *(const void **)a2;
  }
  uint64_t v38 = slide_for_remote_address<Pointer64,unsigned long long>(*(void **)(a1 + 40), (unint64_t)v29);
  return slideSymbolsByOffset<Pointer64>((void *)a2, v38);
}

void sub_1B902BF00(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100]((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

void ___Z29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRef_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = CSCppSymbolOwner::data(*(CSCppSymbolOwner **)(a1 + 40));
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  if ((v6 - 1) < 2)
  {
    unint64_t v21 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v22 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 48), *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 16));
    unint64_t v13 = *(void ***)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    unint64_t v23 = *(void *)v21;
    unint64_t v24 = slide_for_remote_address<Pointer64,unsigned long long>((void *)(a1 + 56), *(void *)v21) + v23;
    uint64_t v25 = *(void *)(v21 + 8);
    int v26 = *(_DWORD *)(v21 + 24);
    int v17 = *(_DWORD *)(v21 + 28) & 0x7FFFFFFF;
    size_t v19 = (char *)v13[1];
    char v27 = (char *)v13[2];
    if (v19 < v27)
    {
      *(void *)size_t v19 = v24;
      *((void *)v19 + 1) = v25;
      *((void *)v19 + 2) = v22;
      *((_DWORD *)v19 + 6) = v26;
      goto LABEL_8;
    }
    unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - (unsigned char *)*v13) >> 3);
    unint64_t v35 = v34 + 1;
    if (v34 + 1 <= 0x666666666666666)
    {
      unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * ((v27 - (unsigned char *)*v13) >> 3);
      if (2 * v36 > v35) {
        unint64_t v35 = 2 * v36;
      }
      if (v36 >= 0x333333333333333) {
        unint64_t v37 = 0x666666666666666;
      }
      else {
        unint64_t v37 = v35;
      }
      uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)(v13 + 2), v37);
      uint64_t v39 = &v38[40 * v34];
      uint64_t v41 = &v38[40 * v40];
      *(void *)uint64_t v39 = v24;
      *((void *)v39 + 1) = v25;
      *((void *)v39 + 2) = v22;
      *((_DWORD *)v39 + 6) = v26;
      *((_DWORD *)v39 + 7) = v17;
      *((_DWORD *)v39 + 8) = 0;
      int v42 = v39 + 40;
      uint64_t v44 = (char *)*v13;
      uint64_t v43 = (char *)v13[1];
      if (v43 == *v13) {
        goto LABEL_60;
      }
      do
      {
        long long v45 = *(_OWORD *)(v43 - 40);
        long long v46 = *(_OWORD *)(v43 - 24);
        *((_DWORD *)v39 - 2) = *((_DWORD *)v43 - 2);
        *(_OWORD *)(v39 - 24) = v46;
        *(_OWORD *)(v39 - 40) = v45;
        v39 -= 40;
        v43 -= 40;
      }
      while (v43 != v44);
      goto LABEL_59;
    }
LABEL_64:
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  if (v6 == 5)
  {
    uint64_t v28 = (char *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v29 = *(int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v30 = -v29;
    uint64_t v31 = (unsigned __int16 *)((a3 & 0xFFFFFFFFFFFFFFFCLL) - v29);
    if (*v31 >= 5u && (uint64_t v32 = v31[2]) != 0)
    {
      uint64_t v33 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 48), &v28[v32 + 4 + *(unsigned int *)&v28[v32]]);
      uint64_t v30 = -(uint64_t)*(int *)v28;
    }
    else
    {
      uint64_t v33 = "<Invalid file path>";
    }
    unint64_t v13 = *(void ***)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    uint64_t v47 = &v28[v30];
    if (*(unsigned __int16 *)v47 >= 0xDu && (uint64_t v48 = *((unsigned __int16 *)v47 + 6)) != 0) {
      unint64_t v49 = *(void *)&v28[v48];
    }
    else {
      unint64_t v49 = -1;
    }
    uint64_t v50 = slide_for_remote_address<Pointer64,unsigned long long>((void *)(a1 + 56), v49);
    uint64_t v51 = (unsigned __int16 *)&v28[-*(int *)v28];
    unsigned int v52 = *v51;
    if (v52 < 0xF)
    {
      unsigned int v53 = 0;
      int v63 = 0;
      int v64 = 0;
      if (v52 < 9) {
        goto LABEL_48;
      }
    }
    else if (v51[7])
    {
      unsigned int v53 = *(_DWORD *)&v28[v51[7]];
    }
    else
    {
      unsigned int v53 = 0;
    }
    if (v51[4]) {
      int v63 = *(_DWORD *)&v28[v51[4]];
    }
    else {
      int v63 = 0;
    }
    if (v52 >= 0xB && (uint64_t v65 = v51[5]) != 0) {
      int v64 = *(_DWORD *)&v28[v65];
    }
    else {
      int v64 = 0;
    }
LABEL_48:
    unint64_t v66 = v50 + v49;
    unint64_t v67 = (char *)v13[2];
    size_t v19 = (char *)v13[1];
    if (v19 < v67)
    {
      *(void *)size_t v19 = v66;
      *((void *)v19 + 1) = v53;
      *((void *)v19 + 2) = v33;
      *((_DWORD *)v19 + 6) = v63;
      *((_DWORD *)v19 + 7) = v64;
      *((_DWORD *)v19 + 8) = 0;
      goto LABEL_50;
    }
    unint64_t v68 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - (unsigned char *)*v13) >> 3);
    unint64_t v69 = v68 + 1;
    if (v68 + 1 <= 0x666666666666666)
    {
      unint64_t v70 = 0xCCCCCCCCCCCCCCCDLL * ((v67 - (unsigned char *)*v13) >> 3);
      if (2 * v70 > v69) {
        unint64_t v69 = 2 * v70;
      }
      if (v70 >= 0x333333333333333) {
        unint64_t v71 = 0x666666666666666;
      }
      else {
        unint64_t v71 = v69;
      }
      unint64_t v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)(v13 + 2), v71);
      uint64_t v39 = &v72[40 * v68];
      uint64_t v41 = &v72[40 * v73];
      *(void *)uint64_t v39 = v66;
      *((void *)v39 + 1) = v53;
      *((void *)v39 + 2) = v33;
      *((_DWORD *)v39 + 6) = v63;
      *((_DWORD *)v39 + 7) = v64;
      *((_DWORD *)v39 + 8) = 0;
      int v42 = v39 + 40;
      unint64_t v74 = (char *)*v13;
      uint64_t v43 = (char *)v13[1];
      if (v43 == *v13) {
        goto LABEL_60;
      }
      do
      {
        long long v75 = *(_OWORD *)(v43 - 40);
        long long v76 = *(_OWORD *)(v43 - 24);
        *((_DWORD *)v39 - 2) = *((_DWORD *)v43 - 2);
        *(_OWORD *)(v39 - 24) = v76;
        *(_OWORD *)(v39 - 40) = v75;
        v39 -= 40;
        v43 -= 40;
      }
      while (v43 != v74);
      goto LABEL_59;
    }
    goto LABEL_64;
  }
  if (v6 != 4) {
    return;
  }
  unint64_t v7 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(*(CSCppSymbolOwner **)(a1 + 40));
  uint64_t v8 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
  char v9 = (_DWORD *)*((void *)v7 + 11);
  uint64_t v10 = *(CSCppStringCache **)(a1 + 48);
  uint64_t v11 = (char *)CSCppMMapSourceInfo::path((CSCppMMapSourceInfo *)v8, (uint64_t)v9+ 32 * v9[2]+ 24 * v9[3]+ (24 * v9[4])+ (unint64_t)(4 * v9[4])+ (36 * v9[5])+ (20 * v9[6])+ v9[22]+ v9[20]+ 96);
  uint64_t v12 = CSCppStringCache::intern(v10, v11);
  unint64_t v77 = 0;
  TMMapSymbolOwnerData::convert_archive_address_to_real_address(v7, *v8, &v77);
  unint64_t v13 = *(void ***)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  unint64_t v14 = v77;
  unint64_t v15 = slide_for_remote_address<Pointer64,unsigned long long>((void *)(a1 + 56), v77) + v14;
  uint64_t v16 = v8[1];
  unsigned int v18 = v8[3];
  int v17 = v8[4];
  size_t v19 = (char *)v13[1];
  unsigned int v20 = (char *)v13[2];
  if (v19 >= v20)
  {
    unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - (unsigned char *)*v13) >> 3);
    unint64_t v55 = v54 + 1;
    if (v54 + 1 <= 0x666666666666666)
    {
      unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - (unsigned char *)*v13) >> 3);
      if (2 * v56 > v55) {
        unint64_t v55 = 2 * v56;
      }
      if (v56 >= 0x333333333333333) {
        unint64_t v57 = 0x666666666666666;
      }
      else {
        unint64_t v57 = v55;
      }
      uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)(v13 + 2), v57);
      uint64_t v39 = &v58[40 * v54];
      uint64_t v41 = &v58[40 * v59];
      *(void *)uint64_t v39 = v15;
      *((void *)v39 + 1) = v16;
      *((void *)v39 + 2) = v12;
      *((_DWORD *)v39 + 6) = v18;
      *((_DWORD *)v39 + 7) = v17;
      *((_DWORD *)v39 + 8) = 0;
      int v42 = v39 + 40;
      uint64_t v60 = (char *)*v13;
      uint64_t v43 = (char *)v13[1];
      if (v43 == *v13) {
        goto LABEL_60;
      }
      do
      {
        long long v61 = *(_OWORD *)(v43 - 40);
        long long v62 = *(_OWORD *)(v43 - 24);
        *((_DWORD *)v39 - 2) = *((_DWORD *)v43 - 2);
        *(_OWORD *)(v39 - 24) = v62;
        *(_OWORD *)(v39 - 40) = v61;
        v39 -= 40;
        v43 -= 40;
      }
      while (v43 != v60);
LABEL_59:
      uint64_t v43 = (char *)*v13;
LABEL_60:
      char *v13 = v39;
      v13[1] = v42;
      _OWORD v13[2] = v41;
      if (v43) {
        operator delete(v43);
      }
      goto LABEL_62;
    }
    goto LABEL_64;
  }
  *(void *)size_t v19 = v15;
  *((void *)v19 + 1) = v16;
  *((void *)v19 + 2) = v12;
  *((_DWORD *)v19 + 6) = v18;
LABEL_8:
  *((_DWORD *)v19 + 7) = v17;
  *((_DWORD *)v19 + 8) = 0;
LABEL_50:
  int v42 = v19 + 40;
LABEL_62:
  v13[1] = v42;
}

uint64_t slide_for_remote_address<Pointer64,unsigned long long>(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[1] - *a1;
  if (!v2) {
    return 0;
  }
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
  uint64_t v4 = (void *)*a1;
  do
  {
    unint64_t v5 = v3 >> 1;
    int v6 = &v4[3 * (v3 >> 1)];
    unint64_t v8 = *v6;
    unint64_t v7 = v6 + 3;
    v3 += ~(v3 >> 1);
    if (v8 > a2) {
      unint64_t v3 = v5;
    }
    else {
      uint64_t v4 = v7;
    }
  }
  while (v3);
  if (v4 != (void *)*a1 && (unint64_t v9 = *(v4 - 3), v9 <= a2) && a2 + 1 <= *(v4 - 2) + v9) {
    return *(v4 - 1);
  }
  else {
    return 0;
  }
}

void *__copy_helper_block_e8_56c66_ZTSNSt3__16vectorI11TRangeValueI9Pointer64yENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = (void *)(a1 + 56);
  v2[2] = 0;
  return std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>(v2, *(const void **)(a2 + 56), *(void *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
}

void __destroy_helper_block_e8_56c66_ZTSNSt3__16vectorI11TRangeValueI9Pointer64yENS_9allocatorIS3_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::~__func()
{
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F12C9030;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F12C9030;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, CSCppStringCache *a4)
{
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::target_type()
{
}

void _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, CSCppStringCache *this)
{
  unint64_t v7 = *(char **)(a2 + 48);
  if (v7)
  {
    *((void *)&v23 + 1) = *(void *)(a2 + 56);
    *(void *)&long long v23 = CSCppStringCache::intern(this, v7);
  }
  else
  {
    long long v23 = 0uLL;
  }
  if ((atomic_load_explicit((atomic_uint *volatile)(a2 + 28), memory_order_acquire) & 0x1C000) != 0) {
    unint64_t v8 = (char *)TRawSymbol<Pointer64>::_resolve_name(a2);
  }
  else {
    unint64_t v8 = 0;
  }
  if ((atomic_load_explicit((atomic_uint *volatile)(a2 + 28), memory_order_acquire) & 0x1C000) != 0) {
    unint64_t v9 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>(a2);
  }
  else {
    unint64_t v9 = 0;
  }
  unsigned int v10 = atomic_load_explicit((atomic_uint *volatile)(a2 + 28), memory_order_acquire) & 0xFF39FBFF;
  unsigned int v11 = v10 | 0x420400;
  unint64_t v13 = *(const void **)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  unint64_t v14 = intern_name_or_default(v8, *(const void **)a2, this);
  unint64_t v15 = intern_name_or_default(v9, *(const void **)a2, this);
  unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(a2 + 28), memory_order_acquire);
  uint64_t v17 = *(void *)(a2 + 48);
  v25[0] = v13;
  v25[1] = v12;
  void v25[2] = 0;
  uint64_t v26 = 0;
  char v27 = v14;
  uint64_t v28 = v15;
  uint64_t v31 = 0;
  long long v29 = 0u;
  memset(v30, 0, 25);
  if ((explicit & 0x80000000) != 0 && v17)
  {
    long long v29 = v23;
    unsigned int v11 = v10 | 0x80420400;
  }
  HIDWORD(v26) = v11;
  uint64_t v18 = *(void *)(a2 + 64);
  for (uint64_t i = *(void *)(a2 + 72); v18 != i; v18 += 104)
  {
    uint64_t v20 = *(void *)(*(void *)a1 + 24);
    if (!v20) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t, _OWORD *, CSCppStringCache *))(*(void *)v20 + 48))(v20, v18, v30, this);
  }
  unint64_t v21 = a3[1];
  if (v21 >= a3[2])
  {
    uint64_t v22 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, (uint64_t)v25);
  }
  else
  {
    *(void *)(v21 + 96) = 0;
    *(_OWORD *)unint64_t v21 = 0u;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_OWORD *)(v21 + 48) = 0u;
    *(_OWORD *)(v21 + 64) = 0u;
    *(_OWORD *)(v21 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(v21, (uint64_t)v25);
    uint64_t v22 = v21 + 104;
  }
  a3[1] = v22;
  uint64_t v32 = (void **)v30;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v32);
}

void sub_1B902C8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  *(void *)(v21 - 88) = &a21;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  _Unwind_Resume(a1);
}

uint64_t ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator()(a1 + 32, a2);
}

uint64_t __copy_helper_block_e8_32c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void *__destroy_helper_block_e8_32c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void *std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},void>(void *a1, uint64_t a2)
{
  void v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v4 = &unk_1F12C9190;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *((void *)v4 + 3) = *(void *)(a2 + 16);
  void v6[3] = v4;
  std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](v6, a1);
  std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](v6);
  return a1;
}

uint64_t ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke_505(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator()(a1 + 32, a2);
}

uint64_t std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t __copy_helper_block_e8_32c139_ZTSNSt3__18functionIFvPKN17FlatbufferSymbols12InlineSymbolERNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS8_EEEER16CSCppStringCacheEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void *__destroy_helper_block_e8_32c139_ZTSNSt3__18functionIFvPKN17FlatbufferSymbols12InlineSymbolERNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS8_EEEER16CSCppStringCacheEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__func()
{
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F12C9110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F12C9110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator()(uint64_t a1, long long **a2, uint64_t *a3, CSCppStringCache *a4)
{
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::target_type()
{
}

void std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}::operator()(void *a1, long long *a2, uint64_t *a3, CSCppStringCache *this)
{
  unint64_t v8 = (TMMapSymbolOwnerData *)a1[1];
  unint64_t v9 = (_DWORD *)*((void *)v8 + 11);
  unint64_t v10 = (unint64_t)v9
      + 32 * v9[2]
      + 24 * v9[3]
      + (24 * v9[4])
      + (unint64_t)(4 * v9[4])
      + (36 * v9[5])
      + (20 * v9[6])
      + v9[22]
      + v9[20]
      + 96;
  if ((*((_DWORD *)a2 + 2) & 0x80000000) != 0 && (uint64_t v11 = *((unsigned int *)a2 + 6), v10 + v11))
  {
    uint64_t v12 = CSCppStringCache::intern(this, (char *)(v10 + v11));
    if ((*((_DWORD *)a2 + 2) & 0x80000000) != 0) {
      uint64_t v19 = *(void *)((char *)a2 + 28);
    }
    else {
      uint64_t v19 = 0;
    }
    *((void *)&v23 + 1) = v19;
    unint64_t v8 = (TMMapSymbolOwnerData *)a1[1];
  }
  else
  {
    uint64_t v12 = 0;
    *((void *)&v23 + 1) = 0;
  }
  long long v35 = *a2;
  uint64_t v36 = *((void *)a2 + 2);
  unint64_t v34 = 0;
  if (TMMapSymbolOwnerData::convert_archive_address_to_real_address(v8, v35, &v34))
  {
    *(void *)&long long v23 = v12;
    int v13 = DWORD2(v35);
    if ((DWORD2(v35) & 0x1C000) != 0) {
      unint64_t v14 = (char *)(v10 + v36);
    }
    else {
      unint64_t v14 = 0;
    }
    if ((DWORD2(v35) & 0x1C000) != 0) {
      unint64_t v15 = (char *)(v10 + HIDWORD(v35));
    }
    else {
      unint64_t v15 = 0;
    }
    if (HIDWORD(v35)) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v14;
    }
    unsigned int v17 = DWORD2(v35) & 0xFF39FBFF | ((HIDWORD(v35) != 0) << 17);
    *(void *)long long buf = v34;
    uint64_t v26 = DWORD1(v35);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    long long v29 = intern_name_or_default(v16, (const void *)v34, this);
    uint64_t v30 = intern_name_or_default(v14, (const void *)v34, this);
    uint64_t v33 = 0;
    long long v31 = 0u;
    memset(v32, 0, 25);
    if (v13 < 0)
    {
      long long v31 = v23;
      int v18 = -2143288320;
    }
    else
    {
      int v18 = 4195328;
    }
    HIDWORD(v28) = v17 | v18;
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 0x40000000;
    v24[2] = ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlP22CSCppMMapInlinedSymbolRNS4_6vectorIS6_IS1_ENS4_9allocatorISK_EEEER16CSCppStringCacheE_clESI_SO_SQ__block_invoke;
    v24[3] = &__block_descriptor_tmp_508;
    uint64_t v20 = a1[1];
    v24[4] = *a1;
    v24[5] = buf;
    v24[6] = this;
    TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v20, (uint64_t)&v35, (uint64_t)v24);
    unint64_t v21 = a3[1];
    if (v21 >= a3[2])
    {
      uint64_t v22 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, (uint64_t)buf);
    }
    else
    {
      *(void *)(v21 + 96) = 0;
      *(_OWORD *)unint64_t v21 = 0u;
      *(_OWORD *)(v21 + 16) = 0u;
      *(_OWORD *)(v21 + 48) = 0u;
      *(_OWORD *)(v21 + 64) = 0u;
      *(_OWORD *)(v21 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v21, (uint64_t)buf);
      uint64_t v22 = v21 + 104;
    }
    a3[1] = v22;
    unint64_t v37 = (void **)v32;
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v37);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Could not remap archive address to real in debug maps inline enumeration", buf, 2u);
    }
    fwrite("Could not remap archive address to real in debug maps inline enumeration", 0x48uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  }
}

void sub_1B902CE38(_Unwind_Exception *a1)
{
  *(void *)(v2 - 104) = v1 + 64;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 104));
  _Unwind_Resume(a1);
}

uint64_t ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlP22CSCppMMapInlinedSymbolRNS4_6vectorIS6_IS1_ENS4_9allocatorISK_EEEER16CSCppStringCacheE_clESI_SO_SQ__block_invoke(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator()(*(void *)(a1 + 32), a2);
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__func()
{
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F12C9190;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F12C9190;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3, CSCppStringCache *a4)
{
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::target_type()
{
}

void std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}::operator()(uint64_t a1, unint64_t a2, uint64_t *a3, CSCppStringCache *this)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v53 = 0;
  unint64_t v54 = (int *)a2;
  unsigned int v52 = 0;
  unint64_t v8 = (unsigned __int16 *)(a2 - *(int *)a2);
  if (*v8 >= 0xDu)
  {
    uint64_t v9 = v8[6];
    if (v9)
    {
      unint64_t v10 = (int *)(a2 + v9 + *(unsigned int *)(a2 + v9));
      uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v11 >= 5u && (uint64_t v12 = v11[2]) != 0) {
        int v13 = (char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12);
      }
      else {
        int v13 = 0;
      }
      unsigned int v52 = CSCppStringCache::intern(this, v13 + 4);
      unint64_t v14 = (unsigned __int16 *)(a2 - *(int *)a2);
      unsigned int v15 = *v14;
      if (v15 < 0xD)
      {
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v16 = (int *)v14[6];
        if (v14[6]) {
          uint64_t v16 = (int *)((char *)v16 + a2 + *(unsigned int *)((char *)v16 + a2));
        }
      }
      unsigned int v17 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0) {
        int v19 = *(int *)((char *)v16 + v18);
      }
      else {
        int v19 = 0;
      }
      LODWORD(v53) = v19;
      if (v15 < 0xD)
      {
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v20 = (int *)v14[6];
        if (v20) {
          uint64_t v20 = (int *)((char *)v20 + a2 + *(unsigned int *)((char *)v20 + a2));
        }
      }
      unint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 >= 0xBu && (uint64_t v22 = v21[5]) != 0) {
        int v23 = *(int *)((char *)v20 + v22);
      }
      else {
        int v23 = 0;
      }
      HIDWORD(v53) = v23;
    }
  }
  unint64_t v24 = *(FlatbufferSymbolOwnerData **)(a1 + 8);
  unint64_t v25 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
  uint64_t v26 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v24, v25);
  if (v27)
  {
    uint64_t v28 = (const void *)v26;
    if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v54)
      || (long long v29 = (unsigned __int16 *)((char *)v54 - *v54), *v29 < 9u)
      || (uint64_t v30 = v29[4]) == 0)
    {
      long long v31 = 0;
    }
    else
    {
      long long v31 = (char *)v54 + v30 + *(unsigned int *)((char *)v54 + v30) + 4;
    }
    if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v54)
      || (uint64_t v32 = (unsigned __int16 *)((char *)v54 - *v54), *v32 < 0xBu)
      || (uint64_t v33 = v32[5]) == 0)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v34 = (char *)v54 + v33 + *(unsigned int *)((char *)v54 + v33) + 4;
    }
    int v35 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::flags(&v54);
    FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
    uint64_t v37 = v36;
    uint64_t v38 = intern_name_or_default(v34, v28, this);
    uint64_t v39 = intern_name_or_default(v31, v28, this);
    uint64_t v40 = (unsigned __int16 *)((char *)v54 - *v54);
    if (*v40 < 0xDu)
    {
      int v42 = 0;
    }
    else
    {
      BOOL v41 = v40[6] == 0;
      int v42 = &v52;
      if (v41) {
        int v42 = 0;
      }
    }
    *(void *)&long long buf = v28;
    *((void *)&buf + 1) = v37;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = v38;
    uint64_t v60 = v39;
    uint64_t v63 = 0;
    long long v61 = 0u;
    memset(v62, 0, 25);
    if (v42)
    {
      long long v61 = *(_OWORD *)v42;
      int v46 = -2143288320;
    }
    else
    {
      int v46 = 4195328;
    }
    HIDWORD(v58) = v35 & 0xFF3BFBFF | v46;
    uint64_t v47 = *(void *)(a1 + 8);
    uint64_t v48 = **(void **)(a1 + 16) | 2;
    v51[0] = MEMORY[0x1E4F143A8];
    v51[1] = 0x40000000;
    v51[2] = ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlPKN17FlatbufferSymbols12InlineSymbolERNS4_6vectorIS6_IS1_ENS4_9allocatorISM_EEEER16CSCppStringCacheE_clESK_SQ_SS__block_invoke;
    v51[3] = &__block_descriptor_tmp_517;
    v51[4] = *(void *)a1;
    v51[5] = &buf;
    v51[6] = this;
    FlatbufferSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v47, v48, a2 | 1, (uint64_t)v51);
    unint64_t v49 = a3[1];
    if (v49 >= a3[2])
    {
      uint64_t v50 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, (uint64_t)&buf);
    }
    else
    {
      *(void *)(v49 + 96) = 0;
      *(_OWORD *)unint64_t v49 = 0u;
      *(_OWORD *)(v49 + 16) = 0u;
      *(_OWORD *)(v49 + 48) = 0u;
      *(_OWORD *)(v49 + 64) = 0u;
      *(_OWORD *)(v49 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v49, (uint64_t)&buf);
      uint64_t v50 = v49 + 104;
    }
    a3[1] = v50;
    unint64_t v55 = (void **)v62;
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v55);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v43;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to relocate address %#llx in flatbuffer SOD", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v44 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v45 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
    fprintf(v44, "Failed to relocate address %#llx in flatbuffer SOD", v45);
  }
}

void sub_1B902D3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  a20 = (void **)&a29;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

uint64_t ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlPKN17FlatbufferSymbols12InlineSymbolERNS4_6vectorIS6_IS1_ENS4_9allocatorISM_EEEER16CSCppStringCacheE_clESK_SQ_SS__block_invoke(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator()(*(void *)(a1 + 32), a2);
}

void *std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B902D650(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL are_symbols_aliases<Pointer64>(void *a1, void *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1]) {
    return 0;
  }
  unint64_t v5 = (const char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>((uint64_t)a1);
  int v6 = (const char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>((uint64_t)a2);
  return strcmp(v5, v6) != 0;
}

void *std::get_temporary_buffer[abi:ne180100]<TRawSymbol<Pointer64>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x13B13B13B13B13BLL) {
    unint64_t v1 = 0x13B13B13B13B13BLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    __n128 result = operator new(104 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      if (a2[-7].n128_u64[1] < a1->n128_u64[0])
      {
        swap(a1, (__n128 *)((char *)a2 - 104));
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(a1->n128_u64, a2->n128_u64);
    }
    else
    {
      uint64_t v12 = a4 >> 1;
      int v13 = (__n128 *)((char *)a1 + 104 * (a4 >> 1));
      if ((uint64_t)a4 <= a6)
      {
        v17[0] = a5;
        v17[1] = (uint64_t)&v18;
        unint64_t v18 = 0;
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(a1->n128_u64, &a1->n128_u64[13 * (a4 >> 1)], a3, a4 >> 1, a5);
        unint64_t v18 = a4 >> 1;
        unint64_t v15 = a4 - v12;
        uint64_t v16 = (void *)(a5 + 104 * v12);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(&a1->n128_u64[13 * (a4 >> 1)], a2->n128_u64, a3, v15, (uint64_t)v16);
        unint64_t v18 = a4;
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>>(a5, v16, v16, (void *)(a5 + 104 * a4), (uint64_t)a1);
        std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v17, 0);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(a1, (char *)a1 + 104 * (a4 >> 1), a3, a4 >> 1, a5, a6);
        uint64_t v14 = a4 - v12;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(v13, a2, a3, v14, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>((uint64_t)a1, v13, a2, a3, v12, v14, a5, a6);
      }
    }
  }
}

void sub_1B902DA4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(unint64_t *a1, unint64_t *a2)
{
  if (a1 != a2)
  {
    v16[9] = v2;
    v16[10] = v3;
    int v6 = a1 + 13;
    if (a1 + 13 != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = a1;
      do
      {
        unint64_t v9 = *v8;
        unint64_t v8 = v6;
        if (*v6 < v9)
        {
          uint64_t v15 = 0;
          memset(v13, 0, 32);
          void v13[3] = 0u;
          memset(v14, 0, 25);
          TRawSymbol<Pointer64>::operator=((uint64_t)v13, (uint64_t)v6);
          uint64_t v10 = v7;
          while (1)
          {
            TRawSymbol<Pointer64>::operator=((uint64_t)a1 + v10 + 104, (uint64_t)a1 + v10);
            if (!v10) {
              break;
            }
            unint64_t v11 = *(unint64_t *)((char *)a1 + v10 - 104);
            v10 -= 104;
            if (*(void *)&v13[0] >= v11)
            {
              uint64_t v12 = (uint64_t)a1 + v10 + 104;
              goto LABEL_10;
            }
          }
          uint64_t v12 = (uint64_t)a1;
LABEL_10:
          TRawSymbol<Pointer64>::operator=(v12, (uint64_t)v13);
          v16[0] = (void **)v14;
          std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v16);
        }
        int v6 = v8 + 13;
        v7 += 104;
      }
      while (v8 + 13 != a2);
    }
  }
}

void std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    unint64_t v8 = a1;
    if (a4 == 2)
    {
      v17[1] = (uint64_t)&v18;
      uint64_t v18 = 0;
      uint64_t v10 = a2 - 13;
      unint64_t v9 = *(a2 - 13);
      unint64_t v11 = *a1;
      *(void *)(a5 + 96) = 0;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      *(_OWORD *)(a5 + 48) = 0u;
      *(_OWORD *)(a5 + 64) = 0u;
      *(_OWORD *)(a5 + 73) = 0u;
      if (v9 >= v11) {
        uint64_t v12 = (uint64_t)a1;
      }
      else {
        uint64_t v12 = (uint64_t)(a2 - 13);
      }
      if (v9 >= v11) {
        unint64_t v8 = v10;
      }
      TRawSymbol<Pointer64>::operator=(a5, v12);
      uint64_t v13 = v18 + 1;
      *(_OWORD *)(a5 + 104) = 0u;
      uint64_t v14 = a5 + 104;
      uint64_t v18 = v13;
      *(void *)(v14 + 96) = 0;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v14, (uint64_t)v8);
      v17[0] = 0;
      std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v17, 0);
    }
    else if (a4 == 1)
    {
      *(void *)(a5 + 96) = 0;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      *(_OWORD *)(a5 + 48) = 0u;
      *(_OWORD *)(a5 + 64) = 0u;
      *(_OWORD *)(a5 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(a5, (uint64_t)a1);
    }
    else if ((uint64_t)a4 > 8)
    {
      uint64_t v16 = 13 * (a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(a1, &a1[v16], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(&v8[v16], a2, a3, a4 - (a4 >> 1), a5 + v16 * 8, a4 - (a4 >> 1));
      std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>>(v8, &v8[v16], &v8[v16], a2, a5);
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>((uint64_t)a1, a2, a5);
    }
  }
}

uint64_t std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>>(uint64_t result, void *a2, void *a3, void *a4, uint64_t a5)
{
  if ((void *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      __n128 result = TRawSymbol<Pointer64>::operator=(a5, (uint64_t)a3);
      a3 += 13;
      a5 += 104;
    }
  }
  else
  {
    unint64_t v9 = (void *)result;
    while (a3 != a4)
    {
      if (*a3 >= *v9)
      {
        __n128 result = TRawSymbol<Pointer64>::operator=(a5, (uint64_t)v9);
        v9 += 13;
      }
      else
      {
        __n128 result = TRawSymbol<Pointer64>::operator=(a5, (uint64_t)a3);
        a3 += 13;
      }
      a5 += 104;
      if (v9 == a2) {
        goto LABEL_10;
      }
    }
    if (v9 != a2)
    {
      uint64_t v10 = 0;
      do
      {
        __n128 result = TRawSymbol<Pointer64>::operator=(a5 + v10 * 8, (uint64_t)&v9[v10]);
        v10 += 13;
      }
      while (&v9[v10] != a2);
    }
  }
  return result;
}

double std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(uint64_t a1, __n128 *a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v8 = a6;
    while (v8 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      unint64_t v11 = 0;
      uint64_t v12 = -a5;
      while (a2->n128_u64[0] >= *(unint64_t *)((char *)v11->n128_u64 + a1))
      {
        unint64_t v11 = (__n128 *)((char *)v11 + 104);
        if (__CFADD__(v12++, 1)) {
          return result;
        }
      }
      uint64_t v14 = -v12;
      if (-v12 >= v8)
      {
        if (v12 == -1)
        {
          *(void *)&double result = swap((__n128 *)((char *)v11 + a1), a2).n128_u64[0];
          return result;
        }
        if (v12 > 0) {
          uint64_t v14 = 1 - v12;
        }
        uint64_t v24 = v14 >> 1;
        uint64_t v18 = (__n128 *)((char *)v11 + 104 * (v14 >> 1) + a1);
        unsigned int v17 = a2;
        if (a2 != a3)
        {
          unint64_t v25 = 0x4EC4EC4EC4EC4EC5 * (((char *)a3 - (char *)a2) >> 3);
          unsigned int v17 = a2;
          do
          {
            unint64_t v26 = v25 >> 1;
            char v27 = &v17->n128_u64[13 * (v25 >> 1)];
            unint64_t v29 = *v27;
            uint64_t v28 = (__n128 *)(v27 + 13);
            v25 += ~(v25 >> 1);
            if (v29 < v18->n128_u64[0]) {
              unsigned int v17 = v28;
            }
            else {
              unint64_t v25 = v26;
            }
          }
          while (v25);
        }
        uint64_t v16 = 0x4EC4EC4EC4EC4EC5 * (((char *)v17 - (char *)a2) >> 3);
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v15 = v8;
        }
        else {
          uint64_t v15 = v8 + 1;
        }
        uint64_t v16 = v15 >> 1;
        unsigned int v17 = (__n128 *)((char *)a2 + 104 * (v15 >> 1));
        uint64_t v18 = a2;
        if ((__n128 *)((char *)a2 - a1) != v11)
        {
          unint64_t v19 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - a1 - (char *)v11) >> 3);
          uint64_t v18 = (__n128 *)((char *)v11 + a1);
          do
          {
            unint64_t v20 = v19 >> 1;
            unint64_t v21 = &v18->n128_u64[13 * (v19 >> 1)];
            unint64_t v23 = *v21;
            uint64_t v22 = (__n128 *)(v21 + 13);
            v19 += ~(v19 >> 1);
            if (v17->n128_u64[0] < v23) {
              unint64_t v19 = v20;
            }
            else {
              uint64_t v18 = v22;
            }
          }
          while (v19);
        }
        uint64_t v24 = 0x4EC4EC4EC4EC4EC5 * (((char *)v18 - a1 - (char *)v11) >> 3);
      }
      uint64_t v52 = (uint64_t)v11 + a1;
      if (v18 == a2)
      {
        unint64_t v34 = v17;
      }
      else if (v17 == a2)
      {
        unint64_t v34 = v18;
      }
      else
      {
        uint64_t v50 = a7;
        uint64_t v51 = a3;
        uint64_t v30 = a4;
        uint64_t v31 = a8;
        uint64_t v32 = v24;
        uint64_t v49 = v16;
        uint64_t v33 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSymbol<Pointer64> *>>(v18, a2, v17);
        uint64_t v16 = v49;
        a7 = v50;
        uint64_t v24 = v32;
        a3 = v51;
        a8 = v31;
        a4 = v30;
        unint64_t v34 = v33;
      }
      a5 = -v24 - v12;
      uint64_t v35 = v8 - v16;
      if (v24 + v16 >= v8 - (v24 + v16) - v12)
      {
        uint64_t v43 = v17;
        uint64_t v44 = a4;
        uint64_t v45 = v24;
        uint64_t v46 = v16;
        uint64_t v47 = a7;
        uint64_t v48 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(v34, v43, a3);
        a8 = v48;
        a4 = v44;
        a7 = v47;
        a2 = v18;
        uint64_t v35 = v46;
        a5 = v45;
        a3 = v34;
        a1 = v52;
      }
      else
      {
        uint64_t v36 = (char *)v11 + a1;
        uint64_t v37 = v18;
        uint64_t v38 = a3;
        uint64_t v39 = a4;
        uint64_t v40 = a7;
        uint64_t v41 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(v36, v37, v34);
        a3 = v38;
        a8 = v41;
        a4 = v39;
        a7 = v40;
        a1 = (uint64_t)v34;
        a2 = v17;
      }
      uint64_t v8 = v35;
      if (!v35) {
        return result;
      }
    }
    std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(a1, a2, a3, a4, a5, v8, a7);
  }
  return result;
}

void std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if ((unint64_t *)a1 != a2)
  {
    v17[7] = v3;
    v17[8] = v4;
    v16[0] = a3;
    v16[1] = (uint64_t)v17;
    v17[0] = 0;
    *(void *)(a3 + 96) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(a3, a1);
    ++v17[0];
    uint64_t v8 = (unint64_t *)(a1 + 104);
    if (v8 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = a3;
      uint64_t v11 = a3;
      do
      {
        unint64_t v12 = *v8;
        *(_OWORD *)(v11 + 104) = 0u;
        v11 += 104;
        unint64_t v13 = *(void *)v10;
        *(void *)(v10 + 200) = 0;
        *(_OWORD *)(v10 + 120) = 0u;
        *(_OWORD *)(v10 + 152) = 0u;
        *(_OWORD *)(v10 + 168) = 0u;
        *(_OWORD *)(v10 + 177) = 0u;
        if (v12 >= v13)
        {
          TRawSymbol<Pointer64>::operator=(v11, (uint64_t)v8);
          ++v17[0];
        }
        else
        {
          TRawSymbol<Pointer64>::operator=(v11, v10);
          ++v17[0];
          uint64_t v14 = a3;
          if (v10 != a3)
          {
            uint64_t v15 = v9;
            while (1)
            {
              uint64_t v14 = a3 + v15;
              if (*v8 >= *(void *)(a3 + v15 - 104)) {
                break;
              }
              TRawSymbol<Pointer64>::operator=(v14, a3 + v15 - 104);
              v15 -= 104;
              if (!v15)
              {
                uint64_t v14 = a3;
                break;
              }
            }
          }
          TRawSymbol<Pointer64>::operator=(v14, (uint64_t)v8);
        }
        v8 += 13;
        v9 += 104;
        uint64_t v10 = v11;
      }
      while (v8 != a2);
    }
    v16[0] = 0;
    std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v16, 0);
  }
}

void std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v5 = a5;
  v14[0] = a5;
  v14[1] = (uint64_t)&v15;
  uint64_t v15 = 0;
  if (a1 == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      *(void *)(v5 + 96) = 0;
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v5, (uint64_t)a3);
      a3 += 13;
      v5 += 104;
      ++v15;
    }
  }
  else
  {
    uint64_t v9 = a1;
    while (a3 != a4)
    {
      unint64_t v10 = *a3;
      unint64_t v11 = *v9;
      *(void *)(v5 + 96) = 0;
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 73) = 0u;
      if (v10 >= v11)
      {
        TRawSymbol<Pointer64>::operator=(v5, (uint64_t)v9);
        v9 += 13;
      }
      else
      {
        TRawSymbol<Pointer64>::operator=(v5, (uint64_t)a3);
        a3 += 13;
      }
      ++v15;
      v5 += 104;
      if (v9 == a2) {
        goto LABEL_10;
      }
    }
    if (v9 != a2)
    {
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = v5 + v12 * 8;
        *(void *)(v13 + 96) = 0;
        *(_OWORD *)uint64_t v13 = 0u;
        *(_OWORD *)(v13 + 16) = 0u;
        *(_OWORD *)(v13 + 48) = 0u;
        *(_OWORD *)(v13 + 64) = 0u;
        *(_OWORD *)(v13 + 73) = 0u;
        TRawSymbol<Pointer64>::operator=(v5 + v12 * 8, (uint64_t)&v9[v12]);
        ++v15;
        v12 += 13;
      }
      while (&v9[v12] != a2);
    }
  }
  v14[0] = 0;
  std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v14, 0);
}

void std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    if (*v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = (void **)(v2 + 64);
      do
      {
        int v6 = v5;
        std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v6);
        ++v4;
        v5 += 13;
      }
      while (v4 < *v3);
    }
  }
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v14[0] = a7;
  v14[1] = (uint64_t)&v15;
  uint64_t v15 = 0;
  uint64_t v11 = a7;
  if (a5 <= a6)
  {
    if ((void *)a1 != a2)
    {
      uint64_t v11 = a7;
      uint64_t v13 = a1;
      do
      {
        *(void *)(v11 + 96) = 0;
        *(_OWORD *)uint64_t v11 = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 73) = 0u;
        TRawSymbol<Pointer64>::operator=(v11, v13);
        ++v15;
        v13 += 104;
        v11 += 104;
      }
      while ((void *)v13 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>>(a7, v11, a2, a3, a1);
  }
  else
  {
    if (a2 != a3)
    {
      uint64_t v11 = a7;
      uint64_t v12 = (uint64_t)a2;
      do
      {
        *(void *)(v11 + 96) = 0;
        *(_OWORD *)uint64_t v11 = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 73) = 0u;
        TRawSymbol<Pointer64>::operator=(v11, v12);
        ++v15;
        v12 += 104;
        v11 += 104;
      }
      while ((void *)v12 != a3);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer64> *>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer64> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>>(v11, a7, (uint64_t)a2, a1, (uint64_t)a3);
  }
  std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v14, 0);
}

void sub_1B902E5CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>>(uint64_t result, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  if (result != a2)
  {
    uint64_t v5 = a5;
    uint64_t v9 = (void *)result;
    uint64_t v10 = a5;
    while (a3 != a4)
    {
      if (*a3 >= *v9)
      {
        double result = TRawSymbol<Pointer64>::operator=(v10, (uint64_t)v9);
        v9 += 13;
      }
      else
      {
        double result = TRawSymbol<Pointer64>::operator=(v10, (uint64_t)a3);
        a3 += 13;
      }
      v10 += 104;
      v5 += 104;
      if (v9 == (void *)a2) {
        return result;
      }
    }
    return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>,0>((uint64_t)v9, a2, v5);
  }
  return result;
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer64> *>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer64> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result != a2)
  {
    uint64_t v8 = result;
    uint64_t v9 = a5 - 104;
    while (a3 != a4)
    {
      unint64_t v10 = *(void *)(v8 - 104);
      unint64_t v11 = *(void *)(a3 - 104);
      if (v10 >= v11) {
        uint64_t v12 = v8 - 104;
      }
      else {
        uint64_t v12 = a3 - 104;
      }
      if (v10 >= v11) {
        v8 -= 104;
      }
      else {
        a3 -= 104;
      }
      double result = TRawSymbol<Pointer64>::operator=(v9, v12);
      v9 -= 104;
      if (v8 == a2) {
        return result;
      }
    }
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v9 + v13;
      v13 -= 104;
      double result = TRawSymbol<Pointer64>::operator=(v14, v8 + v13);
    }
    while (v8 + v13 != a2);
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      TRawSymbol<Pointer64>::operator=(v6, v4);
      v4 += 104;
      v6 += 104;
      v3 += 104;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

__n128 *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSymbol<Pointer64> *>>(__n128 *a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = a2;
  swap(a1, a2);
  uint64_t v6 = (__n128 *)((char *)a1 + 104);
  for (uint64_t i = (__n128 *)((char *)v4 + 104); i != a3; uint64_t i = (__n128 *)((char *)i + 104))
  {
    if (v6 == v4) {
      uint64_t v4 = i;
    }
    swap(v6, i);
    uint64_t v6 = (__n128 *)((char *)v6 + 104);
  }
  if (v6 != v4)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v4;
    do
    {
      while (1)
      {
        swap(v8, v9);
        uint64_t v8 = (__n128 *)((char *)v8 + 104);
        uint64_t v9 = (__n128 *)((char *)v9 + 104);
        if (v9 == a3) {
          break;
        }
        if (v8 == v4) {
          uint64_t v4 = v9;
        }
      }
      uint64_t v9 = v4;
    }
    while (v8 != v4);
  }
  return v6;
}

void *std::__hash_table<TRawSymbol<Pointer64> *,std::hash<TRawSymbol<Pointer64> *>,std::equal_to<TRawSymbol<Pointer64> *>,std::allocator<TRawSymbol<Pointer64> *>>::__emplace_unique_key_args<TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *unint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B902EAB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

long long *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__equal_to &>(long long *a1, long long *a2)
{
  double result = a2;
  if (a1 != a2)
  {
    uint64_t v4 = (uint64_t)a1 - 40;
    do
    {
      if ((long long *)(v4 + 80) == a2) {
        return a2;
      }
      uint64_t v5 = *(void *)(v4 + 40);
      uint64_t v6 = *(void *)(v4 + 48);
      v4 += 40;
    }
    while (v5 != *(void *)(v4 + 40) || v6 != *(void *)(v4 + 48));
    for (uint64_t i = (long long *)(v4 + 80); i != a2; uint64_t i = (long long *)((char *)i + 40))
    {
      if (*(void *)v4 != *(void *)i || *(void *)(v4 + 8) != *((void *)i + 1))
      {
        long long v10 = *i;
        long long v11 = i[1];
        *(_DWORD *)(v4 + 72) = *((_DWORD *)i + 8);
        *(_OWORD *)(v4 + 56) = v11;
        *(_OWORD *)(v4 + 40) = v10;
        v4 += 40;
      }
    }
    return (long long *)(v4 + 40);
  }
  return result;
}

void *std::__hash_table<TRawSourceInfo<Pointer64> *,std::hash<TRawSourceInfo<Pointer64> *>,std::equal_to<TRawSourceInfo<Pointer64> *>,std::allocator<TRawSourceInfo<Pointer64> *>>::__emplace_unique_key_args<TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    long long v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *unint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B902ED90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::find<CSCppSymbolOwner>(void *a1, uint64_t a2)
{
  unint64_t v4 = CSCppSymbolOwnerHashFunctor::operator()((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint8x8_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  long long v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        if (CSCppSymbolOwnerEqualsFunctor::operator()(v12, (uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      long long v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t CSCppSymbolOwnerHashFunctor::operator()(uint64_t a1, uint64_t a2)
{
  if (!UUID::is_null((UUID *)(a2 + 16))) {
    return **(void **)(a2 + 32) + (*(void *)(a2 + 24) ^ *(void *)(a2 + 16));
  }
  unint64_t v3 = *(void *)(a2 + 32);
  unint64_t v4 = *(void *)(a2 + 40);
  if (v3 >= v4)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = 0;
    uint8x8_t v7 = *(uint64_t **)(a2 + 32);
    do
    {
      uint64_t v8 = *v7;
      v7 += 4;
      uint64_t v9 = v8 << v6;
      if (v6 <= 15) {
        ++v6;
      }
      else {
        int v6 = 0;
      }
      uint64_t v10 = v9 * v5;
      v5 += v9;
      if (v6) {
        uint64_t v5 = v10;
      }
    }
    while ((unint64_t)v7 < v4);
  }
  return (v5 + ((uint64_t)(v4 - v3) >> 5)) ^ ((unint64_t)*(unsigned int *)(a2 + 104) << 32);
}

BOOL CSCppSymbolOwnerEqualsFunctor::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a3 + 108);
  if ((*(_DWORD *)(a2 + 108) & 0x80000000) != 0)
  {
    if ((v5 & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v7 = *(void *)(a2 + 144);
    if (!v7) {
      return 0;
    }
    return v7 == *(void *)(a3 + 144);
  }
  else
  {
    if (v5 < 0) {
      return 0;
    }
    int v6 = (void *)(a2 + 16);
    if (UUID::is_null((UUID *)(a2 + 16)))
    {
      if (*(_DWORD *)(a2 + 104) != *(_DWORD *)(a3 + 104)
        || strcmp(*(const char **)(a2 + 120), *(const char **)(a3 + 120))
        || *(void *)(a2 + 112) != *(void *)(a3 + 112))
      {
        return 0;
      }
    }
    else if (*v6 != *(void *)(a3 + 16) || *(void *)(a2 + 24) != *(void *)(a3 + 24))
    {
      return 0;
    }
    uint64_t v10 = *(char **)(a2 + 32);
    long long v11 = *(char **)(a2 + 40);
    uint64_t v12 = *(_OWORD **)(a3 + 32);
    if (v11 - v10 != *(void *)(a3 + 40) - (void)v12) {
      return 0;
    }
    if (v10 != v11)
    {
      while (1)
      {
        long long v13 = *((_OWORD *)v10 + 1);
        v17[0] = *(_OWORD *)v10;
        v17[1] = v13;
        long long v14 = v12[1];
        v16[0] = *v12;
        v16[1] = v14;
        if (v17[0] != v16[0]
          && (!CSCppSegmentRange::is_skippable((CSCppSegmentRange *)v17)
           || !CSCppSegmentRange::is_skippable((CSCppSegmentRange *)v16)))
        {
          break;
        }
        v10 += 32;
        v12 += 2;
        if (v10 == v11)
        {
          uint64_t v10 = v11;
          break;
        }
      }
      if (v10 != *(char **)(a2 + 40)) {
        return 0;
      }
    }
    return v12 == *(_OWORD **)(a3 + 40);
  }
}

void *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__emplace_unique_key_args<CSCppSymbolOwner,CSCppSymbolOwner const&,CSCppSymbolOwnerData *&>(uint64_t a1, uint64_t a2, const CSCppSymbolOwner *a3, void *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = CSCppSymbolOwnerHashFunctor::operator()(a1 + 24, a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    float v15 = *(void **)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      BOOL v16 = (void *)*v15;
      if (*v15)
      {
        do
        {
          unint64_t v17 = v16[1];
          if (v17 == v11)
          {
            if (CSCppSymbolOwnerEqualsFunctor::operator()(a1 + 32, (uint64_t)(v16 + 2), a2)) {
              return v16;
            }
          }
          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12) {
                v17 %= v12;
              }
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v4) {
              break;
            }
          }
          BOOL v16 = (void *)*v16;
        }
        while (v16);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__construct_node_hash<CSCppSymbolOwner const&,CSCppSymbolOwnerData *&>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *uint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  BOOL v16 = (void *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100](v27, 0);
  return v16;
}

void sub_1B902F310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

CSCppSymbolOwner *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__construct_node_hash<CSCppSymbolOwner const&,CSCppSymbolOwnerData *&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const CSCppSymbolOwner *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0xE8uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  double result = CSCppSymbolOwner::CSCppSymbolOwner((CSCppSymbolOwner *)(v10 + 2), a3);
  v10[28] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_1B902F39C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__emplace_unique_key_args<CSCppSymbolOwner,std::piecewise_construct_t const&,std::tuple<CSCppSymbolOwner const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, const CSCppSymbolOwner **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = CSCppSymbolOwnerHashFunctor::operator()(a1 + 24, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      float v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (CSCppSymbolOwnerEqualsFunctor::operator()(a1 + 32, (uint64_t)(v15 + 2), a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          float v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<CSCppSymbolOwner const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  float v15 = (void *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100](v26, 0);
  return v15;
}

void sub_1B902F638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

CSCppSymbolOwner *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<CSCppSymbolOwner const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const CSCppSymbolOwner **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0xE8uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  double result = CSCppSymbolOwner::CSCppSymbolOwner((CSCppSymbolOwner *)(v8 + 2), *a3);
  v8[28] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B902F6B8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void CSCppDsymData::CSCppDsymData(CSCppDsymData *this, const CSCppDsymData *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this, *(long long **)a2, *((long long **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 1, *((long long **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  unint64_t v4 = (std::string *)((char *)this + 48);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 3);
    *((void *)this + 8) = *((void *)a2 + 8);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  memcpy((char *)this + 72, (char *)a2 + 72, 0x400uLL);
}

void sub_1B902F790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<CSCppFlatbufferRelocation>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B902F824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  unint64_t v11 = this;
  uint8x8_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        unint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      int v6 = (long long *)((char *)v6 + 24);
      uint8x8_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B902F8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__CFString *CSSymbolCopyDescriptionWithIndent(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t i = (__CFString *)(a1 & 7 | (8 * (a2 & 3)));
  if (i)
  {
    int v6 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v7 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
    switch((*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7))
    {
      case 1u:
        uint64_t v8 = TRawSymbol<Pointer32>::description((int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
        break;
      case 2u:
        uint64_t v8 = TRawSymbol<Pointer64>::description(a2 & 0xFFFFFFFFFFFFFFFCLL);
        break;
      case 4u:
        uint64_t v9 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(v6);
        uint64_t v8 = CSCppMMapSymbol::description<TMMapSymbolOwnerData>((unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL), v9);
        break;
      case 5u:
        unint64_t v16 = a2 & 0xFFFFFFFFFFFFFFFCLL;
        if (i == (__CFString *)10) {
          uint64_t v8 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::description(&v16);
        }
        else {
          uint64_t v8 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::description(&v16);
        }
        break;
      default:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
        uint64_t v12 = CSCppSymbolOwner::data(v6);
        (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v17, &v15);
        Exception::Exception(v14, &v15);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v14);
    }
    char v10 = v8;
    for (uint64_t i = CFStringCreateMutable(0, 0); a3; --a3)
      CFStringAppendCString(i, "\t", 0x8000100u);
    CFStringAppendFormat(i, 0, @"<CSSymbol: %p> %s", a2 & 0xFFFFFFFFFFFFFFFCLL, v10);
    free(v10);
  }
  return i;
}

void sub_1B902FB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

char *TRawSymbol<Pointer32>::description(int *a1)
{
  TRawSymbol<Pointer32>::is_objc_method((uint64_t)a1);
  int explicit = atomic_load_explicit(a1 + 5, memory_order_acquire);
  unint64_t v3 = (const char *)TRawSymbol<Pointer32>::_resolve_name((uint64_t)a1);

  return TRawSymbol<Pointer32>::description(a1, explicit, v3);
}

char *TRawSymbol<Pointer32>::description(int *a1, int a2, const char *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, a2);
  if (v5 >= 2) {
    __dst[v5 - 2] = 0;
  }
  int v6 = *a1;
  int v7 = a1[1] + *a1;
  uint64_t v9 = 0;
  asprintf(&v9, "[0x%08x -> 0x%08x) %s [%s]", v6, v7, a3, __dst);
  return v9;
}

char *TRawSymbol<Pointer64>::description(uint64_t a1)
{
  TRawSymbol<Pointer64>::is_objc_method(a1);
  int explicit = atomic_load_explicit((atomic_uint *volatile)(a1 + 28), memory_order_acquire);
  unint64_t v3 = (const char *)TRawSymbol<Pointer64>::_resolve_name(a1);

  return TRawSymbol<Pointer64>::description((uint64_t *)a1, explicit, v3);
}

char *TRawSymbol<Pointer64>::description(uint64_t *a1, int a2, const char *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, a2);
  if (v5 >= 2) {
    __dst[v5 - 2] = 0;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1] + *a1;
  uint64_t v9 = 0;
  asprintf(&v9, "[0x%016llx -> 0x%016llx) %s [%s]", v6, v7, a3, __dst);
  return v9;
}

char *CSCppMMapSymbol::description<TMMapSymbolOwnerData>(unsigned int *a1, TMMapSymbolOwnerData *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, a1[2]);
  if (v4 >= 2) {
    __dst[v4 - 2] = 0;
  }
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v5 = (_DWORD *)*((void *)a2 + 11);
  unint64_t v6 = (unint64_t)v5
     + 32 * v5[2]
     + 24 * v5[3]
     + (24 * v5[4])
     + (unint64_t)(4 * v5[4])
     + (36 * v5[5])
     + (20 * v5[6])
     + v5[22]
     + v5[20]
     + a1[3]
     + 96;
  int v7 = (*(uint64_t (**)(TMMapSymbolOwnerData *, unint64_t))(*(void *)a2 + 72))(a2, v6);
  if (!TMMapSymbolOwnerData::convert_archive_address_to_real_address(a2, *a1, &v10)) {
    return 0;
  }
  uint64_t v8 = "<Invalid symbol name>";
  if (v7) {
    uint64_t v8 = (const char *)v6;
  }
  asprintf(&v11, "[0x%016llx -> 0x%016llx) %s [%s]", v10, v10 + a1[1], v8, __dst);
  return v11;
}

char *FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::description(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v2 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::flags(a1);
  unint64_t v3 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, v2);
  if (v3 >= 2) {
    __dst[v3 - 2] = 0;
  }
  uint64_t v12 = 0;
  unint64_t v4 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  unsigned int v5 = *v4;
  if (v5 < 0xB)
  {
    if (v5 < 9) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  unsigned int v6 = v4[5];
  if (!v4[5])
  {
LABEL_7:
    unsigned int v6 = v4[4];
    if (v4[4]) {
      goto LABEL_8;
    }
LABEL_9:
    int v7 = 0;
    goto LABEL_10;
  }
LABEL_8:
  int v7 = (const char *)(*a1 + v6 + *(unsigned int *)(*a1 + v6) + 4);
LABEL_10:
  uint64_t v8 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(a1);
  uint64_t v9 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(a1);
  asprintf(&v12, "[0x%016llx -> 0x%016llx) %s [%s]", v8, v10 + v9, v7, __dst);
  return v12;
}

char *FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::description(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v2 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::flags(a1);
  unint64_t v3 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, v2);
  if (v3 >= 2) {
    __dst[v3 - 2] = 0;
  }
  uint64_t v12 = 0;
  unint64_t v4 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  unsigned int v5 = *v4;
  if (v5 < 0xB)
  {
    if (v5 < 9) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  unsigned int v6 = v4[5];
  if (!v4[5])
  {
LABEL_7:
    unsigned int v6 = v4[4];
    if (v4[4]) {
      goto LABEL_8;
    }
LABEL_9:
    int v7 = 0;
    goto LABEL_10;
  }
LABEL_8:
  int v7 = (const char *)(*a1 + v6 + *(unsigned int *)(*a1 + v6) + 4);
LABEL_10:
  uint64_t v8 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(a1);
  uint64_t v9 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(a1);
  asprintf(&v12, "[0x%016llx -> 0x%016llx) %s [%s]", v8, v10 + v9, v7, __dst);
  return v12;
}

uint64_t CSSetDebugLoggingLevel(uint64_t result)
{
  CSDebugLoggingLevel = result;
  return result;
}

uint64_t CSGetDebugLoggingLevel()
{
  return CSDebugLoggingLevel;
}

void CSSymbolicatorPrintTimeline(char a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1 & 7 | (8 * (a2 & 3)))
  {
    CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), &v13);
    unint64_t v3 = v13;
    for (uint64_t i = v14; v3 != i; v3 += 2)
    {
      uint64_t v4 = *v3;
      unsigned int v5 = (std::__shared_weak_count *)v3[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v6 = printf("SYMBOL OWNER: %s\n", *(const char **)(v4 + 136));
      MEMORY[0x1F4188790](v6);
      CFUUIDBytesToString((const CFUUIDBytes *)(v4 + 16), v9, 0x28uLL);
      printf("\tUUID: %s\n", v9);
      printf("\tPath: %s\n", *(const char **)(v4 + 120));
      _printTimestamp("Load Timestamp", *(void *)(v4 + 88));
      _printTimestamp("Unload Timestamp", *(void *)(v4 + 96));
      puts("\tSegments:");
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(&v10, *(const void **)(v4 + 32), *(void *)(v4 + 40), (uint64_t)(*(void *)(v4 + 40) - *(void *)(v4 + 32)) >> 5);
      uint64_t v8 = v10;
      int v7 = v11;
      if (v10 != v11)
      {
        do
        {
          printf("\t\t%s 0x%llx - 0x%llx\n", (const char *)v8[2], *v8, (char *)*v8 + (void)v8[1]);
          v8 += 4;
        }
        while (v8 != v7);
        uint64_t v8 = v10;
      }
      if (v8)
      {
        uint64_t v11 = v8;
        operator delete(v8);
      }
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
    uint64_t v10 = (void **)&v13;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v10);
  }
}

void sub_1B9030338(_Unwind_Exception *exception_object)
{
}

uint64_t _printTimestamp(const char *a1, int64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (!a2 || a2 == 0x7FFFFFFFFFFFFFFFLL) {
      return printf("\t%s: %s (%llu)\n");
    }
    return printf("\t%s: %llu\n");
  }
  if (a2 > (uint64_t)0x8000000000000001) {
    return printf("\t%s: %llu\n");
  }
  return printf("\t%s: %s (%llu)\n");
}

void CSSymbolicatorCreateWithTaskPidFlagsAndNotification()
{
}

void sub_1B90304C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CSSymbolicatorCreateWithTaskPidFlagsAndNotification_cold_1(a10);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B90304A4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorCreateWithCSCppMachTaskFlagsAndNotification(CSCppMachTask **a1, int a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CSCppMachTask::symbol_owners(*a1, a2, &v11);
  unsigned int v5 = v11;
  uint64_t v7 = *v11;
  uint64_t v6 = v11[1];
  if (v6 != *v11)
  {
    uint64_t v8 = *a1;
    *a1 = 0;
    uint64_t v10 = v8;
    a3 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(v5);
    if (v10) {
      (*(void (**)(CSCppMachTask *))(*(void *)v10 + 8))(v10);
    }
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v6 == v7) {
    return 0;
  }
  return a3;
}

#error "1B9030738: call analysis failed (funcsize=66)"

void CSSymbolicatorCreateWithTaskFlagsAndNotification()
{
}

void sub_1B9030800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CSSymbolicatorCreateWithTaskPidFlagsAndNotification_cold_1(a10);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B90307E4);
  }
  _Unwind_Resume(exception_object);
}

void CSSymbolicatorCreateWithPidFlagsAndNotification()
{
}

void sub_1B9030918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CSSymbolicatorCreateWithTaskPidFlagsAndNotification_cold_1(a10);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B90308FCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorSubscribeToTaskMainNotification(uint64_t result, uint64_t a2)
{
  if (result & 7 | (8 * (a2 & 3))) {
    return (*(uint64_t (**)(void))(**(void **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 120))();
  }
  return result;
}

CFDataRef CSSymbolicatorCreateWithSignatureAndNotification(const __CFData *a1)
{
  return _CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>(a1, -2147475454, 0);
}

CFDataRef CSSymbolicatorCreateWithSignatureFlagsAndNotification(const __CFData *result, int a2, int a3)
{
  return _CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>(result, a2, a3);
}

uint64_t CSSymbolicatorCreateWithSignature(uint64_t a1)
{
  return _CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>(a1, 2147491842, 0, 0, 0);
}

CFDataRef CSSymbolicatorCreateWithSignatureAndAdditionalSymbolOwners(const __CFData *a1, uint64_t a2, uint64_t a3)
{
  return _CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotification<__CFData const*>(a1, -1, 0, a2, a3);
}

__CFData *CSSymbolicatorCreateSignature(char a1, uint64_t a2, char a3)
{
  if ((a3 & 8) != 0) {
    return _CSSymbolicatorCreateFlatbufferSignatureWithProcessTimerange<__CFData const*>(a1, a2, a3, 0, 0);
  }
  else {
    return _CSSymbolicatorCreateSignatureElidingSomeSymbolOwners<__CFData const*>(a1, a2, a3, 0, 0);
  }
}

__CFData *CSSymbolicatorCreateSignatureWithProcessTimeRange(char a1, uint64_t a2, char a3, unint64_t a4, unint64_t a5)
{
  if ((a3 & 8) != 0) {
    return _CSSymbolicatorCreateFlatbufferSignatureWithProcessTimerange<__CFData const*>(a1, a2, a3, a4, a5);
  }
  else {
    return 0;
  }
}

__CFData *CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlock(uint64_t a1, uint64_t a2)
{
  return _CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlockAtObservedTimeRange<__CFData const*>(a1, 0, 0, a2);
}

uint64_t CSSymbolicatorForeachSymbolicatorWithURLFlagsAndNotification(const __CFURL *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  uint64_t v15 = 0;
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
  {
    uint64_t v11 = -1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    _OWORD v9[2] = __CSSymbolicatorForeachSymbolicatorWithURLFlagsAndNotification_block_invoke;
    void v9[3] = &unk_1E61D0198;
    int v10 = a2;
    v9[5] = a4;
    v9[6] = &v12;
    v9[4] = a3;
    iterate_symbol_owners_from_path((char *)buffer, (a2 & 0x20000000) == 0, 0, (uint64_t)&v11, 0, (uint64_t)v9);
  }
  uint64_t v7 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v7;
}

void __CSSymbolicatorForeachSymbolicatorWithURLFlagsAndNotification_block_invoke(uint64_t a1, void *a2)
{
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(v2, 1uLL, a2);
  operator new();
}

void sub_1B9030CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (a10) {
    CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask();
  }
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorCreateWithURLArchitectureFlagsAndNotification(const __CFURL *a1, uint64_t a2, int a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024)) {
    return CSSymbolicatorCreateWithPathArchitectureFlagsAndNotification((char *)buffer, a2, a3);
  }
  else {
    return 0;
  }
}

atomic_uint *CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification(char a1, uint64_t a2)
{
  SharedCacheUUID = CSSymbolicatorGetSharedCacheUUID(a1, a2);
  if (SharedCacheUUID)
  {
    unsigned int v5 = (atomic_uint *)CSSymbolicatorCreateWithSharedCacheUUID((uint64_t)SharedCacheUUID);
    uint64_t v7 = v6;
    if (!CSIsNull((char)v5, v6))
    {
      uint64_t v12 = 0;
      uint64_t v13 = &v12;
      uint64_t v14 = 0x2000000000;
      char v15 = 0;
      v11[0] = 0;
      v11[1] = v11;
      v11[2] = 0x2000000000;
      v11[3] = 0;
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 0x40000000;
      v10[2] = __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke;
      v10[3] = &unk_1E61D01E8;
      v10[6] = v5;
      v10[7] = v7;
      void v10[4] = &v12;
      v10[5] = v11;
      CSSymbolicatorForeachSymbolOwnerAtTime(a1, a2, 0x8000000000000000, (uint64_t)v10);
      if (*((unsigned char *)v13 + 24))
      {
        v9[0] = MEMORY[0x1E4F143A8];
        v9[1] = 0x40000000;
        _OWORD v9[2] = __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_2;
        void v9[3] = &unk_1E61D0260;
        v9[5] = v5;
        v9[6] = v7;
        v9[4] = v11;
        if (CSSymbolicatorApplyMutableContextBlock((char)v5, v7, (uint64_t)v9))
        {
LABEL_9:
          _Block_object_dispose(v11, 8);
          _Block_object_dispose(&v12, 8);
          return v5;
        }
        CSRelease(v5, v7);
      }
      else
      {
        CSRelease(v5, v7);
      }
      unsigned int v5 = 0;
      goto LABEL_9;
    }
  }
  return 0;
}

void sub_1B9030F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorCreateWithSharedCacheUUID(uint64_t a1)
{
  if (a1)
  {
    shared_cache_search_directories(&v3);
    v2[0] = 0;
    v2[1] = v2;
    v2[2] = 0x3802000000;
    void v2[3] = __Block_byref_object_copy__8;
    v2[5] = 0;
    v2[6] = 0;
    void v2[4] = __Block_byref_object_dispose__8;
    if (v3 != v4) {
      operator new();
    }
    _Block_object_dispose(v2, 8);
    if (v3)
    {
      uint64_t v4 = v3;
      operator delete(v3);
    }
  }
  return 0;
}

void sub_1B903116C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1BA9D1CD0](v30, 0x10A1C404D4F90C9);
  _Block_object_dispose(&a15, 8);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24) && CSSymbolOwnerIsDyldSharedCache(a2, a3))
  {
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x3802000000;
    char v15 = __Block_byref_object_copy__8;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unint64_t v16 = __Block_byref_object_dispose__8;
    CFUUIDBytes = CSSymbolOwnerGetCFUUIDBytes(a2, a3);
    uint64_t v7 = a1[6];
    uint64_t v8 = a1[7];
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_8;
    v11[3] = &unk_1E61D01C0;
    v11[5] = a2;
    v11[6] = a3;
    void v11[4] = &v12;
    _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(v7, v8, (uint64_t)CFUUIDBytes, 0x8000000000000000, (uint64_t)v11);
    if (!CSIsNull(v13[5], v13[6]))
    {
      uint64_t BaseAddress = CSSymbolOwnerGetBaseAddress(a2, a3);
      uint64_t v10 = CSSymbolOwnerGetBaseAddress(v13[5], v13[6]);
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
      *(void *)(*(void *)(a1[5] + 8) + 24) = BaseAddress - v10;
    }
    _Block_object_dispose(&v12, 8);
  }
}

void sub_1B9031358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0;
  }
  CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(a2 & 0xFFFFFFFFFFFFFFFCLL, a4, a3, &v11);
  uint64_t v6 = v11;
  uint64_t v7 = v12;
  if (v11 == v12)
  {
    uint64_t v8 = v11;
  }
  else
  {
    do
    {
      if (a5) {
        (*(void (**)(uint64_t, uint64_t, void))(a5 + 16))(a5, 3, *v6);
      }
      ++v6;
    }
    while (v6 != v7);
    uint64_t v6 = v11;
    uint64_t v8 = v12;
  }
  uint64_t v9 = v8 - v6;
  if (v6)
  {
    uint64_t v12 = v6;
    operator delete(v6);
  }
  return v9;
}

void sub_1B903143C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_8(void *a1, uint64_t a2, uint64_t a3)
{
  Name = (const char *)CSSymbolOwnerGetName(a1[5], a1[6]);
  uint64_t result = CSSymbolOwnerGetName(a2, a3);
  if (Name) {
    BOOL v8 = result == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t result = strcmp(Name, (const char *)result);
    if (!result)
    {
      uint64_t v9 = *(void *)(a1[4] + 8);
      *(void *)(v9 + 40) = a2;
      *(void *)(v9 + 48) = a3;
    }
  }
  return result;
}

uint64_t __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_2(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_3;
  v5[3] = &unk_1E61D0238;
  void v5[4] = a1[4];
  v5[5] = a2;
  return CSSymbolicatorForeachSymbolOwnerAtTime(v2, v3, 0x8000000000000000, (uint64_t)v5);
}

uint64_t __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_3(uint64_t a1, char a2, uint64_t a3)
{
  char MutableInContext = CSSymbolOwnerMakeMutableInContext(a2, a3, *(CSCppMutableContext **)(a1 + 40));
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_4;
  v7[3] = &unk_1E61D0210;
  void v7[4] = *(void *)(a1 + 32);
  return CSSymbolOwnerEditRelocations(MutableInContext, v5, (uint64_t)v7);
}

uint64_t __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_4(uint64_t result, void *a2)
{
  *a2 += *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24);
  return result;
}

uint64_t __CSSymbolicatorCreateWithSharedCacheUUID_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t result = _createSymbolicatorFromSharedCacheSymbolOwners(*(unsigned int *)(a1 + 40), 0, a2, a3, a4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  *(void *)(v6 + 40) = result;
  *(void *)(v6 + 48) = v7;
  return result;
}

uint64_t _createSymbolicatorFromSharedCacheSymbolOwners(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  memset(v21, 0, sizeof(v21));
  int v22 = 1065353216;
  memset(v20, 0, sizeof(v20));
  uint64_t v6 = *a5;
  uint64_t v5 = a5[1];
  if (v5 != *a5)
  {
    while (1)
    {
      uint64_t v7 = *v6;
      uint64_t v8 = v6[1];
      *(void *)&long long v19 = *v6;
      *((void *)&v19 + 1) = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (_OWORD *)(v7 + 16);
      uint64_t v10 = std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__equal_range_multi<UUID>(v21, (void *)(v7 + 16));
      uint64_t v12 = v10;
      uint64_t v13 = v11;
      long long v14 = v19;
      if (*((void *)&v19 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v10 != v11)
      {
        do
        {
          char v15 = (const CSCppSymbolOwner *)v12[4];
          unint64_t v16 = (std::__shared_weak_count *)v12[5];
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v17 = check_if_segments_match((const CSCppSymbolOwner *)v14, v15);
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          if (v17) {
            goto LABEL_14;
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12 != v13);
        uint64_t v12 = v13;
      }
LABEL_14:
      if (*((void *)&v14 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
      }
      if (v12 == v13)
      {
        std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_multi<UUID const&,std::shared_ptr<CSCppSymbolOwner>&>(v21, v9, &v19);
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](v20, &v19);
      }
      if (*((void *)&v19 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
      }
      v6 += 2;
      if (v6 == v5) {
        operator new();
      }
    }
  }
  *(void *)&long long v19 = v20;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::~__hash_table((uint64_t)v21);
  return 0;
}

void sub_1B903183C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void **);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  if (a6) {
    CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask();
  }
  va_copy((va_list)v7, va1);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::~__hash_table((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorForeachSharedCacheSymbolicatorWithFlagsAndNotification()
{
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2000000000;
  uint64_t v5 = 0;
  iterate_symbol_owners_from_disk_dsc(0);
  uint64_t v0 = v3[3];
  _Block_object_dispose(&v2, 8);
  return v0;
}

atomic_uint *__CSSymbolicatorForeachSharedCacheSymbolicatorWithFlagsAndNotification_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  SymbolicatorFromSharedCacheSymbolOwners = (atomic_uint *)_createSymbolicatorFromSharedCacheSymbolOwners(*(unsigned int *)(a1 + 56), *(void *)(a1 + 32), a2, a3, a4);
  uint64_t v7 = v6;
  uint64_t result = (atomic_uint *)CSIsNull((char)SymbolicatorFromSharedCacheSymbolOwners, v6);
  if ((result & 1) == 0)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9) {
      (*(void (**)(uint64_t, atomic_uint *, uint64_t))(v9 + 16))(v9, SymbolicatorFromSharedCacheSymbolOwners, v7);
    }
    uint64_t result = CSRelease(SymbolicatorFromSharedCacheSymbolOwners, v7);
    ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  }
  return result;
}

uint64_t CSSymbolicatorForEachAotImage()
{
  return 0;
}

uint64_t CSSymbolicatorGetAotSharedCacheAddress(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)) && (uint64_t v2 = *(unsigned char **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56), v2[16])) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 72))();
  }
  else {
    return 0;
  }
}

UUID *CSSymbolicatorGetAotSharedCacheUUID(char a1, uint64_t a2)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0;
  }
  uint64_t v2 = *(unsigned char **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56);
  if (!v2[16]) {
    return 0;
  }
  uint64_t v3 = (UUID *)(*(uint64_t (**)(unsigned char *))(*(void *)v2 + 56))(v2);
  if (UUID::is_null(v3)) {
    return 0;
  }
  else {
    return v3;
  }
}

uint64_t CSSymbolicatorCreateWithMachKernelFlagsAndNotification(int a1)
{
  return _createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotification(0, 0, a1);
}

uint64_t _createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotification(char **a1, uint64_t a2, int a3)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  memset(v48, 0, sizeof(v48));
  int v49 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "xnu");
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v48, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&v66)+ 5) = 0;
  if (__p.d_name[2] < 0) {
    operator delete((void *)__p.d_ino);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sptm");
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v48, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&v66)+ 5) = 0;
  if (__p.d_name[2] < 0) {
    operator delete((void *)__p.d_ino);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "txm");
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v48, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&v66)+ 5) = 0;
  if (__p.d_name[2] < 0)
  {
    operator delete((void *)__p.d_ino);
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  *(void *)__str = 0;
  *(void *)&long long buf = 8;
  if (kas_info())
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.d_ino) = 0;
      uint64_t v8 = MEMORY[0x1E4F14500];
      uint64_t v9 = "Unable to determine kernel slide.";
LABEL_76:
      _os_log_impl(&dword_1B8F92000, v8, OS_LOG_TYPE_INFO, v9, (uint8_t *)&__p, 2u);
      goto LABEL_114;
    }
    goto LABEL_114;
  }
  uint64_t v14 = *(void *)__str;
  std::string::basic_string[abi:ne180100]<0>(&__p, "xnu");
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v48, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&v66)+ 5) = v14;
  if (__p.d_name[2] < 0) {
    operator delete((void *)__p.d_ino);
  }
  values = 0;
  *(void *)&long long v53 = 8;
  if (kas_info())
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.d_ino) = 0;
      uint64_t v8 = MEMORY[0x1E4F14500];
      uint64_t v9 = "Unable to determine a special slide 1.";
      goto LABEL_76;
    }
    goto LABEL_114;
  }
  unint64_t v26 = values;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sptm");
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v48, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&v66)+ 5) = v26;
  if (__p.d_name[2] < 0) {
    operator delete((void *)__p.d_ino);
  }
  *(void *)&long long v56 = 0;
  *(void *)&long long v50 = 8;
  if (kas_info())
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.d_ino) = 0;
      uint64_t v8 = MEMORY[0x1E4F14500];
      uint64_t v9 = "Unable to determine special slide 2.";
      goto LABEL_76;
    }
    goto LABEL_114;
  }
  uint64_t v40 = v56;
  std::string::basic_string[abi:ne180100]<0>(&__p, "txm");
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v48, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&v66)+ 5) = v40;
  if (__p.d_name[2] < 0) {
    operator delete((void *)__p.d_ino);
  }
LABEL_9:
  Current = (UUID *)CSArchitectureGetCurrent();
  if (Current)
  {
    uint64_t v47 = Current;
    *(_OWORD *)UUID v64 = *(_OWORD *)UUID::null_uuid(Current);
    v66.__r_.__value_.__r.__words[0] = 48;
    if ((sysctlbyname("kern.uuid", &__p, (size_t *)&v66, 0, 0)
       || v66.__r_.__value_.__r.__words[0] > 0x2F
       || !CSUUIDStringToCFUUIDBytes(&__p, v64))
      && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.d_ino) = 0;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not read UUID of running kernel\n", (uint8_t *)&__p, 2u);
    }
    *(void *)&long long v53 = 0;
    *((void *)&v53 + 1) = &v53;
    uint64_t v54 = 0x2000000000;
    char v55 = 0;
    if (UUID::is_null((UUID *)v64))
    {
      _Block_object_dispose(&v53, 8);
      uint64_t v7 = "/mach_kernel";
LABEL_88:
      if (!UUID::is_null((UUID *)v64))
      {
        v61[0] = MEMORY[0x1E4F143A8];
        v61[1] = 0x40000000;
        v61[2] = ___ZL73_createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotificationPPKcmjU13block_pointerFvj19_CSNotificationDataE_block_invoke;
        v61[3] = &__block_descriptor_tmp_65;
        long long v62 = *(_OWORD *)v64;
        iterate_symbol_owners_from_path(v7, 0, 0, (uint64_t)&v47, 1, (uint64_t)v61);
      }
      long long v53 = 0uLL;
      uint64_t v54 = 0;
      pthread_mutex_lock(&kext_lock);
      std::unordered_map<std::string,unsigned long long>::unordered_map((uint64_t)v46, (uint64_t)v48);
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v78 = 0x4002000000;
      v79[0] = __Block_byref_object_copy__76;
      v79[1] = __Block_byref_object_dispose__77;
      uint64_t v80 = 0;
      long long v81 = 0uLL;
      values = @"OSBundleLoadAddress";
      uint64_t v72 = @"OSBundleMachOHeaders";
      uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t))@"OSBundleExecutablePath";
      unint64_t v74 = @"OSBundlePath";
      unint64_t v29 = (uint8_t *)*MEMORY[0x1E4F1CFF8];
      long long v75 = @"OSBundleUUID";
      long long v76 = v29;
      CFArrayRef v30 = CFArrayCreate(0, (const void **)&values, 6, MEMORY[0x1E4F1D510]);
      CFDictionaryRef v31 = (const __CFDictionary *)OSKextCopyLoadedKextInfo();
      v66.__r_.__value_.__r.__words[0] = 0;
      v66.__r_.__value_.__l.__size_ = (std::string::size_type)&v66;
      v66.__r_.__value_.__r.__words[2] = 0x5002000000;
      unint64_t v67 = __Block_byref_object_copy__93;
      unint64_t v68 = __Block_byref_object_dispose__94;
      memset(v69, 0, sizeof(v69));
      int v70 = 1065353216;
      __p.d_ino = MEMORY[0x1E4F143A8];
      __p.d_seekoff = 1174405120;
      *(void *)&__p.d_reclen = ___ZL14fast_kext_info17CSCppArchitectureNSt3__113unordered_mapINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyNS0_4hashIS7_EENS0_8equal_toIS7_EENS5_INS0_4pairIKS7_yEEEEEEjPKc_block_invoke;
      *(void *)&__p.d_name[3] = &unk_1F12C9218;
      std::unordered_map<std::string,unsigned long long>::unordered_map((uint64_t)&__p.d_name[27], (uint64_t)v46);
      *(void *)&__p.d_name[67] = v7;
      *(void *)&__p.d_name[11] = &v66;
      *(void *)&__p.d_name[19] = &buf;
      if (v31)
      {
        CFDictionaryApplyFunction(v31, (CFDictionaryApplierFunction)CFDictionaryBlockApplierCallback, &__p);
        CFRelease(v31);
      }
      CFRelease(v30);
      unint64_t v57 = 0;
      long long v56 = 0uLL;
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(&v56, *(void **)(*((void *)&buf + 1) + 40), *(void **)(*((void *)&buf + 1) + 48), (uint64_t)(*(void *)(*((void *)&buf + 1) + 48) - *(void *)(*((void *)&buf + 1) + 40)) >> 4);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p.d_name[27]);
      _Block_object_dispose(&v66, 8);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v69);
      _Block_object_dispose(&buf, 8);
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate((uint64_t *)&v53);
      long long v53 = v56;
      uint64_t v54 = v57;
      unint64_t v57 = 0;
      long long v56 = 0uLL;
      __p.d_ino = (__uint64_t)&v56;
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v46);
      pthread_mutex_unlock(&kext_lock);
      uint64_t v33 = (uint64_t *)*((void *)&v53 + 1);
      uint64_t v32 = (uint64_t *)v53;
      if ((void)v53 != *((void *)&v53 + 1))
      {
        do
        {
          uint64_t v34 = *v32;
          uint64_t v35 = (std::__shared_weak_count *)v32[1];
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unsigned int v36 = *(_DWORD *)(v34 + 108);
          if ((v36 & 0x200) != 0)
          {
            unsigned int v36 = v36 & 0xFEFFEDFF | 0x1000;
            *(_DWORD *)(v34 + 108) = v36;
          }
          if ((v36 & 0x3000) == 0x2000)
          {
            int v37 = v36 | 0x1000000;
            *(_DWORD *)(v34 + 108) = v36 | 0x1000000;
            uint64_t v38 = *(char **)(v34 + 136);
            if (!strstr(v38, "mach") && !strstr(v38, "kernel") && (strstr(v38, "sptm") || strstr(v38, "txm")))
            {
              v37 &= ~0x10u;
              *(_DWORD *)(v34 + 108) = v37;
            }
            *(_DWORD *)(v34 + 108) = v37 & 0xFEFFEFFF | 0x1000;
          }
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
          v32 += 2;
        }
        while (v32 != v33);
        if ((void)v53 != *((void *)&v53 + 1))
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
          {
            LOWORD(__p.d_ino) = 0;
            _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Succesfully created kext symbol owners.\n", (uint8_t *)&__p, 2u);
          }
          operator new();
        }
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p.d_ino) = 0;
        _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unable to create any kext symbol owners.\n", (uint8_t *)&__p, 2u);
      }
      __p.d_ino = (__uint64_t)&v53;
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_114;
    }
    uint64_t v52 = 0;
    uint64_t v10 = getwd((char *)&v66);
    v58[0] = v10;
    std::string::basic_string[abi:ne180100]<0>(&buf, "/System/Library/Kernels");
    std::string::basic_string[abi:ne180100]<0>(v79, "/");
    long long v56 = 0uLL;
    unint64_t v57 = 0;
    v58[1] = (char *)&v56;
    char v59 = 0;
    *(void *)&long long v56 = operator new(0x30uLL);
    *((void *)&v56 + 1) = v56;
    unint64_t v57 = v56 + 48;
    uint64_t v11 = 0;
    *((void *)&v56 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v57, &buf, &v81, (std::string *)v56);
    do
    {
      if (*((char *)&v80 + v11 * 8 + 7) < 0) {
        operator delete((void *)v79[v11]);
      }
      v11 -= 3;
    }
    while (v11 != -6);
    if (v10)
    {
      uint64_t v12 = *((void *)&v56 + 1);
      if (*((void *)&v56 + 1) >= v57)
      {
        uint64_t v13 = std::vector<std::string>::__emplace_back_slow_path<char const*&>((uint64_t *)&v56, v58);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(*((void **)&v56 + 1), v10);
        uint64_t v13 = v12 + 24;
      }
      *((void *)&v56 + 1) = v13;
    }
    if (a1 && a2)
    {
      std::unordered_set<std::string>::unordered_set<char const**>((uint64_t)&buf, a1, &a1[a2]);
      long long v50 = 0uLL;
      unint64_t v51 = 0;
      char v15 = (long long *)*((void *)&v56 + 1);
      unint64_t v16 = (long long *)v56;
      uint64_t v60 = &v50;
      while (v16 != v15)
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>(&buf, (unsigned __int8 *)v16))std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((uint64_t **)&v60, v16); {
        unint64_t v16 = (long long *)((char *)v16 + 24);
        }
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&buf);
    }
    else
    {
      long long v50 = v56;
      unint64_t v51 = v57;
      unint64_t v57 = 0;
      long long v56 = 0uLL;
    }
    *(void *)&long long buf = &v56;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    uint64_t v17 = *((void *)&v50 + 1);
    uint64_t v18 = v50;
    if ((void)v50 == *((void *)&v50 + 1))
    {
      if (!*(unsigned char *)(*((void *)&v53 + 1) + 24))
      {
        memset(&v66, 0, sizeof(v66));
LABEL_79:
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          char v27 = &v66;
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            char v27 = (std::string *)v66.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v27;
          _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to find matching kernels in %s\n", (uint8_t *)&buf, 0xCu);
        }
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
LABEL_85:
        int v28 = *(unsigned __int8 *)(*((void *)&v53 + 1) + 24);
        v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
        _Block_object_dispose(&v53, 8);
        if (v28) {
          uint64_t v7 = __str;
        }
        else {
          uint64_t v7 = "/mach_kernel";
        }
        goto LABEL_88;
      }
    }
    else
    {
      int v19 = 0;
      while (1)
      {
        unint64_t v20 = (const char *)v18;
        if (*(char *)(v18 + 23) < 0) {
          unint64_t v20 = *(const char **)v18;
        }
        unint64_t v21 = opendir(v20);
        if (v21)
        {
          if (!*(unsigned char *)(*((void *)&v53 + 1) + 24))
          {
            while (1)
            {
              int v19 = readdir_r(v21, &__p, &v52);
              if (v19 || !v52) {
                break;
              }
              if (v52->d_type == 8)
              {
                if (!strcmp(v20, "/")) {
                  snprintf(__str, 0x400uLL, "/%s");
                }
                else {
                  snprintf(__str, 0x400uLL, "%s/%s");
                }
                if (CSFileIsSuitableForCS(__str))
                {
                  values = (void *)MEMORY[0x1E4F143A8];
                  uint64_t v72 = 0x40000000;
                  uint64_t v73 = ___ZL23get_running_kernel_pathRK4UUIDRK17CSCppArchitecturePcmPPKcm_block_invoke;
                  unint64_t v74 = (__CFString *)&unk_1E61D0318;
                  long long v75 = (__CFString *)&v53;
                  long long v76 = v64;
                  iterate_symbol_owners_from_path(__str, 0, 0, (uint64_t)&v47, 1, (uint64_t)&values);
                }
              }
              if (*(unsigned char *)(*((void *)&v53 + 1) + 24))
              {
                int v19 = 0;
                break;
              }
            }
          }
          closedir(v21);
          if (*(unsigned char *)(*((void *)&v53 + 1) + 24)) {
            break;
          }
        }
        v18 += 24;
        if (v18 == v17)
        {
          if (*(unsigned char *)(*((void *)&v53 + 1) + 24)) {
            break;
          }
          if (!v19)
          {
            uint64_t v42 = *((void *)&v50 + 1);
            uint64_t v41 = v50;
            memset(&v66, 0, sizeof(v66));
            if ((void)v50 != *((void *)&v50 + 1))
            {
              do
              {
                int v43 = *(char *)(v41 + 23);
                if (v43 >= 0) {
                  uint64_t v44 = (const std::string::value_type *)v41;
                }
                else {
                  uint64_t v44 = *(const std::string::value_type **)v41;
                }
                if (v43 >= 0) {
                  std::string::size_type v45 = *(unsigned __int8 *)(v41 + 23);
                }
                else {
                  std::string::size_type v45 = *(void *)(v41 + 8);
                }
                std::string::append(&v66, v44, v45);
                std::string::append(&v66, ", ", 2uLL);
                v41 += 24;
              }
              while (v41 != v42);
            }
            goto LABEL_79;
          }
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_85;
          }
          int v22 = strerror(v19);
          LODWORD(v66.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
          size_t v23 = MEMORY[0x1E4F14500];
          unint64_t v24 = "Error reading kernels directory: %s\n";
          os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
          goto LABEL_70;
        }
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      LODWORD(v66.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 4) = (std::string::size_type)__str;
      size_t v23 = MEMORY[0x1E4F14500];
      unint64_t v24 = "Found matching kernel in %s\n";
      os_log_type_t v25 = OS_LOG_TYPE_INFO;
LABEL_70:
      _os_log_impl(&dword_1B8F92000, v23, v25, v24, (uint8_t *)&v66, 0xCu);
    }
    goto LABEL_85;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    LOWORD(__p.d_ino) = 0;
    uint64_t v8 = MEMORY[0x1E4F14500];
    uint64_t v9 = "Unable to determine architecture of the kernel";
    goto LABEL_76;
  }
LABEL_114:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v48);
  return 0;
}

void sub_1B9032954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  STACK[0x960] = (unint64_t)&a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x960]);
  _Block_object_dispose(&a29, 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorCreateWithMachKernelExcludingSearchPaths(char **a1, uint64_t a2)
{
  return _createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotification(a1, a2, 0);
}

void CSSymbolicatorResymbolicate(char a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  if (a1 & 7 | (8 * (a2 & 3)))
  {
    CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), v10);
    CSCppSymbolOwnerCache::resymbolicate_symbol_owners(v10, a3, a4, a5, a6);
    uint64_t v11 = (void **)v10;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v11);
  }
}

void sub_1B9032C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void CSSymbolicatorResymbolicateFail(char a1, uint64_t a2, const __CFArray *a3)
{
  if (a1 & 7 | (8 * (a2 & 3)))
  {
    CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), v4);
    CSCppSymbolOwnerCache::resymbolicate_symbol_owners(v4, a3);
    uint64_t v5 = (void **)v4;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void sub_1B9032C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void CSSymbolicatorResymbolicateFromDebugSymbolsInfo(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
  {
    int FlagsForNonFaultingBehavior = CSSymbolicatorGetFlagsForNonFaultingBehavior();
    uint64_t v4 = (os_unfair_lock_s *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
    uint32_t v5 = CSCppSymbolicator::flags(v4) & ~FlagsForNonFaultingBehavior;
    os_unfair_lock_lock(v4 + 3);
    v4[16]._os_unfair_lock_opaque = v5;
    os_unfair_lock_unlock(v4 + 3);
    CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)v4, v6);
    CSCppSymbolOwnerCache::resymbolicate_symbol_owners(v6);
    uint64_t v7 = (void **)v6;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v7);
  }
}

void sub_1B9032D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

__CFString *CSSymbolicatorCopyDescriptionWithIndent(char a1, uint64_t a2, int a3)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0;
  }
  Mutable = CFStringCreateMutable(0, 0);
  if (a3)
  {
    int v7 = a3;
    do
    {
      CFStringAppendCString(Mutable, "\t", 0x8000100u);
      --v7;
    }
    while (v7);
  }
  uint64_t Architecture = CSSymbolicatorGetArchitecture(a1, a2);
  FamilyName = CSArchitectureGetFamilyName(Architecture);
  uint64_t Pid = CSSymbolicatorGetPid(a1, a2);
  int IsTaskValid = CSSymbolicatorIsTaskValid(a1, a2);
  uint64_t v12 = "";
  if (IsTaskValid) {
    uint64_t v12 = " LIVE";
  }
  CFStringAppendFormat(Mutable, 0, @"<CSSymbolicator: %p> %s (pid:%d%s) {\n", a2 & 0xFFFFFFFFFFFFFFFCLL, FamilyName, Pid, v12);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 0x40000000;
  uint64_t v14[2] = __CSSymbolicatorCopyDescriptionWithIndent_block_invoke;
  v14[3] = &__block_descriptor_tmp_27;
  int v15 = a3;
  void v14[4] = Mutable;
  CSSymbolicatorForeachSymbolOwnerAtTime(a1, a2, 0x8000000000000001, (uint64_t)v14);
  for (; a3; --a3)
    CFStringAppendCString(Mutable, "\t", 0x8000100u);
  CFStringAppendCString(Mutable, "}", 0x8000100u);
  return Mutable;
}

void __CSSymbolicatorCopyDescriptionWithIndent_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (const void *)CSCopyDescriptionWithIndent(a2, a3, (*(_DWORD *)(a1 + 40) + 1));
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, @"%@\n", v4);

  CFRelease(v4);
}

__n128 ___ZL73_createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotificationPPKcmjU13block_pointerFvj19_CSNotificationDataE_block_invoke(__n128 *a1, __n128 **a2)
{
  __n128 result = a1[2];
  (*a2)[1] = result;
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *((void *)i + 5) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  char v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *char v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  *uint64_t v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    char v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_1B9033200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZL23get_running_kernel_pathRK4UUIDRK17CSCppArchitecturePcmPPKcm_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 40);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  if (v4 == *(void *)(*(void *)a2 + 16) && v3 == *(void *)(*(void *)a2 + 24)) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const*&>(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_1B9033344(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::unordered_set<std::string>::unordered_set<char const**>(uint64_t a1, char **a2, char **a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    unint64_t v5 = a2;
    do
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_impl<char const*&>((void *)a1, v5++);
    while (v5 != a3);
  }
  return a1;
}

void sub_1B90333BC(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](uint64_t **a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  uint64_t v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    uint64_t v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1B903347C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1B9033594(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

__n128 __Block_byref_object_copy__76(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__77(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t __Block_byref_object_copy__93(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__94(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 40);
}

void ___ZL14fast_kext_info17CSCppArchitectureNSt3__113unordered_mapINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyNS0_4hashIS7_EENS0_8equal_toIS7_EENS5_INS0_4pairIKS7_yEEEEEEjPKc_block_invoke(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"OSBundleLoadAddress");
  uint64_t valuePtr = 0;
  if (Value && CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr) && valuePtr)
  {
    CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F1CFF8]);
    CFComparisonResult v7 = CFStringCompare(@"__kernel__", v6, 0);
    CFComparisonResult v8 = CFStringCompare(@"com.apple.sptm", v6, 0);
    CFComparisonResult v9 = CFStringCompare(@"com.apple.txm", v6, 0);
    if (v7)
    {
      if (v8)
      {
        if (v9)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "xnu");
          unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>((void *)(a1 + 48), (unsigned __int8 *)__p);
          if (!v10) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "txm");
          unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>((void *)(a1 + 48), (unsigned __int8 *)__p);
          if (!v10) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "sptm");
        unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>((void *)(a1 + 48), (unsigned __int8 *)__p);
        if (!v10) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "xnu");
      unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>((void *)(a1 + 48), (unsigned __int8 *)__p);
      if (!v10) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
    }
    uint64_t v11 = *((void *)v10 + 5);
    if (v37 < 0) {
      operator delete(__p[0]);
    }
    long long v12 = CFDictionaryGetValue(theDict, @"OSBundleUUID");
    CFDataRef v13 = (const __CFData *)CFDictionaryGetValue(theDict, @"OSBundleMachOHeaders");
    if (v13)
    {
      CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(theDict, @"OSBundleExecutablePath");
      CFStringRef v15 = v14;
      if (v14)
      {
        if ((!CFStringGetCString(v14, (char *)__p, 1024, 0x8000100u) || access((const char *)__p, 4))
          && CFStringGetCString(v15, (char *)__p, 1024, 0x8000100u)
          && *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 64))
        {
          bzero(buffer, 0x400uLL);
          bzero(__s, 0x400uLL);
          if (!CFStringGetCString(v6, (char *)buffer, 1024, 0x8000100u)
            || !CFStringGetCString(v15, __s, 1024, 0x8000100u))
          {
            return;
          }
          std::string::basic_string[abi:ne180100]<0>(v31, (char *)buffer);
          std::string::basic_string[abi:ne180100]<0>(v29, __s);
          unint64_t v16 = std::string::find[abi:ne180100]((uint64_t *)v29, "_development", 0);
          unint64_t v17 = std::string::find[abi:ne180100]((uint64_t *)v29, "_kasan", 0);
          uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), (unsigned __int8 *)v31);
          if (v18)
          {
            long long v19 = (const char *)(v18 + 40);
            int v20 = (char)v18[63];
            if (v16 == -1)
            {
              if (v17 == -1)
              {
                if (v20 < 0) {
                  long long v19 = *(const char **)v19;
                }
                strlcpy((char *)__p, v19, 0x400uLL);
              }
              else
              {
                if (v20 < 0) {
                  long long v19 = *(const char **)v19;
                }
                snprintf((char *)__p, 0x400uLL, "%s%s", v19, "_kasan");
              }
            }
            else
            {
              if (v20 < 0) {
                long long v19 = *(const char **)v19;
              }
              snprintf((char *)__p, 0x400uLL, "%s%s", v19, "_development");
            }
          }
          if (v30 < 0) {
            operator delete(v29[0]);
          }
          if (v32 < 0) {
            operator delete(v31[0]);
          }
        }
      }
      else
      {
        CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(theDict, @"OSBundlePath");
        if (v21)
        {
          CFURLRef v22 = CFURLCreateWithFileSystemPath(0, v21, kCFURLPOSIXPathStyle, 1u);
          if (v22)
          {
            unint64_t v23 = CFBundleCreate(0, v22);
            unint64_t v24 = v23;
            if (v23)
            {
              CFURLRef v25 = CFBundleCopyExecutableURL(v23);
              CFURLRef v26 = v25;
              if (v25)
              {
                CFURLGetFileSystemRepresentation(v25, 1u, (UInt8 *)__p, 1024);
                CFRelease(v26);
              }
              CFRelease(v24);
            }
            CFRelease(v22);
          }
        }
      }
      if (v7 == kCFCompareEqualTo)
      {
        char v27 = *(const char **)(a1 + 88);
        if (v27 && !access(v27, 4)) {
          strlcpy((char *)__p, *(const char **)(a1 + 88), 0x400uLL);
        }
        else {
          strcpy((char *)__p, "__kernel__");
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buffer = 0;
          _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Found running kernel dummy entry.\n", buffer, 2u);
        }
      }
      CSCppCFDataMemory::CSCppCFDataMemory((CSCppCFDataMemory *)buffer, v13);
      *(void *)__s = -1;
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 0x40000000;
      v28[2] = ___ZL14fast_kext_info17CSCppArchitectureNSt3__113unordered_mapINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyNS0_4hashIS7_EENS0_8equal_toIS7_EENS5_INS0_4pairIKS7_yEEEEEEjPKc_block_invoke_108;
      v28[3] = &unk_1E61D0340;
      void v28[5] = v12;
      v28[6] = v11;
      v28[4] = *(void *)(a1 + 40);
      iterate_symbol_owners_from_memory((uint64_t)buffer, (uint64_t)__p, 0, 0, 0, (uint64_t)__s, 0, 1, (uint64_t)v28);
      CSCppCFDataMemory::~CSCppCFDataMemory((CSCppCFDataMemory *)buffer);
    }
  }
}

void sub_1B9033B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t std::string::find[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  size_t v7 = strlen(__s);
  if (v6 < a3) {
    return -1;
  }
  int64_t v8 = v7;
  if (v7)
  {
    CFComparisonResult v9 = (void *)(v5 + a3);
    unint64_t v10 = (char *)(v5 + v6);
    int64_t v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      int v14 = *__s;
      do
      {
        uint64_t v15 = v11 - v8;
        if (v15 == -1) {
          break;
        }
        unint64_t v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        long long v12 = v16;
        if (!memcmp(v16, __s, v8)) {
          goto LABEL_9;
        }
        CFComparisonResult v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    long long v12 = v10;
LABEL_9:
    if (v12 == v10) {
      return -1;
    }
    else {
      return (unint64_t)&v12[-v5];
    }
  }
  return a3;
}

void **___ZL14fast_kext_info17CSCppArchitectureNSt3__113unordered_mapINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyNS0_4hashIS7_EENS0_8equal_toIS7_EENS5_INS0_4pairIKS7_yEEEEEEjPKc_block_invoke_108(void *a1, long long *a2)
{
  __n128 result = (void **)a1[5];
  if (result)
  {
    uint64_t v5 = *(void *)a2;
    __n128 result = (void **)CFDataGetBytePtr((CFDataRef)result);
    if (*(void **)(v5 + 16) == *result && *(void *)(v5 + 24) == (void)result[1])
    {
      uint64_t v7 = *(void *)a2;
      int64_t v8 = *(void **)(*(void *)a2 + 32);
      uint64_t v9 = *(void *)(*(void *)a2 + 40) - (void)v8;
      if (v9)
      {
        unint64_t v10 = v9 >> 5;
        if (v10 <= 1) {
          unint64_t v10 = 1;
        }
        do
        {
          *v8 += a1[6];
          v8 += 4;
          --v10;
        }
        while (v10);
      }
      uint64_t v12 = v7 + 56;
      int64_t v11 = *(void **)(v7 + 56);
      uint64_t v13 = *(void *)(v12 + 8) - (void)v11;
      if (v13)
      {
        unint64_t v14 = v13 / 24;
        if (v14 <= 1) {
          unint64_t v14 = 1;
        }
        do
        {
          *v11 += a1[6];
          v11 += 3;
          --v14;
        }
        while (v14);
      }
      uint64_t v15 = (uint64_t *)(*(void *)(a1[4] + 8) + 40);
      return std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](v15, a2);
    }
  }
  return result;
}

uint64_t __copy_helper_block_e8_48c143_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEyNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_yEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_map<std::string,unsigned long long>::unordered_map(a1 + 48, a2 + 48);
}

uint64_t __destroy_helper_block_e8_48c143_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEyNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_yEEEEEE(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 48);
}

uint64_t CFDictionaryBlockApplierCallback(const void *a1, const void *a2, uint64_t (**a3)(void, void, void))
{
  return ((uint64_t (**)(void, const void *, const void *))a3)[2](a3, a1, a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  int64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      int64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::unordered_map<std::string,unsigned long long>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1B9033F48(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__construct_node_hash<std::pair<std::string const,unsigned long long> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  CFURLRef v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *CFURLRef v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1B90341BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__construct_node_hash<std::pair<std::string const,unsigned long long> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    void v8[4] = *(void *)(a3 + 16);
  }
  v8[5] = *(void *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B9034270(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v8 = operator new(0x20uLL);
  *unint64_t v8 = &unk_1F12C9258;
  v8[1] = a4;
  v8[2] = a2;
  void v8[3] = a3;
  v10[3] = v8;
  CSCppSymbolicator::read_timeline(a1, (uint64_t)v10);
  return std::__function::__value_func<void ()(CSCppSymbolOwnerTimeline &)>::~__value_func[abi:ne180100](v10);
}

void sub_1B903433C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(CSCppSymbolOwnerTimeline &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::~__func()
{
}

__n128 std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F12C9258;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F12C9258;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1} &,CSCppSymbolOwnerTimeline&>((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target_type()
{
}

double std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1} &,CSCppSymbolOwnerTimeline&>(uint64_t *a1, uint64_t a2)
{
  CSCppSymbolOwnerTimeline::symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(a2, a1[1], (void *)a1[2], (void **)&v6);
  uint64_t v3 = *a1;
  unint64_t v4 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v4;
    operator delete(v4);
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(void *)(v3 + 16) = 0;
  }
  double result = *(double *)&v6;
  *(_OWORD *)uint64_t v3 = v6;
  *(void *)(v3 + 16) = v7;
  return result;
}

void CSCppSymbolOwnerTimeline::symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void **a4@<X8>)
{
  if ((unint64_t)(a2 - 0x7FFFFFFFFFFFFFFFLL) >= 2) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFDLL;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  long long v6 = *(CSCppSymbolOwner ***)(a1 + 56);
  for (uint64_t i = *(CSCppSymbolOwner ***)(a1 + 64); v6 != i; v6 += 2)
  {
    if (a2 != 0x8000000000000001)
    {
      uint64_t unload_timestamp_range = CSCppSymbolOwner::load_unload_timestamp_range(*v6);
      if (v5 - unload_timestamp_range >= v11) {
        continue;
      }
    }
    unint64_t v12 = *v6;
    if (*a3 == *((void *)*v6 + 2) && a3[1] == *((void *)*v6 + 3))
    {
      unint64_t v15 = (CSCppSymbolOwner **)a4[1];
      unint64_t v14 = (unint64_t)a4[2];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = ((char *)v15 - (unsigned char *)*a4) >> 3;
        if ((unint64_t)(v17 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v14 - (void)*a4;
        uint64_t v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
          uint64_t v19 = v17 + 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          size_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a4 + 2), v20);
        }
        else {
          size_t v21 = 0;
        }
        CFURLRef v22 = (CSCppSymbolOwner **)&v21[8 * v17];
        *CFURLRef v22 = v12;
        float v16 = v22 + 1;
        unint64_t v24 = (char *)*a4;
        unint64_t v23 = (char *)a4[1];
        if (v23 != *a4)
        {
          do
          {
            CFURLRef v25 = (CSCppSymbolOwner *)*((void *)v23 - 1);
            v23 -= 8;
            *--CFURLRef v22 = v25;
          }
          while (v23 != v24);
          unint64_t v23 = (char *)*a4;
        }
        *a4 = v22;
        a4[1] = v16;
        a4[2] = &v21[8 * v20];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *unint64_t v15 = v12;
        float v16 = v15 + 1;
      }
      a4[1] = v16;
    }
  }
}

void sub_1B903462C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *find_core_file_dumped_region_containing_location(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3 != *(void **)a1)
  {
    unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - *(void *)a1) >> 3);
    do
    {
      unint64_t v5 = v4 >> 1;
      long long v6 = &v2[5 * (v4 >> 1)];
      unint64_t v7 = v6[3] + *v6;
      unint64_t v8 = v6 + 5;
      v4 += ~(v4 >> 1);
      if (v7 <= a2) {
        uint64_t v2 = v8;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  if (v2 == v3) {
    return 0;
  }
  if (a2 - *v2 >= v2[3]) {
    return 0;
  }
  return v2;
}

void CSCppCoreFileMetadata::~CSCppCoreFileMetadata(CSCppCoreFileMetadata *this)
{
  *(void *)this = &unk_1F12C92D8;
  close(*((_DWORD *)this + 2));
  uint64_t v2 = (CSCppCoreFileMetadata *)*((void *)this + 6);
  if (v2 != (CSCppCoreFileMetadata *)((char *)this + 56))
  {
    uint64_t v3 = (ipc_space_t *)MEMORY[0x1E4F14960];
    do
    {
      mach_port_deallocate(*v3, *((_DWORD *)v2 + 8));
      unint64_t v4 = (CSCppCoreFileMetadata *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          unint64_t v4 = *(CSCppCoreFileMetadata **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (CSCppCoreFileMetadata *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != (CSCppCoreFileMetadata *)((char *)this + 56));
  }
  if (*((unsigned char *)this + 112))
  {
    unint64_t v8 = (void **)((char *)this + 88);
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)this + 48, *((void **)this + 7));
  unint64_t v7 = (void *)*((void *)this + 2);
  if (v7)
  {
    *((void *)this + 3) = v7;
    operator delete(v7);
  }
}

uint64_t CSCppCoreFileMetadata::thread_get_state(CSCppCoreFileMetadata *this, unsigned int a2, int a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (char *)*((void *)this + 7);
  if (!v5) {
    return 4;
  }
  unint64_t v9 = (char *)this + 56;
  do
  {
    unsigned int v10 = *((_DWORD *)v5 + 8);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      unint64_t v12 = (char **)v5;
    }
    else {
      unint64_t v12 = (char **)(v5 + 8);
    }
    if (v11) {
      unint64_t v9 = v5;
    }
    unint64_t v5 = *v12;
  }
  while (*v12);
  if (v9 == (char *)this + 56 || *((_DWORD *)v9 + 8) > a2) {
    return 4;
  }
  uint64_t v15 = *((void *)this + 5);
  uint64_t v18 = *((void *)v9 + 7);
  uint64_t v17 = (int *)(v9 + 56);
  uint64_t v16 = v18;
  if (v18)
  {
    uint64_t v19 = v17;
    do
    {
      int v20 = *(_DWORD *)(v16 + 32);
      BOOL v21 = v20 < a3;
      if (v20 >= a3) {
        CFURLRef v22 = (uint64_t *)v16;
      }
      else {
        CFURLRef v22 = (uint64_t *)(v16 + 8);
      }
      if (!v21) {
        uint64_t v19 = (int *)v16;
      }
      uint64_t v16 = *v22;
    }
    while (*v22);
    if (v19 != v17 && v19[8] <= a3)
    {
      long long v79 = 0uLL;
      uint64_t v80 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v79, *((const void **)v19 + 5), *((void *)v19 + 6), *((void *)v19 + 6) - *((void *)v19 + 5));
      goto LABEL_93;
    }
  }
  if (!CSArchitectureIsArm64(*((void *)this + 5)) && !CSArchitectureMatchesArchitecture(v15, 0x200000CuLL))
  {
    if (CSArchitectureIsX86_64(v15))
    {
      if (a3 == 7)
      {
        uint64_t v60 = *(void *)v17;
        if (!*(void *)v17) {
          return 4;
        }
        long long v61 = v17;
        do
        {
          int v62 = *(_DWORD *)(v60 + 32);
          BOOL v63 = v62 < 4;
          if (v62 >= 4) {
            UUID v64 = (uint64_t *)v60;
          }
          else {
            UUID v64 = (uint64_t *)(v60 + 8);
          }
          if (!v63) {
            long long v61 = (int *)v60;
          }
          uint64_t v60 = *v64;
        }
        while (*v64);
        if (v61 == v17) {
          return 4;
        }
        if (v61[8] > 4) {
          return 4;
        }
        std::string v66 = v61 + 10;
        uint64_t v65 = *((void *)v61 + 5);
        if (v66[1] - v65 != 168) {
          return 4;
        }
        char v37 = 0;
        uint64_t v67 = 0;
        *(void *)uint64_t v85 = 0x2A00000004;
        *(_OWORD *)&v85[120] = *(_OWORD *)(v65 + 112);
        *(_OWORD *)&v85[136] = *(_OWORD *)(v65 + 128);
        *(_OWORD *)&v85[152] = *(_OWORD *)(v65 + 144);
        *(void *)&v85[168] = *(void *)(v65 + 160);
        *(_OWORD *)&v85[56] = *(_OWORD *)(v65 + 48);
        *(_OWORD *)&v85[72] = *(_OWORD *)(v65 + 64);
        *(_OWORD *)&v85[88] = *(_OWORD *)(v65 + 80);
        *(_OWORD *)&v85[104] = *(_OWORD *)(v65 + 96);
        *(_OWORD *)&v85[8] = *(_OWORD *)v65;
        *(_OWORD *)&v85[24] = *(_OWORD *)(v65 + 16);
        *(_OWORD *)&v85[40] = *(_OWORD *)(v65 + 32);
        uint64_t v82 = 0;
        std::vector<std::string> v83 = 0;
        uint64_t v84 = 0;
        do
        {
          if (v37 >= v84)
          {
            unint64_t v68 = (unint64_t)v82;
            unint64_t v69 = (unsigned char *)(v37 - v82);
            uint64_t v70 = v37 - v82 + 1;
            if (v70 < 0) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v71 = v84 - v82;
            if (2 * (v84 - v82) > (unint64_t)v70) {
              uint64_t v70 = 2 * v71;
            }
            if (v71 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v72 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v72 = v70;
            }
            if (v72) {
              uint64_t v73 = (char *)operator new(v72);
            }
            else {
              uint64_t v73 = 0;
            }
            unint64_t v74 = &v69[(void)v73];
            long long v75 = &v69[(void)v73];
            *long long v75 = v85[v67];
            long long v76 = v75 + 1;
            if (v37 != (char *)v68)
            {
              unint64_t v77 = &v37[~v68];
              do
              {
                char v78 = *--v37;
                (v77--)[(void)v73] = v78;
              }
              while (v37 != (char *)v68);
              char v37 = v82;
              unint64_t v74 = v73;
            }
            uint64_t v82 = v74;
            uint64_t v84 = &v73[v72];
            if (v37) {
              operator delete(v37);
            }
            char v37 = v76;
          }
          else
          {
            *v37++ = v85[v67];
          }
          std::vector<std::string> v83 = v37;
          ++v67;
        }
        while (v67 != 176);
        goto LABEL_74;
      }
      if (a3 == 4)
      {
        uint64_t v50 = *(void *)v17;
        if (*(void *)v17)
        {
          unint64_t v51 = v17;
          do
          {
            int v52 = *(_DWORD *)(v50 + 32);
            BOOL v53 = v52 < 7;
            if (v52 >= 7) {
              uint64_t v54 = (uint64_t *)v50;
            }
            else {
              uint64_t v54 = (uint64_t *)(v50 + 8);
            }
            if (!v53) {
              unint64_t v51 = (int *)v50;
            }
            uint64_t v50 = *v54;
          }
          while (*v54);
          if (v51 != v17 && v51[8] <= 7)
          {
            unint64_t v57 = v51 + 10;
            long long v56 = (_DWORD *)*((void *)v51 + 5);
            uint64_t v55 = v57[1];
            if (v55 - (void)v56 == 176 && *v56 == 4 && v55 - (void)(v56 + 2) == 168)
            {
              memset(v85, 0, 24);
              std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(v85, v56 + 2, v55, 0xA8uLL);
              goto LABEL_42;
            }
          }
        }
      }
    }
    return 4;
  }
  if (a3 == 1)
  {
    uint64_t v31 = *(void *)v17;
    if (!*(void *)v17) {
      return 4;
    }
    char v32 = v17;
    do
    {
      int v33 = *(_DWORD *)(v31 + 32);
      BOOL v34 = v33 < 6;
      if (v33 >= 6) {
        uint64_t v35 = (uint64_t *)v31;
      }
      else {
        uint64_t v35 = (uint64_t *)(v31 + 8);
      }
      if (!v34) {
        char v32 = (int *)v31;
      }
      uint64_t v31 = *v35;
    }
    while (*v35);
    if (v32 == v17) {
      return 4;
    }
    if (v32[8] > 6) {
      return 4;
    }
    unsigned int v36 = (const void *)*((void *)v32 + 5);
    if (*((void *)v32 + 6) - (void)v36 != 272) {
      return 4;
    }
    *(void *)uint64_t v85 = 0x4400000006;
    memcpy(&v85[8], v36, 0x110uLL);
    char v37 = 0;
    uint64_t v38 = 0;
    uint64_t v82 = 0;
    std::vector<std::string> v83 = 0;
    uint64_t v84 = 0;
    do
    {
      if (v37 >= v84)
      {
        unint64_t v39 = (unint64_t)v82;
        uint64_t v40 = (unsigned char *)(v37 - v82);
        uint64_t v41 = v37 - v82 + 1;
        if (v41 < 0) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v42 = v84 - v82;
        if (2 * (v84 - v82) > (unint64_t)v41) {
          uint64_t v41 = 2 * v42;
        }
        if (v42 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v43 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v43 = v41;
        }
        if (v43) {
          uint64_t v44 = (char *)operator new(v43);
        }
        else {
          uint64_t v44 = 0;
        }
        std::string::size_type v45 = &v40[(void)v44];
        uint64_t v46 = &v40[(void)v44];
        unsigned char *v46 = v85[v38];
        uint64_t v47 = v46 + 1;
        if (v37 != (char *)v39)
        {
          uint64_t v48 = &v37[~v39];
          do
          {
            char v49 = *--v37;
            (v48--)[(void)v44] = v49;
          }
          while (v37 != (char *)v39);
          char v37 = v82;
          std::string::size_type v45 = v44;
        }
        uint64_t v82 = v45;
        uint64_t v84 = &v44[v43];
        if (v37) {
          operator delete(v37);
        }
        char v37 = v47;
      }
      else
      {
        *v37++ = v85[v38];
      }
      std::vector<std::string> v83 = v37;
      ++v38;
    }
    while (v38 != 280);
LABEL_74:
    *(void *)&long long v79 = v82;
    *((void *)&v79 + 1) = v37;
    uint64_t v80 = v84;
    goto LABEL_93;
  }
  if (a3 != 6) {
    return 4;
  }
  uint64_t v23 = *(void *)v17;
  if (!*(void *)v17) {
    return 4;
  }
  unint64_t v24 = v17;
  do
  {
    int v25 = *(_DWORD *)(v23 + 32);
    BOOL v26 = v25 < 1;
    if (v25 >= 1) {
      char v27 = (uint64_t *)v23;
    }
    else {
      char v27 = (uint64_t *)(v23 + 8);
    }
    if (!v26) {
      unint64_t v24 = (int *)v23;
    }
    uint64_t v23 = *v27;
  }
  while (*v27);
  if (v24 == v17) {
    return 4;
  }
  if (v24[8] > 1) {
    return 4;
  }
  char v30 = v24 + 10;
  unint64_t v29 = (_DWORD *)*((void *)v24 + 5);
  uint64_t v28 = v30[1];
  if (v28 - (void)v29 != 280 || *v29 != 6 || v28 - (void)(v29 + 2) != 272) {
    return 4;
  }
  memset(v85, 0, 24);
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(v85, v29 + 2, v28, 0x110uLL);
LABEL_42:
  long long v79 = *(_OWORD *)v85;
  uint64_t v80 = *(char **)&v85[16];
LABEL_93:
  char v81 = 1;
  uint64_t v58 = (void *)v79;
  unint64_t v59 = *((void *)&v79 + 1) - v79;
  if (((*((void *)&v79 + 1) - (void)v79) & 3) != 0)
  {
    uint64_t v13 = 5;
  }
  else if (v59 <= 4 * (unint64_t)*a5)
  {
    memcpy(a4, (const void *)v79, *((void *)&v79 + 1) - v79);
    uint64_t v13 = 0;
    *a5 = v59 >> 2;
  }
  else
  {
    uint64_t v13 = 4;
  }
  if (v58)
  {
    *((void *)&v79 + 1) = v58;
    operator delete(v58);
  }
  return v13;
}

void sub_1B9034DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CSCppCoreFileMetadata::task_threads(CSCppCoreFileMetadata *this, unsigned int **a2, unsigned int *a3)
{
  unint64_t v3 = *((void *)this + 8);
  if (!v3) {
    return 4;
  }
  mach_vm_address_t address = 0;
  unint64_t v7 = (ipc_space_t *)MEMORY[0x1E4F14960];
  uint64_t v8 = mach_vm_allocate(*MEMORY[0x1E4F14960], &address, 4 * v3, 1);
  if (!v8)
  {
    unint64_t v9 = (unsigned int *)address;
    unsigned int v10 = (CSCppCoreFileMetadata *)*((void *)this + 6);
    if (v10 != (CSCppCoreFileMetadata *)((char *)this + 56))
    {
      do
      {
        v9[*((unsigned int *)v10 + 10)] = *((_DWORD *)v10 + 8);
        BOOL v11 = (CSCppCoreFileMetadata *)*((void *)v10 + 1);
        if (v11)
        {
          do
          {
            unint64_t v12 = v11;
            BOOL v11 = *(CSCppCoreFileMetadata **)v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            unint64_t v12 = (CSCppCoreFileMetadata *)*((void *)v10 + 2);
            BOOL v13 = *(void *)v12 == (void)v10;
            unsigned int v10 = v12;
          }
          while (!v13);
        }
        unsigned int v10 = v12;
      }
      while (v12 != (CSCppCoreFileMetadata *)((char *)this + 56));
    }
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    while (1)
    {
      uint64_t v16 = mach_port_mod_refs(*v7, v9[v14], 4u, 1);
      if (v16) {
        break;
      }
      uint64_t v14 = ++v15;
      if (v3 <= v15)
      {
        uint64_t v8 = 0;
        *a2 = v9;
        *a3 = v3;
        return v8;
      }
    }
    uint64_t v8 = v16;
    if (v15)
    {
      uint64_t v18 = v15;
      do
      {
        mach_port_name_t v19 = *v9++;
        mach_port_deallocate(*v7, v19);
        --v18;
      }
      while (v18);
    }
  }
  return v8;
}

void parse_task_crashinfo_note(char *a1@<X0>, const note_command *a2@<X1>, unsigned char *a3@<X8>)
{
  BOOL v6 = (void *)CSCppFileMemory::CSCppFileMemory(v112, a1, a2->offset);
  uint64_t v7 = CSCppFileMemory::bytes_at(v6, a2->offset, a2->size);
  uint64_t v9 = v7;
  if (!v7 || v8 <= 0x28B || *(_DWORD *)v7 != 2)
  {
    *a3 = 0;
    a3[440] = 0;
    goto LABEL_25;
  }
  LOBYTE(v109) = 0;
  char v111 = 0;
  unint64_t v10 = *(void *)(v7 + 44);
  if (v10 != -1)
  {
    CSCppFileMemory::CSCppFileMemory(&v65, a1, *(void *)(v7 + 44));
    read_path_from_offset_in_cpp_memory((uint64_t)&v65, v10, &__p);
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&v109, (__n128 *)&__p);
    if (v108)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v108 = 0;
  unint64_t v11 = *(void *)(v9 + 52);
  if (v11 != -1)
  {
    CSCppFileMemory::CSCppFileMemory(&v65, a1, *(void *)(v9 + 52));
    read_path_from_offset_in_cpp_memory((uint64_t)&v65, v11, &v105);
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__p, (__n128 *)&v105);
    if (v106)
    {
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v105.__r_.__value_.__l.__data_);
      }
    }
  }
  v105.__r_.__value_.__s.__data_[0] = 0;
  char v106 = 0;
  unint64_t v12 = *(void *)(v9 + 60);
  if (v12 != -1)
  {
    CSCppFileMemory::CSCppFileMemory(&v65, a1, *(void *)(v9 + 60));
    read_path_from_offset_in_cpp_memory((uint64_t)&v65, v12, &v103);
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&v105, (__n128 *)&v103);
    if (v104)
    {
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v103.__r_.__value_.__l.__data_);
      }
    }
  }
  v103.__r_.__value_.__s.__data_[0] = 0;
  char v104 = 0;
  unint64_t v13 = *(void *)(v9 + 68);
  if (v13 != -1)
  {
    CSCppFileMemory::CSCppFileMemory(&v65, a1, *(void *)(v9 + 68));
    read_path_from_offset_in_cpp_memory((uint64_t)&v65, v13, &v101);
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&v103, (__n128 *)&v101);
    if (v102)
    {
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v101.__r_.__value_.__l.__data_);
      }
    }
  }
  v101.__r_.__value_.__s.__data_[0] = 0;
  char v102 = 0;
  unint64_t v14 = *(void *)(v9 + 196);
  if (!v14 || (unint64_t v15 = *(void *)(v9 + 188), v15 == -1))
  {
LABEL_50:
    v98.n128_u8[0] = 0;
    char v100 = 0;
    unint64_t v31 = *(void *)(v9 + 212);
    if (v31)
    {
      unint64_t v32 = *(void *)(v9 + 204);
      if (v32 != -1)
      {
        if (!is_mul_ok(v31, 0x38uLL))
        {
          *a3 = 0;
          a3[440] = 0;
LABEL_97:
          if (v100 && v98.n128_u64[0])
          {
            v98.n128_u64[1] = v98.n128_u64[0];
            operator delete((void *)v98.n128_u64[0]);
          }
          if (v102 && v101.__r_.__value_.__r.__words[0])
          {
            v101.__r_.__value_.__l.__size_ = v101.__r_.__value_.__r.__words[0];
            operator delete(v101.__r_.__value_.__l.__data_);
          }
          goto LABEL_103;
        }
        BOOL v63 = a3;
        unint64_t v33 = 56 * v31;
        CSCppFileMemory::CSCppFileMemory((uint64_t)&v65, a1, v32, 56 * v31);
        uint64_t v34 = CSCppFileMemory::bytes_at(&v65, v32, v33);
        if (v34 && v35 >= v33)
        {
          uint64_t v64 = v34;
          __n128 v96 = 0uLL;
          uint64_t v97 = 0;
          std::optional<std::vector<unsigned long long>>::operator=[abi:ne180100]<std::vector<unsigned long long>,void>((uint64_t)&v98, &v96);
          if (v96.n128_u64[0])
          {
            v96.n128_u64[1] = v96.n128_u64[0];
            operator delete((void *)v96.n128_u64[0]);
          }
          std::vector<CS_vm_object_query_data_t>::reserve((void **)&v98, *(void *)(v9 + 212));
          uint64_t v36 = v64;
          if (*(void *)(v9 + 212))
          {
            unint64_t v37 = 0;
            unint64_t v38 = v98.n128_u64[1];
            do
            {
              unint64_t v39 = (uint64_t *)(v36 + 56 * v37);
              uint64_t v40 = *v39;
              uint64_t v41 = v39[1];
              uint64_t v42 = v39[2];
              uint64_t v43 = v39[3];
              uint64_t v44 = v39[4];
              uint64_t v45 = v39[5];
              char v46 = v39[6] & 0x3F;
              if (v38 >= (unint64_t)v99)
              {
                uint64_t v47 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v38 - v98.n128_u64[0]) >> 3);
                unint64_t v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) > 0x492492492492492) {
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                }
                if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v99[-v98.n128_u64[0]] >> 3) > v48) {
                  unint64_t v48 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v99[-v98.n128_u64[0]] >> 3);
                }
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v99[-v98.n128_u64[0]] >> 3)) >= 0x249249249249249) {
                  unint64_t v49 = 0x492492492492492;
                }
                else {
                  unint64_t v49 = v48;
                }
                if (v49) {
                  data = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CS_vm_object_query_data_t>>((uint64_t)&v99, v49);
                }
                else {
                  data = 0;
                }
                unint64_t v51 = &data[56 * v47];
                *(void *)unint64_t v51 = v40;
                *((void *)v51 + 1) = v41;
                *((void *)v51 + 2) = v42;
                *((void *)v51 + 3) = v43;
                *((void *)v51 + 4) = v44;
                *((void *)v51 + 5) = v45;
                v51[48] = v46;
                *(_DWORD *)(v51 + 49) = 0;
                *((_DWORD *)v51 + 13) = 0;
                int v52 = (char *)v98.n128_u64[1];
                unint64_t v53 = v98.n128_u64[0];
                unint64_t v54 = (unint64_t)v51;
                if (v98.n128_u64[1] != v98.n128_u64[0])
                {
                  do
                  {
                    long long v55 = *(_OWORD *)(v52 - 56);
                    long long v56 = *(_OWORD *)(v52 - 40);
                    long long v57 = *(_OWORD *)(v52 - 24);
                    *(void *)(v54 - 8) = *((void *)v52 - 1);
                    *(_OWORD *)(v54 - 24) = v57;
                    *(_OWORD *)(v54 - 40) = v56;
                    *(_OWORD *)(v54 - 56) = v55;
                    v54 -= 56;
                    v52 -= 56;
                  }
                  while (v52 != (char *)v53);
                  int v52 = (char *)v53;
                }
                unint64_t v38 = (unint64_t)(v51 + 56);
                v98.n128_u64[0] = v54;
                v98.n128_u64[1] = (unint64_t)(v51 + 56);
                long long v99 = &data[56 * v49];
                if (v52) {
                  operator delete(v52);
                }
                uint64_t v36 = v64;
              }
              else
              {
                *(void *)unint64_t v38 = v40;
                *(void *)(v38 + 8) = v41;
                *(void *)(v38 + 16) = v42;
                *(void *)(v38 + 24) = v43;
                *(void *)(v38 + 32) = v44;
                *(void *)(v38 + 40) = v45;
                *(unsigned char *)(v38 + 48) = v46;
                *(_DWORD *)(v38 + 49) = 0;
                *(_DWORD *)(v38 + 52) = 0;
                v38 += 56;
              }
              v98.n128_u64[1] = v38;
              ++v37;
            }
            while (v37 < *(void *)(v9 + 212));
          }
        }
        CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
        a3 = v63;
      }
    }
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v65, &v109);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v67, (long long *)&__p);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v69, (long long *)&v105);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v71, (long long *)&v103);
    int v73 = *(_DWORD *)(v9 + 104);
    uint64_t v74 = *(void *)(v9 + 156);
    long long v75 = *(_OWORD *)(v9 + 172);
    uint64_t v76 = *(void *)(v9 + 12);
    long long v77 = *(_OWORD *)(v9 + 28);
    uint64_t v78 = *(void *)(v9 + 84);
    uint64_t v79 = *(void *)(v9 + 92);
    int v80 = *(_DWORD *)(v9 + 100);
    std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100]((uint64_t)v81, (uint64_t)&v101);
    std::__optional_copy_base<std::vector<CS_vm_object_query_data_t>,false>::__optional_copy_base[abi:ne180100]((uint64_t)v83, (uint64_t)&v98);
    long long v58 = *(_OWORD *)(v9 + 500);
    long long v85 = *(_OWORD *)(v9 + 484);
    long long v86 = v58;
    long long v59 = *(_OWORD *)(v9 + 532);
    long long v87 = *(_OWORD *)(v9 + 516);
    long long v88 = v59;
    long long v60 = *(_OWORD *)(v9 + 564);
    long long v89 = *(_OWORD *)(v9 + 548);
    long long v90 = v60;
    long long v61 = *(_OWORD *)(v9 + 596);
    long long v91 = *(_OWORD *)(v9 + 580);
    long long v92 = v61;
    long long v62 = *(_OWORD *)(v9 + 628);
    long long v93 = *(_OWORD *)(v9 + 612);
    long long v94 = v62;
    uint64_t v95 = *(void *)(v9 + 644);
    std::__optional_destruct_base<CSCppCoreFileTaskCrashinfo,false>::__optional_destruct_base[abi:ne180100]<CSCppCoreFileTaskCrashinfo>((uint64_t)a3, (long long *)&v65);
    if (v84 && v83[0])
    {
      v83[1] = v83[0];
      operator delete(v83[0]);
    }
    if (v82 && v81[0])
    {
      v81[1] = v81[0];
      operator delete(v81[0]);
    }
    if (v72 && SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    if (v70 && SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (v68 && SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if (v66 && SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    goto LABEL_97;
  }
  if (!(v14 >> 61))
  {
    uint64_t v16 = a3;
    unint64_t v17 = 8 * v14;
    CSCppFileMemory::CSCppFileMemory((uint64_t)&v65, a1, *(void *)(v9 + 188), 8 * v14);
    uint64_t v19 = CSCppFileMemory::bytes_at(&v65, v15, v17);
    if (v19 && v18 >= v17)
    {
      __n128 v98 = 0uLL;
      long long v99 = 0;
      std::optional<std::vector<unsigned long long>>::operator=[abi:ne180100]<std::vector<unsigned long long>,void>((uint64_t)&v101, &v98);
      if (v98.n128_u64[0])
      {
        v98.n128_u64[1] = v98.n128_u64[0];
        operator delete((void *)v98.n128_u64[0]);
      }
      std::vector<unsigned long long>::reserve((void **)&v101.__r_.__value_.__l.__data_, *(void *)(v9 + 196));
      if (*(void *)(v9 + 196))
      {
        unint64_t v20 = 0;
        size = (void *)v101.__r_.__value_.__l.__size_;
        do
        {
          if ((unint64_t)size >= v101.__r_.__value_.__r.__words[2])
          {
            uint64_t v23 = (void *)v101.__r_.__value_.__r.__words[0];
            uint64_t v24 = (uint64_t)((uint64_t)size - v101.__r_.__value_.__r.__words[0]) >> 3;
            unint64_t v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 61) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            int64_t v26 = v101.__r_.__value_.__r.__words[2] - v101.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v101.__r_.__value_.__r.__words[2] - v101.__r_.__value_.__r.__words[0]) >> 2 > v25) {
              unint64_t v25 = v26 >> 2;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v25;
            }
            if (v27)
            {
              uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v101.__r_.__value_.__r.__words[2], v27);
              size = (void *)v101.__r_.__value_.__l.__size_;
              uint64_t v23 = (void *)v101.__r_.__value_.__r.__words[0];
            }
            else
            {
              uint64_t v28 = 0;
            }
            unint64_t v29 = &v28[8 * v24];
            *(void *)unint64_t v29 = *(void *)(v19 + 8 * v20);
            std::string::size_type v22 = (std::string::size_type)(v29 + 8);
            while (size != v23)
            {
              uint64_t v30 = *--size;
              *((void *)v29 - 1) = v30;
              v29 -= 8;
            }
            v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
            v101.__r_.__value_.__l.__size_ = v22;
            v101.__r_.__value_.__r.__words[2] = (std::string::size_type)&v28[8 * v27];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            void *size = *(void *)(v19 + 8 * v20);
            std::string::size_type v22 = (std::string::size_type)(size + 1);
          }
          v101.__r_.__value_.__l.__size_ = v22;
          ++v20;
          size = (void *)v22;
        }
        while (v20 < *(void *)(v9 + 196));
      }
    }
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    a3 = v16;
    goto LABEL_50;
  }
  *a3 = 0;
  a3[440] = 0;
LABEL_103:
  if (v104 && SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  if (v106 && SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (v108 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v111 && v110 < 0) {
    operator delete((void *)v109);
  }
LABEL_25:
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v112);
}

void sub_1B9035794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a13);
  if (LOBYTE(STACK[0x208]) && a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  if (LOBYTE(STACK[0x228]))
  {
    uint64_t v74 = (void *)STACK[0x210];
    if (STACK[0x210])
    {
      STACK[0x218] = (unint64_t)v74;
      operator delete(v74);
    }
  }
  if (LOBYTE(STACK[0x248]) && SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (LOBYTE(STACK[0x268]) && SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (LOBYTE(STACK[0x288]) && SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (*(unsigned char *)(v72 - 216))
  {
    if (*(char *)(v72 - 217) < 0) {
      operator delete(*(void **)(v72 - 240));
    }
  }
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)(v72 - 208));
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::vector<unsigned long long>>::operator=[abi:ne180100]<std::vector<unsigned long long>,void>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    std::vector<CSSymbolicatorAotImageInfo>::__move_assign(a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    BOOL v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<CS_vm_object_query_data_t>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 56;
    data = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CS_vm_object_query_data_t>>(v3, a2);
    uint64_t v7 = &data[56 * v5];
    uint64_t v9 = &data[56 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 56);
        long long v14 = *(_OWORD *)(v10 - 40);
        long long v15 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v15;
        *(_OWORD *)(v12 - 40) = v14;
        *(_OWORD *)(v12 - 56) = v13;
        v12 -= 56;
        v10 -= 56;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_name(CSCppCoreFileDarwinMetadata *this, const char **a2)
{
  if (!*((unsigned char *)this + 560)) {
    return 4;
  }
  uint64_t result = 4;
  if (a2 && *((unsigned char *)this + 144))
  {
    unint64_t v4 = (char *)this + 120;
    if (*((char *)this + 143) < 0) {
      unint64_t v4 = *(const char **)v4;
    }
    uint64_t result = 0;
    *a2 = v4;
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_path(CSCppCoreFileDarwinMetadata *this, const char **a2)
{
  if (!*((unsigned char *)this + 560)) {
    return 4;
  }
  uint64_t result = 4;
  if (a2 && *((unsigned char *)this + 176))
  {
    unint64_t v4 = (char *)this + 152;
    if (*((char *)this + 175) < 0) {
      unint64_t v4 = *(const char **)v4;
    }
    uint64_t result = 0;
    *a2 = v4;
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_parent_proc_name(CSCppCoreFileDarwinMetadata *this, const char **a2)
{
  if (!*((unsigned char *)this + 560)) {
    return 4;
  }
  uint64_t result = 4;
  if (a2 && *((unsigned char *)this + 208))
  {
    unint64_t v4 = (char *)this + 184;
    if (*((char *)this + 207) < 0) {
      unint64_t v4 = *(const char **)v4;
    }
    uint64_t result = 0;
    *a2 = v4;
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_parent_proc_path(CSCppCoreFileDarwinMetadata *this, const char **a2)
{
  if (!*((unsigned char *)this + 560)) {
    return 4;
  }
  uint64_t result = 4;
  if (a2 && *((unsigned char *)this + 240))
  {
    unint64_t v4 = (char *)this + 216;
    if (*((char *)this + 239) < 0) {
      unint64_t v4 = *(const char **)v4;
    }
    uint64_t result = 0;
    *a2 = v4;
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_pid(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((_DWORD *)this + 70);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ppid(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((_DWORD *)this + 71);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_starttime_sec(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 36);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_starttime_usec(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 37);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_userstack(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 38);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_flags(CSCppCoreFileDarwinMetadata *this, unsigned int *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((_DWORD *)this + 78);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_argslen(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((_DWORD *)this + 79);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_argc(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((_DWORD *)this + 80);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_dirty_flags(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((_DWORD *)this + 62);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_dyld_all_image_infos_addr(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 32);
    }
  }
  return result;
}

__n128 CSCppCoreFileDarwinMetadata::get_dyld_shared_cache_range(uint64_t a1, __n128 *a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a1 + 560))
    {
      __n128 result = *(__n128 *)(a1 + 264);
      *a2 = result;
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_architecture(uint64_t a1, void *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*(unsigned char *)(a1 + 560))
    {
      uint64_t result = 0;
      *a2 = *(void *)(a1 + 40);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_internal(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 49);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_internal_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 50);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_iokit_mapped(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 51);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_alternate_accounting(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 52);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_alternate_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 53);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_purgable_nonvolatile(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 54);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_purgable_nonvolatile_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 55);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_page_table(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 56);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_phys_footprint(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 57);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_phys_footprint_lifetime_max(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 58);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_network_nonvolatile(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 59);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_network_nonvolatile_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 60);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_wired_mem(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 61);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_tagged_footprint(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 62);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_tagged_footprint_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 63);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_media_footprint(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 64);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_media_footprint_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 65);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_graphics_footprint(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 66);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_graphics_footprint_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 67);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_neural_footprint(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 68);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_neural_footprint_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    if (*((unsigned char *)this + 560))
    {
      uint64_t result = 0;
      *a2 = *((void *)this + 69);
    }
  }
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_name(CSCppCoreFileExclavesMetadata *this, const char **a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = "";
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_path(CSCppCoreFileExclavesMetadata *this, const char **a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = "";
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_parent_proc_name(CSCppCoreFileExclavesMetadata *this, const char **a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = "";
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_parent_proc_path(CSCppCoreFileExclavesMetadata *this, const char **a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = "";
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_pid(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  int v4 = *((_DWORD *)this + 32);
  if (v4 < 0) {
    int v4 = -v4;
  }
  *a2 = v4;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_flags(CSCppCoreFileExclavesMetadata *this, unsigned int *a2)
{
  uint64_t result = 4;
  if (a2)
  {
    *a2 = 4;
    return 0;
  }
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ppid(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_starttime_sec(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_starttime_usec(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_userstack(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_argslen(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_argc(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_dirty_flags(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_dyld_all_image_infos_addr(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_dyld_shared_cache_range()
{
  return 5;
}

uint64_t CSCppCoreFileExclavesMetadata::get_architecture(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = *(void *)(a1 + 40);
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_internal(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_internal_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_iokit_mapped(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_alternate_accounting(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_alternate_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_purgable_nonvolatile(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_purgable_nonvolatile_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_page_table(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_phys_footprint(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_phys_footprint_lifetime_max(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_network_nonvolatile(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_network_nonvolatile_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_wired_mem(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_tagged_footprint(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_tagged_footprint_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_media_footprint(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_media_footprint_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_graphics_footprint(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_graphics_footprint_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_neural_footprint(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_neural_footprint_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileMetadata::has_info_for_memory_analysis(CSCppCoreFileMetadata *this)
{
  return *((unsigned __int8 *)this + 112);
}

BOOL CSCppCoreFileDarwinMetadata::has_info_for_memory_analysis(CSCppCoreFileDarwinMetadata *this)
{
  return *((unsigned char *)this + 112) && *((unsigned char *)this + 560) != 0;
}

uint64_t CSCppCoreFileExclavesMetadata::has_info_for_memory_analysis(CSCppCoreFileExclavesMetadata *this)
{
  return *((unsigned __int8 *)this + 112);
}

void parse_vm_info_note(const char *a1@<X0>, const note_command *a2@<X1>, unsigned char *a3@<X8>)
{
  CSCppFileMemory::CSCppFileMemory(v92, a1, a2->offset);
  uint64_t v6 = CSCppFileMemory::bytes_at(v92, a2->offset, a2->size);
  if (v6) {
    BOOL v8 = v7 >= 0x10;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8 || *(_DWORD *)v6 != 2) {
    goto LABEL_13;
  }
  unint64_t v9 = *(void *)(v6 + 8);
  uint64_t offset = a2->offset;
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v92);
  if (135 * v9 + 16 > a2->size)
  {
    *a3 = 0;
    a3[24] = 0;
    return;
  }
  CSCppFileMemory::CSCppFileMemory(v92, a1, offset + 16);
  uint64_t v11 = CSCppFileMemory::bytes_at(v92, offset + 16, 135 * v9);
  uint64_t v13 = v11;
  if (v11 && v12 >= 135 * v9)
  {
    long long v89 = 0;
    long long v90 = 0;
    uint64_t v91 = 0;
    LOBYTE(v88) = 0;
    if (v9)
    {
      unsigned int v15 = v88;
      uint64_t v16 = (unsigned int *)(v11 + 16);
      char v17 = 1;
      unint64_t v18 = v9;
      do
      {
        uint64_t v19 = v16;
        if ((v17 & 1) == 0)
        {
          if (v15 >= *v16) {
            uint64_t v19 = &v88;
          }
          else {
            uint64_t v19 = v16;
          }
        }
        char v17 = 0;
        unsigned int v15 = *v19;
        unsigned int v88 = *v19;
        uint64_t v16 = (unsigned int *)((char *)v16 + 135);
        --v18;
      }
      while (v18);
      uint64_t v20 = v15 + 1;
      if (v15 != -1)
      {
        do
        {
          std::string __p = 0;
          long long v86 = 0;
          uint64_t v87 = 0;
          std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::push_back[abi:ne180100]((uint64_t *)&v89, (uint64_t)&__p);
          if (__p)
          {
            long long v86 = __p;
            operator delete(__p);
          }
          --v20;
        }
        while (v20);
      }
      uint64_t v72 = a1;
      int v73 = a3;
      uint64_t v21 = 0;
      if (v9 <= 1) {
        uint64_t v22 = 1;
      }
      else {
        uint64_t v22 = v9;
      }
      do
      {
        uint64_t v23 = v13 + 135 * v21;
        uint64_t v24 = &v89[3 * *(unsigned int *)(v23 + 16)];
        int64_t v26 = (void **)(v24 + 1);
        unint64_t v25 = (uint64_t *)v24[1];
        uint64_t v28 = v24 + 2;
        unint64_t v27 = v24[2];
        if ((unint64_t)v25 >= v27)
        {
          uint64_t v30 = (uint64_t)((uint64_t)v25 - *v24) >> 3;
          if ((unint64_t)(v30 + 1) >> 61) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v31 = v27 - *v24;
          uint64_t v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
            uint64_t v32 = v30 + 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v32;
          }
          if (v33) {
            uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v28, v33);
          }
          else {
            uint64_t v34 = 0;
          }
          unint64_t v35 = &v34[8 * v30];
          *(void *)unint64_t v35 = v23;
          unint64_t v29 = v35 + 8;
          uint64_t v36 = (char *)*v26;
          unint64_t v37 = (char *)*v24;
          if (*v26 != (void *)*v24)
          {
            do
            {
              uint64_t v38 = *((void *)v36 - 1);
              v36 -= 8;
              *((void *)v35 - 1) = v38;
              v35 -= 8;
            }
            while (v36 != v37);
            uint64_t v36 = (char *)*v24;
          }
          *uint64_t v24 = (unint64_t)v35;
          *int64_t v26 = v29;
          *uint64_t v28 = &v34[8 * v33];
          if (v36) {
            operator delete(v36);
          }
        }
        else
        {
          *unint64_t v25 = v23;
          unint64_t v29 = v25 + 1;
        }
        *int64_t v26 = v29;
        ++v21;
      }
      while (v21 != v22);
      uint64_t v40 = v89;
      unint64_t v39 = v90;
      if (v89 == v90) {
        goto LABEL_60;
      }
      do
      {
        unint64_t v41 = *v40;
        uint64_t v42 = (unint64_t **)v40[1];
        v40 += 3;
        unint64_t v43 = 126 - 2 * __clz((uint64_t)((uint64_t)v42 - v41) >> 3);
        if (v42 == (unint64_t **)v41) {
          uint64_t v44 = 0;
        }
        else {
          uint64_t v44 = v43;
        }
        std::__introsort<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *,false>(v41, v42, v44, 1);
      }
      while (v40 != v39);
      uint64_t v45 = v89;
      uint64_t v40 = v90;
      if (v89 == v90)
      {
LABEL_60:
        unint64_t v49 = v40;
LABEL_61:
        std::string __p = 0;
        long long v86 = 0;
        uint64_t v87 = 0;
        p_p = 0;
        std::vector<std::string> v83 = 0;
        char v84 = 0;
        uint64_t v79 = 0;
        int v80 = 0;
        for (uint64_t i = 0; v49 != v40; v49 += 3)
        {
          unint64_t v50 = *v49;
          unint64_t v51 = v83;
          if (v83 >= v84)
          {
            uint64_t v53 = (v83 - (unsigned char *)p_p) >> 3;
            if ((unint64_t)(v53 + 1) >> 61) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v54 = (v84 - (unsigned char *)p_p) >> 2;
            if (v54 <= v53 + 1) {
              unint64_t v54 = v53 + 1;
            }
            if ((unint64_t)(v84 - (unsigned char *)p_p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v54;
            }
            if (v55) {
              long long v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v84, v55);
            }
            else {
              long long v56 = 0;
            }
            long long v57 = &v56[8 * v53];
            *(void *)long long v57 = v50;
            int v52 = v57 + 8;
            long long v59 = (char *)p_p;
            long long v58 = v83;
            if (v83 != p_p)
            {
              do
              {
                uint64_t v60 = *((void *)v58 - 1);
                v58 -= 8;
                *((void *)v57 - 1) = v60;
                v57 -= 8;
              }
              while (v58 != v59);
              long long v58 = (char *)p_p;
            }
            p_p = v57;
            std::vector<std::string> v83 = v52;
            char v84 = &v56[8 * v55];
            if (v58) {
              operator delete(v58);
            }
          }
          else
          {
            *(void *)std::vector<std::string> v83 = v50;
            int v52 = v51 + 8;
          }
          std::vector<std::string> v83 = v52;
          unint64_t v61 = v49[1];
          long long v62 = v80;
          if (v80 >= i)
          {
            uint64_t v64 = (v80 - (unsigned char *)v79) >> 3;
            if ((unint64_t)(v64 + 1) >> 61) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v65 = (i - (unsigned char *)v79) >> 2;
            if (v65 <= v64 + 1) {
              unint64_t v65 = v64 + 1;
            }
            if ((unint64_t)(i - (unsigned char *)v79) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v66 = v65;
            }
            if (v66) {
              std::string v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&i, v66);
            }
            else {
              std::string v67 = 0;
            }
            char v68 = &v67[8 * v64];
            *(void *)char v68 = v61;
            BOOL v63 = v68 + 8;
            char v70 = (char *)v79;
            std::string v69 = v80;
            if (v80 != v79)
            {
              do
              {
                uint64_t v71 = *((void *)v69 - 1);
                v69 -= 8;
                *((void *)v68 - 1) = v71;
                v68 -= 8;
              }
              while (v69 != v70);
              std::string v69 = (char *)v79;
            }
            uint64_t v79 = v68;
            int v80 = v63;
            uint64_t i = &v67[8 * v66];
            if (v69) {
              operator delete(v69);
            }
          }
          else
          {
            *(void *)int v80 = v61;
            BOOL v63 = v62 + 8;
          }
          int v80 = v63;
        }
        if (recursively_create_region_tree((uint64_t *)&p_p, &v79, 0, (uint64_t *)&__p, 0, -1, (uint64_t)v72))
        {
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          uint64_t v74 = 0;
          std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(&v74, (uint64_t)__p, (uint64_t)v86, 0x6DB6DB6DB6DB6DB7 * ((v86 - (unsigned char *)__p) >> 5));
          long long v77 = 0uLL;
          uint64_t v78 = 0;
          std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(&v77, v74, v75, 0x6DB6DB6DB6DB6DB7 * ((v75 - v74) >> 5));
          *(_OWORD *)int v73 = v77;
          *((void *)v73 + 2) = v78;
          uint64_t v78 = 0;
          long long v77 = 0uLL;
          v73[24] = 1;
          v93[0] = (void **)&v77;
          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](v93);
          v93[0] = (void **)&v74;
          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](v93);
        }
        else
        {
          *int v73 = 0;
          v73[24] = 0;
        }
        if (v79)
        {
          int v80 = (char *)v79;
          operator delete(v79);
        }
        if (p_p)
        {
          std::vector<std::string> v83 = (char *)p_p;
          operator delete(p_p);
        }
        p_p = &__p;
        std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      }
      else
      {
        while (1)
        {
          char v46 = (unint64_t **)v45[1];
          uint64_t v47 = (unint64_t **)(*v45 + 8);
          if ((unint64_t)v46 - *v45 >= 9 && v47 != v46) {
            break;
          }
LABEL_58:
          v45 += 3;
          if (v45 == v40)
          {
            unint64_t v49 = v89;
            uint64_t v40 = v90;
            goto LABEL_61;
          }
        }
        while (!CSRangeIntersectsRange(**(v47 - 1), (*(v47 - 1))[1], **v47, (*v47)[1]))
        {
          if (++v47 == (unint64_t **)v45[1]) {
            goto LABEL_58;
          }
        }
        *int v73 = 0;
        v73[24] = 0;
      }
    }
    else
    {
      *a3 = 0;
      a3[24] = 0;
    }
    std::string __p = &v89;
    std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
LABEL_13:
    *a3 = 0;
    a3[24] = 0;
  }
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v92);
}

void sub_1B9036B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char **a22,char **a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32)
{
  *(void *)(v32 - 96) = &a12;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 96));
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a22)
  {
    a23 = a22;
    operator delete(a22);
  }
  a22 = &a25;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a25 = &a29;
  std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a32);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(result, v12);
    long long v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)long long v14 = 0;
    *(_OWORD *)long long v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    _OWORD v16[2] = v14 + 24;
    std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__swap_out_circular_buffer(a1, v16);
    BOOL v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<std::reference_wrapper<portable_region_info_t const>>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    BOOL v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B9036D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::reference_wrapper<portable_region_info_t const>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL recursively_create_region_tree(uint64_t *a1, void *a2, unsigned int a3, uint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = *a1;
  unint64_t v7 = *(unint64_t ***)(*a1 + 8 * a3);
  BOOL result = 1;
  if (v7 != *(unint64_t ***)(*a2 + 8 * a3))
  {
    unsigned int v21 = a3 + 1;
    unint64_t v11 = a3;
    while (1)
    {
      unint64_t v12 = *v7;
      unint64_t v14 = **v7;
      uint64_t v13 = (*v7)[1];
      if (!CSRangeContainsRange(a5, a6, v14, v13)) {
        break;
      }
      unint64_t v15 = v12[1];
      if (!v15)
      {
        LOBYTE(v27[0]) = 0;
        char v40 = 0;
LABEL_45:
        std::__optional_destruct_base<CSCppCoreFileRegionInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v27);
        return 0;
      }
      unint64_t v16 = a5;
      unint64_t v17 = *v12;
      LOBYTE(v63) = 0;
      char v65 = 0;
      uint64_t v18 = *(unint64_t *)((char *)v12 + 95);
      if (v18 != -1)
      {
        CSCppFileMemory::CSCppFileMemory(&v41, a7, v18);
        read_path_from_offset_in_cpp_memory((uint64_t)&v41, *(unint64_t *)((char *)v12 + 95), &v61);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&v63, (__n128 *)&v61);
        if (v62 && SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v41);
      }
      v60[0] = a7;
      v60[1] = v17;
      v60[2] = v15;
      cpp_region_info_for_portable_region(char const*,portable_region_info_t const&)::$_0::operator()((uint64_t)v60, *(unint64_t *)((char *)v12 + 111), *(unint64_t *)((char *)v12 + 103), (uint64_t)&v61);
      cpp_region_info_for_portable_region(char const*,portable_region_info_t const&)::$_0::operator()((uint64_t)v60, *(unint64_t *)((char *)v12 + 127), *(unint64_t *)((char *)v12 + 119), (uint64_t)v58);
      *(void *)&long long v41 = v17;
      *((void *)&v41 + 1) = v15;
      long long v42 = *((_OWORD *)v12 + 1);
      *(void *)unint64_t v43 = v12[4];
      *(_OWORD *)&v43[8] = *(_OWORD *)(v12 + 5);
      *(void *)&v43[24] = v12[7];
      LOWORD(v44) = *((_WORD *)v12 + 32);
      BYTE2(v44) = *((unsigned char *)v12 + 66);
      *(_WORD *)((char *)&v44 + 3) = *(_WORD *)((char *)v12 + 67);
      *((void *)&v44 + 1) = *(unint64_t *)((char *)v12 + 69);
      LOWORD(v45) = *(_WORD *)((char *)v12 + 77);
      DWORD1(v45) = *(_DWORD *)((char *)v12 + 79);
      *((void *)&v45 + 1) = *(unint64_t *)((char *)v12 + 83);
      uint64_t v46 = *(unsigned int *)((char *)v12 + 91);
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v47, &v63);
      std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100]((uint64_t)&v49, (uint64_t)&v61);
      a5 = v16;
      std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100]((uint64_t)&__p, (uint64_t)v58);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      v27[4] = v44;
      v27[5] = v45;
      uint64_t v28 = v46;
      v27[0] = v41;
      v27[1] = v42;
      v27[2] = *(_OWORD *)v43;
      uint64_t v27[3] = *(_OWORD *)&v43[16];
      v29.__r_.__value_.__s.__data_[0] = 0;
      char v30 = 0;
      if (v48)
      {
        std::string v29 = v47;
        memset(&v47, 0, sizeof(v47));
        char v30 = 1;
      }
      LOBYTE(v31) = 0;
      char v33 = 0;
      if (v51)
      {
        long long v31 = v49;
        uint64_t v32 = v50;
        uint64_t v50 = 0;
        long long v49 = 0uLL;
        char v33 = 1;
      }
      LOBYTE(v34) = 0;
      char v36 = 0;
      if (v54)
      {
        long long v34 = __p;
        uint64_t v35 = v53;
        uint64_t v53 = 0;
        long long __p = 0uLL;
        char v36 = 1;
      }
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v55 = 0;
      char v40 = 1;
      unint64_t v66 = (void **)&v55;
      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v66);
      if (v54 && (void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (v51 && (void)v49)
      {
        *((void *)&v49 + 1) = v49;
        operator delete((void *)v49);
      }
      if (v48 && SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if (v59 && v58[0])
      {
        v58[1] = v58[0];
        operator delete(v58[0]);
      }
      if (v62 && v61.__r_.__value_.__r.__words[0])
      {
        v61.__r_.__value_.__l.__size_ = v61.__r_.__value_.__r.__words[0];
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if (v65 && v64 < 0) {
        operator delete((void *)v63);
      }
      if (!v40) {
        goto LABEL_45;
      }
      unint64_t v19 = a4[1];
      if (v19 >= a4[2])
      {
        uint64_t v20 = std::vector<CSCppCoreFileRegionInfo>::__push_back_slow_path<CSCppCoreFileRegionInfo const&>(a4, v27);
      }
      else
      {
        CSCppCoreFileRegionInfo::CSCppCoreFileRegionInfo(a4[1], v27);
        uint64_t v20 = v19 + 224;
        a4[1] = v19 + 224;
      }
      a4[1] = v20;
      if (((a1[1] - *a1) >> 3) - 1 > v11
        && (recursively_create_region_tree(a1, a2, v21, v20 - 24, v14, v13, a7) & 1) == 0)
      {
        goto LABEL_45;
      }
      *(void *)(v22 + 8 * v11) += 8;
      std::__optional_destruct_base<CSCppCoreFileRegionInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v27);
      unint64_t v7 = *(unint64_t ***)(v22 + 8 * v11);
      if (v7 == *(unint64_t ***)(*a2 + 8 * v11)) {
        return 1;
      }
    }
    if (v14 >= a5) {
      return !CSRangeIntersectsRange(a5, a6, v14, v13);
    }
    return 0;
  }
  return result;
}

void sub_1B9037194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  *(void *)(v11 + 8) = v12;
  std::__optional_destruct_base<CSCppCoreFileRegionInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *CSCppCoreFileRegionsTree::recursively_search_for_region_at_specific_address(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4 - 1 == a3)
  {
    BOOL result = find_core_file_region_info_containing_or_after_location((char **)(a5 + 200), a2);
    if (*(char **)(a5 + 208) == result) {
      return 0;
    }
  }
  else
  {
    unint64_t v7 = *(char **)(a5 + 200);
    BOOL v8 = *(char **)(a5 + 208);
    if (v8 != v7)
    {
      unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 5);
      do
      {
        unint64_t v10 = v9 >> 1;
        uint64_t v11 = &v7[224 * (v9 >> 1)];
        uint64_t v13 = *(void *)v11;
        uint64_t v14 = *((void *)v11 + 1);
        uint64_t v12 = v11 + 224;
        v9 += ~(v9 >> 1);
        if (v14 + v13 <= a2) {
          unint64_t v7 = v12;
        }
        else {
          unint64_t v9 = v10;
        }
      }
      while (v9);
    }
    if (v7 == v8 || a2 - *(void *)v7 >= *((void *)v7 + 1)) {
      return 0;
    }
    else {
      return (char *)CSCppCoreFileRegionsTree::recursively_search_for_region_at_specific_address();
    }
  }
  return result;
}

char *find_core_file_region_info_containing_or_after_location(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  BOOL result = a1[1];
  if (result != v3)
  {
    unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((result - v3) >> 5);
    do
    {
      unint64_t v5 = v4 >> 1;
      unint64_t v6 = (uint64_t *)&v3[224 * (v4 >> 1)];
      uint64_t v8 = *v6;
      uint64_t v9 = v6[1];
      unint64_t v7 = (char *)(v6 + 28);
      v4 += ~(v4 >> 1);
      if (v9 + v8 <= a2) {
        uint64_t v3 = v7;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
    return v3;
  }
  return result;
}

uint64_t CSCppCoreFileRegionsTree::recursively_search_forward_for_objects_at_or_after_address(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a3 > a4) {
    return 0;
  }
  if (*(unsigned char *)(a5 + 68))
  {
    unint64_t v5 = *(void **)(a5 + 200);
    unint64_t v6 = *(void **)(a5 + 208);
    if (v5 == v6)
    {
      return a5 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      unint64_t v10 = a3 + 1;
      while (1)
      {
        if (v5[1] + *v5 > a2)
        {
          a5 = CSCppCoreFileRegionsTree::recursively_search_forward_for_objects_at_or_after_address(a1, a2, v10, a4, v5);
          if (v11) {
            break;
          }
        }
        v5 += 28;
        if (v5 == v6) {
          return a5 & 0xFFFFFFFFFFFFFF00;
        }
      }
    }
  }
  return a5;
}

uint64_t CSCppCoreFileRegionsTree::get_region_at_address(char **this, unint64_t a2, unint64_t a3)
{
  core_file_region_info_containing_or_after_location = find_core_file_region_info_containing_or_after_location(this, a2);
  unint64_t v7 = this[1];
  if (v7 == core_file_region_info_containing_or_after_location) {
    return 0;
  }
  uint64_t v8 = (uint64_t)core_file_region_info_containing_or_after_location;
  if (a3
    && a2 - *(void *)core_file_region_info_containing_or_after_location >= *((void *)core_file_region_info_containing_or_after_location
                                                                             + 1))
  {
LABEL_4:
    while (1)
    {
      uint64_t v9 = CSCppCoreFileRegionsTree::recursively_search_forward_for_objects_at_or_after_address((uint64_t)this, a2, 0, a3, v8);
      if (v10) {
        break;
      }
      v8 += 224;
      if ((char *)v8 == v7) {
        return 0;
      }
    }
    return v9;
  }
  if (a3 && core_file_region_info_containing_or_after_location[68])
  {
    uint64_t v9 = (uint64_t)CSCppCoreFileRegionsTree::recursively_search_for_region_at_specific_address((uint64_t)this, a2, 1, a3, (uint64_t)core_file_region_info_containing_or_after_location);
    if (!v11) {
      goto LABEL_4;
    }
    return v9;
  }
  return v8;
}

void CSCppCoreFileRegionsTree::get_dispositions(char **this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  if (a2 % a4 || (unint64_t v9 = a3 % a4) != 0)
  {
    *(unsigned char *)a6 = 0;
    *(unsigned char *)(a6 + 24) = 0;
    return;
  }
  long long v41 = 0;
  long long v11 = 0uLL;
  *(_OWORD *)long long __p = 0u;
  unint64_t v12 = a2 + a3;
  if (a2 >= a2 + a3)
  {
LABEL_49:
    *(_OWORD *)a6 = v11;
    *(void *)(a6 + 16) = v9;
    *(unsigned char *)(a6 + 24) = 1;
    return;
  }
  unint64_t v37 = a3 / a4;
  unint64_t v14 = a2;
  unint64_t v39 = a2 + a3;
  while (1)
  {
    region_at_mach_vm_address_t address = CSCppCoreFileRegionsTree::get_region_at_address(this, v14, 0x270FuLL);
    if (!v16) {
      break;
    }
    unint64_t v17 = (unint64_t *)region_at_address;
    if (*(unsigned char *)(region_at_address + 68)) {
      break;
    }
    unint64_t v18 = *(void *)region_at_address;
    if (v14 != a2 && v14 != v18) {
      break;
    }
    if (*(unsigned char *)(region_at_address + 67) != 3)
    {
      uint64_t v31 = region_at_address + 136;
      uint64_t v32 = 168;
      if (a5) {
        uint64_t v32 = 136;
      }
      else {
        uint64_t v31 = region_at_address + 168;
      }
      if (!*(unsigned char *)(v31 + 24)) {
        break;
      }
      char v33 = *(char **)(region_at_address + v32);
      if (v14 > v18) {
        long long v34 = &v33[2 * ((v14 - v18) / a4)];
      }
      else {
        long long v34 = v33;
      }
      unint64_t v35 = (uint64_t)(*(void *)(v31 + 8) - (void)v33) >> 1;
      if (v35 >= (v12 - v14) / a4) {
        uint64_t v36 = (v12 - v14) / a4;
      }
      else {
        uint64_t v36 = v35;
      }
      std::vector<unsigned short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((uint64_t)__p, (uint64_t)__p[1], v34, &v34[2 * v36], v36);
      goto LABEL_46;
    }
    if (a3 >= a4)
    {
      uint64_t v19 = 0;
      uint64_t v20 = (char *)__p[1];
      if (v37 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v37;
      }
      do
      {
        if (v20 >= v41)
        {
          uint64_t v23 = (char *)__p[0];
          uint64_t v24 = v20 - (char *)__p[0];
          if (v20 - (char *)__p[0] <= -3) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v24 >> 1;
          if (v41 - (char *)__p[0] <= (unint64_t)((v24 >> 1) + 1)) {
            uint64_t v26 = v25 + 1;
          }
          else {
            uint64_t v26 = v41 - (char *)__p[0];
          }
          if ((unint64_t)(v41 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v27 = v26;
          }
          if (v27)
          {
            uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)&v41, v27);
            uint64_t v23 = (char *)__p[0];
            uint64_t v20 = (char *)__p[1];
          }
          else
          {
            uint64_t v28 = 0;
          }
          std::string v29 = &v28[2 * v25];
          *(_WORD *)std::string v29 = 0;
          uint64_t v22 = v29 + 2;
          while (v20 != v23)
          {
            __int16 v30 = *((_WORD *)v20 - 1);
            v20 -= 2;
            *((_WORD *)v29 - 1) = v30;
            v29 -= 2;
          }
          __p[0] = v29;
          __p[1] = v22;
          long long v41 = &v28[2 * v27];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *(_WORD *)uint64_t v20 = 0;
          uint64_t v22 = v20 + 2;
        }
        __p[1] = v22;
        ++v19;
        uint64_t v20 = (char *)v22;
      }
      while (v19 != v21);
LABEL_46:
      unint64_t v18 = *v17;
      unint64_t v12 = v39;
    }
    unint64_t v14 = v17[1] + v18;
    if (v14 >= v12)
    {
      long long v11 = *(_OWORD *)__p;
      unint64_t v9 = (unint64_t)v41;
      goto LABEL_49;
    }
  }
  *(unsigned char *)a6 = 0;
  *(unsigned char *)(a6 + 24) = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B90377C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CSCppCoreFileMetadata::region_filename(char **this, unint64_t a2, char *a3, unsigned int a4)
{
  if (*((unsigned char *)this + 112))
  {
    region_at_mach_vm_address_t address = CSCppCoreFileRegionsTree::get_region_at_address(this + 11, a2, 0x270FuLL);
    if (v8)
    {
      if (a2 - *(void *)region_at_address < *(void *)(region_at_address + 8) && *(unsigned char *)(region_at_address + 128))
      {
        unint64_t v9 = (const char *)(region_at_address + 104);
        if (*(char *)(region_at_address + 127) < 0)
        {
          unint64_t v11 = *(void *)(region_at_address + 112) + 1;
          if (v11 <= a4)
          {
            unint64_t v9 = *(const char **)v9;
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v10 = *(unsigned __int8 *)(region_at_address + 127);
          if (v10 < a4)
          {
            unint64_t v11 = v10 + 1;
LABEL_12:
            strcpy(a3, v9);
            return v11;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t CSCppCoreFileDarwinMetadata::get_udata_pointers(CSCppCoreFileDarwinMetadata *this, void *__dst, unint64_t *a3)
{
  uint64_t result = 4;
  if (a3 && *((unsigned char *)this + 560))
  {
    if (__dst)
    {
      int64_t v6 = *((void *)this + 42) - *((void *)this + 41);
      if (*a3 < v6 >> 3) {
        return 4;
      }
      unint64_t v7 = (void *)((char *)this + 328);
      char v8 = (void *)((char *)this + 336);
      memcpy(__dst, *((const void **)this + 41), v6);
    }
    else
    {
      unint64_t v7 = (void *)((char *)this + 328);
      char v8 = (void *)((char *)this + 336);
    }
    uint64_t result = 0;
    *a3 = (uint64_t)(*v8 - *v7) >> 3;
  }
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_udata_pointers(CSCppCoreFileExclavesMetadata *this, unint64_t *a2, unint64_t *a3)
{
  if (!a3) {
    return 4;
  }
  uint64_t result = 0;
  if (!a2) {
    *a3 = 0;
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_owned_vm_objects(uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t result = 4;
  if (a3 && *(unsigned char *)(a1 + 560))
  {
    uint64_t v7 = a1 + 360;
    int64_t v6 = *(const void **)(a1 + 360);
    int64_t v8 = *(void *)(v7 + 8) - (void)v6;
    unint64_t v9 = v8 + 8;
    if (a2)
    {
      if (*a3 < v9) {
        return 4;
      }
      *a2 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
      memcpy(a2 + 1, v6, v8);
    }
    uint64_t result = 0;
    *a3 = v9;
  }
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_owned_vm_objects(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3) {
    return 4;
  }
  uint64_t result = 0;
  *a3 = 0;
  return result;
}

uint64_t CSCppCoreFileMetadata::mach_vm_purgable_control(char **this, unint64_t a2, int a3, int *a4)
{
  uint64_t result = 4;
  if (a3 == 1 && a4 && *((unsigned char *)this + 112))
  {
    region_at_mach_vm_address_t address = CSCppCoreFileRegionsTree::get_region_at_address(this + 11, a2, 0x270FuLL);
    if (v9
      && a2 - *(void *)region_at_address < *(void *)(region_at_address + 8)
      && (int v10 = *(_DWORD *)(region_at_address + 96), v10 != 0x7FFFFFFF))
    {
      uint64_t result = 0;
      *a4 = v10;
    }
    else
    {
      return 5;
    }
  }
  return result;
}

uint64_t CSCppCoreFileMetadata::mach_vm_page_range_query(CSCppCoreFileMetadata *this, unint64_t a2, unint64_t a3, _DWORD *a4, unint64_t *a5, int a6)
{
  uint64_t v6 = 4;
  if (!a5) {
    return v6;
  }
  uint64_t v7 = a4;
  if (!a4 || !*((unsigned char *)this + 112)) {
    return v6;
  }
  if (CSArchitectureIsArm(*((void *)this + 5)) || CSArchitectureIsArm64(*((void *)this + 5)))
  {
    unint64_t v13 = 0x4000;
    if (!a3) {
      return v6;
    }
  }
  else
  {
    if (!CSArchitectureIsX86_64(*((void *)this + 5))) {
      return 5;
    }
    unint64_t v13 = 4096;
    if (!a3) {
      return v6;
    }
  }
  if (((v13 - 1) & (a3 | a2)) != 0) {
    return v6;
  }
  CSCppCoreFileRegionsTree::get_dispositions((char **)this + 11, a2, a3, v13, a6, (uint64_t)&v21);
  if (!v23) {
    return 5;
  }
  unint64_t v14 = v21;
  unint64_t v15 = v22;
  if (*a5 >= v22 - v21)
  {
    unint64_t v16 = v22 - v21;
    *a5 = v16;
    if (v15 != v14)
    {
      if (v16 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v16;
      }
      unint64_t v18 = v14;
      do
      {
        int v19 = *v18++;
        *v7++ = v19;
        --v17;
      }
      while (v17);
      uint64_t v6 = 0;
      goto LABEL_24;
    }
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 5;
  }
  if (v14) {
LABEL_24:
  }
    operator delete(v14);
  return v6;
}

uint64_t CSCppCoreFileMetadata::mach_vm_region_recurse_submap_short_64(uint64_t a1, unint64_t *a2, void *a3, _DWORD *a4, uint64_t a5)
{
  if (!*(unsigned char *)(a1 + 112)) {
    return 4;
  }
  region_at_mach_vm_address_t address = CSCppCoreFileRegionsTree::get_region_at_address((char **)(a1 + 88), *a2, *a4);
  if (!v10) {
    return 1;
  }
  uint64_t v11 = region_at_address;
  uint64_t result = 0;
  int v13 = *(_DWORD *)(v11 + 28);
  int v14 = *(_DWORD *)(v11 + 40);
  int v15 = *(_DWORD *)(v11 + 60);
  __int16 v16 = *(_WORD *)(v11 + 64);
  __int16 v17 = *(_WORD *)(v11 + 66);
  int v18 = *(unsigned __int8 *)(v11 + 68);
  *(void *)(a5 + 12) = *(void *)(v11 + 32);
  __int16 v19 = *(_WORD *)(v11 + 80);
  uint64_t v20 = *(void *)(v11 + 20);
  *(_WORD *)(a5 + 28) = v16;
  uint64_t v21 = *(void *)(v11 + 72);
  *(void *)a5 = v20;
  *(_DWORD *)(a5 + 8) = v13;
  *(_DWORD *)(a5 + 20) = v14;
  *(_DWORD *)(a5 + 24) = v15;
  *(_WORD *)(a5 + 30) = v17;
  *(_DWORD *)(a5 + 32) = v18;
  *(void *)(a5 + 36) = v21;
  *(_WORD *)(a5 + 44) = v19;
  *a4 = *(_DWORD *)(v11 + 16);
  *a2 = *(void *)v11;
  *a3 = *(void *)(v11 + 8);
  return result;
}

uint64_t CSCppCoreFileMetadata::mach_vm_region_recurse_submap_64(uint64_t a1, unint64_t *a2, void *a3, _DWORD *a4, uint64_t a5)
{
  if (!*(unsigned char *)(a1 + 112)) {
    return 4;
  }
  region_at_mach_vm_address_t address = CSCppCoreFileRegionsTree::get_region_at_address((char **)(a1 + 88), *a2, *a4);
  if (!v10) {
    return 1;
  }
  uint64_t v11 = region_at_address;
  uint64_t result = 0;
  int v13 = *(_DWORD *)(v11 + 28);
  __int16 v14 = *(_WORD *)(v11 + 64);
  __int16 v15 = *(_WORD *)(v11 + 66);
  int v16 = *(unsigned __int8 *)(v11 + 68);
  __int16 v17 = *(_WORD *)(v11 + 80);
  uint64_t v18 = *(void *)(v11 + 88);
  *(void *)(a5 + 12) = *(void *)(v11 + 32);
  int v19 = *(_DWORD *)(v11 + 84);
  long long v20 = *(_OWORD *)(v11 + 40);
  uint64_t v21 = *(void *)(v11 + 56);
  uint64_t v22 = *(void *)(v11 + 72);
  *(void *)a5 = *(void *)(v11 + 20);
  *(_DWORD *)(a5 + 8) = v13;
  *(_OWORD *)(a5 + 20) = v20;
  *(void *)(a5 + 36) = v21;
  *(_WORD *)(a5 + 44) = v14;
  *(_WORD *)(a5 + 46) = v15;
  *(_DWORD *)(a5 + 48) = v16;
  *(void *)(a5 + 52) = v22;
  *(_WORD *)(a5 + 60) = v17;
  *(_DWORD *)(a5 + 64) = v19;
  *(void *)(a5 + 68) = v18;
  *a4 = *(_DWORD *)(v11 + 16);
  *a2 = *(void *)v11;
  *a3 = *(void *)(v11 + 8);
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_exclave_vm_flags_for_address(CSCppCoreFileExclavesMetadata *this, unint64_t a2, unsigned int *a3)
{
  if (!a3) {
    return 4;
  }
  if (!*((unsigned char *)this + 112)) {
    return 4;
  }
  region_at_mach_vm_address_t address = CSCppCoreFileRegionsTree::get_region_at_address((char **)this + 11, a2, 0);
  if (!v5) {
    return 1;
  }
  uint64_t v6 = region_at_address;
  uint64_t result = 0;
  *a3 = *(_DWORD *)(v6 + 100);
  return result;
}

uint64_t parse_addrable_bits_note(const char *a1, const note_command *a2)
{
  if (a2->size >= 0x10)
  {
    CSCppFileMemory::CSCppFileMemory(v11, a1, a2->offset);
    char v5 = (int *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v11[0] + 32))(v11, a2->offset, 16);
    if (v6 >= 0x10
      && ((int v7 = *v5, *v5 == 4) || v7 == 3 || v7 == 2)
      && (uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v11[0] + 32))(v11, a2->offset, 16),
          v9 >= 0x10))
    {
      uint64_t v3 = ~(-1 << *(_DWORD *)(v8 + 4));
      uint64_t v4 = v3 & 0x7FFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v3) = 0;
      uint64_t v4 = 0;
    }
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v11);
  }
  else
  {
    LOBYTE(v3) = 0;
    uint64_t v4 = 0;
  }
  return v4 & 0x7FFFFFFFFFFFFF00 | v3;
}

void sub_1B9037F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)va);
  _Unwind_Resume(a1);
}

void CSCppCoreFileDarwinMetadata::~CSCppCoreFileDarwinMetadata(CSCppCoreFileDarwinMetadata *this)
{
  CSCppCoreFileDarwinMetadata::~CSCppCoreFileDarwinMetadata(this);

  JUMPOUT(0x1BA9D1CD0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F12C9448;
  if (*((unsigned char *)this + 560)) {
    CSCppCoreFileTaskCrashinfo::~CSCppCoreFileTaskCrashinfo((CSCppCoreFileDarwinMetadata *)((char *)this + 120));
  }

  CSCppCoreFileMetadata::~CSCppCoreFileMetadata(this);
}

void CSCppCoreFileExclavesMetadata::~CSCppCoreFileExclavesMetadata(CSCppCoreFileExclavesMetadata *this)
{
  CSCppCoreFileMetadata::~CSCppCoreFileMetadata(this);

  JUMPOUT(0x1BA9D1CD0);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B903806C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B903812C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 result = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CS_vm_object_query_data_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_1B9038264(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

uint64_t std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<unsigned long long>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned long long>,false> const&>((void *)a1, a2);
  return a1;
}

void sub_1B903830C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<std::vector<unsigned long long>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned long long>,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *__n128 result = 0;
    result[1] = 0;
    result[2] = 0;
    __n128 result = std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(result, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B90383D4(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<std::vector<CS_vm_object_query_data_t>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<CS_vm_object_query_data_t>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<CS_vm_object_query_data_t>,false> const&>((void *)a1, a2);
  return a1;
}

void sub_1B9038420(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<std::vector<CS_vm_object_query_data_t>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<CS_vm_object_query_data_t>,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *__n128 result = 0;
    result[1] = 0;
    result[2] = 0;
    __n128 result = std::vector<CS_vm_object_query_data_t>::__init_with_size[abi:ne180100]<CS_vm_object_query_data_t*,CS_vm_object_query_data_t*>(result, *(const void **)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void *std::vector<CS_vm_object_query_data_t>::__init_with_size[abi:ne180100]<CS_vm_object_query_data_t*,CS_vm_object_query_data_t*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = std::vector<CS_vm_object_query_data_t>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B90384FC(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CS_vm_object_query_data_t>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CS_vm_object_query_data_t>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

__n128 std::__optional_destruct_base<CSCppCoreFileTaskCrashinfo,false>::__optional_destruct_base[abi:ne180100]<CSCppCoreFileTaskCrashinfo>(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v2 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v3 = a2[2];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v3;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 4) = 0;
    *(unsigned char *)(a1 + 56) = 1;
  }
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    long long v4 = a2[4];
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v4;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(a1 + 88) = 1;
  }
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (*((unsigned char *)a2 + 120))
  {
    long long v5 = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(_OWORD *)(a1 + 96) = v5;
    *((void *)a2 + 13) = 0;
    *((void *)a2 + 14) = 0;
    *((void *)a2 + 12) = 0;
    *(unsigned char *)(a1 + 120) = 1;
  }
  long long v6 = a2[10];
  long long v7 = a2[11];
  long long v8 = *(long long *)((char *)a2 + 188);
  long long v10 = a2[8];
  long long v9 = a2[9];
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 188) = v8;
  *(_OWORD *)(a1 + 160) = v6;
  *(_OWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v9;
  *(unsigned char *)(a1 + 232) = 0;
  if (*((unsigned char *)a2 + 232))
  {
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
    *(_OWORD *)(a1 + 208) = a2[13];
    *(void *)(a1 + 224) = *((void *)a2 + 28);
    *((void *)a2 + 26) = 0;
    *((void *)a2 + 27) = 0;
    *((void *)a2 + 28) = 0;
    *(unsigned char *)(a1 + 232) = 1;
  }
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  if (*((unsigned char *)a2 + 264))
  {
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    *(_OWORD *)(a1 + 240) = a2[15];
    *(void *)(a1 + 256) = *((void *)a2 + 32);
    *((void *)a2 + 30) = 0;
    *((void *)a2 + 31) = 0;
    *((void *)a2 + 32) = 0;
    *(unsigned char *)(a1 + 264) = 1;
  }
  long long v11 = a2[17];
  long long v12 = a2[19];
  *(_OWORD *)(a1 + 288) = a2[18];
  *(_OWORD *)(a1 + 304) = v12;
  *(_OWORD *)(a1 + 272) = v11;
  long long v13 = a2[20];
  long long v14 = a2[21];
  long long v15 = a2[23];
  *(_OWORD *)(a1 + 352) = a2[22];
  *(_OWORD *)(a1 + 368) = v15;
  *(_OWORD *)(a1 + 320) = v13;
  *(_OWORD *)(a1 + 336) = v14;
  __n128 result = (__n128)a2[24];
  long long v17 = a2[25];
  long long v18 = a2[26];
  *(void *)(a1 + 432) = *((void *)a2 + 54);
  *(_OWORD *)(a1 + 400) = v17;
  *(_OWORD *)(a1 + 416) = v18;
  *(__n128 *)(a1 + 384) = result;
  *(unsigned char *)(a1 + 440) = 1;
  return result;
}

void CSCppCoreFileTaskCrashinfo::~CSCppCoreFileTaskCrashinfo(CSCppCoreFileTaskCrashinfo *this)
{
  if (*((unsigned char *)this + 264))
  {
    long long v2 = (void *)*((void *)this + 30);
    if (v2)
    {
      *((void *)this + 31) = v2;
      operator delete(v2);
    }
  }
  if (*((unsigned char *)this + 232))
  {
    long long v3 = (void *)*((void *)this + 26);
    if (v3)
    {
      *((void *)this + 27) = v3;
      operator delete(v3);
    }
  }
  if (*((unsigned char *)this + 120) && *((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((unsigned char *)this + 88) && *((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((unsigned char *)this + 56) && *((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((unsigned char *)this + 24))
  {
    if (*((char *)this + 23) < 0) {
      operator delete(*(void **)this);
    }
  }
}

uint64_t std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    long long v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<std::reference_wrapper<portable_region_info_t const>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *,false>(unint64_t result, unint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v9 = (unint64_t **)result;
  while (2)
  {
    long long v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                long long v42 = *(a2 - 1);
                unint64_t v43 = *v10;
                if (*v42 < **v10)
                {
                  *long long v10 = v42;
                  *(a2 - 1) = v43;
                }
                break;
              case 3uLL:
                uint64_t result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                uint64_t result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                long long v44 = v10 + 1;
                long long v45 = v10 + 2;
                uint64_t v46 = v10 + 3;
                uint64_t result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v10, v10 + 1, v10 + 2, v10 + 3);
                std::string v47 = *(a2 - 1);
                char v48 = v10[3];
                if (*v47 < *v48)
                {
                  unsigned char *v46 = v47;
                  *(a2 - 1) = v48;
                  long long v49 = *v46;
                  uint64_t v50 = *v45;
                  if (**v46 < **v45)
                  {
                    *long long v45 = v49;
                    unsigned char *v46 = v50;
                    char v51 = *v44;
                    if (*v49 < **v44)
                    {
                      v10[1] = v49;
                      v10[2] = v51;
                      int v52 = *v10;
                      if (*v49 < **v10)
                      {
                        *long long v10 = v49;
                        v10[1] = v52;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v53 = v10 + 1;
            BOOL v55 = v10 == a2 || v53 == a2;
            if (a4)
            {
              if (!v55)
              {
                uint64_t v56 = 0;
                uint64_t v57 = v10;
                do
                {
                  char v59 = *v57;
                  long long v58 = v57[1];
                  uint64_t v57 = v53;
                  if (*v58 < *v59)
                  {
                    uint64_t v60 = v56;
                    while (1)
                    {
                      *(unint64_t **)((char *)v10 + v60 + 8) = v59;
                      if (!v60) {
                        break;
                      }
                      char v59 = *(unint64_t **)((char *)v10 + v60 - 8);
                      v60 -= 8;
                      if (*v58 >= *v59)
                      {
                        std::string v61 = (unint64_t **)((char *)v10 + v60 + 8);
                        goto LABEL_85;
                      }
                    }
                    std::string v61 = v10;
LABEL_85:
                    *std::string v61 = v58;
                  }
                  uint64_t v53 = v57 + 1;
                  v56 += 8;
                }
                while (v57 + 1 != a2);
              }
            }
            else if (!v55)
            {
              do
              {
                uint64_t v91 = *v9;
                long long v90 = v9[1];
                uint64_t v9 = v53;
                if (*v90 < *v91)
                {
                  do
                  {
                    *uint64_t v53 = v91;
                    uint64_t v91 = *(v53 - 2);
                    --v53;
                  }
                  while (*v90 < *v91);
                  *uint64_t v53 = v90;
                }
                uint64_t v53 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  unint64_t v66 = &v10[v65];
                  std::string v67 = *v66;
                  if (2 * v64 + 2 < (uint64_t)v12)
                  {
                    unint64_t v68 = *v67;
                    unint64_t v70 = *v66[1];
                    BOOL v69 = v68 >= v70;
                    if (v68 > v70) {
                      unint64_t v70 = v68;
                    }
                    if (!v69)
                    {
                      ++v66;
                      uint64_t v65 = 2 * v64 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v70 = *v67;
                  }
                  uint64_t v71 = &v10[v64];
                  uint64_t v72 = *v71;
                  if (v70 >= **v71)
                  {
                    int v73 = *v66;
                    do
                    {
                      *uint64_t v71 = v73;
                      uint64_t v71 = v66;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v74 = (2 * v65) | 1;
                      unint64_t v66 = &v10[v74];
                      uint64_t v65 = 2 * v65 + 2;
                      int v73 = *v66;
                      if (v65 < (uint64_t)v12)
                      {
                        uint64_t v75 = (unint64_t ***)v66[1];
                        uint64_t result = *v73;
                        BOOL v76 = *v73 >= (unint64_t)*v75;
                        if (*v73 <= (unint64_t)*v75) {
                          uint64_t result = (unint64_t)*v75;
                        }
                        if (*v73 < (unint64_t)*v75) {
                          int v73 = v66[1];
                        }
                        if (v76) {
                          uint64_t v65 = v74;
                        }
                        else {
                          ++v66;
                        }
                      }
                      else
                      {
                        uint64_t result = *v73;
                        uint64_t v65 = v74;
                      }
                    }
                    while (result >= *v72);
                    *uint64_t v71 = v72;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              uint64_t v77 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v78 = 0;
                uint64_t v79 = *v10;
                int v80 = v10;
                do
                {
                  char v81 = &v80[v78 + 1];
                  uint64_t v82 = (2 * v78) | 1;
                  uint64_t v83 = 2 * v78 + 2;
                  if (v83 < v77 && **v81 < *v81[1])
                  {
                    ++v81;
                    uint64_t v82 = v83;
                  }
                  *int v80 = *v81;
                  int v80 = v81;
                  uint64_t v78 = v82;
                }
                while (v82 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
                if (v81 == --a2)
                {
                  void *v81 = v79;
                }
                else
                {
                  void *v81 = *a2;
                  *a2 = v79;
                  uint64_t v84 = (char *)v81 - (char *)v10 + 8;
                  if (v84 >= 9)
                  {
                    unint64_t v85 = (((unint64_t)v84 >> 3) - 2) >> 1;
                    long long v86 = &v10[v85];
                    uint64_t v87 = *v86;
                    unsigned int v88 = *v81;
                    if (**v86 < **v81)
                    {
                      do
                      {
                        void *v81 = v87;
                        char v81 = v86;
                        if (!v85) {
                          break;
                        }
                        unint64_t v85 = (v85 - 1) >> 1;
                        long long v86 = &v10[v85];
                        uint64_t v87 = *v86;
                      }
                      while (**v86 < *v88);
                      void *v81 = v88;
                    }
                  }
                }
              }
              while (v77-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          long long v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v9, &v9[v12 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v9 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v14 - 1, v14, &v9[v13 + 1]);
            long long v15 = *v9;
            *uint64_t v9 = *v14;
            unsigned __int16 *v14 = v15;
          }
          else
          {
            uint64_t result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          if (a4) {
            break;
          }
          int v16 = *v9;
          unint64_t v17 = **v9;
          if (**(v9 - 1) < v17) {
            goto LABEL_13;
          }
          if (v17 >= **(a2 - 1))
          {
            char v33 = v9 + 1;
            do
            {
              long long v10 = v33;
              if (v33 >= a2) {
                break;
              }
              ++v33;
            }
            while (v17 >= **v10);
          }
          else
          {
            long long v10 = v9;
            do
            {
              uint64_t v32 = v10[1];
              ++v10;
            }
            while (v17 >= *v32);
          }
          long long v34 = a2;
          if (v10 < a2)
          {
            long long v34 = a2;
            do
              unint64_t v35 = *--v34;
            while (v17 < *v35);
          }
          if (v10 < v34)
          {
            uint64_t v36 = *v10;
            unint64_t v37 = *v34;
            do
            {
              *long long v10 = v37;
              *long long v34 = v36;
              unint64_t v38 = *v16;
              do
              {
                unint64_t v39 = v10[1];
                ++v10;
                uint64_t v36 = v39;
              }
              while (v38 >= *v39);
              do
              {
                char v40 = *--v34;
                unint64_t v37 = v40;
              }
              while (v38 < *v40);
            }
            while (v10 < v34);
          }
          long long v41 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *uint64_t v9 = *v41;
          }
          a4 = 0;
          *long long v41 = v16;
        }
        int v16 = *v9;
        unint64_t v17 = **v9;
LABEL_13:
        uint64_t v18 = 0;
        do
          int v19 = v9[++v18];
        while (*v19 < v17);
        long long v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            char v23 = *--v21;
          }
          while (*v23 >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*v22 >= v17);
        }
        if (v20 >= v21)
        {
          __int16 v30 = v20 - 1;
        }
        else
        {
          uint64_t v24 = *v21;
          uint64_t v25 = &v9[v18];
          uint64_t v26 = v21;
          do
          {
            *uint64_t v25 = v24;
            *uint64_t v26 = v19;
            unint64_t v27 = *v16;
            do
            {
              uint64_t v28 = v25[1];
              ++v25;
              int v19 = v28;
            }
            while (*v28 < v27);
            do
            {
              std::string v29 = *--v26;
              uint64_t v24 = v29;
            }
            while (*v29 >= v27);
          }
          while (v25 < v26);
          __int16 v30 = v25 - 1;
        }
        if (v30 != v9) {
          *uint64_t v9 = *v30;
        }
        *__int16 v30 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *,false>(v9, v30, a3, a4 & 1);
        a4 = 0;
        long long v10 = v30 + 1;
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v9, v30);
      long long v10 = v30 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v30 + 1, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_34;
      }
    }
    a2 = v30;
    if (!v31) {
      continue;
    }
    return result;
  }
}

unint64_t **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(unint64_t **result, unint64_t **a2, unint64_t **a3)
{
  long long v3 = *a2;
  BOOL v4 = *result;
  unint64_t v5 = **a2;
  uint64_t v6 = *a3;
  unint64_t v7 = **a3;
  if (v5 >= **result)
  {
    if (v7 < v5)
    {
      *a2 = v6;
      *a3 = v3;
      long long v8 = *result;
      if (**a2 < **result)
      {
        *uint64_t result = *a2;
        *a2 = v8;
      }
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *uint64_t result = v3;
      *a2 = v4;
      if (**a3 >= *v4) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v6;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      unint64_t v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      int v16 = a1 + 1;
      unint64_t v17 = a1 + 2;
      uint64_t v18 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(a1, a1 + 1, a1 + 2, a1 + 3);
      int v19 = *(a2 - 1);
      long long v20 = a1[3];
      if (*v19 < *v20)
      {
        unsigned __int16 *v18 = v19;
        *(a2 - 1) = v20;
        uint64_t v21 = *v18;
        uint64_t v22 = *v17;
        if (**v18 < **v17)
        {
          *unint64_t v17 = v21;
          unsigned __int16 *v18 = v22;
          char v23 = *v16;
          if (*v21 < **v16)
          {
            a1[1] = v21;
            a1[2] = v23;
            uint64_t v24 = *a1;
            if (*v21 < **a1)
            {
              *a1 = v21;
              a1[1] = v24;
            }
          }
        }
      }
      return 1;
    default:
      long long v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    unint64_t v13 = *v8;
    if (**v9 < **v8)
    {
      uint64_t v14 = v10;
      while (1)
      {
        *(unint64_t **)((char *)a1 + v14 + 24) = v13;
        if (v14 == -16) {
          break;
        }
        unint64_t v13 = *(unint64_t **)((char *)a1 + v14 + 8);
        v14 -= 8;
        if (*v12 >= *v13)
        {
          long long v15 = (unint64_t **)((char *)a1 + v14 + 24);
          goto LABEL_13;
        }
      }
      long long v15 = a1;
LABEL_13:
      *long long v15 = v12;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    long long v8 = v9;
    v10 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

unint64_t **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(a1, a2, a3);
  uint64_t v9 = *a3;
  if (**a4 < **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (**a3 < **a2)
    {
      *a2 = *a3;
      *a3 = v10;
      int v11 = *a1;
      if (**a2 < **a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void cpp_region_info_for_portable_region(char const*,portable_region_info_t const&)::$_0::operator()(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a2 == -1 || !a3)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 24) = 0;
  }
  else
  {
    unint64_t v8 = 2 * a3;
    CSCppFileMemory::CSCppFileMemory(v26, *(void *)a1, a2);
    uint64_t v10 = CSCppFileMemory::bytes_at(v26, a2, 2 * a3);
    if (v10 && v9 >= v8)
    {
      long long __p = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      std::vector<unsigned short>::reserve(&__p, a3);
      uint64_t v11 = 0;
      unint64_t v12 = v24;
      do
      {
        if (v12 >= v25)
        {
          unint64_t v13 = (char *)__p;
          uint64_t v14 = v12 - (unsigned char *)__p;
          if (v12 - (unsigned char *)__p <= -3) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v14 >> 1;
          if (v25 - (unsigned char *)__p <= (unint64_t)((v14 >> 1) + 1)) {
            uint64_t v16 = v15 + 1;
          }
          else {
            uint64_t v16 = v25 - (unsigned char *)__p;
          }
          if ((unint64_t)(v25 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v17 = v16;
          }
          if (v17)
          {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)&v25, v17);
            unint64_t v13 = (char *)__p;
            unint64_t v12 = v24;
          }
          else
          {
            uint64_t v18 = 0;
          }
          int v19 = &v18[2 * v15];
          *(_WORD *)int v19 = *(_WORD *)(v10 + 2 * v11);
          long long v20 = v19 + 2;
          while (v12 != v13)
          {
            __int16 v21 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *((_WORD *)v19 - 1) = v21;
            v19 -= 2;
          }
          long long __p = v19;
          uint64_t v24 = v20;
          uint64_t v25 = &v18[2 * v17];
          if (v13) {
            operator delete(v13);
          }
          unint64_t v12 = v20;
        }
        else
        {
          *(_WORD *)unint64_t v12 = *(_WORD *)(v10 + 2 * v11);
          v12 += 2;
        }
        uint64_t v24 = v12;
        ++v11;
      }
      while (v11 != a3);
      uint64_t v22 = v25;
      *(void *)a4 = __p;
      *(void *)(a4 + 8) = v12;
      *(void *)(a4 + 16) = v22;
      *(unsigned char *)(a4 + 24) = 1;
    }
    else
    {
      printf("Error mapping dispositions for region %p-%p\n", *(const void **)(a1 + 8), (const void *)(*(void *)(a1 + 16) + *(void *)(a1 + 8)));
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 24) = 0;
    }
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v26);
  }
}

void sub_1B9039660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a14);
  _Unwind_Resume(a1);
}

void std::vector<unsigned short>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    unint64_t v9 = &v6[2 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        __int16 v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

uint64_t std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<unsigned short>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned short>,false> const&>((void *)a1, a2);
  return a1;
}

void sub_1B903979C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<std::vector<unsigned short>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned short>,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *BOOL result = 0;
    result[1] = 0;
    result[2] = 0;
    BOOL result = std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(result, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B9039864(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

uint64_t std::vector<CSCppCoreFileRegionInfo>::__push_back_slow_path<CSCppCoreFileRegionInfo const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x92492492492492) {
    unint64_t v9 = 0x124924924924924;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  __int16 v13 = v10;
  uint64_t v14 = &v10[224 * v4];
  uint64_t v16 = &v10[224 * v9];
  CSCppCoreFileRegionInfo::CSCppCoreFileRegionInfo((uint64_t)v14, a2);
  uint64_t v15 = v14 + 224;
  std::vector<CSCppCoreFileRegionInfo>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<CSCppCoreFileRegionInfo>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B90399CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CSCppCoreFileRegionInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CSCppCoreFileRegionInfo::CSCppCoreFileRegionInfo(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 104), (long long *)((char *)a2 + 104));
  std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100](a1 + 136, (uint64_t)a2 + 136);
  std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100](a1 + 168, (uint64_t)a2 + 168);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>((void *)(a1 + 200), *((void *)a2 + 25), *((void *)a2 + 26), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 5));
  return a1;
}

void sub_1B9039AA0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 192))
  {
    long long v6 = *v4;
    if (*v4)
    {
      *(void *)(v1 + 176) = v6;
      operator delete(v6);
    }
  }
  if (*(unsigned char *)(v1 + 160))
  {
    long long v7 = *v3;
    if (*v3)
    {
      *(void *)(v1 + 144) = v7;
      operator delete(v7);
    }
  }
  if (*(unsigned char *)(v1 + 128))
  {
    if (*(char *)(v1 + 127) < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CSCppCoreFileRegionInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  long long v5 = (long long *)*a1;
  long long v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 224;
    v4 -= 14;
    std::construct_at[abi:ne180100]<CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo*>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(224 * a2);
}

__n128 std::construct_at[abi:ne180100]<CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo*>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  if (*((unsigned char *)a2 + 128))
  {
    long long v7 = *(long long *)((char *)a2 + 104);
    *(void *)(a1 + 120) = *((void *)a2 + 15);
    *(_OWORD *)(a1 + 104) = v7;
    *((void *)a2 + 14) = 0;
    *((void *)a2 + 15) = 0;
    *((void *)a2 + 13) = 0;
    *(unsigned char *)(a1 + 128) = 1;
  }
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  if (*((unsigned char *)a2 + 160))
  {
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
    *(void *)(a1 + 152) = *((void *)a2 + 19);
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 18) = 0;
    *((void *)a2 + 19) = 0;
    *(unsigned char *)(a1 + 160) = 1;
  }
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  if (*((unsigned char *)a2 + 192))
  {
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(_OWORD *)(a1 + 168) = *(long long *)((char *)a2 + 168);
    *(void *)(a1 + 184) = *((void *)a2 + 23);
    *((void *)a2 + 21) = 0;
    *((void *)a2 + 22) = 0;
    *((void *)a2 + 23) = 0;
    *(unsigned char *)(a1 + 192) = 1;
  }
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 200);
  *(__n128 *)(a1 + 200) = result;
  *(void *)(a1 + 216) = *((void *)a2 + 27);
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  return result;
}

void std::__destroy_at[abi:ne180100]<CSCppCoreFileRegionInfo,0>(uint64_t a1)
{
  long long v4 = (void **)(a1 + 200);
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(unsigned char *)(a1 + 192))
  {
    long long v2 = *(void **)(a1 + 168);
    if (v2)
    {
      *(void *)(a1 + 176) = v2;
      operator delete(v2);
    }
  }
  if (*(unsigned char *)(a1 + 160))
  {
    long long v3 = *(void **)(a1 + 136);
    if (v3)
    {
      *(void *)(a1 + 144) = v3;
      operator delete(v3);
    }
  }
  if (*(unsigned char *)(a1 + 128))
  {
    if (*(char *)(a1 + 127) < 0) {
      operator delete(*(void **)(a1 + 104));
    }
  }
}

uint64_t std::__split_buffer<CSCppCoreFileRegionInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 224;
    std::__destroy_at[abi:ne180100]<CSCppCoreFileRegionInfo,0>(i - 224);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<CSCppCoreFileRegionInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 224))
  {
    long long v5 = (void **)(a1 + 200);
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
    if (*(unsigned char *)(a1 + 192))
    {
      long long v2 = *(void **)(a1 + 168);
      if (v2)
      {
        *(void *)(a1 + 176) = v2;
        operator delete(v2);
      }
    }
    if (*(unsigned char *)(a1 + 160))
    {
      uint64_t v3 = *(void **)(a1 + 136);
      if (v3)
      {
        *(void *)(a1 + 144) = v3;
        operator delete(v3);
      }
    }
    if (*(unsigned char *)(a1 + 128) && *(char *)(a1 + 127) < 0) {
      operator delete(*(void **)(a1 + 104));
    }
  }
  return a1;
}

void *std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<CSCppCoreFileRegionInfo>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B9039EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CSCppCoreFileRegionInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[224 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      CSCppCoreFileRegionInfo::CSCppCoreFileRegionInfo((CSCppCoreFileRegionInfo *)(a4 + v7), (const CSCppCoreFileRegionInfo *)(a2 + v7));
      v7 += 224;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B9039F78(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 224;
    do
    {
      std::__destroy_at[abi:ne180100]<CSCppCoreFileRegionInfo,0>(v4 + v2);
      v2 -= 224;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 224;
        std::__destroy_at[abi:ne180100]<CSCppCoreFileRegionInfo,0>(v4);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      long long v6 = *(void **)(v4 - 24);
      v4 -= 24;
      long long v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

char *std::vector<unsigned short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  long long v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    __int16 v13 = *(void **)a1;
    if (a5 + ((uint64_t)(v12 - *(void *)a1) >> 1) < 0) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = (__dst - (uint64_t)v13) >> 1;
    unint64_t v15 = v10 - (void)v13;
    if (v15 <= a5 + ((uint64_t)(v12 - *(void *)a1) >> 1)) {
      unint64_t v16 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 1);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v15 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v17 = v16;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v28 = &v18[2 * v14];
    long long __p = v18;
    long long v34 = v28;
    uint64_t v36 = &v18[2 * v17];
    uint64_t v29 = 2 * a5;
    __int16 v30 = &v28[2 * a5];
    do
    {
      __int16 v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)uint64_t v28 = v31;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    unint64_t v35 = v30;
    long long v5 = std::vector<unsigned short>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 1) & 0xFFFFFFFFFFFFFFFELL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 1;
  if (v20 >= a5)
  {
    __int16 v21 = &__src[2 * a5];
    char v23 = *(char **)(v9 - 8);
LABEL_18:
    uint64_t v24 = &v5[2 * a5];
    uint64_t v25 = &v23[-2 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        __int16 v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)uint64_t v26 = v27;
        v26 += 2;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  __int16 v21 = &__src[2 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[2 * v20], a4 - v21);
  }
  char v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_1B903A29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  long long v5 = *(char **)(a2 + 8);
  long long v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      __int16 v9 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v7 - 1) = v9;
      v7 -= 2;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  __int16 v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  uint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  unint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)(a2 + 6), (void *)a2[7]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void OUTLINED_FUNCTION_0_1(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = __p;
  operator delete(__p);
}

uint64_t CSCppSymbolOwnerTimeline::CSCppSymbolOwnerTimeline(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_1F12C9738;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  uint64_t v4 = (uint64_t *)*a2;
  long long v5 = (uint64_t *)a2[1];
  if ((uint64_t *)*a2 != v5)
  {
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)v4[1];
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        *((void *)&v9 + 1) = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        *((void *)&v9 + 1) = 0;
      }
      *(void *)&long long v9 = v6;
      CSCppSymbolOwnerTimeline::add_symbol_owner(a1, &v9);
      if (*((void *)&v9 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__clear[abi:ne180100](a2);
  return a1;
}

void sub_1B903A5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void **a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  a12 = (void **)(v12 + 80);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)(v12 + 56);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy(v13, *(void **)(v12 + 16));
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolOwnerTimeline::add_symbol_owner(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(CSCppSegmentRange **)(*(void *)a2 + 32);
  long long v5 = *(CSCppSegmentRange **)(*(void *)a2 + 40);
  if (v4 == v5)
  {
LABEL_23:
    unint64_t v16 = (uint64_t *)(a1 + 56);
    uint64_t v17 = 1;
    goto LABEL_26;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  int v8 = *(_DWORD *)(*(void *)a2 + 108);
  do
  {
    if (!CSCppSegmentRange::is_valid_address_query_target(v4, v8)) {
      goto LABEL_17;
    }
    if (!v6) {
      goto LABEL_16;
    }
    unint64_t v9 = v6 + v7;
    if (v6 + v7 != *(void *)v4)
    {
      uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 1);
      v20[0] = *(void *)a2;
      v20[1] = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char inserted = CSCppSymbolOwnerTimeline::_insertAddressRangeForSymbolOwner(a1, v7, v6, (uint64_t)v20);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      if ((inserted & 1) == 0) {
        goto LABEL_25;
      }
LABEL_16:
      unint64_t v7 = *(void *)v4;
      uint64_t v6 = *((void *)v4 + 1);
      goto LABEL_17;
    }
    unint64_t v10 = *((void *)v4 + 1) + v9;
    if (v9 > v10) {
      unint64_t v10 = v6 + v7;
    }
    if (v7 >= v9) {
      v7 += v6;
    }
    uint64_t v6 = v10 - v7;
LABEL_17:
    uint64_t v4 = (CSCppSegmentRange *)((char *)v4 + 32);
  }
  while (v4 != v5);
  if (!v6) {
    goto LABEL_23;
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)a2 + 1);
  v19[0] = *(void *)a2;
  v19[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = CSCppSymbolOwnerTimeline::_insertAddressRangeForSymbolOwner(a1, v7, v6, (uint64_t)v19);
  char v15 = v14;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    if (v15) {
      goto LABEL_23;
    }
  }
  else if (v14)
  {
    goto LABEL_23;
  }
LABEL_25:
  uint64_t v17 = 0;
  unint64_t v16 = (uint64_t *)(a1 + 80);
LABEL_26:
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](v16, a2);
  return v17;
}

void sub_1B903A784(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void CSCppSymbolOwnerTimeline::CSCppSymbolOwnerTimeline(CSCppSymbolOwnerTimeline *this, const CSCppSymbolOwnerTimeline *a2)
{
  *(void *)this = &unk_1F12C9738;
  *((void *)this + 2) = 0;
  *((void *)this + 1) = (char *)this + 16;
  uint64_t v4 = (uint64_t **)((char *)this + 8);
  *((void *)this + 3) = 0;
  *((_OWORD *)this + 2) = 0u;
  long long v5 = (uint64_t *)((char *)this + 32);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>((void *)this + 7, *((void **)a2 + 7), *((void **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 4);
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>((void *)this + 10, *((void **)a2 + 10), *((void **)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 4);
  if (this != a2)
  {
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *> *,long>>(v4, *((void **)a2 + 1), (void *)a2 + 2);
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__assign_with_size[abi:ne180100]<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>(v5, *((void *)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 5);
  }
}

void sub_1B903A894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy(v2, *v3);
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolOwnerTimeline::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(a1 + 56, *(uint64_t **)(a2 + 56), *(uint64_t **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(a1 + 80, *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 4);
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *> *,long>>((uint64_t **)(a1 + 8), *(void **)(a2 + 8), (void *)(a2 + 16));
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__assign_with_size[abi:ne180100]<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>((uint64_t *)(a1 + 32), *(void *)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 5);
  }
  return a1;
}

CSCppSymbolOwner *CSCppSymbolOwnerTimeline::symbol_owner_with_address_at_time(CSCppSymbolOwnerTimeline *this, unint64_t a2, unint64_t a3)
{
  __n128 result = 0;
  if (a2 == -1 || a3 == 0x8000000000000001) {
    return result;
  }
  if (!*((void *)this + 3)) {
    return 0;
  }
  unint64_t v6 = a3 - 0x7FFFFFFFFFFFFFFFLL;
  if (a3 - 0x7FFFFFFFFFFFFFFFLL >= 2) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFDLL;
  }
  int v8 = (uint64_t *)((char *)this + 16);
  unint64_t v9 = (void *)*((void *)this + 2);
  if (v9)
  {
    do
    {
      unint64_t v10 = v9[4];
      BOOL v11 = v10 > a2;
      if (v10 <= a2) {
        uint64_t v12 = v9 + 1;
      }
      else {
        uint64_t v12 = v9;
      }
      if (v11) {
        int v8 = v9;
      }
      unint64_t v9 = (void *)*v12;
    }
    while (*v12);
  }
  if (v8 == *((uint64_t **)this + 1)) {
    goto LABEL_22;
  }
  uint64_t v13 = *v8;
  if (*v8)
  {
    do
    {
      uint64_t v14 = v13;
      uint64_t v13 = *(void *)(v13 + 8);
    }
    while (v13);
  }
  else
  {
    do
    {
      uint64_t v14 = v8[2];
      BOOL v15 = *(void *)v14 == (void)v8;
      int v8 = (uint64_t *)v14;
    }
    while (v15);
  }
  if (a2 - *(void *)(v14 + 32) >= *(void *)(v14 + 40))
  {
LABEL_22:
    if (v6 < 2) {
      return 0;
    }
    goto LABEL_23;
  }
  uint64_t unload_timestamp_range = CSCppSymbolOwner::load_unload_timestamp_range(*(CSCppSymbolOwner **)(v14 + 48));
  if (v7 - unload_timestamp_range < v17) {
    return *(CSCppSymbolOwner **)(v14 + 48);
  }
  __n128 result = 0;
  if (v6 >= 2 && v7 <= *(void *)(*(void *)(v14 + 48) + 88))
  {
LABEL_23:
    uint64_t v18 = (CSCppSymbolOwner **)*((void *)this + 4);
    uint64_t v19 = (CSCppSymbolOwner **)*((void *)this + 5);
    if (v18 != v19)
    {
      for (uint64_t i = v18 + 2; ; i += 4)
      {
        __int16 v21 = i - 2;
        if (a2 - (unint64_t)*(i - 2) < (unint64_t)*(i - 1))
        {
          uint64_t v22 = CSCppSymbolOwner::load_unload_timestamp_range(*i);
          if (v7 - v22 < v23) {
            break;
          }
        }
        if (v21 + 4 == v19) {
          return 0;
        }
      }
      return *i;
    }
    return 0;
  }
  return result;
}

uint64_t CSCppSymbolOwnerTimeline::_insertAddressRangeForSymbolOwner(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (uint64_t *)(a1 + 16);
  int v8 = *(void **)(a1 + 16);
  unint64_t v9 = (uint64_t **)(a1 + 8);
  if (!v8) {
    goto LABEL_39;
  }
  BOOL v11 = (uint64_t *)(a1 + 16);
  do
  {
    unint64_t v12 = v8[4];
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = v8 + 1;
    }
    if (v13) {
      BOOL v11 = v8;
    }
    int v8 = (void *)*v14;
  }
  while (*v14);
  if (v11 == v7) {
    goto LABEL_39;
  }
  unint64_t v15 = v11[4];
  unint64_t v16 = a3 + a2;
  if (v15 >= a3 + a2 || (uint64_t v17 = v11[5], a2 >= v17 + v15))
  {
    uint64_t v19 = (uint64_t *)v11[1];
    if (v19)
    {
      do
      {
        uint64_t v18 = v19;
        uint64_t v19 = (uint64_t *)*v19;
      }
      while (v19);
    }
    else
    {
      uint64_t v20 = v11;
      do
      {
        uint64_t v18 = (uint64_t *)v20[2];
        BOOL v21 = *v18 == (void)v20;
        uint64_t v20 = v18;
      }
      while (!v21);
    }
    if (v18 == v7 || (unint64_t v15 = v18[4], v15 >= v16) || (v17 = v18[5], a2 >= v17 + v15))
    {
      unint64_t v7 = v11;
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v18 = v11;
  }
  BOOL v21 = v18 == v7;
  unint64_t v7 = v11;
  if (v21)
  {
LABEL_39:
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = a3;
    char v40 = *(std::__shared_weak_count **)(a4 + 8);
    *(void *)&uint8_t buf[16] = *(void *)a4;
    unint64_t v70 = v40;
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_hint_unique_key_args<TRange<Pointer64>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>((uint64_t **)(a1 + 8), v7, (unint64_t *)buf, (uint64_t)buf);
    if (v70) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v70);
    }
    return 1;
  }
  *(void *)&long long v67 = v17;
  uint64_t v22 = (CSCppSymbolOwner *)v18[6];
  unint64_t v23 = (std::__shared_weak_count *)v18[7];
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)&v67 + 1) = v22;
  unint64_t v68 = v23;
  unint64_t unload_timestamp_range = CSCppSymbolOwner::load_unload_timestamp_range(v22);
  uint64_t v26 = v25;
  unint64_t v27 = CSCppSymbolOwner::load_unload_timestamp_range(*(CSCppSymbolOwner **)a4);
  if (unload_timestamp_range < v28 + v27 && v27 < v26 + unload_timestamp_range)
  {
    if (v16 <= (unint64_t)v67 + v15) {
      unint64_t v29 = v67 + v15;
    }
    else {
      unint64_t v29 = a3 + a2;
    }
    if (a2 >= v15) {
      unint64_t v30 = v15;
    }
    else {
      unint64_t v30 = a2;
    }
    uint64_t v31 = v29 - v30;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)(*((void *)&v67 + 1) + 88);
      uint64_t v33 = *(void *)(*((void *)&v67 + 1) + 96);
      uint64_t v34 = *(void *)(*((void *)&v67 + 1) + 120);
      uint64_t v35 = *(void *)(*(void *)a4 + 88);
      uint64_t v36 = *(void *)(*(void *)a4 + 96);
      uint64_t v37 = *(void *)(*(void *)a4 + 120);
      *(_DWORD *)long long buf = 134221058;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v15;
      *(_WORD *)&buf[22] = 2048;
      unint64_t v70 = (std::__shared_weak_count *)(v67 + v15);
      __int16 v71 = 2048;
      uint64_t v72 = v67;
      __int16 v73 = 2048;
      uint64_t v74 = v32;
      __int16 v75 = 2048;
      uint64_t v76 = v33;
      __int16 v77 = 2080;
      uint64_t v78 = v34;
      __int16 v79 = 2048;
      unint64_t v80 = a2;
      __int16 v81 = 2048;
      unint64_t v82 = a3 + a2;
      __int16 v83 = 2048;
      uint64_t v84 = a3;
      __int16 v85 = 2048;
      uint64_t v86 = v35;
      __int16 v87 = 2048;
      uint64_t v88 = v36;
      __int16 v89 = 2080;
      uint64_t v90 = v37;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Timeline modification failed -- dylibs overlap by 0x%llx:\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n", buf, 0x84u);
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Timeline modification failed -- dylibs overlap by 0x%llx:\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n", v31, v15, (void)v67 + v15, (void)v67, *(void *)(*((void *)&v67 + 1) + 88), *(void *)(*((void *)&v67 + 1) + 96), *(const char **)(*((void *)&v67 + 1) + 120), a2, a3 + a2, a3, *(void *)(*(void *)a4 + 88), *(void *)(*(void *)a4 + 96), *(const char **)(*(void *)a4 + 120));
    uint64_t v38 = 0;
    unint64_t v39 = v68;
    if (!v68) {
      return v38;
    }
LABEL_69:
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    return v38;
  }
  long long v42 = *(CSCppSymbolOwner **)a4;
  unint64_t v43 = (uint64_t *)(a1 + 32);
  if (*(void *)(*((void *)&v67 + 1) + 88) >= *(void *)(*(void *)a4 + 88))
  {
    long long v45 = *(unint64_t **)(a1 + 32);
    uint64_t v46 = *(unint64_t **)(a1 + 40);
    unint64_t v39 = v68;
    if (v45 != v46)
    {
      while (1)
      {
        if (*v45 < v16 && a2 < v45[1] + *v45)
        {
          unint64_t v47 = CSCppSymbolOwner::load_unload_timestamp_range((CSCppSymbolOwner *)v45[2]);
          uint64_t v49 = v48;
          unint64_t v50 = CSCppSymbolOwner::load_unload_timestamp_range(*(CSCppSymbolOwner **)a4);
          if (v47 < v51 + v50 && v50 < v49 + v47) {
            break;
          }
        }
        v45 += 4;
        if (v45 == v46)
        {
          long long v42 = *(CSCppSymbolOwner **)a4;
          goto LABEL_63;
        }
      }
      unint64_t v54 = *v45;
      uint64_t v55 = v45[1];
      uint64_t v56 = (std::__shared_weak_count *)(v55 + *v45);
      if (v16 <= (unint64_t)v56) {
        unint64_t v57 = v55 + *v45;
      }
      else {
        unint64_t v57 = a3 + a2;
      }
      if (a2 >= v54) {
        unint64_t v58 = *v45;
      }
      else {
        unint64_t v58 = a2;
      }
      uint64_t v59 = v57 - v58;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v60 = (void *)v45[2];
        uint64_t v61 = v60[11];
        uint64_t v62 = v60[12];
        uint64_t v63 = v60[15];
        uint64_t v64 = *(void *)(*(void *)a4 + 88);
        uint64_t v65 = *(void *)(*(void *)a4 + 96);
        uint64_t v66 = *(void *)(*(void *)a4 + 120);
        *(_DWORD *)long long buf = 134221058;
        *(void *)&uint8_t buf[4] = v59;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v54;
        *(_WORD *)&buf[22] = 2048;
        unint64_t v70 = v56;
        __int16 v71 = 2048;
        uint64_t v72 = v55;
        __int16 v73 = 2048;
        uint64_t v74 = v61;
        __int16 v75 = 2048;
        uint64_t v76 = v62;
        __int16 v77 = 2080;
        uint64_t v78 = v63;
        __int16 v79 = 2048;
        unint64_t v80 = a2;
        __int16 v81 = 2048;
        unint64_t v82 = a3 + a2;
        __int16 v83 = 2048;
        uint64_t v84 = a3;
        __int16 v85 = 2048;
        uint64_t v86 = v64;
        __int16 v87 = 2048;
        uint64_t v88 = v65;
        __int16 v89 = 2080;
        uint64_t v90 = v66;
        _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Historical timeline modification failed -- dylibs overlap by 0x%llx:\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n", buf, 0x84u);
        unint64_t v54 = *v45;
        uint64_t v55 = v45[1];
        uint64_t v56 = (std::__shared_weak_count *)(v55 + *v45);
      }
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Historical timeline modification failed -- dylibs overlap by 0x%llx:\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n", v59, v54, v56, v55, *(void *)(v45[2] + 88), *(void *)(v45[2] + 96), *(const char **)(v45[2] + 120), a2, a3 + a2, a3, *(void *)(*(void *)a4 + 88), *(void *)(*(void *)a4 + 96), *(const char **)(*(void *)a4 + 120));
      uint64_t v38 = 0;
      if (v68) {
        goto LABEL_69;
      }
      return v38;
    }
LABEL_63:
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = a3;
    uint64_t v53 = *(std::__shared_weak_count **)(a4 + 8);
    *(void *)&uint8_t buf[16] = v42;
    unint64_t v70 = v53;
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::emplace_back<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>(v43, (uint64_t)buf);
  }
  else
  {
    *(void *)long long buf = v15;
    *(_OWORD *)&uint8_t buf[8] = v67;
    unint64_t v39 = v68;
    unint64_t v70 = v68;
    if (v68) {
      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::push_back[abi:ne180100]((uint64_t *)(a1 + 32), (uint64_t)buf);
    if (v70) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v70);
    }
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::erase(v9, v18);
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = a3;
    long long v44 = *(std::__shared_weak_count **)(a4 + 8);
    *(void *)&uint8_t buf[16] = *(void *)a4;
    unint64_t v70 = v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_unique_key_args<TRange<Pointer64>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>(v9, (unint64_t *)buf, (uint64_t)buf);
  }
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  uint64_t v38 = 1;
  if (v39) {
    goto LABEL_69;
  }
  return v38;
}

void sub_1B903B06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v16[4] = result;
    BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)result, v12);
    uint64_t v14 = &v13[32 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[32 * v15];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((_OWORD *)v14 + 1) = *(_OWORD *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    _OWORD v16[2] = v14 + 32;
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__swap_out_circular_buffer(a1, v16);
    int v8 = (_OWORD *)a1[1];
    __n128 result = std::__split_buffer<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::~__split_buffer(v16);
  }
  else
  {
    *unint64_t v7 = *(_OWORD *)a2;
    v7[1] = *(_OWORD *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    int v8 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B903B1A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_OWORD *std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::emplace_back<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = (_OWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)v4, v12);
    uint64_t v14 = &v13[32 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[32 * v15];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((_OWORD *)v14 + 1) = *(_OWORD *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    _OWORD v17[2] = v14 + 32;
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__swap_out_circular_buffer(a1, v17);
    int v8 = (_OWORD *)a1[1];
    std::__split_buffer<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::~__split_buffer(v17);
  }
  else
  {
    *unint64_t v7 = *(_OWORD *)a2;
    v7[1] = *(_OWORD *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    int v8 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 2;
}

void sub_1B903B2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CSCppSegmentRange::is_valid_address_query_target(CSCppSegmentRange *this, __int16 a2)
{
  uint64_t v4 = (const char *)*((void *)this + 3);
  unint64_t v5 = v4;
  if (!v4) {
    unint64_t v5 = (const char *)*((void *)this + 2);
  }
  uint64_t result = strncmp(v5, "__PAGEZERO", 0xBuLL);
  if (result)
  {
    if ((a2 & 0x1200) == 0) {
      return 1;
    }
    unint64_t v7 = v4;
    if (!v4) {
      unint64_t v7 = (const char *)*((void *)this + 2);
    }
    if (!strncmp(v7, "__LINKEDIT", 0xBuLL)) {
      return 0;
    }
    if (*(void *)this) {
      return 1;
    }
    if (!v4) {
      uint64_t v4 = (const char *)*((void *)this + 2);
    }
    return !strncmp(v4, "__TEXT", 7uLL);
  }
  return result;
}

BOOL CSCppSymbolOwnerTimeline::remove_symbol_owner(uint64_t a1, long long *a2)
{
  uint64_t v4 = std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<CSCppSymbolOwner> *>,std::shared_ptr<CSCppSymbolOwner>>(*(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64), a2);
  unint64_t v5 = v4;
  unint64_t v6 = *(uint64_t **)(a1 + 64);
  if (v6 != v4)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner> *,std::shared_ptr<CSCppSymbolOwner> *,std::shared_ptr<CSCppSymbolOwner> *>((uint64_t)&v26, (long long *)v4 + 1, *(long long **)(a1 + 64), (uint64_t)v4);
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(a1 + 64);
    if (v9 != v7)
    {
      do
      {
        unint64_t v10 = *(std::__shared_weak_count **)(v9 - 8);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        v9 -= 16;
      }
      while (v9 != v8);
    }
    *(void *)(a1 + 64) = v8;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((uint64_t *)(a1 + 80), a2);
    uint64_t v12 = *(void *)a2;
    uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 1);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v13 = *(uint64_t **)(a1 + 8);
    if (v13 != (uint64_t *)(a1 + 16))
    {
      do
      {
        if (v13[6] == v12)
        {
          uint64_t v15 = std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::erase((uint64_t **)(a1 + 8), v13);
        }
        else
        {
          uint64_t v14 = (uint64_t *)v13[1];
          if (v14)
          {
            do
            {
              uint64_t v15 = v14;
              uint64_t v14 = (uint64_t *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              uint64_t v15 = (uint64_t *)v13[2];
              BOOL v16 = *v15 == (void)v13;
              BOOL v13 = v15;
            }
            while (!v16);
          }
        }
        BOOL v13 = v15;
      }
      while (v15 != (uint64_t *)(a1 + 16));
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 40);
    if (v18 != v17)
    {
      uint64_t v20 = *(void *)a2;
      uint64_t v19 = (std::__shared_weak_count *)*((void *)a2 + 1);
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = v17 + 32;
      while (*(void *)(v21 - 16) != v20)
      {
        BOOL v16 = v21 == v18;
        v21 += 32;
        if (v16)
        {
          uint64_t v22 = v18;
          goto LABEL_35;
        }
      }
      uint64_t v22 = v21 - 32;
      if (v21 - 32 != v18)
      {
        while (v21 != v18)
        {
          if (*(void *)(v21 + 16) != v20)
          {
            *(_OWORD *)uint64_t v22 = *(_OWORD *)v21;
            long long v23 = *(_OWORD *)(v21 + 16);
            *(void *)(v21 + 16) = 0;
            *(void *)(v21 + 24) = 0;
            uint64_t v24 = *(std::__shared_weak_count **)(v22 + 24);
            *(_OWORD *)(v22 + 16) = v23;
            if (v24) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
            v22 += 32;
          }
          v21 += 32;
        }
      }
LABEL_35:
      std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::erase(a1 + 32, v22, *(void *)(a1 + 40));
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
    }
  }
  return v6 != v5;
}

void sub_1B903B574(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<CSCppSymbolOwner> *>,std::shared_ptr<CSCppSymbolOwner>>(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 == a2)
  {
LABEL_5:
    unint64_t v5 = a2;
  }
  else
  {
    unint64_t v5 = a1;
    while (*v5 != *a3)
    {
      v5 += 2;
      if (v5 == a2) {
        goto LABEL_5;
      }
    }
  }
  if (v5 != a2)
  {
    for (uint64_t i = v5 + 2; i != a2; i += 2)
    {
      uint64_t v7 = *i;
      if (*i != *a3)
      {
        uint64_t v8 = i[1];
        uint64_t *i = 0;
        i[1] = 0;
        uint64_t v9 = (std::__shared_weak_count *)v5[1];
        *unint64_t v5 = v7;
        v5[1] = v8;
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        v5 += 2;
      }
    }
  }
  return v5;
}

uint64_t std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *>((uint64_t)&v10, a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v7 - 8);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        v7 -= 32;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void CSCppSymbolOwnerTimeline::~CSCppSymbolOwnerTimeline(CSCppSymbolOwnerTimeline *this)
{
  CSCppSymbolOwnerTimeline::~CSCppSymbolOwnerTimeline(this);

  JUMPOUT(0x1BA9D1CD0);
}

{
  void **v2;

  *(void *)this = &unk_1F12C9738;
  uint64_t v2 = (void **)((char *)this + 80);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 56);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

void std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__assign_with_size[abi:ne180100]<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__vdeallocate(a1);
    if (a4 >> 59) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<CSCppSegmentRange>::__vallocate[abi:ne180100](a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>(v8, v6, a3, a1[1]);
LABEL_15:
    a1[1] = v13;
    return;
  }
  uint64_t v14 = a1[1];
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 < a4)
  {
    uint64_t v16 = a2 + 32 * v15;
    if (v14 != v9)
    {
      uint64_t v17 = 32 * v15;
      do
      {
        std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>::operator=[abi:ne180100](v9, v6);
        v6 += 32;
        v9 += 32;
        v17 -= 32;
      }
      while (v17);
      uint64_t v9 = a1[1];
    }
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>(v8, v16, a3, v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    uint64_t v18 = *a1;
  }
  else
  {
    uint64_t v18 = *a1;
    do
    {
      std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>::operator=[abi:ne180100](v9, v6);
      v6 += 32;
      v9 += 32;
      v18 += 32;
    }
    while (v6 != a3);
    uint64_t v14 = a1[1];
  }
  while (v14 != v18)
  {
    uint64_t v19 = *(std::__shared_weak_count **)(v14 - 8);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v14 -= 32;
  }
  a1[1] = v18;
}

void sub_1B903B90C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      *(void *)(v4 + 16) = *(void *)(a2 + 16);
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(v4 + 24) = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 32;
      a2 += 32;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 32;
  }
}

uint64_t std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void std::vector<std::shared_ptr<CSCppSymbolOwner>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>,std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    unint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner> *,std::shared_ptr<CSCppSymbolOwner> *,std::shared_ptr<CSCppSymbolOwner> *>((uint64_t)&v20, a2, v15, v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>,std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner> *,std::shared_ptr<CSCppSymbolOwner> *,std::shared_ptr<CSCppSymbolOwner> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1B903BBFC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B903BC04(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner> *,std::shared_ptr<CSCppSymbolOwner> *,std::shared_ptr<CSCppSymbolOwner> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>,std::reverse_iterator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>,std::reverse_iterator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>,std::reverse_iterator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>,std::reverse_iterator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>,std::reverse_iterator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>,std::reverse_iterator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    uint64_t v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v13 + 1) - 32;
      *((void *)&v13 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v8 = v13;
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>,std::reverse_iterator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>,std::reverse_iterator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>,std::reverse_iterator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>,std::reverse_iterator<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 32;
  }
}

void **std::__split_buffer<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 32;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 32;
    }
  }
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner> *,std::shared_ptr<CSCppSymbolOwner> *,std::shared_ptr<CSCppSymbolOwner> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_OWORD *)a4 = *(_OWORD *)v5;
    long long v7 = *(_OWORD *)(v5 + 16);
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(a4 + 24);
    *(_OWORD *)(a4 + 16) = v7;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    a4 += 32;
    v5 += 32;
  }
  while (v5 != v6);
  return v6;
}

void std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[7];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    long long v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    unint64_t v14 = result;
    unint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      unint64_t v15 = std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v17[0] = v8 + 4;
          v17[1] = v8 + 6;
          std::pair<TRange<Pointer64> &,std::shared_ptr<CSCppSymbolOwner> &>::operator=[abi:ne180100]<TRange<Pointer64> const,std::shared_ptr<CSCppSymbolOwner>,(void *)0>((uint64_t)v17, (uint64_t)(v9 + 4));
          std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi(v5, v16);
          uint64_t v16 = v15;
          if (v15) {
            unint64_t v15 = std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          uint64_t v8 = v16;
          if (v16) {
            BOOL v11 = a2 == a3;
          }
          else {
            BOOL v11 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v11);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_multi<std::pair<TRange<Pointer64> const,std::shared_ptr<CSCppSymbolOwner>> const&>(v5, (uint64_t)(a2 + 4));
      long long v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          long long v13 = v12;
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B903C148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4]) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

uint64_t std::pair<TRange<Pointer64> &,std::shared_ptr<CSCppSymbolOwner> &>::operator=[abi:ne180100]<TRange<Pointer64> const,std::shared_ptr<CSCppSymbolOwner>,(void *)0>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)*(void *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)v3[1];
  void *v3 = v5;
  v3[1] = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

void *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

_OWORD *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_multi<std::pair<TRange<Pointer64> const,std::shared_ptr<CSCppSymbolOwner>> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v5 = operator new(0x40uLL);
  uint64_t v6 = v5;
  v5[2] = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 24);
  *((void *)v5 + 6) = *(void *)(a2 + 16);
  *((void *)v5 + 7) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *v4;
  uint64_t v9 = v4;
  if (*v4)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = (uint64_t **)v8;
        if (*((void *)v5 + 4) >= (unint64_t)v8[4]) {
          break;
        }
        uint64_t v8 = (uint64_t *)*v8;
        uint64_t v9 = v4;
        if (!*v4) {
          goto LABEL_9;
        }
      }
      uint64_t v8 = (uint64_t *)v8[1];
    }
    while (v8);
    uint64_t v9 = v4 + 1;
  }
LABEL_9:
  std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v4, v9, (uint64_t *)v5);
  return v6;
}

uint64_t *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_hint_unique_key_args<TRange<Pointer64>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__find_equal<TRange<Pointer64>>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x40uLL);
    long long v9 = *(_OWORD *)(a4 + 16);
    *((_OWORD *)v7 + 2) = *(_OWORD *)a4;
    *((_OWORD *)v7 + 3) = v9;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, v12, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__find_equal<TRange<Pointer64>>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      long long v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        long long v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    char v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          char v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          char v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        char v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      char v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<TRangeValue<Pointer64,unsigned char *>>::__remove_node_pointer(a1, a2);
  uint64_t v4 = (std::__shared_weak_count *)a2[7];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  operator delete(a2);
  return v3;
}

uint64_t **std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_unique_key_args<TRange<Pointer64>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x40uLL);
    long long v11 = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    *((_OWORD *)v10 + 3) = v11;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t CSSymbolicatorCreateWithCoreFilePathAndFlags(char *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v250 = *MEMORY[0x1E4F143B8];
  CSCppFileMemory::CSCppFileMemory(v194, a1, 0);
  unint64_t v7 = (_DWORD *)(*(uint64_t (**)(void *, void, uint64_t))(v194[0] + 32))(v194, 0, 28);
  if (!v7 || *v7 != -17958194)
  {
    CSCppFileMemory::CSCppFileMemory(&v221, a1, 0);
    uint64_t v38 = (_DWORD *)(*(uint64_t (**)(long long *, void, uint64_t))(v221 + 32))(&v221, 0, 32);
    if (!v38 || *v38 != -17958193)
    {
      uint64_t v69 = 0;
      goto LABEL_368;
    }
    unint64_t v39 = (unint64_t)v199;
    CSCppFileMemory::CSCppFileMemory(v199, a1, 0);
    v198 = v199;
    char v40 = TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::macho_header_at(&v198, 0, 1);
    if (!v40 || (uint64_t v192 = (uint64_t)v40, v40[3] != 4))
    {
      uint64_t v69 = 0;
      goto LABEL_367;
    }
    long long v196 = 0u;
    *(_OWORD *)v195 = 0u;
    int v197 = 1065353216;
    if (a4)
    {
      unint64_t v39 = a3 + 8;
      do
      {
        uint64_t v41 = *(void *)v39;
        v39 += 16;
        *(void *)&long long v241 = (v41 & 0xFFFFFFFFFFFFFFFCLL) + 16;
        std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>((uint64_t)v195, (void *)v241, (uint64_t)&std::piecewise_construct, (_OWORD **)&v241)[4] = v41 & 0xFFFFFFFFFFFFFFFCLL;
        --a4;
      }
      while (a4);
    }
    uint64_t mapped_memory_cache_for_core_file_without_exclave_metadata = create_mapped_memory_cache_for_core_file_without_exclave_metadata(a1, "CSSymbolicator for core file");
    if (!mapped_memory_cache_for_core_file_without_exclave_metadata)
    {
      uint64_t v69 = 0;
      goto LABEL_366;
    }
    CSCppCoreFileMemory::CSCppCoreFileMemory(v234, mapped_memory_cache_for_core_file_without_exclave_metadata);
    release_core_file_mapped_memory_cache(mapped_memory_cache_for_core_file_without_exclave_metadata);
    *(void *)&long long v241 = 0;
    uint64_t unretained_reconstructed_core_file_memory = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v234);
    if (!mapped_memory_core_file_get_dyld_all_image_infos_addr(unretained_reconstructed_core_file_memory, (uint64_t)&v241))
    {
      LOBYTE(__p) = 0;
      char v233 = 0;
      uint64_t v124 = (*(uint64_t (**)(_OWORD *, void, uint64_t))(*(void *)&v234[0] + 32))(v234, v241, 368);
      if (v125 > 0x16F)
      {
        unsigned int v126 = *(_DWORD *)v124;
        uint64_t v127 = *(unsigned int *)(v124 + 4);
        uint64_t v128 = *(void *)(v124 + 8);
        uint64_t v129 = *(void *)(v124 + 32);
        long long v130 = *(_OWORD *)(v124 + 136);
        long long v246 = *(_OWORD *)(v124 + 120);
        long long v247 = v130;
        long long v248 = *(_OWORD *)(v124 + 152);
        uint64_t v249 = *(void *)(v124 + 168);
        long long v131 = *(_OWORD *)(v124 + 72);
        long long v242 = *(_OWORD *)(v124 + 56);
        long long v243 = v131;
        long long v132 = *(_OWORD *)(v124 + 104);
        long long v244 = *(_OWORD *)(v124 + 88);
        long long v245 = v132;
        long long v133 = *(_OWORD *)(v124 + 40);
        unint64_t v134 = *(void *)(v124 + 192);
        unsigned int v135 = *(_DWORD *)(v124 + 320);
        long long v240 = *(_OWORD *)(v124 + 352);
        long long v241 = v133;
        if (v126 > 0x10 && v128)
        {
          unsigned int v188 = v135;
          v219 = 0;
          v218 = 0;
          v220 = 0;
          uint64_t v136 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(*(void *)&v234[0] + 32))(v234, v128, 24 * v127);
          if (v136)
          {
            if (v127)
            {
              uint64_t v137 = 0;
              long long v138 = (char *)v219;
              do
              {
                uint64_t v139 = v136 + 24 * v137;
                if (v138 >= v220)
                {
                  unint64_t v141 = 0xAAAAAAAAAAAAAAABLL * ((v138 - (unsigned char *)v218) >> 3);
                  unint64_t v142 = v141 + 1;
                  if (v141 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5555555555555556 * ((v220 - (unsigned char *)v218) >> 3) > v142) {
                    unint64_t v142 = 0x5555555555555556 * ((v220 - (unsigned char *)v218) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((v220 - (unsigned char *)v218) >> 3) >= 0x555555555555555) {
                    unint64_t v143 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v143 = v142;
                  }
                  if (v143) {
                    v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v220, v143);
                  }
                  else {
                    v144 = 0;
                  }
                  long long v145 = &v144[24 * v141];
                  long long v146 = *(_OWORD *)v139;
                  *((void *)v145 + 2) = *(void *)(v139 + 16);
                  *(_OWORD *)long long v145 = v146;
                  v147 = (char *)v219;
                  uint64_t v148 = (char *)v218;
                  uint64_t v149 = v145;
                  if (v219 != v218)
                  {
                    do
                    {
                      long long v150 = *(_OWORD *)(v147 - 24);
                      *((void *)v149 - 1) = *((void *)v147 - 1);
                      *(_OWORD *)(v149 - 24) = v150;
                      v149 -= 24;
                      v147 -= 24;
                    }
                    while (v147 != v148);
                    v147 = (char *)v218;
                  }
                  long long v138 = v145 + 24;
                  v218 = v149;
                  v219 = v145 + 24;
                  v220 = &v144[24 * v143];
                  if (v147) {
                    operator delete(v147);
                  }
                }
                else
                {
                  long long v140 = *(_OWORD *)v139;
                  *((void *)v138 + 2) = *(void *)(v139 + 16);
                  *(_OWORD *)long long v138 = v140;
                  v138 += 24;
                }
                v219 = v138;
                ++v137;
              }
              while (v137 != v127);
            }
            *(void *)&long long v214 = 0;
            *((void *)&v214 + 1) = &v214;
            *(void *)&long long v215 = 0x4002000000;
            *((void *)&v215 + 1) = __Block_byref_object_copy__60;
            v216 = __Block_byref_object_dispose__61;
            memset(v217, 0, sizeof(v217));
            LOBYTE(v235) = 0;
            BYTE8(v236) = 0;
            if (v188 <= 0x18 && ((1 << v188) & 0x1550000) != 0) {
              std::optional<std::string>::operator=[abi:ne180100]<char const(&)[14],void>((std::string *)&v235, "/usr/lib/dyld");
            }
            create_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>>((uint64_t)v234, v134, v129, (uint64_t)&v235, (void ***)&v208);
            uint64_t v151 = v208;
            if ((void)v208)
            {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((uint64_t *)(*((void *)&v214 + 1) + 40), &v208);
            }
            else
            {
              LOBYTE(v227) = 0;
              char v230 = 0;
            }
            if (*((void *)&v208 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v208 + 1));
            }
            if (BYTE8(v236) && SBYTE7(v236) < 0) {
              operator delete((void *)v235);
            }
            if (v151)
            {
              *(void *)&long long v208 = 0;
              *((void *)&v208 + 1) = &v208;
              *(void *)&long long v209 = 0x5002000000;
              *((void *)&v209 + 1) = __Block_byref_object_copy__63;
              v210 = __Block_byref_object_dispose__64;
              long long v211 = 0u;
              long long v212 = 0u;
              int v213 = 1065353216;
              uint64_t v204 = 0;
              v205 = &v204;
              uint64_t v206 = 0x2000000000;
              LOBYTE(v207) = 1;
              uint64_t v157 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v234);
              *(void *)&long long v235 = MEMORY[0x1E4F143A8];
              *((void *)&v235 + 1) = 1174405120;
              *(void *)&long long v236 = ___ZL58get_fake_task_and_symbol_owners_using_dyld_all_image_infosI17SizeAndEndiannessI9Pointer6412LittleEndianEENSt3__18optionalINS4_4pairINS4_10unique_ptrI9CSCppTaskNS4_14default_deleteIS8_EEEENS4_6vectorINS4_10shared_ptrI16CSCppSymbolOwnerEENS4_9allocatorISF_EEEEEEEER19CSCppCoreFileMemoryy_block_invoke;
              *((void *)&v236 + 1) = &unk_1F12C9798;
              memset(&v238[8], 0, 24);
              std::vector<CS_dyld_image_info_arch_specific<Pointer64>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer64>*,CS_dyld_image_info_arch_specific<Pointer64>*>(&v238[8], v218, (uint64_t)v219, 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v219 - (unsigned char *)v218) >> 3));
              *(void *)&long long v237 = &v208;
              *((void *)&v237 + 1) = &v204;
              v239 = v234;
              *(void *)v238 = &v214;
              enumerate_mapped_memory_core_file_dumped_regions(v157, (uint64_t)&v235);
              if (*((unsigned char *)v205 + 24)) {
                operator new();
              }
              LOBYTE(v227) = 0;
              char v230 = 0;
              if (*(void *)&v238[8])
              {
                *(void *)&v238[16] = *(void *)&v238[8];
                operator delete(*(void **)&v238[8]);
              }
              _Block_object_dispose(&v204, 8);
              _Block_object_dispose(&v208, 8);
              std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&v211);
            }
            _Block_object_dispose(&v214, 8);
            *(void *)&long long v208 = v217;
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
          }
          else
          {
            LOBYTE(v227) = 0;
            char v230 = 0;
          }
          if (v218)
          {
            v219 = v218;
            operator delete(v218);
          }
        }
        else
        {
          LOBYTE(v227) = 0;
          char v230 = 0;
        }
      }
      else
      {
        LOBYTE(v227) = 0;
        char v230 = 0;
      }
      std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>((uint64_t *)&__p, (uint64_t *)&v227);
      v169 = (uint64_t *)&v227;
      goto LABEL_343;
    }
    int v44 = 0;
    uint64_t v45 = *(unsigned int *)(v192 + 20);
    LODWORD(v208) = *(_DWORD *)(v192 + 16);
    *((void *)&v208 + 1) = v192;
    *(void *)&long long v209 = v192 + 32 + v45;
    *((void *)&v209 + 1) = v192 + 32;
    while (2)
    {
      unint64_t v46 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v208);
      unint64_t v47 = v46;
      if (!v46) {
        goto LABEL_150;
      }
      if (*(_DWORD *)v46 != 49 || strncmp((const char *)(v46 + 8), "all image infos", 0x10uLL))
      {
        int v48 = 2;
        goto LABEL_80;
      }
      read_type_from_raw_core_file_bytes<CS_all_image_infos_header>((uint64_t)a1, *(void *)(v47 + 24), *(void *)(v47 + 32), 1, (uint64_t)&v214);
      int v48 = 1;
      if (!BYTE8(v215) || v214 != 1)
      {
        unint64_t v39 = 0;
        int v44 = 0;
        goto LABEL_80;
      }
      int v184 = v44;
      uint64_t v49 = DWORD1(v214);
      if (!DWORD1(v214))
      {
        int v48 = 3;
LABEL_124:
        int v44 = v184;
        goto LABEL_80;
      }
      v182 = (void *)v39;
      uint64_t v50 = 0;
      uint64_t v51 = *((void *)&v214 + 1);
      unint64_t v52 = v215;
      int v190 = a2;
      uint64_t v186 = *((void *)&v214 + 1);
      while (1)
      {
        read_type_from_raw_core_file_bytes<CS_image_entry>((uint64_t)a1, v51 + (v52 * v50), v52, 1, (uint64_t)&v235);
        if (!v238[0])
        {
          unint64_t v39 = 0;
          int v44 = 0;
          goto LABEL_130;
        }
        unint64_t v53 = v235;
        if ((void)v235 != -1) {
          break;
        }
LABEL_120:
        if (++v50 == v49)
        {
          int v48 = 3;
          unint64_t v39 = (unint64_t)v182;
          goto LABEL_124;
        }
      }
      uint64_t v54 = CSCppFileMemory::CSCppFileMemory(&v241, a1, v235);
      read_path_from_offset_in_cpp_memory(v54, v53, (std::string *)&__p);
      if (!BYTE8(v232))
      {
LABEL_119:
        CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v241);
        goto LABEL_120;
      }
      std::string::basic_string[abi:ne180100]<0>(&v227, "/dyld");
      int v55 = SHIBYTE(v228);
      if (v228 >= 0) {
        size_t v56 = HIBYTE(v228);
      }
      else {
        size_t v56 = *((void *)&v227 + 1);
      }
      if (SBYTE7(v232) < 0)
      {
        uint64_t v57 = *((void *)&__p + 1);
        if (v56 <= *((void *)&__p + 1))
        {
          uint64_t p_p = __p;
LABEL_99:
          uint64_t v60 = v57 - v56;
          if (v228 >= 0) {
            uint64_t v61 = &v227;
          }
          else {
            uint64_t v61 = (long long *)v227;
          }
          if (v56)
          {
            uint64_t v62 = (void *)(p_p + v60);
            uint64_t v63 = (char *)(p_p + v57);
            int64_t v64 = v56;
            int v65 = *(char *)v61;
            do
            {
              size_t v66 = v64 - v56;
              if (v66 == -1) {
                break;
              }
              long long v67 = (char *)memchr(v62, v65, v66 + 1);
              if (!v67) {
                break;
              }
              unint64_t v68 = v67;
              if (!memcmp(v67, v61, v56)) {
                goto LABEL_109;
              }
              uint64_t v62 = v68 + 1;
              int64_t v64 = v63 - (v68 + 1);
            }
            while (v64 >= (uint64_t)v56);
            unint64_t v68 = v63;
LABEL_109:
            if (v68 == v63) {
              uint64_t v60 = -1;
            }
            else {
              uint64_t v60 = (uint64_t)&v68[-p_p];
            }
            a2 = v190;
          }
          uint64_t v51 = v186;
          BOOL v59 = v60 != -1;
          if ((v55 & 0x80000000) == 0) {
            goto LABEL_115;
          }
          break;
        }
      }
      else
      {
        uint64_t v57 = BYTE7(v232);
        if (v56 <= BYTE7(v232))
        {
          uint64_t p_p = (uint64_t)&__p;
          goto LABEL_99;
        }
      }
      BOOL v59 = 0;
      if ((SHIBYTE(v228) & 0x80000000) == 0)
      {
LABEL_115:
        if (v59)
        {
          unint64_t v39 = *((void *)&v236 + 1);
          if (BYTE8(v232) && SBYTE7(v232) < 0) {
            operator delete((void *)__p);
          }
          unint64_t v180 = v39 >> 8;
          CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v241);
          int v44 = 1;
LABEL_130:
          int v48 = 1;
LABEL_80:
          if (v48 != 2)
          {
            if (v48 != 3 && v44)
            {
              uint64_t v76 = v39 | (v180 << 8);
              goto LABEL_191;
            }
LABEL_150:
            *(void *)&long long v241 = 0;
            uint64_t v77 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v234);
            if (!mapped_memory_core_file_get_dyld_all_image_infos_addr(v77, (uint64_t)&v241))
            {
              uint64_t v76 = v241;
              goto LABEL_191;
            }
            unint64_t address_from_main_bin_spec_lcnote_with_matching = get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer64,LittleEndian>>(v192, (uint64_t)a1, 1);
            if (v79)
            {
              uint64_t v80 = address_from_main_bin_spec_lcnote_with_matching;
LABEL_153:
              LOBYTE(__p) = 0;
              char v233 = 0;
              long long v208 = 0uLL;
              *(void *)&long long v209 = 0;
              create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer64,LittleEndian>>((uint64_t)v234, v80, (uint64_t)v195, 1, &v227);
              if ((void)v227)
              {
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((uint64_t *)&v208, &v227);
                __int16 v81 = (const CSCppSymbolOwner *)v227;
                if (*((void *)&v227 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v227 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,CSCppSymbolOwner&,void>(v81, &v214);
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(&v241, 1uLL, &v214);
                operator new();
              }
              LOBYTE(v235) = 0;
              LOBYTE(v237) = 0;
              if (*((void *)&v227 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v227 + 1));
              }
              *(void *)&long long v241 = &v208;
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v241);
              std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>((uint64_t *)&__p, (uint64_t *)&v235);
              std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)&v235);
              char v123 = 0;
LABEL_345:
              if (v233)
              {
                long long v170 = __p;
                long long __p = 0uLL;
                long long v208 = v170;
                long long v209 = v232;
                long long v232 = 0uLL;
                if ((v123 & 1) == 0)
                {
                  uint64_t v171 = *(unsigned int *)(v192 + 20);
                  LODWORD(v235) = *(_DWORD *)(v192 + 16);
                  *((void *)&v235 + 1) = v192;
                  *(void *)&long long v236 = v192 + 32 + v171;
                  *((void *)&v236 + 1) = v192 + 32;
                  for (unint64_t i = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v235);
                        i;
                        unint64_t i = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v235))
                  {
                    if (*(_DWORD *)i == 49 && !strncmp((const char *)(i + 8), "load binary", 0x10uLL))
                    {
                      read_type_from_raw_core_file_bytes<CS_load_binary_note>((uint64_t)a1, *(void *)(i + 24), *(void *)(i + 32), 1, (uint64_t)&v241);
                      if (BYTE4(v245))
                      {
                        if (*(void *)((char *)&v242 + 4)
                          && (!(DWORD1(v243) ^ 0x6D747073 | BYTE8(v243)) || DWORD1(v243) == 7174260))
                        {
                          create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer64,LittleEndian>>((uint64_t)v234, *(uint64_t *)((char *)&v242 + 4), (uint64_t)v195, 0, &v214);
                          if ((void)v214) {
                            std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((uint64_t *)&v208 + 1, &v214);
                          }
                          if (*((void *)&v214 + 1)) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v214
                          }
                                                                                     + 1));
                        }
                      }
                    }
                  }
                }
                CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v234);
                uint64_t v173 = v208;
                *(void *)&long long v208 = 0;
                *(void *)&long long v214 = v173;
                uint64_t v69 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask((void *)&v208 + 1);
                uint64_t v175 = v174;
                uint64_t v176 = v214;
                *(void *)&long long v214 = 0;
                if (v176) {
                  (*(void (**)(uint64_t))(*(void *)v176 + 8))(v176);
                }
                uint64_t v177 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v234);
                release_core_file_mapped_memory_cache(*(void *)((v175 & 0xFFFFFFFFFFFFFFFCLL) + 120));
                *(void *)((v175 & 0xFFFFFFFFFFFFFFFCLL) + 120) = retain_mapped_memory_cache(v177);
                *(void *)&long long v241 = MEMORY[0x1E4F143A8];
                *((void *)&v241 + 1) = 0x40000000;
                *(void *)&long long v242 = ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer6412LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke;
                *((void *)&v242 + 1) = &__block_descriptor_tmp_72;
                *(void *)&long long v243 = v69;
                *((void *)&v243 + 1) = v175;
                CSSymbolicatorApplyMutableContextBlock(v69, v175, (uint64_t)&v241);
                *(void *)&long long v235 = (char *)&v208 + 8;
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
                uint64_t v178 = v208;
                *(void *)&long long v208 = 0;
                if (v178) {
                  (*(void (**)(uint64_t))(*(void *)v178 + 8))(v178);
                }
LABEL_365:
                std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)&__p);
                CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)v234);
LABEL_366:
                std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v195);
LABEL_367:
                CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v199);
LABEL_368:
                v168 = &v221;
                goto LABEL_369;
              }
LABEL_360:
              uint64_t v69 = 0;
              goto LABEL_365;
            }
            for (uint64_t j = 0; j != 7; ++j)
            {
              uint64_t v91 = (void *)(*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(*(void *)&v234[0] + 32))(v234, qword_1B908AAF0[j] - 16, 40);
              if (v92 >= 0x28)
              {
                uint64_t v80 = v91[2];
                BOOL v93 = *v91 == 0x2068736966746143 || *v91 == 0x20206E656B61724BLL;
                if (v93 && v80 != 0) {
                  goto LABEL_153;
                }
              }
            }
            *(void *)&long long v241 = 0;
            *((void *)&v241 + 1) = &v241;
            *(void *)&long long v242 = 0x3802000000;
            *((void *)&v242 + 1) = __Block_byref_object_copy__9;
            *(void *)&long long v243 = __Block_byref_object_dispose__9;
            BYTE8(v243) = 0;
            LOBYTE(v244) = 0;
            uint64_t v95 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v234);
            *(void *)&long long v235 = MEMORY[0x1E4F143A8];
            *((void *)&v235 + 1) = 0x40000000;
            *(void *)&long long v236 = ___ZL51get_dyld_vmaddr_from_brute_force_search_for_headersI17SizeAndEndiannessI9Pointer6412LittleEndianEENSt3__18optionalIyEER19CSCppCoreFileMemory_block_invoke;
            *((void *)&v236 + 1) = &unk_1E61D0410;
            *((void *)&v237 + 1) = v234;
            *(void *)&long long v237 = &v241;
            enumerate_mapped_memory_core_file_dumped_regions(v95, (uint64_t)&v235);
            uint64_t v76 = *(void *)(*((void *)&v241 + 1) + 40);
            uint64_t v96 = *(unsigned __int8 *)(*((void *)&v241 + 1) + 48);
            _Block_object_dispose(&v241, 8);
            if (v96)
            {
LABEL_191:
              LOBYTE(__p) = 0;
              char v233 = 0;
              *(void *)&long long v208 = 0;
              if (!read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>((uint64_t)v234, v76))
              {
                TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner(v208, &v235);
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(&v241, 1uLL, &v235);
                if (*((void *)&v235 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v235 + 1));
                }
                operator new();
              }
              if ((void)v208) {
                (*(void (**)(void))(*(void *)v208 + 8))(v208);
              }
              goto LABEL_344;
            }
            unint64_t v155 = get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer64,LittleEndian>>(v192, (uint64_t)a1, 3);
            LOBYTE(__p) = 0;
            char v233 = 0;
            if (!v156) {
              goto LABEL_360;
            }
            LOBYTE(v235) = 0;
            BYTE8(v236) = 0;
            create_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>>((uint64_t)v234, 0, v155, (uint64_t)&v235, (void ***)&v214);
            if (BYTE8(v236) && SBYTE7(v236) < 0) {
              operator delete((void *)v235);
            }
            if ((void)v214)
            {
              long long v227 = v214;
              if (*((void *)&v214 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v214 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              long long v208 = 0uLL;
              *(void *)&long long v209 = 0;
              *(void *)&long long v235 = &v208;
              BYTE8(v235) = 0;
              *(void *)&long long v208 = operator new(0x10uLL);
              *((void *)&v208 + 1) = v208;
              *(void *)&long long v209 = v208 + 16;
              *((void *)&v208 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>,std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>((uint64_t)&v209, &v227, &v228, (void *)v208);
              if (*((void *)&v227 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v227 + 1));
              }
              operator new();
            }
            LOBYTE(v241) = 0;
            LOBYTE(v243) = 0;
            if (*((void *)&v214 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v214 + 1));
            }
            std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>((uint64_t *)&__p, (uint64_t *)&v241);
            v169 = (uint64_t *)&v241;
LABEL_343:
            std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100](v169);
LABEL_344:
            char v123 = 1;
            goto LABEL_345;
          }
          continue;
        }
        if (BYTE8(v232) && SBYTE7(v232) < 0) {
          operator delete((void *)__p);
        }
        goto LABEL_119;
      }
      break;
    }
    operator delete((void *)v227);
    goto LABEL_115;
  }
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))v199;
  CSCppFileMemory::CSCppFileMemory(v199, a1, 0);
  v203 = v199;
  unint64_t v9 = TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::macho_header_at(&v203, 0, 1);
  if (!v9 || (uint64_t v191 = (uint64_t)v9, v9[3] != 4))
  {
    uint64_t v69 = 0;
    goto LABEL_335;
  }
  long long v214 = 0u;
  long long v215 = 0u;
  LODWORD(v216) = 1065353216;
  if (a4)
  {
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(a3 + 8);
    do
    {
      uint64_t v10 = *(void *)v8;
      uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v8 + 16);
      *(void *)&long long v241 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 16;
      std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>((uint64_t)&v214, (void *)v241, (uint64_t)&std::piecewise_construct, (_OWORD **)&v241)[4] = v10 & 0xFFFFFFFFFFFFFFFCLL;
      --a4;
    }
    while (a4);
  }
  uint64_t v11 = create_mapped_memory_cache_for_core_file_without_exclave_metadata(a1, "CSSymbolicator for core file");
  if (!v11)
  {
    uint64_t v69 = 0;
    goto LABEL_334;
  }
  CSCppCoreFileMemory::CSCppCoreFileMemory(&v218, v11);
  release_core_file_mapped_memory_cache(v11);
  *(void *)&long long v241 = 0;
  uint64_t v12 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v218);
  if (!mapped_memory_core_file_get_dyld_all_image_infos_addr(v12, (uint64_t)&v241))
  {
    LOBYTE(v195[0]) = 0;
    LOBYTE(v197) = 0;
    uint64_t v97 = (*((uint64_t (**)(void **, void, uint64_t))v218 + 4))(&v218, v241, 224);
    if (v98 > 0xDF)
    {
      unsigned int v99 = *(_DWORD *)v97;
      uint64_t v100 = *(unsigned int *)(v97 + 4);
      uint64_t v101 = *(unsigned int *)(v97 + 8);
      uint64_t v102 = *(unsigned int *)(v97 + 20);
      long long v103 = *(_OWORD *)(v97 + 56);
      long long v236 = *(_OWORD *)(v97 + 40);
      long long v237 = v103;
      *(_OWORD *)v238 = *(_OWORD *)(v97 + 72);
      *(_OWORD *)&v238[12] = *(_OWORD *)(v97 + 84);
      long long v235 = *(_OWORD *)(v97 + 24);
      unint64_t v104 = *(unsigned int *)(v97 + 112);
      unsigned int v105 = *(_DWORD *)(v97 + 176);
      v234[0] = *(_OWORD *)(v97 + 204);
      if (v99 > 0x10 && v101)
      {
        unsigned int v187 = v105;
        v200 = 0;
        v201 = 0;
        v202 = 0;
        uint64_t v106 = (*((uint64_t (**)(void **, uint64_t, uint64_t))v218 + 4))(&v218, v101, 12 * v100);
        if (v106)
        {
          if (v100)
          {
            uint64_t v107 = 0;
            char v108 = v201;
            do
            {
              uint64_t v109 = v106 + 12 * v107;
              if (v108 >= v202)
              {
                unint64_t v111 = 0xAAAAAAAAAAAAAAABLL * ((v108 - (unsigned char *)v200) >> 2);
                unint64_t v112 = v111 + 1;
                if (v111 + 1 > 0x1555555555555555) {
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * ((v202 - (unsigned char *)v200) >> 2) > v112) {
                  unint64_t v112 = 0x5555555555555556 * ((v202 - (unsigned char *)v200) >> 2);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v202 - (unsigned char *)v200) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v113 = 0x1555555555555555;
                }
                else {
                  unint64_t v113 = v112;
                }
                if (v113) {
                  unint64_t v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRangeValue<Pointer32,unsigned int>>>((uint64_t)&v202, v113);
                }
                else {
                  unint64_t v114 = 0;
                }
                uint64_t v115 = &v114[12 * v111];
                uint64_t v116 = *(void *)v109;
                *((_DWORD *)v115 + 2) = *(_DWORD *)(v109 + 8);
                *(void *)uint64_t v115 = v116;
                long long v118 = v200;
                uint64_t v117 = v201;
                unint64_t v119 = v115;
                if (v201 != v200)
                {
                  do
                  {
                    uint64_t v120 = *(void *)(v117 - 3);
                    v117 -= 3;
                    int v121 = v117[2];
                    *(void *)(v119 - 12) = v120;
                    v119 -= 12;
                    *((_DWORD *)v119 + 2) = v121;
                  }
                  while (v117 != v118);
                  uint64_t v117 = v200;
                }
                char v108 = v115 + 12;
                v200 = v119;
                v201 = v115 + 12;
                v202 = &v114[12 * v113];
                if (v117) {
                  operator delete(v117);
                }
              }
              else
              {
                uint64_t v110 = *(void *)v109;
                *((_DWORD *)v108 + 2) = *(_DWORD *)(v109 + 8);
                *(void *)char v108 = v110;
                v108 += 12;
              }
              v201 = v108;
              ++v107;
            }
            while (v107 != v100);
          }
          *(void *)&long long v208 = 0;
          *((void *)&v208 + 1) = &v208;
          *(void *)&long long v209 = 0x4002000000;
          *((void *)&v209 + 1) = __Block_byref_object_copy__60;
          v210 = __Block_byref_object_dispose__61;
          long long v211 = 0uLL;
          *(void *)&long long v212 = 0;
          LOBYTE(v241) = 0;
          BYTE8(v242) = 0;
          if (v187 <= 0x18 && ((1 << v187) & 0x1550000) != 0) {
            std::optional<std::string>::operator=[abi:ne180100]<char const(&)[14],void>((std::string *)&v241, "/usr/lib/dyld");
          }
          create_symbol_owner<SizeAndEndianness<Pointer32,LittleEndian>>((uint64_t)&v218, v104, v102, (uint64_t)&v241, (void ***)&v221);
          uint64_t v122 = v221;
          if ((void)v221)
          {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((uint64_t *)(*((void *)&v208 + 1) + 40), &v221);
          }
          else
          {
            LOBYTE(__p) = 0;
            char v233 = 0;
          }
          if (*((void *)&v221 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v221 + 1));
          }
          if (BYTE8(v242) && SBYTE7(v242) < 0) {
            operator delete((void *)v241);
          }
          if (v122)
          {
            *(void *)&long long v221 = 0;
            *((void *)&v221 + 1) = &v221;
            uint64_t v222 = 0x5002000000;
            v223 = __Block_byref_object_copy__63;
            v224 = __Block_byref_object_dispose__64;
            memset(v225, 0, sizeof(v225));
            int v226 = 1065353216;
            *(void *)&long long v227 = 0;
            *((void *)&v227 + 1) = &v227;
            uint64_t v228 = 0x2000000000;
            char v229 = 1;
            uint64_t v154 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v218);
            *(void *)&long long v241 = MEMORY[0x1E4F143A8];
            *((void *)&v241 + 1) = 1174405120;
            *(void *)&long long v242 = ___ZL58get_fake_task_and_symbol_owners_using_dyld_all_image_infosI17SizeAndEndiannessI9Pointer3212LittleEndianEENSt3__18optionalINS4_4pairINS4_10unique_ptrI9CSCppTaskNS4_14default_deleteIS8_EEEENS4_6vectorINS4_10shared_ptrI16CSCppSymbolOwnerEENS4_9allocatorISF_EEEEEEEER19CSCppCoreFileMemoryy_block_invoke;
            *((void *)&v242 + 1) = &unk_1F12C9760;
            long long v245 = 0uLL;
            *((void *)&v244 + 1) = 0;
            std::vector<CS_dyld_image_info_arch_specific<Pointer32>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer32>*,CS_dyld_image_info_arch_specific<Pointer32>*>((void *)&v244 + 1, v200, (uint64_t)v201, 0xAAAAAAAAAAAAAAABLL * ((v201 - (unsigned char *)v200) >> 2));
            *(void *)&long long v243 = &v221;
            *((void *)&v243 + 1) = &v227;
            *(void *)&long long v246 = &v218;
            *(void *)&long long v244 = &v208;
            enumerate_mapped_memory_core_file_dumped_regions(v154, (uint64_t)&v241);
            if (*(unsigned char *)(*((void *)&v227 + 1) + 24)) {
              operator new();
            }
            LOBYTE(__p) = 0;
            char v233 = 0;
            if (*((void *)&v244 + 1))
            {
              *(void *)&long long v245 = *((void *)&v244 + 1);
              operator delete(*((void **)&v244 + 1));
            }
            _Block_object_dispose(&v227, 8);
            _Block_object_dispose(&v221, 8);
            std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v225);
          }
          _Block_object_dispose(&v208, 8);
          *(void *)&long long v221 = &v211;
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
        }
        else
        {
          LOBYTE(__p) = 0;
          char v233 = 0;
        }
        if (v200)
        {
          v201 = (char *)v200;
          operator delete(v200);
        }
      }
      else
      {
        LOBYTE(__p) = 0;
        char v233 = 0;
      }
    }
    else
    {
      LOBYTE(__p) = 0;
      char v233 = 0;
    }
    std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>((uint64_t *)v195, (uint64_t *)&__p);
    v158 = (uint64_t *)&__p;
LABEL_311:
    std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100](v158);
LABEL_312:
    char v89 = 1;
    goto LABEL_313;
  }
  int v13 = 0;
  uint64_t v14 = *(unsigned int *)(v191 + 20);
  LODWORD(v235) = *(_DWORD *)(v191 + 16);
  *((void *)&v235 + 1) = v191;
  *(void *)&long long v236 = v191 + 28 + v14;
  *((void *)&v236 + 1) = v191 + 28;
  do
  {
    unint64_t v15 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v235);
    unint64_t v16 = v15;
    if (!v15) {
      goto LABEL_139;
    }
    if (*(_DWORD *)v15 != 49 || strncmp((const char *)(v15 + 8), "all image infos", 0x10uLL))
    {
      int v17 = 2;
      continue;
    }
    read_type_from_raw_core_file_bytes<CS_all_image_infos_header>((uint64_t)a1, *(void *)(v16 + 24), *(void *)(v16 + 32), 1, (uint64_t)&v208);
    int v17 = 1;
    if (!BYTE8(v209) || v208 != 1)
    {
      uint64_t v8 = 0;
      int v13 = 0;
      continue;
    }
    int v183 = v13;
    uint64_t v18 = DWORD1(v208);
    if (!DWORD1(v208))
    {
      int v17 = 3;
LABEL_59:
      int v13 = v183;
      continue;
    }
    v181 = v8;
    uint64_t v19 = 0;
    uint64_t v20 = *((void *)&v208 + 1);
    unint64_t v21 = v209;
    int v189 = a2;
    uint64_t v185 = *((void *)&v208 + 1);
    while (1)
    {
      read_type_from_raw_core_file_bytes<CS_image_entry>((uint64_t)a1, v20 + (v21 * v19), v21, 1, (uint64_t)&v221);
      if (!LOBYTE(v225[1]))
      {
        uint64_t v8 = 0;
        int v13 = 0;
        goto LABEL_65;
      }
      unint64_t v22 = v221;
      if ((void)v221 != -1) {
        break;
      }
LABEL_55:
      if (++v19 == v18)
      {
        int v17 = 3;
        uint64_t v8 = v181;
        goto LABEL_59;
      }
    }
    uint64_t v23 = CSCppFileMemory::CSCppFileMemory(&v241, a1, v221);
    read_path_from_offset_in_cpp_memory(v23, v22, (std::string *)v195);
    if (!BYTE8(v196)) {
      goto LABEL_54;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "/dyld");
    int v24 = SBYTE7(v232);
    if ((SBYTE7(v232) & 0x80u) == 0) {
      size_t v25 = BYTE7(v232);
    }
    else {
      size_t v25 = *((void *)&__p + 1);
    }
    if (SBYTE7(v196) < 0)
    {
      char v26 = (char *)v195[1];
      if ((void *)v25 > v195[1])
      {
LABEL_31:
        BOOL v28 = 0;
        if ((SBYTE7(v232) & 0x80000000) == 0) {
          goto LABEL_50;
        }
LABEL_49:
        operator delete((void *)__p);
        goto LABEL_50;
      }
      unint64_t v27 = (void **)v195[0];
    }
    else
    {
      char v26 = (char *)BYTE7(v196);
      if (v25 > BYTE7(v196)) {
        goto LABEL_31;
      }
      unint64_t v27 = v195;
    }
    uint64_t v29 = (uint64_t)&v26[-v25];
    if ((SBYTE7(v232) & 0x80u) == 0) {
      unint64_t v30 = &__p;
    }
    else {
      unint64_t v30 = (long long *)__p;
    }
    if (v25)
    {
      uint64_t v31 = (char *)v27 + v29;
      uint64_t v32 = &v26[(void)v27];
      int64_t v33 = v25;
      int v34 = *(char *)v30;
      do
      {
        size_t v35 = v33 - v25;
        if (v35 == -1) {
          break;
        }
        uint64_t v36 = (char *)memchr(v31, v34, v35 + 1);
        if (!v36) {
          break;
        }
        uint64_t v37 = v36;
        if (!memcmp(v36, v30, v25)) {
          goto LABEL_44;
        }
        uint64_t v31 = v37 + 1;
        int64_t v33 = v32 - (v37 + 1);
      }
      while (v33 >= (uint64_t)v25);
      uint64_t v37 = v32;
LABEL_44:
      if (v37 == v32) {
        uint64_t v29 = -1;
      }
      else {
        uint64_t v29 = v37 - (char *)v27;
      }
      a2 = v189;
    }
    uint64_t v20 = v185;
    BOOL v28 = v29 != -1;
    if (v24 < 0) {
      goto LABEL_49;
    }
LABEL_50:
    if (!v28)
    {
      if (BYTE8(v196) && SBYTE7(v196) < 0) {
        operator delete(v195[0]);
      }
LABEL_54:
      CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v241);
      goto LABEL_55;
    }
    uint64_t v8 = v223;
    if (BYTE8(v196) && SBYTE7(v196) < 0) {
      operator delete(v195[0]);
    }
    unint64_t v180 = (unint64_t)v8 >> 8;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v241);
    int v13 = 1;
LABEL_65:
    int v17 = 1;
  }
  while (v17 == 2);
  if (v17 != 3 && v13)
  {
    uint64_t v70 = v8 | (v180 << 8);
    goto LABEL_172;
  }
LABEL_139:
  *(void *)&long long v241 = 0;
  uint64_t v71 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v218);
  if (!mapped_memory_core_file_get_dyld_all_image_infos_addr(v71, (uint64_t)&v241))
  {
    uint64_t v70 = v241;
LABEL_172:
    LOBYTE(v195[0]) = 0;
    LOBYTE(v197) = 0;
    *(void *)&long long v235 = 0;
    if (!read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>((uint64_t)&v218, v70))
    {
      TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner(v235, &v221);
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(&v241, 1uLL, &v221);
      if (*((void *)&v221 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v221 + 1));
      }
      operator new();
    }
    if ((void)v235) {
      (*(void (**)(void))(*(void *)v235 + 8))(v235);
    }
    goto LABEL_312;
  }
  unint64_t v72 = get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer32,LittleEndian>>(v191, (uint64_t)a1, 1);
  if (v73)
  {
    uint64_t v74 = v72;
  }
  else
  {
    uint64_t v82 = 0;
    while (1)
    {
      __int16 v83 = (void *)(*((uint64_t (**)(void **, uint64_t, uint64_t))v218 + 4))(&v218, qword_1B908AAF0[v82] - 16, 40);
      if (v84 >= 0x28)
      {
        uint64_t v74 = v83[2];
        BOOL v85 = *v83 == 0x2068736966746143 || *v83 == 0x20206E656B61724BLL;
        if (v85 && v74 != 0) {
          break;
        }
      }
      if (++v82 == 7)
      {
        *(void *)&long long v241 = 0;
        *((void *)&v241 + 1) = &v241;
        *(void *)&long long v242 = 0x3802000000;
        *((void *)&v242 + 1) = __Block_byref_object_copy__9;
        *(void *)&long long v243 = __Block_byref_object_dispose__9;
        BYTE8(v243) = 0;
        LOBYTE(v244) = 0;
        uint64_t v87 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v218);
        *(void *)&long long v221 = MEMORY[0x1E4F143A8];
        *((void *)&v221 + 1) = 0x40000000;
        uint64_t v222 = (uint64_t)___ZL51get_dyld_vmaddr_from_brute_force_search_for_headersI17SizeAndEndiannessI9Pointer3212LittleEndianEENSt3__18optionalIyEER19CSCppCoreFileMemory_block_invoke;
        v223 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E61D03A8;
        v225[0] = &v218;
        v224 = (uint64_t (*)(uint64_t))&v241;
        enumerate_mapped_memory_core_file_dumped_regions(v87, (uint64_t)&v221);
        uint64_t v70 = *(void *)(*((void *)&v241 + 1) + 40);
        uint64_t v88 = *(unsigned __int8 *)(*((void *)&v241 + 1) + 48);
        _Block_object_dispose(&v241, 8);
        if (v88) {
          goto LABEL_172;
        }
        unint64_t v152 = get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer32,LittleEndian>>(v191, (uint64_t)a1, 3);
        LOBYTE(v195[0]) = 0;
        LOBYTE(v197) = 0;
        if (v153)
        {
          LOBYTE(v221) = 0;
          LOBYTE(v223) = 0;
          create_symbol_owner<SizeAndEndianness<Pointer32,LittleEndian>>((uint64_t)&v218, 0, v152, (uint64_t)&v221, (void ***)&v208);
          if ((_BYTE)v223 && SHIBYTE(v222) < 0) {
            operator delete((void *)v221);
          }
          if ((void)v208)
          {
            long long __p = v208;
            if (*((void *)&v208 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v208 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            long long v235 = 0uLL;
            *(void *)&long long v236 = 0;
            *(void *)&long long v221 = &v235;
            BYTE8(v221) = 0;
            *(void *)&long long v235 = operator new(0x10uLL);
            *((void *)&v235 + 1) = v235;
            *(void *)&long long v236 = v235 + 16;
            *((void *)&v235 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>,std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>((uint64_t)&v236, &__p, &v232, (void *)v235);
            if (*((void *)&__p + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
            }
            operator new();
          }
          LOBYTE(v241) = 0;
          LOBYTE(v243) = 0;
          if (*((void *)&v208 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v208 + 1));
          }
          std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>((uint64_t *)v195, (uint64_t *)&v241);
          v158 = (uint64_t *)&v241;
          goto LABEL_311;
        }
        goto LABEL_328;
      }
    }
  }
  LOBYTE(v195[0]) = 0;
  LOBYTE(v197) = 0;
  long long v235 = 0uLL;
  *(void *)&long long v236 = 0;
  create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer32,LittleEndian>>((uint64_t)&v218, v74, (uint64_t)&v214, 1, &__p);
  if ((void)__p)
  {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((uint64_t *)&v235, &__p);
    __int16 v75 = (const CSCppSymbolOwner *)__p;
    if (*((void *)&__p + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&__p + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,CSCppSymbolOwner&,void>(v75, &v208);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(&v241, 1uLL, &v208);
    operator new();
  }
  LOBYTE(v221) = 0;
  LOBYTE(v224) = 0;
  if (*((void *)&__p + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
  }
  *(void *)&long long v241 = &v235;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v241);
  std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>((uint64_t *)v195, (uint64_t *)&v221);
  std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)&v221);
  char v89 = 0;
LABEL_313:
  if ((_BYTE)v197)
  {
    long long v159 = *(_OWORD *)v195;
    v195[0] = 0;
    v195[1] = 0;
    long long v235 = v159;
    long long v236 = v196;
    long long v196 = 0uLL;
    if ((v89 & 1) == 0)
    {
      uint64_t v160 = *(unsigned int *)(v191 + 20);
      LODWORD(v221) = *(_DWORD *)(v191 + 16);
      *((void *)&v221 + 1) = v191;
      uint64_t v222 = v191 + 28 + v160;
      v223 = (uint64_t (*)(uint64_t, uint64_t))(v191 + 28);
      for (unint64_t k = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v221);
            k;
            unint64_t k = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v221))
      {
        if (*(_DWORD *)k == 49 && !strncmp((const char *)(k + 8), "load binary", 0x10uLL))
        {
          read_type_from_raw_core_file_bytes<CS_load_binary_note>((uint64_t)a1, *(void *)(k + 24), *(void *)(k + 32), 1, (uint64_t)&v241);
          if (BYTE4(v245))
          {
            if (*(void *)((char *)&v242 + 4)
              && (!(DWORD1(v243) ^ 0x6D747073 | BYTE8(v243)) || DWORD1(v243) == 7174260))
            {
              create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer32,LittleEndian>>((uint64_t)&v218, *(uint64_t *)((char *)&v242 + 4), (uint64_t)&v214, 0, &v208);
              if ((void)v208) {
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((uint64_t *)&v235 + 1, &v208);
              }
              if (*((void *)&v208 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v208 + 1));
              }
            }
          }
        }
      }
    }
    CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v218);
    uint64_t v162 = v235;
    *(void *)&long long v235 = 0;
    *(void *)&long long v208 = v162;
    uint64_t v69 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask((void *)&v235 + 1);
    uint64_t v164 = v163;
    uint64_t v165 = v208;
    *(void *)&long long v208 = 0;
    if (v165) {
      (*(void (**)(uint64_t))(*(void *)v165 + 8))(v165);
    }
    uint64_t v166 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v218);
    release_core_file_mapped_memory_cache(*(void *)((v164 & 0xFFFFFFFFFFFFFFFCLL) + 120));
    *(void *)((v164 & 0xFFFFFFFFFFFFFFFCLL) + 120) = retain_mapped_memory_cache(v166);
    *(void *)&long long v241 = MEMORY[0x1E4F143A8];
    *((void *)&v241 + 1) = 0x40000000;
    *(void *)&long long v242 = ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer3212LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke;
    *((void *)&v242 + 1) = &__block_descriptor_tmp_4_1;
    *(void *)&long long v243 = v69;
    *((void *)&v243 + 1) = v164;
    CSSymbolicatorApplyMutableContextBlock(v69, v164, (uint64_t)&v241);
    *(void *)&long long v221 = (char *)&v235 + 8;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
    uint64_t v167 = v235;
    *(void *)&long long v235 = 0;
    if (v167) {
      (*(void (**)(uint64_t))(*(void *)v167 + 8))(v167);
    }
  }
  else
  {
LABEL_328:
    uint64_t v69 = 0;
  }
  std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)v195);
  CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v218);
LABEL_334:
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&v214);
LABEL_335:
  v168 = (long long *)v199;
LABEL_369:
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v168);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v194);
  return v69;
}

void sub_1B903F784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  unint64_t v43 = (void *)STACK[0x370];
  if (STACK[0x370])
  {
    STACK[0x378] = (unint64_t)v43;
    operator delete(v43);
  }
  STACK[0x370] = v41 - 256;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x370]);
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)&STACK[0x320]);
  CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&STACK[0x350]);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a33);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a40);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&STACK[0x270]);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a18);
  _Unwind_Resume(a1);
}

unint64_t get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 20);
  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = a1;
  uint64_t v13 = a1 + 28 + v5;
  uint64_t v14 = a1 + 28;
  unint64_t address_from_main_bin_spec_lcnote_with_matching_type = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
  if (address_from_main_bin_spec_lcnote_with_matching_type)
  {
    uint64_t v7 = address_from_main_bin_spec_lcnote_with_matching_type;
    while (*(_DWORD *)v7 != 49 || strncmp((const char *)(v7 + 8), "main bin spec", 0x10uLL))
    {
      unint64_t address_from_main_bin_spec_lcnote_with_matching_type = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
      uint64_t v7 = address_from_main_bin_spec_lcnote_with_matching_type;
      if (!address_from_main_bin_spec_lcnote_with_matching_type) {
        goto LABEL_6;
      }
    }
    uint64_t type_from_raw_core_file = read_type_from_raw_core_file_bytes<CS_main_bin_spec_header>(a2, *(void *)(v7 + 24), *(void *)(v7 + 32), 1);
    unint64_t v8 = BYTE4(type_from_raw_core_file);
    if (BYTE4(type_from_raw_core_file))
    {
      if (type_from_raw_core_file == 2)
      {
        unint64_t address_from_main_bin_spec_lcnote_with_matching_type = get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v2_note>(a2, v7, a3);
        goto LABEL_13;
      }
      if (type_from_raw_core_file == 1)
      {
        unint64_t address_from_main_bin_spec_lcnote_with_matching_type = get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v1_note>(a2, v7, a3);
LABEL_13:
        unint64_t v8 = address_from_main_bin_spec_lcnote_with_matching_type & 0xFFFFFFFFFFFFFF00;
        return address_from_main_bin_spec_lcnote_with_matching_type | v8;
      }
      unint64_t v8 = 0;
    }
    LOBYTE(address_from_main_bin_spec_lcnote_with_matching_type) = 0;
    return address_from_main_bin_spec_lcnote_with_matching_type | v8;
  }
LABEL_6:
  unint64_t v8 = 0;
  return address_from_main_bin_spec_lcnote_with_matching_type | v8;
}

uint64_t ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer3212LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer3212LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke_2;
  v5[3] = &__block_descriptor_tmp_14;
  void v5[4] = a2;
  return CSSymbolicatorForeachSymbolOwnerAtTime(v2, v3, 0x8000000000000000, (uint64_t)v5);
}

uint64_t ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer3212LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke_2(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = (uint64_t)CSSymbolOwnerGetCFUUIDBytes(a2, a3);
  if (result)
  {
    uint64_t result = (uint64_t)CSGetBinaryPathForExclaveWithUUIDBytes((void *)result);
    if (result)
    {
      uint64_t v7 = (char *)result;
      char MutableInContext = (char *)CSSymbolOwnerMakeMutableInContext(a2, a3, *(CSCppMutableContext **)(a1 + 32));
      uint64_t v10 = v9;
      CSSymbolOwnerSetPathForSymbolication(MutableInContext, v9, v7);
      Path = (const char *)CSSymbolOwnerGetPath((char)MutableInContext, v10);
      if (!Path || (uint64_t result = strcmp(Path, "<unknown>"), !result))
      {
        return CSSymbolOwnerSetPath((char)MutableInContext, v10, v7);
      }
    }
  }
  return result;
}

uint64_t *std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::~pair(uint64_t *a1)
{
  uint64_t v4 = (void **)(a1 + 1);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = a2[1] ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x28uLL);
  void *i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_42:
    *unint64_t v21 = i;
    goto LABEL_43;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B9040560(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void read_type_from_raw_core_file_bytes<CS_all_image_infos_header>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if (a4 && a3 <= 0x17)
  {
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 24) = 0;
  }
  else
  {
    CSCppFileMemory::CSCppFileMemory(v10, a1, a2);
    uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v10[0] + 32))(v10, a2, 24);
    if (v8 > 0x17)
    {
      *(_OWORD *)a5 = *(_OWORD *)v7;
      *(void *)(a5 + 16) = *(void *)(v7 + 16);
      char v9 = 1;
    }
    else
    {
      char v9 = 0;
      *(unsigned char *)a5 = 0;
    }
    *(unsigned char *)(a5 + 24) = v9;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v10);
  }
}

void sub_1B9040644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)va);
  _Unwind_Resume(a1);
}

void read_type_from_raw_core_file_bytes<CS_image_entry>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if (a4 && a3 <= 0x2F)
  {
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 48) = 0;
  }
  else
  {
    CSCppFileMemory::CSCppFileMemory(v11, a1, a2);
    uint64_t v7 = (_OWORD *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v11[0] + 32))(v11, a2, 48);
    if (v8 > 0x2F)
    {
      long long v10 = v7[1];
      *(_OWORD *)a5 = *v7;
      *(_OWORD *)(a5 + 16) = v10;
      *(_OWORD *)(a5 + 32) = v7[2];
      char v9 = 1;
    }
    else
    {
      char v9 = 0;
      *(unsigned char *)a5 = 0;
    }
    *(unsigned char *)(a5 + 48) = v9;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v11);
  }
}

void sub_1B9040728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)va);
  _Unwind_Resume(a1);
}

uint64_t read_type_from_raw_core_file_bytes<CS_main_bin_spec_header>(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if (a4 && a3 < 4)
  {
    LOBYTE(v6) = 0;
    uint64_t v7 = 0;
  }
  else
  {
    CSCppFileMemory::CSCppFileMemory(v11, a1, a2);
    unint64_t v8 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v11[0] + 32))(v11, a2, 4);
    if (v9 >= 4)
    {
      unsigned int v6 = *v8;
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v7 = 0;
      unsigned int v6 = 0;
    }
    unsigned int v4 = v6 >> 8;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v11);
  }
  return (v7 << 32) | ((*(void *)&v4 & 0xFFFFFFLL) << 8) | v6;
}

void sub_1B9040808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)va);
  _Unwind_Resume(a1);
}

unint64_t get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v1_note>(uint64_t a1, uint64_t a2, int a3)
{
  if (*(void *)(a2 + 32) < 0x24uLL) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  CSCppFileMemory::CSCppFileMemory(v13, a1, v4);
  uint64_t v5 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v13[0] + 32))(v13, v4, 36);
  if (v6 < 0x24)
  {
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v13);
LABEL_9:
    uint64_t v12 = 0;
    unint64_t v11 = 0;
    return v11 | v12;
  }
  int v7 = *(_DWORD *)(v5 + 4);
  uint64_t v8 = *(void *)(v5 + 8);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v13);
  if (v7 != a3 || v8 == -1) {
    goto LABEL_9;
  }
  unint64_t v11 = v8 & 0xFFFFFFFFFFFFFF00;
  uint64_t v12 = v8;
  return v11 | v12;
}

void sub_1B90408FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)va);
  _Unwind_Resume(a1);
}

unint64_t get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v2_note>(uint64_t a1, uint64_t a2, int a3)
{
  if (*(void *)(a2 + 32) < 0x30uLL) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  CSCppFileMemory::CSCppFileMemory(v13, a1, v4);
  uint64_t v5 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v13[0] + 32))(v13, v4, 48);
  if (v6 < 0x30)
  {
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v13);
LABEL_9:
    uint64_t v12 = 0;
    unint64_t v11 = 0;
    return v11 | v12;
  }
  int v7 = *(_DWORD *)(v5 + 4);
  uint64_t v8 = *(void *)(v5 + 8);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v13);
  if (v7 != a3 || v8 == -1) {
    goto LABEL_9;
  }
  unint64_t v11 = v8 & 0xFFFFFFFFFFFFFF00;
  uint64_t v12 = v8;
  return v11 | v12;
}

void sub_1B90409F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)va);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(result + 40) = v2;
  return result;
}

void ___ZL51get_dyld_vmaddr_from_brute_force_search_for_headersI17SizeAndEndiannessI9Pointer3212LittleEndianEENSt3__18optionalIyEER19CSCppCoreFileMemory_block_invoke(uint64_t a1, void *a2, unsigned char *a3)
{
  unint64_t v4 = (*a2 + 4095) & 0xFFFFFFFFFFFFF000;
  if (v4 < *a2 + a2[3] - 28)
  {
    while (1)
    {
      int mach_header_and_cmds_from = read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>(*(void *)(a1 + 40), v4);
      if (!mach_header_and_cmds_from) {
        break;
      }
      if (mach_header_and_cmds_from != 29)
      {
        int v8 = 1;
LABEL_8:
        *a3 = 1;
        goto LABEL_9;
      }
      v4 += 4096;
      int v8 = 2;
LABEL_9:
      if ((v8 | 2) != 2) {
        return;
      }
      if (v4 >= *a2 + a2[3] - 28) {
        goto LABEL_15;
      }
    }
    if (*(_DWORD *)(MEMORY[0x18] + 12) != 7)
    {
      unint64_t v10 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(MEMORY[0x18], "__TEXT");
      int v8 = 0;
      if (v10) {
        unint64_t v4 = (v4 + *(unsigned int *)(v10 + 28) + 4095) & 0xFFFFFFFFFFFFF000;
      }
      else {
        v4 += 4096;
      }
      goto LABEL_9;
    }
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    *(void *)(v9 + 40) = v4;
    int v8 = 1;
    *(unsigned char *)(v9 + 48) = 1;
    goto LABEL_8;
  }
LABEL_15:
  unint64_t v11 = *(CSCppCoreFileMemory **)(a1 + 40);

  CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(v11);
}

void sub_1B9040BA8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = a2;
  unint64_t v4 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, 28);
  if (!v4) {
    return 5;
  }
  if (*v4 == -17958194)
  {
    uint64_t v6 = a1;
    if (TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::macho_header_at(&v6, v2, 1)) {
      operator new();
    }
    return 5;
  }
  return 29;
}

void sub_1B9040D0C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9D1CD0](v1, 0x10F1C40D39611B8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__60(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__61(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<char const(&)[14],void>(std::string *a1, std::string::value_type *a2)
{
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::__assign_external(a1, a2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, a2);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

void create_symbol_owner<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void ***a5@<X8>)
{
  if (*(unsigned char *)(a4 + 24))
  {
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v10 = *(std::string *)a4;
    }
    char v11 = 1;
  }
  else
  {
    read_path_from_offset_in_cpp_memory(a1, a2, &v10);
  }
  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>((uint64_t)&v10, "<unknown>", &__p);
  if (read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>(a1, a3))
  {
    *a5 = 0;
    a5[1] = 0;
  }
  else
  {
    TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner(0, a5);
    if (v11)
    {
      int v8 = (v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v10
         : (std::string *)v10.__r_.__value_.__r.__words[0];
      if (!access((const char *)v8, 4)) {
        CSCppSymbolOwner::set_path_for_symbolication(*a5, (const char *)v8);
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11)
  {
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B9040F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  size_t v25 = *(std::__shared_weak_count **)(v22 + 8);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__63(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__64(uint64_t a1)
{
  return std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a1 + 40);
}

void ___ZL58get_fake_task_and_symbol_owners_using_dyld_all_image_infosI17SizeAndEndiannessI9Pointer3212LittleEndianEENSt3__18optionalINS4_4pairINS4_10unique_ptrI9CSCppTaskNS4_14default_deleteIS8_EEEENS4_6vectorINS4_10shared_ptrI16CSCppSymbolOwnerEENS4_9allocatorISF_EEEEEEEER19CSCppCoreFileMemoryy_block_invoke(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  unint64_t v4 = *(unsigned int **)(a1 + 56);
  uint64_t v5 = *(unsigned int **)(a1 + 64);
  if (v4 == v5)
  {
LABEL_15:
    CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(*(CSCppCoreFileMemory **)(a1 + 80));
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    while (1)
    {
      if ((unint64_t)*v4 - v7 < v8)
      {
        uint64_t v9 = (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        __p[0] = (void *)*v4;
        if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v9, (unint64_t *)__p))
        {
          break;
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_impl<unsigned int const&>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v4);
        uint64_t v10 = *(void *)(a1 + 80);
        uint64_t v12 = *v4;
        unint64_t v11 = v4[1];
        LOBYTE(__p[0]) = 0;
        char v16 = 0;
        create_symbol_owner<SizeAndEndianness<Pointer32,LittleEndian>>(v10, v11, v12, (uint64_t)__p, (void ***)&v17);
        if (v16 && v15 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v13 = v17;
        if ((void)v17)
        {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((uint64_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), &v17);
        }
        else
        {
          *a3 = 1;
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
        }
        if (*((void *)&v17 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
        }
        if (!v13) {
          break;
        }
      }
      v4 += 3;
      if (v4 == v5) {
        goto LABEL_15;
      }
    }
  }
}

void sub_1B90410E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_56c86_ZTSNSt3__16vectorI32CS_dyld_image_info_arch_specificI9Pointer32ENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  unsigned int v2 = (void *)(a1 + 56);
  v2[2] = 0;
  return std::vector<CS_dyld_image_info_arch_specific<Pointer32>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer32>*,CS_dyld_image_info_arch_specific<Pointer32>*>(v2, *(const void **)(a2 + 56), *(void *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2));
}

void __destroy_helper_block_e8_56c86_ZTSNSt3__16vectorI32CS_dyld_image_info_arch_specificI9Pointer32ENS_9allocatorIS3_EEEE(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, a2);
  }
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  __n128 result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_impl<unsigned int const&>(void *a1, unsigned int *a2)
{
  uint8x8_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a2;
  v4[1] = v5;
  _DWORD v4[2] = v5;
  void *v4 = 0;
  char inserted = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__node_insert_unique(a1, v4);
  if ((v7 & 1) == 0) {
    operator delete(v4);
  }
  return inserted;
}

void sub_1B90412B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<CS_dyld_image_info_arch_specific<Pointer32>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer32>*,CS_dyld_image_info_arch_specific<Pointer32>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<TRangeValue<Pointer32,unsigned int>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B9041328(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>&,0>(void *a1, uint64_t *a2, void **a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(a1 + 1, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_1B904138C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    CSSymbolicatorCreateWithTaskPidFlagsAndNotification_cold_1(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>(uint64_t *a1, uint64_t *a2)
{
  if (*((unsigned __int8 *)a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*((unsigned char *)a1 + 32)) {
      std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::operator=[abi:ne180100](a1, a2);
    }
  }
  else if (*((unsigned char *)a1 + 32))
  {
    std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::reset[abi:ne180100]((uint64_t)a1);
  }
  else
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    *a1 = v3;
    a1[1] = 0;
    a1[2] = 0;
    a1[3] = 0;
    __n128 result = *(__n128 *)(a2 + 1);
    *(__n128 *)(a1 + 1) = result;
    a1[3] = a2[3];
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 0;
    *((unsigned char *)a1 + 32) = 1;
  }
  return result;
}

uint64_t *std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  return a1;
}

uint64_t std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::reset[abi:ne180100](uint64_t result)
{
  if (*(unsigned char *)(result + 32))
  {
    uint64_t v1 = result;
    int8x8_t v2 = (void **)(result + 8);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v2);
    __n128 result = *(void *)v1;
    *(void *)uint64_t v1 = 0;
    if (result) {
      __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *(unsigned char *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t *std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100](uint64_t *a1)
{
  if (*((unsigned char *)a1 + 32))
  {
    uint64_t v4 = (void **)(a1 + 1);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, int a4@<W4>, void *a5@<X8>)
{
  if (read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>(a1, a2))
  {
    *a5 = 0;
    a5[1] = 0;
  }
  else
  {
    unint64_t v21 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::uuid(MEMORY[0x18]);
    uint64_t v8 = std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>(a3, v21, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21)[4];
    TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner(0, a5);
    uint64_t v9 = *a5;
    *(_DWORD *)(v9 + 108) = *(_DWORD *)(*a5 + 108) | 0x1000000;
    uint64_t v10 = *(char **)(v9 + 32);
    unint64_t v11 = *(char **)(v9 + 40);
    while (v10 != v11)
    {
      uint64_t v12 = (const char *)*((void *)v10 + 2);
      if (!strncmp(v12, "__PRELINK", 9uLL) || !strncmp(v12, "__PLK", 5uLL))
      {
        int64_t v13 = v11 - (v10 + 32);
        if (v11 != v10 + 32) {
          memmove(v10, v10 + 32, v11 - (v10 + 32));
        }
        v11 -= 32;
        *(void *)(v9 + 40) = &v10[v13];
      }
      else
      {
        v10 += 32;
      }
    }
    if (v8)
    {
      float v14 = *(const char **)(v8 + 120);
      if (v14) {
        CSCppSymbolOwner::set_path((void **)*a5, v14);
      }
      char v15 = *(const char **)(v8 + 128);
      if (v15 && v15 != *(const char **)(v8 + 120)) {
        CSCppSymbolOwner::set_path_for_symbolication((void **)*a5, v15);
      }
      uint64_t v16 = *a5;
      unsigned int v17 = *(_DWORD *)(*a5 + 108) & 0xFFF7EFFF;
      *(_DWORD *)(*a5 + 108) = v17;
      int v18 = *(_DWORD *)(v8 + 108);
      if ((v18 & 0x80000) != 0)
      {
        v17 |= 0x80000u;
        *(_DWORD *)(v16 + 108) = v17;
        int v18 = *(_DWORD *)(v8 + 108);
      }
      if ((v18 & 0x1000) != 0)
      {
        v17 |= 0x1000u;
        *(_DWORD *)(v16 + 108) = v17;
      }
    }
    else
    {
      uint64_t v16 = *a5;
      unsigned int v17 = *(_DWORD *)(*a5 + 108);
    }
    if (a4) {
      int v19 = -513;
    }
    else {
      int v19 = -529;
    }
    int v20 = v17 & v19;
    if ((v17 & 0x200) != 0 || (a4 & 1) == 0) {
      *(_DWORD *)(v16 + 108) = v20;
    }
    *(_DWORD *)(v16 + 108) = v20 & 0xFEFFFDFF;
  }
}

void sub_1B9041768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  int64_t v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::unique_ptr<CSCppFakeTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppFakeTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>&,0>(void *a1, uint64_t *a2, void **a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(a1 + 1, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_1B9041814(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    CSSymbolicatorCreateWithTaskPidFlagsAndNotification_cold_1(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>> const,0>(void *a1, uint64_t *a2, void **a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(a1 + 1, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_1B9041878(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    CSSymbolicatorCreateWithTaskPidFlagsAndNotification_cold_1(v3);
  }
  _Unwind_Resume(exception_object);
}

void read_type_from_raw_core_file_bytes<CS_load_binary_note>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if (a4 && a3 <= 0x43)
  {
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 68) = 0;
  }
  else
  {
    CSCppFileMemory::CSCppFileMemory(v12, a1, a2);
    uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v12[0] + 32))(v12, a2, 68);
    if (v8 > 0x43)
    {
      long long v10 = *(_OWORD *)(v7 + 48);
      *(_OWORD *)(a5 + 32) = *(_OWORD *)(v7 + 32);
      *(_OWORD *)(a5 + 48) = v10;
      *(_DWORD *)(a5 + 64) = *(_DWORD *)(v7 + 64);
      long long v11 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)a5 = *(_OWORD *)v7;
      *(_OWORD *)(a5 + 16) = v11;
      char v9 = 1;
    }
    else
    {
      char v9 = 0;
      *(unsigned char *)a5 = 0;
    }
    *(unsigned char *)(a5 + 68) = v9;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v12);
  }
}

void sub_1B904196C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)va);
  _Unwind_Resume(a1);
}

unint64_t get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 20);
  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = a1;
  uint64_t v13 = a1 + 32 + v5;
  uint64_t v14 = a1 + 32;
  unint64_t address_from_main_bin_spec_lcnote_with_matching_type = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
  if (address_from_main_bin_spec_lcnote_with_matching_type)
  {
    uint64_t v7 = address_from_main_bin_spec_lcnote_with_matching_type;
    while (*(_DWORD *)v7 != 49 || strncmp((const char *)(v7 + 8), "main bin spec", 0x10uLL))
    {
      unint64_t address_from_main_bin_spec_lcnote_with_matching_type = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
      uint64_t v7 = address_from_main_bin_spec_lcnote_with_matching_type;
      if (!address_from_main_bin_spec_lcnote_with_matching_type) {
        goto LABEL_6;
      }
    }
    uint64_t type_from_raw_core_file = read_type_from_raw_core_file_bytes<CS_main_bin_spec_header>(a2, *(void *)(v7 + 24), *(void *)(v7 + 32), 1);
    unint64_t v8 = BYTE4(type_from_raw_core_file);
    if (BYTE4(type_from_raw_core_file))
    {
      if (type_from_raw_core_file == 2)
      {
        unint64_t address_from_main_bin_spec_lcnote_with_matching_type = get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v2_note>(a2, v7, a3);
        goto LABEL_13;
      }
      if (type_from_raw_core_file == 1)
      {
        unint64_t address_from_main_bin_spec_lcnote_with_matching_type = get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v1_note>(a2, v7, a3);
LABEL_13:
        unint64_t v8 = address_from_main_bin_spec_lcnote_with_matching_type & 0xFFFFFFFFFFFFFF00;
        return address_from_main_bin_spec_lcnote_with_matching_type | v8;
      }
      unint64_t v8 = 0;
    }
    LOBYTE(address_from_main_bin_spec_lcnote_with_matching_type) = 0;
    return address_from_main_bin_spec_lcnote_with_matching_type | v8;
  }
LABEL_6:
  unint64_t v8 = 0;
  return address_from_main_bin_spec_lcnote_with_matching_type | v8;
}

uint64_t ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer6412LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer6412LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke_2;
  v5[3] = &__block_descriptor_tmp_71_0;
  void v5[4] = a2;
  return CSSymbolicatorForeachSymbolOwnerAtTime(v2, v3, 0x8000000000000000, (uint64_t)v5);
}

uint64_t ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer6412LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke_2(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = (uint64_t)CSSymbolOwnerGetCFUUIDBytes(a2, a3);
  if (result)
  {
    uint64_t result = (uint64_t)CSGetBinaryPathForExclaveWithUUIDBytes((void *)result);
    if (result)
    {
      uint64_t v7 = (char *)result;
      char MutableInContext = (char *)CSSymbolOwnerMakeMutableInContext(a2, a3, *(CSCppMutableContext **)(a1 + 32));
      uint64_t v10 = v9;
      CSSymbolOwnerSetPathForSymbolication(MutableInContext, v9, v7);
      Path = (const char *)CSSymbolOwnerGetPath((char)MutableInContext, v10);
      if (!Path || (uint64_t result = strcmp(Path, "<unknown>"), !result))
      {
        return CSSymbolOwnerSetPath((char)MutableInContext, v10, v7);
      }
    }
  }
  return result;
}

void ___ZL51get_dyld_vmaddr_from_brute_force_search_for_headersI17SizeAndEndiannessI9Pointer6412LittleEndianEENSt3__18optionalIyEER19CSCppCoreFileMemory_block_invoke(uint64_t a1, void *a2, unsigned char *a3)
{
  unint64_t v4 = (*a2 + 4095) & 0xFFFFFFFFFFFFF000;
  if (v4 < *a2 + a2[3] - 32)
  {
    while (1)
    {
      int mach_header_and_cmds_from = read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>(*(void *)(a1 + 40), v4);
      if (!mach_header_and_cmds_from) {
        break;
      }
      if (mach_header_and_cmds_from != 29)
      {
        int v8 = 1;
LABEL_8:
        *a3 = 1;
        goto LABEL_9;
      }
      v4 += 4096;
      int v8 = 2;
LABEL_9:
      if ((v8 | 2) != 2) {
        return;
      }
      if (v4 >= *a2 + a2[3] - 32) {
        goto LABEL_15;
      }
    }
    if (*(_DWORD *)(MEMORY[0x18] + 12) != 7)
    {
      unint64_t v10 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(MEMORY[0x18], "__TEXT");
      int v8 = 0;
      if (v10) {
        unint64_t v4 = (v4 + *(void *)(v10 + 32) + 4095) & 0xFFFFFFFFFFFFF000;
      }
      else {
        v4 += 4096;
      }
      goto LABEL_9;
    }
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    *(void *)(v9 + 40) = v4;
    int v8 = 1;
    *(unsigned char *)(v9 + 48) = 1;
    goto LABEL_8;
  }
LABEL_15:
  int v11 = *(CSCppCoreFileMemory **)(a1 + 40);

  CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(v11);
}

void sub_1B9041D58(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, 32);
  if (!v4) {
    return 5;
  }
  if (*v4 == -17958193)
  {
    uint64_t v6 = a1;
    if (TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::macho_header_at(&v6, a2, 1)) {
      operator new();
    }
    return 5;
  }
  return 29;
}

void sub_1B9041EC4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9D1CD0](v1, 0x10F1C40E5D9F5EBLL);
  _Unwind_Resume(a1);
}

void create_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void ***a5@<X8>)
{
  if (*(unsigned char *)(a4 + 24))
  {
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v10 = *(std::string *)a4;
    }
    char v11 = 1;
  }
  else
  {
    read_path_from_offset_in_cpp_memory(a1, a2, &v10);
  }
  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>((uint64_t)&v10, "<unknown>", &__p);
  if (read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>(a1, a3))
  {
    *a5 = 0;
    a5[1] = 0;
  }
  else
  {
    TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner(0, a5);
    if (v11)
    {
      int v8 = (v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v10
         : (std::string *)v10.__r_.__value_.__r.__words[0];
      if (!access((const char *)v8, 4)) {
        CSCppSymbolOwner::set_path_for_symbolication(*a5, (const char *)v8);
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11)
  {
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B9042050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  size_t v25 = *(std::__shared_weak_count **)(v22 + 8);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

void ___ZL58get_fake_task_and_symbol_owners_using_dyld_all_image_infosI17SizeAndEndiannessI9Pointer6412LittleEndianEENSt3__18optionalINS4_4pairINS4_10unique_ptrI9CSCppTaskNS4_14default_deleteIS8_EEEENS4_6vectorINS4_10shared_ptrI16CSCppSymbolOwnerEENS4_9allocatorISF_EEEEEEEER19CSCppCoreFileMemoryy_block_invoke(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  unint64_t v4 = *(unint64_t **)(a1 + 56);
  uint64_t v5 = *(unint64_t **)(a1 + 64);
  if (v4 == v5)
  {
LABEL_15:
    CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(*(CSCppCoreFileMemory **)(a1 + 80));
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    while (1)
    {
      if (*v4 - v7 < v8)
      {
        if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v4))
        {
          break;
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(*(void *)(*(void *)(a1 + 32) + 8) + 40, v4, v4);
        uint64_t v9 = *(void *)(a1 + 80);
        uint64_t v11 = *v4;
        unint64_t v10 = v4[1];
        LOBYTE(__p) = 0;
        char v15 = 0;
        create_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>>(v9, v10, v11, (uint64_t)&__p, (void ***)&v16);
        if (v15 && v14 < 0) {
          operator delete(__p);
        }
        uint64_t v12 = v16;
        if ((void)v16)
        {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((uint64_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), &v16);
        }
        else
        {
          *a3 = 1;
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
        }
        if (*((void *)&v16 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
        }
        if (!v12) {
          break;
        }
      }
      v4 += 3;
      if (v4 == v5) {
        goto LABEL_15;
      }
    }
  }
}

void sub_1B90421F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_56c86_ZTSNSt3__16vectorI32CS_dyld_image_info_arch_specificI9Pointer64ENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = (void *)(a1 + 56);
  v2[2] = 0;
  return std::vector<CS_dyld_image_info_arch_specific<Pointer64>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer64>*,CS_dyld_image_info_arch_specific<Pointer64>*>(v2, *(const void **)(a2 + 56), *(void *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
}

void __destroy_helper_block_e8_56c86_ZTSNSt3__16vectorI32CS_dyld_image_info_arch_specificI9Pointer64ENS_9allocatorIS3_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *int v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B9042470(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<CS_dyld_image_info_arch_specific<Pointer64>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer64>*,CS_dyld_image_info_arch_specific<Pointer64>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<CSCppFlatbufferRelocation>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B90424E4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, int a4@<W4>, void *a5@<X8>)
{
  if (read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>(a1, a2))
  {
    *a5 = 0;
    a5[1] = 0;
  }
  else
  {
    unint64_t v21 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::uuid(MEMORY[0x18]);
    uint64_t v8 = std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>(a3, v21, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21)[4];
    TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner(0, a5);
    uint64_t v9 = *a5;
    *(_DWORD *)(v9 + 108) = *(_DWORD *)(*a5 + 108) | 0x1000000;
    unint64_t v10 = *(char **)(v9 + 32);
    unint64_t v11 = *(char **)(v9 + 40);
    while (v10 != v11)
    {
      float v12 = (const char *)*((void *)v10 + 2);
      if (!strncmp(v12, "__PRELINK", 9uLL) || !strncmp(v12, "__PLK", 5uLL))
      {
        int64_t v13 = v11 - (v10 + 32);
        if (v11 != v10 + 32) {
          memmove(v10, v10 + 32, v11 - (v10 + 32));
        }
        v11 -= 32;
        *(void *)(v9 + 40) = &v10[v13];
      }
      else
      {
        v10 += 32;
      }
    }
    if (v8)
    {
      BOOL v14 = *(const char **)(v8 + 120);
      if (v14) {
        CSCppSymbolOwner::set_path((void **)*a5, v14);
      }
      unint64_t v15 = *(const char **)(v8 + 128);
      if (v15 && v15 != *(const char **)(v8 + 120)) {
        CSCppSymbolOwner::set_path_for_symbolication((void **)*a5, v15);
      }
      uint64_t v16 = *a5;
      unsigned int v17 = *(_DWORD *)(*a5 + 108) & 0xFFF7EFFF;
      *(_DWORD *)(*a5 + 108) = v17;
      int v18 = *(_DWORD *)(v8 + 108);
      if ((v18 & 0x80000) != 0)
      {
        v17 |= 0x80000u;
        *(_DWORD *)(v16 + 108) = v17;
        int v18 = *(_DWORD *)(v8 + 108);
      }
      if ((v18 & 0x1000) != 0)
      {
        v17 |= 0x1000u;
        *(_DWORD *)(v16 + 108) = v17;
      }
    }
    else
    {
      uint64_t v16 = *a5;
      unsigned int v17 = *(_DWORD *)(*a5 + 108);
    }
    if (a4) {
      int v19 = -513;
    }
    else {
      int v19 = -529;
    }
    int v20 = v17 & v19;
    if ((v17 & 0x200) != 0 || (a4 & 1) == 0) {
      *(_DWORD *)(v16 + 108) = v20;
    }
    *(_DWORD *)(v16 + 108) = v20 & 0xFEFFFDFF;
  }
}

void sub_1B9042704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  int64_t v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  _Unwind_Resume(exception_object);
}

void CSCppTaskMemory::CSCppTaskMemory(CSCppTaskMemory *this, const CSCppMachTaskContainer *a2, int a3)
{
  *(void *)this = &unk_1F12C97D8;
  uint64_t v5 = (CSCppTaskMemory *)((char *)this + 8);
  CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppTaskMemory *)((char *)this + 8), a2);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (a3) {
    task_suspend2(*((_DWORD *)this + 4), (task_suspension_token_t *)this + 28);
  }
  mach_msg_type_number_t task_info_outCnt = 5;
  if (!CSCppMachTaskContainer::is_self_task(v5))
  {
    if (CSTaskIs64Bit(*((_DWORD *)this + 4)))
    {
      if ((CSTaskIsTranslated(*((_DWORD *)this + 4)) & 1) == 0
        && !task_info(*MEMORY[0x1E4F14960], 0x11u, task_info_out, &task_info_outCnt))
      {
        uint64_t v6 = *(void *)task_info_out;
        uint64_t v13 = 0;
        uint64_t shared_cache_range = _dyld_get_shared_cache_range();
        if (shared_cache_range)
        {
          uint64_t v8 = v13;
          if (CSCppTaskMemory::region_at_address(this, shared_cache_range, 1) == shared_cache_range)
          {
            *((void *)this + 9) = shared_cache_range;
            *((void *)this + 10) = v8;
            float v12 = this;
            uint64_t v9 = (char *)TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::dyld_shared_cache_at(&v12, shared_cache_range);
            v11[0] = MEMORY[0x1E4F143A8];
            v11[1] = 0x40000000;
            v11[2] = ___ZN15CSCppTaskMemoryC2ERK22CSCppMachTaskContainerb_block_invoke;
            void v11[3] = &__block_descriptor_tmp_15;
            void v11[4] = this;
            v11[5] = v6;
            CSCppDyldSharedCache::for_each_mapped_cache(v9, (uint64_t)v11);
            for (unint64_t i = (void *)*((void *)this + 11); i != *((void **)this + 12); i += 2)
            {
              if (*i) {
                return;
              }
            }
            *((void *)this + 9) = 0;
            *((void *)this + 10) = 0;
          }
        }
      }
    }
  }
}

void sub_1B9042910(_Unwind_Exception *a1)
{
  uint64_t v5 = (void *)v1[11];
  if (v5)
  {
    v1[12] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)v1[6];
  if (v6)
  {
    v1[7] = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    v1[4] = v7;
    operator delete(v7);
  }
  CSCppMachTaskContainer::~CSCppMachTaskContainer(v2);
  _Unwind_Resume(a1);
}

void CSCppTaskMemory::CSCppTaskMemory(CSCppTaskMemory *this, mach_port_name_t a2, int a3, int a4)
{
  CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTaskContainer *)v6, a2, a3);
  CSCppTaskMemory::CSCppTaskMemory(this, (const CSCppMachTaskContainer *)v6, a4);
  CSCppMachTaskContainer::~CSCppMachTaskContainer((CSCppMachTaskContainer *)v6);
}

void sub_1B90429B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

mach_vm_address_t CSCppTaskMemory::region_at_address(CSCppTaskMemory *this, mach_vm_address_t a2, int a3)
{
  kern_return_t v5;
  mach_vm_address_t result;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_msg_type_number_t infoCnt;
  int info[12];
  natural_t nesting_depth;

  nesting_depth = 999999;
  mach_vm_address_t address = a2;
  size = 0;
  infoCnt = 12;
  uint64_t v5 = mach_vm_region_recurse(*((_DWORD *)this + 4), &address, &size, &nesting_depth, info, &infoCnt);
  uint64_t result = 0;
  if (!v5)
  {
    if (address > a2 || size + address <= a2)
    {
      return 0;
    }
    else if ((info[0] & a3) == a3)
    {
      return address;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void ___ZN15CSCppTaskMemoryC2ERK22CSCppMachTaskContainerb_block_invoke(uint64_t a1, CSCppDyldSharedCache *this)
{
  unint64_t v3 = *(void **)(a1 + 32);
  CSCppDyldSharedCache::data_segment_ranges(this, &v21);
  unint64_t v4 = v21;
  uint64_t v5 = v22;
  if (v21 != v22)
  {
    uint64_t v6 = (char **)(v3 + 11);
    uint64_t v7 = v3 + 13;
    uint64_t v8 = (char *)v3[12];
    do
    {
      uint64_t v9 = v4[1];
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 152) + *v4;
      if ((unint64_t)v8 >= *v7)
      {
        uint64_t v11 = (v8 - *v6) >> 4;
        if ((unint64_t)(v11 + 1) >> 60) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = *v7 - (void)*v6;
        uint64_t v13 = v12 >> 3;
        if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)(v3 + 13), v14);
        unsigned int v17 = &v15[16 * v11];
        *(void *)unsigned int v17 = v10;
        *((void *)v17 + 1) = v9;
        int v19 = (char *)v3[11];
        int v18 = (char *)v3[12];
        int v20 = v17;
        if (v18 != v19)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v18 - 1);
            v20 -= 16;
            v18 -= 16;
          }
          while (v18 != v19);
          int v18 = *v6;
        }
        uint64_t v8 = v17 + 16;
        v3[11] = v20;
        v3[12] = v17 + 16;
        v3[13] = &v15[16 * v16];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)uint64_t v8 = v10;
        *((void *)v8 + 1) = v9;
        v8 += 16;
      }
      v3[12] = v8;
      v4 += 2;
    }
    while (v4 != v5);
    unint64_t v4 = v21;
  }
  if (v4)
  {
    uint64_t v22 = v4;
    operator delete(v4);
  }
}

void sub_1B9042BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CSCppTaskMemory::~CSCppTaskMemory(CSCppTaskMemory *this)
{
  *(void *)this = &unk_1F12C97D8;
  task_suspension_token_t v2 = *((_DWORD *)this + 28);
  if (v2 + 1 >= 2)
  {
    task_resume2(v2);
    *((_DWORD *)this + 28) = 0;
  }
  if (!CSCppMachTaskContainer::is_self_task((CSCppTaskMemory *)((char *)this + 8)))
  {
    uint64_t v3 = *((void *)this + 3);
    if (v3 != *((void *)this + 4))
    {
      unint64_t v4 = (vm_map_t *)MEMORY[0x1E4F14960];
      do
      {
        mach_vm_deallocate(*v4, *(void *)(v3 + 16), *(void *)(v3 + 8));
        v3 += 24;
      }
      while (v3 != *((void *)this + 4));
    }
    uint64_t v5 = *((void *)this + 6);
    if (v5 != *((void *)this + 7))
    {
      uint64_t v6 = (vm_map_t *)MEMORY[0x1E4F14960];
      do
      {
        mach_vm_deallocate(*v6, *(void *)(v5 + 16), *(void *)(v5 + 8));
        v5 += 24;
      }
      while (v5 != *((void *)this + 7));
    }
  }
  *((void *)this + 4) = *((void *)this + 3);
  uint64_t v7 = (void *)*((void *)this + 6);
  *((void *)this + 7) = v7;
  uint64_t v8 = (void *)*((void *)this + 11);
  if (v8)
  {
    *((void *)this + 12) = v8;
    operator delete(v8);
    uint64_t v7 = (void *)*((void *)this + 6);
  }
  if (v7)
  {
    *((void *)this + 7) = v7;
    operator delete(v7);
  }
  uint64_t v9 = (void *)*((void *)this + 3);
  if (v9)
  {
    *((void *)this + 4) = v9;
    operator delete(v9);
  }
  CSCppMachTaskContainer::~CSCppMachTaskContainer((CSCppTaskMemory *)((char *)this + 8));
}

{
  uint64_t vars8;

  CSCppTaskMemory::~CSCppTaskMemory(this);

  JUMPOUT(0x1BA9D1CD0);
}

uint64_t CSCppTaskMemory::map_task_memory(uint64_t a1, mach_vm_address_t a2, mach_vm_size_t a3, mach_vm_address_t *a4, _DWORD *a5)
{
  if (CSCppMachTaskContainer::is_self_task((CSCppMachTaskContainer *)(a1 + 8)))
  {
    uint64_t result = 0;
    *a4 = a2;
    *a5 = a3;
  }
  else
  {
    *a4 = 0;
    *a5 = a3;
    vm_prot_t v12 = 1;
    vm_prot_t cur_protection = 0;
    unint64_t v11 = 0;
    uint64_t result = remap_memory_from_target(*MEMORY[0x1E4F14960], &v11, a3, 0, 33, *(_DWORD *)(a1 + 16), a2, 1, &cur_protection, &v12, 1u);
    if (!result) {
      *a4 = v11;
    }
  }
  return result;
}

uint64_t CSCppTaskMemory::resume(CSCppTaskMemory *this)
{
  uint64_t result = *((unsigned int *)this + 28);
  if ((result + 1) >= 2)
  {
    uint64_t result = task_resume2(result);
    *((_DWORD *)this + 28) = 0;
  }
  return result;
}

mach_vm_address_t CSCppTaskMemory::bytes_at(CSCppTaskMemory *this, mach_vm_address_t a2, mach_vm_address_t a3)
{
  mach_vm_address_t v3 = a3;
  mach_vm_address_t v4 = a2;
  mach_vm_address_t v6 = *((void *)this + 9);
  mach_vm_address_t v7 = a3 + a2;
  if (a2 >= v6 && v7 <= *((void *)this + 10) + v6)
  {
    for (unint64_t i = (mach_vm_address_t *)*((void *)this + 11); i != *((mach_vm_address_t **)this + 12); i += 2)
    {
      if (a2 >= *i && v7 <= i[1] + *i) {
        goto LABEL_3;
      }
    }
  }
  else
  {
LABEL_3:
    uint64_t v10 = (char *)*((void *)this + 3);
    uint64_t v9 = (char *)*((void *)this + 4);
    uint64_t v8 = (char *)this + 24;
    if (v9 == v10) {
      goto LABEL_12;
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
    vm_prot_t v12 = (char *)*((void *)this + 3);
    do
    {
      unint64_t v13 = v11 >> 1;
      unint64_t v14 = (mach_vm_address_t *)&v12[24 * (v11 >> 1)];
      mach_vm_address_t v16 = *v14;
      unint64_t v15 = (char *)(v14 + 3);
      v11 += ~(v11 >> 1);
      if (v16 < v7) {
        vm_prot_t v12 = v15;
      }
      else {
        unint64_t v11 = v13;
      }
    }
    while (v11);
    if (v12 == v10 || (unint64_t v17 = *((void *)v12 - 3), a2 < v17) || v7 > *((void *)v12 - 2) + v17)
    {
LABEL_12:
      if (a2 >= v7)
      {
        mach_vm_address_t v19 = a2;
LABEL_22:
        if (v9 != v10)
        {
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
          uint64_t v9 = v10;
          do
          {
            unint64_t v24 = v23 >> 1;
            size_t v25 = (mach_vm_address_t *)&v9[24 * (v23 >> 1)];
            mach_vm_address_t v27 = *v25;
            char v26 = (char *)(v25 + 3);
            v23 += ~(v23 >> 1);
            if (v27 < v7) {
              uint64_t v9 = v26;
            }
            else {
              unint64_t v23 = v24;
            }
          }
          while (v23);
        }
        BOOL v28 = v9;
        while (v28 != v10)
        {
          uint64_t v29 = *((void *)v28 - 3);
          uint64_t v30 = *((void *)v28 - 2);
          v28 -= 24;
          if (v19 >= v30 + v29)
          {
            uint64_t v10 = v28 + 24;
            break;
          }
        }
        if (v10 != v9)
        {
          uint64_t v31 = (void *)((char *)this + 48);
          uint64_t v32 = (void *)((char *)this + 64);
          int64_t v33 = (char *)*((void *)this + 7);
          int v34 = v10;
          do
          {
            if ((unint64_t)v33 >= *v32)
            {
              unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v33[-*v31] >> 3);
              unint64_t v37 = v36 + 1;
              if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(*v32 - *v31) >> 3) > v37) {
                unint64_t v37 = 0x5555555555555556 * ((uint64_t)(*v32 - *v31) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v32 - *v31) >> 3) >= 0x555555555555555) {
                unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v38 = v37;
              }
              if (v38) {
                unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)this + 64, v38);
              }
              else {
                unint64_t v39 = 0;
              }
              uint64_t v40 = &v39[24 * v36];
              long long v41 = *(_OWORD *)v34;
              *((void *)v40 + 2) = *((void *)v34 + 2);
              *(_OWORD *)uint64_t v40 = v41;
              unint64_t v43 = (char *)*((void *)this + 6);
              long long v42 = (char *)*((void *)this + 7);
              int v44 = v40;
              if (v42 != v43)
              {
                do
                {
                  long long v45 = *(_OWORD *)(v42 - 24);
                  *((void *)v44 - 1) = *((void *)v42 - 1);
                  *(_OWORD *)(v44 - 24) = v45;
                  v44 -= 24;
                  v42 -= 24;
                }
                while (v42 != v43);
                long long v42 = (char *)*v31;
              }
              int64_t v33 = v40 + 24;
              *((void *)this + 6) = v44;
              *((void *)this + 7) = v40 + 24;
              *((void *)this + 8) = &v39[24 * v38];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              long long v35 = *(_OWORD *)v34;
              *((void *)v33 + 2) = *((void *)v34 + 2);
              *(_OWORD *)int64_t v33 = v35;
              v33 += 24;
            }
            *((void *)this + 7) = v33;
            mach_vm_address_t v46 = v3 + v19;
            mach_vm_address_t v47 = *(void *)v34;
            uint64_t v48 = *((void *)v34 + 1);
            v34 += 24;
            mach_vm_address_t v49 = v48 + v47;
            if (v3 + v19 <= v49) {
              mach_vm_address_t v46 = v49;
            }
            if (v19 >= v47) {
              mach_vm_address_t v19 = v47;
            }
            mach_vm_address_t v3 = v46 - v19;
          }
          while (v34 != v9);
          uint64_t v50 = (unsigned char *)*((void *)this + 4);
          uint64_t v51 = v50 - v9;
          uint64_t v8 = (char *)this + 24;
          if (v50 != v9) {
            memmove(v10, v9, v50 - v9);
          }
          *((void *)this + 4) = &v10[v51];
        }
        uint64_t v59 = 0;
        int v58 = 0;
        int v52 = (*(uint64_t (**)(CSCppTaskMemory *, mach_vm_address_t, mach_vm_address_t, uint64_t *, int *))(*(void *)this + 56))(this, v19, v3, &v59, &v58);
        uint64_t v53 = 0;
        if (!v52)
        {
          v56[0] = v19;
          v56[1] = v3;
          uint64_t v57 = v59;
          std::vector<TRangeValue<Pointer64,unsigned char *>>::insert((uint64_t)v8, v10, (unint64_t)v56);
          return v4 - v19 + v57;
        }
        return v53;
      }
      else
      {
        mach_vm_address_t v18 = a2;
        mach_vm_address_t v19 = a2;
        while (1)
        {
          mach_vm_address_t v20 = CSCppTaskMemory::region_at_address(this, v18, 1);
          if (v18 - v20 >= v21) {
            return 0;
          }
          mach_vm_address_t v22 = v3 + v19;
          mach_vm_address_t v18 = v21 + v20;
          if (v3 + v19 <= v21 + v20) {
            mach_vm_address_t v22 = v21 + v20;
          }
          if (v19 >= v20) {
            mach_vm_address_t v19 = v20;
          }
          mach_vm_address_t v3 = v22 - v19;
          if (v18 >= v7)
          {
            uint64_t v10 = (char *)*((void *)this + 3);
            uint64_t v9 = (char *)*((void *)this + 4);
            mach_vm_address_t v7 = v22;
            goto LABEL_22;
          }
        }
      }
    }
    else
    {
      return a2 - v17 + *((void *)v12 - 1);
    }
  }
  return v4;
}

char *std::vector<TRangeValue<Pointer64,unsigned char *>>::insert(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3 = a3;
  mach_vm_address_t v4 = __src;
  mach_vm_address_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    int64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((__src - v13) >> 3);
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v13) >> 3);
    if (2 * v17 > v14) {
      unint64_t v14 = 2 * v17;
    }
    if (v17 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v33 = a1 + 16;
    if (v18) {
      mach_vm_address_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(a1 + 16, v18);
    }
    else {
      mach_vm_address_t v19 = 0;
    }
    mach_vm_address_t v22 = &v19[24 * v16];
    std::string __p = v19;
    uint64_t v30 = v22;
    uint64_t v31 = v22;
    uint64_t v32 = &v19[24 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v24 = 1;
        }
        else {
          unint64_t v24 = 2 * v16;
        }
        size_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v8, v24);
        mach_vm_address_t v22 = &v25[24 * (v24 >> 2)];
        std::string __p = v25;
        uint64_t v30 = v22;
        uint64_t v32 = &v25[24 * v26];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        uint64_t v23 = v16 + 2;
        if (v16 >= -1) {
          uint64_t v23 = v16 + 1;
        }
        v22 -= 24 * (v23 >> 1);
        uint64_t v30 = v22;
      }
    }
    long long v27 = *(_OWORD *)v3;
    *((void *)v22 + 2) = *(void *)(v3 + 16);
    *(_OWORD *)mach_vm_address_t v22 = v27;
    uint64_t v31 = v22 + 24;
    mach_vm_address_t v4 = (char *)std::vector<TRangeValue<Pointer64,unsigned char *>>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v31 != v30) {
      uint64_t v31 = &v30[(v31 - v30 - 24) % 0x18uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    long long v21 = *(_OWORD *)a3;
    *((void *)__src + 2) = *(void *)(a3 + 16);
    *(_OWORD *)__src = v21;
    *(void *)(a1 + 8) = __src + 24;
  }
  else
  {
    uint64_t v9 = __src + 24;
    uint64_t v10 = v6 - 24;
    uint64_t v11 = *(void *)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *(_OWORD *)v10;
      *(void *)(v11 + 16) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      v11 += 24;
      v10 += 24;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(__src + 24, __src, v6 - v9);
    }
    if ((unint64_t)v4 <= v3) {
      v3 += 24 * (*(void *)(a1 + 8) > v3);
    }
    long long v20 = *(_OWORD *)v3;
    *((void *)v4 + 2) = *(void *)(v3 + 16);
    *(_OWORD *)mach_vm_address_t v4 = v20;
  }
  return v4;
}

void sub_1B90434C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CSCppTaskMemory::footprint(CSCppTaskMemory *this)
{
  uint64_t v2 = *((void *)this + 4) - *((void *)this + 3) + *((void *)this + 7) - *((void *)this + 6) + 120;
  if (!CSCppMachTaskContainer::is_self_task((CSCppTaskMemory *)((char *)this + 8)))
  {
    for (uint64_t i = *((void *)this + 3); i != *((void *)this + 4); i += 24)
      v2 += *(void *)(i + 8);
    for (uint64_t j = *((void *)this + 6); j != *((void *)this + 7); j += 24)
      v2 += *(void *)(j + 8);
  }
  return v2;
}

uint64_t CSCppTaskMemory::to_string@<X0>(void *a1@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"CSCppTaskMemory pid:", 20);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v5, a1);
  uint64_t v4 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v5[-1] + *(void *)(v4 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v5[0] = MEMORY[0x1E4FBA470] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9D1C60](&v7);
}

void sub_1B90436D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *CSCppTaskMemory::validate(void *this)
{
  uint64_t v1 = (void *)this[3];
  uint64_t v2 = (void *)this[4];
  unint64_t v3 = v1 + 3;
  if (v1 != v2 && v3 != v2)
  {
    do
    {
      unint64_t v5 = *(v3 - 3);
      if (v5 < v3[1] + *v3 && *v3 < *(v3 - 2) + v5)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"CSCppTaskMemory: range values must not overlap", 46);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v22, &v20);
        Exception::Exception(v19, &v20);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v19);
      }
      v3 += 3;
    }
    while (v3 != v2);
  }
  char v6 = (void *)this[6];
  for (uint64_t i = (void *)this[7]; v6 != i; v6 += 3)
  {
    unint64_t v8 = v6[1] + *v6;
    uint64_t v9 = v1;
    if (v1 != v2)
    {
      uint64_t v9 = v1;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v2 - v1);
      do
      {
        unint64_t v11 = v10 >> 1;
        long long v12 = &v9[3 * (v10 >> 1)];
        unint64_t v14 = *v12;
        unint64_t v13 = v12 + 3;
        v10 += ~(v10 >> 1);
        if (v14 < v8) {
          uint64_t v9 = v13;
        }
        else {
          unint64_t v10 = v11;
        }
      }
      while (v10);
    }
    if (v9 == v1) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = -1;
    }
    int64_t v16 = &v9[3 * v15];
    this = (void *)*v16;
    if (*v6 < (unint64_t)*v16 || v8 > (unint64_t)this + v16[1])
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"CSCppTaskMemory: retired memory must be contained by live memory", 64);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v22, &v20);
      Exception::Exception(v19, &v20);
      unint64_t v17 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v17, (uint64_t)v19);
    }
  }
  return this;
}

void sub_1B90438DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSCppTaskMemory::is_task(CSCppTaskMemory *this)
{
  return 1;
}

uint64_t CSCppTaskMemory::is_dyld_shared_cache(CSCppTaskMemory *this)
{
  return 0;
}

void *std::vector<TRangeValue<Pointer64,unsigned char *>>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(void **)(a2 + 8);
  char v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    unint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v8 - 24);
      uint64_t v7 = (void *)(v9 - 24);
      *(void *)(v9 - 8) = *((void *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v10;
      v8 -= 24;
      v9 -= 24;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  unint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v12 + v13;
  unint64_t v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v14;
  uint64_t v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v15;
  int64_t v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

char *demangle(char *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  return DemanglingUtilities::demangle_with_reusable_buffer(a1, 0, 0, a4);
}

char *CSDemangleSymbolName(char *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  return DemanglingUtilities::demangle_with_reusable_buffer(a1, 0, 0, a4);
}

char *DemanglingUtilities::demangle_with_reusable_buffer(char *this, char *a2, char **a3, unint64_t *a4)
{
  if (!this) {
    return this;
  }
  int v6 = *this;
  if (v6 != 95 && v6 != 36) {
    return 0;
  }
  if (this[1] == 95) {
    uint64_t v7 = (uint64_t)(this + 1);
  }
  else {
    uint64_t v7 = (uint64_t)this;
  }
  int status = -3;
  if (a3) {
    unint64_t v8 = *a3;
  }
  else {
    unint64_t v8 = 0;
  }
  mach_vm_address_t v19 = v8;
  if (a2) {
    uint64_t v9 = *(char **)a2;
  }
  else {
    uint64_t v9 = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&call_external_swift_demangle(char const*,char *,unsigned long *,int *)::onceFlag, memory_order_acquire) != -1)
  {
    uint64_t v23 = &v21;
    mach_vm_address_t v22 = &v23;
    std::__call_once(&call_external_swift_demangle(char const*,char *,unsigned long *,int *)::onceFlag, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<call_external_swift_demangle(char const*,char *,unsigned long *,int *)::$_0 &&>>);
  }
  if (demanglerLibraryFunctions)
  {
    if (v9) {
      BOOL v10 = v19 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      unint64_t v11 = 0;
    }
    else {
      unint64_t v11 = v19;
    }
    if (v10) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v9;
    }
    unint64_t v13 = demanglerLibraryFunctions(v7, v12, v11);
    if (!v13)
    {
      int v16 = -2;
      goto LABEL_33;
    }
    if (v13 < (unint64_t)v11) {
      goto LABEL_29;
    }
    unint64_t v14 = (char *)(v13 + 1);
    uint64_t v15 = (char *)malloc_type_realloc(v9, v13 + 1, 0xE031A237uLL);
    if (v15)
    {
      uint64_t v12 = v15;
      demanglerLibraryFunctions(v7, v15, v14);
      mach_vm_address_t v19 = v14;
LABEL_29:
      this = v12;
      if (!a2) {
        return this;
      }
      goto LABEL_48;
    }
  }
  int v16 = -3;
LABEL_33:
  int status = v16;
  if (*(unsigned char *)v7 != 95) {
    return 0;
  }
  if (*(_WORD *)v7 != 23135)
  {
    BOOL v17 = *(_WORD *)v7 == 24415 && *(unsigned char *)(v7 + 2) == 90;
    if (!v17 && *(_DWORD *)v7 != 1516199775) {
      return 0;
    }
  }
  if (a2) {
    unint64_t v18 = *(char **)a2;
  }
  else {
    unint64_t v18 = 0;
  }
  this = __cxa_demangle((const char *)v7, v18, (size_t *)&v19, &status);
  uint64_t v12 = this;
  if (status) {
    this = 0;
  }
  if (a2 && !status)
  {
LABEL_48:
    if (v12 != *(char **)a2)
    {
      *(void *)a2 = v12;
      if (a3) {
        *a3 = v19;
      }
    }
    return v12;
  }
  return this;
}

BOOL isAbsolutePath(const char *a1)
{
  int v1 = *(unsigned __int8 *)a1;
  return v1 == 126 || v1 == 47;
}

BOOL stringByAppendingPathComponents(char *__s1, size_t __n, const char *__source, const char *a4)
{
  if (__s1 == __source) {
    size_t v7 = strnlen(__s1, __n);
  }
  else {
    size_t v7 = strlcpy(__s1, __source, __n);
  }
  if (v7 < __n)
  {
    if (!v7 || __s1[v7 - 1] == 47) {
      return strlcpy(&__s1[v7], a4, __n - v7) < __n - v7;
    }
    if (v7 < __n - 2)
    {
      *(_WORD *)&__s1[v7++] = 47;
      return strlcpy(&__s1[v7], a4, __n - v7) < __n - v7;
    }
  }
  return 0;
}

const char *filename_from_path(const char *a1)
{
  int v1 = a1;
  size_t v2 = strlen(a1);
  if (v2)
  {
    while (v1[v2] != 47)
    {
      if (!--v2) {
        return v1;
      }
    }
    v1 += v2 + 1;
  }
  return v1;
}

BOOL is_root_directory(char *a1)
{
  return strlen(a1) == 1 && strchr(a1, 47);
}

long long *system_dyld_shared_cache_path(void)
{
  {
    system_dyld_shared_cache_path(void)::$_0::operator()();
  }
  return &system_dyld_shared_cache_path(void)::shared_cache_dir;
}

void sub_1B9043E1C(_Unwind_Exception *a1)
{
}

void system_dyld_shared_cache_path(void)::$_0::operator()()
{
  uint64_t v0 = (char *)dyld_shared_cache_file_path();
  if (v0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, v0);
    uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t p_p = &__p;
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    unint64_t v3 = (char *)&p_p[-1].__r_.__value_.__r.__words[2] + 7;
    while (size)
    {
      int v4 = v3[size--];
      if (v4 == 47)
      {
        std::string::size_type v5 = size + 1;
        goto LABEL_14;
      }
    }
    std::string::size_type v5 = 0;
LABEL_14:
    std::string::basic_string((std::string *)&system_dyld_shared_cache_path(void)::shared_cache_dir, &__p, 0, v5, (std::allocator<char> *)&v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&system_dyld_shared_cache_path(void)::shared_cache_dir, "");
  }
}

void sub_1B9043F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter(CSCppCrashReporterInfoSetter *this, const char *a2)
{
  __uint64_t v7 = 0;
  pthread_threadid_np(0, &v7);
  pthread_mutex_lock(&CSCppCrashReporterInfoSetter::crash_reporter_mutex);
  uint64_t v4 = qword_1EB5179C0;
  *((void *)this + 1) = qword_1EB5179C0;
  __uint64_t v5 = v7;
  if (v4) {
    BOOL v6 = CSCppCrashReporterInfoSetter::crash_reporter_owner == v7;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    qword_1EB5179C0 = (uint64_t)a2;
    *(unsigned char *)this = 1;
    CSCppCrashReporterInfoSetter::crash_reporter_owner = v5;
  }
  else
  {
    *(unsigned char *)this = 0;
  }
  pthread_mutex_unlock(&CSCppCrashReporterInfoSetter::crash_reporter_mutex);
}

void CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter(CSCppCrashReporterInfoSetter *this)
{
  if (*(unsigned char *)this)
  {
    pthread_mutex_lock(&CSCppCrashReporterInfoSetter::crash_reporter_mutex);
    qword_1EB5179C0 = *((void *)this + 1);
    pthread_mutex_unlock(&CSCppCrashReporterInfoSetter::crash_reporter_mutex);
  }
}

uint64_t convert_symbol_flags_to_symbolic_representation(char *__dst, size_t __size, int a3)
{
  *__dst = 0;
  if (a3)
  {
    uint64_t result = strlcat(__dst, "IsFunction, ", __size);
    if ((a3 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t result = 0;
  if ((a3 & 2) != 0) {
LABEL_5:
  }
    uint64_t result = strlcat(__dst, "IsDyldStub, ", __size);
LABEL_6:
  if ((a3 & 4) != 0)
  {
    uint64_t result = strlcat(__dst, "IsObjcMethod, ", __size);
    if ((a3 & 8) == 0)
    {
LABEL_8:
      if ((a3 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_34;
    }
  }
  else if ((a3 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t result = strlcat(__dst, "IsJavaMethod, ", __size);
  if ((a3 & 0x10) == 0)
  {
LABEL_9:
    if ((a3 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = strlcat(__dst, "IsExternal, ", __size);
  if ((a3 & 0x20) == 0)
  {
LABEL_10:
    if ((a3 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = strlcat(__dst, "IsPrivateExternal, ", __size);
  if ((a3 & 0x40) == 0)
  {
LABEL_11:
    if ((a3 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = strlcat(__dst, "IsThumb, ", __size);
  if ((a3 & 0x80) == 0)
  {
LABEL_12:
    if ((a3 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = strlcat(__dst, "IsOmitFramePointer, ", __size);
  if ((a3 & 0x100) == 0)
  {
LABEL_13:
    if ((a3 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = strlcat(__dst, "IsKnownLength, ", __size);
  if ((a3 & 0x1000) == 0)
  {
LABEL_14:
    if ((a3 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = strlcat(__dst, "IsMarked, ", __size);
  if ((a3 & 0x2000) == 0)
  {
LABEL_15:
    if ((a3 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = strlcat(__dst, "Lock, ", __size);
  if ((a3 & 0x4000) == 0)
  {
LABEL_16:
    if ((a3 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = strlcat(__dst, "NameSourceNlist, ", __size);
  if ((a3 & 0x8000) == 0)
  {
LABEL_17:
    if ((a3 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = strlcat(__dst, "NameSourceDwarf, ", __size);
  if ((a3 & 0x10000) == 0)
  {
LABEL_18:
    if ((a3 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = strlcat(__dst, "NameSourceDwarfMIPSLinkage, ", __size);
  if ((a3 & 0x20000) == 0)
  {
LABEL_19:
    if ((a3 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = strlcat(__dst, "NameValid, ", __size);
  if ((a3 & 0x40000) == 0)
  {
LABEL_20:
    if ((a3 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = strlcat(__dst, "NameAllocated, ", __size);
  if ((a3 & 0x80000) == 0)
  {
LABEL_21:
    if ((a3 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = strlcat(__dst, "MangledNameSourceNlist, ", __size);
  if ((a3 & 0x100000) == 0)
  {
LABEL_22:
    if ((a3 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = strlcat(__dst, "MangledNameSourceDwarf, ", __size);
  if ((a3 & 0x200000) == 0)
  {
LABEL_23:
    if ((a3 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = strlcat(__dst, "MangledNameSourceDwarfMIPSLinkage, ", __size);
  if ((a3 & 0x400000) == 0)
  {
LABEL_24:
    if ((a3 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = strlcat(__dst, "MangledNameValid, ", __size);
  if ((a3 & 0x800000) == 0)
  {
LABEL_25:
    if ((a3 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = strlcat(__dst, "MangledNameAllocated, ", __size);
  if ((a3 & 0x1000000) == 0)
  {
LABEL_26:
    if ((a3 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = strlcat(__dst, "IsObjcMethodValid, ", __size);
  if ((a3 & 0x2000000) == 0)
  {
LABEL_27:
    if ((a3 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = strlcat(__dst, "NList, ", __size);
  if ((a3 & 0x4000000) == 0)
  {
LABEL_28:
    if ((a3 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = strlcat(__dst, "Dwarf, ", __size);
  if ((a3 & 0x8000000) == 0)
  {
LABEL_29:
    if ((a3 & 0x10000000) == 0) {
      goto LABEL_30;
    }
LABEL_55:
    uint64_t result = strlcat(__dst, "FunctionStarts, ", __size);
    if ((a3 & 0x20000000) == 0) {
      return result;
    }
    goto LABEL_56;
  }
LABEL_54:
  uint64_t result = strlcat(__dst, "DebugMap, ", __size);
  if ((a3 & 0x10000000) != 0) {
    goto LABEL_55;
  }
LABEL_30:
  if ((a3 & 0x20000000) == 0) {
    return result;
  }
LABEL_56:

  return strlcat(__dst, "Merged, ", __size);
}

void shared_cache_search_directories(void *a1@<X8>)
{
  *(void *)&long long v39 = *MEMORY[0x1E4F143B8];
  system_dyld_shared_cache_path();
  std::string::basic_string[abi:ne180100]<0>(&v36, "/System/Volumes/Preboot/Cryptexes/OS");
  std::string::basic_string[abi:ne180100]<0>(&__p, "/private/preboot/Cryptexes/OS");
  std::string::basic_string[abi:ne180100]<0>(v38, "/System/Cryptexes/OS");
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  int v34 = 0;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  v31.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v32 = (long long *)operator new(0x48uLL);
  uint64_t v33 = v32;
  int v34 = (char *)v32 + 72;
  uint64_t v2 = 0;
  uint64_t v33 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v34, (long long *)&v36, &v39, (std::string *)v32);
  do
  {
    if (SHIBYTE(v38[v2 + 2]) < 0) {
      operator delete((void *)v38[v2]);
    }
    v2 -= 3;
  }
  while (v2 != -9);
  memset(&v36, 0, sizeof(v36));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v36, v32, v33, 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v32) >> 3));
  uint64_t v29 = a1;
  if (system_dyld_shared_cache_path(void)::shared_cache_dir[23] < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)system_dyld_shared_cache_path(void)::shared_cache_dir, *(std::string::size_type *)&system_dyld_shared_cache_path(void)::shared_cache_dir[8]);
  }
  else {
    std::string __p = *(std::string *)system_dyld_shared_cache_path(void)::shared_cache_dir;
  }
  std::string::size_type size = v36.__r_.__value_.__l.__size_;
  std::string::size_type v3 = v36.__r_.__value_.__r.__words[0];
  if (v36.__r_.__value_.__r.__words[0] == v36.__r_.__value_.__l.__size_)
  {
LABEL_38:
    std::string::basic_string[abi:ne180100]<0>(&v31, "");
    char v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    while (1)
    {
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
      }
      else
      {
        long long v4 = *(_OWORD *)v3;
        v31.__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v4;
      }
      int64_t v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      char v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t v5 = __p.__r_.__value_.__l.__size_;
      }
      int v8 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      uint64_t v9 = (void *)v31.__r_.__value_.__r.__words[0];
      BOOL v10 = (v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v31
          : (std::string *)v31.__r_.__value_.__r.__words[0];
      int64_t v11 = (v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v31.__r_.__value_.__r.__words[2])
          : v31.__r_.__value_.__l.__size_;
      if (!v11) {
        break;
      }
      if (v5 >= v11)
      {
        uint64_t v12 = (char *)p_p + v5;
        int v13 = v10->__r_.__value_.__s.__data_[0];
        unint64_t v14 = p_p;
        do
        {
          int64_t v15 = v5 - v11;
          if (v15 == -1) {
            break;
          }
          int v16 = (char *)memchr(v14, v13, v15 + 1);
          if (!v16) {
            break;
          }
          BOOL v17 = v16;
          if (!memcmp(v16, v10, v11))
          {
            if (v17 == v12 || v17 - (char *)p_p == -1) {
              break;
            }
            goto LABEL_39;
          }
          unint64_t v14 = (std::string *)(v17 + 1);
          int64_t v5 = v12 - (v17 + 1);
        }
        while (v5 >= v11);
      }
      if (v8 < 0) {
        operator delete(v9);
      }
      v3 += 24;
      if (v3 == size) {
        goto LABEL_38;
      }
    }
  }
LABEL_39:
  if (v6 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v35 = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  unint64_t v18 = (const char *)&shared_cache_search_directories(void)::final_driverkit_path;
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, "/System/DriverKit/System/Library/dyld/");
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v25 = &v36;
    }
    else {
      size_t v25 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v26 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v26 = v36.__r_.__value_.__l.__size_;
    }
    long long v27 = std::string::append(&v31, (const std::string::value_type *)v25, v26);
    if (SHIBYTE(v27->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&shared_cache_search_directories(void)::final_driverkit_path, v27->__r_.__value_.__l.__data_, v27->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      unk_1EB517B10 = *((void *)&v27->__r_.__value_.__l + 2);
      shared_cache_search_directories(void)::final_driverkit_path = v28;
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v19 = system_dyld_shared_cache_path(void)::shared_cache_dir[23];
  long long v20 = *(_OWORD *)system_dyld_shared_cache_path(void)::shared_cache_dir;
  if (byte_1EB517B17 < 0) {
    unint64_t v18 = (const char *)shared_cache_search_directories(void)::final_driverkit_path;
  }
  size_t v21 = strlen(v18);
  v29[1] = 0;
  v29[2] = 0;
  *uint64_t v29 = 0;
  mach_vm_address_t v22 = operator new(0x20uLL);
  if ((v19 & 0x80u) == 0) {
    uint64_t v23 = system_dyld_shared_cache_path(void)::shared_cache_dir;
  }
  else {
    uint64_t v23 = (char *)v20;
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v24 = v19;
  }
  else {
    uint64_t v24 = *((void *)&v20 + 1);
  }
  v29[1] = v22 + 4;
  v29[2] = v22 + 4;
  *mach_vm_address_t v22 = v23;
  v22[1] = v24;
  v22[2] = v18;
  v22[3] = v21;
  *uint64_t v29 = v22;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
}

void sub_1B9044754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  a23 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

uint64_t shared_cache_search_directories(void)::$_0::~$_0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  std::string::size_type v3 = (void **)a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t with_primary_shared_cache_uuid_and_unslid_base_from_path(UUID *a1, uint64_t a2)
{
  long long v4 = UUID::null_uuid(a1);
  int v5 = open((const char *)a1, 0x1000000);
  if (v5 == -1)
  {
    return std::function<void ()(UUID const*,unsigned long long)>::operator()(a2, (uint64_t)v4, 0);
  }
  else
  {
    int v6 = v5;
    if (!fstat(v5, &v10)
      && v10.st_size > 0x207uLL
      && (__uint64_t v7 = (const char *)mmap(0, 0x208uLL, 1, 1, v6, 0)) != 0
      && (int v8 = (uint64_t *)v7, v7 != (const char *)-1)
      && !strncmp(v7, "dyld_v", 6uLL))
    {
      std::function<void ()(UUID const*,unsigned long long)>::operator()(a2, (uint64_t)(v8 + 11), v8[28]);
      close(v6);
      return munmap(v8, 0x208uLL);
    }
    else
    {
      std::function<void ()(UUID const*,unsigned long long)>::operator()(a2, (uint64_t)v4, 0);
      return close(v6);
    }
  }
}

uint64_t std::function<void ()(UUID const*,unsigned long long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t is_device_sptm_enabled(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&is_device_sptm_enabled(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&is_device_sptm_enabled(void)::once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<is_device_sptm_enabled(void)::$_0 &&>>);
  }
  return is_device_sptm_enabled(void)::sptm_txm_enabled;
}

DemanglingUtilities::CSCppReusableDemanglingBuffer *DemanglingUtilities::CSCppReusableDemanglingBuffer::CSCppReusableDemanglingBuffer(DemanglingUtilities::CSCppReusableDemanglingBuffer *this)
{
  *(void *)this = 4096;
  *((void *)this + 1) = malloc_type_malloc(0x1000uLL, 0x8EF97A77uLL);
  return this;
}

uint64_t DemanglingUtilities::CSCppReusableDemanglingBuffer::reusable_buffer(DemanglingUtilities::CSCppReusableDemanglingBuffer *this)
{
  return (uint64_t)this + 8;
}

void DemanglingUtilities::CSCppReusableDemanglingBuffer::~CSCppReusableDemanglingBuffer(void **this)
{
}

char *DemanglingUtilities::create_dyld_stub_name(DemanglingUtilities *this, const char *a2)
{
  size_t v3 = strlen((const char *)this);
  long long v4 = (char *)malloc_type_malloc(v3 + 12, 0xB6F0ACEAuLL);
  strcpy(v4, "DYLD-STUB$$");
  strcpy(v4 + 11, (const char *)this);
  return v4;
}

BOOL DemanglingUtilities::is_simple_mangled_name(DemanglingUtilities *this, const char *a2)
{
  if ((a2 & 2) != 0) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)this;
  if (v2 != 95 && v2 != 36) {
    return 1;
  }
  uint64_t v3 = 0;
  if (*((unsigned char *)this + 1) == 95) {
    long long v4 = (char *)this + 1;
  }
  else {
    long long v4 = (const char *)this;
  }
  do
  {
    size_t v5 = strlen((&off_1E61D0450)[v3]);
    int v6 = strncmp(v4, (&off_1E61D0450)[v3], v5);
    BOOL result = v6 != 0;
    if (!v6) {
      break;
    }
    BOOL v8 = v3 == 12;
    v3 += 2;
  }
  while (!v8);
  return result;
}

unsigned char *DemanglingUtilities::simple_demangle(unsigned char *this, const char *a2)
{
  if ((a2 & 0x380000) != 0 && *this == 95) {
    ++this;
  }
  return this;
}

unsigned __int8 *std::__call_once_proxy[abi:ne180100]<std::tuple<call_external_swift_demangle(char const*,char *,unsigned long *,int *)::$_0 &&>>()
{
  BOOL result = (unsigned __int8 *)getenv("CS_DO_NOT_DEMANGLE_SWIFT");
  if (!result
    || ((v1 = *result - 48, v2 = v1 > 0x3E, v3 = (1 << v1) & 0x4000000040000001, !v2) ? (BOOL v4 = v3 == 0) : (BOOL v4 = 1),
        !v4))
  {
    BOOL result = (unsigned __int8 *)dlopen("/usr/lib/swift/libswiftDemangle.dylib", 1);
    if (result
      || (BOOL result = (unsigned __int8 *)dlopen("/System/Library/PrivateFrameworks/Swift/libswiftDemangle.dylib", 1)) != 0)
    {
      BOOL result = (unsigned __int8 *)dlsym(result, "swift_demangle_getSimplifiedDemangledName");
      demanglerLibraryFunctions = result;
    }
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<is_device_sptm_enabled(void)::$_0 &&>>()
{
  int v4 = 0;
  size_t v3 = 4;
  uint64_t result = sysctlbyname("kern.page_protection_type", &v4, &v3, 0, 0);
  if (result) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = v4 == 2;
  }
  char v2 = v1;
  is_device_sptm_enabled(void)::sptm_txm_enabled = v2;
  return result;
}

void CSSymbolicatorCreateWithTask()
{
}

void CSSymbolicatorCreateWithPid()
{
}

uint64_t CSSymbolicatorForeachSymbolicatorWithURL(const __CFURL *a1, uint64_t a2)
{
  return CSSymbolicatorForeachSymbolicatorWithURLFlagsAndNotification(a1, 0, 0, a2);
}

uint64_t CSSymbolicatorCreateWithURLAndArchitecture(const __CFURL *a1, uint64_t a2)
{
  return CSSymbolicatorCreateWithURLArchitectureFlagsAndNotification(a1, a2, 0);
}

uint64_t CSSymbolicatorForeachSharedCache()
{
  return CSSymbolicatorForeachSharedCacheSymbolicatorWithFlagsAndNotification();
}

atomic_uint *CSSymbolicatorCreateForTaskSharedCache(char a1, uint64_t a2)
{
  return CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification(a1, a2);
}

uint64_t CSSymbolicatorCreateWithMachKernel()
{
  return CSSymbolicatorCreateWithMachKernelFlagsAndNotification(0);
}

uint64_t CSSymbolicatorIsTaskTranslated()
{
  return 0;
}

uint64_t CSSymbolicatorIsKernelSymbolicator(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3))) {
    return (*(uint64_t (**)(void))(**(void **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 24))();
  }
  else {
    return 0;
  }
}

uint64_t CSSymbolicatorIsTaskValid(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3))) {
    return (*(uint64_t (**)(void))(**(void **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 32))();
  }
  else {
    return 0;
  }
}

uint64_t CSSymbolicatorGetPid(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3))) {
    return *(unsigned int *)((*(uint64_t (**)(void))(**(void **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 16))(*(void *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56))
  }
                           + 12);
  else {
    return 0;
  }
}

uint64_t CSSymbolicatorGetTask(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3))) {
    return *(unsigned int *)((*(uint64_t (**)(void))(**(void **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 16))(*(void *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56))
  }
                           + 8);
  else {
    return 0;
  }
}

UUID *CSSymbolicatorGetSharedCacheUUID(char a1, uint64_t a2)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0;
  }
  char v2 = (UUID *)(*(uint64_t (**)(void))(**(void **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 48))(*(void *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56));
  if (UUID::is_null(v2)) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t CSSymbolicatorGetSharedCacheBaseAddress(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3))) {
    return (*(uint64_t (**)(void))(**(void **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 64))();
  }
  else {
    return 0;
  }
}

BOOL CSSymbolicatorGetTaskIsTranslated(char a1, uint64_t a2)
{
  return a1 & 7 | (8 * (a2 & 3)) && *(unsigned char *)(*(void *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 16) != 0;
}

uint64_t CSSymbolicatorForeachSymbolOwnerWithUUIDAtTime(uint64_t a1, uint64_t a2, CFUUIDRef uuid, uint64_t a4, uint64_t a5)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0;
  }
  CFUUIDBytes v10 = CFUUIDGetUUIDBytes(uuid);
  return CSSymbolicatorForeachSymbolOwnerWithCFUUIDBytesAtTime(a1, a2, &v10, a4, a5);
}

uint64_t CSSymbolicatorGetSymbolOwnerWithUUIDAtTime(uint64_t a1, uint64_t a2, const __CFUUID *a3, uint64_t a4)
{
  uint64_t v7 = 0;
  BOOL v8 = &v7;
  uint64_t v9 = 0x3802000000;
  CFUUIDBytes v10 = __Block_byref_object_copy__10;
  int64_t v11 = __Block_byref_object_dispose__10;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __CSSymbolicatorGetSymbolOwnerWithUUIDAtTime_block_invoke;
  void v6[3] = &unk_1E61D04C8;
  void v6[4] = &v7;
  if (CSSymbolicatorForeachSymbolOwnerWithUUIDAtTime(a1, a2, a3, a4, (uint64_t)v6) == 1) {
    uint64_t v4 = v8[5];
  }
  else {
    uint64_t v4 = 0;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1B90450E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t __CSSymbolicatorGetSymbolOwnerWithUUIDAtTime_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 32) + 8);
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = a3;
  return result;
}

uint64_t CSSymbolicatorGetSymbolOwnerWithCFUUIDBytesAtTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  BOOL v8 = &v7;
  uint64_t v9 = 0x3802000000;
  CFUUIDBytes v10 = __Block_byref_object_copy__10;
  int64_t v11 = __Block_byref_object_dispose__10;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __CSSymbolicatorGetSymbolOwnerWithCFUUIDBytesAtTime_block_invoke;
  void v6[3] = &unk_1E61D04F0;
  void v6[4] = &v7;
  if (CSSymbolicatorForeachSymbolOwnerWithCFUUIDBytesAtTime(a1, a2, a3, a4, v6) == 1) {
    uint64_t v4 = v8[5];
  }
  else {
    uint64_t v4 = 0;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1B90451FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CSSymbolicatorGetSymbolOwnerWithCFUUIDBytesAtTime_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 32) + 8);
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = a3;
  return result;
}

uint64_t WriteMMapArchiveToDirectory(CSCppSymbolOwner *a1, TMMapArchive *a2, char *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  CFUUIDBytesToString((const CFUUIDBytes *)((char *)a2 + 52), __s, 0x28uLL);
  int v6 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v20, a3);
  std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v8 = &v20;
  }
  else {
    BOOL v8 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v20.__r_.__value_.__l.__size_;
  }
  if (v8->__r_.__value_.__s.__data_[size - 1] != 47) {
    std::string::push_back(v6, 47);
  }
  size_t v9 = strlen(__s);
  std::string::append(&v20, __s, v9);
  std::string::append(&v20, ".symbolsarchive", 0xFuLL);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFUUIDBytes v10 = &v20;
  }
  else {
    CFUUIDBytes v10 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  int v11 = open((const char *)v10, 16777730, 432);
  int v12 = v11;
  if (v11 == -1) {
    goto LABEL_26;
  }
  if (fstat(v11, &v19) == -1) {
    goto LABEL_26;
  }
  size_t v13 = *((unsigned int *)a2 + 1);
  if (v19.st_size == v13 || a1 && v19.st_size && (*((unsigned char *)a1 + 110) & 4) == 0) {
    goto LABEL_26;
  }
  uint64_t v18 = 0;
  if (!*((_DWORD *)a2 + 20))
  {
    uint64_t v15 = TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>(a2, v13, v12, &v18);
    goto LABEL_31;
  }
  if (!TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>(a2, 4uLL, v12, &v18)|| (__buf = *((_DWORD *)a2 + 1) - *((_DWORD *)a2 + 20), !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>(&__buf, 4uLL, v12, &v18))|| !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>((char *)a2 + 8, 0x28uLL, v12, &v18)|| (int v22 = TMMapArchive::calculate_checksum((int32x4_t *)a2) - *((_DWORD *)a2 + 20), !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>(&v22, 4uLL,
                         v12,
                         &v18))
    || !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>((char *)a2 + 52, 0x18uLL, v12, &v18)|| (v21 = 0, !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>(&v21, 8uLL, v12, &v18))|| (uint64_t v14 = TMMapArchive::TEXT_text(a2), !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>((char *)a2 + 84, v14 - ((void)a2 + 84), v12, &v18)))
  {
LABEL_26:
    uint64_t v16 = 0;
    goto LABEL_27;
  }
  uint64_t v15 = TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>((void *)(*((unsigned int *)a2 + 20) + v14), (size_t)a2 + v13 - *((unsigned int *)a2 + 20) - v14, v12, &v18);
LABEL_31:
  uint64_t v16 = v15;
LABEL_27:
  close(v12);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_1B90454CC(_Unwind_Exception *a1)
{
  close(v1);
  if (*(char *)(v2 - 129) < 0) {
    operator delete(*(void **)(v2 - 152));
  }
  _Unwind_Resume(a1);
}

uint64_t AddMmapArchiveToDirectory(CSCppSymbolOwner *a1, char *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a1 + 110) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (const CFUUIDBytes *)((char *)a1 + 16);
  if (UUID::is_null((UUID *)((uint8_t *)a1 + 1)) || !*((void *)a1 + 10)) {
    return 0;
  }
  size_t v5 = (void *)CSCppSymbolOwner::data(a1);
  if ((*(unsigned int (**)(void *))(*v5 + 24))(v5) == 4)
  {
    int v6 = (unsigned int *)v5[11];
    if (v6)
    {
      BOOL v7 = 0;
LABEL_33:
      WriteMMapArchiveToDirectory(a1, (TMMapArchive *)v6, a2);
      goto LABEL_34;
    }
    return 0;
  }
  if ((*(unsigned int (**)(void *))(*v5 + 24))(v5) != 1)
  {
    if ((*(unsigned int (**)(void *))(*v5 + 24))(v5) != 2) {
      return 0;
    }
    CFUUIDBytesToString(v4, v22, 0x28uLL);
    int v11 = (void *)TRawSymbolOwnerData<Pointer64>::mutable_sorted_symbols((uint64_t)v5);
    if (*v11 != v11[1])
    {
      CSCppAddressSet::CSCppAddressSet((CSCppAddressSet *)v19);
      size_t v13 = (char *)*((void *)a1 + 4);
      int v12 = (char *)*((void *)a1 + 5);
      if (v12 - v13 == 32)
      {
        if (v13 == v12)
        {
          size_t v13 = (char *)*((void *)a1 + 5);
        }
        else
        {
          do
          {
            long long v21 = *(_OWORD *)v13;
            std::__tree<TRange<Pointer64>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64> const&>(v20, (unint64_t *)&v21, &v21);
            v13 += 32;
          }
          while (v13 != v12);
          size_t v13 = (char *)*((void *)a1 + 4);
          int v12 = (char *)*((void *)a1 + 5);
        }
      }
      if (v12 - v13 == 32) {
        BOOL v17 = (CSCppAddressSet *)v19;
      }
      else {
        BOOL v17 = 0;
      }
      uint64_t mmap_archive_arch = CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>((uint64_t)a1, (uint64_t)v5, v17);
      goto LABEL_30;
    }
LABEL_19:
    BOOL v7 = 0;
    int v14 = 0;
    int v6 = 0;
    goto LABEL_31;
  }
  CFUUIDBytesToString(v4, v22, 0x28uLL);
  BOOL v8 = (void *)TRawSymbolOwnerData<Pointer32>::mutable_sorted_symbols((uint64_t)v5);
  if (*v8 == v8[1]) {
    goto LABEL_19;
  }
  CSCppAddressSet::CSCppAddressSet((CSCppAddressSet *)v19);
  CFUUIDBytes v10 = (char *)*((void *)a1 + 4);
  size_t v9 = (char *)*((void *)a1 + 5);
  if (v9 - v10 == 32)
  {
    if (v10 == v9)
    {
      CFUUIDBytes v10 = (char *)*((void *)a1 + 5);
    }
    else
    {
      do
      {
        long long v21 = *(_OWORD *)v10;
        std::__tree<TRange<Pointer64>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64> const&>(v20, (unint64_t *)&v21, &v21);
        v10 += 32;
      }
      while (v10 != v9);
      CFUUIDBytes v10 = (char *)*((void *)a1 + 4);
      size_t v9 = (char *)*((void *)a1 + 5);
    }
  }
  if (v9 - v10 == 32) {
    uint64_t v15 = (CSCppAddressSet *)v19;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t mmap_archive_arch = CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>((uint64_t)a1, (uint64_t)v5, v15);
LABEL_30:
  int v6 = (unsigned int *)mmap_archive_arch;
  BOOL v7 = mmap_archive_arch != 0;
  int v14 = 4 * v7;
  CSCppAddressSet::~CSCppAddressSet((CSCppAddressSet *)v19);
LABEL_31:
  if (!v6) {
    return 0;
  }
  if (v14 == 4) {
    goto LABEL_33;
  }
LABEL_34:
  if (v7) {
    mach_vm_deallocate(*MEMORY[0x1E4F14960], (mach_vm_address_t)v6, v6[1]);
  }
  return 1;
}

void sub_1B90457FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CSCppAddressSet::~CSCppAddressSet((CSCppAddressSet *)va);
  _Unwind_Resume(a1);
}

void CSCppAddMmapArchivesFromSymbolicatorToDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = __CSCppAddMmapArchivesFromSymbolicatorToDirectory_block_invoke;
  v3[3] = &__block_descriptor_tmp_17;
  void v3[4] = a3;
  CSCppForEachMMapArchiveInSymbolicator(a1, a2, (uint64_t)v3);
}

void CSCppForEachMMapArchiveInSymbolicator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), &v12);
  memset(v10, 0, sizeof(v10));
  int v11 = 1065353216;
  uint64_t v4 = v12;
  for (uint64_t i = v13; v4 != i; v4 += 2)
  {
    if (!std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::find<UUID>(v10, (void *)(*v4 + 16)))
    {
      uint64_t v8 = *v4;
      int v6 = (std::__shared_weak_count *)v4[1];
      size_t v9 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v7 = (*(uint64_t (**)(uint64_t, uint64_t *))(a3 + 16))(a3, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      if (v7) {
        std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__emplace_unique_key_args<UUID,UUID const&>((uint64_t)v10, (void *)(*v4 + 16), (_OWORD *)(*v4 + 16));
      }
    }
  }
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v10);
  *(void *)&v10[0] = &v12;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
}

void sub_1B904598C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a11);
  a11 = (void **)&a16;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t __CSCppAddMmapArchivesFromSymbolicatorToDirectory_block_invoke(uint64_t a1, CSCppSymbolOwner **a2)
{
  return AddMmapArchiveToDirectory(*a2, *(char **)(a1 + 32));
}

uint64_t CSCppAddMmapArchivesToDirectory(uint64_t result, uint64_t a2, char *a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    size_t v5 = (uint64_t *)(result + 8);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      __n128 result = AddMmapArchiveToDirectory((CSCppSymbolOwner *)(v6 & 0xFFFFFFFFFFFFFFFCLL), a3);
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t _findPrimarySharedCacheInFlatbufferSymbolicator(const FlatbufferSymbols::Symbolicator *a1)
{
  int v1 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v1 < 0xBu) {
    return 0;
  }
  uint64_t v2 = v1[5];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (unsigned int *)((char *)a1 + v2 + *(unsigned int *)((char *)a1 + v2));
  uint64_t v4 = *v3;
  if (v4 == 1) {
    return (uint64_t)v3 + v3[1] + 4;
  }
  uint64_t v6 = &v3[v4 + 1];
  int v7 = v3 + 1;
  _findSharedCacheWithNamePrefix<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SharedCache>,FlatbufferSymbols::SharedCache const*>>((uint64_t)&v7, &v6, "dyld_shared_cache", 0x11uLL, &v8);
  if (v8 == &v3[*v3 + 1]) {
    return 0;
  }
  else {
    return (uint64_t)v8 + *v8;
  }
}

uint64_t _findSharedCacheWithNamePrefix<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SharedCache>,FlatbufferSymbols::SharedCache const*>>@<X0>(uint64_t result@<X0>, unsigned int **a2@<X1>, const char *a3@<X2>, size_t a4@<X3>, unsigned int **a5@<X8>)
{
  uint64_t v6 = *(unsigned int **)result;
  int v7 = *a2;
  if (*(unsigned int **)result != *a2)
  {
    while (1)
    {
      __n128 result = FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata((FlatbufferSymbols::SymbolOwner *)((char *)v6 + *v6));
      if (result)
      {
        CFUUIDBytes v10 = (unsigned __int16 *)(result - *(int *)result);
        if (*v10 >= 0x13u)
        {
          uint64_t v11 = v10[9];
          if (v11)
          {
            __n128 result = strncmp((const char *)(result + v11 + *(unsigned int *)(result + v11) + 4), a3, a4);
            if (!result) {
              break;
            }
          }
        }
      }
      if (++v6 == v7)
      {
        uint64_t v6 = v7;
        break;
      }
    }
  }
  *a5 = v6;
  return result;
}

char *_findAOTSharedCacheInFlatbufferSymbolicator(int *a1)
{
  int v1 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v1 < 0xBu) {
    return 0;
  }
  uint64_t v2 = v1[5];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (unsigned int *)((char *)a1 + v2 + *(unsigned int *)((char *)a1 + v2));
  size_t v5 = &v3[*v3 + 1];
  uint64_t v6 = v3 + 1;
  _findSharedCacheWithNamePrefix<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SharedCache>,FlatbufferSymbols::SharedCache const*>>((uint64_t)&v6, &v5, "aot_shared_cache", 0x10uLL, &v7);
  if (v7 == &v3[*v3 + 1]) {
    return 0;
  }
  else {
    return (char *)v7 + *v7;
  }
}

void _assignArchivesToSymbolOwners(void *a1, TMMapArchive *a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 != v4)
  {
    do
    {
      uint64_t v6 = *(UUID **)v3;
      size_t v5 = *(std::__shared_weak_count **)(v3 + 8);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!UUID::is_null(v6 + 1)
        && std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::find<UUID>(a1, &(*v6)[16]))
      {
        CSCppSymbolOwner::data_claim_empty((CSCppSymbolOwner *)v6);
      }
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      v3 += 16;
    }
    while (v3 != v4);
  }
  for (uint64_t i = (void *)a1[2]; i; uint64_t i = (void *)*i)
    CSCppMMapArchiveCache::release_archive(i[4], a2);
}

void sub_1B9045CC8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

double CSCppSignatureEncodeSymbolicator<__CFData *>(const __CFData *a1, int a2, int a3, int a4, int a5)
{
  CFIndex Length = CFDataGetLength(a1);
  CFDataSetLength(a1, Length + 24);
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  *(void *)&double result = 0x1FF01FF02;
  *(void *)MutableBytePtr = 0x1FF01FF02;
  *((_DWORD *)MutableBytePtr + 2) = a2;
  *((_DWORD *)MutableBytePtr + 3) = a3;
  *((_DWORD *)MutableBytePtr + 4) = a4;
  *((_DWORD *)MutableBytePtr + 5) = a5;
  return result;
}

char *CSCppSignatureEncodeSymbolOwner<__CFData *>(const __CFData *a1, _OWORD *a2, int a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, const char *a8, void *a9, uint64_t a10)
{
  int v11 = a7;
  unint64_t v17 = HIDWORD(a7);
  CFIndex Length = CFDataGetLength(a1);
  size_t v19 = strlen(a8);
  CFDataSetLength(a1, Length + (v19 & 0xFFFFFFFFFFFFFFF8) + ((a9[1] - *a9) & 0x1FFFFFFFE0) + 64);
  std::string v20 = &CFDataGetMutableBytePtr(a1)[Length];
  *(_OWORD *)std::string v20 = *a2;
  *((_DWORD *)v20 + 4) = a3;
  *((_DWORD *)v20 + 5) = a4 & 0xFFFBFFFF;
  *((void *)v20 + 3) = a5;
  *((void *)v20 + 4) = a6;
  *((_DWORD *)v20 + 10) = v11;
  *((_DWORD *)v20 + 11) = v17;
  *((_DWORD *)v20 + 12) = (a9[1] - *a9) >> 5;
  unsigned int v21 = (strlen(a8) & 0xFFFFFFF8) + 8;
  *((_DWORD *)v20 + 13) = v21;
  double result = strcpy((char *)v20 + 56, a8);
  uint64_t v23 = (void *)*a9;
  if (*a9 < a9[1])
  {
    result += v21;
    do
    {
      uint64_t v24 = (const char *)v23[3];
      if (!v24) {
        uint64_t v24 = (const char *)v23[2];
      }
      uint64_t v25 = strncpy(result, v24, 0x10uLL);
      *((void *)v25 + 2) = *v23 + a10;
      *((void *)v25 + 3) = v23[1];
      double result = v25 + 32;
      v23 += 4;
    }
    while ((unint64_t)v23 < a9[1]);
  }
  return result;
}

void *CSCppSignatureEncodeMMapArchive<__CFData *>(const __CFData *a1, _DWORD *a2)
{
  CFIndex Length = CFDataGetLength(a1);
  CFDataSetLength(a1, Length + ((a2[1] + 23) & 0xFFFFFFF8));
  size_t v5 = &CFDataGetMutableBytePtr(a1)[Length];
  *(void *)size_t v5 = 0x7A1B22B1ALL;
  size_t v6 = a2[1];
  *((_DWORD *)v5 + 2) = -1582159078;
  *((_DWORD *)v5 + 3) = (v6 + 23) & 0xFFFFFFF8;

  return memcpy(v5 + 16, a2, v6);
}

UInt8 *CSCppSignatureEncodeOptionalDataHeader<__CFData *>(const __CFData *a1, uint64_t a2)
{
  CFIndex Length = CFDataGetLength(a1);
  CFDataSetLength(a1, Length + 8);
  double result = CFDataGetMutableBytePtr(a1);
  *(void *)&result[Length] = (a2 << 32) | 0xC0FFEE;
  return result;
}

void CSCppSignatureEncodeOptionalData<__CFData *>(const __CFData *a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  CSCppSignatureEncodeOptionalDataHeader<__CFData *>(a1, a2);
  CFIndex Length = CFDataGetLength(a1);
  long long v16 = *a3;
  long long v49 = *a5;
  long long v50 = v16;
  uint64_t v41 = 0;
  long long v42 = &v41;
  uint64_t v43 = 0x4002000000;
  int v44 = __Block_byref_object_copy__28;
  long long v45 = __Block_byref_object_dispose__29;
  std::string __p = 0;
  mach_vm_address_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v36 = MEMORY[0x1E4F143A8];
  uint64_t v37 = 0x40000000;
  uint64_t v38 = (uint64_t)___ZL31_addAotImageInfosToOptionalDataR37SignatureOptionalDataEncodingVersion310_CSTypeRefP8__CFDatam_block_invoke;
  long long v39 = &unk_1E61D0648;
  uint64_t v40 = &v41;
  CSSymbolicatorForEachAotImage();
  uint64_t v17 = a6;
  uint64_t v19 = v42[5];
  uint64_t v18 = v42[6];
  Tasunint64_t k = CSSymbolicatorGetTask(a7, a8);
  LOBYTE(a3) = CSTaskIsTranslated(Task);
  unint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19 + 56);
  CFIndex v23 = v22 + Length;
  CFDataSetLength(a1, v22 + Length);
  uint64_t v24 = &CFDataGetMutableBytePtr(a1)[Length];
  long long v25 = v49;
  *(_OWORD *)uint64_t v24 = v50;
  *((void *)v24 + 2) = a4;
  *(_OWORD *)(v24 + 24) = v25;
  *((void *)v24 + 5) = v17;
  v24[48] = a3;
  *((_DWORD *)v24 + 13) = -1431655765 * (v21 >> 5);
  memcpy(v24 + 56, (const void *)v42[5], v22 - 56);
  _Block_object_dispose(&v41, 8);
  if (__p)
  {
    mach_vm_address_t v47 = __p;
    operator delete(__p);
  }
  uint64_t v41 = 0;
  long long v42 = &v41;
  uint64_t v43 = 0x4002000000;
  int v44 = __Block_byref_object_copy__11;
  long long v45 = __Block_byref_object_dispose__11;
  std::string __p = 0;
  mach_vm_address_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = (uint64_t)&v36;
  uint64_t v38 = 0x2000000000;
  LODWORD(v39) = 0;
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 0x40000000;
  v35[2] = ___Z32CSCppSignatureEncodeOptionalDataIP8__CFDataEvT_jPKhyS4_y10_CSTypeRef_block_invoke;
  v35[3] = &unk_1E61D0538;
  v35[4] = &v36;
  v35[5] = &v41;
  CSSymbolicatorForeachSymbolOwnerAtTime(a7, a8, 0x8000000000000001, (uint64_t)v35);
  int v26 = ((*(_DWORD *)(v37 + 24) - 1) | 7) + 1;
  CFDataSetLength(a1, v23 + (v26 & 0xFFFFFFF8) + 4);
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  *(_DWORD *)&MutableBytePtr[v23] = v26;
  long long v28 = &MutableBytePtr[v23 + 4];
  uint64_t v29 = (const char **)v42[5];
  uint64_t v30 = (const char **)v42[6];
  while (v29 != v30)
  {
    std::string v31 = *v29++;
    size_t v32 = strlen(v31) + 1;
    memcpy(v28, v31, v32);
    v28 += v32;
  }
  unsigned int v33 = v26 - *(_DWORD *)(v37 + 24);
  if (v33)
  {
    if (v33 <= 1) {
      size_t v34 = 1;
    }
    else {
      size_t v34 = v33;
    }
    bzero(v28, v34);
  }
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v41, 8);
  if (__p)
  {
    mach_vm_address_t v47 = __p;
    operator delete(__p);
  }
}

void sub_1B904630C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__11(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___Z32CSCppSignatureEncodeOptionalDataIP8__CFDataEvT_jPKhyS4_y10_CSTypeRef_block_invoke(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t Version = CSSymbolOwnerGetVersion(a2, a3);
  if (Version) {
    size_t v5 = (const char *)Version;
  }
  else {
    size_t v5 = "";
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += strlen(v5) + 1;
  size_t v6 = *(void **)(*(void *)(a1 + 40) + 8);
  int v7 = (const char **)v6[6];
  unint64_t v8 = v6[7];
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = v6[5];
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v8 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v6 + 7), v14);
    }
    else {
      uint64_t v15 = 0;
    }
    long long v16 = (const char **)&v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *long long v16 = v5;
    size_t v9 = v16 + 1;
    uint64_t v19 = (char *)v6[5];
    uint64_t v18 = (char *)v6[6];
    if (v18 != v19)
    {
      do
      {
        std::string v20 = (const char *)*((void *)v18 - 1);
        v18 -= 8;
        *--long long v16 = v20;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)v6[5];
    }
    void v6[5] = v16;
    v6[6] = v9;
    v6[7] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *int v7 = v5;
    size_t v9 = v7 + 1;
  }
  v6[6] = v9;
}

uint64_t CSCppSignatureDecodeSymbolicator<__CFData const*>(const __CFData *a1, unint64_t *a2, unsigned int *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(a1);
  unint64_t v16 = *a2 + 24;
  if (v16 > Length) {
    return 0;
  }
  uint64_t v17 = &BytePtr[*a2];
  unsigned int v23 = *((_DWORD *)v17 + 1);
  int v22 = *((_DWORD *)v17 + 2);
  int v21 = *((_DWORD *)v17 + 3);
  int v20 = *((_DWORD *)v17 + 4);
  int v19 = *((_DWORD *)v17 + 5);
  if (*(_DWORD *)v17 != -16646398) {
    return 0;
  }
  *a3 = v23;
  if (v23 > 1) {
    return 0;
  }
  *a4 = v22;
  *a5 = v21;
  *a6 = v20;
  *a7 = v19;
  *a2 = v16;
  return 1;
}

uint64_t CSCppDetermineSignatureType<__CFData const*>(const __CFData *a1)
{
  BytePtr = CFDataGetBytePtr(a1);
  if (!strncmp((const char *)BytePtr + 4, "SYMB", 4uLL)) {
    return 2;
  }
  else {
    return *(_DWORD *)BytePtr == -16646398;
  }
}

uint64_t CSCppSignatureDecodeSymbolOwner<__CFData const*>(const __CFData *a1, unint64_t *a2, const UInt8 **a3, _DWORD *a4, _DWORD *a5, void *a6, void *a7, unint64_t *a8, void *a9, void **a10)
{
  BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(a1);
  unint64_t v20 = *a2;
  if (*a2 + 64 > Length) {
    return 0;
  }
  int v21 = &BytePtr[v20];
  unint64_t v22 = *(unsigned int *)&BytePtr[v20 + 48];
  unint64_t v23 = v20 + *((unsigned int *)v21 + 13) + 32 * v22 + 56;
  if (v23 > Length) {
    return 0;
  }
  *a3 = v21;
  *a4 = *((_DWORD *)v21 + 4);
  *a5 = *((_DWORD *)v21 + 5);
  *a6 = *((void *)v21 + 3);
  *a7 = *((void *)v21 + 4);
  *a8 = *((unsigned int *)v21 + 10) | ((unint64_t)*((unsigned int *)v21 + 11) << 32);
  long long v25 = v21 + 56;
  *a9 = v21 + 56;
  if ((*a7 & 0x8000000000000000) != 0) {
    *a7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *a5 &= ~0x80000000;
  uint64_t v26 = *((unsigned int *)v21 + 13);
  std::vector<CSCppSegmentRange>::reserve(a10, v22);
  if (v22)
  {
    long long v27 = (CSCppNamedRange *)&v25[v26];
    do
    {
      uint64_t v31 = *((void *)v27 + 2);
      uint64_t v28 = *((void *)v27 + 3);
      uint64_t v29 = v27;
      uint64_t v30 = v28;
      std::vector<CSCppSegmentRange>::emplace_back<unsigned long long,unsigned long long,char *>(a10, &v31, &v30, &v29);
      long long v27 = (CSCppNamedRange *)((char *)v27 + 32);
      LODWORD(v22) = v22 - 1;
    }
    while (v22);
  }
  *a2 = v23;
  return 1;
}

void *std::vector<CSCppSegmentRange>::emplace_back<unsigned long long,unsigned long long,char *>(void **a1, void *a2, uint64_t *a3, CSCppNamedRange **a4)
{
  uint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  size_t v9 = v10;
  unint64_t v11 = *(void *)(v8 - 8);
  if (v11 >= (unint64_t)v10)
  {
    uint64_t v13 = (uint64_t)(v11 - (void)*a1) >> 5;
    if ((unint64_t)(v13 + 1) >> 59) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v9 - (unsigned char *)*a1;
    uint64_t v15 = v14 >> 4;
    if (v14 >> 4 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v8, v16);
      uint64_t v19 = v18;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v19 = 0;
    }
    unint64_t v20 = &v17[32 * v13];
    std::construct_at[abi:ne180100]<CSCppSegmentRange,unsigned long long &,unsigned long long &,char const*&,CSCppSegmentRange*>(v20, a2, a3, a4);
    uint64_t v12 = v20 + 32;
    unint64_t v22 = (char *)*a1;
    int v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        long long v23 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v20 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v20 - 1) = v23;
        v20 -= 32;
        v21 -= 32;
      }
      while (v21 != v22);
      int v21 = (char *)*a1;
    }
    *a1 = v20;
    a1[1] = v12;
    a1[2] = &v17[32 * v19];
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    std::construct_at[abi:ne180100]<CSCppSegmentRange,unsigned long long &,unsigned long long &,char const*&,CSCppSegmentRange*>(*(void **)(v8 - 8), a2, a3, a4);
    uint64_t v12 = (void *)(v11 + 32);
    a1[1] = (void *)(v11 + 32);
  }
  a1[1] = v12;
  return v12 - 4;
}

void sub_1B9046898(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

int32x4_t *CSCppSignatureDecodeMMapArchive<__CFData const*>(const __CFData *a1, void *a2, BOOL *a3)
{
  BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(a1);
  if (*a2 + 16 > Length) {
    return 0;
  }
  __n128 result = MMapArchiveEncoding::mmap_archive((MMapArchiveEncoding *)&BytePtr[*a2], Length - *a2, a3);
  if (result) {
    *a2 += (result->i32[1] + 23) & 0xFFFFFFF8;
  }
  return result;
}

int32x4_t *MMapArchiveEncoding::mmap_archive(MMapArchiveEncoding *this, unint64_t a2, BOOL *a3)
{
  if (*((unsigned int *)this + 3) <= a2 && *(_DWORD *)this == -1582159078)
  {
    unsigned int v5 = *((unsigned __int16 *)this + 2);
    if (v5 <= 6)
    {
      __n128 result = MMapArchiveEncoding::_migrate_legacy_archive(this);
      if (!result) {
        return result;
      }
      *a3 = 1;
LABEL_8:
      if (*((_DWORD *)this + 2) == -1582159078) {
        return result;
      }
      return 0;
    }
    *a3 = 0;
    if (v5 == 7)
    {
      __n128 result = (int32x4_t *)((char *)this + 16);
      goto LABEL_8;
    }
  }
  return 0;
}

uint64_t ___Z31CSCppAddMMapArchivesToSignatureIP8__CFDataEv10_CSTypeRefT_b_block_invoke(uint64_t a1, CSCppSymbolOwner **a2)
{
  return _CSCppAddMMapArchiveToSignatureFromCSCppSymbolOwner<__CFData *>(*a2, *(const __CFData **)(a1 + 32));
}

uint64_t _CSCppAddMMapArchiveToSignatureFromCSCppSymbolOwner<__CFData *>(CSCppSymbolOwner *a1, const __CFData *a2)
{
  uint64_t v4 = (atomic_uint *)CSCppSymbolOwner::data(a1);
  if ((atomic_load_explicit(v4 + 3, memory_order_acquire) & 0x80) != 0) {
    return 0;
  }
  unsigned int v5 = v4;
  if ((*(unsigned int (**)(atomic_uint *))(*(void *)v4 + 24))(v4) != 4)
  {
    if ((*(unsigned int (**)(atomic_uint *))(*(void *)v5 + 24))(v5) == 1)
    {
      CSCppAddressSet::CSCppAddressSet((CSCppAddressSet *)v16);
      uint64_t v8 = (char *)*((void *)a1 + 4);
      int v7 = (char *)*((void *)a1 + 5);
      if (v7 - v8 == 32)
      {
        if (v8 == v7)
        {
          uint64_t v8 = (char *)*((void *)a1 + 5);
        }
        else
        {
          do
          {
            long long v18 = *(_OWORD *)v8;
            std::__tree<TRange<Pointer64>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64> const&>(v17, (unint64_t *)&v18, &v18);
            v8 += 32;
          }
          while (v8 != v7);
          uint64_t v8 = (char *)*((void *)a1 + 4);
          int v7 = (char *)*((void *)a1 + 5);
        }
      }
      if (v7 - v8 == 32) {
        uint64_t v12 = (CSCppAddressSet *)v16;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t mmap_archive_arch = CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>((uint64_t)a1, (uint64_t)v5, v12);
LABEL_26:
      uint64_t v15 = (_DWORD *)mmap_archive_arch;
      CSCppAddressSet::~CSCppAddressSet((CSCppAddressSet *)v16);
      if (v15)
      {
        if (v15[4]) {
          CSCppSignatureEncodeMMapArchive<__CFData *>(a2, v15);
        }
        mach_vm_deallocate(*MEMORY[0x1E4F14960], (mach_vm_address_t)v15, v15[1]);
      }
      return 1;
    }
    if ((*(unsigned int (**)(atomic_uint *))(*(void *)v5 + 24))(v5) == 2)
    {
      CSCppAddressSet::CSCppAddressSet((CSCppAddressSet *)v16);
      uint64_t v10 = (char *)*((void *)a1 + 4);
      size_t v9 = (char *)*((void *)a1 + 5);
      if (v9 - v10 == 32)
      {
        if (v10 == v9)
        {
          uint64_t v10 = (char *)*((void *)a1 + 5);
        }
        else
        {
          do
          {
            long long v18 = *(_OWORD *)v10;
            std::__tree<TRange<Pointer64>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64> const&>(v17, (unint64_t *)&v18, &v18);
            v10 += 32;
          }
          while (v10 != v9);
          uint64_t v10 = (char *)*((void *)a1 + 4);
          size_t v9 = (char *)*((void *)a1 + 5);
        }
      }
      if (v9 - v10 == 32) {
        uint64_t v14 = (CSCppAddressSet *)v16;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t mmap_archive_arch = CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>((uint64_t)a1, (uint64_t)v5, v14);
      goto LABEL_26;
    }
    return 0;
  }
  size_t v6 = (_DWORD *)*((void *)v5 + 11);
  if (v6[4]) {
    CSCppSignatureEncodeMMapArchive<__CFData *>(a2, v6);
  }
  return 1;
}

void sub_1B9046C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CSCppAddressSet::~CSCppAddressSet((CSCppAddressSet *)va);
  _Unwind_Resume(a1);
}

uint64_t CSCppAddMMapArchiveToSignatureFromSymbolOwner<__CFData *>(uint64_t a1, uint64_t a2, const __CFData *a3)
{
  return _CSCppAddMMapArchiveToSignatureFromCSCppSymbolOwner<__CFData *>((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a3);
}

uint64_t CSCppAddSparseMMapArchiveToSignature<__CFData *>(const __CFData *a1, CSCppAddressSet *a2)
{
  uint64_t v4 = (atomic_uint *)CSSymbolicatorCreateWithSignatureFlagsAndNotification(a1, -2147475454, 1024);
  uint64_t v6 = v5;
  char SymbolOwner = CSSymbolicatorGetSymbolOwner((char)v4, v5);
  uint64_t v9 = v8;
  if (CSIsNull(SymbolOwner, v8)) {
    goto LABEL_9;
  }
  uint64_t v10 = (CSCppSymbolOwner *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v11 = (atomic_uint *)CSCppSymbolOwner::data(v10);
  if ((atomic_load_explicit(v11 + 3, memory_order_acquire) & 0x80) != 0) {
    goto LABEL_9;
  }
  uint64_t v12 = (uint64_t)v11;
  int v13 = (*(uint64_t (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
  if (v13 == 2)
  {
    uint64_t mmap_archive_arch = (_DWORD *)CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>((uint64_t)v10, v12, a2);
  }
  else
  {
    if (v13 != 1)
    {
LABEL_9:
      uint64_t v16 = 0;
      goto LABEL_10;
    }
    uint64_t mmap_archive_arch = (_DWORD *)CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>((uint64_t)v10, v12, a2);
  }
  mach_vm_address_t v15 = (mach_vm_address_t)mmap_archive_arch;
  if (!mmap_archive_arch) {
    goto LABEL_9;
  }
  CSCppSignatureEncodeMMapArchive<__CFData *>(a1, mmap_archive_arch);
  mach_vm_deallocate(*MEMORY[0x1E4F14960], v15, *(unsigned int *)(v15 + 4));
  uint64_t v16 = 1;
LABEL_10:
  CSRelease(v4, v6);
  return v16;
}

void CSCppSignatureDecodeOptionalData<__CFData const*>(const __CFData *a1, unint64_t *a2, CSCppSymbolicator *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(a1);
  if (!a2 || !BytePtr) {
    return;
  }
  unint64_t v8 = *a2;
  if (Length < *a2 || Length - *a2 < 8) {
    return;
  }
  unsigned int v10 = *(_DWORD *)&BytePtr[v8 + 4];
  if (*(_DWORD *)&BytePtr[v8] != 12648430 || v10 < 2) {
    return;
  }
  *a2 = v8 + 8;
  if (v10 != 4)
  {
    if (v10 == 3)
    {
      CSCppSignatureDecodeOptionalDataVersion3<__CFData const*>(a1, a2, a3);
    }
    else if (v10 == 2)
    {
      uint64_t v12 = CFDataGetBytePtr(a1);
      if (v12)
      {
        int v13 = v12;
        unint64_t v14 = *a2;
        unint64_t v15 = CFDataGetLength(a1);
        if (v15 > *a2 && v15 - *a2 >= 0x18)
        {
          long long v34 = *(_OWORD *)&v13[v14];
          uint64_t v16 = *(void *)&v13[v14 + 16];
          long long v33 = v34;
          (*(void (**)(void *, long long *))(**((void **)a3 + 7) + 80))(*((void **)a3 + 7), &v33);
          (*(void (**)(void *, uint64_t))(**((void **)a3 + 7) + 88))(*((void **)a3 + 7), v16);
          *a2 += 24;
        }
      }
    }
    return;
  }
  uint64_t v17 = CFDataGetBytePtr(a1);
  if (!v17) {
    return;
  }
  long long v18 = v17;
  unint64_t v19 = *a2;
  unint64_t v20 = CFDataGetLength(a1);
  if (v20 <= *a2 || v20 - *a2 < 0x38) {
    return;
  }
  unint64_t v32 = *a2;
  CSCppSignatureDecodeOptionalDataVersion3<__CFData const*>(a1, &v32, a3);
  CSCppSymbolicator::get_symbol_owners(a3, &v34);
  int v21 = &v18[v19];
  uint64_t v22 = (uint64_t)&v18[v19 + 56];
  uint64_t v24 = (size_t *)*((void *)&v34 + 1);
  long long v23 = (size_t *)v34;
  if ((void)v34 == *((void *)&v34 + 1)) {
    goto LABEL_36;
  }
  long long v25 = (_DWORD *)(v22 + 96 * *((unsigned int *)v21 + 13));
  int v27 = *v25;
  uint64_t v26 = (const char *)(v25 + 1);
  uint64_t v28 = &v26[v27];
  while (1)
  {
    size_t v29 = *v23;
    uint64_t v30 = (std::__shared_weak_count *)v23[1];
    if (!v30)
    {
      if (v26 == v28) {
        goto LABEL_36;
      }
      goto LABEL_29;
    }
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v26 == v28) {
      break;
    }
LABEL_29:
    CSCppSymbolOwner::set_version(v29, v26);
    size_t v31 = strlen(v26);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    v26 += v31 + 1;
    v23 += 2;
    if (v23 == v24) {
      goto LABEL_36;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
LABEL_36:
  *a2 += (*(_DWORD *)(v22 + 96 * *((unsigned int *)v21 + 13)) + 96 * *((_DWORD *)v21 + 13) + 60);
  *(void *)&long long v33 = &v34;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_1B9047074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

unint64_t CSCppSignatureDecodeOptionalDataVersion3<__CFData const*>(const __CFData *a1, unint64_t *a2, CSCppSymbolicator *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unint64_t result = (unint64_t)CFDataGetBytePtr(a1);
  if (a2)
  {
    unint64_t v7 = result;
    if (result)
    {
      unint64_t v8 = *a2;
      unint64_t result = CFDataGetLength(a1);
      if (result > *a2 && result - *a2 >= 0x38)
      {
        unint64_t v9 = v7 + v8;
        long long v10 = *(_OWORD *)(v7 + v8);
        uint64_t v11 = *(void *)(v7 + v8 + 16);
        long long v25 = *(_OWORD *)(v9 + 24);
        long long v26 = v10;
        uint64_t v12 = *(void *)(v9 + 40);
        int v13 = *(unsigned __int8 *)(v9 + 48);
        int v14 = *(_DWORD *)(v9 + 52);
        long long v23 = v25;
        long long v24 = v10;
        BOOL v15 = v13 != 0;
        (*(void (**)(void *, long long *))(**((void **)a3 + 7) + 80))(*((void **)a3 + 7), &v24);
        (*(void (**)(void *, long long *))(**((void **)a3 + 7) + 96))(*((void **)a3 + 7), &v23);
        (*(void (**)(void *, uint64_t))(**((void **)a3 + 7) + 88))(*((void **)a3 + 7), v11);
        (*(void (**)(void *, uint64_t))(**((void **)a3 + 7) + 104))(*((void **)a3 + 7), v12);
        *(unsigned char *)(*((void *)a3 + 7) + 16) = v15;
        unint64_t result = (unint64_t)CSCppSymbolicator::initialize_aot_symbolication_session(a3);
        if (v14)
        {
          uint64_t v16 = (_OWORD *)(v9 + 56);
          int v17 = v14;
          do
          {
            long long v18 = v16[1];
            v22[0] = *v16;
            v22[1] = v18;
            long long v19 = v16[2];
            long long v20 = v16[3];
            long long v21 = v16[5];
            v22[4] = v16[4];
            v22[5] = v21;
            v22[2] = v19;
            v22[3] = v20;
            v16 += 6;
            unint64_t result = (unint64_t)CSCppSymbolicator::add_aot_image_info((uint64_t)a3, (uint64_t)v22);
            --v17;
          }
          while (v17);
        }
        *a2 += (96 * v14 + 56);
      }
    }
  }
  return result;
}

void _createCSSymbolicatorFromFlatbuffer<__CFData const*>(FlatbufferSymbols::SymbolOwner *a1)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v2 = (int *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata(a1);
  if (v2 && (v3 = (unsigned __int16 *)((char *)v2 - *v2), unsigned int v4 = *v3, v4 >= 7))
  {
    if (v3[3]) {
      uint64_t v5 = *(void *)((char *)v2 + v3[3]);
    }
    else {
      LODWORD(v5) = -1;
    }
    if (v4 >= 0xB)
    {
      uint64_t v86 = v3[5];
      if (v86) {
        CSUUIDStringToCFUUIDBytes((char *)v2 + v86 + *(unsigned int *)((char *)v2 + v86) + 4, &v98);
      }
    }
  }
  else
  {
    LODWORD(v5) = -1;
  }
  uint64_t v6 = FlatbufferSymbols::Symbolicator::metadata_as_DyldSharedCacheMetadata(a1);
  uint64_t v7 = v6;
  memset(&v97[1], 0, 24);
  unint64_t v8 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v8 < 9u
    || (uint64_t v9 = v8[4]) == 0
    || (long long v10 = (unsigned int *)((char *)a1 + v9),
        uint64_t v11 = *v10,
        int v13 = (unsigned int *)((char *)v10 + v11 + 4),
        uint64_t v12 = *(unsigned int *)((char *)v10 + v11),
        !v12))
  {
LABEL_125:
    operator new();
  }
  char v89 = &v13[v12];
  uint64_t v88 = v6;
  int v87 = v5;
  while (1)
  {
    int v14 = (FlatbufferSymbols::SymbolOwner *)((char *)v13 + *v13);
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v101 = 0;
    unint64_t ArchitectureForName = 0;
    v97[0] = 0;
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    uint64_t v94 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v95 = 0;
    uint64_t v15 = *(int *)v14;
    uint64_t v16 = -v15;
    int v17 = (unsigned __int16 *)((char *)v14 - v15);
    if (*v17 >= 9u)
    {
      uint64_t v18 = v17[4];
      if (v18)
      {
        long long v19 = (unsigned int *)((char *)v14 + v18);
        uint64_t v20 = *v19;
        uint64_t v22 = (unsigned int *)((char *)v19 + v20 + 4);
        uint64_t v21 = *(unsigned int *)((char *)v19 + v20);
        if (v21)
        {
          long long v23 = 0;
          long long v24 = &v22[v21];
          do
          {
            long long v25 = (char *)v22 + *v22;
            long long v26 = (unsigned __int16 *)&v25[-*(int *)v25];
            unsigned int v27 = *v26;
            if (v27 >= 5)
            {
              uint64_t v28 = v26[2];
              if (v26[2])
              {
                size_t v29 = &v25[v28];
                if (!strstr(&v25[v28 + 4 + *(unsigned int *)&v25[v28]], "__LINKINFO"))
                {
                  if (v27 < 7)
                  {
                    uint64_t v31 = 0;
                    uint64_t v30 = -1;
                  }
                  else
                  {
                    if (v26[3]) {
                      uint64_t v30 = *(void *)&v25[v26[3]];
                    }
                    else {
                      uint64_t v30 = -1;
                    }
                    if (v27 >= 9 && v26[4]) {
                      uint64_t v31 = *(void *)&v25[v26[4]];
                    }
                    else {
                      uint64_t v31 = 0;
                    }
                  }
                  unint64_t v32 = (CSCppNamedRange *)&v29[*(unsigned int *)v29 + 4];
                  if ((unint64_t)v23 >= (unint64_t)v101)
                  {
                    uint64_t v33 = ((char *)v23 - (char *)__p[0]) >> 5;
                    if ((unint64_t)(v33 + 1) >> 59) {
                      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v34 = (uint64_t)(v101 - (unint64_t)__p[0]) >> 4;
                    if (v34 <= v33 + 1) {
                      unint64_t v34 = v33 + 1;
                    }
                    if ((unint64_t)v101 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFE0) {
                      unint64_t v35 = 0x7FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v35 = v34;
                    }
                    if (v35)
                    {
                      uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)&v101, v35);
                      uint64_t v38 = v37;
                    }
                    else
                    {
                      uint64_t v36 = 0;
                      uint64_t v38 = 0;
                    }
                    CSCppSegmentRange::CSCppSegmentRange((CSCppSegmentRange *)&v36[32 * v33], v30, v31, v32, 0);
                    uint64_t v41 = (char *)__p[0];
                    uint64_t v40 = (char *)__p[1];
                    long long v42 = v39;
                    if (__p[1] != __p[0])
                    {
                      do
                      {
                        long long v43 = *((_OWORD *)v40 - 1);
                        *((_OWORD *)v42 - 2) = *((_OWORD *)v40 - 2);
                        *((_OWORD *)v42 - 1) = v43;
                        v42 -= 32;
                        v40 -= 32;
                      }
                      while (v40 != v41);
                      uint64_t v40 = v41;
                    }
                    int v44 = &v36[32 * v38];
                    long long v23 = (CSCppSegmentRange *)(v39 + 32);
                    __p[0] = v42;
                    __p[1] = v39 + 32;
                    *(void *)&long long v101 = v44;
                    if (v40) {
                      operator delete(v40);
                    }
                  }
                  else
                  {
                    CSCppSegmentRange::CSCppSegmentRange(v23, v30, v31, v32, 0);
                    long long v23 = (CSCppSegmentRange *)((char *)v23 + 32);
                  }
                  __p[1] = v23;
                }
              }
            }
            ++v22;
          }
          while (v22 != v24);
          uint64_t v16 = -(uint64_t)*(int *)v14;
          uint64_t v7 = v88;
          LODWORD(v5) = v87;
        }
      }
    }
    long long v45 = (unsigned __int16 *)((char *)v14 + v16);
    unsigned int v46 = *v45;
    if (v46 >= 0x13)
    {
      if (v45[9])
      {
        mach_vm_address_t v47 = (int *)((char *)v14 + v45[9] + *(unsigned int *)((char *)v14 + v45[9]));
        uint64_t v48 = (unsigned __int16 *)((char *)v47 - *v47);
        if (*v48 >= 5u && (uint64_t v49 = v48[2]) != 0) {
          uint64_t v50 = *(void *)((char *)v47 + v49);
        }
        else {
          uint64_t v50 = 0;
        }
        uint64_t v95 = v50;
      }
      if (v46 >= 0x15)
      {
        uint64_t v51 = v45[10];
        if (v51)
        {
          int v52 = (int *)((char *)v14 + v51 + *(unsigned int *)((char *)v14 + v51));
          uint64_t v53 = (unsigned __int16 *)((char *)v52 - *v52);
          if (*v53 >= 5u && (uint64_t v54 = v53[2]) != 0) {
            uint64_t v55 = *(void *)((char *)v52 + v54);
          }
          else {
            uint64_t v55 = 0;
          }
          uint64_t v94 = v55;
        }
      }
    }
    size_t v56 = (const char *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata(v14);
    uint64_t v57 = v56;
    if (v56) {
      break;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (++v13 == v89) {
      goto LABEL_125;
    }
  }
  int v58 = (unsigned __int16 *)&v56[-*(int *)v56];
  unsigned int v59 = *v58;
  uint64_t v60 = "<unknown>";
  if (v59 < 7)
  {
LABEL_75:
    v97[0] = v60;
    if (v59 < 0xD) {
      goto LABEL_93;
    }
    goto LABEL_80;
  }
  uint64_t v61 = v58[3];
  if (v58[3]) {
    v61 += (uint64_t)&v56[*(unsigned int *)&v56[v61]];
  }
  if (v59 < 0x13)
  {
    if (v59 < 0x11)
    {
      if (!v61)
      {
LABEL_124:
        uint64_t v60 = "<unknown>";
        goto LABEL_75;
      }
LABEL_74:
      uint64_t v60 = (const char *)(v61 + 4);
      goto LABEL_75;
    }
    uint64_t v62 = 0;
  }
  else
  {
    uint64_t v62 = v58[9];
    if (v58[9]) {
      v62 += (uint64_t)&v56[*(unsigned int *)&v56[v62]];
    }
  }
  uint64_t v63 = v58[8];
  if (v58[8]) {
    v63 += (uint64_t)&v56[*(unsigned int *)&v56[v63]];
  }
  if (!v61)
  {
    if (v62)
    {
      uint64_t v64 = v62 + 4;
LABEL_79:
      v97[0] = v64;
LABEL_80:
      uint64_t v65 = v58[6];
      if (v58[6])
      {
        size_t v66 = &v56[v65];
        long long v67 = &v56[v65 + *(unsigned int *)&v56[v65]];
        unint64_t v68 = &v67[-*(int *)v67];
        if (*(unsigned __int16 *)v68 >= 7u && (uint64_t v69 = *((unsigned __int16 *)v68 + 3)) != 0) {
          uint64_t v70 = *(unsigned int *)&v67[v69];
        }
        else {
          uint64_t v70 = 0;
        }
        uint64_t v71 = &v66[*(unsigned int *)v66];
        unint64_t v72 = &v71[-*(int *)v71];
        if (*(unsigned __int16 *)v72 >= 9u && (uint64_t v73 = *((unsigned __int16 *)v72 + 4)) != 0) {
          uint64_t v74 = *(unsigned int *)&v71[v73];
        }
        else {
          uint64_t v74 = 0;
        }
        unint64_t ArchitectureForName = v70 | (v74 << 32);
      }
      else if (v59 >= 0xF)
      {
        uint64_t v75 = v58[7];
        if (v75) {
          unint64_t ArchitectureForName = CSArchitectureGetArchitectureForName(&v56[v75 + 4 + *(unsigned int *)&v56[v75]]);
        }
      }
LABEL_93:
      uint64_t v76 = &v57[-*(int *)v57];
      if (*(unsigned __int16 *)v76 < 5u)
      {
        uint64_t v77 = 0;
      }
      else
      {
        uint64_t v77 = *((unsigned __int16 *)v76 + 2);
        if (v77) {
          v77 += (uint64_t)&v57[*(unsigned int *)&v57[v77]];
        }
      }
      CSUUIDStringToCFUUIDBytes(v77 + 4, &v102);
      unsigned int v93 = 1;
      uint64_t v78 = (unsigned __int16 *)((char *)v14 - *(int *)v14);
      if (*v78 >= 0xFu)
      {
        uint64_t v79 = v78[7];
        if (v79) {
          LOBYTE(v79) = *((unsigned char *)v14 + v79) != 0;
        }
        if (v79) {
          goto LABEL_103;
        }
      }
      if (v7)
      {
LABEL_103:
        unsigned int v80 = 513;
        unsigned int v93 = 513;
        if (v7 && !ArchitectureForName)
        {
          unint64_t ArchitectureForName = 16777228;
          unsigned int v80 = 513;
        }
      }
      else
      {
        unsigned int v80 = 1;
      }
      BOOL v81 = v98 == v102 && v99 == v103;
      int v82 = !v81;
      if (v81 || !v5)
      {
        if (!v82) {
          v80 |= 0x10u;
        }
        if (!v5) {
          v80 |= 0x1000u;
        }
        unsigned int v93 = v80;
      }
      uint64_t v91 = &v102;
      unsigned int v90 = 0;
      std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char const*&,void>(&v91, &v90, &v95, &v94, &v93, &ArchitectureForName, v97, &v92);
      __int16 v83 = v92;
      long long v84 = *((_OWORD *)v92 + 2);
      *((_OWORD *)v92 + 2) = *(_OWORD *)__p;
      *(_OWORD *)std::string __p = v84;
      uint64_t v85 = *((void *)v83 + 6);
      *((void *)v83 + 6) = v101;
      *(void *)&long long v101 = v85;
      operator new();
    }
    if (v63)
    {
      uint64_t v64 = v63 + 4;
      goto LABEL_79;
    }
    goto LABEL_124;
  }
  goto LABEL_74;
}

void sub_1B9047FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  size_t v29 = *(void **)(v27 - 120);
  if (v29)
  {
    *(void *)(v27 - 112) = v29;
    operator delete(v29);
  }
  a20 = (void **)&a27;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

uint64_t FlatbufferSymbols::Symbolicator::metadata_as_DyldSharedCacheMetadata(FlatbufferSymbols::Symbolicator *this)
{
  int v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *((unsigned char *)this + v1[2]) == 3) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

const __CFData *_createCSSymbolicatorFromFlatbufferSignature<__CFData const*>(const __CFData *result)
{
  if (result)
  {
    BytePtr = CFDataGetBytePtr(result);
    unsigned int v2 = &BytePtr[*(unsigned int *)BytePtr];
    BOOL v3 = &v2[-*(int *)v2];
    if (*(unsigned __int16 *)v3 >= 5u)
    {
      uint64_t v4 = *((unsigned __int16 *)v3 + 2);
      if (v4)
      {
        uint64_t v5 = &v2[v4 + *(unsigned int *)&v2[v4]];
        _createCSSymbolicatorFromFlatbuffer<__CFData const*>((FlatbufferSymbols::SymbolOwner *)&v5[*((unsigned int *)v5 + 1)
                                                                                                 + 4]);
      }
    }
    return 0;
  }
  return result;
}

__CFData *_CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlockAtObservedTimeRange<__CFData const*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((unint64_t)(a1 - 16385) < 0xFFFFFFFFFFFFC000 || a4 == 0) {
    return 0;
  }
  v43[0] = 0;
  v43[1] = v43;
  v43[2] = 0x2000000000;
  v43[3] = a1;
  uint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x4002000000;
  uint64_t v38 = __Block_byref_object_copy__10;
  long long v39 = __Block_byref_object_dispose__11;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v18 = 0;
  long long v19 = &v18;
  uint64_t v20 = 0xD002000000;
  uint64_t v21 = __Block_byref_object_copy__12;
  uint64_t v22 = __Block_byref_object_dispose__13;
  uint64_t v23 = 0;
  char v24 = 0;
  long long v25 = xmmword_1B908AB50;
  uint64_t v26 = 0;
  int v27 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v30 = 1;
  __int16 v31 = 256;
  v34[4] = 0;
  v32[0] = 0;
  *(void *)((char *)v32 + 7) = 0;
  long long v33 = 0u;
  memset(v34, 0, 27);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 0x40000000;
  void v17[2] = ___Z84_CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlockAtObservedTimeRangeIPK8__CFDataET_myyU13block_pointerFvU13block_pointerFv10_CSTypeRefEE_block_invoke;
  v17[3] = &unk_1E61D0580;
  v17[4] = v43;
  v17[5] = &v35;
  v17[6] = &v18;
  v17[7] = a2;
  v17[8] = a3;
  (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v17);
  uint64_t v6 = (const void *)v36[5];
  uint64_t v7 = v36[6];
  if ((const void *)v7 == v6) {
    goto LABEL_12;
  }
  unint64_t v8 = v19;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::string __p = 0;
  std::vector<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>::__init_with_size[abi:ne180100]<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>*,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>*>(&__p, v6, v7, (v7 - (uint64_t)v6) >> 2);
  FlatbufferEncoder::encodeSymbolicatorOffsets((uint64_t)(v8 + 5), &__p, (uint64_t)&v14);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  if (!v16)
  {
LABEL_12:
    Mutable = 0;
  }
  else
  {
    Mutable = CFDataCreateMutable(0, 0);
    CFDataSetLength(Mutable, length);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    memcpy(MutableBytePtr, v14, length);
  }
  _Block_object_dispose(&v18, 8);
  if (v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v23);
  _Block_object_dispose(&v35, 8);
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  _Block_object_dispose(v43, 8);
  return Mutable;
}

void sub_1B90483D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _Block_object_dispose(&a25, 8);
  FlatbufferEncoder::~FlatbufferEncoder(v25);
  _Block_object_dispose((const void *)(v26 - 128), 8);
  long long v28 = *(void **)(v26 - 88);
  if (v28)
  {
    *(void *)(v26 - 80) = v28;
    operator delete(v28);
  }
  _Block_object_dispose((const void *)(v26 - 64), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__10(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

__n128 __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
  flatbuffers::FlatBufferBuilder::FlatBufferBuilder(a1 + 40, (flatbuffers::FlatBufferBuilder *)(a2 + 40));
  uint64_t v4 = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = v4;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  __n128 result = *(__n128 *)(a2 + 192);
  *(__n128 *)(a1 + 192) = result;
  return result;
}

void __Block_byref_object_dispose__13(void *a1)
{
  unsigned int v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }

  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)(a1 + 5));
}

void FlatbufferEncoder::~FlatbufferEncoder(FlatbufferEncoder *this)
{
  unsigned int v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }

  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(this);
}

void ___Z84_CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlockAtObservedTimeRangeIPK8__CFDataET_myyU13block_pointerFvU13block_pointerFv10_CSTypeRefEE_block_invoke(void *a1, char a2, uint64_t a3)
{
  if (*(void *)(*(void *)(a1[4] + 8) + 24) != (uint64_t)(*(void *)(*(void *)(a1[5] + 8) + 48)
                                                               - *(void *)(*(void *)(a1[5] + 8) + 40)) >> 2
    && (a2 & 7 | (8 * (a3 & 3))) != 0)
  {
    int v5 = FlatbufferEncoder::encodeCSSymbolicatorIntoOffset(*(void *)(a1[6] + 8) + 40, a2, a3, a1[7], a1[8]);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = *(void **)(a1[5] + 8);
      unint64_t v8 = (char *)v7[6];
      unint64_t v9 = v7[7];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v11 = (char *)v7[5];
        uint64_t v12 = (v8 - v11) >> 2;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = v9 - (void)v11;
        unint64_t v14 = (uint64_t)(v9 - (void)v11) >> 1;
        if (v14 <= v12 + 1) {
          unint64_t v14 = v12 + 1;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          char v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)(v7 + 7), v15);
          uint64_t v11 = (char *)v7[5];
          unint64_t v8 = (char *)v7[6];
        }
        else
        {
          char v16 = 0;
        }
        int v17 = &v16[4 * v12];
        uint64_t v18 = &v16[4 * v15];
        *(_DWORD *)int v17 = v6;
        long long v10 = v17 + 4;
        while (v8 != v11)
        {
          int v19 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v17 - 1) = v19;
          v17 -= 4;
        }
        void v7[5] = v17;
        v7[6] = v10;
        v7[7] = v18;
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v8 = v5;
        long long v10 = v8 + 4;
      }
      v7[6] = v10;
    }
  }
}

uint64_t _CSSymbolicatorForeachFlatbufferSymbolicatorInSignature<__CFData const*>(const __CFData *a1, uint64_t a2, uint64_t a3)
{
  return _CSSymbolicatorForeachFlatbufferSymbolicatorInSignatureHelper<__CFData const*>(a1, a2, a3, 0);
}

uint64_t _CSSymbolicatorForeachFlatbufferSymbolicatorInSignatureHelper<__CFData const*>(const __CFData *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0;
  }
  if (CSCppDetermineSignatureType<__CFData const*>(a1) != 2) {
    return 0;
  }
  BytePtr = CFDataGetBytePtr(a1);
  uint64_t v7 = &BytePtr[*(unsigned int *)BytePtr];
  unint64_t v8 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v8 < 5u) {
    return 0;
  }
  uint64_t v9 = *((unsigned __int16 *)v8 + 2);
  if (!v9) {
    return 0;
  }
  long long v10 = &v7[v9 + *(unsigned int *)&v7[v9]];
  if (!*(_DWORD *)v10) {
    return 0;
  }
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = (char *)(v10 + 4);
  do
  {
    uint64_t v14 = *(unsigned int *)v13;
    if (!a4) {
      _createCSSymbolicatorFromFlatbuffer<__CFData const*>((FlatbufferSymbols::SymbolOwner *)&v13[v14]);
    }
    (*(void (**)(uint64_t, char *))(a4 + 16))(a4, &v13[v14]);
    ++v12;
    ++v11;
    v13 += 4;
  }
  while (v11 < *(unsigned int *)v10);
  return v12;
}

uint64_t _CSSymbolicatorForeachRawFlatbufferSymbolicatorInSignature<__CFData const*>(const __CFData *a1, uint64_t a2, uint64_t a3)
{
  return _CSSymbolicatorForeachFlatbufferSymbolicatorInSignatureHelper<__CFData const*>(a1, a2, 0, a3);
}

const __CFData *_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotification<__CFData const*>(const __CFData *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  CFDataRef v7 = CSSymbolicatorCreateWithSignatureFlagsAndNotification(a1, a2, a3);
  uint64_t v9 = v8;
  v13[0] = 0;
  v13[1] = v13;
  _OWORD v13[2] = 0x4002000000;
  void v13[3] = __Block_byref_object_copy__15_0;
  v15[0] = 0;
  v15[1] = 0;
  _OWORD v13[4] = __Block_byref_object_dispose__16_0;
  uint64_t v14 = v15;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  v12[2] = ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke;
  v12[3] = &unk_1E61D05A8;
  void v12[4] = v13;
  CSSymbolicatorForeachSegmentAtTime((char)v7, v8, 0x8000000000000001, (uint64_t)v12);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  v11[2] = ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_2;
  void v11[3] = &unk_1E61D0620;
  v11[5] = a4;
  void v11[6] = a5;
  void v11[4] = v13;
  CSSymbolicatorApplyMutableContextBlock((char)v7, v9, (uint64_t)v11);
  _Block_object_dispose(v13, 8);
  std::__tree<TRange<Pointer64>>::destroy((uint64_t)&v14, v15[0]);
  return v7;
}

void sub_1B9048964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Block_object_dispose(&a21, 8);
  std::__tree<TRange<Pointer64>>::destroy(v27, a27);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__15_0(void *result, void *a2)
{
  result[5] = a2[5];
  unsigned int v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *unsigned int v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__16_0(uint64_t a1)
{
}

uint64_t **___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t Range = CSRegionGetRange(a2, a3);
  uint64_t v5 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  v8[0] = Range;
  v8[1] = Range;
  v8[2] = v6;
  return std::__tree<std::__value_type<unsigned long long,_CSRange>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,_CSRange>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,_CSRange>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,_CSRange>>(v5, v8, (uint64_t)v8);
}

uint64_t ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_2(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_3;
  v5[3] = &unk_1E61D05F8;
  void v5[4] = a1[4];
  void v5[5] = a2;
  return CSSymbolicatorForeachSymbolOwnerAtTime(v2, v3, 0x8000000000000001, (uint64_t)v5);
}

void ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_3(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_4;
  void v6[3] = &unk_1E61D05D0;
  void v6[4] = *(void *)(a1 + 32);
  void v6[5] = &v7;
  CSSymbolOwnerForeachSegment(a2, a3, (uint64_t)v6);
  if (!*((unsigned char *)v8 + 24)) {
    CSSymbolOwnerAddInContext(a2, a3, *(void ***)(a1 + 40));
  }
  _Block_object_dispose(&v7, 8);
}

void sub_1B9048B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = CSRegionGetRange(a2, a3);
  unint64_t v6 = result;
  uint64_t v7 = v5;
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v9 = (void *)(v8 + 48);
  char v10 = *(void **)(v8 + 48);
  if (v10)
  {
    unint64_t v11 = (void *)(v8 + 48);
    do
    {
      unint64_t v12 = v10[4];
      BOOL v13 = v12 >= result;
      if (v12 >= result) {
        uint64_t v14 = v10;
      }
      else {
        uint64_t v14 = v10 + 1;
      }
      if (v13) {
        unint64_t v11 = v10;
      }
      char v10 = (void *)*v14;
    }
    while (*v14);
    if (v11 != v9)
    {
      unint64_t result = CSRangeIntersectsRange(result, v5, v11[5], v11[6]);
      if (result)
      {
LABEL_19:
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
        return result;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v9 = v11;
    }
  }
  if (v9 != *(void **)(v8 + 40))
  {
    unint64_t v15 = (void *)*v9;
    if (*v9)
    {
      do
      {
        char v16 = v15;
        unint64_t v15 = (void *)v15[1];
      }
      while (v15);
    }
    else
    {
      do
      {
        char v16 = (void *)v9[2];
        BOOL v17 = *v16 == (void)v9;
        uint64_t v9 = v16;
      }
      while (v17);
    }
    unint64_t result = CSRangeIntersectsRange(v6, v7, v16[5], v16[6]);
    if (result) {
      goto LABEL_19;
    }
  }
  return result;
}

void _createCSSymbolicatorFromCustomSignature<__CFData const*>(const __CFData *a1, int a2, int a3)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unsigned int v28 = 0;
  unint64_t v27 = 0;
  if (CSCppSignatureDecodeSymbolicator<__CFData const*>(a1, &v27, &v28, (_DWORD *)&v30 + 1, &v30, (_DWORD *)&v29 + 1, &v29))
  {
    if (v28 == 1)
    {
      if ((((a2 & 0x1000) == 0) & ((unsigned __int16)(a3 & 0x1000) >> 12)) != 0) {
        unsigned int v6 = (HIDWORD(v29) & a2 | a3) & 0xFFFFEFFF;
      }
      else {
        unsigned int v6 = HIDWORD(v29) & a2 | a3;
      }
      HIDWORD(v29) = v6;
      long long v24 = 0uLL;
      uint64_t v25 = 0;
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::reserve((uint64_t *)&v24, v29);
      if (v29)
      {
        unsigned int v7 = 0;
        do
        {
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v17 = 0;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v16 = 0;
          if (!CSCppSignatureDecodeSymbolOwner<__CFData const*>(a1, &v27, &v22, (_DWORD *)&v21 + 1, &v21, &v20, &v19, &v18, &v17, __p))
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Error decoding symbol owner from signature", 42);
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v26 + 8, &v14);
            Exception::Exception(v23, &v14);
            exception = __cxa_allocate_exception(0x20uLL);
            Exception::Exception(exception, (uint64_t)v23);
          }
          v23[0] = v22;
          std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,void>(v23, (unsigned int *)&v21 + 1, &v20, &v19, (unsigned int *)&v21, &v18, &v17, v26);
          uint64_t v8 = *(void *)&v26[0];
          long long v9 = *(_OWORD *)(*(void *)&v26[0] + 32);
          *(_OWORD *)(*(void *)&v26[0] + 32) = *(_OWORD *)__p;
          *(_OWORD *)std::string __p = v9;
          uint64_t v10 = *(void *)(v8 + 48);
          *(void *)(v8 + 48) = v16;
          uint64_t v16 = v10;
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((uint64_t *)&v24, v26);
          if (*((void *)&v26[0] + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26[0] + 1));
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          ++v7;
        }
        while (v7 < v29);
      }
      operator new();
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"ERROR, unhandled signature version", 34);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v26 + 8, &v24);
    Exception::Exception(v23, &v24);
    BOOL v13 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v13, (uint64_t)v23);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Error decoding symbolicator from signature", 42);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v26 + 8, &v24);
  Exception::Exception(v23, &v24);
  unint64_t v12 = __cxa_allocate_exception(0x20uLL);
  Exception::Exception(v12, (uint64_t)v23);
}

void sub_1B90490B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::exception a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_1B9049204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33)
{
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  JUMPOUT(0x1B90491DCLL);
}

int32x4_t *_decodeMMapArchivesFromSignature<__CFData const*>@<X0>(const __CFData *a1@<X0>, void *a2@<X1>, TMMapArchive *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  BOOL v9 = 0;
  if (a3) {
    int v7 = 0;
  }
  else {
    int v7 = (a4 >> 12) & 1;
  }
  unint64_t result = CSCppSignatureDecodeMMapArchive<__CFData const*>(a1, a2, &v9);
  if (result)
  {
    if (v9) {
      CSCppMMapArchiveCache::add_archive((unsigned int *)result, 1, a3, 0, 0);
    }
    CSCppMMapArchiveCache::add_signature_archive<__CFData const*>((unsigned int *)result, (uint64_t)a1, a3, v7);
  }
  return result;
}

void sub_1B90492F8(_Unwind_Exception *a1)
{
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

const __CFData *create_symbolicator_signature_with_symbol_owners<__CFData const*>(uint64_t a1, uint64_t **a2, char a3)
{
  CFDataRef Mutable = CFDataCreateMutable(0, 0);
  uint64_t v7 = *(void *)(a1 + 56);
  int v8 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7) + 12);
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
  int v10 = CSCppSymbolicator::flags((os_unfair_lock_s *)a1);
  v11.n128_f64[0] = CSCppSignatureEncodeSymbolicator<__CFData *>(Mutable, v8, v9, v10, (unint64_t)((char *)a2[1] - (char *)*a2) >> 4);
  BOOL v13 = *a2;
  unint64_t v12 = a2[1];
  while (v13 != v12)
  {
    uint64_t v14 = *v13;
    v13 += 2;
    CSCppSignatureEncodeSymbolOwner<__CFData *>(Mutable, (_OWORD *)(v14 + 16), *(_DWORD *)(v14 + 104), *(_DWORD *)(v14 + 108), *(void *)(v14 + 88), *(void *)(v14 + 96), *(void *)(v14 + 112), *(const char **)(v14 + 120), (void *)(v14 + 32), 0);
  }
  if (a3)
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    void v20[2] = ___Z31CSCppAddMMapArchivesToSignatureIP8__CFDataEv10_CSTypeRefT_b_block_invoke;
    uint64_t v20[3] = &__block_descriptor_tmp_7_3;
    v20[4] = Mutable;
    BOOL v21 = (a3 & 4) != 0;
    CSCppForEachMMapArchiveInSymbolicator(2, a1, (uint64_t)v20);
  }
  unint64_t v15 = (long long *)(*(uint64_t (**)(uint64_t, __n128))(*(void *)v7 + 48))(v7, v11);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(v7);
  uint64_t v17 = (long long *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 72))(v7);
  CSCppSignatureEncodeOptionalData<__CFData *>(Mutable, 4, v15, v16, v17, v18, 2, a1);
  return Mutable;
}

void _CSSymbolicatorCreateWithSingleSymbolOwnerSignaturesAndFlags<__CFData const*>(uint64_t a1, unint64_t a2)
{
  memset(v21, 0, sizeof(v21));
  std::string __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::reserve(v21, a2);
  std::vector<unsigned long long>::reserve(&__p, a2);
  if (a2)
  {
    uint64_t v4 = 0;
    do
    {
      CFDataRef v5 = *(const __CFData **)(a1 + 8 * v4);
      uint64_t v17 = 0;
      _CSSymbolOwnerCreateUnmanagedWithSingleSymbolOwnerSignature<__CFData const*>(v5, &v17, v16);
      if (*(void *)&v16[0])
      {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](v21, v16);
        unsigned int v6 = v19;
        if (v19 >= v20)
        {
          int v8 = (char *)__p;
          uint64_t v9 = (v19 - (unsigned char *)__p) >> 3;
          unint64_t v10 = v9 + 1;
          if ((unint64_t)(v9 + 1) >> 61) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v11 = v20 - (unsigned char *)__p;
          if ((v20 - (unsigned char *)__p) >> 2 > v10) {
            unint64_t v10 = v11 >> 2;
          }
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v10;
          }
          if (v12)
          {
            BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v20, v12);
            int v8 = (char *)__p;
            unsigned int v6 = v19;
          }
          else
          {
            BOOL v13 = 0;
          }
          uint64_t v14 = &v13[8 * v9];
          *(void *)uint64_t v14 = v17;
          uint64_t v7 = v14 + 8;
          while (v6 != v8)
          {
            uint64_t v15 = *((void *)v6 - 1);
            v6 -= 8;
            *((void *)v14 - 1) = v15;
            v14 -= 8;
          }
          std::string __p = v14;
          uint64_t v19 = v7;
          uint64_t v20 = &v13[8 * v12];
          if (v8) {
            operator delete(v8);
          }
        }
        else
        {
          *(void *)uint64_t v19 = v17;
          uint64_t v7 = v6 + 8;
        }
        uint64_t v19 = v7;
      }
      if (*((void *)&v16[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16[0] + 1));
      }
      ++v4;
    }
    while (v4 != a2);
  }
  operator new();
}

void sub_1B9049864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  a12 = &a18;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  a12 = (char *)(v23 - 112);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void _CSSymbolOwnerCreateUnmanagedWithSingleSymbolOwnerSignature<__CFData const*>(const __CFData *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (a1
    && (uint64_t v24 = 0,
        uint64_t v23 = 0,
        unsigned int v22 = 0,
        unint64_t v21 = 0,
        (CSCppSignatureDecodeSymbolicator<__CFData const*>(a1, &v21, &v22, (_DWORD *)&v24 + 1, &v24, (_DWORD *)&v23 + 1, &v23) & 1) != 0))
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v18 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v14 = 0;
    if (CSCppSignatureDecodeSymbolOwner<__CFData const*>(a1, &v21, &v20, (_DWORD *)&v19 + 1, &v19, &v18, &v17, &v16, &v15, __p))
    {
      unint64_t v10 = v20;
      std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,void>(&v10, (unsigned int *)&v19 + 1, &v18, &v17, (unsigned int *)&v19, &v16, &v15, &v11);
      uint64_t v6 = v11;
      if (v11)
      {
        uint64_t v7 = *(void **)(v11 + 32);
        *(_OWORD *)(v11 + 32) = *(_OWORD *)__p;
        uint64_t v8 = *(void *)(v6 + 48);
        *(void *)(v6 + 48) = v14;
        __p[0] = v7;
        uint64_t v14 = v8;
        if (a2) {
          *a2 = v21;
        }
        uint64_t v9 = v12;
        *a3 = v6;
        a3[1] = v9;
      }
      else
      {
        *a3 = 0;
        a3[1] = 0;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1B9049A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const __CFData *_CSSymbolicatorCreateNonFaultingWithSignatureAndGroupKey<__CFData const*>(const __CFData *a1)
{
  return _CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>(a1, 0, 526146);
}

const __CFData *_CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>(const __CFData *result, int a2, int a3)
{
  if (result)
  {
    CFDataRef v5 = result;
    int v6 = CSCppDetermineSignatureType<__CFData const*>(result);
    if (v6 != 2)
    {
      if (v6 == 1) {
        _createCSSymbolicatorFromCustomSignature<__CFData const*>(v5, a2, a3);
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Unknown symbolicator signature type.", 36);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v11, &v9);
      Exception::Exception(v8, &v9);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v8);
    }
    return _createCSSymbolicatorFromFlatbufferSignature<__CFData const*>(v5);
  }
  return result;
}

void sub_1B9049BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B9049B38);
  }
  _Unwind_Resume(a1);
}

const __CFData *_CSSymbolicatorCreateSignatureElidingSomeSymbolOwnersWithPredicate<__CFData const*>(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), &v13);
  uint64_t v7 = (long long *)v13;
  uint64_t v8 = (long long *)v14;
  if (v13 != v14)
  {
    do
    {
      if (((*(uint64_t (**)(uint64_t, uint64_t, void))(a4 + 16))(a4, 3, *(void *)v7) & 1) == 0) {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((uint64_t *)&v15, v7);
      }
      ++v7;
    }
    while (v7 != v8);
  }
  uint64_t v17 = &v13;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  long long v11 = v15;
  uint64_t v12 = v16;
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  CFDataRef symbolicator_signature_with_symbol = create_symbolicator_signature_with_symbol_owners<__CFData const*>(v6, (uint64_t **)&v11, a3);
  BOOL v13 = (void **)&v11;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v13);
  BOOL v13 = (void **)&v15;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v13);
  return symbolicator_signature_with_symbol;
}

void sub_1B9049D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15)
{
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a12);
  *(void *)(v15 - 56) = &a15;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 56));
  _Unwind_Resume(a1);
}

const __CFData *_CSSymbolicatorCreateSignatureElidingSomeSymbolOwners<__CFData const*>(char a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0;
  }
  unint64_t v8 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), &v16);
  if (!CSIsNull(a4, a5))
  {
    memset(v13, 0, sizeof(v13));
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(v13, (void *)v16, *((void **)&v16 + 1), (uint64_t)(*((void *)&v16 + 1) - v16) >> 4);
    elide_some_symbol_owners(a4, a5, v13, (uint64_t *)&v14);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate((uint64_t *)&v16);
    long long v16 = v14;
    uint64_t v17 = v15;
    uint64_t v15 = 0;
    long long v14 = 0uLL;
    uint64_t v18 = (void **)&v14;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v18);
    uint64_t v18 = (void **)v13;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
  long long v11 = v16;
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  CFDataRef symbolicator_signature_with_symbol = create_symbolicator_signature_with_symbol_owners<__CFData const*>(v8, (uint64_t **)&v11, a3);
  *(void *)&long long v14 = &v11;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  *(void *)&long long v14 = &v16;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  return symbolicator_signature_with_symbol;
}

void sub_1B9049EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  *(void *)(v20 - 56) = v19;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 56));
  a15 = (void **)&a19;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

__CFData *_CSSymbolicatorCreateFlatbufferSignatureWithProcessTimerange<__CFData const*>(char a1, uint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5)
{
  uint64_t v13 = 0;
  char v14 = 0;
  long long v15 = xmmword_1B908AB50;
  uint64_t v16 = 0;
  if ((a3 & 0x10) != 0) {
    unsigned int v6 = a3 & 0xFFFFFFFB;
  }
  else {
    unsigned int v6 = a3;
  }
  int v17 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v20 = 1;
  __int16 v21 = 256;
  __p[4] = 0;
  v22[0] = 0;
  *(void *)((char *)v22 + 7) = 0;
  long long v23 = 0u;
  memset(__p, 0, 27);
  FlatbufferEncoder::encodeCSSymbolicator((uint64_t)&v13, a1, a2, v6 & 1, v6, a4, a5, &v10);
  if (v12)
  {
    CFDataRef Mutable = CFDataCreateMutable(0, 0);
    CFDataSetLength(Mutable, length);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    memcpy(MutableBytePtr, v10, length);
  }
  else
  {
    CFDataRef Mutable = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v13);
  return Mutable;
}

void sub_1B904A01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  FlatbufferEncoder::~FlatbufferEncoder((FlatbufferEncoder *)va);
  _Unwind_Resume(a1);
}

__CFData *_CSSymbolOwnerCreateFlatbufferSignature<__CFData const*>(char a1, uint64_t a2, unsigned int a3)
{
  return _CSSymbolOwnerCreateFlatbufferSignatureWithAddressSet<__CFData const*>(a1, a2, a3, 0, 0);
}

__CFData *_CSSymbolOwnerCreateFlatbufferSignatureWithAddressSet<__CFData const*>(char a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5)
{
  uint64_t v18 = 0;
  char v19 = 0;
  long long v20 = xmmword_1B908AB50;
  uint64_t v21 = 0;
  int v22 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v25 = 1;
  __int16 v26 = 256;
  __p[4] = 0;
  v27[0] = 0;
  *(void *)((char *)v27 + 7) = 0;
  long long v28 = 0u;
  memset(__p, 0, 27);
  BOOL v9 = CSIsNull(a4, a5);
  if ((a3 & 0x10) != 0) {
    unsigned int v10 = a3 & 0xFFFFFFFB;
  }
  else {
    unsigned int v10 = a3;
  }
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = a5 & 0xFFFFFFFFFFFFFFFCLL;
  }
  FlatbufferEncoder::encodeCSSymbolOwner((uint64_t)&v18, a1, a2, v10 & 1, v11, v10, &v15);
  if (v17)
  {
    CFDataRef Mutable = CFDataCreateMutable(0, 0);
    CFDataSetLength(Mutable, length);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    memcpy(MutableBytePtr, v15, length);
  }
  else
  {
    CFDataRef Mutable = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v18);
  return Mutable;
}

void sub_1B904A160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  FlatbufferEncoder::~FlatbufferEncoder((FlatbufferEncoder *)va);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__28(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZL31_addAotImageInfosToOptionalDataR37SignatureOptionalDataEncodingVersion310_CSTypeRefP8__CFDatam_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__src, unint64_t a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a6 >= 0x40) {
    size_t v10 = 64;
  }
  else {
    size_t v10 = a6;
  }
  memcpy(&v34, __src, v10);
  size_t v38 = v10;
  unint64_t v11 = *(void **)(*(void *)(a1 + 32) + 8);
  unint64_t v12 = v11[6];
  unint64_t v13 = v11[7];
  if (v12 >= v13)
  {
    uint64_t v17 = v11[5];
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v17) >> 5);
    unint64_t v19 = v18 + 1;
    if (v18 + 1 > 0x2AAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v17) >> 5);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x155555555555555) {
      unint64_t v21 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21) {
      int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>((uint64_t)(v11 + 7), v21);
    }
    else {
      int v22 = 0;
    }
    long long v23 = &v22[96 * v18];
    long long v24 = v35;
    *(_OWORD *)(v23 + 24) = v34;
    long long v25 = v36;
    *(_OWORD *)(v23 + 72) = v37;
    *(_OWORD *)(v23 + 56) = v25;
    __int16 v26 = &v22[96 * v21];
    *(void *)long long v23 = a2;
    *((void *)v23 + 1) = a3;
    *((void *)v23 + 2) = a4;
    *((void *)v23 + 11) = v38;
    *(_OWORD *)(v23 + 40) = v24;
    uint64_t v16 = v23 + 96;
    long long v28 = (char *)v11[5];
    unint64_t v27 = (char *)v11[6];
    if (v27 != v28)
    {
      do
      {
        long long v29 = *((_OWORD *)v27 - 5);
        *((_OWORD *)v23 - 6) = *((_OWORD *)v27 - 6);
        *((_OWORD *)v23 - 5) = v29;
        long long v30 = *((_OWORD *)v27 - 4);
        long long v31 = *((_OWORD *)v27 - 3);
        long long v32 = *((_OWORD *)v27 - 1);
        *((_OWORD *)v23 - 2) = *((_OWORD *)v27 - 2);
        *((_OWORD *)v23 - 1) = v32;
        *((_OWORD *)v23 - 4) = v30;
        *((_OWORD *)v23 - 3) = v31;
        v23 -= 96;
        v27 -= 96;
      }
      while (v27 != v28);
      unint64_t v27 = (char *)v11[5];
    }
    v11[5] = v23;
    void v11[6] = v16;
    void v11[7] = v26;
    if (v27) {
      operator delete(v27);
    }
  }
  else
  {
    *(void *)unint64_t v12 = a2;
    *(void *)(v12 + 8) = a3;
    *(void *)(v12 + 16) = a4;
    long long v14 = v34;
    *(_OWORD *)(v12 + 40) = v35;
    long long v15 = v37;
    *(_OWORD *)(v12 + 56) = v36;
    *(_OWORD *)(v12 + 72) = v15;
    *(void *)(v12 + 88) = v38;
    uint64_t v16 = (char *)(v12 + 96);
    *(_OWORD *)(v12 + 24) = v14;
  }
  void v11[6] = v16;
  return 1;
}

void CSCppSegmentRange::CSCppSegmentRange(CSCppSegmentRange *this, uint64_t a2, uint64_t a3, CSCppNamedRange *a4, int a5)
{
  unint64_t v8 = (CSCppNamedRange *)"SEGMENT";
  if (!a5) {
    unint64_t v8 = 0;
  }
  uint64_t v9 = 33;
  if (a5) {
    uint64_t v9 = 16;
  }
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  size_t v10 = CSCppNamedRange::unique_macho_string(a4, v8, (const char *)v9);
  unint64_t v11 = 0;
  *((void *)this + 2) = v10;
  if (a5) {
    unint64_t v11 = CSCppNamedRange::unique_macho_string(a4, 0, (const char *)0x10);
  }
  *((void *)this + 3) = v11;
}

int32x4_t *MMapArchiveEncoding::_migrate_legacy_archive(MMapArchiveEncoding *this)
{
  unsigned int v1 = *((unsigned __int16 *)this + 2);
  if (v1 <= 4) {
    return CSCppConvertLegacyPreVersion5ArchiveToModernCopy((_OWORD *)this + 1);
  }
  if (v1 == 6) {
    return (int32x4_t *)CSCppConvertLegacyPreVersion7ArchiveToModernCopy((_OWORD *)this + 1);
  }
  if (v1 == 5) {
    return (int32x4_t *)CSCppConvertLegacyPreVersion6ArchiveToModernCopy((_OWORD *)this + 1);
  }
  return 0;
}

uint64_t flatbuffers::FlatBufferBuilder::FlatBufferBuilder(uint64_t a1, flatbuffers::FlatBufferBuilder *a2)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1B908AB50;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 88) = 256;
  *(void *)(a1 + 96) = 0;
  flatbuffers::FlatBufferBuilder::Swap((flatbuffers::FlatBufferBuilder *)a1, a2);
  return a1;
}

void sub_1B904A4B8(_Unwind_Exception *a1)
{
  flatbuffers::vector_downward::~vector_downward(v1);
  _Unwind_Resume(a1);
}

uint64_t *flatbuffers::FlatBufferBuilder::Swap(flatbuffers::FlatBufferBuilder *this, flatbuffers::FlatBufferBuilder *a2)
{
  __n128 result = flatbuffers::vector_downward::swap((uint64_t *)this, (uint64_t *)a2);
  int v5 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v5;
  LOWORD(v5) = *((_WORD *)this + 38);
  *((_WORD *)this + 38) = *((_WORD *)a2 + 38);
  *((_WORD *)a2 + 38) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 78);
  *((unsigned char *)this + 78) = *((unsigned char *)a2 + 78);
  *((unsigned char *)a2 + 78) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 79);
  *((unsigned char *)this + 79) = *((unsigned char *)a2 + 79);
  *((unsigned char *)a2 + 79) = v5;
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 88);
  *((unsigned char *)this + 88) = *((unsigned char *)a2 + 88);
  *((unsigned char *)a2 + 88) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 89);
  *((unsigned char *)this + 89) = *((unsigned char *)a2 + 89);
  *((unsigned char *)a2 + 89) = v6;
  uint64_t v7 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v7;
  return result;
}

uint64_t *flatbuffers::vector_downward::swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *__n128 result = *a2;
  *a2 = v2;
  LOBYTE(v2) = *((unsigned char *)result + 8);
  *((unsigned char *)result + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v2;
  uint64_t v3 = result[2];
  result[2] = a2[2];
  a2[2] = v3;
  uint64_t v4 = result[3];
  result[3] = a2[3];
  a2[3] = v4;
  uint64_t v5 = result[4];
  result[4] = a2[4];
  a2[4] = v5;
  LODWORD(v5) = *((_DWORD *)result + 10);
  *((_DWORD *)result + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  uint64_t v6 = result[6];
  result[6] = a2[6];
  a2[6] = v6;
  uint64_t v7 = result[7];
  result[7] = a2[7];
  a2[7] = v7;
  uint64_t v8 = result[8];
  result[8] = a2[8];
  a2[8] = v8;
  return result;
}

void flatbuffers::vector_downward::~vector_downward(flatbuffers::vector_downward *this)
{
  if (*((unsigned char *)this + 8) && *(void *)this) {
    (*(void (**)(void))(**(void **)this + 8))(*(void *)this);
  }
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
}

void *flatbuffers::vector_downward::clear_buffer(void *this)
{
  unsigned int v1 = this;
  uint64_t v2 = this[6];
  if (v2)
  {
    uint64_t v3 = *this;
    if (*v1)
    {
      this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
    else
    {
      uint64_t v4 = &unk_1F12C61E8;
      this = (void *)MEMORY[0x1BA9D1CB0](v2, 0x1000C8077774924);
    }
  }
  v1[6] = 0;
  return this;
}

void flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    std::__tree<TRange<Pointer64>>::destroy(*((void *)this + 12), *(void **)(v2 + 8));
    MEMORY[0x1BA9D1CD0](v2, 0x1060C40C2B13FB5);
  }

  flatbuffers::vector_downward::~vector_downward(this);
}

void *std::vector<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>::__init_with_size[abi:ne180100]<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>*,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<CSCppDwarfAttribute>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B904A7D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>(void *__buf, size_t __nbyte, int __fd, void *a4)
{
  if (!__nbyte) {
    return 1;
  }
  size_t v6 = __nbyte;
  do
  {
    int v8 = 4;
    while (1)
    {
      ssize_t v9 = write(__fd, __buf, v6);
      if (v9 != -1) {
        break;
      }
      if (*__error() != 4 || v8-- == 0) {
        return 0;
      }
    }
    *a4 += v9;
    v6 -= v9;
  }
  while (v6);
  return 1;
}

uint64_t TMMapArchive::TEXT_text(TMMapArchive *this)
{
  return (uint64_t)this
       + 32 * *((_DWORD *)this + 2)
       + 24 * *((_DWORD *)this + 3)
       + (24 * *((_DWORD *)this + 4))
       + (unint64_t)(4 * *((_DWORD *)this + 4))
       + (36 * *((_DWORD *)this + 5))
       + (20 * *((_DWORD *)this + 6))
       + *((unsigned int *)this + 22)
       + 96;
}

void *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char const*&,void>@<X0>(void *a1@<X1>, unsigned int *a2@<X2>, void *a3@<X3>, void *a4@<X4>, unsigned int *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0xE8uLL);
  __n128 result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char const*&,std::allocator<CSCppSymbolOwner>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B904A97C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char const*&,std::allocator<CSCppSymbolOwner>,0>(void *a1, void *a2, unsigned int *a3, void *a4, void *a5, unsigned int *a6, void *a7, void *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F12C6068;
  CSCppSymbolOwner::CSCppSymbolOwner(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_1B904A9F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned long long,_CSRange>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,_CSRange>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,_CSRange>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,_CSRange>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  size_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        size_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        size_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    size_t v10 = (char *)operator new(0x38uLL);
    *((void *)v10 + 4) = *(void *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,void>@<X0>(void *a1@<X1>, unsigned int *a2@<X2>, void *a3@<X3>, void *a4@<X4>, unsigned int *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0xE8uLL);
  __n128 result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,std::allocator<CSCppSymbolOwner>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B904AB5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,std::allocator<CSCppSymbolOwner>,0>(void *a1, void *a2, unsigned int *a3, void *a4, void *a5, unsigned int *a6, void *a7, void *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F12C6068;
  CSCppSymbolOwner::CSCppSymbolOwner(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_1B904ABD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<UUID,TMMapArchive *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,TMMapArchive *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,TMMapArchive *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,TMMapArchive *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = a2[1] ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    size_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  void *i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_42:
    *unint64_t v21 = i;
    goto LABEL_43;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B904AE04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolGetInstructionData(uint64_t a1, uint64_t a2)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0;
  }
  CSSymbolGetRange(a1, a2);
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8)) + 192);

  return v3();
}

uint64_t CSSymbolGetModuleFlags(uint64_t a1, uint64_t a2)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0;
  }
  MangledName = (const char *)CSSymbolGetMangledName(a1, a2);
  if (!MangledName) {
    return 2;
  }
  if (!strncmp(MangledName, "_$sS", 4uLL)) {
    return 1;
  }
  return 2;
}

void XPCObject::XPCObject(XPCObject *this, xpc_object_t object, int a3)
{
  *(void *)this = object;
  if (object)
  {
    if (a3) {
      xpc_retain(object);
    }
  }
}

void XPCObject::XPCObject(XPCObject *this, void **a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  if (v3) {
    xpc_retain(v3);
  }
}

void *XPCObject::XPCObject(void *result, void *a2)
{
  *__n128 result = *a2;
  *a2 = 0;
  return result;
}

void XPCObject::~XPCObject(void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    xpc_release(v1);
  }
}

uint64_t XPCObject::operator*(uint64_t a1)
{
  return *(void *)a1;
}

BOOL XPCObject::operator BOOL(void *a1)
{
  return *a1 != 0;
}

uint64_t XPCObject::xpc_type(XPCObject *this)
{
  uint64_t result = *(void *)this;
  if (result) {
    JUMPOUT(0x1BA9D29B0);
  }
  return result;
}

void XPCDictionary::XPCDictionary(XPCDictionary *this)
{
  *(void *)this = xpc_dictionary_create(0, 0, 0);
}

void XPCDictionary::set_uint64(xpc_object_t *this, const char *a2, uint64_t a3)
{
}

uint64_t XPCDictionary::get_uint64(xpc_object_t *this, const char *a2)
{
  return xpc_dictionary_get_uint64(*this, a2);
}

void XPCDictionary::set_object(xpc_object_t *this, const char *a2, void *a3)
{
}

xpc_object_t XPCDictionary::get_object@<X0>(xpc_object_t *this@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  xpc_object_t result = xpc_dictionary_get_value(*this, a2);
  *a3 = result;
  if (result)
  {
    return xpc_retain(result);
  }
  return result;
}

void XPCArray::XPCArray(XPCArray *this)
{
  *(void *)this = xpc_array_create(0, 0);
}

size_t XPCArray::count(xpc_object_t *this)
{
  return xpc_array_get_count(*this);
}

void XPCArray::set_uint64(xpc_object_t *this, size_t a2, uint64_t a3)
{
}

uint64_t XPCArray::get_uint64(xpc_object_t *this, size_t a2)
{
  return xpc_array_get_uint64(*this, a2);
}

void XPCArray::set_uuid(xpc_object_t *this, size_t a2, const CFUUIDBytes *a3)
{
}

const uint8_t *XPCArray::get_uuid(xpc_object_t *this, size_t a2)
{
  return xpc_array_get_uuid(*this, a2);
}

FILE *CSFileIsCoreFile(FILE *result)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    xpc_object_t result = fopen((const char *)result, "re");
    __stream = result;
    if (result)
    {
      v8[0] = &unk_1F12C9848;
      v8[1] = &__stream;
      unint64_t v8[3] = v8;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)v8);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v8);
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      int v6 = 0;
      uint64_t v5 = 0;
      if (fread(&v3, 0x1CuLL, 1uLL, __stream) == 1)
      {
        unsigned int v1 = v3;
        int v2 = HIDWORD(v4);
        DeferredLambda::~DeferredLambda((DeferredLambda *)v9);
        if (v1 >> 1 == 2138504551) {
          return (FILE *)(v2 == 4);
        }
        else {
          return 0;
        }
      }
      else
      {
        DeferredLambda::~DeferredLambda((DeferredLambda *)v9);
        return 0;
      }
    }
  }
  return result;
}

void sub_1B904B1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL CSFileIsKnownSignature(const char *a1)
{
  unint64_t type_from_beginning_of = read_type_from_beginning_of_file<unsigned long long>(a1);
  BOOL v3 = type_from_beginning_of == 0x1FF01FF02 || HIDWORD(type_from_beginning_of) == 1112365395;
  return v2 && v3;
}

unint64_t read_type_from_beginning_of_file<unsigned long long>(const char *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1 && (__stream = fopen(a1, "re")) != 0)
  {
    v7[0] = &unk_1F12C98D8;
    v7[1] = &__stream;
    void v7[3] = v7;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v7);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v7);
    uint64_t __ptr = 0;
    size_t v1 = fread(&__ptr, 8uLL, 1uLL, __stream);
    if (v1 == 1) {
      unint64_t v2 = __ptr & 0xFFFFFFFFFFFFFF00;
    }
    else {
      unint64_t v2 = 0;
    }
    if (v1 == 1) {
      unsigned __int8 v3 = __ptr;
    }
    else {
      unsigned __int8 v3 = 0;
    }
    DeferredLambda::~DeferredLambda((DeferredLambda *)v8);
  }
  else
  {
    unint64_t v2 = 0;
    unsigned __int8 v3 = 0;
  }
  return v2 & 0xFFFFFFFFFFFFFF00 | v3;
}

void sub_1B904B34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL CSFileIsFlatbuffer(const char *a1)
{
  unint64_t v1 = read_type_from_beginning_of_file<unsigned long long>(a1) >> 32;
  return v2 && v1 == 1112365395;
}

uint64_t CSFileIsSuitableForCS(const char *a1)
{
  unint64_t type_from_beginning_of = read_type_from_beginning_of_file<unsigned long long>(a1);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = type_from_beginning_of;
  uint64_t result = 1;
  if ((int)v3 > -822415875)
  {
    if ((v3 + 17958194) < 2 || v3 == -822415874) {
      return result;
    }
    int v5 = -805638658;
  }
  else
  {
    if ((v3 + 889275714) < 2 || v3 == -1095041334) {
      return result;
    }
    int v5 = -1078264118;
  }
  if (v3 != v5)
  {
    BOOL v6 = v3 == 0xA3E686372613C21 || HIDWORD(v3) == 1112365395;
    return v3 == 0x1FF01FF02 || v6;
  }
  return result;
}

void std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F12C9848;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F12C9848;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return fclose(**(FILE ***)(a1 + 8));
}

uint64_t std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void DeferredLambda::~DeferredLambda(DeferredLambda *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);

  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](this);
}

void std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F12C98D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F12C98D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return fclose(**(FILE ***)(a1 + 8));
}

uint64_t std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

__CFString *CSRegionCopyDescriptionWithIndent(uint64_t a1, uint64_t a2, int a3)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0;
  }
  for (uint64_t i = CFStringCreateMutable(0, 0); a3; --a3)
    CFStringAppendCString(i, "\t", 0x8000100u);
  unint64_t Range = CSRegionGetRange(a1, a2);
  uint64_t v9 = v8;
  char SymbolOwner = CSRegionGetSymbolOwner(a1, a2);
  uint64_t Architecture = CSSymbolOwnerGetArchitecture(SymbolOwner, v11);
  int v13 = CSArchitectureIs64Bit(Architecture);
  uint64_t v14 = Range + v9;
  Name = CSRegionGetName(a1, a2);
  if (v13) {
    CFStringAppendFormat(i, 0, @"<CSRegion: %p> [0x%016llx -> 0x%016llx %s"), a2 & 0xFFFFFFFFFFFFFFFCLL, Range, v14, Name);
  }
  else {
    CFStringAppendFormat(i, 0, @"<CSRegion: %p> [0x%08llx -> 0x%08llx %s"), a2 & 0xFFFFFFFFFFFFFFFCLL, Range, v14, Name);
  }
  return i;
}

__CFString *CSSourceInfoCopyDescriptionWithIndent(uint64_t a1, uint64_t a2, int a3)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0;
  }
  for (uint64_t i = CFStringCreateMutable(0, 0); a3; --a3)
    CFStringAppendCString(i, "\t", 0x8000100u);
  unint64_t Range = CSSourceInfoGetRange(a1, a2);
  uint64_t v9 = v8;
  char SymbolOwner = CSSourceInfoGetSymbolOwner(a1, a2);
  uint64_t Architecture = CSSymbolOwnerGetArchitecture(SymbolOwner, v11);
  int v13 = CSArchitectureIs64Bit(Architecture);
  uint64_t v14 = Range + v9;
  Path = CSSourceInfoGetPath(a1, a2);
  uint64_t LineNumber = CSSourceInfoGetLineNumber(a1, a2);
  if (v13) {
    CFStringAppendFormat(i, 0, @"<CSSourceInfo: %p> [0x%016llx -> 0x%016llx %s:%d"), a2 & 0xFFFFFFFFFFFFFFFCLL, Range, v14, Path, LineNumber);
  }
  else {
    CFStringAppendFormat(i, 0, @"<CSSourceInfo: %p> [0x%08llx -> 0x%08llx %s:%d"), a2 & 0xFFFFFFFFFFFFFFFCLL, Range, v14, Path, LineNumber);
  }
  return i;
}

void CSCppMachTask::CSCppMachTask(CSCppMachTask *this, mach_port_name_t a2, int a3)
{
  *((unsigned char *)this + 16) = 0;
  *(void *)this = &unk_1F12C9958;
  *((void *)this + 1) = 0;
  CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTask *)((char *)this + 24), a2, a3);
  *((void *)this + 6) = 0;
  *((void *)this + 781) = 0;
  CSCppMachTask::initialize(this);
}

void sub_1B904BA5C(_Unwind_Exception *a1)
{
  std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100](v2, 0);
  CSCppMachTaskContainer::~CSCppMachTaskContainer(v1);
  _Unwind_Resume(a1);
}

size_t CSCppMachTask::initialize(CSCppMachTask *this)
{
  uint64_t v1 = MEMORY[0x1F4188790](this);
  int v3 = v2;
  uint64_t v4 = v1;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(v1 + 64) = CSTaskIs64Bit(*(_DWORD *)(v1 + 32));
  IsTranslated = (UUID *)CSTaskIsTranslated(*(_DWORD *)(v4 + 32));
  *(unsigned char *)(v4 + 16) = (_BYTE)IsTranslated;
  BOOL v6 = (UUID *)UUID::null_uuid(IsTranslated);
  *(_OWORD *)(v4 + 6232) = *(_OWORD *)v6;
  *(_OWORD *)(v4 + 6256) = *(_OWORD *)UUID::null_uuid(v6);
  *(void *)(v4 + 6248) = 0;
  *(void *)(v4 + 6272) = 0;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 56) = 0;
  if (v3) {
    operator new();
  }
  if (*(_DWORD *)(v4 + 36) == -1)
  {
    int v7 = -1;
  }
  else
  {
    CSCppMachTask::refresh_process_info((CSCppMachTask *)v4);
    int v7 = *(_DWORD *)(v4 + 36);
  }
  if (getpid() == v7)
  {
    strcpy((char *)(v4 + 65), "CoreSymbolication - creating symbolicator for current process\n");
  }
  else
  {
    getpid();
    if (sandbox_check())
    {
      strcpy((char *)(v4 + 65), "CoreSymbolication - creating symbolicator for remote process\n");
    }
    else
    {
      buffer[0] = 0;
      if (proc_name(v7, buffer, 0x400u) <= 0) {
        buffer[0] = 0;
      }
      v14[0] = 0;
      if (proc_pidpath(v7, v14, 0x400u) <= 0) {
        v14[0] = 0;
      }
      if (proc_pidinfo(v7, 3, 0, v12, 136) < 136)
      {
        snprintf((char *)(v4 + 65), 0x1800uLL, "CoreSymbolication target process: %s  pid: %d  path: %s\nCouldn't determine parent process ID\n");
      }
      else
      {
        int v8 = pid;
        v11[0] = 0;
        if (proc_name(pid, v11, 0x400u) <= 0) {
          v11[0] = 0;
        }
        v10[0] = 0;
        if (proc_pidpath(v8, v10, 0x400u) <= 0) {
          v10[0] = 0;
        }
        snprintf((char *)(v4 + 65), 0x1800uLL, "CoreSymbolication target process: %s  pid: %d  path: %s\n                  parent process: %s  pid: %d  path: %s\n", buffer);
      }
    }
  }
  size_t result = strlen((const char *)(v4 + 65));
  *(void *)(v4 + 6216) = v4 + result + 65;
  *(void *)(v4 + 6224) = 6144 - result;
  return result;
}

void sub_1B904BD1C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9D1CD0](v1, 0x1060C405A6396CALL);
  _Unwind_Resume(a1);
}

void CSCppMachTask::CSCppMachTask(CSCppMachTask *this, int a2)
{
  *((unsigned char *)this + 16) = 0;
  *(void *)this = &unk_1F12C9958;
  *((void *)this + 1) = 0;
  CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTask *)((char *)this + 24), a2);
  *((void *)this + 6) = 0;
  *((void *)this + 781) = 0;
  CSCppMachTask::initialize(this);
}

void sub_1B904BDC0(_Unwind_Exception *a1)
{
  std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100](v2, 0);
  CSCppMachTaskContainer::~CSCppMachTaskContainer(v1);
  _Unwind_Resume(a1);
}

void CSCppMachTask::CSCppMachTask(CSCppMachTask *this, mach_port_name_t a2)
{
  *((unsigned char *)this + 16) = 0;
  *(void *)this = &unk_1F12C9958;
  *((void *)this + 1) = 0;
  CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTask *)((char *)this + 24), a2);
  *((void *)this + 6) = 0;
  *((void *)this + 781) = 0;
  CSCppMachTask::initialize(this);
}

void sub_1B904BE58(_Unwind_Exception *a1)
{
  std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100](v2, 0);
  CSCppMachTaskContainer::~CSCppMachTaskContainer(v1);
  _Unwind_Resume(a1);
}

void CSCppMachTask::~CSCppMachTask(CSCppMachTask *this)
{
  *(void *)this = &unk_1F12C9958;
  if (*((void *)this + 5)) {
    _dyld_process_info_release();
  }
  std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100]((CSCppDyldLoadUnloadNotifier **)this + 6, 0);
  CSCppMachTaskContainer::~CSCppMachTaskContainer((CSCppMachTask *)((char *)this + 24));
}

{
  uint64_t vars8;

  CSCppMachTask::~CSCppMachTask(this);

  JUMPOUT(0x1BA9D1CD0);
}

void CSCppMachTask::refresh_process_info(CSCppMachTask *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _dyld_process_info_create();
  if (v2)
  {
    if (*((void *)this + 5)) {
      _dyld_process_info_release();
    }
    *((void *)this + 5) = v2;
    _dyld_process_info_get_state();
    *((void *)this + 7) = v5;
    _dyld_process_info_get_cache();
    *(_OWORD *)((char *)this + 6232) = *(_OWORD *)buf;
    *((void *)this + 781) = v9;
    if (MEMORY[0x1E4F144D8])
    {
      _dyld_process_info_get_aot_cache();
      *((_OWORD *)this + 391) = v6;
      *((void *)this + 784) = v7;
    }
  }
  else if (!*((void *)this + 7) {
         && !*((void *)this + 5)
  }
         && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v4 = *((_DWORD *)this + 8);
    int v3 = *((_DWORD *)this + 9);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v3;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v4;
    _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Unable to create process info for pid %d, task %d. Is dyld loaded for this binary yet?\n", buf, 0xEu);
  }
}

BOOL CSCppMachTask::is_alive(CSCppMachTask *this)
{
  return CSCppMachTaskContainer::is_alive((CSCppMachTask *)((char *)this + 24));
}

uint64_t CSCppMachTask::uses_development_dsc(CSCppMachTask *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  CSCppTaskMemory::CSCppTaskMemory((CSCppTaskMemory *)v8, (CSCppMachTask *)((char *)this + 24), 0);
  if (*((unsigned char *)this + 64))
  {
    if (!v2) {
      goto LABEL_19;
    }
    if (_dyld_process_info_get_platform() != 10)
    {
      _dyld_process_info_get_cache();
      uint64_t v9 = v8;
      int v3 = (CSCppDyldSharedCache *)TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::dyld_shared_cache_at(&v9, v10);
      uint64_t v2 = (uint64_t)v3;
      if (!v3) {
        goto LABEL_19;
      }
      uint64_t v4 = *((void *)v3 + 13);
      if (v4 != 2) {
        goto LABEL_15;
      }
      if (CSCppDyldSharedCache::is_universal_cache(v3))
      {
LABEL_7:
        BOOL v5 = *(_DWORD *)(v2 + 456) == 0;
        goto LABEL_16;
      }
      goto LABEL_14;
    }
LABEL_10:
    uint64_t v2 = 0;
    goto LABEL_19;
  }
  if (!v2) {
    goto LABEL_19;
  }
  if (_dyld_process_info_get_platform() == 10) {
    goto LABEL_10;
  }
  _dyld_process_info_get_cache();
  uint64_t v9 = v8;
  long long v6 = (CSCppDyldSharedCache *)TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::dyld_shared_cache_at(&v9, v10);
  uint64_t v2 = (uint64_t)v6;
  if (!v6) {
    goto LABEL_19;
  }
  uint64_t v4 = *((void *)v6 + 13);
  if (v4 != 2) {
    goto LABEL_15;
  }
  if (CSCppDyldSharedCache::is_universal_cache(v6)) {
    goto LABEL_7;
  }
LABEL_14:
  uint64_t v4 = *(void *)(v2 + 104);
LABEL_15:
  BOOL v5 = v4 == 0;
LABEL_16:
  uint64_t v2 = v5;
LABEL_19:
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v8);
  return v2;
}

void sub_1B904C278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void CSCppMachTask::begin_notifications(CSCppMachTask *this, CSCppSymbolicator *a2)
{
  int v3 = (CSCppDyldLoadUnloadNotifier *)*((void *)this + 6);
  if (v3) {
    CSCppDyldLoadUnloadNotifier::begin_processing(v3, a2, *((void *)this + 7));
  }
}

CSCppDyldLoadUnloadNotifier *CSCppMachTask::subscribe_to_task_main_notification(CSCppMachTask *this)
{
  size_t result = (CSCppDyldLoadUnloadNotifier *)*((void *)this + 6);
  if (result) {
    return (CSCppDyldLoadUnloadNotifier *)CSCppDyldLoadUnloadNotifier::subscribe_to_task_main_notification(result);
  }
  return result;
}

CSCppDyldLoadUnloadNotifier *CSCppMachTask::end_notifications(CSCppDyldLoadUnloadNotifier **this)
{
  return std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100](this + 6, 0);
}

CSCppDyldLoadUnloadNotifier *std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100](CSCppDyldLoadUnloadNotifier **a1, CSCppDyldLoadUnloadNotifier *a2)
{
  size_t result = *a1;
  *a1 = a2;
  if (result)
  {
    CSCppDyldLoadUnloadNotifier::~CSCppDyldLoadUnloadNotifier(result);
    JUMPOUT(0x1BA9D1CD0);
  }
  return result;
}

void CSCppMachTask::symbol_owners(CSCppMachTask *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  long long v6 = (std::__shared_weak_count *)operator new(0x30uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12C9AC8;
  v6[1].__shared_owners_ = 0;
  v6[1].__shared_weak_owners_ = 0;
  *a3 = v6 + 1;
  a3[1] = v6;
  if (*((unsigned char *)this + 64))
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v7 = &unk_1F12C9A08;
    uint64_t v11 = &unk_1F12C9A08;
    unint64_t v12 = v6 + 1;
    int v13 = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::TMachOHeaderIterator((uint64_t)v8, (CSCppMachTask *)((char *)this + 24), *((void *)this + 5), (uint64_t)this + 65, *((void *)this + 777), *((void *)this + 778), a2, (uint64_t)&v11);
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v7 = &unk_1F12C9A68;
    uint64_t v11 = &unk_1F12C9A68;
    unint64_t v12 = v6 + 1;
    int v13 = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::TMachOHeaderIterator((uint64_t)v8, (CSCppMachTask *)((char *)this + 24), *((void *)this + 5), (uint64_t)this + 65, *((void *)this + 777), *((void *)this + 778), a2, (uint64_t)&v11);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v8);
  uint64_t v11 = v7;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1B904C4A0(_Unwind_Exception *a1)
{
  *(void *)(v3 - 88) = v2;
  BOOL v5 = *(std::__shared_weak_count **)(v3 - 72);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::~SymbolOwnerIterator(void *a1)
{
  *a1 = &unk_1F12C9A08;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::~SymbolOwnerIterator(void *a1)
{
  *a1 = &unk_1F12C9A68;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t CSCppMachTask::mach_task_container(CSCppMachTask *this)
{
  return (uint64_t)this + 24;
}

uint64_t CSCppMachTask::is_kernel_task(CSCppMachTask *this)
{
  return 0;
}

uint64_t CSCppMachTask::is_mach_task(CSCppMachTask *this)
{
  return 1;
}

uint64_t CSCppMachTask::dsc_uuid(CSCppMachTask *this)
{
  return (uint64_t)this + 6232;
}

uint64_t CSCppMachTask::aot_cache_uuid(CSCppMachTask *this)
{
  return (uint64_t)this + 6256;
}

uint64_t CSCppMachTask::dsc_base_address(CSCppMachTask *this)
{
  return *((void *)this + 781);
}

uint64_t CSCppMachTask::aot_cache_base_address(CSCppMachTask *this)
{
  return *((void *)this + 784);
}

__n128 CSCppMachTask::set_dsc_uuid(CSCppMachTask *this, __n128 *a2)
{
  if (a2)
  {
    __n128 result = *a2;
    *(__n128 *)((char *)this + 6232) = *a2;
  }
  return result;
}

uint64_t CSCppMachTask::set_dsc_base_address(uint64_t this, uint64_t a2)
{
  *(void *)(this + 6248) = a2;
  return this;
}

__n128 CSCppMachTask::set_aot_cache_uuid(__n128 *this, __n128 *a2)
{
  if (a2)
  {
    __n128 result = *a2;
    this[391] = *a2;
  }
  return result;
}

uint64_t CSCppMachTask::set_aot_cache_base_address(uint64_t this, uint64_t a2)
{
  *(void *)(this + 6272) = a2;
  return this;
}

void **SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::presize(uint64_t a1, uint64_t a2)
{
  return std::vector<std::shared_ptr<CSCppSymbolOwner>>::reserve(*(uint64_t **)(a1 + 8), a2 + ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 4));
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::process_header(uint64_t a1, uint64_t a2)
{
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner(a2, &v3);
  if ((void)v3) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](*(uint64_t **)(a1 + 8), &v3);
  }
  if (*((void *)&v3 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_1B904C63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::process_failed_header(uint64_t a1, unsigned char *a2)
{
  char v10 = a2;
  if (a2 && *a2)
  {
    uint64_t v7 = 0;
    int v8 = UUID::null_uuid((UUID *)a1);
    std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,void>(&v8, (unsigned int *)&v7 + 1, &kCSBeginningOfTime, &kCSEndOfTime, (unsigned int *)&v7, &kCSArchitectureUnknown, &v10, &v9);
    uint64_t v3 = v9;
    uint64_t v4 = (void **)(v9 + 32);
    HIDWORD(v7) = 0;
    LODWORD(v8) = 0;
    unint64_t v5 = *(void *)(v9 + 40);
    if (v5 >= *(void *)(v9 + 48))
    {
      long long v6 = std::vector<CSCppSegmentRange>::__emplace_back_slow_path<int,int,char const(&)[9]>(v4, (int *)&v8, (int *)&v7 + 1, (CSCppNamedRange *)"__FAILED");
    }
    else
    {
      std::vector<CSCppSegmentRange>::__construct_one_at_end[abi:ne180100]<int,int,char const(&)[9]>((uint64_t)v4, (int *)&v8, (int *)&v7 + 1, (CSCppNamedRange *)"__FAILED");
      long long v6 = (void *)(v5 + 32);
    }
    *(void *)(v3 + 40) = v6;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](*(uint64_t **)(a1 + 8), &v9);
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void sub_1B904C734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::~SymbolOwnerIterator(void *a1)
{
  *a1 = &unk_1F12C9A08;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1BA9D1CD0);
}

void *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,void>@<X0>(void *a1@<X1>, unsigned int *a2@<X2>, void *a3@<X3>, void *a4@<X4>, unsigned int *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0xE8uLL);
  __n128 result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,std::allocator<CSCppSymbolOwner>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B904C84C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,std::allocator<CSCppSymbolOwner>,0>(void *a1, void *a2, unsigned int *a3, void *a4, void *a5, unsigned int *a6, void *a7, void *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F12C6068;
  CSCppSymbolOwner::CSCppSymbolOwner(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_1B904C8C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

const char *std::vector<CSCppSegmentRange>::__construct_one_at_end[abi:ne180100]<int,int,char const(&)[9]>(uint64_t a1, int *a2, int *a3, CSCppNamedRange *this)
{
  long long v6 = *(void **)(a1 + 8);
  uint64_t v7 = *a3;
  *long long v6 = *a2;
  v6[1] = v7;
  v6[2] = CSCppNamedRange::unique_macho_string(this, (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
  __n128 result = CSCppNamedRange::unique_macho_string(this, 0, (const char *)0x10);
  void v6[3] = result;
  *(void *)(a1 + 8) = v6 + 4;
  return result;
}

void sub_1B904C948(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::vector<CSCppSegmentRange>::__emplace_back_slow_path<int,int,char const(&)[9]>(void **a1, int *a2, int *a3, CSCppNamedRange *a4)
{
  unint64_t v5 = (char *)*a1;
  uint64_t v6 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  uint64_t v12 = (unsigned char *)a1[2] - v5;
  if (v12 >> 4 > v7) {
    unint64_t v7 = v12 >> 4;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v7;
  }
  if (v13)
  {
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v11, v13);
    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v17 = *a3;
  unint64_t v18 = &v14[32 * v6];
  *(void *)unint64_t v18 = *a2;
  *((void *)v18 + 1) = v17;
  *((void *)v18 + 2) = CSCppNamedRange::unique_macho_string(a4, (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
  *((void *)v18 + 3) = CSCppNamedRange::unique_macho_string(a4, 0, (const char *)0x10);
  size_t v19 = v18 + 32;
  unint64_t v21 = (char *)*a1;
  uint64_t v20 = (char *)a1[1];
  if (v20 != *a1)
  {
    do
    {
      long long v22 = *((_OWORD *)v20 - 1);
      *((_OWORD *)v18 - 2) = *((_OWORD *)v20 - 2);
      *((_OWORD *)v18 - 1) = v22;
      v18 -= 32;
      v20 -= 32;
    }
    while (v20 != v21);
    uint64_t v20 = (char *)*a1;
  }
  *a1 = v18;
  a1[1] = v19;
  a1[2] = &v14[32 * v16];
  if (v20) {
    operator delete(v20);
  }
  return v19;
}

void sub_1B904CA7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void **SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::presize(uint64_t a1, uint64_t a2)
{
  return std::vector<std::shared_ptr<CSCppSymbolOwner>>::reserve(*(uint64_t **)(a1 + 8), a2 + ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 4));
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::process_header(uint64_t a1, uint64_t a2)
{
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner(a2, &v3);
  if ((void)v3) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](*(uint64_t **)(a1 + 8), &v3);
  }
  if (*((void *)&v3 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_1B904CAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::process_failed_header(uint64_t a1, unsigned char *a2)
{
  char v10 = a2;
  if (a2 && *a2)
  {
    uint64_t v7 = 0;
    int v8 = UUID::null_uuid((UUID *)a1);
    std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,void>(&v8, (unsigned int *)&v7 + 1, &kCSBeginningOfTime, &kCSEndOfTime, (unsigned int *)&v7, &kCSArchitectureUnknown, &v10, &v9);
    uint64_t v3 = v9;
    uint64_t v4 = (void **)(v9 + 32);
    HIDWORD(v7) = 0;
    LODWORD(v8) = 0;
    unint64_t v5 = *(void *)(v9 + 40);
    if (v5 >= *(void *)(v9 + 48))
    {
      uint64_t v6 = std::vector<CSCppSegmentRange>::__emplace_back_slow_path<int,int,char const(&)[9]>(v4, (int *)&v8, (int *)&v7 + 1, (CSCppNamedRange *)"__FAILED");
    }
    else
    {
      std::vector<CSCppSegmentRange>::__construct_one_at_end[abi:ne180100]<int,int,char const(&)[9]>((uint64_t)v4, (int *)&v8, (int *)&v7 + 1, (CSCppNamedRange *)"__FAILED");
      uint64_t v6 = (void *)(v5 + 32);
    }
    *(void *)(v3 + 40) = v6;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](*(uint64_t **)(a1 + 8), &v9);
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void sub_1B904CBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::~SymbolOwnerIterator(void *a1)
{
  *a1 = &unk_1F12C9A68;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1BA9D1CD0);
}

uint64_t TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::dyld_shared_cache_at(void *a1, unsigned int a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = (const char *)(*(uint64_t (**)(void, void, uint64_t))(*(void *)*a1 + 32))(*a1, a2, 32);
  uint64_t v6 = (unsigned int *)v4;
  if (v4)
  {
    unint64_t v7 = v5;
    if (!strncmp(v4, "dyld_v", 6uLL))
    {
      uint64_t v8 = v6[4];
      uint64_t v9 = v6[5];
      uint64_t v10 = v6[98];
      BOOL v11 = CSCppDyldSharedCache::uses_universal_cache_struct_layout((CSCppDyldSharedCache *)v6);
      unsigned int v12 = 24;
      if (v11) {
        unsigned int v12 = 56;
      }
      if (v8 + 32 * v9 + v10 + v12 * (unint64_t)v6[99] > v7) {
        return (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, v3);
      }
    }
    else
    {
      return 0;
    }
  }
  return (uint64_t)v6;
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<CSCppSymbolOwner>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12C9AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<CSCppSymbolOwner>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12C9AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1BA9D1CD0);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<CSCppSymbolOwner>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::TMachOHeaderIterator(uint64_t a1, TMachOHeaderIterator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  is_self_tasunint64_t k = CSCppMachTaskContainer::is_self_task(this);
  CSCppTaskMemory::CSCppTaskMemory((CSCppTaskMemory *)a1, this, !is_self_task);
  *(void *)(a1 + 120) = a1;
  *(void *)(a1 + 128) = a3;
  *(void *)(a1 + 136) = 0;
  uint64_t v17 = (uint64_t *)(a1 + 136);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = a4;
  *(void *)(a1 + 168) = a5;
  *(void *)(a1 + 176) = a6;
  *(_DWORD *)(a1 + 184) = a7;
  *(void *)(a1 + 192) = a8;
  if (a3)
  {
    int v18 = CSGetForceSafeMachVMReads() ^ 1;
    if ((a7 & 0x1000) != 0) {
      LOBYTE(v18) = 0;
    }
    if (v18)
    {
      TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::iterate();
    }
    else
    {
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 0x40000000;
      v23[2] = ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEEC2ERK22CSCppMachTaskContainerPK22dyld_process_info_basePcSB_mjR26TMachOHeaderIteratorHelperIS3_E_block_invoke;
      v23[3] = &__block_descriptor_tmp_56_0;
      void v23[4] = a1;
      int v19 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)v23);
      if (v19 != 4096)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          int v20 = *((_DWORD *)this + 3);
          uint64_t v21 = a1 + 136;
          if (*(char *)(a1 + 159) < 0) {
            uint64_t v21 = *v17;
          }
          *(_DWORD *)long long buf = 67109634;
          int v25 = v20;
          __int16 v26 = 2080;
          uint64_t v27 = v21;
          __int16 v28 = 1024;
          int v29 = v19;
          _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Missing page in pid %d, read of header data for [%s] failed, err code %#x\n", buf, 0x18u);
        }
        uint64_t v22 = a1 + 136;
        if (*(char *)(a1 + 159) < 0) {
          uint64_t v22 = *v17;
        }
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), v22);
      }
    }
  }
}

void sub_1B904D01C(_Unwind_Exception *a1)
{
  if (v1[159] < 0) {
    operator delete(*v2);
  }
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEEC2ERK22CSCppMachTaskContainerPK22dyld_process_info_basePcSB_mjR26TMachOHeaderIteratorHelperIS3_E_block_invoke()
{
  return TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::iterate();
}

uint64_t TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::iterate()
{
  v1[0] = 0;
  v1[1] = v1;
  v1[2] = 0x5002000000;
  v1[3] = __Block_byref_object_copy__12;
  v1[4] = __Block_byref_object_dispose__12;
  memset(v2, 0, sizeof(v2));
  int v3 = 1065353216;
  _dyld_process_info_for_each_image();
  _Block_object_dispose(v1, 8);
  return std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v2);
}

void sub_1B904D130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(v7);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__12(uint64_t a1)
{
  return std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a1 + 40);
}

void ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke(uint64_t a1, uint64_t a2, unsigned __int8 *a3, const char *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a2;
  uint64_t v7 = *(void *)(a1 + 40);
  if (!std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), (unint64_t *)&v17))
  {
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long &>(*(void *)(*(void *)(a1 + 32) + 8) + 40, (unint64_t *)&v17, &v17);
    CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4, 0x8000100u);
    if (!v8)
    {
      ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke_cold_2(&v18, a4);
      snprintf(*(char **)(v7 + 168), *(void *)(v7 + 176), "_dyld_process_info_for_each_image provided CoreSymbolication with invalid UTF-8 in path: %s, macho header address: %#llx, uuid: %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\n", (const char *)&v18, v17, *a3, a3[1], a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], a3[11], a3[12],
        a3[13],
        a3[14],
        a3[15]);
      CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v16, *(const char **)(v7 + 160));
      _os_assert_log();
      uint64_t v13 = _os_crash();
      ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke_cold_1(v13);
    }
    CFRelease(v8);
    if (a4) {
      uint64_t v9 = (char *)a4;
    }
    else {
      uint64_t v9 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v18, v9);
    uint64_t v10 = (void **)(v7 + 136);
    if (*(char *)(v7 + 159) < 0) {
      operator delete(*v10);
    }
    *(_OWORD *)uint64_t v10 = v18;
    *(void *)(v7 + 152) = v19;
    snprintf(*(char **)(v7 + 168), *(void *)(v7 + 176), "Processing header for %s\n", a4);
    CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v16, *(const char **)(v7 + 160));
    uint64_t v11 = v17;
    unsigned int v12 = TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::macho_header_at((void *)(v7 + 120), v17, 1);
    if (v12)
    {
      LOBYTE(v14) = 0;
      char v15 = 0;
      TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader((uint64_t)&v18, v7, v11, (uint64_t)v12, (uint64_t)a4, 0, 0, &v14);
      (*(void (**)(void, long long *))(**(void **)(v7 + 192) + 8))(*(void *)(v7 + 192), &v18);
    }
    CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v16);
  }
}

void sub_1B904D3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long &>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B904D5D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::TMachOHeaderIterator(uint64_t a1, TMachOHeaderIterator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  is_self_tasunint64_t k = CSCppMachTaskContainer::is_self_task(this);
  CSCppTaskMemory::CSCppTaskMemory((CSCppTaskMemory *)a1, this, !is_self_task);
  *(void *)(a1 + 120) = a1;
  *(void *)(a1 + 128) = a3;
  *(void *)(a1 + 136) = 0;
  size_t v17 = (uint64_t *)(a1 + 136);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = a4;
  *(void *)(a1 + 168) = a5;
  *(void *)(a1 + 176) = a6;
  *(_DWORD *)(a1 + 184) = a7;
  *(void *)(a1 + 192) = a8;
  if (a3)
  {
    int v18 = CSGetForceSafeMachVMReads() ^ 1;
    if ((a7 & 0x1000) != 0) {
      LOBYTE(v18) = 0;
    }
    if (v18)
    {
      TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::iterate();
    }
    else
    {
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 0x40000000;
      v23[2] = ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer3212LittleEndianEEC2ERK22CSCppMachTaskContainerPK22dyld_process_info_basePcSB_mjR26TMachOHeaderIteratorHelperIS3_E_block_invoke;
      v23[3] = &__block_descriptor_tmp_64_0;
      void v23[4] = a1;
      int v19 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)v23);
      if (v19 != 4096)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          int v20 = *((_DWORD *)this + 3);
          uint64_t v21 = a1 + 136;
          if (*(char *)(a1 + 159) < 0) {
            uint64_t v21 = *v17;
          }
          *(_DWORD *)long long buf = 67109634;
          int v25 = v20;
          __int16 v26 = 2080;
          uint64_t v27 = v21;
          __int16 v28 = 1024;
          int v29 = v19;
          _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Missing page in pid %d, read of header data for [%s] failed, err code %#x\n", buf, 0x18u);
        }
        uint64_t v22 = a1 + 136;
        if (*(char *)(a1 + 159) < 0) {
          uint64_t v22 = *v17;
        }
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), v22);
      }
    }
  }
}

void sub_1B904D7E4(_Unwind_Exception *a1)
{
  if (v1[159] < 0) {
    operator delete(*v2);
  }
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer3212LittleEndianEEC2ERK22CSCppMachTaskContainerPK22dyld_process_info_basePcSB_mjR26TMachOHeaderIteratorHelperIS3_E_block_invoke()
{
  return TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::iterate();
}

uint64_t TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::iterate()
{
  v1[0] = 0;
  v1[1] = v1;
  v1[2] = 0x5002000000;
  v1[3] = __Block_byref_object_copy__12;
  v1[4] = __Block_byref_object_dispose__12;
  memset(v2, 0, sizeof(v2));
  int v3 = 1065353216;
  _dyld_process_info_for_each_image();
  _Block_object_dispose(v1, 8);
  return std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v2);
}

void sub_1B904D8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(v7);
  _Unwind_Resume(a1);
}

void ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer3212LittleEndianEE7iterateEv_block_invoke(uint64_t a1, unint64_t a2, unsigned __int8 *a3, const char *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v16 = a2;
  uint64_t v7 = *(void *)(a1 + 40);
  if (!std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), &v16))
  {
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long &>(*(void *)(*(void *)(a1 + 32) + 8) + 40, &v16, &v16);
    CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4, 0x8000100u);
    if (!v8)
    {
      ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke_cold_2(&v17, a4);
      snprintf(*(char **)(v7 + 168), *(void *)(v7 + 176), "_dyld_process_info_for_each_image provided CoreSymbolication with invalid UTF-8 in path: %s, macho header address: %#llx, uuid: %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\n", (const char *)&v17, v16, *a3, a3[1], a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], a3[11], a3[12],
        a3[13],
        a3[14],
        a3[15]);
      CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v15, *(const char **)(v7 + 160));
      _os_assert_log();
      uint64_t v14 = _os_crash();
      ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke_cold_1(v14);
    }
    CFRelease(v8);
    if (a4) {
      uint64_t v9 = (char *)a4;
    }
    else {
      uint64_t v9 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v17, v9);
    uint64_t v10 = (void **)(v7 + 136);
    if (*(char *)(v7 + 159) < 0) {
      operator delete(*v10);
    }
    *(_OWORD *)uint64_t v10 = v17;
    *(void *)(v7 + 152) = v18;
    snprintf(*(char **)(v7 + 168), *(void *)(v7 + 176), "Processing header for %s\n", a4);
    CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v15, *(const char **)(v7 + 160));
    int v11 = v16;
    float v12 = TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::macho_header_at((void *)(v7 + 120), v16, 1);
    if (v12)
    {
      TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader((uint64_t)&v17, v7, v11, (uint64_t)v12, (uint64_t)a4, 0, 0, v13, 0, 0);
      (*(void (**)(void, long long *))(**(void **)(v7 + 192) + 8))(*(void *)(v7 + 192), &v17);
    }
    CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v15);
  }
}

void sub_1B904DB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t OUTLINED_FUNCTION_0_2(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  return snprintf(v9, v10, v11);
}

void CSCppDyldLoadUnloadNotifier::CSCppDyldLoadUnloadNotifier(CSCppDyldLoadUnloadNotifier *this, const CSCppMachTaskContainer *a2, char a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  unint64_t v6 = dispatch_queue_create("CoreSymbolication dyld load/unload notifier queue", 0);
  *((void *)this + 7) = v6;
  *((unsigned char *)this + 64) = 0;
  *((unsigned char *)this + 65) = a3;
  handler[5] = MEMORY[0x1E4F143A8];
  handler[6] = 0x40000000;
  handler[7] = ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke;
  handler[8] = &__block_descriptor_tmp_4_2;
  handler[9] = this;
  handler[10] = a2;
  uint64_t v7 = dispatch_source_create(MEMORY[0x1E4F14460], *((unsigned int *)a2 + 2), 1uLL, v6);
  *((void *)this + 6) = v7;
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 0x40000000;
  handler[2] = ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_2;
  handler[3] = &__block_descriptor_tmp_6_3;
  handler[4] = this;
  dispatch_source_set_event_handler(v7, handler);
  dispatch_activate(*((dispatch_object_t *)this + 6));
  uint64_t v8 = _dyld_process_info_notify();
  *((void *)this + 1) = v8;
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = *((_DWORD *)a2 + 3);
      *(_DWORD *)long long buf = 67109376;
      int v12 = v9;
      __int16 v13 = 1024;
      int v14 = 0;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to start process notifications for pid %d (%d)\n", buf, 0xEu);
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Failed to start process notifications for pid %d (%d)\n", *((_DWORD *)a2 + 3), 0);
  }
}

void sub_1B904DDAC(_Unwind_Exception *a1)
{
  *(void *)(v2 - 80) = v1;
  std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 80));
  _Unwind_Resume(a1);
}

void ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v8 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v8 + 64) || *(void *)(v8 + 40) < a3)
  {
    uint64_t v18 = 0;
    uint64_t v19 = &v18;
    uint64_t v20 = 0x3802000000;
    uint64_t v21 = __Block_byref_object_copy__13;
    uint64_t v22 = __Block_byref_object_dispose__13;
    int v9 = *(CSCppMachTaskContainer **)(a1 + 40);
    if (*(unsigned char *)(v8 + 65)) {
      new_loaded_owner_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(v9, a4, a6, &v23);
    }
    else {
      new_loaded_owner_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(v9, a4, a6, &v23);
    }
    if (v19[5])
    {
      if (*(unsigned char *)(v8 + 64))
      {
        size_t v10 = *(void **)v8;
        if (*(void *)v8)
        {
          v12[0] = MEMORY[0x1E4F143A8];
          v12[1] = 0x40000000;
          v12[2] = ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_1;
          v12[3] = &unk_1E61D0700;
          void v12[4] = &v18;
          void v12[5] = v8;
          v12[6] = a3;
          char v13 = a2;
          _thread_local_invoke_notifier(v10, (uint64_t)v12);
        }
      }
      else
      {
        int v11 = (std::__shared_weak_count *)v19[6];
        uint64_t v14 = v19[5];
        uint64_t v15 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v16 = a3;
        char v17 = a2 ^ 1;
        std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::push_back[abi:ne180100]((uint64_t *)(v8 + 16), (uint64_t)&v14);
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
      }
    }
    _Block_object_dispose(&v18, 8);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
  }
}

void sub_1B904DF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Block_object_dispose((const void *)(v19 - 88), 8);
  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 40);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void **std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    v15[4] = result;
    if (v12) {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)result, v12);
    }
    else {
      char v13 = 0;
    }
    uint64_t v14 = &v13[32 * v9];
    v15[0] = v13;
    v15[1] = v14;
    v15[3] = &v13[32 * v12];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    v14[24] = *(unsigned char *)(a2 + 24);
    v15[2] = v14 + 32;
    std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__swap_out_circular_buffer(a1, v15);
    uint64_t v8 = a1[1];
    __n128 result = std::__split_buffer<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::~__split_buffer(v15);
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(v7 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(v7 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v8 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_1B904E0A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _thread_local_invoke_notifier(void *a1, uint64_t a2)
{
  if (_notifier_in_progress_key(void)::onceToken != -1) {
    dispatch_once(&_notifier_in_progress_key(void)::onceToken, &__block_literal_global_47);
  }
  pthread_setspecific(_notifier_in_progress_key(void)::notifier_key, a1);
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  if (_notifier_in_progress_key(void)::onceToken != -1) {
    dispatch_once(&_notifier_in_progress_key(void)::onceToken, &__block_literal_global_47);
  }
  pthread_key_t v4 = _notifier_in_progress_key(void)::notifier_key;

  return pthread_setspecific(v4, 0);
}

void ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_1(uint64_t a1)
{
  CSCppSymbolicator::dyld_activity(**(void **)(a1 + 40), (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56) == 0);
}

void *___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 32);
  __n128 result = *v1;
  if (*v1)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    v3[2] = ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_3;
    v3[3] = &__block_descriptor_tmp_5_3;
    void v3[4] = v1;
    return (void *)_thread_local_invoke_notifier(result, (uint64_t)v3);
  }
  return result;
}

uint64_t ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_3(uint64_t a1)
{
  return CSCppSymbolicator::send_notification(**(void **)(a1 + 32), 4096, 0, 0);
}

void CSCppDyldLoadUnloadNotifier::~CSCppDyldLoadUnloadNotifier(CSCppDyldLoadUnloadNotifier *this)
{
  if (*((void *)this + 1))
  {
    MEMORY[0x1BA9D1E90]();
    *((void *)this + 1) = 0;
  }
  dispatch_source_cancel(*((dispatch_source_t *)this + 6));
  if (!*((unsigned char *)this + 64)) {
    dispatch_activate(*((dispatch_object_t *)this + 7));
  }
  if (_notifier_in_progress_key(void)::onceToken != -1) {
    dispatch_once(&_notifier_in_progress_key(void)::onceToken, &__block_literal_global_47);
  }
  if (!pthread_getspecific(_notifier_in_progress_key(void)::notifier_key)) {
    dispatch_sync(*((dispatch_queue_t *)this + 7), &__block_literal_global_2);
  }
  dispatch_release(*((dispatch_object_t *)this + 6));
  dispatch_release(*((dispatch_object_t *)this + 7));
  std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__clear[abi:ne180100]((uint64_t *)this + 2);
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t CSCppDyldLoadUnloadNotifier::subscribe_to_task_main_notification(CSCppDyldLoadUnloadNotifier *this)
{
  uint64_t result = *((void *)this + 1);
  if (result)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    v3[2] = ___ZN27CSCppDyldLoadUnloadNotifier35subscribe_to_task_main_notificationEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_10_3;
    void v3[4] = this;
    return MEMORY[0x1BA9D1E80](result, v3);
  }
  return result;
}

void *___ZN27CSCppDyldLoadUnloadNotifier35subscribe_to_task_main_notificationEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 32);
  uint64_t result = *v1;
  if (*v1)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    v3[2] = ___ZN27CSCppDyldLoadUnloadNotifier35subscribe_to_task_main_notificationEv_block_invoke_2;
    v3[3] = &__block_descriptor_tmp_9_2;
    void v3[4] = v1;
    return (void *)_thread_local_invoke_notifier(result, (uint64_t)v3);
  }
  return result;
}

uint64_t ___ZN27CSCppDyldLoadUnloadNotifier35subscribe_to_task_main_notificationEv_block_invoke_2(uint64_t a1)
{
  return CSCppSymbolicator::send_notification(**(void **)(a1 + 32), 4098, 0, 0);
}

void CSCppDyldLoadUnloadNotifier::begin_processing(CSCppDyldLoadUnloadNotifier *this, CSCppSymbolicator *a2, uint64_t a3)
{
  int v3 = *((void *)this + 7);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN27CSCppDyldLoadUnloadNotifier16begin_processingER17CSCppSymbolicatory_block_invoke;
  block[3] = &__block_descriptor_tmp_11_4;
  block[4] = this;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v3, block);
}

void ___ZN27CSCppDyldLoadUnloadNotifier16begin_processingER17CSCppSymbolicatory_block_invoke(void *a1)
{
  uint64_t v1 = a1[4];
  if (!*(unsigned char *)(v1 + 64))
  {
    *(void *)uint64_t v1 = a1[5];
    *(void *)(v1 + 40) = a1[6];
    *(unsigned char *)(v1 + 64) = 1;
    int v3 = *(uint64_t **)(v1 + 16);
    for (uint64_t i = *(uint64_t **)(v1 + 24); v3 != i; v3 += 4)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      unint64_t v7 = 0;
      unsigned __int8 v6 = 0;
      v5[0] = &v8;
      v5[1] = &v7;
      v5[2] = &v6;
      std::__memberwise_copy_assign[abi:ne180100]<std::tuple<std::shared_ptr<CSCppSymbolOwner> &,unsigned long long &,BOOL &>,std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>,0ul,1ul,2ul>((uint64_t)v5, v3);
      if (v7 > *(void *)(v1 + 40)) {
        CSCppSymbolicator::dyld_activity(a1[5], &v8, v7, v6);
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__clear[abi:ne180100]((uint64_t *)(v1 + 16));
  }
}

void sub_1B904E55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void new_loaded_owner_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(CSCppMachTaskContainer *a1@<X0>, unsigned int a2@<W1>, const char *a3@<X2>, void *a4@<X8>)
{
  CSCppTaskMemory::CSCppTaskMemory((CSCppTaskMemory *)v15, a1, 0);
  uint64_t v14 = v15;
  uint64_t v8 = TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::macho_header_at(&v14, a2, 1);
  if (a3 && (uint64_t v9 = (uint64_t)v8) != 0)
  {
    if (stat(a3, &v13)) {
      int tv_sec = 0;
    }
    else {
      int tv_sec = v13.st_mtimespec.tv_sec;
    }
    TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader((uint64_t)v12, (uint64_t)v15, a2, v9, (uint64_t)a3, tv_sec, 0, v10, 0, 0);
    TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner((uint64_t)v12, a4);
  }
  else
  {
    CSCppMachTaskContainer::is_alive(a1);
    *a4 = 0;
    a4[1] = 0;
  }
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v15);
}

void sub_1B904E648(_Unwind_Exception *a1)
{
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)(v1 - 168));
  _Unwind_Resume(a1);
}

void new_loaded_owner_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(CSCppMachTaskContainer *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, void *a4@<X8>)
{
  CSCppTaskMemory::CSCppTaskMemory((CSCppTaskMemory *)v16, a1, 0);
  uint64_t v15 = v16;
  uint64_t v8 = TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::macho_header_at(&v15, a2, 1);
  if (a3 && (uint64_t v9 = (uint64_t)v8) != 0)
  {
    if (stat(a3, &v14)) {
      int tv_sec = 0;
    }
    else {
      int tv_sec = v14.st_mtimespec.tv_sec;
    }
    LOBYTE(v11) = 0;
    char v12 = 0;
    TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader((uint64_t)v13, (uint64_t)v16, a2, v9, (uint64_t)a3, tv_sec, 0, &v11);
    TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner((uint64_t)v13, a4);
  }
  else
  {
    CSCppMachTaskContainer::is_alive(a1);
    *a4 = 0;
    a4[1] = 0;
  }
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v16);
}

void sub_1B904E744(_Unwind_Exception *a1)
{
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)(v1 - 168));
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>,std::reverse_iterator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>*>,std::reverse_iterator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>*>,std::reverse_iterator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>,std::reverse_iterator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>*>,std::reverse_iterator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>*>,std::reverse_iterator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      *(_OWORD *)(a7 + v7 - 32) = *(_OWORD *)(a3 + v7 - 32);
      uint64_t v9 = a7 + v7 - 32;
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v9 + 16) = *(void *)(a3 + v7 - 16);
      *(unsigned char *)(v9 + 24) = *(unsigned char *)(a3 + v7 - 8);
      *((void *)&v15 + 1) = v9;
      v7 -= 32;
    }
    while (a3 + v7 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>,std::reverse_iterator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>,std::reverse_iterator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>,std::reverse_iterator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>,std::reverse_iterator<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 32;
  }
}

void **std::__split_buffer<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 32;
    pthread_key_t v4 = *(std::__shared_weak_count **)(v1 - 24);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 32;
    }
  }
}

void std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__clear[abi:ne180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    pthread_key_t v4 = *(std::__shared_weak_count **)(i - 24);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t ___ZL25_notifier_in_progress_keyv_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&_notifier_in_progress_key(void)::notifier_key, 0);
}

void std::__memberwise_copy_assign[abi:ne180100]<std::tuple<std::shared_ptr<CSCppSymbolOwner> &,unsigned long long &,BOOL &>,std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>,0ul,1ul,2ul>(uint64_t a1, uint64_t *a2)
{
  pthread_key_t v4 = *(void **)a1;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  void *v4 = v6;
  v4[1] = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = *(unsigned char **)(a1 + 16);
  **(void **)(a1 + 8) = a2[2];
  *uint64_t v8 = *((unsigned char *)a2 + 24);
}

void CSBinaryDataRef::CSBinaryDataRef(CSBinaryDataRef *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_WORD *)this + 8) = 0;
}

void CSBinaryDataRef::CSBinaryDataRef(CSBinaryDataRef *this, const unsigned __int8 *a2, uint64_t a3, char a4)
{
  *(void *)this = a2;
  *((void *)this + 1) = &a2[a3];
  *((unsigned char *)this + 16) = a4;
  *((unsigned char *)this + 17) = 0;
}

const unsigned __int8 **CSBinaryDataRef::SetData(const unsigned __int8 **this, const unsigned __int8 *a2, uint64_t a3)
{
  int v3 = &a2[a3];
  if (a3) {
    pthread_key_t v4 = a2;
  }
  else {
    pthread_key_t v4 = 0;
  }
  if (!a3) {
    int v3 = 0;
  }
  *this = v4;
  this[1] = v3;
  return this;
}

uint64_t CSBinaryDataRef::Get8(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *((void *)this + 1);
  if (*(void *)this >= v3) {
    return 0;
  }
  unint64_t v4 = *a2;
  if ((v3 - v2) <= v4) {
    return 0;
  }
  uint64_t result = *(unsigned __int8 *)(v2 + v4);
  *a2 = v4 + 1;
  return result;
}

uint64_t CSBinaryDataRef::Get16(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *((void *)this + 1);
  if (*(void *)this >= v3 || (uint64_t v4 = *a2, (v3 - v2) <= (unint64_t)(v4 + 1)))
  {
    LOWORD(v5) = 0;
  }
  else
  {
    unsigned int v5 = *(unsigned __int16 *)(v2 + v4);
    unsigned int v6 = bswap32(v5) >> 16;
    if (*((unsigned char *)this + 16)) {
      LOWORD(v5) = v6;
    }
    *a2 = v4 + 2;
  }
  return (unsigned __int16)v5;
}

uint64_t CSBinaryDataRef::Get32(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *((void *)this + 1);
  if (*(void *)this >= v3) {
    return 0;
  }
  uint64_t v4 = *a2;
  if ((v3 - v2) <= (unint64_t)(v4 + 3)) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 + v4);
  unsigned int v6 = bswap32(v5);
  if (*((unsigned char *)this + 16)) {
    uint64_t result = v6;
  }
  else {
    uint64_t result = v5;
  }
  *a2 = v4 + 4;
  return result;
}

unint64_t CSBinaryDataRef::Get64(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *((void *)this + 1);
  if (*(void *)this >= v3) {
    return 0;
  }
  uint64_t v4 = *a2;
  if ((v3 - v2) <= (unint64_t)(v4 + 7)) {
    return 0;
  }
  unint64_t v5 = *(void *)(v2 + v4);
  unint64_t v6 = bswap64(v5);
  if (*((unsigned char *)this + 16)) {
    unint64_t result = v6;
  }
  else {
    unint64_t result = v5;
  }
  *a2 = v4 + 8;
  return result;
}

unint64_t CSBinaryDataRef::GetMax64(CSBinaryDataRef *this, unsigned int *a2, int a3)
{
  unint64_t v3 = 0;
  switch(a3)
  {
    case 1:
      uint64_t v4 = *(void *)this;
      unint64_t v5 = *((void *)this + 1);
      if (*(void *)this >= v5) {
        return 0;
      }
      unint64_t v6 = *a2;
      if ((v5 - v4) <= v6) {
        return 0;
      }
      unint64_t v3 = *(unsigned __int8 *)(v4 + v6);
      unsigned int v7 = v6 + 1;
      goto LABEL_21;
    case 2:
      uint64_t v8 = *(void *)this;
      unint64_t v9 = *((void *)this + 1);
      if (*(void *)this >= v9) {
        return 0;
      }
      uint64_t v10 = *a2;
      if ((v9 - v8) <= (unint64_t)(v10 + 1)) {
        return 0;
      }
      unsigned int v11 = *(unsigned __int16 *)(v8 + v10);
      unsigned int v12 = bswap32(v11) >> 16;
      if (*((unsigned char *)this + 16)) {
        LOWORD(v11) = v12;
      }
      *a2 = v10 + 2;
      return (unsigned __int16)v11;
    case 4:
      unint64_t v3 = *(void *)this;
      unint64_t v13 = *((void *)this + 1);
      if (*(void *)this >= v13) {
        return 0;
      }
      uint64_t v14 = *a2;
      if ((v13 - v3) <= (unint64_t)(v14 + 3)) {
        return 0;
      }
      LODWORD(v3) = *(_DWORD *)(v3 + v14);
      unsigned int v15 = bswap32(v3);
      if (*((unsigned char *)this + 16)) {
        unint64_t v3 = v15;
      }
      else {
        unint64_t v3 = v3;
      }
      unsigned int v7 = v14 + 4;
      goto LABEL_21;
    case 8:
      uint64_t v16 = *(void *)this;
      unint64_t v17 = *((void *)this + 1);
      if (*(void *)this >= v17) {
        return 0;
      }
      uint64_t v18 = *a2;
      if ((v17 - v16) <= (unint64_t)(v18 + 7)) {
        return 0;
      }
      unint64_t v3 = *(void *)(v16 + v18);
      unint64_t v19 = bswap64(v3);
      if (*((unsigned char *)this + 16)) {
        unint64_t v3 = v19;
      }
      unsigned int v7 = v18 + 8;
LABEL_21:
      *a2 = v7;
      return v3;
    default:
      return v3;
  }
}

unint64_t CSBinaryDataRef::GetPointer(CSBinaryDataRef *this, unsigned int *a2)
{
  return CSBinaryDataRef::GetMax64(this, a2, *((unsigned __int8 *)this + 17));
}

uint64_t CSBinaryDataRef::GetDwarfEHPtr(CSBinaryDataRef *this, unsigned int *a2, int a3, void *a4)
{
  if (a3 == 255) {
    return -1;
  }
  switch(((a3 & 0x70u) - 16) >> 4)
  {
    case 0u:
      uint64_t v6 = *a4 + *a2;
      goto LABEL_8;
    case 1u:
      int v7 = 0;
      uint64_t v6 = a4[1];
      break;
    case 2u:
      uint64_t v6 = a4[2];
      goto LABEL_8;
    case 3u:
      uint64_t v6 = 0;
LABEL_8:
      int v7 = 1;
      break;
    case 4u:
      unsigned int v8 = *((unsigned __int8 *)this + 17);
      if (!*((unsigned char *)this + 17)) {
        goto LABEL_13;
      }
      uint64_t v6 = 0;
      int v7 = 0;
      int v9 = *a2 % v8;
      unsigned int v10 = v8 - v9;
      if (!v9) {
        unsigned int v10 = 0;
      }
      a2 += v10;
      break;
    default:
LABEL_13:
      uint64_t v6 = 0;
      int v7 = 0;
      break;
  }
  unint64_t Max64 = 0;
  switch(a3 & 0xF)
  {
    case 0:
      unint64_t Max64 = CSBinaryDataRef::GetMax64(this, a2, *((unsigned __int8 *)this + 17));
      break;
    case 1:
      unint64_t Max64 = CSBinaryDataRef::Get_ULEB128(this, a2);
      break;
    case 2:
      uint64_t v18 = *(void *)this;
      unint64_t v19 = *((void *)this + 1);
      if (*(void *)this >= v19) {
        goto LABEL_46;
      }
      uint64_t v20 = *a2;
      if ((v19 - v18) <= (unint64_t)(v20 + 1)) {
        goto LABEL_46;
      }
      unsigned int v21 = *(unsigned __int16 *)(v18 + v20);
      unsigned int v22 = bswap32(v21) >> 16;
      if (*((unsigned char *)this + 16)) {
        LOWORD(v21) = v22;
      }
      *a2 = v20 + 2;
      unint64_t Max64 = (unsigned __int16)v21;
      break;
    case 3:
      uint64_t v23 = *(void *)this;
      unint64_t v24 = *((void *)this + 1);
      if (*(void *)this >= v24) {
        goto LABEL_46;
      }
      uint64_t v25 = *a2;
      if ((v24 - v23) <= (unint64_t)(v25 + 3)) {
        goto LABEL_46;
      }
      unsigned int v26 = *(_DWORD *)(v23 + v25);
      unsigned int v27 = bswap32(v26);
      if (*((unsigned char *)this + 16)) {
        unint64_t Max64 = v27;
      }
      else {
        unint64_t Max64 = v26;
      }
      unsigned int v17 = v25 + 4;
      goto LABEL_34;
    case 4:
    case 0xC:
      uint64_t v12 = *(void *)this;
      unint64_t v13 = *((void *)this + 1);
      if (*(void *)this >= v13) {
        goto LABEL_46;
      }
      uint64_t v14 = *a2;
      if ((v13 - v12) <= (unint64_t)(v14 + 7)) {
        goto LABEL_46;
      }
      unint64_t v15 = *(void *)(v12 + v14);
      unint64_t v16 = bswap64(v15);
      if (*((unsigned char *)this + 16)) {
        unint64_t Max64 = v16;
      }
      else {
        unint64_t Max64 = v15;
      }
      unsigned int v17 = v14 + 8;
LABEL_34:
      *a2 = v17;
      break;
    case 9:
      unint64_t Max64 = CSBinaryDataRef::Get_SLEB128(this, a2);
      break;
    case 0xA:
      uint64_t v28 = *(void *)this;
      unint64_t v29 = *((void *)this + 1);
      if (*(void *)this >= v29) {
        goto LABEL_46;
      }
      uint64_t v30 = *a2;
      if ((v29 - v28) <= (unint64_t)(v30 + 1)) {
        goto LABEL_46;
      }
      unsigned int v31 = *(unsigned __int16 *)(v28 + v30);
      unsigned int v32 = bswap32(v31) >> 16;
      if (*((unsigned char *)this + 16)) {
        LOWORD(v31) = v32;
      }
      *a2 = v30 + 2;
      unint64_t Max64 = (__int16)v31;
      break;
    case 0xB:
      uint64_t v33 = *(void *)this;
      unint64_t v34 = *((void *)this + 1);
      if (*(void *)this >= v34 || (uint64_t v35 = *a2, (v34 - v33) <= (unint64_t)(v35 + 3)))
      {
LABEL_46:
        unint64_t Max64 = 0;
      }
      else
      {
        signed int v36 = *(_DWORD *)(v33 + v35);
        unsigned int v37 = bswap32(v36);
        if (*((unsigned char *)this + 16)) {
          signed int v36 = v37;
        }
        *a2 = v35 + 4;
        unint64_t Max64 = v36;
      }
      break;
    default:
      break;
  }
  if (v7)
  {
    unint64_t v38 = *((unsigned __int8 *)this + 17);
    if (v38 <= 7)
    {
      uint64_t v39 = 1 << (8 * v38 - 1);
      if ((v39 & Max64) != 0) {
        uint64_t v40 = -v39;
      }
      else {
        uint64_t v40 = 0;
      }
      Max64 |= v40;
    }
  }
  return Max64 + v6;
}

uint64_t CSBinaryDataRef::Get_ULEB128(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v3 = *(void *)this;
  unint64_t v2 = *((void *)this + 1);
  if (*(void *)this >= v2) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t result = 0;
  int v6 = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = v3 + v7;
  do
  {
    if (v8 + v4 >= v2) {
      break;
    }
    char v9 = *(unsigned char *)(v8 + v4);
    result |= (v9 & 0x7F) << v6;
    v6 += 7;
    ++v4;
  }
  while (v9 < 0);
  *a2 = v4 + v7;
  return result;
}

uint64_t CSBinaryDataRef::Get_SLEB128(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *((void *)this + 1);
  if (*(void *)this >= v3) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = v2 + v4;
  if (v2 + v4 >= v3)
  {
    uint64_t v8 = 0;
    int v11 = 0;
    int v10 = 0;
    BOOL v14 = 1;
  }
  else
  {
    uint64_t v6 = 0;
    int v7 = 0;
    uint64_t v8 = 0;
    int v9 = v4 + v2;
    int v10 = v3 - (v4 + v2);
    int v11 = -7 * v9 - v3 + 8 * v3;
    while (1)
    {
      int v12 = *(char *)(v5 + v6);
      v8 |= (v12 & 0x7F) << v7;
      if ((v12 & 0x80000000) == 0) {
        break;
      }
      ++v6;
      v7 += 7;
      if (v5 + v6 >= v3) {
        goto LABEL_10;
      }
    }
    int v10 = v6 + 1;
    int v11 = v7 + 7;
LABEL_10:
    BOOL v14 = (v12 & 0x40) == 0;
  }
  if (v11 > 31) {
    BOOL v14 = 1;
  }
  uint64_t v15 = -1 << v11;
  if (v14) {
    uint64_t v15 = 0;
  }
  uint64_t result = v15 | v8;
  *a2 = v10 + v4;
  return result;
}

uint64_t CSBinaryDataRef::GetData(CSBinaryDataRef *this, unsigned int *a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v3 = *(void *)this;
  unint64_t v4 = *((void *)this + 1);
  if (*(void *)this >= v4) {
    return 0;
  }
  uint64_t v5 = *a2;
  if ((v4 - v3) <= v5 + (unint64_t)a3 - 1) {
    return 0;
  }
  uint64_t result = v3 + v5;
  *a2 = v5 + a3;
  return result;
}

void CSThreadArm::CSThreadArm(CSThreadArm *this)
{
  *((_WORD *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F12C9B58;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 37) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
}

void CSThreadArm::~CSThreadArm(CSThreadArm *this)
{
}

uint64_t CSThreadArm::GetRARegNum(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9)) {
    return 30;
  }
  else {
    return 14;
  }
}

uint64_t CSThreadArm::ConvertRegisterNumberToRegisterIndex(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 9))
  {
    if (a2 < 0x11) {
      return a2;
    }
    return 0xFFFFFFFFLL;
  }
  if (a2 >= 0x22) {
    return 0xFFFFFFFFLL;
  }
  return a2;
}

uint64_t CSThreadArm::RegisterNameToRegisterIndex(CSThreadArm *this, const char *a2, int a3)
{
  if (!a2 || !*a2) {
    return 0xFFFFFFFFLL;
  }
  char v4 = a3;
  uint64_t v5 = 0;
  if (a3) {
    uint64_t v6 = g64BitRegNames_arm;
  }
  else {
    uint64_t v6 = g32BitRegNames_arm;
  }
  if (a3) {
    uint64_t v7 = 34;
  }
  else {
    uint64_t v7 = 17;
  }
  while (1)
  {
    uint64_t v8 = v6[v5];
    if (v8)
    {
      if (!strcasecmp(a2, v8)) {
        break;
      }
    }
    if (v7 == ++v5)
    {
      if (v4) {
        return 0xFFFFFFFFLL;
      }
      if (!strcasecmp(a2, "fp")) {
        return 7;
      }
      if (!strcasecmp(a2, "r13")) {
        return 13;
      }
      if (!strcasecmp(a2, "r14")) {
        return 14;
      }
      if (!strcasecmp(a2, "r15")) {
        return 15;
      }
      if (!strcasecmp(a2, "ip")) {
        return 12;
      }
      if (strcasecmp(a2, "psr")) {
        return 0xFFFFFFFFLL;
      }
      return 16;
    }
  }
  return v5;
}

uint64_t CSThreadArm::NumRegisters(CSThreadArm *this)
{
  if (*((unsigned char *)this + 9)) {
    return 34;
  }
  else {
    return 17;
  }
}

uint64_t CSThreadArm::GetFPRegNum(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9)) {
    return 29;
  }
  else {
    return 11;
  }
}

uint64_t CSThreadArm::GetPCRegNum(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9)) {
    return 32;
  }
  else {
    return 15;
  }
}

uint64_t CSThreadArm::ThreadGetState(int8x8_t *this, thread_read_t a2, int a3)
{
  (*(void (**)(int8x8_t *))(*(void *)this + 88))(this);
  this[1].i8[1] = a3;
  if (a3)
  {
    mach_msg_type_number_t old_stateCnt = 68;
    uint64_t state = thread_get_state(a2, 6, (thread_state_t)&old_state, &old_stateCnt);
    if (!state)
    {
      __uint64_t pc = old_state.__pc;
      if ((old_state.__pad & 1) == 0) {
        __uint64_t pc = old_state.__pc;
      }
      old_state.____uint64_t pc = pc;
      __uint64_t lr = old_state.__lr;
      if ((old_state.__pad & 3) == 0) {
        __uint64_t lr = old_state.__lr;
      }
      old_state.____uint64_t lr = lr;
      old_state.__pad = old_state.__pad & 0xFFFFFFF2 | 1;
      CSThreadArm::SetState(this, &old_state);
    }
  }
  else
  {
    mach_msg_type_number_t old_stateCnt = 17;
    uint64_t state = thread_get_state(a2, 1, (thread_state_t)&old_state, &old_stateCnt);
    if (!state) {
      CSThreadArm::SetState((CSThreadArm *)this, (const __darwin_arm_thread_state *)&old_state);
    }
  }
  return state;
}

int8x8_t CSThreadArm::SetState(int8x8_t *this, const __darwin_arm_thread_state64 *a2)
{
  this[1].i8[1] = 1;
  memcpy(&this[3], a2, 0x110uLL);
  int v9 = this + 37;
  int v10 = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v9, 0x22uLL);
  int64x2_t v3 = (int64x2_t)xmmword_1B908AF20;
  *(int8x8_t *)v4.i8 = this[37];
  uint64_t v5 = 34;
  uint64x2_t v6 = (uint64x2_t)vdupq_n_s64(1uLL);
  int64x2_t v7 = vdupq_n_s64(2uLL);
  do
  {
    int8x16_t v4 = vorrq_s8(v4, (int8x16_t)vshlq_u64(v6, (uint64x2_t)v3));
    int64x2_t v3 = vaddq_s64(v3, v7);
    v5 -= 2;
  }
  while (v5);
  int8x8_t result = vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
  this[37] = result;
  this[2] = (int8x8_t)8;
  return result;
}

int8x8_t CSThreadArm::SetState(CSThreadArm *this, const __darwin_arm_thread_state *a2)
{
  *((unsigned char *)this + 9) = 0;
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)a2->__r;
  long long v3 = *(_OWORD *)&a2->__r[4];
  long long v4 = *(_OWORD *)&a2->__r[8];
  long long v5 = *(_OWORD *)&a2->__r[12];
  *((_DWORD *)this + 22) = a2->__cpsr;
  *(_OWORD *)((char *)this + 72) = v5;
  *(_OWORD *)((char *)this + 56) = v4;
  *(_OWORD *)((char *)this + 40) = v3;
  uint64x2_t v6 = (uint64_t *)((char *)this + 296);
  unint64_t v16 = (char *)this + 296;
  int v17 = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v16, 0x22uLL);
  int64x2_t v7 = (int64x2_t)xmmword_1B908AF20;
  v8.i64[0] = *v6;
  uint64_t v9 = 18;
  uint64x2_t v10 = (uint64x2_t)vdupq_n_s64(1uLL);
  int64x2_t v11 = vdupq_n_s64(2uLL);
  do
  {
    int8x16_t v12 = v8;
    uint64x2_t v13 = (uint64x2_t)v7;
    int8x16_t v8 = vorrq_s8(v8, (int8x16_t)vshlq_u64(v10, (uint64x2_t)v7));
    int64x2_t v7 = vaddq_s64(v7, v11);
    v9 -= 2;
  }
  while (v9);
  int8x16_t v14 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x11uLL), v13), v8, v12);
  int8x8_t result = vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  *((int8x8_t *)this + 37) = result;
  *((void *)this + 2) = 4;
  return result;
}

uint64_t CSThreadArm::GetSPRegNum(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9)) {
    return 31;
  }
  else {
    return 13;
  }
}

unint64_t CSThreadArm::FPAppearsValidForFPBackchain(CSThreadArm *this, char a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThreadArm *))(*(void *)this + 120))(this);
  unint64_t result = (*(uint64_t (**)(CSThreadArm *, uint64_t, void, void))(*(void *)this + 160))(this, v4, 0, 0);
  if (result)
  {
    unint64_t v6 = result;
    uint64_t v7 = (*(uint64_t (**)(CSThreadArm *))(*(void *)this + 128))(this);
    unint64_t v8 = (*(uint64_t (**)(CSThreadArm *, uint64_t, void, void))(*(void *)this + 160))(this, v7, 0, 0);
    if ((a2 & 1) == 0 && v6 < v8) {
      return 0;
    }
    if (*((unsigned char *)this + 9))
    {
      if ((v6 & 7) != 0) {
        return 0;
      }
    }
    else if ((v6 & 3) != 0)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t CSThread::GetFP(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 120))(this);
  long long v5 = *(uint64_t (**)(CSThread *, uint64_t, uint64_t, void))(*(void *)this + 160);

  return v5(this, v4, a2, 0);
}

uint64_t CSThread::GetSP(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 128))(this);
  long long v5 = *(uint64_t (**)(CSThread *, uint64_t, uint64_t, void))(*(void *)this + 160);

  return v5(this, v4, a2, 0);
}

uint64_t CSThreadArm::GetPCRegIndex(CSThreadArm *this)
{
  if (*((unsigned char *)this + 9)) {
    return 32;
  }
  else {
    return 15;
  }
}

uint64_t CSThreadArm::GetFPRegIndex(CSThreadArm *this)
{
  if (*((unsigned char *)this + 8)) {
    return 5;
  }
  if (*((unsigned char *)this + 9)) {
    return 29;
  }
  return 7;
}

uint64_t CSThreadArm::GetSPRegIndex(CSThreadArm *this)
{
  if (*((unsigned char *)this + 8)) {
    return 4;
  }
  if (*((unsigned char *)this + 9)) {
    return 31;
  }
  return 13;
}

uint64_t CSThreadArm::GetLRRegIndex(CSThreadArm *this)
{
  if (*((unsigned char *)this + 9)) {
    return 30;
  }
  else {
    return 14;
  }
}

char *CSThreadArm::GetRegisterNameByIndex(CSThreadArm *this, unsigned int a2)
{
  if (*((unsigned char *)this + 9))
  {
    if (a2 <= 0x21)
    {
      uint64_t v2 = g64BitRegNames_arm;
      return v2[a2];
    }
  }
  else if (a2 <= 0x10)
  {
    uint64_t v2 = g32BitRegNames_arm;
    return v2[a2];
  }
  return 0;
}

uint64_t CSThreadArm::GetRegisterValueByIndex(CSThreadArm *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  unsigned int v6 = a2;
  if (!*((unsigned char *)this + 9))
  {
    if (a2 <= 0x10
      && (*(unsigned int (**)(CSThreadArm *, uint64_t))(*(void *)this + 176))(this, a2))
    {
      a3 = *((unsigned int *)this + v6 + 6);
LABEL_25:
      BOOL v9 = 1;
      goto LABEL_26;
    }
LABEL_11:
    BOOL v9 = 0;
    goto LABEL_26;
  }
  if (a2 > 0x21
    || !(*(unsigned int (**)(CSThreadArm *, uint64_t))(*(void *)this + 176))(this, a2))
  {
    goto LABEL_11;
  }
  switch(v6)
  {
    case 0x1Du:
      a3 = *((void *)this + 32);
      if (!a3 || (*((unsigned char *)this + 292) & 1) != 0) {
        goto LABEL_25;
      }
      uint64_t v8 = *((void *)this + 32);
      BOOL v9 = 1;
      goto LABEL_23;
    case 0x1Eu:
      a3 = *((void *)this + 33);
      if (!a3 || (*((_DWORD *)this + 73) & 3) != 0) {
        goto LABEL_25;
      }
      uint64_t v8 = *((void *)this + 33);
      goto LABEL_22;
    case 0x1Fu:
      a3 = *((void *)this + 34);
      if (!a3 || (*((unsigned char *)this + 292) & 1) != 0) {
        goto LABEL_25;
      }
      uint64_t v8 = *((void *)this + 34);
      BOOL v9 = 1;
      goto LABEL_23;
    case 0x20u:
      a3 = *((void *)this + 35);
      if (!a3 || (*((_DWORD *)this + 73) & 1) != 0) {
        goto LABEL_25;
      }
      uint64_t v8 = *((void *)this + 35);
LABEL_22:
      BOOL v9 = 1;
LABEL_23:
      a3 = v8;
      break;
    case 0x21u:
      a3 = *((unsigned int *)this + 72);
      goto LABEL_25;
    default:
      a3 = *((void *)this + v6 + 3);
      goto LABEL_25;
  }
LABEL_26:
  if (a4) {
    *a4 = v9;
  }
  return a3;
}

uint64_t CSThreadArm::SetRegisterValueByIndex(CSThreadArm *this, unsigned int a2, uint64_t a3)
{
  if (*((unsigned char *)this + 9))
  {
    if (a2 <= 0x21)
    {
      switch(a2)
      {
        case 0x1Du:
          *((void *)this + 32) = a3;
          break;
        case 0x1Eu:
          int v4 = *((_DWORD *)this + 73);
          if (a3)
          {
            if ((v4 & 1) == 0) {
              v4 &= ~2u;
            }
            uint64_t v5 = a3;
          }
          else
          {
            uint64_t v5 = 0;
          }
          *((void *)this + 33) = v5;
          unsigned int v8 = v4 & 0xFFFFFFF7;
          goto LABEL_22;
        case 0x1Fu:
          *((void *)this + 34) = a3;
          break;
        case 0x20u:
          int v6 = *((_DWORD *)this + 73);
          if (a3) {
            uint64_t v7 = a3;
          }
          else {
            uint64_t v7 = 0;
          }
          *((void *)this + 35) = v7;
          unsigned int v8 = v6 & 0xFFFFFFFB;
LABEL_22:
          *((_DWORD *)this + 73) = v8;
          break;
        case 0x21u:
          *((_DWORD *)this + 72) = a3;
          break;
        default:
          *((void *)this + a2 + 3) = a3;
          break;
      }
      goto LABEL_23;
    }
  }
  else if (a2 <= 0x10)
  {
    *((_DWORD *)this + a2 + 6) = a3;
LABEL_23:
    uint64_t v3 = 1;
    goto LABEL_24;
  }
  uint64_t v3 = 0;
LABEL_24:
  (*(void (**)(CSThreadArm *))(*(void *)this + 184))(this);
  return v3;
}

uint64_t CSThreadArm::RegisterIsPreservedByABI(unsigned char *a1)
{
  if (a1[9]) {
    return 0;
  }
  unsigned int v1 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 96))(a1);
  if (v1 > 0xC) {
    return 0;
  }
  else {
    return (0x1DF0u >> v1) & 1;
  }
}

void CSThreadArm::InvalidateAllRegisters(CSThreadArm *this)
{
  unsigned int v1 = (char *)this + 296;
  int v2 = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v1, 0x22uLL);
}

uint64_t CSThreadArm::GetRegisterIsValidByIndex(CSThreadArm *this, unsigned int a2)
{
  if (a2 > 0x21) {
    return 0;
  }
  else {
    return (*((void *)this + 37) >> a2) & 1;
  }
}

uint64_t CSThreadArm::SetRegisterIsValidByIndex(uint64_t this, unsigned int a2, int a3)
{
  if (a3)
  {
    if (a2 >= 0x22) {
      std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
    }
    uint64_t v3 = *(void *)(this + 296) | (1 << a2);
  }
  else
  {
    if (a2 >= 0x22) {
      std::__throw_out_of_range[abi:ne180100]("bitset reset argument out of range");
    }
    uint64_t v3 = *(void *)(this + 296) & ~(1 << a2);
  }
  *(void *)(this + 296) = v3;
  return this;
}

uint64_t CSThread::GetRegisterValue(CSThread *this, const char *a2, uint64_t a3, BOOL *a4)
{
  uint64_t v7 = (*(uint64_t (**)(CSThread *, const char *, void))(*(void *)this + 144))(this, a2, *((unsigned __int8 *)this + 9));
  unsigned int v8 = *(uint64_t (**)(CSThread *, uint64_t, uint64_t, BOOL *))(*(void *)this + 160);

  return v8(this, v7, a3, a4);
}

uint64_t CSThread::GetRegisterValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  BOOL v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 160);

  return v9(a1, v8, a4, a5);
}

uint64_t CSThread::SetRegisterValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168);

  return v7(a1, v6, a4);
}

uint64_t CSThread::SetRegisterIsValid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 184);

  return v7(a1, v6, a4);
}

uint64_t CSThread::GetPC(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 112))(this);
  uint64_t v5 = *(uint64_t (**)(CSThread *, uint64_t, uint64_t, void))(*(void *)this + 160);

  return v5(this, v4, a2, 0);
}

uint64_t CSThread::GetLR(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 136))(this);
  uint64_t v5 = *(uint64_t (**)(CSThread *, uint64_t, uint64_t, void))(*(void *)this + 160);

  return v5(this, v4, a2, 0);
}

uint64_t CSThread::SetPC(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 112))(this);
  uint64_t v5 = *(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)this + 168);

  return v5(this, v4, a2);
}

uint64_t CSThread::SetFP(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 120))(this);
  uint64_t v5 = *(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)this + 168);

  return v5(this, v4, a2);
}

uint64_t CSThread::SetSP(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 128))(this);
  uint64_t v5 = *(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)this + 168);

  return v5(this, v4, a2);
}

uint64_t CSThread::SetLR(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 136))(this);
  uint64_t v5 = *(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)this + 168);

  return v5(this, v4, a2);
}

void *CSThreadArm::assign(CSThreadArm *this, const CSThread *a2)
{
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  *((void *)this + 2) = *((void *)a2 + 2);
  unint64_t result = memcpy((char *)this + 24, (char *)a2 + 24, 0x110uLL);
  *((void *)this + 37) = *((void *)a2 + 37);
  return result;
}

uint64_t CSThreadArm::UnwindThroughSigtramp()
{
  return 0;
}

char **CSCallFrameInfo::FindCallFrameInfoForBinary@<X0>(char **this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *this;
  uint64_t v4 = this[1];
  if (*this == v4) {
    goto LABEL_11;
  }
  unint64_t v5 = (v4 - v3) >> 4;
  do
  {
    unint64_t v6 = v5 >> 1;
    uint64_t v7 = &v3[16 * (v5 >> 1)];
    uint64_t v9 = *(void *)v7;
    uint64_t v8 = v7 + 16;
    v5 += ~(v5 >> 1);
    if (*(void *)(v9 + 32) + *(void *)(v9 + 24) <= a2) {
      uint64_t v3 = v8;
    }
    else {
      unint64_t v5 = v6;
    }
  }
  while (v5);
  if (v3 == v4 || (uint64_t v10 = *(void *)v3, a2 - *(void *)(*(void *)v3 + 24) >= *(void *)(*(void *)v3 + 32)))
  {
LABEL_11:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v11 = *((void *)v3 + 1);
    *a3 = v10;
    a3[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return this;
}

uint64_t CSCallFrameInfo::GuessIsFOmitFramePointerCFI(CSCallFrameInfo *this, const CSThread *a2)
{
  return 0;
}

uint64_t CSCallFrameInfo::UnwindThreadState(char **a1, CSThread *a2, uint64_t a3, int a4, CSThread *a5)
{
  uint64_t v5 = 0;
  if (a2 && a5)
  {
    (*(void (**)(CSThread *))(*(void *)a5 + 16))(a5);
    uint64_t PC = CSThread::GetPC(a2, -1);
    if (PC == -1)
    {
      return 0;
    }
    else
    {
      if (PC) {
        int8x16_t v12 = (void *)(PC - (a4 ^ 1u));
      }
      else {
        int8x16_t v12 = 0;
      }
      CSCallFrameInfo::FindCallFrameInfoForBinary(a1, (unint64_t)v12, v14);
      if (*(void *)v14) {
        uint64_t v5 = CSCallFrameInfoForBinary::UnwindThreadState(*(CSCallFrameInfoForBinary **)v14, a2, a3, a5, v12);
      }
      else {
        uint64_t v5 = 0;
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
  }
  return v5;
}

void sub_1B90505E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void CSCallFrameInfo::ParseCFIForTask(CSCallFrameInfo *this)
{
  uint64_t v1 = MEMORY[0x1F4188790](this);
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CSCppMachTask::CSCppMachTask((CSCppMachTask *)v12, v2, 0);
  if (v16)
  {
    uint64_t v9 = &unk_1F12C9C50;
    uint64_t v10 = v1;
    int v11 = v14;
    TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::TMachOHeaderIterator((uint64_t)v6, (TMachOHeaderIterator *)v13, v15, (uint64_t)v17, v18, v19, 0, (uint64_t)&v9);
  }
  else
  {
    uint64_t v9 = &unk_1F12C9CF0;
    uint64_t v10 = v1;
    int v11 = v14;
    TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::TMachOHeaderIterator((uint64_t)v6, (TMachOHeaderIterator *)v13, v15, (uint64_t)v17, v18, v19, 0, (uint64_t)&v9);
  }
  if (v8 < 0) {
    operator delete(__p);
  }
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v6);
  uint64_t v3 = *(char **)(v1 + 8);
  unint64_t v4 = 126 - 2 * __clz((uint64_t)&v3[-*(void *)v1] >> 4);
  if (v3 == *(char **)v1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *,false>(*(void **)v1, v3, v5, 1);
  CSCppMachTask::~CSCppMachTask((CSCppMachTask *)v12);
}

void sub_1B9050760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void std::__introsort<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask(unsigned int)::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *,false>(void *a1, char *a2, uint64_t a3, char a4)
{
void *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask(unsigned int)::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(void *result, void *a2, void *a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *(void *)(*a2 + 24);
  uint64_t v5 = *result;
  uint64_t v6 = *a3;
  unint64_t v7 = *(void *)(*a3 + 24);
  if (v4 < *(void *)(*result + 24))
  {
    if (v7 >= v4)
    {
      *unint64_t result = v3;
      *a2 = v5;
      uint64_t v12 = result[1];
      result[1] = a2[1];
      a2[1] = v12;
      uint64_t v13 = *a2;
      if (*(void *)(*a3 + 24) >= *(void *)(*a2 + 24)) {
        return result;
      }
      *a2 = *a3;
      *a3 = v13;
      char v8 = a3 + 1;
      unint64_t result = a2 + 1;
    }
    else
    {
      *result++ = v6;
      *a3 = v5;
      char v8 = a3 + 1;
    }
    uint64_t v9 = v8;
    goto LABEL_10;
  }
  if (v7 < v4)
  {
    *a2 = v6;
    *a3 = v3;
    uint64_t v9 = a2 + 1;
    uint64_t v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    uint64_t v11 = *result;
    if (*(void *)(*a2 + 24) < *(void *)(*result + 24))
    {
      *result++ = *a2;
      *a2 = v11;
LABEL_10:
      uint64_t v14 = *result;
      *unint64_t result = *v9;
      *uint64_t v9 = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask(unsigned int)::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(char *a1, char *a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *((void *)a2 - 2);
      uint64_t v7 = *(void *)a1;
      if (*(void *)(v6 + 24) < *(void *)(*(void *)a1 + 24))
      {
        *(void *)a1 = v6;
        *((void *)a2 - 2) = v7;
        uint64_t v8 = *((void *)a1 + 1);
        *((void *)a1 + 1) = *((void *)a2 - 1);
        *((void *)a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(a1, (void *)a1 + 2, (void *)a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a1 + 6);
      uint64_t v22 = *((void *)a2 - 2);
      uint64_t v23 = *((void *)a1 + 6);
      if (*(void *)(v22 + 24) < *(void *)(v23 + 24))
      {
        *((void *)a1 + 6) = v22;
        *((void *)a2 - 2) = v23;
        uint64_t v24 = *((void *)a1 + 7);
        *((void *)a1 + 7) = *((void *)a2 - 1);
        *((void *)a2 - 1) = v24;
        uint64_t v25 = *((void *)a1 + 6);
        unint64_t v26 = *(void *)(v25 + 24);
        uint64_t v27 = *((void *)a1 + 4);
        if (v26 < *(void *)(v27 + 24))
        {
          uint64_t v28 = *((void *)a1 + 5);
          uint64_t v29 = *((void *)a1 + 7);
          *((void *)a1 + 4) = v25;
          *((void *)a1 + 5) = v29;
          *((void *)a1 + 6) = v27;
          *((void *)a1 + 7) = v28;
          uint64_t v30 = *((void *)a1 + 2);
          if (v26 < *(void *)(v30 + 24))
          {
            uint64_t v31 = *((void *)a1 + 3);
            *((void *)a1 + 2) = v25;
            *((void *)a1 + 3) = v29;
            *((void *)a1 + 4) = v30;
            *((void *)a1 + 5) = v31;
            uint64_t v32 = *(void *)a1;
            if (v26 < *(void *)(*(void *)a1 + 24))
            {
              uint64_t v33 = *((void *)a1 + 1);
              *(void *)a1 = v25;
              *((void *)a1 + 1) = v29;
              *((void *)a1 + 2) = v32;
              *((void *)a1 + 3) = v33;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(a1, (void *)a1 + 2, (void *)a1 + 4);
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    uint64_t v13 = *(void *)v10;
    uint64_t v14 = *(void *)v9;
    if (*(void *)(*(void *)v10 + 24) < *(void *)(*(void *)v9 + 24))
    {
      uint64_t v15 = *((void *)v10 + 1);
      uint64_t v16 = v11;
      *(void *)uint64_t v10 = 0;
      *((void *)v10 + 1) = 0;
      while (1)
      {
        uint64_t v17 = &a1[v16];
        uint64_t v18 = *(void *)&a1[v16 + 40];
        *((void *)v17 + 4) = 0;
        *((void *)v17 + 5) = 0;
        unint64_t v19 = *(std::__shared_weak_count **)&a1[v16 + 56];
        *((void *)v17 + 6) = v14;
        *((void *)v17 + 7) = v18;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        if (v16 == -32) {
          break;
        }
        uint64_t v14 = *(void *)&a1[v16 + 16];
        v16 -= 16;
        if (*(void *)(v13 + 24) >= *(void *)(v14 + 24))
        {
          uint64_t v20 = &a1[v16 + 48];
          goto LABEL_15;
        }
      }
      uint64_t v20 = a1;
LABEL_15:
      unsigned int v21 = (std::__shared_weak_count *)*((void *)v20 + 1);
      *(void *)uint64_t v20 = v13;
      *((void *)v20 + 1) = v15;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

void *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask(unsigned int)::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(void *a1, void *a2, void *a3, void *a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(void *)(*a4 + 24) < *(void *)(*a3 + 24))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    uint64_t v11 = *a2;
    if (*(void *)(*a3 + 24) < *(void *)(*a2 + 24))
    {
      *a2 = *a3;
      *a3 = v11;
      uint64_t v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      uint64_t v13 = *a1;
      if (*(void *)(*a2 + 24) < *(void *)(*a1 + 24))
      {
        *a1 = *a2;
        *a2 = v13;
        uint64_t v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

void CFIIterator<SizeAndEndianness<Pointer64,LittleEndian>>::process_header(uint64_t a1, uint64_t a2)
{
}

void CFIIterator<SizeAndEndianness<Pointer64,LittleEndian>>::process_failed_header(uint64_t a1, const char *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 16);
    uint64_t v5 = "NULL";
    if (a2) {
      uint64_t v5 = a2;
    }
    v6[0] = 67109378;
    v6[1] = v4;
    __int16 v7 = 2080;
    uint64_t v8 = v5;
    _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "pid %d Failure reading CFI info at %s\n", (uint8_t *)v6, 0x12u);
  }
}

void CFIIterator<SizeAndEndianness<Pointer64,LittleEndian>>::~CFIIterator()
{
}

void CreateCallFrameInfoForBinary<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
  unint64_t v5 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(void *)(a2 + 24), "__TEXT");
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    __int16 v7 = TSegmentLoadCommand<SizeAndEndianness<Pointer64,LittleEndian>>::section_named(v5, "__eh_frame");
    if (v7)
    {
      uint64_t v8 = *((void *)v7 + 5);
      if (v8)
      {
        if (v4)
        {
          uint64_t v9 = *(void *)(a2 + 32);
          uint64_t v10 = v9 + *((void *)v7 + 4);
          uint64_t v11 = v6 + 3;
        }
        else
        {
          uint64_t v9 = *(void *)(a2 + 16);
          uint64_t v10 = v9 + *((unsigned int *)v7 + 12);
          uint64_t v11 = v6 + 5;
        }
        uint64_t v12 = v9 + *v11;
        v22[0] = v10;
        v22[1] = v8;
        uint64_t v13 = v6[6];
        *(void *)&long long v21 = v12;
        *((void *)&v21 + 1) = v13;
        uint64_t v20 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(a2 + 8) + 32))(*(void *)(a2 + 8));
        if (v20)
        {
          uint64_t Current = CSArchitectureGetCurrent();
          char IsLittleEndian = CSArchitectureIsLittleEndian(Current);
          char v19 = IsLittleEndian ^ CSArchitectureIsLittleEndian(*(unsigned int *)(*(void *)(a2 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(void *)(a2 + 24) + 8) & 0xFFFFFF) << 32));
          unsigned __int8 v18 = CSArchitectureIs32Bit(*(unsigned int *)(*(void *)(a2 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(void *)(a2 + 24) + 8) & 0xFFFFFF) << 32));
          uint64_t v16 = *(char **)(a2 + 48);
          std::allocate_shared[abi:ne180100]<CSCallFrameInfoForBinary,std::allocator<CSCallFrameInfoForBinary>,char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,void>(&v16, &v21, (uint64_t)v22, &v20, &v19, &v18, &v17);
          std::vector<std::shared_ptr<CSCallFrameInfoForBinary>>::push_back[abi:ne180100](a1, &v17);
          if (*((void *)&v17 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
          }
        }
      }
    }
  }
}

void sub_1B90516FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<CSCallFrameInfoForBinary>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  __int16 v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<CSCallFrameInfoForBinary>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    BOOL result = std::__split_buffer<std::shared_ptr<CSCppSymbolOwner>>::~__split_buffer(v18);
  }
  else
  {
    *__int16 v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B905181C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<CSCppSymbolOwner>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<CSCallFrameInfoForBinary,std::allocator<CSCallFrameInfoForBinary>,char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,void>@<X0>(char **a1@<X1>, _OWORD *a2@<X2>, uint64_t a3@<X3>, unsigned __int8 **a4@<X4>, char *a5@<X5>, unsigned __int8 *a6@<X6>, void *a7@<X8>)
{
  uint64_t v14 = operator new(0xB8uLL);
  BOOL result = std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::__shared_ptr_emplace[abi:ne180100]<char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,std::allocator<CSCallFrameInfoForBinary>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1B90518B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::__shared_ptr_emplace[abi:ne180100]<char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,std::allocator<CSCallFrameInfoForBinary>,0>(void *a1, char **a2, _OWORD *a3, uint64_t a4, unsigned __int8 **a5, char *a6, unsigned __int8 *a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F12C9CA0;
  CSCallFrameInfoForBinary::CSCallFrameInfoForBinary((uint64_t)(a1 + 3), *a2, a3, a4, *a5, *a6, *a7);
  return a1;
}

void sub_1B905191C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12C9CA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12C9CA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1BA9D1CD0);
}

void std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::__on_zero_shared(uint64_t a1)
{
}

uint64_t CSCallFrameInfoForBinary::CSCallFrameInfoForBinary(uint64_t a1, char *a2, _OWORD *a3, uint64_t a4, unsigned __int8 *a5, char a6, int a7)
{
  unint64_t v13 = std::string::basic_string[abi:ne180100]<0>((void *)a1, a2);
  *(_OWORD *)(v13 + 3) = *a3;
  *(_OWORD *)(v13 + 5) = *(_OWORD *)a4;
  uint64_t v14 = (const unsigned __int8 **)(v13 + 7);
  CSBinaryDataRef::CSBinaryDataRef((CSBinaryDataRef *)(v13 + 7));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  uint64_t v15 = CSRangeOfDyldSharedCacheInCurrentProcess();
  uint64_t v16 = *(void *)(a4 + 8);
  if ((unint64_t)&a5[-v15] >= v17)
  {
    std::vector<unsigned char>::reserve((unint64_t *)(a1 + 80), *(void *)(a4 + 8));
    uint64_t v18 = *(void *)(a4 + 8);
    for (uint64_t i = (unint64_t *)(a1 + 80); v18; --v18)
      std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](&i, a5++);
    a5 = *(unsigned __int8 **)(a1 + 80);
    uint64_t v16 = *(void *)(a1 + 88) - (void)a5;
  }
  CSBinaryDataRef::SetData(v14, a5, v16);
  *(unsigned char *)(a1 + 72) = a6;
  if (a7) {
    char v19 = 4;
  }
  else {
    char v19 = 8;
  }
  *(unsigned char *)(a1 + 73) = v19;
  return a1;
}

void sub_1B9051ACC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v5 = (char *)a1[1];
    unint64_t v6 = operator new(__sz);
    __int16 v7 = &v5[(void)v6 - v2];
    uint64_t v8 = v7;
    if (v5 != (char *)v2)
    {
      uint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      uint64_t v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

unint64_t **std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](unint64_t **a1, unsigned char *a2)
{
  int v4 = *a1;
  unint64_t v6 = (unsigned char *)(*a1)[1];
  unint64_t v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    uint64_t v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      uint64_t v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      unint64_t v6 = (unsigned char *)*v4;
    }
    unint64_t *v4 = v13;
    v4[1] = v7;
    _DWORD v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *unint64_t v6 = *a2;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

void CSCallFrameInfoForBinary::~CSCallFrameInfoForBinary(CSCallFrameInfoForBinary *this)
{
  unint64_t v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 18) = v2;
    operator delete(v2);
  }
  std::__tree<TRange<Pointer64>>::destroy((uint64_t)this + 112, *((void **)this + 15));
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  CSCppAddressSet::sort((CSCallFrameInfoForBinary *)((char *)this + 56));
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t std::vector<std::shared_ptr<CSCallFrameInfoForBinary>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<CSCallFrameInfoForBinary>>,std::reverse_iterator<std::shared_ptr<CSCallFrameInfoForBinary>*>,std::reverse_iterator<std::shared_ptr<CSCallFrameInfoForBinary>*>,std::reverse_iterator<std::shared_ptr<CSCallFrameInfoForBinary>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<CSCallFrameInfoForBinary>>,std::reverse_iterator<std::shared_ptr<CSCallFrameInfoForBinary>*>,std::reverse_iterator<std::shared_ptr<CSCallFrameInfoForBinary>*>,std::reverse_iterator<std::shared_ptr<CSCallFrameInfoForBinary>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CSCallFrameInfoForBinary>>,std::reverse_iterator<std::shared_ptr<CSCallFrameInfoForBinary>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CSCallFrameInfoForBinary>>,std::reverse_iterator<std::shared_ptr<CSCallFrameInfoForBinary>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CSCppSymbolOwner>>,std::reverse_iterator<std::shared_ptr<CSCppSymbolOwner>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void CFIIterator<SizeAndEndianness<Pointer32,LittleEndian>>::process_header(uint64_t a1, uint64_t a2)
{
}

void CFIIterator<SizeAndEndianness<Pointer32,LittleEndian>>::process_failed_header(uint64_t a1, const char *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 16);
    uint64_t v5 = "NULL";
    if (a2) {
      uint64_t v5 = a2;
    }
    v6[0] = 67109378;
    v6[1] = v4;
    __int16 v7 = 2080;
    uint64_t v8 = v5;
    _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "pid %d Failure reading CFI info at %s\n", (uint8_t *)v6, 0x12u);
  }
}

void CFIIterator<SizeAndEndianness<Pointer32,LittleEndian>>::~CFIIterator()
{
}

void CreateCallFrameInfoForBinary<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
  unint64_t v5 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(*(void *)(a2 + 24), "__TEXT");
  if (v5)
  {
    uint64_t v6 = (_DWORD *)v5;
    __int16 v7 = TSegmentLoadCommand<SizeAndEndianness<Pointer32,LittleEndian>>::section_named(v5, "__eh_frame");
    if (v7)
    {
      uint64_t v8 = *((unsigned int *)v7 + 9);
      if (v8)
      {
        if (v4)
        {
          int v9 = *(_DWORD *)(a2 + 32);
          unsigned int v10 = v9 + *((_DWORD *)v7 + 8);
          unint64_t v11 = v6 + 6;
        }
        else
        {
          int v9 = *(_DWORD *)(a2 + 16);
          unsigned int v10 = v9 + *((_DWORD *)v7 + 10);
          unint64_t v11 = v6 + 8;
        }
        int v12 = *v11;
        v22[0] = v10;
        v22[1] = v8;
        uint64_t v13 = v6[9];
        *(void *)&long long v21 = (v9 + v12);
        *((void *)&v21 + 1) = v13;
        uint64_t v20 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(a2 + 8) + 32))(*(void *)(a2 + 8));
        if (v20)
        {
          uint64_t Current = CSArchitectureGetCurrent();
          char IsLittleEndian = CSArchitectureIsLittleEndian(Current);
          char v19 = IsLittleEndian ^ CSArchitectureIsLittleEndian(*(unsigned int *)(*(void *)(a2 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(void *)(a2 + 24) + 8) & 0xFFFFFF) << 32));
          unsigned __int8 v18 = CSArchitectureIs32Bit(*(unsigned int *)(*(void *)(a2 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(void *)(a2 + 24) + 8) & 0xFFFFFF) << 32));
          char v16 = *(char **)(a2 + 40);
          std::allocate_shared[abi:ne180100]<CSCallFrameInfoForBinary,std::allocator<CSCallFrameInfoForBinary>,char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,void>(&v16, &v21, (uint64_t)v22, &v20, &v19, &v18, &v17);
          std::vector<std::shared_ptr<CSCallFrameInfoForBinary>>::push_back[abi:ne180100](a1, &v17);
          if (*((void *)&v17 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
          }
        }
      }
    }
  }
}

void sub_1B9052104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void *CSCppCoreFileMemory::CSCppCoreFileMemory(void *a1, uint64_t a2)
{
  *a1 = &unk_1F12C9D40;
  a1[1] = retain_mapped_memory_cache(a2);
  a1[2] = 0;
  return a1;
}

void CSCppCoreFileMemory::~CSCppCoreFileMemory(CSCppCoreFileMemory *this)
{
  *(void *)this = &unk_1F12C9D40;
  release_core_file_mapped_memory_cache(*((void *)this + 1));
}

{
  uint64_t vars8;

  CSCppCoreFileMemory::~CSCppCoreFileMemory(this);

  JUMPOUT(0x1BA9D1CD0);
}

uint64_t CSCppCoreFileMemory::footprint(CSCppCoreFileMemory *this)
{
  return *((void *)this + 2);
}

void *CSCppCoreFileMemory::to_string@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CSCppCoreFileMemory");
}

uint64_t CSCppCoreFileMemory::bytes_at(uint64_t a1, tree *a2, uint64_t a3)
{
  uint64_t v7 = 0;
  int v5 = mapped_memory_read(*(const char **)(a1 + 8), a2, a3, &v7);
  uint64_t result = 0;
  if (!v5)
  {
    *(void *)(a1 + 16) += a3;
    return v7;
  }
  return result;
}

void CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(CSCppCoreFileMemory *this)
{
  *((void *)this + 2) = 0;
}

uint64_t CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory(CSCppCoreFileMemory *this)
{
  return *((void *)this + 1);
}

uint64_t CSCppCoreFileMemory::is_task(CSCppCoreFileMemory *this)
{
  return 1;
}

uint64_t CSCppCoreFileMemory::is_dyld_shared_cache(CSCppCoreFileMemory *this)
{
  return 0;
}

void create_sampling_context_for_task_pid_symbolicator()
{
}

void sub_1B90526AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t init_sampling_context_from_symbols(sampling_context_t *a1, int a2)
{
  uint64_t result = CSIsNull(*((void *)a1 + 3), *((void *)a1 + 4));
  if ((result & 1) == 0)
  {
    if (!*((void *)a1 + 13) && (*((unsigned char *)a1 + 160) & 8) == 0)
    {
      uint64_t SymbolWithMangledNameFromSymbolOwnerWithNameAtTime = CSSymbolicatorGetSymbolWithMangledNameFromSymbolOwnerWithNameAtTime(*((void *)a1 + 3), *((void *)a1 + 4), (uint64_t)"_dispatch_queue_offsets", (uint64_t)"libdispatch.dylib", 0x8000000000000000);
      uint64_t v7 = v6;
      uint64_t result = CSIsNull(SymbolWithMangledNameFromSymbolOwnerWithNameAtTime, v6);
      if ((result & 1) == 0)
      {
        unint64_t Range = (tree *)CSSymbolGetRange(SymbolWithMangledNameFromSymbolOwnerWithNameAtTime, v7);
        uint64_t v19 = 0;
        uint64_t result = mapped_memory_read(*((const char **)a1 + 1), Range, 34, &v19);
        if (!result)
        {
          if (v19)
          {
            uint64_t result = (uint64_t)malloc_type_malloc(0x22uLL, 0x1000040A995D64BuLL);
            *((void *)a1 + 13) = result;
            if (result)
            {
              __int16 v9 = *(_WORD *)(v19 + 32);
              long long v10 = *(_OWORD *)(v19 + 16);
              *(_OWORD *)uint64_t result = *(_OWORD *)v19;
              *(_OWORD *)(result + 16) = v10;
              *(_WORD *)(result + 32) = v9;
            }
          }
        }
      }
    }
    if (a2)
    {
      if (!*((void *)a1 + 6))
      {
        uint64_t v11 = CSSymbolicatorGetSymbolWithMangledNameFromSymbolOwnerWithNameAtTime(*((void *)a1 + 3), *((void *)a1 + 4), (uint64_t)"__sigtramp", (uint64_t)"libsystem_platform.dylib", 0x8000000000000000);
        uint64_t v13 = v12;
        uint64_t result = CSIsNull(v11, v12);
        if ((result & 1) == 0)
        {
          uint64_t result = CSSymbolGetRange(v11, v13);
          *((void *)a1 + 5) = result;
          *((void *)a1 + 6) = v14;
        }
      }
      if (!*((void *)a1 + 8))
      {
        uint64_t v15 = CSSymbolicatorGetSymbolWithMangledNameFromSymbolOwnerWithNameAtTime(*((void *)a1 + 3), *((void *)a1 + 4), (uint64_t)"_start_wqthread", (uint64_t)"libsystem_pthread.dylib", 0x8000000000000000);
        uint64_t v17 = v16;
        uint64_t result = CSIsNull(v15, v16);
        if ((result & 1) == 0)
        {
          uint64_t result = CSSymbolGetRange(v15, v17);
          *((void *)a1 + 7) = result;
          *((void *)a1 + 8) = v18;
        }
      }
    }
  }
  return result;
}

void sampling_context_t::~sampling_context_t(char **this)
{
  std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy((uint64_t)(this + 17), this[18]);
  std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy((uint64_t)(this + 14), this[15]);
  unint64_t v2 = this[10];
  if (v2)
  {
    this[11] = v2;
    operator delete(v2);
  }
}

uint64_t *CSInitializeAotSymbolicationSession(uint64_t *result, uint64_t a2, uint64_t a3, const CFUUIDBytes *a4, const CFUUIDBytes *a5)
{
  if (MEMORY[0x1E4FBA140]) {
    BOOL v5 = MEMORY[0x1E4FBA148] == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && result != 0 && a4 != 0 && a2 != 0 && a3 != 0 && a5 != 0)
  {
    *uint64_t result = aot_symbolication_session_create();
    return (uint64_t *)aot_init_shared_cache_info();
  }
  return result;
}

unint64_t __create_sampling_context_for_task_pid_symbolicator_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (const char *)CSSymbolOwnerGetPath(a2, a3);
  v8[1] = (const char *)strlen(v8[0]);
  unint64_t result = std::string_view::find[abi:ne180100]((uint64_t *)v8, *(char **)(a1 + 40), 0);
  if (!result
    || (unint64_t result = std::string_view::find[abi:ne180100]((uint64_t *)v8, "/usr/local/libexec/rosetta/runtime", 0)) == 0)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    *(void *)(v7 + 40) = a2;
    *(void *)(v7 + 48) = a3;
  }
  return result;
}

unint64_t __create_sampling_context_for_task_pid_symbolicator_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Name = CSRegionGetName(a2, a3);
  unint64_t result = strncmp(Name, "__TEXT", 6uLL);
  if (!result)
  {
    unint64_t result = CSRegionGetRange(a2, a3);
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(v8 + 192) = result;
    *(void *)(v8 + 200) = v9;
  }
  return result;
}

uint64_t CSDestroyAotSymbolicationSession(uint64_t result)
{
  if (result)
  {
    if (MEMORY[0x1E4FBA150]) {
      return aot_symbolication_session_destroy();
    }
  }
  return result;
}

uint64_t CSSymbolicatorTranslateFromNativeAddress(char a1, uint64_t a2, unint64_t a3)
{
  if ((a1 & 7 | (8 * (a2 & 3))) != 2) {
    return 0;
  }
  v7[1] = v3;
  v7[2] = v4;
  v7[0] = 0;
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56);
  if (!*(unsigned char *)(v5 + 16)) {
    return 0;
  }
  translate_aot_frame(a1, a2, *(void *)(v5 + 8), a3, v7);
  return v7[0];
}

BOOL translate_aot_frame(char a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  BOOL v9 = CSIsNull(a1, a2);
  BOOL v10 = 0;
  if (a3 && !v9)
  {
    BOOL v11 = !MEMORY[0x1E4FBA130] || MEMORY[0x1E4FBA138] == 0;
    if (!v11 && MEMORY[0x1E4FBA120] != 0)
    {
      uint64_t v14 = 0;
      uint64_t v15 = &v14;
      uint64_t v16 = 0x2000000000;
      uint64_t v17 = 0;
      if (aot_address_in_shared_cache() && aot_get_x86_address_shared_cache()) {
        goto LABEL_14;
      }
      CSCppSymbolicator::get_aot_image_info_for_address(a2 & 0xFFFFFFFFFFFFFFFCLL, a4, (uint64_t)&v18);
      char v31 = v24;
      long long v29 = v22;
      long long v30 = v23;
      long long v25 = v18;
      long long v26 = v19;
      long long v27 = v20;
      long long v28 = v21;
      if (!v24) {
        goto LABEL_15;
      }
      if (aot_get_x86_address())
      {
LABEL_14:
        *a5 = v15[3];
        BOOL v10 = 1;
      }
      else
      {
LABEL_15:
        *(void *)&long long v18 = 0;
        *((void *)&v18 + 1) = &v18;
        *(void *)&long long v19 = 0x2000000000;
        BYTE8(v19) = 0;
        CSSymbolicatorForEachAotImage();
        BOOL v10 = *(unsigned char *)(*((void *)&v18 + 1) + 24) != 0;
        _Block_object_dispose(&v18, 8);
      }
      _Block_object_dispose(&v14, 8);
    }
  }
  return v10;
}

void sub_1B9052CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t create_sampling_context_for_task(mach_port_name_t a1)
{
  int x = 0;
  if (!pid_for_task(a1, &x)) {
    create_sampling_context_for_task_pid_symbolicator();
  }
  return 0;
}

void sampling_context_clear_cache(uint64_t a1)
{
  if (a1) {
    clear_mapped_memory(*(void *)(a1 + 8));
  }
}

uint64_t destroy_sampling_context(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 168)) {
      BOOL v2 = MEMORY[0x1E4FBA150] == 0;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2) {
      aot_symbolication_session_destroy();
    }
    task_release_mapped_memory_cache(*(_DWORD *)v1);
    *(void *)(v1 + 8) = 0;
    uint64_t v3 = *(void *)(v1 + 16);
    if (v3)
    {
      uint64_t v6 = *(void ***)(v1 + 16);
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v6);
      MEMORY[0x1BA9D1CD0](v3, 0x20C40960023A9);
      *(void *)(v1 + 16) = 0;
    }
    uint64_t v4 = *(void **)(v1 + 104);
    if (v4)
    {
      free(v4);
      *(void *)(v1 + 104) = 0;
    }
    CSRelease(*(atomic_uint **)(v1 + 24), *(void *)(v1 + 32));
    *(void *)(v1 + 24) = 0;
    *(void *)(v1 + 32) = 0;
    std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy(v1 + 136, *(char **)(v1 + 144));
    std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy(v1 + 112, *(char **)(v1 + 120));
    uint64_t v5 = *(void **)(v1 + 80);
    if (v5)
    {
      *(void *)(v1 + 88) = v5;
      operator delete(v5);
    }
    return MEMORY[0x1BA9D1CD0](v1, 0x10A0C409B837E7ALL);
  }
  return result;
}

uint64_t get_remote_thread_dispatch_queue(sampling_context_t *a1, thread_inspect_t a2, unint64_t *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  int v16 = 0;
  if (CSGetForceSafeMachVMReads())
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = __get_remote_thread_dispatch_queue_block_invoke;
    void v11[3] = &unk_1E61D0A08;
    void v11[4] = &v13;
    v11[5] = a1;
    thread_inspect_t v12 = a2;
    void v11[6] = a3;
    int v6 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)v11);
    if (v6 != 4096 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *((_DWORD *)a1 + 1);
      *(_DWORD *)long long buf = 67109376;
      int v18 = v7;
      __int16 v19 = 1024;
      int v20 = v6;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Missing page in pid %d, sampling of thread failed, err code %d\n", buf, 0xEu);
    }
  }
  else
  {
    int remote_thread_dispatch_queue2 = get_remote_thread_dispatch_queue2(a1, a2, a3);
    *((_DWORD *)v14 + 6) = remote_thread_dispatch_queue2;
  }
  uint64_t v9 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_1B9052FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __get_remote_thread_dispatch_queue_block_invoke(uint64_t a1)
{
  uint64_t result = get_remote_thread_dispatch_queue2(*(sampling_context_t **)(a1 + 40), *(_DWORD *)(a1 + 56), *(unint64_t **)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t get_remote_thread_dispatch_queue2(sampling_context_t *a1, thread_inspect_t target_act, unint64_t *a3)
{
  kern_return_t v6;
  int v7;
  _WORD *v9;
  char *v10;
  char *v11;
  thread_inspect_t v12;
  BOOL v13;
  char **v14;
  kern_return_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t **v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  void *v24;
  char *v25;
  unint64_t v26;
  BOOL v27;
  void *v28;
  tree *v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t **v33;
  tree *v34;
  char *__src;
  mach_msg_type_number_t v36[2];
  unint64_t v37;
  uint64_t v38;
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out[4];
  tree *v41;
  thread_inspect_t v42;
  unint64_t *v43;
  std::string v44;
  long long v45;
  uint64_t *v46;
  uint8_t buf[4];
  int v48;
  __int16 v49;
  thread_inspect_t v50;
  __int16 v51;
  kern_return_t v52;
  unsigned char v53[88];
  uint64_t v54;

  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v42 = target_act;
  if (!a1) {
    return 4;
  }
  if (a3)
  {
    *a3 = 0;
    if (!*((void *)a1 + 13) && (*((unsigned char *)a1 + 160) & 8) == 0) {
      init_sampling_context_from_symbols(a1, 0);
    }
    thread_info_outCnt = 6;
    int v6 = thread_info(target_act, 4u, thread_info_out, &thread_info_outCnt);
    if (v6)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v7 = *((_DWORD *)a1 + 1);
        *(_DWORD *)long long buf = 67109632;
        uint64_t v48 = v7;
        uint64_t v49 = 1024;
        uint64_t v50 = target_act;
        uint64_t v51 = 1024;
        uint64_t v52 = v6;
        _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "get_remote_thread_dispatch_queue2 thread_info(THREAD_IDENTIFIER_INFO) call failed for pid %u thread %u, err %d", buf, 0x14u);
      }
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "get_remote_thread_dispatch_queue2 thread_info(THREAD_IDENTIFIER_INFO) call failed for pid %u thread %u, err %d", *((_DWORD *)a1 + 1), target_act, v6);
      return 0;
    }
    uint64_t v37 = 0;
    unint64_t v38 = 0;
    uint64_t v9 = (_WORD *)*((void *)a1 + 13);
    if (!v9
      || !v41
      || mapped_memory_read_pointer(*((void *)a1 + 1), v41, &v38)
      || !v38
      || mapped_memory_read_pointer(*((void *)a1 + 1), (tree *)(v38 + (unsigned __int16)v9[5]), &v37)
      || !v37
      || (*a3 = v37,
          *(void *)unint64_t v36 = 0,
          mapped_memory_read(*((const char **)a1 + 1), (tree *)(v38 + (unsigned __int16)v9[7]), (unsigned __int16)v9[8], v36)))
    {
LABEL_18:
      BOOL v10 = (char *)*((void *)a1 + 18);
      if (!v10) {
        goto LABEL_29;
      }
      uint64_t v11 = (char *)a1 + 144;
      do
      {
        thread_inspect_t v12 = *((_DWORD *)v10 + 8);
        uint64_t v13 = v12 >= target_act;
        if (v12 >= target_act) {
          uint64_t v14 = (char **)v10;
        }
        else {
          uint64_t v14 = (char **)(v10 + 8);
        }
        if (v13) {
          uint64_t v11 = v10;
        }
        BOOL v10 = *v14;
      }
      while (*v14);
      if (v11 != (char *)a1 + 144 && *((_DWORD *)v11 + 8) <= target_act)
      {
        uint64_t v21 = v37;
        if (v11[72])
        {
          if (v37 != *((void *)v11 + 10)) {
            *((void *)v11 + 10) = 0;
          }
        }
        else if (v37)
        {
          v11[72] = 1;
          *((void *)v11 + 10) = v21;
        }
      }
      else
      {
LABEL_29:
        v36[0] = 28;
        uint64_t v15 = thread_info(target_act, 5u, (thread_info_t)buf, v36);
        if (v15 || !v36[0])
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            uint64_t v17 = *((_DWORD *)a1 + 1);
            LODWORD(v44.__r_.__value_.__l.__data_) = 67109632;
            HIDWORD(v44.__r_.__value_.__r.__words[0]) = v17;
            LOWORD(v44.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v44.__r_.__value_.__r.__words[1] + 2) = target_act;
            HIWORD(v44.__r_.__value_.__r.__words[1]) = 1024;
            LODWORD(v44.__r_.__value_.__r.__words[2]) = v15;
            _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "get_remote_thread_dispatch_queue2 thread_info(THREAD_EXTENDED_INFO) call failed for pid %u thread %u, err %d", (uint8_t *)&v44, 0x14u);
          }
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "get_remote_thread_dispatch_queue2 thread_info(THREAD_EXTENDED_INFO) call failed for pid %u thread %u, err %d", *((_DWORD *)a1 + 1), target_act, v15);
          int v16 = "";
        }
        else
        {
          int v16 = v53;
        }
        int v18 = *(void *)thread_info_out;
        __int16 v19 = v37;
        std::string::basic_string[abi:ne180100]<0>(&v44, v16);
        *(void *)&uint64_t v45 = v18;
        unsigned int v46 = (uint64_t *)v19;
        BYTE8(v45) = v19 != 0;
        uint64_t v43 = (unint64_t *)&v42;
        int v20 = std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a1 + 17, &v42, (uint64_t)&std::piecewise_construct, (_DWORD **)&v43);
        std::string::operator=((std::string *)(v20 + 5), &v44);
        *((_OWORD *)v20 + 4) = v45;
        v20[10] = v46;
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
      }
      return 0;
    }
    long long v22 = (unsigned __int16)v9[8];
    if (v22 == 2)
    {
      long long v23 = (unsigned __int16)**(_WORD **)v36;
    }
    else if (v22 == 4)
    {
      long long v23 = **(_DWORD **)v36;
    }
    else
    {
      long long v23 = 0;
    }
    char v24 = (void *)*((void *)a1 + 15);
    if (v24)
    {
      long long v25 = (char *)a1 + 120;
      do
      {
        long long v26 = v24[4];
        long long v27 = v26 >= v37;
        if (v26 >= v37) {
          long long v28 = v24;
        }
        else {
          long long v28 = v24 + 1;
        }
        if (v27) {
          long long v25 = (char *)v24;
        }
        char v24 = (void *)*v28;
      }
      while (*v28);
      if (v25 != (char *)a1 + 120 && v37 >= *((void *)v25 + 4))
      {
        if (*((void *)v25 + 9) != *(void *)thread_info_out) {
          *((void *)v25 + 9) = 0;
        }
        if (v23 > *((_DWORD *)v25 + 16)) {
          *((_DWORD *)v25 + 16) = v23;
        }
        goto LABEL_18;
      }
    }
    BOOL v34 = 0;
    __src = 0;
    if (*v9 == 3)
    {
      long long v29 = (tree *)(v38 + (unsigned __int16)v9[1]);
      BOOL v34 = v29;
    }
    else
    {
      long long v30 = mapped_memory_read_pointer(*((void *)a1 + 1), (tree *)(v38 + (unsigned __int16)v9[1]), &v34);
      long long v29 = v34;
      if (v30) {
        char v31 = 1;
      }
      else {
        char v31 = v34 == 0;
      }
      if (v31)
      {
LABEL_67:
        if (!v30)
        {
          if (__src)
          {
            strncpy((char *)buf, __src, 0x7FuLL);
            v53[79] = 0;
            uint64_t v32 = *(void *)thread_info_out;
            std::string::basic_string[abi:ne180100]<0>(&v44, (char *)buf);
            LODWORD(v45) = v23;
            *((void *)&v45 + 1) = v32;
            uint64_t v43 = &v37;
            uint64_t v33 = std::__tree<std::__value_type<unsigned long long,dispatch_queue_info>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,dispatch_queue_info>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,dispatch_queue_info>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)a1 + 14, &v37, (uint64_t)&std::piecewise_construct, (uint64_t **)&v43);
            std::string::operator=((std::string *)(v33 + 5), &v44);
            *((_OWORD *)v33 + 4) = v45;
            if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v44.__r_.__value_.__l.__data_);
            }
          }
        }
        goto LABEL_18;
      }
    }
    long long v30 = mapped_memory_read(*((const char **)a1 + 1), v29, 128, &__src);
    goto LABEL_67;
  }
  return 0;
}

#error "1B9053624: call analysis failed (funcsize=76)"

size_t debug_print_backtrace(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (FILE **)MEMORY[0x1E4F143C8];
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "\nFrame count is %d:\n", a2);
  if (a2)
  {
    uint64_t v9 = 0;
    do
    {
      char SymbolOwnerWithAddressAtTime = CSSymbolicatorGetSymbolOwnerWithAddressAtTime(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a3 + 8 * v9), 0x8000000000000000);
      CSSymbolOwnerGetName(SymbolOwnerWithAddressAtTime, v11);
      SymbolWithAddressAtTime = CSSymbolicatorGetSymbolWithAddressAtTime(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a3 + 8 * v9), 0x8000000000000000);
      CSSymbolGetName((uint64_t)SymbolWithAddressAtTime, v13);
      uint64_t v14 = *v8;
      if (a4) {
        fprintf(v14, "[%3d] %#8.8llx fp:%#8.8llx %s %s\n");
      }
      else {
        fprintf(v14, "[%3d] %#8.8llx %s %s\n");
      }
      ++v9;
    }
    while (a2 != v9);
  }
  uint64_t v15 = *v8;

  return fwrite("\n\n", 2uLL, 1uLL, v15);
}

uint64_t sample_remote_thread_with_dispatch_queue(uint64_t a1, int a2, char a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = 0;
  int v18 = &v17;
  uint64_t v19 = 0x2000000000;
  int v20 = 5;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  BOOL v10 = __sample_remote_thread_with_dispatch_queue_block_invoke;
  uint64_t v11 = &unk_1E61D0A30;
  thread_inspect_t v12 = &v17;
  uint64_t v13 = a1;
  int v15 = a2;
  char v16 = a3;
  uint64_t v14 = a4;
  if (CSGetForceSafeMachVMReads())
  {
    int v5 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)v9);
    if (v5 != 4096 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)long long buf = 67109376;
      int v22 = v6;
      __int16 v23 = 1024;
      int v24 = v5;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Missing page in pid %d, sampling of thread failed, err code %d\n", buf, 0xEu);
    }
  }
  else
  {
    v10((uint64_t)v9);
  }
  uint64_t v7 = *((unsigned int *)v18 + 6);
  _Block_object_dispose(&v17, 8);
  return v7;
}

void sub_1B90539A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __sample_remote_thread_with_dispatch_queue_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  int v2 = 4;
  uint64_t v9 = result;
  if (v1)
  {
    uint64_t v3 = *(void **)(result + 48);
    if (*v3 && v3[3] != 0)
    {
      thread_inspect_t v5 = *(_DWORD *)(result + 56);
      int v6 = (unint64_t *)v3[5];
      uint64_t v7 = (unsigned char *)v3[6];
      if (v7) {
        *uint64_t v7 = 0;
      }
      if (!*(void *)(v1 + 48) && !CSIsNull(*(void *)(v1 + 24), *(void *)(v1 + 32)))
      {
        init_sampling_context_from_symbols((sampling_context_t *)v1, 1);
        int v8 = *(_DWORD *)(v1 + 72);
        if (*(void *)(v1 + 48))
        {
          if (v8) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Found _sigtramp symbol after %u tries\n", *(_DWORD *)(v1 + 72));
          }
        }
        else
        {
          if (!v8)
          {
            fwrite("Couldn't find _sigtramp symbol in expected dylibs\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            int v8 = *(_DWORD *)(v1 + 72);
          }
          *(_DWORD *)(v1 + 72) = v8 + 1;
        }
      }
      uint64_t result = get_remote_thread_dispatch_queue2((sampling_context_t *)v1, v5, v6);
      int v2 = result;
      if (!result) {
        _create_thread_state((sampling_context_t *)result);
      }
    }
  }
  *(_DWORD *)(*(void *)(*(void *)(v9 + 32) + 8) + 24) = v2;
  return result;
}

#error "1B905472C: call analysis failed (funcsize=102)"

uint64_t sample_remote_thread_with_dispatch_queue_regular_and_swift_async(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  BOOL v17 = 0;
  if (sample_should_capture_swift_async(a1, &v17))
  {
    uint64_t result = sample_remote_thread_with_dispatch_queue(a1, a2, 1, a4);
    if (result) {
      return result;
    }
    if (!**(unsigned char **)(a4 + 48))
    {
      uint64_t v9 = **(unsigned int **)(a4 + 24);
      if (v9)
      {
        size_t v10 = 8 * v9;
        if (*(void *)a3 && *(void *)a4) {
          memcpy(*(void **)a3, *(const void **)a4, 8 * v9);
        }
        uint64_t v11 = *(void **)(a3 + 8);
        if (v11)
        {
          thread_inspect_t v12 = *(const void **)(a4 + 8);
          if (v12) {
            memcpy(v11, v12, v10);
          }
        }
      }
      uint64_t result = 0;
      uint64_t v13 = *(_DWORD **)(a4 + 24);
      uint64_t v14 = *(_DWORD **)(a4 + 32);
      int v15 = *(_DWORD **)(a3 + 32);
      **(_DWORD **)(a3 + 24) = *v13;
      *int v15 = *v14;
      char v16 = *(unsigned char **)(a3 + 48);
      **(void **)(a3 + 40) = **(void **)(a4 + 40);
      *char v16 = 0;
      _DWORD *v13 = 0;
      return result;
    }
  }
  else
  {
    uint64_t result = sample_remote_thread_with_dispatch_queue(a1, a2, 0, a3);
    if (result) {
      return result;
    }
  }
  if (!v17 || !**(unsigned char **)(a4 + 48)) {
    return 0;
  }

  return sample_remote_thread_with_dispatch_queue(a1, a2, 0, a3);
}

BOOL sample_should_capture_swift_async(uint64_t a1, BOOL *a2)
{
  int v3 = *(_DWORD *)(a1 + 160);
  if ((v3 & 0x60) == 0x60 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)thread_inspect_t v5 = 0;
    _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "SAMPLING_SAMPLE_BOTH_REGULAR_AND_SWIFT_ASYNC will override SAMPLING_IGNORE_SWIFT_ASYNC", v5, 2u);
  }
  *a2 = (v3 & 0x40) != 0;
  return (v3 & 0x60) != 32;
}

uint64_t sample_remote_thread(uint64_t a1, int a2, uint64_t a3)
{
  char should_capture_swift_async = sample_should_capture_swift_async(a1, &v8);

  return sample_remote_thread_with_dispatch_queue(a1, a2, should_capture_swift_async, a3);
}

uint64_t thread_name_for_thread_port(uint64_t a1, unsigned int a2, void *a3, void *a4)
{
  if (!a1) {
    goto LABEL_14;
  }
  if (!a2) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v4 = a1 + 144;
  uint64_t v5 = v6;
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = v4;
  do
  {
    unsigned int v8 = *(_DWORD *)(v5 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      size_t v10 = (uint64_t *)v5;
    }
    else {
      size_t v10 = (uint64_t *)(v5 + 8);
    }
    if (v9) {
      uint64_t v7 = v5;
    }
    uint64_t v5 = *v10;
  }
  while (*v10);
  if (v7 != v4 && *(_DWORD *)(v7 + 32) <= a2)
  {
    if (a3) {
      *a3 = *(void *)(v7 + 64);
    }
    if (a4) {
      *a4 = *(void *)(v7 + 80);
    }
    uint64_t result = v7 + 40;
    if (*(char *)(v7 + 63) < 0) {
      return *(void *)result;
    }
  }
  else
  {
LABEL_14:
    if (a3) {
      *a3 = 0;
    }
    uint64_t result = 0;
    if (a4) {
      *a4 = 0;
    }
  }
  return result;
}

void *dispatch_queue_name_for_serial_number(uint64_t a1, unint64_t a2, BOOL *a3, void *a4)
{
  if (!a1) {
    goto LABEL_13;
  }
  uint64_t v6 = *(void **)(a1 + 120);
  uint64_t v4 = (void *)(a1 + 120);
  uint64_t v5 = v6;
  if (!v6) {
    goto LABEL_13;
  }
  uint64_t v7 = v4;
  do
  {
    unint64_t v8 = v5[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      size_t v10 = v5;
    }
    else {
      size_t v10 = v5 + 1;
    }
    if (v9) {
      uint64_t v7 = v5;
    }
    uint64_t v5 = (void *)*v10;
  }
  while (*v10);
  if (v7 != v4 && v7[4] <= a2)
  {
    if (a3) {
      *a3 = *((_DWORD *)v7 + 16) > 1u;
    }
    if (a4) {
      *a4 = v7[9];
    }
    uint64_t result = v7 + 5;
    if (*((char *)v7 + 63) < 0) {
      return (void *)*result;
    }
  }
  else
  {
LABEL_13:
    if (a3) {
      *a3 = 0;
    }
    uint64_t result = 0;
    if (a4) {
      *a4 = 0;
    }
  }
  return result;
}

void CSSymbolicatorFixupFrames(char a1, uint64_t a2, tree **a3, unsigned int *a4, unsigned int a5, _DWORD *a6, uint64_t a7, int a8, uint64_t a9)
{
  if (!a3 || !a4 || !a6) {
    return;
  }
  unsigned int v16 = *a4;
  if (a7) {
    uint64_t v17 = a7;
  }
  else {
    uint64_t v17 = 0x8000000000000000;
  }
  if (*a6 == 65)
  {
    v64[0] = 0;
    v64[1] = 0;
    unint64_t v63 = (unint64_t)v64;
    if (v16)
    {
      if (a5)
      {
        unsigned int v20 = v16 - a5;
        uint64_t v62 = (uint64_t)a3[v16 - a5];
      }
      else
      {
        uint64_t v62 = -1;
        unsigned int v20 = v16;
      }
      int Architecture = CSSymbolicatorGetArchitecture(a1, a2);
      *a6 = 64;
      if (!v20) {
        goto LABEL_73;
      }
      int v31 = Architecture;
      if (a9) {
        uint64_t v32 = *(const char **)(a9 + 8);
      }
      else {
        uint64_t v32 = 0;
      }
      IsValiduint64_t PC = _IsValidPC(v32, *a3);
      if (v20 >= 2)
      {
        if (v62)
        {
          if (v20 + 1 <= v16)
          {
            SymbolWithAddressAtTime = CSSymbolicatorGetSymbolWithAddressAtTime(a1, a2, (uint64_t)*a3, v17);
            uint64_t v35 = v34;
            if (!CSIsNull((char)SymbolWithAddressAtTime, v34))
            {
              unint64_t Range = CSSymbolGetRange((uint64_t)SymbolWithAddressAtTime, v35);
              if (Range)
              {
                if (_IsValidLinkRegister(Range, v37, (uint64_t)*a3, (uint64_t)SymbolWithAddressAtTime, v35, v31 != 12))
                {
                  memmove(a3 + 2, a3 + 1, 8 * (v20 - 1));
                  a3[1] = (tree *)v62;
                  ++v20;
                  if (!IsValidPC) {
                    goto LABEL_73;
                  }
LABEL_41:
                  unsigned int v38 = v20 - 1;
                  if (v20 - 1 < 2)
                  {
                    unsigned int v39 = v20;
                  }
                  else
                  {
                    unsigned int v39 = v20;
                    do
                    {
                      uint64_t v40 = &a3[v38];
                      if (!*v40)
                      {
                        if (v38 < v39 - 1) {
                          memmove(v40, &a3[v20], 8 * (v39 - v20));
                        }
                        unsigned int v38 = v20 - 2;
                        --v39;
                      }
                      unsigned int v20 = v38--;
                    }
                    while (v38 > 1);
                  }
                  if (v31 == 12 && v39 >= 2)
                  {
                    uint64_t v41 = a3 + 1;
                    uint64_t v42 = v39 - 1;
                    do
                    {
                      *v41++ &= ~1uLL;
                      --v42;
                    }
                    while (v42);
                  }
                  if (a8 && v39 >= 2)
                  {
                    uint64_t v43 = (uint64_t *)(a3 + 1);
                    uint64_t v44 = v39 - 1;
                    uint64_t v45 = a9;
                    do
                    {
                      uint64_t v46 = *v43;
                      if (*v43 != -1)
                      {
                        if (v31 == 12 && (v46 & 1) != 0)
                        {
                          if (v45)
                          {
                            unint64_t v47 = v46 & 0xFFFFFFFFFFFFFFFELL;
                            unsigned int ThumbInstruction = _GetThumbInstruction(*(const char **)(v45 + 8), (uint64_t)&v63, (tree *)((v46 & 0xFFFFFFFFFFFFFFFELL) - 4));
                            uint64_t v49 = v45;
                            unsigned int v50 = ThumbInstruction;
                            if (_GetThumbInstruction(*(const char **)(v49 + 8), (uint64_t)&v63, (tree *)(v47 - 2)) >> 14 > 2&& v50 >> 12 > 0xE)
                            {
                              uint64_t v52 = -4;
                            }
                            else
                            {
                              uint64_t v52 = -2;
                            }
                            uint64_t v53 = *v43 + v52;
                            uint64_t v45 = a9;
                          }
                          else
                          {
                            uint64_t v53 = v46 - 2;
                          }
                        }
                        else
                        {
                          uint64_t v53 = v46 - 4;
                        }
                        *uint64_t v43 = v53;
                      }
                      ++v43;
                      --v44;
                    }
                    while (v44);
                  }
                  unsigned int v20 = v39;
                  goto LABEL_73;
                }
              }
            }
          }
        }
      }
      if (IsValidPC) {
        goto LABEL_41;
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
LABEL_73:
    std::__tree<TRange<Pointer64>>::destroy((uint64_t)&v63, v64[0]);
    unsigned int v16 = v20;
    goto LABEL_83;
  }
  if (*a6 == 33 && v16)
  {
    if (a5)
    {
      unsigned int v18 = v16 - a5;
      BOOL v19 = a3[v16 - a5] != 0;
    }
    else
    {
      BOOL v19 = 1;
      unsigned int v18 = *a4;
    }
    *a6 = 32;
    if (v18 >= 2 && v19 && v18 + 1 <= v16)
    {
      uint64_t v21 = CSSymbolicatorGetSymbolWithAddressAtTime(a1, a2, (uint64_t)*a3, v17);
      uint64_t v23 = v22;
      if (!CSIsNull((char)v21, v22))
      {
        unint64_t v24 = CSSymbolGetRange((uint64_t)v21, v23);
        unint64_t v60 = v25;
        uint64_t InstructionData = CSSymbolGetInstructionData((uint64_t)v21, v23);
        if (InstructionData)
        {
          uint64_t v59 = InstructionData;
          uint64_t v27 = CSSymbolicatorGetArchitecture(a1, a2);
          unint64_t v63 = 0;
          uint64_t v65 = 0;
          long long v28 = (const char *)a9;
          if (a9) {
            long long v28 = *(const char **)(a9 + 8);
          }
          if (ScanInstructionsForMissingSecondFrameLocation_Intel(a1, a2, v27 == 16777223, (uint64_t)*a3, v59, v60, (unint64_t)*a3 - v24, &v63, &v65, (char)v21, SHIDWORD(v21), v23, v28))
          {
            if (v63 >= a5) {
              uint64_t v29 = -1;
            }
            else {
              uint64_t v29 = (uint64_t)*(&a3[v63] + *a4 - a5);
            }
            memmove(a3 + 2, a3 + 1, 8 * (v18 - 1));
            a3[1] = (tree *)v29;
            ++v18;
          }
        }
      }
    }
    if (v18 >= 2 && a8)
    {
      uint64_t v54 = a3 + 1;
      uint64_t v55 = v18 - 1;
      do
      {
        if (*v54 != -1) {
          --*v54;
        }
        ++v54;
        --v55;
      }
      while (v55);
    }
    unsigned int v16 = v18;
  }
LABEL_83:
  unsigned int v56 = v16 + 1;
  uint64_t v57 = v16;
  while (v57 * 8)
  {
    uint64_t v58 = a3[v57 - 1];
    --v56;
    --v57;
    if (v58) {
      goto LABEL_88;
    }
  }
  unsigned int v56 = 0;
LABEL_88:
  *a4 = v56;
}

void sub_1B9055064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18)
{
}

uint64_t ScanInstructionsForMissingSecondFrameLocation_Intel(char a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, void *a8, void *a9, char a10, int a11, char a12, const char *a13)
{
  BOOL v21 = CSIsNull(a1, a2);
  uint64_t result = 0;
  if (a7 >= a6) {
    return result;
  }
  BOOL v23 = !a9 || a8 == 0;
  if (v23 || v21) {
    return result;
  }
  unint64_t v25 = a7;
  if (a3)
  {
    unint64_t v25 = a7;
    if (*(unsigned char *)(a5 + a7) == 72)
    {
      unint64_t v25 = a7 + 1;
      if (a7 + 1 >= a6) {
        return 0;
      }
    }
  }
  uint64_t result = 0;
  unsigned int v26 = *(unsigned __int8 *)(a5 + v25);
  if (v26 <= 0x8A)
  {
    if (v26 == 85)
    {
LABEL_45:
      *a8 = 0;
      uint64_t result = 1;
      *a9 = 1;
      return result;
    }
    if (v26 != 115)
    {
      if (v26 != 137) {
        return result;
      }
      unint64_t v27 = v25 + 1;
      if (v27 >= a6 || *(unsigned __int8 *)(a5 + v27) != 229) {
        return 0;
      }
LABEL_36:
      uint64_t result = 1;
      *a8 = 1;
      *a9 = 2;
      return result;
    }
    if (a3)
    {
      uint64_t v42 = 0;
      if (a7 < 2)
      {
        if (!a13) {
          return 0;
        }
        if (mapped_memory_read(a13, (tree *)(a4 - 2), 2, &v42)) {
          return 0;
        }
        long long v28 = v42;
        if (!v42) {
          return 0;
        }
      }
      else
      {
        long long v28 = (unsigned char *)(a7 + a5 - 2);
        uint64_t v42 = v28;
        if (a7 + a5 == 2) {
          return 0;
        }
      }
      if (*v28 != 15 || v28[1] != 5) {
        return 0;
      }
      char SymbolWithAddressAtTime = a10;
      char v29 = a12;
      if (CSIsNull(a10, a12))
      {
        char SymbolWithAddressAtTime = CSSymbolicatorGetSymbolWithAddressAtTime(a1, a2, a4, 0x8000000000000000);
        char v29 = v31;
      }
      if (CSIsNull(SymbolWithAddressAtTime, v29)) {
        return 0;
      }
      char SymbolOwner = CSSymbolGetSymbolOwner(SymbolWithAddressAtTime, v29);
      uint64_t v34 = v33;
      if (CSIsNull(SymbolOwner, v33)) {
        return 0;
      }
      Name = (const char *)CSSymbolOwnerGetName(SymbolOwner, v34);
      unint64_t v36 = "libsystem_kernel.dylib";
    }
    else
    {
      uint64_t v42 = 0;
      if (a7 < 5)
      {
        if (!a13) {
          return 0;
        }
        if (mapped_memory_read(a13, (tree *)(a4 - 5), 5, &v42)) {
          return 0;
        }
        unsigned int v38 = v42;
        if (!v42) {
          return 0;
        }
      }
      else
      {
        unsigned int v38 = (unsigned __int8 *)(a7 + a5 - 5);
        uint64_t v42 = v38;
        if (a7 + a5 == 5) {
          return 0;
        }
      }
      if (*v38 != 232) {
        return 0;
      }
      uint64_t v39 = *(int *)(v38 + 1);
      if ((int)v39 < 0) {
        v39 |= 0xFFFFFFFF00000000;
      }
      uint64_t v40 = CSSymbolicatorGetSymbolWithAddressAtTime(a1, a2, v39 + a4, 0x8000000000000000);
      Name = CSSymbolGetName((uint64_t)v40, v41);
      if (!Name) {
        return 0;
      }
      unint64_t v36 = "_sysenter_trap";
    }
    if (!strcmp(Name, v36)) {
      goto LABEL_45;
    }
    return 0;
  }
  if (v26 == 139)
  {
    unint64_t v37 = v25 + 1;
    if (v37 < a6 && *(unsigned __int8 *)(a5 + v37) == 236) {
      goto LABEL_36;
    }
    return 0;
  }
  if (v26 == 195 || v26 == 203)
  {
    *a8 = 0;
    uint64_t result = 1;
    *a9 = 1;
  }
  return result;
}

BOOL _IsValidPC(const char *a1, tree *a2)
{
  BOOL result = 0;
  if ((unint64_t)a2 >= 0x800)
  {
    if (!a1) {
      return 1;
    }
    v5[1] = v2;
    v5[2] = v3;
    v5[0] = 0;
    if (!mapped_memory_read(a1, a2, 4, v5)) {
      return 1;
    }
  }
  return result;
}

uint64_t _IsValidLinkRegister(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t InstructionData = CSSymbolGetInstructionData(a4, a5);
  if (InstructionData)
  {
    uint64_t v12 = InstructionData;
    MangledName = (const char *)CSSymbolGetMangledName(a4, a5);
    if (MangledName && [MangledName isEqualToString:@"_objc_msgSend"])
    {
      char v14 = 1;
    }
    else
    {
      char v14 = 1;
      if (a3) {
        char v15 = 1;
      }
      else {
        char v15 = 2;
      }
      unint64_t v16 = ((a3 & 0xFFFFFFFFFFFFFFFELL) - a1) >> v15;
      if (v16 >= 8) {
        unint64_t v16 = 8;
      }
      if (v16)
      {
        uint64_t v17 = 0;
        int v18 = 0;
        if (a3) {
          char v19 = 1;
        }
        else {
          char v19 = 2;
        }
        unint64_t v20 = a1 + (v16 << v19);
        do
        {
          if (a6)
          {
            int v21 = *(_DWORD *)(v12 + 4 * v17);
            v18 |= (v21 & 0xFE407FFF) == -1476363267;
            BOOL v22 = (v21 & 0x1C000000) == 0x10000000 || (v21 & 0xE000000) == 167772160;
            if (!v22 || (*(_DWORD *)(v12 + 4 * v17) & 0x1Fu) - 29 >= 2) {
              goto LABEL_46;
            }
            char v14 = 0;
          }
          else
          {
            if (a3)
            {
              int v31 = *(unsigned __int16 *)(v12 + 2 * v17);
              BOOL v22 = v31 == 18031;
              v18 |= (~v31 & 0xB500) == 0;
              int v32 = v31 & 0xFD87;
              int v33 = v31 & 0xFF00;
              BOOL v30 = v22 || v33 == 44800 || v32 == 17542;
              goto LABEL_42;
            }
            unsigned int v23 = *(_DWORD *)(v12 + 4 * v17);
            if (v23 >> 28 != 15)
            {
              BOOL v25 = (v23 & 0xE5F4000) == 0x80D4000 || (v23 & 0xC5FF000) == 69066752;
              v18 |= v25;
              int v26 = v23 & 0xC00F000;
              int v27 = v23 & 0xC0FF000;
              int v28 = v23 & 0xFFFFFFF;
              BOOL v30 = v27 == 880640 || v28 == 27291661 || v26 == 57344;
LABEL_42:
              char v35 = !v30;
              v14 &= v35;
LABEL_46:
              if (v18 & v14) {
                v14 &= v20 >= (a3 & 0xFFFFFFFFFFFFFFFELL);
              }
            }
          }
          ++v17;
        }
        while (v16 != v17);
      }
    }
  }
  else
  {
    char v14 = 0;
  }
  return v14 & 1;
}

uint64_t _GetThumbInstruction(const char *a1, uint64_t a2, tree *a3)
{
  uint64_t v5 = *(void **)(a2 + 8);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = (void *)(a2 + 8);
  do
  {
    unint64_t v7 = v5[4];
    BOOL v8 = v7 >= (unint64_t)a3;
    if (v7 >= (unint64_t)a3) {
      BOOL v9 = v5;
    }
    else {
      BOOL v9 = v5 + 1;
    }
    if (v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = (void *)*v9;
  }
  while (*v9);
  if (v6 != (void *)(a2 + 8) && v6[4] <= (unint64_t)a3)
  {
    return (unsigned __int16)*((_DWORD *)v6 + 10);
  }
  else
  {
LABEL_12:
    char v14 = 0;
    if (mapped_memory_read(a1, a3, 2, &v14))
    {
      LOWORD(v10) = 0;
    }
    else
    {
      unint64_t v11 = (unsigned __int16)*v14;
      v13[0] = (unint64_t)a3;
      v13[1] = v11;
      std::__tree<std::__value_type<unsigned long long,unsigned int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned int>>((uint64_t **)a2, v13, (uint64_t)v13);
      LOWORD(v10) = *v14;
    }
  }
  return (unsigned __int16)v10;
}

void std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned long long,dispatch_queue_info>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,dispatch_queue_info>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,dispatch_queue_info>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x50uLL);
    uint64_t v12 = **a4;
    v11[9] = 0;
    *((_DWORD *)v11 + 16) = 0;
    void v11[6] = 0;
    void v11[7] = 0;
    void v11[4] = v12;
    v11[5] = 0;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (char *)operator new(0x58uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((void *)v11 + 10) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t ___ZL19translate_aot_frame10_CSTypeRefPvyPy_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a1 + 48);
  BOOL v5 = v4 < a3 || v4 >= a4 + a3;
  uint64_t v6 = v5;
  if (!v5 && aot_get_x86_address())
  {
    **(void **)(a1 + 64) = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return v6;
}

void _create_thread_state(sampling_context_t *a1)
{
}

void sub_1B9055930(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9D1CD0](v1, 0x1081C40FB5696BALL);
  _Unwind_Resume(a1);
}

uint64_t ___ZL19CheckForSecondFrameP18sampling_context_tP8CSThread_block_invoke(uint64_t a1)
{
  uint64_t result = CheckForSecondFrame2(*(void *)(a1 + 40), *(CSThread **)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CheckForSecondFrame2(uint64_t result, CSThread *this)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t LR = CSThread::GetLR(this, 0);
  unint64_t v32 = LR;
  uint64_t Architecture = CSSymbolicatorGetArchitecture(*(void *)(v3 + 24), *(void *)(v3 + 32));
  BOOL IsX86_64 = CSArchitectureIsX86_64(Architecture);
  if (*(unsigned char *)(v3 + 168))
  {
    if (Architecture) {
      int v7 = IsX86_64;
    }
    else {
      int v7 = 1;
    }
    if (CSThread::GetRegisterValue(this, "x18", 0, 0)) {
      int v8 = 0;
    }
    else {
      int v8 = v7;
    }
    if (LR) {
      goto LABEL_13;
    }
  }
  else
  {
    int v8 = 0;
    if (LR) {
      goto LABEL_13;
    }
  }
  if (!v8) {
    return 0;
  }
LABEL_13:
  uint64_t PC = (tree *)CSThread::GetPC(this, -1);
  if ((*(unsigned char *)(v3 + 160) & 8) != 0)
  {
    uint64_t v10 = CSRangeOfDyldSharedCacheInCurrentProcess();
    if ((unint64_t)PC - v10 >= v11) {
      return 0;
    }
  }
  uint64_t result = _IsValidPC(*(const char **)(v3 + 8), PC);
  if (!result) {
    return result;
  }
  if (!v8) {
    goto LABEL_48;
  }
  char v35 = 0;
  unint64_t v12 = CSThread::GetPC(this, -1);
  if (mapped_memory_read(*(const char **)(v3 + 8), (tree *)(v12 - 4), 8, &v35) || !v35) {
    goto LABEL_48;
  }
  uint64_t v13 = 0;
  int v15 = *v35;
  int v14 = v35[1];
  unint64_t v16 = "x21";
  if (v14 > -698416385)
  {
    if (v14 > -132150140)
    {
      if (v14 == -132150139) {
        goto LABEL_42;
      }
      int v17 = -129989482;
LABEL_31:
      if (v14 == v17) {
        goto LABEL_42;
      }
LABEL_32:
      if (v15 == -698416384 && (v14 & 0x94000000) == 0x94000000
        || v15 == -887684391 && (v14 & 0xB5000000) == 0xB5000000)
      {
        goto LABEL_36;
      }
      goto LABEL_27;
    }
    if (v14 != -698416384)
    {
      int v17 = -132153211;
      goto LABEL_31;
    }
LABEL_36:
    uint64_t v13 = 0;
    unint64_t v16 = "x23";
    goto LABEL_42;
  }
  if (v14 == -1463721289 || v14 == -1442577435)
  {
LABEL_42:
    RegisterCFNumberRef Value = (tree *)CSThread::GetRegisterValue(this, v16, 0, 0);
    mapped_memory_read_pointer(*(void *)(v3 + 8), RegisterValue, &v32);
    if (v32 + 1 >= 2)
    {
      CSThread::SetPC(this, v32);
      uint64_t SP = CSThread::GetSP(this, 0);
      CSThread::SetSP(this, SP + v13);
      return 1;
    }
    return 0;
  }
  if (v14 != -887684391) {
    goto LABEL_32;
  }
  if (v15 == -1463721289) {
    goto LABEL_36;
  }
LABEL_27:
  uint64_t FP = CSThread::GetFP(this, 0);
  if (CSThread::GetSP(this, 0) - FP == 8)
  {
    uint64_t v13 = -8;
LABEL_41:
    unint64_t v16 = "x21";
    goto LABEL_42;
  }
  uint64_t v34 = -1;
  mapped_memory_read_pointer(*(void *)(v3 + 8), (tree *)(*((void *)this + 2) + FP), &v34);
  uint64_t v19 = CSThread::GetLR(this, 0);
  unint64_t v20 = (tree *)CSThread::GetRegisterValue(this, "x21", 0, 0);
  uint64_t v33 = -1;
  mapped_memory_read_pointer(*(void *)(v3 + 8), v20, &v33);
  if ((unint64_t)(v33 + 1) >= 2 && v33 != v19 && v33 != v34
    || (unint64_t v23 = CSSymbolicatorTranslateFromNativeAddress(*(void *)(v3 + 24), *(void *)(v3 + 32), v12)) != 0
    && (RegionWithAddressAtTime = CSSymbolicatorGetRegionWithAddressAtTime(*(void *)(v3 + 24), *(void *)(v3 + 32), v23, 0x8000000000000000), (Name = CSRegionGetName(RegionWithAddressAtTime, v25)) != 0)&& ((int v27 = Name, !strncmp(Name, "__TEXT __stubs", 0xFuLL)) || !strncmp(v27, "__TEXT __stub_helper", 0x15uLL)))
  {
    uint64_t v13 = 0;
    goto LABEL_41;
  }
LABEL_48:
  if (CSIsNull(*(void *)(v3 + 24), *(void *)(v3 + 32))) {
    return 0;
  }
  char SymbolWithAddressAtTime = CSSymbolicatorGetSymbolWithAddressAtTime(*(void *)(v3 + 24), *(void *)(v3 + 32), (uint64_t)PC, 0x8000000000000000);
  uint64_t v30 = v29;
  if (CSIsNull((char)SymbolWithAddressAtTime, v29)) {
    return 0;
  }
  uint64_t result = CSSymbolGetRange((uint64_t)SymbolWithAddressAtTime, v30);
  if (result)
  {
    uint64_t result = _IsValidLinkRegister(result, v31, (uint64_t)PC, (uint64_t)SymbolWithAddressAtTime, v30, *((unsigned __int8 *)this + 9));
    if (result)
    {
      CSThread::SetPC(this, LR);
      return 1;
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned long long,unsigned int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned int>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  BOOL v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        BOOL v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      BOOL v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = operator new(0x30uLL);
    void v10[4] = *(void *)a3;
    *((_DWORD *)v10 + 10) = *(_DWORD *)(a3 + 8);
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void TMMapSymbolOwnerData::TMMapSymbolOwnerData(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, TMMapArchive *a3)
{
  *((void *)this + 1) = 1;
  *((void *)this + 2) = 850045863;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(void *)this = &unk_1F12C9DA0;
  *((void *)this + 11) = a3;
  *((_OWORD *)this + 6) = 0u;
  uint64_t v6 = (char *)this + 96;
  unint64_t v7 = (char *)this + 120;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 1065353216;
  *((void *)this + 33) = 850045863;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 850045863;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 21) = 0u;
  unint64_t v8 = *((unsigned int *)a3 + 2);
  unint64_t v16 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  std::vector<MMapSegment>::__init_with_size[abi:ne180100]<MMapSegment const*,MMapSegment const*>(&v16, (char *)a3 + 96, (uint64_t)a3 + 32 * v8 + 96, v8);
  unint64_t v9 = (char *)a2 + 32;
  create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>((uint64_t)v9, (uint64_t)&v16, 1, &__p);
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>(&v14, __p, (uint64_t)v13, 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)__p) >> 3));
  uint64_t v10 = *(void **)v6;
  if (*(void *)v6)
  {
    *((void *)this + 13) = v10;
    operator delete(v10);
    *(void *)uint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
  }
  *((_OWORD *)this + 6) = v14;
  *((void *)this + 14) = v15;
  uint64_t v15 = 0;
  long long v14 = 0uLL;
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>((uint64_t)&v16, (uint64_t)v9, 1, &__p);
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>(&v14, __p, (uint64_t)v13, 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)__p) >> 3));
  unint64_t v11 = *(void **)v7;
  if (*(void *)v7)
  {
    *((void *)this + 16) = v11;
    operator delete(v11);
    *(void *)unint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
  }
  *(_OWORD *)((char *)this + 120) = v14;
  *((void *)this + 17) = v15;
  uint64_t v15 = 0;
  long long v14 = 0uLL;
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  atomic_store(*((_DWORD *)a3 + 7), (unsigned int *)this + 3);
  if (v16)
  {
    int v17 = v16;
    operator delete(v16);
  }
}

void sub_1B9056064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  CSCppDeferredDemangler::~CSCppDeferredDemangler(v19);
  unint64_t v23 = *v20;
  if (*v20)
  {
    v17[16] = v23;
    operator delete(v23);
  }
  unint64_t v24 = *v21;
  if (*v21)
  {
    v17[13] = v24;
    operator delete(v24);
  }
  *int v17 = &unk_1F12C6398;
  std::mutex::~mutex(v18);
  _Unwind_Resume(a1);
}

void create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v7 = *(const void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = v8 - *(void *)a1;
  if (v8 != *(void *)a1 && *(void *)(a2 + 8) != *(void *)a2)
  {
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>(&v48, v7, v8, v9 >> 5);
    unint64_t v11 = *(const void **)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    unint64_t v13 = (v12 - *(void *)a2) >> 5;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    std::string __p = 0;
    std::vector<MMapSegment>::__init_with_size[abi:ne180100]<std::__wrap_iter<MMapSegment const*>,std::__wrap_iter<MMapSegment const*>>(&__p, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 8) - *(void *)a1;
    if (v14 != 32 && *(void *)(a2 + 8) - *(void *)a2 != 32)
    {
      unint64_t v15 = 126 - 2 * __clz((v49 - (unsigned char *)v48) >> 5);
      if (v49 == v48) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v15;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>((unint64_t *)v48, (unint64_t *)v49, (uint64_t)&v51, v16, 1);
      unint64_t v17 = 126 - 2 * __clz((v46 - (unsigned char *)__p) >> 5);
      if (v46 == __p) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v17;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*,false>((char *)__p, (long long *)v46, (uint64_t)&v51, v18, 1);
      uint64_t v14 = *(void *)(a1 + 8) - *(void *)a1;
    }
    uint64_t v19 = (unint64_t *)v48;
    unint64_t v20 = (const char *)__p;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve(a4, v14 >> 5);
    int v21 = v49;
    if (v19 != (unint64_t *)v49)
    {
      BOOL v22 = v46;
      if (v20 != v46)
      {
        while (1)
        {
          unint64_t v23 = (const char *)v19[3];
          if (!v23) {
            unint64_t v23 = (const char *)v19[2];
          }
          if (!strncmp(v20 + 16, v23, 0x10uLL)) {
            goto LABEL_23;
          }
          if (is_relocation_skippable(v23))
          {
            v19 += 4;
            if (v19 == (unint64_t *)v21) {
              break;
            }
          }
          else
          {
            if (is_relocation_skippable(v20 + 16))
            {
              if (v19 == (unint64_t *)v21) {
                break;
              }
              v20 += 32;
              goto LABEL_38;
            }
LABEL_23:
            uint64_t v24 = *(void *)v20;
            unint64_t v25 = *v19;
            unint64_t v26 = v19[1];
            unint64_t v27 = *(void *)v20 - *v19;
            uint64_t v29 = (unint64_t *)a4[1];
            unint64_t v28 = (unint64_t)a4[2];
            if ((unint64_t)v29 >= v28)
            {
              unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (unsigned char *)*a4) >> 3);
              unint64_t v32 = v31 + 1;
              if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)*a4) >> 3);
              if (2 * v33 > v32) {
                unint64_t v32 = 2 * v33;
              }
              if (v33 >= 0x555555555555555) {
                unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v34 = v32;
              }
              char v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)(a4 + 2), v34);
              unint64_t v37 = (unint64_t *)&v35[24 * v31];
              *unint64_t v37 = v25;
              v37[1] = v26;
              v37[2] = v27;
              uint64_t v39 = (char *)*a4;
              unsigned int v38 = (char *)a4[1];
              uint64_t v40 = v37;
              if (v38 != *a4)
              {
                do
                {
                  long long v41 = *(_OWORD *)(v38 - 24);
                  *(v40 - 1) = *((void *)v38 - 1);
                  *(_OWORD *)(v40 - 3) = v41;
                  v40 -= 3;
                  v38 -= 24;
                }
                while (v38 != v39);
                unsigned int v38 = (char *)*a4;
              }
              uint64_t v30 = (char *)(v37 + 3);
              *a4 = v40;
              a4[1] = v37 + 3;
              a4[2] = &v35[24 * v36];
              if (v38) {
                operator delete(v38);
              }
            }
            else
            {
              *uint64_t v29 = v25;
              v29[1] = v26;
              uint64_t v30 = (char *)(v29 + 3);
              v29[2] = v27;
            }
            a4[1] = v30;
            a3 |= v24 != v25;
            v19 += 4;
            int v21 = v49;
            if (v19 == (unint64_t *)v49) {
              break;
            }
            v20 += 32;
            BOOL v22 = v46;
LABEL_38:
            if (v20 == v22) {
              break;
            }
          }
        }
      }
    }
    if (a3)
    {
      uint64_t v42 = (unint64_t *)a4[1];
      unint64_t v43 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (unsigned char *)*a4) >> 3));
      if (v42 == *a4) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = v43;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,false>((uint64_t)*a4, v42, (uint64_t)&v51, v44, 1);
    }
    else
    {
      a4[1] = *a4;
    }
    if (__p)
    {
      uint64_t v46 = (char *)__p;
      operator delete(__p);
    }
    if (v48)
    {
      uint64_t v49 = (char *)v48;
      operator delete(v48);
    }
  }
}

void sub_1B9056434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v7 = *(const void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = v8 - *(void *)a1;
  if (v8 != *(void *)a1 && *(void *)(a2 + 8) != *(void *)a2)
  {
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    std::vector<MMapSegment>::__init_with_size[abi:ne180100]<std::__wrap_iter<MMapSegment const*>,std::__wrap_iter<MMapSegment const*>>(&v49, v7, v8, v9 >> 5);
    unint64_t v11 = *(const void **)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    unint64_t v13 = (v12 - *(void *)a2) >> 5;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    std::string __p = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>(&__p, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 8) - *(void *)a1;
    if (v14 != 32 && *(void *)(a2 + 8) - *(void *)a2 != 32)
    {
      unint64_t v15 = 126 - 2 * __clz((v50 - (unsigned char *)v49) >> 5);
      if (v50 == v49) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v15;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,MMapSegment*,false>((char *)v49, (long long *)v50, (uint64_t)&v52, v16, 1);
      unint64_t v17 = 126 - 2 * __clz((v47 - (unsigned char *)__p) >> 5);
      if (v47 == __p) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v17;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,CSCppSegmentRange*,false>((unint64_t *)__p, (unint64_t *)v47, (uint64_t)&v52, v18, 1);
      uint64_t v14 = *(void *)(a1 + 8) - *(void *)a1;
    }
    uint64_t v19 = (const char *)v49;
    unint64_t v20 = (unint64_t *)__p;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve(a4, v14 >> 5);
    int v21 = v50;
    if (v19 != v50)
    {
      BOOL v22 = v47;
      if (v20 != (unint64_t *)v47)
      {
        while (2)
        {
          unint64_t v23 = (const char *)v20[3];
          while (1)
          {
            uint64_t v24 = v23;
            if (!v23) {
              uint64_t v24 = (const char *)v20[2];
            }
            if (!strncmp(v24, v19 + 16, 0x10uLL)) {
              break;
            }
            if (!is_relocation_skippable(v19 + 16))
            {
              if (!v23) {
                unint64_t v23 = (const char *)v20[2];
              }
              if (is_relocation_skippable(v23))
              {
                if (v19 == v21) {
                  goto LABEL_42;
                }
                v20 += 4;
                goto LABEL_41;
              }
              break;
            }
            v19 += 32;
            if (v19 == v21) {
              goto LABEL_42;
            }
          }
          unint64_t v25 = *v20;
          uint64_t v26 = *(void *)v19;
          uint64_t v27 = *((void *)v19 + 1);
          unint64_t v28 = *v20 - *(void *)v19;
          uint64_t v30 = (char *)a4[1];
          unint64_t v29 = (unint64_t)a4[2];
          if ((unint64_t)v30 >= v29)
          {
            unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v30 - (unsigned char *)*a4) >> 3);
            unint64_t v33 = v32 + 1;
            if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)*a4) >> 3);
            if (2 * v34 > v33) {
              unint64_t v33 = 2 * v34;
            }
            if (v34 >= 0x555555555555555) {
              unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v35 = v33;
            }
            uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)(a4 + 2), v35);
            unsigned int v38 = &v36[24 * v32];
            *(void *)unsigned int v38 = v26;
            *((void *)v38 + 1) = v27;
            *((void *)v38 + 2) = v28;
            uint64_t v40 = (char *)*a4;
            uint64_t v39 = (char *)a4[1];
            long long v41 = v38;
            if (v39 != *a4)
            {
              do
              {
                long long v42 = *(_OWORD *)(v39 - 24);
                *((void *)v41 - 1) = *((void *)v39 - 1);
                *(_OWORD *)(v41 - 24) = v42;
                v41 -= 24;
                v39 -= 24;
              }
              while (v39 != v40);
              uint64_t v39 = (char *)*a4;
            }
            unint64_t v31 = v38 + 24;
            *a4 = v41;
            a4[1] = v38 + 24;
            a4[2] = &v36[24 * v37];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *(void *)uint64_t v30 = v26;
            *((void *)v30 + 1) = v27;
            unint64_t v31 = v30 + 24;
            *((void *)v30 + 2) = v28;
          }
          a4[1] = v31;
          a3 |= v25 != v26;
          v19 += 32;
          int v21 = v50;
          if (v19 == v50) {
            break;
          }
          v20 += 4;
          BOOL v22 = v47;
LABEL_41:
          if (v20 != (unint64_t *)v22) {
            continue;
          }
          break;
        }
      }
    }
LABEL_42:
    if (a3)
    {
      unint64_t v43 = (unint64_t *)a4[1];
      unint64_t v44 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (unsigned char *)*a4) >> 3));
      if (v43 == *a4) {
        uint64_t v45 = 0;
      }
      else {
        uint64_t v45 = v44;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,false>((uint64_t)*a4, v43, (uint64_t)&v52, v45, 1);
    }
    else
    {
      a4[1] = *a4;
    }
    if (__p)
    {
      uint64_t v47 = (char *)__p;
      operator delete(__p);
    }
    if (v49)
    {
      uint64_t v50 = (char *)v49;
      operator delete(v49);
    }
  }
}

void sub_1B90567D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL TMMapSymbolOwnerData::is_string_pointer_valid(TMMapArchive **this, char *a2)
{
  return TMMapArchive::is_pointer_within_strtab(this[11], a2);
}

BOOL TMMapArchive::is_pointer_within_strtab(TMMapArchive *this, char *a2)
{
  return (char *)this
       + 32 * *((_DWORD *)this + 2)
       + 24 * *((_DWORD *)this + 3)
       + (24 * *((_DWORD *)this + 4))
       + (unint64_t)(4 * *((_DWORD *)this + 4))
       + (36 * *((_DWORD *)this + 5))
       + (20 * *((_DWORD *)this + 6))
       + *((unsigned int *)this + 22)
       + *((unsigned int *)this + 20)
       + 96 <= a2
      && TMMapArchive::strtab_end(this) > (unint64_t)a2;
}

uint64_t TMMapSymbolOwnerData::convert_archive_address_to_real_address(TMMapSymbolOwnerData *this, unint64_t a2, unint64_t *a3)
{
  return TThreadsafeAddressRelocator<Pointer64>::relocate((void *)this + 15, a2, a3);
}

uint64_t TMMapSymbolOwnerData::regions_in_address_range(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a1[11] + 12)) {
    BOOL v5 = a3 == -1;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  unint64_t v7 = (unint64_t *)a1[12];
  uint64_t v8 = (unint64_t *)a1[13];
  if (v7 == v8) {
    return 0;
  }
  uint64_t v12 = 0;
  if (__CFADD__(a4, a3)) {
    unint64_t v13 = -1;
  }
  else {
    unint64_t v13 = a4 + a3;
  }
  do
  {
    unint64_t v14 = *v7;
    if (*v7 < v13)
    {
      unint64_t v15 = v7[1] + v14;
      if (a3 < v15)
      {
        if (v14 <= a3) {
          unint64_t v16 = a3;
        }
        else {
          unint64_t v16 = *v7;
        }
        if (v13 >= v15) {
          unint64_t v17 = v7[1] + v14;
        }
        else {
          unint64_t v17 = v13;
        }
        if (v17 != v16) {
          v12 += TMMapSymbolOwnerData::regions_in_real_address_range((uint64_t)a1, a2, v16, v17 - v16, a5);
        }
      }
    }
    v7 += 3;
  }
  while (v7 != v8);
  return v12;
}

unint64_t TMMapSymbolOwnerData::regions_in_real_address_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v11 = 0;
  int v9 = TThreadsafeAddressRelocator<Pointer64>::relocate((void *)(a1 + 96), a3, &v11);
  unint64_t result = 0;
  if (v9) {
    return TMMapSymbolOwnerData::regions_in_archive_address_range(a1, a2, v11, a4, a5);
  }
  return result;
}

uint64_t TMMapSymbolOwnerData::footprint(TMMapSymbolOwnerData *this)
{
  return *(unsigned int *)(*((void *)this + 11) + 4) + 416;
}

unint64_t TMMapSymbolOwnerData::regions_in_archive_address_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a1 + 88);
  unsigned int v8 = *(_DWORD *)(v7 + 12);
  unint64_t v13 = v7 + (32 * *(_DWORD *)(v7 + 8)) + 96;
  unint64_t v12 = v13 + 24 * v8;
  if (!find_lower_and_upper_bounds_of_range<TMMapRegionImpl<Pointer64>>(a3, a4, &v13, &v12)) {
    return 0;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v13) >> 3);
  if (a5)
  {
    uint64_t v10 = a2 | 4;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, v10);
      v13 += 24;
    }
    while (v13 < v12);
  }
  return v9;
}

BOOL find_lower_and_upper_bounds_of_range<TMMapRegionImpl<Pointer64>>(unint64_t a1, uint64_t a2, void *a3, void *a4)
{
  unint64_t v4 = (void *)*a3;
  BOOL v5 = (void *)*a4;
  uint64_t v6 = (void *)*a3;
  if (*a4 != *a3)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a4 - *a3) >> 3);
    uint64_t v6 = (void *)*a3;
    do
    {
      unint64_t v8 = v7 >> 1;
      unint64_t v9 = &v6[3 * (v7 >> 1)];
      unint64_t v11 = *v9;
      uint64_t v10 = v9 + 3;
      v7 += ~(v7 >> 1);
      if (a1 < v11) {
        unint64_t v7 = v8;
      }
      else {
        uint64_t v6 = v10;
      }
    }
    while (v7);
  }
  while (v6 != v4)
  {
    uint64_t v12 = *(v6 - 3);
    unint64_t v13 = *(v6 - 2);
    v6 -= 3;
    if (a1 - v12 >= v13)
    {
      unint64_t v4 = v6 + 3;
      break;
    }
  }
  *a3 = v4;
  if (v5 != v4)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v5 - v4);
    BOOL v5 = v4;
    do
    {
      unint64_t v15 = v14 >> 1;
      unint64_t v16 = &v5[3 * (v14 >> 1)];
      unint64_t v18 = *v16;
      unint64_t v17 = v16 + 3;
      v14 += ~(v14 >> 1);
      if (a1 + a2 - 1 < v18) {
        unint64_t v14 = v15;
      }
      else {
        BOOL v5 = v17;
      }
    }
    while (v14);
  }
  *a4 = v5;
  return *a3 != (void)v5;
}

uint64_t TMMapSymbolOwnerData::symbols(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD **)(a1 + 88);
  uint64_t v4 = v3[4];
  if (a3 && v4)
  {
    uint64_t v6 = (uint64_t)v3 + 32 * v3[2] + (24 * v3[3]) + 96;
    uint64_t v7 = a2 | 5;
    uint64_t v8 = v3[4];
    do
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, v7, v6);
      v6 += 24;
      --v8;
    }
    while (v8);
  }
  return v4;
}

uint64_t TMMapSymbolOwnerData::symbols_for_name_in_archive(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, int a5)
{
  __s2 = a3;
  unint64_t v9 = *(TMMapArchive **)(a1 + 88);
  int v10 = *((_DWORD *)v9 + 4);
  unint64_t v11 = (_DWORD *)((char *)v9
                 + 32 * *((_DWORD *)v9 + 2)
                 + 24 * *((_DWORD *)v9 + 3)
                 + (24 * v10)
                 + (unint64_t)(36 * *((_DWORD *)v9 + 5))
                 + (20 * *((_DWORD *)v9 + 6))
                 + 96);
  uint64_t v12 = (_DWORD *)((char *)v11 + *((unsigned int *)v9 + 22));
  unint64_t v13 = (TMMapArchive *)((char *)v12 + (4 * v10) + (unint64_t)*((unsigned int *)v9 + 20));
  v25[0] = v13;
  v25[1] = v9;
  unint64_t v14 = std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByName &,unsigned int *,unsigned int *,char const*,std::__identity>(v11, v12, (const char **)&__s2, v25);
  unint64_t v16 = v14;
  unint64_t v17 = v15;
  if (a5)
  {
    if (v14 != v15)
    {
      uint64_t v18 = 0;
      uint64_t v19 = a2 | 5;
      unint64_t v20 = v14;
      do
      {
        int v21 = (char *)v16 - *v20;
        if (!TMMapArchive::is_pointer_within_strtab(*(TMMapArchive **)(a1 + 88), (char *)v13 + *((unsigned int *)v21 + 3))|| strcmp((const char *)v13 + *((unsigned int *)v21 + 3), __s2))
        {
          break;
        }
        if (a4) {
          (*(void (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, v19, v21);
        }
        ++v18;
        ++v20;
        ++v16;
      }
      while (v20 != v17);
      return v18;
    }
    return 0;
  }
  if ((char *)v15 - (char *)v14 != 4) {
    return v15 - v14;
  }
  BOOL v22 = (char *)v14 - *v14;
  if (!TMMapArchive::is_pointer_within_strtab(*(TMMapArchive **)(a1 + 88), (char *)v13 + *((unsigned int *)v22 + 3))
    || strcmp((const char *)v13 + *((unsigned int *)v22 + 3), __s2))
  {
    return 0;
  }
  if (a4) {
    (*(void (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, a2 | 5, v22);
  }
  return 1;
}

void sub_1B9056E40(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B9056DE8);
  }
  _Unwind_Resume(a1);
}

uint64_t TMMapSymbolOwnerData::symbols_for_name_with_deferred_demangling(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, int a5)
{
  unint64_t v9 = (CSCppDeferredDemangler *)(a1 + 144);
  CSCppDeferredDemangler::demangleAllConcreteSymbolsIfNeeded(a1 + 144, a1, a2);
  int v10 = CSCppDeferredDemangler::mmapSymbolAddressesForDemangledName(v9, a3);
  if (v10 == v11) {
    return 0;
  }
  uint64_t v12 = v10;
  unint64_t v13 = v11;
  uint64_t v14 = 0;
  unint64_t v15 = v10;
  do
  {
    ++v14;
    unint64_t v15 = (uint64_t **)*v15;
  }
  while (v15 != v11);
  if (a5)
  {
    if (v10 != v11)
    {
      uint64_t v16 = a2 | 5;
      do
      {
        if (a4) {
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(a4 + 16))(a4, v16, v12[4]);
        }
        uint64_t v12 = (uint64_t **)*v12;
      }
      while (v12 != v13);
    }
  }
  else if (a4 && v14 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(a4 + 16))(a4, a2 | 5, v10[4]);
  }
  return v14;
}

uint64_t TMMapSymbolOwnerData::symbols_for_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v8 = TMMapSymbolOwnerData::symbols_for_name_in_archive(a1, a2, a3, a4, 1);
  return TMMapSymbolOwnerData::symbols_for_name_with_deferred_demangling(a1, a2, a3, a4, 1) + v8;
}

uint64_t TMMapSymbolOwnerData::symbol_for_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t result = TMMapSymbolOwnerData::symbols_for_name_in_archive(a1, a2, a3, a4, 0);
  if (!result)
  {
    return TMMapSymbolOwnerData::symbols_for_name_with_deferred_demangling(a1, a2, a3, a4, 0);
  }
  return result;
}

uint64_t TMMapSymbolOwnerData::symbols_for_mangled_name_in_archive(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, int a5)
{
  __s2 = a3;
  unint64_t v9 = *(TMMapArchive **)(a1 + 88);
  int v10 = *((_DWORD *)v9 + 4);
  unint64_t v11 = (_DWORD *)((char *)v9
                 + 32 * *((_DWORD *)v9 + 2)
                 + 24 * *((_DWORD *)v9 + 3)
                 + (24 * v10)
                 + (unint64_t)(36 * *((_DWORD *)v9 + 5))
                 + (20 * *((_DWORD *)v9 + 6))
                 + *((unsigned int *)v9 + 22)
                 + 96);
  uint64_t v12 = (_DWORD *)((char *)v11 + (4 * v10));
  unint64_t v13 = (TMMapArchive *)((char *)v12 + *((unsigned int *)v9 + 20));
  v24[0] = v13;
  v24[1] = v9;
  uint64_t v14 = std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByMangledName &,unsigned int *,unsigned int *,char const*,std::__identity>(v11, v12, (const char **)&__s2, v24);
  uint64_t v16 = v14;
  if (a5)
  {
    if (v14 != v12)
    {
      uint64_t v17 = 0;
      uint64_t v18 = a2 | 5;
      uint64_t v19 = v14;
      do
      {
        unint64_t v20 = (char *)v16 - *v19;
        if (!TMMapArchive::is_pointer_within_strtab(*(TMMapArchive **)(a1 + 88), (char *)v13 + *((unsigned int *)v20 + 4))|| strcmp((const char *)v13 + *((unsigned int *)v20 + 4), __s2))
        {
          break;
        }
        if (a4) {
          (*(void (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, v18, v20);
        }
        ++v17;
        ++v19;
        ++v16;
      }
      while (v19 != v12);
      return v17;
    }
    return 0;
  }
  if (v15 - (void)v14 != 4) {
    return (v15 - (uint64_t)v14) >> 2;
  }
  int v21 = (char *)v14 - *v14;
  if (!TMMapArchive::is_pointer_within_strtab(*(TMMapArchive **)(a1 + 88), (char *)v13 + *((unsigned int *)v21 + 4))
    || strcmp((const char *)v13 + *((unsigned int *)v21 + 4), __s2))
  {
    return 0;
  }
  if (a4) {
    (*(void (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, a2 | 5, v21);
  }
  return 1;
}

void sub_1B90571FC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B90571A4);
  }
  _Unwind_Resume(a1);
}

uint64_t TMMapSymbolOwnerData::symbols_for_mangled_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  return TMMapSymbolOwnerData::symbols_for_mangled_name_in_archive(a1, a2, a3, a4, 1);
}

uint64_t TMMapSymbolOwnerData::symbol_for_mangled_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  return TMMapSymbolOwnerData::symbols_for_mangled_name_in_archive(a1, a2, a3, a4, 0);
}

uint64_t TMMapSymbolOwnerData::symbols_in_address_range(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a1[11] + 16)) {
    BOOL v5 = a3 == -1;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v7 = (unint64_t *)a1[12];
  uint64_t v8 = (unint64_t *)a1[13];
  if (v7 == v8) {
    return 0;
  }
  uint64_t v12 = 0;
  if (__CFADD__(a4, a3)) {
    unint64_t v13 = -1;
  }
  else {
    unint64_t v13 = a4 + a3;
  }
  do
  {
    unint64_t v14 = *v7;
    if (*v7 < v13)
    {
      unint64_t v15 = v7[1] + v14;
      if (a3 < v15)
      {
        if (v14 <= a3) {
          unint64_t v16 = a3;
        }
        else {
          unint64_t v16 = *v7;
        }
        if (v13 >= v15) {
          unint64_t v17 = v7[1] + v14;
        }
        else {
          unint64_t v17 = v13;
        }
        if (v17 != v16) {
          v12 += TMMapSymbolOwnerData::symbols_in_real_address_range((uint64_t)a1, a2, v16, v17 - v16, a5);
        }
      }
    }
    v7 += 3;
  }
  while (v7 != v8);
  return v12;
}

unint64_t TMMapSymbolOwnerData::symbols_in_real_address_range(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if (!*(_DWORD *)(*(void *)(a1 + 88) + 16)) {
    return 0;
  }
  unint64_t v11 = 0;
  if (!TThreadsafeAddressRelocator<Pointer64>::relocate((void *)(a1 + 96), a3, &v11)
    || v11 > 0xFFFFFFFE)
  {
    return 0;
  }
  unint64_t v9 = 0xFFFFFFFF - v11;
  if (0xFFFFFFFF - v11 >= a4) {
    unint64_t v9 = a4;
  }
  return TMMapSymbolOwnerData::symbols_in_archive_address_range(a1, a2, v11 | (v9 << 32), a5);
}

unint64_t TMMapSymbolOwnerData::symbols_in_archive_address_range(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(_DWORD **)(a1 + 88);
  int v5 = v4[4];
  if (!v5) {
    return 0;
  }
  uint64_t v8 = (char *)v4 + 32 * v4[2] + (24 * v4[3]) + 96;
  uint64_t v12 = &v8[24 * v5];
  unint64_t v13 = v8;
  if (!find_lower_and_upper_bounds_of_range<CSCppMMapSymbol>(a3, &v13, &v12)) {
    return 0;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3);
  if (a4)
  {
    uint64_t v10 = a2 | 5;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a4, v10);
      v13 += 24;
    }
    while (v13 < v12);
  }
  return v9;
}

BOOL find_lower_and_upper_bounds_of_range<CSCppMMapSymbol>(uint64_t a1, char **a2, char **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  int v5 = *a2;
  if (*a3 != *a2)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((*a3 - *a2) >> 3);
    int v5 = *a2;
    do
    {
      unint64_t v7 = v6 >> 1;
      uint64_t v8 = (unsigned int *)&v5[24 * (v6 >> 1)];
      unsigned int v10 = *v8;
      unint64_t v9 = (char *)(v8 + 6);
      v6 += ~(v6 >> 1);
      if (v10 > a1) {
        unint64_t v6 = v7;
      }
      else {
        int v5 = v9;
      }
    }
    while (v6);
  }
  while (v5 != v3)
  {
    int v11 = *((_DWORD *)v5 - 6);
    unsigned int v12 = *((_DWORD *)v5 - 5);
    v5 -= 24;
    if ((int)a1 - v11 >= v12)
    {
      uint64_t v3 = v5 + 24;
      break;
    }
  }
  *a2 = v3;
  if (v4 != v3)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3);
    uint64_t v4 = v3;
    do
    {
      unint64_t v14 = v13 >> 1;
      unint64_t v15 = (unsigned int *)&v4[24 * (v13 >> 1)];
      unsigned int v17 = *v15;
      unint64_t v16 = (char *)(v15 + 6);
      v13 += ~(v13 >> 1);
      if ((int)a1 + HIDWORD(a1) - 1 < v17) {
        unint64_t v13 = v14;
      }
      else {
        uint64_t v4 = v16;
      }
    }
    while (v13);
  }
  *a3 = v4;
  return *a2 != v4;
}

uint64_t TMMapSymbolOwnerData::symbol_for_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unint64_t a3)
{
  if (a3 == -1) {
    return 0;
  }
  else {
    return TMMapSymbolOwnerData::symbol_for_real_address(this, a2, a3);
  }
}

uint64_t TMMapSymbolOwnerData::symbol_for_real_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unint64_t a3)
{
  *(void *)unint64_t v7 = 0;
  int v5 = TThreadsafeAddressRelocator<Pointer64>::relocate((void *)this + 12, a3, v7);
  uint64_t result = 0;
  if (v5)
  {
    if (*(void *)v7 > 0xFFFFFFFEuLL) {
      return 0;
    }
    else {
      return TMMapSymbolOwnerData::symbol_for_archive_address(this, a2, v7[0]);
    }
  }
  return result;
}

uint64_t TMMapSymbolOwnerData::symbol_for_archive_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unsigned int a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = &v6;
  uint64_t v8 = 0x3802000000;
  unint64_t v9 = __Block_byref_object_copy__15;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v10 = __Block_byref_object_dispose__15;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN20TMMapSymbolOwnerData26symbol_for_archive_addressEP16CSCppSymbolOwnerj_block_invoke;
  void v5[3] = &unk_1E61D0AA8;
  void v5[4] = &v6;
  TMMapSymbolOwnerData::symbols_in_archive_address_range((uint64_t)this, (uint64_t)a2, a3 | 0x100000000, (uint64_t)v5);
  uint64_t v3 = v7[5];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1B90576E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZN20TMMapSymbolOwnerData26symbol_for_archive_addressEP16CSCppSymbolOwnerj_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned char *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 9) & 2) == 0)
  {
    uint64_t v3 = *(void *)(*(void *)(result + 32) + 8);
    *(void *)(v3 + 40) = a2;
    *(void *)(v3 + 48) = a3;
  }
  return result;
}

unint64_t TMMapSymbolOwnerData::child_for_archive_address(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 20);
  if (v3 != -1)
  {
    uint64_t v4 = *(unsigned int **)(a1 + 88);
    uint64_t v5 = v4[5];
    if (v3 < v5)
    {
      unint64_t v6 = (unint64_t)&v4[9 * v3 + 24 + 8 * v4[2] + 6 * v4[3] + 6 * v4[4]];
      uint64_t v7 = ~v3 + v5;
      unint64_t v8 = v6;
      while (v6 >= (unint64_t)v4)
      {
        uint64_t v9 = v7;
        if (v8 >= (unint64_t)v4 + v4[1]) {
          break;
        }
        if ((a3 - *(_DWORD *)v8) < *(_DWORD *)(v8 + 4)) {
          return v8;
        }
        unint64_t result = 0;
        if ((*(unsigned char *)(v8 + 11) & 0x40) == 0)
        {
          --v7;
          v8 += 36;
          if (v9) {
            continue;
          }
        }
        return result;
      }
    }
  }
  return 0;
}

uint64_t TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 20);
  if (v3 == -1) {
    return 0;
  }
  unint64_t v8 = *(_DWORD **)(a1 + 88);
  uint64_t v9 = (char *)v8 + 32 * v8[2] + (24 * v8[3]);
  int v11 = v8[4];
  unsigned int v10 = v8[5];
  uint64_t v12 = (uint64_t)&v9[36 * v3 + 24 * v11];
  if (v3 <= v10) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v3;
  }
  uint64_t v14 = v13 - v3;
  unint64_t v15 = v12 + 96;
  while (v14)
  {
    unint64_t v16 = *(void *)(a1 + 88);
    if (v16 <= v15 && v15 < *(unsigned int *)(v16 + 4) + v16)
    {
      (*(void (**)(uint64_t, unint64_t))(a3 + 16))(a3, v15);
      LODWORD(v3) = v3 + 1;
      --v14;
      char v17 = *(unsigned char *)(v15 + 11);
      v15 += 36;
      if ((v17 & 0x40) == 0) {
        continue;
      }
    }
    return (v3 - *(_DWORD *)(a2 + 20));
  }
  LODWORD(v3) = v13;
  return (v3 - *(_DWORD *)(a2 + 20));
}

uint64_t TMMapSymbolOwnerData::source_infos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD **)(a1 + 88);
  uint64_t v4 = v3[6];
  if (a3 && v4)
  {
    unint64_t v6 = (unint64_t)v3
       + 32 * v3[2]
       + 24 * v3[3]
       + (24 * v3[4])
       + (unint64_t)(36 * v3[5])
       + 96;
    uint64_t v7 = a2 | 6;
    uint64_t v8 = v3[6];
    do
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(a3 + 16))(a3, v7, v6);
      v6 += 20;
      --v8;
    }
    while (v8);
  }
  return v4;
}

uint64_t TMMapSymbolOwnerData::source_infos_in_address_range(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a1[11] + 24)) {
    BOOL v5 = a3 == -1;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v7 = (unint64_t *)a1[12];
  uint64_t v8 = (unint64_t *)a1[13];
  if (v7 == v8) {
    return 0;
  }
  uint64_t v12 = 0;
  if (__CFADD__(a4, a3)) {
    unint64_t v13 = -1;
  }
  else {
    unint64_t v13 = a4 + a3;
  }
  do
  {
    unint64_t v14 = *v7;
    if (*v7 < v13)
    {
      unint64_t v15 = v7[1] + v14;
      if (a3 < v15)
      {
        if (v14 <= a3) {
          unint64_t v16 = a3;
        }
        else {
          unint64_t v16 = *v7;
        }
        if (v13 >= v15) {
          unint64_t v17 = v7[1] + v14;
        }
        else {
          unint64_t v17 = v13;
        }
        if (v17 != v16) {
          v12 += TMMapSymbolOwnerData::source_infos_in_real_address_range((uint64_t)a1, a2, v16, v17 - v16, a5);
        }
      }
    }
    v7 += 3;
  }
  while (v7 != v8);
  return v12;
}

unint64_t TMMapSymbolOwnerData::source_infos_in_real_address_range(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if (!*(_DWORD *)(*(void *)(a1 + 88) + 24)) {
    return 0;
  }
  unint64_t v11 = 0;
  if (!TThreadsafeAddressRelocator<Pointer64>::relocate((void *)(a1 + 96), a3, &v11)
    || v11 > 0xFFFFFFFE)
  {
    return 0;
  }
  unint64_t v9 = 0xFFFFFFFF - v11;
  if (0xFFFFFFFF - v11 >= a4) {
    unint64_t v9 = a4;
  }
  return TMMapSymbolOwnerData::source_infos_in_archive_address_range(a1, a2, v11 | (v9 << 32), a5);
}

unint64_t TMMapSymbolOwnerData::source_infos_in_archive_address_range(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 88);
  unsigned int v5 = *(_DWORD *)(v4 + 24);
  if (!v5) {
    return 0;
  }
  unint64_t v8 = v4 + vaddlvq_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)(v4 + 8), (int32x4_t)xmmword_1B9086FC0)) + 96;
  unint64_t v12 = v8 + 20 * v5;
  unint64_t v13 = v8;
  if (!find_lower_and_upper_bounds_of_range<CSCppMMapSourceInfo>(a3, &v13, &v12)) {
    return 0;
  }
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v13) >> 2);
  if (a4)
  {
    uint64_t v10 = a2 | 6;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a4, v10);
      v13 += 20;
    }
    while (v13 < v12);
  }
  return v9;
}

BOOL find_lower_and_upper_bounds_of_range<CSCppMMapSourceInfo>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = (_DWORD *)*a2;
  uint64_t v4 = (_DWORD *)*a3;
  unsigned int v5 = (_DWORD *)*a2;
  if (*a3 != *a2)
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a3 - *a2) >> 2);
    unsigned int v5 = (_DWORD *)*a2;
    do
    {
      unint64_t v7 = v6 >> 1;
      unint64_t v8 = &v5[5 * (v6 >> 1)];
      unsigned int v10 = *v8;
      unint64_t v9 = v8 + 5;
      v6 += ~(v6 >> 1);
      if (v10 > a1) {
        unint64_t v6 = v7;
      }
      else {
        unsigned int v5 = v9;
      }
    }
    while (v6);
  }
  while (v5 != v3)
  {
    int v11 = *(v5 - 5);
    unsigned int v12 = *(v5 - 4);
    v5 -= 5;
    if ((int)a1 - v11 >= v12)
    {
      uint64_t v3 = v5 + 5;
      break;
    }
  }
  *a2 = v3;
  if (v4 != v3)
  {
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (v4 - v3);
    uint64_t v4 = v3;
    do
    {
      unint64_t v14 = v13 >> 1;
      unint64_t v15 = &v4[5 * (v13 >> 1)];
      unsigned int v17 = *v15;
      unint64_t v16 = v15 + 5;
      v13 += ~(v13 >> 1);
      if ((int)a1 + HIDWORD(a1) - 1 < v17) {
        unint64_t v13 = v14;
      }
      else {
        uint64_t v4 = v16;
      }
    }
    while (v13);
  }
  *a3 = v4;
  return *a2 != (void)v4;
}

unint64_t TMMapSymbolOwnerData::source_info_for_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unint64_t a3)
{
  if (a3 == -1) {
    return 0;
  }
  else {
    return TMMapSymbolOwnerData::source_info_for_real_address(this, a2, a3);
  }
}

unint64_t TMMapSymbolOwnerData::source_info_for_real_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unint64_t a3)
{
  *(void *)unint64_t v7 = 0;
  int v5 = TThreadsafeAddressRelocator<Pointer64>::relocate((void *)this + 12, a3, v7);
  unint64_t result = 0;
  if (v5)
  {
    if (*(void *)v7 <= 0xFFFFFFFEuLL) {
      return TMMapSymbolOwnerData::source_info_for_archive_address(this, a2, v7[0]);
    }
  }
  return result;
}

unint64_t TMMapSymbolOwnerData::source_info_for_archive_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unsigned int a3)
{
  if (!*(_DWORD *)(*((void *)this + 11) + 24)) {
    return 0;
  }
  char v6 = TMMapSymbolOwnerData::symbol_for_archive_address(this, a2, a3);
  uint64_t v8 = v7;
  if (!CSIsNull(v6, v7)
    && TMMapSymbolOwnerData::child_for_archive_address((uint64_t)this, v8 & 0xFFFFFFFFFFFFFFFCLL, a3))
  {
    return (unint64_t)a2 | 5;
  }
  if (TMMapSymbolOwnerData::do_source_info_lookup(this, a3)) {
    return (unint64_t)a2 | 6;
  }
  return 0;
}

_DWORD *TMMapSymbolOwnerData::do_source_info_lookup(TMMapSymbolOwnerData *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 11);
  unint64_t v3 = *(unsigned int *)(v2 + 24);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v2 + vaddlvq_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)(v2 + 8), (int32x4_t)xmmword_1B9086FC0)) + 96;
  unint64_t v5 = v3;
  unint64_t v6 = v4;
  do
  {
    unint64_t v7 = v5 >> 1;
    uint64_t v8 = (unsigned int *)(v6 + 20 * (v5 >> 1));
    unsigned int v10 = *v8;
    unint64_t v9 = v8 + 5;
    v5 += ~(v5 >> 1);
    if (v10 > a2) {
      unint64_t v5 = v7;
    }
    else {
      unint64_t v6 = (unint64_t)v9;
    }
  }
  while (v5);
  if (v6 == v4) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = -1;
  }
  unsigned int v12 = (_DWORD *)(v6 + 20 * v11);
  if (a2 - *v12 >= v12[1]) {
    return 0;
  }
  else {
    return v12;
  }
}

uint64_t TMMapSymbolOwnerData::for_each_stack_frame_at_address(TMMapSymbolOwnerData *a1, CSCppSymbolOwner *a2, unint64_t a3, uint64_t a4)
{
  if (a3 == -1) {
    return 0;
  }
  else {
    return TMMapSymbolOwnerData::for_each_stack_frame_at_real_address(a1, a2, a3, a4);
  }
}

uint64_t TMMapSymbolOwnerData::for_each_stack_frame_at_real_address(TMMapSymbolOwnerData *a1, CSCppSymbolOwner *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v9 = 0;
  int v7 = TThreadsafeAddressRelocator<Pointer64>::relocate((void *)a1 + 12, a3, &v9);
  uint64_t result = 0;
  if (v7)
  {
    if (v9 > 0xFFFFFFFE) {
      return 0;
    }
    else {
      return TMMapSymbolOwnerData::for_each_stack_frame_at_archive_address(a1, a2, v9, a4);
    }
  }
  return result;
}

uint64_t TMMapSymbolOwnerData::for_each_stack_frame_at_archive_address(TMMapSymbolOwnerData *a1, CSCppSymbolOwner *a2, unsigned int a3, uint64_t a4)
{
  char v8 = TMMapSymbolOwnerData::symbol_for_archive_address(a1, a2, a3);
  uint64_t v10 = v9;
  if (CSIsNull(v8, v9)) {
    return 0;
  }
  unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  unsigned int v12 = TMMapSymbolOwnerData::do_source_info_lookup(a1, a3);
  if ((v10 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
    return 0;
  }
  unint64_t v13 = v12;
  uint64_t v14 = (unint64_t)a2 | 5;
  uint64_t v15 = (unint64_t)a2 | 6;
  unint64_t v16 = TMMapSymbolOwnerData::child_for_archive_address((uint64_t)a1, v11, a3);
  if (v16)
  {
    unint64_t v17 = v16;
    uint64_t v18 = 1;
    do
    {
      if ((*(_DWORD *)(v17 + 8) & 0x80000000) != 0) {
        (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, unint64_t))(a4 + 16))(a4, v14, v11, v14, v17);
      }
      else {
        (*(void (**)(uint64_t, uint64_t, unint64_t, void, void))(a4 + 16))(a4, v14, v11, 0, 0);
      }
      unint64_t v11 = v17;
      ++v18;
      unint64_t v17 = TMMapSymbolOwnerData::child_for_archive_address((uint64_t)a1, v17, a3);
    }
    while (v17);
  }
  else
  {
    uint64_t v18 = 1;
  }
  if (v13) {
    uint64_t v19 = v15;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v13) {
    unint64_t v20 = v13;
  }
  else {
    unint64_t v20 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, _DWORD *))(a4 + 16))(a4, v14, v11, v19, v20);
  return v18;
}

uint64_t TMMapSymbolOwnerData::for_each_inline_range_for_symbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(a1, a2, a3, a4, -1, a5);
}

uint64_t TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v24[3] = 0;
  unint64_t v10 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  int v21 = 0;
  BOOL v22 = 0;
  uint64_t v23 = 0;
  std::string __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v17 = 0;
  unsigned int v11 = *(_DWORD *)(a4 & 0xFFFFFFFFFFFFFFFCLL);
  if (TThreadsafeAddressRelocator<Pointer64>::relocate((void *)(a1 + 120), v11, &v17))
  {
    v15[1] = a6;
    uint64_t v16 = 0;
    v15[0] = &v16;
    unsigned int v12 = operator new(0x48uLL);
    void *v12 = &unk_1F12C9EB8;
    v12[1] = v24;
    v12[2] = &v21;
    void v12[3] = &__p;
    void v12[4] = a2;
    void v12[5] = v15;
    v12[6] = &v17;
    *((_DWORD *)v12 + 14) = a5;
    v12[8] = a1;
    uint64_t v26 = v12;
    std::__function::__value_func<void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::swap[abi:ne180100](buf, v24);
    std::__function::__value_func<void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::~__value_func[abi:ne180100](buf);
    std::function<void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::operator()((uint64_t)v24, v10, 0);
    uint64_t v13 = v16;
    if (__p)
    {
      uint64_t v19 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v11;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Symbol archive address 0x%x could not be relocated to real address\n", buf, 8u);
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Symbol archive address 0x%x could not be relocated to real address\n", v11);
    uint64_t v13 = 0;
  }
  if (v21)
  {
    BOOL v22 = v21;
    operator delete(v21);
  }
  std::__function::__value_func<void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::~__value_func[abi:ne180100](v24);
  return v13;
}

void sub_1B9058230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  std::__function::__value_func<void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::~__value_func[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

unint64_t TMMapSymbolOwnerData::raw_bytes_for_range(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a1[11] + 76);
  unsigned int v9 = (CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a2 + 8)) >> 8) & 1;
  if (v8) {
    LOBYTE(v9) = 0;
  }
  if (v9) {
    return 0;
  }
  if (a3 == -1) {
    return 0;
  }
  unint64_t v10 = (unint64_t *)a1[12];
  unsigned int v11 = (unint64_t *)a1[13];
  if (v10 == v11) {
    return 0;
  }
  unint64_t v12 = a4 + a3;
  if (__CFADD__(a4, a3)) {
    unint64_t v12 = -1;
  }
  while (1)
  {
    unint64_t v13 = *v10;
    if (*v10 < v12)
    {
      unint64_t v14 = v10[1] + v13;
      if (a3 < v14)
      {
        unint64_t v15 = v13 <= a3 ? a3 : *v10;
        unint64_t v16 = v12 >= v14 ? v10[1] + v13 : v12;
        if (v16 != v15) {
          break;
        }
      }
    }
    v10 += 3;
    if (v10 == v11) {
      return 0;
    }
  }

  return TMMapSymbolOwnerData::raw_bytes_for_real_range((uint64_t)a1, a2, v15, v16 - v15);
}

unint64_t TMMapSymbolOwnerData::raw_bytes_for_real_range(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v11 = 0;
  if (!TThreadsafeAddressRelocator<Pointer64>::relocate((void *)(a1 + 96), a3, &v11)
    || v11 > 0xFFFFFFFE)
  {
    return TMMapSymbolOwnerData::_raw_bytes_for_real_range_on_demand_fault(a1, a2, a3, a4);
  }
  unint64_t v9 = 0xFFFFFFFF - v11;
  if (0xFFFFFFFF - v11 >= a4) {
    unint64_t v9 = a4;
  }
  unint64_t result = TMMapSymbolOwnerData::raw_bytes_for_archive_range(a1, v8, v11 | (v9 << 32));
  if (!result) {
    return TMMapSymbolOwnerData::_raw_bytes_for_real_range_on_demand_fault(a1, a2, a3, a4);
  }
  return result;
}

unint64_t TMMapSymbolOwnerData::raw_bytes_for_archive_range(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(v3 + 76);
  if (a3 >= v4
    && HIDWORD(a3) + (int)a3 <= (HIDWORD(v4) + v4)
    && (unint64_t v5 = v3
           + (32 * *(_DWORD *)(v3 + 8))
           + (24 * *(_DWORD *)(v3 + 12))
           + (24 * *(_DWORD *)(v3 + 16))
           + (unint64_t)(4 * *(_DWORD *)(v3 + 16))
           + (36 * *(_DWORD *)(v3 + 20))
           + (unint64_t)(20 * *(_DWORD *)(v3 + 24))
           + *(unsigned int *)(v3 + 88)
           + 96) != 0)
  {
    return v5 + (a3 - v4);
  }
  else
  {
    return 0;
  }
}

unint64_t TMMapSymbolOwnerData::_raw_bytes_for_real_range_on_demand_fault(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (!*(void *)(a1 + 408)) {
    operator new();
  }
  std::mutex::unlock(v8);
  uint64_t section_descriptor_for_range = CSCppTextSectionDescriptorMap<Pointer64>::find_section_descriptor_for_range(*(void *)(a1 + 408), a3, a4);
  if (!section_descriptor_for_range) {
    CSCppTextSectionDescriptorMap<Pointer64>::create_section_descriptor_for_range();
  }
  CSCppTextSectionDataDescriptor::get_text_section_for_range<Pointer64>(section_descriptor_for_range, a3, a4, a2, (uint64_t)v12);
  if (a4 + a3 <= v12[0] + v12[1]) {
    unint64_t v10 = v12[2] + a3 - v12[0];
  }
  else {
    unint64_t v10 = 0;
  }
  if (a3 >= v12[0]) {
    return v10;
  }
  else {
    return 0;
  }
}

void sub_1B90585EC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

TMMapSymbolOwnerData *TMMapSymbolOwnerData::_augment_data_to_include_text_section(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2)
{
  uint64_t v3 = (atomic_uint *)((char *)this + 12);
  if ((atomic_load_explicit((atomic_uint *volatile)this + 3, memory_order_acquire) & 0x1000) == 0)
  {
    std::mutex::lock((std::mutex *)((char *)this + 16));
    if ((atomic_load_explicit(v3, memory_order_acquire) & 0x1000) == 0)
    {
      uint64_t v6 = CSCppMMapArchiveCache::augment_mmap_archive_to_include_text_section(*((CSCppMMapArchiveCache **)this + 11), a2, v5);
      if (v6)
      {
        if (v6 != *((CSCppMMapArchiveCache **)this + 11)) {
          operator new();
        }
      }
    }
    std::mutex::unlock((std::mutex *)((char *)this + 16));
  }
  return this;
}

void sub_1B90586BC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9D1CD0](v2, 0x10A1C40F2B1C752);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

char *TMMapSymbolOwnerData::demangledNameForSymbol(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 88);
  unint64_t result = CSCppDeferredDemangler::demangledNameForSymbol(a1 + 144, a2, (uint64_t)v2+ 32 * v2[2]+ 24 * v2[3]+ (24 * v2[4])+ (unint64_t)(4 * v2[4])+ (36 * v2[5])+ (20 * v2[6])+ v2[22]+ v2[20]+ 96);
  if (!v4) {
    return 0;
  }
  return result;
}

void TMMapSymbolOwnerData::~TMMapSymbolOwnerData(TMMapSymbolOwnerData *this, TMMapArchive *a2)
{
  *(void *)this = &unk_1F12C9DA0;
  uint64_t v3 = *((void *)this + 51);
  if (v3)
  {
    uint64_t v4 = CSCppTextSectionDescriptorMap<Pointer64>::~CSCppTextSectionDescriptorMap(v3);
    MEMORY[0x1BA9D1CD0](v4, 0x1020C40791C62A7);
  }
  CSCppMMapArchiveCache::release_archive(*((void *)this + 11), a2);
  CSCppDeferredDemangler::~CSCppDeferredDemangler((TMMapSymbolOwnerData *)((char *)this + 144));
  unint64_t v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    *((void *)this + 16) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 12);
  if (v6)
  {
    *((void *)this + 13) = v6;
    operator delete(v6);
  }
  *(void *)this = &unk_1F12C6398;
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
}

{
  uint64_t vars8;

  TMMapSymbolOwnerData::~TMMapSymbolOwnerData(this, a2);

  JUMPOUT(0x1BA9D1CD0);
}

uint64_t TMMapSymbolOwnerData::relinked_subdylib_path_for_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2)
{
  return 0;
}

uint64_t TMMapSymbolOwnerData::relinked_subdylib_name_for_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2)
{
  return 0;
}

uint64_t TMMapSymbolOwnerData::unique_relinked_subdylib_count(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2)
{
  return 0;
}

uint64_t TMMapSymbolOwnerData::type_id(TMMapSymbolOwnerData *this)
{
  return 4;
}

uint64_t TMMapSymbolOwnerData::dsym_path(TMMapArchive **this)
{
  return TMMapArchive::dsym_path(this[11]);
}

uint64_t TMMapSymbolOwnerData::dylib_current_version(TMMapSymbolOwnerData *this)
{
  return *(unsigned int *)(*((void *)this + 11) + 32);
}

uint64_t TMMapSymbolOwnerData::dylib_compatibility_version(TMMapSymbolOwnerData *this)
{
  return *(unsigned int *)(*((void *)this + 11) + 36);
}

uint64_t TMMapSymbolOwnerData::version(TMMapArchive **this)
{
  return TMMapArchive::version(this[11]);
}

char *TMMapSymbolOwnerData::optional_symbolicator_flags(TMMapSymbolOwnerData *this)
{
  unint64_t result = (char *)*((void *)this + 11);
  if (result)
  {
    unint64_t result = TMMapArchive::optional_data((TMMapArchive *)result);
    if (result)
    {
      if (*((_DWORD *)result + 1))
      {
        if (*((_DWORD *)result + 2) >= 0x14u) {
          result += 16;
        }
        else {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void *std::vector<MMapSegment>::__init_with_size[abi:ne180100]<MMapSegment const*,MMapSegment const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    unint64_t result = std::vector<CSCppSegmentRange>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B9058958(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByName &,unsigned int *,unsigned int *,char const*,std::__identity>(_DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  uint64_t v4 = a2;
  if (a2 != a1)
  {
    uint64_t v7 = a1;
    unint64_t v8 = a2 - a1;
    while (1)
    {
      unint64_t v9 = v8 >> 1;
      unint64_t v10 = &v7[v8 >> 1];
      unint64_t v11 = *a3;
      unint64_t v12 = (char *)*this + *(unsigned int *)((char *)v10 - *v10 + 12);
      SearchSymbolByName::verify_string_pointer(this, v12);
      if (strcmp(v12, v11) < 0)
      {
        uint64_t v7 = v10 + 1;
        unint64_t v9 = v8 + ~v9;
      }
      else
      {
        unint64_t v13 = *a3;
        unint64_t v14 = (char *)*this + *(unsigned int *)((char *)v10 - *v10 + 12);
        SearchSymbolByName::verify_string_pointer(this, v14);
        if ((strcmp(v13, v14) & 0x80000000) == 0)
        {
          uint64_t v7 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,unsigned int *,char const*,std::__identity,SearchSymbolByName>(v7, &v7[v8 >> 1], a3, this);
          std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByName &,unsigned int *,unsigned int *,char const*,std::__identity &>(v10 + 1, v4, a3, this);
          return v7;
        }
        uint64_t v4 = &v7[v8 >> 1];
      }
      unint64_t v8 = v9;
      if (!v9) {
        return v7;
      }
    }
  }
  return a2;
}

_DWORD *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,unsigned int *,char const*,std::__identity,SearchSymbolByName>(_DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  uint64_t v4 = a2;
  if (a2 != a1)
  {
    unint64_t v7 = a2 - a1;
    uint64_t v4 = a1;
    do
    {
      unint64_t v8 = *a3;
      unint64_t v9 = &v4[v7 >> 1];
      unsigned int v11 = *v9;
      unint64_t v10 = v9 + 1;
      unint64_t v12 = (char *)*this + *(unsigned int *)((char *)&v4[(v7 >> 1) + 3] - v11);
      SearchSymbolByName::verify_string_pointer(this, v12);
      int v13 = strcmp(v12, v8);
      if (v13 >= 0) {
        v7 >>= 1;
      }
      else {
        v7 += ~(v7 >> 1);
      }
      if (v13 < 0) {
        uint64_t v4 = v10;
      }
    }
    while (v7);
  }
  return v4;
}

_DWORD *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByName &,unsigned int *,unsigned int *,char const*,std::__identity &>(_DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  uint64_t v4 = a2;
  if (a2 != a1)
  {
    unint64_t v7 = a2 - a1;
    uint64_t v4 = a1;
    do
    {
      unint64_t v8 = *a3;
      unint64_t v9 = &v4[v7 >> 1];
      unsigned int v11 = *v9;
      unint64_t v10 = v9 + 1;
      unint64_t v12 = (char *)*this + *(unsigned int *)((char *)&v4[(v7 >> 1) + 3] - v11);
      SearchSymbolByName::verify_string_pointer(this, v12);
      if (strcmp(v8, v12) < 0)
      {
        v7 >>= 1;
      }
      else
      {
        uint64_t v4 = v10;
        v7 += ~(v7 >> 1);
      }
    }
    while (v7);
  }
  return v4;
}

BOOL SearchSymbolByName::verify_string_pointer(TMMapArchive **this, char *a2)
{
  BOOL result = TMMapArchive::is_pointer_within_strtab(this[1], a2);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1BA9D1A30](exception, "Encountered symbol with bad name reference during binary search");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B9058C74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByMangledName &,unsigned int *,unsigned int *,char const*,std::__identity>(_DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  uint64_t v4 = a2;
  if (a2 != a1)
  {
    unint64_t v7 = a1;
    unint64_t v8 = a2 - a1;
    while (1)
    {
      unint64_t v9 = v8 >> 1;
      unint64_t v10 = &v7[v8 >> 1];
      unsigned int v11 = *a3;
      unint64_t v12 = (char *)*this + *(unsigned int *)((char *)v10 - *v10 + 16);
      SearchSymbolByMangledName::verify_string_pointer(this, v12);
      if (strcmp(v12, v11) < 0)
      {
        unint64_t v7 = v10 + 1;
        unint64_t v9 = v8 + ~v9;
      }
      else
      {
        int v13 = *a3;
        unint64_t v14 = (char *)*this + *(unsigned int *)((char *)v10 - *v10 + 16);
        SearchSymbolByMangledName::verify_string_pointer(this, v14);
        if ((strcmp(v13, v14) & 0x80000000) == 0)
        {
          unint64_t v7 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,unsigned int *,char const*,std::__identity,SearchSymbolByMangledName>(v7, &v7[v8 >> 1], a3, this);
          std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByMangledName &,unsigned int *,unsigned int *,char const*,std::__identity &>(v10 + 1, v4, a3, this);
          return v7;
        }
        uint64_t v4 = &v7[v8 >> 1];
      }
      unint64_t v8 = v9;
      if (!v9) {
        return v7;
      }
    }
  }
  return a2;
}

_DWORD *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,unsigned int *,char const*,std::__identity,SearchSymbolByMangledName>(_DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  uint64_t v4 = a2;
  if (a2 != a1)
  {
    unint64_t v7 = a2 - a1;
    uint64_t v4 = a1;
    do
    {
      unint64_t v8 = *a3;
      unint64_t v9 = &v4[v7 >> 1];
      unsigned int v11 = *v9;
      unint64_t v10 = v9 + 1;
      unint64_t v12 = (char *)*this + *(unsigned int *)((char *)&v4[(v7 >> 1) + 4] - v11);
      SearchSymbolByMangledName::verify_string_pointer(this, v12);
      int v13 = strcmp(v12, v8);
      if (v13 >= 0) {
        v7 >>= 1;
      }
      else {
        v7 += ~(v7 >> 1);
      }
      if (v13 < 0) {
        uint64_t v4 = v10;
      }
    }
    while (v7);
  }
  return v4;
}

_DWORD *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByMangledName &,unsigned int *,unsigned int *,char const*,std::__identity &>(_DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  uint64_t v4 = a2;
  if (a2 != a1)
  {
    unint64_t v7 = a2 - a1;
    uint64_t v4 = a1;
    do
    {
      unint64_t v8 = *a3;
      unint64_t v9 = &v4[v7 >> 1];
      unsigned int v11 = *v9;
      unint64_t v10 = v9 + 1;
      unint64_t v12 = (char *)*this + *(unsigned int *)((char *)&v4[(v7 >> 1) + 4] - v11);
      SearchSymbolByMangledName::verify_string_pointer(this, v12);
      if (strcmp(v8, v12) < 0)
      {
        v7 >>= 1;
      }
      else
      {
        uint64_t v4 = v10;
        v7 += ~(v7 >> 1);
      }
    }
    while (v7);
  }
  return v4;
}

BOOL SearchSymbolByMangledName::verify_string_pointer(TMMapArchive **this, char *a2)
{
  BOOL result = TMMapArchive::is_pointer_within_strtab(this[1], a2);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1BA9D1A30](exception, "Encountered symbol with bad name reference during binary search");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B9058F88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::vector<MMapSegment>::__init_with_size[abi:ne180100]<std::__wrap_iter<MMapSegment const*>,std::__wrap_iter<MMapSegment const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = std::vector<CSCppSegmentRange>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B9058FFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1)) {
        char v6 = (const char *)*(a2 - 1);
      }
      else {
        char v6 = (const char *)*(a2 - 2);
      }
      if (a1[3]) {
        uint64_t v7 = (const char *)a1[3];
      }
      else {
        uint64_t v7 = (const char *)a1[2];
      }
      int v8 = strncmp(v6, v7, 0x10uLL);
      unint64_t v10 = *(v2 - 4);
      unint64_t v9 = v2 - 4;
      BOOL v11 = v10 < *a1;
      if (v8) {
        BOOL v11 = v8 < 0;
      }
      if (v11)
      {
        long long v13 = *(_OWORD *)a1;
        long long v12 = *((_OWORD *)a1 + 1);
        long long v14 = *((_OWORD *)v9 + 1);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *((_OWORD *)a1 + 1) = v14;
        *(_OWORD *)unint64_t v9 = v13;
        *((_OWORD *)v9 + 1) = v12;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      unint64_t v15 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8);
      unint64_t v16 = a1 + 12;
      if (a1 + 12 == v2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      long long v33 = v2;
      break;
  }
  while (1)
  {
    unint64_t v20 = v16[2];
    unint64_t v19 = v16[3];
    if (v19) {
      int v21 = (const char *)v16[3];
    }
    else {
      int v21 = (const char *)v16[2];
    }
    if (v15[3]) {
      BOOL v22 = (const char *)v15[3];
    }
    else {
      BOOL v22 = (const char *)v15[2];
    }
    int v23 = strncmp(v21, v22, 0x10uLL);
    unint64_t v24 = *v16;
    BOOL v25 = *v16 < *v15;
    if (v23) {
      BOOL v25 = v23 < 0;
    }
    if (v25)
    {
      unint64_t v34 = v16[1];
      uint64_t v26 = v17;
      while (1)
      {
        uint64_t v27 = (char *)a1 + v26;
        long long v28 = *(_OWORD *)((char *)a1 + v26 + 80);
        *((_OWORD *)v27 + 6) = *(_OWORD *)((char *)a1 + v26 + 64);
        *((_OWORD *)v27 + 7) = v28;
        if (v26 == -64) {
          break;
        }
        if (*((void *)v27 + 7)) {
          unint64_t v29 = (const char *)*((void *)v27 + 7);
        }
        else {
          unint64_t v29 = (const char *)*((void *)v27 + 6);
        }
        int v30 = strncmp(v21, v29, 0x10uLL);
        BOOL v31 = v24 < *((void *)v27 + 4);
        if (v30) {
          BOOL v31 = v30 < 0;
        }
        v26 -= 32;
        if (!v31)
        {
          long long v32 = (unint64_t *)((char *)a1 + v26 + 96);
          goto LABEL_33;
        }
      }
      long long v32 = a1;
LABEL_33:
      uint64_t v2 = v33;
      unint64_t *v32 = v24;
      v32[1] = v34;
      void v32[2] = v20;
      v32[3] = v19;
      if (++v18 == 8) {
        return v16 + 4 == v33;
      }
    }
    unint64_t v15 = v16;
    v17 += 32;
    v16 += 4;
    if (v16 == v2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*,false>(char *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
_OWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(_OWORD *result, _OWORD *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v5 = 0;
      char v6 = result;
      do
      {
        uint64_t v7 = (const char *)v6;
        char v6 = v4;
        BOOL result = (_OWORD *)strncmp(v7 + 48, v7 + 16, 0x10uLL);
        BOOL v8 = *((void *)v7 + 4) < *(void *)v7;
        if (result) {
          BOOL v8 = (int)result < 0;
        }
        if (v8)
        {
          long long v15 = *v6;
          long long v16 = v6[1];
          uint64_t v9 = v5;
          while (1)
          {
            unint64_t v10 = (char *)v3 + v9;
            long long v11 = *(_OWORD *)((char *)v3 + v9 + 16);
            *((_OWORD *)v10 + 2) = *(_OWORD *)((char *)v3 + v9);
            *((_OWORD *)v10 + 3) = v11;
            if (!v9) {
              break;
            }
            BOOL result = (_OWORD *)strncmp((const char *)&v16, v10 - 16, 0x10uLL);
            BOOL v12 = (unint64_t)v15 < *((void *)v10 - 4);
            if (result) {
              BOOL v12 = (int)result < 0;
            }
            v9 -= 32;
            if (!v12)
            {
              uint64_t v13 = (_OWORD *)((char *)v3 + v9 + 32);
              goto LABEL_14;
            }
          }
          uint64_t v13 = v3;
LABEL_14:
          long long v14 = v16;
          _OWORD *v13 = v15;
          v13[1] = v14;
        }
        uint64_t v4 = v6 + 2;
        v5 += 32;
      }
      while (v6 + 2 != a2);
    }
  }
  return result;
}

_OWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(_OWORD *result, _OWORD *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (result != a2)
  {
    uint64_t v3 = result;
    for (uint64_t i = result + 2; v3 + 2 != a2; uint64_t i = v3 + 2)
    {
      uint64_t v5 = (const char *)v3;
      uint64_t v3 = i;
      BOOL result = (_OWORD *)strncmp(v5 + 48, v5 + 16, 0x10uLL);
      BOOL v6 = *((void *)v5 + 4) < *(void *)v5;
      if (result) {
        BOOL v6 = (int)result < 0;
      }
      if (v6)
      {
        long long v12 = *v3;
        long long v13 = v3[1];
        uint64_t v7 = (char *)v3;
        do
        {
          long long v9 = *((_OWORD *)v7 - 1);
          *(_OWORD *)uint64_t v7 = *((_OWORD *)v7 - 2);
          *((_OWORD *)v7 + 1) = v9;
          BOOL result = (_OWORD *)strncmp((const char *)&v13, v7 - 48, 0x10uLL);
          BOOL v10 = (unint64_t)v12 < *((void *)v7 - 8);
          if (result) {
            BOOL v10 = (int)result < 0;
          }
          BOOL v8 = v7 - 32;
          v7 -= 32;
        }
        while (v10);
        long long v11 = v13;
        *(_OWORD *)BOOL v8 = v12;
        *((_OWORD *)v8 + 1) = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(char *a1, char *a2, char *a3)
{
  BOOL v6 = a2 + 16;
  uint64_t v7 = a1 + 16;
  int v8 = strncmp(a2 + 16, a1 + 16, 0x10uLL);
  unint64_t v9 = *(void *)a2;
  if (v8) {
    BOOL v10 = v8 < 0;
  }
  else {
    BOOL v10 = *(void *)a2 < *(void *)a1;
  }
  int v11 = strncmp(a3 + 16, v6, 0x10uLL);
  BOOL v12 = *(void *)a3 < v9;
  if (v11) {
    BOOL v12 = v11 < 0;
  }
  if (v10)
  {
    if (v12)
    {
      long long v14 = *(_OWORD *)a1;
      long long v13 = *((_OWORD *)a1 + 1);
      long long v15 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *((_OWORD *)a1 + 1) = v15;
      *(_OWORD *)a3 = v14;
      *((_OWORD *)a3 + 1) = v13;
      return 1;
    }
    long long v25 = *(_OWORD *)a1;
    long long v24 = *((_OWORD *)a1 + 1);
    long long v26 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v26;
    *(_OWORD *)a2 = v25;
    *((_OWORD *)a2 + 1) = v24;
    int v27 = strncmp(a3 + 16, v6, 0x10uLL);
    BOOL v28 = *(void *)a3 < *(void *)a2;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (!v28) {
      return 1;
    }
    long long v30 = *(_OWORD *)a2;
    long long v29 = *((_OWORD *)a2 + 1);
    long long v31 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v31;
    *(_OWORD *)a3 = v30;
    *((_OWORD *)a3 + 1) = v29;
    return 2;
  }
  if (v12)
  {
    long long v17 = *(_OWORD *)a2;
    long long v16 = *((_OWORD *)a2 + 1);
    long long v18 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v18;
    *(_OWORD *)a3 = v17;
    *((_OWORD *)a3 + 1) = v16;
    int v19 = strncmp(v6, v7, 0x10uLL);
    BOOL v20 = *(void *)a2 < *(void *)a1;
    if (v19) {
      BOOL v20 = v19 < 0;
    }
    if (!v20) {
      return 1;
    }
    long long v22 = *(_OWORD *)a1;
    long long v21 = *((_OWORD *)a1 + 1);
    long long v23 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v23;
    *(_OWORD *)a2 = v22;
    *((_OWORD *)a2 + 1) = v21;
    return 2;
  }
  return 0;
}

char *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MMapSegment *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(char *a1, _OWORD *a2)
{
  uint64_t v2 = a2;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  long long v29 = *(_OWORD *)a1;
  long long v30 = *((_OWORD *)a1 + 1);
  uint64_t v4 = (const char *)(a2 - 1);
  int v5 = strncmp((const char *)&v30, (const char *)a2 - 16, 0x10uLL);
  BOOL v6 = (unint64_t)v29 < *((void *)v2 - 4);
  if (v5) {
    BOOL v6 = v5 < 0;
  }
  if (v6)
  {
    uint64_t v7 = a1 + 48;
    do
    {
      int v8 = strncmp((const char *)&v30, v7, 0x10uLL);
      BOOL v9 = (unint64_t)v29 < *((void *)v7 - 2);
      if (v8) {
        BOOL v9 = v8 < 0;
      }
      v7 += 32;
    }
    while (!v9);
    BOOL v10 = (char *)(v7 - 48);
  }
  else
  {
    int v11 = a1 + 32;
    do
    {
      BOOL v10 = (char *)v11;
      if (v11 >= v2) {
        break;
      }
      int v12 = strncmp((const char *)&v30, (const char *)v11 + 16, 0x10uLL);
      int v11 = v10 + 32;
      BOOL v13 = (unint64_t)v29 < *(void *)v10;
      if (v12) {
        BOOL v13 = v12 < 0;
      }
    }
    while (!v13);
  }
  if (v10 < (char *)v2)
  {
    do
    {
      int v14 = strncmp((const char *)&v30, v4, 0x10uLL);
      BOOL v15 = (unint64_t)v29 < *((void *)v4 - 2);
      if (v14) {
        BOOL v15 = v14 < 0;
      }
      v4 -= 32;
    }
    while (v15);
    uint64_t v2 = v4 + 16;
  }
  while (v10 < (char *)v2)
  {
    long long v16 = *((_OWORD *)v10 + 1);
    long long v31 = *(_OWORD *)v10;
    long long v32 = v16;
    long long v17 = v2[1];
    *(_OWORD *)BOOL v10 = *v2;
    *((_OWORD *)v10 + 1) = v17;
    long long v18 = v10 + 48;
    long long v19 = v32;
    *uint64_t v2 = v31;
    v2[1] = v19;
    do
    {
      int v20 = strncmp((const char *)&v30, v18, 0x10uLL);
      BOOL v21 = (unint64_t)v29 < *((void *)v18 - 2);
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      v18 += 32;
    }
    while (!v21);
    BOOL v10 = (char *)(v18 - 48);
    long long v22 = (const char *)(v2 - 1);
    do
    {
      int v23 = strncmp((const char *)&v30, v22, 0x10uLL);
      BOOL v24 = (unint64_t)v29 < *((void *)v22 - 2);
      if (v23) {
        BOOL v24 = v23 < 0;
      }
      v22 -= 32;
    }
    while (v24);
    uint64_t v2 = v22 + 16;
  }
  long long v25 = v10 - 32;
  if (v10 - 32 != a1)
  {
    long long v26 = *((_OWORD *)v10 - 1);
    *(_OWORD *)a1 = *(_OWORD *)v25;
    *((_OWORD *)a1 + 1) = v26;
  }
  long long v27 = v30;
  *(_OWORD *)long long v25 = v29;
  *((_OWORD *)v10 - 1) = v27;
  return v10;
}

char *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MMapSegment *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(char *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  long long v29 = *(_OWORD *)a1;
  long long v30 = *((_OWORD *)a1 + 1);
  do
  {
    int v5 = strncmp(&a1[v4 + 48], (const char *)&v30, 0x10uLL);
    BOOL v6 = *(void *)&a1[v4 + 32] < (unint64_t)v29;
    if (v5) {
      BOOL v6 = v5 < 0;
    }
    v4 += 32;
  }
  while (v6);
  unint64_t v7 = (unint64_t)&a1[v4];
  int v8 = &a1[v4 - 32];
  BOOL v9 = (const char *)(a2 - 16);
  if (v4 == 32)
  {
    while (1)
    {
      int v12 = v9 + 16;
      if (v7 >= (unint64_t)(v9 + 16)) {
        break;
      }
      int v27 = strncmp(v9, (const char *)&v30, 0x10uLL);
      BOOL v28 = *((void *)v9 - 2) < (unint64_t)v29;
      if (v27) {
        BOOL v28 = v27 < 0;
      }
      v9 -= 32;
      if (v28) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    do
    {
      int v10 = strncmp(v9, (const char *)&v30, 0x10uLL);
      BOOL v11 = *((void *)v9 - 2) < (unint64_t)v29;
      if (v10) {
        BOOL v11 = v10 < 0;
      }
      v9 -= 32;
    }
    while (!v11);
LABEL_9:
    int v12 = v9 + 16;
  }
  if (v7 < (unint64_t)v12)
  {
    BOOL v13 = (char *)v7;
    int v14 = (char *)v12;
    do
    {
      long long v15 = *((_OWORD *)v13 + 1);
      long long v31 = *(_OWORD *)v13;
      long long v32 = v15;
      long long v16 = *((_OWORD *)v14 + 1);
      *(_OWORD *)BOOL v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v16;
      long long v17 = v32;
      *(_OWORD *)int v14 = v31;
      *((_OWORD *)v14 + 1) = v17;
      long long v18 = v13 + 48;
      do
      {
        int v19 = strncmp(v18, (const char *)&v30, 0x10uLL);
        BOOL v20 = *((void *)v18 - 2) < (unint64_t)v29;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        v18 += 32;
      }
      while (v20);
      BOOL v13 = (char *)(v18 - 48);
      BOOL v21 = v14 - 16;
      do
      {
        int v22 = strncmp(v21, (const char *)&v30, 0x10uLL);
        BOOL v23 = *((void *)v21 - 2) < (unint64_t)v29;
        if (v22) {
          BOOL v23 = v22 < 0;
        }
        v21 -= 32;
      }
      while (!v23);
      int v14 = (char *)(v21 + 16);
    }
    while (v13 < v14);
    int v8 = (char *)(v18 - 80);
  }
  if (v8 != a1)
  {
    long long v24 = *((_OWORD *)v8 + 1);
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *((_OWORD *)a1 + 1) = v24;
  }
  long long v25 = v30;
  *(_OWORD *)int v8 = v29;
  *((_OWORD *)v8 + 1) = v25;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = strncmp((const char *)(a2 - 16), (const char *)(a1 + 16), 0x10uLL);
      unint64_t v8 = *(void *)(a2 - 32);
      unint64_t v7 = (_OWORD *)(a2 - 32);
      BOOL v9 = v8 < *(void *)a1;
      if (v6) {
        BOOL v9 = v6 < 0;
      }
      if (v9)
      {
        long long v11 = *(_OWORD *)a1;
        long long v10 = *(_OWORD *)(a1 + 16);
        long long v12 = v7[1];
        *(_OWORD *)a1 = *v7;
        *(_OWORD *)(a1 + 16) = v12;
        *unint64_t v7 = v11;
        v7[1] = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((char *)a1, (char *)(a1 + 32), (char *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64), (char *)(a2 - 32));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(a1, a1 + 32, a1 + 64, (long long *)(a1 + 96), (char *)(a2 - 32));
      return 1;
    default:
      uint64_t v13 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((char *)a1, (char *)(a1 + 32), (char *)(a1 + 64));
      uint64_t v14 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    int v17 = strncmp((const char *)(v14 + 16), (const char *)(v13 + 16), 0x10uLL);
    BOOL v18 = *(void *)v14 < *(void *)v13;
    if (v17) {
      BOOL v18 = v17 < 0;
    }
    if (v18)
    {
      long long v26 = *(_OWORD *)v14;
      *(_OWORD *)int v27 = *(_OWORD *)(v14 + 16);
      uint64_t v19 = v15;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        long long v21 = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 96) = *(_OWORD *)(a1 + v19 + 64);
        *(_OWORD *)(v20 + 112) = v21;
        if (v19 == -64) {
          break;
        }
        int v22 = strncmp(v27, (const char *)(v20 + 48), 0x10uLL);
        BOOL v23 = (unint64_t)v26 < *(void *)(v20 + 32);
        if (v22) {
          BOOL v23 = v22 < 0;
        }
        v19 -= 32;
        if (!v23)
        {
          long long v24 = (_OWORD *)(a1 + v19 + 96);
          goto LABEL_18;
        }
      }
      long long v24 = (_OWORD *)a1;
LABEL_18:
      long long v25 = *(_OWORD *)v27;
      *long long v24 = v26;
      v24[1] = v25;
      if (++v16 == 8) {
        return v14 + 32 == a2;
      }
    }
    uint64_t v13 = v14;
    v15 += 32;
    v14 += 32;
    if (v14 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(long long *a1, long long *a2, long long *a3, char *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((char *)a1, (char *)a2, (char *)a3);
  int v8 = strncmp(a4 + 16, (const char *)a3 + 16, 0x10uLL);
  BOOL v10 = *(void *)a4 < *(void *)a3;
  if (v8) {
    BOOL v10 = v8 < 0;
  }
  if (v10)
  {
    long long v12 = *a3;
    long long v11 = a3[1];
    long long v13 = *((_OWORD *)a4 + 1);
    *a3 = *(_OWORD *)a4;
    a3[1] = v13;
    *(_OWORD *)a4 = v12;
    *((_OWORD *)a4 + 1) = v11;
    int v14 = strncmp((const char *)a3 + 16, (const char *)a2 + 16, 0x10uLL);
    BOOL v15 = *(void *)a3 < *(void *)a2;
    if (v14) {
      BOOL v15 = v14 < 0;
    }
    if (v15)
    {
      long long v17 = *a2;
      long long v16 = a2[1];
      long long v18 = a3[1];
      *a2 = *a3;
      a2[1] = v18;
      *a3 = v17;
      a3[1] = v16;
      int v19 = strncmp((const char *)a2 + 16, (const char *)a1 + 16, 0x10uLL);
      BOOL v20 = *(void *)a2 < *(void *)a1;
      if (v19) {
        BOOL v20 = v19 < 0;
      }
      if (v20)
      {
        long long v21 = *a1;
        __n128 result = (__n128)a1[1];
        long long v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        *a2 = v21;
        a2[1] = (__int128)result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, char *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((long long *)a1, (long long *)a2, (long long *)a3, (char *)a4);
  int v10 = strncmp(a5 + 16, (const char *)a4 + 16, 0x10uLL);
  BOOL v12 = *(void *)a5 < *(void *)a4;
  if (v10) {
    BOOL v12 = v10 < 0;
  }
  if (v12)
  {
    long long v14 = *a4;
    long long v13 = a4[1];
    long long v15 = *((_OWORD *)a5 + 1);
    *a4 = *(_OWORD *)a5;
    a4[1] = v15;
    *(_OWORD *)a5 = v14;
    *((_OWORD *)a5 + 1) = v13;
    int v16 = strncmp((const char *)a4 + 16, (const char *)(a3 + 16), 0x10uLL);
    BOOL v17 = *(void *)a4 < *(void *)a3;
    if (v16) {
      BOOL v17 = v16 < 0;
    }
    if (v17)
    {
      long long v19 = *(_OWORD *)a3;
      long long v18 = *(_OWORD *)(a3 + 16);
      long long v20 = a4[1];
      *(_OWORD *)a3 = *a4;
      *(_OWORD *)(a3 + 16) = v20;
      *a4 = v19;
      a4[1] = v18;
      int v21 = strncmp((const char *)(a3 + 16), (const char *)(a2 + 16), 0x10uLL);
      BOOL v22 = *(void *)a3 < *(void *)a2;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (v22)
      {
        long long v24 = *(_OWORD *)a2;
        long long v23 = *(_OWORD *)(a2 + 16);
        long long v25 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v25;
        *(_OWORD *)a3 = v24;
        *(_OWORD *)(a3 + 16) = v23;
        int v26 = strncmp((const char *)(a2 + 16), (const char *)(a1 + 16), 0x10uLL);
        BOOL v27 = *(void *)a2 < *(void *)a1;
        if (v26) {
          BOOL v27 = v26 < 0;
        }
        if (v27)
        {
          long long v28 = *(_OWORD *)a1;
          __n128 result = *(__n128 *)(a1 + 16);
          long long v29 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v29;
          *(_OWORD *)a2 = v28;
          *(__n128 *)(a2 + 16) = result;
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*,MMapSegment*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 5;
    if ((uint64_t)a2 - a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      BOOL v12 = (char *)(a1 + 32 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(a1, a4, v9, v12);
        v12 -= 32;
        --v11;
      }
      while (v11);
    }
    long long v13 = a2;
    if (a2 != a3)
    {
      long long v14 = (char *)a2;
      do
      {
        int v15 = strncmp(v14 + 16, (const char *)(a1 + 16), 0x10uLL);
        BOOL v16 = *(void *)v14 < *(void *)a1;
        if (v15) {
          BOOL v16 = v15 < 0;
        }
        if (v16)
        {
          long long v18 = *(_OWORD *)v14;
          long long v17 = *((_OWORD *)v14 + 1);
          long long v19 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)long long v14 = *(_OWORD *)a1;
          *((_OWORD *)v14 + 1) = v19;
          *(_OWORD *)a1 = v18;
          *(_OWORD *)(a1 + 16) = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(a1, a4, v9, (char *)a1);
        }
        v14 += 32;
      }
      while (v14 != (char *)a3);
      long long v13 = a3;
    }
    if (v8 >= 33)
    {
      uint64_t v20 = (unint64_t)v8 >> 5;
      int v21 = (char *)(a2 - 2);
      do
      {
        long long v26 = *(_OWORD *)a1;
        long long v27 = *(_OWORD *)(a1 + 16);
        BOOL v22 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((char *)a1, a4, v20);
        if (v21 == v22)
        {
          *(_OWORD *)BOOL v22 = v26;
          *((_OWORD *)v22 + 1) = v27;
        }
        else
        {
          long long v23 = *((_OWORD *)v21 + 1);
          *(_OWORD *)BOOL v22 = *(_OWORD *)v21;
          *((_OWORD *)v22 + 1) = v23;
          *(_OWORD *)int v21 = v26;
          *((_OWORD *)v21 + 1) = v27;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(a1, (uint64_t)(v22 + 32), a4, (uint64_t)&v22[-a1 + 32] >> 5);
        }
        v21 -= 32;
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

double std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    int v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)&a4[-a1] >> 5)
    {
      uint64_t v9 = (uint64_t)&a4[-a1] >> 4;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (uint64_t *)(a1 + 32 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 >= a3)
      {
        unint64_t v15 = *v11;
      }
      else
      {
        int v13 = strncmp((const char *)v11 + 16, (const char *)v11 + 48, 0x10uLL);
        BOOL v14 = *v11 < (unint64_t)v11[4];
        if (v13) {
          BOOL v14 = v13 < 0;
        }
        if (v14) {
          unint64_t v15 = v11[4];
        }
        else {
          unint64_t v15 = *v11;
        }
        if (v14)
        {
          v11 += 4;
          uint64_t v10 = v12;
        }
      }
      int v16 = strncmp((const char *)v11 + 16, v5 + 16, 0x10uLL);
      BOOL v18 = v15 < *(void *)v5;
      if (v16) {
        BOOL v18 = v16 < 0;
      }
      if (!v18)
      {
        long long v28 = *(_OWORD *)v5;
        long long v29 = *((_OWORD *)v5 + 1);
        do
        {
          long long v19 = (char *)v11;
          long long v20 = *((_OWORD *)v11 + 1);
          *(_OWORD *)int v5 = *(_OWORD *)v11;
          *((_OWORD *)v5 + 1) = v20;
          if (v7 < v10) {
            break;
          }
          uint64_t v21 = (2 * v10) | 1;
          unint64_t v11 = (uint64_t *)(a1 + 32 * v21);
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            unint64_t v24 = *v11;
            uint64_t v10 = v21;
          }
          else
          {
            int v22 = strncmp((const char *)v11 + 16, (const char *)v11 + 48, 0x10uLL);
            BOOL v23 = *v11 < (unint64_t)v11[4];
            if (v22) {
              BOOL v23 = v22 < 0;
            }
            unint64_t v24 = v23 ? v11[4] : *v11;
            if (v23) {
              v11 += 4;
            }
            else {
              uint64_t v10 = v21;
            }
          }
          int v25 = strncmp((const char *)v11 + 16, (const char *)&v29, 0x10uLL);
          BOOL v26 = v24 < (unint64_t)v28;
          if (v25) {
            BOOL v26 = v25 < 0;
          }
          int v5 = v19;
        }
        while (!v26);
        double result = *(double *)&v28;
        long long v27 = v29;
        *(_OWORD *)long long v19 = v28;
        *((_OWORD *)v19 + 1) = v27;
      }
    }
  }
  return result;
}

const char *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = &a1[32 * v5 + 32];
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3)
    {
      int v11 = strncmp(v8 + 16, v8 + 48, 0x10uLL);
      BOOL v12 = *(void *)v8 < *((void *)v8 + 4);
      if (v11) {
        BOOL v12 = v11 < 0;
      }
      if (v12)
      {
        v8 += 32;
        uint64_t v9 = v10;
      }
    }
    long long v13 = *((_OWORD *)v8 + 1);
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *((_OWORD *)a1 + 1) = v13;
    a1 = (char *)v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = a1 + 32 * (v4 >> 1);
    int v9 = strncmp((const char *)(v8 + 16), (const char *)(a2 - 16), 0x10uLL);
    unint64_t v12 = *(void *)(a2 - 32);
    int v11 = (long long *)(a2 - 32);
    BOOL v13 = *(void *)v8 < v12;
    if (v9) {
      BOOL v13 = v9 < 0;
    }
    if (v13)
    {
      long long v19 = *v11;
      long long v20 = v11[1];
      do
      {
        BOOL v14 = (long long *)v8;
        long long v15 = *(_OWORD *)(v8 + 16);
        *int v11 = *(_OWORD *)v8;
        v11[1] = v15;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = a1 + 32 * v7;
        int v16 = strncmp((const char *)(v8 + 16), (const char *)&v20, 0x10uLL);
        BOOL v17 = *(void *)v8 < (unint64_t)v19;
        if (v16) {
          BOOL v17 = v16 < 0;
        }
        int v11 = v14;
      }
      while (v17);
      double result = *(double *)&v19;
      long long v18 = v20;
      long long *v14 = v19;
      v14[1] = v18;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,MMapSegment*,false>(char *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,MMapSegment*>(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = strncmp((const char *)(a2 - 16), (const char *)(a1 + 16), 0x10uLL);
      unint64_t v8 = *(void *)(a2 - 32);
      unint64_t v7 = (_OWORD *)(a2 - 32);
      BOOL v9 = v8 < *(void *)a1;
      if (v6) {
        BOOL v9 = v6 < 0;
      }
      if (v9)
      {
        long long v11 = *(_OWORD *)a1;
        long long v10 = *(_OWORD *)(a1 + 16);
        long long v12 = v7[1];
        *(_OWORD *)a1 = *v7;
        *(_OWORD *)(a1 + 16) = v12;
        *unint64_t v7 = v11;
        v7[1] = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((char *)a1, (char *)(a1 + 32), (char *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64), (char *)(a2 - 32));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(a1, a1 + 32, a1 + 64, (long long *)(a1 + 96), (char *)(a2 - 32));
      return 1;
    default:
      uint64_t v13 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((char *)a1, (char *)(a1 + 32), (char *)(a1 + 64));
      uint64_t v14 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    int v17 = strncmp((const char *)(v14 + 16), (const char *)(v13 + 16), 0x10uLL);
    BOOL v18 = *(void *)v14 < *(void *)v13;
    if (v17) {
      BOOL v18 = v17 < 0;
    }
    if (v18)
    {
      long long v26 = *(_OWORD *)v14;
      *(_OWORD *)BOOL v27 = *(_OWORD *)(v14 + 16);
      uint64_t v19 = v15;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        long long v21 = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 96) = *(_OWORD *)(a1 + v19 + 64);
        *(_OWORD *)(v20 + 112) = v21;
        if (v19 == -64) {
          break;
        }
        int v22 = strncmp(v27, (const char *)(v20 + 48), 0x10uLL);
        BOOL v23 = (unint64_t)v26 < *(void *)(v20 + 32);
        if (v22) {
          BOOL v23 = v22 < 0;
        }
        v19 -= 32;
        if (!v23)
        {
          int v24 = (_OWORD *)(a1 + v19 + 96);
          goto LABEL_18;
        }
      }
      int v24 = (_OWORD *)a1;
LABEL_18:
      long long v25 = *(_OWORD *)v27;
      *int v24 = v26;
      v24[1] = v25;
      if (++v16 == 8) {
        return v14 + 32 == a2;
      }
    }
    uint64_t v13 = v14;
    v15 += 32;
    v14 += 32;
    if (v14 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,CSCppSegmentRange*,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,CSCppSegmentRange*>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1)) {
        char v6 = (const char *)*(a2 - 1);
      }
      else {
        char v6 = (const char *)*(a2 - 2);
      }
      if (a1[3]) {
        unint64_t v7 = (const char *)a1[3];
      }
      else {
        unint64_t v7 = (const char *)a1[2];
      }
      int v8 = strncmp(v6, v7, 0x10uLL);
      unint64_t v10 = *(v2 - 4);
      BOOL v9 = v2 - 4;
      BOOL v11 = v10 < *a1;
      if (v8) {
        BOOL v11 = v8 < 0;
      }
      if (v11)
      {
        long long v13 = *(_OWORD *)a1;
        long long v12 = *((_OWORD *)a1 + 1);
        long long v14 = *((_OWORD *)v9 + 1);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *((_OWORD *)a1 + 1) = v14;
        *(_OWORD *)BOOL v9 = v13;
        *((_OWORD *)v9 + 1) = v12;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      unint64_t v15 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8);
      unint64_t v16 = a1 + 12;
      if (a1 + 12 == v2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      long long v33 = v2;
      break;
  }
  while (1)
  {
    unint64_t v20 = v16[2];
    unint64_t v19 = v16[3];
    if (v19) {
      int v21 = (const char *)v16[3];
    }
    else {
      int v21 = (const char *)v16[2];
    }
    if (v15[3]) {
      BOOL v22 = (const char *)v15[3];
    }
    else {
      BOOL v22 = (const char *)v15[2];
    }
    int v23 = strncmp(v21, v22, 0x10uLL);
    unint64_t v24 = *v16;
    BOOL v25 = *v16 < *v15;
    if (v23) {
      BOOL v25 = v23 < 0;
    }
    if (v25)
    {
      unint64_t v34 = v16[1];
      uint64_t v26 = v17;
      while (1)
      {
        BOOL v27 = (char *)a1 + v26;
        long long v28 = *(_OWORD *)((char *)a1 + v26 + 80);
        *((_OWORD *)v27 + 6) = *(_OWORD *)((char *)a1 + v26 + 64);
        *((_OWORD *)v27 + 7) = v28;
        if (v26 == -64) {
          break;
        }
        if (*((void *)v27 + 7)) {
          long long v29 = (const char *)*((void *)v27 + 7);
        }
        else {
          long long v29 = (const char *)*((void *)v27 + 6);
        }
        int v30 = strncmp(v21, v29, 0x10uLL);
        BOOL v31 = v24 < *((void *)v27 + 4);
        if (v30) {
          BOOL v31 = v30 < 0;
        }
        v26 -= 32;
        if (!v31)
        {
          long long v32 = (unint64_t *)((char *)a1 + v26 + 96);
          goto LABEL_33;
        }
      }
      long long v32 = a1;
LABEL_33:
      uint64_t v2 = v33;
      unint64_t *v32 = v24;
      v32[1] = v34;
      void v32[2] = v20;
      v32[3] = v19;
      if (++v18 == 8) {
        return v16 + 4 == v33;
      }
    }
    unint64_t v15 = v16;
    v17 += 32;
    v16 += 4;
    if (v16 == v2) {
      return 1;
    }
  }
}

void *std::__function::__value_func<void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::~__func()
{
}

__n128 std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_1F12C9EB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F12C9EB8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::operator()(uint64_t a1, unint64_t **a2, uint64_t *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  long long v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(void *)(a1 + 64);
  unint64_t v7 = **a2;
  unint64_t v55 = 0;
  if ((TThreadsafeAddressRelocator<Pointer64>::relocate((void *)(v6 + 120), v7, &v55) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Symbol archive address 0x%x could not be relocated to real address\n", buf, 8u);
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Symbol archive address 0x%x could not be relocated to real address\n");
    return;
  }
  unint64_t v8 = v55;
  if (*(_DWORD *)(a1 + 56) == -1 && v55 > **(void **)(a1 + 48))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    (*(void (**)(void))(*(void *)(v9 + 8) + 16))();
    ++**(void **)v9;
    **(void **)(a1 + 48) = v55;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 32) | 5;
  long long v12 = *(uint64_t **)(v10 + 8);
  unint64_t v13 = *(void *)(v10 + 16);
  if ((unint64_t)v12 >= v13)
  {
    unint64_t v15 = *(uint64_t **)v10;
    uint64_t v16 = ((uint64_t)v12 - *(void *)v10) >> 4;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = v13 - (void)v15;
    if (v18 >> 3 > v17) {
      unint64_t v17 = v18 >> 3;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v10 + 16, v19);
      unint64_t v15 = *(uint64_t **)v10;
      long long v12 = *(uint64_t **)(v10 + 8);
    }
    else
    {
      unint64_t v20 = 0;
    }
    int v21 = (uint64_t *)&v20[16 * v16];
    BOOL v22 = &v20[16 * v19];
    *int v21 = v11;
    v21[1] = (uint64_t)v4;
    long long v14 = v21 + 2;
    if (v12 != v15)
    {
      do
      {
        *((_OWORD *)v21 - 1) = *((_OWORD *)v12 - 1);
        v21 -= 2;
        v12 -= 2;
      }
      while (v12 != v15);
      unint64_t v15 = *(uint64_t **)v10;
    }
    *(void *)uint64_t v10 = v21;
    *(void *)(v10 + 8) = v14;
    *(void *)(v10 + 16) = v22;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    uint64_t *v12 = v11;
    v12[1] = (uint64_t)v4;
    long long v14 = v12 + 2;
  }
  *(void *)(v10 + 8) = v14;
  uint64_t v23 = *(void *)(a1 + 24);
  uint64_t v24 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v25 = v24 | 5;
    unint64_t v26 = *(void *)(v23 + 16);
    BOOL v27 = *(uint64_t **)(v23 + 8);
    if ((unint64_t)v27 < v26)
    {
      *BOOL v27 = v25;
      v27[1] = v5;
LABEL_30:
      long long v29 = v27 + 2;
      goto LABEL_57;
    }
    int v30 = *(uint64_t **)v23;
    uint64_t v31 = ((uint64_t)v27 - *(void *)v23) >> 4;
    unint64_t v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v33 = v26 - (void)v30;
    if (v33 >> 3 > v32) {
      unint64_t v32 = v33 >> 3;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v32;
    }
    if (v34)
    {
      long long v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v23 + 16, v34);
      int v30 = *(uint64_t **)v23;
      BOOL v27 = *(uint64_t **)(v23 + 8);
    }
    else
    {
      long long v35 = 0;
    }
    long long v41 = (uint64_t *)&v35[16 * v31];
    long long v42 = &v35[16 * v34];
    *long long v41 = v25;
    v41[1] = v5;
    long long v29 = v41 + 2;
    if (v27 != v30)
    {
      do
      {
        *((_OWORD *)v41 - 1) = *((_OWORD *)v27 - 1);
        v41 -= 2;
        v27 -= 2;
      }
      while (v27 != v30);
LABEL_54:
      int v30 = *(uint64_t **)v23;
    }
  }
  else
  {
    unint64_t v28 = *(void *)(v23 + 16);
    BOOL v27 = *(uint64_t **)(v23 + 8);
    if ((unint64_t)v27 < v28)
    {
      *BOOL v27 = v24;
      v27[1] = (uint64_t)v4;
      goto LABEL_30;
    }
    int v30 = *(uint64_t **)v23;
    uint64_t v36 = ((uint64_t)v27 - *(void *)v23) >> 4;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v38 = v28 - (void)v30;
    if (v38 >> 3 > v37) {
      unint64_t v37 = v38 >> 3;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v23 + 16, v39);
      int v30 = *(uint64_t **)v23;
      BOOL v27 = *(uint64_t **)(v23 + 8);
    }
    else
    {
      uint64_t v40 = 0;
    }
    long long v41 = (uint64_t *)&v40[16 * v36];
    long long v42 = &v40[16 * v39];
    *long long v41 = v24;
    v41[1] = (uint64_t)v4;
    long long v29 = v41 + 2;
    if (v27 != v30)
    {
      do
      {
        *((_OWORD *)v41 - 1) = *((_OWORD *)v27 - 1);
        v41 -= 2;
        v27 -= 2;
      }
      while (v27 != v30);
      goto LABEL_54;
    }
  }
  *(void *)uint64_t v23 = v41;
  *(void *)(v23 + 8) = v29;
  *(void *)(v23 + 16) = v42;
  if (v30) {
    operator delete(v30);
  }
LABEL_57:
  *(void *)(v23 + 8) = v29;
  if (*(int *)(a1 + 56) + 1 == (uint64_t)(*(void *)(*(void *)(a1 + 16) + 8) - **(void **)(a1 + 16)) >> 4)
  {
    uint64_t v43 = *(void *)(a1 + 40);
    CSSymbolGetRange(*(void *)(a1 + 32) | 5, (uint64_t)v4);
    (*(void (**)(void))(*(void *)(v43 + 8) + 16))();
    ++**(void **)v43;
  }
  unint64_t v44 = v8 + HIDWORD(v7);
  uint64_t v45 = *((unsigned int *)v4 + 5);
  unint64_t v46 = v44;
  if (v45 == -1)
  {
LABEL_73:
    if (*(_DWORD *)(a1 + 56) != -1)
    {
LABEL_74:
      *(void *)(*(void *)(a1 + 16) + 8) -= 16;
      *(void *)(*(void *)(a1 + 24) + 8) -= 16;
      return;
    }
    if (v46 <= **(void **)(a1 + 48))
    {
      unint64_t v46 = **(void **)(a1 + 48);
    }
    else
    {
      uint64_t v53 = *(void *)(a1 + 40);
      (*(void (**)(void))(*(void *)(v53 + 8) + 16))();
      ++**(void **)v53;
      **(void **)(a1 + 48) = v46;
      if (*(_DWORD *)(a1 + 56) != -1) {
        goto LABEL_74;
      }
    }
    if (v44 > v46)
    {
      uint64_t v54 = *(void *)(a1 + 40);
      (*(void (**)(void))(*(void *)(v54 + 8) + 16))();
      ++**(void **)v54;
      **(void **)(a1 + 48) = v44;
    }
    goto LABEL_74;
  }
  uint64_t v47 = *(unsigned int **)(v6 + 88);
  uint64_t v48 = v47[5];
  unint64_t v46 = v44;
  if (v45 >= v48
    || (unint64_t v49 = (unint64_t)&v47[9 * v45 + 24 + 8 * v47[2] + 6 * v47[3] + 6 * v47[4]],
        unint64_t v46 = v44,
        (unint64_t)v47 > v49)
    || (unint64_t v46 = v44, v49 >= (unint64_t)v47 + v47[1]))
  {
LABEL_70:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Out of bounds children index iterating inline ranges", buf, 2u);
    }
    fwrite("Out of bounds children index iterating inline ranges", 0x34uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    goto LABEL_73;
  }
  uint64_t v50 = v48 - v45;
  while (1)
  {
    std::function<void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::operator()(*(void *)(a1 + 8), v49, v49);
    *(void *)long long buf = 0;
    unint64_t v51 = *(void *)v49;
    if ((TThreadsafeAddressRelocator<Pointer64>::relocate((void *)(v6 + 120), *(void *)v49, buf) & 1) == 0) {
      break;
    }
    if ((*(unsigned char *)(v49 + 11) & 0x40) != 0)
    {
      unint64_t v46 = *(void *)buf + HIDWORD(v51);
      goto LABEL_73;
    }
    if (--v50)
    {
      unint64_t v52 = *(void *)(v6 + 88);
      v49 += 36;
      if (v52 <= v49 && v49 < *(unsigned int *)(v52 + 4) + v52) {
        continue;
      }
    }
    unint64_t v46 = *(void *)buf + HIDWORD(v51);
    goto LABEL_70;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)unsigned int v56 = 67109120;
    int v57 = v51;
    _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Child symbol archive address 0x%x could not be relocated to real address\n", v56, 8u);
  }
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "Child symbol archive address 0x%x could not be relocated to real address\n");
}

uint64_t std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::target_type()
{
}

void *std::__function::__value_func<void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    long long v3 = result;
    long long v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B905C780(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t task_get_mapped_memory_cache(mach_port_name_t a1)
{
  return task_get_mapped_memory_cache_with_label(a1);
}

uint64_t task_get_mapped_memory_cache_with_label(mach_port_name_t a1)
{
  mach_port_name_t v6 = a1;
  std::mutex::lock(&_task_to_mapped_memory_lock(void)::lock);
  if (!task_to_mapped_memory) {
    operator new();
  }
  mach_port_name_t v7 = a1;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::find<unsigned int>((void *)task_to_mapped_memory, &v7);
  if (v2 && (uint64_t v3 = v2[3]) != 0)
  {
    std::mutex::lock((std::mutex *)(v3 + 128));
    ++*(_DWORD *)(v3 + 104);
    std::mutex::unlock((std::mutex *)(v3 + 128));
  }
  else
  {
    uint64_t mapped_memory_cache_for_task_with_label = create_mapped_memory_cache_for_task_with_label(a1);
    std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::__emplace_unique_key_args<unsigned int,unsigned int &,mapped_memory_t *&>(task_to_mapped_memory, &v6, &v6, &mapped_memory_cache_for_task_with_label);
    uint64_t v3 = mapped_memory_cache_for_task_with_label;
  }
  std::mutex::unlock(&_task_to_mapped_memory_lock(void)::lock);
  return v3;
}

void sub_1B905C88C(_Unwind_Exception *a1)
{
}

uint64_t create_mapped_memory_cache_for_task_with_label(mach_port_name_t name)
{
  if (name - 1 <= 0xFFFFFFFD && !mach_port_mod_refs(*MEMORY[0x1E4F14960], name, 0, 1)) {
    operator new();
  }
  return 0;
}

void sub_1B905CA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  std::default_delete<mapped_memory_t>::operator()[abi:ne180100]((uint64_t)&a11, v11);
  _Unwind_Resume(a1);
}

uint64_t retain_mapped_memory_cache(uint64_t a1)
{
  if (a1)
  {
    std::mutex::lock((std::mutex *)(a1 + 128));
    ++*(_DWORD *)(a1 + 104);
    std::mutex::unlock((std::mutex *)(a1 + 128));
  }
  return a1;
}

uint64_t task_lookup_mapped_memory_cache(unsigned int a1)
{
  std::mutex::lock(&_task_to_mapped_memory_lock(void)::lock);
  unsigned int v5 = a1;
  if (task_to_mapped_memory
    && (uint64_t v2 = std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::find<unsigned int>((void *)task_to_mapped_memory, &v5)) != 0)
  {
    uint64_t v3 = v2[3];
  }
  else
  {
    uint64_t v3 = 0;
  }
  std::mutex::unlock(&_task_to_mapped_memory_lock(void)::lock);
  return v3;
}

void sub_1B905CB3C(_Unwind_Exception *a1)
{
}

void task_release_mapped_memory_cache(unsigned int a1)
{
  unsigned int v4 = a1;
  std::mutex::lock(&_task_to_mapped_memory_lock(void)::lock);
  unsigned int v5 = a1;
  if (task_to_mapped_memory)
  {
    uint64_t v2 = std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::find<unsigned int>((void *)task_to_mapped_memory, &v5);
    if (v2)
    {
      uint64_t v3 = (std::mutex *)v2[3];
      if (v3)
      {
        if (!release_mapped_memory_cache(v3)) {
          std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::__erase_unique<unsigned int>((void *)task_to_mapped_memory, &v4);
        }
      }
    }
  }
  std::mutex::unlock(&_task_to_mapped_memory_lock(void)::lock);
}

void sub_1B905CBD0(_Unwind_Exception *a1)
{
}

std::mutex *release_mapped_memory_cache(std::mutex *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    v3.__m_ = result + 2;
    v3.__owns_ = 1;
    std::mutex::lock(result + 2);
    int v2 = *(_DWORD *)(v1 + 104) - 1;
    *(_DWORD *)(v1 + 104) = v2;
    if (v2
      || (std::unique_lock<std::mutex>::unlock(&v3), destroy_mapped_memory_cache(v1), v1 = 0, __n128 result = 0, v3.__owns_))
    {
      std::mutex::unlock(v3.__m_);
      return (std::mutex *)v1;
    }
  }
  return result;
}

void sub_1B905CC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t enumerate_mapped_memory_core_file_dumped_regions(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 192);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    uint64_t v4 = *(void *)(v2 + 24);
    if (v3 != v4)
    {
      uint64_t v6 = v3 + 40;
      do
      {
        char v12 = 0;
        uint64_t v7 = *(void *)(v6 - 8);
        long long v8 = *(_OWORD *)(v6 - 24);
        v10[0] = *(_OWORD *)(v6 - 40);
        v10[1] = v8;
        uint64_t v11 = v7;
        __n128 result = (*(uint64_t (**)(uint64_t, _OWORD *, char *))(a2 + 16))(a2, v10, &v12);
        if (v12) {
          break;
        }
        BOOL v9 = v6 == v4;
        v6 += 40;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t create_mapped_memory_cache_for_core_file_without_exclave_metadata(char *a1, const char *a2)
{
  return common_create_mapped_memory_cache_for_core_file_with_label_and_optional_exclave_metadata(a1, a2, 0);
}

uint64_t common_create_mapped_memory_cache_for_core_file_with_label_and_optional_exclave_metadata(char *a1, const char *a2, int a3)
{
  uint64_t v453 = *MEMORY[0x1E4F143B8];
  CSCppFileMemory::CSCppFileMemory(v370, a1, 0);
  unsigned int v5 = (_DWORD *)(*(uint64_t (**)(void *, void, uint64_t))(v370[0] + 32))(v370, 0, 28);
  if (!v5 || *v5 != -17958194)
  {
    CSCppFileMemory::CSCppFileMemory(&v367, a1, 0);
    unint64_t v44 = (_DWORD *)(*(uint64_t (**)(uint64_t *, void, uint64_t))(v367 + 32))(&v367, 0, 32);
    if (!v44 || *v44 != -17958193) {
      goto LABEL_341;
    }
    v389[0] = 0;
    v389[1] = 0;
    v390 = 0;
    CSCppFileMemory::CSCppFileMemory(v443, a1, 0);
    *(void *)name = v443;
    uint64_t v45 = (char *)TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::macho_header_at(name, 0, 1);
    if (!v45 || *((_DWORD *)v45 + 3) != 4) {
      goto LABEL_315;
    }
    int v362 = a3;
    int v358 = 0;
    v387[1] = 0;
    v388 = 0;
    v387[0] = &v387[1];
    LOBYTE(v379) = 0;
    LOBYTE(v382) = 0;
    v420[0] = 0;
    char v442 = 0;
    LOBYTE(v384) = 0;
    LOBYTE(v385) = 0;
    uint64_t v46 = *((unsigned int *)v45 + 5);
    LODWORD(v375) = *((_DWORD *)v45 + 4);
    v376 = v45;
    unint64_t v377 = (unint64_t)&v45[v46 + 32];
    v378 = v45 + 32;
    while (1)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            unint64_t v47 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v375);
            uint64_t v48 = (const note_command *)v47;
            if (!v47)
            {
              unint64_t v84 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v389[1] - (char *)v389[0]) >> 3));
              if (v389[1] == v389[0]) {
                uint64_t v85 = 0;
              }
              else {
                uint64_t v85 = v84;
              }
              std::__introsort<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*,false>((unint64_t)v389[0], (unint64_t)v389[1], v85, 1);
              mach_port_name_t v374 = 0;
              mach_port_name_t v374 = open(a1, 0x1000000);
              if ((v374 & 0x80000000) == 0) {
                operator new();
              }
              uint64_t v89 = (void **)v387[0];
              if (v387[0] != &v387[1])
              {
                do
                {
                  mach_port_deallocate(*MEMORY[0x1E4F14960], *((_DWORD *)v89 + 8));
                  unsigned int v90 = (void **)v89[1];
                  if (v90)
                  {
                    do
                    {
                      uint64_t v91 = v90;
                      unsigned int v90 = (void **)*v90;
                    }
                    while (v90);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v91 = (void **)v89[2];
                      BOOL v14 = *v91 == v89;
                      uint64_t v89 = v91;
                    }
                    while (!v14);
                  }
                  uint64_t v89 = v91;
                }
                while (v91 != &v387[1]);
              }
LABEL_262:
              if (v442)
              {
                a3 = v362;
                if (v441 && v439)
                {
                  v440 = v439;
                  operator delete(v439);
                }
                if (v438 && v436)
                {
                  v437 = v436;
                  operator delete(v436);
                }
                if (v426 && v425 < 0) {
                  operator delete(*(void **)&v423[12]);
                }
                if (v423[4] && (v423[3] & 0x80000000) != 0) {
                  operator delete(*(void **)&v420[64]);
                }
                if (v420[56] && (v420[55] & 0x80000000) != 0) {
                  operator delete(*(void **)&v420[32]);
                }
                if (v420[24] && (v420[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v420);
                }
              }
              else
              {
LABEL_311:
                a3 = v362;
              }
              if ((_BYTE)v382)
              {
                *(void *)v420 = &v379;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v420);
              }
              std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)v387, (void *)v387[1]);
LABEL_315:
              CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v443);
              if (v389[0])
              {
                v389[1] = v389[0];
                operator delete(v389[0]);
              }
              if (!a3) {
                goto LABEL_341;
              }
              if (!CSArchitectureIsArm64(*(void *)(MEMORY[0xC0] + 40))) {
                goto LABEL_692;
              }
              v379 = (void *)CSSymbolicatorCreateWithCoreFilePathAndFlags(a1, 0, 0, 0);
              v380 = v135;
              if (CSIsNull((char)v379, (char)v135)) {
                goto LABEL_692;
              }
              v392[0] = &unk_1F12C9FC8;
              v392[1] = &v379;
              *((void *)&v393 + 1) = v392;
              std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v420, (uint64_t)v392);
              std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v392);
              char SymbolOwnerWithNameAtTime = CSSymbolicatorGetSymbolOwnerWithNameAtTime((char)v379, (uint64_t)v380, (uint64_t)"dyld", 0x8000000000000000);
              BOOL v138 = CSIsNull(SymbolOwnerWithNameAtTime, v137);
              uint64_t SymbolWithMangledNameAtTime = CSSymbolicatorGetSymbolWithMangledNameAtTime((char)v379, (uint64_t)v380, (uint64_t)"_vas__segmentinfo_table", 0x8000000000000000);
              uint64_t v141 = v140;
              if (CSIsNull(SymbolWithMangledNameAtTime, v140))
              {
                DeferredLambda::~DeferredLambda((DeferredLambda *)v420);
                goto LABEL_692;
              }
              unint64_t Range = CSSymbolGetRange(SymbolWithMangledNameAtTime, v141);
              unint64_t v143 = CSCppCoreFileMemory::CSCppCoreFileMemory(v443, 0);
              v144 = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*(void *)v443 + 32))(v143, Range, 8);
              if (v145 >= 8)
              {
                uint64_t v151 = (unsigned __int8 *)(*(uint64_t (**)(unsigned char *, void, uint64_t))(*(void *)v443 + 32))(v443, *v144, 24);
                if (v152 >= 0x18)
                {
                  unsigned int v154 = *v151;
                  unint64_t v153 = ((unint64_t)*(unsigned int *)(v151 + 1) << 8) | ((unint64_t)(*(unsigned __int16 *)(v151 + 5) | (v151[7] << 16)) << 40);
                  int v146 = v151[16];
                  unsigned int v147 = v151[17];
                  LODWORD(v148) = v151[18];
                  int v149 = 1;
                }
                else
                {
                  int v146 = 0;
                  unsigned int v147 = 0;
                  LODWORD(v148) = 0;
                  unint64_t v153 = 0;
                  unsigned int v154 = 0;
                  int v149 = 0;
                }
                unint64_t v150 = v153 | v154;
              }
              else
              {
                int v146 = 0;
                unsigned int v147 = 0;
                LODWORD(v148) = 0;
                int v149 = 0;
                unint64_t v150 = 0;
              }
              CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)v443);
              DeferredLambda::~DeferredLambda((DeferredLambda *)v420);
              if (!v149)
              {
LABEL_692:
                clear_mapped_memory(0);
                goto LABEL_341;
              }
              name[0] = v138;
              CSCppCoreFileMemory::CSCppCoreFileMemory(&v379, 0);
              if (v146 == 1 && v148 <= v147 && v148)
              {
                uint64_t v148 = v148;
                do
                {
                  unint64_t v155 = (uint64_t *)(*((uint64_t (**)(void **, unint64_t, uint64_t))v379 + 4))(&v379, v150, 8);
                  if (v156 < 8) {
                    break;
                  }
                  uint64_t v157 = *v155;
                  if (!*v155) {
                    break;
                  }
                  uint64_t v158 = (*((uint64_t (**)(void **, uint64_t, uint64_t))v379 + 4))(&v379, v157, 32);
                  if (v159 < 0x20 || *(unsigned char *)v158 != 1) {
                    break;
                  }
                  if (!*(unsigned char *)(v158 + 16))
                  {
                    v443[0] = 1;
                    uint64_t v184 = *(void *)(v158 + 1);
                    int v185 = *(_DWORD *)(v158 + 9);
                    __int16 v186 = *(_WORD *)(v158 + 13);
                    char v446 = *(unsigned char *)(v158 + 15);
                    __int16 v445 = v186;
                    int v444 = v185;
                    *(void *)&v443[1] = v184;
                    char v447 = 0;
                    LODWORD(v184) = *(_DWORD *)(v158 + 25);
                    LOWORD(v185) = *(_WORD *)(v158 + 29);
                    LOBYTE(v186) = *(unsigned char *)(v158 + 31);
                    uint64_t v448 = *(void *)(v158 + 17);
                    char v451 = v186;
                    __int16 v450 = v185;
                    int v449 = v184;
                    char v452 = 1;
                    v375 = 0;
                    v376 = 0;
                    unint64_t v377 = 0;
                    unsigned int v187 = *(unsigned __int16 *)&v443[6];
                    if (*(_WORD *)&v443[6])
                    {
                      unint64_t v188 = 0;
                      do
                      {
                        uint64_t v189 = (*((uint64_t (**)(void **, unint64_t, uint64_t))v379 + 4))(&v379, v157 + v443[1] + v188 * v443[2], 32);
                        if (v190 < 0x20)
                        {
LABEL_688:
                          BOOL v354 = 0;
                          goto LABEL_689;
                        }
                        char v191 = *(unsigned char *)v189;
                        *(_OWORD *)v420 = *(_OWORD *)(v189 + 1);
                        *(void *)&v420[15] = *(void *)(v189 + 16);
                        int v192 = *(unsigned __int8 *)(v189 + 24);
                        LODWORD(v392[0]) = *(_DWORD *)(v189 + 25);
                        *(_DWORD *)((char *)v392 + 3) = *(_DWORD *)(v189 + 28);
                        if (v192)
                        {
                          v193 = (long long *)v376;
                          if ((unint64_t)v376 >= v377)
                          {
                            int64_t v195 = (v376 - (unsigned char *)v375) >> 5;
                            unint64_t v196 = v195 + 1;
                            if ((unint64_t)(v195 + 1) >> 59) {
                              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                            }
                            uint64_t v197 = v377 - (void)v375;
                            if ((uint64_t)(v377 - (void)v375) >> 4 > v196) {
                              unint64_t v196 = v197 >> 4;
                            }
                            if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFE0) {
                              unint64_t v198 = 0x7FFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v198 = v196;
                            }
                            if (v198) {
                              v199 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)&v377, v198);
                            }
                            else {
                              v199 = 0;
                            }
                            v200 = (long long *)&v199[32 * v195];
                            *(unsigned char *)v200 = v191;
                            *(long long *)((char *)v200 + 1) = *(_OWORD *)v420;
                            *((void *)v200 + 2) = *(void *)&v420[15];
                            *((unsigned char *)v200 + 24) = v192;
                            *(_DWORD *)((char *)v200 + 25) = v392[0];
                            *((_DWORD *)v200 + 7) = *(_DWORD *)((char *)v392 + 3);
                            v202 = (long long *)v375;
                            v201 = (long long *)v376;
                            v203 = v200;
                            if (v376 != v375)
                            {
                              do
                              {
                                long long v204 = *(v201 - 1);
                                *(v203 - 2) = *(v201 - 2);
                                *(v203 - 1) = v204;
                                v203 -= 2;
                                v201 -= 2;
                              }
                              while (v201 != v202);
                              v201 = v202;
                            }
                            v194 = v200 + 2;
                            v375 = v203;
                            v376 = (char *)(v200 + 2);
                            unint64_t v377 = (unint64_t)&v199[32 * v198];
                            if (v201) {
                              operator delete(v201);
                            }
                          }
                          else
                          {
                            char *v376 = v191;
                            *(long long *)((char *)v193 + 1) = *(_OWORD *)v420;
                            *((void *)v193 + 2) = *(void *)&v420[15];
                            *((unsigned char *)v193 + 24) = v192;
                            *(_DWORD *)((char *)v193 + 25) = v392[0];
                            *((_DWORD *)v193 + 7) = *(_DWORD *)((char *)v392 + 3);
                            v194 = v193 + 2;
                          }
                          v376 = (char *)v194;
                          unsigned int v187 = *(unsigned __int16 *)&v443[6];
                        }
                        ++v188;
                      }
                      while (v188 < v187);
                      v205 = (__n128 *)v375;
                      uint64_t v206 = (__n128 *)v376;
                    }
                    else
                    {
                      uint64_t v206 = 0;
                      v205 = 0;
                    }
                    unint64_t v281 = 126 - 2 * __clz(((char *)v206 - (char *)v205) >> 5);
                    if (v206 == v205) {
                      uint64_t v282 = 0;
                    }
                    else {
                      uint64_t v282 = v281;
                    }
                    _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb((unint64_t)v205, v206, v282, 1);
                    *(void *)&v420[16] = 0;
                    *(void *)&v420[8] = 0;
                    *(void *)v420 = &v420[8];
                    v392[0] = (void *)1;
                    v283 = v375;
                    if ((unint64_t)(v376 - (unsigned char *)v375) < 0x21) {
                      goto LABEL_558;
                    }
                    unint64_t v284 = 1;
                    while (1)
                    {
                      if (CSRangeIntersectsRange(v283[4 * v284 - 4], v283[4 * v284 - 3], v283[4 * v284], v283[4 * v284 + 1]))
                      {
                        unint64_t v285 = v283[4 * v284 - 2];
                        unint64_t v286 = v283[4 * v284 + 2];
                        if (v285 >= v286)
                        {
                          if (v285 <= v286)
                          {
                            std::__tree<TRange<Pointer64>>::destroy((uint64_t)v420, *(void **)&v420[8]);
                            goto LABEL_688;
                          }
                          std::__tree<unsigned long,std::greater<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t **)v420, (unint64_t *)v392, (uint64_t *)v392);
                        }
                        else
                        {
                          v371[0] = (char *)v392[0] - 1;
                          std::__tree<unsigned long,std::greater<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t **)v420, (unint64_t *)v371, (uint64_t *)v371);
                        }
                      }
                      unint64_t v284 = (unint64_t)v392[0] + 1;
                      v392[0] = (void *)v284;
                      v283 = v375;
                      v287 = (long long *)v376;
                      if (v284 >= (v376 - (unsigned char *)v375) >> 5)
                      {
                        v288 = *(void **)v420;
                        if (*(unsigned char **)v420 != &v420[8])
                        {
                          do
                          {
                            v289 = (char *)v375 + 32 * v288[4];
                            int64_t v290 = (char *)v287 - (v289 + 32);
                            if (v287 != (long long *)(v289 + 32)) {
                              memmove((char *)v375 + 32 * v288[4], v289 + 32, (char *)v287 - (v289 + 32));
                            }
                            v287 = (long long *)&v289[v290];
                            v376 = &v289[v290];
                            v291 = (void *)v288[1];
                            if (v291)
                            {
                              do
                              {
                                v292 = v291;
                                v291 = (void *)*v291;
                              }
                              while (v291);
                            }
                            else
                            {
                              do
                              {
                                v292 = (unsigned char *)v288[2];
                                BOOL v14 = *(void *)v292 == (void)v288;
                                v288 = v292;
                              }
                              while (!v14);
                            }
                            v288 = v292;
                          }
                          while (v292 != &v420[8]);
                        }
LABEL_558:
                        std::__tree<TRange<Pointer64>>::destroy((uint64_t)v420, *(void **)&v420[8]);
                        v371[0] = 0;
                        v371[1] = 0;
                        v372 = 0;
                        v293 = (unsigned __int8 *)v375;
                        v356 = (long long *)v376;
                        if (v375 != v376)
                        {
                          do
                          {
                            unint64_t v294 = *(void *)v293;
                            uint64_t v295 = *((void *)v293 + 1);
                            *(void *)v420 = *(void *)v293;
                            *(void *)&v420[8] = v295;
                            memset(&v420[16], 0, 52);
                            v420[68] = 1;
                            uint64_t v421 = 0;
                            __int16 v422 = 0;
                            *(void *)v423 = 0;
                            *(void *)&v423[8] = 0;
                            *(_DWORD *)&v423[16] = *((_DWORD *)v293 + 7);
                            LOBYTE(v424) = 0;
                            char v428 = 0;
                            LOBYTE(v429) = 0;
                            char v431 = 0;
                            LOBYTE(v432) = 0;
                            char v434 = 0;
                            v436 = 0;
                            v437 = 0;
                            v435 = 0;
                            v364 = v293;
                            unsigned int v296 = *((_DWORD *)v293 + 7);
                            if (v296) {
                              int v297 = 3;
                            }
                            else {
                              int v297 = 1;
                            }
                            LOWORD(v374) = 9;
                            v299 = *(unint64_t **)(MEMORY[0xC0] + 16);
                            v298 = *(unint64_t **)(MEMORY[0xC0] + 24);
                            if (v299 == v298)
                            {
                              uint64_t v306 = v295;
                              unint64_t v305 = v294;
                            }
                            else
                            {
                              unsigned int v300 = v297 & 0xFFFFFFFB | (4 * ((v296 >> 1) & 1));
                              int v360 = (v296 >> 2) & 1;
                              do
                              {
                                unint64_t v301 = *v299;
                                uint64_t v302 = v299[1];
                                if (CSRangeIntersectsRange(*v299, v302, v294, v295))
                                {
                                  v392[0] = (void *)CSRangeIntersectionRange(v301, v302, v294, v295);
                                  v392[1] = (void *)v303;
                                  LODWORD(v393) = 1;
                                  DWORD1(v393) = v300;
                                  *((void *)&v393 + 1) = v300;
                                  v394 = 0;
                                  *(_DWORD *)v395 = v293[25];
                                  *(void *)&v395[4] = 0;
                                  *(void *)&v395[12] = 0;
                                  *(void *)&v395[19] = 0;
                                  *(_WORD *)&v395[27] = v360;
                                  uint64_t v396 = 0;
                                  __int16 v397 = 0;
                                  int v398 = 0;
                                  uint64_t v399 = 0;
                                  LODWORD(v400) = 3;
                                  HIDWORD(v400) = *((_DWORD *)v293 + 7);
                                  LOBYTE(v401) = 0;
                                  uint64_t v304 = v303 >> 14;
                                  char v405 = 0;
                                  std::vector<unsigned short>::vector(v389, v303 >> 14, &v374);
                                  long long v406 = *(_OWORD *)v389;
                                  v407 = v390;
                                  v389[1] = 0;
                                  v390 = 0;
                                  v389[0] = 0;
                                  char v408 = 1;
                                  std::vector<unsigned short>::vector(v387, v304, &v374);
                                  long long v409 = *(_OWORD *)v387;
                                  v410 = v388;
                                  v387[1] = 0;
                                  v388 = 0;
                                  v387[0] = 0;
                                  char v411 = 1;
                                  v413 = 0;
                                  v414 = 0;
                                  uint64_t v412 = 0;
                                  std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]((uint64_t *)&v435, (long long *)v392);
                                  v391 = (mach_port_name_t *)&v412;
                                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v391);
                                  if (v411 && (void)v409)
                                  {
                                    *((void *)&v409 + 1) = v409;
                                    operator delete((void *)v409);
                                  }
                                  if (v408 && (void)v406)
                                  {
                                    *((void *)&v406 + 1) = v406;
                                    operator delete((void *)v406);
                                  }
                                  if (v405 && v404 < 0) {
                                    operator delete(v401);
                                  }
                                  if (v387[0])
                                  {
                                    v387[1] = v387[0];
                                    operator delete(v387[0]);
                                  }
                                  if (v389[0])
                                  {
                                    v389[1] = v389[0];
                                    operator delete(v389[0]);
                                  }
                                }
                                v299 += 5;
                              }
                              while (v299 != v298);
                              unint64_t v305 = *(void *)v420;
                              uint64_t v306 = *(void *)&v420[8];
                            }
                            v307 = 0;
                            v308 = 0;
                            v389[0] = 0;
                            v389[1] = 0;
                            v390 = 0;
                            if (v305 < v305 + v306)
                            {
                              v309 = v435;
                              unint64_t v310 = v295 + v294;
                              do
                              {
                                *(_OWORD *)v392 = *(_OWORD *)v293;
                                long long v393 = *((_OWORD *)v293 + 1);
                                v394 = (void *)0x4000;
                                *(void *)v395 = v305;
                                *(void *)&v395[8] = v389;
                                if (v309 == v436)
                                {
                                  set_up_mapped_memory_cache_for_exclave_core_file<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long long,vas_segmentinfo_table const&,CSExclaveCoreFileType,mapped_memory_t *)::{lambda(unsigned long long)#1}::operator()((uint64_t)v392, v310);
                                  unint64_t v305 = v310;
                                }
                                else
                                {
                                  unint64_t v311 = *v309;
                                  if (v305 < *v309)
                                  {
                                    if (v310 >= v311) {
                                      unint64_t v312 = *v309;
                                    }
                                    else {
                                      unint64_t v312 = v310;
                                    }
                                    set_up_mapped_memory_cache_for_exclave_core_file<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long long,vas_segmentinfo_table const&,CSExclaveCoreFileType,mapped_memory_t *)::{lambda(unsigned long long)#1}::operator()((uint64_t)v392, v312);
                                    unint64_t v311 = *v309;
                                  }
                                  unint64_t v305 = v309[1] + v311;
                                  v309 += 28;
                                }
                              }
                              while (v305 < *(void *)&v420[8] + *(void *)v420);
                              v308 = (uint64_t *)v389[0];
                              v307 = v389[1];
                            }
                            std::vector<CSCppCoreFileRegionInfo>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CSCppCoreFileRegionInfo*>,std::__wrap_iter<CSCppCoreFileRegionInfo*>>((uint64_t *)&v435, (long long *)v436, v308, (uint64_t)v307, 0x6DB6DB6DB6DB6DB7 * ((v307 - (unsigned char *)v308) >> 5));
                            unint64_t v313 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v436 - (unsigned char *)v435) >> 5));
                            if (v436 == v435) {
                              uint64_t v314 = 0;
                            }
                            else {
                              uint64_t v314 = v313;
                            }
                            _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb((unint64_t)v435, (long long *)v436, v314, 1);
                            std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]((uint64_t *)v371, (long long *)v420);
                            v392[0] = v389;
                            std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v392);
                            v392[0] = &v435;
                            std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v392);
                            if (v434 && (void)v432)
                            {
                              *((void *)&v432 + 1) = v432;
                              operator delete((void *)v432);
                            }
                            if (v431 && (void)v429)
                            {
                              *((void *)&v429 + 1) = v429;
                              operator delete((void *)v429);
                            }
                            if (v428 && v427 < 0) {
                              operator delete(v424);
                            }
                            v293 += 32;
                          }
                          while (v364 + 32 != (unsigned __int8 *)v356);
                        }
                        uint64_t v315 = MEMORY[0xC0];
                        uint64_t v316 = *(void *)(MEMORY[0xC0] + 16);
                        uint64_t v366 = *(void *)(MEMORY[0xC0] + 24);
                        if (v316 != v366)
                        {
                          do
                          {
                            unint64_t v318 = *(void *)v316;
                            uint64_t v317 = *(void *)(v316 + 8);
                            v392[1] = 0;
                            v392[0] = 0;
                            *(void *)&long long v393 = 0;
                            v320 = (char *)v371[0];
                            v319 = (char *)v371[1];
                            if (v371[0] == v371[1])
                            {
                              v327 = 0;
                              goto LABEL_635;
                            }
                            do
                            {
                              if (CSRangeContainsRange(*(void *)v320, *((void *)v320 + 1), v318, v317))
                              {
                                v327 = (unint64_t *)v392[1];
                                goto LABEL_654;
                              }
                              BOOL v321 = CSRangeIntersectsRange(v318, v317, *(void *)v320, *((void *)v320 + 1));
                              unint64_t v322 = *(void *)v320;
                              if (v321)
                              {
                                unint64_t v323 = *((void *)v320 + 1);
                                if (v318 - v322 >= v323)
                                {
                                  unint64_t v325 = v322 - v318;
                                  v326 = (char *)v392[1];
                                  if (v392[1] >= (void *)v393)
                                  {
                                    v328 = (char *)v392[0];
                                    int64_t v329 = ((char *)v392[1] - (char *)v392[0]) >> 4;
                                    unint64_t v330 = v329 + 1;
                                    if ((unint64_t)(v329 + 1) >> 60) {
                                      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                                    }
                                    uint64_t v331 = v393 - (unint64_t)v392[0];
                                    if ((uint64_t)(v393 - (unint64_t)v392[0]) >> 3 > v330) {
                                      unint64_t v330 = v331 >> 3;
                                    }
                                    if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFF0) {
                                      unint64_t v332 = 0xFFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v332 = v330;
                                    }
                                    if (v332)
                                    {
                                      v333 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v393, v332);
                                      v326 = (char *)v392[1];
                                      v328 = (char *)v392[0];
                                    }
                                    else
                                    {
                                      v333 = 0;
                                    }
                                    v334 = (unint64_t *)&v333[16 * v329];
                                    unint64_t *v334 = v318;
                                    v334[1] = v325;
                                    v335 = v334;
                                    if (v326 != v328)
                                    {
                                      do
                                      {
                                        *((_OWORD *)v335 - 1) = *((_OWORD *)v326 - 1);
                                        v335 -= 2;
                                        v326 -= 16;
                                      }
                                      while (v326 != v328);
                                      v328 = (char *)v392[0];
                                    }
                                    v327 = v334 + 2;
                                    v392[0] = v335;
                                    v392[1] = v334 + 2;
                                    *(void *)&long long v393 = &v333[16 * v332];
                                    if (v328) {
                                      operator delete(v328);
                                    }
                                  }
                                  else
                                  {
                                    *(void *)v392[1] = v318;
                                    *((void *)v326 + 1) = v325;
                                    v327 = (unint64_t *)(v326 + 16);
                                  }
                                  v392[1] = v327;
                                  unint64_t v336 = *(void *)v320;
                                  unint64_t v337 = *((void *)v320 + 1);
                                  unint64_t v338 = v318 + v317;
                                  if (v318 + v317 - *(void *)v320 < v337) {
                                    goto LABEL_654;
                                  }
                                  unint64_t v318 = v337 + v336;
                                  uint64_t v317 = v338 - (v337 + v336);
                                }
                                else
                                {
                                  unint64_t v324 = v318 + v317;
                                  unint64_t v318 = v323 + v322;
                                  uint64_t v317 = v324 - (v323 + v322);
                                }
                              }
                              else if (v322 > v318 + v317)
                              {
                                break;
                              }
                              v320 += 224;
                            }
                            while (v320 != v319);
                            v327 = (unint64_t *)v392[1];
LABEL_635:
                            if (v317)
                            {
                              if ((unint64_t)v327 >= (unint64_t)v393)
                              {
                                v339 = (unint64_t *)v392[0];
                                uint64_t v340 = ((char *)v327 - (char *)v392[0]) >> 4;
                                unint64_t v341 = v340 + 1;
                                if ((unint64_t)(v340 + 1) >> 60) {
                                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                                }
                                uint64_t v342 = v393 - (unint64_t)v392[0];
                                if ((uint64_t)(v393 - (unint64_t)v392[0]) >> 3 > v341) {
                                  unint64_t v341 = v342 >> 3;
                                }
                                if ((unint64_t)v342 >= 0x7FFFFFFFFFFFFFF0) {
                                  unint64_t v343 = 0xFFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v343 = v341;
                                }
                                if (v343)
                                {
                                  v344 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v393, v343);
                                  v327 = (unint64_t *)v392[1];
                                  v339 = (unint64_t *)v392[0];
                                }
                                else
                                {
                                  v344 = 0;
                                }
                                v345 = (unint64_t *)&v344[16 * v340];
                                unint64_t *v345 = v318;
                                v345[1] = v317;
                                v346 = v345;
                                if (v327 != v339)
                                {
                                  do
                                  {
                                    *((_OWORD *)v346 - 1) = *((_OWORD *)v327 - 1);
                                    v346 -= 2;
                                    v327 -= 2;
                                  }
                                  while (v327 != v339);
                                  v339 = (unint64_t *)v392[0];
                                }
                                v327 = v345 + 2;
                                v392[0] = v346;
                                v392[1] = v345 + 2;
                                *(void *)&long long v393 = &v344[16 * v343];
                                if (v339) {
                                  operator delete(v339);
                                }
                              }
                              else
                              {
                                unint64_t *v327 = v318;
                                v327[1] = v317;
                                v327 += 2;
                              }
                              v392[1] = v327;
                            }
LABEL_654:
                            v347 = (unint64_t *)v392[0];
                            if (v392[0] != v327)
                            {
                              do
                              {
                                LOWORD(v374) = 9;
                                int v348 = *(_DWORD *)(v316 + 32);
                                int v349 = *(_DWORD *)(v316 + 36);
                                long long v350 = *(_OWORD *)v347;
                                *(_DWORD *)&v420[16] = 0;
                                *(_DWORD *)&v420[20] = v348 | 1;
                                if ((v348 & 4) != 0) {
                                  int v351 = 3;
                                }
                                else {
                                  int v351 = 1;
                                }
                                *(_OWORD *)v420 = v350;
                                *(_DWORD *)&v420[24] = v349 | 1;
                                uint64_t v421 = 0;
                                __int16 v422 = 0;
                                *(_DWORD *)v423 = 0;
                                *(void *)&v423[4] = 0;
                                memset(&v420[28], 0, 41);
                                *(_DWORD *)&v423[12] = 3;
                                *(_DWORD *)&v423[16] = v351;
                                LOBYTE(v424) = 0;
                                char v428 = 0;
                                std::vector<unsigned short>::vector(v389, v347[1] >> 14, &v374);
                                long long v429 = *(_OWORD *)v389;
                                v430 = v390;
                                v389[1] = 0;
                                v390 = 0;
                                v389[0] = 0;
                                char v431 = 1;
                                std::vector<unsigned short>::vector(v387, v347[1] >> 14, &v374);
                                long long v432 = *(_OWORD *)v387;
                                v433 = v388;
                                v387[1] = 0;
                                v388 = 0;
                                v387[0] = 0;
                                char v434 = 1;
                                v436 = 0;
                                v437 = 0;
                                v435 = 0;
                                std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]((uint64_t *)v371, (long long *)v420);
                                v391 = (mach_port_name_t *)&v435;
                                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v391);
                                if (v434 && (void)v432)
                                {
                                  *((void *)&v432 + 1) = v432;
                                  operator delete((void *)v432);
                                }
                                if (v431 && (void)v429)
                                {
                                  *((void *)&v429 + 1) = v429;
                                  operator delete((void *)v429);
                                }
                                if (v428 && v427 < 0) {
                                  operator delete(v424);
                                }
                                if (v387[0])
                                {
                                  v387[1] = v387[0];
                                  operator delete(v387[0]);
                                }
                                if (v389[0])
                                {
                                  v389[1] = v389[0];
                                  operator delete(v389[0]);
                                }
                                v347 += 2;
                              }
                              while (v347 != v327);
                              unint64_t v352 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v371[1] - (char *)v371[0]) >> 5));
                              if (v371[1] == v371[0]) {
                                uint64_t v353 = 0;
                              }
                              else {
                                uint64_t v353 = v352;
                              }
                              _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb((unint64_t)v371[0], (long long *)v371[1], v353, 1);
                              v327 = (unint64_t *)v392[0];
                            }
                            if (v327)
                            {
                              v392[1] = v327;
                              operator delete(v327);
                            }
                            v316 += 40;
                          }
                          while (v316 != v366);
                          uint64_t v315 = MEMORY[0xC0];
                        }
                        std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>::map[abi:ne180100]((uint64_t *)v420, v315 + 48);
                        *(void *)&long long v393 = 0;
                        v392[1] = 0;
                        v392[0] = &v392[1];
                        std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__move_assign(MEMORY[0xC0] + 48, v392);
                        std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)v392, (void *)v392[1]);
                        LODWORD(v391) = dup(*(_DWORD *)(MEMORY[0xC0] + 8));
                        BOOL v354 = v391 != -1;
                        if (v391 != -1)
                        {
                          uint64_t v385 = 0;
                          uint64_t v386 = 0;
                          v384 = 0;
                          std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(&v384, (uint64_t)v371[0], (uint64_t)v371[1], 0x6DB6DB6DB6DB6DB7 * (((char *)v371[1] - (char *)v371[0]) >> 5));
                          v392[1] = 0;
                          v392[0] = 0;
                          *(void *)&long long v393 = 0;
                          std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(v392, (uint64_t)v384, v385, 0x6DB6DB6DB6DB6DB7 * ((v385 - (uint64_t)v384) >> 5));
                          std::make_unique[abi:ne180100]<CSCppCoreFileExclavesMetadata,int const&,std::vector<mapped_memory_core_file_dumped_region_info_t> const&,_CSArchitecture const&,std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> const&,std::optional<unsigned long long> const&,CSCppCoreFileRegionsTree,CSExclaveCoreFileType const&,long long &>();
                        }
                        std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)v420, *(void **)&v420[8]);
                        *(void *)v420 = v371;
                        std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v420);
LABEL_689:
                        if (v375)
                        {
                          v376 = (char *)v375;
                          operator delete(v375);
                        }
                        CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v379);
                        if (v354) {
                          goto LABEL_692;
                        }
LABEL_340:
                        release_mapped_memory_cache(0);
LABEL_341:
                        CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v367);
                        goto LABEL_342;
                      }
                    }
                  }
                  v150 += 8;
                  --v148;
                }
                while (v148);
              }
              CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v379);
              goto LABEL_340;
            }
            int v49 = *(_DWORD *)v47;
            if (*(_DWORD *)v47 != 25) {
              break;
            }
            uint64_t v55 = *(void *)(v47 + 24);
            uint64_t v54 = *(void *)(v47 + 32);
            uint64_t v57 = *(void *)(v47 + 40);
            uint64_t v56 = *(void *)(v47 + 48);
            int v58 = *(_DWORD *)(v47 + 56);
            int v59 = *(_DWORD *)(v47 + 60);
            unint64_t v60 = (char *)v389[1];
            if (v389[1] >= v390)
            {
              uint64_t v62 = (char *)v389[0];
              unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v389[1] - (char *)v389[0]) >> 3);
              unint64_t v64 = v63 + 1;
              if (v63 + 1 > 0x666666666666666) {
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              }
              if (0x999999999999999ALL * ((v390 - (char *)v389[0]) >> 3) > v64) {
                unint64_t v64 = 0x999999999999999ALL * ((v390 - (char *)v389[0]) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((v390 - (char *)v389[0]) >> 3) >= 0x333333333333333) {
                unint64_t v65 = 0x666666666666666;
              }
              else {
                unint64_t v65 = v64;
              }
              if (v65)
              {
                size_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)&v390, v65);
                uint64_t v62 = (char *)v389[0];
                unint64_t v60 = (char *)v389[1];
              }
              else
              {
                size_t v66 = 0;
              }
              BOOL v67 = &v66[40 * v63];
              *(void *)BOOL v67 = v55;
              *((void *)v67 + 1) = v54;
              *((void *)v67 + 2) = v57;
              *((void *)v67 + 3) = v56;
              *((_DWORD *)v67 + 8) = v59;
              *((_DWORD *)v67 + 9) = v58;
              if (v60 == v62)
              {
                uint64_t v71 = &v66[40 * v63];
              }
              else
              {
                uint64_t v68 = &v66[40 * v63];
                do
                {
                  long long v69 = *(_OWORD *)(v60 - 40);
                  long long v70 = *(_OWORD *)(v60 - 24);
                  uint64_t v71 = v68 - 40;
                  *((void *)v68 - 1) = *((void *)v60 - 1);
                  *(_OWORD *)(v68 - 24) = v70;
                  *(_OWORD *)(v68 - 40) = v69;
                  v60 -= 40;
                  v68 -= 40;
                }
                while (v60 != v62);
              }
              uint64_t v61 = v67 + 40;
              v389[0] = v71;
              v389[1] = v67 + 40;
              v390 = &v66[40 * v65];
              if (v62) {
                operator delete(v62);
              }
            }
            else
            {
              *(void *)v389[1] = v55;
              *((void *)v60 + 1) = v54;
              *((void *)v60 + 2) = v57;
              *((void *)v60 + 3) = v56;
              uint64_t v61 = v60 + 40;
              *((_DWORD *)v60 + 8) = v59;
              *((_DWORD *)v60 + 9) = v58;
            }
            v389[1] = v61;
          }
          if (v49 != 49) {
            break;
          }
          if (!strncmp((const char *)(v47 + 8), "vm info", 0x10uLL))
          {
            parse_vm_info_note(a1, v48, v392);
            std::__optional_storage_base<CSCppCoreFileRegionsTree,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileRegionsTree,false>>((uint64_t)&v379, (__n128 *)v392);
            if (BYTE8(v393))
            {
              v371[0] = v392;
              std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v371);
            }
            if (!(_BYTE)v382)
            {
              uint64_t v95 = (void **)v387[0];
              if (v387[0] != &v387[1])
              {
                do
                {
                  mach_port_deallocate(*MEMORY[0x1E4F14960], *((_DWORD *)v95 + 8));
                  uint64_t v96 = (void **)v95[1];
                  if (v96)
                  {
                    do
                    {
                      uint64_t v97 = v96;
                      uint64_t v96 = (void **)*v96;
                    }
                    while (v96);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v97 = (void **)v95[2];
                      BOOL v14 = *v97 == v95;
                      uint64_t v95 = v97;
                    }
                    while (!v14);
                  }
                  uint64_t v95 = v97;
                }
                while (v97 != &v387[1]);
              }
              goto LABEL_262;
            }
          }
          else if (!strncmp(v48->data_owner, "task crashinfo", 0x10uLL))
          {
            parse_task_crashinfo_note(a1, v48, v392);
            std::__optional_storage_base<CSCppCoreFileTaskCrashinfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileTaskCrashinfo,false>>((CSCppCoreFileTaskCrashinfo *)v420, (uint64_t)v392);
            if (v419)
            {
              if (v418 && __p)
              {
                v417 = __p;
                operator delete(__p);
              }
              if (v415 && v413)
              {
                v414 = v413;
                operator delete(v413);
              }
              if (v403 && v402 < 0) {
                operator delete(v400);
              }
              if ((_BYTE)v399 && SHIBYTE(v398) < 0) {
                operator delete(*(void **)&v395[24]);
              }
              if (v395[16] && (v395[15] & 0x80000000) != 0) {
                operator delete(v394);
              }
              if (BYTE8(v393) && SBYTE7(v393) < 0) {
                operator delete(v392[0]);
              }
            }
            if (!v442)
            {
              uint64_t v101 = (void **)v387[0];
              if (v387[0] != &v387[1])
              {
                do
                {
                  mach_port_deallocate(*MEMORY[0x1E4F14960], *((_DWORD *)v101 + 8));
                  uint64_t v102 = (void **)v101[1];
                  if (v102)
                  {
                    do
                    {
                      uint64_t v103 = v102;
                      uint64_t v102 = (void **)*v102;
                    }
                    while (v102);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v103 = (void **)v101[2];
                      BOOL v14 = *v103 == v101;
                      uint64_t v101 = v103;
                    }
                    while (!v14);
                  }
                  uint64_t v101 = v103;
                }
                while (v103 != &v387[1]);
                goto LABEL_262;
              }
              goto LABEL_311;
            }
          }
          else if (!strncmp(v48->data_owner, "addrable bits", 0x10uLL))
          {
            v384 = (mach_port_name_t *)parse_addrable_bits_note(a1, v48);
            LOBYTE(v385) = v53;
            if (!v53)
            {
              uint64_t v107 = (void **)v387[0];
              if (v387[0] != &v387[1])
              {
                do
                {
                  mach_port_deallocate(*MEMORY[0x1E4F14960], *((_DWORD *)v107 + 8));
                  unint64_t v108 = (void **)v107[1];
                  if (v108)
                  {
                    do
                    {
                      uint64_t v109 = v108;
                      unint64_t v108 = (void **)*v108;
                    }
                    while (v108);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v109 = (void **)v107[2];
                      BOOL v14 = *v109 == v107;
                      uint64_t v107 = v109;
                    }
                    while (!v14);
                  }
                  uint64_t v107 = v109;
                }
                while (v109 != &v387[1]);
              }
              goto LABEL_262;
            }
          }
        }
      }
      while (v49 != 4);
      parse_thread_load_command((const thread_command *)v47, (uint64_t)v392);
      if (BYTE8(v393))
      {
        mach_port_name_t v374 = 0;
        if (!mach_port_allocate(*MEMORY[0x1E4F14960], 4u, &v374))
        {
          LODWORD(v371[0]) = v358;
          std::map<int,std::vector<unsigned char>>::map[abi:ne180100]((uint64_t *)&v371[1], (uint64_t)v392);
          v391 = &v374;
          uint64_t v76 = std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v387, &v374, (uint64_t)&std::piecewise_construct, &v391);
          uint64_t v78 = (char **)(v76 + 7);
          uint64_t v77 = v76[7];
          *((_DWORD *)v76 + 10) = v371[0];
          uint64_t v79 = (char ***)(v76 + 6);
          std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)(v76 + 6), v77);
          int64_t v80 = v372;
          *(v78 - 1) = (char *)v371[1];
          *uint64_t v78 = v80;
          int64_t v81 = v373;
          v78[1] = v373;
          if (v81)
          {
            *((void *)v80 + 2) = v78;
            v371[1] = &v372;
            v372 = 0;
            v373 = 0;
            int64_t v80 = 0;
          }
          else
          {
            *uint64_t v79 = v78;
          }
          ++v358;
          std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)&v371[1], v80);
          int v75 = 0;
          goto LABEL_165;
        }
        uint64_t v50 = (void **)v387[0];
        if (v387[0] != &v387[1])
        {
          do
          {
            mach_port_deallocate(*MEMORY[0x1E4F14960], *((_DWORD *)v50 + 8));
            unint64_t v51 = (void **)v50[1];
            if (v51)
            {
              do
              {
                unint64_t v52 = v51;
                unint64_t v51 = (void **)*v51;
              }
              while (v51);
            }
            else
            {
              do
              {
                unint64_t v52 = (void **)v50[2];
                BOOL v14 = *v52 == v50;
                uint64_t v50 = v52;
              }
              while (!v14);
            }
            uint64_t v50 = v52;
          }
          while (v52 != &v387[1]);
        }
      }
      else
      {
        uint64_t v72 = (void **)v387[0];
        if (v387[0] == &v387[1]) {
          goto LABEL_262;
        }
        do
        {
          mach_port_deallocate(*MEMORY[0x1E4F14960], *((_DWORD *)v72 + 8));
          uint64_t v73 = (void **)v72[1];
          if (v73)
          {
            do
            {
              uint64_t v74 = v73;
              uint64_t v73 = (void **)*v73;
            }
            while (v73);
          }
          else
          {
            do
            {
              uint64_t v74 = (void **)v72[2];
              BOOL v14 = *v74 == v72;
              uint64_t v72 = v74;
            }
            while (!v14);
          }
          uint64_t v72 = v74;
        }
        while (v74 != &v387[1]);
      }
      int v75 = 1;
LABEL_165:
      if (BYTE8(v393)) {
        std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)v392, (void *)v392[1]);
      }
      if (v75) {
        goto LABEL_262;
      }
    }
  }
  v371[0] = 0;
  v371[1] = 0;
  v372 = 0;
  CSCppFileMemory::CSCppFileMemory(v443, a1, 0);
  v391 = (mach_port_name_t *)v443;
  uint64_t v6 = (__n128 *)TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::macho_header_at(&v391, 0, 1);
  if (!v6 || v6->n128_u32[3] != 4) {
    goto LABEL_285;
  }
  int v361 = a3;
  int v357 = 0;
  v389[1] = 0;
  v390 = 0;
  v389[0] = &v389[1];
  LOBYTE(v367) = 0;
  char v369 = 0;
  v420[0] = 0;
  char v442 = 0;
  LOBYTE(v387[0]) = 0;
  LOBYTE(v387[1]) = 0;
  uint64_t v7 = v6[1].n128_u32[1];
  LODWORD(v379) = v6[1].n128_u32[0];
  v380 = v6;
  unint64_t v381 = (unint64_t)&v6[1].n128_u64[1] + v7 + 4;
  v382 = &v6[1].n128_u32[3];
  while (1)
  {
    unint64_t v8 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v379);
    BOOL v9 = (const note_command *)v8;
    if (!v8) {
      break;
    }
    int v10 = *(_DWORD *)v8;
    if (*(_DWORD *)v8 == 1)
    {
      uint64_t v16 = *(unsigned int *)(v8 + 24);
      uint64_t v17 = *(unsigned int *)(v8 + 28);
      uint64_t v18 = *(unsigned int *)(v8 + 32);
      uint64_t v19 = *(unsigned int *)(v8 + 36);
      int v20 = *(_DWORD *)(v8 + 40);
      int v21 = *(_DWORD *)(v8 + 44);
      BOOL v22 = (char *)v371[1];
      if (v371[1] >= v372)
      {
        uint64_t v24 = (char *)v371[0];
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v371[1] - (char *)v371[0]) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((v372 - (char *)v371[0]) >> 3) > v26) {
          unint64_t v26 = 0x999999999999999ALL * ((v372 - (char *)v371[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v372 - (char *)v371[0]) >> 3) >= 0x333333333333333) {
          unint64_t v27 = 0x666666666666666;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          unint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)&v372, v27);
          uint64_t v24 = (char *)v371[0];
          BOOL v22 = (char *)v371[1];
        }
        else
        {
          unint64_t v28 = 0;
        }
        long long v29 = &v28[40 * v25];
        *(void *)long long v29 = v16;
        *((void *)v29 + 1) = v17;
        *((void *)v29 + 2) = v18;
        *((void *)v29 + 3) = v19;
        *((_DWORD *)v29 + 8) = v21;
        *((_DWORD *)v29 + 9) = v20;
        if (v22 == v24)
        {
          uint64_t v33 = &v28[40 * v25];
        }
        else
        {
          int v30 = &v28[40 * v25];
          do
          {
            long long v31 = *(_OWORD *)(v22 - 40);
            long long v32 = *(_OWORD *)(v22 - 24);
            uint64_t v33 = v30 - 40;
            *((void *)v30 - 1) = *((void *)v22 - 1);
            *(_OWORD *)(v30 - 24) = v32;
            *(_OWORD *)(v30 - 40) = v31;
            v22 -= 40;
            v30 -= 40;
          }
          while (v22 != v24);
        }
        uint64_t v23 = v29 + 40;
        v371[0] = v33;
        v371[1] = v29 + 40;
        v372 = &v28[40 * v27];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *(void *)v371[1] = v16;
        *((void *)v22 + 1) = v17;
        *((void *)v22 + 2) = v18;
        *((void *)v22 + 3) = v19;
        uint64_t v23 = v22 + 40;
        *((_DWORD *)v22 + 8) = v21;
        *((_DWORD *)v22 + 9) = v20;
      }
      v371[1] = v23;
    }
    else if (v10 == 49)
    {
      if (!strncmp((const char *)(v8 + 8), "vm info", 0x10uLL))
      {
        parse_vm_info_note(a1, v9, v392);
        std::__optional_storage_base<CSCppCoreFileRegionsTree,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileRegionsTree,false>>((uint64_t)&v367, (__n128 *)v392);
        if (BYTE8(v393))
        {
          v375 = v392;
          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v375);
        }
        if (!v369)
        {
          unint64_t v92 = (void **)v389[0];
          if (v389[0] != &v389[1])
          {
            do
            {
              mach_port_deallocate(*MEMORY[0x1E4F14960], *((_DWORD *)v92 + 8));
              unsigned int v93 = (void **)v92[1];
              if (v93)
              {
                do
                {
                  uint64_t v94 = v93;
                  unsigned int v93 = (void **)*v93;
                }
                while (v93);
              }
              else
              {
                do
                {
                  uint64_t v94 = (void **)v92[2];
                  BOOL v14 = *v94 == v92;
                  unint64_t v92 = v94;
                }
                while (!v14);
              }
              unint64_t v92 = v94;
            }
            while (v94 != &v389[1]);
          }
          goto LABEL_236;
        }
      }
      else if (!strncmp(v9->data_owner, "task crashinfo", 0x10uLL))
      {
        parse_task_crashinfo_note(a1, v9, v392);
        std::__optional_storage_base<CSCppCoreFileTaskCrashinfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileTaskCrashinfo,false>>((CSCppCoreFileTaskCrashinfo *)v420, (uint64_t)v392);
        if (v419)
        {
          if (v418 && __p)
          {
            v417 = __p;
            operator delete(__p);
          }
          if (v415 && v413)
          {
            v414 = v413;
            operator delete(v413);
          }
          if (v403 && v402 < 0) {
            operator delete(v400);
          }
          if ((_BYTE)v399 && SHIBYTE(v398) < 0) {
            operator delete(*(void **)&v395[24]);
          }
          if (v395[16] && (v395[15] & 0x80000000) != 0) {
            operator delete(v394);
          }
          if (BYTE8(v393) && SBYTE7(v393) < 0) {
            operator delete(v392[0]);
          }
        }
        if (!v442)
        {
          uint64_t v98 = (void **)v389[0];
          if (v389[0] != &v389[1])
          {
            do
            {
              mach_port_deallocate(*MEMORY[0x1E4F14960], *((_DWORD *)v98 + 8));
              uint64_t v99 = (void **)v98[1];
              if (v99)
              {
                do
                {
                  uint64_t v100 = v99;
                  uint64_t v99 = (void **)*v99;
                }
                while (v99);
              }
              else
              {
                do
                {
                  uint64_t v100 = (void **)v98[2];
                  BOOL v14 = *v100 == v98;
                  uint64_t v98 = v100;
                }
                while (!v14);
              }
              uint64_t v98 = v100;
            }
            while (v100 != &v389[1]);
            goto LABEL_236;
          }
          goto LABEL_281;
        }
      }
      else if (!strncmp(v9->data_owner, "addrable bits", 0x10uLL))
      {
        v387[0] = (void *)parse_addrable_bits_note(a1, v9);
        LOBYTE(v387[1]) = v15;
        if (!v15)
        {
          long long v104 = (void **)v389[0];
          if (v389[0] != &v389[1])
          {
            do
            {
              mach_port_deallocate(*MEMORY[0x1E4F14960], *((_DWORD *)v104 + 8));
              unsigned int v105 = (void **)v104[1];
              if (v105)
              {
                do
                {
                  uint64_t v106 = v105;
                  unsigned int v105 = (void **)*v105;
                }
                while (v105);
              }
              else
              {
                do
                {
                  uint64_t v106 = (void **)v104[2];
                  BOOL v14 = *v106 == v104;
                  long long v104 = v106;
                }
                while (!v14);
              }
              long long v104 = v106;
            }
            while (v106 != &v389[1]);
          }
          goto LABEL_236;
        }
      }
    }
    else if (v10 == 4)
    {
      parse_thread_load_command((const thread_command *)v8, (uint64_t)v392);
      if (BYTE8(v393))
      {
        name[0] = 0;
        if (!mach_port_allocate(*MEMORY[0x1E4F14960], 4u, name))
        {
          LODWORD(v375) = v357;
          std::map<int,std::vector<unsigned char>>::map[abi:ne180100]((uint64_t *)&v376, (uint64_t)v392);
          v384 = name;
          uint64_t v38 = std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v389, name, (uint64_t)&std::piecewise_construct, &v384);
          uint64_t v40 = v38 + 7;
          unint64_t v39 = v38[7];
          *((_DWORD *)v38 + 10) = v375;
          long long v41 = v38 + 6;
          std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)(v38 + 6), v39);
          long long v42 = (void *)v377;
          *(v40 - 1) = v376;
          *uint64_t v40 = v42;
          uint64_t v43 = v378;
          v40[1] = v378;
          if (v43)
          {
            v42[2] = v40;
            v376 = (char *)&v377;
            unint64_t v377 = 0;
            v378 = 0;
            long long v42 = 0;
          }
          else
          {
            *long long v41 = v40;
          }
          ++v357;
          std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)&v376, v42);
          int v37 = 0;
          goto LABEL_81;
        }
        uint64_t v11 = (void **)v389[0];
        if (v389[0] != &v389[1])
        {
          do
          {
            mach_port_deallocate(*MEMORY[0x1E4F14960], *((_DWORD *)v11 + 8));
            char v12 = (void **)v11[1];
            if (v12)
            {
              do
              {
                unint64_t v13 = v12;
                char v12 = (void **)*v12;
              }
              while (v12);
            }
            else
            {
              do
              {
                unint64_t v13 = (void **)v11[2];
                BOOL v14 = *v13 == v11;
                uint64_t v11 = v13;
              }
              while (!v14);
            }
            uint64_t v11 = v13;
          }
          while (v13 != &v389[1]);
        }
      }
      else
      {
        unint64_t v34 = (void **)v389[0];
        if (v389[0] == &v389[1]) {
          goto LABEL_236;
        }
        do
        {
          mach_port_deallocate(*MEMORY[0x1E4F14960], *((_DWORD *)v34 + 8));
          long long v35 = (void **)v34[1];
          if (v35)
          {
            do
            {
              uint64_t v36 = v35;
              long long v35 = (void **)*v35;
            }
            while (v35);
          }
          else
          {
            do
            {
              uint64_t v36 = (void **)v34[2];
              BOOL v14 = *v36 == v34;
              unint64_t v34 = v36;
            }
            while (!v14);
          }
          unint64_t v34 = v36;
        }
        while (v36 != &v389[1]);
      }
      int v37 = 1;
LABEL_81:
      if (BYTE8(v393)) {
        std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)v392, (void *)v392[1]);
      }
      if (v37) {
        goto LABEL_236;
      }
    }
  }
  unint64_t v82 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v371[1] - (char *)v371[0]) >> 3));
  if (v371[1] == v371[0]) {
    uint64_t v83 = 0;
  }
  else {
    uint64_t v83 = v82;
  }
  std::__introsort<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*,false>((unint64_t)v371[0], (unint64_t)v371[1], v83, 1);
  name[0] = 0;
  name[0] = open(a1, 0x1000000);
  if ((name[0] & 0x80000000) == 0) {
    operator new();
  }
  uint64_t v86 = (void **)v389[0];
  if (v389[0] != &v389[1])
  {
    do
    {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *((_DWORD *)v86 + 8));
      uint64_t v87 = (void **)v86[1];
      if (v87)
      {
        do
        {
          uint64_t v88 = v87;
          uint64_t v87 = (void **)*v87;
        }
        while (v87);
      }
      else
      {
        do
        {
          uint64_t v88 = (void **)v86[2];
          BOOL v14 = *v88 == v86;
          uint64_t v86 = v88;
        }
        while (!v14);
      }
      uint64_t v86 = v88;
    }
    while (v88 != &v389[1]);
  }
LABEL_236:
  if (!v442)
  {
LABEL_281:
    a3 = v361;
    goto LABEL_282;
  }
  a3 = v361;
  if (v441 && v439)
  {
    v440 = v439;
    operator delete(v439);
  }
  if (v438 && v436)
  {
    v437 = v436;
    operator delete(v436);
  }
  if (v426 && v425 < 0) {
    operator delete(*(void **)&v423[12]);
  }
  if (v423[4] && (v423[3] & 0x80000000) != 0) {
    operator delete(*(void **)&v420[64]);
  }
  if (v420[56] && (v420[55] & 0x80000000) != 0) {
    operator delete(*(void **)&v420[32]);
  }
  if (v420[24] && (v420[23] & 0x80000000) != 0) {
    operator delete(*(void **)v420);
  }
LABEL_282:
  if (v369)
  {
    *(void *)v420 = &v367;
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v420);
  }
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)v389, (void *)v389[1]);
LABEL_285:
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v443);
  if (v371[0])
  {
    v371[1] = v371[0];
    operator delete(v371[0]);
  }
  if (a3)
  {
    if (!CSArchitectureIsArm64(*(void *)(MEMORY[0xC0] + 40))) {
      goto LABEL_687;
    }
    uint64_t v367 = CSSymbolicatorCreateWithCoreFilePathAndFlags(a1, 0, 0, 0);
    uint64_t v368 = v110;
    if (CSIsNull(v367, v110)) {
      goto LABEL_687;
    }
    v392[0] = &unk_1F12C9F48;
    v392[1] = &v367;
    *((void *)&v393 + 1) = v392;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v420, (uint64_t)v392);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v392);
    char v111 = CSSymbolicatorGetSymbolOwnerWithNameAtTime(v367, v368, (uint64_t)"dyld", 0x8000000000000000);
    BOOL v113 = CSIsNull(v111, v112);
    uint64_t v114 = CSSymbolicatorGetSymbolWithMangledNameAtTime(v367, v368, (uint64_t)"_vas__segmentinfo_table", 0x8000000000000000);
    uint64_t v116 = v115;
    if (CSIsNull(v114, v115))
    {
      DeferredLambda::~DeferredLambda((DeferredLambda *)v420);
      goto LABEL_687;
    }
    unint64_t v117 = CSSymbolGetRange(v114, v116);
    long long v118 = CSCppCoreFileMemory::CSCppCoreFileMemory(v443, 0);
    unint64_t v119 = (unsigned int *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*(void *)v443 + 32))(v118, v117, 4);
    if (v120 >= 4)
    {
      unsigned int v126 = (unsigned __int8 *)(*(uint64_t (**)(unsigned char *, void, uint64_t))(*(void *)v443 + 32))(v443, *v119, 24);
      if (v127 >= 0x18)
      {
        unsigned int v129 = *v126;
        unint64_t v128 = ((unint64_t)*(unsigned int *)(v126 + 1) << 8) | ((unint64_t)(*(unsigned __int16 *)(v126 + 5) | (v126[7] << 16)) << 40);
        int v121 = v126[16];
        unsigned int v122 = v126[17];
        LODWORD(i) = v126[18];
        int v124 = 1;
      }
      else
      {
        int v121 = 0;
        unsigned int v122 = 0;
        LODWORD(i) = 0;
        unint64_t v128 = 0;
        unsigned int v129 = 0;
        int v124 = 0;
      }
      unint64_t v125 = v128 | v129;
    }
    else
    {
      int v121 = 0;
      unsigned int v122 = 0;
      LODWORD(i) = 0;
      int v124 = 0;
      unint64_t v125 = 0;
    }
    CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)v443);
    DeferredLambda::~DeferredLambda((DeferredLambda *)v420);
    if (v124)
    {
      LODWORD(v391) = v113;
      CSCppCoreFileMemory::CSCppCoreFileMemory(&v367, 0);
      if (v121 == 1 && i <= v122 && i)
      {
        for (uint64_t i = i; i; --i)
        {
          long long v130 = (unsigned int *)(*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(v367 + 32))(&v367, v125, 4);
          if (v131 < 4) {
            break;
          }
          uint64_t v132 = *v130;
          if (!v132) {
            break;
          }
          uint64_t v133 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v367 + 32))(&v367, v132, 32);
          if (v134 < 0x20 || *(unsigned char *)v133 != 1) {
            break;
          }
          if (!*(unsigned char *)(v133 + 16))
          {
            v443[0] = 1;
            uint64_t v161 = *(void *)(v133 + 1);
            int v162 = *(_DWORD *)(v133 + 9);
            __int16 v163 = *(_WORD *)(v133 + 13);
            char v446 = *(unsigned char *)(v133 + 15);
            __int16 v445 = v163;
            int v444 = v162;
            *(void *)&v443[1] = v161;
            char v447 = 0;
            LODWORD(v161) = *(_DWORD *)(v133 + 25);
            LOWORD(v162) = *(_WORD *)(v133 + 29);
            LOBYTE(v163) = *(unsigned char *)(v133 + 31);
            uint64_t v448 = *(void *)(v133 + 17);
            char v451 = v163;
            __int16 v450 = v162;
            int v449 = v161;
            char v452 = 1;
            v379 = 0;
            v380 = 0;
            unint64_t v381 = 0;
            unsigned int v164 = *(unsigned __int16 *)&v443[6];
            if (*(_WORD *)&v443[6])
            {
              uint64_t v165 = 0;
              while (1)
              {
                uint64_t v166 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v367 + 32))(&v367, v443[1] + v132 + v165 * v443[2], 32);
                if (v167 < 0x20) {
                  break;
                }
                unsigned __int8 v168 = *(unsigned char *)v166;
                *(_OWORD *)v420 = *(_OWORD *)(v166 + 1);
                *(void *)&v420[15] = *(void *)(v166 + 16);
                int v169 = *(unsigned __int8 *)(v166 + 24);
                LODWORD(v392[0]) = *(_DWORD *)(v166 + 25);
                *(_DWORD *)((char *)v392 + 3) = *(_DWORD *)(v166 + 28);
                if (v169)
                {
                  long long v170 = v380;
                  if ((unint64_t)v380 >= v381)
                  {
                    uint64_t v172 = ((char *)v380 - (unsigned char *)v379) >> 5;
                    unint64_t v173 = v172 + 1;
                    if ((unint64_t)(v172 + 1) >> 59) {
                      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v174 = v381 - (void)v379;
                    if ((uint64_t)(v381 - (void)v379) >> 4 > v173) {
                      unint64_t v173 = v174 >> 4;
                    }
                    if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFE0) {
                      unint64_t v175 = 0x7FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v175 = v173;
                    }
                    if (v175) {
                      uint64_t v176 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)&v381, v175);
                    }
                    else {
                      uint64_t v176 = 0;
                    }
                    uint64_t v177 = &v176[32 * v172];
                    *uint64_t v177 = v168;
                    *(_OWORD *)(v177 + 1) = *(_OWORD *)v420;
                    *((void *)v177 + 2) = *(void *)&v420[15];
                    v177[24] = v169;
                    *(_DWORD *)(v177 + 25) = v392[0];
                    *((_DWORD *)v177 + 7) = *(_DWORD *)((char *)v392 + 3);
                    v179 = (__n128 *)v379;
                    uint64_t v178 = v380;
                    unint64_t v180 = (__n128 *)v177;
                    if (v380 != v379)
                    {
                      do
                      {
                        __n128 v181 = v178[-1];
                        v180[-2] = v178[-2];
                        v180[-1] = v181;
                        v180 -= 2;
                        v178 -= 2;
                      }
                      while (v178 != v179);
                      uint64_t v178 = v179;
                    }
                    uint64_t v171 = (__n128 *)(v177 + 32);
                    v379 = v180;
                    v380 = (__n128 *)(v177 + 32);
                    unint64_t v381 = (unint64_t)&v176[32 * v175];
                    if (v178) {
                      operator delete(v178);
                    }
                  }
                  else
                  {
                    v380->n128_u8[0] = v168;
                    *(__n128 *)((char *)v170 + 1) = *(__n128 *)v420;
                    v170[1].n128_u64[0] = *(void *)&v420[15];
                    v170[1].n128_u8[8] = v169;
                    *(unsigned __int32 *)((char *)&v170[1].n128_u32[2] + 1) = (unsigned __int32)v392[0];
                    v170[1].n128_u32[3] = *(_DWORD *)((char *)v392 + 3);
                    uint64_t v171 = v170 + 2;
                  }
                  v380 = v171;
                  unsigned int v164 = *(unsigned __int16 *)&v443[6];
                }
                if (++v165 >= (unint64_t)v164)
                {
                  v182 = (__n128 *)v379;
                  int v183 = v380;
                  goto LABEL_390;
                }
              }
LABEL_683:
              BOOL v280 = 0;
            }
            else
            {
              int v183 = 0;
              v182 = 0;
LABEL_390:
              unint64_t v207 = 126 - 2 * __clz(((char *)v183 - (char *)v182) >> 5);
              if (v183 == v182) {
                uint64_t v208 = 0;
              }
              else {
                uint64_t v208 = v207;
              }
              _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb((unint64_t)v182, v183, v208, 1);
              *(void *)&v420[16] = 0;
              *(void *)&v420[8] = 0;
              *(void *)v420 = &v420[8];
              v392[0] = (void *)1;
              long long v209 = v379;
              if ((unint64_t)((char *)v380 - (unsigned char *)v379) >= 0x21)
              {
                unint64_t v210 = 1;
                do
                {
                  if (CSRangeIntersectsRange(v209[4 * v210 - 4], v209[4 * v210 - 3], v209[4 * v210], v209[4 * v210 + 1]))
                  {
                    unint64_t v211 = v209[4 * v210 - 2];
                    unint64_t v212 = v209[4 * v210 + 2];
                    if (v211 >= v212)
                    {
                      if (v211 <= v212)
                      {
                        std::__tree<TRange<Pointer64>>::destroy((uint64_t)v420, *(void **)&v420[8]);
                        goto LABEL_683;
                      }
                      std::__tree<unsigned long,std::greater<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t **)v420, (unint64_t *)v392, (uint64_t *)v392);
                    }
                    else
                    {
                      v375 = (char *)v392[0] - 1;
                      std::__tree<unsigned long,std::greater<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t **)v420, (unint64_t *)&v375, (uint64_t *)&v375);
                    }
                  }
                  unint64_t v210 = (unint64_t)v392[0] + 1;
                  v392[0] = (void *)v210;
                  long long v209 = v379;
                  int v213 = (char *)v380;
                }
                while (v210 < ((char *)v380 - (unsigned char *)v379) >> 5);
                long long v214 = *(void **)v420;
                if (*(unsigned char **)v420 != &v420[8])
                {
                  do
                  {
                    long long v215 = (char *)v379 + 32 * v214[4];
                    int64_t v216 = v213 - (v215 + 32);
                    if (v213 != v215 + 32) {
                      memmove((char *)v379 + 32 * v214[4], v215 + 32, v213 - (v215 + 32));
                    }
                    int v213 = &v215[v216];
                    v380 = (__n128 *)&v215[v216];
                    v217 = (void *)v214[1];
                    if (v217)
                    {
                      do
                      {
                        v218 = v217;
                        v217 = (void *)*v217;
                      }
                      while (v217);
                    }
                    else
                    {
                      do
                      {
                        v218 = (unsigned char *)v214[2];
                        BOOL v14 = *(void *)v218 == (void)v214;
                        long long v214 = v218;
                      }
                      while (!v14);
                    }
                    long long v214 = v218;
                  }
                  while (v218 != &v420[8]);
                }
              }
              std::__tree<TRange<Pointer64>>::destroy((uint64_t)v420, *(void **)&v420[8]);
              v375 = 0;
              v376 = 0;
              unint64_t v377 = 0;
              v219 = (unsigned __int8 *)v379;
              v355 = v380;
              if (v379 != v380)
              {
                do
                {
                  unint64_t v220 = *(void *)v219;
                  uint64_t v221 = *((void *)v219 + 1);
                  *(void *)v420 = *(void *)v219;
                  *(void *)&v420[8] = v221;
                  memset(&v420[16], 0, 52);
                  v420[68] = 1;
                  uint64_t v421 = 0;
                  __int16 v422 = 0;
                  *(_OWORD *)v423 = 0uLL;
                  *(_DWORD *)&v423[16] = *((_DWORD *)v219 + 7);
                  LOBYTE(v424) = 0;
                  char v428 = 0;
                  LOBYTE(v429) = 0;
                  char v431 = 0;
                  LOBYTE(v432) = 0;
                  char v434 = 0;
                  v436 = 0;
                  v437 = 0;
                  v435 = 0;
                  v363 = v219;
                  unsigned int v222 = *((_DWORD *)v219 + 7);
                  if (v222) {
                    int v223 = 3;
                  }
                  else {
                    int v223 = 1;
                  }
                  LOWORD(name[0]) = 9;
                  v225 = *(unint64_t **)(MEMORY[0xC0] + 16);
                  v224 = *(unint64_t **)(MEMORY[0xC0] + 24);
                  if (v225 == v224)
                  {
                    uint64_t v232 = v221;
                    unint64_t v231 = v220;
                  }
                  else
                  {
                    unsigned int v226 = v223 & 0xFFFFFFFB | (4 * ((v222 >> 1) & 1));
                    int v359 = (v222 >> 2) & 1;
                    do
                    {
                      unint64_t v227 = *v225;
                      uint64_t v228 = v225[1];
                      if (CSRangeIntersectsRange(*v225, v228, v220, v221))
                      {
                        v392[0] = (void *)CSRangeIntersectionRange(v227, v228, v220, v221);
                        v392[1] = (void *)v229;
                        LODWORD(v393) = 1;
                        DWORD1(v393) = v226;
                        *((void *)&v393 + 1) = v226;
                        v394 = 0;
                        *(_DWORD *)v395 = v219[25];
                        *(void *)&v395[4] = 0;
                        *(void *)&v395[12] = 0;
                        *(void *)&v395[19] = 0;
                        *(_WORD *)&v395[27] = v359;
                        uint64_t v396 = 0;
                        __int16 v397 = 0;
                        int v398 = 0;
                        uint64_t v399 = 0;
                        LODWORD(v400) = 3;
                        HIDWORD(v400) = *((_DWORD *)v219 + 7);
                        LOBYTE(v401) = 0;
                        uint64_t v230 = v229 >> 14;
                        char v405 = 0;
                        std::vector<unsigned short>::vector(v371, v229 >> 14, name);
                        long long v406 = *(_OWORD *)v371;
                        v407 = v372;
                        v371[1] = 0;
                        v372 = 0;
                        v371[0] = 0;
                        char v408 = 1;
                        std::vector<unsigned short>::vector(v389, v230, name);
                        long long v409 = *(_OWORD *)v389;
                        v410 = v390;
                        v389[1] = 0;
                        v390 = 0;
                        v389[0] = 0;
                        char v411 = 1;
                        v413 = 0;
                        v414 = 0;
                        uint64_t v412 = 0;
                        std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]((uint64_t *)&v435, (long long *)v392);
                        v384 = (mach_port_name_t *)&v412;
                        std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v384);
                        if (v411 && (void)v409)
                        {
                          *((void *)&v409 + 1) = v409;
                          operator delete((void *)v409);
                        }
                        if (v408 && (void)v406)
                        {
                          *((void *)&v406 + 1) = v406;
                          operator delete((void *)v406);
                        }
                        if (v405 && v404 < 0) {
                          operator delete(v401);
                        }
                        if (v389[0])
                        {
                          v389[1] = v389[0];
                          operator delete(v389[0]);
                        }
                        if (v371[0])
                        {
                          v371[1] = v371[0];
                          operator delete(v371[0]);
                        }
                      }
                      v225 += 5;
                    }
                    while (v225 != v224);
                    unint64_t v231 = *(void *)v420;
                    uint64_t v232 = *(void *)&v420[8];
                  }
                  char v233 = 0;
                  v234 = 0;
                  v371[0] = 0;
                  v371[1] = 0;
                  v372 = 0;
                  if (v231 < v231 + v232)
                  {
                    long long v235 = v435;
                    unint64_t v236 = v221 + v220;
                    do
                    {
                      *(_OWORD *)v392 = *(_OWORD *)v219;
                      long long v393 = *((_OWORD *)v219 + 1);
                      v394 = (void *)0x4000;
                      *(void *)v395 = v231;
                      *(void *)&v395[8] = v371;
                      if (v235 == v436)
                      {
                        set_up_mapped_memory_cache_for_exclave_core_file<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long long,vas_segmentinfo_table const&,CSExclaveCoreFileType,mapped_memory_t *)::{lambda(unsigned long long)#1}::operator()((uint64_t)v392, v236);
                        unint64_t v231 = v236;
                      }
                      else
                      {
                        unint64_t v237 = *v235;
                        if (v231 < *v235)
                        {
                          if (v236 >= v237) {
                            unint64_t v238 = *v235;
                          }
                          else {
                            unint64_t v238 = v236;
                          }
                          set_up_mapped_memory_cache_for_exclave_core_file<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long long,vas_segmentinfo_table const&,CSExclaveCoreFileType,mapped_memory_t *)::{lambda(unsigned long long)#1}::operator()((uint64_t)v392, v238);
                          unint64_t v237 = *v235;
                        }
                        unint64_t v231 = v235[1] + v237;
                        v235 += 28;
                      }
                    }
                    while (v231 < *(void *)&v420[8] + *(void *)v420);
                    v234 = (uint64_t *)v371[0];
                    char v233 = v371[1];
                  }
                  std::vector<CSCppCoreFileRegionInfo>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CSCppCoreFileRegionInfo*>,std::__wrap_iter<CSCppCoreFileRegionInfo*>>((uint64_t *)&v435, (long long *)v436, v234, (uint64_t)v233, 0x6DB6DB6DB6DB6DB7 * ((v233 - (unsigned char *)v234) >> 5));
                  unint64_t v239 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v436 - (unsigned char *)v435) >> 5));
                  if (v436 == v435) {
                    uint64_t v240 = 0;
                  }
                  else {
                    uint64_t v240 = v239;
                  }
                  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb((unint64_t)v435, (long long *)v436, v240, 1);
                  std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]((uint64_t *)&v375, (long long *)v420);
                  v392[0] = v371;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v392);
                  v392[0] = &v435;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v392);
                  if (v434 && (void)v432)
                  {
                    *((void *)&v432 + 1) = v432;
                    operator delete((void *)v432);
                  }
                  if (v431 && (void)v429)
                  {
                    *((void *)&v429 + 1) = v429;
                    operator delete((void *)v429);
                  }
                  if (v428 && v427 < 0) {
                    operator delete(v424);
                  }
                  v219 += 32;
                }
                while (v363 + 32 != (unsigned __int8 *)v355);
              }
              uint64_t v241 = MEMORY[0xC0];
              uint64_t v242 = *(void *)(MEMORY[0xC0] + 16);
              uint64_t v365 = *(void *)(MEMORY[0xC0] + 24);
              if (v242 != v365)
              {
                do
                {
                  unint64_t v244 = *(void *)v242;
                  uint64_t v243 = *(void *)(v242 + 8);
                  v392[1] = 0;
                  v392[0] = 0;
                  *(void *)&long long v393 = 0;
                  long long v246 = (long long *)v375;
                  long long v245 = (long long *)v376;
                  if (v375 == v376)
                  {
                    v253 = 0;
LABEL_488:
                    if (v243)
                    {
                      if ((unint64_t)v253 >= (unint64_t)v393)
                      {
                        v265 = (unint64_t *)v392[0];
                        uint64_t v266 = ((char *)v253 - (char *)v392[0]) >> 4;
                        unint64_t v267 = v266 + 1;
                        if ((unint64_t)(v266 + 1) >> 60) {
                          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v268 = v393 - (unint64_t)v392[0];
                        if ((uint64_t)(v393 - (unint64_t)v392[0]) >> 3 > v267) {
                          unint64_t v267 = v268 >> 3;
                        }
                        if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v269 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v269 = v267;
                        }
                        if (v269)
                        {
                          v270 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v393, v269);
                          v253 = (unint64_t *)v392[1];
                          v265 = (unint64_t *)v392[0];
                        }
                        else
                        {
                          v270 = 0;
                        }
                        v271 = (unint64_t *)&v270[16 * v266];
                        unint64_t *v271 = v244;
                        v271[1] = v243;
                        v272 = v271;
                        if (v253 != v265)
                        {
                          do
                          {
                            *((_OWORD *)v272 - 1) = *((_OWORD *)v253 - 1);
                            v272 -= 2;
                            v253 -= 2;
                          }
                          while (v253 != v265);
                          v265 = (unint64_t *)v392[0];
                        }
                        v253 = v271 + 2;
                        v392[0] = v272;
                        v392[1] = v271 + 2;
                        *(void *)&long long v393 = &v270[16 * v269];
                        if (v265) {
                          operator delete(v265);
                        }
                      }
                      else
                      {
                        unint64_t *v253 = v244;
                        v253[1] = v243;
                        v253 += 2;
                      }
                      v392[1] = v253;
                    }
                  }
                  else
                  {
                    while (!CSRangeContainsRange(*(void *)v246, *((void *)v246 + 1), v244, v243))
                    {
                      BOOL v247 = CSRangeIntersectsRange(v244, v243, *(void *)v246, *((void *)v246 + 1));
                      unint64_t v248 = *(void *)v246;
                      if (v247)
                      {
                        unint64_t v249 = *((void *)v246 + 1);
                        if (v244 - v248 >= v249)
                        {
                          unint64_t v251 = v248 - v244;
                          v252 = (char *)v392[1];
                          if (v392[1] >= (void *)v393)
                          {
                            v254 = (char *)v392[0];
                            int64_t v255 = ((char *)v392[1] - (char *)v392[0]) >> 4;
                            unint64_t v256 = v255 + 1;
                            if ((unint64_t)(v255 + 1) >> 60) {
                              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                            }
                            uint64_t v257 = v393 - (unint64_t)v392[0];
                            if ((uint64_t)(v393 - (unint64_t)v392[0]) >> 3 > v256) {
                              unint64_t v256 = v257 >> 3;
                            }
                            if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFF0) {
                              unint64_t v258 = 0xFFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v258 = v256;
                            }
                            if (v258)
                            {
                              v259 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v393, v258);
                              v252 = (char *)v392[1];
                              v254 = (char *)v392[0];
                            }
                            else
                            {
                              v259 = 0;
                            }
                            v260 = (unint64_t *)&v259[16 * v255];
                            unint64_t *v260 = v244;
                            v260[1] = v251;
                            v261 = v260;
                            if (v252 != v254)
                            {
                              do
                              {
                                *((_OWORD *)v261 - 1) = *((_OWORD *)v252 - 1);
                                v261 -= 2;
                                v252 -= 16;
                              }
                              while (v252 != v254);
                              v254 = (char *)v392[0];
                            }
                            v253 = v260 + 2;
                            v392[0] = v261;
                            v392[1] = v260 + 2;
                            *(void *)&long long v393 = &v259[16 * v258];
                            if (v254) {
                              operator delete(v254);
                            }
                          }
                          else
                          {
                            *(void *)v392[1] = v244;
                            *((void *)v252 + 1) = v251;
                            v253 = (unint64_t *)(v252 + 16);
                          }
                          v392[1] = v253;
                          unint64_t v262 = *(void *)v246;
                          unint64_t v263 = *((void *)v246 + 1);
                          unint64_t v264 = v244 + v243;
                          if (v244 + v243 - *(void *)v246 < v263) {
                            goto LABEL_507;
                          }
                          unint64_t v244 = v263 + v262;
                          uint64_t v243 = v264 - (v263 + v262);
                        }
                        else
                        {
                          unint64_t v250 = v244 + v243;
                          unint64_t v244 = v249 + v248;
                          uint64_t v243 = v250 - (v249 + v248);
                        }
                      }
                      else if (v248 > v244 + v243)
                      {
                        goto LABEL_486;
                      }
                      v246 += 14;
                      if (v246 == v245)
                      {
LABEL_486:
                        v253 = (unint64_t *)v392[1];
                        goto LABEL_488;
                      }
                    }
                    v253 = (unint64_t *)v392[1];
                  }
LABEL_507:
                  v273 = (unint64_t *)v392[0];
                  if (v392[0] != v253)
                  {
                    do
                    {
                      LOWORD(name[0]) = 9;
                      int v274 = *(_DWORD *)(v242 + 32);
                      int v275 = *(_DWORD *)(v242 + 36);
                      long long v276 = *(_OWORD *)v273;
                      *(_DWORD *)&v420[16] = 0;
                      *(_DWORD *)&v420[20] = v274 | 1;
                      if ((v274 & 4) != 0) {
                        int v277 = 3;
                      }
                      else {
                        int v277 = 1;
                      }
                      *(_OWORD *)v420 = v276;
                      *(_DWORD *)&v420[24] = v275 | 1;
                      uint64_t v421 = 0;
                      __int16 v422 = 0;
                      *(_DWORD *)v423 = 0;
                      *(void *)&v423[4] = 0;
                      memset(&v420[28], 0, 41);
                      *(_DWORD *)&v423[12] = 3;
                      *(_DWORD *)&v423[16] = v277;
                      LOBYTE(v424) = 0;
                      char v428 = 0;
                      std::vector<unsigned short>::vector(v371, v273[1] >> 14, name);
                      long long v429 = *(_OWORD *)v371;
                      v430 = v372;
                      v371[1] = 0;
                      v372 = 0;
                      v371[0] = 0;
                      char v431 = 1;
                      std::vector<unsigned short>::vector(v389, v273[1] >> 14, name);
                      long long v432 = *(_OWORD *)v389;
                      v433 = v390;
                      v389[1] = 0;
                      v390 = 0;
                      v389[0] = 0;
                      char v434 = 1;
                      v436 = 0;
                      v437 = 0;
                      v435 = 0;
                      std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]((uint64_t *)&v375, (long long *)v420);
                      v384 = (mach_port_name_t *)&v435;
                      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v384);
                      if (v434 && (void)v432)
                      {
                        *((void *)&v432 + 1) = v432;
                        operator delete((void *)v432);
                      }
                      if (v431 && (void)v429)
                      {
                        *((void *)&v429 + 1) = v429;
                        operator delete((void *)v429);
                      }
                      if (v428 && v427 < 0) {
                        operator delete(v424);
                      }
                      if (v389[0])
                      {
                        v389[1] = v389[0];
                        operator delete(v389[0]);
                      }
                      if (v371[0])
                      {
                        v371[1] = v371[0];
                        operator delete(v371[0]);
                      }
                      v273 += 2;
                    }
                    while (v273 != v253);
                    unint64_t v278 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((v376 - (unsigned char *)v375) >> 5));
                    if (v376 == v375) {
                      uint64_t v279 = 0;
                    }
                    else {
                      uint64_t v279 = v278;
                    }
                    _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb((unint64_t)v375, (long long *)v376, v279, 1);
                    v253 = (unint64_t *)v392[0];
                  }
                  if (v253)
                  {
                    v392[1] = v253;
                    operator delete(v253);
                  }
                  v242 += 40;
                }
                while (v242 != v365);
                uint64_t v241 = MEMORY[0xC0];
              }
              std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>::map[abi:ne180100]((uint64_t *)v420, v241 + 48);
              *(void *)&long long v393 = 0;
              v392[1] = 0;
              v392[0] = &v392[1];
              std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__move_assign(MEMORY[0xC0] + 48, v392);
              std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)v392, (void *)v392[1]);
              LODWORD(v384) = dup(*(_DWORD *)(MEMORY[0xC0] + 8));
              BOOL v280 = v384 != -1;
              if (v384 != -1)
              {
                v387[1] = 0;
                v388 = 0;
                v387[0] = 0;
                std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(v387, (uint64_t)v375, (uint64_t)v376, 0x6DB6DB6DB6DB6DB7 * ((v376 - (unsigned char *)v375) >> 5));
                v392[1] = 0;
                v392[0] = 0;
                *(void *)&long long v393 = 0;
                std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(v392, (uint64_t)v387[0], (uint64_t)v387[1], 0x6DB6DB6DB6DB6DB7 * (((char *)v387[1] - (char *)v387[0]) >> 5));
                std::make_unique[abi:ne180100]<CSCppCoreFileExclavesMetadata,int const&,std::vector<mapped_memory_core_file_dumped_region_info_t> const&,_CSArchitecture const&,std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> const&,std::optional<unsigned long long> const&,CSCppCoreFileRegionsTree,CSExclaveCoreFileType const&,long long &>();
              }
              std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)v420, *(void **)&v420[8]);
              *(void *)v420 = &v375;
              std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v420);
            }
            if (v379)
            {
              v380 = (__n128 *)v379;
              operator delete(v379);
            }
            CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v367);
            if (!v280) {
              goto LABEL_310;
            }
            goto LABEL_687;
          }
          v125 += 4;
        }
      }
      CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v367);
LABEL_310:
      release_mapped_memory_cache(0);
    }
    else
    {
LABEL_687:
      clear_mapped_memory(0);
    }
  }
LABEL_342:
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v370);
  return 0;
}

void sub_1B9060130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  a69 = &a62;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)&STACK[0x3C0], (void *)STACK[0x3C8]);
  STACK[0x3C0] = (unint64_t)&a47;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3C0]);
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&a56);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a17);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a32);
  _Unwind_Resume(a1);
}

uint64_t create_mapped_memory_cache_for_core_file_with_label(char *a1, const char *a2)
{
  return common_create_mapped_memory_cache_for_core_file_with_label_and_optional_exclave_metadata(a1, a2, 1);
}

BOOL mapped_memory_is_64_bit(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 101) != 0;
  }
  return result;
}

uint64_t create_mapped_memory_cache_for_task(mach_port_name_t a1)
{
  return create_mapped_memory_cache_for_task_with_label(a1);
}

void set_mapped_memory_cache_region_info_block(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  *(void *)(a1 + 112) = a2;

  std::mutex::unlock(v4);
}

uint64_t destroy_mapped_memory_cache(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    clear_mapped_memory(result);
    mach_port_name_t v2 = *(_DWORD *)(v1 + 88);
    if (v2) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], v2);
    }
    task_suspension_token_t v3 = *(_DWORD *)(v1 + 92);
    if (v3) {
      task_resume2(v3);
    }
    uint64_t v4 = *(void *)(v1 + 192);
    *(void *)(v1 + 192) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    std::mutex::~mutex((std::mutex *)(v1 + 128));
    unsigned int v5 = *(void **)(v1 + 64);
    if (v5)
    {
      *(void *)(v1 + 72) = v5;
      operator delete(v5);
    }
    std::__tree<TRange<Pointer64>>::destroy(v1 + 40, *(void **)(v1 + 48));
    JUMPOUT(0x1BA9D1CD0);
  }
  return result;
}

void clear_mapped_memory(uint64_t a1)
{
  mach_port_name_t v2 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  task_suspension_token_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)(a1 + 48);
  if (v3 != (void *)(a1 + 48))
  {
    do
    {
      long long v5 = *((_OWORD *)v3 + 3);
      long long v12 = *((_OWORD *)v3 + 2);
      long long v13 = v5;
      uint64_t v14 = v3[8];
      deallocate_node((uint64_t)&v12);
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          task_suspension_token_t v3 = v7;
        }
        while (!v8);
      }
      task_suspension_token_t v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<TRange<Pointer64>>::destroy(a1 + 40, *(void **)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = v4;
  BOOL v9 = *(long long **)(a1 + 64);
  int v10 = *(long long **)(a1 + 72);
  if (v9 != v10)
  {
    do
    {
      long long v11 = v9[1];
      long long v12 = *v9;
      long long v13 = v11;
      uint64_t v14 = *((void *)v9 + 4);
      deallocate_node((uint64_t)&v12);
      BOOL v9 = (long long *)((char *)v9 + 40);
    }
    while (v9 != v10);
    BOOL v9 = *(long long **)(a1 + 64);
  }
  *(void *)(a1 + 72) = v9;
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;

  std::mutex::unlock(v2);
}

void sub_1B9060A30(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

tree *__cdecl find_node(const char *a1, tree *a2)
{
  uint64_t v4 = a1;
  if (a1)
  {
    int v5 = v3;
    uint64_t v6 = v2;
    BOOL v8 = (std::mutex *)(a1 + 128);
    std::mutex::lock((std::mutex *)a1 + 2);
    if ((tree *)((char *)a2 + v6) <= a2) {
      goto LABEL_24;
    }
    BOOL v9 = (uint64_t *)(v4 + 48);
    int v10 = (void *)*((void *)v4 + 6);
    if (v10)
    {
      do
      {
        unint64_t v11 = v10[4];
        BOOL v12 = v11 > (unint64_t)a2;
        if (v11 <= (unint64_t)a2) {
          long long v13 = v10 + 1;
        }
        else {
          long long v13 = v10;
        }
        if (v12) {
          BOOL v9 = v10;
        }
        int v10 = (void *)*v13;
      }
      while (*v13);
    }
    if (v9 == *((uint64_t **)v4 + 5)) {
      goto LABEL_24;
    }
    uint64_t v14 = *v9;
    if (*v9)
    {
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = *(void *)(v14 + 8);
      }
      while (v14);
    }
    else
    {
      do
      {
        uint64_t v15 = v9[2];
        BOOL v18 = *(void *)v15 == (void)v9;
        BOOL v9 = (uint64_t *)v15;
      }
      while (v18);
    }
    uint64_t v4 = (const char *)(v15 + 32);
    unint64_t v16 = *(void *)(v15 + 32);
    if (v16 > (unint64_t)a2) {
      goto LABEL_24;
    }
    unint64_t v17 = *(void *)(v15 + 40) + v16;
    BOOL v18 = v17 <= (unint64_t)a2 || v5 == 0;
    if (v18)
    {
      if (v17 <= (unint64_t)a2)
      {
LABEL_24:
        uint64_t v4 = 0;
        goto LABEL_25;
      }
    }
    else if (v17 < (unint64_t)a2 + v6)
    {
      goto LABEL_24;
    }
    ++*(_DWORD *)(v15 + 64);
LABEL_25:
    std::mutex::unlock(v8);
  }
  return (tree *)v4;
}

BOOL vm_tag_is_malloc(unsigned int a1)
{
  BOOL result = 1;
  if (a1 > 0xD || ((1 << a1) & 0x3BDE) == 0) {
    return a1 == 99;
  }
  return result;
}

uint64_t **map_new_node(uint64_t a1, mach_vm_address_t a2, uint64_t a3, int *a4)
{
  if (!a1)
  {
    if (a4)
    {
      unint64_t v17 = 0;
      int v18 = 4;
LABEL_11:
      *a4 = v18;
      return v17;
    }
    return 0;
  }
  if (!a2)
  {
    if (a4)
    {
      unint64_t v17 = 0;
      int v18 = 1;
      goto LABEL_11;
    }
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 192);
  int v10 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  if (!v9)
  {
    vm_map_read_t v19 = *(_DWORD *)(a1 + 88);
    nesting_depth[0] = 999999;
    mach_msg_type_number_t infoCnt = 12;
    mach_vm_size_t size = 0;
    mach_vm_address_t address = a2;
    if (mach_vm_region_recurse(v19, &address, &size, (natural_t *)nesting_depth, info, &infoCnt)
      || (mach_vm_address_t v20 = address, address > a2)
      || (mach_vm_size_t v21 = size, size + address <= a2))
    {
      unsigned __int8 v22 = 0;
      unsigned __int8 v23 = 0;
      mach_vm_address_t v20 = 0;
      mach_vm_size_t v21 = 0;
    }
    else
    {
      unsigned __int8 v23 = info[0];
      unsigned __int8 v22 = info[1];
    }
    if (v20 - 1 >= a2)
    {
      if (a4)
      {
        unint64_t v17 = 0;
        *a4 = 1;
        goto LABEL_214;
      }
      goto LABEL_162;
    }
    unsigned int v154 = v10;
    int v24 = (v23 & 2) == 0;
    char v25 = ((v23 | v22) & 2) == 0;
    mach_vm_address_t v26 = a3 + a2;
    mach_vm_address_t v27 = v20 + v21;
    if (v26 > v20 + v21)
    {
      do
      {
        nesting_depth[0] = 999999;
        mach_msg_type_number_t infoCnt = 12;
        mach_vm_size_t size = 0;
        mach_vm_address_t address = v27;
        if (mach_vm_region_recurse(v19, &address, &size, (natural_t *)nesting_depth, info, &infoCnt)
          || (mach_vm_address_t v28 = address, address > v27)
          || (mach_vm_size_t v29 = size, size + address <= v27))
        {
          char v30 = 0;
          char v31 = 0;
          mach_vm_address_t v28 = 0;
          mach_vm_size_t v29 = 0;
        }
        else
        {
          char v31 = info[0];
          char v30 = info[1];
        }
        if (!v28)
        {
          unint64_t v17 = 0;
          if (a4) {
            *a4 = 1;
          }
          int v10 = v154;
          goto LABEL_214;
        }
        BOOL v32 = (v31 & 2) == 0;
        v24 &= v32;
        if ((v30 & 2) != 0) {
          char v25 = 0;
        }
        else {
          v25 &= v32;
        }
        mach_vm_address_t v27 = v28 + v29;
      }
      while (v26 > v28 + v29);
    }
    mach_vm_size_t v33 = v27 - v20;
    BOOL v34 = CSRangeContainsRange(*(void *)(a1 + 16), *(void *)(a1 + 24), v20, v27 - v20);
    int v10 = v154;
    if ((v25 & 1) != 0 || (!*(void *)(a1 + 32) ? (int v35 = v24) : (int v35 = 0), v36 = v19, v35 == 1)) {
      vm_map_read_t v36 = *MEMORY[0x1E4F14960];
    }
    if (v34) {
      task_name_t v37 = v36;
    }
    else {
      task_name_t v37 = v19;
    }
    if (*(unsigned char *)(a1 + 100))
    {
      if (!mach_task_is_self(v37))
      {
        *(void *)info = 0;
        mach_vm_size_t size = 0;
        int v80 = mach_vm_read_overwrite(*(_DWORD *)(a1 + 88), v20, 1uLL, (mach_vm_address_t)info, &size);
        if (v80) {
          goto LABEL_125;
        }
      }
    }
    *(void *)info = v20;
    mach_vm_size_t v163 = v33;
    task_name_t v165 = v37;
    int v166 = 0;
    if (mach_task_is_self(v37))
    {
      mach_vm_size_t v38 = *(void *)(a1 + 32) + v20;
    }
    else
    {
      LODWORD(address) = 0;
      nesting_depth[0] = 1;
      mach_vm_size_t size = 0;
      int v80 = remap_memory_from_target(*MEMORY[0x1E4F14960], &size, v33, 0, 33, v37, v20, 0, (vm_prot_t *)&address, nesting_depth, 1u);
      if (v80)
      {
LABEL_125:
        if (a4) {
          *a4 = v80;
        }
        goto LABEL_162;
      }
      mach_vm_size_t v38 = size;
    }
    mach_vm_address_t v164 = v38;
    unint64_t v39 = std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__emplace_unique_key_args<mapped_region_node_internal_t,mapped_region_node_internal_t const&>((uint64_t **)(a1 + 40), (unint64_t *)info, (uint64_t)info);
    mach_vm_size_t v152 = v33;
    tasunint64_t k = v37;
    uint64_t v147 = v40;
    uint64_t v148 = v39;
    if (v40)
    {
      long long v41 = v39[1];
      if (v41)
      {
        do
        {
          long long v42 = v41;
          long long v41 = (uint64_t *)*v41;
        }
        while (v41);
      }
      else
      {
        uint64_t v85 = v39;
        do
        {
          long long v42 = v85[2];
          BOOL v66 = *v42 == (void)v85;
          uint64_t v85 = (uint64_t **)v42;
        }
        while (!v66);
      }
    }
    else
    {
      long long v42 = (uint64_t *)v39;
    }
    if (v42 != (uint64_t *)(a1 + 48))
    {
      uint64_t v86 = (char **)(a1 + 64);
      do
      {
        uint64_t v88 = v42 + 4;
        unint64_t v87 = v42[4];
        if (*(void *)info > v87) {
          break;
        }
        uint64_t v89 = v42;
        if (v42[5] + v87 > v163 + *(void *)info) {
          break;
        }
        unsigned int v90 = (uint64_t *)v42[1];
        uint64_t v91 = v42;
        if (v90)
        {
          do
          {
            long long v42 = v90;
            unsigned int v90 = (uint64_t *)*v90;
          }
          while (v90);
        }
        else
        {
          do
          {
            long long v42 = (uint64_t *)v91[2];
            BOOL v66 = *v42 == (void)v91;
            uint64_t v91 = v42;
          }
          while (!v66);
        }
        unint64_t v92 = *(void *)(a1 + 72);
        unint64_t v93 = *(void *)(a1 + 80);
        if (v92 >= v93)
        {
          unint64_t v97 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v92 - (void)*v86) >> 3);
          unint64_t v98 = v97 + 1;
          if (v97 + 1 > 0x666666666666666) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v99 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v93 - (void)*v86) >> 3);
          if (2 * v99 > v98) {
            unint64_t v98 = 2 * v99;
          }
          if (v99 >= 0x333333333333333) {
            unint64_t v100 = 0x666666666666666;
          }
          else {
            unint64_t v100 = v98;
          }
          if (v100) {
            uint64_t v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(a1 + 80, v100);
          }
          else {
            uint64_t v101 = 0;
          }
          uint64_t v102 = &v101[40 * v97];
          long long v103 = *(_OWORD *)v88;
          long long v104 = *((_OWORD *)v88 + 1);
          *((void *)v102 + 4) = v88[4];
          *(_OWORD *)uint64_t v102 = v103;
          *((_OWORD *)v102 + 1) = v104;
          uint64_t v106 = *(char **)(a1 + 64);
          unsigned int v105 = *(char **)(a1 + 72);
          uint64_t v107 = v102;
          if (v105 != v106)
          {
            do
            {
              long long v108 = *(_OWORD *)(v105 - 40);
              long long v109 = *(_OWORD *)(v105 - 24);
              *((_DWORD *)v107 - 2) = *((_DWORD *)v105 - 2);
              *(_OWORD *)(v107 - 24) = v109;
              *(_OWORD *)(v107 - 40) = v108;
              v107 -= 40;
              v105 -= 40;
            }
            while (v105 != v106);
            unsigned int v105 = *v86;
          }
          uint64_t v96 = v102 + 40;
          *(void *)(a1 + 64) = v107;
          *(void *)(a1 + 72) = v102 + 40;
          *(void *)(a1 + 80) = &v101[40 * v100];
          if (v105) {
            operator delete(v105);
          }
        }
        else
        {
          long long v94 = *(_OWORD *)v88;
          long long v95 = *((_OWORD *)v88 + 1);
          *(void *)(v92 + 32) = v88[4];
          *(_OWORD *)unint64_t v92 = v94;
          *(_OWORD *)(v92 + 16) = v95;
          uint64_t v96 = (char *)(v92 + 40);
        }
        *(void *)(a1 + 72) = v96;
        std::__tree<TRangeValue<Pointer64,unsigned char *>>::__remove_node_pointer((uint64_t **)(a1 + 40), v89);
        operator delete(v89);
      }
      while (v42 != (uint64_t *)(a1 + 48));
    }
    int v10 = v154;
    uint64_t v110 = v148;
    if (!v147)
    {
      char v111 = std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__emplace_unique_key_args<mapped_region_node_internal_t,mapped_region_node_internal_t const&>((uint64_t **)(a1 + 40), (unint64_t *)info, (uint64_t)info);
      if (!v112)
      {
LABEL_162:
        unint64_t v17 = 0;
        goto LABEL_214;
      }
      uint64_t v110 = v111;
    }
    if (!mach_task_is_self(task))
    {
      ++*(_DWORD *)a1;
      *(void *)(a1 + 8) += v152;
    }
    unint64_t v17 = v110 + 4;
    goto LABEL_214;
  }
  mach_vm_size_t size = 0;
  uint64_t v158 = 0;
  unint64_t v159 = 0;
  uint64_t v11 = *(void *)(a1 + 192);
  if (v11)
  {
    core_file_dumped_region_containing_location = find_core_file_dumped_region_containing_location(v11 + 16, a2);
    if (v13)
    {
      uint64_t v151 = *core_file_dumped_region_containing_location;
      unint64_t v15 = core_file_dumped_region_containing_location[2];
      mach_vm_address_t v14 = core_file_dumped_region_containing_location[3];
      unint64_t v4 = v15 >> 8;
      char v16 = 1;
      goto LABEL_57;
    }
    uint64_t v11 = *(void *)(a1 + 192);
  }
  if (!*(unsigned char *)(v11 + 112)
    || (region_at_mach_vm_address_t address = CSCppCoreFileRegionsTree::get_region_at_address((char **)(v11 + 88), a2, 0x270FuLL), !v44)
    || (mach_vm_address_t v14 = *(void *)(region_at_address + 8), a2 - *(void *)region_at_address >= v14)
    || *(unsigned char *)(region_at_address + 67) != 3)
  {
    unint64_t v17 = 0;
    if (!a4) {
      goto LABEL_212;
    }
    int v45 = 1;
LABEL_107:
    *a4 = v45;
    goto LABEL_212;
  }
  uint64_t v151 = *(void *)region_at_address;
  char v16 = 0;
  LOBYTE(v15) = 0;
LABEL_57:
  unint64_t v46 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v158[-size] >> 3) + 1;
  if (v46 > 0x666666666666666) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((uint64_t)&v159[-size] >> 3) > v46) {
    unint64_t v46 = 0x999999999999999ALL * ((uint64_t)&v159[-size] >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v159[-size] >> 3) >= 0x333333333333333) {
    unint64_t v47 = 0x666666666666666;
  }
  else {
    unint64_t v47 = v46;
  }
  if (v47) {
    uint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)&v159, v47);
  }
  else {
    uint64_t v48 = 0;
  }
  mach_vm_size_t v49 = (mach_vm_size_t)&v48[8 * ((uint64_t)&v158[-size] >> 3)];
  uint64_t v50 = &v48[40 * v47];
  *(void *)mach_vm_size_t v49 = v15 | (v4 << 8);
  *(void *)(v49 + 8) = v14;
  *(unsigned char *)(v49 + 16) = v16;
  *(_DWORD *)(v49 + 17) = nesting_depth[0];
  *(_DWORD *)(v49 + 20) = *(vm_prot_t *)((char *)nesting_depth + 3);
  *(void *)(v49 + 24) = v151;
  *(void *)(v49 + 32) = v14;
  unint64_t v51 = (char *)(v49 + 40);
  mach_vm_size_t v53 = size;
  unint64_t v52 = v158;
  if (v158 != (char *)size)
  {
    do
    {
      long long v54 = *(_OWORD *)(v52 - 40);
      long long v55 = *(_OWORD *)(v52 - 24);
      *(void *)(v49 - 8) = *((void *)v52 - 1);
      *(_OWORD *)(v49 - 24) = v55;
      *(_OWORD *)(v49 - 40) = v54;
      v49 -= 40;
      v52 -= 40;
    }
    while (v52 != (char *)v53);
    unint64_t v52 = (char *)v53;
  }
  mach_vm_size_t size = v49;
  uint64_t v158 = v51;
  unint64_t v159 = v50;
  if (v52) {
    operator delete(v52);
  }
  unint64_t v155 = v10;
  uint64_t v158 = v51;
  unint64_t v56 = a3 + a2;
  unint64_t v57 = v14 + v151;
  if (v56 <= v14 + v151)
  {
LABEL_102:
    mach_vm_size_t v78 = v57 - v151;
    *(void *)info = v151;
    mach_vm_size_t v163 = v57 - v151;
    task_name_t v165 = *(_DWORD *)(a1 + 88);
    int v166 = 0;
    int v10 = v155;
    if (!*(void *)(a1 + 192)
      || (char *)size == v51
      || (address = 0, uint64_t v79 = (vm_map_t *)MEMORY[0x1E4F14960], mach_vm_allocate(*MEMORY[0x1E4F14960], &address, v78, 1)))
    {
LABEL_105:
      if (a4)
      {
        unint64_t v17 = 0;
        int v45 = 5;
        goto LABEL_107;
      }
    }
    else
    {
      mach_vm_size_t v81 = size;
      if ((char *)size != v158)
      {
        uint64_t v82 = *MEMORY[0x1E4F14AF0];
        mach_vm_size_t v83 = size;
        while (!*(unsigned char *)(v83 + 16) || (*(void *)v83 & v82) == 0 && (*(void *)(v83 + 8) & v82) == 0)
        {
          v83 += 40;
          if ((char *)v83 == v158)
          {
            char v84 = 1;
            goto LABEL_164;
          }
        }
        char v84 = 0;
        do
        {
LABEL_164:
          if (*(unsigned char *)(v81 + 16))
          {
            uint64_t v113 = *(void *)(v81 + 24) - *(void *)(size + 24);
            if (v84)
            {
              if (mmap((void *)(address + v113), *(void *)(v81 + 8), 1, 18, *(_DWORD *)(*(void *)(a1 + 192) + 8), *(void *)v81) == (void *)-1)goto LABEL_178; {
            }
              }
            else
            {
              while (1)
              {
                unint64_t v114 = pread(*(_DWORD *)(*(void *)(a1 + 192) + 8), (void *)(address + v113), *(void *)(v81 + 8), *(void *)v81);
                if (v114 != -1) {
                  break;
                }
                if (*__error() != 4) {
                  goto LABEL_172;
                }
              }
              if (v114 < *(void *)(v81 + 8))
              {
LABEL_178:
                mach_vm_deallocate(*v79, address, v78);
                goto LABEL_105;
              }
            }
          }
LABEL_172:
          v81 += 40;
        }
        while ((char *)v81 != v158);
      }
      mach_vm_address_t v164 = address;
      uint64_t v115 = std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__emplace_unique_key_args<mapped_region_node_internal_t,mapped_region_node_internal_t const&>((uint64_t **)(a1 + 40), (unint64_t *)info, (uint64_t)info);
      *(void *)taska = v116;
      unint64_t v153 = v115;
      if (v116)
      {
        unint64_t v117 = v115[1];
        if (v117)
        {
          do
          {
            long long v118 = v117;
            unint64_t v117 = (uint64_t *)*v117;
          }
          while (v117);
        }
        else
        {
          unint64_t v119 = v115;
          do
          {
            long long v118 = v119[2];
            BOOL v66 = *v118 == (void)v119;
            unint64_t v119 = (uint64_t **)v118;
          }
          while (!v66);
        }
      }
      else
      {
        long long v118 = (uint64_t *)v115;
      }
      if (v118 != (uint64_t *)(a1 + 48))
      {
        unint64_t v120 = (char **)(a1 + 64);
        do
        {
          unsigned int v122 = v118 + 4;
          unint64_t v121 = v118[4];
          if (*(void *)info > v121) {
            break;
          }
          char v123 = v118;
          if (v118[5] + v121 > v163 + *(void *)info) {
            break;
          }
          int v124 = (uint64_t *)v118[1];
          unint64_t v125 = v118;
          if (v124)
          {
            do
            {
              long long v118 = v124;
              int v124 = (uint64_t *)*v124;
            }
            while (v124);
          }
          else
          {
            do
            {
              long long v118 = (uint64_t *)v125[2];
              BOOL v66 = *v118 == (void)v125;
              unint64_t v125 = v118;
            }
            while (!v66);
          }
          unint64_t v126 = *(void *)(a1 + 72);
          unint64_t v127 = *(void *)(a1 + 80);
          if (v126 >= v127)
          {
            unint64_t v131 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v126 - (void)*v120) >> 3);
            unint64_t v132 = v131 + 1;
            if (v131 + 1 > 0x666666666666666) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v133 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v127 - (void)*v120) >> 3);
            if (2 * v133 > v132) {
              unint64_t v132 = 2 * v133;
            }
            if (v133 >= 0x333333333333333) {
              unint64_t v134 = 0x666666666666666;
            }
            else {
              unint64_t v134 = v132;
            }
            if (v134) {
              unsigned int v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(a1 + 80, v134);
            }
            else {
              unsigned int v135 = 0;
            }
            uint64_t v136 = &v135[40 * v131];
            long long v137 = *(_OWORD *)v122;
            long long v138 = *((_OWORD *)v122 + 1);
            *((void *)v136 + 4) = v122[4];
            *(_OWORD *)uint64_t v136 = v137;
            *((_OWORD *)v136 + 1) = v138;
            uint64_t v140 = *(char **)(a1 + 64);
            uint64_t v139 = *(char **)(a1 + 72);
            uint64_t v141 = v136;
            if (v139 != v140)
            {
              do
              {
                long long v142 = *(_OWORD *)(v139 - 40);
                long long v143 = *(_OWORD *)(v139 - 24);
                *((_DWORD *)v141 - 2) = *((_DWORD *)v139 - 2);
                *(_OWORD *)(v141 - 24) = v143;
                *(_OWORD *)(v141 - 40) = v142;
                v141 -= 40;
                v139 -= 40;
              }
              while (v139 != v140);
              uint64_t v139 = *v120;
            }
            long long v130 = v136 + 40;
            *(void *)(a1 + 64) = v141;
            *(void *)(a1 + 72) = v136 + 40;
            *(void *)(a1 + 80) = &v135[40 * v134];
            if (v139) {
              operator delete(v139);
            }
          }
          else
          {
            long long v128 = *(_OWORD *)v122;
            long long v129 = *((_OWORD *)v122 + 1);
            *(void *)(v126 + 32) = v122[4];
            *(_OWORD *)unint64_t v126 = v128;
            *(_OWORD *)(v126 + 16) = v129;
            long long v130 = (char *)(v126 + 40);
          }
          *(void *)(a1 + 72) = v130;
          std::__tree<TRangeValue<Pointer64,unsigned char *>>::__remove_node_pointer((uint64_t **)(a1 + 40), v123);
          operator delete(v123);
        }
        while (v118 != (uint64_t *)(a1 + 48));
      }
      int v10 = v155;
      v144 = v153;
      if (*(void *)taska
        || (v144 = std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__emplace_unique_key_args<mapped_region_node_internal_t,mapped_region_node_internal_t const&>((uint64_t **)(a1 + 40), (unint64_t *)info, (uint64_t)info), v145))
      {
        ++*(_DWORD *)a1;
        *(void *)(a1 + 8) += v14;
        unint64_t v17 = v144 + 4;
        goto LABEL_212;
      }
    }
    unint64_t v17 = 0;
    goto LABEL_212;
  }
  unint64_t v58 = 0;
  while (1)
  {
    uint64_t v59 = *(void *)(a1 + 192);
    if (!v59) {
      break;
    }
    unint64_t v60 = find_core_file_dumped_region_containing_location(v59 + 16, v57);
    if (!v61)
    {
      uint64_t v59 = *(void *)(a1 + 192);
      break;
    }
    unint64_t v57 = *v60;
    int v10 = (std::mutex *)v60[3];
    uint64_t v62 = v60[2];
    unint64_t v58 = v60[2] >> 8;
    char v63 = 1;
    mach_vm_address_t v14 = (mach_vm_address_t)v10;
LABEL_85:
    BOOL v67 = v158;
    if (v158 >= v159)
    {
      unint64_t v68 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v158[-size] >> 3);
      unint64_t v69 = v68 + 1;
      if (v68 + 1 > 0x666666666666666) {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      }
      if (0x999999999999999ALL * ((uint64_t)&v159[-size] >> 3) > v69) {
        unint64_t v69 = 0x999999999999999ALL * ((uint64_t)&v159[-size] >> 3);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v159[-size] >> 3) >= 0x333333333333333) {
        unint64_t v70 = 0x666666666666666;
      }
      else {
        unint64_t v70 = v69;
      }
      if (v70) {
        uint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)&v159, v70);
      }
      else {
        uint64_t v71 = 0;
      }
      uint64_t v72 = &v71[8 * ((uint64_t)&v158[-size] >> 3)];
      *(void *)uint64_t v72 = v62 | (v58 << 8);
      *((void *)v72 + 1) = v10;
      v72[16] = v63;
      *(_DWORD *)(v72 + 17) = info[0];
      *((_DWORD *)v72 + 5) = *(int *)((char *)info + 3);
      *((void *)v72 + 3) = v57;
      *((void *)v72 + 4) = v14;
      mach_vm_size_t v74 = size;
      uint64_t v73 = v158;
      mach_vm_size_t v75 = (mach_vm_size_t)&v71[40 * v68];
      if (v158 != (char *)size)
      {
        do
        {
          long long v76 = *(_OWORD *)(v73 - 40);
          long long v77 = *(_OWORD *)(v73 - 24);
          *(void *)(v75 - 8) = *((void *)v73 - 1);
          *(_OWORD *)(v75 - 24) = v77;
          *(_OWORD *)(v75 - 40) = v76;
          v75 -= 40;
          v73 -= 40;
        }
        while (v73 != (char *)v74);
        uint64_t v73 = (char *)v74;
      }
      unint64_t v51 = v72 + 40;
      mach_vm_size_t size = v75;
      uint64_t v158 = v72 + 40;
      unint64_t v159 = &v71[40 * v70];
      if (v73) {
        operator delete(v73);
      }
    }
    else
    {
      *(void *)uint64_t v158 = v62 | (v58 << 8);
      v67[1] = v10;
      *((unsigned char *)v67 + 16) = v63;
      *(_DWORD *)((char *)v67 + 17) = info[0];
      *((_DWORD *)v67 + 5) = *(int *)((char *)info + 3);
      v67[3] = v57;
      v67[4] = v14;
      unint64_t v51 = (char *)(v67 + 5);
    }
    uint64_t v158 = v51;
    v57 += v14;
    if (v56 <= v57) {
      goto LABEL_102;
    }
  }
  if (*(unsigned char *)(v59 + 112))
  {
    uint64_t v64 = CSCppCoreFileRegionsTree::get_region_at_address((char **)(v59 + 88), v57, 0x270FuLL);
    if (v65)
    {
      BOOL v66 = *(void *)v64 == v57 && *(unsigned char *)(v64 + 67) == 3;
      if (v66)
      {
        uint64_t v62 = 0;
        char v63 = 0;
        mach_vm_address_t v14 = *(void *)(v64 + 8);
        goto LABEL_85;
      }
    }
  }
  if (a4) {
    *a4 = 1;
  }
  unint64_t v17 = 0;
  int v10 = v155;
LABEL_212:
  if (size)
  {
    uint64_t v158 = (char *)size;
    operator delete((void *)size);
  }
LABEL_214:
  std::mutex::unlock(v10);
  return v17;
}

void sub_1B90618A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex *a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  std::mutex::unlock(a17);
  _Unwind_Resume(a1);
}

uint64_t unmap_node(uint64_t a1, tree *a2, uint64_t a3, unint64_t *a4, void *a5)
{
  node = find_node((const char *)a1, a2);
  if (node)
  {
    uint64_t v9 = (unint64_t *)node;
    std::mutex::lock((std::mutex *)(a1 + 128));
    if (*((_DWORD *)v9 + 6) == *MEMORY[0x1E4F14960])
    {
      uint64_t v10 = 0;
      if (!a4)
      {
LABEL_5:
        if (a5) {
          *a5 = v9[1];
        }
        std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__erase_unique<mapped_region_node_internal_t>(a1 + 40, v9);
        std::mutex::unlock((std::mutex *)(a1 + 128));
        return v10;
      }
    }
    else
    {
      --*(_DWORD *)a1;
      *(void *)(a1 + 8) -= v9[1];
      long long v12 = *((_OWORD *)v9 + 1);
      v13[0] = *(_OWORD *)v9;
      v13[1] = v12;
      unint64_t v14 = v9[4];
      uint64_t v10 = deallocate_node((uint64_t)v13);
      if (!a4) {
        goto LABEL_5;
      }
    }
    *a4 = *v9;
    goto LABEL_5;
  }
  if (a4) {
    *a4 = 0;
  }
  uint64_t v10 = 0;
  if (a5) {
    *a5 = 0;
  }
  return v10;
}

void sub_1B9061A34(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t deallocate_node(uint64_t a1)
{
  if (mach_task_is_self(*(_DWORD *)(a1 + 24))) {
    return 0;
  }
  vm_map_t v3 = *MEMORY[0x1E4F14960];
  mach_vm_size_t v5 = *(void *)(a1 + 8);
  mach_vm_address_t v4 = *(void *)(a1 + 16);

  return mach_vm_deallocate(v3, v4, v5);
}

void *next_node(uint64_t a1, unint64_t *a2)
{
  if (!a2) {
    return 0;
  }
  mach_vm_address_t v4 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  uint64_t v7 = *(void **)(a1 + 48);
  uint64_t v6 = (void *)(a1 + 48);
  mach_vm_size_t v5 = v7;
  if (!v7) {
    goto LABEL_13;
  }
  unint64_t v8 = *a2;
  uint64_t v9 = v6;
  do
  {
    unint64_t v10 = v5[4];
    BOOL v11 = v8 >= v10;
    if (v8 >= v10) {
      long long v12 = v5 + 1;
    }
    else {
      long long v12 = v5;
    }
    if (!v11) {
      uint64_t v9 = v5;
    }
    mach_vm_size_t v5 = (void *)*v12;
  }
  while (*v12);
  if (v9 == v6 || (v14 = v9 + 4, unint64_t v13 = v9[4], v13 <= v8) && v9[5] + v13 > v8) {
LABEL_13:
  }
    unint64_t v14 = 0;
  std::mutex::unlock(v4);
  return v14;
}

void enumerate_mapped_memory_cache(uint64_t a1, uint64_t a2)
{
  mach_vm_address_t v4 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  mach_vm_size_t v5 = *(void **)(a1 + 40);
  if (v5 != (void *)(a1 + 48))
  {
    do
    {
      long long v6 = *((_OWORD *)v5 + 3);
      long long v14 = *((_OWORD *)v5 + 2);
      long long v15 = v6;
      uint64_t v16 = v5[8];
      (*(void (**)(uint64_t, long long *, void))(a2 + 16))(a2, &v14, 0);
      uint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          mach_vm_size_t v5 = v8;
        }
        while (!v9);
      }
      mach_vm_size_t v5 = v8;
    }
    while (v8 != (void *)(a1 + 48));
  }
  BOOL v11 = *(long long **)(a1 + 64);
  for (i = *(long long **)(a1 + 72); v11 != i; BOOL v11 = (long long *)((char *)v11 + 40))
  {
    long long v12 = *v11;
    long long v13 = v11[1];
    uint64_t v16 = *((void *)v11 + 4);
    long long v14 = v12;
    long long v15 = v13;
    (*(void (**)(uint64_t, long long *, uint64_t))(a2 + 16))(a2, &v14, 1);
  }
  std::mutex::unlock(v4);
}

void sub_1B9061C4C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t mapped_memory_suspend_target(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4;
  }
  if (*(void *)(a1 + 192)) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v2 + 1;
  if (v2 || mach_task_is_self(*(_DWORD *)(a1 + 88))) {
    return 0;
  }
  uint64_t v3 = task_suspend2(*(_DWORD *)(a1 + 88), (task_suspension_token_t *)(a1 + 92));
  if (v3)
  {
    snprintf(__str, 0x400uLL, "%s: %s failed ", "mapped_memory_suspend_target", "can't suspend");
    mach_error(__str, v3);
  }
  return v3;
}

uint64_t mapped_memory_resume_target(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4;
  }
  int v2 = *(_DWORD *)(a1 + 96);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a1 + 192)) {
    return 0;
  }
  int v3 = v2 - 1;
  *(_DWORD *)(a1 + 96) = v3;
  if (v3 || mach_task_is_self(*(_DWORD *)(a1 + 88))) {
    return 0;
  }
  uint64_t v4 = task_resume2(*(_DWORD *)(a1 + 92));
  *(_DWORD *)(a1 + 92) = 0;
  if (v4)
  {
    snprintf(__str, 0x400uLL, "%s: %s failed ", "mapped_memory_resume_target", "can't suspend");
    mach_error(__str, v4);
  }
  return v4;
}

uint64_t mapped_memory_read_pointer(uint64_t a1, tree *a2, void *a3)
{
  if (*(unsigned char *)(a1 + 101)) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = 4;
  }
  unint64_t v8 = 0;
  uint64_t result = mapped_memory_read((const char *)a1, a2, v5, &v8);
  if (v8)
  {
    if (*(unsigned char *)(a1 + 101)) {
      uint64_t v7 = *(void *)v8;
    }
    else {
      uint64_t v7 = *v8;
    }
    uint64_t result = 0;
    *a3 = v7;
  }
  return result;
}

uint64_t mapped_memory_read(const char *a1, tree *a2, uint64_t a3, void *a4)
{
  node = find_node(a1, a2);
  if (!node)
  {
    unsigned int v10 = 0;
    node = map_new_node((uint64_t)a1, (mach_vm_address_t)a2, a3, (int *)&v10);
    if (!node) {
      return v10;
    }
  }
  uint64_t result = 0;
  *a4 = (char *)a2 + node[2] - *node;
  return result;
}

uint64_t mapped_memory_task_threads(uint64_t a1, unsigned int **a2, unsigned int *a3)
{
  if (!a1) {
    return 4;
  }
  if (*(void *)(a1 + 192)) {
    return CSCppCoreFileMetadata::task_threads(*(CSCppCoreFileMetadata **)(a1 + 192), a2, a3);
  }
  return task_threads(*(_DWORD *)(a1 + 88), a2, a3);
}

uint64_t mapped_memory_thread_get_state(uint64_t a1, thread_read_t target_act, thread_state_flavor_t flavor, thread_state_t old_state, mach_msg_type_number_t *old_stateCnt)
{
  if (!a1) {
    return 4;
  }
  uint64_t v5 = *(CSCppCoreFileMetadata **)(a1 + 192);
  if (v5) {
    return CSCppCoreFileMetadata::thread_get_state(v5, target_act, flavor, old_state, old_stateCnt);
  }
  else {
    return thread_get_state(target_act, flavor, old_state, old_stateCnt);
  }
}

uint64_t mapped_memory_core_file_mach_vm_region_recurse_submap_short_64(uint64_t a1, unint64_t *a2, void *a3, _DWORD *a4, uint64_t a5)
{
  if (a1 && (uint64_t v5 = *(void *)(a1 + 192)) != 0) {
    return CSCppCoreFileMetadata::mach_vm_region_recurse_submap_short_64(v5, a2, a3, a4, a5);
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_mach_vm_region_recurse_submap_64(uint64_t a1, unint64_t *a2, void *a3, _DWORD *a4, uint64_t a5)
{
  if (a1 && (uint64_t v5 = *(void *)(a1 + 192)) != 0) {
    return CSCppCoreFileMetadata::mach_vm_region_recurse_submap_64(v5, a2, a3, a4, a5);
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_mach_vm_page_range_query(uint64_t a1, unint64_t a2, unint64_t a3, _DWORD *a4, unint64_t *a5, int a6)
{
  if (a1 && (uint64_t v6 = *(CSCppCoreFileMetadata **)(a1 + 192)) != 0) {
    return CSCppCoreFileMetadata::mach_vm_page_range_query(v6, a2, a3, a4, a5, a6);
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_mach_vm_purgable_control(uint64_t a1, unint64_t a2, int a3, int *a4)
{
  if (a1 && (uint64_t v4 = *(char ***)(a1 + 192)) != 0) {
    return CSCppCoreFileMetadata::mach_vm_purgable_control(v4, a2, a3, a4);
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_udata_ptrs(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 16))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_owned_vm_objects(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 24))();
  }
  else {
    return 4;
  }
}

unint64_t mapped_memory_core_file_region_filename(uint64_t a1, unint64_t a2, char *a3, unsigned int a4)
{
  if (a1 && (uint64_t v4 = *(char ***)(a1 + 192)) != 0) {
    return CSCppCoreFileMetadata::region_filename(v4, a2, a3, a4);
  }
  else {
    return 0;
  }
}

uint64_t mapped_memory_core_file_get_proc_name(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 32))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_proc_path(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 40))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_parent_proc_name(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 48))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_parent_proc_path(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 56))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_pid(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 64))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ppid(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 72))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_proc_starttime_sec(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 80))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_proc_starttime_usec(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 88))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_userstack(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 96))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_proc_flags(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 104))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_argslen(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 112))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_proc_argc(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 120))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_dirty_flags(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 128))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_dyld_all_image_infos_addr(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 144))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_dyld_shared_cache_range(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 152))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_internal(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 160))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_internal_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 168))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_iokit_mapped(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 176))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_alternate_accounting(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 184))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_alternate_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 192))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_purgable_nonvolatile(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 200))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_purgable_nonvolatile_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 208))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_page_table(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 216))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_phys_footprint(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 224))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_phys_footprint_lifetime_max(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 232))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_network_nonvolatile(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 240))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_network_nonvolatile_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 248))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_wired_mem(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 256))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_tagged_footprint(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 264))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_tagged_footprint_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 272))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_media_footprint(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 280))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_media_footprint_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 288))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_graphics_footprint(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 296))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_graphics_footprint_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 304))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_neural_footprint(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 312))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_ledger_neural_footprint_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 320))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_get_architecture(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 136))();
  }
  else {
    return 4;
  }
}

uint64_t mapped_memory_core_file_has_info_for_memory_analysis(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 328))();
  }
  else {
    return 0;
  }
}

void *mapped_memory_core_file_is_exclavecore(void *result)
{
  if (result)
  {
    uint64_t result = (void *)result[24];
    if (result)
    {
      if (result) {
        return (void *)(*((_DWORD *)result + 30) == 1);
      }
    }
  }
  return result;
}

void *mapped_memory_core_file_is_exclave(void *result)
{
  if (result)
  {
    uint64_t result = (void *)result[24];
    if (result) {
  }
    }
  return result;
}

uint64_t mapped_memory_core_file_get_exclave_vm_flags_for_address(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  if (!a1) {
    return 4;
  }
  int v3 = *(const void **)(a1 + 192);
  if (!v3) {
    return 4;
  }
  if (!v6) {
    return 4;
  }

  return CSCppCoreFileExclavesMetadata::get_exclave_vm_flags_for_address(v6, a2, a3);
}

uint64_t mapped_memory_core_file_get_addressing_mask(uint64_t a1, void *a2)
{
  if (!a1) {
    return 4;
  }
  uint64_t result = 4;
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 192);
    if (v4)
    {
      if (*(unsigned char *)(v4 + 80))
      {
        uint64_t result = 0;
        *a2 = *(void *)(v4 + 72);
      }
      else
      {
        return 5;
      }
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void parse_thread_load_command(const thread_command *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v32 = 0;
  uint64_t v33 = 0;
  char v31 = (uint64_t *)&v32;
  cmdmach_vm_size_t size = a1->cmdsize;
  if (cmdsize <= 8)
  {
    *(void *)a2 = &v32;
    *(void *)(a2 + 8) = 0;
    uint64_t v24 = a2 + 8;
    *(void *)(a2 + 16) = 0;
LABEL_34:
    *(void *)a2 = v24;
    char v25 = 1;
  }
  else
  {
    uint64_t v26 = a2;
    unint64_t v3 = 8;
    mach_vm_address_t v27 = a1;
    do
    {
      if (v3 + 8 > cmdsize
        || (uint8x8_t v4 = (thread_command *)((char *)a1 + v3),
            uint64_t v5 = *(unsigned int *)((char *)&a1->cmdsize + v3),
            v5 >> 30)
        || (unint64_t v6 = 4 * v5 + 8, v6 > cmdsize))
      {
        char v25 = 0;
        a2 = v26;
        *(unsigned char *)uint64_t v26 = 0;
        goto LABEL_36;
      }
      std::string __p = 0;
      mach_vm_size_t v29 = 0;
      char v30 = 0;
      std::vector<unsigned char>::reserve((unint64_t *)&__p, 4 * v5);
      if ((v5 & 0x3FFFFFFF) != 0)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (4 * v5);
        BOOL v9 = v29;
        do
        {
          unsigned int v10 = (char *)&v4[1] + v7;
          if (v9 >= v30)
          {
            long long v12 = (char *)__p;
            int64_t v13 = v9 - (unsigned char *)__p;
            uint64_t v14 = v9 - (unsigned char *)__p + 1;
            if (v14 < 0) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v15 = v30 - (unsigned char *)__p;
            if (2 * (v30 - (unsigned char *)__p) > (unint64_t)v14) {
              uint64_t v14 = 2 * v15;
            }
            if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v16 = v14;
            }
            if (v16) {
              unint64_t v17 = (char *)operator new(v16);
            }
            else {
              unint64_t v17 = 0;
            }
            int v18 = &v17[v13];
            v17[v13] = *v10;
            BOOL v11 = &v17[v13 + 1];
            if (v9 != v12)
            {
              vm_map_read_t v19 = &v9[~(unint64_t)v12];
              do
              {
                char v20 = *--v9;
                (v19--)[(void)v17] = v20;
              }
              while (v9 != v12);
              BOOL v9 = (char *)__p;
              int v18 = v17;
            }
            std::string __p = v18;
            mach_vm_size_t v29 = &v17[v13 + 1];
            char v30 = &v17[v16];
            if (v9) {
              operator delete(v9);
            }
          }
          else
          {
            *BOOL v9 = *v10;
            BOOL v11 = v9 + 1;
          }
          mach_vm_size_t v29 = v11;
          ++v7;
          BOOL v9 = v11;
        }
        while (v7 != v8);
      }
      BOOL v34 = v4;
      mach_vm_size_t v21 = std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v31, (int *)v4, (uint64_t)&std::piecewise_construct, &v34)+ 5;
      if (v21 != (uint64_t **)&__p) {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v21, (char *)__p, v29, v29 - (unsigned char *)__p);
      }
      if (__p)
      {
        mach_vm_size_t v29 = (char *)__p;
        operator delete(__p);
      }
      v3 += v6;
      a1 = v27;
      cmdmach_vm_size_t size = v27->cmdsize;
    }
    while (v3 < cmdsize);
    unsigned __int8 v22 = v32;
    uint64_t v23 = v33;
    a2 = v26;
    *(void *)uint64_t v26 = v31;
    *(void *)(v26 + 8) = v22;
    uint64_t v24 = v26 + 8;
    *(void *)(v26 + 16) = v23;
    if (!v23) {
      goto LABEL_34;
    }
    void v22[2] = v24;
    char v31 = (uint64_t *)&v32;
    char v25 = 1;
    BOOL v32 = 0;
    uint64_t v33 = 0;
  }
LABEL_36:
  *(unsigned char *)(a2 + 24) = v25;
  std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)&v31, v32);
}

void sub_1B9062E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, void *a17)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<CSCppCoreFileDarwinMetadata,int const&,std::vector<mapped_memory_core_file_dumped_region_info_t> &,CSCppArchitecture const,std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> &,std::optional<CSCppCoreFileRegionsTree> &,std::optional<unsigned long long> &,std::optional<CSCppCoreFileTaskCrashinfo> &>()
{
}

void sub_1B9063064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a65) {
    CSCppCoreFileTaskCrashinfo::~CSCppCoreFileTaskCrashinfo((CSCppCoreFileTaskCrashinfo *)&a10);
  }
  if (*(unsigned char *)(v66 - 144))
  {
    *(void *)(v66 - 88) = v66 - 168;
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v66 - 88));
  }
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy(v66 - 136, *(void **)(v66 - 128));
  unint64_t v68 = *(void **)(v66 - 112);
  if (v68)
  {
    *(void *)(v66 - 104) = v68;
    operator delete(v68);
  }
  MEMORY[0x1BA9D1CD0](v65, 0x10B3C40B028D1A8);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::vector<unsigned char>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = (void *)__p[5];
    if (v3)
    {
      __p[6] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  BOOL v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      unsigned int v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    BOOL v9 = (char *)v7[1];
    goto LABEL_17;
  }
  long long v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      uint64_t result = memmove(v9, __src, v16);
    }
    unint64_t v15 = &v9[v16];
    goto LABEL_20;
  }
  uint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v13);
    BOOL v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    uint64_t result = memmove(v9, v14, a3 - v14);
  }
  unint64_t v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

uint64_t *std::map<int,std::vector<unsigned char>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<int,std::vector<unsigned char>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::vector<unsigned char>>,std::__tree_node<std::__value_type<int,std::vector<unsigned char>>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1B9063364(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<int,std::vector<unsigned char>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::vector<unsigned char>>,std::__tree_node<std::__value_type<int,std::vector<unsigned char>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint8x8_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::vector<unsigned char>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint8x8_t v4 = v8;
        }
        while (!v9);
      }
      uint8x8_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::vector<unsigned char>> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__find_equal<int>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__construct_node<std::pair<int const,std::vector<unsigned char>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__find_equal<int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      size_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        size_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      unint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    long long v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      long long v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    vm_map_read_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      vm_map_read_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          mach_vm_size_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      mach_vm_size_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__construct_node<std::pair<int const,std::vector<unsigned char>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 5) = 0;
  uint64_t result = std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v6 + 5, *(const void **)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 16) - *(void *)(a2 + 8));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B90636AC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::vector<unsigned char>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x48uLL);
    v11[8] = **a4;
    v11[10] = 0;
    *((void *)v11 + 8) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 6) = v11 + 14;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)(a2 + 6), a2[7]);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

__n128 std::__optional_storage_base<CSCppCoreFileRegionsTree,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileRegionsTree,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)a1);
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v5 = (void **)a1;
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<CSCppCoreFileRegionInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<CSCppCoreFileRegionInfo>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 224)
  {
    int v7 = (void **)(i - 24);
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v7);
    if (*(unsigned char *)(i - 32))
    {
      uint64_t v5 = *(void **)(i - 56);
      if (v5)
      {
        *(void *)(i - 48) = v5;
        operator delete(v5);
      }
    }
    if (*(unsigned char *)(i - 64))
    {
      int v6 = *(void **)(i - 88);
      if (v6)
      {
        *(void *)(i - 80) = v6;
        operator delete(v6);
      }
    }
    if (*(unsigned char *)(i - 96) && *(char *)(i - 97) < 0) {
      operator delete(*(void **)(i - 120));
    }
  }
  *(void *)(a1 + 8) = a2;
}

void CSCppCoreFileRegionInfo::~CSCppCoreFileRegionInfo(CSCppCoreFileRegionInfo *this)
{
  uint8x8_t v4 = (void **)((char *)this + 200);
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((unsigned char *)this + 192))
  {
    int8x8_t v2 = (void *)*((void *)this + 21);
    if (v2)
    {
      *((void *)this + 22) = v2;
      operator delete(v2);
    }
  }
  if (*((unsigned char *)this + 160))
  {
    uint64_t v3 = (void *)*((void *)this + 17);
    if (v3)
    {
      *((void *)this + 18) = v3;
      operator delete(v3);
    }
  }
  if (*((unsigned char *)this + 128))
  {
    if (*((char *)this + 127) < 0) {
      operator delete(*((void **)this + 13));
    }
  }
}

void std::__optional_storage_base<CSCppCoreFileTaskCrashinfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileTaskCrashinfo,false>>(CSCppCoreFileTaskCrashinfo *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 440) == *(unsigned __int8 *)(a2 + 440))
  {
    if (*((unsigned char *)this + 440))
    {
      CSCppCoreFileTaskCrashinfo::operator=((uint64_t)this, a2);
    }
  }
  else if (*((unsigned char *)this + 440))
  {
    CSCppCoreFileTaskCrashinfo::~CSCppCoreFileTaskCrashinfo(this);
    *((unsigned char *)this + 440) = 0;
  }
  else
  {
    std::construct_at[abi:ne180100]<CSCppCoreFileTaskCrashinfo,CSCppCoreFileTaskCrashinfo,CSCppCoreFileTaskCrashinfo*>((uint64_t)this, (long long *)a2);
    *((unsigned char *)this + 440) = 1;
  }
}

uint64_t CSCppCoreFileTaskCrashinfo::operator=(uint64_t a1, uint64_t a2)
{
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1, (__n128 *)a2);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 32, (__n128 *)(a2 + 32));
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 64, (__n128 *)(a2 + 64));
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 96, (__n128 *)(a2 + 96));
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  long long v4 = *(_OWORD *)(a2 + 144);
  long long v5 = *(_OWORD *)(a2 + 160);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 188) = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 160) = v5;
  *(_OWORD *)(a1 + 176) = v6;
  *(_OWORD *)(a1 + 144) = v4;
  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 208, (__n128 *)(a2 + 208));
  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 240, (__n128 *)(a2 + 240));
  long long v7 = *(_OWORD *)(a2 + 272);
  long long v8 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v8;
  *(_OWORD *)(a1 + 272) = v7;
  long long v9 = *(_OWORD *)(a2 + 320);
  long long v10 = *(_OWORD *)(a2 + 336);
  long long v11 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v11;
  *(_OWORD *)(a1 + 320) = v9;
  *(_OWORD *)(a1 + 336) = v10;
  long long v12 = *(_OWORD *)(a2 + 384);
  long long v13 = *(_OWORD *)(a2 + 400);
  long long v14 = *(_OWORD *)(a2 + 416);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(_OWORD *)(a1 + 400) = v13;
  *(_OWORD *)(a1 + 416) = v14;
  *(_OWORD *)(a1 + 384) = v12;
  return a1;
}

__n128 std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      result.n128_u64[0] = std::vector<CSSymbolicatorAotImageInfo>::__move_assign(a1, a2).n128_u64[0];
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    long long v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

__n128 std::construct_at[abi:ne180100]<CSCppCoreFileTaskCrashinfo,CSCppCoreFileTaskCrashinfo,CSCppCoreFileTaskCrashinfo*>(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v2 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v3 = a2[2];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v3;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 4) = 0;
    *(unsigned char *)(a1 + 56) = 1;
  }
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    long long v4 = a2[4];
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v4;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(a1 + 88) = 1;
  }
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (*((unsigned char *)a2 + 120))
  {
    long long v5 = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(_OWORD *)(a1 + 96) = v5;
    *((void *)a2 + 13) = 0;
    *((void *)a2 + 14) = 0;
    *((void *)a2 + 12) = 0;
    *(unsigned char *)(a1 + 120) = 1;
  }
  long long v6 = a2[10];
  long long v7 = a2[11];
  long long v8 = *(long long *)((char *)a2 + 188);
  long long v10 = a2[8];
  long long v9 = a2[9];
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 188) = v8;
  *(_OWORD *)(a1 + 160) = v6;
  *(_OWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v9;
  *(unsigned char *)(a1 + 232) = 0;
  if (*((unsigned char *)a2 + 232))
  {
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
    *(_OWORD *)(a1 + 208) = a2[13];
    *(void *)(a1 + 224) = *((void *)a2 + 28);
    *((void *)a2 + 26) = 0;
    *((void *)a2 + 27) = 0;
    *((void *)a2 + 28) = 0;
    *(unsigned char *)(a1 + 232) = 1;
  }
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  if (*((unsigned char *)a2 + 264))
  {
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    *(_OWORD *)(a1 + 240) = a2[15];
    *(void *)(a1 + 256) = *((void *)a2 + 32);
    *((void *)a2 + 30) = 0;
    *((void *)a2 + 31) = 0;
    *((void *)a2 + 32) = 0;
    *(unsigned char *)(a1 + 264) = 1;
  }
  long long v11 = a2[17];
  long long v12 = a2[19];
  *(_OWORD *)(a1 + 288) = a2[18];
  *(_OWORD *)(a1 + 304) = v12;
  *(_OWORD *)(a1 + 272) = v11;
  long long v13 = a2[20];
  long long v14 = a2[21];
  long long v15 = a2[23];
  *(_OWORD *)(a1 + 352) = a2[22];
  *(_OWORD *)(a1 + 368) = v15;
  *(_OWORD *)(a1 + 320) = v13;
  *(_OWORD *)(a1 + 336) = v14;
  __n128 result = (__n128)a2[24];
  long long v17 = a2[25];
  long long v18 = a2[26];
  *(void *)(a1 + 432) = *((void *)a2 + 54);
  *(_OWORD *)(a1 + 400) = v17;
  *(_OWORD *)(a1 + 416) = v18;
  *(__n128 *)(a1 + 384) = result;
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unint64_t v46 = *(void *)(a2 - 40);
                unint64_t v45 = a2 - 40;
                if (v46 < *(void *)v10)
                {
                  uint64_t v144 = *(void *)(v10 + 32);
                  long long v125 = *(_OWORD *)v10;
                  long long v134 = *(_OWORD *)(v10 + 16);
                  long long v47 = *(_OWORD *)v45;
                  long long v48 = *(_OWORD *)(v45 + 16);
                  *(void *)(v10 + 32) = *(void *)(v45 + 32);
                  *(_OWORD *)unint64_t v10 = v47;
                  *(_OWORD *)(v10 + 16) = v48;
                  *(void *)(v45 + 32) = v144;
                  *(_OWORD *)unint64_t v45 = v125;
                  *(_OWORD *)(v45 + 16) = v134;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)v10, (unint64_t *)(v10 + 40), (unint64_t *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                mach_vm_size_t v49 = (long long *)(v10 + 40);
                uint64_t v50 = (long long *)(v10 + 80);
                unint64_t v51 = (long long *)(v10 + 120);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(v10, v10 + 40, v10 + 80, v10 + 120);
                unint64_t v53 = *(void *)(a2 - 40);
                unint64_t v52 = a2 - 40;
                if (v53 < *(void *)(v10 + 120))
                {
                  long long v54 = *v51;
                  long long v135 = *(_OWORD *)(v10 + 136);
                  uint64_t v55 = *(void *)(v10 + 152);
                  long long v57 = *(_OWORD *)v52;
                  long long v56 = *(_OWORD *)(v52 + 16);
                  *(void *)(v10 + 152) = *(void *)(v52 + 32);
                  *unint64_t v51 = v57;
                  *(_OWORD *)(v10 + 136) = v56;
                  *(void *)(v52 + 32) = v55;
                  *(_OWORD *)unint64_t v52 = v54;
                  *(_OWORD *)(v52 + 16) = v135;
                  if (*(void *)v51 < *(void *)v50)
                  {
                    uint64_t v58 = *(void *)(v10 + 112);
                    long long v60 = *v50;
                    long long v59 = *(_OWORD *)(v10 + 96);
                    long long v61 = *(_OWORD *)(v10 + 136);
                    long long *v50 = *v51;
                    *(_OWORD *)(v10 + 96) = v61;
                    *(void *)(v10 + 112) = *(void *)(v10 + 152);
                    *unint64_t v51 = v60;
                    *(_OWORD *)(v10 + 136) = v59;
                    *(void *)(v10 + 152) = v58;
                    if (*(void *)v50 < *(void *)v49)
                    {
                      uint64_t v62 = *(void *)(v10 + 72);
                      long long v64 = *v49;
                      long long v63 = *(_OWORD *)(v10 + 56);
                      long long v65 = *(_OWORD *)(v10 + 96);
                      long long *v49 = *v50;
                      *(_OWORD *)(v10 + 56) = v65;
                      *(void *)(v10 + 72) = *(void *)(v10 + 112);
                      long long *v50 = v64;
                      *(_OWORD *)(v10 + 96) = v63;
                      *(void *)(v10 + 112) = v62;
                      if (*(void *)(v10 + 40) < *(void *)v10)
                      {
                        uint64_t v145 = *(void *)(v10 + 32);
                        long long v126 = *(_OWORD *)v10;
                        long long v136 = *(_OWORD *)(v10 + 16);
                        long long v66 = *(_OWORD *)(v10 + 56);
                        *(_OWORD *)unint64_t v10 = *v49;
                        *(_OWORD *)(v10 + 16) = v66;
                        *(void *)(v10 + 32) = *(void *)(v10 + 72);
                        long long *v49 = v126;
                        *(_OWORD *)(v10 + 56) = v136;
                        *(void *)(v10 + 72) = v145;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v67 = v10 + 40;
            BOOL v69 = v10 == a2 || v67 == a2;
            if (a4)
            {
              if (!v69)
              {
                uint64_t v70 = 0;
                unint64_t v71 = v10;
                do
                {
                  unint64_t v72 = v67;
                  unint64_t v73 = *(void *)(v71 + 40);
                  if (v73 < *(void *)v71)
                  {
                    long long v127 = *(_OWORD *)(v71 + 48);
                    long long v137 = *(_OWORD *)(v71 + 64);
                    uint64_t v74 = v70;
                    while (1)
                    {
                      uint64_t v75 = v10 + v74;
                      long long v76 = *(_OWORD *)(v10 + v74 + 16);
                      *(_OWORD *)(v75 + 40) = *(_OWORD *)(v10 + v74);
                      *(_OWORD *)(v75 + 56) = v76;
                      *(void *)(v75 + 72) = *(void *)(v10 + v74 + 32);
                      if (!v74) {
                        break;
                      }
                      v74 -= 40;
                      if (v73 >= *(void *)(v75 - 40))
                      {
                        uint64_t v77 = v10 + v74 + 40;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v77 = v10;
LABEL_80:
                    *(void *)uint64_t v77 = v73;
                    *(_OWORD *)(v77 + 24) = v137;
                    *(_OWORD *)(v77 + 8) = v127;
                  }
                  unint64_t v67 = v72 + 40;
                  v70 += 40;
                  unint64_t v71 = v72;
                }
                while (v72 + 40 != a2);
              }
            }
            else if (!v69)
            {
              do
              {
                unint64_t v112 = v67;
                unint64_t v113 = *(void *)(a1 + 40);
                if (v113 < *(void *)a1)
                {
                  long long v130 = *(_OWORD *)(a1 + 48);
                  long long v140 = *(_OWORD *)(a1 + 64);
                  do
                  {
                    long long v114 = *(_OWORD *)(v67 - 24);
                    *(_OWORD *)unint64_t v67 = *(_OWORD *)(v67 - 40);
                    *(_OWORD *)(v67 + 16) = v114;
                    *(void *)(v67 + 32) = *(void *)(v67 - 8);
                    unint64_t v115 = *(void *)(v67 - 80);
                    v67 -= 40;
                  }
                  while (v113 < v115);
                  *(void *)unint64_t v67 = v113;
                  *(_OWORD *)(v67 + 24) = v140;
                  *(_OWORD *)(v67 + 8) = v130;
                }
                unint64_t v67 = v112 + 40;
                a1 = v112;
              }
              while (v112 + 40 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v78 = (v12 - 2) >> 1;
              int64_t v79 = v78;
              do
              {
                int64_t v80 = v79;
                if (v78 >= v79)
                {
                  uint64_t v81 = (2 * v79) | 1;
                  unint64_t v82 = v10 + 40 * v81;
                  if (2 * v80 + 2 < (uint64_t)v12)
                  {
                    unint64_t v84 = *(void *)(v82 + 40);
                    BOOL v83 = *(void *)v82 >= v84;
                    if (*(void *)v82 > v84) {
                      unint64_t v84 = *(void *)v82;
                    }
                    if (!v83)
                    {
                      v82 += 40;
                      uint64_t v81 = 2 * v80 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v84 = *(void *)v82;
                  }
                  unint64_t v85 = v10 + 40 * v80;
                  unint64_t v86 = *(void *)v85;
                  if (v84 >= *(void *)v85)
                  {
                    long long v128 = *(_OWORD *)(v85 + 8);
                    long long v138 = *(_OWORD *)(v85 + 24);
                    do
                    {
                      unint64_t v87 = v85;
                      unint64_t v85 = v82;
                      long long v88 = *(_OWORD *)v82;
                      long long v89 = *(_OWORD *)(v82 + 16);
                      *(void *)(v87 + 32) = *(void *)(v82 + 32);
                      *(_OWORD *)unint64_t v87 = v88;
                      *(_OWORD *)(v87 + 16) = v89;
                      if (v78 < v81) {
                        break;
                      }
                      uint64_t v90 = (2 * v81) | 1;
                      unint64_t v82 = v10 + 40 * v90;
                      uint64_t v81 = 2 * v81 + 2;
                      if (v81 < (uint64_t)v12)
                      {
                        unint64_t v93 = *(void *)v82;
                        unint64_t v91 = *(void *)(v82 + 40);
                        BOOL v92 = *(void *)v82 >= v91;
                        if (*(void *)v82 <= v91) {
                          unint64_t v93 = *(void *)(v82 + 40);
                        }
                        if (*(void *)v82 < v91) {
                          v82 += 40;
                        }
                        if (v92) {
                          uint64_t v81 = v90;
                        }
                      }
                      else
                      {
                        unint64_t v93 = *(void *)v82;
                        uint64_t v81 = v90;
                      }
                    }
                    while (v93 >= v86);
                    *(void *)unint64_t v85 = v86;
                    *(_OWORD *)(v85 + 24) = v138;
                    *(_OWORD *)(v85 + 8) = v128;
                  }
                }
                int64_t v79 = v80 - 1;
              }
              while (v80);
              int64_t v94 = v11 / 0x28uLL;
              do
              {
                uint64_t v95 = 0;
                uint64_t v146 = *(void *)(v10 + 32);
                long long v129 = *(_OWORD *)v10;
                long long v139 = *(_OWORD *)(v10 + 16);
                unint64_t v96 = v10;
                do
                {
                  uint64_t v97 = v96 + 40 * v95 + 40;
                  uint64_t v98 = (2 * v95) | 1;
                  uint64_t v99 = 2 * v95 + 2;
                  if (v99 < v94 && *(void *)v97 < *(void *)(v97 + 40))
                  {
                    v97 += 40;
                    uint64_t v98 = v99;
                  }
                  long long v100 = *(_OWORD *)v97;
                  long long v101 = *(_OWORD *)(v97 + 16);
                  *(void *)(v96 + 32) = *(void *)(v97 + 32);
                  *(_OWORD *)unint64_t v96 = v100;
                  *(_OWORD *)(v96 + 16) = v101;
                  unint64_t v96 = v97;
                  uint64_t v95 = v98;
                }
                while (v98 <= (uint64_t)((unint64_t)(v94 - 2) >> 1));
                a2 -= 40;
                if (v97 == a2)
                {
                  *(void *)(v97 + 32) = v146;
                  *(_OWORD *)uint64_t v97 = v129;
                  *(_OWORD *)(v97 + 16) = v139;
                }
                else
                {
                  long long v102 = *(_OWORD *)a2;
                  long long v103 = *(_OWORD *)(a2 + 16);
                  *(void *)(v97 + 32) = *(void *)(a2 + 32);
                  *(_OWORD *)uint64_t v97 = v102;
                  *(_OWORD *)(v97 + 16) = v103;
                  *(void *)(a2 + 32) = v146;
                  *(_OWORD *)a2 = v129;
                  *(_OWORD *)(a2 + 16) = v139;
                  uint64_t v104 = v97 - v10 + 40;
                  if (v104 >= 41)
                  {
                    unint64_t v105 = (v104 / 0x28uLL - 2) >> 1;
                    uint64_t v106 = v10 + 40 * v105;
                    unint64_t v107 = *(void *)v97;
                    if (*(void *)v106 < *(void *)v97)
                    {
                      long long v118 = *(_OWORD *)(v97 + 8);
                      long long v121 = *(_OWORD *)(v97 + 24);
                      do
                      {
                        uint64_t v108 = v97;
                        uint64_t v97 = v106;
                        long long v109 = *(_OWORD *)v106;
                        long long v110 = *(_OWORD *)(v106 + 16);
                        *(void *)(v108 + 32) = *(void *)(v106 + 32);
                        *(_OWORD *)uint64_t v108 = v109;
                        *(_OWORD *)(v108 + 16) = v110;
                        if (!v105) {
                          break;
                        }
                        unint64_t v105 = (v105 - 1) >> 1;
                        uint64_t v106 = v10 + 40 * v105;
                      }
                      while (*(void *)v106 < v107);
                      *(void *)uint64_t v97 = v107;
                      *(_OWORD *)(v97 + 24) = v121;
                      *(_OWORD *)(v97 + 8) = v118;
                    }
                  }
                }
              }
              while (v94-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)a1, (unint64_t *)(a1 + 40 * (v12 >> 1)), (unint64_t *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (unint64_t *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)(a1 + 40), v16, (unint64_t *)(a2 - 80));
            long long v17 = (unint64_t *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)(a1 + 80), v17, (unint64_t *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)v16, (unint64_t *)v14, v17);
            uint64_t v141 = *(void *)(a1 + 32);
            long long v122 = *(_OWORD *)a1;
            long long v131 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(void *)(a1 + 32) = *(void *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(void *)(v14 + 32) = v141;
            *(_OWORD *)unint64_t v14 = v122;
            *(_OWORD *)(v14 + 16) = v131;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)(a1 + 40 * (v12 >> 1)), (unint64_t *)a1, (unint64_t *)(a2 - 40));
          }
          --a3;
          unint64_t v20 = *(void *)a1;
          if ((a4 & 1) != 0 || *(void *)(a1 - 40) < v20) {
            break;
          }
          long long v117 = *(_OWORD *)(a1 + 8);
          long long v120 = *(_OWORD *)(a1 + 24);
          if (v20 >= *(void *)(a2 - 40))
          {
            unint64_t v36 = a1 + 40;
            do
            {
              unint64_t v10 = v36;
              if (v36 >= a2) {
                break;
              }
              v36 += 40;
            }
            while (v20 >= *(void *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              unint64_t v35 = *(void *)(v10 + 40);
              v10 += 40;
            }
            while (v20 >= v35);
          }
          unint64_t v37 = a2;
          if (v10 < a2)
          {
            unint64_t v37 = a2;
            do
            {
              unint64_t v38 = *(void *)(v37 - 40);
              v37 -= 40;
            }
            while (v20 < v38);
          }
          while (v10 < v37)
          {
            uint64_t v143 = *(void *)(v10 + 32);
            long long v124 = *(_OWORD *)v10;
            long long v133 = *(_OWORD *)(v10 + 16);
            long long v39 = *(_OWORD *)v37;
            long long v40 = *(_OWORD *)(v37 + 16);
            *(void *)(v10 + 32) = *(void *)(v37 + 32);
            *(_OWORD *)unint64_t v10 = v39;
            *(_OWORD *)(v10 + 16) = v40;
            *(void *)(v37 + 32) = v143;
            *(_OWORD *)unint64_t v37 = v124;
            *(_OWORD *)(v37 + 16) = v133;
            do
            {
              unint64_t v41 = *(void *)(v10 + 40);
              v10 += 40;
            }
            while (v20 >= v41);
            do
            {
              unint64_t v42 = *(void *)(v37 - 40);
              v37 -= 40;
            }
            while (v20 < v42);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v43 = *(_OWORD *)(v10 - 40);
            long long v44 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 32) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v43;
            *(_OWORD *)(a1 + 16) = v44;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v20;
          *(_OWORD *)(v10 - 32) = v117;
          *(_OWORD *)(v10 - 16) = v120;
        }
        uint64_t v21 = 0;
        long long v116 = *(_OWORD *)(a1 + 8);
        long long v119 = *(_OWORD *)(a1 + 24);
        do
        {
          unint64_t v22 = *(void *)(a1 + v21 + 40);
          v21 += 40;
        }
        while (v22 < v20);
        unint64_t v23 = a1 + v21;
        unint64_t v24 = a2;
        if (v21 == 40)
        {
          unint64_t v24 = a2;
          do
          {
            if (v23 >= v24) {
              break;
            }
            unint64_t v26 = *(void *)(v24 - 40);
            v24 -= 40;
          }
          while (v26 >= v20);
        }
        else
        {
          do
          {
            unint64_t v25 = *(void *)(v24 - 40);
            v24 -= 40;
          }
          while (v25 >= v20);
        }
        unint64_t v10 = a1 + v21;
        if (v23 < v24)
        {
          unint64_t v27 = v24;
          do
          {
            uint64_t v142 = *(void *)(v10 + 32);
            long long v123 = *(_OWORD *)v10;
            long long v132 = *(_OWORD *)(v10 + 16);
            long long v28 = *(_OWORD *)v27;
            long long v29 = *(_OWORD *)(v27 + 16);
            *(void *)(v10 + 32) = *(void *)(v27 + 32);
            *(_OWORD *)unint64_t v10 = v28;
            *(_OWORD *)(v10 + 16) = v29;
            *(void *)(v27 + 32) = v142;
            *(_OWORD *)unint64_t v27 = v123;
            *(_OWORD *)(v27 + 16) = v132;
            do
            {
              unint64_t v30 = *(void *)(v10 + 40);
              v10 += 40;
            }
            while (v30 < v20);
            do
            {
              unint64_t v31 = *(void *)(v27 - 40);
              v27 -= 40;
            }
            while (v31 >= v20);
          }
          while (v10 < v27);
        }
        if (v10 - 40 != a1)
        {
          long long v32 = *(_OWORD *)(v10 - 40);
          long long v33 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 32) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v32;
          *(_OWORD *)(a1 + 16) = v33;
        }
        *(void *)(v10 - 40) = v20;
        *(_OWORD *)(v10 - 32) = v116;
        *(_OWORD *)(v10 - 16) = v119;
        if (v23 >= v24) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(v10, a2))
      {
        break;
      }
      if (!v34) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 40;
    if (!v34) {
      continue;
    }
    break;
  }
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(long long *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 >= *(void *)result)
  {
    if (v4 < v3)
    {
      long long v10 = *(_OWORD *)a2;
      long long v11 = *((_OWORD *)a2 + 1);
      uint64_t v12 = a2[4];
      uint64_t v13 = a3[4];
      long long v14 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v14;
      a2[4] = v13;
      a3[4] = v12;
      *(_OWORD *)a3 = v10;
      *((_OWORD *)a3 + 1) = v11;
      if (*a2 < *(void *)result)
      {
        long long v15 = *result;
        long long v16 = result[1];
        uint64_t v17 = *((void *)result + 4);
        uint64_t v18 = a2[4];
        long long v19 = *((_OWORD *)a2 + 1);
        *__n128 result = *(_OWORD *)a2;
        result[1] = v19;
        *((void *)result + 4) = v18;
        a2[4] = v17;
        *(_OWORD *)a2 = v15;
        *((_OWORD *)a2 + 1) = v16;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v20 = *result;
      long long v21 = result[1];
      uint64_t v22 = *((void *)result + 4);
      uint64_t v23 = a2[4];
      long long v24 = *((_OWORD *)a2 + 1);
      *__n128 result = *(_OWORD *)a2;
      result[1] = v24;
      *((void *)result + 4) = v23;
      a2[4] = v22;
      *(_OWORD *)a2 = v20;
      *((_OWORD *)a2 + 1) = v21;
      if (*a3 >= *a2) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      long long v6 = *((_OWORD *)a2 + 1);
      uint64_t v7 = a2[4];
      uint64_t v25 = a3[4];
      long long v26 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v26;
      a2[4] = v25;
    }
    else
    {
      long long v5 = *result;
      long long v6 = result[1];
      uint64_t v7 = *((void *)result + 4);
      uint64_t v8 = a3[4];
      long long v9 = *((_OWORD *)a3 + 1);
      *__n128 result = *(_OWORD *)a3;
      result[1] = v9;
      *((void *)result + 4) = v8;
    }
    a3[4] = v7;
    *(_OWORD *)a3 = v5;
    *((_OWORD *)a3 + 1) = v6;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v6 = (long long *)(a2 - 40);
      if (*(void *)(a2 - 40) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(a2 - 8);
        long long v11 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v11;
        *(void *)(a1 + 32) = v10;
        *(void *)(a2 - 8) = v9;
        *long long v6 = v7;
        *(_OWORD *)(a2 - 24) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)a1, (unint64_t *)(a1 + 40), (unint64_t *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      long long v21 = (void *)(a1 + 40);
      uint64_t v22 = (void *)(a1 + 80);
      uint64_t v23 = (long long *)(a1 + 120);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(a1, a1 + 40, a1 + 80, a1 + 120);
      unint64_t v25 = *(void *)(a2 - 40);
      uint64_t v24 = a2 - 40;
      if (v25 >= *(void *)(a1 + 120)) {
        return 1;
      }
      long long v26 = *v23;
      long long v27 = *(_OWORD *)(a1 + 136);
      uint64_t v28 = *(void *)(a1 + 152);
      uint64_t v29 = *(void *)(v24 + 32);
      long long v30 = *(_OWORD *)(v24 + 16);
      *uint64_t v23 = *(_OWORD *)v24;
      *(_OWORD *)(a1 + 136) = v30;
      *(void *)(a1 + 152) = v29;
      *(void *)(v24 + 32) = v28;
      *(_OWORD *)uint64_t v24 = v26;
      *(_OWORD *)(v24 + 16) = v27;
      if (*(void *)v23 >= *v22) {
        return 1;
      }
      uint64_t v31 = *(void *)(a1 + 112);
      long long v33 = *(_OWORD *)v22;
      long long v32 = *(_OWORD *)(a1 + 96);
      long long v34 = *(_OWORD *)(a1 + 136);
      *(_OWORD *)uint64_t v22 = *v23;
      *(_OWORD *)(a1 + 96) = v34;
      *(void *)(a1 + 112) = *(void *)(a1 + 152);
      *uint64_t v23 = v33;
      *(_OWORD *)(a1 + 136) = v32;
      *(void *)(a1 + 152) = v31;
      if (*v22 >= *v21) {
        return 1;
      }
      uint64_t v35 = *(void *)(a1 + 72);
      long long v37 = *(_OWORD *)v21;
      long long v36 = *(_OWORD *)(a1 + 56);
      long long v38 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)long long v21 = *(_OWORD *)v22;
      *(_OWORD *)(a1 + 56) = v38;
      *(void *)(a1 + 72) = *(void *)(a1 + 112);
      *(_OWORD *)uint64_t v22 = v37;
      *(_OWORD *)(a1 + 96) = v36;
      *(void *)(a1 + 112) = v35;
      if (*(void *)(a1 + 40) >= *(void *)a1) {
        return 1;
      }
      uint64_t v39 = *(void *)(a1 + 32);
      long long v41 = *(_OWORD *)a1;
      long long v40 = *(_OWORD *)(a1 + 16);
      long long v42 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *(_OWORD *)v21;
      *(_OWORD *)(a1 + 16) = v42;
      *(void *)(a1 + 32) = *(void *)(a1 + 72);
      *(_OWORD *)long long v21 = v41;
      *(_OWORD *)(a1 + 56) = v40;
      BOOL result = 1;
      *(void *)(a1 + 72) = v39;
      return result;
    default:
      uint64_t v12 = (void *)(a1 + 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)a1, (unint64_t *)(a1 + 40), (unint64_t *)(a1 + 80));
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unint64_t v16 = *(void *)v13;
    if (*(void *)v13 < *v12)
    {
      long long v43 = *(_OWORD *)(v13 + 8);
      long long v44 = *(_OWORD *)(v13 + 24);
      uint64_t v17 = v14;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(void *)(v18 + 152) = *(void *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v16 >= *(void *)(v18 + 40))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      *(void *)uint64_t v20 = v16;
      *(_OWORD *)(v20 + 8) = v43;
      *(_OWORD *)(v20 + 24) = v44;
      if (++v15 == 8) {
        return v13 + 40 == a2;
      }
    }
    uint64_t v12 = (void *)v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)a1, (unint64_t *)a2, (unint64_t *)a3);
  if (*(void *)a4 < *(void *)a3)
  {
    __n128 result = *(__n128 *)a3;
    long long v9 = *(_OWORD *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 32);
    uint64_t v11 = *(void *)(a4 + 32);
    long long v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(void *)(a3 + 32) = v11;
    *(void *)(a4 + 32) = v10;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v9;
    if (*(void *)a3 < *(void *)a2)
    {
      __n128 result = *(__n128 *)a2;
      long long v13 = *(_OWORD *)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 32);
      uint64_t v15 = *(void *)(a3 + 32);
      long long v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(void *)(a2 + 32) = v15;
      *(void *)(a3 + 32) = v14;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v13;
      if (*(void *)a2 < *(void *)a1)
      {
        __n128 result = *(__n128 *)a1;
        long long v17 = *(_OWORD *)(a1 + 16);
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v19 = *(void *)(a2 + 32);
        long long v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(void *)(a1 + 32) = v19;
        *(void *)(a2 + 32) = v18;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

void *std::vector<mapped_memory_core_file_dumped_region_info_t>::__init_with_size[abi:ne180100]<mapped_memory_core_file_dumped_region_info_t*,mapped_memory_core_file_dumped_region_info_t*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    __n128 result = std::vector<mapped_memory_core_file_dumped_region_info_t>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B9064B40(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mapped_memory_core_file_dumped_region_info_t>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t *std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__tree_node<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,void *> *,long>>>(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1B9064BF0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__tree_node<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,void *> *,long>>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> const&>(v5, v6, v4 + 8, v4 + 8);
      uint64_t v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          size_t v8 = v7;
          uint64_t v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__find_equal<unsigned int>(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__construct_node<std::pair<unsigned int const,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__find_equal<unsigned int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  long long v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    size_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          long long v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        long long v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    long long v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      long long v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          long long v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        long long v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      long long v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__construct_node<std::pair<unsigned int const,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> const&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  *((_DWORD *)v6 + 10) = a2[2];
  __n128 result = std::map<int,std::vector<unsigned char>>::map[abi:ne180100]((uint64_t *)v6 + 6, (uint64_t)(a2 + 4));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B9064F38(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<CSCppCoreFileRegionsTree,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<CSCppCoreFileRegionsTree,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<CSCppCoreFileRegionsTree,false> const&>((void *)a1, a2);
  return a1;
}

void sub_1B9064F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<CSCppCoreFileRegionsTree,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<CSCppCoreFileRegionsTree,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    long long v2 = result;
    *__n128 result = 0;
    result[1] = 0;
    result[2] = 0;
    __n128 result = std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(result, *(void *)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

CSCppCoreFileTaskCrashinfo *std::__optional_copy_base<CSCppCoreFileTaskCrashinfo,false>::__optional_copy_base[abi:ne180100](CSCppCoreFileTaskCrashinfo *this, const CSCppCoreFileTaskCrashinfo *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 440) = 0;
  if (*((unsigned char *)a2 + 440))
  {
    CSCppCoreFileTaskCrashinfo::CSCppCoreFileTaskCrashinfo(this, a2);
    *((unsigned char *)this + 440) = 1;
  }
  return this;
}

void sub_1B9065050(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 440)) {
    CSCppCoreFileTaskCrashinfo::~CSCppCoreFileTaskCrashinfo(v1);
  }
  _Unwind_Resume(exception_object);
}

void CSCppCoreFileTaskCrashinfo::CSCppCoreFileTaskCrashinfo(CSCppCoreFileTaskCrashinfo *this, const CSCppCoreFileTaskCrashinfo *a2)
{
  uint64_t v4 = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this, (long long *)a2);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 32), (long long *)a2 + 2);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 64), (long long *)a2 + 4);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 4, (long long *)a2 + 6);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  long long v5 = *((_OWORD *)a2 + 9);
  long long v6 = *((_OWORD *)a2 + 10);
  long long v7 = *((_OWORD *)a2 + 11);
  *(_OWORD *)((char *)this + 188) = *(_OWORD *)((char *)a2 + 188);
  *((_OWORD *)this + 10) = v6;
  *((_OWORD *)this + 11) = v7;
  *((_OWORD *)this + 9) = v5;
  std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 208, (uint64_t)a2 + 208);
  std::__optional_copy_base<std::vector<CS_vm_object_query_data_t>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 240, (uint64_t)a2 + 240);
  long long v8 = *((_OWORD *)a2 + 17);
  long long v9 = *((_OWORD *)a2 + 19);
  *((_OWORD *)this + 18) = *((_OWORD *)a2 + 18);
  *((_OWORD *)this + 19) = v9;
  *((_OWORD *)this + 17) = v8;
  long long v10 = *((_OWORD *)a2 + 20);
  long long v11 = *((_OWORD *)a2 + 21);
  long long v12 = *((_OWORD *)a2 + 23);
  *((_OWORD *)this + 22) = *((_OWORD *)a2 + 22);
  *((_OWORD *)this + 23) = v12;
  *((_OWORD *)this + 20) = v10;
  *((_OWORD *)this + 21) = v11;
  long long v13 = *((_OWORD *)a2 + 24);
  long long v14 = *((_OWORD *)a2 + 25);
  long long v15 = *((_OWORD *)a2 + 26);
  *((void *)this + 54) = *((void *)a2 + 54);
  *((_OWORD *)this + 25) = v14;
  *((_OWORD *)this + 26) = v15;
  *((_OWORD *)this + 24) = v13;
}

void sub_1B906514C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 232))
  {
    long long v7 = *v5;
    if (*v5)
    {
      *(void *)(v1 + 216) = v7;
      operator delete(v7);
    }
  }
  if (*(unsigned char *)(v1 + 120) && *(char *)(v1 + 119) < 0) {
    operator delete(*v4);
  }
  if (*(unsigned char *)(v1 + 88) && *(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  if (*(unsigned char *)(v1 + 56) && *(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void *CSCppCoreFileDarwinMetadata::CSCppCoreFileDarwinMetadata(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const CSCppCoreFileTaskCrashinfo *a9)
{
  std::string __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<mapped_memory_core_file_dumped_region_info_t>::__init_with_size[abi:ne180100]<mapped_memory_core_file_dumped_region_info_t*,mapped_memory_core_file_dumped_region_info_t*>(&__p, *(const void **)a3, *(void *)(a3 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>::map[abi:ne180100](v18, a5);
  std::__optional_copy_base<CSCppCoreFileRegionsTree,false>::__optional_copy_base[abi:ne180100]((uint64_t)v17, a6);
  CSCppCoreFileMetadata::CSCppCoreFileMetadata((uint64_t)a1, a2, (uint64_t)&__p, a4, (uint64_t)v18, a7, a8, (uint64_t)v17);
  if (v17[24])
  {
    unsigned int v22 = (void **)v17;
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v22);
  }
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)v18, (void *)v18[1]);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
  *a1 = &unk_1F12C9448;
  std::__optional_copy_base<CSCppCoreFileTaskCrashinfo,false>::__optional_copy_base[abi:ne180100]((CSCppCoreFileTaskCrashinfo *)(a1 + 15), a9);
  return a1;
}

void sub_1B9065310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  CSCppCoreFileMetadata::~CSCppCoreFileMetadata(v21);
  _Unwind_Resume(a1);
}

uint64_t CSCppCoreFileMetadata::CSCppCoreFileMetadata(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)a1 = &unk_1F12C92D8;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  std::vector<mapped_memory_core_file_dumped_region_info_t>::__init_with_size[abi:ne180100]<mapped_memory_core_file_dumped_region_info_t*,mapped_memory_core_file_dumped_region_info_t*>((void *)(a1 + 16), *(const void **)a3, *(void *)(a3 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  *(void *)(a1 + 40) = a4;
  std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>::map[abi:ne180100]((uint64_t *)(a1 + 48), a5);
  *(void *)(a1 + 72) = a6;
  *(void *)(a1 + 80) = a7;
  std::__optional_copy_base<CSCppCoreFileRegionsTree,false>::__optional_copy_base[abi:ne180100](a1 + 88, a8);
  return a1;
}

void sub_1B9065430(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy(v3, *(void **)(v1 + 56));
  long long v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer32>(char const*,mapped_memory_t *)::{lambda(void)#1},std::allocator<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer32>(char const*,mapped_memory_t *)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer32>(char const*,mapped_memory_t *)::{lambda(void)#1},std::allocator<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer32>(char const*,mapped_memory_t *)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F12C9F48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer32>(char const*,mapped_memory_t *)::{lambda(void)#1},std::allocator<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer32>(char const*,mapped_memory_t *)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F12C9F48;
  a2[1] = v2;
  return result;
}

atomic_uint *std::__function::__func<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer32>(char const*,mapped_memory_t *)::{lambda(void)#1},std::allocator<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer32>(char const*,mapped_memory_t *)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return CSRelease(**(atomic_uint ***)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
}

uint64_t std::__function::__func<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer32>(char const*,mapped_memory_t *)::{lambda(void)#1},std::allocator<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer32>(char const*,mapped_memory_t *)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer32>(char const*,mapped_memory_t *)::{lambda(void)#1},std::allocator<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer32>(char const*,mapped_memory_t *)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 5);
    if ((unint64_t)(v9 + 1) > 0x124924924924924) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 5);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x92492492492492) {
      unint64_t v12 = 0x124924924924924;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = v4;
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    long long v14 = v13;
    long long v15 = &v13[224 * v9];
    long long v17 = &v13[224 * v12];
    std::construct_at[abi:ne180100]<CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo*>((uint64_t)v15, a2);
    uint64_t v16 = v15 + 224;
    std::vector<CSCppCoreFileRegionInfo>::__swap_out_circular_buffer(a1, &v14);
    uint64_t v8 = a1[1];
    std::__split_buffer<CSCppCoreFileRegionInfo>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    std::construct_at[abi:ne180100]<CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo*>(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 224;
    a1[1] = v7 + 224;
  }
  a1[1] = v8;
}

void sub_1B906566C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CSCppCoreFileRegionInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void set_up_mapped_memory_cache_for_exclave_core_file<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long long,vas_segmentinfo_table const&,CSExclaveCoreFileType,mapped_memory_t *)::{lambda(unsigned long long)#1}::operator()(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v10 = a2 - v2;
  if (a2 > v2)
  {
    unint64_t v4 = a2 - v2;
    do
    {
      unint64_t v5 = *(uint64_t **)(a1 + 48);
      if (v4 >= 0x6400000) {
        unint64_t v6 = 104857600;
      }
      else {
        unint64_t v6 = v4;
      }
      *(void *)&long long v17 = v2;
      *((void *)&v17 + 1) = v6;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v21 = 0;
      int v7 = *(unsigned __int8 *)(a1 + 25);
      int v18 = 1;
      int v22 = v7;
      uint64_t v23 = 0;
      memset(v24, 0, sizeof(v24));
      __int16 v25 = 3;
      uint64_t v26 = 0;
      __int16 v27 = 0;
      int v28 = 0;
      uint64_t v29 = 0;
      int v8 = *(_DWORD *)(a1 + 28);
      int v30 = 3;
      int v31 = v8;
      LOBYTE(v32) = 0;
      char v34 = 0;
      uint64_t v9 = v6 >> 14;
      __int16 v14 = 0;
      std::vector<unsigned short>::vector(v15, v6 >> 14, &v14);
      long long v35 = *(_OWORD *)v15;
      uint64_t v36 = v16;
      v15[1] = 0;
      uint64_t v16 = 0;
      v15[0] = 0;
      char v37 = 1;
      __int16 v11 = 0;
      std::vector<unsigned short>::vector(__p, v9, &v11);
      long long v38 = *(_OWORD *)__p;
      uint64_t v39 = v13;
      __p[1] = 0;
      uint64_t v13 = 0;
      __p[0] = 0;
      char v40 = 1;
      memset(v41, 0, sizeof(v41));
      std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100](v5, &v17);
      long long v42 = (void **)v41;
      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v42);
      if (v40 && (void)v38)
      {
        *((void *)&v38 + 1) = v38;
        operator delete((void *)v38);
      }
      if (v37 && (void)v35)
      {
        *((void *)&v35 + 1) = v35;
        operator delete((void *)v35);
      }
      if (v34 && v33 < 0) {
        operator delete(v32);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v15[0])
      {
        v15[1] = v15[0];
        operator delete(v15[0]);
      }
      v2 += 104857600;
      v4 -= 104857600;
    }
    while (v2 < v10 + *(void *)(a1 + 40));
  }
}

void sub_1B906585C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a41)
  {
    long long v43 = *(void **)(v41 + 136);
    if (v43)
    {
      *(void *)(v41 + 144) = v43;
      operator delete(v43);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  if (a37)
  {
    if (a36 < 0) {
      operator delete(*(void **)(v41 + 104));
    }
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<CSCppCoreFileExclavesMetadata,int const&,std::vector<mapped_memory_core_file_dumped_region_info_t> const&,_CSArchitecture const&,std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> const&,std::optional<unsigned long long> const&,CSCppCoreFileRegionsTree,CSExclaveCoreFileType const&,long long &>()
{
}

void sub_1B9065A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, void *a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (a14)
  {
    *(void *)(v21 - 88) = &a11;
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  }
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)&a16, a17);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  MEMORY[0x1BA9D1CD0](v20, 0x10A3C40ADEFD0ABLL);
  _Unwind_Resume(a1);
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unint64_t v38 = a2[-2].n128_u64[0];
                char v37 = (long long *)&a2[-2];
                if (v38 < *(void *)v10)
                {
                  long long v108 = *(_OWORD *)v10;
                  long long v117 = *(_OWORD *)(v10 + 16);
                  long long v39 = v37[1];
                  *(_OWORD *)unint64_t v10 = *v37;
                  *(_OWORD *)(v10 + 16) = v39;
                  *char v37 = v108;
                  v37[1] = v117;
                }
                break;
              case 3uLL:
                _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)v10, (unint64_t *)(v10 + 32), a2[-2].n128_u64);
                break;
              case 4uLL:
                _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEvT1_SP_SP_SP_SI_(v10, (__n128 *)(v10 + 32), (__n128 *)(v10 + 64), a2 - 2);
                break;
              case 5uLL:
                char v40 = (long long *)(v10 + 32);
                uint64_t v41 = (long long *)(v10 + 64);
                long long v42 = (long long *)(v10 + 96);
                _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEvT1_SP_SP_SP_SI_(v10, (__n128 *)(v10 + 32), (__n128 *)(v10 + 64), (__n128 *)(v10 + 96));
                unint64_t v44 = a2[-2].n128_u64[0];
                long long v43 = a2 - 2;
                if (v44 < *(void *)(v10 + 96))
                {
                  __n128 v45 = (__n128)*v42;
                  __n128 v118 = *(__n128 *)(v10 + 112);
                  __n128 v46 = v43[1];
                  *long long v42 = (__int128)*v43;
                  *(__n128 *)(v10 + 112) = v46;
                  *long long v43 = v45;
                  v43[1] = v118;
                  if (*(void *)v42 < *(void *)v41)
                  {
                    long long v48 = *v41;
                    long long v47 = *(_OWORD *)(v10 + 80);
                    long long v49 = *(_OWORD *)(v10 + 112);
                    *uint64_t v41 = *v42;
                    *(_OWORD *)(v10 + 80) = v49;
                    *long long v42 = v48;
                    *(_OWORD *)(v10 + 112) = v47;
                    if (*(void *)v41 < *(void *)v40)
                    {
                      long long v51 = *v40;
                      long long v50 = *(_OWORD *)(v10 + 48);
                      long long v52 = *(_OWORD *)(v10 + 80);
                      *char v40 = *v41;
                      *(_OWORD *)(v10 + 48) = v52;
                      *uint64_t v41 = v51;
                      *(_OWORD *)(v10 + 80) = v50;
                      if (*(void *)(v10 + 32) < *(void *)v10)
                      {
                        long long v109 = *(_OWORD *)v10;
                        long long v119 = *(_OWORD *)(v10 + 16);
                        long long v53 = *(_OWORD *)(v10 + 48);
                        *(_OWORD *)unint64_t v10 = *v40;
                        *(_OWORD *)(v10 + 16) = v53;
                        *char v40 = v109;
                        *(_OWORD *)(v10 + 48) = v119;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 767)
          {
            long long v54 = (__n128 *)(v10 + 32);
            BOOL v56 = (__n128 *)v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  unint64_t v60 = *(void *)(v58 + 32);
                  if (v60 < *(void *)v58)
                  {
                    long long v110 = *(_OWORD *)(v58 + 40);
                    uint64_t v120 = *(void *)(v58 + 56);
                    uint64_t v61 = v57;
                    while (1)
                    {
                      uint64_t v62 = v10 + v61;
                      long long v63 = *(_OWORD *)(v10 + v61 + 16);
                      *(_OWORD *)(v62 + 32) = *(_OWORD *)(v10 + v61);
                      *(_OWORD *)(v62 + 48) = v63;
                      if (!v61) {
                        break;
                      }
                      v61 -= 32;
                      if (v60 >= *(void *)(v62 - 32))
                      {
                        uint64_t v64 = v10 + v61 + 32;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v64 = v10;
LABEL_80:
                    *(void *)uint64_t v64 = v60;
                    *(void *)(v64 + 24) = v120;
                    *(_OWORD *)(v64 + 8) = v110;
                  }
                  long long v54 = v59 + 2;
                  v57 += 32;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (&v59[2] != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                unint64_t v95 = (unint64_t)v54;
                unint64_t v96 = *(void *)(a1 + 32);
                if (v96 < *(void *)a1)
                {
                  __n128 v113 = *(__n128 *)(a1 + 40);
                  unint64_t v123 = *(void *)(a1 + 56);
                  do
                  {
                    __n128 v97 = v54[-1];
                    __n128 *v54 = v54[-2];
                    v54[1] = v97;
                    unint64_t v98 = v54[-4].n128_u64[0];
                    v54 -= 2;
                  }
                  while (v96 < v98);
                  v54->n128_u64[0] = v96;
                  v54[1].n128_u64[1] = v123;
                  *(__n128 *)((char *)v54 + 8) = v113;
                }
                long long v54 = (__n128 *)(v95 + 32);
                a1 = v95;
              }
              while ((__n128 *)(v95 + 32) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)v10 != a2)
            {
              int64_t v65 = (v12 - 2) >> 1;
              int64_t v66 = v65;
              do
              {
                int64_t v67 = v66;
                if (v65 >= v66)
                {
                  uint64_t v68 = (2 * v66) | 1;
                  unint64_t v69 = v10 + 32 * v68;
                  if (2 * v67 + 2 < (uint64_t)v12)
                  {
                    unint64_t v71 = *(void *)(v69 + 32);
                    BOOL v70 = *(void *)v69 >= v71;
                    if (*(void *)v69 > v71) {
                      unint64_t v71 = *(void *)v69;
                    }
                    if (!v70)
                    {
                      v69 += 32;
                      uint64_t v68 = 2 * v67 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v71 = *(void *)v69;
                  }
                  unint64_t v72 = v10 + 32 * v67;
                  unint64_t v73 = *(void *)v72;
                  if (v71 >= *(void *)v72)
                  {
                    uint64_t v121 = *(void *)(v72 + 24);
                    long long v111 = *(_OWORD *)(v72 + 8);
                    do
                    {
                      uint64_t v74 = (_OWORD *)v72;
                      unint64_t v72 = v69;
                      long long v75 = *(_OWORD *)(v69 + 16);
                      *uint64_t v74 = *(_OWORD *)v69;
                      v74[1] = v75;
                      if (v65 < v68) {
                        break;
                      }
                      uint64_t v76 = (2 * v68) | 1;
                      unint64_t v69 = v10 + 32 * v76;
                      uint64_t v68 = 2 * v68 + 2;
                      if (v68 < (uint64_t)v12)
                      {
                        unint64_t v79 = *(void *)v69;
                        unint64_t v77 = *(void *)(v69 + 32);
                        BOOL v78 = *(void *)v69 >= v77;
                        if (*(void *)v69 <= v77) {
                          unint64_t v79 = *(void *)(v69 + 32);
                        }
                        if (*(void *)v69 < v77) {
                          v69 += 32;
                        }
                        if (v78) {
                          uint64_t v68 = v76;
                        }
                      }
                      else
                      {
                        unint64_t v79 = *(void *)v69;
                        uint64_t v68 = v76;
                      }
                    }
                    while (v79 >= v73);
                    *(void *)unint64_t v72 = v73;
                    *(void *)(v72 + 24) = v121;
                    *(_OWORD *)(v72 + 8) = v111;
                  }
                }
                int64_t v66 = v67 - 1;
              }
              while (v67);
              uint64_t v80 = (unint64_t)v11 >> 5;
              do
              {
                uint64_t v81 = 0;
                long long v112 = *(_OWORD *)v10;
                __n128 v122 = *(__n128 *)(v10 + 16);
                unint64_t v82 = (_OWORD *)v10;
                do
                {
                  uint64_t v83 = (uint64_t)&v82[2 * v81 + 2];
                  uint64_t v84 = (2 * v81) | 1;
                  uint64_t v85 = 2 * v81 + 2;
                  if (v85 < v80 && *(void *)v83 < *(void *)(v83 + 32))
                  {
                    v83 += 32;
                    uint64_t v84 = v85;
                  }
                  long long v86 = *(_OWORD *)(v83 + 16);
                  *unint64_t v82 = *(_OWORD *)v83;
                  v82[1] = v86;
                  unint64_t v82 = (_OWORD *)v83;
                  uint64_t v81 = v84;
                }
                while (v84 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
                a2 -= 2;
                if ((__n128 *)v83 == a2)
                {
                  *(_OWORD *)uint64_t v83 = v112;
                  *(__n128 *)(v83 + 16) = v122;
                }
                else
                {
                  __n128 v87 = a2[1];
                  *(__n128 *)uint64_t v83 = *a2;
                  *(__n128 *)(v83 + 16) = v87;
                  *a2 = (__n128)v112;
                  a2[1] = v122;
                  uint64_t v88 = v83 - v10 + 32;
                  if (v88 >= 33)
                  {
                    unint64_t v89 = (((unint64_t)v88 >> 5) - 2) >> 1;
                    uint64_t v90 = (_OWORD *)(v10 + 32 * v89);
                    unint64_t v91 = *(void *)v83;
                    if (*(void *)v90 < *(void *)v83)
                    {
                      uint64_t v104 = *(void *)(v83 + 24);
                      long long v101 = *(_OWORD *)(v83 + 8);
                      do
                      {
                        BOOL v92 = (_OWORD *)v83;
                        uint64_t v83 = (uint64_t)v90;
                        long long v93 = v90[1];
                        *BOOL v92 = *v90;
                        v92[1] = v93;
                        if (!v89) {
                          break;
                        }
                        unint64_t v89 = (v89 - 1) >> 1;
                        uint64_t v90 = (_OWORD *)(v10 + 32 * v89);
                      }
                      while (*(void *)v90 < v91);
                      *(void *)uint64_t v83 = v91;
                      *(void *)(v83 + 24) = v104;
                      *(_OWORD *)(v83 + 8) = v101;
                    }
                  }
                }
              }
              while (v80-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 32 * (v12 >> 1);
          if ((unint64_t)v11 > 0x1000)
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)a1, (unint64_t *)(a1 + 32 * (v12 >> 1)), a2[-2].n128_u64);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)(a1 + 32), (unint64_t *)(v14 - 32), a2[-4].n128_u64);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)(a1 + 64), (unint64_t *)(a1 + 32 + 32 * v13), a2[-6].n128_u64);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)(v14 - 32), (unint64_t *)v14, (unint64_t *)(a1 + 32 + 32 * v13));
            long long v105 = *(_OWORD *)a1;
            long long v114 = *(_OWORD *)(a1 + 16);
            long long v15 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)(a1 + 16) = v15;
            *(_OWORD *)unint64_t v14 = v105;
            *(_OWORD *)(v14 + 16) = v114;
          }
          else
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)(a1 + 32 * (v12 >> 1)), (unint64_t *)a1, a2[-2].n128_u64);
          }
          --a3;
          unint64_t v16 = *(void *)a1;
          if ((a4 & 1) != 0 || *(void *)(a1 - 32) < v16) {
            break;
          }
          uint64_t v103 = *(void *)(a1 + 24);
          long long v100 = *(_OWORD *)(a1 + 8);
          if (v16 >= a2[-2].n128_u64[0])
          {
            unint64_t v30 = a1 + 32;
            do
            {
              unint64_t v10 = v30;
              if (v30 >= (unint64_t)a2) {
                break;
              }
              v30 += 32;
            }
            while (v16 >= *(void *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              unint64_t v29 = *(void *)(v10 + 32);
              v10 += 32;
            }
            while (v16 >= v29);
          }
          int v31 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            int v31 = (long long *)a2;
            do
            {
              unint64_t v32 = *((void *)v31 - 4);
              v31 -= 2;
            }
            while (v16 < v32);
          }
          while (v10 < (unint64_t)v31)
          {
            long long v107 = *(_OWORD *)v10;
            long long v116 = *(_OWORD *)(v10 + 16);
            long long v33 = v31[1];
            *(_OWORD *)unint64_t v10 = *v31;
            *(_OWORD *)(v10 + 16) = v33;
            *int v31 = v107;
            v31[1] = v116;
            do
            {
              unint64_t v34 = *(void *)(v10 + 32);
              v10 += 32;
            }
            while (v16 >= v34);
            do
            {
              unint64_t v35 = *((void *)v31 - 4);
              v31 -= 2;
            }
            while (v16 < v35);
          }
          BOOL v4 = v10 - 32 >= a1;
          BOOL v5 = v10 - 32 == a1;
          if (v10 - 32 != a1)
          {
            long long v36 = *(_OWORD *)(v10 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 16) = v36;
          }
          a4 = 0;
          *(void *)(v10 - 32) = v16;
          *(void *)(v10 - 8) = v103;
          *(_OWORD *)(v10 - 24) = v100;
        }
        uint64_t v17 = 0;
        uint64_t v102 = *(void *)(a1 + 24);
        long long v99 = *(_OWORD *)(a1 + 8);
        do
        {
          unint64_t v18 = *(void *)(a1 + v17 + 32);
          v17 += 32;
        }
        while (v18 < v16);
        unint64_t v19 = a1 + v17;
        uint64_t v20 = a2;
        if (v17 == 32)
        {
          uint64_t v20 = a2;
          do
          {
            if (v19 >= (unint64_t)v20) {
              break;
            }
            unint64_t v22 = v20[-2].n128_u64[0];
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            unint64_t v21 = v20[-2].n128_u64[0];
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        unint64_t v10 = a1 + v17;
        if (v19 < (unint64_t)v20)
        {
          uint64_t v23 = (long long *)v20;
          do
          {
            long long v106 = *(_OWORD *)v10;
            long long v115 = *(_OWORD *)(v10 + 16);
            long long v24 = v23[1];
            *(_OWORD *)unint64_t v10 = *v23;
            *(_OWORD *)(v10 + 16) = v24;
            *uint64_t v23 = v106;
            v23[1] = v115;
            do
            {
              unint64_t v25 = *(void *)(v10 + 32);
              v10 += 32;
            }
            while (v25 < v16);
            do
            {
              unint64_t v26 = *((void *)v23 - 4);
              v23 -= 2;
            }
            while (v26 >= v16);
          }
          while (v10 < (unint64_t)v23);
        }
        if (v10 - 32 != a1)
        {
          long long v27 = *(_OWORD *)(v10 - 16);
          *(_OWORD *)a1 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 16) = v27;
        }
        *(void *)(v10 - 32) = v16;
        *(void *)(v10 - 8) = v102;
        *(_OWORD *)(v10 - 24) = v99;
        if (v19 >= (unint64_t)v20) {
          break;
        }
LABEL_30:
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(a1, v10 - 32, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEbT1_SP_SI_(a1, v10 - 32);
      if (_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEbT1_SP_SI_(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (__n128 *)(v10 - 32);
    if (!v28) {
      continue;
    }
    break;
  }
}

long long *_ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_(long long *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 >= *(void *)result)
  {
    if (v4 < v3)
    {
      long long v9 = *(_OWORD *)a2;
      long long v8 = *((_OWORD *)a2 + 1);
      long long v10 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v10;
      *(_OWORD *)a3 = v9;
      *((_OWORD *)a3 + 1) = v8;
      if (*a2 < *(void *)result)
      {
        long long v12 = *result;
        long long v11 = result[1];
        long long v13 = *((_OWORD *)a2 + 1);
        *__n128 result = *(_OWORD *)a2;
        result[1] = v13;
        *(_OWORD *)a2 = v12;
        *((_OWORD *)a2 + 1) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v15 = *result;
      long long v14 = result[1];
      long long v16 = *((_OWORD *)a2 + 1);
      *__n128 result = *(_OWORD *)a2;
      result[1] = v16;
      *(_OWORD *)a2 = v15;
      *((_OWORD *)a2 + 1) = v14;
      if (*a3 >= *a2) {
        return result;
      }
      long long v6 = *(_OWORD *)a2;
      long long v5 = *((_OWORD *)a2 + 1);
      long long v17 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v17;
    }
    else
    {
      long long v6 = *result;
      long long v5 = result[1];
      long long v7 = *((_OWORD *)a3 + 1);
      *__n128 result = *(_OWORD *)a3;
      result[1] = v7;
    }
    *(_OWORD *)a3 = v6;
    *((_OWORD *)a3 + 1) = v5;
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEbT1_SP_SI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (long long *)(a2 - 32);
      if (*(void *)(a2 - 32) < *(void *)a1)
      {
        long long v8 = *(_OWORD *)a1;
        long long v7 = *(_OWORD *)(a1 + 16);
        long long v9 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v9;
        *long long v6 = v8;
        *(_OWORD *)(a2 - 16) = v7;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)a1, (unint64_t *)(a1 + 32), (unint64_t *)(a2 - 32));
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEvT1_SP_SP_SP_SI_(a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a2 - 32));
      return 1;
    case 5:
      unint64_t v19 = (long long *)(a1 + 32);
      uint64_t v20 = (long long *)(a1 + 64);
      unint64_t v21 = (long long *)(a1 + 96);
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEvT1_SP_SP_SP_SI_(a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96));
      unint64_t v23 = *(void *)(a2 - 32);
      unint64_t v22 = (long long *)(a2 - 32);
      if (v23 < *(void *)(a1 + 96))
      {
        long long v25 = *v21;
        long long v24 = *(_OWORD *)(a1 + 112);
        long long v26 = v22[1];
        *unint64_t v21 = *v22;
        *(_OWORD *)(a1 + 112) = v26;
        *unint64_t v22 = v25;
        v22[1] = v24;
        if (*(void *)v21 < *(void *)v20)
        {
          long long v28 = *v20;
          long long v27 = *(_OWORD *)(a1 + 80);
          long long v29 = *(_OWORD *)(a1 + 112);
          long long *v20 = *v21;
          *(_OWORD *)(a1 + 80) = v29;
          *unint64_t v21 = v28;
          *(_OWORD *)(a1 + 112) = v27;
          if (*(void *)v20 < *(void *)v19)
          {
            long long v31 = *v19;
            long long v30 = *(_OWORD *)(a1 + 48);
            long long v32 = *(_OWORD *)(a1 + 80);
            *unint64_t v19 = *v20;
            *(_OWORD *)(a1 + 48) = v32;
            long long *v20 = v31;
            *(_OWORD *)(a1 + 80) = v30;
            if (*(void *)(a1 + 32) < *(void *)a1)
            {
              long long v34 = *(_OWORD *)a1;
              long long v33 = *(_OWORD *)(a1 + 16);
              long long v35 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)a1 = *v19;
              *(_OWORD *)(a1 + 16) = v35;
              *unint64_t v19 = v34;
              *(_OWORD *)(a1 + 48) = v33;
            }
          }
        }
      }
      return 1;
    default:
      long long v10 = (void *)(a1 + 64);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)a1, (unint64_t *)(a1 + 32), (unint64_t *)(a1 + 64));
      uint64_t v11 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unint64_t v14 = *(void *)v11;
    if (*(void *)v11 < *v10)
    {
      long long v36 = *(_OWORD *)(v11 + 8);
      uint64_t v37 = *(void *)(v11 + 24);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 80);
        *(_OWORD *)(v16 + 96) = *(_OWORD *)(a1 + v15 + 64);
        *(_OWORD *)(v16 + 112) = v17;
        if (v15 == -64) {
          break;
        }
        v15 -= 32;
        if (v14 >= *(void *)(v16 + 32))
        {
          uint64_t v18 = a1 + v15 + 96;
          goto LABEL_13;
        }
      }
      uint64_t v18 = a1;
LABEL_13:
      *(void *)uint64_t v18 = v14;
      *(_OWORD *)(v18 + 8) = v36;
      *(void *)(v18 + 24) = v37;
      if (++v13 == 8) {
        return v11 + 32 == a2;
      }
    }
    long long v10 = (void *)v11;
    v12 += 32;
    v11 += 32;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEvT1_SP_SP_SP_SI_(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)a1, a2->n128_u64, a3->n128_u64);
  if (a4->n128_u64[0] < a3->n128_u64[0])
  {
    __n128 v9 = *a3;
    __n128 result = a3[1];
    __n128 v10 = a4[1];
    *a3 = *a4;
    a3[1] = v10;
    *a4 = v9;
    a4[1] = result;
    if (a3->n128_u64[0] < a2->n128_u64[0])
    {
      __n128 v11 = *a2;
      __n128 result = a2[1];
      __n128 v12 = a3[1];
      *a2 = *a3;
      a2[1] = v12;
      *a3 = v11;
      a3[1] = result;
      if (a2->n128_u64[0] < *(void *)a1)
      {
        long long v13 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)(a1 + 16);
        __n128 v14 = a2[1];
        *(__n128 *)a1 = *a2;
        *(__n128 *)(a1 + 16) = v14;
        *a2 = (__n128)v13;
        a2[1] = result;
      }
    }
  }
  return result;
}

uint64_t *std::__tree<unsigned long,std::greater<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  long long v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        long long v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 <= v9) {
          break;
        }
        long long v5 = *v8;
        long long v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 <= v7) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        long long v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v8 = a1 + 1;
LABEL_10:
    __n128 v10 = (uint64_t *)operator new(0x28uLL);
    void v10[4] = *a3;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void *std::vector<unsigned short>::vector(void *a1, uint64_t a2, _WORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned short>::__vallocate[abi:ne180100](a1, a2);
    long long v6 = (_WORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B906672C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

long long *std::vector<CSCppCoreFileRegionInfo>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CSCppCoreFileRegionInfo*>,std::__wrap_iter<CSCppCoreFileRegionInfo*>>(uint64_t *a1, long long *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  long long v5 = a2;
  if (a5 >= 1)
  {
    unint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 5) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (void)a2) >> 5) >= a5)
      {
        unint64_t v21 = &a3[28 * a5];
      }
      else
      {
        unint64_t v21 = &a3[4 * ((uint64_t)(v12 - (void)a2) >> 5)];
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(v9, (uint64_t)v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<CSCppCoreFileRegionInfo>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[14 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CSCppCoreFileRegionInfo *,CSCppCoreFileRegionInfo *,CSCppCoreFileRegionInfo *>((uint64_t)v26, v7, v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 5);
      if (v14 > 0x124924924924924) {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 5);
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 5);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x92492492492492) {
        unint64_t v18 = 0x124924924924924;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>>(v9, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      uint64_t v22 = (uint64_t)&v19[224 * v15];
      v26[0] = v19;
      v26[1] = v22;
      uint64_t v27 = v22;
      long long v28 = &v19[224 * v18];
      uint64_t v23 = 224 * a5;
      uint64_t v24 = v22 + 224 * a5;
      do
      {
        CSCppCoreFileRegionInfo::CSCppCoreFileRegionInfo(v22, (long long *)v7);
        v22 += 224;
        v7 += 28;
        v23 -= 224;
      }
      while (v23);
      uint64_t v27 = v24;
      long long v5 = (long long *)std::vector<CSCppCoreFileRegionInfo>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<CSCppCoreFileRegionInfo>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_1B906692C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CSCppCoreFileRegionInfo>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    uint64_t v10 = (long long *)(a2 + v6 - a4);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      std::construct_at[abi:ne180100]<CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo*>(v8, v10);
      v10 += 14;
      v8 += 224;
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CSCppCoreFileRegionInfo *,CSCppCoreFileRegionInfo *,CSCppCoreFileRegionInfo *>((uint64_t)&v12, a2, v7, v6);
}

uint64_t std::vector<CSCppCoreFileRegionInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2, long long *a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = a2[1];
  unint64_t v7 = (long long *)*a1;
  uint64_t v8 = v6;
  if ((long long *)*a1 != a3)
  {
    uint64_t v9 = a3;
    uint64_t v8 = a2[1];
    do
    {
      v8 -= 224;
      v9 -= 14;
      std::construct_at[abi:ne180100]<CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo*>(v8, v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  uint64_t v10 = (long long *)a1[1];
  uint64_t v11 = a2[2];
  if (v10 != v3)
  {
    do
    {
      std::construct_at[abi:ne180100]<CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo*>(v11, v3);
      v3 += 14;
      v11 += 224;
    }
    while (v3 != v10);
    uint64_t v8 = a2[1];
  }
  a2[2] = v11;
  uint64_t v12 = *a1;
  *a1 = v8;
  a2[1] = v12;
  uint64_t v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CSCppCoreFileRegionInfo *,CSCppCoreFileRegionInfo *,CSCppCoreFileRegionInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      long long v9 = *(_OWORD *)(a3 + v7 - 224);
      long long v10 = *(_OWORD *)(a3 + v7 - 192);
      *(_OWORD *)(v8 - 208) = *(_OWORD *)(a3 + v7 - 208);
      *(_OWORD *)(v8 - 192) = v10;
      *(_OWORD *)(v8 - 224) = v9;
      long long v11 = *(_OWORD *)(a3 + v7 - 176);
      long long v12 = *(_OWORD *)(a3 + v7 - 160);
      long long v13 = *(_OWORD *)(a3 + v7 - 144);
      *(void *)(v8 - 128) = *(void *)(a3 + v7 - 128);
      *(_OWORD *)(v8 - 160) = v12;
      *(_OWORD *)(v8 - 144) = v13;
      *(_OWORD *)(v8 - 176) = v11;
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a4 + v7 - 120, (__n128 *)(a3 + v7 - 120));
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a4 + v7 - 88, (__n128 *)(a3 + v7 - 88));
      uint64_t v14 = a4 + v7;
      uint64_t v15 = a3 + v7;
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a4 + v7 - 56, (__n128 *)(a3 + v7 - 56));
      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a4 + v7 - 24));
      *(_OWORD *)(v14 - 24) = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v14 - 8) = *(void *)(a3 + v7 - 8);
      *(void *)(v15 - 24) = 0;
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - 8) = 0;
      v7 -= 224;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CSCppCoreFileRegionInfo *,CSCppCoreFileRegionInfo *,CSCppCoreFileRegionInfo *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  long long v5 = a3;
  uint64_t v6 = a2 + 26;
  do
  {
    uint64_t v7 = v6 - 26;
    long long v8 = *((_OWORD *)v6 - 13);
    long long v9 = *((_OWORD *)v6 - 11);
    *(_OWORD *)(a4 + 16) = *((_OWORD *)v6 - 12);
    *(_OWORD *)(a4 + 32) = v9;
    *(_OWORD *)a4 = v8;
    long long v10 = *((_OWORD *)v6 - 10);
    long long v11 = *((_OWORD *)v6 - 9);
    long long v12 = *((_OWORD *)v6 - 8);
    *(void *)(a4 + 96) = *(v6 - 14);
    *(_OWORD *)(a4 + 64) = v11;
    *(_OWORD *)(a4 + 80) = v12;
    *(_OWORD *)(a4 + 48) = v10;
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a4 + 104), (const std::string *)(v6 - 13));
    std::__optional_storage_base<std::vector<unsigned short>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<unsigned short>,false> const&>(a4 + 136, (uint64_t)(v6 - 9));
    std::__optional_storage_base<std::vector<unsigned short>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<unsigned short>,false> const&>(a4 + 168, (uint64_t)(v6 - 5));
    if ((uint64_t *)a4 != v6 - 26) {
      std::vector<CSCppCoreFileRegionInfo>::__assign_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>((uint64_t *)(a4 + 200), *(v6 - 1), *v6, 0x6DB6DB6DB6DB6DB7 * ((*v6 - *(v6 - 1)) >> 5));
    }
    a4 += 224;
    v6 += 28;
  }
  while (v7 + 28 != v5);
  return v5;
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(this, a2);
    }
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void std::__optional_storage_base<std::vector<unsigned short>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<unsigned short>,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      uint64_t v3 = *(void *)(a2 + 8);
      unint64_t v4 = (v3 - *(void *)a2) >> 1;
      long long v5 = *(char **)a2;
      std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>((char *)a1, v5, v3, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v6 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
    *(unsigned char *)(a1 + 24) = 1;
  }
}

char *std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      unsigned int v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    __n128 result = std::vector<unsigned short>::__vallocate[abi:ne180100](v7, v11);
    long long v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  long long v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  unint64_t v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_19:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  uint64_t *v12 = &v9[v17];
  return result;
}

void std::vector<CSCppCoreFileRegionInfo>::__assign_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5) < a4)
  {
    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(a1);
    if (a4 > 0x124924924924924) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492) {
      unint64_t v10 = 0x124924924924924;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<CSCppCoreFileRegionInfo>::__vallocate[abi:ne180100](a1, v10);
    uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5) < a4)
  {
    uint64_t v12 = a2 + 32 * ((a1[1] - *a1) >> 5);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CSCppCoreFileRegionInfo *,CSCppCoreFileRegionInfo *,CSCppCoreFileRegionInfo *>(&v14, a2, v12);
    uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(v8, v12, a3, a1[1]);
LABEL_11:
    a1[1] = v11;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CSCppCoreFileRegionInfo *,CSCppCoreFileRegionInfo *,CSCppCoreFileRegionInfo *>(&v15, a2, a3);

  std::vector<CSCppCoreFileRegionInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, v13);
}

void sub_1B9067090(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B9067098(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    v201 = a2 - 14;
    uint64_t v206 = a2;
    v199 = a2 - 42;
    v200 = a2 - 28;
    unint64_t v8 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v8;
        unint64_t v9 = v206;
        uint64_t v10 = (uint64_t)v206 - v8;
        unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v206 - v8) >> 5);
        if (!(!v5 & v4))
        {
          switch(v11)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              int64_t v66 = v206 - 14;
              if (*((void *)v206 - 28) >= *(void *)a1) {
                return;
              }
              int64_t v67 = (long long *)a1;
              break;
            case 3uLL:
              _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224), v201);
              return;
            case 4uLL:
              _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224), (long long *)(a1 + 448), v201);
              return;
            case 5uLL:
              uint64_t v68 = (void *)(a1 + 448);
              _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224), (long long *)(a1 + 448), (long long *)(a1 + 672));
              if (*((void *)v206 - 28) >= *(void *)(a1 + 672)) {
                return;
              }
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)(a1 + 672), v206 - 14);
              if (*(void *)(a1 + 672) >= *v68) {
                return;
              }
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)(a1 + 448), (long long *)(a1 + 672));
              if (*v68 >= *(void *)(a1 + 224)) {
                return;
              }
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)(a1 + 224), (long long *)(a1 + 448));
              if (*(void *)(a1 + 224) >= *(void *)a1) {
                return;
              }
              int64_t v67 = (long long *)a1;
              int64_t v66 = (long long *)(a1 + 224);
              break;
            default:
              JUMPOUT(0);
          }
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(v67, v66);
          return;
        }
        if (v10 <= 5375)
        {
          if (a4)
          {
            if ((long long *)a1 != v206)
            {
              unint64_t v69 = a1 + 224;
              if ((long long *)(a1 + 224) != v206)
              {
                uint64_t v70 = 0;
                unint64_t v71 = a1;
                do
                {
                  unint64_t v72 = v69;
                  if (*(void *)(v71 + 224) < *(void *)v71)
                  {
                    long long v73 = *(_OWORD *)v69;
                    long long v74 = *(_OWORD *)(v69 + 32);
                    long long v227 = *(_OWORD *)(v69 + 16);
                    long long v228 = v74;
                    long long v226 = v73;
                    long long v75 = *(_OWORD *)(v69 + 48);
                    long long v76 = *(_OWORD *)(v69 + 64);
                    long long v77 = *(_OWORD *)(v69 + 80);
                    uint64_t v232 = *(void *)(v69 + 96);
                    long long v230 = v76;
                    long long v231 = v77;
                    long long v229 = v75;
                    v233.n128_u8[0] = 0;
                    char v235 = 0;
                    if (*(unsigned char *)(v71 + 352))
                    {
                      uint64_t v234 = *(void *)(v71 + 344);
                      __n128 v233 = *(__n128 *)(v71 + 328);
                      *(void *)(v71 + 336) = 0;
                      *(void *)(v71 + 344) = 0;
                      *(void *)(v71 + 328) = 0;
                      char v235 = 1;
                    }
                    BOOL v78 = (__n128 *)(v71 + 360);
                    v236.n128_u8[0] = 0;
                    char v238 = 0;
                    if (*(unsigned char *)(v71 + 384))
                    {
                      __n128 v236 = *v78;
                      uint64_t v237 = *(void *)(v71 + 376);
                      v78->n128_u64[0] = 0;
                      *(void *)(v71 + 368) = 0;
                      *(void *)(v71 + 376) = 0;
                      char v238 = 1;
                    }
                    __p.n128_u8[0] = 0;
                    char v241 = 0;
                    if (*(unsigned char *)(v71 + 416))
                    {
                      __n128 __p = *(__n128 *)(v71 + 392);
                      uint64_t v240 = *(void *)(v71 + 408);
                      *(void *)(v71 + 392) = 0;
                      *(void *)(v71 + 400) = 0;
                      *(void *)(v71 + 408) = 0;
                      char v241 = 1;
                    }
                    long long v242 = *(_OWORD *)(v71 + 424);
                    uint64_t v243 = *(void *)(v71 + 440);
                    *(void *)(v71 + 424) = 0;
                    *(void *)(v71 + 432) = 0;
                    *(void *)(v71 + 440) = 0;
                    uint64_t v79 = v70;
                    while (1)
                    {
                      uint64_t v80 = v79;
                      uint64_t v81 = a1 + v79;
                      long long v82 = *(_OWORD *)(a1 + v79 + 80);
                      *(_OWORD *)(v81 + 288) = *(_OWORD *)(a1 + v79 + 64);
                      *(_OWORD *)(v81 + 304) = v82;
                      *(void *)(v81 + 320) = *(void *)(a1 + v79 + 96);
                      long long v83 = *(_OWORD *)(a1 + v79 + 16);
                      *(_OWORD *)(v81 + 224) = *(_OWORD *)v81;
                      *(_OWORD *)(v81 + 240) = v83;
                      long long v84 = *(_OWORD *)(a1 + v79 + 48);
                      *(_OWORD *)(v81 + 256) = *(_OWORD *)(a1 + v79 + 32);
                      *(_OWORD *)(v81 + 272) = v84;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v79 + 328, (__n128 *)(a1 + v79 + 104));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v81 + 360, (__n128 *)(v81 + 136));
                      uint64_t v85 = a1 + v80;
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v80 + 392, (__n128 *)(a1 + v80 + 168));
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + v80 + 424));
                      *(_OWORD *)(v85 + 424) = *(_OWORD *)(v85 + 200);
                      *(void *)(v85 + 440) = *(void *)(v85 + 216);
                      *(void *)(v85 + 208) = 0;
                      *(void *)(v85 + 216) = 0;
                      *(void *)(v85 + 200) = 0;
                      if (!v80) {
                        break;
                      }
                      uint64_t v79 = v80 - 224;
                      if ((unint64_t)v226 >= *(void *)(a1 + v80 - 224))
                      {
                        unint64_t v86 = a1 + v80;
                        goto LABEL_108;
                      }
                    }
                    unint64_t v86 = a1;
LABEL_108:
                    long long v87 = v226;
                    long long v88 = v228;
                    *(_OWORD *)(v86 + 16) = v227;
                    *(_OWORD *)(v86 + 32) = v88;
                    *(_OWORD *)unint64_t v86 = v87;
                    long long v89 = v229;
                    long long v90 = v230;
                    long long v91 = v231;
                    *(void *)(v86 + 96) = v232;
                    *(_OWORD *)(v86 + 64) = v90;
                    *(_OWORD *)(v86 + 80) = v91;
                    *(_OWORD *)(v86 + 48) = v89;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v80 + 104, &v233);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v80 + 136, &v236);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v80 + 168, &__p);
                    BOOL v92 = (uint64_t *)(a1 + v80 + 200);
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(v92);
                    *BOOL v92 = v242;
                    *(void *)(v86 + 208) = *((void *)&v242 + 1);
                    *(void *)(v86 + 216) = v243;
                    long long v242 = 0uLL;
                    uint64_t v243 = 0;
                    *(void *)&long long v207 = &v242;
                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                    if (v241 && __p.n128_u64[0])
                    {
                      __p.n128_u64[1] = __p.n128_u64[0];
                      operator delete((void *)__p.n128_u64[0]);
                    }
                    if (v238 && v236.n128_u64[0])
                    {
                      v236.n128_u64[1] = v236.n128_u64[0];
                      operator delete((void *)v236.n128_u64[0]);
                    }
                    if (v235 && SHIBYTE(v234) < 0) {
                      operator delete((void *)v233.n128_u64[0]);
                    }
                    unint64_t v9 = v206;
                  }
                  unint64_t v69 = v72 + 224;
                  v70 += 224;
                  unint64_t v71 = v72;
                }
                while ((long long *)(v72 + 224) != v9);
              }
            }
          }
          else if ((long long *)a1 != v206)
          {
            unint64_t v179 = a1 + 224;
            if ((long long *)(a1 + 224) != v206)
            {
              unint64_t v180 = a1 - 224;
              do
              {
                unint64_t v181 = v179;
                if (*(void *)(a1 + 224) < *(void *)a1)
                {
                  long long v182 = *(_OWORD *)v179;
                  long long v183 = *(_OWORD *)(v179 + 32);
                  long long v227 = *(_OWORD *)(v179 + 16);
                  long long v228 = v183;
                  long long v226 = v182;
                  long long v184 = *(_OWORD *)(v179 + 48);
                  long long v185 = *(_OWORD *)(v179 + 64);
                  long long v186 = *(_OWORD *)(v179 + 80);
                  uint64_t v232 = *(void *)(v179 + 96);
                  long long v230 = v185;
                  long long v231 = v186;
                  long long v229 = v184;
                  v233.n128_u8[0] = 0;
                  char v235 = 0;
                  if (*(unsigned char *)(a1 + 352))
                  {
                    uint64_t v234 = *(void *)(a1 + 344);
                    __n128 v233 = *(__n128 *)(a1 + 328);
                    *(void *)(a1 + 336) = 0;
                    *(void *)(a1 + 344) = 0;
                    *(void *)(a1 + 328) = 0;
                    char v235 = 1;
                  }
                  unsigned int v187 = (__n128 *)(a1 + 360);
                  v236.n128_u8[0] = 0;
                  char v238 = 0;
                  if (*(unsigned char *)(a1 + 384))
                  {
                    __n128 v236 = *v187;
                    uint64_t v237 = *(void *)(a1 + 376);
                    v187->n128_u64[0] = 0;
                    *(void *)(a1 + 368) = 0;
                    *(void *)(a1 + 376) = 0;
                    char v238 = 1;
                  }
                  __p.n128_u8[0] = 0;
                  char v241 = 0;
                  if (*(unsigned char *)(a1 + 416))
                  {
                    __n128 __p = *(__n128 *)(a1 + 392);
                    uint64_t v240 = *(void *)(a1 + 408);
                    *(void *)(a1 + 392) = 0;
                    *(void *)(a1 + 400) = 0;
                    *(void *)(a1 + 408) = 0;
                    char v241 = 1;
                  }
                  long long v242 = *(_OWORD *)(a1 + 424);
                  uint64_t v243 = *(void *)(a1 + 440);
                  *(void *)(a1 + 424) = 0;
                  *(void *)(a1 + 432) = 0;
                  *(void *)(a1 + 440) = 0;
                  unint64_t v188 = v180;
                  do
                  {
                    long long v189 = *(_OWORD *)(v188 + 304);
                    *(_OWORD *)(v188 + 512) = *(_OWORD *)(v188 + 288);
                    *(_OWORD *)(v188 + 528) = v189;
                    *(void *)(v188 + 544) = *(void *)(v188 + 320);
                    long long v190 = *(_OWORD *)(v188 + 240);
                    *(_OWORD *)(v188 + 448) = *(_OWORD *)(v188 + 224);
                    *(_OWORD *)(v188 + 464) = v190;
                    long long v191 = *(_OWORD *)(v188 + 272);
                    *(_OWORD *)(v188 + 480) = *(_OWORD *)(v188 + 256);
                    *(_OWORD *)(v188 + 496) = v191;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v188 + 552, (__n128 *)(v188 + 328));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 584, (__n128 *)(v188 + 360));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 616, (__n128 *)(v188 + 392));
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v188 + 648));
                    *(_OWORD *)(v188 + 648) = *(_OWORD *)(v188 + 424);
                    *(void *)(v188 + 664) = *(void *)(v188 + 440);
                    *(void *)(v188 + 424) = 0;
                    *(void *)(v188 + 432) = 0;
                    *(void *)(v188 + 440) = 0;
                    unint64_t v192 = *(void *)v188;
                    v188 -= 224;
                  }
                  while ((unint64_t)v226 < v192);
                  long long v193 = v226;
                  long long v194 = v228;
                  *(_OWORD *)(v188 + 464) = v227;
                  *(_OWORD *)(v188 + 480) = v194;
                  *(_OWORD *)(v188 + 448) = v193;
                  long long v195 = v229;
                  long long v196 = v230;
                  long long v197 = v231;
                  *(void *)(v188 + 544) = v232;
                  *(_OWORD *)(v188 + 512) = v196;
                  *(_OWORD *)(v188 + 528) = v197;
                  *(_OWORD *)(v188 + 496) = v195;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v188 + 552, &v233);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 584, &v236);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 616, &__p);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v188 + 648));
                  *(_OWORD *)(v188 + 648) = v242;
                  *(void *)(v188 + 664) = v243;
                  long long v242 = 0uLL;
                  uint64_t v243 = 0;
                  *(void *)&long long v207 = &v242;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                  if (v241 && __p.n128_u64[0])
                  {
                    __p.n128_u64[1] = __p.n128_u64[0];
                    operator delete((void *)__p.n128_u64[0]);
                  }
                  if (v238 && v236.n128_u64[0])
                  {
                    v236.n128_u64[1] = v236.n128_u64[0];
                    operator delete((void *)v236.n128_u64[0]);
                  }
                  if (v235 && SHIBYTE(v234) < 0) {
                    operator delete((void *)v233.n128_u64[0]);
                  }
                  unint64_t v9 = v206;
                }
                unint64_t v179 = v181 + 224;
                v180 += 224;
                a1 = v181;
              }
              while ((long long *)(v181 + 224) != v9);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((long long *)a1 != v206)
          {
            int64_t v204 = (v11 - 2) >> 1;
            int64_t v93 = v204;
            do
            {
              int64_t v94 = v93;
              if (v204 >= v93)
              {
                uint64_t v95 = (2 * v93) | 1;
                unint64_t v96 = (long long *)(a1 + 224 * v95);
                if (2 * v94 + 2 < (uint64_t)v11)
                {
                  unint64_t v99 = *(void *)v96;
                  unint64_t v97 = *((void *)v96 + 28);
                  BOOL v98 = *(void *)v96 >= v97;
                  if (*(void *)v96 <= v97) {
                    unint64_t v99 = *((void *)v96 + 28);
                  }
                  if (*(void *)v96 < v97) {
                    v96 += 14;
                  }
                  if (!v98) {
                    uint64_t v95 = 2 * v94 + 2;
                  }
                }
                else
                {
                  unint64_t v99 = *(void *)v96;
                }
                unint64_t v100 = a1 + 224 * v94;
                if (v99 >= *(void *)v100)
                {
                  long long v101 = *(_OWORD *)v100;
                  long long v102 = *(_OWORD *)(v100 + 32);
                  long long v227 = *(_OWORD *)(v100 + 16);
                  long long v228 = v102;
                  long long v226 = v101;
                  long long v103 = *(_OWORD *)(v100 + 48);
                  long long v104 = *(_OWORD *)(v100 + 64);
                  long long v105 = *(_OWORD *)(v100 + 80);
                  uint64_t v232 = *(void *)(v100 + 96);
                  long long v230 = v104;
                  long long v231 = v105;
                  long long v229 = v103;
                  v233.n128_u8[0] = 0;
                  char v235 = 0;
                  if (*(unsigned char *)(a1 + 224 * v94 + 128))
                  {
                    unint64_t v106 = a1 + 224 * v94;
                    __n128 v107 = *(__n128 *)(v106 + 104);
                    uint64_t v234 = *(void *)(v106 + 120);
                    __n128 v233 = v107;
                    *(void *)(v106 + 112) = 0;
                    *(void *)(v106 + 120) = 0;
                    *(void *)(v106 + 104) = 0;
                    char v235 = 1;
                  }
                  v236.n128_u8[0] = 0;
                  char v238 = 0;
                  if (*(unsigned char *)(a1 + 224 * v94 + 160))
                  {
                    unint64_t v108 = a1 + 224 * v94;
                    __n128 v236 = *(__n128 *)(v108 + 136);
                    uint64_t v237 = *(void *)(v108 + 152);
                    *(void *)(v108 + 136) = 0;
                    *(void *)(v108 + 144) = 0;
                    *(void *)(v108 + 152) = 0;
                    char v238 = 1;
                  }
                  __p.n128_u8[0] = 0;
                  char v241 = 0;
                  if (*(unsigned char *)(a1 + 224 * v94 + 192))
                  {
                    unint64_t v109 = a1 + 224 * v94;
                    __n128 __p = *(__n128 *)(v109 + 168);
                    uint64_t v240 = *(void *)(v109 + 184);
                    *(void *)(v109 + 168) = 0;
                    *(void *)(v109 + 176) = 0;
                    *(void *)(v109 + 184) = 0;
                    char v241 = 1;
                  }
                  int64_t v202 = v94;
                  unint64_t v110 = a1 + 224 * v94;
                  long long v242 = *(_OWORD *)(v110 + 200);
                  uint64_t v243 = *(void *)(v110 + 216);
                  *(void *)(v110 + 200) = 0;
                  *(void *)(v110 + 208) = 0;
                  *(void *)(v110 + 216) = 0;
                  do
                  {
                    long long v111 = v96;
                    long long v112 = *v96;
                    long long v113 = v96[2];
                    *(_OWORD *)(v100 + 16) = v96[1];
                    *(_OWORD *)(v100 + 32) = v113;
                    *(_OWORD *)unint64_t v100 = v112;
                    long long v114 = v96[3];
                    long long v115 = v96[4];
                    long long v116 = v96[5];
                    *(void *)(v100 + 96) = *((void *)v96 + 12);
                    *(_OWORD *)(v100 + 64) = v115;
                    *(_OWORD *)(v100 + 80) = v116;
                    *(_OWORD *)(v100 + 48) = v114;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v100 + 104, (__n128 *)((char *)v96 + 104));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v100 + 136, (__n128 *)((char *)v111 + 136));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v100 + 168, (__n128 *)((char *)v111 + 168));
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v100 + 200));
                    *(_OWORD *)(v100 + 200) = *(long long *)((char *)v111 + 200);
                    *(void *)(v100 + 216) = *((void *)v111 + 27);
                    *((void *)v111 + 25) = 0;
                    *((void *)v111 + 26) = 0;
                    *((void *)v111 + 27) = 0;
                    if (v204 < v95) {
                      break;
                    }
                    unint64_t v96 = (long long *)(a1 + 224 * ((2 * v95) | 1));
                    if (2 * v95 + 2 < (uint64_t)v11)
                    {
                      unint64_t v119 = *(void *)v96;
                      unint64_t v117 = *((void *)v96 + 28);
                      BOOL v118 = *(void *)v96 >= v117;
                      if (*(void *)v96 <= v117) {
                        unint64_t v119 = *((void *)v96 + 28);
                      }
                      if (*(void *)v96 < v117) {
                        v96 += 14;
                      }
                      uint64_t v95 = v118 ? (2 * v95) | 1 : 2 * v95 + 2;
                    }
                    else
                    {
                      unint64_t v119 = *(void *)v96;
                      uint64_t v95 = (2 * v95) | 1;
                    }
                    unint64_t v100 = (unint64_t)v111;
                  }
                  while (v119 >= (unint64_t)v226);
                  long long v120 = v226;
                  long long v121 = v228;
                  v111[1] = v227;
                  v111[2] = v121;
                  *long long v111 = v120;
                  long long v122 = v229;
                  long long v123 = v230;
                  long long v124 = v231;
                  *((void *)v111 + 12) = v232;
                  v111[4] = v123;
                  v111[5] = v124;
                  v111[3] = v122;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v111 + 104, &v233);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v111 + 136, &v236);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v111 + 168, &__p);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v111 + 25);
                  *(long long *)((char *)v111 + 200) = v242;
                  *((void *)v111 + 27) = v243;
                  long long v242 = 0uLL;
                  uint64_t v243 = 0;
                  *(void *)&long long v207 = &v242;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                  if (v241 && __p.n128_u64[0])
                  {
                    __p.n128_u64[1] = __p.n128_u64[0];
                    operator delete((void *)__p.n128_u64[0]);
                  }
                  if (v238 && v236.n128_u64[0])
                  {
                    v236.n128_u64[1] = v236.n128_u64[0];
                    operator delete((void *)v236.n128_u64[0]);
                  }
                  if (v235 && SHIBYTE(v234) < 0) {
                    operator delete((void *)v233.n128_u64[0]);
                  }
                  unint64_t v9 = v206;
                  int64_t v94 = v202;
                }
              }
              int64_t v93 = v94 - 1;
            }
            while (v94);
            uint64_t v125 = (((unint64_t)v10 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
            unint64_t v198 = (__n128 *)(a1 + 104);
            do
            {
              long long v126 = *(_OWORD *)a1;
              long long v127 = *(_OWORD *)(a1 + 32);
              long long v208 = *(_OWORD *)(a1 + 16);
              long long v209 = v127;
              long long v207 = v126;
              long long v128 = *(_OWORD *)(a1 + 48);
              long long v129 = *(_OWORD *)(a1 + 64);
              long long v130 = *(_OWORD *)(a1 + 80);
              uint64_t v213 = *(void *)(a1 + 96);
              long long v211 = v129;
              long long v212 = v130;
              long long v210 = v128;
              v214.n128_u8[0] = 0;
              char v216 = 0;
              if (*(unsigned char *)(a1 + 128))
              {
                __n128 v131 = *v198;
                uint64_t v215 = *(void *)(a1 + 120);
                __n128 v214 = v131;
                *(void *)(a1 + 112) = 0;
                *(void *)(a1 + 120) = 0;
                v198->n128_u64[0] = 0;
                char v216 = 1;
              }
              v217.n128_u8[0] = 0;
              char v219 = 0;
              if (*(unsigned char *)(a1 + 160))
              {
                __n128 v217 = *(__n128 *)(a1 + 136);
                uint64_t v218 = *(void *)(a1 + 152);
                *(void *)(a1 + 136) = 0;
                *(void *)(a1 + 144) = 0;
                *(void *)(a1 + 152) = 0;
                char v219 = 1;
              }
              v205 = v9;
              v220.n128_u8[0] = 0;
              char v222 = 0;
              if (*(unsigned char *)(a1 + 192))
              {
                __n128 v220 = *(__n128 *)(a1 + 168);
                uint64_t v221 = *(void *)(a1 + 184);
                *(void *)(a1 + 168) = 0;
                *(void *)(a1 + 176) = 0;
                *(void *)(a1 + 184) = 0;
                char v222 = 1;
              }
              uint64_t v132 = 0;
              long long v223 = *(_OWORD *)(a1 + 200);
              uint64_t v224 = *(void *)(a1 + 216);
              *(void *)(a1 + 200) = 0;
              *(void *)(a1 + 208) = 0;
              *(void *)(a1 + 216) = 0;
              uint64_t v133 = a1;
              do
              {
                uint64_t v134 = v133 + 224 * v132 + 224;
                uint64_t v135 = 2 * v132;
                uint64_t v132 = (2 * v132) | 1;
                if (v135 + 2 < v125 && *(void *)v134 < *(void *)(v134 + 224))
                {
                  v134 += 224;
                  uint64_t v132 = v135 + 2;
                }
                long long v136 = *(_OWORD *)v134;
                long long v137 = *(_OWORD *)(v134 + 32);
                *(_OWORD *)(v133 + 16) = *(_OWORD *)(v134 + 16);
                *(_OWORD *)(v133 + 32) = v137;
                *(_OWORD *)uint64_t v133 = v136;
                long long v138 = *(_OWORD *)(v134 + 48);
                long long v139 = *(_OWORD *)(v134 + 64);
                long long v140 = *(_OWORD *)(v134 + 80);
                *(void *)(v133 + 96) = *(void *)(v134 + 96);
                *(_OWORD *)(v133 + 64) = v139;
                *(_OWORD *)(v133 + 80) = v140;
                *(_OWORD *)(v133 + 48) = v138;
                uint64_t v141 = (__n128 *)(v134 + 104);
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v133 + 104, (__n128 *)(v134 + 104));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v133 + 136, (__n128 *)(v134 + 136));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v133 + 168, (__n128 *)(v134 + 168));
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v133 + 200));
                *(_OWORD *)(v133 + 200) = *(_OWORD *)(v134 + 200);
                *(void *)(v133 + 216) = *(void *)(v134 + 216);
                *(void *)(v134 + 200) = 0;
                *(void *)(v134 + 208) = 0;
                *(void *)(v134 + 216) = 0;
                uint64_t v133 = v134;
              }
              while (v132 <= (uint64_t)((unint64_t)(v125 - 2) >> 1));
              if ((long long *)v134 == v205 - 14)
              {
                long long v173 = v207;
                long long v174 = v209;
                *(_OWORD *)(v134 + 16) = v208;
                *(_OWORD *)(v134 + 32) = v174;
                *(_OWORD *)uint64_t v134 = v173;
                long long v175 = v210;
                long long v176 = v211;
                long long v177 = v212;
                *(void *)(v134 + 96) = v213;
                *(_OWORD *)(v134 + 64) = v176;
                *(_OWORD *)(v134 + 80) = v177;
                *(_OWORD *)(v134 + 48) = v175;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v134 + 104, &v214);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 136, &v217);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 168, &v220);
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v134 + 200));
                *(_OWORD *)(v134 + 200) = v223;
                *(void *)(v134 + 216) = v224;
                long long v223 = 0uLL;
                uint64_t v224 = 0;
              }
              else
              {
                long long v142 = *(v205 - 14);
                long long v143 = *(v205 - 12);
                *(_OWORD *)(v134 + 16) = *(v205 - 13);
                *(_OWORD *)(v134 + 32) = v143;
                *(_OWORD *)uint64_t v134 = v142;
                long long v144 = *(v205 - 11);
                long long v145 = *(v205 - 10);
                long long v146 = *(v205 - 9);
                *(void *)(v134 + 96) = *((void *)v205 - 16);
                *(_OWORD *)(v134 + 64) = v145;
                *(_OWORD *)(v134 + 80) = v146;
                *(_OWORD *)(v134 + 48) = v144;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v134 + 104, (__n128 *)((char *)v205 - 120));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 136, (__n128 *)((char *)v205 - 88));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 168, (__n128 *)((char *)v205 - 56));
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v134 + 200));
                uint64_t v147 = (void *)v205 - 3;
                *(_OWORD *)(v134 + 200) = *(long long *)((char *)v205 - 24);
                *(void *)(v134 + 216) = *((void *)v205 - 1);
                void *v147 = 0;
                v147[1] = 0;
                v147[2] = 0;
                long long v148 = v207;
                long long v149 = v209;
                *(v205 - 13) = v208;
                *(v205 - 12) = v149;
                *(v205 - 14) = v148;
                long long v150 = v210;
                long long v151 = v211;
                long long v152 = v212;
                *((void *)v205 - 16) = v213;
                *(v205 - 10) = v151;
                *(v205 - 9) = v152;
                *(v205 - 11) = v150;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v205 - 120, &v214);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v205 - 88, &v217);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v205 - 56, &v220);
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v205 - 3);
                *(long long *)((char *)v205 - 24) = v223;
                *((void *)v205 - 1) = v224;
                long long v223 = 0uLL;
                uint64_t v224 = 0;
                uint64_t v153 = v134 + 224 - a1;
                if (v153 >= 225)
                {
                  unint64_t v154 = (unint64_t)(((((unint64_t)v153 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                          - 2) >> 1;
                  uint64_t v155 = a1 + 224 * v154;
                  if (*(void *)v155 < *(void *)v134)
                  {
                    long long v156 = *(_OWORD *)v134;
                    long long v157 = *(_OWORD *)(v134 + 32);
                    long long v227 = *(_OWORD *)(v134 + 16);
                    long long v228 = v157;
                    long long v226 = v156;
                    long long v158 = *(_OWORD *)(v134 + 48);
                    long long v159 = *(_OWORD *)(v134 + 64);
                    long long v160 = *(_OWORD *)(v134 + 80);
                    uint64_t v232 = *(void *)(v134 + 96);
                    long long v230 = v159;
                    long long v231 = v160;
                    long long v229 = v158;
                    v233.n128_u8[0] = 0;
                    char v235 = 0;
                    if (*(unsigned char *)(v134 + 128))
                    {
                      __n128 v161 = *v141;
                      uint64_t v234 = *(void *)(v134 + 120);
                      __n128 v233 = v161;
                      *(void *)(v134 + 112) = 0;
                      *(void *)(v134 + 120) = 0;
                      v141->n128_u64[0] = 0;
                      char v235 = 1;
                    }
                    v236.n128_u8[0] = 0;
                    char v238 = 0;
                    if (*(unsigned char *)(v134 + 160))
                    {
                      __n128 v236 = *(__n128 *)(v134 + 136);
                      uint64_t v237 = *(void *)(v134 + 152);
                      *(void *)(v134 + 136) = 0;
                      *(void *)(v134 + 144) = 0;
                      *(void *)(v134 + 152) = 0;
                      char v238 = 1;
                    }
                    __p.n128_u8[0] = 0;
                    char v241 = 0;
                    if (*(unsigned char *)(v134 + 192))
                    {
                      __n128 __p = *(__n128 *)(v134 + 168);
                      uint64_t v240 = *(void *)(v134 + 184);
                      *(void *)(v134 + 168) = 0;
                      *(void *)(v134 + 176) = 0;
                      *(void *)(v134 + 184) = 0;
                      char v241 = 1;
                    }
                    long long v242 = *(_OWORD *)(v134 + 200);
                    uint64_t v243 = *(void *)(v134 + 216);
                    *(void *)(v134 + 200) = 0;
                    *(void *)(v134 + 208) = 0;
                    *(void *)(v134 + 216) = 0;
                    do
                    {
                      uint64_t v162 = v155;
                      long long v163 = *(_OWORD *)v155;
                      long long v164 = *(_OWORD *)(v155 + 32);
                      *(_OWORD *)(v134 + 16) = *(_OWORD *)(v155 + 16);
                      *(_OWORD *)(v134 + 32) = v164;
                      *(_OWORD *)uint64_t v134 = v163;
                      long long v165 = *(_OWORD *)(v155 + 48);
                      long long v166 = *(_OWORD *)(v155 + 64);
                      long long v167 = *(_OWORD *)(v155 + 80);
                      *(void *)(v134 + 96) = *(void *)(v155 + 96);
                      *(_OWORD *)(v134 + 64) = v166;
                      *(_OWORD *)(v134 + 80) = v167;
                      *(_OWORD *)(v134 + 48) = v165;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v134 + 104, (__n128 *)(v155 + 104));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 136, (__n128 *)(v162 + 136));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 168, (__n128 *)(v162 + 168));
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v134 + 200));
                      *(_OWORD *)(v134 + 200) = *(_OWORD *)(v162 + 200);
                      *(void *)(v134 + 216) = *(void *)(v162 + 216);
                      *(void *)(v162 + 200) = 0;
                      *(void *)(v162 + 208) = 0;
                      *(void *)(v162 + 216) = 0;
                      if (!v154) {
                        break;
                      }
                      unint64_t v154 = (v154 - 1) >> 1;
                      uint64_t v155 = a1 + 224 * v154;
                      uint64_t v134 = v162;
                    }
                    while (*(void *)v155 < (unint64_t)v226);
                    long long v168 = v226;
                    long long v169 = v228;
                    *(_OWORD *)(v162 + 16) = v227;
                    *(_OWORD *)(v162 + 32) = v169;
                    *(_OWORD *)uint64_t v162 = v168;
                    long long v170 = v229;
                    long long v171 = v230;
                    long long v172 = v231;
                    *(void *)(v162 + 96) = v232;
                    *(_OWORD *)(v162 + 64) = v171;
                    *(_OWORD *)(v162 + 80) = v172;
                    *(_OWORD *)(v162 + 48) = v170;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v162 + 104, &v233);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v162 + 136, &v236);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v162 + 168, &__p);
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v162 + 200));
                    *(_OWORD *)(v162 + 200) = v242;
                    *(void *)(v162 + 216) = v243;
                    long long v242 = 0uLL;
                    uint64_t v243 = 0;
                    v225 = (void **)&v242;
                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v225);
                    if (v241 && __p.n128_u64[0])
                    {
                      __p.n128_u64[1] = __p.n128_u64[0];
                      operator delete((void *)__p.n128_u64[0]);
                    }
                    if (v238 && v236.n128_u64[0])
                    {
                      v236.n128_u64[1] = v236.n128_u64[0];
                      operator delete((void *)v236.n128_u64[0]);
                    }
                    if (v235 && SHIBYTE(v234) < 0) {
                      operator delete((void *)v233.n128_u64[0]);
                    }
                  }
                }
              }
              *(void *)&long long v226 = &v223;
              std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
              if (v222 && v220.n128_u64[0])
              {
                v220.n128_u64[1] = v220.n128_u64[0];
                operator delete((void *)v220.n128_u64[0]);
              }
              if (v219 && v217.n128_u64[0])
              {
                v217.n128_u64[1] = v217.n128_u64[0];
                operator delete((void *)v217.n128_u64[0]);
              }
              if (v216 && SHIBYTE(v215) < 0) {
                operator delete((void *)v214.n128_u64[0]);
              }
              BOOL v178 = v125-- <= 2;
              unint64_t v9 = v205 - 14;
            }
            while (!v178);
          }
          return;
        }
        unint64_t v12 = v11 >> 1;
        uint64_t v13 = (long long *)(a1 + 224 * (v11 >> 1));
        if ((unint64_t)v10 > 0x7000)
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224 * (v11 >> 1)), v201);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(a1 + 224), (long long *)(224 * v12 + a1 - 224), v200);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(a1 + 448), (long long *)(a1 + 224 + 224 * v12), v199);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(224 * v12 + a1 - 224), v13, (long long *)(a1 + 224 + 224 * v12));
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)a1, v13);
        }
        else
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(a1 + 224 * (v11 >> 1)), (long long *)a1, v201);
        }
        --a3;
        if ((a4 & 1) != 0 || *(void *)(a1 - 224) < *(void *)a1) {
          break;
        }
        long long v42 = *(_OWORD *)a1;
        long long v43 = *(_OWORD *)(a1 + 32);
        long long v227 = *(_OWORD *)(a1 + 16);
        long long v228 = v43;
        long long v226 = v42;
        long long v44 = *(_OWORD *)(a1 + 48);
        long long v45 = *(_OWORD *)(a1 + 64);
        long long v46 = *(_OWORD *)(a1 + 80);
        uint64_t v232 = *(void *)(a1 + 96);
        long long v230 = v45;
        long long v231 = v46;
        long long v229 = v44;
        v233.n128_u8[0] = 0;
        char v235 = 0;
        if (*(unsigned char *)(a1 + 128))
        {
          __n128 v47 = *(__n128 *)(a1 + 104);
          uint64_t v234 = *(void *)(a1 + 120);
          __n128 v233 = v47;
          *(void *)(a1 + 112) = 0;
          *(void *)(a1 + 120) = 0;
          *(void *)(a1 + 104) = 0;
          char v235 = 1;
        }
        v236.n128_u8[0] = 0;
        char v238 = 0;
        if (*(unsigned char *)(a1 + 160))
        {
          __n128 v236 = *(__n128 *)(a1 + 136);
          uint64_t v237 = *(void *)(a1 + 152);
          *(void *)(a1 + 136) = 0;
          *(void *)(a1 + 144) = 0;
          *(void *)(a1 + 152) = 0;
          char v238 = 1;
        }
        __p.n128_u8[0] = 0;
        char v241 = 0;
        if (*(unsigned char *)(a1 + 192))
        {
          __n128 __p = *(__n128 *)(a1 + 168);
          uint64_t v240 = *(void *)(a1 + 184);
          *(void *)(a1 + 168) = 0;
          *(void *)(a1 + 176) = 0;
          *(void *)(a1 + 184) = 0;
          char v241 = 1;
        }
        long long v242 = *(_OWORD *)(a1 + 200);
        uint64_t v243 = *(void *)(a1 + 216);
        *(void *)(a1 + 200) = 0;
        *(void *)(a1 + 208) = 0;
        *(void *)(a1 + 216) = 0;
        unint64_t v48 = v226;
        if ((unint64_t)v226 < *(void *)v201)
        {
          unint64_t v8 = a1;
          do
          {
            unint64_t v49 = *(void *)(v8 + 224);
            v8 += 224;
          }
          while ((unint64_t)v226 >= v49);
        }
        else
        {
          unint64_t v50 = a1 + 224;
          do
          {
            unint64_t v8 = v50;
            if (v50 >= (unint64_t)v206) {
              break;
            }
            v50 += 224;
          }
          while ((unint64_t)v226 >= *(void *)v8);
        }
        long long v51 = v206;
        if (v8 < (unint64_t)v206)
        {
          long long v51 = v206;
          do
          {
            unint64_t v52 = *((void *)v51 - 28);
            v51 -= 14;
          }
          while ((unint64_t)v226 < v52);
        }
        while (v8 < (unint64_t)v51)
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)v8, v51);
          do
          {
            unint64_t v53 = *(void *)(v8 + 224);
            v8 += 224;
          }
          while (v48 >= v53);
          do
          {
            unint64_t v54 = *((void *)v51 - 28);
            v51 -= 14;
          }
          while (v48 < v54);
        }
        uint64_t v55 = (long long *)(v8 - 224);
        if (v8 - 224 != a1)
        {
          long long v56 = *v55;
          long long v57 = *(_OWORD *)(v8 - 192);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 - 208);
          *(_OWORD *)(a1 + 32) = v57;
          *(_OWORD *)a1 = v56;
          long long v58 = *(_OWORD *)(v8 - 176);
          long long v59 = *(_OWORD *)(v8 - 160);
          long long v60 = *(_OWORD *)(v8 - 144);
          *(void *)(a1 + 96) = *(void *)(v8 - 128);
          *(_OWORD *)(a1 + 64) = v59;
          *(_OWORD *)(a1 + 80) = v60;
          *(_OWORD *)(a1 + 48) = v58;
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v8 - 120));
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v8 - 88));
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v8 - 56));
          std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
          *(_OWORD *)(a1 + 200) = *(_OWORD *)(v8 - 24);
          *(void *)(a1 + 216) = *(void *)(v8 - 8);
          *(void *)(v8 - 24) = 0;
          *(void *)(v8 - 16) = 0;
          *(void *)(v8 - 8) = 0;
        }
        long long v61 = v226;
        long long v62 = v228;
        *(_OWORD *)(v8 - 208) = v227;
        *(_OWORD *)(v8 - 192) = v62;
        long long *v55 = v61;
        long long v63 = v229;
        long long v64 = v230;
        long long v65 = v231;
        *(void *)(v8 - 128) = v232;
        *(_OWORD *)(v8 - 160) = v64;
        *(_OWORD *)(v8 - 144) = v65;
        *(_OWORD *)(v8 - 176) = v63;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v8 - 120, &v233);
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 88, &v236);
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 56, &__p);
        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v8 - 24));
        *(_OWORD *)(v8 - 24) = v242;
        *(void *)(v8 - 8) = v243;
        long long v242 = 0uLL;
        uint64_t v243 = 0;
        *(void *)&long long v207 = &v242;
        std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
        if (v241 && __p.n128_u64[0])
        {
          __p.n128_u64[1] = __p.n128_u64[0];
          operator delete((void *)__p.n128_u64[0]);
        }
        if (v238 && v236.n128_u64[0])
        {
          v236.n128_u64[1] = v236.n128_u64[0];
          operator delete((void *)v236.n128_u64[0]);
        }
        if (v235 && SHIBYTE(v234) < 0) {
          operator delete((void *)v233.n128_u64[0]);
        }
LABEL_46:
        a4 = 0;
      }
      long long v14 = *(_OWORD *)a1;
      long long v15 = *(_OWORD *)(a1 + 32);
      long long v227 = *(_OWORD *)(a1 + 16);
      long long v228 = v15;
      long long v226 = v14;
      long long v16 = *(_OWORD *)(a1 + 48);
      long long v17 = *(_OWORD *)(a1 + 64);
      long long v18 = *(_OWORD *)(a1 + 80);
      uint64_t v232 = *(void *)(a1 + 96);
      long long v230 = v17;
      long long v231 = v18;
      long long v229 = v16;
      v233.n128_u8[0] = 0;
      char v235 = 0;
      if (*(unsigned char *)(a1 + 128))
      {
        __n128 v19 = *(__n128 *)(a1 + 104);
        uint64_t v234 = *(void *)(a1 + 120);
        __n128 v233 = v19;
        *(void *)(a1 + 112) = 0;
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 104) = 0;
        char v235 = 1;
      }
      v236.n128_u8[0] = 0;
      char v238 = 0;
      if (*(unsigned char *)(a1 + 160))
      {
        __n128 v236 = *(__n128 *)(a1 + 136);
        uint64_t v237 = *(void *)(a1 + 152);
        *(void *)(a1 + 136) = 0;
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        char v238 = 1;
      }
      __p.n128_u8[0] = 0;
      char v241 = 0;
      if (*(unsigned char *)(a1 + 192))
      {
        __n128 __p = *(__n128 *)(a1 + 168);
        uint64_t v240 = *(void *)(a1 + 184);
        *(void *)(a1 + 168) = 0;
        *(void *)(a1 + 176) = 0;
        *(void *)(a1 + 184) = 0;
        char v241 = 1;
      }
      uint64_t v20 = 0;
      long long v242 = *(_OWORD *)(a1 + 200);
      uint64_t v243 = *(void *)(a1 + 216);
      *(void *)(a1 + 200) = 0;
      *(void *)(a1 + 208) = 0;
      *(void *)(a1 + 216) = 0;
      unint64_t v21 = v226;
      do
      {
        unint64_t v22 = *(void *)(a1 + v20 + 224);
        v20 += 224;
      }
      while (v22 < (unint64_t)v226);
      unint64_t v23 = a1 + v20;
      uint64_t v24 = v206;
      if (v20 == 224)
      {
        uint64_t v24 = v206;
        do
        {
          if (v23 >= (unint64_t)v24) {
            break;
          }
          unint64_t v26 = *((void *)v24 - 28);
          v24 -= 14;
        }
        while (v26 >= (unint64_t)v226);
      }
      else
      {
        do
        {
          unint64_t v25 = *((void *)v24 - 28);
          v24 -= 14;
        }
        while (v25 >= (unint64_t)v226);
      }
      unint64_t v8 = a1 + v20;
      if (v23 < (unint64_t)v24)
      {
        uint64_t v27 = v24;
        do
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)v8, v27);
          do
          {
            unint64_t v28 = *(void *)(v8 + 224);
            v8 += 224;
          }
          while (v28 < v21);
          do
          {
            unint64_t v29 = *((void *)v27 - 28);
            v27 -= 14;
          }
          while (v29 >= v21);
        }
        while (v8 < (unint64_t)v27);
      }
      long long v30 = (long long *)(v8 - 224);
      if (v8 - 224 != a1)
      {
        long long v31 = *v30;
        long long v32 = *(_OWORD *)(v8 - 192);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 - 208);
        *(_OWORD *)(a1 + 32) = v32;
        *(_OWORD *)a1 = v31;
        long long v33 = *(_OWORD *)(v8 - 176);
        long long v34 = *(_OWORD *)(v8 - 160);
        long long v35 = *(_OWORD *)(v8 - 144);
        *(void *)(a1 + 96) = *(void *)(v8 - 128);
        *(_OWORD *)(a1 + 64) = v34;
        *(_OWORD *)(a1 + 80) = v35;
        *(_OWORD *)(a1 + 48) = v33;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v8 - 120));
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v8 - 88));
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v8 - 56));
        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
        *(_OWORD *)(a1 + 200) = *(_OWORD *)(v8 - 24);
        *(void *)(a1 + 216) = *(void *)(v8 - 8);
        *(void *)(v8 - 24) = 0;
        *(void *)(v8 - 16) = 0;
        *(void *)(v8 - 8) = 0;
      }
      long long v36 = v226;
      long long v37 = v228;
      *(_OWORD *)(v8 - 208) = v227;
      *(_OWORD *)(v8 - 192) = v37;
      *long long v30 = v36;
      long long v38 = v229;
      long long v39 = v230;
      long long v40 = v231;
      *(void *)(v8 - 128) = v232;
      *(_OWORD *)(v8 - 160) = v39;
      *(_OWORD *)(v8 - 144) = v40;
      *(_OWORD *)(v8 - 176) = v38;
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v8 - 120, &v233);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 88, &v236);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 56, &__p);
      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v8 - 24));
      *(_OWORD *)(v8 - 24) = v242;
      *(void *)(v8 - 8) = v243;
      long long v242 = 0uLL;
      uint64_t v243 = 0;
      *(void *)&long long v207 = &v242;
      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
      if (v241 && __p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (v238 && v236.n128_u64[0])
      {
        v236.n128_u64[1] = v236.n128_u64[0];
        operator delete((void *)v236.n128_u64[0]);
      }
      if (v235 && SHIBYTE(v234) < 0) {
        operator delete((void *)v233.n128_u64[0]);
      }
      if (v23 < (unint64_t)v24)
      {
LABEL_45:
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(a1, v8 - 224, a3, a4 & 1);
        goto LABEL_46;
      }
      BOOL v41 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((long long *)a1, (long long *)(v8 - 224));
      if (_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((long long *)v8, v206))
      {
        break;
      }
      if (!v41) {
        goto LABEL_45;
      }
    }
    a2 = (long long *)(v8 - 224);
    if (!v41) {
      continue;
    }
    break;
  }
}

void _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_(long long *a1, long long *a2, long long *a3)
{
  char v5 = a1;
  unint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)a3;
  if (*(void *)a2 >= *(void *)a1)
  {
    if (v7 >= v6) {
      return;
    }
    std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a2, a3);
    if (*(void *)a2 >= *(void *)v5) {
      return;
    }
    a1 = v5;
    unint64_t v8 = a2;
  }
  else
  {
    if (v7 >= v6)
    {
      std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1, a2);
      if (*(void *)a3 >= *(void *)a2) {
        return;
      }
      a1 = a2;
    }
    unint64_t v8 = a3;
  }

  std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1, v8);
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_(long long *a1, long long *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((void *)a2 - 28) < *(void *)a1)
      {
        unint64_t v6 = a1;
        unint64_t v7 = a2 - 14;
        goto LABEL_4;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_(a1, a1 + 14, a2 - 14);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_(a1, a1 + 14, a1 + 28, a2 - 14);
      return 1;
    case 5:
      uint64_t v24 = a1 + 28;
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_(a1, a1 + 14, a1 + 28, a1 + 42);
      unint64_t v26 = *((void *)a2 - 28);
      unint64_t v25 = a2 - 14;
      if (v26 < *((void *)a1 + 84))
      {
        std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1 + 42, v25);
        if (*((void *)a1 + 84) < *v24)
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1 + 28, a1 + 42);
          if (*v24 < *((void *)a1 + 28))
          {
            std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1 + 14, a1 + 28);
            if (*((void *)a1 + 28) < *(void *)a1)
            {
              unint64_t v6 = a1;
              unint64_t v7 = a1 + 14;
LABEL_4:
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(v6, v7);
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v8 = a1 + 28;
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_(a1, a1 + 14, a1 + 28);
      unint64_t v9 = a1 + 42;
      BOOL result = 1;
      if (a1 + 42 == a2) {
        return result;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (*(void *)v9 < *(void *)v8)
    {
      long long v31 = v9[4];
      long long v32 = v9[5];
      uint64_t v33 = *((void *)v9 + 12);
      long long v27 = *v9;
      long long v28 = v9[1];
      long long v29 = v9[2];
      long long v30 = v9[3];
      v34.n128_u8[0] = 0;
      char v36 = 0;
      if (*((unsigned char *)v9 + 128))
      {
        __n128 v34 = *(__n128 *)((char *)v9 + 104);
        uint64_t v35 = *((void *)v9 + 15);
        *((void *)v9 + 14) = 0;
        *((void *)v9 + 15) = 0;
        *((void *)v9 + 13) = 0;
        char v36 = 1;
      }
      v37.n128_u8[0] = 0;
      char v39 = 0;
      if (*((unsigned char *)v9 + 160))
      {
        __n128 v37 = *(__n128 *)((char *)v9 + 136);
        uint64_t v38 = *((void *)v9 + 19);
        *((void *)v9 + 18) = 0;
        *((void *)v9 + 19) = 0;
        *((void *)v9 + 17) = 0;
        char v39 = 1;
      }
      __p.n128_u8[0] = 0;
      char v42 = 0;
      if (*((unsigned char *)v9 + 192))
      {
        __n128 __p = *(__n128 *)((char *)v9 + 168);
        uint64_t v41 = *((void *)v9 + 23);
        *((void *)v9 + 22) = 0;
        *((void *)v9 + 23) = 0;
        *((void *)v9 + 21) = 0;
        char v42 = 1;
      }
      long long v43 = *(long long *)((char *)v9 + 200);
      uint64_t v44 = *((void *)v9 + 27);
      *((void *)v9 + 26) = 0;
      *((void *)v9 + 27) = 0;
      *((void *)v9 + 25) = 0;
      uint64_t v12 = v10;
      while (1)
      {
        uint64_t v13 = v12;
        long long v14 = (char *)a1 + v12;
        long long v15 = *(long long *)((char *)a1 + v12 + 528);
        *((_OWORD *)v14 + 46) = *(long long *)((char *)a1 + v12 + 512);
        *((_OWORD *)v14 + 47) = v15;
        *((void *)v14 + 96) = *(void *)((char *)a1 + v12 + 544);
        long long v16 = *(long long *)((char *)a1 + v12 + 464);
        *((_OWORD *)v14 + 42) = *((_OWORD *)v14 + 28);
        *((_OWORD *)v14 + 43) = v16;
        long long v17 = *(long long *)((char *)a1 + v12 + 496);
        *((_OWORD *)v14 + 44) = *(long long *)((char *)a1 + v12 + 480);
        *((_OWORD *)v14 + 45) = v17;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)a1 + v12 + 776, (__n128 *)((char *)a1 + v12 + 552));
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)(v14 + 808), (__n128 *)(v14 + 584));
        long long v18 = (char *)a1 + v13;
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)a1 + v13 + 840, (__n128 *)((char *)a1 + v13 + 616));
        __n128 v19 = (long long *)((char *)a1 + v13 + 648);
        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)((char *)a1 + v13 + 872));
        *(_OWORD *)(v18 + 872) = *v19;
        *((void *)v18 + 111) = *((void *)v18 + 83);
        *((void *)v18 + 83) = 0;
        *__n128 v19 = 0u;
        if (v13 == -448) {
          break;
        }
        uint64_t v12 = v13 - 224;
        if ((unint64_t)v27 >= *(void *)((char *)a1 + v13 + 224))
        {
          uint64_t v20 = (uint64_t)a1 + v12 + 672;
          goto LABEL_19;
        }
      }
      uint64_t v20 = (uint64_t)a1;
LABEL_19:
      *(_OWORD *)(v20 + 64) = v31;
      *(_OWORD *)(v20 + 80) = v32;
      *(void *)(v20 + 96) = v33;
      *(_OWORD *)uint64_t v20 = v27;
      *(_OWORD *)(v20 + 16) = v28;
      unint64_t v21 = (uint64_t *)((char *)a1 + v13);
      *(_OWORD *)(v20 + 32) = v29;
      *(_OWORD *)(v20 + 48) = v30;
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v21 + 69), &v34);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)(v21 + 73), &v37);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)(v21 + 77), &__p);
      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(v21 + 81);
      uint64_t v22 = *((void *)&v43 + 1);
      v21[81] = v43;
      uint64_t v23 = v44;
      *(void *)(v20 + 208) = v22;
      *(void *)(v20 + 216) = v23;
      uint64_t v44 = 0;
      long long v43 = 0uLL;
      long long v45 = (void **)&v43;
      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v45);
      if (v42 && __p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (v39 && v37.n128_u64[0])
      {
        v37.n128_u64[1] = v37.n128_u64[0];
        operator delete((void *)v37.n128_u64[0]);
      }
      if (v36 && SHIBYTE(v35) < 0) {
        operator delete((void *)v34.n128_u64[0]);
      }
      if (++v11 == 8) {
        return v9 + 14 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 224;
    v9 += 14;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(long long *a1, long long *a2)
{
  long long v13 = a1[4];
  long long v14 = a1[5];
  uint64_t v15 = *((void *)a1 + 12);
  long long v9 = *a1;
  long long v10 = a1[1];
  long long v11 = a1[2];
  long long v12 = a1[3];
  v16.n128_u8[0] = 0;
  char v18 = 0;
  if (*((unsigned char *)a1 + 128))
  {
    __n128 v16 = *(__n128 *)((char *)a1 + 104);
    uint64_t v17 = *((void *)a1 + 15);
    *((void *)a1 + 14) = 0;
    *((void *)a1 + 15) = 0;
    *((void *)a1 + 13) = 0;
    char v18 = 1;
  }
  v19.n128_u8[0] = 0;
  char v21 = 0;
  if (*((unsigned char *)a1 + 160))
  {
    __n128 v19 = *(__n128 *)((char *)a1 + 136);
    uint64_t v20 = *((void *)a1 + 19);
    *((void *)a1 + 18) = 0;
    *((void *)a1 + 19) = 0;
    *((void *)a1 + 17) = 0;
    char v21 = 1;
  }
  __p.n128_u8[0] = 0;
  char v24 = 0;
  if (*((unsigned char *)a1 + 192))
  {
    __n128 __p = *(__n128 *)((char *)a1 + 168);
    uint64_t v23 = *((void *)a1 + 23);
    *((void *)a1 + 22) = 0;
    *((void *)a1 + 23) = 0;
    *((void *)a1 + 21) = 0;
    char v24 = 1;
  }
  long long v25 = *(long long *)((char *)a1 + 200);
  uint64_t v26 = *((void *)a1 + 27);
  *((void *)a1 + 26) = 0;
  *((void *)a1 + 27) = 0;
  *((void *)a1 + 25) = 0;
  long long v5 = a2[4];
  long long v4 = a2[5];
  long long v6 = a2[3];
  *((void *)a1 + 12) = *((void *)a2 + 12);
  a1[4] = v5;
  a1[5] = v4;
  a1[3] = v6;
  long long v7 = *a2;
  long long v8 = a2[2];
  a1[1] = a2[1];
  a1[2] = v8;
  *a1 = v7;
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)a1 + 104, (__n128 *)((char *)a2 + 104));
  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)a1 + 136, (__n128 *)((char *)a2 + 136));
  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)a1 + 168, (__n128 *)((char *)a2 + 168));
  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)a1 + 25);
  *(long long *)((char *)a1 + 200) = *(long long *)((char *)a2 + 200);
  *((void *)a1 + 27) = *((void *)a2 + 27);
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  a2[4] = v13;
  a2[5] = v14;
  *((void *)a2 + 12) = v15;
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v12;
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)a2 + 104, &v16);
  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)a2 + 136, &v19);
  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)a2 + 168, &__p);
  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)a2 + 25);
  *(long long *)((char *)a2 + 200) = v25;
  *((void *)a2 + 27) = v26;
  uint64_t v26 = 0;
  long long v25 = 0uLL;
  long long v27 = (void **)&v25;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (v24 && __p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v21 && v19.n128_u64[0])
  {
    v19.n128_u64[1] = v19.n128_u64[0];
    operator delete((void *)v19.n128_u64[0]);
  }
  if (v18)
  {
    if (SHIBYTE(v17) < 0) {
      operator delete((void *)v16.n128_u64[0]);
    }
  }
}

void _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_(long long *a1, long long *a2, long long *a3, long long *a4)
{
  _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_(a1, a2, a3);
  if (*(void *)a4 < *(void *)a3)
  {
    std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a3, a4);
    if (*(void *)a3 < *(void *)a2)
    {
      std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a2, a3);
      if (*(void *)a2 < *(void *)a1)
      {
        std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1, a2);
      }
    }
  }
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    v201 = a2 - 14;
    uint64_t v206 = a2;
    v199 = a2 - 42;
    v200 = a2 - 28;
    unint64_t v8 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v8;
        long long v9 = v206;
        uint64_t v10 = (uint64_t)v206 - v8;
        unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v206 - v8) >> 5);
        if (!(!v5 & v4))
        {
          switch(v11)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              int64_t v66 = v206 - 14;
              if (*((void *)v206 - 28) >= *(void *)a1) {
                return;
              }
              int64_t v67 = (long long *)a1;
              break;
            case 3uLL:
              _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224), v201);
              return;
            case 4uLL:
              _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224), (long long *)(a1 + 448), v201);
              return;
            case 5uLL:
              uint64_t v68 = (void *)(a1 + 448);
              _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224), (long long *)(a1 + 448), (long long *)(a1 + 672));
              if (*((void *)v206 - 28) >= *(void *)(a1 + 672)) {
                return;
              }
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)(a1 + 672), v206 - 14);
              if (*(void *)(a1 + 672) >= *v68) {
                return;
              }
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)(a1 + 448), (long long *)(a1 + 672));
              if (*v68 >= *(void *)(a1 + 224)) {
                return;
              }
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)(a1 + 224), (long long *)(a1 + 448));
              if (*(void *)(a1 + 224) >= *(void *)a1) {
                return;
              }
              int64_t v67 = (long long *)a1;
              int64_t v66 = (long long *)(a1 + 224);
              break;
            default:
              JUMPOUT(0);
          }
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(v67, v66);
          return;
        }
        if (v10 <= 5375)
        {
          if (a4)
          {
            if ((long long *)a1 != v206)
            {
              unint64_t v69 = a1 + 224;
              if ((long long *)(a1 + 224) != v206)
              {
                uint64_t v70 = 0;
                unint64_t v71 = a1;
                do
                {
                  unint64_t v72 = v69;
                  if (*(void *)(v71 + 224) < *(void *)v71)
                  {
                    long long v73 = *(_OWORD *)v69;
                    long long v74 = *(_OWORD *)(v69 + 32);
                    long long v227 = *(_OWORD *)(v69 + 16);
                    long long v228 = v74;
                    long long v226 = v73;
                    long long v75 = *(_OWORD *)(v69 + 48);
                    long long v76 = *(_OWORD *)(v69 + 64);
                    long long v77 = *(_OWORD *)(v69 + 80);
                    uint64_t v232 = *(void *)(v69 + 96);
                    long long v230 = v76;
                    long long v231 = v77;
                    long long v229 = v75;
                    v233.n128_u8[0] = 0;
                    char v235 = 0;
                    if (*(unsigned char *)(v71 + 352))
                    {
                      uint64_t v234 = *(void *)(v71 + 344);
                      __n128 v233 = *(__n128 *)(v71 + 328);
                      *(void *)(v71 + 336) = 0;
                      *(void *)(v71 + 344) = 0;
                      *(void *)(v71 + 328) = 0;
                      char v235 = 1;
                    }
                    BOOL v78 = (__n128 *)(v71 + 360);
                    v236.n128_u8[0] = 0;
                    char v238 = 0;
                    if (*(unsigned char *)(v71 + 384))
                    {
                      __n128 v236 = *v78;
                      uint64_t v237 = *(void *)(v71 + 376);
                      v78->n128_u64[0] = 0;
                      *(void *)(v71 + 368) = 0;
                      *(void *)(v71 + 376) = 0;
                      char v238 = 1;
                    }
                    __p.n128_u8[0] = 0;
                    char v241 = 0;
                    if (*(unsigned char *)(v71 + 416))
                    {
                      __n128 __p = *(__n128 *)(v71 + 392);
                      uint64_t v240 = *(void *)(v71 + 408);
                      *(void *)(v71 + 392) = 0;
                      *(void *)(v71 + 400) = 0;
                      *(void *)(v71 + 408) = 0;
                      char v241 = 1;
                    }
                    long long v242 = *(_OWORD *)(v71 + 424);
                    uint64_t v243 = *(void *)(v71 + 440);
                    *(void *)(v71 + 424) = 0;
                    *(void *)(v71 + 432) = 0;
                    *(void *)(v71 + 440) = 0;
                    uint64_t v79 = v70;
                    while (1)
                    {
                      uint64_t v80 = v79;
                      uint64_t v81 = a1 + v79;
                      long long v82 = *(_OWORD *)(a1 + v79 + 80);
                      *(_OWORD *)(v81 + 288) = *(_OWORD *)(a1 + v79 + 64);
                      *(_OWORD *)(v81 + 304) = v82;
                      *(void *)(v81 + 320) = *(void *)(a1 + v79 + 96);
                      long long v83 = *(_OWORD *)(a1 + v79 + 16);
                      *(_OWORD *)(v81 + 224) = *(_OWORD *)v81;
                      *(_OWORD *)(v81 + 240) = v83;
                      long long v84 = *(_OWORD *)(a1 + v79 + 48);
                      *(_OWORD *)(v81 + 256) = *(_OWORD *)(a1 + v79 + 32);
                      *(_OWORD *)(v81 + 272) = v84;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v79 + 328, (__n128 *)(a1 + v79 + 104));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v81 + 360, (__n128 *)(v81 + 136));
                      uint64_t v85 = a1 + v80;
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v80 + 392, (__n128 *)(a1 + v80 + 168));
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + v80 + 424));
                      *(_OWORD *)(v85 + 424) = *(_OWORD *)(v85 + 200);
                      *(void *)(v85 + 440) = *(void *)(v85 + 216);
                      *(void *)(v85 + 208) = 0;
                      *(void *)(v85 + 216) = 0;
                      *(void *)(v85 + 200) = 0;
                      if (!v80) {
                        break;
                      }
                      uint64_t v79 = v80 - 224;
                      if ((unint64_t)v226 >= *(void *)(a1 + v80 - 224))
                      {
                        unint64_t v86 = a1 + v80;
                        goto LABEL_108;
                      }
                    }
                    unint64_t v86 = a1;
LABEL_108:
                    long long v87 = v226;
                    long long v88 = v228;
                    *(_OWORD *)(v86 + 16) = v227;
                    *(_OWORD *)(v86 + 32) = v88;
                    *(_OWORD *)unint64_t v86 = v87;
                    long long v89 = v229;
                    long long v90 = v230;
                    long long v91 = v231;
                    *(void *)(v86 + 96) = v232;
                    *(_OWORD *)(v86 + 64) = v90;
                    *(_OWORD *)(v86 + 80) = v91;
                    *(_OWORD *)(v86 + 48) = v89;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v80 + 104, &v233);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v80 + 136, &v236);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v80 + 168, &__p);
                    BOOL v92 = (uint64_t *)(a1 + v80 + 200);
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(v92);
                    *BOOL v92 = v242;
                    *(void *)(v86 + 208) = *((void *)&v242 + 1);
                    *(void *)(v86 + 216) = v243;
                    long long v242 = 0uLL;
                    uint64_t v243 = 0;
                    *(void *)&long long v207 = &v242;
                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                    if (v241 && __p.n128_u64[0])
                    {
                      __p.n128_u64[1] = __p.n128_u64[0];
                      operator delete((void *)__p.n128_u64[0]);
                    }
                    if (v238 && v236.n128_u64[0])
                    {
                      v236.n128_u64[1] = v236.n128_u64[0];
                      operator delete((void *)v236.n128_u64[0]);
                    }
                    if (v235 && SHIBYTE(v234) < 0) {
                      operator delete((void *)v233.n128_u64[0]);
                    }
                    long long v9 = v206;
                  }
                  unint64_t v69 = v72 + 224;
                  v70 += 224;
                  unint64_t v71 = v72;
                }
                while ((long long *)(v72 + 224) != v9);
              }
            }
          }
          else if ((long long *)a1 != v206)
          {
            unint64_t v179 = a1 + 224;
            if ((long long *)(a1 + 224) != v206)
            {
              unint64_t v180 = a1 - 224;
              do
              {
                unint64_t v181 = v179;
                if (*(void *)(a1 + 224) < *(void *)a1)
                {
                  long long v182 = *(_OWORD *)v179;
                  long long v183 = *(_OWORD *)(v179 + 32);
                  long long v227 = *(_OWORD *)(v179 + 16);
                  long long v228 = v183;
                  long long v226 = v182;
                  long long v184 = *(_OWORD *)(v179 + 48);
                  long long v185 = *(_OWORD *)(v179 + 64);
                  long long v186 = *(_OWORD *)(v179 + 80);
                  uint64_t v232 = *(void *)(v179 + 96);
                  long long v230 = v185;
                  long long v231 = v186;
                  long long v229 = v184;
                  v233.n128_u8[0] = 0;
                  char v235 = 0;
                  if (*(unsigned char *)(a1 + 352))
                  {
                    uint64_t v234 = *(void *)(a1 + 344);
                    __n128 v233 = *(__n128 *)(a1 + 328);
                    *(void *)(a1 + 336) = 0;
                    *(void *)(a1 + 344) = 0;
                    *(void *)(a1 + 328) = 0;
                    char v235 = 1;
                  }
                  unsigned int v187 = (__n128 *)(a1 + 360);
                  v236.n128_u8[0] = 0;
                  char v238 = 0;
                  if (*(unsigned char *)(a1 + 384))
                  {
                    __n128 v236 = *v187;
                    uint64_t v237 = *(void *)(a1 + 376);
                    v187->n128_u64[0] = 0;
                    *(void *)(a1 + 368) = 0;
                    *(void *)(a1 + 376) = 0;
                    char v238 = 1;
                  }
                  __p.n128_u8[0] = 0;
                  char v241 = 0;
                  if (*(unsigned char *)(a1 + 416))
                  {
                    __n128 __p = *(__n128 *)(a1 + 392);
                    uint64_t v240 = *(void *)(a1 + 408);
                    *(void *)(a1 + 392) = 0;
                    *(void *)(a1 + 400) = 0;
                    *(void *)(a1 + 408) = 0;
                    char v241 = 1;
                  }
                  long long v242 = *(_OWORD *)(a1 + 424);
                  uint64_t v243 = *(void *)(a1 + 440);
                  *(void *)(a1 + 424) = 0;
                  *(void *)(a1 + 432) = 0;
                  *(void *)(a1 + 440) = 0;
                  unint64_t v188 = v180;
                  do
                  {
                    long long v189 = *(_OWORD *)(v188 + 304);
                    *(_OWORD *)(v188 + 512) = *(_OWORD *)(v188 + 288);
                    *(_OWORD *)(v188 + 528) = v189;
                    *(void *)(v188 + 544) = *(void *)(v188 + 320);
                    long long v190 = *(_OWORD *)(v188 + 240);
                    *(_OWORD *)(v188 + 448) = *(_OWORD *)(v188 + 224);
                    *(_OWORD *)(v188 + 464) = v190;
                    long long v191 = *(_OWORD *)(v188 + 272);
                    *(_OWORD *)(v188 + 480) = *(_OWORD *)(v188 + 256);
                    *(_OWORD *)(v188 + 496) = v191;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v188 + 552, (__n128 *)(v188 + 328));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 584, (__n128 *)(v188 + 360));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 616, (__n128 *)(v188 + 392));
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v188 + 648));
                    *(_OWORD *)(v188 + 648) = *(_OWORD *)(v188 + 424);
                    *(void *)(v188 + 664) = *(void *)(v188 + 440);
                    *(void *)(v188 + 424) = 0;
                    *(void *)(v188 + 432) = 0;
                    *(void *)(v188 + 440) = 0;
                    unint64_t v192 = *(void *)v188;
                    v188 -= 224;
                  }
                  while ((unint64_t)v226 < v192);
                  long long v193 = v226;
                  long long v194 = v228;
                  *(_OWORD *)(v188 + 464) = v227;
                  *(_OWORD *)(v188 + 480) = v194;
                  *(_OWORD *)(v188 + 448) = v193;
                  long long v195 = v229;
                  long long v196 = v230;
                  long long v197 = v231;
                  *(void *)(v188 + 544) = v232;
                  *(_OWORD *)(v188 + 512) = v196;
                  *(_OWORD *)(v188 + 528) = v197;
                  *(_OWORD *)(v188 + 496) = v195;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v188 + 552, &v233);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 584, &v236);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 616, &__p);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v188 + 648));
                  *(_OWORD *)(v188 + 648) = v242;
                  *(void *)(v188 + 664) = v243;
                  long long v242 = 0uLL;
                  uint64_t v243 = 0;
                  *(void *)&long long v207 = &v242;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                  if (v241 && __p.n128_u64[0])
                  {
                    __p.n128_u64[1] = __p.n128_u64[0];
                    operator delete((void *)__p.n128_u64[0]);
                  }
                  if (v238 && v236.n128_u64[0])
                  {
                    v236.n128_u64[1] = v236.n128_u64[0];
                    operator delete((void *)v236.n128_u64[0]);
                  }
                  if (v235 && SHIBYTE(v234) < 0) {
                    operator delete((void *)v233.n128_u64[0]);
                  }
                  long long v9 = v206;
                }
                unint64_t v179 = v181 + 224;
                v180 += 224;
                a1 = v181;
              }
              while ((long long *)(v181 + 224) != v9);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((long long *)a1 != v206)
          {
            int64_t v204 = (v11 - 2) >> 1;
            int64_t v93 = v204;
            do
            {
              int64_t v94 = v93;
              if (v204 >= v93)
              {
                uint64_t v95 = (2 * v93) | 1;
                unint64_t v96 = (long long *)(a1 + 224 * v95);
                if (2 * v94 + 2 < (uint64_t)v11)
                {
                  unint64_t v99 = *(void *)v96;
                  unint64_t v97 = *((void *)v96 + 28);
                  BOOL v98 = *(void *)v96 >= v97;
                  if (*(void *)v96 <= v97) {
                    unint64_t v99 = *((void *)v96 + 28);
                  }
                  if (*(void *)v96 < v97) {
                    v96 += 14;
                  }
                  if (!v98) {
                    uint64_t v95 = 2 * v94 + 2;
                  }
                }
                else
                {
                  unint64_t v99 = *(void *)v96;
                }
                unint64_t v100 = a1 + 224 * v94;
                if (v99 >= *(void *)v100)
                {
                  long long v101 = *(_OWORD *)v100;
                  long long v102 = *(_OWORD *)(v100 + 32);
                  long long v227 = *(_OWORD *)(v100 + 16);
                  long long v228 = v102;
                  long long v226 = v101;
                  long long v103 = *(_OWORD *)(v100 + 48);
                  long long v104 = *(_OWORD *)(v100 + 64);
                  long long v105 = *(_OWORD *)(v100 + 80);
                  uint64_t v232 = *(void *)(v100 + 96);
                  long long v230 = v104;
                  long long v231 = v105;
                  long long v229 = v103;
                  v233.n128_u8[0] = 0;
                  char v235 = 0;
                  if (*(unsigned char *)(a1 + 224 * v94 + 128))
                  {
                    unint64_t v106 = a1 + 224 * v94;
                    __n128 v107 = *(__n128 *)(v106 + 104);
                    uint64_t v234 = *(void *)(v106 + 120);
                    __n128 v233 = v107;
                    *(void *)(v106 + 112) = 0;
                    *(void *)(v106 + 120) = 0;
                    *(void *)(v106 + 104) = 0;
                    char v235 = 1;
                  }
                  v236.n128_u8[0] = 0;
                  char v238 = 0;
                  if (*(unsigned char *)(a1 + 224 * v94 + 160))
                  {
                    unint64_t v108 = a1 + 224 * v94;
                    __n128 v236 = *(__n128 *)(v108 + 136);
                    uint64_t v237 = *(void *)(v108 + 152);
                    *(void *)(v108 + 136) = 0;
                    *(void *)(v108 + 144) = 0;
                    *(void *)(v108 + 152) = 0;
                    char v238 = 1;
                  }
                  __p.n128_u8[0] = 0;
                  char v241 = 0;
                  if (*(unsigned char *)(a1 + 224 * v94 + 192))
                  {
                    unint64_t v109 = a1 + 224 * v94;
                    __n128 __p = *(__n128 *)(v109 + 168);
                    uint64_t v240 = *(void *)(v109 + 184);
                    *(void *)(v109 + 168) = 0;
                    *(void *)(v109 + 176) = 0;
                    *(void *)(v109 + 184) = 0;
                    char v241 = 1;
                  }
                  int64_t v202 = v94;
                  unint64_t v110 = a1 + 224 * v94;
                  long long v242 = *(_OWORD *)(v110 + 200);
                  uint64_t v243 = *(void *)(v110 + 216);
                  *(void *)(v110 + 200) = 0;
                  *(void *)(v110 + 208) = 0;
                  *(void *)(v110 + 216) = 0;
                  do
                  {
                    long long v111 = v96;
                    long long v112 = *v96;
                    long long v113 = v96[2];
                    *(_OWORD *)(v100 + 16) = v96[1];
                    *(_OWORD *)(v100 + 32) = v113;
                    *(_OWORD *)unint64_t v100 = v112;
                    long long v114 = v96[3];
                    long long v115 = v96[4];
                    long long v116 = v96[5];
                    *(void *)(v100 + 96) = *((void *)v96 + 12);
                    *(_OWORD *)(v100 + 64) = v115;
                    *(_OWORD *)(v100 + 80) = v116;
                    *(_OWORD *)(v100 + 48) = v114;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v100 + 104, (__n128 *)((char *)v96 + 104));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v100 + 136, (__n128 *)((char *)v111 + 136));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v100 + 168, (__n128 *)((char *)v111 + 168));
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v100 + 200));
                    *(_OWORD *)(v100 + 200) = *(long long *)((char *)v111 + 200);
                    *(void *)(v100 + 216) = *((void *)v111 + 27);
                    *((void *)v111 + 25) = 0;
                    *((void *)v111 + 26) = 0;
                    *((void *)v111 + 27) = 0;
                    if (v204 < v95) {
                      break;
                    }
                    unint64_t v96 = (long long *)(a1 + 224 * ((2 * v95) | 1));
                    if (2 * v95 + 2 < (uint64_t)v11)
                    {
                      unint64_t v119 = *(void *)v96;
                      unint64_t v117 = *((void *)v96 + 28);
                      BOOL v118 = *(void *)v96 >= v117;
                      if (*(void *)v96 <= v117) {
                        unint64_t v119 = *((void *)v96 + 28);
                      }
                      if (*(void *)v96 < v117) {
                        v96 += 14;
                      }
                      uint64_t v95 = v118 ? (2 * v95) | 1 : 2 * v95 + 2;
                    }
                    else
                    {
                      unint64_t v119 = *(void *)v96;
                      uint64_t v95 = (2 * v95) | 1;
                    }
                    unint64_t v100 = (unint64_t)v111;
                  }
                  while (v119 >= (unint64_t)v226);
                  long long v120 = v226;
                  long long v121 = v228;
                  v111[1] = v227;
                  v111[2] = v121;
                  *long long v111 = v120;
                  long long v122 = v229;
                  long long v123 = v230;
                  long long v124 = v231;
                  *((void *)v111 + 12) = v232;
                  v111[4] = v123;
                  v111[5] = v124;
                  v111[3] = v122;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v111 + 104, &v233);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v111 + 136, &v236);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v111 + 168, &__p);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v111 + 25);
                  *(long long *)((char *)v111 + 200) = v242;
                  *((void *)v111 + 27) = v243;
                  long long v242 = 0uLL;
                  uint64_t v243 = 0;
                  *(void *)&long long v207 = &v242;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                  if (v241 && __p.n128_u64[0])
                  {
                    __p.n128_u64[1] = __p.n128_u64[0];
                    operator delete((void *)__p.n128_u64[0]);
                  }
                  if (v238 && v236.n128_u64[0])
                  {
                    v236.n128_u64[1] = v236.n128_u64[0];
                    operator delete((void *)v236.n128_u64[0]);
                  }
                  if (v235 && SHIBYTE(v234) < 0) {
                    operator delete((void *)v233.n128_u64[0]);
                  }
                  long long v9 = v206;
                  int64_t v94 = v202;
                }
              }
              int64_t v93 = v94 - 1;
            }
            while (v94);
            uint64_t v125 = (((unint64_t)v10 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
            unint64_t v198 = (__n128 *)(a1 + 104);
            do
            {
              long long v126 = *(_OWORD *)a1;
              long long v127 = *(_OWORD *)(a1 + 32);
              long long v208 = *(_OWORD *)(a1 + 16);
              long long v209 = v127;
              long long v207 = v126;
              long long v128 = *(_OWORD *)(a1 + 48);
              long long v129 = *(_OWORD *)(a1 + 64);
              long long v130 = *(_OWORD *)(a1 + 80);
              uint64_t v213 = *(void *)(a1 + 96);
              long long v211 = v129;
              long long v212 = v130;
              long long v210 = v128;
              v214.n128_u8[0] = 0;
              char v216 = 0;
              if (*(unsigned char *)(a1 + 128))
              {
                __n128 v131 = *v198;
                uint64_t v215 = *(void *)(a1 + 120);
                __n128 v214 = v131;
                *(void *)(a1 + 112) = 0;
                *(void *)(a1 + 120) = 0;
                v198->n128_u64[0] = 0;
                char v216 = 1;
              }
              v217.n128_u8[0] = 0;
              char v219 = 0;
              if (*(unsigned char *)(a1 + 160))
              {
                __n128 v217 = *(__n128 *)(a1 + 136);
                uint64_t v218 = *(void *)(a1 + 152);
                *(void *)(a1 + 136) = 0;
                *(void *)(a1 + 144) = 0;
                *(void *)(a1 + 152) = 0;
                char v219 = 1;
              }
              v205 = v9;
              v220.n128_u8[0] = 0;
              char v222 = 0;
              if (*(unsigned char *)(a1 + 192))
              {
                __n128 v220 = *(__n128 *)(a1 + 168);
                uint64_t v221 = *(void *)(a1 + 184);
                *(void *)(a1 + 168) = 0;
                *(void *)(a1 + 176) = 0;
                *(void *)(a1 + 184) = 0;
                char v222 = 1;
              }
              uint64_t v132 = 0;
              long long v223 = *(_OWORD *)(a1 + 200);
              uint64_t v224 = *(void *)(a1 + 216);
              *(void *)(a1 + 200) = 0;
              *(void *)(a1 + 208) = 0;
              *(void *)(a1 + 216) = 0;
              uint64_t v133 = a1;
              do
              {
                uint64_t v134 = v133 + 224 * v132 + 224;
                uint64_t v135 = 2 * v132;
                uint64_t v132 = (2 * v132) | 1;
                if (v135 + 2 < v125 && *(void *)v134 < *(void *)(v134 + 224))
                {
                  v134 += 224;
                  uint64_t v132 = v135 + 2;
                }
                long long v136 = *(_OWORD *)v134;
                long long v137 = *(_OWORD *)(v134 + 32);
                *(_OWORD *)(v133 + 16) = *(_OWORD *)(v134 + 16);
                *(_OWORD *)(v133 + 32) = v137;
                *(_OWORD *)uint64_t v133 = v136;
                long long v138 = *(_OWORD *)(v134 + 48);
                long long v139 = *(_OWORD *)(v134 + 64);
                long long v140 = *(_OWORD *)(v134 + 80);
                *(void *)(v133 + 96) = *(void *)(v134 + 96);
                *(_OWORD *)(v133 + 64) = v139;
                *(_OWORD *)(v133 + 80) = v140;
                *(_OWORD *)(v133 + 48) = v138;
                uint64_t v141 = (__n128 *)(v134 + 104);
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v133 + 104, (__n128 *)(v134 + 104));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v133 + 136, (__n128 *)(v134 + 136));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v133 + 168, (__n128 *)(v134 + 168));
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v133 + 200));
                *(_OWORD *)(v133 + 200) = *(_OWORD *)(v134 + 200);
                *(void *)(v133 + 216) = *(void *)(v134 + 216);
                *(void *)(v134 + 200) = 0;
                *(void *)(v134 + 208) = 0;
                *(void *)(v134 + 216) = 0;
                uint64_t v133 = v134;
              }
              while (v132 <= (uint64_t)((unint64_t)(v125 - 2) >> 1));
              if ((long long *)v134 == v205 - 14)
              {
                long long v173 = v207;
                long long v174 = v209;
                *(_OWORD *)(v134 + 16) = v208;
                *(_OWORD *)(v134 + 32) = v174;
                *(_OWORD *)uint64_t v134 = v173;
                long long v175 = v210;
                long long v176 = v211;
                long long v177 = v212;
                *(void *)(v134 + 96) = v213;
                *(_OWORD *)(v134 + 64) = v176;
                *(_OWORD *)(v134 + 80) = v177;
                *(_OWORD *)(v134 + 48) = v175;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v134 + 104, &v214);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 136, &v217);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 168, &v220);
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v134 + 200));
                *(_OWORD *)(v134 + 200) = v223;
                *(void *)(v134 + 216) = v224;
                long long v223 = 0uLL;
                uint64_t v224 = 0;
              }
              else
              {
                long long v142 = *(v205 - 14);
                long long v143 = *(v205 - 12);
                *(_OWORD *)(v134 + 16) = *(v205 - 13);
                *(_OWORD *)(v134 + 32) = v143;
                *(_OWORD *)uint64_t v134 = v142;
                long long v144 = *(v205 - 11);
                long long v145 = *(v205 - 10);
                long long v146 = *(v205 - 9);
                *(void *)(v134 + 96) = *((void *)v205 - 16);
                *(_OWORD *)(v134 + 64) = v145;
                *(_OWORD *)(v134 + 80) = v146;
                *(_OWORD *)(v134 + 48) = v144;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v134 + 104, (__n128 *)((char *)v205 - 120));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 136, (__n128 *)((char *)v205 - 88));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 168, (__n128 *)((char *)v205 - 56));
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v134 + 200));
                uint64_t v147 = (void *)v205 - 3;
                *(_OWORD *)(v134 + 200) = *(long long *)((char *)v205 - 24);
                *(void *)(v134 + 216) = *((void *)v205 - 1);
                void *v147 = 0;
                v147[1] = 0;
                v147[2] = 0;
                long long v148 = v207;
                long long v149 = v209;
                *(v205 - 13) = v208;
                *(v205 - 12) = v149;
                *(v205 - 14) = v148;
                long long v150 = v210;
                long long v151 = v211;
                long long v152 = v212;
                *((void *)v205 - 16) = v213;
                *(v205 - 10) = v151;
                *(v205 - 9) = v152;
                *(v205 - 11) = v150;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v205 - 120, &v214);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v205 - 88, &v217);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v205 - 56, &v220);
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v205 - 3);
                *(long long *)((char *)v205 - 24) = v223;
                *((void *)v205 - 1) = v224;
                long long v223 = 0uLL;
                uint64_t v224 = 0;
                uint64_t v153 = v134 + 224 - a1;
                if (v153 >= 225)
                {
                  unint64_t v154 = (unint64_t)(((((unint64_t)v153 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                          - 2) >> 1;
                  uint64_t v155 = a1 + 224 * v154;
                  if (*(void *)v155 < *(void *)v134)
                  {
                    long long v156 = *(_OWORD *)v134;
                    long long v157 = *(_OWORD *)(v134 + 32);
                    long long v227 = *(_OWORD *)(v134 + 16);
                    long long v228 = v157;
                    long long v226 = v156;
                    long long v158 = *(_OWORD *)(v134 + 48);
                    long long v159 = *(_OWORD *)(v134 + 64);
                    long long v160 = *(_OWORD *)(v134 + 80);
                    uint64_t v232 = *(void *)(v134 + 96);
                    long long v230 = v159;
                    long long v231 = v160;
                    long long v229 = v158;
                    v233.n128_u8[0] = 0;
                    char v235 = 0;
                    if (*(unsigned char *)(v134 + 128))
                    {
                      __n128 v161 = *v141;
                      uint64_t v234 = *(void *)(v134 + 120);
                      __n128 v233 = v161;
                      *(void *)(v134 + 112) = 0;
                      *(void *)(v134 + 120) = 0;
                      v141->n128_u64[0] = 0;
                      char v235 = 1;
                    }
                    v236.n128_u8[0] = 0;
                    char v238 = 0;
                    if (*(unsigned char *)(v134 + 160))
                    {
                      __n128 v236 = *(__n128 *)(v134 + 136);
                      uint64_t v237 = *(void *)(v134 + 152);
                      *(void *)(v134 + 136) = 0;
                      *(void *)(v134 + 144) = 0;
                      *(void *)(v134 + 152) = 0;
                      char v238 = 1;
                    }
                    __p.n128_u8[0] = 0;
                    char v241 = 0;
                    if (*(unsigned char *)(v134 + 192))
                    {
                      __n128 __p = *(__n128 *)(v134 + 168);
                      uint64_t v240 = *(void *)(v134 + 184);
                      *(void *)(v134 + 168) = 0;
                      *(void *)(v134 + 176) = 0;
                      *(void *)(v134 + 184) = 0;
                      char v241 = 1;
                    }
                    long long v242 = *(_OWORD *)(v134 + 200);
                    uint64_t v243 = *(void *)(v134 + 216);
                    *(void *)(v134 + 200) = 0;
                    *(void *)(v134 + 208) = 0;
                    *(void *)(v134 + 216) = 0;
                    do
                    {
                      uint64_t v162 = v155;
                      long long v163 = *(_OWORD *)v155;
                      long long v164 = *(_OWORD *)(v155 + 32);
                      *(_OWORD *)(v134 + 16) = *(_OWORD *)(v155 + 16);
                      *(_OWORD *)(v134 + 32) = v164;
                      *(_OWORD *)uint64_t v134 = v163;
                      long long v165 = *(_OWORD *)(v155 + 48);
                      long long v166 = *(_OWORD *)(v155 + 64);
                      long long v167 = *(_OWORD *)(v155 + 80);
                      *(void *)(v134 + 96) = *(void *)(v155 + 96);
                      *(_OWORD *)(v134 + 64) = v166;
                      *(_OWORD *)(v134 + 80) = v167;
                      *(_OWORD *)(v134 + 48) = v165;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v134 + 104, (__n128 *)(v155 + 104));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 136, (__n128 *)(v162 + 136));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 168, (__n128 *)(v162 + 168));
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v134 + 200));
                      *(_OWORD *)(v134 + 200) = *(_OWORD *)(v162 + 200);
                      *(void *)(v134 + 216) = *(void *)(v162 + 216);
                      *(void *)(v162 + 200) = 0;
                      *(void *)(v162 + 208) = 0;
                      *(void *)(v162 + 216) = 0;
                      if (!v154) {
                        break;
                      }
                      unint64_t v154 = (v154 - 1) >> 1;
                      uint64_t v155 = a1 + 224 * v154;
                      uint64_t v134 = v162;
                    }
                    while (*(void *)v155 < (unint64_t)v226);
                    long long v168 = v226;
                    long long v169 = v228;
                    *(_OWORD *)(v162 + 16) = v227;
                    *(_OWORD *)(v162 + 32) = v169;
                    *(_OWORD *)uint64_t v162 = v168;
                    long long v170 = v229;
                    long long v171 = v230;
                    long long v172 = v231;
                    *(void *)(v162 + 96) = v232;
                    *(_OWORD *)(v162 + 64) = v171;
                    *(_OWORD *)(v162 + 80) = v172;
                    *(_OWORD *)(v162 + 48) = v170;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v162 + 104, &v233);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v162 + 136, &v236);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v162 + 168, &__p);
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v162 + 200));
                    *(_OWORD *)(v162 + 200) = v242;
                    *(void *)(v162 + 216) = v243;
                    long long v242 = 0uLL;
                    uint64_t v243 = 0;
                    v225 = (void **)&v242;
                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v225);
                    if (v241 && __p.n128_u64[0])
                    {
                      __p.n128_u64[1] = __p.n128_u64[0];
                      operator delete((void *)__p.n128_u64[0]);
                    }
                    if (v238 && v236.n128_u64[0])
                    {
                      v236.n128_u64[1] = v236.n128_u64[0];
                      operator delete((void *)v236.n128_u64[0]);
                    }
                    if (v235 && SHIBYTE(v234) < 0) {
                      operator delete((void *)v233.n128_u64[0]);
                    }
                  }
                }
              }
              *(void *)&long long v226 = &v223;
              std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
              if (v222 && v220.n128_u64[0])
              {
                v220.n128_u64[1] = v220.n128_u64[0];
                operator delete((void *)v220.n128_u64[0]);
              }
              if (v219 && v217.n128_u64[0])
              {
                v217.n128_u64[1] = v217.n128_u64[0];
                operator delete((void *)v217.n128_u64[0]);
              }
              if (v216 && SHIBYTE(v215) < 0) {
                operator delete((void *)v214.n128_u64[0]);
              }
              BOOL v178 = v125-- <= 2;
              long long v9 = v205 - 14;
            }
            while (!v178);
          }
          return;
        }
        unint64_t v12 = v11 >> 1;
        long long v13 = (long long *)(a1 + 224 * (v11 >> 1));
        if ((unint64_t)v10 > 0x7000)
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224 * (v11 >> 1)), v201);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(a1 + 224), (long long *)(224 * v12 + a1 - 224), v200);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(a1 + 448), (long long *)(a1 + 224 + 224 * v12), v199);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(224 * v12 + a1 - 224), v13, (long long *)(a1 + 224 + 224 * v12));
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)a1, v13);
        }
        else
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(a1 + 224 * (v11 >> 1)), (long long *)a1, v201);
        }
        --a3;
        if ((a4 & 1) != 0 || *(void *)(a1 - 224) < *(void *)a1) {
          break;
        }
        long long v42 = *(_OWORD *)a1;
        long long v43 = *(_OWORD *)(a1 + 32);
        long long v227 = *(_OWORD *)(a1 + 16);
        long long v228 = v43;
        long long v226 = v42;
        long long v44 = *(_OWORD *)(a1 + 48);
        long long v45 = *(_OWORD *)(a1 + 64);
        long long v46 = *(_OWORD *)(a1 + 80);
        uint64_t v232 = *(void *)(a1 + 96);
        long long v230 = v45;
        long long v231 = v46;
        long long v229 = v44;
        v233.n128_u8[0] = 0;
        char v235 = 0;
        if (*(unsigned char *)(a1 + 128))
        {
          __n128 v47 = *(__n128 *)(a1 + 104);
          uint64_t v234 = *(void *)(a1 + 120);
          __n128 v233 = v47;
          *(void *)(a1 + 112) = 0;
          *(void *)(a1 + 120) = 0;
          *(void *)(a1 + 104) = 0;
          char v235 = 1;
        }
        v236.n128_u8[0] = 0;
        char v238 = 0;
        if (*(unsigned char *)(a1 + 160))
        {
          __n128 v236 = *(__n128 *)(a1 + 136);
          uint64_t v237 = *(void *)(a1 + 152);
          *(void *)(a1 + 136) = 0;
          *(void *)(a1 + 144) = 0;
          *(void *)(a1 + 152) = 0;
          char v238 = 1;
        }
        __p.n128_u8[0] = 0;
        char v241 = 0;
        if (*(unsigned char *)(a1 + 192))
        {
          __n128 __p = *(__n128 *)(a1 + 168);
          uint64_t v240 = *(void *)(a1 + 184);
          *(void *)(a1 + 168) = 0;
          *(void *)(a1 + 176) = 0;
          *(void *)(a1 + 184) = 0;
          char v241 = 1;
        }
        long long v242 = *(_OWORD *)(a1 + 200);
        uint64_t v243 = *(void *)(a1 + 216);
        *(void *)(a1 + 200) = 0;
        *(void *)(a1 + 208) = 0;
        *(void *)(a1 + 216) = 0;
        unint64_t v48 = v226;
        if ((unint64_t)v226 < *(void *)v201)
        {
          unint64_t v8 = a1;
          do
          {
            unint64_t v49 = *(void *)(v8 + 224);
            v8 += 224;
          }
          while ((unint64_t)v226 >= v49);
        }
        else
        {
          unint64_t v50 = a1 + 224;
          do
          {
            unint64_t v8 = v50;
            if (v50 >= (unint64_t)v206) {
              break;
            }
            v50 += 224;
          }
          while ((unint64_t)v226 >= *(void *)v8);
        }
        long long v51 = v206;
        if (v8 < (unint64_t)v206)
        {
          long long v51 = v206;
          do
          {
            unint64_t v52 = *((void *)v51 - 28);
            v51 -= 14;
          }
          while ((unint64_t)v226 < v52);
        }
        while (v8 < (unint64_t)v51)
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)v8, v51);
          do
          {
            unint64_t v53 = *(void *)(v8 + 224);
            v8 += 224;
          }
          while (v48 >= v53);
          do
          {
            unint64_t v54 = *((void *)v51 - 28);
            v51 -= 14;
          }
          while (v48 < v54);
        }
        uint64_t v55 = (long long *)(v8 - 224);
        if (v8 - 224 != a1)
        {
          long long v56 = *v55;
          long long v57 = *(_OWORD *)(v8 - 192);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 - 208);
          *(_OWORD *)(a1 + 32) = v57;
          *(_OWORD *)a1 = v56;
          long long v58 = *(_OWORD *)(v8 - 176);
          long long v59 = *(_OWORD *)(v8 - 160);
          long long v60 = *(_OWORD *)(v8 - 144);
          *(void *)(a1 + 96) = *(void *)(v8 - 128);
          *(_OWORD *)(a1 + 64) = v59;
          *(_OWORD *)(a1 + 80) = v60;
          *(_OWORD *)(a1 + 48) = v58;
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v8 - 120));
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v8 - 88));
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v8 - 56));
          std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
          *(_OWORD *)(a1 + 200) = *(_OWORD *)(v8 - 24);
          *(void *)(a1 + 216) = *(void *)(v8 - 8);
          *(void *)(v8 - 24) = 0;
          *(void *)(v8 - 16) = 0;
          *(void *)(v8 - 8) = 0;
        }
        long long v61 = v226;
        long long v62 = v228;
        *(_OWORD *)(v8 - 208) = v227;
        *(_OWORD *)(v8 - 192) = v62;
        long long *v55 = v61;
        long long v63 = v229;
        long long v64 = v230;
        long long v65 = v231;
        *(void *)(v8 - 128) = v232;
        *(_OWORD *)(v8 - 160) = v64;
        *(_OWORD *)(v8 - 144) = v65;
        *(_OWORD *)(v8 - 176) = v63;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v8 - 120, &v233);
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 88, &v236);
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 56, &__p);
        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v8 - 24));
        *(_OWORD *)(v8 - 24) = v242;
        *(void *)(v8 - 8) = v243;
        long long v242 = 0uLL;
        uint64_t v243 = 0;
        *(void *)&long long v207 = &v242;
        std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
        if (v241 && __p.n128_u64[0])
        {
          __p.n128_u64[1] = __p.n128_u64[0];
          operator delete((void *)__p.n128_u64[0]);
        }
        if (v238 && v236.n128_u64[0])
        {
          v236.n128_u64[1] = v236.n128_u64[0];
          operator delete((void *)v236.n128_u64[0]);
        }
        if (v235 && SHIBYTE(v234) < 0) {
          operator delete((void *)v233.n128_u64[0]);
        }
LABEL_46:
        a4 = 0;
      }
      long long v14 = *(_OWORD *)a1;
      long long v15 = *(_OWORD *)(a1 + 32);
      long long v227 = *(_OWORD *)(a1 + 16);
      long long v228 = v15;
      long long v226 = v14;
      long long v16 = *(_OWORD *)(a1 + 48);
      long long v17 = *(_OWORD *)(a1 + 64);
      long long v18 = *(_OWORD *)(a1 + 80);
      uint64_t v232 = *(void *)(a1 + 96);
      long long v230 = v17;
      long long v231 = v18;
      long long v229 = v16;
      v233.n128_u8[0] = 0;
      char v235 = 0;
      if (*(unsigned char *)(a1 + 128))
      {
        __n128 v19 = *(__n128 *)(a1 + 104);
        uint64_t v234 = *(void *)(a1 + 120);
        __n128 v233 = v19;
        *(void *)(a1 + 112) = 0;
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 104) = 0;
        char v235 = 1;
      }
      v236.n128_u8[0] = 0;
      char v238 = 0;
      if (*(unsigned char *)(a1 + 160))
      {
        __n128 v236 = *(__n128 *)(a1 + 136);
        uint64_t v237 = *(void *)(a1 + 152);
        *(void *)(a1 + 136) = 0;
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        char v238 = 1;
      }
      __p.n128_u8[0] = 0;
      char v241 = 0;
      if (*(unsigned char *)(a1 + 192))
      {
        __n128 __p = *(__n128 *)(a1 + 168);
        uint64_t v240 = *(void *)(a1 + 184);
        *(void *)(a1 + 168) = 0;
        *(void *)(a1 + 176) = 0;
        *(void *)(a1 + 184) = 0;
        char v241 = 1;
      }
      uint64_t v20 = 0;
      long long v242 = *(_OWORD *)(a1 + 200);
      uint64_t v243 = *(void *)(a1 + 216);
      *(void *)(a1 + 200) = 0;
      *(void *)(a1 + 208) = 0;
      *(void *)(a1 + 216) = 0;
      unint64_t v21 = v226;
      do
      {
        unint64_t v22 = *(void *)(a1 + v20 + 224);
        v20 += 224;
      }
      while (v22 < (unint64_t)v226);
      unint64_t v23 = a1 + v20;
      char v24 = v206;
      if (v20 == 224)
      {
        char v24 = v206;
        do
        {
          if (v23 >= (unint64_t)v24) {
            break;
          }
          unint64_t v26 = *((void *)v24 - 28);
          v24 -= 14;
        }
        while (v26 >= (unint64_t)v226);
      }
      else
      {
        do
        {
          unint64_t v25 = *((void *)v24 - 28);
          v24 -= 14;
        }
        while (v25 >= (unint64_t)v226);
      }
      unint64_t v8 = a1 + v20;
      if (v23 < (unint64_t)v24)
      {
        long long v27 = v24;
        do
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)v8, v27);
          do
          {
            unint64_t v28 = *(void *)(v8 + 224);
            v8 += 224;
          }
          while (v28 < v21);
          do
          {
            unint64_t v29 = *((void *)v27 - 28);
            v27 -= 14;
          }
          while (v29 >= v21);
        }
        while (v8 < (unint64_t)v27);
      }
      long long v30 = (long long *)(v8 - 224);
      if (v8 - 224 != a1)
      {
        long long v31 = *v30;
        long long v32 = *(_OWORD *)(v8 - 192);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 - 208);
        *(_OWORD *)(a1 + 32) = v32;
        *(_OWORD *)a1 = v31;
        long long v33 = *(_OWORD *)(v8 - 176);
        long long v34 = *(_OWORD *)(v8 - 160);
        long long v35 = *(_OWORD *)(v8 - 144);
        *(void *)(a1 + 96) = *(void *)(v8 - 128);
        *(_OWORD *)(a1 + 64) = v34;
        *(_OWORD *)(a1 + 80) = v35;
        *(_OWORD *)(a1 + 48) = v33;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v8 - 120));
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v8 - 88));
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v8 - 56));
        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
        *(_OWORD *)(a1 + 200) = *(_OWORD *)(v8 - 24);
        *(void *)(a1 + 216) = *(void *)(v8 - 8);
        *(void *)(v8 - 24) = 0;
        *(void *)(v8 - 16) = 0;
        *(void *)(v8 - 8) = 0;
      }
      long long v36 = v226;
      long long v37 = v228;
      *(_OWORD *)(v8 - 208) = v227;
      *(_OWORD *)(v8 - 192) = v37;
      *long long v30 = v36;
      long long v38 = v229;
      long long v39 = v230;
      long long v40 = v231;
      *(void *)(v8 - 128) = v232;
      *(_OWORD *)(v8 - 160) = v39;
      *(_OWORD *)(v8 - 144) = v40;
      *(_OWORD *)(v8 - 176) = v38;
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v8 - 120, &v233);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 88, &v236);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 56, &__p);
      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v8 - 24));
      *(_OWORD *)(v8 - 24) = v242;
      *(void *)(v8 - 8) = v243;
      long long v242 = 0uLL;
      uint64_t v243 = 0;
      *(void *)&long long v207 = &v242;
      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
      if (v241 && __p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (v238 && v236.n128_u64[0])
      {
        v236.n128_u64[1] = v236.n128_u64[0];
        operator delete((void *)v236.n128_u64[0]);
      }
      if (v235 && SHIBYTE(v234) < 0) {
        operator delete((void *)v233.n128_u64[0]);
      }
      if (v23 < (unint64_t)v24)
      {
LABEL_45:
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(a1, v8 - 224, a3, a4 & 1);
        goto LABEL_46;
      }
      BOOL v41 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((long long *)a1, (long long *)(v8 - 224));
      if (_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((long long *)v8, v206))
      {
        break;
      }
      if (!v41) {
        goto LABEL_45;
      }
    }
    a2 = (long long *)(v8 - 224);
    if (!v41) {
      continue;
    }
    break;
  }
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_(long long *a1, long long *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((void *)a2 - 28) < *(void *)a1)
      {
        long long v6 = a1;
        long long v7 = a2 - 14;
        goto LABEL_4;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_(a1, a1 + 14, a2 - 14);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_(a1, a1 + 14, a1 + 28, a2 - 14);
      return 1;
    case 5:
      char v24 = a1 + 28;
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_(a1, a1 + 14, a1 + 28, a1 + 42);
      unint64_t v26 = *((void *)a2 - 28);
      unint64_t v25 = a2 - 14;
      if (v26 < *((void *)a1 + 84))
      {
        std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1 + 42, v25);
        if (*((void *)a1 + 84) < *v24)
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1 + 28, a1 + 42);
          if (*v24 < *((void *)a1 + 28))
          {
            std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1 + 14, a1 + 28);
            if (*((void *)a1 + 28) < *(void *)a1)
            {
              long long v6 = a1;
              long long v7 = a1 + 14;
LABEL_4:
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(v6, v7);
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v8 = a1 + 28;
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_(a1, a1 + 14, a1 + 28);
      long long v9 = a1 + 42;
      BOOL result = 1;
      if (a1 + 42 == a2) {
        return result;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (*(void *)v9 < *(void *)v8)
    {
      long long v31 = v9[4];
      long long v32 = v9[5];
      uint64_t v33 = *((void *)v9 + 12);
      long long v27 = *v9;
      long long v28 = v9[1];
      long long v29 = v9[2];
      long long v30 = v9[3];
      v34.n128_u8[0] = 0;
      char v36 = 0;
      if (*((unsigned char *)v9 + 128))
      {
        __n128 v34 = *(__n128 *)((char *)v9 + 104);
        uint64_t v35 = *((void *)v9 + 15);
        *((void *)v9 + 14) = 0;
        *((void *)v9 + 15) = 0;
        *((void *)v9 + 13) = 0;
        char v36 = 1;
      }
      v37.n128_u8[0] = 0;
      char v39 = 0;
      if (*((unsigned char *)v9 + 160))
      {
        __n128 v37 = *(__n128 *)((char *)v9 + 136);
        uint64_t v38 = *((void *)v9 + 19);
        *((void *)v9 + 18) = 0;
        *((void *)v9 + 19) = 0;
        *((void *)v9 + 17) = 0;
        char v39 = 1;
      }
      __p.n128_u8[0] = 0;
      char v42 = 0;
      if (*((unsigned char *)v9 + 192))
      {
        __n128 __p = *(__n128 *)((char *)v9 + 168);
        uint64_t v41 = *((void *)v9 + 23);
        *((void *)v9 + 22) = 0;
        *((void *)v9 + 23) = 0;
        *((void *)v9 + 21) = 0;
        char v42 = 1;
      }
      long long v43 = *(long long *)((char *)v9 + 200);
      uint64_t v44 = *((void *)v9 + 27);
      *((void *)v9 + 26) = 0;
      *((void *)v9 + 27) = 0;
      *((void *)v9 + 25) = 0;
      uint64_t v12 = v10;
      while (1)
      {
        uint64_t v13 = v12;
        long long v14 = (char *)a1 + v12;
        long long v15 = *(long long *)((char *)a1 + v12 + 528);
        *((_OWORD *)v14 + 46) = *(long long *)((char *)a1 + v12 + 512);
        *((_OWORD *)v14 + 47) = v15;
        *((void *)v14 + 96) = *(void *)((char *)a1 + v12 + 544);
        long long v16 = *(long long *)((char *)a1 + v12 + 464);
        *((_OWORD *)v14 + 42) = *((_OWORD *)v14 + 28);
        *((_OWORD *)v14 + 43) = v16;
        long long v17 = *(long long *)((char *)a1 + v12 + 496);
        *((_OWORD *)v14 + 44) = *(long long *)((char *)a1 + v12 + 480);
        *((_OWORD *)v14 + 45) = v17;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)a1 + v12 + 776, (__n128 *)((char *)a1 + v12 + 552));
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)(v14 + 808), (__n128 *)(v14 + 584));
        long long v18 = (char *)a1 + v13;
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)a1 + v13 + 840, (__n128 *)((char *)a1 + v13 + 616));
        __n128 v19 = (long long *)((char *)a1 + v13 + 648);
        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)((char *)a1 + v13 + 872));
        *(_OWORD *)(v18 + 872) = *v19;
        *((void *)v18 + 111) = *((void *)v18 + 83);
        *((void *)v18 + 83) = 0;
        *__n128 v19 = 0u;
        if (v13 == -448) {
          break;
        }
        uint64_t v12 = v13 - 224;
        if ((unint64_t)v27 >= *(void *)((char *)a1 + v13 + 224))
        {
          uint64_t v20 = (uint64_t)a1 + v12 + 672;
          goto LABEL_19;
        }
      }
      uint64_t v20 = (uint64_t)a1;
LABEL_19:
      *(_OWORD *)(v20 + 64) = v31;
      *(_OWORD *)(v20 + 80) = v32;
      *(void *)(v20 + 96) = v33;
      *(_OWORD *)uint64_t v20 = v27;
      *(_OWORD *)(v20 + 16) = v28;
      unint64_t v21 = (uint64_t *)((char *)a1 + v13);
      *(_OWORD *)(v20 + 32) = v29;
      *(_OWORD *)(v20 + 48) = v30;
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v21 + 69), &v34);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)(v21 + 73), &v37);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)(v21 + 77), &__p);
      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(v21 + 81);
      uint64_t v22 = *((void *)&v43 + 1);
      v21[81] = v43;
      uint64_t v23 = v44;
      *(void *)(v20 + 208) = v22;
      *(void *)(v20 + 216) = v23;
      uint64_t v44 = 0;
      long long v43 = 0uLL;
      long long v45 = (void **)&v43;
      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v45);
      if (v42 && __p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (v39 && v37.n128_u64[0])
      {
        v37.n128_u64[1] = v37.n128_u64[0];
        operator delete((void *)v37.n128_u64[0]);
      }
      if (v36 && SHIBYTE(v35) < 0) {
        operator delete((void *)v34.n128_u64[0]);
      }
      if (++v11 == 8) {
        return v9 + 14 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 224;
    v9 += 14;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__move_assign(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  char v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *char v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

uint64_t CSCppCoreFileExclavesMetadata::CSCppCoreFileExclavesMetadata(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  __n128 __p = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  std::vector<mapped_memory_core_file_dumped_region_info_t>::__init_with_size[abi:ne180100]<mapped_memory_core_file_dumped_region_info_t*,mapped_memory_core_file_dumped_region_info_t*>(&__p, *(const void **)a3, *(void *)(a3 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>::map[abi:ne180100](v19, a5);
  std::__optional_copy_base<CSCppCoreFileRegionsTree,false>::__optional_copy_base[abi:ne180100]((uint64_t)v18, a8);
  CSCppCoreFileMetadata::CSCppCoreFileMetadata(a1, a2, (uint64_t)&__p, a4, (uint64_t)v19, a6, a7, (uint64_t)v18);
  if (v18[24])
  {
    uint64_t v23 = (void **)v18;
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v23);
  }
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)v19, (void *)v19[1]);
  if (__p)
  {
    unint64_t v21 = __p;
    operator delete(__p);
  }
  *(void *)a1 = &unk_1F12C95C0;
  *(_DWORD *)(a1 + 120) = a9;
  *(void *)(a1 + 128) = a10;
  return a1;
}

void sub_1B906AF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a13)
  {
    *(void *)(v21 - 72) = &a10;
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 72));
  }
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)&a15, a18);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unint64_t v46 = *(void *)(a2 - 40);
                unint64_t v45 = a2 - 40;
                if (v46 < *(void *)v10)
                {
                  uint64_t v144 = *(void *)(v10 + 32);
                  long long v125 = *(_OWORD *)v10;
                  long long v134 = *(_OWORD *)(v10 + 16);
                  long long v47 = *(_OWORD *)v45;
                  long long v48 = *(_OWORD *)(v45 + 16);
                  *(void *)(v10 + 32) = *(void *)(v45 + 32);
                  *(_OWORD *)unint64_t v10 = v47;
                  *(_OWORD *)(v10 + 16) = v48;
                  *(void *)(v45 + 32) = v144;
                  *(_OWORD *)unint64_t v45 = v125;
                  *(_OWORD *)(v45 + 16) = v134;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)v10, (unint64_t *)(v10 + 40), (unint64_t *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                unint64_t v49 = (long long *)(v10 + 40);
                unint64_t v50 = (long long *)(v10 + 80);
                long long v51 = (long long *)(v10 + 120);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(v10, v10 + 40, v10 + 80, v10 + 120);
                unint64_t v53 = *(void *)(a2 - 40);
                unint64_t v52 = a2 - 40;
                if (v53 < *(void *)(v10 + 120))
                {
                  long long v54 = *v51;
                  long long v135 = *(_OWORD *)(v10 + 136);
                  uint64_t v55 = *(void *)(v10 + 152);
                  long long v57 = *(_OWORD *)v52;
                  long long v56 = *(_OWORD *)(v52 + 16);
                  *(void *)(v10 + 152) = *(void *)(v52 + 32);
                  *long long v51 = v57;
                  *(_OWORD *)(v10 + 136) = v56;
                  *(void *)(v52 + 32) = v55;
                  *(_OWORD *)unint64_t v52 = v54;
                  *(_OWORD *)(v52 + 16) = v135;
                  if (*(void *)v51 < *(void *)v50)
                  {
                    uint64_t v58 = *(void *)(v10 + 112);
                    long long v60 = *v50;
                    long long v59 = *(_OWORD *)(v10 + 96);
                    long long v61 = *(_OWORD *)(v10 + 136);
                    long long *v50 = *v51;
                    *(_OWORD *)(v10 + 96) = v61;
                    *(void *)(v10 + 112) = *(void *)(v10 + 152);
                    *long long v51 = v60;
                    *(_OWORD *)(v10 + 136) = v59;
                    *(void *)(v10 + 152) = v58;
                    if (*(void *)v50 < *(void *)v49)
                    {
                      uint64_t v62 = *(void *)(v10 + 72);
                      long long v64 = *v49;
                      long long v63 = *(_OWORD *)(v10 + 56);
                      long long v65 = *(_OWORD *)(v10 + 96);
                      long long *v49 = *v50;
                      *(_OWORD *)(v10 + 56) = v65;
                      *(void *)(v10 + 72) = *(void *)(v10 + 112);
                      long long *v50 = v64;
                      *(_OWORD *)(v10 + 96) = v63;
                      *(void *)(v10 + 112) = v62;
                      if (*(void *)(v10 + 40) < *(void *)v10)
                      {
                        uint64_t v145 = *(void *)(v10 + 32);
                        long long v126 = *(_OWORD *)v10;
                        long long v136 = *(_OWORD *)(v10 + 16);
                        long long v66 = *(_OWORD *)(v10 + 56);
                        *(_OWORD *)unint64_t v10 = *v49;
                        *(_OWORD *)(v10 + 16) = v66;
                        *(void *)(v10 + 32) = *(void *)(v10 + 72);
                        long long *v49 = v126;
                        *(_OWORD *)(v10 + 56) = v136;
                        *(void *)(v10 + 72) = v145;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v67 = v10 + 40;
            BOOL v69 = v10 == a2 || v67 == a2;
            if (a4)
            {
              if (!v69)
              {
                uint64_t v70 = 0;
                unint64_t v71 = v10;
                do
                {
                  unint64_t v72 = v67;
                  unint64_t v73 = *(void *)(v71 + 40);
                  if (v73 < *(void *)v71)
                  {
                    long long v127 = *(_OWORD *)(v71 + 48);
                    long long v137 = *(_OWORD *)(v71 + 64);
                    uint64_t v74 = v70;
                    while (1)
                    {
                      uint64_t v75 = v10 + v74;
                      long long v76 = *(_OWORD *)(v10 + v74 + 16);
                      *(_OWORD *)(v75 + 40) = *(_OWORD *)(v10 + v74);
                      *(_OWORD *)(v75 + 56) = v76;
                      *(void *)(v75 + 72) = *(void *)(v10 + v74 + 32);
                      if (!v74) {
                        break;
                      }
                      v74 -= 40;
                      if (v73 >= *(void *)(v75 - 40))
                      {
                        uint64_t v77 = v10 + v74 + 40;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v77 = v10;
LABEL_80:
                    *(void *)uint64_t v77 = v73;
                    *(_OWORD *)(v77 + 24) = v137;
                    *(_OWORD *)(v77 + 8) = v127;
                  }
                  unint64_t v67 = v72 + 40;
                  v70 += 40;
                  unint64_t v71 = v72;
                }
                while (v72 + 40 != a2);
              }
            }
            else if (!v69)
            {
              do
              {
                unint64_t v112 = v67;
                unint64_t v113 = *(void *)(a1 + 40);
                if (v113 < *(void *)a1)
                {
                  long long v130 = *(_OWORD *)(a1 + 48);
                  long long v140 = *(_OWORD *)(a1 + 64);
                  do
                  {
                    long long v114 = *(_OWORD *)(v67 - 24);
                    *(_OWORD *)unint64_t v67 = *(_OWORD *)(v67 - 40);
                    *(_OWORD *)(v67 + 16) = v114;
                    *(void *)(v67 + 32) = *(void *)(v67 - 8);
                    unint64_t v115 = *(void *)(v67 - 80);
                    v67 -= 40;
                  }
                  while (v113 < v115);
                  *(void *)unint64_t v67 = v113;
                  *(_OWORD *)(v67 + 24) = v140;
                  *(_OWORD *)(v67 + 8) = v130;
                }
                unint64_t v67 = v112 + 40;
                a1 = v112;
              }
              while (v112 + 40 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v78 = (v12 - 2) >> 1;
              int64_t v79 = v78;
              do
              {
                int64_t v80 = v79;
                if (v78 >= v79)
                {
                  uint64_t v81 = (2 * v79) | 1;
                  unint64_t v82 = v10 + 40 * v81;
                  if (2 * v80 + 2 < (uint64_t)v12)
                  {
                    unint64_t v84 = *(void *)(v82 + 40);
                    BOOL v83 = *(void *)v82 >= v84;
                    if (*(void *)v82 > v84) {
                      unint64_t v84 = *(void *)v82;
                    }
                    if (!v83)
                    {
                      v82 += 40;
                      uint64_t v81 = 2 * v80 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v84 = *(void *)v82;
                  }
                  unint64_t v85 = v10 + 40 * v80;
                  unint64_t v86 = *(void *)v85;
                  if (v84 >= *(void *)v85)
                  {
                    long long v128 = *(_OWORD *)(v85 + 8);
                    long long v138 = *(_OWORD *)(v85 + 24);
                    do
                    {
                      unint64_t v87 = v85;
                      unint64_t v85 = v82;
                      long long v88 = *(_OWORD *)v82;
                      long long v89 = *(_OWORD *)(v82 + 16);
                      *(void *)(v87 + 32) = *(void *)(v82 + 32);
                      *(_OWORD *)unint64_t v87 = v88;
                      *(_OWORD *)(v87 + 16) = v89;
                      if (v78 < v81) {
                        break;
                      }
                      uint64_t v90 = (2 * v81) | 1;
                      unint64_t v82 = v10 + 40 * v90;
                      uint64_t v81 = 2 * v81 + 2;
                      if (v81 < (uint64_t)v12)
                      {
                        unint64_t v93 = *(void *)v82;
                        unint64_t v91 = *(void *)(v82 + 40);
                        BOOL v92 = *(void *)v82 >= v91;
                        if (*(void *)v82 <= v91) {
                          unint64_t v93 = *(void *)(v82 + 40);
                        }
                        if (*(void *)v82 < v91) {
                          v82 += 40;
                        }
                        if (v92) {
                          uint64_t v81 = v90;
                        }
                      }
                      else
                      {
                        unint64_t v93 = *(void *)v82;
                        uint64_t v81 = v90;
                      }
                    }
                    while (v93 >= v86);
                    *(void *)unint64_t v85 = v86;
                    *(_OWORD *)(v85 + 24) = v138;
                    *(_OWORD *)(v85 + 8) = v128;
                  }
                }
                int64_t v79 = v80 - 1;
              }
              while (v80);
              int64_t v94 = v11 / 0x28uLL;
              do
              {
                uint64_t v95 = 0;
                uint64_t v146 = *(void *)(v10 + 32);
                long long v129 = *(_OWORD *)v10;
                long long v139 = *(_OWORD *)(v10 + 16);
                unint64_t v96 = v10;
                do
                {
                  uint64_t v97 = v96 + 40 * v95 + 40;
                  uint64_t v98 = (2 * v95) | 1;
                  uint64_t v99 = 2 * v95 + 2;
                  if (v99 < v94 && *(void *)v97 < *(void *)(v97 + 40))
                  {
                    v97 += 40;
                    uint64_t v98 = v99;
                  }
                  long long v100 = *(_OWORD *)v97;
                  long long v101 = *(_OWORD *)(v97 + 16);
                  *(void *)(v96 + 32) = *(void *)(v97 + 32);
                  *(_OWORD *)unint64_t v96 = v100;
                  *(_OWORD *)(v96 + 16) = v101;
                  unint64_t v96 = v97;
                  uint64_t v95 = v98;
                }
                while (v98 <= (uint64_t)((unint64_t)(v94 - 2) >> 1));
                a2 -= 40;
                if (v97 == a2)
                {
                  *(void *)(v97 + 32) = v146;
                  *(_OWORD *)uint64_t v97 = v129;
                  *(_OWORD *)(v97 + 16) = v139;
                }
                else
                {
                  long long v102 = *(_OWORD *)a2;
                  long long v103 = *(_OWORD *)(a2 + 16);
                  *(void *)(v97 + 32) = *(void *)(a2 + 32);
                  *(_OWORD *)uint64_t v97 = v102;
                  *(_OWORD *)(v97 + 16) = v103;
                  *(void *)(a2 + 32) = v146;
                  *(_OWORD *)a2 = v129;
                  *(_OWORD *)(a2 + 16) = v139;
                  uint64_t v104 = v97 - v10 + 40;
                  if (v104 >= 41)
                  {
                    unint64_t v105 = (v104 / 0x28uLL - 2) >> 1;
                    uint64_t v106 = v10 + 40 * v105;
                    unint64_t v107 = *(void *)v97;
                    if (*(void *)v106 < *(void *)v97)
                    {
                      long long v118 = *(_OWORD *)(v97 + 8);
                      long long v121 = *(_OWORD *)(v97 + 24);
                      do
                      {
                        uint64_t v108 = v97;
                        uint64_t v97 = v106;
                        long long v109 = *(_OWORD *)v106;
                        long long v110 = *(_OWORD *)(v106 + 16);
                        *(void *)(v108 + 32) = *(void *)(v106 + 32);
                        *(_OWORD *)uint64_t v108 = v109;
                        *(_OWORD *)(v108 + 16) = v110;
                        if (!v105) {
                          break;
                        }
                        unint64_t v105 = (v105 - 1) >> 1;
                        uint64_t v106 = v10 + 40 * v105;
                      }
                      while (*(void *)v106 < v107);
                      *(void *)uint64_t v97 = v107;
                      *(_OWORD *)(v97 + 24) = v121;
                      *(_OWORD *)(v97 + 8) = v118;
                    }
                  }
                }
              }
              while (v94-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)a1, (unint64_t *)(a1 + 40 * (v12 >> 1)), (unint64_t *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            long long v16 = (unint64_t *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)(a1 + 40), v16, (unint64_t *)(a2 - 80));
            long long v17 = (unint64_t *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)(a1 + 80), v17, (unint64_t *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)v16, (unint64_t *)v14, v17);
            uint64_t v141 = *(void *)(a1 + 32);
            long long v122 = *(_OWORD *)a1;
            long long v131 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(void *)(a1 + 32) = *(void *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(void *)(v14 + 32) = v141;
            *(_OWORD *)unint64_t v14 = v122;
            *(_OWORD *)(v14 + 16) = v131;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)(a1 + 40 * (v12 >> 1)), (unint64_t *)a1, (unint64_t *)(a2 - 40));
          }
          --a3;
          unint64_t v20 = *(void *)a1;
          if ((a4 & 1) != 0 || *(void *)(a1 - 40) < v20) {
            break;
          }
          long long v117 = *(_OWORD *)(a1 + 8);
          long long v120 = *(_OWORD *)(a1 + 24);
          if (v20 >= *(void *)(a2 - 40))
          {
            unint64_t v36 = a1 + 40;
            do
            {
              unint64_t v10 = v36;
              if (v36 >= a2) {
                break;
              }
              v36 += 40;
            }
            while (v20 >= *(void *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              unint64_t v35 = *(void *)(v10 + 40);
              v10 += 40;
            }
            while (v20 >= v35);
          }
          unint64_t v37 = a2;
          if (v10 < a2)
          {
            unint64_t v37 = a2;
            do
            {
              unint64_t v38 = *(void *)(v37 - 40);
              v37 -= 40;
            }
            while (v20 < v38);
          }
          while (v10 < v37)
          {
            uint64_t v143 = *(void *)(v10 + 32);
            long long v124 = *(_OWORD *)v10;
            long long v133 = *(_OWORD *)(v10 + 16);
            long long v39 = *(_OWORD *)v37;
            long long v40 = *(_OWORD *)(v37 + 16);
            *(void *)(v10 + 32) = *(void *)(v37 + 32);
            *(_OWORD *)unint64_t v10 = v39;
            *(_OWORD *)(v10 + 16) = v40;
            *(void *)(v37 + 32) = v143;
            *(_OWORD *)unint64_t v37 = v124;
            *(_OWORD *)(v37 + 16) = v133;
            do
            {
              unint64_t v41 = *(void *)(v10 + 40);
              v10 += 40;
            }
            while (v20 >= v41);
            do
            {
              unint64_t v42 = *(void *)(v37 - 40);
              v37 -= 40;
            }
            while (v20 < v42);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v43 = *(_OWORD *)(v10 - 40);
            long long v44 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 32) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v43;
            *(_OWORD *)(a1 + 16) = v44;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v20;
          *(_OWORD *)(v10 - 32) = v117;
          *(_OWORD *)(v10 - 16) = v120;
        }
        uint64_t v21 = 0;
        long long v116 = *(_OWORD *)(a1 + 8);
        long long v119 = *(_OWORD *)(a1 + 24);
        do
        {
          unint64_t v22 = *(void *)(a1 + v21 + 40);
          v21 += 40;
        }
        while (v22 < v20);
        unint64_t v23 = a1 + v21;
        unint64_t v24 = a2;
        if (v21 == 40)
        {
          unint64_t v24 = a2;
          do
          {
            if (v23 >= v24) {
              break;
            }
            unint64_t v26 = *(void *)(v24 - 40);
            v24 -= 40;
          }
          while (v26 >= v20);
        }
        else
        {
          do
          {
            unint64_t v25 = *(void *)(v24 - 40);
            v24 -= 40;
          }
          while (v25 >= v20);
        }
        unint64_t v10 = a1 + v21;
        if (v23 < v24)
        {
          unint64_t v27 = v24;
          do
          {
            uint64_t v142 = *(void *)(v10 + 32);
            long long v123 = *(_OWORD *)v10;
            long long v132 = *(_OWORD *)(v10 + 16);
            long long v28 = *(_OWORD *)v27;
            long long v29 = *(_OWORD *)(v27 + 16);
            *(void *)(v10 + 32) = *(void *)(v27 + 32);
            *(_OWORD *)unint64_t v10 = v28;
            *(_OWORD *)(v10 + 16) = v29;
            *(void *)(v27 + 32) = v142;
            *(_OWORD *)unint64_t v27 = v123;
            *(_OWORD *)(v27 + 16) = v132;
            do
            {
              unint64_t v30 = *(void *)(v10 + 40);
              v10 += 40;
            }
            while (v30 < v20);
            do
            {
              unint64_t v31 = *(void *)(v27 - 40);
              v27 -= 40;
            }
            while (v31 >= v20);
          }
          while (v10 < v27);
        }
        if (v10 - 40 != a1)
        {
          long long v32 = *(_OWORD *)(v10 - 40);
          long long v33 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 32) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v32;
          *(_OWORD *)(a1 + 16) = v33;
        }
        *(void *)(v10 - 40) = v20;
        *(_OWORD *)(v10 - 32) = v116;
        *(_OWORD *)(v10 - 16) = v119;
        if (v23 >= v24) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(v10, a2))
      {
        break;
      }
      if (!v34) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 40;
    if (!v34) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = (long long *)(a2 - 40);
      if (*(void *)(a2 - 40) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(a2 - 8);
        long long v11 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v11;
        *(void *)(a1 + 32) = v10;
        *(void *)(a2 - 8) = v9;
        *uint64_t v6 = v7;
        *(_OWORD *)(a2 - 24) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)a1, (unint64_t *)(a1 + 40), (unint64_t *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      uint64_t v21 = (void *)(a1 + 40);
      unint64_t v22 = (void *)(a1 + 80);
      unint64_t v23 = (long long *)(a1 + 120);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(a1, a1 + 40, a1 + 80, a1 + 120);
      unint64_t v25 = *(void *)(a2 - 40);
      uint64_t v24 = a2 - 40;
      if (v25 >= *(void *)(a1 + 120)) {
        return 1;
      }
      long long v26 = *v23;
      long long v27 = *(_OWORD *)(a1 + 136);
      uint64_t v28 = *(void *)(a1 + 152);
      uint64_t v29 = *(void *)(v24 + 32);
      long long v30 = *(_OWORD *)(v24 + 16);
      *unint64_t v23 = *(_OWORD *)v24;
      *(_OWORD *)(a1 + 136) = v30;
      *(void *)(a1 + 152) = v29;
      *(void *)(v24 + 32) = v28;
      *(_OWORD *)uint64_t v24 = v26;
      *(_OWORD *)(v24 + 16) = v27;
      if (*(void *)v23 >= *v22) {
        return 1;
      }
      uint64_t v31 = *(void *)(a1 + 112);
      long long v33 = *(_OWORD *)v22;
      long long v32 = *(_OWORD *)(a1 + 96);
      long long v34 = *(_OWORD *)(a1 + 136);
      *(_OWORD *)unint64_t v22 = *v23;
      *(_OWORD *)(a1 + 96) = v34;
      *(void *)(a1 + 112) = *(void *)(a1 + 152);
      *unint64_t v23 = v33;
      *(_OWORD *)(a1 + 136) = v32;
      *(void *)(a1 + 152) = v31;
      if (*v22 >= *v21) {
        return 1;
      }
      uint64_t v35 = *(void *)(a1 + 72);
      long long v37 = *(_OWORD *)v21;
      long long v36 = *(_OWORD *)(a1 + 56);
      long long v38 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
      *(_OWORD *)(a1 + 56) = v38;
      *(void *)(a1 + 72) = *(void *)(a1 + 112);
      *(_OWORD *)unint64_t v22 = v37;
      *(_OWORD *)(a1 + 96) = v36;
      *(void *)(a1 + 112) = v35;
      if (*(void *)(a1 + 40) >= *(void *)a1) {
        return 1;
      }
      uint64_t v39 = *(void *)(a1 + 32);
      long long v41 = *(_OWORD *)a1;
      long long v40 = *(_OWORD *)(a1 + 16);
      long long v42 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *(_OWORD *)v21;
      *(_OWORD *)(a1 + 16) = v42;
      *(void *)(a1 + 32) = *(void *)(a1 + 72);
      *(_OWORD *)uint64_t v21 = v41;
      *(_OWORD *)(a1 + 56) = v40;
      BOOL result = 1;
      *(void *)(a1 + 72) = v39;
      return result;
    default:
      unint64_t v12 = (void *)(a1 + 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((long long *)a1, (unint64_t *)(a1 + 40), (unint64_t *)(a1 + 80));
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unint64_t v16 = *(void *)v13;
    if (*(void *)v13 < *v12)
    {
      long long v43 = *(_OWORD *)(v13 + 8);
      long long v44 = *(_OWORD *)(v13 + 24);
      uint64_t v17 = v14;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(void *)(v18 + 152) = *(void *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v16 >= *(void *)(v18 + 40))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      *(void *)uint64_t v20 = v16;
      *(_OWORD *)(v20 + 8) = v43;
      *(_OWORD *)(v20 + 24) = v44;
      if (++v15 == 8) {
        return v13 + 40 == a2;
      }
    }
    unint64_t v12 = (void *)v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2) {
      return 1;
    }
  }
}

void std::__function::__func<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer64>(char const*,mapped_memory_t *)::{lambda(void)#1},std::allocator<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer64>(char const*,mapped_memory_t *)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer64>(char const*,mapped_memory_t *)::{lambda(void)#1},std::allocator<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer64>(char const*,mapped_memory_t *)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F12C9FC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer64>(char const*,mapped_memory_t *)::{lambda(void)#1},std::allocator<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer64>(char const*,mapped_memory_t *)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F12C9FC8;
  a2[1] = v2;
  return result;
}

atomic_uint *std::__function::__func<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer64>(char const*,mapped_memory_t *)::{lambda(void)#1},std::allocator<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer64>(char const*,mapped_memory_t *)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return CSRelease(**(atomic_uint ***)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
}

uint64_t std::__function::__func<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer64>(char const*,mapped_memory_t *)::{lambda(void)#1},std::allocator<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer64>(char const*,mapped_memory_t *)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer64>(char const*,mapped_memory_t *)::{lambda(void)#1},std::allocator<std::optional<std::pair<vas_segmentinfo_table,CSExclaveCoreFileType>> core_file_get_exclave_segmentinfo_table_and_type<Pointer64>(char const*,mapped_memory_t *)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void set_up_mapped_memory_cache_for_exclave_core_file<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long long,vas_segmentinfo_table const&,CSExclaveCoreFileType,mapped_memory_t *)::{lambda(unsigned long long)#1}::operator()(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v10 = a2 - v2;
  if (a2 > v2)
  {
    unint64_t v4 = a2 - v2;
    do
    {
      BOOL v5 = *(uint64_t **)(a1 + 48);
      if (v4 >= 0x6400000) {
        unint64_t v6 = 104857600;
      }
      else {
        unint64_t v6 = v4;
      }
      *(void *)&long long v17 = v2;
      *((void *)&v17 + 1) = v6;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v21 = 0;
      int v7 = *(unsigned __int8 *)(a1 + 25);
      int v18 = 1;
      int v22 = v7;
      uint64_t v23 = 0;
      memset(v24, 0, sizeof(v24));
      __int16 v25 = 3;
      uint64_t v26 = 0;
      __int16 v27 = 0;
      int v28 = 0;
      uint64_t v29 = 0;
      int v8 = *(_DWORD *)(a1 + 28);
      int v30 = 3;
      int v31 = v8;
      LOBYTE(v32) = 0;
      char v34 = 0;
      uint64_t v9 = v6 >> 14;
      __int16 v14 = 0;
      std::vector<unsigned short>::vector(v15, v6 >> 14, &v14);
      long long v35 = *(_OWORD *)v15;
      uint64_t v36 = v16;
      v15[1] = 0;
      uint64_t v16 = 0;
      v15[0] = 0;
      char v37 = 1;
      __int16 v11 = 0;
      std::vector<unsigned short>::vector(__p, v9, &v11);
      long long v38 = *(_OWORD *)__p;
      uint64_t v39 = v13;
      __p[1] = 0;
      uint64_t v13 = 0;
      __p[0] = 0;
      char v40 = 1;
      memset(v41, 0, sizeof(v41));
      std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100](v5, &v17);
      long long v42 = (void **)v41;
      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v42);
      if (v40 && (void)v38)
      {
        *((void *)&v38 + 1) = v38;
        operator delete((void *)v38);
      }
      if (v37 && (void)v35)
      {
        *((void *)&v35 + 1) = v35;
        operator delete((void *)v35);
      }
      if (v34 && v33 < 0) {
        operator delete(v32);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v15[0])
      {
        v15[1] = v15[0];
        operator delete(v15[0]);
      }
      v2 += 104857600;
      v4 -= 104857600;
    }
    while (v2 < v10 + *(void *)(a1 + 40));
  }
}

void sub_1B906BDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a41)
  {
    long long v43 = *(void **)(v41 + 136);
    if (v43)
    {
      *(void *)(v41 + 144) = v43;
      operator delete(v43);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  if (a37)
  {
    if (a36 < 0) {
      operator delete(*(void **)(v41 + 104));
    }
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unint64_t v38 = a2[-2].n128_u64[0];
                char v37 = (long long *)&a2[-2];
                if (v38 < *(void *)v10)
                {
                  long long v108 = *(_OWORD *)v10;
                  long long v117 = *(_OWORD *)(v10 + 16);
                  long long v39 = v37[1];
                  *(_OWORD *)unint64_t v10 = *v37;
                  *(_OWORD *)(v10 + 16) = v39;
                  *char v37 = v108;
                  v37[1] = v117;
                }
                break;
              case 3uLL:
                _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)v10, (unint64_t *)(v10 + 32), a2[-2].n128_u64);
                break;
              case 4uLL:
                _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEvT1_SP_SP_SP_SI_(v10, (__n128 *)(v10 + 32), (__n128 *)(v10 + 64), a2 - 2);
                break;
              case 5uLL:
                char v40 = (long long *)(v10 + 32);
                uint64_t v41 = (long long *)(v10 + 64);
                long long v42 = (long long *)(v10 + 96);
                _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEvT1_SP_SP_SP_SI_(v10, (__n128 *)(v10 + 32), (__n128 *)(v10 + 64), (__n128 *)(v10 + 96));
                unint64_t v44 = a2[-2].n128_u64[0];
                long long v43 = a2 - 2;
                if (v44 < *(void *)(v10 + 96))
                {
                  __n128 v45 = (__n128)*v42;
                  __n128 v118 = *(__n128 *)(v10 + 112);
                  __n128 v46 = v43[1];
                  *long long v42 = (__int128)*v43;
                  *(__n128 *)(v10 + 112) = v46;
                  *long long v43 = v45;
                  v43[1] = v118;
                  if (*(void *)v42 < *(void *)v41)
                  {
                    long long v48 = *v41;
                    long long v47 = *(_OWORD *)(v10 + 80);
                    long long v49 = *(_OWORD *)(v10 + 112);
                    *uint64_t v41 = *v42;
                    *(_OWORD *)(v10 + 80) = v49;
                    *long long v42 = v48;
                    *(_OWORD *)(v10 + 112) = v47;
                    if (*(void *)v41 < *(void *)v40)
                    {
                      long long v51 = *v40;
                      long long v50 = *(_OWORD *)(v10 + 48);
                      long long v52 = *(_OWORD *)(v10 + 80);
                      *char v40 = *v41;
                      *(_OWORD *)(v10 + 48) = v52;
                      *uint64_t v41 = v51;
                      *(_OWORD *)(v10 + 80) = v50;
                      if (*(void *)(v10 + 32) < *(void *)v10)
                      {
                        long long v109 = *(_OWORD *)v10;
                        long long v119 = *(_OWORD *)(v10 + 16);
                        long long v53 = *(_OWORD *)(v10 + 48);
                        *(_OWORD *)unint64_t v10 = *v40;
                        *(_OWORD *)(v10 + 16) = v53;
                        *char v40 = v109;
                        *(_OWORD *)(v10 + 48) = v119;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 767)
          {
            long long v54 = (__n128 *)(v10 + 32);
            BOOL v56 = (__n128 *)v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  unint64_t v60 = *(void *)(v58 + 32);
                  if (v60 < *(void *)v58)
                  {
                    long long v110 = *(_OWORD *)(v58 + 40);
                    uint64_t v120 = *(void *)(v58 + 56);
                    uint64_t v61 = v57;
                    while (1)
                    {
                      uint64_t v62 = v10 + v61;
                      long long v63 = *(_OWORD *)(v10 + v61 + 16);
                      *(_OWORD *)(v62 + 32) = *(_OWORD *)(v10 + v61);
                      *(_OWORD *)(v62 + 48) = v63;
                      if (!v61) {
                        break;
                      }
                      v61 -= 32;
                      if (v60 >= *(void *)(v62 - 32))
                      {
                        uint64_t v64 = v10 + v61 + 32;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v64 = v10;
LABEL_80:
                    *(void *)uint64_t v64 = v60;
                    *(void *)(v64 + 24) = v120;
                    *(_OWORD *)(v64 + 8) = v110;
                  }
                  long long v54 = v59 + 2;
                  v57 += 32;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (&v59[2] != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                unint64_t v95 = (unint64_t)v54;
                unint64_t v96 = *(void *)(a1 + 32);
                if (v96 < *(void *)a1)
                {
                  __n128 v113 = *(__n128 *)(a1 + 40);
                  unint64_t v123 = *(void *)(a1 + 56);
                  do
                  {
                    __n128 v97 = v54[-1];
                    __n128 *v54 = v54[-2];
                    v54[1] = v97;
                    unint64_t v98 = v54[-4].n128_u64[0];
                    v54 -= 2;
                  }
                  while (v96 < v98);
                  v54->n128_u64[0] = v96;
                  v54[1].n128_u64[1] = v123;
                  *(__n128 *)((char *)v54 + 8) = v113;
                }
                long long v54 = (__n128 *)(v95 + 32);
                a1 = v95;
              }
              while ((__n128 *)(v95 + 32) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)v10 != a2)
            {
              int64_t v65 = (v12 - 2) >> 1;
              int64_t v66 = v65;
              do
              {
                int64_t v67 = v66;
                if (v65 >= v66)
                {
                  uint64_t v68 = (2 * v66) | 1;
                  unint64_t v69 = v10 + 32 * v68;
                  if (2 * v67 + 2 < (uint64_t)v12)
                  {
                    unint64_t v71 = *(void *)(v69 + 32);
                    BOOL v70 = *(void *)v69 >= v71;
                    if (*(void *)v69 > v71) {
                      unint64_t v71 = *(void *)v69;
                    }
                    if (!v70)
                    {
                      v69 += 32;
                      uint64_t v68 = 2 * v67 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v71 = *(void *)v69;
                  }
                  unint64_t v72 = v10 + 32 * v67;
                  unint64_t v73 = *(void *)v72;
                  if (v71 >= *(void *)v72)
                  {
                    uint64_t v121 = *(void *)(v72 + 24);
                    long long v111 = *(_OWORD *)(v72 + 8);
                    do
                    {
                      uint64_t v74 = (_OWORD *)v72;
                      unint64_t v72 = v69;
                      long long v75 = *(_OWORD *)(v69 + 16);
                      *uint64_t v74 = *(_OWORD *)v69;
                      v74[1] = v75;
                      if (v65 < v68) {
                        break;
                      }
                      uint64_t v76 = (2 * v68) | 1;
                      unint64_t v69 = v10 + 32 * v76;
                      uint64_t v68 = 2 * v68 + 2;
                      if (v68 < (uint64_t)v12)
                      {
                        unint64_t v79 = *(void *)v69;
                        unint64_t v77 = *(void *)(v69 + 32);
                        BOOL v78 = *(void *)v69 >= v77;
                        if (*(void *)v69 <= v77) {
                          unint64_t v79 = *(void *)(v69 + 32);
                        }
                        if (*(void *)v69 < v77) {
                          v69 += 32;
                        }
                        if (v78) {
                          uint64_t v68 = v76;
                        }
                      }
                      else
                      {
                        unint64_t v79 = *(void *)v69;
                        uint64_t v68 = v76;
                      }
                    }
                    while (v79 >= v73);
                    *(void *)unint64_t v72 = v73;
                    *(void *)(v72 + 24) = v121;
                    *(_OWORD *)(v72 + 8) = v111;
                  }
                }
                int64_t v66 = v67 - 1;
              }
              while (v67);
              uint64_t v80 = (unint64_t)v11 >> 5;
              do
              {
                uint64_t v81 = 0;
                long long v112 = *(_OWORD *)v10;
                __n128 v122 = *(__n128 *)(v10 + 16);
                unint64_t v82 = (_OWORD *)v10;
                do
                {
                  uint64_t v83 = (uint64_t)&v82[2 * v81 + 2];
                  uint64_t v84 = (2 * v81) | 1;
                  uint64_t v85 = 2 * v81 + 2;
                  if (v85 < v80 && *(void *)v83 < *(void *)(v83 + 32))
                  {
                    v83 += 32;
                    uint64_t v84 = v85;
                  }
                  long long v86 = *(_OWORD *)(v83 + 16);
                  *unint64_t v82 = *(_OWORD *)v83;
                  v82[1] = v86;
                  unint64_t v82 = (_OWORD *)v83;
                  uint64_t v81 = v84;
                }
                while (v84 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
                a2 -= 2;
                if ((__n128 *)v83 == a2)
                {
                  *(_OWORD *)uint64_t v83 = v112;
                  *(__n128 *)(v83 + 16) = v122;
                }
                else
                {
                  __n128 v87 = a2[1];
                  *(__n128 *)uint64_t v83 = *a2;
                  *(__n128 *)(v83 + 16) = v87;
                  *a2 = (__n128)v112;
                  a2[1] = v122;
                  uint64_t v88 = v83 - v10 + 32;
                  if (v88 >= 33)
                  {
                    unint64_t v89 = (((unint64_t)v88 >> 5) - 2) >> 1;
                    uint64_t v90 = (_OWORD *)(v10 + 32 * v89);
                    unint64_t v91 = *(void *)v83;
                    if (*(void *)v90 < *(void *)v83)
                    {
                      uint64_t v104 = *(void *)(v83 + 24);
                      long long v101 = *(_OWORD *)(v83 + 8);
                      do
                      {
                        BOOL v92 = (_OWORD *)v83;
                        uint64_t v83 = (uint64_t)v90;
                        long long v93 = v90[1];
                        *BOOL v92 = *v90;
                        v92[1] = v93;
                        if (!v89) {
                          break;
                        }
                        unint64_t v89 = (v89 - 1) >> 1;
                        uint64_t v90 = (_OWORD *)(v10 + 32 * v89);
                      }
                      while (*(void *)v90 < v91);
                      *(void *)uint64_t v83 = v91;
                      *(void *)(v83 + 24) = v104;
                      *(_OWORD *)(v83 + 8) = v101;
                    }
                  }
                }
              }
              while (v80-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 32 * (v12 >> 1);
          if ((unint64_t)v11 > 0x1000)
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)a1, (unint64_t *)(a1 + 32 * (v12 >> 1)), a2[-2].n128_u64);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)(a1 + 32), (unint64_t *)(v14 - 32), a2[-4].n128_u64);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)(a1 + 64), (unint64_t *)(a1 + 32 + 32 * v13), a2[-6].n128_u64);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)(v14 - 32), (unint64_t *)v14, (unint64_t *)(a1 + 32 + 32 * v13));
            long long v105 = *(_OWORD *)a1;
            long long v114 = *(_OWORD *)(a1 + 16);
            long long v15 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)(a1 + 16) = v15;
            *(_OWORD *)unint64_t v14 = v105;
            *(_OWORD *)(v14 + 16) = v114;
          }
          else
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)(a1 + 32 * (v12 >> 1)), (unint64_t *)a1, a2[-2].n128_u64);
          }
          --a3;
          unint64_t v16 = *(void *)a1;
          if ((a4 & 1) != 0 || *(void *)(a1 - 32) < v16) {
            break;
          }
          uint64_t v103 = *(void *)(a1 + 24);
          long long v100 = *(_OWORD *)(a1 + 8);
          if (v16 >= a2[-2].n128_u64[0])
          {
            unint64_t v30 = a1 + 32;
            do
            {
              unint64_t v10 = v30;
              if (v30 >= (unint64_t)a2) {
                break;
              }
              v30 += 32;
            }
            while (v16 >= *(void *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              unint64_t v29 = *(void *)(v10 + 32);
              v10 += 32;
            }
            while (v16 >= v29);
          }
          int v31 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            int v31 = (long long *)a2;
            do
            {
              unint64_t v32 = *((void *)v31 - 4);
              v31 -= 2;
            }
            while (v16 < v32);
          }
          while (v10 < (unint64_t)v31)
          {
            long long v107 = *(_OWORD *)v10;
            long long v116 = *(_OWORD *)(v10 + 16);
            long long v33 = v31[1];
            *(_OWORD *)unint64_t v10 = *v31;
            *(_OWORD *)(v10 + 16) = v33;
            *int v31 = v107;
            v31[1] = v116;
            do
            {
              unint64_t v34 = *(void *)(v10 + 32);
              v10 += 32;
            }
            while (v16 >= v34);
            do
            {
              unint64_t v35 = *((void *)v31 - 4);
              v31 -= 2;
            }
            while (v16 < v35);
          }
          BOOL v4 = v10 - 32 >= a1;
          BOOL v5 = v10 - 32 == a1;
          if (v10 - 32 != a1)
          {
            long long v36 = *(_OWORD *)(v10 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 16) = v36;
          }
          a4 = 0;
          *(void *)(v10 - 32) = v16;
          *(void *)(v10 - 8) = v103;
          *(_OWORD *)(v10 - 24) = v100;
        }
        uint64_t v17 = 0;
        uint64_t v102 = *(void *)(a1 + 24);
        long long v99 = *(_OWORD *)(a1 + 8);
        do
        {
          unint64_t v18 = *(void *)(a1 + v17 + 32);
          v17 += 32;
        }
        while (v18 < v16);
        unint64_t v19 = a1 + v17;
        uint64_t v20 = a2;
        if (v17 == 32)
        {
          uint64_t v20 = a2;
          do
          {
            if (v19 >= (unint64_t)v20) {
              break;
            }
            unint64_t v22 = v20[-2].n128_u64[0];
            v20 -= 2;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            unint64_t v21 = v20[-2].n128_u64[0];
            v20 -= 2;
          }
          while (v21 >= v16);
        }
        unint64_t v10 = a1 + v17;
        if (v19 < (unint64_t)v20)
        {
          uint64_t v23 = (long long *)v20;
          do
          {
            long long v106 = *(_OWORD *)v10;
            long long v115 = *(_OWORD *)(v10 + 16);
            long long v24 = v23[1];
            *(_OWORD *)unint64_t v10 = *v23;
            *(_OWORD *)(v10 + 16) = v24;
            *uint64_t v23 = v106;
            v23[1] = v115;
            do
            {
              unint64_t v25 = *(void *)(v10 + 32);
              v10 += 32;
            }
            while (v25 < v16);
            do
            {
              unint64_t v26 = *((void *)v23 - 4);
              v23 -= 2;
            }
            while (v26 >= v16);
          }
          while (v10 < (unint64_t)v23);
        }
        if (v10 - 32 != a1)
        {
          long long v27 = *(_OWORD *)(v10 - 16);
          *(_OWORD *)a1 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 16) = v27;
        }
        *(void *)(v10 - 32) = v16;
        *(void *)(v10 - 8) = v102;
        *(_OWORD *)(v10 - 24) = v99;
        if (v19 >= (unint64_t)v20) {
          break;
        }
LABEL_30:
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(a1, v10 - 32, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEbT1_SP_SI_(a1, v10 - 32);
      if (_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEbT1_SP_SI_(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (__n128 *)(v10 - 32);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEbT1_SP_SI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = (long long *)(a2 - 32);
      if (*(void *)(a2 - 32) < *(void *)a1)
      {
        long long v8 = *(_OWORD *)a1;
        long long v7 = *(_OWORD *)(a1 + 16);
        long long v9 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v9;
        *unint64_t v6 = v8;
        *(_OWORD *)(a2 - 16) = v7;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)a1, (unint64_t *)(a1 + 32), (unint64_t *)(a2 - 32));
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEvT1_SP_SP_SP_SI_(a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a2 - 32));
      return 1;
    case 5:
      unint64_t v19 = (long long *)(a1 + 32);
      uint64_t v20 = (long long *)(a1 + 64);
      unint64_t v21 = (long long *)(a1 + 96);
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEvT1_SP_SP_SP_SI_(a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96));
      unint64_t v23 = *(void *)(a2 - 32);
      unint64_t v22 = (long long *)(a2 - 32);
      if (v23 < *(void *)(a1 + 96))
      {
        long long v25 = *v21;
        long long v24 = *(_OWORD *)(a1 + 112);
        long long v26 = v22[1];
        *unint64_t v21 = *v22;
        *(_OWORD *)(a1 + 112) = v26;
        *unint64_t v22 = v25;
        v22[1] = v24;
        if (*(void *)v21 < *(void *)v20)
        {
          long long v28 = *v20;
          long long v27 = *(_OWORD *)(a1 + 80);
          long long v29 = *(_OWORD *)(a1 + 112);
          long long *v20 = *v21;
          *(_OWORD *)(a1 + 80) = v29;
          *unint64_t v21 = v28;
          *(_OWORD *)(a1 + 112) = v27;
          if (*(void *)v20 < *(void *)v19)
          {
            long long v31 = *v19;
            long long v30 = *(_OWORD *)(a1 + 48);
            long long v32 = *(_OWORD *)(a1 + 80);
            *unint64_t v19 = *v20;
            *(_OWORD *)(a1 + 48) = v32;
            long long *v20 = v31;
            *(_OWORD *)(a1 + 80) = v30;
            if (*(void *)(a1 + 32) < *(void *)a1)
            {
              long long v34 = *(_OWORD *)a1;
              long long v33 = *(_OWORD *)(a1 + 16);
              long long v35 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)a1 = *v19;
              *(_OWORD *)(a1 + 16) = v35;
              *unint64_t v19 = v34;
              *(_OWORD *)(a1 + 48) = v33;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v10 = (void *)(a1 + 64);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((long long *)a1, (unint64_t *)(a1 + 32), (unint64_t *)(a1 + 64));
      uint64_t v11 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unint64_t v14 = *(void *)v11;
    if (*(void *)v11 < *v10)
    {
      long long v36 = *(_OWORD *)(v11 + 8);
      uint64_t v37 = *(void *)(v11 + 24);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 80);
        *(_OWORD *)(v16 + 96) = *(_OWORD *)(a1 + v15 + 64);
        *(_OWORD *)(v16 + 112) = v17;
        if (v15 == -64) {
          break;
        }
        v15 -= 32;
        if (v14 >= *(void *)(v16 + 32))
        {
          uint64_t v18 = a1 + v15 + 96;
          goto LABEL_13;
        }
      }
      uint64_t v18 = a1;
LABEL_13:
      *(void *)uint64_t v18 = v14;
      *(_OWORD *)(v18 + 8) = v36;
      *(void *)(v18 + 24) = v37;
      if (++v13 == 8) {
        return v11 + 32 == a2;
      }
    }
    unint64_t v10 = (void *)v11;
    v12 += 32;
    v11 += 32;
    if (v11 == a2) {
      return 1;
    }
  }
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    v201 = a2 - 14;
    uint64_t v206 = a2;
    v199 = a2 - 42;
    v200 = a2 - 28;
    unint64_t v8 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v8;
        long long v9 = v206;
        uint64_t v10 = (uint64_t)v206 - v8;
        unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v206 - v8) >> 5);
        if (!(!v5 & v4))
        {
          switch(v11)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              int64_t v66 = v206 - 14;
              if (*((void *)v206 - 28) >= *(void *)a1) {
                return;
              }
              int64_t v67 = (long long *)a1;
              break;
            case 3uLL:
              _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224), v201);
              return;
            case 4uLL:
              _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224), (long long *)(a1 + 448), v201);
              return;
            case 5uLL:
              uint64_t v68 = (void *)(a1 + 448);
              _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224), (long long *)(a1 + 448), (long long *)(a1 + 672));
              if (*((void *)v206 - 28) >= *(void *)(a1 + 672)) {
                return;
              }
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)(a1 + 672), v206 - 14);
              if (*(void *)(a1 + 672) >= *v68) {
                return;
              }
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)(a1 + 448), (long long *)(a1 + 672));
              if (*v68 >= *(void *)(a1 + 224)) {
                return;
              }
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)(a1 + 224), (long long *)(a1 + 448));
              if (*(void *)(a1 + 224) >= *(void *)a1) {
                return;
              }
              int64_t v67 = (long long *)a1;
              int64_t v66 = (long long *)(a1 + 224);
              break;
            default:
              JUMPOUT(0);
          }
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(v67, v66);
          return;
        }
        if (v10 <= 5375)
        {
          if (a4)
          {
            if ((long long *)a1 != v206)
            {
              unint64_t v69 = a1 + 224;
              if ((long long *)(a1 + 224) != v206)
              {
                uint64_t v70 = 0;
                unint64_t v71 = a1;
                do
                {
                  unint64_t v72 = v69;
                  if (*(void *)(v71 + 224) < *(void *)v71)
                  {
                    long long v73 = *(_OWORD *)v69;
                    long long v74 = *(_OWORD *)(v69 + 32);
                    long long v227 = *(_OWORD *)(v69 + 16);
                    long long v228 = v74;
                    long long v226 = v73;
                    long long v75 = *(_OWORD *)(v69 + 48);
                    long long v76 = *(_OWORD *)(v69 + 64);
                    long long v77 = *(_OWORD *)(v69 + 80);
                    uint64_t v232 = *(void *)(v69 + 96);
                    long long v230 = v76;
                    long long v231 = v77;
                    long long v229 = v75;
                    v233.n128_u8[0] = 0;
                    char v235 = 0;
                    if (*(unsigned char *)(v71 + 352))
                    {
                      uint64_t v234 = *(void *)(v71 + 344);
                      __n128 v233 = *(__n128 *)(v71 + 328);
                      *(void *)(v71 + 336) = 0;
                      *(void *)(v71 + 344) = 0;
                      *(void *)(v71 + 328) = 0;
                      char v235 = 1;
                    }
                    BOOL v78 = (__n128 *)(v71 + 360);
                    v236.n128_u8[0] = 0;
                    char v238 = 0;
                    if (*(unsigned char *)(v71 + 384))
                    {
                      __n128 v236 = *v78;
                      uint64_t v237 = *(void *)(v71 + 376);
                      v78->n128_u64[0] = 0;
                      *(void *)(v71 + 368) = 0;
                      *(void *)(v71 + 376) = 0;
                      char v238 = 1;
                    }
                    __p.n128_u8[0] = 0;
                    char v241 = 0;
                    if (*(unsigned char *)(v71 + 416))
                    {
                      __n128 __p = *(__n128 *)(v71 + 392);
                      uint64_t v240 = *(void *)(v71 + 408);
                      *(void *)(v71 + 392) = 0;
                      *(void *)(v71 + 400) = 0;
                      *(void *)(v71 + 408) = 0;
                      char v241 = 1;
                    }
                    long long v242 = *(_OWORD *)(v71 + 424);
                    uint64_t v243 = *(void *)(v71 + 440);
                    *(void *)(v71 + 424) = 0;
                    *(void *)(v71 + 432) = 0;
                    *(void *)(v71 + 440) = 0;
                    uint64_t v79 = v70;
                    while (1)
                    {
                      uint64_t v80 = v79;
                      uint64_t v81 = a1 + v79;
                      long long v82 = *(_OWORD *)(a1 + v79 + 80);
                      *(_OWORD *)(v81 + 288) = *(_OWORD *)(a1 + v79 + 64);
                      *(_OWORD *)(v81 + 304) = v82;
                      *(void *)(v81 + 320) = *(void *)(a1 + v79 + 96);
                      long long v83 = *(_OWORD *)(a1 + v79 + 16);
                      *(_OWORD *)(v81 + 224) = *(_OWORD *)v81;
                      *(_OWORD *)(v81 + 240) = v83;
                      long long v84 = *(_OWORD *)(a1 + v79 + 48);
                      *(_OWORD *)(v81 + 256) = *(_OWORD *)(a1 + v79 + 32);
                      *(_OWORD *)(v81 + 272) = v84;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v79 + 328, (__n128 *)(a1 + v79 + 104));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v81 + 360, (__n128 *)(v81 + 136));
                      uint64_t v85 = a1 + v80;
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v80 + 392, (__n128 *)(a1 + v80 + 168));
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + v80 + 424));
                      *(_OWORD *)(v85 + 424) = *(_OWORD *)(v85 + 200);
                      *(void *)(v85 + 440) = *(void *)(v85 + 216);
                      *(void *)(v85 + 208) = 0;
                      *(void *)(v85 + 216) = 0;
                      *(void *)(v85 + 200) = 0;
                      if (!v80) {
                        break;
                      }
                      uint64_t v79 = v80 - 224;
                      if ((unint64_t)v226 >= *(void *)(a1 + v80 - 224))
                      {
                        unint64_t v86 = a1 + v80;
                        goto LABEL_108;
                      }
                    }
                    unint64_t v86 = a1;
LABEL_108:
                    long long v87 = v226;
                    long long v88 = v228;
                    *(_OWORD *)(v86 + 16) = v227;
                    *(_OWORD *)(v86 + 32) = v88;
                    *(_OWORD *)unint64_t v86 = v87;
                    long long v89 = v229;
                    long long v90 = v230;
                    long long v91 = v231;
                    *(void *)(v86 + 96) = v232;
                    *(_OWORD *)(v86 + 64) = v90;
                    *(_OWORD *)(v86 + 80) = v91;
                    *(_OWORD *)(v86 + 48) = v89;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v80 + 104, &v233);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v80 + 136, &v236);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v80 + 168, &__p);
                    BOOL v92 = (uint64_t *)(a1 + v80 + 200);
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(v92);
                    *BOOL v92 = v242;
                    *(void *)(v86 + 208) = *((void *)&v242 + 1);
                    *(void *)(v86 + 216) = v243;
                    long long v242 = 0uLL;
                    uint64_t v243 = 0;
                    *(void *)&long long v207 = &v242;
                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                    if (v241 && __p.n128_u64[0])
                    {
                      __p.n128_u64[1] = __p.n128_u64[0];
                      operator delete((void *)__p.n128_u64[0]);
                    }
                    if (v238 && v236.n128_u64[0])
                    {
                      v236.n128_u64[1] = v236.n128_u64[0];
                      operator delete((void *)v236.n128_u64[0]);
                    }
                    if (v235 && SHIBYTE(v234) < 0) {
                      operator delete((void *)v233.n128_u64[0]);
                    }
                    long long v9 = v206;
                  }
                  unint64_t v69 = v72 + 224;
                  v70 += 224;
                  unint64_t v71 = v72;
                }
                while ((long long *)(v72 + 224) != v9);
              }
            }
          }
          else if ((long long *)a1 != v206)
          {
            unint64_t v179 = a1 + 224;
            if ((long long *)(a1 + 224) != v206)
            {
              unint64_t v180 = a1 - 224;
              do
              {
                unint64_t v181 = v179;
                if (*(void *)(a1 + 224) < *(void *)a1)
                {
                  long long v182 = *(_OWORD *)v179;
                  long long v183 = *(_OWORD *)(v179 + 32);
                  long long v227 = *(_OWORD *)(v179 + 16);
                  long long v228 = v183;
                  long long v226 = v182;
                  long long v184 = *(_OWORD *)(v179 + 48);
                  long long v185 = *(_OWORD *)(v179 + 64);
                  long long v186 = *(_OWORD *)(v179 + 80);
                  uint64_t v232 = *(void *)(v179 + 96);
                  long long v230 = v185;
                  long long v231 = v186;
                  long long v229 = v184;
                  v233.n128_u8[0] = 0;
                  char v235 = 0;
                  if (*(unsigned char *)(a1 + 352))
                  {
                    uint64_t v234 = *(void *)(a1 + 344);
                    __n128 v233 = *(__n128 *)(a1 + 328);
                    *(void *)(a1 + 336) = 0;
                    *(void *)(a1 + 344) = 0;
                    *(void *)(a1 + 328) = 0;
                    char v235 = 1;
                  }
                  unsigned int v187 = (__n128 *)(a1 + 360);
                  v236.n128_u8[0] = 0;
                  char v238 = 0;
                  if (*(unsigned char *)(a1 + 384))
                  {
                    __n128 v236 = *v187;
                    uint64_t v237 = *(void *)(a1 + 376);
                    v187->n128_u64[0] = 0;
                    *(void *)(a1 + 368) = 0;
                    *(void *)(a1 + 376) = 0;
                    char v238 = 1;
                  }
                  __p.n128_u8[0] = 0;
                  char v241 = 0;
                  if (*(unsigned char *)(a1 + 416))
                  {
                    __n128 __p = *(__n128 *)(a1 + 392);
                    uint64_t v240 = *(void *)(a1 + 408);
                    *(void *)(a1 + 392) = 0;
                    *(void *)(a1 + 400) = 0;
                    *(void *)(a1 + 408) = 0;
                    char v241 = 1;
                  }
                  long long v242 = *(_OWORD *)(a1 + 424);
                  uint64_t v243 = *(void *)(a1 + 440);
                  *(void *)(a1 + 424) = 0;
                  *(void *)(a1 + 432) = 0;
                  *(void *)(a1 + 440) = 0;
                  unint64_t v188 = v180;
                  do
                  {
                    long long v189 = *(_OWORD *)(v188 + 304);
                    *(_OWORD *)(v188 + 512) = *(_OWORD *)(v188 + 288);
                    *(_OWORD *)(v188 + 528) = v189;
                    *(void *)(v188 + 544) = *(void *)(v188 + 320);
                    long long v190 = *(_OWORD *)(v188 + 240);
                    *(_OWORD *)(v188 + 448) = *(_OWORD *)(v188 + 224);
                    *(_OWORD *)(v188 + 464) = v190;
                    long long v191 = *(_OWORD *)(v188 + 272);
                    *(_OWORD *)(v188 + 480) = *(_OWORD *)(v188 + 256);
                    *(_OWORD *)(v188 + 496) = v191;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v188 + 552, (__n128 *)(v188 + 328));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 584, (__n128 *)(v188 + 360));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 616, (__n128 *)(v188 + 392));
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v188 + 648));
                    *(_OWORD *)(v188 + 648) = *(_OWORD *)(v188 + 424);
                    *(void *)(v188 + 664) = *(void *)(v188 + 440);
                    *(void *)(v188 + 424) = 0;
                    *(void *)(v188 + 432) = 0;
                    *(void *)(v188 + 440) = 0;
                    unint64_t v192 = *(void *)v188;
                    v188 -= 224;
                  }
                  while ((unint64_t)v226 < v192);
                  long long v193 = v226;
                  long long v194 = v228;
                  *(_OWORD *)(v188 + 464) = v227;
                  *(_OWORD *)(v188 + 480) = v194;
                  *(_OWORD *)(v188 + 448) = v193;
                  long long v195 = v229;
                  long long v196 = v230;
                  long long v197 = v231;
                  *(void *)(v188 + 544) = v232;
                  *(_OWORD *)(v188 + 512) = v196;
                  *(_OWORD *)(v188 + 528) = v197;
                  *(_OWORD *)(v188 + 496) = v195;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v188 + 552, &v233);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 584, &v236);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 616, &__p);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v188 + 648));
                  *(_OWORD *)(v188 + 648) = v242;
                  *(void *)(v188 + 664) = v243;
                  long long v242 = 0uLL;
                  uint64_t v243 = 0;
                  *(void *)&long long v207 = &v242;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                  if (v241 && __p.n128_u64[0])
                  {
                    __p.n128_u64[1] = __p.n128_u64[0];
                    operator delete((void *)__p.n128_u64[0]);
                  }
                  if (v238 && v236.n128_u64[0])
                  {
                    v236.n128_u64[1] = v236.n128_u64[0];
                    operator delete((void *)v236.n128_u64[0]);
                  }
                  if (v235 && SHIBYTE(v234) < 0) {
                    operator delete((void *)v233.n128_u64[0]);
                  }
                  long long v9 = v206;
                }
                unint64_t v179 = v181 + 224;
                v180 += 224;
                a1 = v181;
              }
              while ((long long *)(v181 + 224) != v9);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((long long *)a1 != v206)
          {
            int64_t v204 = (v11 - 2) >> 1;
            int64_t v93 = v204;
            do
            {
              int64_t v94 = v93;
              if (v204 >= v93)
              {
                uint64_t v95 = (2 * v93) | 1;
                unint64_t v96 = (long long *)(a1 + 224 * v95);
                if (2 * v94 + 2 < (uint64_t)v11)
                {
                  unint64_t v99 = *(void *)v96;
                  unint64_t v97 = *((void *)v96 + 28);
                  BOOL v98 = *(void *)v96 >= v97;
                  if (*(void *)v96 <= v97) {
                    unint64_t v99 = *((void *)v96 + 28);
                  }
                  if (*(void *)v96 < v97) {
                    v96 += 14;
                  }
                  if (!v98) {
                    uint64_t v95 = 2 * v94 + 2;
                  }
                }
                else
                {
                  unint64_t v99 = *(void *)v96;
                }
                unint64_t v100 = a1 + 224 * v94;
                if (v99 >= *(void *)v100)
                {
                  long long v101 = *(_OWORD *)v100;
                  long long v102 = *(_OWORD *)(v100 + 32);
                  long long v227 = *(_OWORD *)(v100 + 16);
                  long long v228 = v102;
                  long long v226 = v101;
                  long long v103 = *(_OWORD *)(v100 + 48);
                  long long v104 = *(_OWORD *)(v100 + 64);
                  long long v105 = *(_OWORD *)(v100 + 80);
                  uint64_t v232 = *(void *)(v100 + 96);
                  long long v230 = v104;
                  long long v231 = v105;
                  long long v229 = v103;
                  v233.n128_u8[0] = 0;
                  char v235 = 0;
                  if (*(unsigned char *)(a1 + 224 * v94 + 128))
                  {
                    unint64_t v106 = a1 + 224 * v94;
                    __n128 v107 = *(__n128 *)(v106 + 104);
                    uint64_t v234 = *(void *)(v106 + 120);
                    __n128 v233 = v107;
                    *(void *)(v106 + 112) = 0;
                    *(void *)(v106 + 120) = 0;
                    *(void *)(v106 + 104) = 0;
                    char v235 = 1;
                  }
                  v236.n128_u8[0] = 0;
                  char v238 = 0;
                  if (*(unsigned char *)(a1 + 224 * v94 + 160))
                  {
                    unint64_t v108 = a1 + 224 * v94;
                    __n128 v236 = *(__n128 *)(v108 + 136);
                    uint64_t v237 = *(void *)(v108 + 152);
                    *(void *)(v108 + 136) = 0;
                    *(void *)(v108 + 144) = 0;
                    *(void *)(v108 + 152) = 0;
                    char v238 = 1;
                  }
                  __p.n128_u8[0] = 0;
                  char v241 = 0;
                  if (*(unsigned char *)(a1 + 224 * v94 + 192))
                  {
                    unint64_t v109 = a1 + 224 * v94;
                    __n128 __p = *(__n128 *)(v109 + 168);
                    uint64_t v240 = *(void *)(v109 + 184);
                    *(void *)(v109 + 168) = 0;
                    *(void *)(v109 + 176) = 0;
                    *(void *)(v109 + 184) = 0;
                    char v241 = 1;
                  }
                  int64_t v202 = v94;
                  unint64_t v110 = a1 + 224 * v94;
                  long long v242 = *(_OWORD *)(v110 + 200);
                  uint64_t v243 = *(void *)(v110 + 216);
                  *(void *)(v110 + 200) = 0;
                  *(void *)(v110 + 208) = 0;
                  *(void *)(v110 + 216) = 0;
                  do
                  {
                    long long v111 = v96;
                    long long v112 = *v96;
                    long long v113 = v96[2];
                    *(_OWORD *)(v100 + 16) = v96[1];
                    *(_OWORD *)(v100 + 32) = v113;
                    *(_OWORD *)unint64_t v100 = v112;
                    long long v114 = v96[3];
                    long long v115 = v96[4];
                    long long v116 = v96[5];
                    *(void *)(v100 + 96) = *((void *)v96 + 12);
                    *(_OWORD *)(v100 + 64) = v115;
                    *(_OWORD *)(v100 + 80) = v116;
                    *(_OWORD *)(v100 + 48) = v114;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v100 + 104, (__n128 *)((char *)v96 + 104));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v100 + 136, (__n128 *)((char *)v111 + 136));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v100 + 168, (__n128 *)((char *)v111 + 168));
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v100 + 200));
                    *(_OWORD *)(v100 + 200) = *(long long *)((char *)v111 + 200);
                    *(void *)(v100 + 216) = *((void *)v111 + 27);
                    *((void *)v111 + 25) = 0;
                    *((void *)v111 + 26) = 0;
                    *((void *)v111 + 27) = 0;
                    if (v204 < v95) {
                      break;
                    }
                    unint64_t v96 = (long long *)(a1 + 224 * ((2 * v95) | 1));
                    if (2 * v95 + 2 < (uint64_t)v11)
                    {
                      unint64_t v119 = *(void *)v96;
                      unint64_t v117 = *((void *)v96 + 28);
                      BOOL v118 = *(void *)v96 >= v117;
                      if (*(void *)v96 <= v117) {
                        unint64_t v119 = *((void *)v96 + 28);
                      }
                      if (*(void *)v96 < v117) {
                        v96 += 14;
                      }
                      uint64_t v95 = v118 ? (2 * v95) | 1 : 2 * v95 + 2;
                    }
                    else
                    {
                      unint64_t v119 = *(void *)v96;
                      uint64_t v95 = (2 * v95) | 1;
                    }
                    unint64_t v100 = (unint64_t)v111;
                  }
                  while (v119 >= (unint64_t)v226);
                  long long v120 = v226;
                  long long v121 = v228;
                  v111[1] = v227;
                  v111[2] = v121;
                  *long long v111 = v120;
                  long long v122 = v229;
                  long long v123 = v230;
                  long long v124 = v231;
                  *((void *)v111 + 12) = v232;
                  v111[4] = v123;
                  v111[5] = v124;
                  v111[3] = v122;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v111 + 104, &v233);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v111 + 136, &v236);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v111 + 168, &__p);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v111 + 25);
                  *(long long *)((char *)v111 + 200) = v242;
                  *((void *)v111 + 27) = v243;
                  long long v242 = 0uLL;
                  uint64_t v243 = 0;
                  *(void *)&long long v207 = &v242;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                  if (v241 && __p.n128_u64[0])
                  {
                    __p.n128_u64[1] = __p.n128_u64[0];
                    operator delete((void *)__p.n128_u64[0]);
                  }
                  if (v238 && v236.n128_u64[0])
                  {
                    v236.n128_u64[1] = v236.n128_u64[0];
                    operator delete((void *)v236.n128_u64[0]);
                  }
                  if (v235 && SHIBYTE(v234) < 0) {
                    operator delete((void *)v233.n128_u64[0]);
                  }
                  long long v9 = v206;
                  int64_t v94 = v202;
                }
              }
              int64_t v93 = v94 - 1;
            }
            while (v94);
            uint64_t v125 = (((unint64_t)v10 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
            unint64_t v198 = (__n128 *)(a1 + 104);
            do
            {
              long long v126 = *(_OWORD *)a1;
              long long v127 = *(_OWORD *)(a1 + 32);
              long long v208 = *(_OWORD *)(a1 + 16);
              long long v209 = v127;
              long long v207 = v126;
              long long v128 = *(_OWORD *)(a1 + 48);
              long long v129 = *(_OWORD *)(a1 + 64);
              long long v130 = *(_OWORD *)(a1 + 80);
              uint64_t v213 = *(void *)(a1 + 96);
              long long v211 = v129;
              long long v212 = v130;
              long long v210 = v128;
              v214.n128_u8[0] = 0;
              char v216 = 0;
              if (*(unsigned char *)(a1 + 128))
              {
                __n128 v131 = *v198;
                uint64_t v215 = *(void *)(a1 + 120);
                __n128 v214 = v131;
                *(void *)(a1 + 112) = 0;
                *(void *)(a1 + 120) = 0;
                v198->n128_u64[0] = 0;
                char v216 = 1;
              }
              v217.n128_u8[0] = 0;
              char v219 = 0;
              if (*(unsigned char *)(a1 + 160))
              {
                __n128 v217 = *(__n128 *)(a1 + 136);
                uint64_t v218 = *(void *)(a1 + 152);
                *(void *)(a1 + 136) = 0;
                *(void *)(a1 + 144) = 0;
                *(void *)(a1 + 152) = 0;
                char v219 = 1;
              }
              v205 = v9;
              v220.n128_u8[0] = 0;
              char v222 = 0;
              if (*(unsigned char *)(a1 + 192))
              {
                __n128 v220 = *(__n128 *)(a1 + 168);
                uint64_t v221 = *(void *)(a1 + 184);
                *(void *)(a1 + 168) = 0;
                *(void *)(a1 + 176) = 0;
                *(void *)(a1 + 184) = 0;
                char v222 = 1;
              }
              uint64_t v132 = 0;
              long long v223 = *(_OWORD *)(a1 + 200);
              uint64_t v224 = *(void *)(a1 + 216);
              *(void *)(a1 + 200) = 0;
              *(void *)(a1 + 208) = 0;
              *(void *)(a1 + 216) = 0;
              uint64_t v133 = a1;
              do
              {
                uint64_t v134 = v133 + 224 * v132 + 224;
                uint64_t v135 = 2 * v132;
                uint64_t v132 = (2 * v132) | 1;
                if (v135 + 2 < v125 && *(void *)v134 < *(void *)(v134 + 224))
                {
                  v134 += 224;
                  uint64_t v132 = v135 + 2;
                }
                long long v136 = *(_OWORD *)v134;
                long long v137 = *(_OWORD *)(v134 + 32);
                *(_OWORD *)(v133 + 16) = *(_OWORD *)(v134 + 16);
                *(_OWORD *)(v133 + 32) = v137;
                *(_OWORD *)uint64_t v133 = v136;
                long long v138 = *(_OWORD *)(v134 + 48);
                long long v139 = *(_OWORD *)(v134 + 64);
                long long v140 = *(_OWORD *)(v134 + 80);
                *(void *)(v133 + 96) = *(void *)(v134 + 96);
                *(_OWORD *)(v133 + 64) = v139;
                *(_OWORD *)(v133 + 80) = v140;
                *(_OWORD *)(v133 + 48) = v138;
                uint64_t v141 = (__n128 *)(v134 + 104);
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v133 + 104, (__n128 *)(v134 + 104));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v133 + 136, (__n128 *)(v134 + 136));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v133 + 168, (__n128 *)(v134 + 168));
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v133 + 200));
                *(_OWORD *)(v133 + 200) = *(_OWORD *)(v134 + 200);
                *(void *)(v133 + 216) = *(void *)(v134 + 216);
                *(void *)(v134 + 200) = 0;
                *(void *)(v134 + 208) = 0;
                *(void *)(v134 + 216) = 0;
                uint64_t v133 = v134;
              }
              while (v132 <= (uint64_t)((unint64_t)(v125 - 2) >> 1));
              if ((long long *)v134 == v205 - 14)
              {
                long long v173 = v207;
                long long v174 = v209;
                *(_OWORD *)(v134 + 16) = v208;
                *(_OWORD *)(v134 + 32) = v174;
                *(_OWORD *)uint64_t v134 = v173;
                long long v175 = v210;
                long long v176 = v211;
                long long v177 = v212;
                *(void *)(v134 + 96) = v213;
                *(_OWORD *)(v134 + 64) = v176;
                *(_OWORD *)(v134 + 80) = v177;
                *(_OWORD *)(v134 + 48) = v175;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v134 + 104, &v214);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 136, &v217);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 168, &v220);
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v134 + 200));
                *(_OWORD *)(v134 + 200) = v223;
                *(void *)(v134 + 216) = v224;
                long long v223 = 0uLL;
                uint64_t v224 = 0;
              }
              else
              {
                long long v142 = *(v205 - 14);
                long long v143 = *(v205 - 12);
                *(_OWORD *)(v134 + 16) = *(v205 - 13);
                *(_OWORD *)(v134 + 32) = v143;
                *(_OWORD *)uint64_t v134 = v142;
                long long v144 = *(v205 - 11);
                long long v145 = *(v205 - 10);
                long long v146 = *(v205 - 9);
                *(void *)(v134 + 96) = *((void *)v205 - 16);
                *(_OWORD *)(v134 + 64) = v145;
                *(_OWORD *)(v134 + 80) = v146;
                *(_OWORD *)(v134 + 48) = v144;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v134 + 104, (__n128 *)((char *)v205 - 120));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 136, (__n128 *)((char *)v205 - 88));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 168, (__n128 *)((char *)v205 - 56));
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v134 + 200));
                uint64_t v147 = (void *)v205 - 3;
                *(_OWORD *)(v134 + 200) = *(long long *)((char *)v205 - 24);
                *(void *)(v134 + 216) = *((void *)v205 - 1);
                void *v147 = 0;
                v147[1] = 0;
                v147[2] = 0;
                long long v148 = v207;
                long long v149 = v209;
                *(v205 - 13) = v208;
                *(v205 - 12) = v149;
                *(v205 - 14) = v148;
                long long v150 = v210;
                long long v151 = v211;
                long long v152 = v212;
                *((void *)v205 - 16) = v213;
                *(v205 - 10) = v151;
                *(v205 - 9) = v152;
                *(v205 - 11) = v150;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v205 - 120, &v214);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v205 - 88, &v217);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v205 - 56, &v220);
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v205 - 3);
                *(long long *)((char *)v205 - 24) = v223;
                *((void *)v205 - 1) = v224;
                long long v223 = 0uLL;
                uint64_t v224 = 0;
                uint64_t v153 = v134 + 224 - a1;
                if (v153 >= 225)
                {
                  unint64_t v154 = (unint64_t)(((((unint64_t)v153 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                          - 2) >> 1;
                  uint64_t v155 = a1 + 224 * v154;
                  if (*(void *)v155 < *(void *)v134)
                  {
                    long long v156 = *(_OWORD *)v134;
                    long long v157 = *(_OWORD *)(v134 + 32);
                    long long v227 = *(_OWORD *)(v134 + 16);
                    long long v228 = v157;
                    long long v226 = v156;
                    long long v158 = *(_OWORD *)(v134 + 48);
                    long long v159 = *(_OWORD *)(v134 + 64);
                    long long v160 = *(_OWORD *)(v134 + 80);
                    uint64_t v232 = *(void *)(v134 + 96);
                    long long v230 = v159;
                    long long v231 = v160;
                    long long v229 = v158;
                    v233.n128_u8[0] = 0;
                    char v235 = 0;
                    if (*(unsigned char *)(v134 + 128))
                    {
                      __n128 v161 = *v141;
                      uint64_t v234 = *(void *)(v134 + 120);
                      __n128 v233 = v161;
                      *(void *)(v134 + 112) = 0;
                      *(void *)(v134 + 120) = 0;
                      v141->n128_u64[0] = 0;
                      char v235 = 1;
                    }
                    v236.n128_u8[0] = 0;
                    char v238 = 0;
                    if (*(unsigned char *)(v134 + 160))
                    {
                      __n128 v236 = *(__n128 *)(v134 + 136);
                      uint64_t v237 = *(void *)(v134 + 152);
                      *(void *)(v134 + 136) = 0;
                      *(void *)(v134 + 144) = 0;
                      *(void *)(v134 + 152) = 0;
                      char v238 = 1;
                    }
                    __p.n128_u8[0] = 0;
                    char v241 = 0;
                    if (*(unsigned char *)(v134 + 192))
                    {
                      __n128 __p = *(__n128 *)(v134 + 168);
                      uint64_t v240 = *(void *)(v134 + 184);
                      *(void *)(v134 + 168) = 0;
                      *(void *)(v134 + 176) = 0;
                      *(void *)(v134 + 184) = 0;
                      char v241 = 1;
                    }
                    long long v242 = *(_OWORD *)(v134 + 200);
                    uint64_t v243 = *(void *)(v134 + 216);
                    *(void *)(v134 + 200) = 0;
                    *(void *)(v134 + 208) = 0;
                    *(void *)(v134 + 216) = 0;
                    do
                    {
                      uint64_t v162 = v155;
                      long long v163 = *(_OWORD *)v155;
                      long long v164 = *(_OWORD *)(v155 + 32);
                      *(_OWORD *)(v134 + 16) = *(_OWORD *)(v155 + 16);
                      *(_OWORD *)(v134 + 32) = v164;
                      *(_OWORD *)uint64_t v134 = v163;
                      long long v165 = *(_OWORD *)(v155 + 48);
                      long long v166 = *(_OWORD *)(v155 + 64);
                      long long v167 = *(_OWORD *)(v155 + 80);
                      *(void *)(v134 + 96) = *(void *)(v155 + 96);
                      *(_OWORD *)(v134 + 64) = v166;
                      *(_OWORD *)(v134 + 80) = v167;
                      *(_OWORD *)(v134 + 48) = v165;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v134 + 104, (__n128 *)(v155 + 104));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 136, (__n128 *)(v162 + 136));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 168, (__n128 *)(v162 + 168));
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v134 + 200));
                      *(_OWORD *)(v134 + 200) = *(_OWORD *)(v162 + 200);
                      *(void *)(v134 + 216) = *(void *)(v162 + 216);
                      *(void *)(v162 + 200) = 0;
                      *(void *)(v162 + 208) = 0;
                      *(void *)(v162 + 216) = 0;
                      if (!v154) {
                        break;
                      }
                      unint64_t v154 = (v154 - 1) >> 1;
                      uint64_t v155 = a1 + 224 * v154;
                      uint64_t v134 = v162;
                    }
                    while (*(void *)v155 < (unint64_t)v226);
                    long long v168 = v226;
                    long long v169 = v228;
                    *(_OWORD *)(v162 + 16) = v227;
                    *(_OWORD *)(v162 + 32) = v169;
                    *(_OWORD *)uint64_t v162 = v168;
                    long long v170 = v229;
                    long long v171 = v230;
                    long long v172 = v231;
                    *(void *)(v162 + 96) = v232;
                    *(_OWORD *)(v162 + 64) = v171;
                    *(_OWORD *)(v162 + 80) = v172;
                    *(_OWORD *)(v162 + 48) = v170;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v162 + 104, &v233);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v162 + 136, &v236);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v162 + 168, &__p);
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v162 + 200));
                    *(_OWORD *)(v162 + 200) = v242;
                    *(void *)(v162 + 216) = v243;
                    long long v242 = 0uLL;
                    uint64_t v243 = 0;
                    v225 = (void **)&v242;
                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v225);
                    if (v241 && __p.n128_u64[0])
                    {
                      __p.n128_u64[1] = __p.n128_u64[0];
                      operator delete((void *)__p.n128_u64[0]);
                    }
                    if (v238 && v236.n128_u64[0])
                    {
                      v236.n128_u64[1] = v236.n128_u64[0];
                      operator delete((void *)v236.n128_u64[0]);
                    }
                    if (v235 && SHIBYTE(v234) < 0) {
                      operator delete((void *)v233.n128_u64[0]);
                    }
                  }
                }
              }
              *(void *)&long long v226 = &v223;
              std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
              if (v222 && v220.n128_u64[0])
              {
                v220.n128_u64[1] = v220.n128_u64[0];
                operator delete((void *)v220.n128_u64[0]);
              }
              if (v219 && v217.n128_u64[0])
              {
                v217.n128_u64[1] = v217.n128_u64[0];
                operator delete((void *)v217.n128_u64[0]);
              }
              if (v216 && SHIBYTE(v215) < 0) {
                operator delete((void *)v214.n128_u64[0]);
              }
              BOOL v178 = v125-- <= 2;
              long long v9 = v205 - 14;
            }
            while (!v178);
          }
          return;
        }
        unint64_t v12 = v11 >> 1;
        int v13 = (long long *)(a1 + 224 * (v11 >> 1));
        if ((unint64_t)v10 > 0x7000)
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224 * (v11 >> 1)), v201);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(a1 + 224), (long long *)(224 * v12 + a1 - 224), v200);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(a1 + 448), (long long *)(a1 + 224 + 224 * v12), v199);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(224 * v12 + a1 - 224), v13, (long long *)(a1 + 224 + 224 * v12));
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)a1, v13);
        }
        else
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(a1 + 224 * (v11 >> 1)), (long long *)a1, v201);
        }
        --a3;
        if ((a4 & 1) != 0 || *(void *)(a1 - 224) < *(void *)a1) {
          break;
        }
        long long v42 = *(_OWORD *)a1;
        long long v43 = *(_OWORD *)(a1 + 32);
        long long v227 = *(_OWORD *)(a1 + 16);
        long long v228 = v43;
        long long v226 = v42;
        long long v44 = *(_OWORD *)(a1 + 48);
        long long v45 = *(_OWORD *)(a1 + 64);
        long long v46 = *(_OWORD *)(a1 + 80);
        uint64_t v232 = *(void *)(a1 + 96);
        long long v230 = v45;
        long long v231 = v46;
        long long v229 = v44;
        v233.n128_u8[0] = 0;
        char v235 = 0;
        if (*(unsigned char *)(a1 + 128))
        {
          __n128 v47 = *(__n128 *)(a1 + 104);
          uint64_t v234 = *(void *)(a1 + 120);
          __n128 v233 = v47;
          *(void *)(a1 + 112) = 0;
          *(void *)(a1 + 120) = 0;
          *(void *)(a1 + 104) = 0;
          char v235 = 1;
        }
        v236.n128_u8[0] = 0;
        char v238 = 0;
        if (*(unsigned char *)(a1 + 160))
        {
          __n128 v236 = *(__n128 *)(a1 + 136);
          uint64_t v237 = *(void *)(a1 + 152);
          *(void *)(a1 + 136) = 0;
          *(void *)(a1 + 144) = 0;
          *(void *)(a1 + 152) = 0;
          char v238 = 1;
        }
        __p.n128_u8[0] = 0;
        char v241 = 0;
        if (*(unsigned char *)(a1 + 192))
        {
          __n128 __p = *(__n128 *)(a1 + 168);
          uint64_t v240 = *(void *)(a1 + 184);
          *(void *)(a1 + 168) = 0;
          *(void *)(a1 + 176) = 0;
          *(void *)(a1 + 184) = 0;
          char v241 = 1;
        }
        long long v242 = *(_OWORD *)(a1 + 200);
        uint64_t v243 = *(void *)(a1 + 216);
        *(void *)(a1 + 200) = 0;
        *(void *)(a1 + 208) = 0;
        *(void *)(a1 + 216) = 0;
        unint64_t v48 = v226;
        if ((unint64_t)v226 < *(void *)v201)
        {
          unint64_t v8 = a1;
          do
          {
            unint64_t v49 = *(void *)(v8 + 224);
            v8 += 224;
          }
          while ((unint64_t)v226 >= v49);
        }
        else
        {
          unint64_t v50 = a1 + 224;
          do
          {
            unint64_t v8 = v50;
            if (v50 >= (unint64_t)v206) {
              break;
            }
            v50 += 224;
          }
          while ((unint64_t)v226 >= *(void *)v8);
        }
        long long v51 = v206;
        if (v8 < (unint64_t)v206)
        {
          long long v51 = v206;
          do
          {
            unint64_t v52 = *((void *)v51 - 28);
            v51 -= 14;
          }
          while ((unint64_t)v226 < v52);
        }
        while (v8 < (unint64_t)v51)
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)v8, v51);
          do
          {
            unint64_t v53 = *(void *)(v8 + 224);
            v8 += 224;
          }
          while (v48 >= v53);
          do
          {
            unint64_t v54 = *((void *)v51 - 28);
            v51 -= 14;
          }
          while (v48 < v54);
        }
        uint64_t v55 = (long long *)(v8 - 224);
        if (v8 - 224 != a1)
        {
          long long v56 = *v55;
          long long v57 = *(_OWORD *)(v8 - 192);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 - 208);
          *(_OWORD *)(a1 + 32) = v57;
          *(_OWORD *)a1 = v56;
          long long v58 = *(_OWORD *)(v8 - 176);
          long long v59 = *(_OWORD *)(v8 - 160);
          long long v60 = *(_OWORD *)(v8 - 144);
          *(void *)(a1 + 96) = *(void *)(v8 - 128);
          *(_OWORD *)(a1 + 64) = v59;
          *(_OWORD *)(a1 + 80) = v60;
          *(_OWORD *)(a1 + 48) = v58;
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v8 - 120));
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v8 - 88));
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v8 - 56));
          std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
          *(_OWORD *)(a1 + 200) = *(_OWORD *)(v8 - 24);
          *(void *)(a1 + 216) = *(void *)(v8 - 8);
          *(void *)(v8 - 24) = 0;
          *(void *)(v8 - 16) = 0;
          *(void *)(v8 - 8) = 0;
        }
        long long v61 = v226;
        long long v62 = v228;
        *(_OWORD *)(v8 - 208) = v227;
        *(_OWORD *)(v8 - 192) = v62;
        long long *v55 = v61;
        long long v63 = v229;
        long long v64 = v230;
        long long v65 = v231;
        *(void *)(v8 - 128) = v232;
        *(_OWORD *)(v8 - 160) = v64;
        *(_OWORD *)(v8 - 144) = v65;
        *(_OWORD *)(v8 - 176) = v63;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v8 - 120, &v233);
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 88, &v236);
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 56, &__p);
        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v8 - 24));
        *(_OWORD *)(v8 - 24) = v242;
        *(void *)(v8 - 8) = v243;
        long long v242 = 0uLL;
        uint64_t v243 = 0;
        *(void *)&long long v207 = &v242;
        std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
        if (v241 && __p.n128_u64[0])
        {
          __p.n128_u64[1] = __p.n128_u64[0];
          operator delete((void *)__p.n128_u64[0]);
        }
        if (v238 && v236.n128_u64[0])
        {
          v236.n128_u64[1] = v236.n128_u64[0];
          operator delete((void *)v236.n128_u64[0]);
        }
        if (v235 && SHIBYTE(v234) < 0) {
          operator delete((void *)v233.n128_u64[0]);
        }
LABEL_46:
        a4 = 0;
      }
      long long v14 = *(_OWORD *)a1;
      long long v15 = *(_OWORD *)(a1 + 32);
      long long v227 = *(_OWORD *)(a1 + 16);
      long long v228 = v15;
      long long v226 = v14;
      long long v16 = *(_OWORD *)(a1 + 48);
      long long v17 = *(_OWORD *)(a1 + 64);
      long long v18 = *(_OWORD *)(a1 + 80);
      uint64_t v232 = *(void *)(a1 + 96);
      long long v230 = v17;
      long long v231 = v18;
      long long v229 = v16;
      v233.n128_u8[0] = 0;
      char v235 = 0;
      if (*(unsigned char *)(a1 + 128))
      {
        __n128 v19 = *(__n128 *)(a1 + 104);
        uint64_t v234 = *(void *)(a1 + 120);
        __n128 v233 = v19;
        *(void *)(a1 + 112) = 0;
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 104) = 0;
        char v235 = 1;
      }
      v236.n128_u8[0] = 0;
      char v238 = 0;
      if (*(unsigned char *)(a1 + 160))
      {
        __n128 v236 = *(__n128 *)(a1 + 136);
        uint64_t v237 = *(void *)(a1 + 152);
        *(void *)(a1 + 136) = 0;
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        char v238 = 1;
      }
      __p.n128_u8[0] = 0;
      char v241 = 0;
      if (*(unsigned char *)(a1 + 192))
      {
        __n128 __p = *(__n128 *)(a1 + 168);
        uint64_t v240 = *(void *)(a1 + 184);
        *(void *)(a1 + 168) = 0;
        *(void *)(a1 + 176) = 0;
        *(void *)(a1 + 184) = 0;
        char v241 = 1;
      }
      uint64_t v20 = 0;
      long long v242 = *(_OWORD *)(a1 + 200);
      uint64_t v243 = *(void *)(a1 + 216);
      *(void *)(a1 + 200) = 0;
      *(void *)(a1 + 208) = 0;
      *(void *)(a1 + 216) = 0;
      unint64_t v21 = v226;
      do
      {
        unint64_t v22 = *(void *)(a1 + v20 + 224);
        v20 += 224;
      }
      while (v22 < (unint64_t)v226);
      unint64_t v23 = a1 + v20;
      long long v24 = v206;
      if (v20 == 224)
      {
        long long v24 = v206;
        do
        {
          if (v23 >= (unint64_t)v24) {
            break;
          }
          unint64_t v26 = *((void *)v24 - 28);
          v24 -= 14;
        }
        while (v26 >= (unint64_t)v226);
      }
      else
      {
        do
        {
          unint64_t v25 = *((void *)v24 - 28);
          v24 -= 14;
        }
        while (v25 >= (unint64_t)v226);
      }
      unint64_t v8 = a1 + v20;
      if (v23 < (unint64_t)v24)
      {
        long long v27 = v24;
        do
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)v8, v27);
          do
          {
            unint64_t v28 = *(void *)(v8 + 224);
            v8 += 224;
          }
          while (v28 < v21);
          do
          {
            unint64_t v29 = *((void *)v27 - 28);
            v27 -= 14;
          }
          while (v29 >= v21);
        }
        while (v8 < (unint64_t)v27);
      }
      long long v30 = (long long *)(v8 - 224);
      if (v8 - 224 != a1)
      {
        long long v31 = *v30;
        long long v32 = *(_OWORD *)(v8 - 192);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 - 208);
        *(_OWORD *)(a1 + 32) = v32;
        *(_OWORD *)a1 = v31;
        long long v33 = *(_OWORD *)(v8 - 176);
        long long v34 = *(_OWORD *)(v8 - 160);
        long long v35 = *(_OWORD *)(v8 - 144);
        *(void *)(a1 + 96) = *(void *)(v8 - 128);
        *(_OWORD *)(a1 + 64) = v34;
        *(_OWORD *)(a1 + 80) = v35;
        *(_OWORD *)(a1 + 48) = v33;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v8 - 120));
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v8 - 88));
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v8 - 56));
        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
        *(_OWORD *)(a1 + 200) = *(_OWORD *)(v8 - 24);
        *(void *)(a1 + 216) = *(void *)(v8 - 8);
        *(void *)(v8 - 24) = 0;
        *(void *)(v8 - 16) = 0;
        *(void *)(v8 - 8) = 0;
      }
      long long v36 = v226;
      long long v37 = v228;
      *(_OWORD *)(v8 - 208) = v227;
      *(_OWORD *)(v8 - 192) = v37;
      *long long v30 = v36;
      long long v38 = v229;
      long long v39 = v230;
      long long v40 = v231;
      *(void *)(v8 - 128) = v232;
      *(_OWORD *)(v8 - 160) = v39;
      *(_OWORD *)(v8 - 144) = v40;
      *(_OWORD *)(v8 - 176) = v38;
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v8 - 120, &v233);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 88, &v236);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 56, &__p);
      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v8 - 24));
      *(_OWORD *)(v8 - 24) = v242;
      *(void *)(v8 - 8) = v243;
      long long v242 = 0uLL;
      uint64_t v243 = 0;
      *(void *)&long long v207 = &v242;
      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
      if (v241 && __p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (v238 && v236.n128_u64[0])
      {
        v236.n128_u64[1] = v236.n128_u64[0];
        operator delete((void *)v236.n128_u64[0]);
      }
      if (v235 && SHIBYTE(v234) < 0) {
        operator delete((void *)v233.n128_u64[0]);
      }
      if (v23 < (unint64_t)v24)
      {
LABEL_45:
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(a1, v8 - 224, a3, a4 & 1);
        goto LABEL_46;
      }
      BOOL v41 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((long long *)a1, (long long *)(v8 - 224));
      if (_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((long long *)v8, v206))
      {
        break;
      }
      if (!v41) {
        goto LABEL_45;
      }
    }
    a2 = (long long *)(v8 - 224);
    if (!v41) {
      continue;
    }
    break;
  }
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_(long long *a1, long long *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((void *)a2 - 28) < *(void *)a1)
      {
        unint64_t v6 = a1;
        long long v7 = a2 - 14;
        goto LABEL_4;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_(a1, a1 + 14, a2 - 14);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_(a1, a1 + 14, a1 + 28, a2 - 14);
      return 1;
    case 5:
      long long v24 = a1 + 28;
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_(a1, a1 + 14, a1 + 28, a1 + 42);
      unint64_t v26 = *((void *)a2 - 28);
      unint64_t v25 = a2 - 14;
      if (v26 < *((void *)a1 + 84))
      {
        std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1 + 42, v25);
        if (*((void *)a1 + 84) < *v24)
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1 + 28, a1 + 42);
          if (*v24 < *((void *)a1 + 28))
          {
            std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1 + 14, a1 + 28);
            if (*((void *)a1 + 28) < *(void *)a1)
            {
              unint64_t v6 = a1;
              long long v7 = a1 + 14;
LABEL_4:
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(v6, v7);
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v8 = a1 + 28;
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_(a1, a1 + 14, a1 + 28);
      long long v9 = a1 + 42;
      BOOL result = 1;
      if (a1 + 42 == a2) {
        return result;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (*(void *)v9 < *(void *)v8)
    {
      long long v31 = v9[4];
      long long v32 = v9[5];
      uint64_t v33 = *((void *)v9 + 12);
      long long v27 = *v9;
      long long v28 = v9[1];
      long long v29 = v9[2];
      long long v30 = v9[3];
      v34.n128_u8[0] = 0;
      char v36 = 0;
      if (*((unsigned char *)v9 + 128))
      {
        __n128 v34 = *(__n128 *)((char *)v9 + 104);
        uint64_t v35 = *((void *)v9 + 15);
        *((void *)v9 + 14) = 0;
        *((void *)v9 + 15) = 0;
        *((void *)v9 + 13) = 0;
        char v36 = 1;
      }
      v37.n128_u8[0] = 0;
      char v39 = 0;
      if (*((unsigned char *)v9 + 160))
      {
        __n128 v37 = *(__n128 *)((char *)v9 + 136);
        uint64_t v38 = *((void *)v9 + 19);
        *((void *)v9 + 18) = 0;
        *((void *)v9 + 19) = 0;
        *((void *)v9 + 17) = 0;
        char v39 = 1;
      }
      __p.n128_u8[0] = 0;
      char v42 = 0;
      if (*((unsigned char *)v9 + 192))
      {
        __n128 __p = *(__n128 *)((char *)v9 + 168);
        uint64_t v41 = *((void *)v9 + 23);
        *((void *)v9 + 22) = 0;
        *((void *)v9 + 23) = 0;
        *((void *)v9 + 21) = 0;
        char v42 = 1;
      }
      long long v43 = *(long long *)((char *)v9 + 200);
      uint64_t v44 = *((void *)v9 + 27);
      *((void *)v9 + 26) = 0;
      *((void *)v9 + 27) = 0;
      *((void *)v9 + 25) = 0;
      uint64_t v12 = v10;
      while (1)
      {
        uint64_t v13 = v12;
        long long v14 = (char *)a1 + v12;
        long long v15 = *(long long *)((char *)a1 + v12 + 528);
        *((_OWORD *)v14 + 46) = *(long long *)((char *)a1 + v12 + 512);
        *((_OWORD *)v14 + 47) = v15;
        *((void *)v14 + 96) = *(void *)((char *)a1 + v12 + 544);
        long long v16 = *(long long *)((char *)a1 + v12 + 464);
        *((_OWORD *)v14 + 42) = *((_OWORD *)v14 + 28);
        *((_OWORD *)v14 + 43) = v16;
        long long v17 = *(long long *)((char *)a1 + v12 + 496);
        *((_OWORD *)v14 + 44) = *(long long *)((char *)a1 + v12 + 480);
        *((_OWORD *)v14 + 45) = v17;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)a1 + v12 + 776, (__n128 *)((char *)a1 + v12 + 552));
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)(v14 + 808), (__n128 *)(v14 + 584));
        long long v18 = (char *)a1 + v13;
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)a1 + v13 + 840, (__n128 *)((char *)a1 + v13 + 616));
        __n128 v19 = (long long *)((char *)a1 + v13 + 648);
        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)((char *)a1 + v13 + 872));
        *(_OWORD *)(v18 + 872) = *v19;
        *((void *)v18 + 111) = *((void *)v18 + 83);
        *((void *)v18 + 83) = 0;
        *__n128 v19 = 0u;
        if (v13 == -448) {
          break;
        }
        uint64_t v12 = v13 - 224;
        if ((unint64_t)v27 >= *(void *)((char *)a1 + v13 + 224))
        {
          uint64_t v20 = (uint64_t)a1 + v12 + 672;
          goto LABEL_19;
        }
      }
      uint64_t v20 = (uint64_t)a1;
LABEL_19:
      *(_OWORD *)(v20 + 64) = v31;
      *(_OWORD *)(v20 + 80) = v32;
      *(void *)(v20 + 96) = v33;
      *(_OWORD *)uint64_t v20 = v27;
      *(_OWORD *)(v20 + 16) = v28;
      unint64_t v21 = (uint64_t *)((char *)a1 + v13);
      *(_OWORD *)(v20 + 32) = v29;
      *(_OWORD *)(v20 + 48) = v30;
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v21 + 69), &v34);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)(v21 + 73), &v37);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)(v21 + 77), &__p);
      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(v21 + 81);
      uint64_t v22 = *((void *)&v43 + 1);
      v21[81] = v43;
      uint64_t v23 = v44;
      *(void *)(v20 + 208) = v22;
      *(void *)(v20 + 216) = v23;
      uint64_t v44 = 0;
      long long v43 = 0uLL;
      long long v45 = (void **)&v43;
      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v45);
      if (v42 && __p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (v39 && v37.n128_u64[0])
      {
        v37.n128_u64[1] = v37.n128_u64[0];
        operator delete((void *)v37.n128_u64[0]);
      }
      if (v36 && SHIBYTE(v35) < 0) {
        operator delete((void *)v34.n128_u64[0]);
      }
      if (++v11 == 8) {
        return v9 + 14 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 224;
    v9 += 14;
    if (v9 == a2) {
      return 1;
    }
  }
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    v201 = a2 - 14;
    uint64_t v206 = a2;
    v199 = a2 - 42;
    v200 = a2 - 28;
    unint64_t v8 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v8;
        long long v9 = v206;
        uint64_t v10 = (uint64_t)v206 - v8;
        unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v206 - v8) >> 5);
        if (!(!v5 & v4))
        {
          switch(v11)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              int64_t v66 = v206 - 14;
              if (*((void *)v206 - 28) >= *(void *)a1) {
                return;
              }
              int64_t v67 = (long long *)a1;
              break;
            case 3uLL:
              _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224), v201);
              return;
            case 4uLL:
              _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224), (long long *)(a1 + 448), v201);
              return;
            case 5uLL:
              uint64_t v68 = (void *)(a1 + 448);
              _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224), (long long *)(a1 + 448), (long long *)(a1 + 672));
              if (*((void *)v206 - 28) >= *(void *)(a1 + 672)) {
                return;
              }
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)(a1 + 672), v206 - 14);
              if (*(void *)(a1 + 672) >= *v68) {
                return;
              }
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)(a1 + 448), (long long *)(a1 + 672));
              if (*v68 >= *(void *)(a1 + 224)) {
                return;
              }
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)(a1 + 224), (long long *)(a1 + 448));
              if (*(void *)(a1 + 224) >= *(void *)a1) {
                return;
              }
              int64_t v67 = (long long *)a1;
              int64_t v66 = (long long *)(a1 + 224);
              break;
            default:
              JUMPOUT(0);
          }
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(v67, v66);
          return;
        }
        if (v10 <= 5375)
        {
          if (a4)
          {
            if ((long long *)a1 != v206)
            {
              unint64_t v69 = a1 + 224;
              if ((long long *)(a1 + 224) != v206)
              {
                uint64_t v70 = 0;
                unint64_t v71 = a1;
                do
                {
                  unint64_t v72 = v69;
                  if (*(void *)(v71 + 224) < *(void *)v71)
                  {
                    long long v73 = *(_OWORD *)v69;
                    long long v74 = *(_OWORD *)(v69 + 32);
                    long long v227 = *(_OWORD *)(v69 + 16);
                    long long v228 = v74;
                    long long v226 = v73;
                    long long v75 = *(_OWORD *)(v69 + 48);
                    long long v76 = *(_OWORD *)(v69 + 64);
                    long long v77 = *(_OWORD *)(v69 + 80);
                    uint64_t v232 = *(void *)(v69 + 96);
                    long long v230 = v76;
                    long long v231 = v77;
                    long long v229 = v75;
                    v233.n128_u8[0] = 0;
                    char v235 = 0;
                    if (*(unsigned char *)(v71 + 352))
                    {
                      uint64_t v234 = *(void *)(v71 + 344);
                      __n128 v233 = *(__n128 *)(v71 + 328);
                      *(void *)(v71 + 336) = 0;
                      *(void *)(v71 + 344) = 0;
                      *(void *)(v71 + 328) = 0;
                      char v235 = 1;
                    }
                    BOOL v78 = (__n128 *)(v71 + 360);
                    v236.n128_u8[0] = 0;
                    char v238 = 0;
                    if (*(unsigned char *)(v71 + 384))
                    {
                      __n128 v236 = *v78;
                      uint64_t v237 = *(void *)(v71 + 376);
                      v78->n128_u64[0] = 0;
                      *(void *)(v71 + 368) = 0;
                      *(void *)(v71 + 376) = 0;
                      char v238 = 1;
                    }
                    __p.n128_u8[0] = 0;
                    char v241 = 0;
                    if (*(unsigned char *)(v71 + 416))
                    {
                      __n128 __p = *(__n128 *)(v71 + 392);
                      uint64_t v240 = *(void *)(v71 + 408);
                      *(void *)(v71 + 392) = 0;
                      *(void *)(v71 + 400) = 0;
                      *(void *)(v71 + 408) = 0;
                      char v241 = 1;
                    }
                    long long v242 = *(_OWORD *)(v71 + 424);
                    uint64_t v243 = *(void *)(v71 + 440);
                    *(void *)(v71 + 424) = 0;
                    *(void *)(v71 + 432) = 0;
                    *(void *)(v71 + 440) = 0;
                    uint64_t v79 = v70;
                    while (1)
                    {
                      uint64_t v80 = v79;
                      uint64_t v81 = a1 + v79;
                      long long v82 = *(_OWORD *)(a1 + v79 + 80);
                      *(_OWORD *)(v81 + 288) = *(_OWORD *)(a1 + v79 + 64);
                      *(_OWORD *)(v81 + 304) = v82;
                      *(void *)(v81 + 320) = *(void *)(a1 + v79 + 96);
                      long long v83 = *(_OWORD *)(a1 + v79 + 16);
                      *(_OWORD *)(v81 + 224) = *(_OWORD *)v81;
                      *(_OWORD *)(v81 + 240) = v83;
                      long long v84 = *(_OWORD *)(a1 + v79 + 48);
                      *(_OWORD *)(v81 + 256) = *(_OWORD *)(a1 + v79 + 32);
                      *(_OWORD *)(v81 + 272) = v84;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v79 + 328, (__n128 *)(a1 + v79 + 104));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v81 + 360, (__n128 *)(v81 + 136));
                      uint64_t v85 = a1 + v80;
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v80 + 392, (__n128 *)(a1 + v80 + 168));
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + v80 + 424));
                      *(_OWORD *)(v85 + 424) = *(_OWORD *)(v85 + 200);
                      *(void *)(v85 + 440) = *(void *)(v85 + 216);
                      *(void *)(v85 + 208) = 0;
                      *(void *)(v85 + 216) = 0;
                      *(void *)(v85 + 200) = 0;
                      if (!v80) {
                        break;
                      }
                      uint64_t v79 = v80 - 224;
                      if ((unint64_t)v226 >= *(void *)(a1 + v80 - 224))
                      {
                        unint64_t v86 = a1 + v80;
                        goto LABEL_108;
                      }
                    }
                    unint64_t v86 = a1;
LABEL_108:
                    long long v87 = v226;
                    long long v88 = v228;
                    *(_OWORD *)(v86 + 16) = v227;
                    *(_OWORD *)(v86 + 32) = v88;
                    *(_OWORD *)unint64_t v86 = v87;
                    long long v89 = v229;
                    long long v90 = v230;
                    long long v91 = v231;
                    *(void *)(v86 + 96) = v232;
                    *(_OWORD *)(v86 + 64) = v90;
                    *(_OWORD *)(v86 + 80) = v91;
                    *(_OWORD *)(v86 + 48) = v89;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v80 + 104, &v233);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v80 + 136, &v236);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v80 + 168, &__p);
                    BOOL v92 = (uint64_t *)(a1 + v80 + 200);
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(v92);
                    *BOOL v92 = v242;
                    *(void *)(v86 + 208) = *((void *)&v242 + 1);
                    *(void *)(v86 + 216) = v243;
                    long long v242 = 0uLL;
                    uint64_t v243 = 0;
                    *(void *)&long long v207 = &v242;
                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                    if (v241 && __p.n128_u64[0])
                    {
                      __p.n128_u64[1] = __p.n128_u64[0];
                      operator delete((void *)__p.n128_u64[0]);
                    }
                    if (v238 && v236.n128_u64[0])
                    {
                      v236.n128_u64[1] = v236.n128_u64[0];
                      operator delete((void *)v236.n128_u64[0]);
                    }
                    if (v235 && SHIBYTE(v234) < 0) {
                      operator delete((void *)v233.n128_u64[0]);
                    }
                    long long v9 = v206;
                  }
                  unint64_t v69 = v72 + 224;
                  v70 += 224;
                  unint64_t v71 = v72;
                }
                while ((long long *)(v72 + 224) != v9);
              }
            }
          }
          else if ((long long *)a1 != v206)
          {
            unint64_t v179 = a1 + 224;
            if ((long long *)(a1 + 224) != v206)
            {
              unint64_t v180 = a1 - 224;
              do
              {
                unint64_t v181 = v179;
                if (*(void *)(a1 + 224) < *(void *)a1)
                {
                  long long v182 = *(_OWORD *)v179;
                  long long v183 = *(_OWORD *)(v179 + 32);
                  long long v227 = *(_OWORD *)(v179 + 16);
                  long long v228 = v183;
                  long long v226 = v182;
                  long long v184 = *(_OWORD *)(v179 + 48);
                  long long v185 = *(_OWORD *)(v179 + 64);
                  long long v186 = *(_OWORD *)(v179 + 80);
                  uint64_t v232 = *(void *)(v179 + 96);
                  long long v230 = v185;
                  long long v231 = v186;
                  long long v229 = v184;
                  v233.n128_u8[0] = 0;
                  char v235 = 0;
                  if (*(unsigned char *)(a1 + 352))
                  {
                    uint64_t v234 = *(void *)(a1 + 344);
                    __n128 v233 = *(__n128 *)(a1 + 328);
                    *(void *)(a1 + 336) = 0;
                    *(void *)(a1 + 344) = 0;
                    *(void *)(a1 + 328) = 0;
                    char v235 = 1;
                  }
                  unsigned int v187 = (__n128 *)(a1 + 360);
                  v236.n128_u8[0] = 0;
                  char v238 = 0;
                  if (*(unsigned char *)(a1 + 384))
                  {
                    __n128 v236 = *v187;
                    uint64_t v237 = *(void *)(a1 + 376);
                    v187->n128_u64[0] = 0;
                    *(void *)(a1 + 368) = 0;
                    *(void *)(a1 + 376) = 0;
                    char v238 = 1;
                  }
                  __p.n128_u8[0] = 0;
                  char v241 = 0;
                  if (*(unsigned char *)(a1 + 416))
                  {
                    __n128 __p = *(__n128 *)(a1 + 392);
                    uint64_t v240 = *(void *)(a1 + 408);
                    *(void *)(a1 + 392) = 0;
                    *(void *)(a1 + 400) = 0;
                    *(void *)(a1 + 408) = 0;
                    char v241 = 1;
                  }
                  long long v242 = *(_OWORD *)(a1 + 424);
                  uint64_t v243 = *(void *)(a1 + 440);
                  *(void *)(a1 + 424) = 0;
                  *(void *)(a1 + 432) = 0;
                  *(void *)(a1 + 440) = 0;
                  unint64_t v188 = v180;
                  do
                  {
                    long long v189 = *(_OWORD *)(v188 + 304);
                    *(_OWORD *)(v188 + 512) = *(_OWORD *)(v188 + 288);
                    *(_OWORD *)(v188 + 528) = v189;
                    *(void *)(v188 + 544) = *(void *)(v188 + 320);
                    long long v190 = *(_OWORD *)(v188 + 240);
                    *(_OWORD *)(v188 + 448) = *(_OWORD *)(v188 + 224);
                    *(_OWORD *)(v188 + 464) = v190;
                    long long v191 = *(_OWORD *)(v188 + 272);
                    *(_OWORD *)(v188 + 480) = *(_OWORD *)(v188 + 256);
                    *(_OWORD *)(v188 + 496) = v191;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v188 + 552, (__n128 *)(v188 + 328));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 584, (__n128 *)(v188 + 360));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 616, (__n128 *)(v188 + 392));
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v188 + 648));
                    *(_OWORD *)(v188 + 648) = *(_OWORD *)(v188 + 424);
                    *(void *)(v188 + 664) = *(void *)(v188 + 440);
                    *(void *)(v188 + 424) = 0;
                    *(void *)(v188 + 432) = 0;
                    *(void *)(v188 + 440) = 0;
                    unint64_t v192 = *(void *)v188;
                    v188 -= 224;
                  }
                  while ((unint64_t)v226 < v192);
                  long long v193 = v226;
                  long long v194 = v228;
                  *(_OWORD *)(v188 + 464) = v227;
                  *(_OWORD *)(v188 + 480) = v194;
                  *(_OWORD *)(v188 + 448) = v193;
                  long long v195 = v229;
                  long long v196 = v230;
                  long long v197 = v231;
                  *(void *)(v188 + 544) = v232;
                  *(_OWORD *)(v188 + 512) = v196;
                  *(_OWORD *)(v188 + 528) = v197;
                  *(_OWORD *)(v188 + 496) = v195;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v188 + 552, &v233);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 584, &v236);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v188 + 616, &__p);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v188 + 648));
                  *(_OWORD *)(v188 + 648) = v242;
                  *(void *)(v188 + 664) = v243;
                  long long v242 = 0uLL;
                  uint64_t v243 = 0;
                  *(void *)&long long v207 = &v242;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                  if (v241 && __p.n128_u64[0])
                  {
                    __p.n128_u64[1] = __p.n128_u64[0];
                    operator delete((void *)__p.n128_u64[0]);
                  }
                  if (v238 && v236.n128_u64[0])
                  {
                    v236.n128_u64[1] = v236.n128_u64[0];
                    operator delete((void *)v236.n128_u64[0]);
                  }
                  if (v235 && SHIBYTE(v234) < 0) {
                    operator delete((void *)v233.n128_u64[0]);
                  }
                  long long v9 = v206;
                }
                unint64_t v179 = v181 + 224;
                v180 += 224;
                a1 = v181;
              }
              while ((long long *)(v181 + 224) != v9);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((long long *)a1 != v206)
          {
            int64_t v204 = (v11 - 2) >> 1;
            int64_t v93 = v204;
            do
            {
              int64_t v94 = v93;
              if (v204 >= v93)
              {
                uint64_t v95 = (2 * v93) | 1;
                unint64_t v96 = (long long *)(a1 + 224 * v95);
                if (2 * v94 + 2 < (uint64_t)v11)
                {
                  unint64_t v99 = *(void *)v96;
                  unint64_t v97 = *((void *)v96 + 28);
                  BOOL v98 = *(void *)v96 >= v97;
                  if (*(void *)v96 <= v97) {
                    unint64_t v99 = *((void *)v96 + 28);
                  }
                  if (*(void *)v96 < v97) {
                    v96 += 14;
                  }
                  if (!v98) {
                    uint64_t v95 = 2 * v94 + 2;
                  }
                }
                else
                {
                  unint64_t v99 = *(void *)v96;
                }
                unint64_t v100 = a1 + 224 * v94;
                if (v99 >= *(void *)v100)
                {
                  long long v101 = *(_OWORD *)v100;
                  long long v102 = *(_OWORD *)(v100 + 32);
                  long long v227 = *(_OWORD *)(v100 + 16);
                  long long v228 = v102;
                  long long v226 = v101;
                  long long v103 = *(_OWORD *)(v100 + 48);
                  long long v104 = *(_OWORD *)(v100 + 64);
                  long long v105 = *(_OWORD *)(v100 + 80);
                  uint64_t v232 = *(void *)(v100 + 96);
                  long long v230 = v104;
                  long long v231 = v105;
                  long long v229 = v103;
                  v233.n128_u8[0] = 0;
                  char v235 = 0;
                  if (*(unsigned char *)(a1 + 224 * v94 + 128))
                  {
                    unint64_t v106 = a1 + 224 * v94;
                    __n128 v107 = *(__n128 *)(v106 + 104);
                    uint64_t v234 = *(void *)(v106 + 120);
                    __n128 v233 = v107;
                    *(void *)(v106 + 112) = 0;
                    *(void *)(v106 + 120) = 0;
                    *(void *)(v106 + 104) = 0;
                    char v235 = 1;
                  }
                  v236.n128_u8[0] = 0;
                  char v238 = 0;
                  if (*(unsigned char *)(a1 + 224 * v94 + 160))
                  {
                    unint64_t v108 = a1 + 224 * v94;
                    __n128 v236 = *(__n128 *)(v108 + 136);
                    uint64_t v237 = *(void *)(v108 + 152);
                    *(void *)(v108 + 136) = 0;
                    *(void *)(v108 + 144) = 0;
                    *(void *)(v108 + 152) = 0;
                    char v238 = 1;
                  }
                  __p.n128_u8[0] = 0;
                  char v241 = 0;
                  if (*(unsigned char *)(a1 + 224 * v94 + 192))
                  {
                    unint64_t v109 = a1 + 224 * v94;
                    __n128 __p = *(__n128 *)(v109 + 168);
                    uint64_t v240 = *(void *)(v109 + 184);
                    *(void *)(v109 + 168) = 0;
                    *(void *)(v109 + 176) = 0;
                    *(void *)(v109 + 184) = 0;
                    char v241 = 1;
                  }
                  int64_t v202 = v94;
                  unint64_t v110 = a1 + 224 * v94;
                  long long v242 = *(_OWORD *)(v110 + 200);
                  uint64_t v243 = *(void *)(v110 + 216);
                  *(void *)(v110 + 200) = 0;
                  *(void *)(v110 + 208) = 0;
                  *(void *)(v110 + 216) = 0;
                  do
                  {
                    long long v111 = v96;
                    long long v112 = *v96;
                    long long v113 = v96[2];
                    *(_OWORD *)(v100 + 16) = v96[1];
                    *(_OWORD *)(v100 + 32) = v113;
                    *(_OWORD *)unint64_t v100 = v112;
                    long long v114 = v96[3];
                    long long v115 = v96[4];
                    long long v116 = v96[5];
                    *(void *)(v100 + 96) = *((void *)v96 + 12);
                    *(_OWORD *)(v100 + 64) = v115;
                    *(_OWORD *)(v100 + 80) = v116;
                    *(_OWORD *)(v100 + 48) = v114;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v100 + 104, (__n128 *)((char *)v96 + 104));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v100 + 136, (__n128 *)((char *)v111 + 136));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v100 + 168, (__n128 *)((char *)v111 + 168));
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v100 + 200));
                    *(_OWORD *)(v100 + 200) = *(long long *)((char *)v111 + 200);
                    *(void *)(v100 + 216) = *((void *)v111 + 27);
                    *((void *)v111 + 25) = 0;
                    *((void *)v111 + 26) = 0;
                    *((void *)v111 + 27) = 0;
                    if (v204 < v95) {
                      break;
                    }
                    unint64_t v96 = (long long *)(a1 + 224 * ((2 * v95) | 1));
                    if (2 * v95 + 2 < (uint64_t)v11)
                    {
                      unint64_t v119 = *(void *)v96;
                      unint64_t v117 = *((void *)v96 + 28);
                      BOOL v118 = *(void *)v96 >= v117;
                      if (*(void *)v96 <= v117) {
                        unint64_t v119 = *((void *)v96 + 28);
                      }
                      if (*(void *)v96 < v117) {
                        v96 += 14;
                      }
                      uint64_t v95 = v118 ? (2 * v95) | 1 : 2 * v95 + 2;
                    }
                    else
                    {
                      unint64_t v119 = *(void *)v96;
                      uint64_t v95 = (2 * v95) | 1;
                    }
                    unint64_t v100 = (unint64_t)v111;
                  }
                  while (v119 >= (unint64_t)v226);
                  long long v120 = v226;
                  long long v121 = v228;
                  v111[1] = v227;
                  v111[2] = v121;
                  *long long v111 = v120;
                  long long v122 = v229;
                  long long v123 = v230;
                  long long v124 = v231;
                  *((void *)v111 + 12) = v232;
                  v111[4] = v123;
                  v111[5] = v124;
                  v111[3] = v122;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v111 + 104, &v233);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v111 + 136, &v236);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v111 + 168, &__p);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v111 + 25);
                  *(long long *)((char *)v111 + 200) = v242;
                  *((void *)v111 + 27) = v243;
                  long long v242 = 0uLL;
                  uint64_t v243 = 0;
                  *(void *)&long long v207 = &v242;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                  if (v241 && __p.n128_u64[0])
                  {
                    __p.n128_u64[1] = __p.n128_u64[0];
                    operator delete((void *)__p.n128_u64[0]);
                  }
                  if (v238 && v236.n128_u64[0])
                  {
                    v236.n128_u64[1] = v236.n128_u64[0];
                    operator delete((void *)v236.n128_u64[0]);
                  }
                  if (v235 && SHIBYTE(v234) < 0) {
                    operator delete((void *)v233.n128_u64[0]);
                  }
                  long long v9 = v206;
                  int64_t v94 = v202;
                }
              }
              int64_t v93 = v94 - 1;
            }
            while (v94);
            uint64_t v125 = (((unint64_t)v10 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
            unint64_t v198 = (__n128 *)(a1 + 104);
            do
            {
              long long v126 = *(_OWORD *)a1;
              long long v127 = *(_OWORD *)(a1 + 32);
              long long v208 = *(_OWORD *)(a1 + 16);
              long long v209 = v127;
              long long v207 = v126;
              long long v128 = *(_OWORD *)(a1 + 48);
              long long v129 = *(_OWORD *)(a1 + 64);
              long long v130 = *(_OWORD *)(a1 + 80);
              uint64_t v213 = *(void *)(a1 + 96);
              long long v211 = v129;
              long long v212 = v130;
              long long v210 = v128;
              v214.n128_u8[0] = 0;
              char v216 = 0;
              if (*(unsigned char *)(a1 + 128))
              {
                __n128 v131 = *v198;
                uint64_t v215 = *(void *)(a1 + 120);
                __n128 v214 = v131;
                *(void *)(a1 + 112) = 0;
                *(void *)(a1 + 120) = 0;
                v198->n128_u64[0] = 0;
                char v216 = 1;
              }
              v217.n128_u8[0] = 0;
              char v219 = 0;
              if (*(unsigned char *)(a1 + 160))
              {
                __n128 v217 = *(__n128 *)(a1 + 136);
                uint64_t v218 = *(void *)(a1 + 152);
                *(void *)(a1 + 136) = 0;
                *(void *)(a1 + 144) = 0;
                *(void *)(a1 + 152) = 0;
                char v219 = 1;
              }
              v205 = v9;
              v220.n128_u8[0] = 0;
              char v222 = 0;
              if (*(unsigned char *)(a1 + 192))
              {
                __n128 v220 = *(__n128 *)(a1 + 168);
                uint64_t v221 = *(void *)(a1 + 184);
                *(void *)(a1 + 168) = 0;
                *(void *)(a1 + 176) = 0;
                *(void *)(a1 + 184) = 0;
                char v222 = 1;
              }
              uint64_t v132 = 0;
              long long v223 = *(_OWORD *)(a1 + 200);
              uint64_t v224 = *(void *)(a1 + 216);
              *(void *)(a1 + 200) = 0;
              *(void *)(a1 + 208) = 0;
              *(void *)(a1 + 216) = 0;
              uint64_t v133 = a1;
              do
              {
                uint64_t v134 = v133 + 224 * v132 + 224;
                uint64_t v135 = 2 * v132;
                uint64_t v132 = (2 * v132) | 1;
                if (v135 + 2 < v125 && *(void *)v134 < *(void *)(v134 + 224))
                {
                  v134 += 224;
                  uint64_t v132 = v135 + 2;
                }
                long long v136 = *(_OWORD *)v134;
                long long v137 = *(_OWORD *)(v134 + 32);
                *(_OWORD *)(v133 + 16) = *(_OWORD *)(v134 + 16);
                *(_OWORD *)(v133 + 32) = v137;
                *(_OWORD *)uint64_t v133 = v136;
                long long v138 = *(_OWORD *)(v134 + 48);
                long long v139 = *(_OWORD *)(v134 + 64);
                long long v140 = *(_OWORD *)(v134 + 80);
                *(void *)(v133 + 96) = *(void *)(v134 + 96);
                *(_OWORD *)(v133 + 64) = v139;
                *(_OWORD *)(v133 + 80) = v140;
                *(_OWORD *)(v133 + 48) = v138;
                uint64_t v141 = (__n128 *)(v134 + 104);
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v133 + 104, (__n128 *)(v134 + 104));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v133 + 136, (__n128 *)(v134 + 136));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v133 + 168, (__n128 *)(v134 + 168));
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v133 + 200));
                *(_OWORD *)(v133 + 200) = *(_OWORD *)(v134 + 200);
                *(void *)(v133 + 216) = *(void *)(v134 + 216);
                *(void *)(v134 + 200) = 0;
                *(void *)(v134 + 208) = 0;
                *(void *)(v134 + 216) = 0;
                uint64_t v133 = v134;
              }
              while (v132 <= (uint64_t)((unint64_t)(v125 - 2) >> 1));
              if ((long long *)v134 == v205 - 14)
              {
                long long v173 = v207;
                long long v174 = v209;
                *(_OWORD *)(v134 + 16) = v208;
                *(_OWORD *)(v134 + 32) = v174;
                *(_OWORD *)uint64_t v134 = v173;
                long long v175 = v210;
                long long v176 = v211;
                long long v177 = v212;
                *(void *)(v134 + 96) = v213;
                *(_OWORD *)(v134 + 64) = v176;
                *(_OWORD *)(v134 + 80) = v177;
                *(_OWORD *)(v134 + 48) = v175;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v134 + 104, &v214);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 136, &v217);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 168, &v220);
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v134 + 200));
                *(_OWORD *)(v134 + 200) = v223;
                *(void *)(v134 + 216) = v224;
                long long v223 = 0uLL;
                uint64_t v224 = 0;
              }
              else
              {
                long long v142 = *(v205 - 14);
                long long v143 = *(v205 - 12);
                *(_OWORD *)(v134 + 16) = *(v205 - 13);
                *(_OWORD *)(v134 + 32) = v143;
                *(_OWORD *)uint64_t v134 = v142;
                long long v144 = *(v205 - 11);
                long long v145 = *(v205 - 10);
                long long v146 = *(v205 - 9);
                *(void *)(v134 + 96) = *((void *)v205 - 16);
                *(_OWORD *)(v134 + 64) = v145;
                *(_OWORD *)(v134 + 80) = v146;
                *(_OWORD *)(v134 + 48) = v144;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v134 + 104, (__n128 *)((char *)v205 - 120));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 136, (__n128 *)((char *)v205 - 88));
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 168, (__n128 *)((char *)v205 - 56));
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v134 + 200));
                uint64_t v147 = (void *)v205 - 3;
                *(_OWORD *)(v134 + 200) = *(long long *)((char *)v205 - 24);
                *(void *)(v134 + 216) = *((void *)v205 - 1);
                void *v147 = 0;
                v147[1] = 0;
                v147[2] = 0;
                long long v148 = v207;
                long long v149 = v209;
                *(v205 - 13) = v208;
                *(v205 - 12) = v149;
                *(v205 - 14) = v148;
                long long v150 = v210;
                long long v151 = v211;
                long long v152 = v212;
                *((void *)v205 - 16) = v213;
                *(v205 - 10) = v151;
                *(v205 - 9) = v152;
                *(v205 - 11) = v150;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v205 - 120, &v214);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v205 - 88, &v217);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v205 - 56, &v220);
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v205 - 3);
                *(long long *)((char *)v205 - 24) = v223;
                *((void *)v205 - 1) = v224;
                long long v223 = 0uLL;
                uint64_t v224 = 0;
                uint64_t v153 = v134 + 224 - a1;
                if (v153 >= 225)
                {
                  unint64_t v154 = (unint64_t)(((((unint64_t)v153 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                          - 2) >> 1;
                  uint64_t v155 = a1 + 224 * v154;
                  if (*(void *)v155 < *(void *)v134)
                  {
                    long long v156 = *(_OWORD *)v134;
                    long long v157 = *(_OWORD *)(v134 + 32);
                    long long v227 = *(_OWORD *)(v134 + 16);
                    long long v228 = v157;
                    long long v226 = v156;
                    long long v158 = *(_OWORD *)(v134 + 48);
                    long long v159 = *(_OWORD *)(v134 + 64);
                    long long v160 = *(_OWORD *)(v134 + 80);
                    uint64_t v232 = *(void *)(v134 + 96);
                    long long v230 = v159;
                    long long v231 = v160;
                    long long v229 = v158;
                    v233.n128_u8[0] = 0;
                    char v235 = 0;
                    if (*(unsigned char *)(v134 + 128))
                    {
                      __n128 v161 = *v141;
                      uint64_t v234 = *(void *)(v134 + 120);
                      __n128 v233 = v161;
                      *(void *)(v134 + 112) = 0;
                      *(void *)(v134 + 120) = 0;
                      v141->n128_u64[0] = 0;
                      char v235 = 1;
                    }
                    v236.n128_u8[0] = 0;
                    char v238 = 0;
                    if (*(unsigned char *)(v134 + 160))
                    {
                      __n128 v236 = *(__n128 *)(v134 + 136);
                      uint64_t v237 = *(void *)(v134 + 152);
                      *(void *)(v134 + 136) = 0;
                      *(void *)(v134 + 144) = 0;
                      *(void *)(v134 + 152) = 0;
                      char v238 = 1;
                    }
                    __p.n128_u8[0] = 0;
                    char v241 = 0;
                    if (*(unsigned char *)(v134 + 192))
                    {
                      __n128 __p = *(__n128 *)(v134 + 168);
                      uint64_t v240 = *(void *)(v134 + 184);
                      *(void *)(v134 + 168) = 0;
                      *(void *)(v134 + 176) = 0;
                      *(void *)(v134 + 184) = 0;
                      char v241 = 1;
                    }
                    long long v242 = *(_OWORD *)(v134 + 200);
                    uint64_t v243 = *(void *)(v134 + 216);
                    *(void *)(v134 + 200) = 0;
                    *(void *)(v134 + 208) = 0;
                    *(void *)(v134 + 216) = 0;
                    do
                    {
                      uint64_t v162 = v155;
                      long long v163 = *(_OWORD *)v155;
                      long long v164 = *(_OWORD *)(v155 + 32);
                      *(_OWORD *)(v134 + 16) = *(_OWORD *)(v155 + 16);
                      *(_OWORD *)(v134 + 32) = v164;
                      *(_OWORD *)uint64_t v134 = v163;
                      long long v165 = *(_OWORD *)(v155 + 48);
                      long long v166 = *(_OWORD *)(v155 + 64);
                      long long v167 = *(_OWORD *)(v155 + 80);
                      *(void *)(v134 + 96) = *(void *)(v155 + 96);
                      *(_OWORD *)(v134 + 64) = v166;
                      *(_OWORD *)(v134 + 80) = v167;
                      *(_OWORD *)(v134 + 48) = v165;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v134 + 104, (__n128 *)(v155 + 104));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 136, (__n128 *)(v162 + 136));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v134 + 168, (__n128 *)(v162 + 168));
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v134 + 200));
                      *(_OWORD *)(v134 + 200) = *(_OWORD *)(v162 + 200);
                      *(void *)(v134 + 216) = *(void *)(v162 + 216);
                      *(void *)(v162 + 200) = 0;
                      *(void *)(v162 + 208) = 0;
                      *(void *)(v162 + 216) = 0;
                      if (!v154) {
                        break;
                      }
                      unint64_t v154 = (v154 - 1) >> 1;
                      uint64_t v155 = a1 + 224 * v154;
                      uint64_t v134 = v162;
                    }
                    while (*(void *)v155 < (unint64_t)v226);
                    long long v168 = v226;
                    long long v169 = v228;
                    *(_OWORD *)(v162 + 16) = v227;
                    *(_OWORD *)(v162 + 32) = v169;
                    *(_OWORD *)uint64_t v162 = v168;
                    long long v170 = v229;
                    long long v171 = v230;
                    long long v172 = v231;
                    *(void *)(v162 + 96) = v232;
                    *(_OWORD *)(v162 + 64) = v171;
                    *(_OWORD *)(v162 + 80) = v172;
                    *(_OWORD *)(v162 + 48) = v170;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v162 + 104, &v233);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v162 + 136, &v236);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v162 + 168, &__p);
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v162 + 200));
                    *(_OWORD *)(v162 + 200) = v242;
                    *(void *)(v162 + 216) = v243;
                    long long v242 = 0uLL;
                    uint64_t v243 = 0;
                    v225 = (void **)&v242;
                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v225);
                    if (v241 && __p.n128_u64[0])
                    {
                      __p.n128_u64[1] = __p.n128_u64[0];
                      operator delete((void *)__p.n128_u64[0]);
                    }
                    if (v238 && v236.n128_u64[0])
                    {
                      v236.n128_u64[1] = v236.n128_u64[0];
                      operator delete((void *)v236.n128_u64[0]);
                    }
                    if (v235 && SHIBYTE(v234) < 0) {
                      operator delete((void *)v233.n128_u64[0]);
                    }
                  }
                }
              }
              *(void *)&long long v226 = &v223;
              std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
              if (v222 && v220.n128_u64[0])
              {
                v220.n128_u64[1] = v220.n128_u64[0];
                operator delete((void *)v220.n128_u64[0]);
              }
              if (v219 && v217.n128_u64[0])
              {
                v217.n128_u64[1] = v217.n128_u64[0];
                operator delete((void *)v217.n128_u64[0]);
              }
              if (v216 && SHIBYTE(v215) < 0) {
                operator delete((void *)v214.n128_u64[0]);
              }
              BOOL v178 = v125-- <= 2;
              long long v9 = v205 - 14;
            }
            while (!v178);
          }
          return;
        }
        unint64_t v12 = v11 >> 1;
        uint64_t v13 = (long long *)(a1 + 224 * (v11 >> 1));
        if ((unint64_t)v10 > 0x7000)
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)a1, (long long *)(a1 + 224 * (v11 >> 1)), v201);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(a1 + 224), (long long *)(224 * v12 + a1 - 224), v200);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(a1 + 448), (long long *)(a1 + 224 + 224 * v12), v199);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(224 * v12 + a1 - 224), v13, (long long *)(a1 + 224 + 224 * v12));
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)a1, v13);
        }
        else
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((long long *)(a1 + 224 * (v11 >> 1)), (long long *)a1, v201);
        }
        --a3;
        if ((a4 & 1) != 0 || *(void *)(a1 - 224) < *(void *)a1) {
          break;
        }
        long long v42 = *(_OWORD *)a1;
        long long v43 = *(_OWORD *)(a1 + 32);
        long long v227 = *(_OWORD *)(a1 + 16);
        long long v228 = v43;
        long long v226 = v42;
        long long v44 = *(_OWORD *)(a1 + 48);
        long long v45 = *(_OWORD *)(a1 + 64);
        long long v46 = *(_OWORD *)(a1 + 80);
        uint64_t v232 = *(void *)(a1 + 96);
        long long v230 = v45;
        long long v231 = v46;
        long long v229 = v44;
        v233.n128_u8[0] = 0;
        char v235 = 0;
        if (*(unsigned char *)(a1 + 128))
        {
          __n128 v47 = *(__n128 *)(a1 + 104);
          uint64_t v234 = *(void *)(a1 + 120);
          __n128 v233 = v47;
          *(void *)(a1 + 112) = 0;
          *(void *)(a1 + 120) = 0;
          *(void *)(a1 + 104) = 0;
          char v235 = 1;
        }
        v236.n128_u8[0] = 0;
        char v238 = 0;
        if (*(unsigned char *)(a1 + 160))
        {
          __n128 v236 = *(__n128 *)(a1 + 136);
          uint64_t v237 = *(void *)(a1 + 152);
          *(void *)(a1 + 136) = 0;
          *(void *)(a1 + 144) = 0;
          *(void *)(a1 + 152) = 0;
          char v238 = 1;
        }
        __p.n128_u8[0] = 0;
        char v241 = 0;
        if (*(unsigned char *)(a1 + 192))
        {
          __n128 __p = *(__n128 *)(a1 + 168);
          uint64_t v240 = *(void *)(a1 + 184);
          *(void *)(a1 + 168) = 0;
          *(void *)(a1 + 176) = 0;
          *(void *)(a1 + 184) = 0;
          char v241 = 1;
        }
        long long v242 = *(_OWORD *)(a1 + 200);
        uint64_t v243 = *(void *)(a1 + 216);
        *(void *)(a1 + 200) = 0;
        *(void *)(a1 + 208) = 0;
        *(void *)(a1 + 216) = 0;
        unint64_t v48 = v226;
        if ((unint64_t)v226 < *(void *)v201)
        {
          unint64_t v8 = a1;
          do
          {
            unint64_t v49 = *(void *)(v8 + 224);
            v8 += 224;
          }
          while ((unint64_t)v226 >= v49);
        }
        else
        {
          unint64_t v50 = a1 + 224;
          do
          {
            unint64_t v8 = v50;
            if (v50 >= (unint64_t)v206) {
              break;
            }
            v50 += 224;
          }
          while ((unint64_t)v226 >= *(void *)v8);
        }
        long long v51 = v206;
        if (v8 < (unint64_t)v206)
        {
          long long v51 = v206;
          do
          {
            unint64_t v52 = *((void *)v51 - 28);
            v51 -= 14;
          }
          while ((unint64_t)v226 < v52);
        }
        while (v8 < (unint64_t)v51)
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)v8, v51);
          do
          {
            unint64_t v53 = *(void *)(v8 + 224);
            v8 += 224;
          }
          while (v48 >= v53);
          do
          {
            unint64_t v54 = *((void *)v51 - 28);
            v51 -= 14;
          }
          while (v48 < v54);
        }
        uint64_t v55 = (long long *)(v8 - 224);
        if (v8 - 224 != a1)
        {
          long long v56 = *v55;
          long long v57 = *(_OWORD *)(v8 - 192);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 - 208);
          *(_OWORD *)(a1 + 32) = v57;
          *(_OWORD *)a1 = v56;
          long long v58 = *(_OWORD *)(v8 - 176);
          long long v59 = *(_OWORD *)(v8 - 160);
          long long v60 = *(_OWORD *)(v8 - 144);
          *(void *)(a1 + 96) = *(void *)(v8 - 128);
          *(_OWORD *)(a1 + 64) = v59;
          *(_OWORD *)(a1 + 80) = v60;
          *(_OWORD *)(a1 + 48) = v58;
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v8 - 120));
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v8 - 88));
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v8 - 56));
          std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
          *(_OWORD *)(a1 + 200) = *(_OWORD *)(v8 - 24);
          *(void *)(a1 + 216) = *(void *)(v8 - 8);
          *(void *)(v8 - 24) = 0;
          *(void *)(v8 - 16) = 0;
          *(void *)(v8 - 8) = 0;
        }
        long long v61 = v226;
        long long v62 = v228;
        *(_OWORD *)(v8 - 208) = v227;
        *(_OWORD *)(v8 - 192) = v62;
        long long *v55 = v61;
        long long v63 = v229;
        long long v64 = v230;
        long long v65 = v231;
        *(void *)(v8 - 128) = v232;
        *(_OWORD *)(v8 - 160) = v64;
        *(_OWORD *)(v8 - 144) = v65;
        *(_OWORD *)(v8 - 176) = v63;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v8 - 120, &v233);
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 88, &v236);
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 56, &__p);
        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v8 - 24));
        *(_OWORD *)(v8 - 24) = v242;
        *(void *)(v8 - 8) = v243;
        long long v242 = 0uLL;
        uint64_t v243 = 0;
        *(void *)&long long v207 = &v242;
        std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
        if (v241 && __p.n128_u64[0])
        {
          __p.n128_u64[1] = __p.n128_u64[0];
          operator delete((void *)__p.n128_u64[0]);
        }
        if (v238 && v236.n128_u64[0])
        {
          v236.n128_u64[1] = v236.n128_u64[0];
          operator delete((void *)v236.n128_u64[0]);
        }
        if (v235 && SHIBYTE(v234) < 0) {
          operator delete((void *)v233.n128_u64[0]);
        }
LABEL_46:
        a4 = 0;
      }
      long long v14 = *(_OWORD *)a1;
      long long v15 = *(_OWORD *)(a1 + 32);
      long long v227 = *(_OWORD *)(a1 + 16);
      long long v228 = v15;
      long long v226 = v14;
      long long v16 = *(_OWORD *)(a1 + 48);
      long long v17 = *(_OWORD *)(a1 + 64);
      long long v18 = *(_OWORD *)(a1 + 80);
      uint64_t v232 = *(void *)(a1 + 96);
      long long v230 = v17;
      long long v231 = v18;
      long long v229 = v16;
      v233.n128_u8[0] = 0;
      char v235 = 0;
      if (*(unsigned char *)(a1 + 128))
      {
        __n128 v19 = *(__n128 *)(a1 + 104);
        uint64_t v234 = *(void *)(a1 + 120);
        __n128 v233 = v19;
        *(void *)(a1 + 112) = 0;
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 104) = 0;
        char v235 = 1;
      }
      v236.n128_u8[0] = 0;
      char v238 = 0;
      if (*(unsigned char *)(a1 + 160))
      {
        __n128 v236 = *(__n128 *)(a1 + 136);
        uint64_t v237 = *(void *)(a1 + 152);
        *(void *)(a1 + 136) = 0;
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        char v238 = 1;
      }
      __p.n128_u8[0] = 0;
      char v241 = 0;
      if (*(unsigned char *)(a1 + 192))
      {
        __n128 __p = *(__n128 *)(a1 + 168);
        uint64_t v240 = *(void *)(a1 + 184);
        *(void *)(a1 + 168) = 0;
        *(void *)(a1 + 176) = 0;
        *(void *)(a1 + 184) = 0;
        char v241 = 1;
      }
      uint64_t v20 = 0;
      long long v242 = *(_OWORD *)(a1 + 200);
      uint64_t v243 = *(void *)(a1 + 216);
      *(void *)(a1 + 200) = 0;
      *(void *)(a1 + 208) = 0;
      *(void *)(a1 + 216) = 0;
      unint64_t v21 = v226;
      do
      {
        unint64_t v22 = *(void *)(a1 + v20 + 224);
        v20 += 224;
      }
      while (v22 < (unint64_t)v226);
      unint64_t v23 = a1 + v20;
      long long v24 = v206;
      if (v20 == 224)
      {
        long long v24 = v206;
        do
        {
          if (v23 >= (unint64_t)v24) {
            break;
          }
          unint64_t v26 = *((void *)v24 - 28);
          v24 -= 14;
        }
        while (v26 >= (unint64_t)v226);
      }
      else
      {
        do
        {
          unint64_t v25 = *((void *)v24 - 28);
          v24 -= 14;
        }
        while (v25 >= (unint64_t)v226);
      }
      unint64_t v8 = a1 + v20;
      if (v23 < (unint64_t)v24)
      {
        long long v27 = v24;
        do
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((long long *)v8, v27);
          do
          {
            unint64_t v28 = *(void *)(v8 + 224);
            v8 += 224;
          }
          while (v28 < v21);
          do
          {
            unint64_t v29 = *((void *)v27 - 28);
            v27 -= 14;
          }
          while (v29 >= v21);
        }
        while (v8 < (unint64_t)v27);
      }
      long long v30 = (long long *)(v8 - 224);
      if (v8 - 224 != a1)
      {
        long long v31 = *v30;
        long long v32 = *(_OWORD *)(v8 - 192);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 - 208);
        *(_OWORD *)(a1 + 32) = v32;
        *(_OWORD *)a1 = v31;
        long long v33 = *(_OWORD *)(v8 - 176);
        long long v34 = *(_OWORD *)(v8 - 160);
        long long v35 = *(_OWORD *)(v8 - 144);
        *(void *)(a1 + 96) = *(void *)(v8 - 128);
        *(_OWORD *)(a1 + 64) = v34;
        *(_OWORD *)(a1 + 80) = v35;
        *(_OWORD *)(a1 + 48) = v33;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v8 - 120));
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v8 - 88));
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v8 - 56));
        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
        *(_OWORD *)(a1 + 200) = *(_OWORD *)(v8 - 24);
        *(void *)(a1 + 216) = *(void *)(v8 - 8);
        *(void *)(v8 - 24) = 0;
        *(void *)(v8 - 16) = 0;
        *(void *)(v8 - 8) = 0;
      }
      long long v36 = v226;
      long long v37 = v228;
      *(_OWORD *)(v8 - 208) = v227;
      *(_OWORD *)(v8 - 192) = v37;
      *long long v30 = v36;
      long long v38 = v229;
      long long v39 = v230;
      long long v40 = v231;
      *(void *)(v8 - 128) = v232;
      *(_OWORD *)(v8 - 160) = v39;
      *(_OWORD *)(v8 - 144) = v40;
      *(_OWORD *)(v8 - 176) = v38;
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v8 - 120, &v233);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 88, &v236);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v8 - 56, &__p);
      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v8 - 24));
      *(_OWORD *)(v8 - 24) = v242;
      *(void *)(v8 - 8) = v243;
      long long v242 = 0uLL;
      uint64_t v243 = 0;
      *(void *)&long long v207 = &v242;
      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
      if (v241 && __p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (v238 && v236.n128_u64[0])
      {
        v236.n128_u64[1] = v236.n128_u64[0];
        operator delete((void *)v236.n128_u64[0]);
      }
      if (v235 && SHIBYTE(v234) < 0) {
        operator delete((void *)v233.n128_u64[0]);
      }
      if (v23 < (unint64_t)v24)
      {
LABEL_45:
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(a1, v8 - 224, a3, a4 & 1);
        goto LABEL_46;
      }
      BOOL v41 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((long long *)a1, (long long *)(v8 - 224));
      if (_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((long long *)v8, v206))
      {
        break;
      }
      if (!v41) {
        goto LABEL_45;
      }
    }
    a2 = (long long *)(v8 - 224);
    if (!v41) {
      continue;
    }
    break;
  }
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_(long long *a1, long long *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((void *)a2 - 28) < *(void *)a1)
      {
        unint64_t v6 = a1;
        long long v7 = a2 - 14;
        goto LABEL_4;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_(a1, a1 + 14, a2 - 14);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_(a1, a1 + 14, a1 + 28, a2 - 14);
      return 1;
    case 5:
      long long v24 = a1 + 28;
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_(a1, a1 + 14, a1 + 28, a1 + 42);
      unint64_t v26 = *((void *)a2 - 28);
      unint64_t v25 = a2 - 14;
      if (v26 < *((void *)a1 + 84))
      {
        std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1 + 42, v25);
        if (*((void *)a1 + 84) < *v24)
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1 + 28, a1 + 42);
          if (*v24 < *((void *)a1 + 28))
          {
            std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(a1 + 14, a1 + 28);
            if (*((void *)a1 + 28) < *(void *)a1)
            {
              unint64_t v6 = a1;
              long long v7 = a1 + 14;
LABEL_4:
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(v6, v7);
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v8 = a1 + 28;
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_(a1, a1 + 14, a1 + 28);
      long long v9 = a1 + 42;
      BOOL result = 1;
      if (a1 + 42 == a2) {
        return result;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (*(void *)v9 < *(void *)v8)
    {
      long long v31 = v9[4];
      long long v32 = v9[5];
      uint64_t v33 = *((void *)v9 + 12);
      long long v27 = *v9;
      long long v28 = v9[1];
      long long v29 = v9[2];
      long long v30 = v9[3];
      v34.n128_u8[0] = 0;
      char v36 = 0;
      if (*((unsigned char *)v9 + 128))
      {
        __n128 v34 = *(__n128 *)((char *)v9 + 104);
        uint64_t v35 = *((void *)v9 + 15);
        *((void *)v9 + 14) = 0;
        *((void *)v9 + 15) = 0;
        *((void *)v9 + 13) = 0;
        char v36 = 1;
      }
      v37.n128_u8[0] = 0;
      char v39 = 0;
      if (*((unsigned char *)v9 + 160))
      {
        __n128 v37 = *(__n128 *)((char *)v9 + 136);
        uint64_t v38 = *((void *)v9 + 19);
        *((void *)v9 + 18) = 0;
        *((void *)v9 + 19) = 0;
        *((void *)v9 + 17) = 0;
        char v39 = 1;
      }
      __p.n128_u8[0] = 0;
      char v42 = 0;
      if (*((unsigned char *)v9 + 192))
      {
        __n128 __p = *(__n128 *)((char *)v9 + 168);
        uint64_t v41 = *((void *)v9 + 23);
        *((void *)v9 + 22) = 0;
        *((void *)v9 + 23) = 0;
        *((void *)v9 + 21) = 0;
        char v42 = 1;
      }
      long long v43 = *(long long *)((char *)v9 + 200);
      uint64_t v44 = *((void *)v9 + 27);
      *((void *)v9 + 26) = 0;
      *((void *)v9 + 27) = 0;
      *((void *)v9 + 25) = 0;
      uint64_t v12 = v10;
      while (1)
      {
        uint64_t v13 = v12;
        long long v14 = (char *)a1 + v12;
        long long v15 = *(long long *)((char *)a1 + v12 + 528);
        *((_OWORD *)v14 + 46) = *(long long *)((char *)a1 + v12 + 512);
        *((_OWORD *)v14 + 47) = v15;
        *((void *)v14 + 96) = *(void *)((char *)a1 + v12 + 544);
        long long v16 = *(long long *)((char *)a1 + v12 + 464);
        *((_OWORD *)v14 + 42) = *((_OWORD *)v14 + 28);
        *((_OWORD *)v14 + 43) = v16;
        long long v17 = *(long long *)((char *)a1 + v12 + 496);
        *((_OWORD *)v14 + 44) = *(long long *)((char *)a1 + v12 + 480);
        *((_OWORD *)v14 + 45) = v17;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)a1 + v12 + 776, (__n128 *)((char *)a1 + v12 + 552));
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)(v14 + 808), (__n128 *)(v14 + 584));
        long long v18 = (char *)a1 + v13;
        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)a1 + v13 + 840, (__n128 *)((char *)a1 + v13 + 616));
        __n128 v19 = (long long *)((char *)a1 + v13 + 648);
        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)((char *)a1 + v13 + 872));
        *(_OWORD *)(v18 + 872) = *v19;
        *((void *)v18 + 111) = *((void *)v18 + 83);
        *((void *)v18 + 83) = 0;
        *__n128 v19 = 0u;
        if (v13 == -448) {
          break;
        }
        uint64_t v12 = v13 - 224;
        if ((unint64_t)v27 >= *(void *)((char *)a1 + v13 + 224))
        {
          uint64_t v20 = (uint64_t)a1 + v12 + 672;
          goto LABEL_19;
        }
      }
      uint64_t v20 = (uint64_t)a1;
LABEL_19:
      *(_OWORD *)(v20 + 64) = v31;
      *(_OWORD *)(v20 + 80) = v32;
      *(void *)(v20 + 96) = v33;
      *(_OWORD *)uint64_t v20 = v27;
      *(_OWORD *)(v20 + 16) = v28;
      unint64_t v21 = (uint64_t *)((char *)a1 + v13);
      *(_OWORD *)(v20 + 32) = v29;
      *(_OWORD *)(v20 + 48) = v30;
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v21 + 69), &v34);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)(v21 + 73), &v37);
      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)(v21 + 77), &__p);
      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(v21 + 81);
      uint64_t v22 = *((void *)&v43 + 1);
      v21[81] = v43;
      uint64_t v23 = v44;
      *(void *)(v20 + 208) = v22;
      *(void *)(v20 + 216) = v23;
      uint64_t v44 = 0;
      long long v43 = 0uLL;
      long long v45 = (void **)&v43;
      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v45);
      if (v42 && __p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (v39 && v37.n128_u64[0])
      {
        v37.n128_u64[1] = v37.n128_u64[0];
        operator delete((void *)v37.n128_u64[0]);
      }
      if (v36 && SHIBYTE(v35) < 0) {
        operator delete((void *)v34.n128_u64[0]);
      }
      if (++v11 == 8) {
        return v9 + 14 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 224;
    v9 += 14;
    if (v9 == a2) {
      return 1;
    }
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::__emplace_unique_key_args<unsigned int,unsigned int &,mapped_memory_t *&>(uint64_t a1, unsigned int *a2, _DWORD *a3, void *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v12 = operator new(0x20uLL);
  void *v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = *a3;
  void v12[3] = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v12 = *v21;
LABEL_38:
    *unint64_t v21 = v12;
    goto LABEL_39;
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_1B9070380(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::__erase_unique<unsigned int>(void *a1, unsigned int *a2)
{
  BOOL result = std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::find<unsigned int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  __n128 __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void std::default_delete<mapped_memory_t>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 192);
    *(void *)(a2 + 192) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    std::mutex::~mutex((std::mutex *)(a2 + 128));
    unint64_t v4 = *(void **)(a2 + 64);
    if (v4)
    {
      *(void *)(a2 + 72) = v4;
      operator delete(v4);
    }
    std::__tree<TRange<Pointer64>>::destroy(a2 + 40, *(void **)(a2 + 48));
    JUMPOUT(0x1BA9D1CD0);
  }
}

uint64_t **std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__emplace_unique_key_args<mapped_region_node_internal_t,mapped_region_node_internal_t const&>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  char v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        char v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      char v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint8x8_t v10 = operator new(0x48uLL);
    long long v11 = *(_OWORD *)(a3 + 16);
    _OWORD v10[2] = *(_OWORD *)a3;
    void v10[3] = v11;
    *((void *)v10 + 8) = *(void *)(a3 + 32);
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__erase_unique<mapped_region_node_internal_t>(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v2 + 1;
    }
    if (v6) {
      unint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  std::__tree<TRangeValue<Pointer64,unsigned char *>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

const char *CSDwarfExpression::Evaluate(uint64_t (*a1)(uint64_t, void, char *), uint64_t (*a2)(uint64_t, uint64_t, char *), uint64_t a3, CSBinaryDataRef *this, unsigned int a5, uint64_t a6, unint64_t *a7, void *a8)
{
  unint64_t v9 = a7;
  __n128 __p = 0;
  long long v148 = 0;
  long long v149 = 0;
  if (a7)
  {
    BOOL v16 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, 1uLL);
    *BOOL v16 = *v9;
    unint64_t v9 = v16 + 1;
    __n128 __p = v16;
    long long v149 = (char *)&v16[v17];
    long long v148 = v16 + 1;
  }
  unsigned int v146 = a5;
  v141[0] = 1;
  unint64_t v145 = 0;
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  int v144 = 0;
  unint64_t v18 = *((void *)this + 1);
  if (*(void *)this >= v18) {
    goto LABEL_296;
  }
  uint64_t v19 = a5;
  unint64_t v20 = v18 - *(void *)this;
  uint64_t v21 = a6 - 1;
  if (!a6) {
    uint64_t v21 = 0;
  }
  if (v20 <= v21 + (unint64_t)a5)
  {
LABEL_296:
    unint64_t v25 = "invalid offset and/or length for opcodes buffer";
    goto LABEL_297;
  }
  if (v20 <= a5)
  {
LABEL_294:
    if (__p != v9)
    {
      unint64_t v25 = 0;
      *a8 = *(v9 - 1);
      goto LABEL_297;
    }
    unint64_t v25 = "Stack empty after evaluation";
    if (v9) {
      goto LABEL_298;
    }
    return v25;
  }
  unint64_t v22 = 0;
  uint64_t v23 = a6 + a5;
  while (2)
  {
    if (v22 || v23 <= v19)
    {
LABEL_293:
      unint64_t v9 = v148;
      goto LABEL_294;
    }
    int v24 = CSBinaryDataRef::Get8(this, &v146);
    unint64_t v22 = 0;
    unint64_t v25 = "error: UNIMPLEMENTED opcode DW_OP_xderef_size";
    switch(v24)
    {
      case 3:
        unint64_t Pointer = CSBinaryDataRef::GetPointer(this, &v146);
        long long v27 = v148;
        if (v148 < (unint64_t *)v149) {
          goto LABEL_13;
        }
        __n128 v34 = (unint64_t *)__p;
        uint64_t v90 = ((char *)v148 - (unsigned char *)__p) >> 3;
        unint64_t v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v92 = v149 - (unsigned char *)__p;
        if ((v149 - (unsigned char *)__p) >> 2 > v91) {
          unint64_t v91 = v92 >> 2;
        }
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v91;
        }
        if (v38)
        {
          char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, v38);
          __n128 v34 = (unint64_t *)__p;
          long long v27 = v148;
        }
        else
        {
          char v39 = 0;
        }
        unint64_t v48 = (unint64_t *)&v39[8 * v90];
        *unint64_t v48 = Pointer;
        uint64_t v33 = v48 + 1;
        while (v27 != v34)
        {
          unint64_t v128 = *--v27;
          *--unint64_t v48 = v128;
        }
        goto LABEL_285;
      case 6:
        if (__p == v148 || !a1)
        {
          long long v138 = "DW_OP_deref: No read memory callback provided";
          long long v139 = "Stack empty for DW_OP_deref";
          BOOL v140 = __p == v148;
          goto LABEL_330;
        }
        uint64_t v142 = *((unsigned __int8 *)this + 17);
        v141[0] = 1;
        uint64_t v93 = a1(a3, *(v148 - 1), v141);
        goto LABEL_239;
      case 8:
        unint64_t Pointer = CSBinaryDataRef::Get8(this, &v146);
        long long v27 = v148;
        if (v148 < (unint64_t *)v149) {
          goto LABEL_13;
        }
        __n128 v34 = (unint64_t *)__p;
        uint64_t v102 = ((char *)v148 - (unsigned char *)__p) >> 3;
        unint64_t v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v104 = v149 - (unsigned char *)__p;
        if ((v149 - (unsigned char *)__p) >> 2 > v103) {
          unint64_t v103 = v104 >> 2;
        }
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v103;
        }
        if (v38)
        {
          char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, v38);
          __n128 v34 = (unint64_t *)__p;
          long long v27 = v148;
        }
        else
        {
          char v39 = 0;
        }
        unint64_t v48 = (unint64_t *)&v39[8 * v102];
        *unint64_t v48 = Pointer;
        uint64_t v33 = v48 + 1;
        while (v27 != v34)
        {
          unint64_t v131 = *--v27;
          *--unint64_t v48 = v131;
        }
        goto LABEL_285;
      case 9:
        unint64_t Pointer = (char)CSBinaryDataRef::Get8(this, &v146);
        long long v27 = v148;
        if (v148 < (unint64_t *)v149) {
          goto LABEL_13;
        }
        __n128 v34 = (unint64_t *)__p;
        uint64_t v99 = ((char *)v148 - (unsigned char *)__p) >> 3;
        unint64_t v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v101 = v149 - (unsigned char *)__p;
        if ((v149 - (unsigned char *)__p) >> 2 > v100) {
          unint64_t v100 = v101 >> 2;
        }
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v100;
        }
        if (v38)
        {
          char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, v38);
          __n128 v34 = (unint64_t *)__p;
          long long v27 = v148;
        }
        else
        {
          char v39 = 0;
        }
        unint64_t v48 = (unint64_t *)&v39[8 * v99];
        *unint64_t v48 = Pointer;
        uint64_t v33 = v48 + 1;
        while (v27 != v34)
        {
          unint64_t v130 = *--v27;
          *--unint64_t v48 = v130;
        }
        goto LABEL_285;
      case 10:
        unint64_t Pointer = CSBinaryDataRef::Get16(this, &v146);
        long long v27 = v148;
        if (v148 < (unint64_t *)v149) {
          goto LABEL_13;
        }
        __n128 v34 = (unint64_t *)__p;
        uint64_t v95 = ((char *)v148 - (unsigned char *)__p) >> 3;
        unint64_t v96 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v97 = v149 - (unsigned char *)__p;
        if ((v149 - (unsigned char *)__p) >> 2 > v96) {
          unint64_t v96 = v97 >> 2;
        }
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v96;
        }
        if (v38)
        {
          char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, v38);
          __n128 v34 = (unint64_t *)__p;
          long long v27 = v148;
        }
        else
        {
          char v39 = 0;
        }
        unint64_t v48 = (unint64_t *)&v39[8 * v95];
        *unint64_t v48 = Pointer;
        uint64_t v33 = v48 + 1;
        while (v27 != v34)
        {
          unint64_t v129 = *--v27;
          *--unint64_t v48 = v129;
        }
        goto LABEL_285;
      case 11:
        unint64_t Pointer = (__int16)CSBinaryDataRef::Get16(this, &v146);
        long long v27 = v148;
        if (v148 < (unint64_t *)v149) {
          goto LABEL_13;
        }
        __n128 v34 = (unint64_t *)__p;
        uint64_t v109 = ((char *)v148 - (unsigned char *)__p) >> 3;
        unint64_t v110 = v109 + 1;
        if ((unint64_t)(v109 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v111 = v149 - (unsigned char *)__p;
        if ((v149 - (unsigned char *)__p) >> 2 > v110) {
          unint64_t v110 = v111 >> 2;
        }
        if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v110;
        }
        if (v38)
        {
          char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, v38);
          __n128 v34 = (unint64_t *)__p;
          long long v27 = v148;
        }
        else
        {
          char v39 = 0;
        }
        unint64_t v48 = (unint64_t *)&v39[8 * v109];
        *unint64_t v48 = Pointer;
        uint64_t v33 = v48 + 1;
        while (v27 != v34)
        {
          unint64_t v133 = *--v27;
          *--unint64_t v48 = v133;
        }
        goto LABEL_285;
      case 12:
        unint64_t Pointer = CSBinaryDataRef::Get32(this, &v146);
        long long v27 = v148;
        if (v148 < (unint64_t *)v149) {
          goto LABEL_13;
        }
        __n128 v34 = (unint64_t *)__p;
        uint64_t v114 = ((char *)v148 - (unsigned char *)__p) >> 3;
        unint64_t v115 = v114 + 1;
        if ((unint64_t)(v114 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v116 = v149 - (unsigned char *)__p;
        if ((v149 - (unsigned char *)__p) >> 2 > v115) {
          unint64_t v115 = v116 >> 2;
        }
        if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v115;
        }
        if (v38)
        {
          char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, v38);
          __n128 v34 = (unint64_t *)__p;
          long long v27 = v148;
        }
        else
        {
          char v39 = 0;
        }
        unint64_t v48 = (unint64_t *)&v39[8 * v114];
        *unint64_t v48 = Pointer;
        uint64_t v33 = v48 + 1;
        while (v27 != v34)
        {
          unint64_t v134 = *--v27;
          *--unint64_t v48 = v134;
        }
        goto LABEL_285;
      case 13:
        unint64_t Pointer = (int)CSBinaryDataRef::Get32(this, &v146);
        long long v27 = v148;
        if (v148 < (unint64_t *)v149) {
          goto LABEL_13;
        }
        __n128 v34 = (unint64_t *)__p;
        uint64_t v106 = ((char *)v148 - (unsigned char *)__p) >> 3;
        unint64_t v107 = v106 + 1;
        if ((unint64_t)(v106 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v108 = v149 - (unsigned char *)__p;
        if ((v149 - (unsigned char *)__p) >> 2 > v107) {
          unint64_t v107 = v108 >> 2;
        }
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v107;
        }
        if (v38)
        {
          char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, v38);
          __n128 v34 = (unint64_t *)__p;
          long long v27 = v148;
        }
        else
        {
          char v39 = 0;
        }
        unint64_t v48 = (unint64_t *)&v39[8 * v106];
        *unint64_t v48 = Pointer;
        uint64_t v33 = v48 + 1;
        while (v27 != v34)
        {
          unint64_t v132 = *--v27;
          *--unint64_t v48 = v132;
        }
        goto LABEL_285;
      case 14:
        unint64_t Pointer = CSBinaryDataRef::Get64(this, &v146);
        long long v27 = v148;
        if (v148 < (unint64_t *)v149) {
          goto LABEL_13;
        }
        __n128 v34 = (unint64_t *)__p;
        uint64_t v82 = ((char *)v148 - (unsigned char *)__p) >> 3;
        unint64_t v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v84 = v149 - (unsigned char *)__p;
        if ((v149 - (unsigned char *)__p) >> 2 > v83) {
          unint64_t v83 = v84 >> 2;
        }
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v83;
        }
        if (v38)
        {
          char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, v38);
          __n128 v34 = (unint64_t *)__p;
          long long v27 = v148;
        }
        else
        {
          char v39 = 0;
        }
        unint64_t v48 = (unint64_t *)&v39[8 * v82];
        *unint64_t v48 = Pointer;
        uint64_t v33 = v48 + 1;
        while (v27 != v34)
        {
          unint64_t v127 = *--v27;
          *--unint64_t v48 = v127;
        }
        goto LABEL_285;
      case 15:
        unint64_t Pointer = CSBinaryDataRef::Get64(this, &v146);
        long long v27 = v148;
        if (v148 < (unint64_t *)v149) {
          goto LABEL_13;
        }
        __n128 v34 = (unint64_t *)__p;
        uint64_t v73 = ((char *)v148 - (unsigned char *)__p) >> 3;
        unint64_t v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v75 = v149 - (unsigned char *)__p;
        if ((v149 - (unsigned char *)__p) >> 2 > v74) {
          unint64_t v74 = v75 >> 2;
        }
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v74;
        }
        if (v38)
        {
          char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, v38);
          __n128 v34 = (unint64_t *)__p;
          long long v27 = v148;
        }
        else
        {
          char v39 = 0;
        }
        unint64_t v48 = (unint64_t *)&v39[8 * v73];
        *unint64_t v48 = Pointer;
        uint64_t v33 = v48 + 1;
        while (v27 != v34)
        {
          unint64_t v125 = *--v27;
          *--unint64_t v48 = v125;
        }
        goto LABEL_285;
      case 16:
        unint64_t Pointer = CSBinaryDataRef::Get_ULEB128(this, &v146);
        long long v27 = v148;
        if (v148 < (unint64_t *)v149) {
          goto LABEL_13;
        }
        __n128 v34 = (unint64_t *)__p;
        uint64_t v79 = ((char *)v148 - (unsigned char *)__p) >> 3;
        unint64_t v80 = v79 + 1;
        if ((unint64_t)(v79 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v81 = v149 - (unsigned char *)__p;
        if ((v149 - (unsigned char *)__p) >> 2 > v80) {
          unint64_t v80 = v81 >> 2;
        }
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v80;
        }
        if (v38)
        {
          char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, v38);
          __n128 v34 = (unint64_t *)__p;
          long long v27 = v148;
        }
        else
        {
          char v39 = 0;
        }
        unint64_t v48 = (unint64_t *)&v39[8 * v79];
        *unint64_t v48 = Pointer;
        uint64_t v33 = v48 + 1;
        while (v27 != v34)
        {
          unint64_t v126 = *--v27;
          *--unint64_t v48 = v126;
        }
        goto LABEL_285;
      case 17:
        unint64_t Pointer = CSBinaryDataRef::Get_SLEB128(this, &v146);
        long long v27 = v148;
        if (v148 < (unint64_t *)v149) {
          goto LABEL_13;
        }
        __n128 v34 = (unint64_t *)__p;
        uint64_t v67 = ((char *)v148 - (unsigned char *)__p) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v69 = v149 - (unsigned char *)__p;
        if ((v149 - (unsigned char *)__p) >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v68;
        }
        if (v38)
        {
          char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, v38);
          __n128 v34 = (unint64_t *)__p;
          long long v27 = v148;
        }
        else
        {
          char v39 = 0;
        }
        unint64_t v48 = (unint64_t *)&v39[8 * v67];
        *unint64_t v48 = Pointer;
        uint64_t v33 = v48 + 1;
        while (v27 != v34)
        {
          unint64_t v124 = *--v27;
          *--unint64_t v48 = v124;
        }
        goto LABEL_285;
      case 18:
        if (__p == v148)
        {
          unint64_t v25 = "Stack empty for DW_OP_dup";
          goto LABEL_297;
        }
        BOOL v78 = v148 - 1;
        goto LABEL_187;
      case 19:
        if (__p == v148)
        {
          unint64_t v25 = "Stack empty for DW_OP_drop";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        --v148;
        goto LABEL_289;
      case 20:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_over";
          goto LABEL_297;
        }
        BOOL v78 = v148 - 2;
LABEL_187:
        std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&__p, v78);
        goto LABEL_237;
      case 21:
        unsigned int v62 = CSBinaryDataRef::Get8(this, &v146);
        if (v62 >= (unint64_t)(((char *)v148 - (unsigned char *)__p) >> 3))
        {
          unint64_t v25 = "Index out of range for DW_OP_pick";
          goto LABEL_297;
        }
        std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&__p, (void *)__p + v62);
LABEL_237:
        unint64_t v22 = 0;
        goto LABEL_289;
      case 22:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_swap";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        unint64_t v70 = *(v148 - 1);
        unint64_t v71 = v148;
        *(v148 - 1) = *(v148 - 2);
        *(v71 - 2) = v70;
        goto LABEL_289;
      case 23:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x18)
        {
          unint64_t v25 = "Stack size less than 3 elements for DW_OP_rot";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        long long v76 = v148;
        unint64_t v77 = *(v148 - 1);
        *((_OWORD *)v148 - 1) = *(_OWORD *)(v148 - 3);
        *(v76 - 3) = v77;
        goto LABEL_289;
      case 24:
        unint64_t v25 = "error: UNIMPLEMENTED opcode DW_OP_xderef";
        goto LABEL_297;
      case 25:
        long long v57 = v148;
        if (__p == v148)
        {
          unint64_t v25 = "Stack empty for DW_OP_abs";
          goto LABEL_297;
        }
        uint64_t v64 = *(v148 - 1);
        if ((v64 & 0x8000000000000000) == 0) {
          goto LABEL_237;
        }
        unint64_t v22 = 0;
LABEL_182:
        uint64_t v59 = -v64;
        goto LABEL_233;
      case 26:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10) {
          goto LABEL_305;
        }
        unint64_t v22 = 0;
        uint64_t v72 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) & v72;
        goto LABEL_233;
      case 27:
        long long v65 = v148;
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
LABEL_305:
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_and";
          goto LABEL_297;
        }
        unint64_t v66 = *(v148 - 1);
        if (!v66)
        {
          unint64_t v25 = "DW_OP_div divide by zero";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        --v148;
        *(v65 - 2) /= v66;
        goto LABEL_289;
      case 28:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10) {
          goto LABEL_304;
        }
        unint64_t v22 = 0;
        uint64_t v105 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) - v105;
        goto LABEL_233;
      case 29:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_mod";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        unint64_t v60 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) % v60;
        goto LABEL_233;
      case 30:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
LABEL_304:
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_minus";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        uint64_t v117 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) * v117;
        goto LABEL_233;
      case 31:
        long long v57 = v148;
        if (__p == v148)
        {
          unint64_t v25 = "Stack empty for DW_OP_neg";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        uint64_t v64 = *(v148 - 1);
        goto LABEL_182;
      case 32:
        long long v57 = v148;
        if (__p == v148)
        {
          unint64_t v25 = "Stack empty for DW_OP_not";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        uint64_t v59 = ~*(v148 - 1);
        goto LABEL_233;
      case 33:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_or";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        uint64_t v85 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) | v85;
        goto LABEL_233;
      case 34:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_plus";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        uint64_t v94 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) + v94;
        goto LABEL_233;
      case 35:
        if (__p == v148)
        {
          unint64_t v25 = "Stack empty for DW_OP_plus_uconst";
          goto LABEL_297;
        }
        uint64_t ULEB128 = CSBinaryDataRef::Get_ULEB128(this, &v146);
        unint64_t v22 = 0;
        long long v57 = v148;
        uint64_t v59 = *(v148 - 1) + ULEB128;
LABEL_233:
        *(v57 - 1) = v59;
        goto LABEL_289;
      case 36:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_shl";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        uint64_t v118 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) << v118;
        goto LABEL_233;
      case 37:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_shr";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        uint64_t v113 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) >> v113;
        goto LABEL_233;
      case 38:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_shra";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        uint64_t v122 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = (uint64_t)*(v57 - 1) >> v122;
        goto LABEL_233;
      case 39:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_xor";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        uint64_t v112 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) ^ v112;
        goto LABEL_233;
      case 40:
        uint64_t v86 = *--v148;
        __int16 v87 = CSBinaryDataRef::Get16(this, &v146);
        if (!v86) {
          goto LABEL_237;
        }
        uint64_t v88 = v146 + v87;
        unint64_t v25 = "DW_OP_bra has invalid opcode offset";
LABEL_226:
        if (v88 < a5 || v23 <= v88) {
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        unsigned int v146 = v88;
        goto LABEL_289;
      case 41:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_eq";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        uint64_t v58 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) == v58;
        goto LABEL_233;
      case 42:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_ge";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        unint64_t v61 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) >= v61;
        goto LABEL_233;
      case 43:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_gt";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        unint64_t v98 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) > v98;
        goto LABEL_233;
      case 44:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_le";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        unint64_t v119 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) <= v119;
        goto LABEL_233;
      case 45:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_lt";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        unint64_t v89 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) < v89;
        goto LABEL_233;
      case 46:
        if ((unint64_t)((char *)v148 - (unsigned char *)__p) < 0x10)
        {
          unint64_t v25 = "Stack size less than 2 elements for DW_OP_ne";
          goto LABEL_297;
        }
        unint64_t v22 = 0;
        uint64_t v63 = *(v148 - 1);
        long long v57 = v148 - 1;
        long long v148 = v57;
        uint64_t v59 = *(v57 - 1) != v63;
        goto LABEL_233;
      case 47:
        __int16 v120 = CSBinaryDataRef::Get16(this, &v146);
        uint64_t v88 = v146 + v120;
        unint64_t v25 = "DW_OP_skip has invalid opcode offset";
        goto LABEL_226;
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
        unint64_t Pointer = (v24 - 48);
        long long v27 = v148;
        if (v148 < (unint64_t *)v149)
        {
LABEL_13:
          *long long v27 = Pointer;
          long long v28 = v27 + 1;
          goto LABEL_22;
        }
        __n128 v34 = (unint64_t *)__p;
        uint64_t v35 = ((char *)v148 - (unsigned char *)__p) >> 3;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v149 - (unsigned char *)__p;
        if ((v149 - (unsigned char *)__p) >> 2 > v36) {
          unint64_t v36 = v37 >> 2;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, v38);
          __n128 v34 = (unint64_t *)__p;
          long long v27 = v148;
        }
        else
        {
          char v39 = 0;
        }
        unint64_t v48 = (unint64_t *)&v39[8 * v35];
        *unint64_t v48 = Pointer;
        uint64_t v33 = v48 + 1;
        while (v27 != v34)
        {
          unint64_t v49 = *--v27;
          *--unint64_t v48 = v49;
        }
        goto LABEL_285;
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
        if (!a2)
        {
          unint64_t v25 = "DW_OP_reg: No read register callback provided";
          goto LABEL_297;
        }
        unint64_t v25 = (const char *)a2(a3, (v24 - 80), v141);
        if (v25) {
          goto LABEL_297;
        }
        long long v32 = v148;
        if (v148 >= (unint64_t *)v149)
        {
          __n128 v34 = (unint64_t *)__p;
          uint64_t v40 = ((char *)v148 - (unsigned char *)__p) >> 3;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61) {
            goto LABEL_347;
          }
          uint64_t v42 = v149 - (unsigned char *)__p;
          if ((v149 - (unsigned char *)__p) >> 2 > v41) {
            unint64_t v41 = v42 >> 2;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v41;
          }
          if (v38)
          {
            char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, v38);
            __n128 v34 = (unint64_t *)__p;
            long long v32 = v148;
          }
          else
          {
            char v39 = 0;
          }
          unint64_t v48 = (unint64_t *)&v39[8 * v40];
          *unint64_t v48 = v145;
          uint64_t v33 = v48 + 1;
          while (v32 != v34)
          {
            unint64_t v50 = *--v32;
            *--unint64_t v48 = v50;
          }
LABEL_285:
          unint64_t v53 = &v39[8 * v38];
          __n128 __p = v48;
LABEL_286:
          long long v148 = v33;
          long long v149 = v53;
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *long long v148 = v145;
          long long v28 = v32 + 1;
LABEL_22:
          uint64_t v33 = v28;
        }
        unint64_t v22 = 0;
        long long v148 = v33;
        goto LABEL_289;
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
        if (!a2)
        {
          unint64_t v25 = "DW_OP_breg: No read register callback provided";
          goto LABEL_297;
        }
        unint64_t v25 = (const char *)a2(a3, (v24 - 112), v141);
        if (v25) {
          goto LABEL_297;
        }
        uint64_t SLEB128 = CSBinaryDataRef::Get_SLEB128(this, &v146);
        unint64_t v30 = v145 + SLEB128;
        v145 += SLEB128;
        long long v31 = v148;
        if (v148 < (unint64_t *)v149)
        {
          *long long v148 = v30;
          long long v28 = v31 + 1;
          goto LABEL_22;
        }
        __n128 v34 = (unint64_t *)__p;
        uint64_t v43 = ((char *)v148 - (unsigned char *)__p) >> 3;
        unint64_t v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 61) {
LABEL_347:
        }
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        uint64_t v45 = v149 - (unsigned char *)__p;
        if ((v149 - (unsigned char *)__p) >> 2 > v44) {
          unint64_t v44 = v45 >> 2;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v44;
        }
        if (v46)
        {
          __n128 v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v149, v46);
          __n128 v34 = (unint64_t *)__p;
          long long v31 = v148;
          unint64_t v30 = v145;
        }
        else
        {
          __n128 v47 = 0;
        }
        long long v51 = &v47[8 * v43];
        *(void *)long long v51 = v30;
        uint64_t v33 = (unint64_t *)(v51 + 8);
        while (v31 != v34)
        {
          uint64_t v52 = *--v31;
          *((void *)v51 - 1) = v52;
          v51 -= 8;
        }
        unint64_t v53 = &v47[8 * v46];
        __n128 __p = v51;
        goto LABEL_286;
      case 144:
        if (!a2)
        {
          unint64_t v25 = "DW_OP_regx: No read register callback provided";
          goto LABEL_297;
        }
        uint64_t v123 = CSBinaryDataRef::Get_ULEB128(this, &v146);
        unint64_t v25 = (const char *)a2(a3, v123, v141);
        if (v25) {
          goto LABEL_297;
        }
        std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&__p, &v145);
        goto LABEL_237;
      case 145:
        unint64_t v25 = "DW_OP_fbreg is not implemented";
        goto LABEL_297;
      case 146:
        if (!a2)
        {
          unint64_t v25 = "DW_OP_bregx: No read register callback provided";
          goto LABEL_297;
        }
        uint64_t v54 = CSBinaryDataRef::Get_ULEB128(this, &v146);
        unint64_t v25 = (const char *)a2(a3, v54, v141);
        if (v25) {
          goto LABEL_297;
        }
        uint64_t v55 = CSBinaryDataRef::Get_SLEB128(this, &v146);
        v145 += v55;
        std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&__p, &v145);
        goto LABEL_237;
      case 147:
        unint64_t v25 = "DW_OP_piece is not implemented.";
        goto LABEL_297;
      case 148:
        if (__p != v148 && a1)
        {
          unsigned int v56 = CSBinaryDataRef::Get8(this, &v146);
          if (v56 <= *((unsigned __int8 *)this + 17))
          {
            uint64_t v142 = v56;
            v141[0] = 7;
            uint64_t v93 = a1(a3, *(v148 - 1), v141);
LABEL_239:
            unint64_t v25 = (const char *)v93;
            if (v93) {
              goto LABEL_297;
            }
            unint64_t v22 = 0;
            *(v148 - 1) = v145;
          }
          else
          {
            unint64_t v22 = "error: DW_OP_deref_size attempted to dereference a value with a size larger than a target address.";
          }
LABEL_289:
          uint64_t v19 = v146;
          unint64_t v135 = *((void *)this + 1);
          if (v135 <= *(void *)this || v135 - *(void *)this <= (unint64_t)v146) {
            goto LABEL_293;
          }
          continue;
        }
        long long v138 = "DW_OP_deref_size: No read memory callback provided";
        long long v139 = "Stack empty for DW_OP_deref_size";
        BOOL v140 = __p == v148;
LABEL_330:
        if (v140) {
          unint64_t v25 = v139;
        }
        else {
          unint64_t v25 = v138;
        }
LABEL_297:
        unint64_t v9 = (unint64_t *)__p;
        if (__p)
        {
LABEL_298:
          long long v148 = v9;
          operator delete(v9);
        }
        return v25;
      case 149:
        goto LABEL_297;
      case 150:
        goto LABEL_289;
      case 151:
        unint64_t v25 = "DW_OP_push_object_address is not implemented.";
        goto LABEL_297;
      case 152:
        unint64_t v25 = "DW_OP_call2 is not implemented.";
        goto LABEL_297;
      case 153:
        unint64_t v25 = "DW_OP_call4 is not implemented.";
        goto LABEL_297;
      case 154:
        unint64_t v25 = "DW_OP_call_ref is not implemented.";
        goto LABEL_297;
      case 157:
        unint64_t v25 = "DW_OP_bit_piece is not implemented.";
        goto LABEL_297;
      case 240:
        unint64_t v25 = "Value is not initialized";
        goto LABEL_297;
      default:
        unint64_t v25 = "Unknown DWARF DW_OP value.";
        goto LABEL_297;
    }
  }
}

void sub_1B90718A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long long>::push_back[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  BOOL v6 = *(void **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
      unint64_t v8 = *(void **)a1;
      BOOL v6 = *(void **)(a1 + 8);
    }
    else
    {
      unint64_t v13 = 0;
    }
    float v14 = &v13[8 * v9];
    float v15 = &v13[8 * v12];
    *(void *)float v14 = *a2;
    unint64_t v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *BOOL v6 = *a2;
    unint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

void SymbolicationSession::SymbolicationSession(SymbolicationSession *this)
{
  *((_DWORD *)this + 2) = 1;
  *(void *)this = &unk_1F12CA048;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((void *)this + 21) = 0;
  *((_DWORD *)this + 44) = 1065353216;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  operator new();
}

void sub_1B9071EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<std::unique_ptr<AS::Operator>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table(v4);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(v3 + 144);
  std::vector<std::pair<UUID,std::vector<LibraryDescription>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(v3 + 80);
  std::vector<LibraryDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void SymbolicationSession::~SymbolicationSession(SymbolicationSession *this)
{
  *(void *)this = &unk_1F12CA048;
  for (uint64_t i = (void *)*((void *)this + 25); i; uint64_t i = (void *)*i)
  {
    uint64_t v3 = (atomic_uint **)i[3];
    uint64_t v4 = (atomic_uint **)i[4];
    while (v3 != v4)
      CSCppReferenceCount::release(*v3++, 1);
  }
  uint64_t v5 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v5) {
    std::default_delete<EventAggregator>::operator()[abi:ne180100]((uint64_t)this + 248, v5);
  }
  BOOL v6 = (void **)((char *)this + 224);
  std::vector<std::vector<std::unique_ptr<AS::Operator>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table((uint64_t)this + 184);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)this + 144);
  BOOL v6 = (void **)((char *)this + 120);
  std::vector<std::pair<UUID,std::vector<LibraryDescription>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)this + 80);
  BOOL v6 = (void **)((char *)this + 56);
  std::vector<LibraryDescription>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 16);
}

{
  uint64_t vars8;

  SymbolicationSession::~SymbolicationSession(this);

  JUMPOUT(0x1BA9D1CD0);
}

unint64_t SymbolicationSession::register_library(SymbolicationSession *this, LibraryDescription *a2)
{
  unint64_t v4 = *((void *)this + 8);
  if (v4 >= *((void *)this + 9))
  {
    uint64_t v5 = std::vector<LibraryDescription>::__push_back_slow_path<LibraryDescription const&>((uint64_t *)this + 7, (long long *)a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<LibraryDescription,LibraryDescription const&,LibraryDescription*>(*((void *)this + 8), (long long *)a2);
    uint64_t v5 = v4 + 96;
    *((void *)this + 8) = v4 + 96;
  }
  *((void *)this + 8) = v5;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *((void *)this + 7)) >> 5) - 1;
  unint64_t v8 = a2;
  std::__hash_table<std::__hash_value_type<UUID,unsigned long>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,unsigned long>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,unsigned long>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,unsigned long>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>((uint64_t)this + 80, a2, (uint64_t)&std::piecewise_construct, &v8)[4] = v6;
  return v6;
}

void sub_1B9072130(_Unwind_Exception *a1)
{
  *(void *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

void LibraryDescription::~LibraryDescription(LibraryDescription *this)
{
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  if (*((unsigned char *)this + 48))
  {
    if (*((char *)this + 47) < 0) {
      operator delete(*((void **)this + 3));
    }
  }
}

unint64_t SymbolicationSession::lookup_or_register_process(SymbolicationSession *this, int a2)
{
  int v29 = a2;
  uint64_t v3 = (char *)this + 144;
  unint64_t v4 = std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::find<int>((void *)this + 18, &v29);
  if (v4) {
    return v4[3];
  }
  unint64_t v6 = *((void *)this + 30);
  unint64_t v7 = (void *)*((void *)this + 29);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 28);
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v9) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    __n128 v34 = (char *)this + 240;
    if (v13) {
      float v14 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)this + 240, v13);
    }
    else {
      float v14 = 0;
    }
    float v15 = &v14[6 * v10];
    unint64_t v30 = v14;
    long long v31 = v15;
    uint64_t v33 = &v14[6 * v13];
    *(void *)float v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = 0;
    long long v32 = v15 + 6;
    std::vector<std::vector<std::unique_ptr<AS::Operator>>>::__swap_out_circular_buffer((uint64_t *)this + 28, &v30);
    unint64_t v8 = (void *)*((void *)this + 29);
    std::__split_buffer<std::vector<std::unique_ptr<AS::Operator>>>::~__split_buffer((void **)&v30);
  }
  else
  {
    *unint64_t v7 = 0;
    v7[1] = 0;
    unsigned int v7[2] = 0;
    unint64_t v8 = v7 + 3;
    *((void *)this + 29) = v7 + 3;
  }
  *((void *)this + 29) = v8;
  uint64_t v16 = *((void *)this + 28);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v16) >> 3) - 1;
  if (*((unsigned char *)this + 256))
  {
    uint64_t v17 = (uint64_t *)(v16 + 24 * v5);
    unint64_t v18 = v17 + 1;
    uint64_t v19 = (void *)v17[1];
    unint64_t v20 = v17[2];
    if ((unint64_t)v19 >= v20)
    {
      uint64_t v22 = ((uint64_t)v19 - *v17) >> 3;
      if ((unint64_t)(v22 + 1) >> 61) {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v20 - *v17;
      uint64_t v24 = v23 >> 2;
      if (v23 >> 2 <= (unint64_t)(v22 + 1)) {
        uint64_t v24 = v22 + 1;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      __n128 v34 = (char *)(v17 + 2);
      if (v25) {
        unint64_t v26 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v17 + 2), v25);
      }
      else {
        unint64_t v26 = 0;
      }
      long long v27 = &v26[2 * v22];
      unint64_t v30 = v26;
      long long v31 = v27;
      uint64_t v33 = &v26[2 * v25];
      *(void *)long long v27 = 0;
      long long v32 = v27 + 2;
      std::vector<std::unique_ptr<AS::Operator>>::__swap_out_circular_buffer(v17, &v30);
      uint64_t v21 = (void *)*v18;
      std::__split_buffer<std::unique_ptr<AS::Operator>>::~__split_buffer((void **)&v30);
    }
    else
    {
      *uint64_t v19 = 0;
      uint64_t v21 = v19 + 1;
      void *v18 = v21;
    }
    void *v18 = v21;
  }
  unint64_t v30 = &v29;
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v3, &v29, (uint64_t)&std::piecewise_construct, &v30)[3] = v5;
  return v5;
}

void sub_1B90723C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__split_buffer<std::unique_ptr<AS::Operator>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<AS::LoadOperator,std::vector<AS::LoadDescription> &,unsigned long long const&>()
{
}

void sub_1B90724B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x1BA9D1CD0](v11, 0x10A3C402B483A02);
  _Unwind_Resume(a1);
}

void *SymbolicationSession::add_operator(SymbolicationSession *this, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = (uint64_t *)(*((void *)this + 28) + 24 * a2);
  unint64_t v7 = v6 + 1;
  unint64_t v8 = (void *)v6[1];
  unint64_t v9 = v6[2];
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v12 = ((uint64_t)v8 - *v6) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v9 - *v6;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    v20[4] = v6 + 2;
    if (v15) {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v6 + 2), v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v16[8 * v12];
    v20[0] = v16;
    v20[1] = v17;
    uint64_t v20[3] = &v16[8 * v15];
    uint64_t v18 = *a3;
    *a3 = 0;
    *(void *)uint64_t v17 = v18;
    void v20[2] = v17 + 8;
    std::vector<std::unique_ptr<AS::Operator>>::__swap_out_circular_buffer(v6, v20);
    uint64_t v11 = (void *)*v7;
    std::__split_buffer<std::unique_ptr<AS::Operator>>::~__split_buffer(v20);
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    *unint64_t v8 = v10;
    uint64_t v11 = v8 + 1;
    *unint64_t v7 = v11;
  }
  *unint64_t v7 = v11;
  return SymbolicationSession::advance_managed_symbolicators(this, a2);
}

void sub_1B9072600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<AS::Operator>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SymbolicationSession::process_ats_dsc_and_pid_chunks(SymbolicationSession *this, const __CFData *a2, const __CFData *a3)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  unsigned int v7[2] = ___ZN20SymbolicationSession30process_ats_dsc_and_pid_chunksEPK8__CFDataS2__block_invoke;
  void v7[3] = &__block_descriptor_tmp_16_2;
  void v7[4] = this;
  _CSSymbolicatorForeachRawFlatbufferSymbolicatorInSignature<__CFData const*>(a2, 0, (uint64_t)v7);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  _DWORD v6[2] = ___ZN20SymbolicationSession30process_ats_dsc_and_pid_chunksEPK8__CFDataS2__block_invoke_2;
  void v6[3] = &__block_descriptor_tmp_17_1;
  void v6[4] = this;
  return _CSSymbolicatorForeachRawFlatbufferSymbolicatorInSignature<__CFData const*>(a3, 0, (uint64_t)v6);
}

void ___ZN20SymbolicationSession30process_ats_dsc_and_pid_chunksEPK8__CFDataS2__block_invoke(uint64_t a1, FlatbufferSymbols::Symbolicator *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v2 >= 9u && (uint64_t v3 = v2[4]) != 0) {
    unint64_t v4 = (unsigned int *)((char *)this + v3 + *(unsigned int *)((char *)this + v3));
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = *(uint64_t **)(a1 + 32);
  unint64_t v6 = (int *)FlatbufferSymbols::Symbolicator::metadata_as_DyldSharedCacheMetadata(this);
  unint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 < 5u)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = v7[2];
    if (v8) {
      v8 += (uint64_t)v6 + *(unsigned int *)((char *)v6 + v8);
    }
  }
  CSUUIDStringToCFUUIDBytes(v8 + 4, &v23);
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  unsigned int v11 = *v4;
  uint64_t v10 = v4 + 1;
  uint64_t v9 = v11;
  if (v11)
  {
    uint64_t v12 = 4 * v9;
    do
    {
      uint64_t v13 = (FlatbufferSymbols::SymbolOwner *)((char *)v10 + *v10);
      v21[0] = 0;
      v21[16] = 0;
      SymbolicationSession::transform_fbs_owner(v13, (uint64_t)v5, 1, (uint64_t)v21, 0, (uint64_t)v22);
      std::__optional_copy_base<LibraryDescription,false>::__optional_copy_base[abi:ne180100](v19, (uint64_t)v22);
      if (!v20) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      unint64_t v14 = v17;
      if (v17 >= v18)
      {
        uint64_t v15 = std::vector<LibraryDescription>::__push_back_slow_path<LibraryDescription const&>(&v16, v19);
      }
      else
      {
        std::construct_at[abi:ne180100]<LibraryDescription,LibraryDescription const&,LibraryDescription*>(v17, v19);
        uint64_t v15 = v14 + 96;
      }
      unint64_t v17 = v15;
      std::__optional_destruct_base<LibraryDescription,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v19);
      std::__optional_destruct_base<LibraryDescription,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v22);
      ++v10;
      v12 -= 4;
    }
    while (v12);
  }
  SymbolicationSession::register_dsc(v5, &v23, &v16);
  v22[0] = (void **)&v16;
  std::vector<LibraryDescription>::__destroy_vector::operator()[abi:ne180100](v22);
}

void sub_1B907288C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  a29 = (void **)&a10;
  std::vector<LibraryDescription>::__destroy_vector::operator()[abi:ne180100](&a29);
  _Unwind_Resume(a1);
}

void SymbolicationSession::transform_fbs_owner(FlatbufferSymbols::SymbolOwner *this@<X1>, uint64_t a2@<X0>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (const char *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata(this);
  uint64_t v13 = v12;
  unint64_t v14 = &v12[-*(int *)v12];
  if (*(unsigned __int16 *)v14 < 5u)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = *((unsigned __int16 *)v14 + 2);
    if (v15) {
      v15 += (uint64_t)&v12[*(unsigned int *)&v12[v15]];
    }
  }
  CSUUIDStringToCFUUIDBytes(v15 + 4, &v108);
  if ((a3 & 1) == 0)
  {
    uint64_t v16 = std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::find<UUID>((void *)(a2 + 80), &v108);
    if (v16)
    {
      uint64_t v17 = v16[4];
      *(unsigned char *)a6 = 0;
      *(unsigned char *)(a6 + 96) = 0;
      *(void *)(a6 + 104) = v17;
      *(void *)(a6 + 112) = 1;
      return;
    }
  }
  int v83 = a5;
  uint64_t v81 = a4;
  uint64_t v82 = this;
  char v80 = a3;
  uint64_t v84 = a2;
  uint64_t v79 = a6;
  unint64_t v18 = (unsigned int *)((char *)this + *(unsigned __int16 *)((char *)this - *(int *)this + 8));
  uint64_t v19 = *v18;
  __int16 v87 = 0;
  uint64_t v88 = 0;
  unint64_t v89 = 0;
  uint64_t v21 = (unsigned int *)((char *)v18 + v19 + 4);
  uint64_t v20 = *(unsigned int *)((char *)v18 + v19);
  if (v20)
  {
    uint64_t v22 = 0;
    long long v23 = &v21[v20];
    do
    {
      uint64_t v24 = (char *)v21 + *v21;
      unint64_t v25 = (unsigned __int16 *)&v24[-*(int *)v24];
      unsigned int v26 = *v25;
      if (v26 >= 5)
      {
        uint64_t v27 = v25[2];
        if (v25[2])
        {
          long long v28 = &v24[v27];
          if (!strstr(&v24[v27 + 4 + *(unsigned int *)&v24[v27]], "__LINKINFO"))
          {
            if (v26 < 7)
            {
              uint64_t v30 = 0;
              uint64_t v29 = -1;
            }
            else
            {
              if (v25[3]) {
                uint64_t v29 = *(void *)&v24[v25[3]];
              }
              else {
                uint64_t v29 = -1;
              }
              if (v26 >= 9 && v25[4]) {
                uint64_t v30 = *(void *)&v24[v25[4]];
              }
              else {
                uint64_t v30 = 0;
              }
            }
            long long v31 = (CSCppNamedRange *)&v28[*(unsigned int *)v28 + 4];
            if ((unint64_t)v22 >= v89)
            {
              uint64_t v32 = (v22 - (CSCppSegmentRange *)v87) >> 5;
              if ((unint64_t)(v32 + 1) >> 59) {
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v33 = (uint64_t)(v89 - (void)v87) >> 4;
              if (v33 <= v32 + 1) {
                unint64_t v33 = v32 + 1;
              }
              if (v89 - (unint64_t)v87 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v33;
              }
              if (v34)
              {
                uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)&v89, v34);
                uint64_t v37 = v36;
              }
              else
              {
                uint64_t v35 = 0;
                uint64_t v37 = 0;
              }
              CSCppSegmentRange::CSCppSegmentRange((CSCppSegmentRange *)&v35[32 * v32], v29, v30, v31, 0);
              uint64_t v40 = (CSCppSegmentRange *)v87;
              char v39 = v88;
              unint64_t v41 = v38;
              if (v88 != v87)
              {
                do
                {
                  long long v42 = *((_OWORD *)v39 - 1);
                  *((_OWORD *)v41 - 2) = *((_OWORD *)v39 - 2);
                  *((_OWORD *)v41 - 1) = v42;
                  v41 -= 32;
                  char v39 = (CSCppSegmentRange *)((char *)v39 - 32);
                }
                while (v39 != v40);
                char v39 = v40;
              }
              uint64_t v43 = &v35[32 * v37];
              uint64_t v22 = (CSCppSegmentRange *)(v38 + 32);
              __int16 v87 = v41;
              uint64_t v88 = (CSCppSegmentRange *)(v38 + 32);
              unint64_t v89 = (unint64_t)v43;
              if (v39) {
                operator delete(v39);
              }
            }
            else
            {
              CSCppSegmentRange::CSCppSegmentRange(v22, v29, v30, (CSCppNamedRange *)&v28[*(unsigned int *)v28 + 4], 0);
              uint64_t v22 = (CSCppSegmentRange *)((char *)v22 + 32);
            }
            uint64_t v88 = v22;
          }
        }
      }
      ++v21;
    }
    while (v21 != v23);
  }
  unint64_t v44 = (unsigned __int16 *)&v13[-*(int *)v13];
  unsigned int v45 = *v44;
  unint64_t v46 = "<unknown>";
  if (v45 >= 7)
  {
    uint64_t v47 = v44[3];
    if (v44[3]) {
      v47 += (uint64_t)&v13[*(unsigned int *)&v13[v47]];
    }
    if (v45 < 0x13)
    {
      if (v45 < 0x11)
      {
        if (!v47)
        {
          uint64_t v49 = 0;
LABEL_56:
          if (v49) {
            unint64_t v46 = (char *)(v49 + 4);
          }
          goto LABEL_58;
        }
LABEL_54:
        unint64_t v46 = (char *)(v47 + 4);
        goto LABEL_58;
      }
      uint64_t v48 = 0;
    }
    else
    {
      uint64_t v48 = v44[9];
      if (v44[9]) {
        v48 += (uint64_t)&v13[*(unsigned int *)&v13[v48]];
      }
    }
    uint64_t v49 = v44[8];
    if (v49) {
      v49 += (uint64_t)&v13[*(unsigned int *)&v13[v49]];
    }
    if (!v47)
    {
      if (v48)
      {
        unint64_t v46 = (char *)(v48 + 4);
        goto LABEL_58;
      }
      goto LABEL_56;
    }
    goto LABEL_54;
  }
LABEL_58:
  unint64_t v50 = CSCppStringCache::intern((CSCppStringCache *)(v84 + 16), v46);
  uint64_t v51 = *(int *)v13;
  if (*(unsigned __int16 *)&v13[-v51] >= 0x17u
    && (uint64_t v52 = *(unsigned __int16 *)&v13[-v51 + 22], *(_WORD *)&v13[-v51 + 22]))
  {
    unint64_t v53 = &v13[v52];
    uint64_t v54 = *(unsigned int *)&v13[v52];
    v85.__r_.__value_.__s.__data_[0] = 0;
    char v86 = 0;
    *(void *)&long long v90 = &v53[v54 + 4];
    std::optional<std::string>::operator=[abi:ne180100]<char const*,void>(&v85, (std::string::value_type **)&v90);
    uint64_t v55 = -(uint64_t)*(int *)v13;
  }
  else
  {
    uint64_t v55 = -v51;
    v85.__r_.__value_.__s.__data_[0] = 0;
    char v86 = 0;
  }
  unsigned int v56 = &v13[v55];
  unsigned int v57 = *(unsigned __int16 *)v56;
  if (v57 < 0xD)
  {
LABEL_73:
    unsigned int v66 = 0;
    unint64_t v67 = 0;
    goto LABEL_77;
  }
  if (!*((_WORD *)v56 + 6))
  {
    if (v57 >= 0xF)
    {
      uint64_t v64 = *((unsigned __int16 *)v56 + 7);
      if (v64)
      {
        unint64_t ArchitectureForName = CSArchitectureGetArchitectureForName(&v13[v64 + 4 + *(unsigned int *)&v13[v64]]);
        unsigned int v66 = ArchitectureForName;
        unint64_t v67 = ArchitectureForName & 0xFFFFFFFF00000000;
        goto LABEL_77;
      }
    }
    goto LABEL_73;
  }
  uint64_t v58 = &v13[*((unsigned __int16 *)v56 + 6) + *(unsigned int *)&v13[*((unsigned __int16 *)v56 + 6)]];
  uint64_t v59 = &v58[-*(int *)v58];
  unsigned int v60 = *(unsigned __int16 *)v59;
  if (v60 < 7)
  {
    LODWORD(v61) = 0;
LABEL_75:
    uint64_t v63 = 0;
    goto LABEL_76;
  }
  uint64_t v61 = *((unsigned __int16 *)v59 + 3);
  if (*((_WORD *)v59 + 3)) {
    LODWORD(v61) = *(_DWORD *)&v58[v61];
  }
  if (v60 < 9) {
    goto LABEL_75;
  }
  uint64_t v62 = *((unsigned __int16 *)v59 + 4);
  if (!v62) {
    goto LABEL_75;
  }
  uint64_t v63 = *(unsigned int *)&v58[v62];
LABEL_76:
  unint64_t v67 = v63 << 32;
  unsigned int v66 = v61;
LABEL_77:
  int v68 = v83 | 1;
  uint64_t v69 = (unsigned __int16 *)((char *)v82 - *(int *)v82);
  if (*v69 >= 0xFu)
  {
    uint64_t v70 = v69[7];
    if (v70)
    {
      if (*((unsigned char *)v82 + v70)) {
        int v68 = v83 | 0x201;
      }
    }
  }
  if (*(unsigned char *)(v81 + 16) && *(_OWORD *)v81 == v108) {
    v68 |= 0x10u;
  }
  long long v99 = v108;
  unint64_t v100 = v50;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v101, (long long *)&v85);
  unint64_t v103 = v67 | v66;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(&v104, v87, (uint64_t)v88, (v88 - (CSCppSegmentRange *)v87) >> 5);
  int v107 = v68;
  if (v80)
  {
    std::pair<LibraryDescription,std::nullopt_t>::pair[abi:ne180100]<LibraryDescription&,std::nullopt_t const&,0>((uint64_t)&v90, &v99);
    *(_OWORD *)uint64_t v79 = v90;
    *(void *)(v79 + 16) = v91;
    *(unsigned char *)(v79 + 24) = 0;
    *(unsigned char *)(v79 + 48) = 0;
    int v71 = v94;
    if (v94)
    {
      *(_OWORD *)(v79 + 24) = *(_OWORD *)__p;
      *(void *)(v79 + 40) = v93;
      __p[1] = 0;
      uint64_t v93 = 0;
      __p[0] = 0;
      *(unsigned char *)(v79 + 48) = 1;
    }
    *(void *)(v79 + 56) = v95;
    *(_OWORD *)(v79 + 64) = v96;
    *(void *)(v79 + 80) = v97;
    long long v96 = 0uLL;
    uint64_t v97 = 0;
    *(_DWORD *)(v79 + 88) = v98;
    *(unsigned char *)(v79 + 96) = 1;
    *(unsigned char *)(v79 + 104) = 0;
    *(unsigned char *)(v79 + 112) = 0;
    if (v71 && SHIBYTE(v93) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v72 = (unsigned __int16 *)((char *)v82 - *(int *)v82);
    if (*v72 >= 0xBu && (uint64_t v73 = v72[5]) != 0) {
      uint64_t v74 = *(void *)((char *)v82 + v73);
    }
    else {
      uint64_t v74 = -1;
    }
    uint64_t v75 = v104;
    for (uint64_t i = v105; v75 != i; v75 += 4)
    {
      if (!strcmp(v75[2], "__PAGEZERO")) {
        uint64_t v77 = 0;
      }
      else {
        uint64_t v77 = (uint64_t)&(*v75)[-v74];
      }
      *uint64_t v75 = (const char *)v77;
    }
    unint64_t v78 = SymbolicationSession::register_library((SymbolicationSession *)v84, (LibraryDescription *)&v99);
    *(unsigned char *)uint64_t v79 = 0;
    *(unsigned char *)(v79 + 96) = 0;
    *(void *)(v79 + 104) = v78;
    *(unsigned char *)(v79 + 112) = 1;
  }
  if (v104)
  {
    uint64_t v105 = v104;
    operator delete(v104);
  }
  if (v102 && SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (v86 && SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (v87)
  {
    uint64_t v88 = (CSCppSegmentRange *)v87;
    operator delete(v87);
  }
}

void sub_1B9072FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,void *a24,uint64_t a25)
{
  if (a23 && a22 < 0) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SymbolicationSession::register_dsc(uint64_t *a1, _OWORD *a2, uint64_t *a3)
{
  unint64_t v4 = a1 + 15;
  unint64_t v5 = a1[16];
  if (v5 >= a1[17])
  {
    uint64_t result = std::vector<std::pair<UUID,std::vector<LibraryDescription>>>::__emplace_back_slow_path<UUID const&,std::vector<LibraryDescription> const&>(v4, a2, a3);
  }
  else
  {
    std::vector<std::pair<UUID,std::vector<LibraryDescription>>>::__construct_one_at_end[abi:ne180100]<UUID const&,std::vector<LibraryDescription> const&>((uint64_t)v4, a2, a3);
    uint64_t result = v5 + 40;
  }
  a1[16] = result;
  return result;
}

FlatbufferSymbols::SymbolOwner *___ZN20SymbolicationSession30process_ats_dsc_and_pid_chunksEPK8__CFDataS2__block_invoke_2(uint64_t a1, FlatbufferSymbols::Symbolicator *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(SymbolicationSession **)(a1 + 32);
  uint64_t result = (FlatbufferSymbols::SymbolOwner *)_findPrimarySharedCacheInFlatbufferSymbolicator(a2);
  if (result)
  {
    unint64_t v5 = (unsigned __int16 *)((char *)result - *(int *)result);
    if (*v5 >= 9u && (uint64_t v6 = v5[4]) != 0) {
      uint64_t v7 = *(void *)((char *)result + v6);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v48 = v7;
    uint64_t v8 = (int *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata(result);
    uint64_t v9 = v8;
    uint64_t v10 = (unsigned __int16 *)((char *)v8 - *v8);
    if (*v10 < 5u)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = v10[2];
      if (v11) {
        v11 += (uint64_t)v8 + *(unsigned int *)((char *)v8 + v11);
      }
    }
    CSUUIDStringToCFUUIDBytes(v11 + 4, v55);
    uint64_t dsc = SymbolicationSession::find_dsc(v3, (const UUID *)v55);
    if (v13)
    {
      v47[1] = dsc;
      unint64_t v14 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v14 >= 0x15u && (uint64_t v15 = v14[10]) != 0) {
        uint64_t v16 = *(void *)((char *)v9 + v15);
      }
      else {
        uint64_t v16 = -1;
      }
      uint64_t v17 = (int *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata(a2);
      unint64_t v18 = v17;
      uint64_t v19 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v19 >= 7u && (uint64_t v20 = v19[3]) != 0) {
        uint64_t v21 = *(void *)((char *)v17 + v20);
      }
      else {
        LODWORD(v21) = -1;
      }
      SymbolicationSession::lookup_or_register_process(v3, v21);
      uint64_t v22 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v22 >= 0xBu)
      {
        uint64_t v23 = v22[5];
        if (v23) {
          CSUUIDStringToCFUUIDBytes((char *)v18 + v23 + *(unsigned int *)((char *)v18 + v23) + 4, &v54);
        }
      }
      uint64_t v44 = v16;
      uint64_t v24 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *(int *)a2 + 8));
      uint64_t v25 = *v24;
      __n128 __p = 0;
      unint64_t v46 = 0;
      v47[0] = 0;
      uint64_t v27 = (unsigned int *)((char *)v24 + v25 + 4);
      uint64_t v26 = *(unsigned int *)((char *)v24 + v25);
      if (v26)
      {
        long long v28 = &v27[v26];
        do
        {
          uint64_t v29 = (FlatbufferSymbols::SymbolOwner *)((char *)v27 + *v27);
          long long v49 = v54;
          char v50 = 1;
          SymbolicationSession::transform_fbs_owner(v29, (uint64_t)v3, 0, (uint64_t)&v49, 0, (uint64_t)v51);
          uint64_t v30 = (unsigned __int16 *)((char *)v29 - *(int *)v29);
          if (*v30 >= 0xBu && (uint64_t v31 = v30[5]) != 0) {
            uint64_t v32 = *(void *)((char *)v29 + v31);
          }
          else {
            uint64_t v32 = -1;
          }
          if (!v53) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          uint64_t v33 = v52;
          unint64_t v34 = v46;
          if ((unint64_t)v46 >= v47[0])
          {
            uint64_t v36 = __p;
            uint64_t v37 = (v46 - __p) >> 4;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 60) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v39 = v47[0] - (void)__p;
            if ((uint64_t)(v47[0] - (void)__p) >> 3 > v38) {
              unint64_t v38 = v39 >> 3;
            }
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v38;
            }
            if (v40)
            {
              unint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)v47, v40);
              uint64_t v36 = __p;
              unint64_t v34 = v46;
            }
            else
            {
              unint64_t v41 = 0;
            }
            long long v42 = &v41[16 * v37];
            *(void *)long long v42 = v33;
            *((void *)v42 + 1) = v32;
            uint64_t v43 = v42;
            if (v34 != v36)
            {
              do
              {
                *((_OWORD *)v43 - 1) = *((_OWORD *)v34 - 1);
                v43 -= 16;
                v34 -= 16;
              }
              while (v34 != v36);
              uint64_t v36 = __p;
            }
            uint64_t v35 = v42 + 16;
            __n128 __p = v43;
            v47[0] = &v41[16 * v40];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            *(void *)unint64_t v46 = v52;
            *((void *)v46 + 1) = v32;
            uint64_t v35 = v46 + 16;
          }
          unint64_t v46 = v35;
          std::__optional_destruct_base<LibraryDescription,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v51);
          ++v27;
        }
        while (v27 != v28);
      }
      v51[0] = v48 + v44;
      std::make_unique[abi:ne180100]<AS::FullCreationOperator,unsigned long &,unsigned long long &,unsigned long long,std::vector<AS::LoadDescription> &>();
    }
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  return result;
}

void sub_1B9073474(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_Unwind_Exception *exception_object)
{
  if (a12) {
    ___ZN20SymbolicationSession30process_ats_dsc_and_pid_chunksEPK8__CFDataS2__block_invoke_2_cold_2();
  }
  ___ZN20SymbolicationSession30process_ats_dsc_and_pid_chunksEPK8__CFDataS2__block_invoke_2_cold_1(&a13);
  uint64_t v22 = exception_object;
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(v22);
}

uint64_t SymbolicationSession::find_dsc(SymbolicationSession *this, const UUID *a2)
{
  uint64_t v2 = (void *)*((void *)this + 15);
  uint64_t v3 = *((void *)this + 16) - (void)v2;
  if (!v3) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v5 = v3 / 40;
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v5;
  }
  while (*v2 != *(void *)a2 || v2[1] != *(void *)&(*a2)[8])
  {
    ++result;
    v2 += 5;
    if (v6 == result) {
      return 0;
    }
  }
  return result;
}

void std::make_unique[abi:ne180100]<AS::FullCreationOperator,unsigned long &,unsigned long long &,unsigned long long,std::vector<AS::LoadDescription> &>()
{
}

void sub_1B9073624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x1BA9D1CD0](v11, 0x10A1C40B008428CLL);
  _Unwind_Resume(a1);
}

uint64_t SymbolicationSession::process_ats_kernel_chunk(SymbolicationSession *this, const __CFData *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN20SymbolicationSession24process_ats_kernel_chunkEPK8__CFData_block_invoke;
  v3[3] = &__block_descriptor_tmp_18_1;
  void v3[4] = this;
  return _CSSymbolicatorForeachRawFlatbufferSymbolicatorInSignature<__CFData const*>(a2, 0, (uint64_t)v3);
}

void ___ZN20SymbolicationSession24process_ats_kernel_chunkEPK8__CFData_block_invoke(uint64_t a1, FlatbufferSymbols::SymbolOwner *this)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(SymbolicationSession **)(a1 + 32);
  unint64_t v4 = (int *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata(this);
  unint64_t v5 = v4;
  uint64_t v6 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0) {
    uint64_t v8 = *(void *)((char *)v4 + v7);
  }
  else {
    LODWORD(v8) = -1;
  }
  SymbolicationSession::lookup_or_register_process(v3, v8);
  uint64_t v9 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v9 >= 0xBu)
  {
    uint64_t v10 = v9[5];
    if (v10) {
      CSUUIDStringToCFUUIDBytes((char *)v5 + v10 + *(unsigned int *)((char *)v5 + v10) + 4, &v39);
    }
  }
  uint64_t v11 = (unsigned int *)((char *)this + *(unsigned __int16 *)((char *)this - *(int *)this + 8));
  uint64_t v12 = *v11;
  __n128 __p = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  unint64_t v14 = (unsigned int *)((char *)v11 + v12 + 4);
  uint64_t v13 = *(unsigned int *)((char *)v11 + v12);
  if (v13)
  {
    uint64_t v15 = &v14[v13];
    do
    {
      uint64_t v16 = (FlatbufferSymbols::SymbolOwner *)((char *)v14 + *v14);
      long long v34 = v39;
      char v35 = 1;
      SymbolicationSession::transform_fbs_owner(v16, (uint64_t)v3, 0, (uint64_t)&v34, 4096, (uint64_t)v36);
      uint64_t v17 = (unsigned __int16 *)((char *)v16 - *(int *)v16);
      if (*v17 >= 0xBu && (uint64_t v18 = v17[5]) != 0) {
        uint64_t v19 = *(void *)((char *)v16 + v18);
      }
      else {
        uint64_t v19 = -1;
      }
      if (!v38) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      uint64_t v20 = v37;
      uint64_t v21 = v32;
      if (v32 >= v33)
      {
        uint64_t v23 = __p;
        uint64_t v24 = (v32 - __p) >> 4;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = v33 - __p;
        if ((v33 - __p) >> 3 > v25) {
          unint64_t v25 = v26 >> 3;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          long long v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v33, v27);
          uint64_t v23 = __p;
          uint64_t v21 = v32;
        }
        else
        {
          long long v28 = 0;
        }
        uint64_t v29 = &v28[16 * v24];
        *(void *)uint64_t v29 = v20;
        *((void *)v29 + 1) = v19;
        uint64_t v30 = v29;
        if (v21 != v23)
        {
          do
          {
            *((_OWORD *)v30 - 1) = *((_OWORD *)v21 - 1);
            v30 -= 16;
            v21 -= 16;
          }
          while (v21 != v23);
          uint64_t v23 = __p;
        }
        uint64_t v22 = v29 + 16;
        __n128 __p = v30;
        uint64_t v33 = &v28[16 * v27];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(void *)uint64_t v32 = v37;
        *((void *)v32 + 1) = v19;
        uint64_t v22 = v32 + 16;
      }
      uint64_t v32 = v22;
      std::__optional_destruct_base<LibraryDescription,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v36);
      ++v14;
    }
    while (v14 != v15);
  }
  std::make_unique[abi:ne180100]<AS::LoadOperator,std::vector<AS::LoadDescription> &,unsigned long long const&>();
}

void sub_1B90739DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _Unwind_Exception *exception_object)
{
  if (a10) {
    ___ZN20SymbolicationSession30process_ats_dsc_and_pid_chunksEPK8__CFDataS2__block_invoke_2_cold_2();
  }
  ___ZN20SymbolicationSession30process_ats_dsc_and_pid_chunksEPK8__CFDataS2__block_invoke_2_cold_1(&a11);
  uint64_t v18 = exception_object;
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(v18);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<char const*,void>(std::string *a1, std::string::value_type **a2)
{
  uint64_t v3 = *a2;
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::__assign_external(a1, v3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, v3);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

void *SymbolicationSession::advance_managed_symbolicators(SymbolicationSession *this, unint64_t a2)
{
  unint64_t v10 = a2;
  uint64_t v4 = *((void *)this + 28);
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>((void *)this + 23, &v10);
  if (result)
  {
    uint64_t v6 = (uint64_t *)result[3];
    uint64_t v7 = (uint64_t *)result[4];
    if (v6 != v7)
    {
      uint64_t v8 = (void *)(v4 + 24 * a2 + 8);
      do
      {
        uint64_t v9 = *v6++;
        uint64_t result = (void *)(***(uint64_t (****)(void, uint64_t, SymbolicationSession *))(*v8 - 8))(*(void *)(*v8 - 8), v9, this);
      }
      while (v6 != v7);
    }
  }
  return result;
}

uint64_t SymbolicationSession::create_pid_symbolicator(SymbolicationSession *this, int a2)
{
  int v5 = a2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::find<int>((void *)this + 18, &v5);
  if (v2)
  {
    uint64_t v4 = v2[3];
    operator new();
  }
  return 0;
}

void sub_1B9073DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void SymbolicationSession::create_symbolicator(SymbolicationSession *this, void *a2, uint64_t a3, int a4)
{
  int v6 = *((_DWORD *)this + 64);
  if (v6) {
    SymbolicationSession::fixup_address_space(this, a3);
  }
  uint64_t v7 = (const void ***)(*((void *)this + 28) + 24 * a3);
  long long v20 = 0uLL;
  uint64_t v21 = 0;
  if (v6 & 2) == 0 || (a4)
  {
    if ((v6 & 2) != 0 && a4)
    {
      if (!v11) {
        __cxa_bad_cast();
      }
    }
    else
    {
      if (!v11) {
        __cxa_bad_cast();
      }
    }
    AS::LoadOperator::generate_owners(v11, this, (uint64_t *)&v14);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate((uint64_t *)&v20);
    long long v20 = v14;
    uint64_t v21 = v15;
    *(void *)&long long v15 = 0;
    long long v14 = 0uLL;
    *(void *)&long long v12 = &v14;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  }
  else
  {
    if (!v8) {
      __cxa_bad_cast();
    }
    uint64_t v9 = *((void *)v8 + 1);
    *(void *)&long long v14 = &unk_1F12CA1A0;
    *((void *)&v14 + 1) = v9;
    uint64_t v10 = *((void *)v8 + 4);
    long long v15 = *((_OWORD *)v8 + 1);
    uint64_t v16 = v10;
    __n128 __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    std::vector<AS::LoadDescription>::__init_with_size[abi:ne180100]<AS::LoadDescription*,AS::LoadDescription*>(&__p, *((const void **)v8 + 5), *((void *)v8 + 6), (uint64_t)(*((void *)v8 + 6) - *((void *)v8 + 5)) >> 4);
    (*(void (**)(void, uint64_t))(*(void *)*a2 + 80))(*a2, *((void *)this + 15) + 40 * v15);
    (*(void (**)(void, uint64_t))(*(void *)*a2 + 88))(*a2, v16);
    AS::FullCreationOperator::generate_owners((AS::FullCreationOperator *)&v14, this, (uint64_t *)&v12);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate((uint64_t *)&v20);
    long long v20 = v12;
    uint64_t v21 = v13;
    uint64_t v13 = 0;
    long long v12 = 0uLL;
    uint64_t v22 = (void **)&v12;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v22);
    *(void *)&long long v14 = &unk_1F12CA1A0;
    if (__p)
    {
      uint64_t v18 = __p;
      operator delete(__p);
    }
  }
  operator new();
}

void sub_1B9074200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  a13 = (char *)v21;
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  a13 = &a21;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void SymbolicationSession::fixup_address_space(SymbolicationSession *this, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(*((void *)this + 28) + 24 * a2);
  memset(v36, 0, sizeof(v36));
  int v37 = 1065353216;
  __n128 __p = 0;
  long long v34 = 0;
  char v35 = 0;
  uint64_t v3 = *v2;
  unint64_t v4 = ((v2[1] - *v2) >> 3) - 1;
  if (v4 >= 2)
  {
    unint64_t v5 = 1;
    do
    {
      int v6 = *(const void **)(v3 + 8 * v5);
      if (v6)
      {
        if (v7)
        {
          if (*((unsigned char *)v7 + 40))
          {
            uint64_t v8 = (void *)v7[2];
            uint64_t v9 = (void *)v7[3];
            while (v8 != v9)
            {
              std::__hash_table<AS::LoadDescription,std::hash<AS::LoadDescription>,std::equal_to<AS::LoadDescription>,std::allocator<AS::LoadDescription>>::__emplace_unique_key_args<AS::LoadDescription,AS::LoadDescription const&>((uint64_t)v36, v8, v8);
              v8 += 2;
            }
          }
          else
          {
            std::__hash_table<AS::LoadDescription,std::hash<AS::LoadDescription>,std::equal_to<AS::LoadDescription>,std::allocator<AS::LoadDescription>>::__emplace_unique_key_args<AS::LoadDescription,AS::LoadDescription const&>((uint64_t)v36, v7 + 2, (_OWORD *)v7 + 1);
          }
        }
        else
        {
          if (v10)
          {
            uint64_t v11 = v10 + 16;
            if (!std::__hash_table<AS::LoadDescription,std::hash<AS::LoadDescription>,std::equal_to<AS::LoadDescription>,std::allocator<AS::LoadDescription>>::find<AS::LoadDescription>(v36, (void *)v10 + 2))
            {
              if (v34 >= v35)
              {
                uint64_t v13 = (v34 - __p) >> 4;
                unint64_t v14 = v13 + 1;
                if ((unint64_t)(v13 + 1) >> 60) {
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v15 = v35 - __p;
                if ((v35 - __p) >> 3 > v14) {
                  unint64_t v14 = v15 >> 3;
                }
                if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v16 = v14;
                }
                if (v16) {
                  uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v35, v16);
                }
                else {
                  uint64_t v17 = 0;
                }
                uint64_t v18 = &v17[16 * v13];
                *(_OWORD *)uint64_t v18 = *v11;
                uint64_t v19 = v34;
                long long v20 = v18;
                if (v34 != __p)
                {
                  do
                  {
                    *((_OWORD *)v20 - 1) = *((_OWORD *)v19 - 1);
                    v20 -= 16;
                    v19 -= 16;
                  }
                  while (v19 != __p);
                  uint64_t v19 = __p;
                }
                long long v12 = v18 + 16;
                __n128 __p = v20;
                char v35 = &v17[16 * v16];
                if (v19) {
                  operator delete(v19);
                }
              }
              else
              {
                *(_OWORD *)long long v34 = *v11;
                long long v12 = v34 + 16;
              }
              long long v34 = v12;
            }
          }
        }
      }
      unint64_t v5 = (v5 + 1);
      uint64_t v3 = *v2;
      unint64_t v4 = ((v2[1] - *v2) >> 3) - 1;
    }
    while (v4 > v5);
  }
  uint64_t v22 = (void *)v21[2];
  for (uint64_t i = (void *)v21[3]; v22 != i; v22 += 2)
  {
    if (!std::__hash_table<AS::LoadDescription,std::hash<AS::LoadDescription>,std::equal_to<AS::LoadDescription>,std::allocator<AS::LoadDescription>>::find<AS::LoadDescription>(v36, v22))
    {
      if (v34 >= v35)
      {
        uint64_t v25 = (v34 - __p) >> 4;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 60) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = v35 - __p;
        if ((v35 - __p) >> 3 > v26) {
          unint64_t v26 = v27 >> 3;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v35, v28);
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v30 = &v29[16 * v25];
        *(_OWORD *)uint64_t v30 = *(_OWORD *)v22;
        uint64_t v31 = v34;
        uint64_t v32 = v30;
        if (v34 != __p)
        {
          do
          {
            *((_OWORD *)v32 - 1) = *((_OWORD *)v31 - 1);
            v32 -= 16;
            v31 -= 16;
          }
          while (v31 != __p);
          uint64_t v31 = __p;
        }
        uint64_t v24 = v30 + 16;
        __n128 __p = v32;
        char v35 = &v29[16 * v28];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *(_OWORD *)long long v34 = *(_OWORD *)v22;
        uint64_t v24 = v34 + 16;
      }
      long long v34 = v24;
    }
  }
  std::make_unique[abi:ne180100]<AS::LoadOperator,std::vector<AS::LoadDescription> &,unsigned long long const&>();
}

void sub_1B9074718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t SymbolicationSession::foreach_pid(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 160);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = 0;
  do
  {
    (*(void (**)(uint64_t, void))(a2 + 16))(a2, *((unsigned int *)v2 + 4));
    ++v4;
    uint64_t v2 = (uint64_t **)*v2;
  }
  while (v2);
  return v4;
}

void *SymbolicationSession::dsc_slide_for_pid(SymbolicationSession *this, int a2)
{
  int v4 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::find<int>((void *)this + 18, &v4);
  if (result)
  {
    uint64_t result = **(void ***)(*((void *)this + 28) + 24 * result[3]);
    if (result)
    {
      if (result) {
        return (void *)result[3];
      }
    }
  }
  return result;
}

void std::vector<std::vector<std::unique_ptr<AS::Operator>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    int v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        int v6 = v4;
        std::vector<std::unique_ptr<AS::Operator>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<AS::Operator>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<AS::Operator>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<AS::Operator>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    int v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void std::vector<std::pair<UUID,std::vector<LibraryDescription>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 40;
        uint64_t v7 = (void **)(v4 - 24);
        std::vector<LibraryDescription>::__destroy_vector::operator()[abi:ne180100](&v7);
        int v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<LibraryDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::__destroy_at[abi:ne180100]<LibraryDescription,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<LibraryDescription,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 24);
    operator delete(v3);
  }
}

unsigned char *std::__optional_copy_base<LibraryDescription,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[96] = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    std::construct_at[abi:ne180100]<LibraryDescription,LibraryDescription const&,LibraryDescription*>((uint64_t)a1, (long long *)a2);
    a1[96] = 1;
  }
  return a1;
}

void sub_1B9074B34(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<LibraryDescription,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<LibraryDescription,LibraryDescription const&,LibraryDescription*>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 24), (long long *)((char *)a2 + 24));
  uint64_t v5 = *((void *)a2 + 7);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>((void *)(a1 + 64), *((const void **)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 5);
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
  return a1;
}

void sub_1B9074BC4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<LibraryDescription,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v2 = *(void **)(a1 + 64);
    if (v2)
    {
      *(void *)(a1 + 72) = v2;
      operator delete(v2);
    }
    if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
  }
  return a1;
}

uint64_t std::vector<LibraryDescription>::__push_back_slow_path<LibraryDescription const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  unint64_t v14 = &v10[96 * v4];
  unint64_t v16 = &v10[96 * v9];
  std::construct_at[abi:ne180100]<LibraryDescription,LibraryDescription const&,LibraryDescription*>((uint64_t)v14, a2);
  uint64_t v15 = v14 + 96;
  std::vector<LibraryDescription>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<LibraryDescription>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B9074D30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<LibraryDescription>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<LibraryDescription>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  unint64_t v5 = (long long *)*a1;
  unint64_t v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 96;
    v4 -= 6;
    std::construct_at[abi:ne180100]<LibraryDescription,LibraryDescription,LibraryDescription*>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 std::construct_at[abi:ne180100]<LibraryDescription,LibraryDescription,LibraryDescription*>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*((unsigned char *)a2 + 48))
  {
    long long v3 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  __n128 result = (__n128)a2[4];
  *(__n128 *)(a1 + 64) = result;
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
  return result;
}

uint64_t std::__split_buffer<LibraryDescription>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<LibraryDescription,0>(i - 96);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<LibraryDescription,std::nullopt_t>::pair[abi:ne180100]<LibraryDescription&,std::nullopt_t const&,0>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 24), (long long *)((char *)a2 + 24));
  uint64_t v5 = *((void *)a2 + 7);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>((void *)(a1 + 64), *((const void **)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 5);
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
  return a1;
}

void sub_1B9074F18(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<UUID,std::vector<LibraryDescription>>>::__construct_one_at_end[abi:ne180100]<UUID const&,std::vector<LibraryDescription> const&>(uint64_t a1, _OWORD *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)uint64_t v4 = *a2;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = 0;
  __n128 result = std::vector<LibraryDescription>::__init_with_size[abi:ne180100]<LibraryDescription*,LibraryDescription*>((void *)(v4 + 16), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5));
  *(void *)(a1 + 8) = v4 + 40;
  return result;
}

void sub_1B9074F98(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<UUID,std::vector<LibraryDescription>>>::__emplace_back_slow_path<UUID const&,std::vector<LibraryDescription> const&>(uint64_t *a1, _OWORD *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x333333333333333) {
    unint64_t v11 = 0x666666666666666;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(v9, v11);
  }
  else {
    long long v12 = 0;
  }
  uint64_t v13 = &v12[40 * v5];
  v16[0] = v12;
  v16[1] = v13;
  uint64_t v17 = v13;
  uint64_t v18 = &v12[40 * v11];
  *(_OWORD *)uint64_t v13 = *a2;
  *((void *)v13 + 3) = 0;
  *((void *)v13 + 4) = 0;
  *((void *)v13 + 2) = 0;
  std::vector<LibraryDescription>::__init_with_size[abi:ne180100]<LibraryDescription*,LibraryDescription*>((void *)v13 + 2, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5));
  v17 += 40;
  std::vector<std::pair<UUID,std::vector<LibraryDescription>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<std::pair<UUID,std::vector<LibraryDescription>>>::~__split_buffer(v16);
  return v14;
}

void sub_1B90750BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<UUID,std::vector<LibraryDescription>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<LibraryDescription>::__init_with_size[abi:ne180100]<LibraryDescription*,LibraryDescription*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<TRawSymbol<Pointer32>>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<LibraryDescription>,LibraryDescription*,LibraryDescription*,LibraryDescription*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B9075138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<LibraryDescription>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<LibraryDescription>,LibraryDescription*,LibraryDescription*,LibraryDescription*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<LibraryDescription,LibraryDescription&,LibraryDescription*>(a4 + v7, (long long *)(a2 + v7));
      v7 += 96;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B90751B8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 96;
    do
    {
      std::__destroy_at[abi:ne180100]<LibraryDescription,0>(v4 + v2);
      v2 -= 96;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<LibraryDescription,LibraryDescription&,LibraryDescription*>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 24), (long long *)((char *)a2 + 24));
  uint64_t v5 = *((void *)a2 + 7);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>((void *)(a1 + 64), *((const void **)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 5);
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
  return a1;
}

void sub_1B9075258(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<UUID,std::vector<LibraryDescription>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<UUID,std::vector<LibraryDescription>>>,std::reverse_iterator<std::pair<UUID,std::vector<LibraryDescription>>*>,std::reverse_iterator<std::pair<UUID,std::vector<LibraryDescription>>*>,std::reverse_iterator<std::pair<UUID,std::vector<LibraryDescription>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<UUID,std::vector<LibraryDescription>>>,std::reverse_iterator<std::pair<UUID,std::vector<LibraryDescription>>*>,std::reverse_iterator<std::pair<UUID,std::vector<LibraryDescription>>*>,std::reverse_iterator<std::pair<UUID,std::vector<LibraryDescription>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  _OWORD v10[2] = &v13;
  if (a3 == a5)
  {
    uint64_t v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v13 + 1) - 40;
      *((void *)&v13 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    uint64_t v8 = v13;
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<UUID,std::vector<LibraryDescription>>>,std::reverse_iterator<std::pair<UUID,std::vector<LibraryDescription>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<UUID,std::vector<LibraryDescription>>>,std::reverse_iterator<std::pair<UUID,std::vector<LibraryDescription>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<UUID,std::vector<LibraryDescription>>>,std::reverse_iterator<std::pair<UUID,std::vector<LibraryDescription>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<UUID,std::vector<LibraryDescription>>>,std::reverse_iterator<std::pair<UUID,std::vector<LibraryDescription>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = (void **)(v1 + 16);
    std::vector<LibraryDescription>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 40;
  }
}

void **std::__split_buffer<std::pair<UUID,std::vector<LibraryDescription>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<UUID,std::vector<LibraryDescription>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    long long v4 = (void **)(i - 24);
    std::vector<LibraryDescription>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

uint64_t std::vector<std::vector<std::unique_ptr<AS::Operator>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<AS::Operator>>>,std::reverse_iterator<std::vector<std::unique_ptr<AS::Operator>>*>,std::reverse_iterator<std::vector<std::unique_ptr<AS::Operator>>*>,std::reverse_iterator<std::vector<std::unique_ptr<AS::Operator>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<AS::Operator>>>,std::reverse_iterator<std::vector<std::unique_ptr<AS::Operator>>*>,std::reverse_iterator<std::vector<std::unique_ptr<AS::Operator>>*>,std::reverse_iterator<std::vector<std::unique_ptr<AS::Operator>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<AS::Operator>>>,std::reverse_iterator<std::vector<std::unique_ptr<AS::Operator>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<AS::Operator>>>,std::reverse_iterator<std::vector<std::unique_ptr<AS::Operator>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<AS::Operator>>>,std::reverse_iterator<std::vector<std::unique_ptr<AS::Operator>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<AS::Operator>>>,std::reverse_iterator<std::vector<std::unique_ptr<AS::Operator>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::unique_ptr<AS::Operator>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::unique_ptr<AS::Operator>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::unique_ptr<AS::Operator>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    long long v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::unique_ptr<AS::Operator>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::unique_ptr<AS::Operator>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<AS::Operator>>,std::reverse_iterator<std::unique_ptr<AS::Operator>*>,std::reverse_iterator<std::unique_ptr<AS::Operator>*>,std::reverse_iterator<std::unique_ptr<AS::Operator>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<AS::Operator>>,std::reverse_iterator<std::unique_ptr<AS::Operator>*>,std::reverse_iterator<std::unique_ptr<AS::Operator>*>,std::reverse_iterator<std::unique_ptr<AS::Operator>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<AS::Operator>>,std::reverse_iterator<std::unique_ptr<AS::Operator>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<AS::Operator>>,std::reverse_iterator<std::unique_ptr<AS::Operator>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<AS::Operator>>,std::reverse_iterator<std::unique_ptr<AS::Operator>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<AS::Operator>>,std::reverse_iterator<std::unique_ptr<AS::Operator>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<AS::Operator>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<AS::Operator>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    long long v4 = result;
    do
    {
      _DWORD v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *std::vector<AS::LoadDescription>::__init_with_size[abi:ne180100]<AS::LoadDescription*,AS::LoadDescription*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B90759A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<EventAggregator>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a2 + 88);
    std::__hash_table<std::__hash_value_type<unsigned long,LibraryConstructionState>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,LibraryConstructionState>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,LibraryConstructionState>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,LibraryConstructionState>>>::~__hash_table(a2 + 48);
    std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a2 + 8);
    JUMPOUT(0x1BA9D1CD0);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,LibraryConstructionState>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,LibraryConstructionState>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,LibraryConstructionState>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,LibraryConstructionState>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,LibraryConstructionState>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,LibraryConstructionState>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,LibraryConstructionState>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,LibraryConstructionState>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,LibraryConstructionState>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,LibraryConstructionState>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,LibraryConstructionState>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,LibraryConstructionState>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,LibraryConstructionState>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,LibraryConstructionState>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    operator delete(v3);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::find<int>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  void v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  long long v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    long long v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B9075DC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<UUID,unsigned long>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,unsigned long>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,unsigned long>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,unsigned long>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = a2[1] ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  void *i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_42:
    *unint64_t v21 = i;
    goto LABEL_43;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B9075FF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<CSCppSymbolicator *>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<CSCppSymbolicator *>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<CSCppSymbolicator *>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<CSCppSymbolicator *>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::vector<CSCppSymbolicator *>>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (*((void *)v10 + 2) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v12 = (void *)(a1 + 16);
  uint64_t v10 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = v6;
  *((void *)v10 + 2) = *(void *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *((void *)v10 + 5) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)uint64_t v10 = *v20;
LABEL_38:
    void *v20 = v10;
    goto LABEL_39;
  }
  *(void *)uint64_t v10 = *v12;
  void *v12 = v10;
  *(void *)(v19 + 8 * v3) = v12;
  if (*(void *)v10)
  {
    unint64_t v21 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B907624C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::__hash_table<AS::LoadDescription,std::hash<AS::LoadDescription>,std::equal_to<AS::LoadDescription>,std::allocator<AS::LoadDescription>>::__emplace_unique_key_args<AS::LoadDescription,AS::LoadDescription const&>(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v6 = a2[1];
  unint64_t v7 = (v6 + (*a2 << 6) + (*a2 >> 2) + 2654435769) ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      uint64_t v3 = (v6 + (*a2 << 6) + (*a2 >> 2) + 2654435769) ^ *a2;
      if (v7 >= v8) {
        uint64_t v3 = v7 % v8;
      }
    }
    else
    {
      uint64_t v3 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == v6) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        uint64_t v3 = v7 % v8;
      }
      else {
        uint64_t v3 = v7;
      }
    }
    else
    {
      uint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_42:
    *unint64_t v21 = i;
    goto LABEL_43;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B907648C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<AS::LoadDescription,std::hash<AS::LoadDescription>,std::equal_to<AS::LoadDescription>,std::allocator<AS::LoadDescription>>::find<AS::LoadDescription>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = a2[1];
  unint64_t v4 = (v3 + (*a2 << 6) + (*a2 >> 2) + 2654435769) ^ *a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = (v3 + (*a2 << 6) + (*a2 >> 2) + 2654435769) ^ *a2;
    if (v4 >= *(void *)&v2) {
      uint64_t v6 = v4 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v6 = v4 & (*(void *)&v2 - 1);
  }
  unint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  uint64_t result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v9 == v4)
      {
        if (result[2] == *a2 && result[3] == v3) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v2) {
            v9 %= *(void *)&v2;
          }
        }
        else
        {
          v9 &= *(void *)&v2 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void OUTLINED_FUNCTION_2()
{
  *(void *)uint64_t v0 = v2;
  *(_DWORD *)(v0 + 8) = v1;
}

uint64_t catch_mach_exception_raise()
{
  return 5;
}

uint64_t catch_mach_exception_raise_state(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, const void *a6, unsigned int a7, uint64_t a8, unsigned int *a9)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*a3 == 1) {
    return 5;
  }
  *(void *)ref_count = 0;
  vm_offset_t v12 = a3[1];
  if (vm_map_page_query(*MEMORY[0x1E4F14960], v12, &ref_count[1], ref_count)) {
    return 5;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218240;
    vm_offset_t v18 = v12;
    __int16 v19 = 1024;
    integer_t v20 = ref_count[1];
    _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Caught EXC_BAD_ACCESS at 0x%llx, valid page mapping, page query flags (0x%x)\n", buf, 0x12u);
  }
  uint64_t result = 5;
  if (a7 <= 0xF5 && *a9 >= a7)
  {
    memcpy((void *)a8, a6, 4 * a7);
    *a9 = a7;
    int v14 = *(_DWORD *)(a8 + 276);
    if (thread_exit_due_to_bad_access) {
      float v15 = thread_exit_due_to_bad_access;
    }
    else {
      float v15 = 0;
    }
    uint64_t result = 0;
    *(void *)(a8 + 264) = v15;
    *(_DWORD *)(a8 + 276) = v14 & 0xFFFFFFFB;
  }
  return result;
}

void thread_exit_due_to_bad_access(void)
{
  if (_exception_safe_thread_key(void)::onceToken != -1) {
    dispatch_once(&_exception_safe_thread_key(void)::onceToken, &__block_literal_global_3);
  }
  uint64_t v0 = (CSCppExceptionSafeThread *)pthread_getspecific(_exception_safe_thread_key(void)::est_key);
  CSCppExceptionSafeThread::runloop_exit_due_to_bad_access(v0);
}

uint64_t catch_mach_exception_raise_identity_protected(uint64_t a1, uint64_t a2, mach_port_name_t a3, uint64_t a4, void *a5)
{
  kern_return_t v8;
  mach_error_t v9;
  char *v10;
  FILE *v11;
  char *v12;
  unint64_t v13;
  thread_read_t v14;
  unint64_t v15;
  mach_port_name_t v16;
  uint64_t state;
  char *v18;
  FILE *v19;
  char *v20;
  vm_offset_t v21;
  void (*v23)(void);
  integer_t thread_info_out[66];
  void (*v27)(void);
  int v28;
  mach_msg_type_number_t thread_info_outCnt;
  thread_act_array_t act_list;
  mach_msg_type_number_t act_listCnt;
  uint8_t buf[4];
  vm_offset_t v33;
  __int16 v34;
  mach_msg_type_number_t v35;
  uint64_t v36;

  uint64_t v36 = *MEMORY[0x1E4F143B8];
  act_listCnt = 0;
  act_list = 0;
  task_threads(*MEMORY[0x1E4F14960], &act_list, &act_listCnt);
  if (!act_listCnt)
  {
    int v14 = 0;
    float v13 = 0;
    goto LABEL_18;
  }
  unint64_t v6 = 0;
  unint64_t v7 = MEMORY[0x1E4F14500];
  while (1)
  {
    thread_info_outCnt = 6;
    unint64_t v8 = thread_info(act_list[v6], 4u, thread_info_out, &thread_info_outCnt);
    unint64_t v9 = v8;
    if (v8)
    {
      if (v8 != 268435459)
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          uint64_t v10 = mach_error_string(v9);
          *(_DWORD *)long long buf = 136315138;
          uint64_t v33 = (vm_offset_t)v10;
          _os_log_impl(&dword_1B8F92000, v7, OS_LOG_TYPE_ERROR, "thread_info failed due to %s", buf, 0xCu);
        }
        uint64_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
        vm_offset_t v12 = mach_error_string(v9);
        fprintf(v11, "thread_info failed due to %s", v12);
      }
      goto LABEL_9;
    }
    if (*(void *)thread_info_out == a2) {
      break;
    }
LABEL_9:
    ++v6;
    float v13 = act_listCnt;
    if (v6 >= act_listCnt)
    {
      int v14 = 0;
      if (!act_listCnt) {
        goto LABEL_18;
      }
      goto LABEL_14;
    }
  }
  int v14 = act_list[v6];
  float v13 = act_listCnt;
  if (!act_listCnt) {
    goto LABEL_18;
  }
LABEL_14:
  float v15 = 0;
  do
  {
    BOOL v16 = act_list[v15];
    if (v14 != v16)
    {
      mach_port_deallocate(*MEMORY[0x1E4F14960], v16);
      float v13 = act_listCnt;
    }
    ++v15;
  }
  while (v15 < v13);
LABEL_18:
  mach_vm_deallocate(*MEMORY[0x1E4F14960], (mach_vm_address_t)act_list, 4 * v13);
  LODWORD(act_list) = 70;
  uint64_t state = thread_get_state(v14, 1, (thread_state_t)thread_info_out, (mach_msg_type_number_t *)&act_list);
  if (state)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      vm_offset_t v18 = mach_error_string(state);
      *(_DWORD *)long long buf = 136315138;
      uint64_t v33 = (vm_offset_t)v18;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "thread_get_state failed due to %s", buf, 0xCu);
    }
    __int16 v19 = (FILE *)*MEMORY[0x1E4F143C8];
    integer_t v20 = mach_error_string(state);
    fprintf(v19, "thread_get_state failed due to %s", v20);
  }
  else if (*a5 == 1 {
         || (act_listCnt = 0,
  }
             thread_info_outCnt = 0,
             uint64_t v21 = a5[1],
             vm_map_page_query(*MEMORY[0x1E4F14960], v21, (integer_t *)&act_listCnt, (integer_t *)&thread_info_outCnt)))
  {
    uint64_t state = 5;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      uint64_t v33 = v21;
      long long v34 = 1024;
      char v35 = act_listCnt;
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Caught EXC_BAD_ACCESS at 0x%llx, valid page mapping, page query flags (0x%x)\n", buf, 0x12u);
    }
    if (thread_exit_due_to_bad_access) {
      uint64_t v23 = thread_exit_due_to_bad_access;
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v27 = v23;
    v28 &= ~4u;
    uint64_t state = thread_set_state(v14, 1, (thread_state_t)thread_info_out, (mach_msg_type_number_t)act_list);
    if (!state)
    {
      mach_port_deallocate(*MEMORY[0x1E4F14960], a3);
      uint64_t state = 0;
    }
  }
  mach_port_deallocate(*MEMORY[0x1E4F14960], v14);
  return state;
}

void sub_1B9076B98(_Unwind_Exception *a1)
{
  mach_port_deallocate(*MEMORY[0x1E4F14960], v1);
  _Unwind_Resume(a1);
}

void CSCppExceptionSafeThread::CSCppExceptionSafeThread(CSCppExceptionSafeThread *this)
{
  *((void *)this + 1) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 16), 0);
  pthread_cond_init((pthread_cond_t *)((char *)this + 80), 0);
  pthread_mutex_init((pthread_mutex_t *)this + 3, 0);
  pthread_cond_init((pthread_cond_t *)((char *)this + 256), 0);
  pthread_mutex_lock((pthread_mutex_t *)this + 3);
  if (pthread_create((pthread_t *)this, 0, (void *(__cdecl *)(void *))thread_runloop_init, this))
  {
    atomic_store(0x1001u, (unsigned int *)this + 3);
  }
  else
  {
    thread_act_t v2 = pthread_mach_thread_np(*(pthread_t *)this);
    CSCppExceptionSafeThread::register_for_exceptions((mach_port_name_t *)this, v2);
    pthread_cond_wait((pthread_cond_t *)((char *)this + 256), (pthread_mutex_t *)this + 3);
    pthread_mutex_unlock((pthread_mutex_t *)this + 3);
  }
}

void sub_1B9076CBC(_Unwind_Exception *a1)
{
  std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::~deque[abi:ne180100]((void *)(v1 + 136));
  _Unwind_Resume(a1);
}

void thread_runloop_init(CSCppExceptionSafeThread *a1)
{
}

uint64_t CSCppExceptionSafeThread::register_for_exceptions(mach_port_name_t *this, thread_act_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (ipc_space_t *)MEMORY[0x1E4F14960];
  if (CSTaskIsTranslated(*MEMORY[0x1E4F14960])) {
    exception_behavior_t v5 = -2147483646;
  }
  else {
    exception_behavior_t v5 = -2147483644;
  }
  unint64_t v6 = this + 2;
  mach_error_t inserted = mach_port_allocate(*v4, 1u, this + 2);
  if (inserted
    || (mach_error_t inserted = mach_port_insert_right(*v4, *v6, *v6, 0x14u)) != 0
    || (mach_error_t inserted = thread_set_exception_ports(a2, 2u, *v6, v5, 1)) != 0
    || (uint64_t result = MEMORY[0x1BA9D2350](*v4, this[2], this), (inserted = result) != 0))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      vm_offset_t v12 = mach_error_string(inserted);
      _os_log_impl(&dword_1B8F92000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "failure while allocating exception port: %s\n", buf, 0xCu);
    }
    unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v10 = mach_error_string(inserted);
    uint64_t result = fprintf(v9, "failure while allocating exception port: %s\n", v10);
    if (*v6)
    {
      mach_port_mod_refs(*v4, *v6, 1u, -1);
      uint64_t result = mach_port_deallocate(*v4, *v6);
      *unint64_t v6 = 0;
    }
  }
  return result;
}

uint64_t CSCppExceptionSafeThread::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mach_msg_return_t v9;
  mach_error_t v10;
  char *v11;
  FILE *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned char buf[12];
  __int16 v18;
  mach_error_t v19;
  uint64_t v20;

  integer_t v20 = *MEMORY[0x1E4F143B8];
  if (CSCppExceptionSafeThread::is_current_thread((CSCppExceptionSafeThread *)a1))
  {
    *(void *)long long buf = a3;
    std::deque<void({block_pointer})(void),std::allocator<void({block_pointer})(void)>>::push_back((void *)(a1 + 136), buf);
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    CSCppExceptionSafeThread::pop_recovery_block((CSCppExceptionSafeThread *)a1);
    return 4096;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    return 4096;
  }
  unint64_t v6 = (os_unfair_lock_s *)(a1 + 184);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 184));
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  *(void *)(a1 + 128) = a2;
  *(void *)long long buf = a3;
  std::deque<void({block_pointer})(void),std::allocator<void({block_pointer})(void)>>::push_back((void *)(a1 + 136), buf);
  pthread_cond_signal((pthread_cond_t *)(a1 + 80));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  unint64_t v7 = MEMORY[0x1E4F14500];
  unint64_t v8 = (FILE **)MEMORY[0x1E4F143C8];
  do
  {
    unint64_t v9 = mach_msg_server_once((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))_exception_handler_demux, 0x40000u, *(_DWORD *)(a1 + 8), 0);
    if (v9)
    {
      uint64_t v10 = v9;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = mach_error_string(v10);
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v11;
        vm_offset_t v18 = 1024;
        __int16 v19 = v10;
        _os_log_impl(&dword_1B8F92000, v7, OS_LOG_TYPE_ERROR, "error handling EST message: %s (%u)\n", buf, 0x12u);
      }
      vm_offset_t v12 = *v8;
      uint64_t v13 = mach_error_string(v10);
      fprintf(v12, "error handling EST message: %s (%u)\n", v13, v10);
    }
    int v14 = atomic_load((unsigned int *)(a1 + 12));
  }
  while (v14 < 0x1000);
  float v15 = atomic_load((unsigned int *)(a1 + 12));
  os_unfair_lock_unlock(v6);
  return v15;
}

BOOL CSCppExceptionSafeThread::is_current_thread(CSCppExceptionSafeThread *this)
{
  if (_exception_safe_thread_key(void)::onceToken != -1) {
    dispatch_once(&_exception_safe_thread_key(void)::onceToken, &__block_literal_global_3);
  }
  return pthread_getspecific(_exception_safe_thread_key(void)::est_key) != 0;
}

uint64_t CSCppExceptionSafeThread::pop_recovery_block(CSCppExceptionSafeThread *this)
{
  uint64_t v1 = *((void *)this + 22);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1 - 1;
  uint64_t v3 = *(void *)(*(void *)(*((void *)this + 18)
                             + (((unint64_t)(*((void *)this + 21) + v2) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((*((void *)this + 21) + v2) & 0x1FF));
  *((void *)this + 22) = v2;
  std::deque<void({block_pointer})(void),std::allocator<void({block_pointer})(void)>>::__maybe_remove_back_spare[abi:ne180100]((void *)this + 17, 1);
  return v3;
}

uint64_t _exception_handler_demux(mach_msg_header_t *a1, mach_msg_header_t *a2)
{
  if (a1->msgh_id == 999)
  {
    mach_port_context_t context = 0;
    if (!mach_port_get_context(*MEMORY[0x1E4F14960], a1->msgh_local_port, &context)) {
      atomic_store(a1[1].msgh_bits, (unsigned int *)(context + 12));
    }
    return 1;
  }
  else
  {
    return mach_exc_server(a1, (uint64_t)a2);
  }
}

uint64_t CSCppExceptionSafeThread::runloop_send_exit_notice(uint64_t this, int a2)
{
  mach_port_t v2 = *(_DWORD *)(this + 8);
  if (v2)
  {
    bzero(&v4, 0x1CuLL);
    v4.msgh_voucher_port = 0;
    v4.msgh_id = 999;
    v4.msgh_remote_port = v2;
    v4.msgh_local_port = 0;
    *(void *)&v4.msgh_bits = 0x1C00001413;
    int v5 = a2;
    return mach_msg_send(&v4);
  }
  return this;
}

uint64_t CSCppExceptionSafeThread::thread_init(CSCppExceptionSafeThread *this)
{
  if (_exception_safe_thread_key(void)::onceToken != -1) {
    dispatch_once(&_exception_safe_thread_key(void)::onceToken, &__block_literal_global_3);
  }
  pthread_setspecific(_exception_safe_thread_key(void)::est_key, this);
  pthread_setname_np("ExceptionSafeThread");
  atomic_store(0x100u, (unsigned int *)this + 3);
  pthread_mutex_lock((pthread_mutex_t *)this + 3);
  pthread_cond_signal((pthread_cond_t *)((char *)this + 256));

  return pthread_mutex_unlock((pthread_mutex_t *)this + 3);
}

void CSCppExceptionSafeThread::runloop(CSCppExceptionSafeThread *this)
{
  mach_port_t v2 = (pthread_mutex_t *)((char *)this + 16);
  uint64_t v3 = (pthread_cond_t *)((char *)this + 80);
  while (1)
  {
    pthread_mutex_lock(v2);
    while (1)
    {
      uint64_t v4 = *((void *)this + 16);
      if (v4) {
        break;
      }
      pthread_cond_wait(v3, v2);
    }
    atomic_store(0x100u, (unsigned int *)this + 3);
    (*(void (**)(void))(v4 + 16))();
    CSCppExceptionSafeThread::pop_recovery_block(this);
    CSCppExceptionSafeThread::runloop_send_exit_notice((uint64_t)this, 4096);
    *((void *)this + 16) = 0;
    pthread_mutex_unlock(v2);
  }
}

uint64_t CSCppExceptionSafeThread::runloop_prep_to_turn(CSCppExceptionSafeThread *this, unsigned int a2)
{
  if (a2 <= 0x1000)
  {
    CSCppExceptionSafeThread::pop_recovery_block(this);
  }
  else
  {
    while (*((void *)this + 22))
    {
      uint64_t v4 = CSCppExceptionSafeThread::pop_recovery_block(this);
      if (v4) {
        (*(void (**)(void))(v4 + 16))();
      }
    }
  }
  uint64_t result = CSCppExceptionSafeThread::runloop_send_exit_notice((uint64_t)this, a2);
  *((void *)this + 16) = 0;
  return result;
}

void CSCppExceptionSafeThread::runloop_exit_due_to_bad_access(CSCppExceptionSafeThread *this)
{
}

uint64_t ___ZL26_exception_safe_thread_keyv_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&_exception_safe_thread_key(void)::est_key, 0);
}

void std::deque<void({block_pointer})(void),std::allocator<void({block_pointer})(void)>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<void({block_pointer})(void),std::allocator<void({block_pointer})(void)>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<void({block_pointer})(void),std::allocator<void({block_pointer})(void)>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      char v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int16 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      char v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  char v53 = operator new(0x1000uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B9077780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<void({block_pointer})(void),std::allocator<void({block_pointer})(void)>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void CSCallFrameInfoForBinary::ParseEHFrameData(CSCallFrameInfoForBinary *this)
{
  unsigned int v24 = 0;
  uint64_t v3 = (CSCallFrameInfoForBinary *)((char *)this + 56);
  unint64_t v2 = *((void *)this + 7);
  unint64_t v5 = (void *)((char *)this + 24);
  uint64_t v4 = *((void *)this + 3);
  v23[0] = *((void *)this + 5);
  v23[1] = v4;
  v23[2] = -1;
  unint64_t v6 = *((void *)this + 8);
  if (v2 < v6)
  {
    unsigned int v7 = 0;
    unint64_t v8 = (FILE **)MEMORY[0x1E4F143C8];
    do
    {
      if ((v6 - v2) <= (unint64_t)v7 + 7) {
        break;
      }
      int v9 = CSBinaryDataRef::Get32(v3, &v24);
      unsigned int v13 = CSBinaryDataRef::Get32(v3, &v24);
      int v14 = v7 + v9;
      unsigned int v15 = v7 + v9 + 4;
      if (v13) {
        unsigned int v16 = CSCallFrameInfoForBinary::ParseFDE(this, v10, v11, v13, v24, (v14 + 4), v23, 1, v5);
      }
      else {
        unsigned int v16 = CSCallFrameInfoForBinary::ParseCIE((uint64_t)this, v7, v11, v12, v24, v14 + 4, v23);
      }
      unsigned int v24 = v16;
      if (v16 != v15)
      {
        if (v13) {
          uint64_t v17 = "FDE";
        }
        else {
          uint64_t v17 = "CIE";
        }
        uint64_t v18 = (const char *)this;
        if (*((char *)this + 23) < 0) {
          uint64_t v18 = *(const char **)this;
        }
        fprintf(*v8, "CoreSymbolication warning: error parsing %s at 0x%8.8llx in:\n\t__TEXT [0x%8.8llx - 0x%8.8llx) __eh_frame [0x%8.8llx - 0x%8.8llx) %s\n", v17, *((void *)this + 5) + v16, *((void *)this + 3), *((void *)this + 4) + *((void *)this + 3), *((void *)this + 5), *((void *)this + 6) + *((void *)this + 5), v18);
        unsigned int v24 = v15;
      }
      unint64_t v2 = *((void *)this + 7);
      unint64_t v6 = *((void *)this + 8);
      unsigned int v7 = v15;
    }
    while (v2 < v6);
  }
  unint64_t v19 = *((void *)this + 17);
  int64_t v20 = (long long *)*((void *)this + 18);
  unint64_t v21 = 126 - 2 * __clz((uint64_t)((uint64_t)v20 - v19) >> 5);
  if (v20 == (long long *)v19) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v21;
  }
  std::__introsort<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *,false>(v19, v20, v22, 1);
  *((unsigned char *)this + 104) = 1;
}

uint64_t CSCallFrameInfoForBinary::ParseCIE(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, void *a7)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned int v27 = a5;
  unsigned int v28 = a2;
  LOBYTE(v32) = 0;
  uint64_t v10 = (CSBinaryDataRef *)(a1 + 56);
  unint64_t v11 = 0;
  LOBYTE(v30) = CSBinaryDataRef::Get8((CSBinaryDataRef *)(a1 + 56), &v27);
  while (1)
  {
    int v12 = CSBinaryDataRef::Get8(v10, &v27);
    *((unsigned char *)&v30 + v11 + 1) = v12;
    if (!v12) {
      break;
    }
    if (++v11 == 8) {
      goto LABEL_7;
    }
  }
  if (v11 <= 6)
  {
    bzero((char *)&v30 + v11 + 2, 7 - v11);
    goto LABEL_10;
  }
LABEL_7:
  if (v11 == 8 && BYTE8(v30))
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CIE parse error: CIE augmentation string was too large for the fixed sized buffer of %d bytes.\n", 8);
    return 0;
  }
LABEL_10:
  HIDWORD(v30) = CSBinaryDataRef::Get_ULEB128(v10, &v27);
  LODWORD(v31) = CSBinaryDataRef::Get_SLEB128(v10, &v27);
  DWORD1(v31) = CSBinaryDataRef::Get8(v10, &v27);
  int v14 = BYTE1(v30);
  if (BYTE1(v30))
  {
    int ULEB128 = CSBinaryDataRef::Get_ULEB128(v10, &v27);
    unsigned int v16 = v27;
    size_t v17 = strlen((const char *)&v30 + 1);
    if (v14 == 122 && v17 >= 2)
    {
      size_t v18 = v17 - 1;
      unint64_t v19 = (char *)&v30 + 2;
      do
      {
        int v21 = *v19++;
        int v20 = v21;
        if (v21 == 82)
        {
          LOBYTE(v32) = CSBinaryDataRef::Get8(v10, &v27);
        }
        else if (v20 == 80)
        {
          int v22 = CSBinaryDataRef::Get8(v10, &v27);
          CSBinaryDataRef::GetDwarfEHPtr(v10, &v27, v22, a7);
        }
        else if (v20 == 76)
        {
          CSBinaryDataRef::Get8(v10, &v27);
        }
        --v18;
      }
      while (v18);
    }
    unsigned int v23 = v16 + ULEB128;
    unsigned int v27 = v16 + ULEB128;
  }
  else
  {
    unsigned int v23 = v27;
  }
  unsigned int v24 = a6 - v23;
  if (a6 <= v23)
  {
    unsigned int v24 = 0;
  }
  else
  {
    DWORD2(v31) = v23;
    unsigned int v27 = a6;
  }
  HIDWORD(v31) = v24;
  uint64_t v29 = &v28;
  unint64_t v25 = std::__tree<std::__value_type<unsigned int,CSCallFrameInfoForBinary::CIE>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSCallFrameInfoForBinary::CIE>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSCallFrameInfoForBinary::CIE>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 112), &v28, (uint64_t)&std::piecewise_construct, &v29);
  long long v26 = v31;
  *((_OWORD *)v25 + 2) = v30;
  *((_OWORD *)v25 + 3) = v26;
  *((_DWORD *)v25 + 16) = v32;
  return v27;
}

uint64_t CSCallFrameInfoForBinary::ParseFDE(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, void *a7, int a8, void *a9)
{
  uint64_t v9 = a5;
  unsigned int v40 = a5;
  if (a8) {
    unsigned int v10 = a5 - a4 - 4;
  }
  else {
    unsigned int v10 = a4;
  }
  uint64_t v11 = a1[15];
  if (!v11) {
    goto LABEL_15;
  }
  unsigned int v15 = a1 + 15;
  do
  {
    unsigned int v16 = *(_DWORD *)(v11 + 28);
    BOOL v17 = v16 >= v10;
    if (v16 >= v10) {
      size_t v18 = (uint64_t *)v11;
    }
    else {
      size_t v18 = (uint64_t *)(v11 + 8);
    }
    if (v17) {
      unsigned int v15 = (void *)v11;
    }
    uint64_t v11 = *v18;
  }
  while (*v18);
  if (v15 == a1 + 15 || *((_DWORD *)v15 + 7) > v10)
  {
LABEL_15:
    unint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    if (a8) {
      fprintf(v19, "CoreSymbolication warning: Unable to locate CIE at 0x%8.8int x = 0x%8.8x - (0x%8.8x + 4)\n");
    }
    else {
      fprintf(v19, "CoreSymbolication warning: Unable to locate CIE with ID 0x%8.8x\n");
    }
    return v9;
  }
  uint64_t DwarfEHPtr = CSBinaryDataRef::GetDwarfEHPtr((CSBinaryDataRef *)(a1 + 7), &v40, *((unsigned __int8 *)v15 + 64), a7);
  uint64_t v22 = CSBinaryDataRef::GetDwarfEHPtr((CSBinaryDataRef *)(a1 + 7), &v40, v15[8] & 0xF, a7);
  unint64_t v23 = a9[1];
  if (DwarfEHPtr - *a9 >= v23)
  {
    if (!DwarfEHPtr)
    {
      int v24 = 0;
      goto LABEL_23;
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CoreSymbolication warning: fde.addrRange.location 0x%8.8llx isn't in  the __TEXT segment [0x%8.8llx - 0x%8.8llx)\n", DwarfEHPtr, *a9, v23);
  }
  int v24 = 1;
LABEL_23:
  if (*((unsigned char *)v15 + 33) == 122)
  {
    int ULEB128 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v40);
    uint64_t v26 = v40;
    if (ULEB128)
    {
      uint64_t v26 = v40 + ULEB128;
      v40 += ULEB128;
    }
  }
  else
  {
    uint64_t v26 = v40;
  }
  int v27 = a6 - v26;
  if (a6 <= v26)
  {
    int v27 = 0;
    a6 = v26;
  }
  else
  {
    unsigned int v40 = a6;
  }
  uint64_t v9 = a6;
  if (v24)
  {
    unint64_t v28 = a1[19];
    uint64_t v29 = (char *)a1[18];
    if ((unint64_t)v29 >= v28)
    {
      long long v31 = (char *)a1[17];
      uint64_t v32 = (v29 - v31) >> 5;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 59) {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v34 = v28 - (void)v31;
      if (v34 >> 4 > v33) {
        unint64_t v33 = v34 >> 4;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v35 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35)
      {
        uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)(a1 + 19), v35);
        long long v31 = (char *)a1[17];
        uint64_t v29 = (char *)a1[18];
      }
      else
      {
        uint64_t v36 = 0;
      }
      int v37 = &v36[32 * v32];
      *(_DWORD *)int v37 = v10;
      *((void *)v37 + 1) = DwarfEHPtr;
      *((void *)v37 + 2) = v22;
      char v38 = &v36[32 * v35];
      *((_DWORD *)v37 + 6) = v26;
      *((_DWORD *)v37 + 7) = v27;
      long long v30 = v37 + 32;
      if (v29 != v31)
      {
        do
        {
          long long v39 = *((_OWORD *)v29 - 1);
          *((_OWORD *)v37 - 2) = *((_OWORD *)v29 - 2);
          *((_OWORD *)v37 - 1) = v39;
          v37 -= 32;
          v29 -= 32;
        }
        while (v29 != v31);
        long long v31 = (char *)a1[17];
      }
      a1[17] = v37;
      a1[18] = v30;
      a1[19] = v38;
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v29 = v10;
      *((void *)v29 + 1) = DwarfEHPtr;
      *((void *)v29 + 2) = v22;
      long long v30 = v29 + 32;
      *((_DWORD *)v29 + 6) = v26;
      *((_DWORD *)v29 + 7) = v27;
    }
    a1[18] = v30;
    return v40;
  }
  return v9;
}

void CSCallFrameInfoForBinary::ParseInstructions(void *a1, CSThread *a2, unsigned int *a3, unsigned int (*a4)(CSThread *, unsigned int *, CSThread **, uint64_t), uint64_t a5)
{
  if (a3)
  {
    uint64_t v6 = a1[15];
    if (v6)
    {
      unsigned int v10 = *a3;
      uint64_t v11 = a1 + 15;
      do
      {
        unsigned int v12 = *(_DWORD *)(v6 + 28);
        BOOL v13 = v12 >= v10;
        if (v12 >= v10) {
          int v14 = (uint64_t *)v6;
        }
        else {
          int v14 = (uint64_t *)(v6 + 8);
        }
        if (v13) {
          uint64_t v11 = (_DWORD *)v6;
        }
        uint64_t v6 = *v14;
      }
      while (*v14);
      if (v11 != (_DWORD *)(a1 + 15) && v11[7] <= v10)
      {
        int v77 = v11[11];
        int v74 = v11[12];
        uint64_t v82 = a2;
        unint64_t Pointer = 0;
        uint64_t v84 = 0xFFFFFFFFLL;
        CSCallFrameInfoForBinary::RegLocations::RegLocations((CSCallFrameInfoForBinary::RegLocations *)&v85, a2);
        CSCallFrameInfoForBinary::RegLocations::RegLocations((CSCallFrameInfoForBinary::RegLocations *)__p, a2);
        v79[0] = v79;
        v79[1] = v79;
        uint64_t v80 = 0;
        char v15 = 1;
        do
        {
          char v75 = v15;
          if (v15)
          {
            unsigned int v17 = v11[14];
            unsigned int v16 = v11[15];
          }
          else
          {
            unsigned int v17 = a3[6];
            unsigned int v16 = a3[7];
            std::vector<CSCppSectionRange>::__assign_with_size[abi:ne180100]<CSCppSectionRange*,CSCppSectionRange*>((char *)__p, (char *)v85, (uint64_t)v86, 0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)v85) >> 3));
          }
          if (v16)
          {
            unsigned int v78 = v17;
            unint64_t v18 = a1[7];
            unint64_t v19 = a1[8];
            if (v19 > v18)
            {
              unsigned int v20 = v16 + v17;
              if ((v19 - v18) > (unint64_t)v17 && v17 < v20)
              {
                while (2)
                {
                  unsigned int v22 = CSBinaryDataRef::Get8((CSBinaryDataRef *)(a1 + 7), &v78);
                  uint64_t v23 = v22 & 0x3F;
                  switch((v22 >> 6) ^ 2)
                  {
                    case 1u:
                      unsigned int v29 = (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)a2 + 96))(a2, v23, 2);
LABEL_32:
                      if (0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)v85) >> 3) > v29)
                      {
                        long long v30 = (char *)__p[0] + 24 * v29;
                        long long v31 = *(_OWORD *)v30;
                        uint64_t v32 = (char *)v85 + 24 * v29;
                        *((void *)v32 + 2) = *((void *)v30 + 2);
                        *(_OWORD *)uint64_t v32 = v31;
                      }
                      goto LABEL_38;
                    case 2u:
                      switch(v22 & 0x3F)
                      {
                        case 1u:
                          if (a4 && !a4(a2, a3, &v82, a5)) {
                            goto LABEL_89;
                          }
                          unint64_t Pointer = CSBinaryDataRef::GetPointer((CSBinaryDataRef *)(a1 + 7), &v78);
                          goto LABEL_38;
                        case 2u:
                          if (a4 && !a4(a2, a3, &v82, a5)) {
                            goto LABEL_89;
                          }
                          int v37 = CSBinaryDataRef::Get8((CSBinaryDataRef *)(a1 + 7), &v78);
                          goto LABEL_51;
                        case 3u:
                          if (a4 && !a4(a2, a3, &v82, a5)) {
                            goto LABEL_89;
                          }
                          int v37 = CSBinaryDataRef::Get16((CSBinaryDataRef *)(a1 + 7), &v78);
LABEL_51:
                          uint64_t v33 = (v77 * v37);
                          goto LABEL_37;
                        case 4u:
                          if (a4 && !a4(a2, a3, &v82, a5)) {
                            goto LABEL_89;
                          }
                          uint64_t v33 = CSBinaryDataRef::Get32((CSBinaryDataRef *)(a1 + 7), &v78) * v77;
                          goto LABEL_37;
                        case 5u:
                          uint64_t ULEB128 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          int SLEB128 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          unsigned int v25 = (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)a2 + 96))(a2, ULEB128, 2);
                          goto LABEL_78;
                        case 6u:
                          uint64_t v40 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          unsigned int v29 = (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)a2 + 96))(a2, v40, 2);
                          goto LABEL_32;
                        case 7u:
                          uint64_t v41 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          unsigned int v42 = (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)a2 + 96))(a2, v41, 2);
                          uint64_t v43 = (char *)v85;
                          if (0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)v85) >> 3) <= v42) {
                            goto LABEL_38;
                          }
                          uint64_t v44 = 24 * v42;
                          int v45 = 1;
                          goto LABEL_61;
                        case 8u:
                          uint64_t v46 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          unsigned int v47 = (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)a2 + 96))(a2, v46, 2);
                          uint64_t v43 = (char *)v85;
                          if (0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)v85) >> 3) <= v47) {
                            goto LABEL_38;
                          }
                          uint64_t v44 = 24 * v47;
                          int v45 = 2;
LABEL_61:
                          *(_DWORD *)&v43[v44] = v45;
                          goto LABEL_38;
                        case 9u:
                          uint64_t v48 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          uint64_t v49 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          unsigned int v50 = (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)a2 + 96))(a2, v48, 2);
                          unsigned int v51 = (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)a2 + 96))(a2, v49, 2);
                          uint64_t v52 = v85;
                          unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)v85) >> 3);
                          if (v53 > v50)
                          {
                            long long v54 = (char *)v85 + 24 * v50;
                            if (v53 <= v51)
                            {
                              _DWORD *v54 = 1;
                            }
                            else
                            {
                              _DWORD *v54 = 5;
                              v52[6 * v50 + 2] = v49;
                            }
                          }
                          goto LABEL_38;
                        case 0xAu:
                          long long v55 = std::__list_imp<CSCallFrameInfoForBinary::RegLocations>::__create_node[abi:ne180100]<CSCallFrameInfoForBinary::RegLocations const&>((uint64_t)v79, 0, 0, (uint64_t)&v85);
                          uint64_t v56 = v79[0];
                          void *v55 = v79[0];
                          v55[1] = v79;
                          v56[1] = v55;
                          v79[0] = v55;
                          ++v80;
                          goto LABEL_38;
                        case 0xBu:
                          uint64_t v57 = v80;
                          if (v80)
                          {
                            uint64_t v58 = (uint64_t *)v79[0];
                            if (&v85 != (void **)((char *)v79[0] + 16))
                            {
                              std::vector<CSCppSectionRange>::__assign_with_size[abi:ne180100]<CSCppSectionRange*,CSCppSectionRange*>((char *)&v85, *((char **)v79[0] + 2), *((void *)v79[0] + 3), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*((void *)v79[0] + 3) - *((void *)v79[0] + 2)) >> 3));
                              uint64_t v58 = (uint64_t *)v79[0];
                              uint64_t v57 = v80;
                            }
                            uint64_t v59 = *v58;
                            *(void *)(v59 + 8) = v58[1];
                            *(void *)v58[1] = v59;
                            uint64_t v80 = v57 - 1;
                            std::__list_imp<CSCallFrameInfoForBinary::RegLocations>::__delete_node[abi:ne180100]<>((int)v79, v58);
                          }
                          goto LABEL_38;
                        case 0xCu:
                          int v60 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          int v61 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          LODWORD(v84) = v60;
                          goto LABEL_73;
                        case 0xDu:
                          LODWORD(v84) = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          goto LABEL_38;
                        case 0xEu:
                          int v61 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
LABEL_73:
                          HIDWORD(v84) = v61;
                          goto LABEL_38;
                        case 0xFu:
                          int v62 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          v78 += v62;
                          goto LABEL_38;
                        case 0x10u:
                          uint64_t v63 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          unsigned int v64 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          uint64_t Data = CSBinaryDataRef::GetData((CSBinaryDataRef *)(a1 + 7), &v78, v64);
                          unsigned int v66 = (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)a2 + 96))(a2, v63, 2);
                          if (0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)v85) >> 3) <= v66) {
                            goto LABEL_38;
                          }
                          unint64_t v67 = (char *)v85 + 24 * v66;
                          int v68 = 6;
                          goto LABEL_84;
                        case 0x11u:
                          uint64_t v69 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          int SLEB128 = CSBinaryDataRef::Get_SLEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          unsigned int v25 = (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)a2 + 96))(a2, v69, 2);
LABEL_78:
                          uint64_t v26 = (char *)v85;
                          if (0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)v85) >> 3) <= v25) {
                            goto LABEL_38;
                          }
                          int v27 = v74 * SLEB128;
                          goto LABEL_26;
                        case 0x12u:
                          int v70 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          int v71 = CSBinaryDataRef::Get_SLEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          LODWORD(v84) = v70;
                          HIDWORD(v84) = v74 * v71;
                          goto LABEL_38;
                        case 0x13u:
                          HIDWORD(v84) = v74 * CSBinaryDataRef::Get_SLEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          goto LABEL_38;
                        case 0x16u:
                          uint64_t v72 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          unsigned int v64 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                          uint64_t Data = CSBinaryDataRef::GetData((CSBinaryDataRef *)(a1 + 7), &v78, v64);
                          unsigned int v73 = (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)a2 + 96))(a2, v72, 2);
                          if (0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)v85) >> 3) <= v73) {
                            goto LABEL_38;
                          }
                          unint64_t v67 = (char *)v85 + 24 * v73;
                          int v68 = 7;
LABEL_84:
                          *(_DWORD *)unint64_t v67 = v68;
                          *((void *)v67 + 1) = Data;
                          *((_DWORD *)v67 + 4) = v64;
                          goto LABEL_38;
                        default:
                          goto LABEL_38;
                      }
                    case 3u:
                      if (a4
                        && (((uint64_t (*)(CSThread *, unsigned int *, CSThread **, uint64_t))a4)(a2, a3, &v82, a5) & 1) == 0)
                      {
                        goto LABEL_89;
                      }
                      uint64_t v33 = (v77 * v23);
LABEL_37:
                      Pointer += v33;
LABEL_38:
                      unint64_t v34 = a1[7];
                      unint64_t v35 = a1[8];
                      if (v35 > v34 && (v35 - v34) > (unint64_t)v78 && v78 < v20) {
                        continue;
                      }
                      goto LABEL_86;
                    default:
                      int v24 = CSBinaryDataRef::Get_ULEB128((CSBinaryDataRef *)(a1 + 7), &v78);
                      unsigned int v25 = (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)a2 + 96))(a2, v23, 2);
                      uint64_t v26 = (char *)v85;
                      if (0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)v85) >> 3) > v25)
                      {
                        int v27 = v74 * v24;
LABEL_26:
                        unint64_t v28 = &v26[24 * v25];
                        *(_DWORD *)unint64_t v28 = 3;
                        *((void *)v28 + 1) = v27;
                      }
                      goto LABEL_38;
                  }
                }
              }
            }
          }
LABEL_86:
          char v15 = 0;
        }
        while ((v75 & 1) != 0);
        if (a4) {
          a4(a2, a3, &v82, a5);
        }
LABEL_89:
        std::__list_imp<CSCallFrameInfoForBinary::RegLocations>::clear((uint64_t *)v79);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v85)
        {
          char v86 = v85;
          operator delete(v85);
        }
      }
    }
  }
}

void sub_1B9078854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

CSCallFrameInfoForBinary::RegLocations *CSCallFrameInfoForBinary::RegLocations::RegLocations(CSCallFrameInfoForBinary::RegLocations *this, const CSThread *a2)
{
  unsigned int v4 = (*(uint64_t (**)(const CSThread *))(*(void *)a2 + 32))(a2);
  unint64_t v5 = (CSCallFrameInfoForBinary::RegLocations *)std::vector<CSCallFrameInfoForBinary::RegLocation>::vector(this, v4);
  CSCallFrameInfoForBinary::RegLocations::SetABIDefaults(v5, a2);
  return this;
}

void sub_1B9078984(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CSCallFrameInfoForBinary::RegLocations::SetABIDefaults(CSCallFrameInfoForBinary::RegLocations *this, const CSThread *a2)
{
  uint64_t result = (*(uint64_t (**)(const CSThread *, void))(*(void *)a2 + 48))(a2, 0);
  uint64_t v4 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      if (result == v6)
      {
        *(void *)(v4 + 24 * result + 8) = 0;
        int v7 = 4;
      }
      else
      {
        int v7 = 0;
      }
      *(_DWORD *)(v4 + v5) = v7;
      ++v6;
      uint64_t v4 = *(void *)this;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3));
  }
  return result;
}

uint64_t CSCallFrameInfoForBinary::FindFDE(CSCallFrameInfoForBinary *this, unint64_t a2)
{
  if (!*((unsigned char *)this + 104))
  {
    CSCallFrameInfoForBinary::ParseEHFrameData(this);
    *((unsigned char *)this + 104) = 1;
  }
  uint64_t result = *((void *)this + 17);
  uint64_t v5 = *((void *)this + 18);
  if (result == v5) {
    return 0;
  }
  unint64_t v6 = (v5 - result) >> 5;
  do
  {
    unint64_t v7 = v6 >> 1;
    uint64_t v8 = result + 32 * (v6 >> 1);
    unint64_t v9 = *(void *)(v8 + 16) + *(void *)(v8 + 8);
    uint64_t v10 = v8 + 32;
    v6 += ~(v6 >> 1);
    if (v9 <= a2) {
      uint64_t result = v10;
    }
    else {
      unint64_t v6 = v7;
    }
  }
  while (v6);
  if (result == v5 || a2 - *(void *)(result + 8) >= *(void *)(result + 16)) {
    return 0;
  }
  return result;
}

uint64_t CSCallFrameInfoForBinary::UnwindThreadState(CSCallFrameInfoForBinary *a1, const CSThread *a2, uint64_t a3, CSThread *a4, void *a5)
{
  uint64_t FDE = CSCallFrameInfoForBinary::FindFDE(a1, (unint64_t)a5);
  if (!FDE) {
    return 0;
  }
  uint64_t v11 = (unsigned int *)FDE;
  v17[0] = a2;
  v17[1] = 0;
  void v17[2] = 0xFFFFFFFFLL;
  CSCallFrameInfoForBinary::RegLocations::RegLocations((CSCallFrameInfoForBinary::RegLocations *)__p, a2);
  __p[3] = a5;
  char v19 = 0;
  CSCallFrameInfoForBinary::ParseInstructions(a1, a2, v11, (unsigned int (*)(CSThread *, unsigned int *, CSThread **, uint64_t))FindRowForAddress, (uint64_t)v17);
  if (v19 && (uint64_t v12 = (*(uint64_t (**)(const CSThread *))(*(void *)a2 + 32))(a2), (v13 = v12) != 0))
  {
    uint64_t v14 = 0;
    LODWORD(v15) = 0;
    do
    {
      uint64_t v12 = CSCallFrameInfoForBinary::UnwindRegisterAtIndex(v12, v14, a2, (uint64_t)v17, a3, a4);
      uint64_t v15 = (v15 + v12);
      uint64_t v14 = (v14 + 1);
    }
    while (v13 != v14);
  }
  else
  {
    uint64_t v15 = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v15;
}

void sub_1B9078C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL FindRowForAddress(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  unint64_t v5 = *((void *)a3 + 1) + *(void *)(a2 + 8);
  unint64_t v6 = *(void *)(a4 + 48);
  if (v5 <= v6)
  {
    long long v7 = *a3;
    *(void *)(a4 + 16) = *((void *)a3 + 2);
    *(_OWORD *)a4 = v7;
    if ((long long *)a4 != a3)
    {
      std::vector<CSCppSectionRange>::__assign_with_size[abi:ne180100]<CSCppSectionRange*,CSCppSectionRange*>((char *)(a4 + 24), *((char **)a3 + 3), *((void *)a3 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 4) - *((void *)a3 + 3)) >> 3));
      unint64_t v6 = *(void *)(a4 + 48);
    }
  }
  BOOL result = v5 < v6;
  *(unsigned char *)(a4 + 56) = v5 >= v6;
  return result;
}

uint64_t CSCallFrameInfoForBinary::UnwindRegisterAtIndex(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, CSThread *a6)
{
  char v30 = 0;
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = v11 + 24 * a2;
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a4 + 32) - v11) >> 3) <= a2) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v11 + 24 * a2;
  }
  if ((*(unsigned int (**)(unsigned char *, void))(*(void *)a3 + 64))(a3, 0) == a2)
  {
    unsigned int v14 = (*(uint64_t (**)(unsigned char *, void))(*(void *)a3 + 72))(a3, 0);
    uint64_t v15 = *(void *)(a4 + 24);
    uint64_t v16 = v15 + 24 * v14;
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a4 + 32) - v15) >> 3) <= v14) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v15 + 24 * v14;
    }
    if (v13)
    {
      if (v17) {
        BOOL v18 = *(_DWORD *)v13 == 0;
      }
      else {
        BOOL v18 = 0;
      }
      if (v18) {
        uint64_t v13 = v16;
      }
      else {
        uint64_t v13 = v12;
      }
LABEL_17:
      uint64_t v29 = -1;
      uint64_t v19 = 1;
      switch(*(_DWORD *)v13)
      {
        case 0:
        case 2:
          return v19;
        case 1:
          CSThread::SetRegisterIsValid((uint64_t)a6, a2, 0, 0);
          return v19;
        case 3:
        case 4:
          RegisterCFNumberRef Value = CSThread::GetRegisterValue((uint64_t)a3, *(unsigned int *)(a4 + 16), 2, -1, (uint64_t)&v30);
          if (!v30) {
            goto LABEL_30;
          }
          int v21 = (tree *)(RegisterValue + *(int *)(a4 + 20) + *(void *)(v13 + 8));
          if (*(_DWORD *)v13 == 4) {
            goto LABEL_35;
          }
          if (mapped_memory_read_pointer(a5, v21, &v29)) {
            goto LABEL_30;
          }
          int v21 = (tree *)v29;
LABEL_35:
          CSThread::SetRegisterValue((uint64_t)a6, a2, 0, (uint64_t)v21);
          break;
        case 5:
          uint64_t v24 = CSThread::GetRegisterValue((uint64_t)a3, *(unsigned int *)(v13 + 8), 2, 0, (uint64_t)&v30);
          uint64_t v29 = v24;
          if (!v30) {
            return 0;
          }
          int v21 = (tree *)v24;
          goto LABEL_35;
        case 6:
        case 7:
          v28[1] = a5;
          v28[2] = 0;
          int v27 = 0;
          v28[0] = a3;
          CSBinaryDataRef::CSBinaryDataRef((CSBinaryDataRef *)v26, *(const unsigned __int8 **)(v13 + 8), *(unsigned int *)(v13 + 16), 0);
          if (a3[9]) {
            char v23 = 8;
          }
          else {
            char v23 = 4;
          }
          v26[17] = v23;
          if (CSDwarfExpression::Evaluate((uint64_t (*)(uint64_t, void, char *))DWARFExpressionReadMemoryCallback, (uint64_t (*)(uint64_t, uint64_t, char *))DWARFExpressionReadRegisterCallback, (uint64_t)v28, (CSBinaryDataRef *)v26, 0, *(unsigned int *)(v13 + 16), 0, &v27))
          {
            goto LABEL_29;
          }
          if (*(_DWORD *)v13 == 7)
          {
            CSThread::SetRegisterValue((uint64_t)a6, a2, 0, (uint64_t)v27);
          }
          else if (mapped_memory_read_pointer(a5, v27, &v29))
          {
LABEL_29:
            CSThread::SetRegisterIsValid((uint64_t)a6, a2, 0, 0);
            uint64_t v19 = 0;
          }
          else
          {
            CSThread::SetRegisterValue((uint64_t)a6, a2, 0, v29);
          }
          CSCppAddressSet::sort((CSCppAddressSet *)v26);
          return v19;
        default:
          goto LABEL_22;
      }
      return v19;
    }
    uint64_t v13 = v17;
  }
  if (v13) {
    goto LABEL_17;
  }
LABEL_22:
  uint64_t v19 = 0;
  if ((*(unsigned int (**)(unsigned char *, void))(*(void *)a3 + 48))(a3, 0) == a2)
  {
    uint64_t v22 = CSThread::GetRegisterValue((uint64_t)a3, *(unsigned int *)(a4 + 16), 2, 0, (uint64_t)&v30);
    if (v30)
    {
      return CSThread::SetSP(a6, v22 + *(int *)(a4 + 20));
    }
    else
    {
LABEL_30:
      CSThread::SetRegisterIsValid((uint64_t)a6, a2, 0, 0);
      return 0;
    }
  }
  return v19;
}

void sub_1B9079054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CSCppAddressSet::sort((CSCppAddressSet *)va);
  _Unwind_Resume(a1);
}

char *DWARFExpressionReadMemoryCallback(uint64_t a1, tree *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  int v5 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v16 = 0;
  mach_error_t v6 = mapped_memory_read(v4, a2, *((void *)a3 + 1), &v16);
  if (v6)
  {
    long long v7 = DWARFExpressionReadMemoryCallback(void *,unsigned long long,CSDwarfExpression::Value *)::g_expr_error;
    if (mach_error_string(v6)) {
      snprintf(DWARFExpressionReadMemoryCallback(void *,unsigned long long,CSDwarfExpression::Value *)::g_expr_error, 0x400uLL, "memory read of %u bytes at address 0x%8.8llx failed: %s");
    }
    else {
      snprintf(DWARFExpressionReadMemoryCallback(void *,unsigned long long,CSDwarfExpression::Value *)::g_expr_error, 0x400uLL, "memory read of %u bytes at address 0x%8.8llx failed: 0x%8.8x");
    }
  }
  else if (v16)
  {
    unsigned int v8 = *a3;
    if (v8 > 8 || ((1 << v8) & 0x1E2) == 0)
    {
      if (v8 == 128)
      {
        long long v7 = 0;
        *((void *)a3 + 4) = v16;
      }
      else
      {
        long long v7 = DWARFExpressionReadMemoryCallback(void *,unsigned long long,CSDwarfExpression::Value *)::g_expr_error;
        snprintf(DWARFExpressionReadMemoryCallback(void *,unsigned long long,CSDwarfExpression::Value *)::g_expr_error, 0x400uLL, "Unsupported DW_ATE encoding in value argument: %u");
      }
    }
    else
    {
      unsigned int v15 = 0;
      CSBinaryDataRef::CSBinaryDataRef((CSBinaryDataRef *)v14, v16, *((void *)a3 + 1), v5 != 0);
      unint64_t Max64 = CSBinaryDataRef::GetMax64((CSBinaryDataRef *)v14, &v15, *((_DWORD *)a3 + 2));
      *((void *)a3 + 4) = Max64;
      if (*a3 - 5 <= 1)
      {
        unint64_t v11 = *((void *)a3 + 1);
        if (v11 <= 7)
        {
          char v12 = 8 * v11;
          if ((Max64 >> (v12 - 1))) {
            *((void *)a3 + 4) = (-1 << v12) | Max64;
          }
        }
      }
      CSCppAddressSet::sort((CSCppAddressSet *)v14);
      return 0;
    }
  }
  else
  {
    long long v7 = DWARFExpressionReadMemoryCallback(void *,unsigned long long,CSDwarfExpression::Value *)::g_expr_error;
    snprintf(DWARFExpressionReadMemoryCallback(void *,unsigned long long,CSDwarfExpression::Value *)::g_expr_error, 0x400uLL, "memory read of %u bytes at address 0x%8.8llx failed: NULL data returned");
  }
  return v7;
}

void sub_1B907921C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  CSCppAddressSet::sort((CSCppAddressSet *)va);
  _Unwind_Resume(a1);
}

char *DWARFExpressionReadRegisterCallback(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  *(unsigned char *)a3 = 7;
  uint64_t v5 = 8;
  if (!*(unsigned char *)(v4 + 9)) {
    uint64_t v5 = 4;
  }
  *(void *)(a3 + 8) = v5;
  char v8 = 0;
  *(void *)(a3 + 32) = CSThread::GetRegisterValue(v4, a2, 2, 0xFFFFFFFFLL, (uint64_t)&v8);
  if (v8) {
    return 0;
  }
  mach_error_t v6 = DWARFExpressionReadRegisterCallback(void *,unsigned long long,CSDwarfExpression::Value *)::g_expr_error;
  snprintf(DWARFExpressionReadRegisterCallback(void *,unsigned long long,CSDwarfExpression::Value *)::g_expr_error, 0x400uLL, "failed to read register number: %llu", a2);
  return v6;
}

void std::__introsort<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((void *)a2 - 3) < *(void *)(v10 + 8))
                {
                  long long v114 = *(_OWORD *)v10;
                  long long v123 = *(_OWORD *)(v10 + 16);
                  long long v44 = *(a2 - 1);
                  *(_OWORD *)unint64_t v10 = *(a2 - 2);
                  *(_OWORD *)(v10 + 16) = v44;
                  *(a2 - 2) = v114;
                  *(a2 - 1) = v123;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>((long long *)v10, (long long *)(v10 + 32), a2 - 2);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(v10, v10 + 32, v10 + 64, (uint64_t)(a2 - 2));
                break;
              case 5uLL:
                int v45 = (long long *)(v10 + 32);
                uint64_t v46 = (long long *)(v10 + 64);
                unsigned int v47 = (long long *)(v10 + 96);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(v10, v10 + 32, v10 + 64, v10 + 96);
                if (*((void *)a2 - 3) < *(void *)(v10 + 104))
                {
                  long long v48 = *v47;
                  long long v124 = *(_OWORD *)(v10 + 112);
                  long long v49 = *(a2 - 1);
                  long long *v47 = *(a2 - 2);
                  *(_OWORD *)(v10 + 112) = v49;
                  *(a2 - 2) = v48;
                  *(a2 - 1) = v124;
                  if (*(void *)(v10 + 104) < *(void *)(v10 + 72))
                  {
                    long long v51 = *v46;
                    long long v50 = *(_OWORD *)(v10 + 80);
                    long long v52 = *(_OWORD *)(v10 + 112);
                    long long *v46 = *v47;
                    *(_OWORD *)(v10 + 80) = v52;
                    long long *v47 = v51;
                    *(_OWORD *)(v10 + 112) = v50;
                    if (*(void *)(v10 + 72) < *(void *)(v10 + 40))
                    {
                      long long v54 = *v45;
                      long long v53 = *(_OWORD *)(v10 + 48);
                      long long v55 = *(_OWORD *)(v10 + 80);
                      *int v45 = *v46;
                      *(_OWORD *)(v10 + 48) = v55;
                      long long *v46 = v54;
                      *(_OWORD *)(v10 + 80) = v53;
                      if (*(void *)(v10 + 40) < *(void *)(v10 + 8))
                      {
                        long long v115 = *(_OWORD *)v10;
                        long long v125 = *(_OWORD *)(v10 + 16);
                        long long v56 = *(_OWORD *)(v10 + 48);
                        *(_OWORD *)unint64_t v10 = *v45;
                        *(_OWORD *)(v10 + 16) = v56;
                        *int v45 = v115;
                        *(_OWORD *)(v10 + 48) = v125;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 767)
          {
            uint64_t v57 = (long long *)(v10 + 32);
            BOOL v59 = (long long *)v10 == a2 || v57 == a2;
            if (a4)
            {
              if (!v59)
              {
                uint64_t v60 = 0;
                int v61 = (void *)v10;
                do
                {
                  int v62 = v57;
                  unint64_t v63 = v61[5];
                  if (v63 < v61[1])
                  {
                    uint64_t v64 = *(void *)v62;
                    long long v116 = *((_OWORD *)v61 + 3);
                    uint64_t v65 = v60;
                    while (1)
                    {
                      uint64_t v66 = v10 + v65;
                      long long v67 = *(_OWORD *)(v10 + v65 + 16);
                      *(_OWORD *)(v66 + 32) = *(_OWORD *)(v10 + v65);
                      *(_OWORD *)(v66 + 48) = v67;
                      if (!v65) {
                        break;
                      }
                      v65 -= 32;
                      if (v63 >= *(void *)(v66 - 24))
                      {
                        uint64_t v68 = v10 + v65 + 32;
                        goto LABEL_83;
                      }
                    }
                    uint64_t v68 = v10;
LABEL_83:
                    *(void *)uint64_t v68 = v64;
                    *(void *)(v68 + 8) = v63;
                    *(_OWORD *)(v68 + 16) = v116;
                  }
                  uint64_t v57 = v62 + 2;
                  v60 += 32;
                  int v61 = v62;
                }
                while (v62 + 2 != a2);
              }
            }
            else if (!v59)
            {
              do
              {
                char v102 = v57;
                unint64_t v103 = *(void *)(a1 + 40);
                if (v103 < *(void *)(a1 + 8))
                {
                  uint64_t v104 = *(void *)v57;
                  long long v119 = *(_OWORD *)(a1 + 48);
                  uint64_t v105 = v102;
                  do
                  {
                    long long v106 = *(v105 - 1);
                    *uint64_t v105 = *(v105 - 2);
                    v105[1] = v106;
                    unint64_t v107 = *((void *)v105 - 7);
                    v105 -= 2;
                  }
                  while (v103 < v107);
                  *(void *)uint64_t v105 = v104;
                  *((void *)v105 + 1) = v103;
                  v105[1] = v119;
                }
                uint64_t v57 = v102 + 2;
                a1 = (unint64_t)v102;
              }
              while (v102 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v69 = (v12 - 2) >> 1;
              int64_t v70 = v69;
              do
              {
                int64_t v71 = v70;
                if (v69 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  unint64_t v73 = v10 + 32 * v72;
                  if (2 * v71 + 2 < (uint64_t)v12)
                  {
                    unint64_t v74 = *(void *)(v73 + 8);
                    unint64_t v75 = *(void *)(v73 + 40);
                    v73 += 32 * (v74 < v75);
                    if (v74 < v75) {
                      uint64_t v72 = 2 * v71 + 2;
                    }
                  }
                  unint64_t v76 = *(void *)(v10 + 32 * v71 + 8);
                  if (*(void *)(v73 + 8) >= v76)
                  {
                    unint64_t v77 = v10 + 32 * v71;
                    uint64_t v78 = *(void *)v77;
                    long long v117 = *(_OWORD *)(v77 + 16);
                    do
                    {
                      uint64_t v79 = (_OWORD *)v77;
                      unint64_t v77 = v73;
                      long long v80 = *(_OWORD *)(v73 + 16);
                      *uint64_t v79 = *(_OWORD *)v73;
                      v79[1] = v80;
                      if (v69 < v72) {
                        break;
                      }
                      uint64_t v81 = (2 * v72) | 1;
                      unint64_t v73 = v10 + 32 * v81;
                      uint64_t v82 = 2 * v72 + 2;
                      if (v82 < (uint64_t)v12)
                      {
                        unint64_t v83 = *(void *)(v73 + 8);
                        unint64_t v84 = *(void *)(v73 + 40);
                        v73 += 32 * (v83 < v84);
                        if (v83 < v84) {
                          uint64_t v81 = v82;
                        }
                      }
                      uint64_t v72 = v81;
                    }
                    while (*(void *)(v73 + 8) >= v76);
                    *(void *)unint64_t v77 = v78;
                    *(void *)(v77 + 8) = v76;
                    *(_OWORD *)(v77 + 16) = v117;
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              uint64_t v85 = (unint64_t)v11 >> 5;
              do
              {
                uint64_t v86 = 0;
                long long v118 = *(_OWORD *)v10;
                long long v126 = *(_OWORD *)(v10 + 16);
                __int16 v87 = (_OWORD *)v10;
                do
                {
                  uint64_t v88 = &v87[2 * v86 + 2];
                  uint64_t v89 = (2 * v86) | 1;
                  uint64_t v90 = 2 * v86 + 2;
                  if (v90 < v85)
                  {
                    unint64_t v91 = *((void *)v88 + 1);
                    unint64_t v92 = *((void *)v88 + 5);
                    v88 += 2 * (v91 < v92);
                    if (v91 < v92) {
                      uint64_t v89 = v90;
                    }
                  }
                  long long v93 = v88[1];
                  *__int16 v87 = *v88;
                  v87[1] = v93;
                  __int16 v87 = v88;
                  uint64_t v86 = v89;
                }
                while (v89 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                a2 -= 2;
                if (v88 == a2)
                {
                  *uint64_t v88 = v118;
                  v88[1] = v126;
                }
                else
                {
                  long long v94 = a2[1];
                  *uint64_t v88 = *a2;
                  v88[1] = v94;
                  *a2 = v118;
                  a2[1] = v126;
                  uint64_t v95 = (uint64_t)v88 - v10 + 32;
                  if (v95 >= 33)
                  {
                    unint64_t v96 = (((unint64_t)v95 >> 5) - 2) >> 1;
                    unint64_t v97 = *((void *)v88 + 1);
                    if (*(void *)(v10 + 32 * v96 + 8) < v97)
                    {
                      uint64_t v98 = *(void *)v88;
                      long long v110 = v88[1];
                      do
                      {
                        long long v99 = v88;
                        uint64_t v88 = (long long *)(v10 + 32 * v96);
                        long long v100 = v88[1];
                        long long *v99 = *v88;
                        v99[1] = v100;
                        if (!v96) {
                          break;
                        }
                        unint64_t v96 = (v96 - 1) >> 1;
                      }
                      while (*(void *)(v10 + 32 * v96 + 8) < v97);
                      *(void *)uint64_t v88 = v98;
                      *((void *)v88 + 1) = v97;
                      v88[1] = v110;
                    }
                  }
                }
              }
              while (v85-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unsigned int v14 = (long long *)(v10 + 32 * (v12 >> 1));
          if ((unint64_t)v11 > 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>((long long *)a1, (long long *)(a1 + 32 * (v12 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>((long long *)(a1 + 32), v14 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>((long long *)(a1 + 64), (long long *)(a1 + 32 + 32 * v13), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(v14 - 2, v14, (long long *)(a1 + 32 + 32 * v13));
            long long v111 = *(_OWORD *)a1;
            long long v120 = *(_OWORD *)(a1 + 16);
            long long v15 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v15;
            long long *v14 = v111;
            v14[1] = v120;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>((long long *)(a1 + 32 * (v12 >> 1)), (long long *)a1, a2 - 2);
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v16 = *(void *)(a1 + 8);
          if (*(void *)(a1 - 24) < v16) {
            goto LABEL_12;
          }
          uint64_t v32 = *(void *)a1;
          long long v109 = *(_OWORD *)(a1 + 16);
          if (v16 >= *((void *)a2 - 3))
          {
            unint64_t v35 = a1 + 32;
            do
            {
              unint64_t v10 = v35;
              if (v35 >= (unint64_t)a2) {
                break;
              }
              unint64_t v36 = *(void *)(v35 + 8);
              v35 += 32;
            }
            while (v16 >= v36);
          }
          else
          {
            unint64_t v33 = a1;
            do
            {
              unint64_t v10 = v33 + 32;
              unint64_t v34 = *(void *)(v33 + 40);
              v33 += 32;
            }
            while (v16 >= v34);
          }
          int v37 = a2;
          if (v10 < (unint64_t)a2)
          {
            char v38 = a2;
            do
            {
              int v37 = v38 - 2;
              unint64_t v39 = *((void *)v38 - 3);
              v38 -= 2;
            }
            while (v16 < v39);
          }
          while (v10 < (unint64_t)v37)
          {
            long long v113 = *(_OWORD *)v10;
            long long v122 = *(_OWORD *)(v10 + 16);
            long long v40 = v37[1];
            *(_OWORD *)unint64_t v10 = *v37;
            *(_OWORD *)(v10 + 16) = v40;
            *int v37 = v113;
            v37[1] = v122;
            do
            {
              unint64_t v41 = *(void *)(v10 + 40);
              v10 += 32;
            }
            while (v16 >= v41);
            do
            {
              unint64_t v42 = *((void *)v37 - 3);
              v37 -= 2;
            }
            while (v16 < v42);
          }
          BOOL v4 = v10 - 32 >= a1;
          BOOL v5 = v10 - 32 == a1;
          if (v10 - 32 != a1)
          {
            long long v43 = *(_OWORD *)(v10 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 16) = v43;
          }
          a4 = 0;
          *(void *)(v10 - 32) = v32;
          *(void *)(v10 - 24) = v16;
          *(_OWORD *)(v10 - 16) = v109;
        }
        unint64_t v16 = *(void *)(a1 + 8);
LABEL_12:
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)a1;
        long long v108 = *(_OWORD *)(a1 + 16);
        do
        {
          unint64_t v19 = *(void *)(a1 + v17 + 40);
          v17 += 32;
        }
        while (v19 < v16);
        unint64_t v20 = a1 + v17;
        int v21 = a2;
        if (v17 == 32)
        {
          uint64_t v24 = a2;
          while (v20 < (unint64_t)v24)
          {
            uint64_t v22 = v24 - 2;
            unint64_t v25 = *((void *)v24 - 3);
            v24 -= 2;
            if (v25 < v16) {
              goto LABEL_22;
            }
          }
          uint64_t v22 = v24;
        }
        else
        {
          do
          {
            uint64_t v22 = v21 - 2;
            unint64_t v23 = *((void *)v21 - 3);
            v21 -= 2;
          }
          while (v23 >= v16);
        }
LABEL_22:
        unint64_t v10 = v20;
        if (v20 < (unint64_t)v22)
        {
          uint64_t v26 = v22;
          do
          {
            long long v112 = *(_OWORD *)v10;
            long long v121 = *(_OWORD *)(v10 + 16);
            long long v27 = v26[1];
            *(_OWORD *)unint64_t v10 = *v26;
            *(_OWORD *)(v10 + 16) = v27;
            *uint64_t v26 = v112;
            v26[1] = v121;
            do
            {
              unint64_t v28 = *(void *)(v10 + 40);
              v10 += 32;
            }
            while (v28 < v16);
            do
            {
              unint64_t v29 = *((void *)v26 - 3);
              v26 -= 2;
            }
            while (v29 >= v16);
          }
          while (v10 < (unint64_t)v26);
        }
        if (v10 - 32 != a1)
        {
          long long v30 = *(_OWORD *)(v10 - 16);
          *(_OWORD *)a1 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 16) = v30;
        }
        *(void *)(v10 - 32) = v18;
        *(void *)(v10 - 24) = v16;
        *(_OWORD *)(v10 - 16) = v108;
        if (v20 >= (unint64_t)v22) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *,false>(a1, v10 - 32, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(a1, v10 - 32);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v31) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v10 - 32);
    if (!v31) {
      continue;
    }
    break;
  }
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(long long *result, long long *a2, long long *a3)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v4 = *((void *)a3 + 1);
  if (v3 >= *((void *)result + 1))
  {
    if (v4 < v3)
    {
      long long v9 = *a2;
      long long v8 = a2[1];
      long long v10 = a3[1];
      *a2 = *a3;
      a2[1] = v10;
      *a3 = v9;
      a3[1] = v8;
      if (*((void *)a2 + 1) < *((void *)result + 1))
      {
        long long v12 = *result;
        long long v11 = result[1];
        long long v13 = a2[1];
        *BOOL result = *a2;
        result[1] = v13;
        *a2 = v12;
        a2[1] = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v15 = *result;
      long long v14 = result[1];
      long long v16 = a2[1];
      *BOOL result = *a2;
      result[1] = v16;
      *a2 = v15;
      a2[1] = v14;
      if (*((void *)a3 + 1) >= *((void *)a2 + 1)) {
        return result;
      }
      long long v6 = *a2;
      long long v5 = a2[1];
      long long v17 = a3[1];
      *a2 = *a3;
      a2[1] = v17;
    }
    else
    {
      long long v6 = *result;
      long long v5 = result[1];
      long long v7 = a3[1];
      *BOOL result = *a3;
      result[1] = v7;
    }
    *a3 = v6;
    a3[1] = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 24) < *(void *)(a1 + 8))
      {
        long long v7 = *(_OWORD *)a1;
        long long v6 = *(_OWORD *)(a1 + 16);
        long long v8 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 32) = v7;
        *(_OWORD *)(a2 - 16) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>((long long *)a1, (long long *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      unint64_t v19 = (long long *)(a1 + 32);
      unint64_t v20 = (long long *)(a1 + 64);
      int v21 = (long long *)(a1 + 96);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(a1, a1 + 32, a1 + 64, a1 + 96);
      if (*(void *)(a2 - 24) < *(void *)(a1 + 104))
      {
        long long v23 = *v21;
        long long v22 = *(_OWORD *)(a1 + 112);
        long long v24 = *(_OWORD *)(a2 - 16);
        *int v21 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 112) = v24;
        *(_OWORD *)(a2 - 32) = v23;
        *(_OWORD *)(a2 - 16) = v22;
        if (*(void *)(a1 + 104) < *(void *)(a1 + 72))
        {
          long long v26 = *v20;
          long long v25 = *(_OWORD *)(a1 + 80);
          long long v27 = *(_OWORD *)(a1 + 112);
          long long *v20 = *v21;
          *(_OWORD *)(a1 + 80) = v27;
          *int v21 = v26;
          *(_OWORD *)(a1 + 112) = v25;
          if (*(void *)(a1 + 72) < *(void *)(a1 + 40))
          {
            long long v29 = *v19;
            long long v28 = *(_OWORD *)(a1 + 48);
            long long v30 = *(_OWORD *)(a1 + 80);
            *unint64_t v19 = *v20;
            *(_OWORD *)(a1 + 48) = v30;
            long long *v20 = v29;
            *(_OWORD *)(a1 + 80) = v28;
            if (*(void *)(a1 + 40) < *(void *)(a1 + 8))
            {
              long long v32 = *(_OWORD *)a1;
              long long v31 = *(_OWORD *)(a1 + 16);
              long long v33 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)a1 = *v19;
              *(_OWORD *)(a1 + 16) = v33;
              *unint64_t v19 = v32;
              *(_OWORD *)(a1 + 48) = v31;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v10 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = *(void *)(v10 + 8);
    if (v13 < *(void *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      long long v34 = *(_OWORD *)(v10 + 16);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 80);
        *(_OWORD *)(v16 + 96) = *(_OWORD *)(a1 + v15 + 64);
        *(_OWORD *)(v16 + 112) = v17;
        if (v15 == -64) {
          break;
        }
        v15 -= 32;
        if (v13 >= *(void *)(v16 + 40))
        {
          uint64_t v18 = a1 + v15 + 96;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *(void *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = v34;
      if (++v12 == 8) {
        return v10 + 32 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 32;
    v10 += 32;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(void *)(a4 + 8) < *(void *)(a3 + 8))
  {
    long long v9 = *(_OWORD *)a3;
    __n128 result = *(__n128 *)(a3 + 16);
    long long v10 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v10;
    *(_OWORD *)a4 = v9;
    *(__n128 *)(a4 + 16) = result;
    if (*(void *)(a3 + 8) < *(void *)(a2 + 8))
    {
      long long v11 = *(_OWORD *)a2;
      __n128 result = *(__n128 *)(a2 + 16);
      long long v12 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v12;
      *(_OWORD *)a3 = v11;
      *(__n128 *)(a3 + 16) = result;
      if (*(void *)(a2 + 8) < *(void *)(a1 + 8))
      {
        long long v13 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)(a1 + 16);
        long long v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v14;
        *(_OWORD *)a2 = v13;
        *(__n128 *)(a2 + 16) = result;
      }
    }
  }
  return result;
}

void *std::vector<CSCallFrameInfoForBinary::RegLocation>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CSCppFlatbufferRelocation>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (_DWORD *)a1[1];
    long long v5 = &v4[6 * a2];
    uint64_t v6 = 24 * a2;
    do
    {
      _DWORD *v4 = 2;
      v4 += 6;
      v6 -= 24;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B9079F08(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__list_imp<CSCallFrameInfoForBinary::RegLocations>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    unint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      long long v5 = (uint64_t *)v2[1];
      std::__list_imp<CSCallFrameInfoForBinary::RegLocations>::__delete_node[abi:ne180100]<>((int)a1, v2);
      unint64_t v2 = v5;
    }
  }
}

void std::__list_imp<CSCallFrameInfoForBinary::RegLocations>::__delete_node[abi:ne180100]<>(int a1, void *__p)
{
  uint64_t v3 = (void *)__p[2];
  if (v3)
  {
    __p[3] = v3;
    operator delete(v3);
  }

  operator delete(__p);
}

uint64_t **std::__tree<std::__value_type<unsigned int,CSCallFrameInfoForBinary::CIE>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSCallFrameInfoForBinary::CIE>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSCallFrameInfoForBinary::CIE>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  long long v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        long long v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        long long v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    long long v11 = operator new(0x48uLL);
    void v11[7] = **a4;
    v11[16] = 0;
    *((_OWORD *)v11 + 2) = 0u;
    *((_OWORD *)v11 + 3) = 0u;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *std::__list_imp<CSCallFrameInfoForBinary::RegLocations>::__create_node[abi:ne180100]<CSCallFrameInfoForBinary::RegLocations const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v7 = operator new(0x28uLL);
  *long long v7 = a2;
  v7[1] = a3;
  void v7[3] = 0;
  void v7[4] = 0;
  unsigned int v7[2] = 0;
  std::vector<CSCallFrameInfoForBinary::RegLocation>::__init_with_size[abi:ne180100]<CSCallFrameInfoForBinary::RegLocation*,CSCallFrameInfoForBinary::RegLocation*>(v7 + 2, *(const void **)a4, *(void *)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3));
  return v7;
}

void sub_1B907A100(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<CSCallFrameInfoForBinary::RegLocation>::__init_with_size[abi:ne180100]<CSCallFrameInfoForBinary::RegLocation*,CSCallFrameInfoForBinary::RegLocation*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<CSCppFlatbufferRelocation>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B907A174(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CSCppCFDataMemory::CSCppCFDataMemory(CSCppCFDataMemory *this, CFTypeRef cf)
{
  *(void *)this = &unk_1F12CA0B0;
  CFDataRef v3 = (const __CFData *)CFRetain(cf);
  *((void *)this + 1) = v3;
  *((void *)this + 2) = CFDataGetBytePtr(v3);
  *((void *)this + 3) = CFDataGetLength(*((CFDataRef *)this + 1));
}

void CSCppCFDataMemory::~CSCppCFDataMemory(CFTypeRef *this)
{
  *this = &unk_1F12CA0B0;
  CFRelease(this[1]);
}

{
  uint64_t vars8;

  CSCppCFDataMemory::~CSCppCFDataMemory(this);

  JUMPOUT(0x1BA9D1CD0);
}

uint64_t CSCppCFDataMemory::bytes_at(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)(a3 + a2) <= *(void *)(a1 + 24)) {
    return a2 + *(void *)(a1 + 16);
  }
  else {
    return 0;
  }
}

uint64_t CSCppCFDataMemory::footprint(CSCppCFDataMemory *this)
{
  return *((void *)this + 3) + 32;
}

void CSCppCFDataMemory::validate(CSCppCFDataMemory *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Unimplemented: ", 15);
  unint64_t v2 = utility_basename("/Library/Caches/com.apple.xbs/Sources/CoreSymbolication/CoreSymbolication/CSCppCFDataMemory.cpp");
  size_t v3 = strlen(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)":", 1);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v9, &v7);
  Exception::Exception(v6, &v7);
  exception = __cxa_allocate_exception(0x20uLL);
  Exception::Exception(exception, (uint64_t)v6);
}

void sub_1B907A384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  a19 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a19 + *(void *)(a19 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a20 = MEMORY[0x1E4FBA470] + 16;
  if (a33 < 0) {
    operator delete(a28);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA9D1C60](&a36);
  _Unwind_Resume(a1);
}

uint64_t CSCppCFDataMemory::is_task(CSCppCFDataMemory *this)
{
  return 0;
}

uint64_t CSCppCFDataMemory::is_dyld_shared_cache(CSCppCFDataMemory *this)
{
  return 0;
}

void *CSCppCFDataMemory::to_string@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CSCppCFDataMemory");
}

void AS::Operator::generate_owner(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a3 + 56) + 96 * *a2;
  uint64_t v15 = (void *)v6;
  unsigned int v19 = 0;
  int v18 = *(_DWORD *)(v6 + 88) | 0x420;
  std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long const&,unsigned long long const&,unsigned int,_CSArchitecture const&,char const* const&,void>(&v15, &v19, (void *)(a1 + 8), &kCSEndOfTime, (unsigned int *)&v18, (void *)(v6 + 56), (void *)(v6 + 16), a4);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(&v15, *(const void **)(v6 + 64), *(void *)(v6 + 72), (uint64_t)(*(void *)(v6 + 72) - *(void *)(v6 + 64)) >> 5);
  long long v7 = v15;
  uint64_t v8 = v16;
  if (v15 != v16)
  {
    uint64_t v9 = a2[1];
    unsigned int v10 = v15;
    do
    {
      long long v11 = (const char *)v10[3];
      if (!v11) {
        long long v11 = (const char *)v10[2];
      }
      if (strncmp(v11, "__PAGEZERO", 0xBuLL)) {
        *v10 += v9;
      }
      v10 += 4;
    }
    while (v10 != v8);
  }
  long long v12 = (void *)*a4;
  long long v13 = *(void **)(*a4 + 32);
  void v12[4] = v7;
  void v12[5] = v8;
  uint64_t v14 = v12[6];
  v12[6] = v17;
  uint64_t v15 = v13;
  uint64_t v17 = v14;
  if (v13)
  {
    uint64_t v16 = v13;
    operator delete(v13);
  }
}

void sub_1B907A5F0(_Unwind_Exception *exception_object)
{
  size_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void AS::LoadOperator::operator()(AS::LoadOperator *a1, uint64_t a2, SymbolicationSession *a3)
{
  AS::LoadOperator::generate_owners(a1, a3, (uint64_t *)&v6);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  _DWORD v4[2] = ___ZNK2AS12LoadOperatorclER17CSCppSymbolicatorR20SymbolicationSession_block_invoke;
  uint64_t v4[3] = &__block_descriptor_tmp_26;
  memset(v5, 0, sizeof(v5));
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(v5, v6, v7, (v7 - v6) >> 4);
  CSCppSymbolicator::apply_mutable_context_block(a2, (uint64_t)v4);
  uint64_t v8 = (char **)v5;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  uint64_t v8 = &v6;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
}

void sub_1B907A6C8(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  *(void *)(v2 - 24) = v2 - 48;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void AS::LoadOperator::generate_owners(AS::LoadOperator *this@<X0>, const SymbolicationSession *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((unsigned char *)this + 40))
  {
    uint64_t v6 = (long long *)*((void *)this + 2);
    for (uint64_t i = (long long *)*((void *)this + 3); v6 != i; ++v6)
    {
      long long v31 = *v6;
      AS::Operator::generate_owner((uint64_t)this, &v31, (uint64_t)a2, &v30);
      uint64_t v9 = (_OWORD *)a3[1];
      unint64_t v8 = a3[2];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v10 = ((uint64_t)v9 - *a3) >> 4;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v8 - *a3;
        if (v12 >> 3 > v11) {
          unint64_t v11 = v12 >> 3;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        unint64_t v36 = a3 + 2;
        uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)(a3 + 2), v13);
        uint64_t v15 = &v14[16 * v10];
        long long v32 = v14;
        long long v33 = v15;
        unint64_t v35 = &v14[16 * v16];
        *(_OWORD *)uint64_t v15 = v30;
        long long v30 = 0uLL;
        long long v34 = v15 + 16;
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__swap_out_circular_buffer(a3, &v32);
        uint64_t v17 = a3[1];
        std::__split_buffer<std::shared_ptr<CSCppSymbolOwner>>::~__split_buffer(&v32);
        int v18 = (std::__shared_weak_count *)*((void *)&v30 + 1);
        a3[1] = v17;
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        *uint64_t v9 = v30;
        a3[1] = (uint64_t)(v9 + 1);
      }
    }
  }
  else
  {
    AS::Operator::generate_owner((uint64_t)this, (void *)this + 2, (uint64_t)a2, &v31);
    unint64_t v19 = a3[2];
    unint64_t v20 = (_OWORD *)a3[1];
    if ((unint64_t)v20 >= v19)
    {
      uint64_t v21 = ((uint64_t)v20 - *a3) >> 4;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60) {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v19 - *a3;
      if (v23 >> 3 > v22) {
        unint64_t v22 = v23 >> 3;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      unint64_t v36 = a3 + 2;
      long long v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)(a3 + 2), v24);
      long long v26 = &v25[16 * v21];
      long long v32 = v25;
      long long v33 = v26;
      unint64_t v35 = &v25[16 * v27];
      *(_OWORD *)long long v26 = v31;
      long long v31 = 0uLL;
      long long v34 = v26 + 16;
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__swap_out_circular_buffer(a3, &v32);
      uint64_t v28 = a3[1];
      std::__split_buffer<std::shared_ptr<CSCppSymbolOwner>>::~__split_buffer(&v32);
      long long v29 = (std::__shared_weak_count *)*((void *)&v31 + 1);
      a3[1] = v28;
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
    }
    else
    {
      _OWORD *v20 = v31;
      a3[1] = (uint64_t)(v20 + 1);
    }
  }
}

void sub_1B907A914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v7 = va_arg(va1, void);
  std::__split_buffer<std::shared_ptr<CSCppSymbolOwner>>::~__split_buffer((void **)va1);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ___ZNK2AS12LoadOperatorclER17CSCppSymbolicatorR20SymbolicationSession_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  for (uint64_t i = *(uint64_t **)(a1 + 40); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      *((void *)&v7 + 1) = v6;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      *((void *)&v7 + 1) = 0;
    }
    *(void *)&long long v7 = v5;
    CSCppMutableContext::add_symbol_owner_no_copy(a2, &v7);
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1B907AA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c76_ZTSNSt3__16vectorINS_10shared_ptrI16CSCppSymbolOwnerEENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  _OWORD v2[2] = 0;
  return std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(v2, *(void **)(a2 + 32), *(void **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
}

void __destroy_helper_block_e8_32c76_ZTSNSt3__16vectorINS_10shared_ptrI16CSCppSymbolOwnerEENS_9allocatorIS3_EEEE(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 32);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void AS::LoadOperator::~LoadOperator(AS::LoadOperator *this)
{
  *(void *)this = &unk_1F12CA148;
  if (*((unsigned char *)this + 40))
  {
    uint64_t v2 = (void *)*((void *)this + 2);
    if (v2)
    {
      *((void *)this + 3) = v2;
      operator delete(v2);
    }
  }
}

{
  uint64_t vars8;

  AS::LoadOperator::~LoadOperator(this);

  JUMPOUT(0x1BA9D1CD0);
}

void AS::FullCreationOperator::generate_owners(AS::FullCreationOperator *this@<X0>, const SymbolicationSession *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = *((void *)a2 + 15) + 40 * *((void *)this + 2);
  uint64_t v7 = *(void *)(v6 + 16);
  for (uint64_t i = *(void *)(v6 + 24); v7 != i; v7 += 96)
  {
    __p[0] = (void *)v7;
    LODWORD(v30) = 0;
    int v31 = *(_DWORD *)(v7 + 88) | 0x420;
    std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long const&,unsigned long long const&,unsigned int,_CSArchitecture const&,char const* const&,void>(__p, (unsigned int *)&v30, (void *)this + 1, &kCSEndOfTime, (unsigned int *)&v31, (void *)(v7 + 56), (void *)(v7 + 16), v32);
    if (*(unsigned char *)(v7 + 48))
    {
      uint64_t v9 = (const char *)(v7 + 24);
      if (*(char *)(v7 + 47) < 0) {
        uint64_t v9 = *(const char **)v9;
      }
      CSCppSymbolOwner::set_version((size_t)v32[0], v9);
    }
    __p[0] = 0;
    __p[1] = 0;
    long long v34 = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(__p, *(const void **)(v7 + 64), *(void *)(v7 + 72), (uint64_t)(*(void *)(v7 + 72) - *(void *)(v7 + 64)) >> 5);
    uint64_t v10 = __p[0];
    unint64_t v11 = __p[1];
    if (__p[0] != __p[1])
    {
      uint64_t v12 = *((void *)this + 3);
      unint64_t v13 = __p[0];
      do
      {
        *v13 += v12;
        v13 += 4;
      }
      while (v13 != v11);
    }
    uint64_t v14 = v32[0];
    long long v15 = *((_OWORD *)v32[0] + 2);
    *((void *)v32[0] + 4) = v10;
    *((void *)v14 + 5) = v11;
    *(_OWORD *)__n128 __p = v15;
    uint64_t v16 = (_OWORD *)*((void *)v14 + 6);
    *((void *)v14 + 6) = v34;
    long long v34 = v16;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](a3, (long long *)v32);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v32[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32[1]);
    }
  }
  uint64_t v17 = (_OWORD *)*((void *)this + 5);
  for (uint64_t j = (_OWORD *)*((void *)this + 6); v17 != j; ++v17)
  {
    *(_OWORD *)long long v32 = *v17;
    AS::Operator::generate_owner((uint64_t)this, v32, (uint64_t)a2, &v30);
    unint64_t v20 = (_OWORD *)a3[1];
    unint64_t v19 = a3[2];
    if ((unint64_t)v20 >= v19)
    {
      uint64_t v21 = ((uint64_t)v20 - *a3) >> 4;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60) {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v19 - *a3;
      if (v23 >> 3 > v22) {
        unint64_t v22 = v23 >> 3;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      unint64_t v36 = a3 + 2;
      long long v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)(a3 + 2), v24);
      long long v26 = &v25[16 * v21];
      __p[0] = v25;
      __p[1] = v26;
      unint64_t v35 = &v25[16 * v27];
      *(_OWORD *)long long v26 = v30;
      long long v30 = 0uLL;
      long long v34 = v26 + 16;
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__swap_out_circular_buffer(a3, __p);
      uint64_t v28 = a3[1];
      std::__split_buffer<std::shared_ptr<CSCppSymbolOwner>>::~__split_buffer(__p);
      long long v29 = (std::__shared_weak_count *)*((void *)&v30 + 1);
      a3[1] = v28;
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
    }
    else
    {
      _OWORD *v20 = v30;
      a3[1] = (uint64_t)(v20 + 1);
    }
  }
}

void sub_1B907AD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void AS::FullCreationOperator::~FullCreationOperator(AS::FullCreationOperator *this)
{
  *(void *)this = &unk_1F12CA1A0;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F12CA1A0;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1BA9D1CD0);
}

void *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long const&,unsigned long long const&,unsigned int,_CSArchitecture const&,char const* const&,void>@<X0>(void *a1@<X1>, unsigned int *a2@<X2>, void *a3@<X3>, void *a4@<X4>, unsigned int *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0xE8uLL);
  __n128 result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long const&,unsigned long long const&,unsigned int,_CSArchitecture const&,char const* const&,std::allocator<CSCppSymbolOwner>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B907AF3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long const&,unsigned long long const&,unsigned int,_CSArchitecture const&,char const* const&,std::allocator<CSCppSymbolOwner>,0>(void *a1, void *a2, unsigned int *a3, void *a4, void *a5, unsigned int *a6, void *a7, void *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F12C6068;
  CSCppSymbolOwner::CSCppSymbolOwner(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_1B907AFB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t CSCppMutableContext::CSCppMutableContext(uint64_t a1, void **a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>((void *)a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

void **CSCppMutableContext::add_symbol_owner_no_copy(uint64_t *a1, long long *a2)
{
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](a1 + 6, a2);

  return std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](a1, a2);
}

uint64_t CSCppMutableContext::remove_symbol_owner(uint64_t a1, long long *a2)
{
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((uint64_t *)(a1 + 24), a2);
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner> *,std::shared_ptr<CSCppSymbolOwner> *,std::shared_ptr<CSCppSymbolOwner> *>((uint64_t)&v9, a2 + 1, *(long long **)(a1 + 8), (uint64_t)a2);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6 != v4)
  {
    do
    {
      uint64_t v7 = *(std::__shared_weak_count **)(v6 - 8);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v6 -= 16;
    }
    while (v6 != v5);
  }
  *(void *)(a1 + 8) = v5;
  return 1;
}

void **CSCppMutableContext::copy_symbol_owner@<X0>(CSCppMutableContext *this@<X0>, CSCppSymbolOwner *a2@<X1>, char a3@<W2>, long long *a4@<X8>)
{
  std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,CSCppSymbolOwner&,void>(a2, a4);
  uint64_t v8 = *(void *)a4;
  int v9 = *(_DWORD *)(*(void *)a4 + 108);
  if ((v9 & 0x800000) != 0) {
    unsigned int v10 = v9 & 0xFE7FFFFF | 0x1000000;
  }
  else {
    unsigned int v10 = v9 | 0x1000000;
  }
  *(_DWORD *)(v8 + 108) = v10;
  if (a3)
  {
    uint64_t v11 = *((void *)a2 + 10);
    if (v11)
    {
      *(void *)(v8 + 80) = v11;
      CSCppReferenceCount::retain(v11);
    }
  }
  return std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((uint64_t *)this + 6, a4);
}

void sub_1B907B15C(_Unwind_Exception *exception_object)
{
  size_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}