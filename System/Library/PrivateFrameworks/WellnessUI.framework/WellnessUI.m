uint64_t MultipleDataPointView.avgValueColour.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;

  v0 = type metadata accessor for ColorScheme();
  v1 = *(void *)(v0 - 8);
  v2 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  v6 = (char *)&v10 - v5;
  type metadata accessor for MultipleDataPointView();
  specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, MEMORY[0x263F18518], 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v6);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x263F18510], v0);
  v7 = static ColorScheme.== infix(_:_:)();
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  if (v7) {
    return static Color.black.getter();
  }
  else {
    return static Color.white.getter();
  }
}

uint64_t type metadata accessor for MultipleDataPointView()
{
  uint64_t result = type metadata singleton initialization cache for MultipleDataPointView;
  if (!type metadata singleton initialization cache for MultipleDataPointView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t MultipleDataPointView.average.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 24));
}

uint64_t MultipleDataPointView.avgValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointView.minValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointView.maxValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointView.totalValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointView.unit.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointView.dateLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointView.hasUnitString.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 52));
}

uint64_t MultipleDataPointView.averageLabelString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MultipleDataPointView() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointView.init(average:avgValueString:minValueString:maxValueString:totalValueString:unit:dateLabel:hasUnitString:averageLabelString:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, unint64_t a18)
{
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  *a9 = EnvironmentObject.init()();
  a9[1] = v23;
  v24 = (int *)type metadata accessor for MultipleDataPointView();
  v25 = (uint64_t *)((char *)a9 + v24[5]);
  uint64_t *v25 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  uint64_t result = swift_storeEnumTagMultiPayload();
  v27 = (char *)a9 + v24[6];
  *(void *)v27 = a1;
  v27[8] = a2 & 1;
  v28 = (uint64_t *)((char *)a9 + v24[7]);
  void *v28 = a3;
  v28[1] = a4;
  v29 = (uint64_t *)((char *)a9 + v24[8]);
  void *v29 = a5;
  v29[1] = a6;
  v30 = (uint64_t *)((char *)a9 + v24[9]);
  void *v30 = a7;
  v30[1] = a8;
  v31 = (uint64_t *)((char *)a9 + v24[10]);
  void *v31 = a10;
  v31[1] = a11;
  v32 = (uint64_t *)((char *)a9 + v24[11]);
  void *v32 = a12;
  v32[1] = a13;
  v33 = (uint64_t *)((char *)a9 + v24[12]);
  void *v33 = a14;
  v33[1] = a15;
  *((unsigned char *)a9 + v24[13]) = a16;
  uint64_t v34 = 0x65676172657641;
  if (a18) {
    uint64_t v34 = a17;
  }
  unint64_t v35 = 0xE700000000000000;
  if (a18) {
    unint64_t v35 = a18;
  }
  v36 = (uint64_t *)((char *)a9 + v24[14]);
  uint64_t *v36 = v34;
  v36[1] = v35;
  return result;
}

uint64_t MultipleDataPointView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v407 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  v405 = &v384[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v4);
  v406 = &v384[-v6];
  uint64_t v7 = type metadata accessor for FactItemHeroNumberView();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  v10 = &v384[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for ColorScheme();
  uint64_t v410 = *(void *)(v11 - 8);
  uint64_t v411 = v11;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  v408 = &v384[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v12);
  v409 = &v384[-v14];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v15 - 8);
  v415 = &v384[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v17 - 8);
  v416 = &v384[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = type metadata accessor for Font.TextStyle();
  uint64_t v417 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  v412 = &v384[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = &v384[-v22];
  v24 = (int *)type metadata accessor for MultipleDataPointView();
  uint64_t v25 = v1 + v24[12];
  if (!*(void *)(v25 + 8) || (v26 = (uint64_t *)(v1 + v24[7]), (v27 = (void *)v26[1]) == 0))
  {
    uint64_t result = AnyView.init<A>(_:)();
    *a1 = result;
    return result;
  }
  v400._object = *(void **)(v25 + 8);
  v401 = v10;
  uint64_t v402 = v3;
  v400._uint64_t countAndFlagsBits = *(void *)v25;
  v397._uint64_t countAndFlagsBits = *v26;
  v397._object = v27;
  uint64_t v28 = *MEMORY[0x263F1A6E0];
  v29 = *(void (**)(unsigned char *, void, uint64_t))(v417 + 104);
  v413 = v24;
  uint64_t v414 = v1;
  v398 = v29;
  uint64_t v399 = v417 + 104;
  v29(v23, v28, v19);
  v30 = (uint64_t *)(v414 + v413[9]);
  v31 = (void *)v30[1];
  if (v31 && (v32 = (uint64_t *)(v414 + v413[8]), (v33 = (void *)v32[1]) != 0))
  {
    uint64_t v394 = v8;
    uint64_t v395 = v7;
    v396 = a1;
    uint64_t v34 = *v30;
    uint64_t v404 = v19;
    uint64_t v35 = *v32;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v36._uint64_t countAndFlagsBits = 0;
    v36._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v36);
    v37._uint64_t countAndFlagsBits = v35;
    v37._object = v33;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v37);
    v38._uint64_t countAndFlagsBits = 9666786;
    v38._object = (void *)0xA300000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v38);
    v39._uint64_t countAndFlagsBits = v34;
    v39._object = v31;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v39);
    v40._uint64_t countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v40);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v41 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v43 = v42;
    char v45 = v44 & 1;
    LODWORD(v392._countAndFlagsBits) = *MEMORY[0x263F1A618];
    uint64_t countAndFlagsBits_low = LODWORD(v392._countAndFlagsBits);
    uint64_t v47 = type metadata accessor for Font.Design();
    uint64_t v48 = *(void *)(v47 - 8);
    v49 = *(void **)(v48 + 104);
    v391 = (void (*)(unsigned char *, uint64_t))(v48 + 104);
    v392._object = v49;
    v50 = v415;
    uint64_t v51 = countAndFlagsBits_low;
    uint64_t v52 = v47;
    uint64_t v387 = v47;
    ((void (*)(unsigned char *, uint64_t))v49)(v415, v51);
    v53 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v48 + 56);
    uint64_t v388 = v48 + 56;
    v389 = v53;
    v53(v50, 0, 1, v52);
    v403 = v23;
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?((uint64_t)v50, &demangling cache variable for type metadata for Font.Design?);
    uint64_t v54 = Text.font(_:)();
    uint64_t v56 = v55;
    LOBYTE(v48) = v57;
    swift_release();
    outlined consume of Text.Storage(v41, v43, v45);
    swift_bridgeObjectRelease();
    uint64_t v393 = Text.bold()();
    v406 = v59;
    uint64_t v407 = v58;
    LODWORD(v405) = v60;
    outlined consume of Text.Storage(v54, v56, v48 & 1);
    swift_bridgeObjectRelease();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v61._uint64_t countAndFlagsBits = 0;
    v61._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v61);
    uint64_t v386 = v413[11];
    long long v433 = *(_OWORD *)(v414 + v386);
    v390 = (void (*)(void))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v62._uint64_t countAndFlagsBits = Optional.description.getter();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v62);
    swift_bridgeObjectRelease();
    v63._uint64_t countAndFlagsBits = 0;
    v63._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v63);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v64 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v66 = v65;
    LOBYTE(v41) = v67 & 1;
    v68 = v412;
    uint64_t v69 = v404;
    v398(v412, *MEMORY[0x263F1A6D0], v404);
    v70 = v415;
    uint64_t v71 = v387;
    ((void (*)(unsigned char *, void, uint64_t))v392._object)(v415, LODWORD(v392._countAndFlagsBits), v387);
    v389(v70, 0, 1, v71);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?((uint64_t)v70, &demangling cache variable for type metadata for Font.Design?);
    v72 = *(void (**)(unsigned char *, uint64_t))(v417 + 8);
    v417 += 8;
    v391 = v72;
    v72(v68, v69);
    uint64_t v73 = Text.font(_:)();
    uint64_t v75 = v74;
    char v77 = v76;
    swift_release();
    LOBYTE(v71) = v77 & 1;
    outlined consume of Text.Storage(v64, v66, v41);
    swift_bridgeObjectRelease();
    LODWORD(v433) = static HierarchicalShapeStyle.secondary.getter();
    uint64_t v78 = Text.foregroundStyle<A>(_:)();
    uint64_t v80 = v79;
    char v82 = v81 & 1;
    uint64_t v83 = v73;
    v84 = v413;
    outlined consume of Text.Storage(v83, v75, v71);
    swift_bridgeObjectRelease();
    static Font.Weight.semibold.getter();
    v398 = (void (*)(unsigned char *, void, uint64_t))Text.fontWeight(_:)();
    v392._object = v85;
    LODWORD(v392._countAndFlagsBits) = v86;
    v415 = v87;
    uint64_t v88 = v80;
    uint64_t v89 = v414;
    outlined consume of Text.Storage(v78, v88, v82);
    swift_bridgeObjectRelease();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v90._uint64_t countAndFlagsBits = 0;
    v90._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v90);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v400);
    v91._uint64_t countAndFlagsBits = 0;
    v91._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v91);
    LocalizedStringKey.init(stringInterpolation:)();
    v92 = (void *)Text.init(_:tableName:bundle:comment:)();
    v400._uint64_t countAndFlagsBits = v93;
    v400._object = v92;
    LODWORD(v399) = v94;
    v412 = v95;
    LODWORD(v78) = *(unsigned __int8 *)(v89 + v84[13]);
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v96._uint64_t countAndFlagsBits = 0;
    v96._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v96);
    v97 = (uint64_t *)(v89 + v84[14]);
    uint64_t v99 = *v97;
    uint64_t v98 = v97[1];
    if (v78 == 1)
    {
      *(void *)&long long v433 = v99;
      *((void *)&v433 + 1) = v98;
      v100._uint64_t countAndFlagsBits = Optional.description.getter();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v100);
      swift_bridgeObjectRelease();
      v101._uint64_t countAndFlagsBits = 8250;
      v101._object = (void *)0xE200000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v101);
      LocalizedStringKey.init(stringInterpolation:)();
      uint64_t v102 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v387 = v103;
      uint64_t v388 = v102;
      int v385 = v104;
      v389 = v105;
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v106._uint64_t countAndFlagsBits = 0;
      v106._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v106);
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v397);
      v107._uint64_t countAndFlagsBits = 32;
      v107._object = (void *)0xE100000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v107);
      long long v433 = *(_OWORD *)(v89 + v386);
      v108._uint64_t countAndFlagsBits = Optional.description.getter();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v108);
      swift_bridgeObjectRelease();
      v109._uint64_t countAndFlagsBits = 0;
      v109._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v109);
      LocalizedStringKey.init(stringInterpolation:)();
      uint64_t v110 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v112 = v111;
      LODWORD(v416) = v113;
      v114 = v409;
      specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, MEMORY[0x263F18518], 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v409);
      uint64_t v116 = v410;
      uint64_t v115 = v411;
      v117 = v408;
      (*(void (**)(unsigned char *, void, uint64_t))(v410 + 104))(v408, *MEMORY[0x263F18510], v411);
      char v118 = static ColorScheme.== infix(_:_:)();
      v119 = *(void (**)(unsigned char *, uint64_t))(v116 + 8);
      v119(v117, v115);
      v119(v114, v115);
      if (v118) {
        uint64_t v120 = static Color.black.getter();
      }
      else {
        uint64_t v120 = static Color.white.getter();
      }
      *(void *)&long long v433 = v120;
      char v189 = v416 & 1;
      uint64_t v190 = Text.foregroundStyle<A>(_:)();
      uint64_t v192 = v191;
      char v194 = v193 & 1;
      outlined consume of Text.Storage(v110, v112, v189);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v195 = Text.bold()();
      uint64_t v197 = v196;
      char v199 = v198 & 1;
      outlined consume of Text.Storage(v190, v192, v194);
      swift_bridgeObjectRelease();
      char v200 = v385 & 1;
      uint64_t v202 = v387;
      uint64_t v201 = v388;
      uint64_t v411 = static Text.+ infix(_:_:)();
      uint64_t v414 = v203;
      v416 = v204;
      LODWORD(v413) = v205 & 1;
      outlined consume of Text.Storage(v195, v197, v199);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v201, v202, v200);
      swift_bridgeObjectRelease();
      uint64_t v206 = MEMORY[0x263F1A838];
      uint64_t v434 = MEMORY[0x263F1A838];
      uint64_t v435 = MEMORY[0x263F77350];
      uint64_t v207 = MEMORY[0x263F77350];
      uint64_t v208 = swift_allocObject();
      *(void *)&long long v433 = v208;
      uint64_t v209 = v393;
      v211 = v406;
      uint64_t v210 = v407;
      *(void *)(v208 + 16) = v393;
      *(void *)(v208 + 24) = v210;
      LODWORD(v410) = v405 & 1;
      *(unsigned char *)(v208 + 32) = v405 & 1;
      *(void *)(v208 + 40) = v211;
      *((void *)&v431 + 1) = v206;
      uint64_t OpaqueTypeConformance2 = v207;
      uint64_t v212 = swift_allocObject();
      *(void *)&long long v430 = v212;
      v213 = (void (*)(void, void, void))v398;
      object = v392._object;
      *(void *)(v212 + 16) = v398;
      *(void *)(v212 + 24) = object;
      LODWORD(v409) = v392._countAndFlagsBits & 1;
      *(unsigned char *)(v212 + 32) = v392._countAndFlagsBits & 1;
      *(void *)(v212 + 40) = v415;
      uint64_t v428 = v206;
      uint64_t v429 = v207;
      uint64_t v215 = swift_allocObject();
      uint64_t v427 = v215;
      uint64_t v216 = v411;
      uint64_t v217 = v414;
      *(void *)(v215 + 16) = v411;
      *(void *)(v215 + 24) = v217;
      *(unsigned char *)(v215 + 32) = (_BYTE)v413;
      *(void *)(v215 + 40) = v416;
      uint64_t v426 = 0;
      long long v424 = 0u;
      long long v425 = 0u;
      uint64_t v422 = v206;
      uint64_t v423 = MEMORY[0x263F77350];
      uint64_t v218 = swift_allocObject();
      uint64_t v420 = 0;
      uint64_t v421 = v218;
      uint64_t countAndFlagsBits = v400._countAndFlagsBits;
      v220 = v400._object;
      *(void *)(v218 + 16) = v400._object;
      *(void *)(v218 + 24) = countAndFlagsBits;
      LODWORD(v408) = v399 & 1;
      *(unsigned char *)(v218 + 32) = v399 & 1;
      *(void *)(v218 + 40) = v412;
      long long v418 = 0u;
      long long v419 = 0u;
      outlined copy of Text.Storage(v209, v210, v410);
      uint64_t v221 = (uint64_t)v220;
      swift_bridgeObjectRetain();
      uint64_t v222 = (uint64_t)v213;
      v223 = v392._object;
      outlined copy of Text.Storage(v222, (uint64_t)v392._object, (char)v409);
      swift_bridgeObjectRetain();
      uint64_t v224 = v414;
      LOBYTE(v220) = (_BYTE)v413;
      outlined copy of Text.Storage(v216, v414, (char)v413);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v221, countAndFlagsBits, (char)v408);
      swift_bridgeObjectRetain();
      v225 = v401;
      FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
      *((void *)&v431 + 1) = v402;
      uint64_t v226 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
      uint64_t v227 = v395;
      *(void *)&long long v433 = v395;
      *((void *)&v433 + 1) = v226;
      uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v430);
      View.componentSpacing(top:bottom:)();
      char v228 = (char)v220;
      uint64_t v229 = (uint64_t)v398;
      outlined consume of Text.Storage(v411, v224, v228);
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v394 + 8))(v225, v227);
      outlined init with take of View(&v430, (uint64_t)&v433);
    }
    else
    {
      *(void *)&long long v433 = v99;
      *((void *)&v433 + 1) = v98;
      v152._uint64_t countAndFlagsBits = Optional.description.getter();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v152);
      swift_bridgeObjectRelease();
      v153._uint64_t countAndFlagsBits = 8250;
      v153._object = (void *)0xE200000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v153);
      LocalizedStringKey.init(stringInterpolation:)();
      uint64_t v154 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v388 = v155;
      v389 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v154;
      LODWORD(v387) = v156;
      v390 = v157;
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v158._uint64_t countAndFlagsBits = 0;
      v158._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v158);
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v397);
      v159._uint64_t countAndFlagsBits = 0;
      v159._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v159);
      LocalizedStringKey.init(stringInterpolation:)();
      uint64_t v160 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v162 = v161;
      LODWORD(v416) = v163;
      v164 = v409;
      specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, MEMORY[0x263F18518], 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v409);
      uint64_t v166 = v410;
      uint64_t v165 = v411;
      v167 = v408;
      (*(void (**)(unsigned char *, void, uint64_t))(v410 + 104))(v408, *MEMORY[0x263F18510], v411);
      char v168 = static ColorScheme.== infix(_:_:)();
      v169 = *(void (**)(unsigned char *, uint64_t))(v166 + 8);
      v169(v167, v165);
      v169(v164, v165);
      if (v168) {
        uint64_t v170 = static Color.black.getter();
      }
      else {
        uint64_t v170 = static Color.white.getter();
      }
      *(void *)&long long v433 = v170;
      char v253 = v416 & 1;
      uint64_t v254 = Text.foregroundStyle<A>(_:)();
      uint64_t v256 = v255;
      char v258 = v257 & 1;
      outlined consume of Text.Storage(v160, v162, v253);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v259 = Text.bold()();
      uint64_t v261 = v260;
      char v263 = v262 & 1;
      outlined consume of Text.Storage(v254, v256, v258);
      swift_bridgeObjectRelease();
      char v264 = v387 & 1;
      uint64_t v266 = v388;
      uint64_t v265 = (uint64_t)v389;
      uint64_t v267 = static Text.+ infix(_:_:)();
      v413 = v268;
      uint64_t v414 = v269;
      LODWORD(v416) = v270 & 1;
      outlined consume of Text.Storage(v259, v261, v263);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v265, v266, v264);
      swift_bridgeObjectRelease();
      uint64_t v271 = MEMORY[0x263F1A838];
      uint64_t v272 = MEMORY[0x263F77350];
      uint64_t v434 = MEMORY[0x263F1A838];
      uint64_t v435 = MEMORY[0x263F77350];
      uint64_t v273 = swift_allocObject();
      *(void *)&long long v433 = v273;
      v275 = v406;
      uint64_t v274 = v407;
      *(void *)(v273 + 16) = v393;
      *(void *)(v273 + 24) = v274;
      LODWORD(v411) = v405 & 1;
      *(unsigned char *)(v273 + 32) = v405 & 1;
      *(void *)(v273 + 40) = v275;
      uint64_t OpaqueTypeConformance2 = 0;
      long long v430 = 0u;
      long long v431 = 0u;
      uint64_t v428 = v271;
      uint64_t v429 = v272;
      uint64_t v276 = swift_allocObject();
      uint64_t v427 = v276;
      uint64_t v277 = v267;
      *(void *)(v276 + 16) = v267;
      v279 = v413;
      uint64_t v278 = v414;
      *(void *)(v276 + 24) = v413;
      *(unsigned char *)(v276 + 32) = (_BYTE)v416;
      *(void *)(v276 + 40) = v278;
      uint64_t v426 = 0;
      long long v424 = 0u;
      long long v425 = 0u;
      uint64_t v422 = v271;
      uint64_t v423 = v272;
      uint64_t v280 = swift_allocObject();
      uint64_t v420 = 0;
      uint64_t v421 = v280;
      uint64_t v281 = v400._countAndFlagsBits;
      v282 = v400._object;
      *(void *)(v280 + 16) = v400._object;
      *(void *)(v280 + 24) = v281;
      LOBYTE(v259) = v399 & 1;
      *(unsigned char *)(v280 + 32) = v399 & 1;
      *(void *)(v280 + 40) = v412;
      long long v418 = 0u;
      long long v419 = 0u;
      uint64_t v209 = v393;
      outlined copy of Text.Storage(v393, v407, v411);
      swift_bridgeObjectRetain();
      LOBYTE(v275) = (_BYTE)v416;
      outlined copy of Text.Storage(v277, (uint64_t)v279, (char)v416);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage((uint64_t)v282, v281, v259);
      swift_bridgeObjectRetain();
      v283 = v401;
      FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
      *((void *)&v431 + 1) = v402;
      uint64_t v284 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
      uint64_t v285 = v395;
      *(void *)&long long v433 = v395;
      *((void *)&v433 + 1) = v284;
      uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v430);
      View.componentSpacing(top:bottom:)();
      outlined consume of Text.Storage(v277, (uint64_t)v279, (char)v275);
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v394 + 8))(v283, v285);
      outlined init with take of View(&v430, (uint64_t)&v433);
      uint64_t v229 = (uint64_t)v398;
      v223 = v392._object;
    }
    v286 = __swift_project_boxed_opaque_existential_1(&v433, v434);
    MEMORY[0x270FA5388](v286);
    (*(void (**)(unsigned char *))(v288 + 16))(&v384[-((v287 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    uint64_t v289 = AnyView.init<A>(_:)();
    outlined consume of Text.Storage(v229, (uint64_t)v223, v392._countAndFlagsBits & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage((uint64_t)v400._object, v400._countAndFlagsBits, v399 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v209, v407, v405 & 1);
    swift_bridgeObjectRelease();
    v391(v403, v404);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v433);
  }
  else
  {
    v122 = (uint64_t *)(v414 + v413[10]);
    v123 = (void *)v122[1];
    if (!v123)
    {
      uint64_t v151 = AnyView.init<A>(_:)();
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v417 + 8))(v23, v19);
      *a1 = v151;
      return result;
    }
    uint64_t v394 = v8;
    v392._uint64_t countAndFlagsBits = *v122;
    v392._object = v123;
    int v124 = *(unsigned __int8 *)(v414 + v413[13]);
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v125._uint64_t countAndFlagsBits = 0;
    v125._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v125);
    v126 = v413;
    uint64_t v127 = v414;
    v128 = (uint64_t *)(v414 + v413[14]);
    uint64_t v130 = *v128;
    uint64_t v129 = v128[1];
    uint64_t v395 = v7;
    v396 = a1;
    v403 = v23;
    uint64_t v404 = v19;
    if (v124 == 1)
    {
      *(void *)&long long v433 = v130;
      *((void *)&v433 + 1) = v129;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      v131._uint64_t countAndFlagsBits = Optional.description.getter();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v131);
      swift_bridgeObjectRelease();
      v132._uint64_t countAndFlagsBits = 8250;
      v132._object = (void *)0xE200000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v132);
      LocalizedStringKey.init(stringInterpolation:)();
      uint64_t v133 = Text.init(_:tableName:bundle:comment:)();
      v389 = v134;
      v390 = (void (*)(void))v133;
      LODWORD(v393) = v135;
      v391 = v136;
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v137._uint64_t countAndFlagsBits = 0;
      v137._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v137);
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v397);
      v138._uint64_t countAndFlagsBits = 32;
      v138._object = (void *)0xE100000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v138);
      long long v433 = *(_OWORD *)(v127 + v126[11]);
      v139._uint64_t countAndFlagsBits = Optional.description.getter();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v139);
      swift_bridgeObjectRelease();
      v140._uint64_t countAndFlagsBits = 0;
      v140._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v140);
      LocalizedStringKey.init(stringInterpolation:)();
      v397._uint64_t countAndFlagsBits = Text.init(_:tableName:bundle:comment:)();
      v397._object = v141;
      uint64_t v388 = v142;
      LODWORD(v387) = v143;
      v144 = v409;
      specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, MEMORY[0x263F18518], 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v409);
      uint64_t v146 = v410;
      uint64_t v145 = v411;
      v147 = v408;
      (*(void (**)(unsigned char *, void, uint64_t))(v410 + 104))(v408, *MEMORY[0x263F18510], v411);
      char v148 = static ColorScheme.== infix(_:_:)();
      v149 = *(void (**)(unsigned char *, uint64_t))(v146 + 8);
      v149(v147, v145);
      v149(v144, v145);
      if (v148) {
        uint64_t v150 = static Color.black.getter();
      }
      else {
        uint64_t v150 = static Color.white.getter();
      }
      *(void *)&long long v433 = v150;
      char v230 = v387 & 1;
      uint64_t v231 = v397._countAndFlagsBits;
      uint64_t v232 = v388;
      uint64_t v233 = Text.foregroundStyle<A>(_:)();
      uint64_t v235 = v234;
      char v237 = v236 & 1;
      outlined consume of Text.Storage(v231, v232, v230);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v238 = Text.bold()();
      uint64_t v240 = v239;
      char v242 = v241 & 1;
      outlined consume of Text.Storage(v233, v235, v237);
      swift_bridgeObjectRelease();
      char v243 = v393 & 1;
      v244 = (void (*)(void, void, void, void))v389;
      v245 = v390;
      v246 = (void *)static Text.+ infix(_:_:)();
      v397._uint64_t countAndFlagsBits = v247;
      v397._object = v246;
      uint64_t v393 = v248;
      char v250 = v249;
      outlined consume of Text.Storage(v238, v240, v242);
      swift_bridgeObjectRelease();
      uint64_t v251 = (uint64_t)v245;
      uint64_t v252 = (uint64_t)v244;
    }
    else
    {
      *(void *)&long long v433 = v130;
      *((void *)&v433 + 1) = v129;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      v171._uint64_t countAndFlagsBits = Optional.description.getter();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v171);
      swift_bridgeObjectRelease();
      v172._uint64_t countAndFlagsBits = 8250;
      v172._object = (void *)0xE200000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v172);
      LocalizedStringKey.init(stringInterpolation:)();
      uint64_t v173 = Text.init(_:tableName:bundle:comment:)();
      v389 = v174;
      v390 = (void (*)(void))v173;
      LODWORD(v393) = v175;
      v391 = v176;
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v177._uint64_t countAndFlagsBits = 0;
      v177._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v177);
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v397);
      v178._uint64_t countAndFlagsBits = 0;
      v178._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v178);
      LocalizedStringKey.init(stringInterpolation:)();
      v397._uint64_t countAndFlagsBits = Text.init(_:tableName:bundle:comment:)();
      v397._object = v179;
      uint64_t v388 = v180;
      LODWORD(v387) = v181;
      v182 = v409;
      specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, MEMORY[0x263F18518], 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v409);
      uint64_t v184 = v410;
      uint64_t v183 = v411;
      v185 = v408;
      (*(void (**)(unsigned char *, void, uint64_t))(v410 + 104))(v408, *MEMORY[0x263F18510], v411);
      char v186 = static ColorScheme.== infix(_:_:)();
      v187 = *(void (**)(unsigned char *, uint64_t))(v184 + 8);
      v187(v185, v183);
      v187(v182, v183);
      if (v186) {
        uint64_t v188 = static Color.black.getter();
      }
      else {
        uint64_t v188 = static Color.white.getter();
      }
      *(void *)&long long v433 = v188;
      char v290 = v387 & 1;
      uint64_t v291 = v397._countAndFlagsBits;
      uint64_t v292 = v388;
      uint64_t v293 = Text.foregroundStyle<A>(_:)();
      uint64_t v295 = v294;
      char v297 = v296 & 1;
      outlined consume of Text.Storage(v291, v292, v290);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v298 = Text.bold()();
      uint64_t v300 = v299;
      LOBYTE(v291) = v301 & 1;
      outlined consume of Text.Storage(v293, v295, v297);
      swift_bridgeObjectRelease();
      char v243 = v393 & 1;
      v303 = (void (*)(void, void, void, void))v389;
      v302 = v390;
      v304 = (void *)static Text.+ infix(_:_:)();
      v397._uint64_t countAndFlagsBits = v305;
      v397._object = v304;
      uint64_t v393 = v306;
      char v250 = v307;
      outlined consume of Text.Storage(v298, v300, v291);
      swift_bridgeObjectRelease();
      uint64_t v251 = (uint64_t)v302;
      uint64_t v252 = (uint64_t)v303;
    }
    outlined consume of Text.Storage(v251, v252, v243);
    v308 = v412;
    v309 = v398;
    swift_bridgeObjectRelease();
    LODWORD(v412) = v250 & 1;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v310._uint64_t countAndFlagsBits = 0;
    v310._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v310);
    long long v433 = *(_OWORD *)(v414 + v413[11]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v311._uint64_t countAndFlagsBits = Optional.description.getter();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v311);
    swift_bridgeObjectRelease();
    v312._uint64_t countAndFlagsBits = 0;
    v312._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v312);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v313 = Text.init(_:tableName:bundle:comment:)();
    v413 = v314;
    uint64_t v414 = v315;
    char v317 = v316 & 1;
    uint64_t v318 = v404;
    v309(v308, *MEMORY[0x263F1A6D0], v404);
    LODWORD(v398) = *MEMORY[0x263F1A618];
    uint64_t v319 = type metadata accessor for Font.Design();
    uint64_t v387 = v319;
    uint64_t v320 = *(void *)(v319 - 8);
    v390 = *(void (**)(void))(v320 + 104);
    uint64_t v399 = v320 + 104;
    v321 = v308;
    v322 = v415;
    v390();
    v323 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v320 + 56);
    uint64_t v388 = v320 + 56;
    v389 = v323;
    v323(v322, 0, 1, v319);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?((uint64_t)v322, &demangling cache variable for type metadata for Font.Design?);
    v324 = *(void (**)(unsigned char *, uint64_t))(v417 + 8);
    v417 += 8;
    v391 = v324;
    v324(v321, v318);
    uint64_t v325 = v313;
    v326 = v413;
    uint64_t v327 = Text.font(_:)();
    uint64_t v329 = v328;
    LOBYTE(v321) = v330;
    uint64_t v411 = v331;
    swift_release();
    LOBYTE(v322) = v321 & 1;
    outlined consume of Text.Storage(v325, (uint64_t)v326, v317);
    swift_bridgeObjectRelease();
    LODWORD(v433) = static HierarchicalShapeStyle.secondary.getter();
    uint64_t v332 = Text.foregroundStyle<A>(_:)();
    uint64_t v334 = v333;
    LOBYTE(v321) = v335 & 1;
    outlined consume of Text.Storage(v327, v329, (char)v322);
    swift_bridgeObjectRelease();
    static Font.Weight.semibold.getter();
    v413 = (int *)Text.fontWeight(_:)();
    uint64_t v414 = v336;
    uint64_t v411 = v337;
    LODWORD(v410) = v338 & 1;
    outlined consume of Text.Storage(v332, v334, (char)v321);
    swift_bridgeObjectRelease();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v339._uint64_t countAndFlagsBits = 0;
    v339._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v339);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v400);
    v340._uint64_t countAndFlagsBits = 0;
    v340._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v340);
    LocalizedStringKey.init(stringInterpolation:)();
    v408 = (unsigned char *)Text.init(_:tableName:bundle:comment:)();
    v409 = v341;
    v400._object = v342;
    LODWORD(v400._countAndFlagsBits) = v343 & 1;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v344._uint64_t countAndFlagsBits = 0;
    v344._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v344);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v392);
    v345._uint64_t countAndFlagsBits = 0;
    v345._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v345);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v346 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v348 = v347;
    char v350 = v349 & 1;
    v351 = v415;
    uint64_t v352 = v387;
    ((void (*)(unsigned char *, void, uint64_t))v390)(v415, v398, v387);
    v389(v351, 0, 1, v352);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?((uint64_t)v351, &demangling cache variable for type metadata for Font.Design?);
    uint64_t v353 = Text.font(_:)();
    uint64_t v355 = v354;
    LOBYTE(v352) = v356;
    swift_release();
    outlined consume of Text.Storage(v346, v348, v350);
    swift_bridgeObjectRelease();
    v357 = (unsigned char *)Text.bold()();
    v415 = v357;
    v416 = v358;
    uint64_t v360 = v359;
    uint64_t v399 = v359;
    v361 = v358;
    LOBYTE(v321) = v362 & 1;
    LODWORD(v398) = v362 & 1;
    outlined consume of Text.Storage(v353, v355, v352 & 1);
    swift_bridgeObjectRelease();
    uint64_t v363 = MEMORY[0x263F1A838];
    uint64_t v364 = MEMORY[0x263F77350];
    uint64_t v434 = MEMORY[0x263F1A838];
    uint64_t v435 = MEMORY[0x263F77350];
    uint64_t v365 = swift_allocObject();
    *(void *)&long long v433 = v365;
    *(void *)(v365 + 16) = v357;
    *(void *)(v365 + 24) = v360;
    *(unsigned char *)(v365 + 32) = (_BYTE)v321;
    *(void *)(v365 + 40) = v361;
    *((void *)&v431 + 1) = v363;
    uint64_t OpaqueTypeConformance2 = v364;
    uint64_t v366 = swift_allocObject();
    *(void *)&long long v430 = v366;
    v368 = v413;
    uint64_t v367 = v414;
    uint64_t v369 = v411;
    *(void *)(v366 + 16) = v413;
    *(void *)(v366 + 24) = v369;
    LOBYTE(v321) = v410;
    *(unsigned char *)(v366 + 32) = v410;
    *(void *)(v366 + 40) = v367;
    uint64_t v428 = v363;
    uint64_t v429 = v364;
    uint64_t v370 = swift_allocObject();
    uint64_t v427 = v370;
    uint64_t v371 = v393;
    *(void *)(v370 + 16) = v397._object;
    *(void *)(v370 + 24) = v371;
    LOBYTE(v361) = (_BYTE)v412;
    *(unsigned char *)(v370 + 32) = (_BYTE)v412;
    *(void *)(v370 + 40) = v397._countAndFlagsBits;
    uint64_t v426 = 0;
    long long v424 = 0u;
    long long v425 = 0u;
    uint64_t v422 = v363;
    uint64_t v423 = v364;
    uint64_t v372 = swift_allocObject();
    uint64_t v420 = 0;
    uint64_t v421 = v372;
    v374 = v408;
    v373 = v409;
    v375 = v400._object;
    *(void *)(v372 + 16) = v408;
    *(void *)(v372 + 24) = v375;
    LOBYTE(v353) = v400._countAndFlagsBits;
    *(unsigned char *)(v372 + 32) = v400._countAndFlagsBits;
    *(void *)(v372 + 40) = v373;
    long long v418 = 0u;
    long long v419 = 0u;
    outlined copy of Text.Storage((uint64_t)v415, v399, (char)v398);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage((uint64_t)v368, v369, (char)v321);
    swift_bridgeObjectRetain();
    v376 = v397._object;
    uint64_t v377 = v393;
    outlined copy of Text.Storage((uint64_t)v397._object, v393, (char)v361);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage((uint64_t)v374, (uint64_t)v375, v353);
    swift_bridgeObjectRetain();
    v378 = v401;
    FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
    uint64_t v379 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
    v380 = v406;
    uint64_t v381 = v395;
    View.componentSpacing(top:bottom:)();
    (*(void (**)(unsigned char *, uint64_t))(v394 + 8))(v378, v381);
    uint64_t v382 = v407;
    uint64_t v383 = v402;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v407 + 16))(v405, v380, v402);
    *(void *)&long long v433 = v381;
    *((void *)&v433 + 1) = v379;
    swift_getOpaqueTypeConformance2();
    uint64_t v289 = AnyView.init<A>(_:)();
    outlined consume of Text.Storage((uint64_t)v408, (uint64_t)v400._object, v400._countAndFlagsBits);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage((uint64_t)v413, v411, v410);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage((uint64_t)v415, v399, (char)v398);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage((uint64_t)v376, v377, (char)v412);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v382 + 8))(v380, v383);
    uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v391)(v403, v404);
  }
  uint64_t *v396 = v289;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MultipleDataPointView()
{
  return MEMORY[0x270F032C8]();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MultipleDataPointView()
{
  return MEMORY[0x270F032D8]();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MultipleDataPointView()
{
  return static View._viewListCount(inputs:)();
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  return specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, MEMORY[0x263F18518], 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

{
  return specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content, MEMORY[0x263F18D78], 0x5463696D616E7944, 0xEF657A6953657079, a1);
}

{
  return specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content, MEMORY[0x263F19980], 0xD000000000000013, 0x8000000261883600, a1);
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v23 = a4;
  uint64_t v9 = v5;
  uint64_t v11 = type metadata accessor for EnvironmentValues();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388]();
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v9, (uint64_t)v16, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(a5, v16, v17);
  }
  else
  {
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    uint64_t v20 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v20, v19))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v24 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      *(void *)(v21 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, v23, &v24);
      _os_log_impl(&dword_2617D4000, v20, v19, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x263E423E0](v22, -1, -1);
      MEMORY[0x263E423E0](v21, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t key path getter for EnvironmentValues.colorScheme : EnvironmentValues()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t key path setter for EnvironmentValues.colorScheme : EnvironmentValues(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.colorScheme.setter();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t outlined consume of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_2617D9898()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t outlined copy of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t lazy protocol witness table accessor for type Context and conformance Context(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with take of View(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in MultipleDataPointView()
{
  return swift_getOpaqueTypeConformance2();
}

char *initializeBufferWithCopyOfBuffer for MultipleDataPointView(char *a1, char **a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    *((void *)a1 + 1) = a2[1];
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    v10 = (char **)((char *)a2 + v8);
    uint64_t v11 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v9, v10, v12);
    }
    else
    {
      *(void *)uint64_t v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = &a1[v13];
    uint64_t v16 = (uint64_t)a2 + v13;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = *(unsigned char *)(v16 + 8);
    uint64_t v17 = &a1[v14];
    uint64_t v18 = (char **)((char *)a2 + v14);
    uint64_t v19 = v18[1];
    *(void *)uint64_t v17 = *v18;
    *((void *)v17 + 1) = v19;
    uint64_t v20 = a3[8];
    uint64_t v21 = a3[9];
    uint64_t v22 = &a1[v20];
    unint64_t v23 = (char **)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    *(void *)uint64_t v22 = *v23;
    *((void *)v22 + 1) = v24;
    uint64_t v25 = &a1[v21];
    v26 = (char **)((char *)a2 + v21);
    uint64_t v27 = v26[1];
    *(void *)uint64_t v25 = *v26;
    *((void *)v25 + 1) = v27;
    uint64_t v28 = a3[10];
    uint64_t v29 = a3[11];
    v30 = &a1[v28];
    v31 = (char **)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *(void *)v30 = *v31;
    *((void *)v30 + 1) = v32;
    v33 = &a1[v29];
    uint64_t v34 = (char **)((char *)a2 + v29);
    uint64_t v35 = v34[1];
    *(void *)v33 = *v34;
    *((void *)v33 + 1) = v35;
    uint64_t v36 = a3[12];
    uint64_t v37 = a3[13];
    Swift::String v38 = &a1[v36];
    Swift::String v39 = (char **)((char *)a2 + v36);
    uint64_t v40 = v39[1];
    *(void *)Swift::String v38 = *v39;
    *((void *)v38 + 1) = v40;
    a1[v37] = *((unsigned char *)a2 + v37);
    uint64_t v41 = a3[14];
    uint64_t v42 = &a1[v41];
    uint64_t v43 = (char **)((char *)a2 + v41);
    uint64_t v44 = v43[1];
    *(void *)uint64_t v42 = *v43;
    *((void *)v42 + 1) = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for MultipleDataPointView(id *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MultipleDataPointView(void *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)((char *)a1 + v8);
  v10 = (void *)(a2 + v8);
  id v11 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v9, v10, v12);
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = *(unsigned char *)(v16 + 8);
  uint64_t v17 = (void *)((char *)a1 + v14);
  uint64_t v18 = (void *)(a2 + v14);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = (void *)((char *)a1 + v20);
  unint64_t v23 = (void *)(a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (void *)((char *)a1 + v21);
  v26 = (void *)(a2 + v21);
  uint64_t v27 = v26[1];
  void *v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = a3[10];
  uint64_t v29 = a3[11];
  v30 = (void *)((char *)a1 + v28);
  v31 = (void *)(a2 + v28);
  uint64_t v32 = v31[1];
  void *v30 = *v31;
  v30[1] = v32;
  v33 = (void *)((char *)a1 + v29);
  uint64_t v34 = (void *)(a2 + v29);
  uint64_t v35 = v34[1];
  void *v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = a3[12];
  uint64_t v37 = a3[13];
  Swift::String v38 = (void *)((char *)a1 + v36);
  Swift::String v39 = (void *)(a2 + v36);
  uint64_t v40 = v39[1];
  *Swift::String v38 = *v39;
  v38[1] = v40;
  *((unsigned char *)a1 + v37) = *(unsigned char *)(a2 + v37);
  uint64_t v41 = a3[14];
  uint64_t v42 = (void *)((char *)a1 + v41);
  uint64_t v43 = (void *)(a2 + v41);
  uint64_t v44 = v43[1];
  *uint64_t v42 = *v43;
  v42[1] = v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MultipleDataPointView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  if (a1 != a2)
  {
    uint64_t v9 = a3[5];
    v10 = (void *)(a1 + v9);
    id v11 = (void *)(a2 + v9);
    outlined destroy of Font.Design?(a1 + v9, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v16 = *v15;
  *(unsigned char *)(v14 + 8) = *((unsigned char *)v15 + 8);
  *(void *)uint64_t v14 = v16;
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[9];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  void *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[10];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  void *v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[11];
  v30 = (void *)(a1 + v29);
  v31 = (void *)(a2 + v29);
  void *v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[12];
  v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  void *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v35 = a3[14];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  void *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Font.Design?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *initializeWithTake for MultipleDataPointView(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  uint64_t v15 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  uint64_t v16 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v16) = *(_OWORD *)((char *)a2 + v16);
  uint64_t v17 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *((unsigned char *)a1 + v17) = *((unsigned char *)a2 + v17);
  *(_OWORD *)((char *)a1 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
  return a1;
}

void *assignWithTake for MultipleDataPointView(void *a1, void *a2, int *a3)
{
  uint64_t v6 = (void *)*a1;
  *a1 = *a2;

  a1[1] = a2[1];
  if (a1 != a2)
  {
    uint64_t v7 = a3[5];
    id v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    outlined destroy of Font.Design?((uint64_t)a1 + v7, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = (void *)((char *)a1 + v13);
  uint64_t v17 = (void *)((char *)a2 + v13);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[9];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  void *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[10];
  v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  void *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[11];
  uint64_t v36 = (void *)((char *)a1 + v35);
  uint64_t v37 = (void *)((char *)a2 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  void *v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[12];
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *uint64_t v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease();
  uint64_t v45 = a3[14];
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  v46 = (void *)((char *)a1 + v45);
  uint64_t v47 = (void *)((char *)a2 + v45);
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  void *v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MultipleDataPointView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2617DA4F8);
}

uint64_t sub_2617DA4F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = (char *)a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for MultipleDataPointView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2617DA5CC);
}

void *sub_2617DA5CC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    id v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for MultipleDataPointView()
{
  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Environment<ColorScheme>.Content()
{
  if (!lazy cache variable for type metadata for Environment<ColorScheme>.Content)
  {
    type metadata accessor for ColorScheme();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<ColorScheme>.Content);
    }
  }
}

uint64_t sub_2617DA788()
{
  return MEMORY[0x263F1B710];
}

unint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  unint64_t v7 = v12[0];
  if (v6)
  {
    unint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

unint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(unint64_t *a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          unint64_t result = 0;
          *((unsigned char *)__dst + v10) = 0;
          *a1 = (unint64_t)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    unint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    unint64_t result = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    unint64_t result = _StringObject.sharedUTF8.getter();
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_9;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      uint64_t result = _StringGuts.copyUTF8(into:)();
      if (v5) {
        break;
      }
      if (result == v2) {
        return (uint64_t)v3;
      }
      __break(1u);
LABEL_9:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t outlined init with copy of Environment<ColorSchemeContrast>.Content(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t GenericMedCompletedLogSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GenericMedCompletedLogModel(v1, a1, (uint64_t (*)(void))type metadata accessor for GenericMedCompletedLogModel);
}

uint64_t GenericMedCompletedLogSnippet.text3.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for GenericMedCompletedLogSnippet() + 20);
  uint64_t v2 = *(void *)v1;
  outlined copy of Text.Storage(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for GenericMedCompletedLogSnippet()
{
  uint64_t result = type metadata singleton initialization cache for GenericMedCompletedLogSnippet;
  if (!type metadata singleton initialization cache for GenericMedCompletedLogSnippet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t GenericMedCompletedLogSnippet.text3.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v9 = v4 + *(int *)(type metadata accessor for GenericMedCompletedLogSnippet() + 20);
  outlined consume of Text.Storage(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + 8) = a2;
  *(unsigned char *)(v9 + 16) = a3 & 1;
  *(void *)(v9 + 24) = a4;
  return result;
}

uint64_t (*GenericMedCompletedLogSnippet.text3.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogSnippet.buttonTakenColor.getter()
{
  return GenericMedCompletedLogSnippet.buttonTakenColor.getter(MEMORY[0x263F1B3D8], MEMORY[0x263F1B3A0]);
}

uint64_t GenericMedCompletedLogSnippet.buttonSkippedColor.getter()
{
  return GenericMedCompletedLogSnippet.buttonTakenColor.getter(MEMORY[0x263F1B3C8], MEMORY[0x263F1B3B0]);
}

uint64_t GenericMedCompletedLogSnippet.buttonTakenColor.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  int64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v15 - v9;
  type metadata accessor for GenericMedCompletedLogSnippet();
  specialized Environment.wrappedValue.getter((uint64_t)v10);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x263F18510], v4);
  char v11 = static ColorScheme.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v13 = ((uint64_t (*)(char *, uint64_t))v12)(v10, v4);
  if (v11) {
    return a1(v13);
  }
  else {
    return a2(v13);
  }
}

uint64_t GenericMedCompletedLogSnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = (int *)type metadata accessor for GenericMedCompletedLogSnippet();
  uint64_t v6 = (uint64_t *)(a2 + v5[6]);
  type metadata accessor for Context();
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_0(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  *uint64_t v6 = EnvironmentObject.init()();
  v6[1] = v7;
  int64_t v8 = (uint64_t *)(a2 + v5[7]);
  *int64_t v8 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of GenericMedCompletedLogModel(a1, a2, (uint64_t (*)(void))type metadata accessor for GenericMedCompletedLogModel);
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 28)) == 1)
  {
    LocalizedStringKey.init(stringLiteral:)();
  }
  else
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v9._uint64_t countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v9);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(a1 + 8));
    v10._uint64_t countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v10);
    LocalizedStringKey.init(stringInterpolation:)();
  }
  uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v13 = v12;
  char v15 = v14;
  uint64_t v17 = v16;
  uint64_t result = outlined destroy of GenericMedCompletedLogModel(a1, (uint64_t (*)(void))type metadata accessor for GenericMedCompletedLogModel);
  uint64_t v19 = a2 + v5[5];
  *(void *)uint64_t v19 = v11;
  *(void *)(v19 + 8) = v13;
  *(unsigned char *)(v19 + 16) = v15 & 1;
  *(void *)(v19 + 24) = v17;
  return result;
}

uint64_t GenericMedCompletedLogSnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v188 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetBody<TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>>);
  uint64_t v183 = *(char **)(v1 - 8);
  uint64_t v184 = (char *)v1;
  MEMORY[0x270FA5388](v1);
  v182 = (char *)&v139 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for GenericMedCompletedLogSnippet();
  uint64_t v185 = *(void *)(v165 - 8);
  MEMORY[0x270FA5388](v165);
  uint64_t v186 = v3;
  uint64_t v187 = (uint64_t)&v139 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>>);
  uint64_t v172 = *(void *)(v4 - 8);
  uint64_t v173 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v170 = (char *)&v139 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v174 = *(void *)(v169 - 8);
  MEMORY[0x270FA5388](v169);
  Swift::String v171 = (char *)&v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SeparatorStyle();
  uint64_t v167 = *(void *)(v7 - 8);
  uint64_t v168 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v166 = (char *)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v9 - 8);
  Swift::String v158 = (char *)&v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v11 - 8);
  v157 = (char *)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for FactItemHeroNumberView();
  uint64_t v162 = *(void *)(v13 - 8);
  uint64_t v163 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v160 = (char *)&v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  uint64_t v179 = *(void *)(v15 - 8);
  uint64_t v180 = v15;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  v164 = (char *)&v139 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = v17;
  MEMORY[0x270FA5388](v16);
  Swift::String v178 = (char *)&v139 - v18;
  uint64_t v19 = type metadata accessor for StatusIndicatorView.IndicatorType();
  uint64_t v155 = *(void *)(v19 - 8);
  uint64_t v156 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v154 = (char *)&v139 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = type metadata accessor for StatusIndicatorView();
  uint64_t v177 = *(void *)(v175 - 8);
  uint64_t v21 = *(char **)(v177 + 64);
  uint64_t v22 = MEMORY[0x270FA5388](v175);
  Swift::String v159 = (char *)&v139 - ((unint64_t)(v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  int v181 = (char *)&v139 - v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v151 = (uint64_t)&v139 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = type metadata accessor for SnippetHeaderView();
  uint64_t v26 = MEMORY[0x270FA5388](v153);
  uint64_t v150 = (char *)&v139 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v152 = (uint64_t)&v139 - v28;
  uint64_t v29 = type metadata accessor for Font.TextStyle();
  uint64_t v176 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  v31 = (char *)&v139 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v32 - 8);
  uint64_t v34 = (char *)&v139 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for AppPunchout();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(void *)(v36 + 64);
  uint64_t v38 = MEMORY[0x270FA5388](v35);
  MEMORY[0x270FA5388](v38);
  uint64_t v40 = (char *)&v139 - v39;
  uint64_t v41 = (int *)type metadata accessor for GenericMedCompletedLogModel();
  if (*(unsigned char *)(v189 + v41[9]) != 1)
  {
    uint64_t v56 = v187;
    outlined init with copy of GenericMedCompletedLogModel(v189, v187, (uint64_t (*)(void))type metadata accessor for GenericMedCompletedLogSnippet);
    unint64_t v57 = (*(unsigned __int8 *)(v185 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80);
    uint64_t v58 = swift_allocObject();
    outlined init with take of GenericMedCompletedLogSnippet(v56, v58 + v57, (uint64_t (*)(void))type metadata accessor for GenericMedCompletedLogSnippet);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>);
    v59 = v182;
    SnippetBody.init(content:)();
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type SnippetBody<TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>> and conformance SnippetBody<A>, &demangling cache variable for type metadata for SnippetBody<TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>>);
    int v60 = v184;
    uint64_t v55 = View.eraseToAnyView()();
    uint64_t result = (*((uint64_t (**)(char *, char *))v183 + 1))(v59, v60);
    goto LABEL_9;
  }
  uint64_t v147 = v37;
  char v148 = (char *)&v139 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = v21;
  uint64_t v183 = v40;
  uint64_t v149 = v36;
  uint64_t v184 = v31;
  uint64_t v42 = (uint64_t *)(v189 + v41[12]);
  uint64_t v43 = v42[1];
  if (!v43) {
    goto LABEL_7;
  }
  uint64_t v44 = (uint64_t *)(v189 + v41[11]);
  uint64_t v45 = v44[1];
  if (!v45) {
    goto LABEL_7;
  }
  uint64_t v46 = (uint64_t)v34;
  uint64_t v47 = (uint64_t *)(v189 + v41[13]);
  uint64_t v48 = (void *)v47[1];
  if (!v48) {
    goto LABEL_7;
  }
  uint64_t v145 = *v42;
  uint64_t v146 = v45;
  uint64_t v144 = *v44;
  uint64_t v49 = *v47;
  v50 = v41;
  uint64_t v51 = v189;
  uint64_t v52 = v46;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v189 + v41[6], v46, &demangling cache variable for type metadata for AppPunchout?);
  uint64_t v53 = v149;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48))(v52, 1, v35) == 1)
  {
    outlined destroy of Font.Design?(v52, &demangling cache variable for type metadata for AppPunchout?);
LABEL_7:
    uint64_t result = AnyView.init<A>(_:)();
    uint64_t v55 = result;
    goto LABEL_9;
  }
  Swift::String v61 = *(void (**)(unint64_t, char *, char *))(v53 + 32);
  uint64_t v141 = v53 + 32;
  uint64_t v142 = v61;
  v61((unint64_t)v183, (char *)v52, (char *)v35);
  uint64_t v62 = *MEMORY[0x263F1A6E0];
  Swift::String v63 = *(void (**)(char *, uint64_t, uint64_t))(v176 + 104);
  uint64_t v143 = v29;
  v63(v184, v62, v29);
  uint64_t v64 = v51 + v50[14];
  v140._uint64_t countAndFlagsBits = v49;
  v140._object = v48;
  uint64_t v65 = (unsigned char *)v51;
  uint64_t v66 = v151;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v64, v151, &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v67 = v153;
  v68 = (char *)v35;
  uint64_t v69 = (uint64_t)v150;
  v70 = (uint64_t *)&v150[*(int *)(v153 + 20)];
  uint64_t *v70 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v71 = (uint64_t *)(v69 + *(int *)(v67 + 24));
  *uint64_t v71 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with take of SnippetHeaderModel?(v66, v69);
  uint64_t v72 = v152;
  outlined init with take of GenericMedCompletedLogSnippet(v69, v152, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_0(&lazy protocol witness table cache variable for type SnippetHeaderView and conformance SnippetHeaderView, (void (*)(uint64_t))type metadata accessor for SnippetHeaderView);
  swift_bridgeObjectRetain();
  uint64_t v73 = v146;
  swift_bridgeObjectRetain();
  uint64_t v153 = View.eraseToAnyView()();
  outlined destroy of GenericMedCompletedLogModel(v72, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  int v74 = *v65;
  if (*v65) {
    uint64_t v75 = v145;
  }
  else {
    uint64_t v75 = v144;
  }
  if (*v65) {
    uint64_t v76 = v43;
  }
  else {
    uint64_t v76 = v73;
  }
  if (v74) {
    char v77 = (unsigned int *)MEMORY[0x263F77778];
  }
  else {
    char v77 = (unsigned int *)MEMORY[0x263F77788];
  }
  swift_bridgeObjectRelease();
  uint64_t v207 = MEMORY[0x263F8D310];
  uint64_t v208 = MEMORY[0x263F779A0];
  uint64_t v205 = v75;
  uint64_t v206 = v76;
  (*(void (**)(char *, void, uint64_t))(v155 + 104))(v154, *v77, v156);
  StatusIndicatorView.init(message:type:showIndicator:)();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v78._uint64_t countAndFlagsBits = 0;
  v78._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v78);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v140);
  v79._uint64_t countAndFlagsBits = 0;
  v79._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v79);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v80 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v82 = v81;
  v157 = v68;
  char v84 = v83 & 1;
  uint64_t v85 = *MEMORY[0x263F1A618];
  uint64_t v86 = type metadata accessor for Font.Design();
  uint64_t v87 = *(void *)(v86 - 8);
  uint64_t v88 = (uint64_t)v158;
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 104))(v158, v85, v86);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v87 + 56))(v88, 0, 1, v86);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?(v88, &demangling cache variable for type metadata for Font.Design?);
  uint64_t v89 = Text.font(_:)();
  uint64_t v91 = v90;
  char v93 = v92;
  swift_release();
  LOBYTE(v85) = v93 & 1;
  outlined consume of Text.Storage(v80, v82, v84);
  swift_bridgeObjectRelease();
  uint64_t v94 = Text.bold()();
  uint64_t v96 = v95;
  char v98 = v97;
  uint64_t v100 = v99;
  outlined consume of Text.Storage(v89, v91, v85);
  swift_bridgeObjectRelease();
  uint64_t v101 = MEMORY[0x263F1A838];
  uint64_t v102 = MEMORY[0x263F77350];
  uint64_t v207 = MEMORY[0x263F1A838];
  uint64_t v208 = MEMORY[0x263F77350];
  uint64_t v103 = swift_allocObject();
  uint64_t v205 = v103;
  *(void *)(v103 + 16) = v94;
  *(void *)(v103 + 24) = v96;
  *(unsigned char *)(v103 + 32) = v98 & 1;
  *(void *)(v103 + 40) = v100;
  uint64_t v204 = 0;
  long long v202 = 0u;
  long long v203 = 0u;
  uint64_t v201 = 0;
  long long v199 = 0u;
  long long v200 = 0u;
  uint64_t v104 = v189 + *(int *)(v165 + 20);
  uint64_t v105 = *(void *)v104;
  uint64_t v106 = *(void *)(v104 + 8);
  char v107 = *(unsigned char *)(v104 + 16);
  uint64_t v108 = *(void *)(v104 + 24);
  uint64_t v197 = v101;
  uint64_t v198 = v102;
  uint64_t v109 = swift_allocObject();
  uint64_t v195 = 0;
  uint64_t v196 = v109;
  *(void *)(v109 + 16) = v105;
  *(void *)(v109 + 24) = v106;
  *(unsigned char *)(v109 + 32) = v107;
  *(void *)(v109 + 40) = v108;
  long long v193 = 0u;
  long long v194 = 0u;
  uint64_t v192 = 0;
  long long v190 = 0u;
  long long v191 = 0u;
  outlined copy of Text.Storage(v105, v106, v107);
  swift_bridgeObjectRetain();
  uint64_t v110 = v160;
  FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
  uint64_t v112 = v166;
  uint64_t v111 = v167;
  uint64_t v113 = v168;
  (*(void (**)(char *, void, uint64_t))(v167 + 104))(v166, *MEMORY[0x263F76988], v168);
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_0(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
  v114 = v178;
  uint64_t v115 = v163;
  View.separators(_:isOverride:)();
  (*(void (**)(char *, uint64_t))(v111 + 8))(v112, v113);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v110, v115);
  uint64_t v116 = v179;
  v117 = v164;
  char v118 = v114;
  uint64_t v119 = v180;
  (*(void (**)(char *, char *, uint64_t))(v179 + 16))(v164, v118, v180);
  uint64_t v120 = v177;
  v121 = v159;
  uint64_t v122 = v175;
  (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v159, v181, v175);
  unint64_t v123 = (*(unsigned __int8 *)(v116 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80);
  unint64_t v124 = (v161 + *(unsigned __int8 *)(v120 + 80) + v123) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80);
  uint64_t v125 = swift_allocObject();
  *(void *)(v125 + 16) = v153;
  (*(void (**)(unint64_t, char *, uint64_t))(v116 + 32))(v125 + v123, v117, v119);
  uint64_t v126 = v177;
  (*(void (**)(unint64_t, char *, uint64_t))(v177 + 32))(v125 + v124, v121, v122);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>);
  uint64_t v127 = v170;
  ComponentStack.init(content:)();
  uint64_t v128 = v187;
  outlined init with copy of GenericMedCompletedLogModel(v189, v187, (uint64_t (*)(void))type metadata accessor for GenericMedCompletedLogSnippet);
  uint64_t v129 = v148;
  uint64_t v130 = v149;
  Swift::String v131 = v157;
  (*(void (**)(char *, char *, char *))(v149 + 16))(v148, v183, v157);
  unint64_t v132 = (*(unsigned __int8 *)(v185 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80);
  unint64_t v133 = (v186 + *(unsigned __int8 *)(v130 + 80) + v132) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80);
  uint64_t v134 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet(v128, v134 + v132, (uint64_t (*)(void))type metadata accessor for GenericMedCompletedLogSnippet);
  v142(v134 + v133, v129, v131);
  uint64_t v135 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>>);
  v136 = v171;
  uint64_t v137 = v173;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v172 + 8))(v127, v137);
  uint64_t v205 = v137;
  uint64_t v206 = v135;
  swift_getOpaqueTypeConformance2();
  uint64_t v138 = v169;
  uint64_t v55 = View.eraseToAnyView()();
  swift_release();
  (*(void (**)(char *, uint64_t))(v174 + 8))(v136, v138);
  (*(void (**)(char *, uint64_t))(v179 + 8))(v178, v180);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v181, v175);
  (*(void (**)(char *, uint64_t))(v176 + 8))(v184, v143);
  uint64_t result = (*(uint64_t (**)(char *, char *))(v130 + 8))(v183, v131);
LABEL_9:
  *uint64_t v188 = v55;
  return result;
}

uint64_t closure #1 in GenericMedCompletedLogSnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a1;
  uint64_t v38 = type metadata accessor for StatusIndicatorView();
  uint64_t v33 = *(void *)(v38 - 8);
  uint64_t v5 = v33;
  uint64_t v6 = MEMORY[0x270FA5388](v38);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v8;
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v12 = v34;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18((char *)&v29 - v16, a2, v11);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v31 = v10;
  uint64_t v20 = v38;
  v19(v10, v35, v38);
  uint64_t v32 = v15;
  v18(v15, (uint64_t)v17, v11);
  v19(v8, (uint64_t)v10, v20);
  uint64_t v21 = v36;
  *(void *)uint64_t v36 = v37;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView));
  v18(&v21[*(int *)(v22 + 48)], (uint64_t)v15, v11);
  uint64_t v23 = &v21[*(int *)(v22 + 64)];
  uint64_t v24 = v30;
  uint64_t v25 = v38;
  v19(v23, (uint64_t)v30, v38);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v33 + 8);
  swift_retain_n();
  v26(v31, v25);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v34 + 8);
  v27(v17, v11);
  v26(v24, v25);
  v27(v32, v11);
  return swift_release();
}

void closure #2 in GenericMedCompletedLogSnippet.body.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + *(int *)(type metadata accessor for GenericMedCompletedLogSnippet() + 24));
  if (v1)
  {
    id v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();
  }
  else
  {
    type metadata accessor for Context();
    _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_0(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t closure #3 in GenericMedCompletedLogSnippet.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v91 = a1;
  uint64_t v106 = a2;
  uint64_t v3 = type metadata accessor for StatusIndicatorView.IndicatorType();
  uint64_t v102 = *(void *)(v3 - 8);
  uint64_t v103 = (void (*)(char *, char *, uint64_t))v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v101 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for StatusIndicatorView();
  uint64_t v104 = *(void *)(v5 - 8);
  uint64_t v105 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v116 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  v114 = (char *)&v90 - v8;
  uint64_t v93 = type metadata accessor for GenericMedCompletedLogSnippet();
  uint64_t v95 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  uint64_t v96 = v9;
  uint64_t v97 = (uint64_t)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FactItemHeroNumberView();
  uint64_t v99 = *(void *)(v10 - 8);
  uint64_t v100 = v10;
  MEMORY[0x270FA5388](v10);
  char v98 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v112 = *(void *)(v12 - 8);
  uint64_t v113 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v115 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v94 = (char *)&v90 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v111 = (char *)&v90 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color?);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  char v107 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v90 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for SashStandard.Title();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (uint64_t *)((char *)&v90 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v30 = type metadata accessor for SashStandard();
  MEMORY[0x270FA5388](v30 - 8);
  char v92 = (char *)&v90 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for SashStandardView();
  uint64_t v109 = *(void *)(v32 - 8);
  uint64_t v110 = v32;
  uint64_t v33 = MEMORY[0x270FA5388](v32);
  uint64_t v108 = (char *)&v90 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v36 = (char *)&v90 - v35;
  uint64_t v37 = (void *)(a1 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 32));
  uint64_t v38 = v37[1];
  void *v29 = *v37;
  v29[1] = v38;
  (*(void (**)(void *, void, uint64_t))(v27 + 104))(v29, *MEMORY[0x263F767F8], v26);
  uint64_t v39 = type metadata accessor for VisualProperty();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v25, 1, 1, v39);
  uint64_t v40 = type metadata accessor for Color();
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56);
  v41(v22, 1, 1, v40);
  v41(v107, 1, 1, v40);
  uint64_t v134 = 0;
  long long v133 = 0u;
  long long v132 = 0u;
  swift_bridgeObjectRetain();
  uint64_t v42 = v91;
  SashStandard.init(title:thumbnail:titleColor:backgroundColor:action:componentName:showOnWatch:)();
  char v107 = v36;
  SashStandardView.init(model:)();
  uint64_t v43 = v42;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v44 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v46 = v45;
  LOBYTE(v40) = v47;
  uint64_t v49 = v48;
  uint64_t v50 = MEMORY[0x263F1A838];
  uint64_t v51 = MEMORY[0x263F77350];
  *((void *)&v133 + 1) = MEMORY[0x263F1A838];
  uint64_t v134 = MEMORY[0x263F77350];
  uint64_t v52 = swift_allocObject();
  *(void *)&long long v132 = v52;
  *(void *)(v52 + 16) = v44;
  *(void *)(v52 + 24) = v46;
  *(unsigned char *)(v52 + 32) = v40 & 1;
  *(void *)(v52 + 40) = v49;
  uint64_t v131 = 0;
  long long v130 = 0u;
  long long v129 = 0u;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v53 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v55 = v54;
  LOBYTE(v40) = v56;
  uint64_t v58 = v57;
  uint64_t v127 = v50;
  uint64_t v128 = v51;
  uint64_t v59 = swift_allocObject();
  uint64_t v126 = v59;
  *(void *)(v59 + 16) = v53;
  *(void *)(v59 + 24) = v55;
  *(unsigned char *)(v59 + 32) = v40 & 1;
  *(void *)(v59 + 40) = v58;
  uint64_t v60 = v43 + *(int *)(v93 + 20);
  uint64_t v61 = *(void *)v60;
  uint64_t v62 = *(void *)(v60 + 8);
  LOBYTE(v40) = *(unsigned char *)(v60 + 16);
  uint64_t v63 = *(void *)(v60 + 24);
  uint64_t v124 = v50;
  uint64_t v125 = v51;
  uint64_t v64 = swift_allocObject();
  uint64_t v122 = 0;
  uint64_t v123 = v64;
  *(void *)(v64 + 16) = v61;
  *(void *)(v64 + 24) = v62;
  *(unsigned char *)(v64 + 32) = v40;
  *(void *)(v64 + 40) = v63;
  long long v120 = 0u;
  long long v121 = 0u;
  uint64_t v119 = 0;
  long long v117 = 0u;
  long long v118 = 0u;
  outlined copy of Text.Storage(v61, v62, v40);
  swift_bridgeObjectRetain();
  uint64_t v65 = v98;
  FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
  uint64_t v66 = v97;
  outlined init with copy of GenericMedCompletedLogModel(v43, v97, (uint64_t (*)(void))type metadata accessor for GenericMedCompletedLogSnippet);
  unint64_t v67 = (*(unsigned __int8 *)(v95 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
  uint64_t v68 = swift_allocObject();
  outlined init with take of GenericMedCompletedLogSnippet(v66, v68 + v67, (uint64_t (*)(void))type metadata accessor for GenericMedCompletedLogSnippet);
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_0(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
  uint64_t v69 = v94;
  uint64_t v70 = v100;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v65, v70);
  uint64_t v71 = v111;
  uint64_t v72 = v112;
  uint64_t v73 = v69;
  uint64_t v74 = v113;
  (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v111, v73, v113);
  *((void *)&v133 + 1) = MEMORY[0x263F8D310];
  uint64_t v134 = MEMORY[0x263F779A0];
  *(void *)&long long v132 = 0x646567676F4CLL;
  *((void *)&v132 + 1) = 0xE600000000000000;
  (*(void (**)(char *, void, void))(v102 + 104))(v101, *MEMORY[0x263F77778], v103);
  uint64_t v75 = v114;
  StatusIndicatorView.init(message:type:showIndicator:)();
  uint64_t v76 = v108;
  char v77 = *(void (**)(char *, char *, uint64_t))(v109 + 16);
  uint64_t v78 = v110;
  v77(v108, v107, v110);
  uint64_t v103 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
  v103(v115, v71, v74);
  uint64_t v79 = v104;
  uint64_t v102 = *(void *)(v104 + 16);
  uint64_t v80 = v75;
  uint64_t v81 = v105;
  ((void (*)(char *, char *, uint64_t))v102)(v116, v80, v105);
  uint64_t v82 = v106;
  v77(v106, v76, v78);
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView));
  uint64_t v84 = v113;
  v103(&v82[*(int *)(v83 + 48)], v115, v113);
  ((void (*)(char *, char *, uint64_t))v102)(&v82[*(int *)(v83 + 64)], v116, v81);
  uint64_t v85 = *(void (**)(char *, uint64_t))(v79 + 8);
  v85(v114, v81);
  uint64_t v86 = *(void (**)(char *, uint64_t))(v112 + 8);
  v86(v111, v84);
  uint64_t v87 = v110;
  uint64_t v88 = *(void (**)(char *, uint64_t))(v109 + 8);
  v88(v107, v110);
  v85(v116, v81);
  v86(v115, v84);
  return ((uint64_t (*)(char *, uint64_t))v88)(v108, v87);
}

uint64_t closure #1 in closure #3 in GenericMedCompletedLogSnippet.body.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)(a1 + *(int *)(type metadata accessor for GenericMedCompletedLogSnippet() + 24));
  if (v5)
  {
    uint64_t v6 = type metadata accessor for GenericMedCompletedLogModel();
    outlined init with copy of Environment<ColorSchemeContrast>.Content(a1 + *(int *)(v6 + 24), (uint64_t)v4, &demangling cache variable for type metadata for AppPunchout?);
    uint64_t v7 = type metadata accessor for AppPunchout();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v7) != 1)
    {
      id v9 = v5;
      dispatch thunk of Context.perform(appPunchout:)();

      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v4, v7);
    }
    __break(1u);
  }
  type metadata accessor for Context();
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_0(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #3 in GenericMedCompletedLogSnippet.body.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for GenericMedCompletedLogSnippet() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #3 in GenericMedCompletedLogSnippet.body.getter(v4, a1);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.colorSchemeContrast : EnvironmentValues()
{
  return EnvironmentValues.colorSchemeContrast.getter();
}

uint64_t sub_2617DD6E8()
{
  return EnvironmentValues.colorSchemeContrast.getter();
}

uint64_t outlined init with take of SnippetHeaderModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of GenericMedCompletedLogSnippet(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2617DD7DC()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2617DD868()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for StatusIndicatorView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return MEMORY[0x270FA0238](v0, v10, v11);
}

uint64_t partial apply for closure #1 in GenericMedCompletedLogSnippet.body.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for StatusIndicatorView() - 8);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return closure #1 in GenericMedCompletedLogSnippet.body.getter(v7, v1 + v4, v8, a1);
}

uint64_t sub_2617DDAA0()
{
  uint64_t v1 = (int *)type metadata accessor for GenericMedCompletedLogSnippet();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v18 = *(void *)(v5 + 64);
  uint64_t v7 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for GenericMedCompletedLogModel();
  uint64_t v9 = v0 + v3 + *(int *)(v8 + 24);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v7 + *(int *)(v8 + 56);
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v10, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(void *)(v7 + v1[5]), *(void *)(v7 + v1[5] + 8), *(unsigned char *)(v7 + v1[5] + 16));
  swift_bridgeObjectRelease();

  uint64_t v13 = v7 + v1[7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  uint64_t v15 = (v3 + v19 + v6) & ~v6;
  uint64_t v16 = v15 + v18;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v15, v4);

  return MEMORY[0x270FA0238](v0, v16, v2 | v6 | 7);
}

void partial apply for closure #2 in GenericMedCompletedLogSnippet.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for GenericMedCompletedLogSnippet() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for AppPunchout();

  closure #2 in GenericMedCompletedLogSnippet.body.getter(v0 + v2);
}

uint64_t lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in GenericMedCompletedLogSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

void *initializeBufferWithCopyOfBuffer for GenericMedCompletedLogSnippet(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    uint64_t v7 = (int *)type metadata accessor for GenericMedCompletedLogModel();
    uint64_t v8 = v7[6];
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for AppPunchout();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *((unsigned char *)v4 + v7[7]) = *((unsigned char *)a2 + v7[7]);
    uint64_t v16 = v7[8];
    uint64_t v17 = (void *)((char *)v4 + v16);
    uint64_t v18 = (void *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    *((unsigned char *)v4 + v7[9]) = *((unsigned char *)a2 + v7[9]);
    uint64_t v20 = v7[10];
    uint64_t v21 = (void *)((char *)v4 + v20);
    uint64_t v22 = (void *)((char *)a2 + v20);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = v7[11];
    uint64_t v25 = (void *)((char *)v4 + v24);
    uint64_t v26 = (void *)((char *)a2 + v24);
    uint64_t v27 = v26[1];
    void *v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = v7[12];
    uint64_t v29 = (void *)((char *)v4 + v28);
    uint64_t v30 = (void *)((char *)a2 + v28);
    uint64_t v31 = v30[1];
    void *v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = v7[13];
    uint64_t v33 = (void *)((char *)v4 + v32);
    uint64_t v34 = (void *)((char *)a2 + v32);
    uint64_t v35 = v34[1];
    void *v33 = *v34;
    v33[1] = v35;
    uint64_t v36 = v7[14];
    uint64_t v68 = (char *)a2 + v36;
    __dst = (char *)v4 + v36;
    uint64_t v37 = type metadata accessor for SnippetHeaderModel();
    uint64_t v67 = *(void *)(v37 - 8);
    uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v38(v68, 1, v37))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v68, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      uint64_t v40 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(__dst, v68, v40);
      uint64_t v41 = *(int *)(v37 + 20);
      uint64_t v42 = &__dst[v41];
      uint64_t v43 = &v68[v41];
      uint64_t v44 = *((void *)v43 + 1);
      *(void *)uint64_t v42 = *(void *)v43;
      *((void *)v42 + 1) = v44;
      uint64_t v45 = *(int *)(v37 + 24);
      uint64_t v46 = &__dst[v45];
      char v47 = &v68[v45];
      uint64_t v48 = *((void *)v47 + 1);
      *(void *)uint64_t v46 = *(void *)v47;
      *((void *)v46 + 1) = v48;
      uint64_t v49 = *(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v49(__dst, 0, 1, v37);
    }
    uint64_t v50 = a3[5];
    uint64_t v51 = (char *)v4 + v50;
    uint64_t v52 = (char *)a2 + v50;
    uint64_t v53 = *(void *)((char *)a2 + v50);
    uint64_t v54 = *(void *)((char *)a2 + v50 + 8);
    char v55 = *((unsigned char *)a2 + v50 + 16);
    outlined copy of Text.Storage(v53, v54, v55);
    *(void *)uint64_t v51 = v53;
    *((void *)v51 + 1) = v54;
    v51[16] = v55;
    *((void *)v51 + 3) = *((void *)v52 + 3);
    uint64_t v56 = a3[6];
    uint64_t v57 = a3[7];
    uint64_t v58 = (void *)((char *)v4 + v56);
    uint64_t v59 = (char *)a2 + v56;
    uint64_t v61 = *(void **)v59;
    uint64_t v60 = *((void *)v59 + 1);
    *uint64_t v58 = v61;
    v58[1] = v60;
    uint64_t v62 = (void *)((char *)v4 + v57);
    uint64_t v63 = (void *)((char *)a2 + v57);
    swift_bridgeObjectRetain();
    id v64 = v61;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v65 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v65 - 8) + 16))(v62, v63, v65);
    }
    else
    {
      *uint64_t v62 = *v63;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t destroy for GenericMedCompletedLogSnippet(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for GenericMedCompletedLogModel();
  uint64_t v5 = a1 + *(int *)(v4 + 24);
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + *(int *)(v4 + 56);
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v8, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(void *)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8), *(unsigned char *)(a1 + a2[5] + 16));
  swift_bridgeObjectRelease();

  uint64_t v11 = a1 + a2[7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for ColorScheme();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
    return v13(v11, v12);
  }
  else
  {
    return swift_release();
  }
}

uint64_t initializeWithCopy for GenericMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = (int *)type metadata accessor for GenericMedCompletedLogModel();
  uint64_t v7 = v6[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for AppPunchout();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(unsigned char *)(a1 + v6[7]) = *(unsigned char *)(a2 + v6[7]);
  uint64_t v14 = v6[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  *(unsigned char *)(a1 + v6[9]) = *(unsigned char *)(a2 + v6[9]);
  uint64_t v18 = v6[10];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = v6[11];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = v6[12];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  uint64_t v29 = v28[1];
  void *v27 = *v28;
  v27[1] = v29;
  uint64_t v30 = v6[13];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  uint64_t v33 = v32[1];
  void *v31 = *v32;
  v31[1] = v33;
  uint64_t v34 = v6[14];
  uint64_t v66 = (char *)(a2 + v34);
  __dst = (char *)(a1 + v34);
  uint64_t v35 = type metadata accessor for SnippetHeaderModel();
  uint64_t v65 = *(void *)(v35 - 8);
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v36(v66, 1, v35))
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v66, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    uint64_t v38 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(__dst, v66, v38);
    uint64_t v39 = *(int *)(v35 + 20);
    uint64_t v40 = &__dst[v39];
    uint64_t v41 = &v66[v39];
    uint64_t v42 = *((void *)v41 + 1);
    *(void *)uint64_t v40 = *(void *)v41;
    *((void *)v40 + 1) = v42;
    uint64_t v43 = *(int *)(v35 + 24);
    uint64_t v44 = &__dst[v43];
    uint64_t v45 = &v66[v43];
    uint64_t v46 = *((void *)v45 + 1);
    *(void *)uint64_t v44 = *(void *)v45;
    *((void *)v44 + 1) = v46;
    char v47 = *(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v47(__dst, 0, 1, v35);
  }
  uint64_t v48 = a3[5];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  uint64_t v51 = *(void *)(a2 + v48);
  uint64_t v52 = *(void *)(a2 + v48 + 8);
  char v53 = *(unsigned char *)(a2 + v48 + 16);
  outlined copy of Text.Storage(v51, v52, v53);
  *(void *)uint64_t v49 = v51;
  *(void *)(v49 + 8) = v52;
  *(unsigned char *)(v49 + 16) = v53;
  *(void *)(v49 + 24) = *(void *)(v50 + 24);
  uint64_t v54 = a3[6];
  uint64_t v55 = a3[7];
  uint64_t v56 = (void *)(a1 + v54);
  uint64_t v57 = a2 + v54;
  uint64_t v59 = *(void **)v57;
  uint64_t v58 = *(void *)(v57 + 8);
  *uint64_t v56 = v59;
  v56[1] = v58;
  uint64_t v60 = (void *)(a1 + v55);
  uint64_t v61 = (void *)(a2 + v55);
  swift_bridgeObjectRetain();
  id v62 = v59;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v63 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v63 - 8) + 16))(v60, v61, v63);
  }
  else
  {
    *uint64_t v60 = *v61;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for GenericMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for GenericMedCompletedLogModel();
  uint64_t v6 = v5[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for AppPunchout();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  *(unsigned char *)(a1 + v5[7]) = *(unsigned char *)(a2 + v5[7]);
  uint64_t v15 = v5[8];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v5[9]) = *(unsigned char *)(a2 + v5[9]);
  uint64_t v18 = v5[10];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v5[11];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = v5[12];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  void *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = v5[13];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  void *v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = v5[14];
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  uint64_t v33 = type metadata accessor for SnippetHeaderModel();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      uint64_t v38 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v31, v32, v38);
      uint64_t v39 = *(int *)(v33 + 20);
      uint64_t v40 = &v31[v39];
      uint64_t v41 = &v32[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      *((void *)v40 + 1) = *((void *)v41 + 1);
      uint64_t v42 = *(int *)(v33 + 24);
      uint64_t v43 = &v31[v42];
      uint64_t v44 = &v32[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      *((void *)v43 + 1) = *((void *)v44 + 1);
      uint64_t v45 = *(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v45(v31, 0, 1, v33);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v37)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v31, v32, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v67 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 24))(v31, v32, v67);
  uint64_t v68 = *(int *)(v33 + 20);
  uint64_t v69 = &v31[v68];
  uint64_t v70 = &v32[v68];
  *(void *)uint64_t v69 = *(void *)v70;
  *((void *)v69 + 1) = *((void *)v70 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v71 = *(int *)(v33 + 24);
  uint64_t v72 = &v31[v71];
  uint64_t v73 = &v32[v71];
  *(void *)uint64_t v72 = *(void *)v73;
  *((void *)v72 + 1) = *((void *)v73 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v47 = a3[5];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = a2 + v47;
  uint64_t v50 = *(void *)(a2 + v47);
  uint64_t v51 = *(void *)(a2 + v47 + 8);
  char v52 = *(unsigned char *)(a2 + v47 + 16);
  outlined copy of Text.Storage(v50, v51, v52);
  uint64_t v53 = *(void *)v48;
  uint64_t v54 = *(void *)(v48 + 8);
  char v55 = *(unsigned char *)(v48 + 16);
  *(void *)uint64_t v48 = v50;
  *(void *)(v48 + 8) = v51;
  *(unsigned char *)(v48 + 16) = v52;
  outlined consume of Text.Storage(v53, v54, v55);
  *(void *)(v48 + 24) = *(void *)(v49 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[6];
  uint64_t v57 = (void *)(a1 + v56);
  uint64_t v58 = a2 + v56;
  uint64_t v59 = *(void **)(a1 + v56);
  uint64_t v60 = *(void **)(a2 + v56);
  *uint64_t v57 = v60;
  id v61 = v60;

  v57[1] = *(void *)(v58 + 8);
  if (a1 != a2)
  {
    uint64_t v62 = a3[7];
    uint64_t v63 = (void *)(a1 + v62);
    id v64 = (void *)(a2 + v62);
    outlined destroy of Font.Design?(a1 + v62, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v65 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v65 - 8) + 16))(v63, v64, v65);
    }
    else
    {
      *uint64_t v63 = *v64;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of GenericMedCompletedLogModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for GenericMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = (int *)type metadata accessor for GenericMedCompletedLogModel();
  uint64_t v7 = v6[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for AppPunchout();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(unsigned char *)(a1 + v6[7]) = *(unsigned char *)(a2 + v6[7]);
  *(_OWORD *)(a1 + v6[8]) = *(_OWORD *)(a2 + v6[8]);
  *(unsigned char *)(a1 + v6[9]) = *(unsigned char *)(a2 + v6[9]);
  *(_OWORD *)(a1 + v6[10]) = *(_OWORD *)(a2 + v6[10]);
  *(_OWORD *)(a1 + v6[11]) = *(_OWORD *)(a2 + v6[11]);
  *(_OWORD *)(a1 + v6[12]) = *(_OWORD *)(a2 + v6[12]);
  *(_OWORD *)(a1 + v6[13]) = *(_OWORD *)(a2 + v6[13]);
  uint64_t v13 = v6[14];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for SnippetHeaderModel();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v14, v15, v19);
    *(_OWORD *)&v14[*(int *)(v16 + 20)] = *(_OWORD *)&v15[*(int *)(v16 + 20)];
    *(_OWORD *)&v14[*(int *)(v16 + 24)] = *(_OWORD *)&v15[*(int *)(v16 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v20 = a3[5];
  uint64_t v21 = a3[6];
  uint64_t v22 = (_OWORD *)(a1 + v20);
  uint64_t v23 = (_OWORD *)(a2 + v20);
  long long v24 = v23[1];
  long long v25 = *(_OWORD *)(a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v24;
  *(_OWORD *)(a1 + v21) = v25;
  uint64_t v26 = a3[7];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (const void *)(a2 + v26);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v30 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v30 - 8) + 32))(v27, v28, v30);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for GenericMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for GenericMedCompletedLogModel();
  uint64_t v7 = v6[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for AppPunchout();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  *(unsigned char *)(a1 + v6[7]) = *(unsigned char *)(a2 + v6[7]);
  uint64_t v16 = v6[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v6[9]) = *(unsigned char *)(a2 + v6[9]);
  uint64_t v21 = v6[10];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = v6[11];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  void *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = v6[12];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  void *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = v6[13];
  int v37 = (void *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  *int v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = v6[14];
  uint64_t v42 = (char *)(a1 + v41);
  uint64_t v43 = (char *)(a2 + v41);
  uint64_t v44 = type metadata accessor for SnippetHeaderModel();
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1, v44);
  int v48 = v46(v43, 1, v44);
  if (v47)
  {
    if (!v48)
    {
      uint64_t v49 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 32))(v42, v43, v49);
      *(_OWORD *)&v42[*(int *)(v44 + 20)] = *(_OWORD *)&v43[*(int *)(v44 + 20)];
      *(_OWORD *)&v42[*(int *)(v44 + 24)] = *(_OWORD *)&v43[*(int *)(v44 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v48)
  {
    outlined destroy of GenericMedCompletedLogModel((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v42, v43, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v67 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 40))(v42, v43, v67);
  uint64_t v68 = *(int *)(v44 + 20);
  uint64_t v69 = &v42[v68];
  uint64_t v70 = &v43[v68];
  uint64_t v72 = *(void *)v70;
  uint64_t v71 = *((void *)v70 + 1);
  *(void *)uint64_t v69 = v72;
  *((void *)v69 + 1) = v71;
  swift_bridgeObjectRelease();
  uint64_t v73 = *(int *)(v44 + 24);
  uint64_t v74 = &v42[v73];
  uint64_t v75 = &v43[v73];
  uint64_t v77 = *(void *)v75;
  uint64_t v76 = *((void *)v75 + 1);
  *(void *)uint64_t v74 = v77;
  *((void *)v74 + 1) = v76;
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v51 = a3[5];
  uint64_t v52 = a1 + v51;
  uint64_t v53 = a2 + v51;
  LOBYTE(v51) = *(unsigned char *)(a2 + v51 + 16);
  uint64_t v54 = *(void *)v52;
  uint64_t v55 = *(void *)(v52 + 8);
  char v56 = *(unsigned char *)(v52 + 16);
  *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
  *(unsigned char *)(v52 + 16) = v51;
  outlined consume of Text.Storage(v54, v55, v56);
  *(void *)(v52 + 24) = *(void *)(v53 + 24);
  swift_bridgeObjectRelease();
  uint64_t v57 = a3[6];
  uint64_t v58 = (void *)(a1 + v57);
  uint64_t v59 = (void *)(a2 + v57);
  uint64_t v60 = *(void **)(a1 + v57);
  *uint64_t v58 = *v59;

  v58[1] = v59[1];
  if (a1 != a2)
  {
    uint64_t v61 = a3[7];
    uint64_t v62 = (void *)(a1 + v61);
    uint64_t v63 = (const void *)(a2 + v61);
    outlined destroy of Font.Design?(a1 + v61, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v65 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v65 - 8) + 32))(v62, v63, v65);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericMedCompletedLogSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2617DF8BC);
}

uint64_t sub_2617DF8BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for GenericMedCompletedLogModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for GenericMedCompletedLogSnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2617DFA04);
}

uint64_t sub_2617DFA04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for GenericMedCompletedLogModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for GenericMedCompletedLogSnippet()
{
  type metadata accessor for GenericMedCompletedLogModel();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<ColorScheme>.Content();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_2617DFC14()
{
  return MEMORY[0x263F1B710];
}

uint64_t objectdestroyTm()
{
  unint64_t v1 = (int *)type metadata accessor for GenericMedCompletedLogSnippet();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for GenericMedCompletedLogModel();
  uint64_t v7 = v0 + v3 + *(int *)(v6 + 24);
  uint64_t v8 = type metadata accessor for AppPunchout();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + *(int *)(v6 + 56);
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v10, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(void *)(v5 + v1[5]), *(void *)(v5 + v1[5] + 8), *(unsigned char *)(v5 + v1[5] + 16));
  swift_bridgeObjectRelease();

  uint64_t v13 = v5 + v1[7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in closure #3 in GenericMedCompletedLogSnippet.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for GenericMedCompletedLogSnippet() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in closure #3 in GenericMedCompletedLogSnippet.body.getter(v2);
}

uint64_t BloodPressureLogSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of BloodPressureLogModel(v1, a1, (uint64_t (*)(void))type metadata accessor for BloodPressureLogModel);
}

uint64_t BloodPressureLogSnippet.buttonColor.getter()
{
  uint64_t v0 = type metadata accessor for ColorScheme();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v10 - v5;
  type metadata accessor for BloodPressureLogSnippet();
  specialized Environment.wrappedValue.getter((uint64_t)v6);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x263F18510], v0);
  char v7 = static ColorScheme.== infix(_:_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  if (v7) {
    return static Color.green.getter();
  }
  else {
    return static Color.blue.getter();
  }
}

uint64_t type metadata accessor for BloodPressureLogSnippet()
{
  uint64_t result = type metadata singleton initialization cache for BloodPressureLogSnippet;
  if (!type metadata singleton initialization cache for BloodPressureLogSnippet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t BloodPressureLogSnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BloodPressureLogSnippet();
  uint64_t v5 = (uint64_t *)(a2 + *(int *)(v4 + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  *uint64_t v5 = EnvironmentObject.init()();
  v5[1] = v6;
  char v7 = (uint64_t *)(a2 + *(int *)(v4 + 24));
  *char v7 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of BloodPressureLogModel(a1, a2, (uint64_t (*)(void))type metadata accessor for BloodPressureLogModel);
}

uint64_t BloodPressureLogSnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  char v250 = a1;
  uint64_t v2 = type metadata accessor for BloodPressureLogSnippet();
  uint64_t v222 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v223 = v3;
  uint64_t v224 = (uint64_t)v180 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>>);
  uint64_t v227 = *(void *)(v4 - 8);
  uint64_t v228 = v4;
  MEMORY[0x270FA5388](v4);
  v225 = (char *)v180 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v230 = *(void *)(v6 - 8);
  uint64_t v231 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v226 = (char *)v180 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v229 = (char *)v180 - v9;
  uint64_t v10 = type metadata accessor for SeparatorStyle();
  uint64_t v219 = *(void *)(v10 - 8);
  uint64_t v220 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v215 = (char *)v180 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v216 = type metadata accessor for FactItemHeroNumberView();
  uint64_t v214 = *(void *)(v216 - 8);
  MEMORY[0x270FA5388](v216);
  uint64_t v212 = (char *)v180 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  uint64_t v217 = *(void *)(v13 - 8);
  uint64_t v218 = v13;
  MEMORY[0x270FA5388](v13);
  v213 = (char *)v180 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v239 = *(void *)(v15 - 8);
  uint64_t v240 = v15;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v235 = (char *)v180 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v221 = v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v238 = (char *)v180 - v18;
  uint64_t v19 = type metadata accessor for StatusIndicatorView.IndicatorType();
  uint64_t v206 = *(void *)(v19 - 8);
  uint64_t v207 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v205 = (char *)v180 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for StatusIndicatorView();
  uint64_t v236 = *(void *)(v21 - 8);
  uint64_t v237 = v21;
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v234 = (char *)v180 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v211 = v23;
  MEMORY[0x270FA5388](v22);
  v245 = (char *)v180 - v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v232 = (char *)v180 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v27 - 8);
  char v241 = (char *)v180 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v203 = type metadata accessor for SnippetHeaderView();
  uint64_t v208 = *(void *)(v203 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v203);
  uint64_t v233 = (uint64_t)v180 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v209 = v30;
  MEMORY[0x270FA5388](v29);
  uint64_t v243 = (uint64_t)v180 - v31;
  uint64_t v242 = type metadata accessor for Font.TextStyle();
  uint64_t v246 = *(void *)(v242 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v242);
  uint64_t v204 = (char *)v180 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  v244 = (char *)v180 - v34;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v35 - 8);
  uint64_t v247 = (void *)((char *)v180 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v248 = type metadata accessor for AppPunchout();
  uint64_t v249 = *(void *)(v248 - 8);
  uint64_t v37 = *(void *)(v249 + 64);
  uint64_t v38 = MEMORY[0x270FA5388](v248);
  uint64_t v210 = (char *)v180 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38);
  uint64_t v40 = (char *)v180 - v39;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v42 = MEMORY[0x270FA5388](v41 - 8);
  uint64_t v44 = (char *)v180 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v42);
  uint64_t v46 = (char *)v180 - v45;
  uint64_t v47 = type metadata accessor for SnippetHeaderModel();
  uint64_t v48 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  uint64_t v50 = (char *)v180 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = (int *)type metadata accessor for BloodPressureLogModel();
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + v51[8], (uint64_t)v46, &demangling cache variable for type metadata for SnippetHeaderModel?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v46, &demangling cache variable for type metadata for SnippetHeaderModel?);
LABEL_14:
    uint64_t v179 = v250;
    uint64_t result = AnyView.init<A>(_:)();
    uint64_t v177 = result;
    goto LABEL_15;
  }
  uint64_t v198 = v48;
  uint64_t v199 = v47;
  long long v200 = v44;
  uint64_t v201 = v37;
  long long v202 = v40;
  uint64_t v52 = v248;
  uint64_t v53 = v249;
  outlined init with take of BloodPressureLogModel((uint64_t)v46, (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v54 = (uint64_t *)(v1 + v51[10]);
  uint64_t v55 = (void *)v54[1];
  uint64_t v56 = (uint64_t)v50;
  if (!v55)
  {
LABEL_13:
    outlined destroy of SnippetHeaderModel(v56, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_14;
  }
  uint64_t v57 = v1;
  uint64_t v58 = *v54;
  uint64_t v59 = v1;
  uint64_t v60 = (void (*)(void, void, void))v247;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v59, (uint64_t)v247, &demangling cache variable for type metadata for AppPunchout?);
  uint64_t v61 = v53;
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v53 + 48))(v60, 1, v52) == 1)
  {
    outlined destroy of SnippetHeaderModel(v56, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    outlined destroy of Font.Design?((uint64_t)v60, &demangling cache variable for type metadata for AppPunchout?);
    goto LABEL_14;
  }
  uint64_t v197 = v58;
  uint64_t v62 = *(void **)(v53 + 32);
  uint64_t v63 = v202;
  uint64_t v247 = v62;
  ((void (*)(char *, void, uint64_t))v62)(v202, v60, v52);
  uint64_t v64 = (uint64_t *)(v57 + v51[6]);
  uint64_t v65 = (void *)v64[1];
  if (!v65)
  {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v52);
    goto LABEL_13;
  }
  uint64_t v66 = (uint64_t *)(v57 + v51[5]);
  uint64_t v67 = (void *)v66[1];
  if (!v67
    || (v68 = (uint64_t *)(v57 + v51[9]), (uint64_t v69 = (void *)v68[1]) == 0)
    || (v70 = (uint64_t *)(v57 + v51[7]), (uint64_t v196 = v70[1]) == 0))
  {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v202, v52);
    goto LABEL_13;
  }
  uint64_t v185 = *v64;
  uint64_t v186 = *v66;
  uint64_t v71 = *v70;
  uint64_t v187 = *v68;
  uint64_t v188 = v71;
  long long v194 = v67;
  uint64_t v195 = v69;
  uint64_t v192 = v56;
  uint64_t v193 = v61 + 32;
  uint64_t v184 = v65;
  uint64_t v72 = *MEMORY[0x263F1A6E0];
  long long v191 = *(void (**)(char *, uint64_t, uint64_t))(v246 + 104);
  v191(v244, v72, v242);
  uint64_t v73 = (uint64_t)v200;
  outlined init with copy of BloodPressureLogModel(v56, (uint64_t)v200, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v198 + 56))(v73, 0, 1, v199);
  uint64_t v74 = v203;
  uint64_t v75 = (uint64_t *)(v233 + *(int *)(v203 + 20));
  uint64_t v76 = v233;
  *uint64_t v75 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v77 = v76;
  uint64_t v78 = (uint64_t *)(v76 + *(int *)(v74 + 24));
  *uint64_t v78 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with take of SnippetHeaderModel?(v73, v77);
  uint64_t v189 = type metadata accessor for SnippetHeaderView;
  outlined init with take of BloodPressureLogModel(v77, v243, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v79._uint64_t countAndFlagsBits = 0;
  v79._object = (void *)0xE000000000000000;
  uint64_t v190 = v57;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v79);
  v80._uint64_t countAndFlagsBits = v197;
  v80._object = v55;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v80);
  swift_bridgeObjectRelease();
  v81._uint64_t countAndFlagsBits = 0;
  v81._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v81);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v82 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v199 = v83;
  long long v200 = (char *)v82;
  char v85 = v84 & 1;
  uint64_t v86 = (uint64_t)v204;
  uint64_t v87 = v242;
  v191(v204, *MEMORY[0x263F1A6D0], v242);
  unsigned int v183 = *MEMORY[0x263F1A618];
  uint64_t v88 = v183;
  uint64_t v89 = type metadata accessor for Font.Design();
  v180[0] = v89;
  uint64_t v90 = *(void *)(v89 - 8);
  uint64_t v91 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 104);
  uint64_t v182 = v90 + 104;
  uint64_t v203 = (uint64_t)v91;
  uint64_t v92 = (uint64_t)v232;
  v91(v232, v88, v89);
  uint64_t v93 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v90 + 56);
  v180[1] = v90 + 56;
  int v181 = v93;
  v93(v92, 0, 1, v89);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?(v92, &demangling cache variable for type metadata for Font.Design?);
  uint64_t v94 = *(void (**)(char *, uint64_t, uint64_t))(v246 + 8);
  v246 += 8;
  long long v191 = v94;
  ((void (*)(uint64_t, uint64_t))v94)(v86, v87);
  uint64_t v96 = v199;
  uint64_t v95 = (uint64_t)v200;
  uint64_t v97 = Text.font(_:)();
  uint64_t v99 = v98;
  LOBYTE(v86) = v100;
  swift_release();
  outlined consume of Text.Storage(v95, v96, v85);
  swift_bridgeObjectRelease();
  LODWORD(v266) = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v101 = Text.foregroundStyle<A>(_:)();
  uint64_t v103 = v102;
  LOBYTE(v96) = v104 & 1;
  outlined consume of Text.Storage(v97, v99, v86 & 1);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  uint64_t v105 = Text.fontWeight(_:)();
  uint64_t v198 = v106;
  uint64_t v199 = v105;
  long long v200 = (char *)v107;
  LODWORD(v197) = v108 & 1;
  outlined consume of Text.Storage(v101, v103, v96);
  swift_bridgeObjectRelease();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v109._uint64_t countAndFlagsBits = 0;
  v109._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v109);
  v110._uint64_t countAndFlagsBits = v185;
  v110._object = v184;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v110);
  swift_bridgeObjectRelease();
  v111._uint64_t countAndFlagsBits = 0;
  v111._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v111);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v112 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v114 = v113;
  LOBYTE(v101) = v115 & 1;
  uint64_t v116 = (uint64_t)v232;
  uint64_t v117 = v180[0];
  ((void (*)(char *, void, void))v203)(v232, v183, v180[0]);
  v181(v116, 0, 1, v117);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?(v116, &demangling cache variable for type metadata for Font.Design?);
  uint64_t v118 = Text.font(_:)();
  uint64_t v120 = v119;
  LOBYTE(v96) = v121;
  swift_release();
  LOBYTE(v117) = v96 & 1;
  outlined consume of Text.Storage(v112, v114, v101);
  swift_bridgeObjectRelease();
  uint64_t v122 = Text.bold()();
  uint64_t v204 = (char *)v123;
  uint64_t v232 = v124;
  LODWORD(v112) = v125 & 1;
  outlined consume of Text.Storage(v118, v120, v117);
  swift_bridgeObjectRelease();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v126._uint64_t countAndFlagsBits = 0;
  v126._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v126);
  v127._uint64_t countAndFlagsBits = v186;
  v127._object = v194;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v127);
  swift_bridgeObjectRelease();
  v128._uint64_t countAndFlagsBits = 8236;
  v128._object = (void *)0xE200000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v128);
  v129._uint64_t countAndFlagsBits = v187;
  v129._object = v195;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v129);
  swift_bridgeObjectRelease();
  v130._uint64_t countAndFlagsBits = 0;
  v130._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v130);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v131 = (void *)Text.init(_:tableName:bundle:comment:)();
  long long v194 = v132;
  uint64_t v195 = v131;
  char v241 = v133;
  LODWORD(v116) = v134 & 1;
  uint64_t v268 = MEMORY[0x263F8D310];
  uint64_t v269 = MEMORY[0x263F779A0];
  uint64_t v266 = v188;
  uint64_t v267 = v196;
  (*(void (**)(char *, void, uint64_t))(v206 + 104))(v205, *MEMORY[0x263F77778], v207);
  StatusIndicatorView.init(message:type:showIndicator:)();
  uint64_t v135 = MEMORY[0x263F1A838];
  uint64_t v136 = MEMORY[0x263F77350];
  uint64_t v268 = MEMORY[0x263F1A838];
  uint64_t v269 = MEMORY[0x263F77350];
  uint64_t v137 = swift_allocObject();
  uint64_t v265 = v136;
  uint64_t v266 = v137;
  uint64_t v185 = v122;
  uint64_t v138 = (uint64_t)v204;
  *(void *)(v137 + 16) = v122;
  *(void *)(v137 + 24) = v138;
  LODWORD(v203) = v112;
  *(unsigned char *)(v137 + 32) = v112;
  *(void *)(v137 + 40) = v232;
  uint64_t v264 = v135;
  uint64_t v139 = swift_allocObject();
  uint64_t v262 = 0;
  uint64_t v263 = v139;
  uint64_t v141 = v198;
  uint64_t v140 = v199;
  *(void *)(v139 + 16) = v199;
  *(void *)(v139 + 24) = v141;
  LOBYTE(v118) = v197;
  *(unsigned char *)(v139 + 32) = v197;
  *(void *)(v139 + 40) = v200;
  long long v260 = 0u;
  long long v261 = 0u;
  uint64_t v258 = v135;
  uint64_t v259 = v136;
  uint64_t v142 = swift_allocObject();
  uint64_t v257 = v142;
  uint64_t v143 = (uint64_t)v194;
  uint64_t v144 = (uint64_t)v195;
  *(void *)(v142 + 16) = v195;
  *(void *)(v142 + 24) = v143;
  LODWORD(v187) = v116;
  *(unsigned char *)(v142 + 32) = v116;
  *(void *)(v142 + 40) = v241;
  uint64_t v256 = 0;
  long long v254 = 0u;
  long long v255 = 0u;
  uint64_t v253 = 0;
  long long v251 = 0u;
  long long v252 = 0u;
  outlined copy of Text.Storage(v122, (uint64_t)v204, v203);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v140, v141, v118);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v144, v143, v116);
  swift_bridgeObjectRetain();
  uint64_t v145 = v212;
  FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
  uint64_t v147 = v219;
  uint64_t v146 = v220;
  char v148 = v215;
  (*(void (**)(char *, void, uint64_t))(v219 + 104))(v215, *MEMORY[0x263F76988], v220);
  uint64_t v149 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
  uint64_t v150 = v213;
  uint64_t v151 = v216;
  View.separators(_:isOverride:)();
  (*(void (**)(char *, uint64_t))(v147 + 8))(v148, v146);
  (*(void (**)(char *, uint64_t))(v214 + 8))(v145, v151);
  uint64_t v266 = v151;
  uint64_t v267 = v149;
  swift_getOpaqueTypeConformance2();
  uint64_t v152 = v238;
  uint64_t v153 = v218;
  View.componentSpacing(top:bottom:)();
  (*(void (**)(char *, uint64_t))(v217 + 8))(v150, v153);
  uint64_t v154 = v233;
  uint64_t v155 = v189;
  outlined init with copy of BloodPressureLogModel(v243, v233, (uint64_t (*)(void))v189);
  uint64_t v156 = v239;
  uint64_t v157 = v240;
  (*(void (**)(char *, char *, uint64_t))(v239 + 16))(v235, v152, v240);
  uint64_t v158 = v236;
  (*(void (**)(char *, char *, uint64_t))(v236 + 16))(v234, v245, v237);
  unint64_t v159 = (*(unsigned __int8 *)(v208 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80);
  unint64_t v160 = (v209 + *(unsigned __int8 *)(v156 + 80) + v159) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80);
  unint64_t v161 = (v221 + *(unsigned __int8 *)(v158 + 80) + v160) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80);
  uint64_t v162 = swift_allocObject();
  outlined init with take of BloodPressureLogModel(v154, v162 + v159, (uint64_t (*)(void))v155);
  (*(void (**)(unint64_t, char *, uint64_t))(v156 + 32))(v162 + v160, v235, v157);
  uint64_t v163 = v237;
  (*(void (**)(unint64_t, char *, uint64_t))(v158 + 32))(v162 + v161, v234, v237);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>);
  v164 = v225;
  ComponentStack.init(content:)();
  uint64_t v165 = v224;
  outlined init with copy of BloodPressureLogModel(v190, v224, (uint64_t (*)(void))type metadata accessor for BloodPressureLogSnippet);
  uint64_t v166 = v249;
  uint64_t v167 = v210;
  uint64_t v168 = v248;
  (*(void (**)(char *, char *, uint64_t))(v249 + 16))(v210, v202, v248);
  unint64_t v169 = (*(unsigned __int8 *)(v222 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v222 + 80);
  unint64_t v170 = (v223 + *(unsigned __int8 *)(v166 + 80) + v169) & ~(unint64_t)*(unsigned __int8 *)(v166 + 80);
  uint64_t v171 = swift_allocObject();
  outlined init with take of BloodPressureLogModel(v165, v171 + v169, (uint64_t (*)(void))type metadata accessor for BloodPressureLogSnippet);
  ((void (*)(unint64_t, char *, uint64_t))v247)(v171 + v170, v167, v168);
  uint64_t v172 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>>);
  uint64_t v174 = v228;
  uint64_t v173 = v229;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v227 + 8))(v164, v174);
  uint64_t v176 = v230;
  uint64_t v175 = v231;
  (*(void (**)(char *, char *, uint64_t))(v230 + 16))(v226, v173, v231);
  uint64_t v266 = v174;
  uint64_t v267 = v172;
  swift_getOpaqueTypeConformance2();
  uint64_t v177 = AnyView.init<A>(_:)();
  outlined consume of Text.Storage((uint64_t)v195, (uint64_t)v194, v187);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v199, v198, v197);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v185, (uint64_t)v204, v203);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v176 + 8))(v173, v175);
  (*(void (**)(char *, uint64_t))(v239 + 8))(v238, v240);
  (*(void (**)(char *, uint64_t))(v236 + 8))(v245, v163);
  outlined destroy of SnippetHeaderModel(v243, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  ((void (*)(char *, uint64_t))v191)(v244, v242);
  (*(void (**)(char *, uint64_t))(v249 + 8))(v202, v168);
  uint64_t result = outlined destroy of SnippetHeaderModel(v192, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v179 = v250;
LABEL_15:
  uint64_t *v179 = v177;
  return result;
}

uint64_t closure #1 in BloodPressureLogSnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v46 = type metadata accessor for StatusIndicatorView();
  uint64_t v43 = *(void *)(v46 - 8);
  uint64_t v6 = v43;
  uint64_t v7 = MEMORY[0x270FA5388](v46);
  uint64_t v47 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v45 = *(void *)(v11 - 8);
  uint64_t v12 = v45;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v50 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v17 = type metadata accessor for SnippetHeaderView();
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v40 = (uint64_t)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v37 - v20;
  uint64_t v44 = (uint64_t)&v37 - v20;
  outlined init with copy of BloodPressureLogModel(a1, (uint64_t)&v37 - v20, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v42 = v16;
  uint64_t v39 = v11;
  v22(v16, a2, v11);
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v41 = v10;
  uint64_t v23 = v46;
  v38(v10, v48, v46);
  uint64_t v24 = v40;
  outlined init with copy of BloodPressureLogModel((uint64_t)v21, v40, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v25 = v50;
  v22(v50, (uint64_t)v16, v11);
  uint64_t v26 = v47;
  uint64_t v27 = v10;
  uint64_t v28 = v23;
  uint64_t v29 = (void (*)(uint64_t, char *, uint64_t))v38;
  v38(v47, (uint64_t)v27, v23);
  uint64_t v30 = v49;
  outlined init with copy of BloodPressureLogModel(v24, v49, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView));
  uint64_t v32 = v25;
  uint64_t v33 = v39;
  v22((char *)(v30 + *(int *)(v31 + 48)), (uint64_t)v32, v39);
  v29(v30 + *(int *)(v31 + 64), v26, v28);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v43 + 8);
  v34(v41, v28);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v45 + 8);
  v35(v42, v33);
  outlined destroy of SnippetHeaderModel(v44, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  v34(v26, v28);
  v35(v50, v33);
  return outlined destroy of SnippetHeaderModel(v24, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
}

void closure #2 in BloodPressureLogSnippet.body.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + *(int *)(type metadata accessor for BloodPressureLogSnippet() + 20));
  if (v1)
  {
    id v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();
  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t sub_2617E1E48()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_2617E1E8C()
{
  uint64_t v1 = type metadata accessor for SnippetHeaderView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v21 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v3 = *(void *)(v22 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = *(void *)(v3 + 64);
  uint64_t v5 = type metadata accessor for StatusIndicatorView();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = *(void *)(v6 + 64);
  uint64_t v8 = v0 + ((v2 + 16) & ~v2);
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v0 + ((v2 + 16) & ~v2), v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = v8 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  uint64_t v13 = v8 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  uint64_t v15 = v2 | v4 | v7 | 7;
  uint64_t v16 = (((v2 + 16) & ~v2) + v21 + v4) & ~v4;
  uint64_t v17 = (v16 + v20 + v7) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v16, v22);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v17, v5);

  return MEMORY[0x270FA0238](v0, v17 + v19, v15);
}

uint64_t partial apply for closure #1 in BloodPressureLogSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SnippetHeaderView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0)
                 - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(type metadata accessor for StatusIndicatorView() - 8);
  uint64_t v10 = v1 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return closure #1 in BloodPressureLogSnippet.body.getter(v1 + v4, v1 + v7, v10, a1);
}

uint64_t outlined init with copy of BloodPressureLogModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2617E2380()
{
  uint64_t v1 = type metadata accessor for BloodPressureLogSnippet();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v17 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v3 = type metadata accessor for AppPunchout();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = *(void *)(v4 + 64);
  uint64_t v6 = v0 + ((v2 + 16) & ~v2);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + 16) & ~v2), v3);
  }
  uint64_t v7 = type metadata accessor for BloodPressureLogModel();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v6 + *(int *)(v7 + 32);
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v8, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v11 = v6 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  uint64_t v13 = (((v2 + 16) & ~v2) + v17 + v5) & ~v5;
  uint64_t v14 = v13 + v16;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v13, v3);

  return MEMORY[0x270FA0238](v0, v14, v2 | v5 | 7);
}

uint64_t outlined init with take of BloodPressureLogModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void partial apply for closure #2 in BloodPressureLogSnippet.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for BloodPressureLogSnippet() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for AppPunchout();

  closure #2 in BloodPressureLogSnippet.body.getter(v0 + v2);
}

uint64_t outlined destroy of SnippetHeaderModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t associated type witness table accessor for View.Body : View in BloodPressureLogSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for BloodPressureLogSnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for AppPunchout();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    uint64_t v10 = (int *)type metadata accessor for BloodPressureLogModel();
    uint64_t v11 = v10[5];
    uint64_t v12 = (uint64_t *)((char *)a1 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = v10[6];
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = v10[7];
    uint64_t v20 = (uint64_t *)((char *)a1 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = v10[8];
    __dst = (char *)a1 + v23;
    uint64_t v24 = (char *)a2 + v23;
    uint64_t v25 = type metadata accessor for SnippetHeaderModel();
    uint64_t v57 = *(void *)(v25 - 8);
    uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v26(v24, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(__dst, v24, v28);
      uint64_t v29 = *(int *)(v25 + 20);
      uint64_t v30 = &__dst[v29];
      uint64_t v31 = &v24[v29];
      uint64_t v32 = *((void *)v31 + 1);
      *(void *)uint64_t v30 = *(void *)v31;
      *((void *)v30 + 1) = v32;
      uint64_t v33 = *(int *)(v25 + 24);
      uint64_t v34 = &__dst[v33];
      uint64_t v35 = &v24[v33];
      uint64_t v36 = *((void *)v35 + 1);
      *(void *)uint64_t v34 = *(void *)v35;
      *((void *)v34 + 1) = v36;
      uint64_t v37 = *(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(__dst, 0, 1, v25);
    }
    uint64_t v38 = v10[9];
    uint64_t v39 = (uint64_t *)((char *)a1 + v38);
    uint64_t v40 = (uint64_t *)((char *)a2 + v38);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = v10[10];
    uint64_t v43 = (uint64_t *)((char *)a1 + v42);
    uint64_t v44 = (uint64_t *)((char *)a2 + v42);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = *(int *)(a3 + 20);
    uint64_t v47 = *(int *)(a3 + 24);
    uint64_t v48 = (uint64_t *)((char *)a1 + v46);
    uint64_t v49 = (char *)a2 + v46;
    uint64_t v51 = *(void **)v49;
    uint64_t v50 = *((void *)v49 + 1);
    *uint64_t v48 = v51;
    v48[1] = v50;
    uint64_t v52 = (uint64_t *)((char *)a1 + v47);
    uint64_t v53 = (uint64_t *)((char *)a2 + v47);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v54 = v51;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v55 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v55 - 8) + 16))(v52, v53, v55);
    }
    else
    {
      *uint64_t v52 = *v53;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for BloodPressureLogSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = type metadata accessor for BloodPressureLogModel();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(v6 + 32);
  uint64_t v8 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    uint64_t v9 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v10 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorScheme();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    return v12(v10, v11);
  }
  else
  {
    return swift_release();
  }
}

char *initializeWithCopy for BloodPressureLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  uint64_t v8 = (int *)type metadata accessor for BloodPressureLogModel();
  uint64_t v9 = v8[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = v12;
  uint64_t v13 = v8[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  uint64_t v17 = v8[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = v20;
  uint64_t v21 = v8[8];
  __dst = &a1[v21];
  uint64_t v22 = &a2[v21];
  uint64_t v23 = type metadata accessor for SnippetHeaderModel();
  uint64_t v55 = *(void *)(v23 - 8);
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v24(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    uint64_t v26 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(__dst, v22, v26);
    uint64_t v27 = *(int *)(v23 + 20);
    uint64_t v28 = &__dst[v27];
    uint64_t v29 = &v22[v27];
    uint64_t v30 = *((void *)v29 + 1);
    *(void *)uint64_t v28 = *(void *)v29;
    *((void *)v28 + 1) = v30;
    uint64_t v31 = *(int *)(v23 + 24);
    uint64_t v32 = &__dst[v31];
    uint64_t v33 = &v22[v31];
    uint64_t v34 = *((void *)v33 + 1);
    *(void *)uint64_t v32 = *(void *)v33;
    *((void *)v32 + 1) = v34;
    uint64_t v35 = *(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35(__dst, 0, 1, v23);
  }
  uint64_t v36 = v8[9];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v39;
  uint64_t v40 = v8[10];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  uint64_t v44 = *(int *)(a3 + 20);
  uint64_t v45 = *(int *)(a3 + 24);
  uint64_t v46 = &a1[v44];
  uint64_t v47 = &a2[v44];
  uint64_t v49 = *(void **)v47;
  uint64_t v48 = *((void *)v47 + 1);
  *(void *)uint64_t v46 = v49;
  *((void *)v46 + 1) = v48;
  uint64_t v50 = &a1[v45];
  uint64_t v51 = &a2[v45];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v52 = v49;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v53 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v50, v51, v53);
  }
  else
  {
    *(void *)uint64_t v50 = *(void *)v51;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithCopy for BloodPressureLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
LABEL_7:
  uint64_t v11 = (int *)type metadata accessor for BloodPressureLogModel();
  uint64_t v12 = v11[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = v11[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = v11[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v11[8];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for SnippetHeaderModel();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      uint64_t v29 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v22, v23, v29);
      uint64_t v30 = *(int *)(v24 + 20);
      uint64_t v31 = &v22[v30];
      uint64_t v32 = &v23[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      *((void *)v31 + 1) = *((void *)v32 + 1);
      uint64_t v33 = *(int *)(v24 + 24);
      uint64_t v34 = &v22[v33];
      uint64_t v35 = &v23[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      *((void *)v34 + 1) = *((void *)v35 + 1);
      uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    outlined destroy of SnippetHeaderModel((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v22, v23, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v55 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 24))(v22, v23, v55);
  uint64_t v56 = *(int *)(v24 + 20);
  uint64_t v57 = &v22[v56];
  uint64_t v58 = &v23[v56];
  *(void *)uint64_t v57 = *(void *)v58;
  *((void *)v57 + 1) = *((void *)v58 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v59 = *(int *)(v24 + 24);
  uint64_t v60 = &v22[v59];
  uint64_t v61 = &v23[v59];
  *(void *)uint64_t v60 = *(void *)v61;
  *((void *)v60 + 1) = *((void *)v61 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v38 = v11[9];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  *(void *)uint64_t v39 = *(void *)v40;
  *((void *)v39 + 1) = *((void *)v40 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = v11[10];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = *(int *)(a3 + 20);
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  uint64_t v47 = *(void **)&a1[v44];
  uint64_t v48 = *(void **)&a2[v44];
  *(void *)uint64_t v45 = v48;
  id v49 = v48;

  *((void *)v45 + 1) = *((void *)v46 + 1);
  if (a1 != a2)
  {
    uint64_t v50 = *(int *)(a3 + 24);
    uint64_t v51 = &a1[v50];
    id v52 = &a2[v50];
    outlined destroy of Font.Design?((uint64_t)&a1[v50], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v53 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
    }
    else
    {
      *(void *)uint64_t v51 = *(void *)v52;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for BloodPressureLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  int v9 = (int *)type metadata accessor for BloodPressureLogModel();
  *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
  *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
  *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
  uint64_t v10 = v9[8];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for SnippetHeaderModel();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    uint64_t v16 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v11, v12, v16);
    *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
    *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_OWORD *)&a1[v9[9]] = *(_OWORD *)&a2[v9[9]];
  *(_OWORD *)&a1[v9[10]] = *(_OWORD *)&a2[v9[10]];
  uint64_t v17 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v18, v19, v21);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for BloodPressureLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
LABEL_7:
  uint64_t v11 = (int *)type metadata accessor for BloodPressureLogModel();
  uint64_t v12 = v11[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = v16;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = v11[6];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = v21;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = v11[7];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = v26;
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = v11[8];
  int v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = type metadata accessor for SnippetHeaderModel();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      uint64_t v35 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v28, v29, v35);
      *(_OWORD *)&v28[*(int *)(v30 + 20)] = *(_OWORD *)&v29[*(int *)(v30 + 20)];
      *(_OWORD *)&v28[*(int *)(v30 + 24)] = *(_OWORD *)&v29[*(int *)(v30 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    outlined destroy of SnippetHeaderModel((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v28, v29, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v57 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 40))(v28, v29, v57);
  uint64_t v58 = *(int *)(v30 + 20);
  uint64_t v59 = &v28[v58];
  uint64_t v60 = &v29[v58];
  uint64_t v62 = *(void *)v60;
  uint64_t v61 = *((void *)v60 + 1);
  *(void *)uint64_t v59 = v62;
  *((void *)v59 + 1) = v61;
  swift_bridgeObjectRelease();
  uint64_t v63 = *(int *)(v30 + 24);
  uint64_t v64 = &v28[v63];
  uint64_t v65 = &v29[v63];
  uint64_t v67 = *(void *)v65;
  uint64_t v66 = *((void *)v65 + 1);
  *(void *)uint64_t v64 = v67;
  *((void *)v64 + 1) = v66;
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v37 = v11[9];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v41 = *(void *)v39;
  uint64_t v40 = *((void *)v39 + 1);
  *(void *)uint64_t v38 = v41;
  *((void *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = v11[10];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v46 = *(void *)v44;
  uint64_t v45 = *((void *)v44 + 1);
  *(void *)uint64_t v43 = v46;
  *((void *)v43 + 1) = v45;
  swift_bridgeObjectRelease();
  uint64_t v47 = *(int *)(a3 + 20);
  uint64_t v48 = &a1[v47];
  id v49 = &a2[v47];
  uint64_t v50 = *(void **)&a1[v47];
  *(void *)uint64_t v48 = *(void *)v49;

  *((void *)v48 + 1) = *((void *)v49 + 1);
  if (a1 != a2)
  {
    uint64_t v51 = *(int *)(a3 + 24);
    id v52 = &a1[v51];
    uint64_t v53 = &a2[v51];
    outlined destroy of Font.Design?((uint64_t)&a1[v51], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v55 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32))(v52, v53, v55);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for BloodPressureLogSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2617E3F98);
}

uint64_t sub_2617E3F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BloodPressureLogModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 24);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for BloodPressureLogSnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2617E40E8);
}

uint64_t sub_2617E40E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for BloodPressureLogModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for BloodPressureLogSnippet()
{
  type metadata accessor for BloodPressureLogModel();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<ColorScheme>.Content();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_2617E42E8()
{
  return MEMORY[0x263F1B710];
}

uint64_t SleepQuerySnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SleepQueryModel(v1, a1, (uint64_t (*)(void))type metadata accessor for SleepQueryModel);
}

uint64_t SleepQuerySnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t Snippet = type metadata accessor for SleepQuerySnippet();
  uint64_t v5 = (uint64_t *)(a2 + *(int *)(Snippet + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  *uint64_t v5 = EnvironmentObject.init()();
  v5[1] = v6;
  uint64_t v7 = (void *)(a2 + *(int *)(Snippet + 24));
  *uint64_t v7 = 0;
  v7[1] = 0;
  return outlined init with take of SleepQueryModel(a1, a2, (uint64_t (*)(void))type metadata accessor for SleepQueryModel);
}

uint64_t type metadata accessor for SleepQuerySnippet()
{
  uint64_t result = type metadata singleton initialization cache for SleepQuerySnippet;
  if (!type metadata singleton initialization cache for SleepQuerySnippet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SleepQuerySnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v167 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
  uint64_t v143 = *(void *)(v3 - 8);
  uint64_t v144 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v140 = (char *)&v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v145 = *(void *)(v5 - 8);
  uint64_t v146 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v141 = (uint64_t)&v135 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v142 = (uint64_t)&v135 - v8;
  uint64_t Snippet = type metadata accessor for SleepQuerySnippet();
  uint64_t v159 = *(void *)(Snippet - 8);
  MEMORY[0x270FA5388](Snippet - 8);
  uint64_t v160 = v10;
  uint64_t v161 = (uint64_t)&v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.separators(_:isOverride:)>>.0)>>);
  uint64_t v150 = *(void *)(v152 - 8);
  MEMORY[0x270FA5388](v152);
  char v148 = (char *)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v153 = *(void *)(v12 - 8);
  uint64_t v154 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v149 = (char *)&v135 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v151 = (char *)&v135 - v15;
  uint64_t v16 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v147 = (char *)&v135 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v163 = (uint64_t)&v135 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for AppPunchout();
  uint64_t v164 = *(void *)(v20 - 8);
  uint64_t v165 = v20;
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v157 = v22;
  uint64_t v158 = (char *)&v135 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v162 = (char *)&v135 - v23;
  uint64_t v24 = type metadata accessor for SnippetHeaderView();
  uint64_t v155 = *(void *)(v24 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v135 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v135 - v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v31 = MEMORY[0x270FA5388](v30 - 8);
  int v33 = (char *)&v135 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v135 - v34;
  Model = (int *)type metadata accessor for SleepQueryModel();
  uint64_t v37 = Model[5];
  uint64_t v166 = v2;
  uint64_t v38 = v2 + v37;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v2 + v37, (uint64_t)v35, &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v39 = type metadata accessor for SnippetHeaderModel();
  LODWORD(v2) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v35, 1, v39);
  outlined destroy of Font.Design?((uint64_t)v35, &demangling cache variable for type metadata for SnippetHeaderModel?);
  if (v2 == 1)
  {
    uint64_t result = AnyView.init<A>(_:)();
    uint64_t *v167 = result;
    return result;
  }
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v38, (uint64_t)v33, &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v41 = (uint64_t *)&v27[*(int *)(v24 + 20)];
  *uint64_t v41 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v42 = (uint64_t *)&v27[*(int *)(v24 + 24)];
  *uint64_t v42 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with take of SnippetHeaderModel?((uint64_t)v33, (uint64_t)v27);
  outlined init with take of SleepQueryModel((uint64_t)v27, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v43 = v167;
  uint64_t v44 = (uint64_t *)(v166 + Model[6]);
  uint64_t v45 = (void *)v44[1];
  uint64_t v46 = (uint64_t)v29;
  if (v45)
  {
    uint64_t v47 = *v44;
    uint64_t v48 = v163;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v166, v163, &demangling cache variable for type metadata for AppPunchout?);
    uint64_t v50 = v164;
    uint64_t v49 = v165;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v164 + 48))(v48, 1, v165) != 1)
    {
      uint64_t v136 = v47;
      uint64_t v53 = *(void (**)(unint64_t, char *, uint64_t))(v50 + 32);
      uint64_t v54 = v162;
      uint64_t v138 = v27;
      uint64_t v139 = v53;
      uint64_t v137 = v50 + 32;
      v53((unint64_t)v162, (char *)v48, v49);
      if (*(void *)(v166 + Model[15] + 8))
      {
        uint64_t v55 = (uint64_t *)(v166 + Model[7]);
        uint64_t v56 = v55[1];
        if (!v56)
        {
          uint64_t v51 = AnyView.init<A>(_:)();
          (*(void (**)(char *, uint64_t))(v50 + 8))(v54, v49);
          goto LABEL_7;
        }
        uint64_t v135 = *v55;
        swift_bridgeObjectRetain();
        uint64_t v57 = SleepQuerySnippet.formatSleepData(sleepDuration:)();
        uint64_t v144 = v58;
        uint64_t v145 = v57;
        uint64_t v146 = v59;
        LODWORD(v143) = v60 & 1;
        LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v61._uint64_t countAndFlagsBits = 0;
        v61._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v61);
        v62._uint64_t countAndFlagsBits = v136;
        v62._object = v45;
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v62);
        v63._uint64_t countAndFlagsBits = 0;
        v63._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v63);
        LocalizedStringKey.init(stringInterpolation:)();
        uint64_t v64 = Text.init(_:tableName:bundle:comment:)();
        uint64_t v141 = v65;
        uint64_t v142 = v64;
        uint64_t v147 = v66;
        LODWORD(v140) = v67 & 1;
        uint64_t v68 = (uint64_t)v138;
        outlined init with copy of SleepQueryModel(v46, (uint64_t)v138, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
        unint64_t v69 = (*(unsigned __int8 *)(v155 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
        unint64_t v70 = (v156 + v69 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v71 = (v70 + 39) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v163 = v46;
        unint64_t v72 = (v71 + 39) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v73 = swift_allocObject();
        outlined init with take of SleepQueryModel(v68, v73 + v69, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
        unint64_t v74 = v73 + v70;
        uint64_t v76 = v144;
        uint64_t v75 = v145;
        *(void *)unint64_t v74 = v145;
        *(void *)(v74 + 8) = v76;
        char v77 = v143;
        *(unsigned char *)(v74 + 16) = v143;
        uint64_t v78 = v147;
        *(void *)(v74 + 24) = v146;
        unint64_t v79 = v73 + v71;
        uint64_t v81 = v141;
        uint64_t v80 = v142;
        *(void *)unint64_t v79 = v142;
        *(void *)(v79 + 8) = v81;
        LOBYTE(v69) = (_BYTE)v140;
        *(unsigned char *)(v79 + 16) = (_BYTE)v140;
        *(void *)(v79 + 24) = v78;
        uint64_t v82 = (void *)(v73 + v72);
        *uint64_t v82 = v135;
        v82[1] = v56;
        outlined copy of Text.Storage(v75, v76, v77);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v80, v81, v69);
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.separators(_:isOverride:)>>.0)>);
        lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, <<opaque return type of View.separators(_:isOverride:)>>.0)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.separators(_:isOverride:)>>.0)>);
        uint64_t v83 = v148;
        ComponentStack.init(content:)();
        uint64_t v84 = v161;
        outlined init with copy of SleepQueryModel(v166, v161, (uint64_t (*)(void))type metadata accessor for SleepQuerySnippet);
        char v85 = v158;
        uint64_t v86 = v165;
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v158, v162, v165);
        unint64_t v87 = (*(unsigned __int8 *)(v159 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
        unint64_t v88 = (v160 + *(unsigned __int8 *)(v50 + 80) + v87) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
        uint64_t v89 = swift_allocObject();
        outlined init with take of SleepQueryModel(v84, v89 + v87, (uint64_t (*)(void))type metadata accessor for SleepQuerySnippet);
        uint64_t v90 = v85;
        uint64_t v91 = v86;
        v139(v89 + v88, v90, v86);
        uint64_t v92 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.separators(_:isOverride:)>>.0)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.separators(_:isOverride:)>>.0)>>);
        uint64_t v94 = v151;
        uint64_t v93 = v152;
        View.componentTapped(isNavigation:perform:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v150 + 8))(v83, v93);
        uint64_t v96 = v153;
        uint64_t v95 = v154;
        (*(void (**)(char *, char *, uint64_t))(v153 + 16))(v149, v94, v154);
        *(void *)&long long v178 = v93;
        *((void *)&v178 + 1) = v92;
        swift_getOpaqueTypeConformance2();
        uint64_t v97 = AnyView.init<A>(_:)();
        outlined consume of Text.Storage(v142, v141, (char)v140);
        swift_bridgeObjectRelease();
        outlined consume of Text.Storage(v145, v144, v143);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v96 + 8))(v94, v95);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v162, v91);
      }
      else
      {
        uint64_t v163 = v46;
        uint64_t v98 = (uint64_t *)(v166 + Model[9]);
        uint64_t v99 = v98[1];
        if (!v99
          || !*(void *)(v166 + Model[16] + 8)
          || (char v100 = (uint64_t *)(v166 + Model[10]), (v101 = v100[1]) == 0)
          || (uint64_t v102 = (uint64_t *)(v166 + Model[17]), !v102[1]))
        {
          uint64_t v51 = AnyView.init<A>(_:)();
          (*(void (**)(char *, uint64_t))(v164 + 8))(v54, v49);
          uint64_t v52 = v163;
          goto LABEL_8;
        }
        uint64_t v153 = *v98;
        uint64_t v154 = *v100;
        uint64_t v152 = *v102;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v103 = SleepQuerySnippet.formatSleepData(sleepDuration:)();
        uint64_t v105 = v104;
        uint64_t v151 = v106;
        uint64_t v108 = v107 & 1;
        uint64_t v109 = SleepQuerySnippet.formatSleepData(sleepDuration:)();
        *(void *)&long long v178 = v153;
        *((void *)&v178 + 1) = v99;
        uint64_t v179 = 0;
        uint64_t v180 = 0;
        *(void *)&long long v181 = v103;
        *((void *)&v181 + 1) = v105;
        *(void *)&long long v182 = v108;
        *((void *)&v182 + 1) = v151;
        *(void *)&long long v183 = v154;
        *((void *)&v183 + 1) = v101;
        uint64_t v184 = 0;
        uint64_t v185 = 0;
        *(void *)&long long v186 = v109;
        *((void *)&v186 + 1) = v111;
        *(void *)&long long v187 = v110 & 1;
        *((void *)&v187 + 1) = v112;
        uint64_t v188 = 0;
        uint64_t v189 = 0;
        *(void *)&long long v190 = v136;
        *((void *)&v190 + 1) = v45;
        long long v174 = v186;
        long long v175 = v187;
        long long v176 = 0u;
        long long v177 = v190;
        long long v170 = v181;
        long long v171 = v182;
        long long v172 = v183;
        long long v173 = 0u;
        long long v168 = v178;
        long long v169 = 0u;
        lazy protocol witness table accessor for type MultipleDataPointWithSubTypesView and conformance MultipleDataPointWithSubTypesView();
        uint64_t v113 = View.eraseToAnyView()();
        outlined release of MultipleDataPointWithSubTypesView(&v178);
        uint64_t v114 = (uint64_t)v138;
        outlined init with copy of SleepQueryModel(v163, (uint64_t)v138, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
        unint64_t v115 = (*(unsigned __int8 *)(v155 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
        uint64_t v116 = v54;
        unint64_t v117 = (v156 + v115 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v118 = swift_allocObject();
        outlined init with take of SleepQueryModel(v114, v118 + v115, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
        uint64_t v154 = v113;
        *(void *)(v118 + v117) = v113;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
        lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, AnyView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
        uint64_t v119 = v140;
        ComponentStack.init(content:)();
        uint64_t v120 = v161;
        outlined init with copy of SleepQueryModel(v166, v161, (uint64_t (*)(void))type metadata accessor for SleepQuerySnippet);
        uint64_t v121 = v164;
        uint64_t v122 = v158;
        uint64_t v123 = v116;
        uint64_t v124 = v165;
        (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v158, v123, v165);
        unint64_t v125 = (*(unsigned __int8 *)(v159 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
        unint64_t v126 = (v160 + *(unsigned __int8 *)(v121 + 80) + v125) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80);
        uint64_t v127 = swift_allocObject();
        outlined init with take of SleepQueryModel(v120, v127 + v125, (uint64_t (*)(void))type metadata accessor for SleepQuerySnippet);
        Swift::String v128 = v122;
        uint64_t v129 = v124;
        v139(v127 + v126, v128, v124);
        uint64_t v130 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, AnyView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
        uint64_t v131 = v142;
        uint64_t v132 = v144;
        View.componentTapped(isNavigation:perform:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v143 + 8))(v119, v132);
        uint64_t v134 = v145;
        uint64_t v133 = v146;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v145 + 16))(v141, v131, v146);
        *(void *)&long long v168 = v132;
        *((void *)&v168 + 1) = v130;
        swift_getOpaqueTypeConformance2();
        uint64_t v97 = AnyView.init<A>(_:)();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v131, v133);
        (*(void (**)(char *, uint64_t))(v121 + 8))(v162, v129);
      }
      uint64_t result = outlined destroy of SnippetHeaderView(v163, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      uint64_t *v167 = v97;
      return result;
    }
    outlined destroy of Font.Design?(v48, &demangling cache variable for type metadata for AppPunchout?);
  }
  uint64_t v51 = AnyView.init<A>(_:)();
LABEL_7:
  uint64_t v52 = v46;
LABEL_8:
  uint64_t result = outlined destroy of SnippetHeaderView(v52, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  *uint64_t v43 = v51;
  return result;
}

uint64_t SleepQuerySnippet.formatSleepData(sleepDuration:)()
{
  unint64_t v0 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v1 = MEMORY[0x263E41DD0](32, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x263F8D310], v0);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  char v5 = v4 & 1;
  uint64_t v6 = *(void *)(v1 + 16);
  if (v6)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v2;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    uint64_t v10 = (unint64_t *)(v1 + 56);
    while (1)
    {
      uint64_t v54 = v6;
      unint64_t v30 = *(v10 - 3);
      unint64_t v31 = *(v10 - 2);
      unint64_t v33 = *(v10 - 1);
      unint64_t v32 = *v10;
      char v53 = v5;
      if ((v31 ^ v30) >> 14)
      {
        _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v30, v31, v33, v32, 10);
        uint64_t v50 = v9;
        if ((v34 & 0x100) != 0)
        {
          swift_bridgeObjectRetain();
          specialized _parseInteger<A, B>(ascii:radix:)(v30, v31, v33, v32, 10);
          if ((v36 & 1) == 0)
          {
LABEL_12:
            char v37 = v5 & 1;
            uint64_t v13 = v8;
            uint64_t v38 = v8;
            uint64_t v15 = v7;
            outlined copy of Text.Storage(v38, v7, v37);
            swift_bridgeObjectRetain();
            uint64_t v39 = MEMORY[0x263E41CD0](v30, v31, v33, v32);
            uint64_t v41 = SleepQuerySnippet.formatNumericSleepData(data:)(v39, v40);
            uint64_t v43 = v42;
            char v45 = v44;
            swift_bridgeObjectRelease();
            char v23 = v45 & 1;
            uint64_t v46 = static Text.+ infix(_:_:)();
            uint64_t v51 = v47;
            uint64_t v52 = v46;
            char v27 = v48;
            uint64_t v28 = v41;
            uint64_t v29 = v43;
            goto LABEL_6;
          }
        }
        else
        {
          char v35 = v34;
          swift_bridgeObjectRetain();
          if ((v35 & 1) == 0) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        uint64_t v50 = v9;
        swift_bridgeObjectRetain();
      }
      char v12 = v5 & 1;
      uint64_t v13 = v8;
      uint64_t v14 = v8;
      uint64_t v15 = v7;
      outlined copy of Text.Storage(v14, v7, v12);
      swift_bridgeObjectRetain();
      uint64_t v16 = MEMORY[0x263E41CD0](v30, v31, v33, v32);
      uint64_t v18 = SleepQuerySnippet.formatUnitSleepData(unit:)(v16, v17);
      uint64_t v20 = v19;
      char v22 = v21;
      swift_bridgeObjectRelease();
      char v23 = v22 & 1;
      uint64_t v24 = static Text.+ infix(_:_:)();
      uint64_t v51 = v25;
      uint64_t v52 = v24;
      char v27 = v26;
      uint64_t v28 = v18;
      uint64_t v29 = v20;
LABEL_6:
      outlined consume of Text.Storage(v28, v29, v23);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v13, v15, v53 & 1);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v13, v15, v53 & 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v5 = v27 & 1;
      v10 += 4;
      uint64_t v11 = v52;
      uint64_t v8 = v52;
      uint64_t v7 = v51;
      uint64_t v6 = v54 - 1;
      uint64_t v9 = v50;
      if (v54 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
  }
  uint64_t v11 = v2;
LABEL_14:
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t closure #1 in SleepQuerySnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v57 = a8;
  uint64_t v54 = a7;
  uint64_t v51 = a6;
  uint64_t v68 = a9;
  uint64_t v58 = a12;
  uint64_t v56 = a11;
  uint64_t v66 = type metadata accessor for SeparatorStyle();
  uint64_t v64 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  Swift::String v63 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for FactItemHeroNumberView();
  uint64_t v67 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  uint64_t v55 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  uint64_t v60 = *(void *)(v61 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v61);
  char v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  Swift::String v62 = (char *)&v51 - v22;
  uint64_t v23 = type metadata accessor for SnippetHeaderView();
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v59 = (uint64_t)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v52 = (uint64_t)&v51 - v26;
  char v53 = type metadata accessor for SnippetHeaderView;
  outlined init with copy of SleepQueryModel(a1, (uint64_t)&v51 - v26, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v27 = MEMORY[0x263F1A838];
  uint64_t v28 = MEMORY[0x263F77350];
  uint64_t v86 = MEMORY[0x263F1A838];
  uint64_t v87 = MEMORY[0x263F77350];
  uint64_t v29 = swift_allocObject();
  uint64_t v85 = v29;
  *(void *)(v29 + 16) = a2;
  *(void *)(v29 + 24) = a3;
  *(unsigned char *)(v29 + 32) = a4 & 1;
  *(void *)(v29 + 40) = a5;
  uint64_t v84 = 0;
  long long v82 = 0u;
  long long v83 = 0u;
  uint64_t v80 = v27;
  uint64_t v81 = v28;
  uint64_t v30 = swift_allocObject();
  uint64_t v78 = 0;
  uint64_t v79 = v30;
  uint64_t v31 = v51;
  uint64_t v32 = v54;
  *(void *)(v30 + 16) = v51;
  *(void *)(v30 + 24) = v32;
  char v33 = v57 & 1;
  *(unsigned char *)(v30 + 32) = v57 & 1;
  *(void *)(v30 + 40) = a10;
  long long v76 = 0u;
  long long v77 = 0u;
  uint64_t v74 = MEMORY[0x263F8D310];
  uint64_t v75 = MEMORY[0x263F779A0];
  uint64_t v72 = v56;
  uint64_t v73 = v58;
  uint64_t v71 = 0;
  long long v70 = 0u;
  long long v69 = 0u;
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v31, v32, v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __int16 v34 = v55;
  FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
  uint64_t v35 = v64;
  char v36 = v63;
  uint64_t v37 = v66;
  (*(void (**)(char *, void, uint64_t))(v64 + 104))(v63, *MEMORY[0x263F76988], v66);
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
  uint64_t v38 = v65;
  View.separators(_:isOverride:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v34, v38);
  uint64_t v39 = v60;
  uint64_t v40 = v62;
  uint64_t v41 = v61;
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v62, v21, v61);
  uint64_t v42 = v52;
  uint64_t v43 = v59;
  char v44 = v53;
  outlined init with copy of SleepQueryModel(v52, v59, (uint64_t (*)(void))v53);
  uint64_t v45 = v39;
  uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v46(v21, v40, v41);
  uint64_t v47 = v68;
  outlined init with copy of SleepQueryModel(v43, v68, (uint64_t (*)(void))v44);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, <<opaque return type of View.separators(_:isOverride:)>>.0));
  v46((char *)(v47 + *(int *)(v48 + 48)), v21, v41);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v45 + 8);
  v49(v40, v41);
  outlined destroy of SnippetHeaderView(v42, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  v49(v21, v41);
  return outlined destroy of SnippetHeaderView(v43, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
}

uint64_t closure #3 in SleepQuerySnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderView();
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v13 - v10;
  outlined init with copy of SleepQueryModel(a1, (uint64_t)&v13 - v10, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  outlined init with copy of SleepQueryModel((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  outlined init with copy of SleepQueryModel((uint64_t)v9, a3, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  *(void *)(a3
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, AnyView))
                     + 48)) = a2;
  swift_retain_n();
  outlined destroy of SnippetHeaderView((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  swift_release();
  return outlined destroy of SnippetHeaderView((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
}

void closure #2 in SleepQuerySnippet.body.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + *(int *)(type metadata accessor for SleepQuerySnippet() + 20));
  if (v1)
  {
    id v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();
  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t SleepQuerySnippet.formatNumericSleepData(data:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = type metadata accessor for Font.TextStyle();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  uint64_t v32 = v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void))(v12 + 104))(v11, *MEMORY[0x263F1A6E0]);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v13);
  v33._uint64_t countAndFlagsBits = a1;
  v33._object = a2;
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = 32;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v33);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v15);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v16 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  uint64_t v21 = *MEMORY[0x263F1A618];
  uint64_t v22 = type metadata accessor for Font.Design();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 104))(v6, v21, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v6, 0, 1, v22);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?((uint64_t)v6, &demangling cache variable for type metadata for Font.Design?);
  uint64_t v24 = Text.font(_:)();
  uint64_t v26 = v25;
  LOBYTE(v22) = v27;
  swift_release();
  outlined consume of Text.Storage(v16, v18, v20);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  uint64_t v28 = Text.fontWeight(_:)();
  outlined consume of Text.Storage(v24, v26, v22 & 1);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v31);
  return v28;
}

uint64_t SleepQuerySnippet.formatUnitSleepData(unit:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Font.TextStyle();
  uint64_t v37 = *(void *)(v7 - 8);
  uint64_t v8 = v37;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v11 - 8);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v12);
  v38._uint64_t countAndFlagsBits = a1;
  v38._object = a2;
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 32;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v38);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v14);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  char v20 = *(void (**)(char *, void, uint64_t))(v8 + 104);
  uint64_t v21 = v7;
  v20(v10, *MEMORY[0x263F1A6D0], v7);
  uint64_t v22 = *MEMORY[0x263F1A618];
  uint64_t v23 = type metadata accessor for Font.Design();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 104))(v6, v22, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v6, 0, 1, v23);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?((uint64_t)v6, &demangling cache variable for type metadata for Font.Design?);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v21);
  uint64_t v25 = Text.font(_:)();
  uint64_t v27 = v26;
  LOBYTE(v24) = v28;
  swift_release();
  outlined consume of Text.Storage(v15, v17, v19);
  swift_bridgeObjectRelease();
  LODWORD(v38._countAndFlagsBits) = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v29 = Text.foregroundStyle<A>(_:)();
  uint64_t v31 = v30;
  char v33 = v32 & 1;
  outlined consume of Text.Storage(v25, v27, v24 & 1);
  swift_bridgeObjectRelease();
  uint64_t v34 = Text.bold()();
  outlined consume of Text.Storage(v29, v31, v33);
  swift_bridgeObjectRelease();
  return v34;
}

unint64_t lazy protocol witness table accessor for type MultipleDataPointWithSubTypesView and conformance MultipleDataPointWithSubTypesView()
{
  unint64_t result = lazy protocol witness table cache variable for type MultipleDataPointWithSubTypesView and conformance MultipleDataPointWithSubTypesView;
  if (!lazy protocol witness table cache variable for type MultipleDataPointWithSubTypesView and conformance MultipleDataPointWithSubTypesView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultipleDataPointWithSubTypesView and conformance MultipleDataPointWithSubTypesView);
  }
  return result;
}

void *outlined release of MultipleDataPointWithSubTypesView(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[12];
  uint64_t v7 = a1[13];
  uint64_t v9 = a1[15];
  uint64_t v10 = a1[14];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Text?(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Text?(v6, v7, v10, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2617E68A8()
{
  uint64_t v1 = type metadata accessor for SnippetHeaderView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v0 + v3, 1, v6))
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v3, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = v5 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = v5 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t partial apply for closure #3 in SleepQuerySnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SnippetHeaderView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #3 in SleepQuerySnippet.body.getter(v1 + v4, v5, a1);
}

uint64_t outlined init with copy of SleepQueryModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of SleepQueryModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2617E6C5C()
{
  uint64_t v1 = type metadata accessor for SnippetHeaderView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v0 + v3, 1, v6))
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v3, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = v5 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = v5 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  unint64_t v12 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v12 + 39) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(void *)(v0 + v12), *(void *)(v0 + v12 + 8), *(unsigned char *)(v0 + v12 + 16));
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(*(void *)(v0 + v13), *(void *)(v0 + v13 + 8), *(unsigned char *)(v0 + v13 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, ((v13 + 39) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t partial apply for closure #1 in SleepQuerySnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SnippetHeaderView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 39) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in SleepQuerySnippet.body.getter(v1 + v4, *(void *)(v1 + v5), *(void *)(v1 + v5 + 8), *(unsigned char *)(v1 + v5 + 16), *(void *)(v1 + v5 + 24), *(void *)(v1 + v6), *(void *)(v1 + v6 + 8), *(unsigned __int8 *)(v1 + v6 + 16), a1, *(void *)(v1 + v6 + 24), *(void *)(v1 + ((v6 + 39) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v6 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t objectdestroy_5Tm()
{
  uint64_t Snippet = type metadata accessor for SleepQuerySnippet();
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(Snippet - 8) + 80);
  uint64_t v2 = (v1 + 16) & ~v1;
  uint64_t v13 = *(void *)(*(void *)(Snippet - 8) + 64);
  uint64_t v3 = type metadata accessor for AppPunchout();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = *(void *)(v4 + 64);
  uint64_t v15 = v0;
  uint64_t v6 = v0 + v2;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  }
  uint64_t v7 = v6 + *(int *)(type metadata accessor for SleepQueryModel() + 20);
  uint64_t v8 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    uint64_t v9 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = (v2 + v13 + v5) & ~v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v15 + v10, v3);

  return MEMORY[0x270FA0238](v15, v10 + v12, v1 | v5 | 7);
}

void partial apply for closure #4 in SleepQuerySnippet.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for SleepQuerySnippet() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for AppPunchout();
  closure #2 in SleepQuerySnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in SleepQuerySnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepQuerySnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    Model = (int *)type metadata accessor for SleepQueryModel();
    uint64_t v12 = Model[5];
    uint64_t v13 = (char *)a1 + v12;
    Swift::String v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for SnippetHeaderModel();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v18 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v13, v14, v18);
      uint64_t v19 = *(int *)(v15 + 20);
      char v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      uint64_t v22 = *((void *)v21 + 1);
      *(void *)char v20 = *(void *)v21;
      *((void *)v20 + 1) = v22;
      uint64_t v23 = *(int *)(v15 + 24);
      uint64_t v24 = &v13[v23];
      uint64_t v25 = &v14[v23];
      uint64_t v26 = *((void *)v25 + 1);
      *(void *)uint64_t v24 = *(void *)v25;
      *((void *)v24 + 1) = v26;
      uint64_t v27 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27(v13, 0, 1, v15);
    }
    uint64_t v28 = Model[6];
    uint64_t v29 = (uint64_t *)((char *)a1 + v28);
    uint64_t v30 = (uint64_t *)((char *)a2 + v28);
    uint64_t v31 = v30[1];
    void *v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = Model[7];
    char v33 = (uint64_t *)((char *)a1 + v32);
    uint64_t v34 = (uint64_t *)((char *)a2 + v32);
    uint64_t v70 = v34[1];
    void *v33 = *v34;
    v33[1] = v70;
    uint64_t v35 = Model[8];
    uint64_t v36 = (uint64_t *)((char *)a1 + v35);
    uint64_t v37 = (uint64_t *)((char *)a2 + v35);
    uint64_t v69 = v37[1];
    void *v36 = *v37;
    v36[1] = v69;
    uint64_t v38 = Model[9];
    uint64_t v39 = (uint64_t *)((char *)a1 + v38);
    uint64_t v40 = (uint64_t *)((char *)a2 + v38);
    uint64_t v68 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v68;
    uint64_t v41 = Model[10];
    uint64_t v42 = (uint64_t *)((char *)a1 + v41);
    uint64_t v43 = (uint64_t *)((char *)a2 + v41);
    uint64_t v44 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v44;
    *(uint64_t *)((char *)a1 + Model[11]) = *(uint64_t *)((char *)a2 + Model[11]);
    *(uint64_t *)((char *)a1 + Model[12]) = *(uint64_t *)((char *)a2 + Model[12]);
    *(uint64_t *)((char *)a1 + Model[13]) = *(uint64_t *)((char *)a2 + Model[13]);
    *(uint64_t *)((char *)a1 + Model[14]) = *(uint64_t *)((char *)a2 + Model[14]);
    uint64_t v45 = Model[15];
    uint64_t v46 = (uint64_t *)((char *)a1 + v45);
    uint64_t v47 = (uint64_t *)((char *)a2 + v45);
    uint64_t v48 = v47[1];
    void *v46 = *v47;
    v46[1] = v48;
    uint64_t v49 = Model[16];
    uint64_t v50 = (uint64_t *)((char *)a1 + v49);
    uint64_t v51 = (uint64_t *)((char *)a2 + v49);
    uint64_t v52 = v51[1];
    void *v50 = *v51;
    v50[1] = v52;
    uint64_t v53 = Model[17];
    uint64_t v54 = (uint64_t *)((char *)a1 + v53);
    uint64_t v55 = (uint64_t *)((char *)a2 + v53);
    uint64_t v56 = v55[1];
    *uint64_t v54 = *v55;
    v54[1] = v56;
    uint64_t v57 = *(int *)(a3 + 20);
    uint64_t v58 = *(int *)(a3 + 24);
    uint64_t v59 = (uint64_t *)((char *)a1 + v57);
    uint64_t v60 = (char *)a2 + v57;
    Swift::String v62 = *(void **)v60;
    uint64_t v61 = *((void *)v60 + 1);
    void *v59 = v62;
    v59[1] = v61;
    Swift::String v63 = (uint64_t *)((char *)a1 + v58);
    uint64_t v64 = (uint64_t *)((char *)a2 + v58);
    uint64_t v65 = v64[1];
    *Swift::String v63 = *v64;
    v63[1] = v65;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v66 = v62;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SleepQuerySnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(type metadata accessor for SleepQueryModel() + 20);
  uint64_t v7 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    uint64_t v8 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for SleepQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  Model = (int *)type metadata accessor for SleepQueryModel();
  uint64_t v10 = Model[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for SnippetHeaderModel();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    uint64_t v16 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v11, v12, v16);
    uint64_t v17 = *(int *)(v13 + 20);
    uint64_t v18 = &v11[v17];
    uint64_t v19 = &v12[v17];
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    uint64_t v21 = *(int *)(v13 + 24);
    uint64_t v22 = &v11[v21];
    uint64_t v23 = &v12[v21];
    uint64_t v24 = *((void *)v23 + 1);
    *(void *)uint64_t v22 = *(void *)v23;
    *((void *)v22 + 1) = v24;
    uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v11, 0, 1, v13);
  }
  uint64_t v26 = Model[6];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *((void *)v28 + 1);
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = v29;
  uint64_t v30 = Model[7];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v68 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = v68;
  uint64_t v33 = Model[8];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v67 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = v67;
  uint64_t v36 = Model[9];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  uint64_t v66 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v66;
  uint64_t v39 = Model[10];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = v42;
  *(void *)&a1[Model[11]] = *(void *)&a2[Model[11]];
  *(void *)&a1[Model[12]] = *(void *)&a2[Model[12]];
  *(void *)&a1[Model[13]] = *(void *)&a2[Model[13]];
  *(void *)&a1[Model[14]] = *(void *)&a2[Model[14]];
  uint64_t v43 = Model[15];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = v46;
  uint64_t v47 = Model[16];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  uint64_t v50 = *((void *)v49 + 1);
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = v50;
  uint64_t v51 = Model[17];
  uint64_t v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  uint64_t v54 = *((void *)v53 + 1);
  *(void *)uint64_t v52 = *(void *)v53;
  *((void *)v52 + 1) = v54;
  uint64_t v55 = *(int *)(a3 + 20);
  uint64_t v56 = *(int *)(a3 + 24);
  uint64_t v57 = &a1[v55];
  uint64_t v58 = &a2[v55];
  uint64_t v60 = *(void **)v58;
  uint64_t v59 = *((void *)v58 + 1);
  *(void *)uint64_t v57 = v60;
  *((void *)v57 + 1) = v59;
  uint64_t v61 = &a1[v56];
  Swift::String v62 = &a2[v56];
  uint64_t v63 = *((void *)v62 + 1);
  *(void *)uint64_t v61 = *(void *)v62;
  *((void *)v61 + 1) = v63;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v64 = v60;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for SleepQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
LABEL_7:
  Model = (int *)type metadata accessor for SleepQueryModel();
  uint64_t v12 = Model[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for SnippetHeaderModel();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v63 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 24))(v13, v14, v63);
      uint64_t v64 = *(int *)(v15 + 20);
      uint64_t v65 = &v13[v64];
      uint64_t v66 = &v14[v64];
      *(void *)uint64_t v65 = *(void *)v66;
      *((void *)v65 + 1) = *((void *)v66 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v67 = *(int *)(v15 + 24);
      uint64_t v68 = &v13[v67];
      uint64_t v69 = &v14[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      *((void *)v68 + 1) = *((void *)v69 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of SnippetHeaderView((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v13, v14, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v20 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v13, v14, v20);
  uint64_t v21 = *(int *)(v15 + 20);
  uint64_t v22 = &v13[v21];
  uint64_t v23 = &v14[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  uint64_t v24 = *(int *)(v15 + 24);
  uint64_t v25 = &v13[v24];
  uint64_t v26 = &v14[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = *((void *)v26 + 1);
  uint64_t v27 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(v13, 0, 1, v15);
LABEL_13:
  uint64_t v29 = Model[6];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = *((void *)v31 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = Model[7];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = *((void *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = Model[8];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = *((void *)v37 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = Model[9];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  *(void *)uint64_t v39 = *(void *)v40;
  *((void *)v39 + 1) = *((void *)v40 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = Model[10];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[Model[11]] = *(void *)&a2[Model[11]];
  swift_retain();
  swift_release();
  *(void *)&a1[Model[12]] = *(void *)&a2[Model[12]];
  swift_retain();
  swift_release();
  *(void *)&a1[Model[13]] = *(void *)&a2[Model[13]];
  swift_retain();
  swift_release();
  *(void *)&a1[Model[14]] = *(void *)&a2[Model[14]];
  swift_retain();
  swift_release();
  uint64_t v44 = Model[15];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = *((void *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = Model[16];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = *((void *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = Model[17];
  uint64_t v51 = &a1[v50];
  uint64_t v52 = &a2[v50];
  *(void *)uint64_t v51 = *(void *)v52;
  *((void *)v51 + 1) = *((void *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = *(int *)(a3 + 20);
  uint64_t v54 = &a1[v53];
  uint64_t v55 = &a2[v53];
  uint64_t v56 = *(void **)&a1[v53];
  uint64_t v57 = *(void **)&a2[v53];
  *(void *)uint64_t v54 = v57;
  id v58 = v57;

  *((void *)v54 + 1) = *((void *)v55 + 1);
  uint64_t v59 = *(int *)(a3 + 24);
  uint64_t v60 = &a1[v59];
  uint64_t v61 = &a2[v59];
  *(void *)uint64_t v60 = *(void *)v61;
  *((void *)v60 + 1) = *((void *)v61 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of SnippetHeaderView(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for SleepQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  Model = (int *)type metadata accessor for SleepQueryModel();
  uint64_t v10 = Model[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for SnippetHeaderModel();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    uint64_t v16 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v11, v12, v16);
    *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
    *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_OWORD *)&a1[Model[6]] = *(_OWORD *)&a2[Model[6]];
  *(_OWORD *)&a1[Model[7]] = *(_OWORD *)&a2[Model[7]];
  *(_OWORD *)&a1[Model[8]] = *(_OWORD *)&a2[Model[8]];
  *(_OWORD *)&a1[Model[9]] = *(_OWORD *)&a2[Model[9]];
  *(_OWORD *)&a1[Model[10]] = *(_OWORD *)&a2[Model[10]];
  *(void *)&a1[Model[11]] = *(void *)&a2[Model[11]];
  *(void *)&a1[Model[12]] = *(void *)&a2[Model[12]];
  *(void *)&a1[Model[13]] = *(void *)&a2[Model[13]];
  *(void *)&a1[Model[14]] = *(void *)&a2[Model[14]];
  *(_OWORD *)&a1[Model[15]] = *(_OWORD *)&a2[Model[15]];
  *(_OWORD *)&a1[Model[16]] = *(_OWORD *)&a2[Model[16]];
  *(_OWORD *)&a1[Model[17]] = *(_OWORD *)&a2[Model[17]];
  uint64_t v17 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v17] = *(_OWORD *)&a2[v17];
  return a1;
}

char *assignWithTake for SleepQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
LABEL_7:
  Model = (int *)type metadata accessor for SleepQueryModel();
  uint64_t v12 = Model[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for SnippetHeaderModel();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v72 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 40))(v13, v14, v72);
      uint64_t v73 = *(int *)(v15 + 20);
      uint64_t v74 = &v13[v73];
      uint64_t v75 = &v14[v73];
      uint64_t v77 = *(void *)v75;
      uint64_t v76 = *((void *)v75 + 1);
      *(void *)uint64_t v74 = v77;
      *((void *)v74 + 1) = v76;
      swift_bridgeObjectRelease();
      uint64_t v78 = *(int *)(v15 + 24);
      uint64_t v79 = &v13[v78];
      uint64_t v80 = &v14[v78];
      uint64_t v82 = *(void *)v80;
      uint64_t v81 = *((void *)v80 + 1);
      *(void *)uint64_t v79 = v82;
      *((void *)v79 + 1) = v81;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of SnippetHeaderView((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v13, v14, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v20 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v13, v14, v20);
  *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
  *(_OWORD *)&v13[*(int *)(v15 + 24)] = *(_OWORD *)&v14[*(int *)(v15 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_13:
  uint64_t v22 = Model[6];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = v26;
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = Model[7];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v31 = *(void *)v29;
  uint64_t v30 = *((void *)v29 + 1);
  *(void *)uint64_t v28 = v31;
  *((void *)v28 + 1) = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = Model[8];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v36 = *(void *)v34;
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = Model[9];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v41 = *(void *)v39;
  uint64_t v40 = *((void *)v39 + 1);
  *(void *)uint64_t v38 = v41;
  *((void *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = Model[10];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v46 = *(void *)v44;
  uint64_t v45 = *((void *)v44 + 1);
  *(void *)uint64_t v43 = v46;
  *((void *)v43 + 1) = v45;
  swift_bridgeObjectRelease();
  *(void *)&a1[Model[11]] = *(void *)&a2[Model[11]];
  swift_release();
  *(void *)&a1[Model[12]] = *(void *)&a2[Model[12]];
  swift_release();
  *(void *)&a1[Model[13]] = *(void *)&a2[Model[13]];
  swift_release();
  *(void *)&a1[Model[14]] = *(void *)&a2[Model[14]];
  swift_release();
  uint64_t v47 = Model[15];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  uint64_t v51 = *(void *)v49;
  uint64_t v50 = *((void *)v49 + 1);
  *(void *)uint64_t v48 = v51;
  *((void *)v48 + 1) = v50;
  swift_bridgeObjectRelease();
  uint64_t v52 = Model[16];
  uint64_t v53 = &a1[v52];
  uint64_t v54 = &a2[v52];
  uint64_t v56 = *(void *)v54;
  uint64_t v55 = *((void *)v54 + 1);
  *(void *)uint64_t v53 = v56;
  *((void *)v53 + 1) = v55;
  swift_bridgeObjectRelease();
  uint64_t v57 = Model[17];
  id v58 = &a1[v57];
  uint64_t v59 = &a2[v57];
  uint64_t v61 = *(void *)v59;
  uint64_t v60 = *((void *)v59 + 1);
  *(void *)id v58 = v61;
  *((void *)v58 + 1) = v60;
  swift_bridgeObjectRelease();
  uint64_t v62 = *(int *)(a3 + 20);
  uint64_t v63 = &a1[v62];
  uint64_t v64 = &a2[v62];
  uint64_t v65 = *(void **)&a1[v62];
  *(void *)uint64_t v63 = *(void *)v64;

  *((void *)v63 + 1) = *((void *)v64 + 1);
  uint64_t v66 = *(int *)(a3 + 24);
  uint64_t v67 = &a1[v66];
  uint64_t v68 = &a2[v66];
  uint64_t v70 = *(void *)v68;
  uint64_t v69 = *((void *)v68 + 1);
  *(void *)uint64_t v67 = v70;
  *((void *)v67 + 1) = v69;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepQuerySnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2617E8BF8);
}

uint64_t sub_2617E8BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Model = type metadata accessor for SleepQueryModel();
  uint64_t v7 = *(void *)(Model - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, Model);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SleepQuerySnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2617E8CD8);
}

uint64_t sub_2617E8CD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SleepQueryModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata completion function for SleepQuerySnippet()
{
  uint64_t result = type metadata accessor for SleepQueryModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2617E8E2C()
{
  return MEMORY[0x263F1B710];
}

uint64_t sub_2617E8E38()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x263E41D30](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = static String._copying(_:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v13 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  int v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x263E41CF0);
      }
    }
    else
    {
      unsigned int v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x263E41CF0](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x263E41CF0]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    unint64_t result = v12;
    if (v17 == v15) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          unint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  char v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    char v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 48;
        unsigned __int8 v32 = a6 + 55;
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v31 = 58;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          uint64_t v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            uint64_t v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
              return 0;
            }
            uint64_t v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37))) {
              return 0;
            }
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v39 = a6 + 48;
      unsigned __int8 v40 = a6 + 55;
      unsigned __int8 v41 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = 58;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v40 = 65;
      }
      if (v19)
      {
        uint64_t v42 = 0;
        do
        {
          unsigned int v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }
            else
            {
              char v44 = -55;
            }
          }
          else
          {
            char v44 = -48;
          }
          uint64_t v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63) {
            return 0;
          }
          uint64_t v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44))) {
            return 0;
          }
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
            return 0;
          }
          uint64_t v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28))) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

unint64_t static WellnessSnippets.bundleName.getter()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  return 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys(uint64_t a1)
{
  unint64_t Coding = lazy protocol witness table accessor for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys();

  return MEMORY[0x270FA00B0](a1, Coding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys(uint64_t a1)
{
  unint64_t Coding = lazy protocol witness table accessor for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys();

  return MEMORY[0x270FA00B8](a1, Coding);
}

uint64_t WellnessSnippets.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000016;
      break;
    case 4:
      uint64_t result = 0x42636972656E6567;
      break;
    case 5:
      uint64_t result = 0xD000000000000013;
      break;
    case 6:
      uint64_t result = 0xD000000000000016;
      break;
    case 7:
      uint64_t result = 0xD000000000000012;
      break;
    case 8:
      uint64_t result = 0xD000000000000010;
      break;
    case 9:
      uint64_t result = 0x6144746867696568;
      break;
    case 10:
      uint64_t v3 = 0x52656E6F6870;
      goto LABEL_15;
    case 11:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 12:
      uint64_t result = 0x6575517065656C73;
      break;
    case 13:
      uint64_t result = 0xD000000000000017;
      break;
    case 15:
      uint64_t v3 = 0x526863746177;
LABEL_15:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6E69000000000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.BloodPressureDataLogCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.BloodPressureDataLogCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.BloodPressureDataQueryCodingKeys(uint64_t a1)
{
  unint64_t Coding = lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys();

  return MEMORY[0x270FA00B0](a1, Coding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.BloodPressureDataQueryCodingKeys(uint64_t a1)
{
  unint64_t Coding = lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys();

  return MEMORY[0x270FA00B8](a1, Coding);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance WellnessSnippets.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WellnessSnippets.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance WellnessSnippets.CodingKeys()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WellnessSnippets.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WellnessSnippets.CodingKeys()
{
  return WellnessSnippets.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WellnessSnippets.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized WellnessSnippets.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance WellnessSnippets.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.CycleTrackingDataLogCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.CycleTrackingDataLogCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.GenericBinaryButtonCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.GenericBinaryButtonCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.GenericButtonCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.GenericButtonCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.GenericDataQueryCodingKeys(uint64_t a1)
{
  unint64_t Coding = lazy protocol witness table accessor for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys();

  return MEMORY[0x270FA00B0](a1, Coding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.GenericDataQueryCodingKeys(uint64_t a1)
{
  unint64_t Coding = lazy protocol witness table accessor for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys();

  return MEMORY[0x270FA00B8](a1, Coding);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.GenericDataTypeLogCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.GenericDataTypeLogCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.GenericMedCompletedLogCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.GenericMedCompletedLogCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.HeightDataQueryCodingKeys(uint64_t a1)
{
  unint64_t Coding = lazy protocol witness table accessor for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys();

  return MEMORY[0x270FA00B0](a1, Coding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.HeightDataQueryCodingKeys(uint64_t a1)
{
  unint64_t Coding = lazy protocol witness table accessor for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys();

  return MEMORY[0x270FA00B8](a1, Coding);
}

void protocol witness for Hashable.hash(into:) in conformance WellnessSnippets.PhoneRingsCodingKeys()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.PhoneRingsCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.PhoneRingsCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys(uint64_t a1)
{
  unint64_t Coding = lazy protocol witness table accessor for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys();

  return MEMORY[0x270FA00B0](a1, Coding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys(uint64_t a1)
{
  unint64_t Coding = lazy protocol witness table accessor for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys();

  return MEMORY[0x270FA00B8](a1, Coding);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.SleepQueryCodingKeys(uint64_t a1)
{
  unint64_t Coding = lazy protocol witness table accessor for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys();

  return MEMORY[0x270FA00B0](a1, Coding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.SleepQueryCodingKeys(uint64_t a1)
{
  unint64_t Coding = lazy protocol witness table accessor for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys();

  return MEMORY[0x270FA00B8](a1, Coding);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.TemperatureDataQueryCodingKeys(uint64_t a1)
{
  unint64_t Coding = lazy protocol witness table accessor for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys();

  return MEMORY[0x270FA00B0](a1, Coding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.TemperatureDataQueryCodingKeys(uint64_t a1)
{
  unint64_t Coding = lazy protocol witness table accessor for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys();

  return MEMORY[0x270FA00B8](a1, Coding);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WellnessSnippets.WatchRingsCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WellnessSnippets.WatchRingsCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t WellnessSnippets.encode(to:)(void *a1)
{
  uint64_t v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.WatchRingsCodingKeys>);
  uint64_t v177 = *(void *)(v178 - 8);
  MEMORY[0x270FA5388](v178);
  long long v176 = (char *)&v107 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.TemperatureDataQueryCodingKeys>);
  uint64_t v174 = *(void *)(v175 - 8);
  MEMORY[0x270FA5388](v175);
  long long v173 = (char *)&v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  MEMORY[0x270FA5388](Model);
  uint64_t v172 = (uint64_t)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.SpecificMedCompletedLogCodingKeys>);
  uint64_t v169 = *(void *)(v171 - 8);
  MEMORY[0x270FA5388](v171);
  long long v168 = (char *)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for SpecificMedCompletedLogModel();
  MEMORY[0x270FA5388](v165);
  uint64_t v167 = (uint64_t)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.SleepQueryCodingKeys>);
  uint64_t v164 = *(void *)(v166 - 8);
  MEMORY[0x270FA5388](v166);
  uint64_t v163 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = type metadata accessor for SleepQueryModel();
  MEMORY[0x270FA5388](v158);
  uint64_t v162 = (uint64_t)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.SingleActivitySummaryQueryCodingKeys>);
  uint64_t v157 = *(void *)(v159 - 8);
  MEMORY[0x270FA5388](v159);
  uint64_t v155 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = type metadata accessor for SingleActivitySummaryModel();
  MEMORY[0x270FA5388](v153);
  uint64_t v154 = (uint64_t)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.PhoneRingsCodingKeys>);
  uint64_t v160 = *(void *)(v11 - 8);
  uint64_t v161 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v156 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.HeightDataQueryCodingKeys>);
  uint64_t v151 = *(void *)(v13 - 8);
  uint64_t v152 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v150 = (char *)&v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = type metadata accessor for HeightQueryModel();
  MEMORY[0x270FA5388](v147);
  uint64_t v149 = (uint64_t)&v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.GenericDataQueryCodingKeys>);
  uint64_t v146 = *(void *)(v148 - 8);
  MEMORY[0x270FA5388](v148);
  uint64_t v145 = (char *)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = type metadata accessor for GenericQueryModel();
  MEMORY[0x270FA5388](v142);
  uint64_t v144 = (uint64_t)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.GenericDataTypeLogCodingKeys>);
  uint64_t v141 = *(void *)(v143 - 8);
  MEMORY[0x270FA5388](v143);
  uint64_t v140 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = type metadata accessor for HealthDataLogModel();
  MEMORY[0x270FA5388](v137);
  uint64_t v139 = (uint64_t)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.GenericMedCompletedLogCodingKeys>);
  uint64_t v136 = *(void *)(v138 - 8);
  MEMORY[0x270FA5388](v138);
  uint64_t v135 = (char *)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for GenericMedCompletedLogModel();
  MEMORY[0x270FA5388](v132);
  uint64_t v134 = (uint64_t)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.GenericBinaryButtonCodingKeys>);
  uint64_t v131 = *(void *)(v133 - 8);
  MEMORY[0x270FA5388](v133);
  uint64_t v130 = (char *)&v107 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.GenericButtonCodingKeys>);
  uint64_t v128 = *(void *)(v23 - 8);
  uint64_t v129 = v23;
  MEMORY[0x270FA5388](v23);
  uint64_t v127 = (char *)&v107 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = type metadata accessor for GenericButtonModel();
  MEMORY[0x270FA5388](v124);
  uint64_t v126 = (uint64_t)&v107 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.CycleTrackingDataLogCodingKeys>);
  uint64_t v123 = *(void *)(v125 - 8);
  MEMORY[0x270FA5388](v125);
  uint64_t v122 = (char *)&v107 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = type metadata accessor for CycleTrackingLogModel();
  MEMORY[0x270FA5388](v119);
  uint64_t v121 = (uint64_t)&v107 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.BloodPressureDataLogCodingKeys>);
  uint64_t v118 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  unint64_t v117 = (char *)&v107 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for BloodPressureLogModel();
  MEMORY[0x270FA5388](v115);
  uint64_t v116 = (uint64_t)&v107 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.BloodPressureDataQueryCodingKeys>);
  uint64_t v113 = *(void *)(v30 - 8);
  uint64_t v114 = v30;
  MEMORY[0x270FA5388](v30);
  uint64_t v112 = (char *)&v107 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for BloodPressureQueryModel();
  MEMORY[0x270FA5388](v110);
  uint64_t v111 = (uint64_t)&v107 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.BloodOxygenDataQueryCodingKeys>);
  uint64_t v108 = *(void *)(v33 - 8);
  uint64_t v109 = v33;
  MEMORY[0x270FA5388](v33);
  char v107 = (char *)&v107 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for OxygenSaturationQueryModel();
  MEMORY[0x270FA5388](v35);
  char v37 = (char *)&v107 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for WellnessSnippets();
  MEMORY[0x270FA5388](v38);
  unsigned __int8 v40 = (char *)&v107 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WellnessSnippets.CodingKeys>);
  uint64_t v180 = *(void *)(v214 - 8);
  MEMORY[0x270FA5388](v214);
  uint64_t v42 = (char *)&v107 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys();
  uint64_t v179 = v42;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of WellnessSnippets(v181, (uint64_t)v40);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v48 = (uint64_t)v40;
      uint64_t v49 = v111;
      outlined init with take of TemperatureQueryModel(v48, v111, (uint64_t (*)(void))type metadata accessor for BloodPressureQueryModel);
      LOBYTE(v198) = 1;
      lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys();
      uint64_t v50 = v112;
      uint64_t v51 = v214;
      uint64_t v52 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type BloodPressureQueryModel and conformance BloodPressureQueryModel, (void (*)(uint64_t))type metadata accessor for BloodPressureQueryModel);
      uint64_t v53 = v114;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v113 + 8))(v50, v53);
      outlined destroy of TemperatureQueryModel(v49, (uint64_t (*)(void))type metadata accessor for BloodPressureQueryModel);
      return (*(uint64_t (**)(char *, uint64_t))(v180 + 8))(v52, v51);
    case 2u:
      uint64_t v54 = v116;
      outlined init with take of TemperatureQueryModel((uint64_t)v40, v116, (uint64_t (*)(void))type metadata accessor for BloodPressureLogModel);
      LOBYTE(v198) = 2;
      lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys();
      uint64_t v55 = v117;
      uint64_t v56 = v214;
      uint64_t v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type BloodPressureLogModel and conformance BloodPressureLogModel, (void (*)(uint64_t))type metadata accessor for BloodPressureLogModel);
      uint64_t v58 = v120;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v118 + 8))(v55, v58);
      uint64_t v59 = type metadata accessor for BloodPressureLogModel;
      goto LABEL_17;
    case 3u:
      uint64_t v54 = v121;
      outlined init with take of TemperatureQueryModel((uint64_t)v40, v121, (uint64_t (*)(void))type metadata accessor for CycleTrackingLogModel);
      LOBYTE(v198) = 3;
      lazy protocol witness table accessor for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys();
      uint64_t v60 = v122;
      uint64_t v56 = v214;
      uint64_t v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type CycleTrackingLogModel and conformance CycleTrackingLogModel, (void (*)(uint64_t))type metadata accessor for CycleTrackingLogModel);
      uint64_t v61 = v125;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v123 + 8))(v60, v61);
      uint64_t v59 = type metadata accessor for CycleTrackingLogModel;
      goto LABEL_17;
    case 4u:
      uint64_t v54 = v126;
      outlined init with take of TemperatureQueryModel((uint64_t)v40, v126, (uint64_t (*)(void))type metadata accessor for GenericButtonModel);
      LOBYTE(v198) = 4;
      lazy protocol witness table accessor for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys();
      uint64_t v62 = v127;
      uint64_t v56 = v214;
      uint64_t v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type GenericButtonModel and conformance GenericButtonModel, (void (*)(uint64_t))type metadata accessor for GenericButtonModel);
      uint64_t v63 = v129;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v128 + 8))(v62, v63);
      uint64_t v59 = type metadata accessor for GenericButtonModel;
      goto LABEL_17;
    case 5u:
      uint64_t v64 = *((void *)v40 + 1);
      uint64_t v181 = *(void *)v40;
      uint64_t v65 = *((void *)v40 + 3);
      uint64_t v178 = *((void *)v40 + 2);
      uint64_t v67 = *((void *)v40 + 4);
      uint64_t v66 = *((void *)v40 + 5);
      char v68 = v40[48];
      LOBYTE(v198) = 5;
      lazy protocol witness table accessor for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys();
      uint64_t v69 = v130;
      uint64_t v70 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)&long long v198 = v181;
      uint64_t v181 = v64;
      *((void *)&v198 + 1) = v64;
      *(void *)&long long v199 = v178;
      *((void *)&v199 + 1) = v65;
      *(void *)&long long v200 = v67;
      *((void *)&v200 + 1) = v66;
      LOBYTE(v201) = v68;
      lazy protocol witness table accessor for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel();
      uint64_t v71 = v133;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v131 + 8))(v69, v71);
      (*(void (**)(char *, uint64_t))(v180 + 8))(v70, v214);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 6u:
      uint64_t v54 = v134;
      outlined init with take of TemperatureQueryModel((uint64_t)v40, v134, (uint64_t (*)(void))type metadata accessor for GenericMedCompletedLogModel);
      LOBYTE(v198) = 6;
      lazy protocol witness table accessor for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys();
      uint64_t v72 = v135;
      uint64_t v56 = v214;
      uint64_t v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type GenericMedCompletedLogModel and conformance GenericMedCompletedLogModel, (void (*)(uint64_t))type metadata accessor for GenericMedCompletedLogModel);
      uint64_t v73 = v138;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v136 + 8))(v72, v73);
      uint64_t v59 = type metadata accessor for GenericMedCompletedLogModel;
      goto LABEL_17;
    case 7u:
      uint64_t v54 = v139;
      outlined init with take of TemperatureQueryModel((uint64_t)v40, v139, (uint64_t (*)(void))type metadata accessor for HealthDataLogModel);
      LOBYTE(v198) = 7;
      lazy protocol witness table accessor for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys();
      uint64_t v74 = v140;
      uint64_t v56 = v214;
      uint64_t v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type HealthDataLogModel and conformance HealthDataLogModel, (void (*)(uint64_t))type metadata accessor for HealthDataLogModel);
      uint64_t v75 = v143;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v141 + 8))(v74, v75);
      uint64_t v59 = type metadata accessor for HealthDataLogModel;
      goto LABEL_17;
    case 8u:
      uint64_t v54 = v144;
      outlined init with take of TemperatureQueryModel((uint64_t)v40, v144, (uint64_t (*)(void))type metadata accessor for GenericQueryModel);
      LOBYTE(v198) = 8;
      lazy protocol witness table accessor for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys();
      uint64_t v76 = v145;
      uint64_t v56 = v214;
      uint64_t v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type GenericQueryModel and conformance GenericQueryModel, (void (*)(uint64_t))type metadata accessor for GenericQueryModel);
      uint64_t v77 = v148;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v146 + 8))(v76, v77);
      uint64_t v59 = type metadata accessor for GenericQueryModel;
      goto LABEL_17;
    case 9u:
      uint64_t v54 = v149;
      outlined init with take of TemperatureQueryModel((uint64_t)v40, v149, (uint64_t (*)(void))type metadata accessor for HeightQueryModel);
      LOBYTE(v198) = 9;
      lazy protocol witness table accessor for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys();
      uint64_t v78 = v150;
      uint64_t v56 = v214;
      uint64_t v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type HeightQueryModel and conformance HeightQueryModel, (void (*)(uint64_t))type metadata accessor for HeightQueryModel);
      uint64_t v79 = v152;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v151 + 8))(v78, v79);
      uint64_t v59 = type metadata accessor for HeightQueryModel;
      goto LABEL_17;
    case 0xAu:
      long long v80 = *((_OWORD *)v40 + 13);
      long long v210 = *((_OWORD *)v40 + 12);
      long long v211 = v80;
      long long v212 = *((_OWORD *)v40 + 14);
      char v213 = v40[240];
      long long v81 = *((_OWORD *)v40 + 9);
      long long v206 = *((_OWORD *)v40 + 8);
      long long v207 = v81;
      long long v82 = *((_OWORD *)v40 + 11);
      long long v208 = *((_OWORD *)v40 + 10);
      long long v209 = v82;
      long long v83 = *((_OWORD *)v40 + 5);
      long long v202 = *((_OWORD *)v40 + 4);
      long long v203 = v83;
      long long v84 = *((_OWORD *)v40 + 7);
      long long v204 = *((_OWORD *)v40 + 6);
      long long v205 = v84;
      long long v85 = *((_OWORD *)v40 + 1);
      long long v198 = *(_OWORD *)v40;
      long long v199 = v85;
      long long v86 = *((_OWORD *)v40 + 3);
      long long v200 = *((_OWORD *)v40 + 2);
      long long v201 = v86;
      LOBYTE(v182) = 10;
      lazy protocol witness table accessor for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys();
      uint64_t v87 = v156;
      uint64_t v88 = v214;
      uint64_t v89 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v194 = v210;
      long long v195 = v211;
      long long v196 = v212;
      char v197 = v213;
      long long v190 = v206;
      long long v191 = v207;
      long long v192 = v208;
      long long v193 = v209;
      long long v186 = v202;
      long long v187 = v203;
      long long v188 = v204;
      long long v189 = v205;
      long long v182 = v198;
      long long v183 = v199;
      long long v184 = v200;
      long long v185 = v201;
      lazy protocol witness table accessor for type PhoneRingsModel and conformance PhoneRingsModel();
      uint64_t v90 = v161;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v160 + 8))(v87, v90);
      (*(void (**)(char *, uint64_t))(v180 + 8))(v89, v88);
      return outlined release of PhoneRingsModel((uint64_t)&v198);
    case 0xBu:
      uint64_t v54 = v154;
      outlined init with take of TemperatureQueryModel((uint64_t)v40, v154, (uint64_t (*)(void))type metadata accessor for SingleActivitySummaryModel);
      LOBYTE(v198) = 11;
      lazy protocol witness table accessor for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys();
      uint64_t v91 = v155;
      uint64_t v56 = v214;
      uint64_t v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type SingleActivitySummaryModel and conformance SingleActivitySummaryModel, (void (*)(uint64_t))type metadata accessor for SingleActivitySummaryModel);
      uint64_t v92 = v159;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v157 + 8))(v91, v92);
      uint64_t v59 = type metadata accessor for SingleActivitySummaryModel;
      goto LABEL_17;
    case 0xCu:
      uint64_t v54 = v162;
      outlined init with take of TemperatureQueryModel((uint64_t)v40, v162, (uint64_t (*)(void))type metadata accessor for SleepQueryModel);
      LOBYTE(v198) = 12;
      lazy protocol witness table accessor for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys();
      uint64_t v93 = v163;
      uint64_t v56 = v214;
      uint64_t v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type SleepQueryModel and conformance SleepQueryModel, (void (*)(uint64_t))type metadata accessor for SleepQueryModel);
      uint64_t v94 = v166;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v164 + 8))(v93, v94);
      uint64_t v59 = type metadata accessor for SleepQueryModel;
      goto LABEL_17;
    case 0xDu:
      uint64_t v54 = v167;
      outlined init with take of TemperatureQueryModel((uint64_t)v40, v167, (uint64_t (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
      LOBYTE(v198) = 13;
      lazy protocol witness table accessor for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys();
      uint64_t v95 = v168;
      uint64_t v56 = v214;
      uint64_t v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type SpecificMedCompletedLogModel and conformance SpecificMedCompletedLogModel, (void (*)(uint64_t))type metadata accessor for SpecificMedCompletedLogModel);
      uint64_t v96 = v171;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v169 + 8))(v95, v96);
      uint64_t v59 = type metadata accessor for SpecificMedCompletedLogModel;
      goto LABEL_17;
    case 0xEu:
      uint64_t v54 = v172;
      outlined init with take of TemperatureQueryModel((uint64_t)v40, v172, (uint64_t (*)(void))type metadata accessor for TemperatureQueryModel);
      LOBYTE(v198) = 14;
      lazy protocol witness table accessor for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys();
      uint64_t v97 = v173;
      uint64_t v56 = v214;
      uint64_t v57 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type TemperatureQueryModel and conformance TemperatureQueryModel, (void (*)(uint64_t))type metadata accessor for TemperatureQueryModel);
      uint64_t v98 = v175;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v174 + 8))(v97, v98);
      uint64_t v59 = type metadata accessor for TemperatureQueryModel;
LABEL_17:
      outlined destroy of TemperatureQueryModel(v54, (uint64_t (*)(void))v59);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v180 + 8))(v57, v56);
      break;
    case 0xFu:
      uint64_t v181 = *(void *)v40;
      char v99 = v40[8];
      uint64_t v175 = *((void *)v40 + 2);
      char v100 = v40[24];
      uint64_t v101 = *((void *)v40 + 4);
      char v102 = v40[40];
      uint64_t v174 = *((void *)v40 + 6);
      LODWORD(v173) = v40[56];
      uint64_t v172 = *((void *)v40 + 8);
      LODWORD(v171) = v40[72];
      uint64_t Model = *((void *)v40 + 10);
      char v103 = v40[88];
      LOBYTE(v198) = 15;
      lazy protocol witness table accessor for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys();
      uint64_t v104 = v176;
      uint64_t v105 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)&long long v198 = v181;
      BYTE8(v198) = v99;
      *(void *)&long long v199 = v175;
      BYTE8(v199) = v100;
      *(void *)&long long v200 = v101;
      BYTE8(v200) = v102;
      *(void *)&long long v201 = v174;
      BYTE8(v201) = (_BYTE)v173;
      *(void *)&long long v202 = v172;
      BYTE8(v202) = v171;
      *(void *)&long long v203 = Model;
      BYTE8(v203) = v103;
      lazy protocol witness table accessor for type WatchRingsModel and conformance WatchRingsModel();
      uint64_t v106 = v178;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v177 + 8))(v104, v106);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v180 + 8))(v105, v214);
      break;
    default:
      outlined init with take of TemperatureQueryModel((uint64_t)v40, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for OxygenSaturationQueryModel);
      LOBYTE(v198) = 0;
      lazy protocol witness table accessor for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys();
      unsigned int v43 = v107;
      uint64_t v44 = v214;
      uint64_t v45 = v179;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type OxygenSaturationQueryModel and conformance OxygenSaturationQueryModel, (void (*)(uint64_t))type metadata accessor for OxygenSaturationQueryModel);
      uint64_t v46 = v109;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v108 + 8))(v43, v46);
      outlined destroy of TemperatureQueryModel((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for OxygenSaturationQueryModel);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v180 + 8))(v45, v44);
      break;
  }
  return result;
}

uint64_t type metadata accessor for WellnessSnippets()
{
  uint64_t result = type metadata singleton initialization cache for WellnessSnippets;
  if (!type metadata singleton initialization cache for WellnessSnippets) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of WellnessSnippets(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WellnessSnippets();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WatchRingsModel and conformance WatchRingsModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WatchRingsModel and conformance WatchRingsModel;
  if (!lazy protocol witness table cache variable for type WatchRingsModel and conformance WatchRingsModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchRingsModel and conformance WatchRingsModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchRingsModel and conformance WatchRingsModel;
  if (!lazy protocol witness table cache variable for type WatchRingsModel and conformance WatchRingsModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchRingsModel and conformance WatchRingsModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneRingsModel and conformance PhoneRingsModel()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneRingsModel and conformance PhoneRingsModel;
  if (!lazy protocol witness table cache variable for type PhoneRingsModel and conformance PhoneRingsModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneRingsModel and conformance PhoneRingsModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneRingsModel and conformance PhoneRingsModel;
  if (!lazy protocol witness table cache variable for type PhoneRingsModel and conformance PhoneRingsModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneRingsModel and conformance PhoneRingsModel);
  }
  return result;
}

uint64_t outlined release of PhoneRingsModel(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel()
{
  unint64_t result = lazy protocol witness table cache variable for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel;
  if (!lazy protocol witness table cache variable for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel;
  if (!lazy protocol witness table cache variable for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys;
  if (!lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys);
  }
  return result;
}

uint64_t WellnessSnippets.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v219 = a2;
  uint64_t v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.WatchRingsCodingKeys>);
  uint64_t v180 = *(void *)(v204 - 8);
  MEMORY[0x270FA5388](v204);
  uint64_t v218 = (char *)&v157 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.TemperatureDataQueryCodingKeys>);
  uint64_t v179 = *(void *)(v205 - 8);
  MEMORY[0x270FA5388](v205);
  long long v212 = (char *)&v157 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v203 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.SpecificMedCompletedLogCodingKeys>);
  uint64_t v178 = *(void *)(v203 - 8);
  MEMORY[0x270FA5388](v203);
  uint64_t v217 = (char *)&v157 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.SleepQueryCodingKeys>);
  uint64_t v177 = *(void *)(v202 - 8);
  MEMORY[0x270FA5388](v202);
  uint64_t v216 = (char *)&v157 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.SingleActivitySummaryQueryCodingKeys>);
  uint64_t v176 = *(void *)(v201 - 8);
  MEMORY[0x270FA5388](v201);
  uint64_t v215 = (char *)&v157 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.PhoneRingsCodingKeys>);
  uint64_t v198 = *(void *)(v200 - 8);
  MEMORY[0x270FA5388](v200);
  uint64_t v214 = (char *)&v157 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.HeightDataQueryCodingKeys>);
  uint64_t v175 = *(void *)(v199 - 8);
  MEMORY[0x270FA5388](v199);
  char v213 = (char *)&v157 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.GenericDataQueryCodingKeys>);
  uint64_t v174 = *(void *)(v197 - 8);
  MEMORY[0x270FA5388](v197);
  uint64_t v224 = (char *)&v157 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v196 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.GenericDataTypeLogCodingKeys>);
  uint64_t v173 = *(void *)(v196 - 8);
  MEMORY[0x270FA5388](v196);
  long long v211 = (char *)&v157 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.GenericMedCompletedLogCodingKeys>);
  uint64_t v172 = *(void *)(v195 - 8);
  MEMORY[0x270FA5388](v195);
  long long v210 = (char *)&v157 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.GenericBinaryButtonCodingKeys>);
  uint64_t v171 = *(void *)(v194 - 8);
  MEMORY[0x270FA5388](v194);
  long long v209 = (char *)&v157 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v193 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.GenericButtonCodingKeys>);
  uint64_t v170 = *(void *)(v193 - 8);
  MEMORY[0x270FA5388](v193);
  long long v208 = (char *)&v157 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.CycleTrackingDataLogCodingKeys>);
  uint64_t v169 = *(void *)(v192 - 8);
  MEMORY[0x270FA5388](v192);
  long long v206 = (char *)&v157 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v191 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.BloodPressureDataLogCodingKeys>);
  uint64_t v168 = *(void *)(v191 - 8);
  MEMORY[0x270FA5388](v191);
  uint64_t v223 = (char *)&v157 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v190 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.BloodPressureDataQueryCodingKeys>);
  uint64_t v167 = *(void *)(v190 - 8);
  MEMORY[0x270FA5388](v190);
  long long v207 = (char *)&v157 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.BloodOxygenDataQueryCodingKeys>);
  uint64_t v166 = *(void *)(v189 - 8);
  MEMORY[0x270FA5388](v189);
  uint64_t v222 = (char *)&v157 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v226 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WellnessSnippets.CodingKeys>);
  uint64_t v220 = *(void *)(v226 - 8);
  MEMORY[0x270FA5388](v226);
  v245 = (char *)&v157 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v225 = type metadata accessor for WellnessSnippets();
  uint64_t v20 = MEMORY[0x270FA5388](v225);
  uint64_t v165 = (uint64_t *)((char *)&v157 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  long long v188 = (char *)&v157 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  long long v187 = (char *)&v157 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  long long v186 = (char *)&v157 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  long long v185 = (char *)&v157 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v164 = (char *)&v157 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  long long v184 = (char *)&v157 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  long long v183 = (char *)&v157 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  long long v182 = (char *)&v157 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v181 = (char *)&v157 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v221 = (char *)&v157 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  uint64_t v44 = (char *)&v157 - v43;
  uint64_t v45 = MEMORY[0x270FA5388](v42);
  uint64_t v47 = (char *)&v157 - v46;
  uint64_t v48 = MEMORY[0x270FA5388](v45);
  uint64_t v50 = (char *)&v157 - v49;
  uint64_t v51 = MEMORY[0x270FA5388](v48);
  uint64_t v53 = (char *)&v157 - v52;
  uint64_t v54 = MEMORY[0x270FA5388](v51);
  uint64_t v56 = (char *)&v157 - v55;
  MEMORY[0x270FA5388](v54);
  uint64_t v58 = (char *)&v157 - v57;
  uint64_t v59 = a1[3];
  uint64_t v227 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v59);
  lazy protocol witness table accessor for type WellnessSnippets.CodingKeys and conformance WellnessSnippets.CodingKeys();
  uint64_t v60 = v228;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v60)
  {
    uint64_t v158 = v56;
    uint64_t v159 = v53;
    uint64_t v160 = v50;
    uint64_t v161 = v47;
    uint64_t v162 = v44;
    uint64_t v61 = v221;
    uint64_t v62 = v222;
    uint64_t v63 = v223;
    uint64_t v64 = v224;
    uint64_t v228 = 0;
    uint64_t v163 = v58;
    uint64_t v65 = v226;
    uint64_t v66 = v245;
    uint64_t v67 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v67 + 16) == 1)
    {
      switch(*(unsigned char *)(v67 + 32))
      {
        case 1:
          LOBYTE(v229) = 1;
          lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataQueryCodingKeys and conformance WellnessSnippets.BloodPressureDataQueryCodingKeys();
          uint64_t v76 = v207;
          uint64_t v69 = v226;
          uint64_t v77 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v77) {
            goto LABEL_34;
          }
          type metadata accessor for BloodPressureQueryModel();
          lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type BloodPressureQueryModel and conformance BloodPressureQueryModel, (void (*)(uint64_t))type metadata accessor for BloodPressureQueryModel);
          uint64_t v78 = v159;
          uint64_t v79 = v190;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v167 + 8))(v76, v79);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v220 + 8))(v66, v69);
          goto LABEL_45;
        case 2:
          LOBYTE(v229) = 2;
          lazy protocol witness table accessor for type WellnessSnippets.BloodPressureDataLogCodingKeys and conformance WellnessSnippets.BloodPressureDataLogCodingKeys();
          long long v80 = v63;
          uint64_t v81 = v226;
          uint64_t v82 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v82)
          {
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v220 + 8))(v66, v81);
            break;
          }
          type metadata accessor for BloodPressureLogModel();
          lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type BloodPressureLogModel and conformance BloodPressureLogModel, (void (*)(uint64_t))type metadata accessor for BloodPressureLogModel);
          uint64_t v78 = v160;
          uint64_t v130 = v191;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v168 + 8))(v80, v130);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v220 + 8))(v66, v226);
LABEL_45:
          swift_storeEnumTagMultiPayload();
          uint64_t v133 = (uint64_t)v78;
          goto LABEL_46;
        case 3:
          LOBYTE(v229) = 3;
          lazy protocol witness table accessor for type WellnessSnippets.CycleTrackingDataLogCodingKeys and conformance WellnessSnippets.CycleTrackingDataLogCodingKeys();
          long long v83 = v66;
          long long v84 = v206;
          uint64_t v85 = v226;
          uint64_t v86 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v86) {
            goto LABEL_40;
          }
          type metadata accessor for CycleTrackingLogModel();
          lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type CycleTrackingLogModel and conformance CycleTrackingLogModel, (void (*)(uint64_t))type metadata accessor for CycleTrackingLogModel);
          uint64_t v87 = (uint64_t)v161;
          uint64_t v88 = v192;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v169 + 8))(v84, v88);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v220 + 8))(v83, v85);
          swift_storeEnumTagMultiPayload();
          uint64_t v133 = v87;
          goto LABEL_46;
        case 4:
          LOBYTE(v229) = 4;
          lazy protocol witness table accessor for type WellnessSnippets.GenericButtonCodingKeys and conformance WellnessSnippets.GenericButtonCodingKeys();
          uint64_t v89 = v208;
          uint64_t v69 = v226;
          uint64_t v90 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v90) {
            goto LABEL_34;
          }
          type metadata accessor for GenericButtonModel();
          lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type GenericButtonModel and conformance GenericButtonModel, (void (*)(uint64_t))type metadata accessor for GenericButtonModel);
          uint64_t v78 = v162;
          uint64_t v91 = v193;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v170 + 8))(v89, v91);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v220 + 8))(v66, v69);
          goto LABEL_45;
        case 5:
          uint64_t v78 = v61;
          LOBYTE(v229) = 5;
          lazy protocol witness table accessor for type WellnessSnippets.GenericBinaryButtonCodingKeys and conformance WellnessSnippets.GenericBinaryButtonCodingKeys();
          uint64_t v92 = v209;
          uint64_t v69 = v226;
          uint64_t v93 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v93) {
            goto LABEL_34;
          }
          lazy protocol witness table accessor for type GenericBinaryButtonModel and conformance GenericBinaryButtonModel();
          uint64_t v94 = v194;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v95 = v220;
          (*(void (**)(char *, uint64_t))(v171 + 8))(v92, v94);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v95 + 8))(v66, v69);
          long long v134 = v230;
          long long v135 = v231;
          char v136 = v232;
          *(_OWORD *)uint64_t v78 = v229;
          *((_OWORD *)v78 + 1) = v134;
          *((_OWORD *)v78 + 2) = v135;
          v78[48] = v136;
          goto LABEL_45;
        case 6:
          LOBYTE(v229) = 6;
          lazy protocol witness table accessor for type WellnessSnippets.GenericMedCompletedLogCodingKeys and conformance WellnessSnippets.GenericMedCompletedLogCodingKeys();
          uint64_t v96 = v210;
          uint64_t v69 = v226;
          uint64_t v97 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v97) {
            goto LABEL_34;
          }
          type metadata accessor for GenericMedCompletedLogModel();
          lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type GenericMedCompletedLogModel and conformance GenericMedCompletedLogModel, (void (*)(uint64_t))type metadata accessor for GenericMedCompletedLogModel);
          uint64_t v78 = v181;
          uint64_t v98 = v195;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v172 + 8))(v96, v98);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v220 + 8))(v66, v69);
          goto LABEL_45;
        case 7:
          LOBYTE(v229) = 7;
          lazy protocol witness table accessor for type WellnessSnippets.GenericDataTypeLogCodingKeys and conformance WellnessSnippets.GenericDataTypeLogCodingKeys();
          char v99 = v211;
          uint64_t v69 = v226;
          uint64_t v100 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v100) {
            goto LABEL_34;
          }
          type metadata accessor for HealthDataLogModel();
          lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type HealthDataLogModel and conformance HealthDataLogModel, (void (*)(uint64_t))type metadata accessor for HealthDataLogModel);
          uint64_t v78 = v182;
          uint64_t v101 = v196;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v173 + 8))(v99, v101);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v220 + 8))(v66, v69);
          goto LABEL_45;
        case 8:
          LOBYTE(v229) = 8;
          lazy protocol witness table accessor for type WellnessSnippets.GenericDataQueryCodingKeys and conformance WellnessSnippets.GenericDataQueryCodingKeys();
          uint64_t v69 = v226;
          uint64_t v102 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v102) {
            goto LABEL_34;
          }
          type metadata accessor for GenericQueryModel();
          lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type GenericQueryModel and conformance GenericQueryModel, (void (*)(uint64_t))type metadata accessor for GenericQueryModel);
          uint64_t v78 = v183;
          uint64_t v103 = v197;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v174 + 8))(v64, v103);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v220 + 8))(v66, v69);
          goto LABEL_45;
        case 9:
          LOBYTE(v229) = 9;
          lazy protocol witness table accessor for type WellnessSnippets.HeightDataQueryCodingKeys and conformance WellnessSnippets.HeightDataQueryCodingKeys();
          uint64_t v104 = v213;
          uint64_t v69 = v226;
          uint64_t v105 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v105) {
            goto LABEL_34;
          }
          type metadata accessor for HeightQueryModel();
          lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type HeightQueryModel and conformance HeightQueryModel, (void (*)(uint64_t))type metadata accessor for HeightQueryModel);
          uint64_t v78 = v184;
          uint64_t v106 = v199;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v175 + 8))(v104, v106);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v220 + 8))(v66, v69);
          goto LABEL_45;
        case 0xA:
          LOBYTE(v229) = 10;
          lazy protocol witness table accessor for type WellnessSnippets.PhoneRingsCodingKeys and conformance WellnessSnippets.PhoneRingsCodingKeys();
          char v107 = v214;
          uint64_t v69 = v226;
          uint64_t v108 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v108) {
            goto LABEL_34;
          }
          lazy protocol witness table accessor for type PhoneRingsModel and conformance PhoneRingsModel();
          uint64_t v109 = v200;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v110 = (void (**)(char *, uint64_t))(v220 + 8);
          (*(void (**)(char *, uint64_t))(v198 + 8))(v107, v109);
          swift_bridgeObjectRelease();
          (*v110)(v66, v69);
          long long v137 = v242;
          uint64_t v138 = v164;
          *((_OWORD *)v164 + 12) = v241;
          *((_OWORD *)v138 + 13) = v137;
          *((_OWORD *)v138 + 14) = v243;
          *((unsigned char *)v138 + 240) = v244;
          long long v139 = v238;
          *((_OWORD *)v138 + 8) = v237;
          *((_OWORD *)v138 + 9) = v139;
          long long v140 = v240;
          *((_OWORD *)v138 + 10) = v239;
          *((_OWORD *)v138 + 11) = v140;
          long long v141 = v234;
          *((_OWORD *)v138 + 4) = v233;
          *((_OWORD *)v138 + 5) = v141;
          long long v142 = v236;
          *((_OWORD *)v138 + 6) = v235;
          *((_OWORD *)v138 + 7) = v142;
          long long v143 = v230;
          *(_OWORD *)uint64_t v138 = v229;
          *((_OWORD *)v138 + 1) = v143;
          long long v144 = v232;
          *((_OWORD *)v138 + 2) = v231;
          *((_OWORD *)v138 + 3) = v144;
          goto LABEL_47;
        case 0xB:
          LOBYTE(v229) = 11;
          lazy protocol witness table accessor for type WellnessSnippets.SingleActivitySummaryQueryCodingKeys and conformance WellnessSnippets.SingleActivitySummaryQueryCodingKeys();
          uint64_t v111 = v215;
          uint64_t v69 = v226;
          uint64_t v112 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v112) {
            goto LABEL_34;
          }
          type metadata accessor for SingleActivitySummaryModel();
          lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type SingleActivitySummaryModel and conformance SingleActivitySummaryModel, (void (*)(uint64_t))type metadata accessor for SingleActivitySummaryModel);
          uint64_t v78 = v185;
          uint64_t v113 = v201;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v176 + 8))(v111, v113);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v220 + 8))(v66, v69);
          goto LABEL_45;
        case 0xC:
          LOBYTE(v229) = 12;
          lazy protocol witness table accessor for type WellnessSnippets.SleepQueryCodingKeys and conformance WellnessSnippets.SleepQueryCodingKeys();
          uint64_t v114 = v216;
          uint64_t v69 = v226;
          uint64_t v115 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v115) {
            goto LABEL_34;
          }
          type metadata accessor for SleepQueryModel();
          lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type SleepQueryModel and conformance SleepQueryModel, (void (*)(uint64_t))type metadata accessor for SleepQueryModel);
          uint64_t v78 = v186;
          uint64_t v116 = v202;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v177 + 8))(v114, v116);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v220 + 8))(v66, v69);
          goto LABEL_45;
        case 0xD:
          LOBYTE(v229) = 13;
          lazy protocol witness table accessor for type WellnessSnippets.SpecificMedCompletedLogCodingKeys and conformance WellnessSnippets.SpecificMedCompletedLogCodingKeys();
          unint64_t v117 = v217;
          uint64_t v69 = v226;
          uint64_t v118 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v118) {
            goto LABEL_34;
          }
          type metadata accessor for SpecificMedCompletedLogModel();
          lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type SpecificMedCompletedLogModel and conformance SpecificMedCompletedLogModel, (void (*)(uint64_t))type metadata accessor for SpecificMedCompletedLogModel);
          uint64_t v78 = v187;
          uint64_t v119 = v203;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v178 + 8))(v117, v119);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v220 + 8))(v66, v69);
          goto LABEL_45;
        case 0xE:
          LOBYTE(v229) = 14;
          lazy protocol witness table accessor for type WellnessSnippets.TemperatureDataQueryCodingKeys and conformance WellnessSnippets.TemperatureDataQueryCodingKeys();
          long long v83 = v66;
          uint64_t v122 = v212;
          uint64_t v85 = v226;
          uint64_t v123 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (!v123)
          {
            type metadata accessor for TemperatureQueryModel();
            lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type TemperatureQueryModel and conformance TemperatureQueryModel, (void (*)(uint64_t))type metadata accessor for TemperatureQueryModel);
            uint64_t v124 = v188;
            uint64_t v125 = v205;
            KeyedDecodingContainer.decode<A>(_:forKey:)();
            (*(void (**)(char *, uint64_t))(v179 + 8))(v122, v125);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v220 + 8))(v83, v85);
            swift_storeEnumTagMultiPayload();
            uint64_t v133 = (uint64_t)v124;
            goto LABEL_46;
          }
LABEL_40:
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v220 + 8))(v83, v85);
          break;
        case 0xF:
          LOBYTE(v229) = 15;
          lazy protocol witness table accessor for type WellnessSnippets.WatchRingsCodingKeys and conformance WellnessSnippets.WatchRingsCodingKeys();
          uint64_t v126 = v66;
          uint64_t v127 = v218;
          uint64_t v128 = v226;
          uint64_t v129 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v129)
          {
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v220 + 8))(v126, v128);
            uint64_t v120 = (uint64_t)v227;
            return __swift_destroy_boxed_opaque_existential_1Tm(v120);
          }
          lazy protocol witness table accessor for type WatchRingsModel and conformance WatchRingsModel();
          uint64_t v131 = v204;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v132 = v220;
          (*(void (**)(char *, uint64_t))(v180 + 8))(v127, v131);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v132 + 8))(v126, v128);
          char v146 = BYTE8(v229);
          uint64_t v147 = v230;
          char v148 = BYTE8(v230);
          uint64_t v149 = v231;
          char v150 = BYTE8(v231);
          uint64_t v151 = v232;
          char v152 = BYTE8(v232);
          uint64_t v153 = v233;
          char v154 = BYTE8(v233);
          uint64_t v155 = v234;
          char v156 = BYTE8(v234);
          uint64_t v138 = v165;
          *uint64_t v165 = v229;
          *((unsigned char *)v138 + 8) = v146;
          v138[2] = v147;
          *((unsigned char *)v138 + 24) = v148;
          v138[4] = v149;
          *((unsigned char *)v138 + 40) = v150;
          v138[6] = v151;
          *((unsigned char *)v138 + 56) = v152;
          v138[8] = v153;
          *((unsigned char *)v138 + 72) = v154;
          v138[10] = v155;
          *((unsigned char *)v138 + 88) = v156;
LABEL_47:
          swift_storeEnumTagMultiPayload();
          uint64_t v133 = (uint64_t)v138;
          goto LABEL_46;
        default:
          LOBYTE(v229) = 0;
          lazy protocol witness table accessor for type WellnessSnippets.BloodOxygenDataQueryCodingKeys and conformance WellnessSnippets.BloodOxygenDataQueryCodingKeys();
          char v68 = v62;
          uint64_t v69 = v226;
          uint64_t v70 = v228;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v70)
          {
LABEL_34:
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v220 + 8))(v66, v69);
          }
          else
          {
            type metadata accessor for OxygenSaturationQueryModel();
            lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type OxygenSaturationQueryModel and conformance OxygenSaturationQueryModel, (void (*)(uint64_t))type metadata accessor for OxygenSaturationQueryModel);
            uint64_t v71 = (uint64_t)v158;
            uint64_t v72 = v189;
            KeyedDecodingContainer.decode<A>(_:forKey:)();
            (*(void (**)(char *, uint64_t))(v166 + 8))(v68, v72);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v220 + 8))(v66, v69);
            swift_storeEnumTagMultiPayload();
            uint64_t v133 = v71;
LABEL_46:
            uint64_t v145 = (uint64_t)v163;
            outlined init with take of TemperatureQueryModel(v133, (uint64_t)v163, (uint64_t (*)(void))type metadata accessor for WellnessSnippets);
            outlined init with take of TemperatureQueryModel(v145, v219, (uint64_t (*)(void))type metadata accessor for WellnessSnippets);
          }
          break;
      }
    }
    else
    {
      uint64_t v73 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v75 = v74;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v75 = v225;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v73 - 8) + 104))(v75, *MEMORY[0x263F8DCB0], v73);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v220 + 8))(v66, v65);
    }
  }
  uint64_t v120 = (uint64_t)v227;
  return __swift_destroy_boxed_opaque_existential_1Tm(v120);
}

uint64_t outlined init with take of TemperatureQueryModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t base witness table accessor for Decodable in WellnessSnippets()
{
  return lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type WellnessSnippets and conformance WellnessSnippets, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
}

uint64_t base witness table accessor for Encodable in WellnessSnippets()
{
  return lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(&lazy protocol witness table cache variable for type WellnessSnippets and conformance WellnessSnippets, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
}

uint64_t lazy protocol witness table accessor for type TemperatureQueryModel and conformance TemperatureQueryModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t protocol witness for static SnippetPluginModel.bundleName.getter in conformance WellnessSnippets()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for SnippetPluginModel.snippetHidden(for:idiom:) in conformance WellnessSnippets()
{
  return MEMORY[0x270F739D0]();
}

uint64_t protocol witness for Decodable.init(from:) in conformance WellnessSnippets@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return WellnessSnippets.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WellnessSnippets(void *a1)
{
  return WellnessSnippets.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for WellnessSnippets(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for AppPunchout();
        uint64_t v8 = *(void *)(v7 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
        {
          uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
        }
        uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
        uint64_t v83 = Model[5];
        long long v84 = (char *)a1 + v83;
        uint64_t v85 = (char *)a2 + v83;
        *(void *)long long v84 = *(void *)v85;
        v84[8] = v85[8];
        uint64_t v86 = Model[6];
        uint64_t v87 = (char *)a1 + v86;
        uint64_t v88 = (char *)a2 + v86;
        *(void *)uint64_t v87 = *(void *)v88;
        v87[8] = v88[8];
        uint64_t v89 = Model[7];
        uint64_t v90 = (char *)a1 + v89;
        uint64_t v91 = (char *)a2 + v89;
        v90[8] = v91[8];
        *(void *)uint64_t v90 = *(void *)v91;
        uint64_t v92 = Model[8];
        uint64_t v93 = (char *)a1 + v92;
        uint64_t v94 = (char *)a2 + v92;
        v93[8] = v94[8];
        *(void *)uint64_t v93 = *(void *)v94;
        uint64_t v95 = Model[9];
        uint64_t v96 = (char *)a1 + v95;
        uint64_t v97 = (char *)a2 + v95;
        uint64_t v98 = type metadata accessor for SpeakableString();
        uint64_t v99 = *(void *)(v98 - 8);
        uint64_t v619 = v99;
        uint64_t v624 = v98;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
        {
          uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v96, v97, v98);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
        }
        uint64_t v354 = Model[10];
        uint64_t v355 = (uint64_t *)((char *)a1 + v354);
        char v356 = (uint64_t *)((char *)a2 + v354);
        uint64_t v357 = v356[1];
        *uint64_t v355 = *v356;
        v355[1] = v357;
        uint64_t v358 = Model[11];
        uint64_t v359 = (uint64_t *)((char *)a1 + v358);
        uint64_t v360 = (uint64_t *)((char *)a2 + v358);
        uint64_t v361 = v360[1];
        *uint64_t v359 = *v360;
        v359[1] = v361;
        uint64_t v362 = Model[12];
        uint64_t v363 = (uint64_t *)((char *)a1 + v362);
        uint64_t v364 = (uint64_t *)((char *)a2 + v362);
        uint64_t v365 = v364[1];
        *uint64_t v363 = *v364;
        v363[1] = v365;
        uint64_t v366 = Model[13];
        uint64_t v367 = (uint64_t *)((char *)a1 + v366);
        v368 = (uint64_t *)((char *)a2 + v366);
        uint64_t v369 = v368[1];
        *uint64_t v367 = *v368;
        v367[1] = v369;
        uint64_t v370 = Model[14];
        uint64_t v371 = (uint64_t *)((char *)a1 + v370);
        uint64_t v372 = (uint64_t *)((char *)a2 + v370);
        uint64_t v373 = v372[1];
        *uint64_t v371 = *v372;
        v371[1] = v373;
        uint64_t v374 = Model[15];
        v375 = (uint64_t *)((char *)a1 + v374);
        v376 = (uint64_t *)((char *)a2 + v374);
        uint64_t v377 = v376[1];
        void *v375 = *v376;
        v375[1] = v377;
        uint64_t v378 = Model[16];
        __dstf = (char *)a1 + v378;
        uint64_t v329 = (char *)a2 + v378;
        uint64_t v379 = type metadata accessor for SnippetHeaderModel();
        uint64_t v618 = *(void *)(v379 - 8);
        v636 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v618 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v636(v329, 1, v379)) {
          goto LABEL_83;
        }
        (*(void (**)(char *, char *, uint64_t))(v619 + 16))(__dstf, v329, v624);
        uint64_t v543 = *(int *)(v379 + 20);
        v544 = &__dstf[v543];
        v545 = &v329[v543];
        uint64_t v546 = *((void *)v545 + 1);
        *(void *)v544 = *(void *)v545;
        *((void *)v544 + 1) = v546;
        uint64_t v547 = *(int *)(v379 + 24);
        v548 = &__dstf[v547];
        v549 = &v329[v547];
        uint64_t v550 = *((void *)v549 + 1);
        *(void *)v548 = *(void *)v549;
        *((void *)v548 + 1) = v550;
        v551 = *(void (**)(char *, void, uint64_t, uint64_t))(v618 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v551(__dstf, 0, 1, v379);
        goto LABEL_103;
      case 1u:
        uint64_t v12 = type metadata accessor for AppPunchout();
        uint64_t v13 = *(void *)(v12 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(a1, a2, v12);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
        }
        uint64_t v101 = (int *)type metadata accessor for BloodPressureQueryModel();
        uint64_t v102 = v101[5];
        uint64_t v103 = (char *)a1 + v102;
        uint64_t v104 = (char *)a2 + v102;
        *(void *)uint64_t v103 = *(void *)v104;
        v103[8] = v104[8];
        uint64_t v105 = v101[6];
        uint64_t v106 = (char *)a1 + v105;
        char v107 = (char *)a2 + v105;
        *(void *)uint64_t v106 = *(void *)v107;
        v106[8] = v107[8];
        uint64_t v108 = v101[7];
        uint64_t v109 = (char *)a1 + v108;
        uint64_t v110 = (char *)a2 + v108;
        v109[8] = v110[8];
        *(void *)uint64_t v109 = *(void *)v110;
        uint64_t v111 = v101[8];
        uint64_t v112 = (char *)a1 + v111;
        uint64_t v113 = (char *)a2 + v111;
        v112[8] = v113[8];
        *(void *)uint64_t v112 = *(void *)v113;
        uint64_t v114 = v101[9];
        uint64_t v115 = (char *)a1 + v114;
        uint64_t v116 = (char *)a2 + v114;
        v115[8] = v116[8];
        *(void *)uint64_t v115 = *(void *)v116;
        uint64_t v117 = v101[10];
        uint64_t v118 = (char *)a1 + v117;
        uint64_t v119 = (char *)a2 + v117;
        *(void *)uint64_t v118 = *(void *)v119;
        v118[8] = v119[8];
        uint64_t v120 = v101[11];
        uint64_t v121 = (uint64_t *)((char *)a1 + v120);
        uint64_t v122 = (uint64_t *)((char *)a2 + v120);
        v632 = (void *)v122[1];
        void *v121 = *v122;
        v121[1] = v632;
        uint64_t v123 = v101[12];
        uint64_t v124 = (uint64_t *)((char *)a1 + v123);
        uint64_t v125 = (uint64_t *)((char *)a2 + v123);
        uint64_t v625 = v125[1];
        *uint64_t v124 = *v125;
        v124[1] = v625;
        uint64_t v126 = v101[13];
        uint64_t v127 = (uint64_t *)((char *)a1 + v126);
        uint64_t v128 = (uint64_t *)((char *)a2 + v126);
        uint64_t v620 = v128[1];
        *uint64_t v127 = *v128;
        v127[1] = v620;
        uint64_t v129 = v101[14];
        uint64_t v130 = (uint64_t *)((char *)a1 + v129);
        uint64_t v131 = (uint64_t *)((char *)a2 + v129);
        uint64_t v616 = v131[1];
        *uint64_t v130 = *v131;
        v130[1] = v616;
        uint64_t v132 = v101[15];
        uint64_t v133 = (uint64_t *)((char *)a1 + v132);
        long long v134 = (uint64_t *)((char *)a2 + v132);
        uint64_t v614 = v134[1];
        *uint64_t v133 = *v134;
        v133[1] = v614;
        uint64_t v135 = v101[16];
        char v136 = (uint64_t *)((char *)a1 + v135);
        long long v137 = (uint64_t *)((char *)a2 + v135);
        uint64_t v138 = v137[1];
        void *v136 = *v137;
        v136[1] = v138;
        uint64_t v139 = v101[17];
        long long v140 = (uint64_t *)((char *)a1 + v139);
        long long v141 = (uint64_t *)((char *)a2 + v139);
        uint64_t v142 = v141[1];
        *long long v140 = *v141;
        v140[1] = v142;
        uint64_t v143 = v101[18];
        long long v144 = (uint64_t *)((char *)a1 + v143);
        uint64_t v145 = (uint64_t *)((char *)a2 + v143);
        uint64_t v146 = v145[1];
        void *v144 = *v145;
        v144[1] = v146;
        uint64_t v147 = v101[19];
        char v148 = (uint64_t *)((char *)a1 + v147);
        uint64_t v149 = (uint64_t *)((char *)a2 + v147);
        uint64_t v150 = v149[1];
        *char v148 = *v149;
        v148[1] = v150;
        uint64_t v151 = v101[20];
        __dstb = (char *)a1 + v151;
        v612 = (char *)a2 + v151;
        uint64_t v152 = type metadata accessor for URL();
        uint64_t v153 = *(void *)(v152 - 8);
        v613 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v613(v612, 1, v152))
        {
          uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(__dstb, v612, *(void *)(*(void *)(v154 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v153 + 16))(__dstb, v612, v152);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v153 + 56))(__dstb, 0, 1, v152);
        }
        uint64_t v380 = v101[21];
        uint64_t v381 = (uint64_t *)((char *)a1 + v380);
        uint64_t v382 = (uint64_t *)((char *)a2 + v380);
        uint64_t v383 = v382[1];
        *uint64_t v381 = *v382;
        v381[1] = v383;
        uint64_t v384 = v101[22];
        int v385 = (uint64_t *)((char *)a1 + v384);
        uint64_t v386 = (uint64_t *)((char *)a2 + v384);
        uint64_t v387 = v386[1];
        *int v385 = *v386;
        v385[1] = v387;
        uint64_t v388 = v101[23];
        v389 = (char *)a1 + v388;
        v390 = (char *)a2 + v388;
        uint64_t v391 = type metadata accessor for SnippetHeaderModel();
        uint64_t v392 = *(void *)(v391 - 8);
        uint64_t v393 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v392 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v393(v390, 1, v391))
        {
          uint64_t v394 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v389, v390, *(void *)(*(void *)(v394 - 8) + 64));
        }
        else
        {
          uint64_t v552 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v552 - 8) + 16))(v389, v390, v552);
          uint64_t v553 = *(int *)(v391 + 20);
          v554 = &v389[v553];
          v555 = &v390[v553];
          uint64_t v556 = *((void *)v555 + 1);
          *(void *)v554 = *(void *)v555;
          *((void *)v554 + 1) = v556;
          uint64_t v557 = *(int *)(v391 + 24);
          v558 = &v389[v557];
          v559 = &v390[v557];
          uint64_t v560 = *((void *)v559 + 1);
          *(void *)v558 = *(void *)v559;
          *((void *)v558 + 1) = v560;
          v561 = *(void (**)(char *, void, uint64_t, uint64_t))(v392 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v561(v389, 0, 1, v391);
        }
        goto LABEL_103;
      case 2u:
        uint64_t v15 = type metadata accessor for AppPunchout();
        uint64_t v16 = *(void *)(v15 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v16 + 16))(a1, a2, v15);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
        uint64_t v155 = (int *)type metadata accessor for BloodPressureLogModel();
        uint64_t v156 = v155[5];
        uint64_t v157 = (uint64_t *)((char *)a1 + v156);
        uint64_t v158 = (uint64_t *)((char *)a2 + v156);
        uint64_t v159 = v158[1];
        void *v157 = *v158;
        v157[1] = v159;
        uint64_t v160 = v155[6];
        uint64_t v161 = (uint64_t *)((char *)a1 + v160);
        uint64_t v162 = (uint64_t *)((char *)a2 + v160);
        uint64_t v163 = v162[1];
        *uint64_t v161 = *v162;
        v161[1] = v163;
        uint64_t v164 = v155[7];
        uint64_t v165 = (uint64_t *)((char *)a1 + v164);
        uint64_t v166 = (uint64_t *)((char *)a2 + v164);
        uint64_t v167 = v166[1];
        *uint64_t v165 = *v166;
        v165[1] = v167;
        uint64_t v168 = v155[8];
        __dstc = (char *)a1 + v168;
        uint64_t v169 = (char *)a2 + v168;
        uint64_t v170 = type metadata accessor for SnippetHeaderModel();
        v633 = *(void **)(v170 - 8);
        uint64_t v171 = (unsigned int (*)(char *, uint64_t, uint64_t))v633[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v171(v169, 1, v170))
        {
          uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dstc, v169, *(void *)(*(void *)(v172 - 8) + 64));
        }
        else
        {
          uint64_t v395 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v395 - 8) + 16))(__dstc, v169, v395);
          uint64_t v396 = *(int *)(v170 + 20);
          Swift::String v397 = &__dstc[v396];
          v398 = &v169[v396];
          uint64_t v399 = *((void *)v398 + 1);
          *(void *)Swift::String v397 = *(void *)v398;
          *((void *)v397 + 1) = v399;
          uint64_t v400 = *(int *)(v170 + 24);
          v401 = &__dstc[v400];
          uint64_t v402 = &v169[v400];
          uint64_t v403 = *((void *)v402 + 1);
          *(void *)v401 = *(void *)v402;
          *((void *)v401 + 1) = v403;
          uint64_t v404 = (void (*)(char *, void, uint64_t, uint64_t))v633[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v404(__dstc, 0, 1, v170);
        }
        uint64_t v405 = v155[9];
        v406 = (uint64_t *)((char *)a1 + v405);
        uint64_t v407 = (uint64_t *)((char *)a2 + v405);
        uint64_t v408 = v407[1];
        void *v406 = *v407;
        v406[1] = v408;
        uint64_t v409 = v155[10];
        uint64_t v410 = (uint64_t *)((char *)a1 + v409);
        uint64_t v411 = (uint64_t *)((char *)a2 + v409);
        uint64_t v412 = v411[1];
        *uint64_t v410 = *v411;
        v410[1] = v412;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 3u:
        uint64_t v18 = type metadata accessor for AppPunchout();
        uint64_t v19 = *(void *)(v18 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(a2, 1, v18))
        {
          uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v19 + 16))(a1, a2, v18);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v19 + 56))(a1, 0, 1, v18);
        }
        uint64_t v173 = (int *)type metadata accessor for CycleTrackingLogModel();
        uint64_t v174 = v173[5];
        uint64_t v175 = (uint64_t *)((char *)a1 + v174);
        uint64_t v176 = (uint64_t *)((char *)a2 + v174);
        uint64_t v177 = v176[1];
        *uint64_t v175 = *v176;
        v175[1] = v177;
        uint64_t v178 = v173[6];
        uint64_t v179 = (uint64_t *)((char *)a1 + v178);
        uint64_t v180 = (uint64_t *)((char *)a2 + v178);
        uint64_t v181 = v180[1];
        void *v179 = *v180;
        v179[1] = v181;
        uint64_t v182 = v173[7];
        long long v183 = (uint64_t *)((char *)a1 + v182);
        long long v184 = (uint64_t *)((char *)a2 + v182);
        uint64_t v185 = v184[1];
        *long long v183 = *v184;
        v183[1] = v185;
        uint64_t v186 = v173[8];
        __dstd = (char *)a1 + v186;
        long long v187 = (char *)a2 + v186;
        uint64_t v188 = type metadata accessor for SnippetHeaderModel();
        v634 = *(void **)(v188 - 8);
        uint64_t v189 = (unsigned int (*)(char *, uint64_t, uint64_t))v634[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v189(v187, 1, v188))
        {
          uint64_t v190 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dstd, v187, *(void *)(*(void *)(v190 - 8) + 64));
        }
        else
        {
          uint64_t v413 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v413 - 8) + 16))(__dstd, v187, v413);
          uint64_t v414 = *(int *)(v188 + 20);
          v415 = &__dstd[v414];
          v416 = &v187[v414];
          uint64_t v417 = *((void *)v416 + 1);
          *(void *)v415 = *(void *)v416;
          *((void *)v415 + 1) = v417;
          uint64_t v418 = *(int *)(v188 + 24);
          long long v419 = &__dstd[v418];
          uint64_t v420 = &v187[v418];
          uint64_t v421 = *((void *)v420 + 1);
          *(void *)long long v419 = *(void *)v420;
          *((void *)v419 + 1) = v421;
          uint64_t v422 = (void (*)(char *, void, uint64_t, uint64_t))v634[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v422(__dstd, 0, 1, v188);
        }
        uint64_t v423 = v173[9];
        long long v424 = (char *)a1 + v423;
        long long v425 = (char *)a2 + v423;
        uint64_t v426 = type metadata accessor for URL();
        uint64_t v427 = *(void *)(v426 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v427 + 48))(v425, 1, v426))
        {
          uint64_t v428 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v424, v425, *(void *)(*(void *)(v428 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v427 + 16))(v424, v425, v426);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v427 + 56))(v424, 0, 1, v426);
        }
        goto LABEL_103;
      case 4u:
        uint64_t v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        uint64_t v22 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
        uint64_t v23 = (char *)a1 + v22;
        uint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = type metadata accessor for URL();
        uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
        swift_bridgeObjectRetain();
        v26(v23, v24, v25);
        swift_storeEnumTagMultiPayload();
        return a1;
      case 5u:
        uint64_t v27 = a2[1];
        *a1 = *a2;
        a1[1] = v27;
        uint64_t v28 = a2[3];
        a1[2] = a2[2];
        a1[3] = v28;
        uint64_t v29 = a2[5];
        a1[4] = a2[4];
        a1[5] = v29;
        *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 6u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v30 = a2[2];
        a1[1] = a2[1];
        a1[2] = v30;
        uint64_t v31 = (int *)type metadata accessor for GenericMedCompletedLogModel();
        uint64_t v32 = v31[6];
        uint64_t v33 = (char *)a1 + v32;
        uint64_t v34 = (char *)a2 + v32;
        uint64_t v35 = type metadata accessor for AppPunchout();
        uint64_t v36 = *(void *)(v35 - 8);
        uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
        swift_bridgeObjectRetain();
        if (v37(v34, 1, v35))
        {
          uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
        }
        *((unsigned char *)a1 + v31[7]) = *((unsigned char *)a2 + v31[7]);
        uint64_t v191 = v31[8];
        uint64_t v192 = (uint64_t *)((char *)a1 + v191);
        uint64_t v193 = (uint64_t *)((char *)a2 + v191);
        uint64_t v194 = v193[1];
        *uint64_t v192 = *v193;
        v192[1] = v194;
        *((unsigned char *)a1 + v31[9]) = *((unsigned char *)a2 + v31[9]);
        uint64_t v195 = v31[10];
        uint64_t v196 = (uint64_t *)((char *)a1 + v195);
        uint64_t v197 = (uint64_t *)((char *)a2 + v195);
        uint64_t v198 = v197[1];
        *uint64_t v196 = *v197;
        v196[1] = v198;
        uint64_t v199 = v31[11];
        uint64_t v200 = (uint64_t *)((char *)a1 + v199);
        uint64_t v201 = (uint64_t *)((char *)a2 + v199);
        uint64_t v202 = v201[1];
        *uint64_t v200 = *v201;
        v200[1] = v202;
        uint64_t v203 = v31[12];
        uint64_t v204 = (uint64_t *)((char *)a1 + v203);
        uint64_t v205 = (uint64_t *)((char *)a2 + v203);
        uint64_t v206 = v205[1];
        void *v204 = *v205;
        v204[1] = v206;
        uint64_t v207 = v31[13];
        long long v208 = (uint64_t *)((char *)a1 + v207);
        long long v209 = (uint64_t *)((char *)a2 + v207);
        uint64_t v210 = v209[1];
        *long long v208 = *v209;
        v208[1] = v210;
        uint64_t v211 = v31[14];
        __dst = (char *)a1 + v211;
        uint64_t v63 = (char *)a2 + v211;
        uint64_t v64 = type metadata accessor for SnippetHeaderModel();
        v630 = *(void **)(v64 - 8);
        long long v212 = (unsigned int (*)(char *, uint64_t, uint64_t))v630[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v212(v63, 1, v64)) {
          goto LABEL_26;
        }
        goto LABEL_57;
      case 7u:
        uint64_t v39 = type metadata accessor for SnippetHeaderModel();
        uint64_t v40 = *(void *)(v39 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v40 + 48))(a2, 1, v39))
        {
          uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(a1, a2, *(void *)(*(void *)(v41 - 8) + 64));
        }
        else
        {
          uint64_t v213 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v213 - 8) + 16))(a1, a2, v213);
          uint64_t v214 = *(int *)(v39 + 20);
          uint64_t v215 = (uint64_t *)((char *)a1 + v214);
          uint64_t v216 = (uint64_t *)((char *)a2 + v214);
          uint64_t v217 = v216[1];
          *uint64_t v215 = *v216;
          v215[1] = v217;
          uint64_t v218 = *(int *)(v39 + 24);
          uint64_t v219 = (uint64_t *)((char *)a1 + v218);
          uint64_t v220 = (uint64_t *)((char *)a2 + v218);
          uint64_t v221 = v220[1];
          *uint64_t v219 = *v220;
          v219[1] = v221;
          uint64_t v222 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v40 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v222(a1, 0, 1, v39);
        }
        uint64_t v223 = (int *)type metadata accessor for HealthDataLogModel();
        *(uint64_t *)((char *)a1 + v223[5]) = *(uint64_t *)((char *)a2 + v223[5]);
        uint64_t v224 = v223[6];
        uint64_t v225 = (uint64_t *)((char *)a1 + v224);
        uint64_t v226 = (uint64_t *)((char *)a2 + v224);
        uint64_t v626 = v226[1];
        void *v225 = *v226;
        v225[1] = v626;
        uint64_t v227 = v223[7];
        uint64_t v228 = (uint64_t *)((char *)a1 + v227);
        long long v229 = (uint64_t *)((char *)a2 + v227);
        uint64_t v230 = v229[1];
        *uint64_t v228 = *v229;
        v228[1] = v230;
        uint64_t v231 = v223[8];
        long long v232 = (uint64_t *)((char *)a1 + v231);
        long long v233 = (uint64_t *)((char *)a2 + v231);
        uint64_t v234 = v233[1];
        *long long v232 = *v233;
        v232[1] = v234;
        uint64_t v235 = v223[9];
        long long v236 = (uint64_t *)((char *)a1 + v235);
        long long v237 = (uint64_t *)((char *)a2 + v235);
        uint64_t v238 = v237[1];
        *long long v236 = *v237;
        v236[1] = v238;
        uint64_t v239 = v223[10];
        __dste = (char *)a1 + v239;
        long long v240 = (char *)a2 + v239;
        uint64_t v241 = type metadata accessor for AppPunchout();
        uint64_t v242 = *(void *)(v241 - 8);
        v621 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v242 + 48);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v621(v240, 1, v241))
        {
          uint64_t v243 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(__dste, v240, *(void *)(*(void *)(v243 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v242 + 16))(__dste, v240, v241);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v242 + 56))(__dste, 0, 1, v241);
        }
        uint64_t v429 = v223[11];
        long long v430 = (uint64_t *)((char *)a1 + v429);
        long long v431 = (uint64_t *)((char *)a2 + v429);
        uint64_t v432 = v431[1];
        *long long v430 = *v431;
        v430[1] = v432;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 8u:
        uint64_t v42 = type metadata accessor for AppPunchout();
        uint64_t v43 = *(void *)(v42 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48))(a2, 1, v42))
        {
          uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v44 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v43 + 16))(a1, a2, v42);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v43 + 56))(a1, 0, 1, v42);
        }
        char v244 = (int *)type metadata accessor for GenericQueryModel();
        uint64_t v245 = v244[5];
        uint64_t v246 = (char *)a1 + v245;
        uint64_t v247 = (char *)a2 + v245;
        *(void *)uint64_t v246 = *(void *)v247;
        v246[8] = v247[8];
        uint64_t v248 = v244[6];
        uint64_t v249 = (char *)a1 + v248;
        char v250 = (char *)a2 + v248;
        *(void *)uint64_t v249 = *(void *)v250;
        v249[8] = v250[8];
        uint64_t v251 = v244[7];
        long long v252 = (char *)a1 + v251;
        uint64_t v253 = (char *)a2 + v251;
        v252[8] = v253[8];
        *(void *)long long v252 = *(void *)v253;
        uint64_t v254 = v244[8];
        long long v255 = (char *)a1 + v254;
        uint64_t v256 = (char *)a2 + v254;
        v255[8] = v256[8];
        *(void *)long long v255 = *(void *)v256;
        uint64_t v257 = v244[9];
        uint64_t v258 = (char *)a1 + v257;
        uint64_t v259 = (char *)a2 + v257;
        v258[8] = v259[8];
        *(void *)uint64_t v258 = *(void *)v259;
        uint64_t v260 = v244[10];
        long long v261 = (char *)a1 + v260;
        uint64_t v262 = (char *)a2 + v260;
        uint64_t v263 = type metadata accessor for SpeakableString();
        uint64_t v264 = *(void *)(v263 - 8);
        uint64_t v617 = v264;
        uint64_t v622 = v263;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v264 + 48))(v262, 1, v263))
        {
          uint64_t v265 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v261, v262, *(void *)(*(void *)(v265 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v264 + 16))(v261, v262, v263);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v264 + 56))(v261, 0, 1, v263);
        }
        uint64_t v433 = v244[11];
        uint64_t v434 = (uint64_t *)((char *)a1 + v433);
        uint64_t v435 = (uint64_t *)((char *)a2 + v433);
        v637 = (void *)v435[1];
        *uint64_t v434 = *v435;
        v434[1] = v637;
        uint64_t v436 = v244[12];
        v437 = (uint64_t *)((char *)a1 + v436);
        v438 = (uint64_t *)((char *)a2 + v436);
        uint64_t v439 = v438[1];
        void *v437 = *v438;
        v437[1] = v439;
        uint64_t v440 = v244[13];
        v441 = (uint64_t *)((char *)a1 + v440);
        v442 = (uint64_t *)((char *)a2 + v440);
        uint64_t v443 = v442[1];
        void *v441 = *v442;
        v441[1] = v443;
        uint64_t v444 = v244[14];
        v445 = (uint64_t *)((char *)a1 + v444);
        v446 = (uint64_t *)((char *)a2 + v444);
        uint64_t v447 = v446[1];
        void *v445 = *v446;
        v445[1] = v447;
        uint64_t v448 = v244[15];
        v449 = (uint64_t *)((char *)a1 + v448);
        v450 = (uint64_t *)((char *)a2 + v448);
        uint64_t v451 = v450[1];
        void *v449 = *v450;
        v449[1] = v451;
        uint64_t v452 = v244[16];
        v453 = (uint64_t *)((char *)a1 + v452);
        v454 = (uint64_t *)((char *)a2 + v452);
        uint64_t v455 = v454[1];
        void *v453 = *v454;
        v453[1] = v455;
        uint64_t v456 = v244[17];
        v457 = (uint64_t *)((char *)a1 + v456);
        v458 = (uint64_t *)((char *)a2 + v456);
        uint64_t v459 = v458[1];
        void *v457 = *v458;
        v457[1] = v459;
        uint64_t v460 = v244[18];
        __dstf = (char *)a1 + v460;
        uint64_t v329 = (char *)a2 + v460;
        uint64_t v461 = type metadata accessor for SnippetHeaderModel();
        uint64_t v615 = *(void *)(v461 - 8);
        v629 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v615 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v629(v329, 1, v461)) {
          goto LABEL_83;
        }
        (*(void (**)(char *, char *, uint64_t))(v617 + 16))(__dstf, v329, v622);
        uint64_t v562 = *(int *)(v461 + 20);
        v563 = &__dstf[v562];
        v564 = &v329[v562];
        uint64_t v565 = *((void *)v564 + 1);
        *(void *)v563 = *(void *)v564;
        *((void *)v563 + 1) = v565;
        uint64_t v566 = *(int *)(v461 + 24);
        v567 = &__dstf[v566];
        v568 = &v329[v566];
        uint64_t v569 = *((void *)v568 + 1);
        *(void *)v567 = *(void *)v568;
        *((void *)v567 + 1) = v569;
        v570 = *(void (**)(char *, void, uint64_t, uint64_t))(v615 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v570(__dstf, 0, 1, v461);
        goto LABEL_103;
      case 9u:
        uint64_t v45 = type metadata accessor for AppPunchout();
        uint64_t v46 = *(void *)(v45 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v46 + 48))(a2, 1, v45))
        {
          uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v47 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v46 + 16))(a1, a2, v45);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v46 + 56))(a1, 0, 1, v45);
        }
        uint64_t v266 = (int *)type metadata accessor for HeightQueryModel();
        uint64_t v267 = v266[5];
        uint64_t v268 = (char *)a1 + v267;
        uint64_t v269 = (char *)a2 + v267;
        *(void *)uint64_t v268 = *(void *)v269;
        v268[8] = v269[8];
        uint64_t v270 = v266[6];
        uint64_t v271 = (char *)a1 + v270;
        uint64_t v272 = (char *)a2 + v270;
        *(void *)uint64_t v271 = *(void *)v272;
        v271[8] = v272[8];
        uint64_t v273 = v266[7];
        uint64_t v274 = (char *)a1 + v273;
        v275 = (char *)a2 + v273;
        v274[8] = v275[8];
        *(void *)uint64_t v274 = *(void *)v275;
        uint64_t v276 = v266[8];
        uint64_t v277 = (char *)a1 + v276;
        uint64_t v278 = (char *)a2 + v276;
        uint64_t v279 = type metadata accessor for SpeakableString();
        uint64_t v280 = *(void *)(v279 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v280 + 48))(v278, 1, v279))
        {
          uint64_t v281 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v277, v278, *(void *)(*(void *)(v281 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v280 + 16))(v277, v278, v279);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v280 + 56))(v277, 0, 1, v279);
        }
        *((unsigned char *)a1 + v266[9]) = *((unsigned char *)a2 + v266[9]);
        uint64_t v463 = v266[10];
        v464 = (char *)a1 + v463;
        v465 = (char *)a2 + v463;
        uint64_t v466 = type metadata accessor for SnippetHeaderModel();
        uint64_t v467 = *(void *)(v466 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v467 + 48))(v465, 1, v466))
        {
          uint64_t v468 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v464, v465, *(void *)(*(void *)(v468 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v280 + 16))(v464, v465, v279);
          uint64_t v571 = *(int *)(v466 + 20);
          v572 = &v464[v571];
          v573 = &v465[v571];
          uint64_t v574 = *((void *)v573 + 1);
          *(void *)v572 = *(void *)v573;
          *((void *)v572 + 1) = v574;
          uint64_t v575 = *(int *)(v466 + 24);
          v576 = &v464[v575];
          v577 = &v465[v575];
          uint64_t v578 = *((void *)v577 + 1);
          *(void *)v576 = *(void *)v577;
          *((void *)v576 + 1) = v578;
          v579 = *(void (**)(char *, void, uint64_t, uint64_t))(v467 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v579(v464, 0, 1, v466);
        }
        uint64_t v580 = v266[11];
        v581 = (uint64_t *)((char *)a1 + v580);
        v582 = (uint64_t *)((char *)a2 + v580);
        uint64_t v583 = v582[1];
        void *v581 = *v582;
        v581[1] = v583;
        uint64_t v584 = v266[12];
        v585 = (uint64_t *)((char *)a1 + v584);
        v586 = (uint64_t *)((char *)a2 + v584);
        uint64_t v587 = v586[1];
        void *v585 = *v586;
        v585[1] = v587;
        uint64_t v588 = v266[13];
        v589 = (uint64_t *)((char *)a1 + v588);
        v590 = (uint64_t *)((char *)a2 + v588);
        uint64_t v591 = v590[1];
        void *v589 = *v590;
        v589[1] = v591;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xAu:
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
        a1[2] = a2[2];
        *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
        a1[4] = a2[4];
        *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
        *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
        a1[6] = a2[6];
        uint64_t v48 = a2[8];
        *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
        a1[8] = v48;
        a1[10] = a2[10];
        *((unsigned char *)a1 + 88) = *((unsigned char *)a2 + 88);
        uint64_t v49 = a2[13];
        a1[12] = a2[12];
        a1[13] = v49;
        uint64_t v50 = a2[15];
        a1[14] = a2[14];
        a1[15] = v50;
        uint64_t v51 = a2[17];
        a1[16] = a2[16];
        a1[17] = v51;
        uint64_t v52 = a2[19];
        a1[18] = a2[18];
        a1[19] = v52;
        uint64_t v53 = a2[21];
        a1[20] = a2[20];
        a1[21] = v53;
        uint64_t v54 = a2[23];
        a1[22] = a2[22];
        a1[23] = v54;
        uint64_t v55 = a2[25];
        a1[24] = a2[24];
        a1[25] = v55;
        uint64_t v56 = a2[27];
        a1[26] = a2[26];
        a1[27] = v56;
        uint64_t v57 = a2[29];
        a1[28] = a2[28];
        a1[29] = v57;
        *((unsigned char *)a1 + 240) = *((unsigned char *)a2 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xBu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v58 = a2[3];
        a1[2] = a2[2];
        a1[3] = v58;
        uint64_t v59 = a2[5];
        a1[4] = a2[4];
        a1[5] = v59;
        uint64_t v60 = a2[7];
        a1[6] = a2[6];
        a1[7] = v60;
        uint64_t v61 = a2[9];
        a1[8] = a2[8];
        a1[9] = v61;
        a1[10] = a2[10];
        uint64_t v62 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
        __dst = (char *)a1 + v62;
        uint64_t v63 = (char *)a2 + v62;
        uint64_t v64 = type metadata accessor for SnippetHeaderModel();
        v630 = *(void **)(v64 - 8);
        uint64_t v65 = (unsigned int (*)(char *, uint64_t, uint64_t))v630[6];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v65(v63, 1, v64))
        {
LABEL_26:
          uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dst, v63, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
LABEL_57:
          uint64_t v282 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v282 - 8) + 16))(__dst, v63, v282);
          uint64_t v283 = *(int *)(v64 + 20);
          uint64_t v284 = &__dst[v283];
          uint64_t v285 = &v63[v283];
          uint64_t v286 = *((void *)v285 + 1);
          *(void *)uint64_t v284 = *(void *)v285;
          *((void *)v284 + 1) = v286;
          uint64_t v287 = *(int *)(v64 + 24);
          uint64_t v288 = &__dst[v287];
          uint64_t v289 = &v63[v287];
          uint64_t v290 = *((void *)v289 + 1);
          *(void *)uint64_t v288 = *(void *)v289;
          *((void *)v288 + 1) = v290;
          uint64_t v291 = (void (*)(char *, void, uint64_t, uint64_t))v630[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v291(__dst, 0, 1, v64);
        }
        goto LABEL_103;
      case 0xCu:
        uint64_t v67 = type metadata accessor for AppPunchout();
        uint64_t v68 = *(void *)(v67 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v68 + 48))(a2, 1, v67))
        {
          uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v69 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v68 + 16))(a1, a2, v67);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v68 + 56))(a1, 0, 1, v67);
        }
        uint64_t v292 = (int *)type metadata accessor for SleepQueryModel();
        uint64_t v293 = v292[5];
        uint64_t v294 = (char *)a1 + v293;
        uint64_t v295 = (char *)a2 + v293;
        uint64_t v296 = type metadata accessor for SnippetHeaderModel();
        uint64_t v297 = *(void *)(v296 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v297 + 48))(v295, 1, v296))
        {
          uint64_t v298 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v294, v295, *(void *)(*(void *)(v298 - 8) + 64));
        }
        else
        {
          uint64_t v469 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v469 - 8) + 16))(v294, v295, v469);
          uint64_t v470 = *(int *)(v296 + 20);
          v471 = &v294[v470];
          v472 = &v295[v470];
          uint64_t v473 = *((void *)v472 + 1);
          *(void *)v471 = *(void *)v472;
          *((void *)v471 + 1) = v473;
          uint64_t v474 = *(int *)(v296 + 24);
          v475 = &v294[v474];
          v476 = &v295[v474];
          uint64_t v477 = *((void *)v476 + 1);
          *(void *)v475 = *(void *)v476;
          *((void *)v475 + 1) = v477;
          v478 = *(void (**)(char *, void, uint64_t, uint64_t))(v297 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v478(v294, 0, 1, v296);
        }
        uint64_t v479 = v292[6];
        v480 = (uint64_t *)((char *)a1 + v479);
        v481 = (uint64_t *)((char *)a2 + v479);
        uint64_t v482 = v481[1];
        void *v480 = *v481;
        v480[1] = v482;
        uint64_t v483 = v292[7];
        v484 = (uint64_t *)((char *)a1 + v483);
        v485 = (uint64_t *)((char *)a2 + v483);
        __dsth = (void *)v485[1];
        void *v484 = *v485;
        v484[1] = __dsth;
        uint64_t v486 = v292[8];
        v487 = (uint64_t *)((char *)a1 + v486);
        v488 = (uint64_t *)((char *)a2 + v486);
        v638 = (void *)v488[1];
        void *v487 = *v488;
        v487[1] = v638;
        uint64_t v489 = v292[9];
        v490 = (uint64_t *)((char *)a1 + v489);
        v491 = (uint64_t *)((char *)a2 + v489);
        uint64_t v492 = v491[1];
        void *v490 = *v491;
        v490[1] = v492;
        uint64_t v493 = v292[10];
        v494 = (uint64_t *)((char *)a1 + v493);
        v495 = (uint64_t *)((char *)a2 + v493);
        uint64_t v496 = v495[1];
        void *v494 = *v495;
        v494[1] = v496;
        *(uint64_t *)((char *)a1 + v292[11]) = *(uint64_t *)((char *)a2 + v292[11]);
        *(uint64_t *)((char *)a1 + v292[12]) = *(uint64_t *)((char *)a2 + v292[12]);
        *(uint64_t *)((char *)a1 + v292[13]) = *(uint64_t *)((char *)a2 + v292[13]);
        *(uint64_t *)((char *)a1 + v292[14]) = *(uint64_t *)((char *)a2 + v292[14]);
        uint64_t v497 = v292[15];
        v498 = (uint64_t *)((char *)a1 + v497);
        v499 = (uint64_t *)((char *)a2 + v497);
        uint64_t v500 = v499[1];
        void *v498 = *v499;
        v498[1] = v500;
        uint64_t v501 = v292[16];
        v502 = (uint64_t *)((char *)a1 + v501);
        v503 = (uint64_t *)((char *)a2 + v501);
        uint64_t v504 = v503[1];
        void *v502 = *v503;
        v502[1] = v504;
        uint64_t v505 = v292[17];
        v506 = (uint64_t *)((char *)a1 + v505);
        v507 = (uint64_t *)((char *)a2 + v505);
        uint64_t v508 = v507[1];
        void *v506 = *v507;
        v506[1] = v508;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xDu:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v70 = a2[2];
        a1[1] = a2[1];
        a1[2] = v70;
        uint64_t v71 = a2[4];
        a1[3] = a2[3];
        a1[4] = v71;
        uint64_t v72 = a2[6];
        a1[5] = a2[5];
        a1[6] = v72;
        uint64_t v73 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
        uint64_t v74 = v73[8];
        __dsta = (char *)a1 + v74;
        uint64_t v75 = (char *)a2 + v74;
        uint64_t v76 = type metadata accessor for AppPunchout();
        uint64_t v77 = *(void *)(v76 - 8);
        v631 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v631(v75, 1, v76))
        {
          uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(__dsta, v75, *(void *)(*(void *)(v78 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v77 + 16))(__dsta, v75, v76);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(__dsta, 0, 1, v76);
        }
        uint64_t v299 = v73[9];
        uint64_t v300 = (char *)a1 + v299;
        char v301 = (char *)a2 + v299;
        *(void *)uint64_t v300 = *(void *)v301;
        v300[8] = v301[8];
        uint64_t v302 = v73[10];
        v303 = (uint64_t *)((char *)a1 + v302);
        v304 = (uint64_t *)((char *)a2 + v302);
        v635 = (void *)v304[1];
        void *v303 = *v304;
        v303[1] = v635;
        uint64_t v305 = v73[11];
        uint64_t v306 = (uint64_t *)((char *)a1 + v305);
        char v307 = (uint64_t *)((char *)a2 + v305);
        uint64_t v627 = v307[1];
        *uint64_t v306 = *v307;
        v306[1] = v627;
        uint64_t v308 = v73[12];
        v309 = (uint64_t *)((char *)a1 + v308);
        Swift::String v310 = (uint64_t *)((char *)a2 + v308);
        uint64_t v311 = v310[1];
        void *v309 = *v310;
        v309[1] = v311;
        uint64_t v312 = v73[13];
        uint64_t v313 = (uint64_t *)((char *)a1 + v312);
        v314 = (uint64_t *)((char *)a2 + v312);
        uint64_t v315 = v314[1];
        *uint64_t v313 = *v314;
        v313[1] = v315;
        *((unsigned char *)a1 + v73[14]) = *((unsigned char *)a2 + v73[14]);
        *((unsigned char *)a1 + v73[15]) = *((unsigned char *)a2 + v73[15]);
        uint64_t v316 = v73[16];
        char v317 = (uint64_t *)((char *)a1 + v316);
        uint64_t v318 = (uint64_t *)((char *)a2 + v316);
        uint64_t v319 = v318[1];
        *char v317 = *v318;
        v317[1] = v319;
        uint64_t v320 = v73[17];
        v321 = (uint64_t *)((char *)a1 + v320);
        v322 = (uint64_t *)((char *)a2 + v320);
        uint64_t v323 = v322[1];
        void *v321 = *v322;
        v321[1] = v323;
        uint64_t v324 = v73[18];
        uint64_t v325 = (uint64_t *)((char *)a1 + v324);
        v326 = (uint64_t *)((char *)a2 + v324);
        uint64_t v327 = v326[1];
        *uint64_t v325 = *v326;
        v325[1] = v327;
        uint64_t v328 = v73[19];
        __dstf = (char *)a1 + v328;
        uint64_t v329 = (char *)a2 + v328;
        uint64_t v330 = type metadata accessor for SnippetHeaderModel();
        uint64_t v623 = *(void *)(v330 - 8);
        uint64_t v331 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v623 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v331(v329, 1, v330))
        {
LABEL_83:
          uint64_t v462 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dstf, v329, *(void *)(*(void *)(v462 - 8) + 64));
        }
        else
        {
          uint64_t v509 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v509 - 8) + 16))(__dstf, v329, v509);
          uint64_t v510 = *(int *)(v330 + 20);
          v511 = &__dstf[v510];
          v512 = &v329[v510];
          uint64_t v513 = *((void *)v512 + 1);
          *(void *)v511 = *(void *)v512;
          *((void *)v511 + 1) = v513;
          uint64_t v514 = *(int *)(v330 + 24);
          v515 = &__dstf[v514];
          v516 = &v329[v514];
          uint64_t v517 = *((void *)v516 + 1);
          *(void *)v515 = *(void *)v516;
          *((void *)v515 + 1) = v517;
          v518 = *(void (**)(char *, void, uint64_t, uint64_t))(v623 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v518(__dstf, 0, 1, v330);
        }
        goto LABEL_103;
      case 0xEu:
        uint64_t v79 = type metadata accessor for AppPunchout();
        uint64_t v80 = *(void *)(v79 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v80 + 48))(a2, 1, v79))
        {
          uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v81 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v80 + 16))(a1, a2, v79);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v80 + 56))(a1, 0, 1, v79);
        }
        uint64_t v332 = (int *)type metadata accessor for TemperatureQueryModel();
        uint64_t v333 = v332[5];
        uint64_t v334 = (char *)a1 + v333;
        char v335 = (char *)a2 + v333;
        *(void *)uint64_t v334 = *(void *)v335;
        v334[8] = v335[8];
        uint64_t v336 = v332[6];
        uint64_t v337 = (char *)a1 + v336;
        char v338 = (char *)a2 + v336;
        *(void *)uint64_t v337 = *(void *)v338;
        v337[8] = v338[8];
        uint64_t v339 = v332[7];
        Swift::String v340 = (char *)a1 + v339;
        v341 = (char *)a2 + v339;
        v340[8] = v341[8];
        *(void *)Swift::String v340 = *(void *)v341;
        uint64_t v342 = v332[8];
        char v343 = (char *)a1 + v342;
        Swift::String v344 = (char *)a2 + v342;
        v343[8] = v344[8];
        *(void *)char v343 = *(void *)v344;
        uint64_t v345 = v332[9];
        uint64_t v346 = (char *)a1 + v345;
        uint64_t v347 = (char *)a2 + v345;
        v346[8] = v347[8];
        *(void *)uint64_t v346 = *(void *)v347;
        uint64_t v348 = v332[10];
        char v349 = (char *)a1 + v348;
        char v350 = (char *)a2 + v348;
        uint64_t v351 = type metadata accessor for SpeakableString();
        uint64_t v352 = *(void *)(v351 - 8);
        __dstg = *(unsigned int (**)(char *, uint64_t, uint64_t))(v352 + 48);
        uint64_t v628 = v352;
        if (__dstg(v350, 1, v351))
        {
          uint64_t v353 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v349, v350, *(void *)(*(void *)(v353 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v352 + 16))(v349, v350, v351);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v352 + 56))(v349, 0, 1, v351);
        }
        uint64_t v519 = v332[11];
        v520 = (uint64_t *)((char *)a1 + v519);
        v521 = (uint64_t *)((char *)a2 + v519);
        uint64_t v522 = v521[1];
        void *v520 = *v521;
        v520[1] = v522;
        uint64_t v523 = v332[12];
        v524 = (uint64_t *)((char *)a1 + v523);
        v525 = (uint64_t *)((char *)a2 + v523);
        uint64_t v526 = v525[1];
        void *v524 = *v525;
        v524[1] = v526;
        uint64_t v527 = v332[13];
        v528 = (uint64_t *)((char *)a1 + v527);
        v529 = (uint64_t *)((char *)a2 + v527);
        uint64_t v530 = v529[1];
        void *v528 = *v529;
        v528[1] = v530;
        uint64_t v531 = v332[14];
        v532 = (uint64_t *)((char *)a1 + v531);
        v533 = (uint64_t *)((char *)a2 + v531);
        uint64_t v534 = v533[1];
        void *v532 = *v533;
        v532[1] = v534;
        uint64_t v535 = v332[15];
        v536 = (uint64_t *)((char *)a1 + v535);
        v537 = (uint64_t *)((char *)a2 + v535);
        uint64_t v538 = v537[1];
        void *v536 = *v537;
        v536[1] = v538;
        uint64_t v539 = v332[16];
        v639 = (char *)a1 + v539;
        v540 = (char *)a2 + v539;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v541 = v351;
        if (__dstg(v540, 1, v351))
        {
          uint64_t v542 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v639, v540, *(void *)(*(void *)(v542 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v628 + 16))(v639, v540, v351);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v628 + 56))(v639, 0, 1, v351);
        }
        uint64_t v592 = v332[17];
        v593 = (uint64_t *)((char *)a1 + v592);
        v594 = (uint64_t *)((char *)a2 + v592);
        uint64_t v595 = v594[1];
        void *v593 = *v594;
        v593[1] = v595;
        uint64_t v596 = v332[18];
        v597 = (char *)a1 + v596;
        v598 = (char *)a2 + v596;
        uint64_t v599 = type metadata accessor for SnippetHeaderModel();
        uint64_t v600 = *(void *)(v599 - 8);
        v601 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v600 + 48);
        swift_bridgeObjectRetain();
        if (v601(v598, 1, v599))
        {
          uint64_t v602 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v597, v598, *(void *)(*(void *)(v602 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v628 + 16))(v597, v598, v541);
          uint64_t v603 = *(int *)(v599 + 20);
          v604 = &v597[v603];
          v605 = &v598[v603];
          uint64_t v606 = *((void *)v605 + 1);
          *(void *)v604 = *(void *)v605;
          *((void *)v604 + 1) = v606;
          uint64_t v607 = *(int *)(v599 + 24);
          v608 = &v597[v607];
          v609 = &v598[v607];
          uint64_t v610 = *((void *)v609 + 1);
          *(void *)v608 = *(void *)v609;
          *((void *)v608 + 1) = v610;
          v611 = *(void (**)(char *, void, uint64_t, uint64_t))(v600 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v611(v597, 0, 1, v599);
        }
LABEL_103:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for WellnessSnippets(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v3 = type metadata accessor for AppPunchout();
      uint64_t v4 = *(void *)(v3 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3)) {
        (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
      }
      uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
      uint64_t v6 = a1 + *(int *)(Model + 36);
      uint64_t v7 = type metadata accessor for SpeakableString();
      uint64_t v8 = *(void *)(v7 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v9 = *(int *)(Model + 64);
      goto LABEL_66;
    case 1:
      uint64_t v10 = type metadata accessor for AppPunchout();
      uint64_t v11 = *(void *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1, v10)) {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
      }
      uint64_t v12 = type metadata accessor for BloodPressureQueryModel();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = a1 + *(int *)(v12 + 80);
      uint64_t v14 = type metadata accessor for URL();
      uint64_t v15 = *(void *)(v14 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(int *)(v12 + 92);
      goto LABEL_57;
    case 2:
      uint64_t v17 = type metadata accessor for AppPunchout();
      uint64_t v18 = *(void *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(a1, 1, v17)) {
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
      }
      uint64_t v19 = type metadata accessor for BloodPressureLogModel();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v20 = a1 + *(int *)(v19 + 32);
      uint64_t v21 = type metadata accessor for SnippetHeaderModel();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21))
      {
        uint64_t v22 = type metadata accessor for SpeakableString();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v20, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      break;
    case 3:
      uint64_t v23 = type metadata accessor for AppPunchout();
      uint64_t v24 = *(void *)(v23 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(a1, 1, v23)) {
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, v23);
      }
      uint64_t v25 = type metadata accessor for CycleTrackingLogModel();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v26 = a1 + *(int *)(v25 + 32);
      uint64_t v27 = type metadata accessor for SnippetHeaderModel();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v26, 1, v27))
      {
        uint64_t v28 = type metadata accessor for SpeakableString();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v26, v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v29 = a1 + *(int *)(v25 + 36);
      uint64_t v30 = type metadata accessor for URL();
      uint64_t v77 = *(void *)(v30 - 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v29, 1, v30);
      if (result) {
        return result;
      }
      uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v77 + 8);
      uint64_t v32 = v29;
      uint64_t v33 = v30;
LABEL_24:
      return v31(v32, v33);
    case 4:
      swift_bridgeObjectRelease();
      uint64_t v34 = a1 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
      uint64_t v35 = type metadata accessor for URL();
      uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8);
      uint64_t v33 = v35;
      uint64_t v32 = v34;
      goto LABEL_24;
    case 5:
      goto LABEL_46;
    case 6:
      swift_bridgeObjectRelease();
      uint64_t v36 = type metadata accessor for GenericMedCompletedLogModel();
      uint64_t v37 = a1 + *(int *)(v36 + 24);
      uint64_t v38 = type metadata accessor for AppPunchout();
      uint64_t v39 = *(void *)(v38 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38)) {
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(int *)(v36 + 56);
      goto LABEL_57;
    case 7:
      uint64_t v40 = type metadata accessor for SnippetHeaderModel();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(a1, 1, v40))
      {
        uint64_t v41 = type metadata accessor for SpeakableString();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(a1, v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v42 = type metadata accessor for HealthDataLogModel();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v43 = a1 + *(int *)(v42 + 40);
      uint64_t v44 = type metadata accessor for AppPunchout();
      uint64_t v45 = *(void *)(v44 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44)) {
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
      }
      break;
    case 8:
      uint64_t v46 = type metadata accessor for AppPunchout();
      uint64_t v47 = *(void *)(v46 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(a1, 1, v46)) {
        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(a1, v46);
      }
      uint64_t v48 = (int *)type metadata accessor for GenericQueryModel();
      uint64_t v49 = a1 + v48[10];
      uint64_t v7 = type metadata accessor for SpeakableString();
      uint64_t v8 = *(void *)(v7 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v49, 1, v7)) {
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v49, v7);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_65;
    case 9:
      uint64_t v50 = type metadata accessor for AppPunchout();
      uint64_t v51 = *(void *)(v50 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(a1, 1, v50)) {
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(a1, v50);
      }
      uint64_t v52 = type metadata accessor for HeightQueryModel();
      uint64_t v53 = a1 + *(int *)(v52 + 32);
      uint64_t v54 = type metadata accessor for SpeakableString();
      uint64_t v55 = *(void *)(v54 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54)) {
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
      }
      uint64_t v56 = a1 + *(int *)(v52 + 40);
      uint64_t v57 = type metadata accessor for SnippetHeaderModel();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 48))(v56, 1, v57))
      {
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v56, v54);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_46:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 10:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 11:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
      goto LABEL_57;
    case 12:
      uint64_t v58 = type metadata accessor for AppPunchout();
      uint64_t v59 = *(void *)(v58 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(a1, 1, v58)) {
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(a1, v58);
      }
      uint64_t v60 = a1 + *(int *)(type metadata accessor for SleepQueryModel() + 20);
      uint64_t v61 = type metadata accessor for SnippetHeaderModel();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 48))(v60, 1, v61))
      {
        uint64_t v62 = type metadata accessor for SpeakableString();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v60, v62);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 13:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v63 = type metadata accessor for SpecificMedCompletedLogModel();
      uint64_t v64 = a1 + *(int *)(v63 + 32);
      uint64_t v65 = type metadata accessor for AppPunchout();
      uint64_t v66 = *(void *)(v65 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(int *)(v63 + 76);
LABEL_57:
      uint64_t v67 = a1 + v16;
      uint64_t v68 = type metadata accessor for SnippetHeaderModel();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 48))(v67, 1, v68);
      if (result) {
        return result;
      }
      uint64_t v69 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v67, v69);
      swift_bridgeObjectRelease();
      break;
    case 14:
      uint64_t v70 = type metadata accessor for AppPunchout();
      uint64_t v71 = *(void *)(v70 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(a1, 1, v70)) {
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(a1, v70);
      }
      uint64_t v48 = (int *)type metadata accessor for TemperatureQueryModel();
      uint64_t v72 = a1 + v48[10];
      uint64_t v7 = type metadata accessor for SpeakableString();
      uint64_t v8 = *(void *)(v7 - 8);
      uint64_t v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
      if (!v73(v72, 1, v7)) {
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v72, v7);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v74 = a1 + v48[16];
      if (!v73(v74, 1, v7)) {
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v74, v7);
      }
LABEL_65:
      swift_bridgeObjectRelease();
      uint64_t v9 = v48[18];
LABEL_66:
      uint64_t v75 = a1 + v9;
      uint64_t v76 = type metadata accessor for SnippetHeaderModel();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 48))(v75, 1, v76);
      if (result) {
        return result;
      }
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v75, v7);
      swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for WellnessSnippets(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for AppPunchout();
      uint64_t v7 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
      uint64_t v80 = Model[5];
      uint64_t v81 = (char *)a1 + v80;
      uint64_t v82 = (char *)a2 + v80;
      *(void *)uint64_t v81 = *(void *)v82;
      v81[8] = v82[8];
      uint64_t v83 = Model[6];
      long long v84 = (char *)a1 + v83;
      uint64_t v85 = (char *)a2 + v83;
      *(void *)long long v84 = *(void *)v85;
      v84[8] = v85[8];
      uint64_t v86 = Model[7];
      uint64_t v87 = (char *)a1 + v86;
      uint64_t v88 = (char *)a2 + v86;
      v87[8] = v88[8];
      *(void *)uint64_t v87 = *(void *)v88;
      uint64_t v89 = Model[8];
      uint64_t v90 = (char *)a1 + v89;
      uint64_t v91 = (char *)a2 + v89;
      v90[8] = v91[8];
      *(void *)uint64_t v90 = *(void *)v91;
      uint64_t v92 = Model[9];
      uint64_t v93 = (char *)a1 + v92;
      uint64_t v94 = (char *)a2 + v92;
      uint64_t v95 = type metadata accessor for SpeakableString();
      uint64_t v96 = *(void *)(v95 - 8);
      uint64_t v617 = v96;
      uint64_t v622 = v95;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
      {
        uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v93, v94, v95);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
      }
      uint64_t v351 = Model[10];
      uint64_t v352 = (void *)((char *)a1 + v351);
      uint64_t v353 = (void *)((char *)a2 + v351);
      uint64_t v354 = v353[1];
      *uint64_t v352 = *v353;
      v352[1] = v354;
      uint64_t v355 = Model[11];
      char v356 = (void *)((char *)a1 + v355);
      uint64_t v357 = (void *)((char *)a2 + v355);
      uint64_t v358 = v357[1];
      *char v356 = *v357;
      v356[1] = v358;
      uint64_t v359 = Model[12];
      uint64_t v360 = (void *)((char *)a1 + v359);
      uint64_t v361 = (void *)((char *)a2 + v359);
      uint64_t v362 = v361[1];
      *uint64_t v360 = *v361;
      v360[1] = v362;
      uint64_t v363 = Model[13];
      uint64_t v364 = (void *)((char *)a1 + v363);
      uint64_t v365 = (void *)((char *)a2 + v363);
      uint64_t v366 = v365[1];
      *uint64_t v364 = *v365;
      v364[1] = v366;
      uint64_t v367 = Model[14];
      v368 = (void *)((char *)a1 + v367);
      uint64_t v369 = (void *)((char *)a2 + v367);
      uint64_t v370 = v369[1];
      void *v368 = *v369;
      v368[1] = v370;
      uint64_t v371 = Model[15];
      uint64_t v372 = (void *)((char *)a1 + v371);
      uint64_t v373 = (void *)((char *)a2 + v371);
      uint64_t v374 = v373[1];
      *uint64_t v372 = *v373;
      v372[1] = v374;
      uint64_t v375 = Model[16];
      __dstf = (char *)a1 + v375;
      v326 = (char *)a2 + v375;
      uint64_t v376 = type metadata accessor for SnippetHeaderModel();
      uint64_t v616 = *(void *)(v376 - 8);
      v634 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v616 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v634(v326, 1, v376)) {
        goto LABEL_80;
      }
      (*(void (**)(char *, char *, uint64_t))(v617 + 16))(__dstf, v326, v622);
      uint64_t v540 = *(int *)(v376 + 20);
      uint64_t v541 = &__dstf[v540];
      uint64_t v542 = &v326[v540];
      uint64_t v543 = *((void *)v542 + 1);
      *(void *)uint64_t v541 = *(void *)v542;
      *((void *)v541 + 1) = v543;
      uint64_t v544 = *(int *)(v376 + 24);
      v545 = &__dstf[v544];
      uint64_t v546 = &v326[v544];
      uint64_t v547 = *((void *)v546 + 1);
      *(void *)v545 = *(void *)v546;
      *((void *)v545 + 1) = v547;
      v548 = *(void (**)(char *, void, uint64_t, uint64_t))(v616 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v548(__dstf, 0, 1, v376);
      goto LABEL_100;
    case 1u:
      uint64_t v9 = type metadata accessor for AppPunchout();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
      {
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v10 + 16))(a1, a2, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      uint64_t v98 = (int *)type metadata accessor for BloodPressureQueryModel();
      uint64_t v99 = v98[5];
      uint64_t v100 = (char *)a1 + v99;
      uint64_t v101 = (char *)a2 + v99;
      *(void *)uint64_t v100 = *(void *)v101;
      v100[8] = v101[8];
      uint64_t v102 = v98[6];
      uint64_t v103 = (char *)a1 + v102;
      uint64_t v104 = (char *)a2 + v102;
      *(void *)uint64_t v103 = *(void *)v104;
      v103[8] = v104[8];
      uint64_t v105 = v98[7];
      uint64_t v106 = (char *)a1 + v105;
      char v107 = (char *)a2 + v105;
      v106[8] = v107[8];
      *(void *)uint64_t v106 = *(void *)v107;
      uint64_t v108 = v98[8];
      uint64_t v109 = (char *)a1 + v108;
      uint64_t v110 = (char *)a2 + v108;
      v109[8] = v110[8];
      *(void *)uint64_t v109 = *(void *)v110;
      uint64_t v111 = v98[9];
      uint64_t v112 = (char *)a1 + v111;
      uint64_t v113 = (char *)a2 + v111;
      v112[8] = v113[8];
      *(void *)uint64_t v112 = *(void *)v113;
      uint64_t v114 = v98[10];
      uint64_t v115 = (char *)a1 + v114;
      uint64_t v116 = (char *)a2 + v114;
      *(void *)uint64_t v115 = *(void *)v116;
      v115[8] = v116[8];
      uint64_t v117 = v98[11];
      uint64_t v118 = (void *)((char *)a1 + v117);
      uint64_t v119 = (void *)((char *)a2 + v117);
      v630 = (void *)v119[1];
      *uint64_t v118 = *v119;
      v118[1] = v630;
      uint64_t v120 = v98[12];
      uint64_t v121 = (void *)((char *)a1 + v120);
      uint64_t v122 = (void *)((char *)a2 + v120);
      uint64_t v623 = v122[1];
      void *v121 = *v122;
      v121[1] = v623;
      uint64_t v123 = v98[13];
      uint64_t v124 = (void *)((char *)a1 + v123);
      uint64_t v125 = (void *)((char *)a2 + v123);
      uint64_t v618 = v125[1];
      *uint64_t v124 = *v125;
      v124[1] = v618;
      uint64_t v126 = v98[14];
      uint64_t v127 = (void *)((char *)a1 + v126);
      uint64_t v128 = (void *)((char *)a2 + v126);
      uint64_t v614 = v128[1];
      *uint64_t v127 = *v128;
      v127[1] = v614;
      uint64_t v129 = v98[15];
      uint64_t v130 = (void *)((char *)a1 + v129);
      uint64_t v131 = (void *)((char *)a2 + v129);
      uint64_t v612 = v131[1];
      *uint64_t v130 = *v131;
      v130[1] = v612;
      uint64_t v132 = v98[16];
      uint64_t v133 = (void *)((char *)a1 + v132);
      long long v134 = (void *)((char *)a2 + v132);
      uint64_t v135 = v134[1];
      *uint64_t v133 = *v134;
      v133[1] = v135;
      uint64_t v136 = v98[17];
      long long v137 = (void *)((char *)a1 + v136);
      uint64_t v138 = (void *)((char *)a2 + v136);
      uint64_t v139 = v138[1];
      *long long v137 = *v138;
      v137[1] = v139;
      uint64_t v140 = v98[18];
      long long v141 = (void *)((char *)a1 + v140);
      uint64_t v142 = (void *)((char *)a2 + v140);
      uint64_t v143 = v142[1];
      void *v141 = *v142;
      v141[1] = v143;
      uint64_t v144 = v98[19];
      uint64_t v145 = (void *)((char *)a1 + v144);
      uint64_t v146 = (void *)((char *)a2 + v144);
      uint64_t v147 = v146[1];
      *uint64_t v145 = *v146;
      v145[1] = v147;
      uint64_t v148 = v98[20];
      __dstb = (char *)a1 + v148;
      uint64_t v610 = (char *)a2 + v148;
      uint64_t v149 = type metadata accessor for URL();
      uint64_t v150 = *(void *)(v149 - 8);
      v611 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v611(v610, 1, v149))
      {
        uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(__dstb, v610, *(void *)(*(void *)(v151 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v150 + 16))(__dstb, v610, v149);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v150 + 56))(__dstb, 0, 1, v149);
      }
      uint64_t v377 = v98[21];
      uint64_t v378 = (void *)((char *)a1 + v377);
      uint64_t v379 = (void *)((char *)a2 + v377);
      uint64_t v380 = v379[1];
      void *v378 = *v379;
      v378[1] = v380;
      uint64_t v381 = v98[22];
      uint64_t v382 = (void *)((char *)a1 + v381);
      uint64_t v383 = (void *)((char *)a2 + v381);
      uint64_t v384 = v383[1];
      *uint64_t v382 = *v383;
      v382[1] = v384;
      uint64_t v385 = v98[23];
      uint64_t v386 = (char *)a1 + v385;
      uint64_t v387 = (char *)a2 + v385;
      uint64_t v388 = type metadata accessor for SnippetHeaderModel();
      uint64_t v389 = *(void *)(v388 - 8);
      v390 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v389 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v390(v387, 1, v388))
      {
        uint64_t v391 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v386, v387, *(void *)(*(void *)(v391 - 8) + 64));
      }
      else
      {
        uint64_t v549 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v549 - 8) + 16))(v386, v387, v549);
        uint64_t v550 = *(int *)(v388 + 20);
        v551 = &v386[v550];
        uint64_t v552 = &v387[v550];
        uint64_t v553 = *((void *)v552 + 1);
        *(void *)v551 = *(void *)v552;
        *((void *)v551 + 1) = v553;
        uint64_t v554 = *(int *)(v388 + 24);
        v555 = &v386[v554];
        uint64_t v556 = &v387[v554];
        uint64_t v557 = *((void *)v556 + 1);
        *(void *)v555 = *(void *)v556;
        *((void *)v555 + 1) = v557;
        v558 = *(void (**)(char *, void, uint64_t, uint64_t))(v389 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v558(v386, 0, 1, v388);
      }
      goto LABEL_100;
    case 2u:
      uint64_t v12 = type metadata accessor for AppPunchout();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v13 + 16))(a1, a2, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
      }
      uint64_t v152 = (int *)type metadata accessor for BloodPressureLogModel();
      uint64_t v153 = v152[5];
      uint64_t v154 = (void *)((char *)a1 + v153);
      uint64_t v155 = (void *)((char *)a2 + v153);
      uint64_t v156 = v155[1];
      *uint64_t v154 = *v155;
      v154[1] = v156;
      uint64_t v157 = v152[6];
      uint64_t v158 = (void *)((char *)a1 + v157);
      uint64_t v159 = (void *)((char *)a2 + v157);
      uint64_t v160 = v159[1];
      *uint64_t v158 = *v159;
      v158[1] = v160;
      uint64_t v161 = v152[7];
      uint64_t v162 = (void *)((char *)a1 + v161);
      uint64_t v163 = (void *)((char *)a2 + v161);
      uint64_t v164 = v163[1];
      *uint64_t v162 = *v163;
      v162[1] = v164;
      uint64_t v165 = v152[8];
      __dstc = (char *)a1 + v165;
      uint64_t v166 = (char *)a2 + v165;
      uint64_t v167 = type metadata accessor for SnippetHeaderModel();
      v631 = *(void **)(v167 - 8);
      uint64_t v168 = (unsigned int (*)(char *, uint64_t, uint64_t))v631[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v168(v166, 1, v167))
      {
        uint64_t v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(__dstc, v166, *(void *)(*(void *)(v169 - 8) + 64));
      }
      else
      {
        uint64_t v392 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v392 - 8) + 16))(__dstc, v166, v392);
        uint64_t v393 = *(int *)(v167 + 20);
        uint64_t v394 = &__dstc[v393];
        uint64_t v395 = &v166[v393];
        uint64_t v396 = *((void *)v395 + 1);
        *(void *)uint64_t v394 = *(void *)v395;
        *((void *)v394 + 1) = v396;
        uint64_t v397 = *(int *)(v167 + 24);
        v398 = &__dstc[v397];
        uint64_t v399 = &v166[v397];
        uint64_t v400 = *((void *)v399 + 1);
        *(void *)v398 = *(void *)v399;
        *((void *)v398 + 1) = v400;
        v401 = (void (*)(char *, void, uint64_t, uint64_t))v631[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v401(__dstc, 0, 1, v167);
      }
      uint64_t v402 = v152[9];
      uint64_t v403 = (void *)((char *)a1 + v402);
      uint64_t v404 = (void *)((char *)a2 + v402);
      uint64_t v405 = v404[1];
      void *v403 = *v404;
      v403[1] = v405;
      uint64_t v406 = v152[10];
      uint64_t v407 = (void *)((char *)a1 + v406);
      uint64_t v408 = (void *)((char *)a2 + v406);
      uint64_t v409 = v408[1];
      *uint64_t v407 = *v408;
      v407[1] = v409;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 3u:
      uint64_t v15 = type metadata accessor for AppPunchout();
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v16 + 16))(a1, a2, v15);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
      }
      uint64_t v170 = (int *)type metadata accessor for CycleTrackingLogModel();
      uint64_t v171 = v170[5];
      uint64_t v172 = (void *)((char *)a1 + v171);
      uint64_t v173 = (void *)((char *)a2 + v171);
      uint64_t v174 = v173[1];
      *uint64_t v172 = *v173;
      v172[1] = v174;
      uint64_t v175 = v170[6];
      uint64_t v176 = (void *)((char *)a1 + v175);
      uint64_t v177 = (void *)((char *)a2 + v175);
      uint64_t v178 = v177[1];
      *uint64_t v176 = *v177;
      v176[1] = v178;
      uint64_t v179 = v170[7];
      uint64_t v180 = (void *)((char *)a1 + v179);
      uint64_t v181 = (void *)((char *)a2 + v179);
      uint64_t v182 = v181[1];
      *uint64_t v180 = *v181;
      v180[1] = v182;
      uint64_t v183 = v170[8];
      __dstd = (char *)a1 + v183;
      long long v184 = (char *)a2 + v183;
      uint64_t v185 = type metadata accessor for SnippetHeaderModel();
      v632 = *(void **)(v185 - 8);
      uint64_t v186 = (unsigned int (*)(char *, uint64_t, uint64_t))v632[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v186(v184, 1, v185))
      {
        uint64_t v187 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(__dstd, v184, *(void *)(*(void *)(v187 - 8) + 64));
      }
      else
      {
        uint64_t v410 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v410 - 8) + 16))(__dstd, v184, v410);
        uint64_t v411 = *(int *)(v185 + 20);
        uint64_t v412 = &__dstd[v411];
        uint64_t v413 = &v184[v411];
        uint64_t v414 = *((void *)v413 + 1);
        *(void *)uint64_t v412 = *(void *)v413;
        *((void *)v412 + 1) = v414;
        uint64_t v415 = *(int *)(v185 + 24);
        v416 = &__dstd[v415];
        uint64_t v417 = &v184[v415];
        uint64_t v418 = *((void *)v417 + 1);
        *(void *)v416 = *(void *)v417;
        *((void *)v416 + 1) = v418;
        long long v419 = (void (*)(char *, void, uint64_t, uint64_t))v632[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v419(__dstd, 0, 1, v185);
      }
      uint64_t v420 = v170[9];
      uint64_t v421 = (char *)a1 + v420;
      uint64_t v422 = (char *)a2 + v420;
      uint64_t v423 = type metadata accessor for URL();
      uint64_t v424 = *(void *)(v423 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v424 + 48))(v422, 1, v423))
      {
        uint64_t v425 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v421, v422, *(void *)(*(void *)(v425 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v424 + 16))(v421, v422, v423);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v424 + 56))(v421, 0, 1, v423);
      }
      goto LABEL_100;
    case 4u:
      uint64_t v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      uint64_t v19 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
      uint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for URL();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
      swift_bridgeObjectRetain();
      v23(v20, v21, v22);
      goto LABEL_100;
    case 5u:
      uint64_t v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      uint64_t v25 = a2[3];
      a1[2] = a2[2];
      a1[3] = v25;
      uint64_t v26 = a2[5];
      a1[4] = a2[4];
      a1[5] = v26;
      *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 6u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v27 = a2[2];
      a1[1] = a2[1];
      a1[2] = v27;
      uint64_t v28 = (int *)type metadata accessor for GenericMedCompletedLogModel();
      uint64_t v29 = v28[6];
      uint64_t v30 = (char *)a1 + v29;
      uint64_t v31 = (char *)a2 + v29;
      uint64_t v32 = type metadata accessor for AppPunchout();
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain();
      if (v34(v31, 1, v32))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      *((unsigned char *)a1 + v28[7]) = *((unsigned char *)a2 + v28[7]);
      uint64_t v188 = v28[8];
      uint64_t v189 = (void *)((char *)a1 + v188);
      uint64_t v190 = (void *)((char *)a2 + v188);
      uint64_t v191 = v190[1];
      *uint64_t v189 = *v190;
      v189[1] = v191;
      *((unsigned char *)a1 + v28[9]) = *((unsigned char *)a2 + v28[9]);
      uint64_t v192 = v28[10];
      uint64_t v193 = (void *)((char *)a1 + v192);
      uint64_t v194 = (void *)((char *)a2 + v192);
      uint64_t v195 = v194[1];
      *uint64_t v193 = *v194;
      v193[1] = v195;
      uint64_t v196 = v28[11];
      uint64_t v197 = (void *)((char *)a1 + v196);
      uint64_t v198 = (void *)((char *)a2 + v196);
      uint64_t v199 = v198[1];
      *uint64_t v197 = *v198;
      v197[1] = v199;
      uint64_t v200 = v28[12];
      uint64_t v201 = (void *)((char *)a1 + v200);
      uint64_t v202 = (void *)((char *)a2 + v200);
      uint64_t v203 = v202[1];
      *uint64_t v201 = *v202;
      v201[1] = v203;
      uint64_t v204 = v28[13];
      uint64_t v205 = (void *)((char *)a1 + v204);
      uint64_t v206 = (void *)((char *)a2 + v204);
      uint64_t v207 = v206[1];
      *uint64_t v205 = *v206;
      v205[1] = v207;
      uint64_t v208 = v28[14];
      __dst = (char *)a1 + v208;
      uint64_t v60 = (char *)a2 + v208;
      uint64_t v61 = type metadata accessor for SnippetHeaderModel();
      uint64_t v628 = *(void **)(v61 - 8);
      long long v209 = (unsigned int (*)(char *, uint64_t, uint64_t))v628[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v209(v60, 1, v61)) {
        goto LABEL_23;
      }
      goto LABEL_54;
    case 7u:
      uint64_t v36 = type metadata accessor for SnippetHeaderModel();
      uint64_t v37 = *(void *)(v36 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v37 + 48))(a2, 1, v36))
      {
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(a1, a2, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        uint64_t v210 = type metadata accessor for SpeakableString();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v210 - 8) + 16))(a1, a2, v210);
        uint64_t v211 = *(int *)(v36 + 20);
        long long v212 = (void *)((char *)a1 + v211);
        uint64_t v213 = (void *)((char *)a2 + v211);
        uint64_t v214 = v213[1];
        *long long v212 = *v213;
        v212[1] = v214;
        uint64_t v215 = *(int *)(v36 + 24);
        uint64_t v216 = (void *)((char *)a1 + v215);
        uint64_t v217 = (void *)((char *)a2 + v215);
        uint64_t v218 = v217[1];
        *uint64_t v216 = *v217;
        v216[1] = v218;
        uint64_t v219 = *(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v219(a1, 0, 1, v36);
      }
      uint64_t v220 = (int *)type metadata accessor for HealthDataLogModel();
      *(void *)((char *)a1 + v220[5]) = *(void *)((char *)a2 + v220[5]);
      uint64_t v221 = v220[6];
      uint64_t v222 = (void *)((char *)a1 + v221);
      uint64_t v223 = (void *)((char *)a2 + v221);
      uint64_t v224 = v223[1];
      *uint64_t v222 = *v223;
      v222[1] = v224;
      uint64_t v225 = v220[7];
      uint64_t v226 = (void *)((char *)a1 + v225);
      uint64_t v227 = (void *)((char *)a2 + v225);
      uint64_t v228 = v227[1];
      *uint64_t v226 = *v227;
      v226[1] = v228;
      uint64_t v229 = v220[8];
      uint64_t v230 = (void *)((char *)a1 + v229);
      uint64_t v231 = (void *)((char *)a2 + v229);
      uint64_t v232 = v231[1];
      *uint64_t v230 = *v231;
      v230[1] = v232;
      uint64_t v233 = v220[9];
      uint64_t v234 = (void *)((char *)a1 + v233);
      uint64_t v235 = (void *)((char *)a2 + v233);
      uint64_t v236 = v235[1];
      *uint64_t v234 = *v235;
      v234[1] = v236;
      uint64_t v237 = v220[10];
      __dste = (char *)a1 + v237;
      uint64_t v624 = (char *)a2 + v237;
      uint64_t v238 = type metadata accessor for AppPunchout();
      uint64_t v239 = *(void *)(v238 - 8);
      uint64_t v619 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v239 + 48);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v619(v624, 1, v238))
      {
        uint64_t v240 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(__dste, v624, *(void *)(*(void *)(v240 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v239 + 16))(__dste, v624, v238);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v239 + 56))(__dste, 0, 1, v238);
      }
      uint64_t v426 = v220[11];
      uint64_t v427 = (void *)((char *)a1 + v426);
      uint64_t v428 = (void *)((char *)a2 + v426);
      uint64_t v429 = v428[1];
      *uint64_t v427 = *v428;
      v427[1] = v429;
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 8u:
      uint64_t v39 = type metadata accessor for AppPunchout();
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v40 + 48))(a2, 1, v39))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v40 + 16))(a1, a2, v39);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(a1, 0, 1, v39);
      }
      uint64_t v241 = (int *)type metadata accessor for GenericQueryModel();
      uint64_t v242 = v241[5];
      uint64_t v243 = (char *)a1 + v242;
      char v244 = (char *)a2 + v242;
      *(void *)uint64_t v243 = *(void *)v244;
      v243[8] = v244[8];
      uint64_t v245 = v241[6];
      uint64_t v246 = (char *)a1 + v245;
      uint64_t v247 = (char *)a2 + v245;
      *(void *)uint64_t v246 = *(void *)v247;
      v246[8] = v247[8];
      uint64_t v248 = v241[7];
      uint64_t v249 = (char *)a1 + v248;
      char v250 = (char *)a2 + v248;
      v249[8] = v250[8];
      *(void *)uint64_t v249 = *(void *)v250;
      uint64_t v251 = v241[8];
      long long v252 = (char *)a1 + v251;
      uint64_t v253 = (char *)a2 + v251;
      v252[8] = v253[8];
      *(void *)long long v252 = *(void *)v253;
      uint64_t v254 = v241[9];
      long long v255 = (char *)a1 + v254;
      uint64_t v256 = (char *)a2 + v254;
      v255[8] = v256[8];
      *(void *)long long v255 = *(void *)v256;
      uint64_t v257 = v241[10];
      uint64_t v258 = (char *)a1 + v257;
      uint64_t v259 = (char *)a2 + v257;
      uint64_t v260 = type metadata accessor for SpeakableString();
      uint64_t v261 = *(void *)(v260 - 8);
      uint64_t v615 = v261;
      uint64_t v620 = v260;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v261 + 48))(v259, 1, v260))
      {
        uint64_t v262 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v258, v259, *(void *)(*(void *)(v262 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v261 + 16))(v258, v259, v260);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v261 + 56))(v258, 0, 1, v260);
      }
      uint64_t v430 = v241[11];
      long long v431 = (void *)((char *)a1 + v430);
      uint64_t v432 = (void *)((char *)a2 + v430);
      v635 = (void *)v432[1];
      *long long v431 = *v432;
      v431[1] = v635;
      uint64_t v433 = v241[12];
      uint64_t v434 = (void *)((char *)a1 + v433);
      uint64_t v435 = (void *)((char *)a2 + v433);
      uint64_t v436 = v435[1];
      *uint64_t v434 = *v435;
      v434[1] = v436;
      uint64_t v437 = v241[13];
      v438 = (void *)((char *)a1 + v437);
      uint64_t v439 = (void *)((char *)a2 + v437);
      uint64_t v440 = v439[1];
      void *v438 = *v439;
      v438[1] = v440;
      uint64_t v441 = v241[14];
      v442 = (void *)((char *)a1 + v441);
      uint64_t v443 = (void *)((char *)a2 + v441);
      uint64_t v444 = v443[1];
      void *v442 = *v443;
      v442[1] = v444;
      uint64_t v445 = v241[15];
      v446 = (void *)((char *)a1 + v445);
      uint64_t v447 = (void *)((char *)a2 + v445);
      uint64_t v448 = v447[1];
      void *v446 = *v447;
      v446[1] = v448;
      uint64_t v449 = v241[16];
      v450 = (void *)((char *)a1 + v449);
      uint64_t v451 = (void *)((char *)a2 + v449);
      uint64_t v452 = v451[1];
      void *v450 = *v451;
      v450[1] = v452;
      uint64_t v453 = v241[17];
      v454 = (void *)((char *)a1 + v453);
      uint64_t v455 = (void *)((char *)a2 + v453);
      uint64_t v456 = v455[1];
      void *v454 = *v455;
      v454[1] = v456;
      uint64_t v457 = v241[18];
      __dstf = (char *)a1 + v457;
      v326 = (char *)a2 + v457;
      uint64_t v458 = type metadata accessor for SnippetHeaderModel();
      uint64_t v613 = *(void *)(v458 - 8);
      uint64_t v627 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v613 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v627(v326, 1, v458)) {
        goto LABEL_80;
      }
      (*(void (**)(char *, char *, uint64_t))(v615 + 16))(__dstf, v326, v620);
      uint64_t v559 = *(int *)(v458 + 20);
      uint64_t v560 = &__dstf[v559];
      v561 = &v326[v559];
      uint64_t v562 = *((void *)v561 + 1);
      *(void *)uint64_t v560 = *(void *)v561;
      *((void *)v560 + 1) = v562;
      uint64_t v563 = *(int *)(v458 + 24);
      v564 = &__dstf[v563];
      uint64_t v565 = &v326[v563];
      uint64_t v566 = *((void *)v565 + 1);
      *(void *)v564 = *(void *)v565;
      *((void *)v564 + 1) = v566;
      v567 = *(void (**)(char *, void, uint64_t, uint64_t))(v613 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v567(__dstf, 0, 1, v458);
      goto LABEL_100;
    case 9u:
      uint64_t v42 = type metadata accessor for AppPunchout();
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v43 + 48))(a2, 1, v42))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v43 + 16))(a1, a2, v42);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(a1, 0, 1, v42);
      }
      uint64_t v263 = (int *)type metadata accessor for HeightQueryModel();
      uint64_t v264 = v263[5];
      uint64_t v265 = (char *)a1 + v264;
      uint64_t v266 = (char *)a2 + v264;
      *(void *)uint64_t v265 = *(void *)v266;
      v265[8] = v266[8];
      uint64_t v267 = v263[6];
      uint64_t v268 = (char *)a1 + v267;
      uint64_t v269 = (char *)a2 + v267;
      *(void *)uint64_t v268 = *(void *)v269;
      v268[8] = v269[8];
      uint64_t v270 = v263[7];
      uint64_t v271 = (char *)a1 + v270;
      uint64_t v272 = (char *)a2 + v270;
      v271[8] = v272[8];
      *(void *)uint64_t v271 = *(void *)v272;
      uint64_t v273 = v263[8];
      uint64_t v274 = (char *)a1 + v273;
      v275 = (char *)a2 + v273;
      uint64_t v276 = type metadata accessor for SpeakableString();
      uint64_t v277 = *(void *)(v276 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v277 + 48))(v275, 1, v276))
      {
        uint64_t v278 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v274, v275, *(void *)(*(void *)(v278 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v277 + 16))(v274, v275, v276);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v277 + 56))(v274, 0, 1, v276);
      }
      *((unsigned char *)a1 + v263[9]) = *((unsigned char *)a2 + v263[9]);
      uint64_t v460 = v263[10];
      uint64_t v461 = (char *)a1 + v460;
      uint64_t v462 = (char *)a2 + v460;
      uint64_t v463 = type metadata accessor for SnippetHeaderModel();
      uint64_t v464 = *(void *)(v463 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v464 + 48))(v462, 1, v463))
      {
        uint64_t v465 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v461, v462, *(void *)(*(void *)(v465 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v277 + 16))(v461, v462, v276);
        uint64_t v568 = *(int *)(v463 + 20);
        uint64_t v569 = &v461[v568];
        v570 = &v462[v568];
        uint64_t v571 = *((void *)v570 + 1);
        *(void *)uint64_t v569 = *(void *)v570;
        *((void *)v569 + 1) = v571;
        uint64_t v572 = *(int *)(v463 + 24);
        v573 = &v461[v572];
        uint64_t v574 = &v462[v572];
        uint64_t v575 = *((void *)v574 + 1);
        *(void *)v573 = *(void *)v574;
        *((void *)v573 + 1) = v575;
        v576 = *(void (**)(char *, void, uint64_t, uint64_t))(v464 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v576(v461, 0, 1, v463);
      }
      uint64_t v577 = v263[11];
      uint64_t v578 = (void *)((char *)a1 + v577);
      v579 = (void *)((char *)a2 + v577);
      uint64_t v580 = v579[1];
      *uint64_t v578 = *v579;
      v578[1] = v580;
      uint64_t v581 = v263[12];
      v582 = (void *)((char *)a1 + v581);
      uint64_t v583 = (void *)((char *)a2 + v581);
      uint64_t v584 = v583[1];
      void *v582 = *v583;
      v582[1] = v584;
      uint64_t v585 = v263[13];
      v586 = (void *)((char *)a1 + v585);
      uint64_t v587 = (void *)((char *)a2 + v585);
      uint64_t v588 = v587[1];
      void *v586 = *v587;
      v586[1] = v588;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 0xAu:
      *a1 = *a2;
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      a1[2] = a2[2];
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      a1[4] = a2[4];
      *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
      *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
      a1[6] = a2[6];
      uint64_t v45 = a2[8];
      *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
      a1[8] = v45;
      a1[10] = a2[10];
      *((unsigned char *)a1 + 88) = *((unsigned char *)a2 + 88);
      uint64_t v46 = a2[13];
      a1[12] = a2[12];
      a1[13] = v46;
      uint64_t v47 = a2[15];
      a1[14] = a2[14];
      a1[15] = v47;
      uint64_t v48 = a2[17];
      a1[16] = a2[16];
      a1[17] = v48;
      uint64_t v49 = a2[19];
      a1[18] = a2[18];
      a1[19] = v49;
      uint64_t v50 = a2[21];
      a1[20] = a2[20];
      a1[21] = v50;
      uint64_t v51 = a2[23];
      a1[22] = a2[22];
      a1[23] = v51;
      uint64_t v52 = a2[25];
      a1[24] = a2[24];
      a1[25] = v52;
      uint64_t v53 = a2[27];
      a1[26] = a2[26];
      a1[27] = v53;
      uint64_t v54 = a2[29];
      a1[28] = a2[28];
      a1[29] = v54;
      *((unsigned char *)a1 + 240) = *((unsigned char *)a2 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 0xBu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v55 = a2[3];
      a1[2] = a2[2];
      a1[3] = v55;
      uint64_t v56 = a2[5];
      a1[4] = a2[4];
      a1[5] = v56;
      uint64_t v57 = a2[7];
      a1[6] = a2[6];
      a1[7] = v57;
      uint64_t v58 = a2[9];
      a1[8] = a2[8];
      a1[9] = v58;
      a1[10] = a2[10];
      uint64_t v59 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
      __dst = (char *)a1 + v59;
      uint64_t v60 = (char *)a2 + v59;
      uint64_t v61 = type metadata accessor for SnippetHeaderModel();
      uint64_t v628 = *(void **)(v61 - 8);
      uint64_t v62 = (unsigned int (*)(char *, uint64_t, uint64_t))v628[6];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v62(v60, 1, v61))
      {
LABEL_23:
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(__dst, v60, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
LABEL_54:
        uint64_t v279 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v279 - 8) + 16))(__dst, v60, v279);
        uint64_t v280 = *(int *)(v61 + 20);
        uint64_t v281 = &__dst[v280];
        uint64_t v282 = &v60[v280];
        uint64_t v283 = *((void *)v282 + 1);
        *(void *)uint64_t v281 = *(void *)v282;
        *((void *)v281 + 1) = v283;
        uint64_t v284 = *(int *)(v61 + 24);
        uint64_t v285 = &__dst[v284];
        uint64_t v286 = &v60[v284];
        uint64_t v287 = *((void *)v286 + 1);
        *(void *)uint64_t v285 = *(void *)v286;
        *((void *)v285 + 1) = v287;
        uint64_t v288 = (void (*)(char *, void, uint64_t, uint64_t))v628[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v288(__dst, 0, 1, v61);
      }
      goto LABEL_100;
    case 0xCu:
      uint64_t v64 = type metadata accessor for AppPunchout();
      uint64_t v65 = *(void *)(v64 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v65 + 48))(a2, 1, v64))
      {
        uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v65 + 16))(a1, a2, v64);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v65 + 56))(a1, 0, 1, v64);
      }
      uint64_t v289 = (int *)type metadata accessor for SleepQueryModel();
      uint64_t v290 = v289[5];
      uint64_t v291 = (char *)a1 + v290;
      uint64_t v292 = (char *)a2 + v290;
      uint64_t v293 = type metadata accessor for SnippetHeaderModel();
      uint64_t v294 = *(void *)(v293 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v294 + 48))(v292, 1, v293))
      {
        uint64_t v295 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v291, v292, *(void *)(*(void *)(v295 - 8) + 64));
      }
      else
      {
        uint64_t v466 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v466 - 8) + 16))(v291, v292, v466);
        uint64_t v467 = *(int *)(v293 + 20);
        uint64_t v468 = &v291[v467];
        uint64_t v469 = &v292[v467];
        uint64_t v470 = *((void *)v469 + 1);
        *(void *)uint64_t v468 = *(void *)v469;
        *((void *)v468 + 1) = v470;
        uint64_t v471 = *(int *)(v293 + 24);
        v472 = &v291[v471];
        uint64_t v473 = &v292[v471];
        uint64_t v474 = *((void *)v473 + 1);
        *(void *)v472 = *(void *)v473;
        *((void *)v472 + 1) = v474;
        v475 = *(void (**)(char *, void, uint64_t, uint64_t))(v294 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v475(v291, 0, 1, v293);
      }
      uint64_t v476 = v289[6];
      uint64_t v477 = (void *)((char *)a1 + v476);
      v478 = (void *)((char *)a2 + v476);
      uint64_t v479 = v478[1];
      *uint64_t v477 = *v478;
      v477[1] = v479;
      uint64_t v480 = v289[7];
      v481 = (void *)((char *)a1 + v480);
      uint64_t v482 = (void *)((char *)a2 + v480);
      __dsth = (void *)v482[1];
      void *v481 = *v482;
      v481[1] = __dsth;
      uint64_t v483 = v289[8];
      v484 = (void *)((char *)a1 + v483);
      v485 = (void *)((char *)a2 + v483);
      v636 = (void *)v485[1];
      void *v484 = *v485;
      v484[1] = v636;
      uint64_t v486 = v289[9];
      v487 = (void *)((char *)a1 + v486);
      v488 = (void *)((char *)a2 + v486);
      uint64_t v489 = v488[1];
      void *v487 = *v488;
      v487[1] = v489;
      uint64_t v490 = v289[10];
      v491 = (void *)((char *)a1 + v490);
      uint64_t v492 = (void *)((char *)a2 + v490);
      uint64_t v493 = v492[1];
      void *v491 = *v492;
      v491[1] = v493;
      *(void *)((char *)a1 + v289[11]) = *(void *)((char *)a2 + v289[11]);
      *(void *)((char *)a1 + v289[12]) = *(void *)((char *)a2 + v289[12]);
      *(void *)((char *)a1 + v289[13]) = *(void *)((char *)a2 + v289[13]);
      *(void *)((char *)a1 + v289[14]) = *(void *)((char *)a2 + v289[14]);
      uint64_t v494 = v289[15];
      v495 = (void *)((char *)a1 + v494);
      uint64_t v496 = (void *)((char *)a2 + v494);
      uint64_t v497 = v496[1];
      void *v495 = *v496;
      v495[1] = v497;
      uint64_t v498 = v289[16];
      v499 = (void *)((char *)a1 + v498);
      uint64_t v500 = (void *)((char *)a2 + v498);
      uint64_t v501 = v500[1];
      void *v499 = *v500;
      v499[1] = v501;
      uint64_t v502 = v289[17];
      v503 = (void *)((char *)a1 + v502);
      uint64_t v504 = (void *)((char *)a2 + v502);
      uint64_t v505 = v504[1];
      void *v503 = *v504;
      v503[1] = v505;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 0xDu:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v67 = a2[2];
      a1[1] = a2[1];
      a1[2] = v67;
      uint64_t v68 = a2[4];
      a1[3] = a2[3];
      a1[4] = v68;
      uint64_t v69 = a2[6];
      a1[5] = a2[5];
      a1[6] = v69;
      uint64_t v70 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
      uint64_t v71 = v70[8];
      __dsta = (char *)a1 + v71;
      uint64_t v72 = (char *)a2 + v71;
      uint64_t v73 = type metadata accessor for AppPunchout();
      uint64_t v74 = *(void *)(v73 - 8);
      v629 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v629(v72, 1, v73))
      {
        uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(__dsta, v72, *(void *)(*(void *)(v75 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v74 + 16))(__dsta, v72, v73);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(__dsta, 0, 1, v73);
      }
      uint64_t v296 = v70[9];
      uint64_t v297 = (char *)a1 + v296;
      uint64_t v298 = (char *)a2 + v296;
      *(void *)uint64_t v297 = *(void *)v298;
      v297[8] = v298[8];
      uint64_t v299 = v70[10];
      uint64_t v300 = (void *)((char *)a1 + v299);
      char v301 = (void *)((char *)a2 + v299);
      v633 = (void *)v301[1];
      *uint64_t v300 = *v301;
      v300[1] = v633;
      uint64_t v302 = v70[11];
      v303 = (void *)((char *)a1 + v302);
      v304 = (void *)((char *)a2 + v302);
      uint64_t v625 = v304[1];
      void *v303 = *v304;
      v303[1] = v625;
      uint64_t v305 = v70[12];
      uint64_t v306 = (void *)((char *)a1 + v305);
      char v307 = (void *)((char *)a2 + v305);
      uint64_t v308 = v307[1];
      *uint64_t v306 = *v307;
      v306[1] = v308;
      uint64_t v309 = v70[13];
      Swift::String v310 = (void *)((char *)a1 + v309);
      uint64_t v311 = (void *)((char *)a2 + v309);
      uint64_t v312 = v311[1];
      *Swift::String v310 = *v311;
      v310[1] = v312;
      *((unsigned char *)a1 + v70[14]) = *((unsigned char *)a2 + v70[14]);
      *((unsigned char *)a1 + v70[15]) = *((unsigned char *)a2 + v70[15]);
      uint64_t v313 = v70[16];
      v314 = (void *)((char *)a1 + v313);
      uint64_t v315 = (void *)((char *)a2 + v313);
      uint64_t v316 = v315[1];
      void *v314 = *v315;
      v314[1] = v316;
      uint64_t v317 = v70[17];
      uint64_t v318 = (void *)((char *)a1 + v317);
      uint64_t v319 = (void *)((char *)a2 + v317);
      uint64_t v320 = v319[1];
      *uint64_t v318 = *v319;
      v318[1] = v320;
      uint64_t v321 = v70[18];
      v322 = (void *)((char *)a1 + v321);
      uint64_t v323 = (void *)((char *)a2 + v321);
      uint64_t v324 = v323[1];
      void *v322 = *v323;
      v322[1] = v324;
      uint64_t v325 = v70[19];
      __dstf = (char *)a1 + v325;
      v326 = (char *)a2 + v325;
      uint64_t v327 = type metadata accessor for SnippetHeaderModel();
      uint64_t v621 = *(void *)(v327 - 8);
      uint64_t v328 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v621 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v328(v326, 1, v327))
      {
LABEL_80:
        uint64_t v459 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(__dstf, v326, *(void *)(*(void *)(v459 - 8) + 64));
      }
      else
      {
        uint64_t v506 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v506 - 8) + 16))(__dstf, v326, v506);
        uint64_t v507 = *(int *)(v327 + 20);
        uint64_t v508 = &__dstf[v507];
        uint64_t v509 = &v326[v507];
        uint64_t v510 = *((void *)v509 + 1);
        *(void *)uint64_t v508 = *(void *)v509;
        *((void *)v508 + 1) = v510;
        uint64_t v511 = *(int *)(v327 + 24);
        v512 = &__dstf[v511];
        uint64_t v513 = &v326[v511];
        uint64_t v514 = *((void *)v513 + 1);
        *(void *)v512 = *(void *)v513;
        *((void *)v512 + 1) = v514;
        v515 = *(void (**)(char *, void, uint64_t, uint64_t))(v621 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v515(__dstf, 0, 1, v327);
      }
      goto LABEL_100;
    case 0xEu:
      uint64_t v76 = type metadata accessor for AppPunchout();
      uint64_t v77 = *(void *)(v76 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v77 + 48))(a2, 1, v76))
      {
        uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v78 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v77 + 16))(a1, a2, v76);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v77 + 56))(a1, 0, 1, v76);
      }
      uint64_t v329 = (int *)type metadata accessor for TemperatureQueryModel();
      uint64_t v330 = v329[5];
      uint64_t v331 = (char *)a1 + v330;
      uint64_t v332 = (char *)a2 + v330;
      *(void *)uint64_t v331 = *(void *)v332;
      v331[8] = v332[8];
      uint64_t v333 = v329[6];
      uint64_t v334 = (char *)a1 + v333;
      char v335 = (char *)a2 + v333;
      *(void *)uint64_t v334 = *(void *)v335;
      v334[8] = v335[8];
      uint64_t v336 = v329[7];
      uint64_t v337 = (char *)a1 + v336;
      char v338 = (char *)a2 + v336;
      v337[8] = v338[8];
      *(void *)uint64_t v337 = *(void *)v338;
      uint64_t v339 = v329[8];
      Swift::String v340 = (char *)a1 + v339;
      v341 = (char *)a2 + v339;
      v340[8] = v341[8];
      *(void *)Swift::String v340 = *(void *)v341;
      uint64_t v342 = v329[9];
      char v343 = (char *)a1 + v342;
      Swift::String v344 = (char *)a2 + v342;
      v343[8] = v344[8];
      *(void *)char v343 = *(void *)v344;
      uint64_t v345 = v329[10];
      uint64_t v346 = (char *)a1 + v345;
      uint64_t v347 = (char *)a2 + v345;
      uint64_t v348 = type metadata accessor for SpeakableString();
      uint64_t v349 = *(void *)(v348 - 8);
      __dstg = *(unsigned int (**)(char *, uint64_t, uint64_t))(v349 + 48);
      uint64_t v626 = v349;
      if (__dstg(v347, 1, v348))
      {
        uint64_t v350 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v346, v347, *(void *)(*(void *)(v350 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v349 + 16))(v346, v347, v348);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v349 + 56))(v346, 0, 1, v348);
      }
      uint64_t v516 = v329[11];
      uint64_t v517 = (void *)((char *)a1 + v516);
      v518 = (void *)((char *)a2 + v516);
      uint64_t v519 = v518[1];
      *uint64_t v517 = *v518;
      v517[1] = v519;
      uint64_t v520 = v329[12];
      v521 = (void *)((char *)a1 + v520);
      uint64_t v522 = (void *)((char *)a2 + v520);
      uint64_t v523 = v522[1];
      void *v521 = *v522;
      v521[1] = v523;
      uint64_t v524 = v329[13];
      v525 = (void *)((char *)a1 + v524);
      uint64_t v526 = (void *)((char *)a2 + v524);
      uint64_t v527 = v526[1];
      void *v525 = *v526;
      v525[1] = v527;
      uint64_t v528 = v329[14];
      v529 = (void *)((char *)a1 + v528);
      uint64_t v530 = (void *)((char *)a2 + v528);
      uint64_t v531 = v530[1];
      void *v529 = *v530;
      v529[1] = v531;
      uint64_t v532 = v329[15];
      v533 = (void *)((char *)a1 + v532);
      uint64_t v534 = (void *)((char *)a2 + v532);
      uint64_t v535 = v534[1];
      void *v533 = *v534;
      v533[1] = v535;
      uint64_t v536 = v329[16];
      v637 = (char *)a1 + v536;
      v537 = (char *)a2 + v536;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v538 = v348;
      if (__dstg(v537, 1, v348))
      {
        uint64_t v539 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v637, v537, *(void *)(*(void *)(v539 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v626 + 16))(v637, v537, v348);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v626 + 56))(v637, 0, 1, v348);
      }
      uint64_t v589 = v329[17];
      v590 = (void *)((char *)a1 + v589);
      uint64_t v591 = (void *)((char *)a2 + v589);
      uint64_t v592 = v591[1];
      void *v590 = *v591;
      v590[1] = v592;
      uint64_t v593 = v329[18];
      v594 = (char *)a1 + v593;
      uint64_t v595 = (char *)a2 + v593;
      uint64_t v596 = type metadata accessor for SnippetHeaderModel();
      uint64_t v597 = *(void *)(v596 - 8);
      v598 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v597 + 48);
      swift_bridgeObjectRetain();
      if (v598(v595, 1, v596))
      {
        uint64_t v599 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v594, v595, *(void *)(*(void *)(v599 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v626 + 16))(v594, v595, v538);
        uint64_t v600 = *(int *)(v596 + 20);
        v601 = &v594[v600];
        uint64_t v602 = &v595[v600];
        uint64_t v603 = *((void *)v602 + 1);
        *(void *)v601 = *(void *)v602;
        *((void *)v601 + 1) = v603;
        uint64_t v604 = *(int *)(v596 + 24);
        v605 = &v594[v604];
        uint64_t v606 = &v595[v604];
        uint64_t v607 = *((void *)v606 + 1);
        *(void *)v605 = *(void *)v606;
        *((void *)v605 + 1) = v607;
        v608 = *(void (**)(char *, void, uint64_t, uint64_t))(v597 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v608(v594, 0, 1, v596);
      }
LABEL_100:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for WellnessSnippets(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of TemperatureQueryModel((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for WellnessSnippets);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for AppPunchout();
        uint64_t v7 = *(void *)(v6 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
        {
          uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
        }
        uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
        uint64_t v64 = Model[5];
        uint64_t v65 = (char *)a1 + v64;
        uint64_t v66 = (char *)a2 + v64;
        char v67 = v66[8];
        *(void *)uint64_t v65 = *(void *)v66;
        v65[8] = v67;
        uint64_t v68 = Model[6];
        uint64_t v69 = (char *)a1 + v68;
        uint64_t v70 = (char *)a2 + v68;
        char v71 = v70[8];
        *(void *)uint64_t v69 = *(void *)v70;
        v69[8] = v71;
        uint64_t v72 = Model[7];
        uint64_t v73 = (char *)a1 + v72;
        uint64_t v74 = (char *)a2 + v72;
        char v75 = v74[8];
        *(void *)uint64_t v73 = *(void *)v74;
        v73[8] = v75;
        uint64_t v76 = Model[8];
        uint64_t v77 = (char *)a1 + v76;
        uint64_t v78 = (char *)a2 + v76;
        char v79 = v78[8];
        *(void *)uint64_t v77 = *(void *)v78;
        v77[8] = v79;
        uint64_t v80 = Model[9];
        uint64_t v81 = (char *)a1 + v80;
        uint64_t v82 = (char *)a2 + v80;
        uint64_t v83 = type metadata accessor for SpeakableString();
        uint64_t v84 = *(void *)(v83 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
        {
          uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v81, v82, *(void *)(*(void *)(v85 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v81, v82, v83);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
        }
        uint64_t v331 = Model[10];
        uint64_t v332 = (void *)((char *)a1 + v331);
        uint64_t v333 = (void *)((char *)a2 + v331);
        *uint64_t v332 = *v333;
        v332[1] = v333[1];
        uint64_t v334 = Model[11];
        char v335 = (void *)((char *)a1 + v334);
        uint64_t v336 = (void *)((char *)a2 + v334);
        *char v335 = *v336;
        v335[1] = v336[1];
        uint64_t v337 = Model[12];
        char v338 = (void *)((char *)a1 + v337);
        uint64_t v339 = (void *)((char *)a2 + v337);
        *char v338 = *v339;
        v338[1] = v339[1];
        uint64_t v340 = Model[13];
        v341 = (void *)((char *)a1 + v340);
        uint64_t v342 = (void *)((char *)a2 + v340);
        void *v341 = *v342;
        v341[1] = v342[1];
        uint64_t v343 = Model[14];
        Swift::String v344 = (void *)((char *)a1 + v343);
        uint64_t v345 = (void *)((char *)a2 + v343);
        *Swift::String v344 = *v345;
        v344[1] = v345[1];
        uint64_t v346 = Model[15];
        uint64_t v347 = (void *)((char *)a1 + v346);
        uint64_t v348 = (void *)((char *)a2 + v346);
        *uint64_t v347 = *v348;
        v347[1] = v348[1];
        uint64_t v349 = Model[16];
        __dstf = (char *)a1 + v349;
        char v301 = (char *)a2 + v349;
        uint64_t v350 = type metadata accessor for SnippetHeaderModel();
        uint64_t v543 = *(void *)(v350 - 8);
        uint64_t v553 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v543 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v553(v301, 1, v350)) {
          goto LABEL_81;
        }
        (*(void (**)(char *, char *, uint64_t))(v84 + 16))(__dstf, v301, v83);
        uint64_t v484 = *(int *)(v350 + 20);
        v485 = &__dstf[v484];
        uint64_t v486 = &v301[v484];
        *(void *)v485 = *(void *)v486;
        *((void *)v485 + 1) = *((void *)v486 + 1);
        uint64_t v487 = *(int *)(v350 + 24);
        v488 = &__dstf[v487];
        uint64_t v489 = &v301[v487];
        *(void *)v488 = *(void *)v489;
        *((void *)v488 + 1) = *((void *)v489 + 1);
        uint64_t v490 = *(void (**)(char *, void, uint64_t, uint64_t))(v543 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v490(__dstf, 0, 1, v350);
        goto LABEL_101;
      case 1u:
        uint64_t v9 = type metadata accessor for AppPunchout();
        uint64_t v10 = *(void *)(v9 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
        {
          uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v10 + 16))(a1, a2, v9);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
        }
        uint64_t v86 = (int *)type metadata accessor for BloodPressureQueryModel();
        uint64_t v87 = v86[5];
        uint64_t v88 = (char *)a1 + v87;
        uint64_t v89 = (char *)a2 + v87;
        char v90 = v89[8];
        *(void *)uint64_t v88 = *(void *)v89;
        v88[8] = v90;
        uint64_t v91 = v86[6];
        uint64_t v92 = (char *)a1 + v91;
        uint64_t v93 = (char *)a2 + v91;
        char v94 = v93[8];
        *(void *)uint64_t v92 = *(void *)v93;
        v92[8] = v94;
        uint64_t v95 = v86[7];
        uint64_t v96 = (char *)a1 + v95;
        uint64_t v97 = (char *)a2 + v95;
        char v98 = v97[8];
        *(void *)uint64_t v96 = *(void *)v97;
        v96[8] = v98;
        uint64_t v99 = v86[8];
        uint64_t v100 = (char *)a1 + v99;
        uint64_t v101 = (char *)a2 + v99;
        char v102 = v101[8];
        *(void *)uint64_t v100 = *(void *)v101;
        v100[8] = v102;
        uint64_t v103 = v86[9];
        uint64_t v104 = (char *)a1 + v103;
        uint64_t v105 = (char *)a2 + v103;
        char v106 = v105[8];
        *(void *)uint64_t v104 = *(void *)v105;
        v104[8] = v106;
        uint64_t v107 = v86[10];
        uint64_t v108 = (char *)a1 + v107;
        uint64_t v109 = (char *)a2 + v107;
        uint64_t v110 = *(void *)v109;
        v108[8] = v109[8];
        *(void *)uint64_t v108 = v110;
        uint64_t v111 = v86[11];
        uint64_t v112 = (void *)((char *)a1 + v111);
        uint64_t v113 = (void *)((char *)a2 + v111);
        *uint64_t v112 = *v113;
        v112[1] = v113[1];
        uint64_t v114 = v86[12];
        uint64_t v115 = (void *)((char *)a1 + v114);
        uint64_t v116 = (void *)((char *)a2 + v114);
        *uint64_t v115 = *v116;
        v115[1] = v116[1];
        uint64_t v117 = v86[13];
        uint64_t v118 = (void *)((char *)a1 + v117);
        uint64_t v119 = (void *)((char *)a2 + v117);
        *uint64_t v118 = *v119;
        v118[1] = v119[1];
        uint64_t v120 = v86[14];
        uint64_t v121 = (void *)((char *)a1 + v120);
        uint64_t v122 = (void *)((char *)a2 + v120);
        void *v121 = *v122;
        v121[1] = v122[1];
        uint64_t v123 = v86[15];
        uint64_t v124 = (void *)((char *)a1 + v123);
        uint64_t v125 = (void *)((char *)a2 + v123);
        *uint64_t v124 = *v125;
        v124[1] = v125[1];
        uint64_t v126 = v86[16];
        uint64_t v127 = (void *)((char *)a1 + v126);
        uint64_t v128 = (void *)((char *)a2 + v126);
        *uint64_t v127 = *v128;
        v127[1] = v128[1];
        uint64_t v129 = v86[17];
        uint64_t v130 = (void *)((char *)a1 + v129);
        uint64_t v131 = (void *)((char *)a2 + v129);
        *uint64_t v130 = *v131;
        v130[1] = v131[1];
        uint64_t v132 = v86[18];
        uint64_t v133 = (void *)((char *)a1 + v132);
        long long v134 = (void *)((char *)a2 + v132);
        *uint64_t v133 = *v134;
        v133[1] = v134[1];
        uint64_t v135 = v86[19];
        uint64_t v136 = (void *)((char *)a1 + v135);
        long long v137 = (void *)((char *)a2 + v135);
        void *v136 = *v137;
        v136[1] = v137[1];
        uint64_t v138 = v86[20];
        __dstb = (char *)a1 + v138;
        uint64_t v540 = (char *)a2 + v138;
        uint64_t v139 = type metadata accessor for URL();
        uint64_t v140 = *(void *)(v139 - 8);
        uint64_t v541 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v541(v540, 1, v139))
        {
          uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(__dstb, v540, *(void *)(*(void *)(v141 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v140 + 16))(__dstb, v540, v139);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v140 + 56))(__dstb, 0, 1, v139);
        }
        uint64_t v351 = v86[21];
        uint64_t v352 = (void *)((char *)a1 + v351);
        uint64_t v353 = (void *)((char *)a2 + v351);
        *uint64_t v352 = *v353;
        v352[1] = v353[1];
        uint64_t v354 = v86[22];
        uint64_t v355 = (void *)((char *)a1 + v354);
        char v356 = (void *)((char *)a2 + v354);
        *uint64_t v355 = *v356;
        v355[1] = v356[1];
        uint64_t v357 = v86[23];
        uint64_t v358 = (char *)a1 + v357;
        uint64_t v359 = (char *)a2 + v357;
        uint64_t v360 = type metadata accessor for SnippetHeaderModel();
        uint64_t v361 = *(void *)(v360 - 8);
        uint64_t v362 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v361 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v362(v359, 1, v360))
        {
          uint64_t v363 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v358, v359, *(void *)(*(void *)(v363 - 8) + 64));
        }
        else
        {
          uint64_t v491 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v491 - 8) + 16))(v358, v359, v491);
          uint64_t v492 = *(int *)(v360 + 20);
          uint64_t v493 = &v358[v492];
          uint64_t v494 = &v359[v492];
          *(void *)uint64_t v493 = *(void *)v494;
          *((void *)v493 + 1) = *((void *)v494 + 1);
          uint64_t v495 = *(int *)(v360 + 24);
          uint64_t v496 = &v358[v495];
          uint64_t v497 = &v359[v495];
          *(void *)uint64_t v496 = *(void *)v497;
          *((void *)v496 + 1) = *((void *)v497 + 1);
          uint64_t v498 = *(void (**)(char *, void, uint64_t, uint64_t))(v361 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v498(v358, 0, 1, v360);
        }
        goto LABEL_101;
      case 2u:
        uint64_t v12 = type metadata accessor for AppPunchout();
        uint64_t v13 = *(void *)(v12 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v13 + 16))(a1, a2, v12);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
        }
        uint64_t v142 = (int *)type metadata accessor for BloodPressureLogModel();
        uint64_t v143 = v142[5];
        uint64_t v144 = (void *)((char *)a1 + v143);
        uint64_t v145 = (void *)((char *)a2 + v143);
        void *v144 = *v145;
        v144[1] = v145[1];
        uint64_t v146 = v142[6];
        uint64_t v147 = (void *)((char *)a1 + v146);
        uint64_t v148 = (void *)((char *)a2 + v146);
        void *v147 = *v148;
        v147[1] = v148[1];
        uint64_t v149 = v142[7];
        uint64_t v150 = (void *)((char *)a1 + v149);
        uint64_t v151 = (void *)((char *)a2 + v149);
        *uint64_t v150 = *v151;
        v150[1] = v151[1];
        uint64_t v152 = v142[8];
        __dstc = (char *)a1 + v152;
        uint64_t v153 = (char *)a2 + v152;
        uint64_t v154 = type metadata accessor for SnippetHeaderModel();
        v551 = *(void **)(v154 - 8);
        uint64_t v155 = (unsigned int (*)(char *, uint64_t, uint64_t))v551[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v155(v153, 1, v154))
        {
          uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dstc, v153, *(void *)(*(void *)(v156 - 8) + 64));
        }
        else
        {
          uint64_t v364 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v364 - 8) + 16))(__dstc, v153, v364);
          uint64_t v365 = *(int *)(v154 + 20);
          uint64_t v366 = &__dstc[v365];
          uint64_t v367 = &v153[v365];
          *(void *)uint64_t v366 = *(void *)v367;
          *((void *)v366 + 1) = *((void *)v367 + 1);
          uint64_t v368 = *(int *)(v154 + 24);
          uint64_t v369 = &__dstc[v368];
          uint64_t v370 = &v153[v368];
          *(void *)uint64_t v369 = *(void *)v370;
          *((void *)v369 + 1) = *((void *)v370 + 1);
          uint64_t v371 = (void (*)(char *, void, uint64_t, uint64_t))v551[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v371(__dstc, 0, 1, v154);
        }
        uint64_t v372 = v142[9];
        uint64_t v373 = (void *)((char *)a1 + v372);
        uint64_t v374 = (void *)((char *)a2 + v372);
        void *v373 = *v374;
        v373[1] = v374[1];
        uint64_t v375 = v142[10];
        uint64_t v376 = (void *)((char *)a1 + v375);
        uint64_t v377 = (void *)((char *)a2 + v375);
        void *v376 = *v377;
        v376[1] = v377[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 3u:
        uint64_t v15 = type metadata accessor for AppPunchout();
        uint64_t v16 = *(void *)(v15 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v16 + 16))(a1, a2, v15);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
        uint64_t v157 = (int *)type metadata accessor for CycleTrackingLogModel();
        uint64_t v158 = v157[5];
        uint64_t v159 = (void *)((char *)a1 + v158);
        uint64_t v160 = (void *)((char *)a2 + v158);
        *uint64_t v159 = *v160;
        v159[1] = v160[1];
        uint64_t v161 = v157[6];
        uint64_t v162 = (void *)((char *)a1 + v161);
        uint64_t v163 = (void *)((char *)a2 + v161);
        *uint64_t v162 = *v163;
        v162[1] = v163[1];
        uint64_t v164 = v157[7];
        uint64_t v165 = (void *)((char *)a1 + v164);
        uint64_t v166 = (void *)((char *)a2 + v164);
        *uint64_t v165 = *v166;
        v165[1] = v166[1];
        uint64_t v167 = v157[8];
        __dstd = (char *)a1 + v167;
        uint64_t v168 = (char *)a2 + v167;
        uint64_t v169 = type metadata accessor for SnippetHeaderModel();
        uint64_t v552 = *(void **)(v169 - 8);
        uint64_t v170 = (unsigned int (*)(char *, uint64_t, uint64_t))v552[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v170(v168, 1, v169))
        {
          uint64_t v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dstd, v168, *(void *)(*(void *)(v171 - 8) + 64));
        }
        else
        {
          uint64_t v378 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v378 - 8) + 16))(__dstd, v168, v378);
          uint64_t v379 = *(int *)(v169 + 20);
          uint64_t v380 = &__dstd[v379];
          uint64_t v381 = &v168[v379];
          *(void *)uint64_t v380 = *(void *)v381;
          *((void *)v380 + 1) = *((void *)v381 + 1);
          uint64_t v382 = *(int *)(v169 + 24);
          uint64_t v383 = &__dstd[v382];
          uint64_t v384 = &v168[v382];
          *(void *)uint64_t v383 = *(void *)v384;
          *((void *)v383 + 1) = *((void *)v384 + 1);
          uint64_t v385 = (void (*)(char *, void, uint64_t, uint64_t))v552[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v385(__dstd, 0, 1, v169);
        }
        uint64_t v386 = v157[9];
        uint64_t v387 = (char *)a1 + v386;
        uint64_t v388 = (char *)a2 + v386;
        uint64_t v389 = type metadata accessor for URL();
        uint64_t v390 = *(void *)(v389 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v390 + 48))(v388, 1, v389))
        {
          uint64_t v391 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v387, v388, *(void *)(*(void *)(v391 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v390 + 16))(v387, v388, v389);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v390 + 56))(v387, 0, 1, v389);
        }
        goto LABEL_101;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v18 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
        uint64_t v19 = (char *)a1 + v18;
        uint64_t v20 = (char *)a2 + v18;
        uint64_t v21 = type metadata accessor for URL();
        uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
        swift_bridgeObjectRetain();
        v22(v19, v20, v21);
        goto LABEL_101;
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 6u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        uint64_t v23 = (int *)type metadata accessor for GenericMedCompletedLogModel();
        uint64_t v24 = v23[6];
        uint64_t v25 = (char *)a1 + v24;
        uint64_t v26 = (char *)a2 + v24;
        uint64_t v27 = type metadata accessor for AppPunchout();
        uint64_t v28 = *(void *)(v27 - 8);
        uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
        swift_bridgeObjectRetain();
        if (v29(v26, 1, v27))
        {
          uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        *((unsigned char *)a1 + v23[7]) = *((unsigned char *)a2 + v23[7]);
        uint64_t v172 = v23[8];
        uint64_t v173 = (void *)((char *)a1 + v172);
        uint64_t v174 = (void *)((char *)a2 + v172);
        *uint64_t v173 = *v174;
        v173[1] = v174[1];
        *((unsigned char *)a1 + v23[9]) = *((unsigned char *)a2 + v23[9]);
        uint64_t v175 = v23[10];
        uint64_t v176 = (void *)((char *)a1 + v175);
        uint64_t v177 = (void *)((char *)a2 + v175);
        *uint64_t v176 = *v177;
        v176[1] = v177[1];
        uint64_t v178 = v23[11];
        uint64_t v179 = (void *)((char *)a1 + v178);
        uint64_t v180 = (void *)((char *)a2 + v178);
        void *v179 = *v180;
        v179[1] = v180[1];
        uint64_t v181 = v23[12];
        uint64_t v182 = (void *)((char *)a1 + v181);
        uint64_t v183 = (void *)((char *)a2 + v181);
        void *v182 = *v183;
        v182[1] = v183[1];
        uint64_t v184 = v23[13];
        uint64_t v185 = (void *)((char *)a1 + v184);
        uint64_t v186 = (void *)((char *)a2 + v184);
        void *v185 = *v186;
        v185[1] = v186[1];
        uint64_t v187 = v23[14];
        __dst = (char *)a1 + v187;
        uint64_t v47 = (char *)a2 + v187;
        uint64_t v48 = type metadata accessor for SnippetHeaderModel();
        uint64_t v549 = *(void **)(v48 - 8);
        uint64_t v188 = (unsigned int (*)(char *, uint64_t, uint64_t))v549[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v188(v47, 1, v48)) {
          goto LABEL_24;
        }
        goto LABEL_55;
      case 7u:
        uint64_t v31 = type metadata accessor for SnippetHeaderModel();
        uint64_t v32 = *(void *)(v31 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v32 + 48))(a2, 1, v31))
        {
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(a1, a2, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          uint64_t v189 = type metadata accessor for SpeakableString();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v189 - 8) + 16))(a1, a2, v189);
          uint64_t v190 = *(int *)(v31 + 20);
          uint64_t v191 = (void *)((char *)a1 + v190);
          uint64_t v192 = (void *)((char *)a2 + v190);
          *uint64_t v191 = *v192;
          v191[1] = v192[1];
          uint64_t v193 = *(int *)(v31 + 24);
          uint64_t v194 = (void *)((char *)a1 + v193);
          uint64_t v195 = (void *)((char *)a2 + v193);
          *uint64_t v194 = *v195;
          v194[1] = v195[1];
          uint64_t v196 = *(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v196(a1, 0, 1, v31);
        }
        uint64_t v197 = (int *)type metadata accessor for HealthDataLogModel();
        *(void *)((char *)a1 + v197[5]) = *(void *)((char *)a2 + v197[5]);
        uint64_t v198 = v197[6];
        uint64_t v199 = (void *)((char *)a1 + v198);
        uint64_t v200 = (void *)((char *)a2 + v198);
        *uint64_t v199 = *v200;
        v199[1] = v200[1];
        uint64_t v201 = v197[7];
        uint64_t v202 = (void *)((char *)a1 + v201);
        uint64_t v203 = (void *)((char *)a2 + v201);
        *uint64_t v202 = *v203;
        v202[1] = v203[1];
        uint64_t v204 = v197[8];
        uint64_t v205 = (void *)((char *)a1 + v204);
        uint64_t v206 = (void *)((char *)a2 + v204);
        *uint64_t v205 = *v206;
        v205[1] = v206[1];
        uint64_t v207 = v197[9];
        uint64_t v208 = (void *)((char *)a1 + v207);
        long long v209 = (void *)((char *)a2 + v207);
        *uint64_t v208 = *v209;
        v208[1] = v209[1];
        uint64_t v210 = v197[10];
        __dste = (char *)a1 + v210;
        uint64_t v546 = (char *)a2 + v210;
        uint64_t v211 = type metadata accessor for AppPunchout();
        uint64_t v212 = *(void *)(v211 - 8);
        uint64_t v544 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v212 + 48);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v544(v546, 1, v211))
        {
          uint64_t v213 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(__dste, v546, *(void *)(*(void *)(v213 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v212 + 16))(__dste, v546, v211);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v212 + 56))(__dste, 0, 1, v211);
        }
        uint64_t v392 = v197[11];
        uint64_t v393 = (void *)((char *)a1 + v392);
        uint64_t v394 = (void *)((char *)a2 + v392);
        *uint64_t v393 = *v394;
        v393[1] = v394[1];
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 8u:
        uint64_t v34 = type metadata accessor for AppPunchout();
        uint64_t v35 = *(void *)(v34 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v35 + 48))(a2, 1, v34))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v35 + 16))(a1, a2, v34);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(a1, 0, 1, v34);
        }
        uint64_t v214 = (int *)type metadata accessor for GenericQueryModel();
        uint64_t v215 = v214[5];
        uint64_t v216 = (char *)a1 + v215;
        uint64_t v217 = (char *)a2 + v215;
        char v218 = v217[8];
        *(void *)uint64_t v216 = *(void *)v217;
        v216[8] = v218;
        uint64_t v219 = v214[6];
        uint64_t v220 = (char *)a1 + v219;
        uint64_t v221 = (char *)a2 + v219;
        char v222 = v221[8];
        *(void *)uint64_t v220 = *(void *)v221;
        v220[8] = v222;
        uint64_t v223 = v214[7];
        uint64_t v224 = (char *)a1 + v223;
        uint64_t v225 = (char *)a2 + v223;
        char v226 = v225[8];
        *(void *)uint64_t v224 = *(void *)v225;
        v224[8] = v226;
        uint64_t v227 = v214[8];
        uint64_t v228 = (char *)a1 + v227;
        uint64_t v229 = (char *)a2 + v227;
        char v230 = v229[8];
        *(void *)uint64_t v228 = *(void *)v229;
        v228[8] = v230;
        uint64_t v231 = v214[9];
        uint64_t v232 = (char *)a1 + v231;
        uint64_t v233 = (char *)a2 + v231;
        char v234 = v233[8];
        *(void *)uint64_t v232 = *(void *)v233;
        v232[8] = v234;
        uint64_t v235 = v214[10];
        uint64_t v236 = (char *)a1 + v235;
        uint64_t v237 = (char *)a2 + v235;
        uint64_t v238 = type metadata accessor for SpeakableString();
        uint64_t v239 = *(void *)(v238 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v239 + 48))(v237, 1, v238))
        {
          uint64_t v240 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v236, v237, *(void *)(*(void *)(v240 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v239 + 16))(v236, v237, v238);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v239 + 56))(v236, 0, 1, v238);
        }
        uint64_t v395 = v214[11];
        uint64_t v396 = (void *)((char *)a1 + v395);
        uint64_t v397 = (void *)((char *)a2 + v395);
        void *v396 = *v397;
        v396[1] = v397[1];
        uint64_t v398 = v214[12];
        uint64_t v399 = (void *)((char *)a1 + v398);
        uint64_t v400 = (void *)((char *)a2 + v398);
        *uint64_t v399 = *v400;
        v399[1] = v400[1];
        uint64_t v401 = v214[13];
        uint64_t v402 = (void *)((char *)a1 + v401);
        uint64_t v403 = (void *)((char *)a2 + v401);
        *uint64_t v402 = *v403;
        v402[1] = v403[1];
        uint64_t v404 = v214[14];
        uint64_t v405 = (void *)((char *)a1 + v404);
        uint64_t v406 = (void *)((char *)a2 + v404);
        void *v405 = *v406;
        v405[1] = v406[1];
        uint64_t v407 = v214[15];
        uint64_t v408 = (void *)((char *)a1 + v407);
        uint64_t v409 = (void *)((char *)a2 + v407);
        void *v408 = *v409;
        v408[1] = v409[1];
        uint64_t v410 = v214[16];
        uint64_t v411 = (void *)((char *)a1 + v410);
        uint64_t v412 = (void *)((char *)a2 + v410);
        *uint64_t v411 = *v412;
        v411[1] = v412[1];
        uint64_t v413 = v214[17];
        uint64_t v414 = (void *)((char *)a1 + v413);
        uint64_t v415 = (void *)((char *)a2 + v413);
        *uint64_t v414 = *v415;
        v414[1] = v415[1];
        uint64_t v416 = v214[18];
        __dstf = (char *)a1 + v416;
        char v301 = (char *)a2 + v416;
        uint64_t v417 = type metadata accessor for SnippetHeaderModel();
        uint64_t v542 = *(void *)(v417 - 8);
        v548 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v542 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v548(v301, 1, v417)) {
          goto LABEL_81;
        }
        (*(void (**)(char *, char *, uint64_t))(v239 + 16))(__dstf, v301, v238);
        uint64_t v499 = *(int *)(v417 + 20);
        uint64_t v500 = &__dstf[v499];
        uint64_t v501 = &v301[v499];
        *(void *)uint64_t v500 = *(void *)v501;
        *((void *)v500 + 1) = *((void *)v501 + 1);
        uint64_t v502 = *(int *)(v417 + 24);
        v503 = &__dstf[v502];
        uint64_t v504 = &v301[v502];
        *(void *)v503 = *(void *)v504;
        *((void *)v503 + 1) = *((void *)v504 + 1);
        uint64_t v505 = *(void (**)(char *, void, uint64_t, uint64_t))(v542 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v505(__dstf, 0, 1, v417);
        goto LABEL_101;
      case 9u:
        uint64_t v37 = type metadata accessor for AppPunchout();
        uint64_t v38 = *(void *)(v37 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v38 + 48))(a2, 1, v37))
        {
          uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v38 + 16))(a1, a2, v37);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(a1, 0, 1, v37);
        }
        uint64_t v241 = (int *)type metadata accessor for HeightQueryModel();
        uint64_t v242 = v241[5];
        uint64_t v243 = (char *)a1 + v242;
        char v244 = (char *)a2 + v242;
        char v245 = v244[8];
        *(void *)uint64_t v243 = *(void *)v244;
        v243[8] = v245;
        uint64_t v246 = v241[6];
        uint64_t v247 = (char *)a1 + v246;
        uint64_t v248 = (char *)a2 + v246;
        char v249 = v248[8];
        *(void *)uint64_t v247 = *(void *)v248;
        v247[8] = v249;
        uint64_t v250 = v241[7];
        uint64_t v251 = (char *)a1 + v250;
        long long v252 = (char *)a2 + v250;
        char v253 = v252[8];
        *(void *)uint64_t v251 = *(void *)v252;
        v251[8] = v253;
        uint64_t v254 = v241[8];
        long long v255 = (char *)a1 + v254;
        uint64_t v256 = (char *)a2 + v254;
        uint64_t v257 = type metadata accessor for SpeakableString();
        uint64_t v258 = *(void *)(v257 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v258 + 48))(v256, 1, v257))
        {
          uint64_t v259 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v255, v256, *(void *)(*(void *)(v259 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v258 + 16))(v255, v256, v257);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v258 + 56))(v255, 0, 1, v257);
        }
        *((unsigned char *)a1 + v241[9]) = *((unsigned char *)a2 + v241[9]);
        uint64_t v419 = v241[10];
        uint64_t v420 = (char *)a1 + v419;
        uint64_t v421 = (char *)a2 + v419;
        uint64_t v422 = type metadata accessor for SnippetHeaderModel();
        uint64_t v423 = *(void *)(v422 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v423 + 48))(v421, 1, v422))
        {
          uint64_t v424 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v420, v421, *(void *)(*(void *)(v424 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v258 + 16))(v420, v421, v257);
          uint64_t v506 = *(int *)(v422 + 20);
          uint64_t v507 = &v420[v506];
          uint64_t v508 = &v421[v506];
          *(void *)uint64_t v507 = *(void *)v508;
          *((void *)v507 + 1) = *((void *)v508 + 1);
          uint64_t v509 = *(int *)(v422 + 24);
          uint64_t v510 = &v420[v509];
          uint64_t v511 = &v421[v509];
          *(void *)uint64_t v510 = *(void *)v511;
          *((void *)v510 + 1) = *((void *)v511 + 1);
          v512 = *(void (**)(char *, void, uint64_t, uint64_t))(v423 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v512(v420, 0, 1, v422);
        }
        uint64_t v513 = v241[11];
        uint64_t v514 = (void *)((char *)a1 + v513);
        v515 = (void *)((char *)a2 + v513);
        *uint64_t v514 = *v515;
        v514[1] = v515[1];
        uint64_t v516 = v241[12];
        uint64_t v517 = (void *)((char *)a1 + v516);
        v518 = (void *)((char *)a2 + v516);
        *uint64_t v517 = *v518;
        v517[1] = v518[1];
        uint64_t v519 = v241[13];
        uint64_t v520 = (void *)((char *)a1 + v519);
        v521 = (void *)((char *)a2 + v519);
        void *v520 = *v521;
        v520[1] = v521[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 0xAu:
        uint64_t v40 = *a2;
        *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
        *a1 = v40;
        uint64_t v41 = a2[2];
        *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
        a1[2] = v41;
        uint64_t v42 = a2[4];
        *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
        a1[4] = v42;
        uint64_t v43 = a2[6];
        *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
        a1[6] = v43;
        uint64_t v44 = a2[8];
        *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
        a1[8] = v44;
        uint64_t v45 = a2[10];
        *((unsigned char *)a1 + 88) = *((unsigned char *)a2 + 88);
        a1[10] = v45;
        a1[12] = a2[12];
        a1[13] = a2[13];
        a1[14] = a2[14];
        a1[15] = a2[15];
        a1[16] = a2[16];
        a1[17] = a2[17];
        a1[18] = a2[18];
        a1[19] = a2[19];
        a1[20] = a2[20];
        a1[21] = a2[21];
        a1[22] = a2[22];
        a1[23] = a2[23];
        a1[24] = a2[24];
        a1[25] = a2[25];
        a1[26] = a2[26];
        a1[27] = a2[27];
        a1[28] = a2[28];
        a1[29] = a2[29];
        *((unsigned char *)a1 + 240) = *((unsigned char *)a2 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 0xBu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        uint64_t v46 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
        __dst = (char *)a1 + v46;
        uint64_t v47 = (char *)a2 + v46;
        uint64_t v48 = type metadata accessor for SnippetHeaderModel();
        uint64_t v549 = *(void **)(v48 - 8);
        uint64_t v49 = (unsigned int (*)(char *, uint64_t, uint64_t))v549[6];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v49(v47, 1, v48))
        {
LABEL_24:
          uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dst, v47, *(void *)(*(void *)(v50 - 8) + 64));
        }
        else
        {
LABEL_55:
          uint64_t v260 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v260 - 8) + 16))(__dst, v47, v260);
          uint64_t v261 = *(int *)(v48 + 20);
          uint64_t v262 = &__dst[v261];
          uint64_t v263 = &v47[v261];
          *(void *)uint64_t v262 = *(void *)v263;
          *((void *)v262 + 1) = *((void *)v263 + 1);
          uint64_t v264 = *(int *)(v48 + 24);
          uint64_t v265 = &__dst[v264];
          uint64_t v266 = &v47[v264];
          *(void *)uint64_t v265 = *(void *)v266;
          *((void *)v265 + 1) = *((void *)v266 + 1);
          uint64_t v267 = (void (*)(char *, void, uint64_t, uint64_t))v549[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v267(__dst, 0, 1, v48);
        }
        goto LABEL_101;
      case 0xCu:
        uint64_t v51 = type metadata accessor for AppPunchout();
        uint64_t v52 = *(void *)(v51 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v52 + 48))(a2, 1, v51))
        {
          uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v53 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v52 + 16))(a1, a2, v51);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(a1, 0, 1, v51);
        }
        uint64_t v268 = (int *)type metadata accessor for SleepQueryModel();
        uint64_t v269 = v268[5];
        uint64_t v270 = (char *)a1 + v269;
        uint64_t v271 = (char *)a2 + v269;
        uint64_t v272 = type metadata accessor for SnippetHeaderModel();
        uint64_t v273 = *(void *)(v272 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v273 + 48))(v271, 1, v272))
        {
          uint64_t v274 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v270, v271, *(void *)(*(void *)(v274 - 8) + 64));
        }
        else
        {
          uint64_t v425 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v425 - 8) + 16))(v270, v271, v425);
          uint64_t v426 = *(int *)(v272 + 20);
          uint64_t v427 = &v270[v426];
          uint64_t v428 = &v271[v426];
          *(void *)uint64_t v427 = *(void *)v428;
          *((void *)v427 + 1) = *((void *)v428 + 1);
          uint64_t v429 = *(int *)(v272 + 24);
          uint64_t v430 = &v270[v429];
          long long v431 = &v271[v429];
          *(void *)uint64_t v430 = *(void *)v431;
          *((void *)v430 + 1) = *((void *)v431 + 1);
          uint64_t v432 = *(void (**)(char *, void, uint64_t, uint64_t))(v273 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v432(v270, 0, 1, v272);
        }
        uint64_t v433 = v268[6];
        uint64_t v434 = (void *)((char *)a1 + v433);
        uint64_t v435 = (void *)((char *)a2 + v433);
        *uint64_t v434 = *v435;
        v434[1] = v435[1];
        uint64_t v436 = v268[7];
        uint64_t v437 = (void *)((char *)a1 + v436);
        v438 = (void *)((char *)a2 + v436);
        void *v437 = *v438;
        v437[1] = v438[1];
        uint64_t v439 = v268[8];
        uint64_t v440 = (void *)((char *)a1 + v439);
        uint64_t v441 = (void *)((char *)a2 + v439);
        *uint64_t v440 = *v441;
        v440[1] = v441[1];
        uint64_t v442 = v268[9];
        uint64_t v443 = (void *)((char *)a1 + v442);
        uint64_t v444 = (void *)((char *)a2 + v442);
        *uint64_t v443 = *v444;
        v443[1] = v444[1];
        uint64_t v445 = v268[10];
        v446 = (void *)((char *)a1 + v445);
        uint64_t v447 = (void *)((char *)a2 + v445);
        void *v446 = *v447;
        v446[1] = v447[1];
        *(void *)((char *)a1 + v268[11]) = *(void *)((char *)a2 + v268[11]);
        *(void *)((char *)a1 + v268[12]) = *(void *)((char *)a2 + v268[12]);
        *(void *)((char *)a1 + v268[13]) = *(void *)((char *)a2 + v268[13]);
        *(void *)((char *)a1 + v268[14]) = *(void *)((char *)a2 + v268[14]);
        uint64_t v448 = v268[15];
        uint64_t v449 = (void *)((char *)a1 + v448);
        v450 = (void *)((char *)a2 + v448);
        void *v449 = *v450;
        v449[1] = v450[1];
        uint64_t v451 = v268[16];
        uint64_t v452 = (void *)((char *)a1 + v451);
        uint64_t v453 = (void *)((char *)a2 + v451);
        *uint64_t v452 = *v453;
        v452[1] = v453[1];
        uint64_t v454 = v268[17];
        uint64_t v455 = (void *)((char *)a1 + v454);
        uint64_t v456 = (void *)((char *)a2 + v454);
        *uint64_t v455 = *v456;
        v455[1] = v456[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 0xDu:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        uint64_t v54 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
        uint64_t v55 = v54[8];
        __dsta = (char *)a1 + v55;
        uint64_t v56 = (char *)a2 + v55;
        uint64_t v57 = type metadata accessor for AppPunchout();
        uint64_t v58 = *(void *)(v57 - 8);
        uint64_t v550 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v550(v56, 1, v57))
        {
          uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(__dsta, v56, *(void *)(*(void *)(v59 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v58 + 16))(__dsta, v56, v57);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(__dsta, 0, 1, v57);
        }
        uint64_t v275 = v54[9];
        uint64_t v276 = (char *)a1 + v275;
        uint64_t v277 = (char *)a2 + v275;
        uint64_t v278 = *(void *)v277;
        v276[8] = v277[8];
        *(void *)uint64_t v276 = v278;
        uint64_t v279 = v54[10];
        uint64_t v280 = (void *)((char *)a1 + v279);
        uint64_t v281 = (void *)((char *)a2 + v279);
        *uint64_t v280 = *v281;
        v280[1] = v281[1];
        uint64_t v282 = v54[11];
        uint64_t v283 = (void *)((char *)a1 + v282);
        uint64_t v284 = (void *)((char *)a2 + v282);
        void *v283 = *v284;
        v283[1] = v284[1];
        uint64_t v285 = v54[12];
        uint64_t v286 = (void *)((char *)a1 + v285);
        uint64_t v287 = (void *)((char *)a2 + v285);
        void *v286 = *v287;
        v286[1] = v287[1];
        uint64_t v288 = v54[13];
        uint64_t v289 = (void *)((char *)a1 + v288);
        uint64_t v290 = (void *)((char *)a2 + v288);
        *uint64_t v289 = *v290;
        v289[1] = v290[1];
        *((unsigned char *)a1 + v54[14]) = *((unsigned char *)a2 + v54[14]);
        *((unsigned char *)a1 + v54[15]) = *((unsigned char *)a2 + v54[15]);
        uint64_t v291 = v54[16];
        uint64_t v292 = (void *)((char *)a1 + v291);
        uint64_t v293 = (void *)((char *)a2 + v291);
        *uint64_t v292 = *v293;
        v292[1] = v293[1];
        uint64_t v294 = v54[17];
        uint64_t v295 = (void *)((char *)a1 + v294);
        uint64_t v296 = (void *)((char *)a2 + v294);
        *uint64_t v295 = *v296;
        v295[1] = v296[1];
        uint64_t v297 = v54[18];
        uint64_t v298 = (void *)((char *)a1 + v297);
        uint64_t v299 = (void *)((char *)a2 + v297);
        *uint64_t v298 = *v299;
        v298[1] = v299[1];
        uint64_t v300 = v54[19];
        __dstf = (char *)a1 + v300;
        char v301 = (char *)a2 + v300;
        uint64_t v302 = type metadata accessor for SnippetHeaderModel();
        uint64_t v545 = *(void *)(v302 - 8);
        v303 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v545 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v303(v301, 1, v302))
        {
LABEL_81:
          uint64_t v418 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(__dstf, v301, *(void *)(*(void *)(v418 - 8) + 64));
        }
        else
        {
          uint64_t v457 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v457 - 8) + 16))(__dstf, v301, v457);
          uint64_t v458 = *(int *)(v302 + 20);
          uint64_t v459 = &__dstf[v458];
          uint64_t v460 = &v301[v458];
          *(void *)uint64_t v459 = *(void *)v460;
          *((void *)v459 + 1) = *((void *)v460 + 1);
          uint64_t v461 = *(int *)(v302 + 24);
          uint64_t v462 = &__dstf[v461];
          uint64_t v463 = &v301[v461];
          *(void *)uint64_t v462 = *(void *)v463;
          *((void *)v462 + 1) = *((void *)v463 + 1);
          uint64_t v464 = *(void (**)(char *, void, uint64_t, uint64_t))(v545 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v464(__dstf, 0, 1, v302);
        }
        goto LABEL_101;
      case 0xEu:
        uint64_t v60 = type metadata accessor for AppPunchout();
        uint64_t v61 = *(void *)(v60 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v61 + 48))(a2, 1, v60))
        {
          uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v61 + 16))(a1, a2, v60);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v61 + 56))(a1, 0, 1, v60);
        }
        v304 = (int *)type metadata accessor for TemperatureQueryModel();
        uint64_t v305 = v304[5];
        uint64_t v306 = (char *)a1 + v305;
        char v307 = (char *)a2 + v305;
        char v308 = v307[8];
        *(void *)uint64_t v306 = *(void *)v307;
        v306[8] = v308;
        uint64_t v309 = v304[6];
        Swift::String v310 = (char *)a1 + v309;
        uint64_t v311 = (char *)a2 + v309;
        char v312 = v311[8];
        *(void *)Swift::String v310 = *(void *)v311;
        v310[8] = v312;
        uint64_t v313 = v304[7];
        v314 = (char *)a1 + v313;
        uint64_t v315 = (char *)a2 + v313;
        char v316 = v315[8];
        *(void *)v314 = *(void *)v315;
        v314[8] = v316;
        uint64_t v317 = v304[8];
        uint64_t v318 = (char *)a1 + v317;
        uint64_t v319 = (char *)a2 + v317;
        char v320 = v319[8];
        *(void *)uint64_t v318 = *(void *)v319;
        v318[8] = v320;
        uint64_t v321 = v304[9];
        v322 = (char *)a1 + v321;
        uint64_t v323 = (char *)a2 + v321;
        char v324 = v323[8];
        *(void *)v322 = *(void *)v323;
        v322[8] = v324;
        uint64_t v325 = v304[10];
        v326 = (char *)a1 + v325;
        uint64_t v327 = (char *)a2 + v325;
        uint64_t v328 = type metadata accessor for SpeakableString();
        uint64_t v329 = *(void *)(v328 - 8);
        __dstg = *(unsigned int (**)(char *, uint64_t, uint64_t))(v329 + 48);
        uint64_t v547 = v329;
        if (__dstg(v327, 1, v328))
        {
          uint64_t v330 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v326, v327, *(void *)(*(void *)(v330 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v329 + 16))(v326, v327, v328);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v329 + 56))(v326, 0, 1, v328);
        }
        uint64_t v465 = v304[11];
        uint64_t v466 = (void *)((char *)a1 + v465);
        uint64_t v467 = (void *)((char *)a2 + v465);
        *uint64_t v466 = *v467;
        v466[1] = v467[1];
        uint64_t v468 = v304[12];
        uint64_t v469 = (void *)((char *)a1 + v468);
        uint64_t v470 = (void *)((char *)a2 + v468);
        *uint64_t v469 = *v470;
        v469[1] = v470[1];
        uint64_t v471 = v304[13];
        v472 = (void *)((char *)a1 + v471);
        uint64_t v473 = (void *)((char *)a2 + v471);
        void *v472 = *v473;
        v472[1] = v473[1];
        uint64_t v474 = v304[14];
        v475 = (void *)((char *)a1 + v474);
        uint64_t v476 = (void *)((char *)a2 + v474);
        void *v475 = *v476;
        v475[1] = v476[1];
        uint64_t v477 = v304[15];
        v478 = (void *)((char *)a1 + v477);
        uint64_t v479 = (void *)((char *)a2 + v477);
        void *v478 = *v479;
        v478[1] = v479[1];
        uint64_t v480 = v304[16];
        uint64_t v554 = (char *)a1 + v480;
        v481 = (char *)a2 + v480;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v482 = v328;
        if (__dstg(v481, 1, v328))
        {
          uint64_t v483 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v554, v481, *(void *)(*(void *)(v483 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v329 + 16))(v554, v481, v328);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v329 + 56))(v554, 0, 1, v328);
        }
        uint64_t v522 = v304[17];
        uint64_t v523 = (void *)((char *)a1 + v522);
        uint64_t v524 = (void *)((char *)a2 + v522);
        *uint64_t v523 = *v524;
        v523[1] = v524[1];
        uint64_t v525 = v304[18];
        uint64_t v526 = (char *)a1 + v525;
        uint64_t v527 = (char *)a2 + v525;
        uint64_t v528 = type metadata accessor for SnippetHeaderModel();
        uint64_t v529 = *(void *)(v528 - 8);
        uint64_t v530 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v529 + 48);
        swift_bridgeObjectRetain();
        if (v530(v527, 1, v528))
        {
          uint64_t v531 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v526, v527, *(void *)(*(void *)(v531 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v547 + 16))(v526, v527, v482);
          uint64_t v532 = *(int *)(v528 + 20);
          v533 = &v526[v532];
          uint64_t v534 = &v527[v532];
          *(void *)v533 = *(void *)v534;
          *((void *)v533 + 1) = *((void *)v534 + 1);
          uint64_t v535 = *(int *)(v528 + 24);
          uint64_t v536 = &v526[v535];
          v537 = &v527[v535];
          *(void *)uint64_t v536 = *(void *)v537;
          *((void *)v536 + 1) = *((void *)v537 + 1);
          uint64_t v538 = *(void (**)(char *, void, uint64_t, uint64_t))(v529 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v538(v526, 0, 1, v528);
        }
LABEL_101:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t outlined destroy of TemperatureQueryModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *initializeWithTake for WellnessSnippets(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for AppPunchout();
      uint64_t v7 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
      uint64_t v57 = Model[5];
      uint64_t v58 = (char *)a1 + v57;
      uint64_t v59 = (char *)a2 + v57;
      *(void *)uint64_t v58 = *(void *)v59;
      v58[8] = v59[8];
      uint64_t v60 = Model[6];
      uint64_t v61 = (char *)a1 + v60;
      uint64_t v62 = (char *)a2 + v60;
      *(void *)uint64_t v61 = *(void *)v62;
      v61[8] = v62[8];
      uint64_t v63 = Model[7];
      uint64_t v64 = (char *)a1 + v63;
      uint64_t v65 = (char *)a2 + v63;
      v64[8] = v65[8];
      *(void *)uint64_t v64 = *(void *)v65;
      uint64_t v66 = Model[8];
      char v67 = (char *)a1 + v66;
      uint64_t v68 = (char *)a2 + v66;
      v67[8] = v68[8];
      *(void *)char v67 = *(void *)v68;
      uint64_t v69 = Model[9];
      uint64_t v70 = (char *)a1 + v69;
      char v71 = (char *)a2 + v69;
      uint64_t v72 = type metadata accessor for SpeakableString();
      uint64_t v73 = *(void *)(v72 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
      {
        uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v70, v71, v72);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
      }
      *(_OWORD *)((char *)a1 + Model[10]) = *(_OWORD *)((char *)a2 + Model[10]);
      *(_OWORD *)((char *)a1 + Model[11]) = *(_OWORD *)((char *)a2 + Model[11]);
      *(_OWORD *)((char *)a1 + Model[12]) = *(_OWORD *)((char *)a2 + Model[12]);
      *(_OWORD *)((char *)a1 + Model[13]) = *(_OWORD *)((char *)a2 + Model[13]);
      *(_OWORD *)((char *)a1 + Model[14]) = *(_OWORD *)((char *)a2 + Model[14]);
      *(_OWORD *)((char *)a1 + Model[15]) = *(_OWORD *)((char *)a2 + Model[15]);
      uint64_t v191 = Model[16];
      uint64_t v39 = (char *)a1 + v191;
      uint64_t v40 = (char *)a2 + v191;
      uint64_t v192 = type metadata accessor for SnippetHeaderModel();
      uint64_t v193 = *(void *)(v192 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v40, 1, v192)) {
        goto LABEL_96;
      }
      goto LABEL_78;
    case 1u:
      uint64_t v9 = type metadata accessor for AppPunchout();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
      {
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v10 + 32))(a1, a2, v9);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      char v75 = (int *)type metadata accessor for BloodPressureQueryModel();
      uint64_t v76 = v75[5];
      uint64_t v77 = (char *)a1 + v76;
      uint64_t v78 = (char *)a2 + v76;
      *(void *)uint64_t v77 = *(void *)v78;
      v77[8] = v78[8];
      uint64_t v79 = v75[6];
      uint64_t v80 = (char *)a1 + v79;
      uint64_t v81 = (char *)a2 + v79;
      *(void *)uint64_t v80 = *(void *)v81;
      v80[8] = v81[8];
      uint64_t v82 = v75[7];
      uint64_t v83 = (char *)a1 + v82;
      uint64_t v84 = (char *)a2 + v82;
      v83[8] = v84[8];
      *(void *)uint64_t v83 = *(void *)v84;
      uint64_t v85 = v75[8];
      uint64_t v86 = (char *)a1 + v85;
      uint64_t v87 = (char *)a2 + v85;
      v86[8] = v87[8];
      *(void *)uint64_t v86 = *(void *)v87;
      uint64_t v88 = v75[9];
      uint64_t v89 = (char *)a1 + v88;
      char v90 = (char *)a2 + v88;
      v89[8] = v90[8];
      *(void *)uint64_t v89 = *(void *)v90;
      uint64_t v91 = v75[10];
      uint64_t v92 = (char *)a1 + v91;
      uint64_t v93 = (char *)a2 + v91;
      *(void *)uint64_t v92 = *(void *)v93;
      v92[8] = v93[8];
      *(_OWORD *)((char *)a1 + v75[11]) = *(_OWORD *)((char *)a2 + v75[11]);
      *(_OWORD *)((char *)a1 + v75[12]) = *(_OWORD *)((char *)a2 + v75[12]);
      *(_OWORD *)((char *)a1 + v75[13]) = *(_OWORD *)((char *)a2 + v75[13]);
      *(_OWORD *)((char *)a1 + v75[14]) = *(_OWORD *)((char *)a2 + v75[14]);
      *(_OWORD *)((char *)a1 + v75[15]) = *(_OWORD *)((char *)a2 + v75[15]);
      *(_OWORD *)((char *)a1 + v75[16]) = *(_OWORD *)((char *)a2 + v75[16]);
      *(_OWORD *)((char *)a1 + v75[17]) = *(_OWORD *)((char *)a2 + v75[17]);
      *(_OWORD *)((char *)a1 + v75[18]) = *(_OWORD *)((char *)a2 + v75[18]);
      *(_OWORD *)((char *)a1 + v75[19]) = *(_OWORD *)((char *)a2 + v75[19]);
      uint64_t v94 = v75[20];
      uint64_t v95 = (char *)a1 + v94;
      uint64_t v96 = (char *)a2 + v94;
      uint64_t v97 = type metadata accessor for URL();
      uint64_t v98 = *(void *)(v97 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
      {
        uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v95, v96, *(void *)(*(void *)(v99 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v95, v96, v97);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
      }
      *(_OWORD *)((char *)a1 + v75[21]) = *(_OWORD *)((char *)a2 + v75[21]);
      *(_OWORD *)((char *)a1 + v75[22]) = *(_OWORD *)((char *)a2 + v75[22]);
      uint64_t v194 = v75[23];
      uint64_t v39 = (char *)a1 + v194;
      uint64_t v40 = (char *)a2 + v194;
      uint64_t v41 = type metadata accessor for SnippetHeaderModel();
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
        goto LABEL_78;
      }
      goto LABEL_89;
    case 2u:
      uint64_t v12 = type metadata accessor for AppPunchout();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v13 + 32))(a1, a2, v12);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
      }
      uint64_t v100 = (int *)type metadata accessor for BloodPressureLogModel();
      *(_OWORD *)((char *)a1 + v100[5]) = *(_OWORD *)((char *)a2 + v100[5]);
      *(_OWORD *)((char *)a1 + v100[6]) = *(_OWORD *)((char *)a2 + v100[6]);
      *(_OWORD *)((char *)a1 + v100[7]) = *(_OWORD *)((char *)a2 + v100[7]);
      uint64_t v101 = v100[8];
      char v102 = (char *)a1 + v101;
      uint64_t v103 = (char *)a2 + v101;
      uint64_t v104 = type metadata accessor for SnippetHeaderModel();
      uint64_t v105 = *(void *)(v104 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
      {
        uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v102, v103, *(void *)(*(void *)(v106 - 8) + 64));
      }
      else
      {
        uint64_t v195 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v195 - 8) + 32))(v102, v103, v195);
        *(_OWORD *)&v102[*(int *)(v104 + 20)] = *(_OWORD *)&v103[*(int *)(v104 + 20)];
        *(_OWORD *)&v102[*(int *)(v104 + 24)] = *(_OWORD *)&v103[*(int *)(v104 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
      }
      *(_OWORD *)((char *)a1 + v100[9]) = *(_OWORD *)((char *)a2 + v100[9]);
      *(_OWORD *)((char *)a1 + v100[10]) = *(_OWORD *)((char *)a2 + v100[10]);
      goto LABEL_97;
    case 3u:
      uint64_t v15 = type metadata accessor for AppPunchout();
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v16 + 32))(a1, a2, v15);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
      }
      uint64_t v107 = (int *)type metadata accessor for CycleTrackingLogModel();
      *(_OWORD *)((char *)a1 + v107[5]) = *(_OWORD *)((char *)a2 + v107[5]);
      *(_OWORD *)((char *)a1 + v107[6]) = *(_OWORD *)((char *)a2 + v107[6]);
      *(_OWORD *)((char *)a1 + v107[7]) = *(_OWORD *)((char *)a2 + v107[7]);
      uint64_t v108 = v107[8];
      uint64_t v109 = (char *)a1 + v108;
      uint64_t v110 = (char *)a2 + v108;
      uint64_t v111 = type metadata accessor for SnippetHeaderModel();
      uint64_t v112 = *(void *)(v111 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
      {
        uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v109, v110, *(void *)(*(void *)(v113 - 8) + 64));
      }
      else
      {
        uint64_t v196 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v196 - 8) + 32))(v109, v110, v196);
        *(_OWORD *)&v109[*(int *)(v111 + 20)] = *(_OWORD *)&v110[*(int *)(v111 + 20)];
        *(_OWORD *)&v109[*(int *)(v111 + 24)] = *(_OWORD *)&v110[*(int *)(v111 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
      }
      uint64_t v197 = v107[9];
      uint64_t v198 = (char *)a1 + v197;
      uint64_t v199 = (char *)a2 + v197;
      uint64_t v200 = type metadata accessor for URL();
      uint64_t v201 = *(void *)(v200 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v201 + 48))(v199, 1, v200))
      {
        uint64_t v202 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v198, v199, *(void *)(*(void *)(v202 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v201 + 32))(v198, v199, v200);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v201 + 56))(v198, 0, 1, v200);
      }
      goto LABEL_97;
    case 4u:
      *a1 = *a2;
      uint64_t v18 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
      uint64_t v19 = (char *)a1 + v18;
      uint64_t v20 = (char *)a2 + v18;
      uint64_t v21 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
      goto LABEL_97;
    case 6u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
      uint64_t v22 = (int *)type metadata accessor for GenericMedCompletedLogModel();
      uint64_t v23 = v22[6];
      uint64_t v24 = (char *)a1 + v23;
      uint64_t v25 = (char *)a2 + v23;
      uint64_t v26 = type metadata accessor for AppPunchout();
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      *((unsigned char *)a1 + v22[7]) = *((unsigned char *)a2 + v22[7]);
      *(_OWORD *)((char *)a1 + v22[8]) = *(_OWORD *)((char *)a2 + v22[8]);
      *((unsigned char *)a1 + v22[9]) = *((unsigned char *)a2 + v22[9]);
      *(_OWORD *)((char *)a1 + v22[10]) = *(_OWORD *)((char *)a2 + v22[10]);
      *(_OWORD *)((char *)a1 + v22[11]) = *(_OWORD *)((char *)a2 + v22[11]);
      *(_OWORD *)((char *)a1 + v22[12]) = *(_OWORD *)((char *)a2 + v22[12]);
      *(_OWORD *)((char *)a1 + v22[13]) = *(_OWORD *)((char *)a2 + v22[13]);
      uint64_t v114 = v22[14];
      uint64_t v39 = (char *)a1 + v114;
      uint64_t v40 = (char *)a2 + v114;
      uint64_t v41 = type metadata accessor for SnippetHeaderModel();
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
        goto LABEL_78;
      }
      goto LABEL_89;
    case 7u:
      uint64_t v29 = type metadata accessor for SnippetHeaderModel();
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(a2, 1, v29))
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(a1, a2, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        uint64_t v115 = type metadata accessor for SpeakableString();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v115 - 8) + 32))(a1, a2, v115);
        *(_OWORD *)((char *)a1 + *(int *)(v29 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v29 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v29 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v29 + 24));
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v30 + 56))(a1, 0, 1, v29);
      }
      uint64_t v116 = (int *)type metadata accessor for HealthDataLogModel();
      *(void *)((char *)a1 + v116[5]) = *(void *)((char *)a2 + v116[5]);
      *(_OWORD *)((char *)a1 + v116[6]) = *(_OWORD *)((char *)a2 + v116[6]);
      *(_OWORD *)((char *)a1 + v116[7]) = *(_OWORD *)((char *)a2 + v116[7]);
      *(_OWORD *)((char *)a1 + v116[8]) = *(_OWORD *)((char *)a2 + v116[8]);
      *(_OWORD *)((char *)a1 + v116[9]) = *(_OWORD *)((char *)a2 + v116[9]);
      uint64_t v117 = v116[10];
      uint64_t v118 = (char *)a1 + v117;
      uint64_t v119 = (char *)a2 + v117;
      uint64_t v120 = type metadata accessor for AppPunchout();
      uint64_t v121 = *(void *)(v120 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
      {
        uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(v118, v119, *(void *)(*(void *)(v122 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v118, v119, v120);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
      }
      *(_OWORD *)((char *)a1 + v116[11]) = *(_OWORD *)((char *)a2 + v116[11]);
      goto LABEL_97;
    case 8u:
      uint64_t v32 = type metadata accessor for AppPunchout();
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48))(a2, 1, v32))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v33 + 32))(a1, a2, v32);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v33 + 56))(a1, 0, 1, v32);
      }
      uint64_t v123 = (int *)type metadata accessor for GenericQueryModel();
      uint64_t v124 = v123[5];
      uint64_t v125 = (char *)a1 + v124;
      uint64_t v126 = (char *)a2 + v124;
      *(void *)uint64_t v125 = *(void *)v126;
      v125[8] = v126[8];
      uint64_t v127 = v123[6];
      uint64_t v128 = (char *)a1 + v127;
      uint64_t v129 = (char *)a2 + v127;
      *(void *)uint64_t v128 = *(void *)v129;
      v128[8] = v129[8];
      uint64_t v130 = v123[7];
      uint64_t v131 = (char *)a1 + v130;
      uint64_t v132 = (char *)a2 + v130;
      v131[8] = v132[8];
      *(void *)uint64_t v131 = *(void *)v132;
      uint64_t v133 = v123[8];
      long long v134 = (char *)a1 + v133;
      uint64_t v135 = (char *)a2 + v133;
      v134[8] = v135[8];
      *(void *)long long v134 = *(void *)v135;
      uint64_t v136 = v123[9];
      long long v137 = (char *)a1 + v136;
      uint64_t v138 = (char *)a2 + v136;
      v137[8] = v138[8];
      *(void *)long long v137 = *(void *)v138;
      uint64_t v139 = v123[10];
      uint64_t v140 = (char *)a1 + v139;
      uint64_t v141 = (char *)a2 + v139;
      uint64_t v72 = type metadata accessor for SpeakableString();
      uint64_t v73 = *(void *)(v72 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v141, 1, v72))
      {
        uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v140, v141, *(void *)(*(void *)(v142 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v140, v141, v72);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v140, 0, 1, v72);
      }
      *(_OWORD *)((char *)a1 + v123[11]) = *(_OWORD *)((char *)a2 + v123[11]);
      *(_OWORD *)((char *)a1 + v123[12]) = *(_OWORD *)((char *)a2 + v123[12]);
      *(_OWORD *)((char *)a1 + v123[13]) = *(_OWORD *)((char *)a2 + v123[13]);
      *(_OWORD *)((char *)a1 + v123[14]) = *(_OWORD *)((char *)a2 + v123[14]);
      *(_OWORD *)((char *)a1 + v123[15]) = *(_OWORD *)((char *)a2 + v123[15]);
      *(_OWORD *)((char *)a1 + v123[16]) = *(_OWORD *)((char *)a2 + v123[16]);
      *(_OWORD *)((char *)a1 + v123[17]) = *(_OWORD *)((char *)a2 + v123[17]);
      uint64_t v203 = v123[18];
      uint64_t v39 = (char *)a1 + v203;
      uint64_t v40 = (char *)a2 + v203;
      uint64_t v192 = type metadata accessor for SnippetHeaderModel();
      uint64_t v193 = *(void *)(v192 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v40, 1, v192)) {
        goto LABEL_78;
      }
      goto LABEL_96;
    case 9u:
      uint64_t v35 = type metadata accessor for AppPunchout();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(a2, 1, v35))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v36 + 32))(a1, a2, v35);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v36 + 56))(a1, 0, 1, v35);
      }
      uint64_t v143 = (int *)type metadata accessor for HeightQueryModel();
      uint64_t v144 = v143[5];
      uint64_t v145 = (char *)a1 + v144;
      uint64_t v146 = (char *)a2 + v144;
      *(void *)uint64_t v145 = *(void *)v146;
      v145[8] = v146[8];
      uint64_t v147 = v143[6];
      uint64_t v148 = (char *)a1 + v147;
      uint64_t v149 = (char *)a2 + v147;
      *(void *)uint64_t v148 = *(void *)v149;
      v148[8] = v149[8];
      uint64_t v150 = v143[7];
      uint64_t v151 = (char *)a1 + v150;
      uint64_t v152 = (char *)a2 + v150;
      v151[8] = v152[8];
      *(void *)uint64_t v151 = *(void *)v152;
      uint64_t v153 = v143[8];
      uint64_t v154 = (char *)a1 + v153;
      uint64_t v155 = (char *)a2 + v153;
      uint64_t v156 = type metadata accessor for SpeakableString();
      uint64_t v157 = *(void *)(v156 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v157 + 48))(v155, 1, v156))
      {
        uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v154, v155, *(void *)(*(void *)(v158 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v154, v155, v156);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v157 + 56))(v154, 0, 1, v156);
      }
      *((unsigned char *)a1 + v143[9]) = *((unsigned char *)a2 + v143[9]);
      uint64_t v205 = v143[10];
      uint64_t v206 = (char *)a1 + v205;
      uint64_t v207 = (char *)a2 + v205;
      uint64_t v208 = type metadata accessor for SnippetHeaderModel();
      uint64_t v209 = *(void *)(v208 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v207, 1, v208))
      {
        uint64_t v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v206, v207, *(void *)(*(void *)(v210 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v206, v207, v156);
        *(_OWORD *)&v206[*(int *)(v208 + 20)] = *(_OWORD *)&v207[*(int *)(v208 + 20)];
        *(_OWORD *)&v206[*(int *)(v208 + 24)] = *(_OWORD *)&v207[*(int *)(v208 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v209 + 56))(v206, 0, 1, v208);
      }
      *(_OWORD *)((char *)a1 + v143[11]) = *(_OWORD *)((char *)a2 + v143[11]);
      *(_OWORD *)((char *)a1 + v143[12]) = *(_OWORD *)((char *)a2 + v143[12]);
      *(_OWORD *)((char *)a1 + v143[13]) = *(_OWORD *)((char *)a2 + v143[13]);
      goto LABEL_97;
    case 0xBu:
      *a1 = *a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
      uint64_t v38 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
      uint64_t v39 = (char *)a1 + v38;
      uint64_t v40 = (char *)a2 + v38;
      uint64_t v41 = type metadata accessor for SnippetHeaderModel();
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
        goto LABEL_78;
      }
      goto LABEL_89;
    case 0xCu:
      uint64_t v43 = type metadata accessor for AppPunchout();
      uint64_t v44 = *(void *)(v43 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v44 + 48))(a2, 1, v43))
      {
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v44 + 32))(a1, a2, v43);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v44 + 56))(a1, 0, 1, v43);
      }
      uint64_t v159 = (int *)type metadata accessor for SleepQueryModel();
      uint64_t v160 = v159[5];
      uint64_t v161 = (char *)a1 + v160;
      uint64_t v162 = (char *)a2 + v160;
      uint64_t v163 = type metadata accessor for SnippetHeaderModel();
      uint64_t v164 = *(void *)(v163 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
      {
        uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v161, v162, *(void *)(*(void *)(v165 - 8) + 64));
      }
      else
      {
        uint64_t v211 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v211 - 8) + 32))(v161, v162, v211);
        *(_OWORD *)&v161[*(int *)(v163 + 20)] = *(_OWORD *)&v162[*(int *)(v163 + 20)];
        *(_OWORD *)&v161[*(int *)(v163 + 24)] = *(_OWORD *)&v162[*(int *)(v163 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
      }
      *(_OWORD *)((char *)a1 + v159[6]) = *(_OWORD *)((char *)a2 + v159[6]);
      *(_OWORD *)((char *)a1 + v159[7]) = *(_OWORD *)((char *)a2 + v159[7]);
      *(_OWORD *)((char *)a1 + v159[8]) = *(_OWORD *)((char *)a2 + v159[8]);
      *(_OWORD *)((char *)a1 + v159[9]) = *(_OWORD *)((char *)a2 + v159[9]);
      *(_OWORD *)((char *)a1 + v159[10]) = *(_OWORD *)((char *)a2 + v159[10]);
      *(void *)((char *)a1 + v159[11]) = *(void *)((char *)a2 + v159[11]);
      *(void *)((char *)a1 + v159[12]) = *(void *)((char *)a2 + v159[12]);
      *(void *)((char *)a1 + v159[13]) = *(void *)((char *)a2 + v159[13]);
      *(void *)((char *)a1 + v159[14]) = *(void *)((char *)a2 + v159[14]);
      *(_OWORD *)((char *)a1 + v159[15]) = *(_OWORD *)((char *)a2 + v159[15]);
      *(_OWORD *)((char *)a1 + v159[16]) = *(_OWORD *)((char *)a2 + v159[16]);
      *(_OWORD *)((char *)a1 + v159[17]) = *(_OWORD *)((char *)a2 + v159[17]);
      goto LABEL_97;
    case 0xDu:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      uint64_t v46 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
      uint64_t v47 = v46[8];
      uint64_t v48 = (char *)a1 + v47;
      uint64_t v49 = (char *)a2 + v47;
      uint64_t v50 = type metadata accessor for AppPunchout();
      uint64_t v51 = *(void *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v49, v50);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      }
      uint64_t v166 = v46[9];
      uint64_t v167 = (char *)a1 + v166;
      uint64_t v168 = (char *)a2 + v166;
      *(void *)uint64_t v167 = *(void *)v168;
      v167[8] = v168[8];
      *(_OWORD *)((char *)a1 + v46[10]) = *(_OWORD *)((char *)a2 + v46[10]);
      *(_OWORD *)((char *)a1 + v46[11]) = *(_OWORD *)((char *)a2 + v46[11]);
      *(_OWORD *)((char *)a1 + v46[12]) = *(_OWORD *)((char *)a2 + v46[12]);
      *(_OWORD *)((char *)a1 + v46[13]) = *(_OWORD *)((char *)a2 + v46[13]);
      *((unsigned char *)a1 + v46[14]) = *((unsigned char *)a2 + v46[14]);
      *((unsigned char *)a1 + v46[15]) = *((unsigned char *)a2 + v46[15]);
      *(_OWORD *)((char *)a1 + v46[16]) = *(_OWORD *)((char *)a2 + v46[16]);
      *(_OWORD *)((char *)a1 + v46[17]) = *(_OWORD *)((char *)a2 + v46[17]);
      *(_OWORD *)((char *)a1 + v46[18]) = *(_OWORD *)((char *)a2 + v46[18]);
      uint64_t v169 = v46[19];
      uint64_t v39 = (char *)a1 + v169;
      uint64_t v40 = (char *)a2 + v169;
      uint64_t v41 = type metadata accessor for SnippetHeaderModel();
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
        goto LABEL_78;
      }
LABEL_89:
      uint64_t v216 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v216 - 8) + 32))(v39, v40, v216);
      *(_OWORD *)&v39[*(int *)(v41 + 20)] = *(_OWORD *)&v40[*(int *)(v41 + 20)];
      *(_OWORD *)&v39[*(int *)(v41 + 24)] = *(_OWORD *)&v40[*(int *)(v41 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      goto LABEL_97;
    case 0xEu:
      uint64_t v53 = type metadata accessor for AppPunchout();
      uint64_t v54 = *(void *)(v53 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v54 + 48))(a2, 1, v53))
      {
        uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
        memcpy(a1, a2, *(void *)(*(void *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v54 + 32))(a1, a2, v53);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v54 + 56))(a1, 0, 1, v53);
      }
      uint64_t v170 = (int *)type metadata accessor for TemperatureQueryModel();
      uint64_t v171 = v170[5];
      uint64_t v172 = (char *)a1 + v171;
      uint64_t v173 = (char *)a2 + v171;
      *(void *)uint64_t v172 = *(void *)v173;
      v172[8] = v173[8];
      uint64_t v174 = v170[6];
      uint64_t v175 = (char *)a1 + v174;
      uint64_t v176 = (char *)a2 + v174;
      *(void *)uint64_t v175 = *(void *)v176;
      v175[8] = v176[8];
      uint64_t v177 = v170[7];
      uint64_t v178 = (char *)a1 + v177;
      uint64_t v179 = (char *)a2 + v177;
      v178[8] = v179[8];
      *(void *)uint64_t v178 = *(void *)v179;
      uint64_t v180 = v170[8];
      uint64_t v181 = (char *)a1 + v180;
      uint64_t v182 = (char *)a2 + v180;
      v181[8] = v182[8];
      *(void *)uint64_t v181 = *(void *)v182;
      uint64_t v183 = v170[9];
      uint64_t v184 = (char *)a1 + v183;
      uint64_t v185 = (char *)a2 + v183;
      v184[8] = v185[8];
      *(void *)uint64_t v184 = *(void *)v185;
      uint64_t v186 = v170[10];
      uint64_t v187 = (char *)a1 + v186;
      uint64_t v188 = (char *)a2 + v186;
      uint64_t v72 = type metadata accessor for SpeakableString();
      uint64_t v73 = *(void *)(v72 - 8);
      uint64_t v189 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
      if (v189(v188, 1, v72))
      {
        uint64_t v190 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v187, v188, *(void *)(*(void *)(v190 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v187, v188, v72);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v187, 0, 1, v72);
      }
      *(_OWORD *)((char *)a1 + v170[11]) = *(_OWORD *)((char *)a2 + v170[11]);
      *(_OWORD *)((char *)a1 + v170[12]) = *(_OWORD *)((char *)a2 + v170[12]);
      *(_OWORD *)((char *)a1 + v170[13]) = *(_OWORD *)((char *)a2 + v170[13]);
      *(_OWORD *)((char *)a1 + v170[14]) = *(_OWORD *)((char *)a2 + v170[14]);
      *(_OWORD *)((char *)a1 + v170[15]) = *(_OWORD *)((char *)a2 + v170[15]);
      uint64_t v212 = v170[16];
      uint64_t v213 = (char *)a1 + v212;
      uint64_t v214 = (char *)a2 + v212;
      if (v189((char *)a2 + v212, 1, v72))
      {
        uint64_t v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
        memcpy(v213, v214, *(void *)(*(void *)(v215 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v213, v214, v72);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v213, 0, 1, v72);
      }
      *(_OWORD *)((char *)a1 + v170[17]) = *(_OWORD *)((char *)a2 + v170[17]);
      uint64_t v217 = v170[18];
      uint64_t v39 = (char *)a1 + v217;
      uint64_t v40 = (char *)a2 + v217;
      uint64_t v192 = type metadata accessor for SnippetHeaderModel();
      uint64_t v193 = *(void *)(v192 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v40, 1, v192))
      {
LABEL_78:
        uint64_t v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
        memcpy(v39, v40, *(void *)(*(void *)(v204 - 8) + 64));
      }
      else
      {
LABEL_96:
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v39, v40, v72);
        *(_OWORD *)&v39[*(int *)(v192 + 20)] = *(_OWORD *)&v40[*(int *)(v192 + 20)];
        *(_OWORD *)&v39[*(int *)(v192 + 24)] = *(_OWORD *)&v40[*(int *)(v192 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v193 + 56))(v39, 0, 1, v192);
      }
LABEL_97:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_OWORD *assignWithTake for WellnessSnippets(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of TemperatureQueryModel((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for WellnessSnippets);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for AppPunchout();
        uint64_t v7 = *(void *)(v6 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
        {
          uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
        }
        uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
        uint64_t v57 = Model[5];
        uint64_t v58 = (char *)a1 + v57;
        uint64_t v59 = (char *)a2 + v57;
        *(void *)uint64_t v58 = *(void *)v59;
        v58[8] = v59[8];
        uint64_t v60 = Model[6];
        uint64_t v61 = (char *)a1 + v60;
        uint64_t v62 = (char *)a2 + v60;
        *(void *)uint64_t v61 = *(void *)v62;
        v61[8] = v62[8];
        uint64_t v63 = Model[7];
        uint64_t v64 = (char *)a1 + v63;
        uint64_t v65 = (char *)a2 + v63;
        v64[8] = v65[8];
        *(void *)uint64_t v64 = *(void *)v65;
        uint64_t v66 = Model[8];
        char v67 = (char *)a1 + v66;
        uint64_t v68 = (char *)a2 + v66;
        v67[8] = v68[8];
        *(void *)char v67 = *(void *)v68;
        uint64_t v69 = Model[9];
        uint64_t v70 = (char *)a1 + v69;
        char v71 = (char *)a2 + v69;
        uint64_t v72 = type metadata accessor for SpeakableString();
        uint64_t v73 = *(void *)(v72 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
        {
          uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v70, v71, v72);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
        }
        *(_OWORD *)((char *)a1 + Model[10]) = *(_OWORD *)((char *)a2 + Model[10]);
        *(_OWORD *)((char *)a1 + Model[11]) = *(_OWORD *)((char *)a2 + Model[11]);
        *(_OWORD *)((char *)a1 + Model[12]) = *(_OWORD *)((char *)a2 + Model[12]);
        *(_OWORD *)((char *)a1 + Model[13]) = *(_OWORD *)((char *)a2 + Model[13]);
        *(_OWORD *)((char *)a1 + Model[14]) = *(_OWORD *)((char *)a2 + Model[14]);
        *(_OWORD *)((char *)a1 + Model[15]) = *(_OWORD *)((char *)a2 + Model[15]);
        uint64_t v191 = Model[16];
        uint64_t v39 = (char *)a1 + v191;
        uint64_t v40 = (char *)a2 + v191;
        uint64_t v192 = type metadata accessor for SnippetHeaderModel();
        uint64_t v193 = *(void *)(v192 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v40, 1, v192)) {
          goto LABEL_97;
        }
        goto LABEL_79;
      case 1u:
        uint64_t v9 = type metadata accessor for AppPunchout();
        uint64_t v10 = *(void *)(v9 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
        {
          uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v10 + 32))(a1, a2, v9);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
        }
        char v75 = (int *)type metadata accessor for BloodPressureQueryModel();
        uint64_t v76 = v75[5];
        uint64_t v77 = (char *)a1 + v76;
        uint64_t v78 = (char *)a2 + v76;
        *(void *)uint64_t v77 = *(void *)v78;
        v77[8] = v78[8];
        uint64_t v79 = v75[6];
        uint64_t v80 = (char *)a1 + v79;
        uint64_t v81 = (char *)a2 + v79;
        *(void *)uint64_t v80 = *(void *)v81;
        v80[8] = v81[8];
        uint64_t v82 = v75[7];
        uint64_t v83 = (char *)a1 + v82;
        uint64_t v84 = (char *)a2 + v82;
        v83[8] = v84[8];
        *(void *)uint64_t v83 = *(void *)v84;
        uint64_t v85 = v75[8];
        uint64_t v86 = (char *)a1 + v85;
        uint64_t v87 = (char *)a2 + v85;
        v86[8] = v87[8];
        *(void *)uint64_t v86 = *(void *)v87;
        uint64_t v88 = v75[9];
        uint64_t v89 = (char *)a1 + v88;
        char v90 = (char *)a2 + v88;
        v89[8] = v90[8];
        *(void *)uint64_t v89 = *(void *)v90;
        uint64_t v91 = v75[10];
        uint64_t v92 = (char *)a1 + v91;
        uint64_t v93 = (char *)a2 + v91;
        *(void *)uint64_t v92 = *(void *)v93;
        v92[8] = v93[8];
        *(_OWORD *)((char *)a1 + v75[11]) = *(_OWORD *)((char *)a2 + v75[11]);
        *(_OWORD *)((char *)a1 + v75[12]) = *(_OWORD *)((char *)a2 + v75[12]);
        *(_OWORD *)((char *)a1 + v75[13]) = *(_OWORD *)((char *)a2 + v75[13]);
        *(_OWORD *)((char *)a1 + v75[14]) = *(_OWORD *)((char *)a2 + v75[14]);
        *(_OWORD *)((char *)a1 + v75[15]) = *(_OWORD *)((char *)a2 + v75[15]);
        *(_OWORD *)((char *)a1 + v75[16]) = *(_OWORD *)((char *)a2 + v75[16]);
        *(_OWORD *)((char *)a1 + v75[17]) = *(_OWORD *)((char *)a2 + v75[17]);
        *(_OWORD *)((char *)a1 + v75[18]) = *(_OWORD *)((char *)a2 + v75[18]);
        *(_OWORD *)((char *)a1 + v75[19]) = *(_OWORD *)((char *)a2 + v75[19]);
        uint64_t v94 = v75[20];
        uint64_t v95 = (char *)a1 + v94;
        uint64_t v96 = (char *)a2 + v94;
        uint64_t v97 = type metadata accessor for URL();
        uint64_t v98 = *(void *)(v97 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
        {
          uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v95, v96, *(void *)(*(void *)(v99 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v95, v96, v97);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
        }
        *(_OWORD *)((char *)a1 + v75[21]) = *(_OWORD *)((char *)a2 + v75[21]);
        *(_OWORD *)((char *)a1 + v75[22]) = *(_OWORD *)((char *)a2 + v75[22]);
        uint64_t v194 = v75[23];
        uint64_t v39 = (char *)a1 + v194;
        uint64_t v40 = (char *)a2 + v194;
        uint64_t v41 = type metadata accessor for SnippetHeaderModel();
        uint64_t v42 = *(void *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
          goto LABEL_79;
        }
        goto LABEL_90;
      case 2u:
        uint64_t v12 = type metadata accessor for AppPunchout();
        uint64_t v13 = *(void *)(v12 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v13 + 32))(a1, a2, v12);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
        }
        uint64_t v100 = (int *)type metadata accessor for BloodPressureLogModel();
        *(_OWORD *)((char *)a1 + v100[5]) = *(_OWORD *)((char *)a2 + v100[5]);
        *(_OWORD *)((char *)a1 + v100[6]) = *(_OWORD *)((char *)a2 + v100[6]);
        *(_OWORD *)((char *)a1 + v100[7]) = *(_OWORD *)((char *)a2 + v100[7]);
        uint64_t v101 = v100[8];
        char v102 = (char *)a1 + v101;
        uint64_t v103 = (char *)a2 + v101;
        uint64_t v104 = type metadata accessor for SnippetHeaderModel();
        uint64_t v105 = *(void *)(v104 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
        {
          uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v102, v103, *(void *)(*(void *)(v106 - 8) + 64));
        }
        else
        {
          uint64_t v195 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v195 - 8) + 32))(v102, v103, v195);
          *(_OWORD *)&v102[*(int *)(v104 + 20)] = *(_OWORD *)&v103[*(int *)(v104 + 20)];
          *(_OWORD *)&v102[*(int *)(v104 + 24)] = *(_OWORD *)&v103[*(int *)(v104 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
        }
        *(_OWORD *)((char *)a1 + v100[9]) = *(_OWORD *)((char *)a2 + v100[9]);
        *(_OWORD *)((char *)a1 + v100[10]) = *(_OWORD *)((char *)a2 + v100[10]);
        goto LABEL_98;
      case 3u:
        uint64_t v15 = type metadata accessor for AppPunchout();
        uint64_t v16 = *(void *)(v15 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v16 + 32))(a1, a2, v15);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
        uint64_t v107 = (int *)type metadata accessor for CycleTrackingLogModel();
        *(_OWORD *)((char *)a1 + v107[5]) = *(_OWORD *)((char *)a2 + v107[5]);
        *(_OWORD *)((char *)a1 + v107[6]) = *(_OWORD *)((char *)a2 + v107[6]);
        *(_OWORD *)((char *)a1 + v107[7]) = *(_OWORD *)((char *)a2 + v107[7]);
        uint64_t v108 = v107[8];
        uint64_t v109 = (char *)a1 + v108;
        uint64_t v110 = (char *)a2 + v108;
        uint64_t v111 = type metadata accessor for SnippetHeaderModel();
        uint64_t v112 = *(void *)(v111 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
        {
          uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v109, v110, *(void *)(*(void *)(v113 - 8) + 64));
        }
        else
        {
          uint64_t v196 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v196 - 8) + 32))(v109, v110, v196);
          *(_OWORD *)&v109[*(int *)(v111 + 20)] = *(_OWORD *)&v110[*(int *)(v111 + 20)];
          *(_OWORD *)&v109[*(int *)(v111 + 24)] = *(_OWORD *)&v110[*(int *)(v111 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
        }
        uint64_t v197 = v107[9];
        uint64_t v198 = (char *)a1 + v197;
        uint64_t v199 = (char *)a2 + v197;
        uint64_t v200 = type metadata accessor for URL();
        uint64_t v201 = *(void *)(v200 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v201 + 48))(v199, 1, v200))
        {
          uint64_t v202 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v198, v199, *(void *)(*(void *)(v202 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v201 + 32))(v198, v199, v200);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v201 + 56))(v198, 0, 1, v200);
        }
        goto LABEL_98;
      case 4u:
        *a1 = *a2;
        uint64_t v18 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
        uint64_t v19 = (char *)a1 + v18;
        uint64_t v20 = (char *)a2 + v18;
        uint64_t v21 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
        goto LABEL_98;
      case 6u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
        uint64_t v22 = (int *)type metadata accessor for GenericMedCompletedLogModel();
        uint64_t v23 = v22[6];
        uint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for AppPunchout();
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
        *((unsigned char *)a1 + v22[7]) = *((unsigned char *)a2 + v22[7]);
        *(_OWORD *)((char *)a1 + v22[8]) = *(_OWORD *)((char *)a2 + v22[8]);
        *((unsigned char *)a1 + v22[9]) = *((unsigned char *)a2 + v22[9]);
        *(_OWORD *)((char *)a1 + v22[10]) = *(_OWORD *)((char *)a2 + v22[10]);
        *(_OWORD *)((char *)a1 + v22[11]) = *(_OWORD *)((char *)a2 + v22[11]);
        *(_OWORD *)((char *)a1 + v22[12]) = *(_OWORD *)((char *)a2 + v22[12]);
        *(_OWORD *)((char *)a1 + v22[13]) = *(_OWORD *)((char *)a2 + v22[13]);
        uint64_t v114 = v22[14];
        uint64_t v39 = (char *)a1 + v114;
        uint64_t v40 = (char *)a2 + v114;
        uint64_t v41 = type metadata accessor for SnippetHeaderModel();
        uint64_t v42 = *(void *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
          goto LABEL_79;
        }
        goto LABEL_90;
      case 7u:
        uint64_t v29 = type metadata accessor for SnippetHeaderModel();
        uint64_t v30 = *(void *)(v29 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(a2, 1, v29))
        {
          uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(a1, a2, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          uint64_t v115 = type metadata accessor for SpeakableString();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v115 - 8) + 32))(a1, a2, v115);
          *(_OWORD *)((char *)a1 + *(int *)(v29 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v29 + 20));
          *(_OWORD *)((char *)a1 + *(int *)(v29 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v29 + 24));
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v30 + 56))(a1, 0, 1, v29);
        }
        uint64_t v116 = (int *)type metadata accessor for HealthDataLogModel();
        *(void *)((char *)a1 + v116[5]) = *(void *)((char *)a2 + v116[5]);
        *(_OWORD *)((char *)a1 + v116[6]) = *(_OWORD *)((char *)a2 + v116[6]);
        *(_OWORD *)((char *)a1 + v116[7]) = *(_OWORD *)((char *)a2 + v116[7]);
        *(_OWORD *)((char *)a1 + v116[8]) = *(_OWORD *)((char *)a2 + v116[8]);
        *(_OWORD *)((char *)a1 + v116[9]) = *(_OWORD *)((char *)a2 + v116[9]);
        uint64_t v117 = v116[10];
        uint64_t v118 = (char *)a1 + v117;
        uint64_t v119 = (char *)a2 + v117;
        uint64_t v120 = type metadata accessor for AppPunchout();
        uint64_t v121 = *(void *)(v120 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
        {
          uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(v118, v119, *(void *)(*(void *)(v122 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v118, v119, v120);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
        }
        *(_OWORD *)((char *)a1 + v116[11]) = *(_OWORD *)((char *)a2 + v116[11]);
        goto LABEL_98;
      case 8u:
        uint64_t v32 = type metadata accessor for AppPunchout();
        uint64_t v33 = *(void *)(v32 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48))(a2, 1, v32))
        {
          uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v33 + 32))(a1, a2, v32);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v33 + 56))(a1, 0, 1, v32);
        }
        uint64_t v123 = (int *)type metadata accessor for GenericQueryModel();
        uint64_t v124 = v123[5];
        uint64_t v125 = (char *)a1 + v124;
        uint64_t v126 = (char *)a2 + v124;
        *(void *)uint64_t v125 = *(void *)v126;
        v125[8] = v126[8];
        uint64_t v127 = v123[6];
        uint64_t v128 = (char *)a1 + v127;
        uint64_t v129 = (char *)a2 + v127;
        *(void *)uint64_t v128 = *(void *)v129;
        v128[8] = v129[8];
        uint64_t v130 = v123[7];
        uint64_t v131 = (char *)a1 + v130;
        uint64_t v132 = (char *)a2 + v130;
        v131[8] = v132[8];
        *(void *)uint64_t v131 = *(void *)v132;
        uint64_t v133 = v123[8];
        long long v134 = (char *)a1 + v133;
        uint64_t v135 = (char *)a2 + v133;
        v134[8] = v135[8];
        *(void *)long long v134 = *(void *)v135;
        uint64_t v136 = v123[9];
        long long v137 = (char *)a1 + v136;
        uint64_t v138 = (char *)a2 + v136;
        v137[8] = v138[8];
        *(void *)long long v137 = *(void *)v138;
        uint64_t v139 = v123[10];
        uint64_t v140 = (char *)a1 + v139;
        uint64_t v141 = (char *)a2 + v139;
        uint64_t v72 = type metadata accessor for SpeakableString();
        uint64_t v73 = *(void *)(v72 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v141, 1, v72))
        {
          uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v140, v141, *(void *)(*(void *)(v142 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v140, v141, v72);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v140, 0, 1, v72);
        }
        *(_OWORD *)((char *)a1 + v123[11]) = *(_OWORD *)((char *)a2 + v123[11]);
        *(_OWORD *)((char *)a1 + v123[12]) = *(_OWORD *)((char *)a2 + v123[12]);
        *(_OWORD *)((char *)a1 + v123[13]) = *(_OWORD *)((char *)a2 + v123[13]);
        *(_OWORD *)((char *)a1 + v123[14]) = *(_OWORD *)((char *)a2 + v123[14]);
        *(_OWORD *)((char *)a1 + v123[15]) = *(_OWORD *)((char *)a2 + v123[15]);
        *(_OWORD *)((char *)a1 + v123[16]) = *(_OWORD *)((char *)a2 + v123[16]);
        *(_OWORD *)((char *)a1 + v123[17]) = *(_OWORD *)((char *)a2 + v123[17]);
        uint64_t v203 = v123[18];
        uint64_t v39 = (char *)a1 + v203;
        uint64_t v40 = (char *)a2 + v203;
        uint64_t v192 = type metadata accessor for SnippetHeaderModel();
        uint64_t v193 = *(void *)(v192 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v40, 1, v192)) {
          goto LABEL_79;
        }
        goto LABEL_97;
      case 9u:
        uint64_t v35 = type metadata accessor for AppPunchout();
        uint64_t v36 = *(void *)(v35 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(a2, 1, v35))
        {
          uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v36 + 32))(a1, a2, v35);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v36 + 56))(a1, 0, 1, v35);
        }
        uint64_t v143 = (int *)type metadata accessor for HeightQueryModel();
        uint64_t v144 = v143[5];
        uint64_t v145 = (char *)a1 + v144;
        uint64_t v146 = (char *)a2 + v144;
        *(void *)uint64_t v145 = *(void *)v146;
        v145[8] = v146[8];
        uint64_t v147 = v143[6];
        uint64_t v148 = (char *)a1 + v147;
        uint64_t v149 = (char *)a2 + v147;
        *(void *)uint64_t v148 = *(void *)v149;
        v148[8] = v149[8];
        uint64_t v150 = v143[7];
        uint64_t v151 = (char *)a1 + v150;
        uint64_t v152 = (char *)a2 + v150;
        v151[8] = v152[8];
        *(void *)uint64_t v151 = *(void *)v152;
        uint64_t v153 = v143[8];
        uint64_t v154 = (char *)a1 + v153;
        uint64_t v155 = (char *)a2 + v153;
        uint64_t v156 = type metadata accessor for SpeakableString();
        uint64_t v157 = *(void *)(v156 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v157 + 48))(v155, 1, v156))
        {
          uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v154, v155, *(void *)(*(void *)(v158 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v154, v155, v156);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v157 + 56))(v154, 0, 1, v156);
        }
        *((unsigned char *)a1 + v143[9]) = *((unsigned char *)a2 + v143[9]);
        uint64_t v205 = v143[10];
        uint64_t v206 = (char *)a1 + v205;
        uint64_t v207 = (char *)a2 + v205;
        uint64_t v208 = type metadata accessor for SnippetHeaderModel();
        uint64_t v209 = *(void *)(v208 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v207, 1, v208))
        {
          uint64_t v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v206, v207, *(void *)(*(void *)(v210 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v206, v207, v156);
          *(_OWORD *)&v206[*(int *)(v208 + 20)] = *(_OWORD *)&v207[*(int *)(v208 + 20)];
          *(_OWORD *)&v206[*(int *)(v208 + 24)] = *(_OWORD *)&v207[*(int *)(v208 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v209 + 56))(v206, 0, 1, v208);
        }
        *(_OWORD *)((char *)a1 + v143[11]) = *(_OWORD *)((char *)a2 + v143[11]);
        *(_OWORD *)((char *)a1 + v143[12]) = *(_OWORD *)((char *)a2 + v143[12]);
        *(_OWORD *)((char *)a1 + v143[13]) = *(_OWORD *)((char *)a2 + v143[13]);
        goto LABEL_98;
      case 0xBu:
        *a1 = *a2;
        *((void *)a1 + 2) = *((void *)a2 + 2);
        *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
        uint64_t v38 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
        uint64_t v39 = (char *)a1 + v38;
        uint64_t v40 = (char *)a2 + v38;
        uint64_t v41 = type metadata accessor for SnippetHeaderModel();
        uint64_t v42 = *(void *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
          goto LABEL_79;
        }
        goto LABEL_90;
      case 0xCu:
        uint64_t v43 = type metadata accessor for AppPunchout();
        uint64_t v44 = *(void *)(v43 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v44 + 48))(a2, 1, v43))
        {
          uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v44 + 32))(a1, a2, v43);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v44 + 56))(a1, 0, 1, v43);
        }
        uint64_t v159 = (int *)type metadata accessor for SleepQueryModel();
        uint64_t v160 = v159[5];
        uint64_t v161 = (char *)a1 + v160;
        uint64_t v162 = (char *)a2 + v160;
        uint64_t v163 = type metadata accessor for SnippetHeaderModel();
        uint64_t v164 = *(void *)(v163 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
        {
          uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v161, v162, *(void *)(*(void *)(v165 - 8) + 64));
        }
        else
        {
          uint64_t v211 = type metadata accessor for SpeakableString();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v211 - 8) + 32))(v161, v162, v211);
          *(_OWORD *)&v161[*(int *)(v163 + 20)] = *(_OWORD *)&v162[*(int *)(v163 + 20)];
          *(_OWORD *)&v161[*(int *)(v163 + 24)] = *(_OWORD *)&v162[*(int *)(v163 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
        }
        *(_OWORD *)((char *)a1 + v159[6]) = *(_OWORD *)((char *)a2 + v159[6]);
        *(_OWORD *)((char *)a1 + v159[7]) = *(_OWORD *)((char *)a2 + v159[7]);
        *(_OWORD *)((char *)a1 + v159[8]) = *(_OWORD *)((char *)a2 + v159[8]);
        *(_OWORD *)((char *)a1 + v159[9]) = *(_OWORD *)((char *)a2 + v159[9]);
        *(_OWORD *)((char *)a1 + v159[10]) = *(_OWORD *)((char *)a2 + v159[10]);
        *(void *)((char *)a1 + v159[11]) = *(void *)((char *)a2 + v159[11]);
        *(void *)((char *)a1 + v159[12]) = *(void *)((char *)a2 + v159[12]);
        *(void *)((char *)a1 + v159[13]) = *(void *)((char *)a2 + v159[13]);
        *(void *)((char *)a1 + v159[14]) = *(void *)((char *)a2 + v159[14]);
        *(_OWORD *)((char *)a1 + v159[15]) = *(_OWORD *)((char *)a2 + v159[15]);
        *(_OWORD *)((char *)a1 + v159[16]) = *(_OWORD *)((char *)a2 + v159[16]);
        *(_OWORD *)((char *)a1 + v159[17]) = *(_OWORD *)((char *)a2 + v159[17]);
        goto LABEL_98;
      case 0xDu:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
        *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        uint64_t v46 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
        uint64_t v47 = v46[8];
        uint64_t v48 = (char *)a1 + v47;
        uint64_t v49 = (char *)a2 + v47;
        uint64_t v50 = type metadata accessor for AppPunchout();
        uint64_t v51 = *(void *)(v50 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
        {
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v49, v50);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
        }
        uint64_t v166 = v46[9];
        uint64_t v167 = (char *)a1 + v166;
        uint64_t v168 = (char *)a2 + v166;
        *(void *)uint64_t v167 = *(void *)v168;
        v167[8] = v168[8];
        *(_OWORD *)((char *)a1 + v46[10]) = *(_OWORD *)((char *)a2 + v46[10]);
        *(_OWORD *)((char *)a1 + v46[11]) = *(_OWORD *)((char *)a2 + v46[11]);
        *(_OWORD *)((char *)a1 + v46[12]) = *(_OWORD *)((char *)a2 + v46[12]);
        *(_OWORD *)((char *)a1 + v46[13]) = *(_OWORD *)((char *)a2 + v46[13]);
        *((unsigned char *)a1 + v46[14]) = *((unsigned char *)a2 + v46[14]);
        *((unsigned char *)a1 + v46[15]) = *((unsigned char *)a2 + v46[15]);
        *(_OWORD *)((char *)a1 + v46[16]) = *(_OWORD *)((char *)a2 + v46[16]);
        *(_OWORD *)((char *)a1 + v46[17]) = *(_OWORD *)((char *)a2 + v46[17]);
        *(_OWORD *)((char *)a1 + v46[18]) = *(_OWORD *)((char *)a2 + v46[18]);
        uint64_t v169 = v46[19];
        uint64_t v39 = (char *)a1 + v169;
        uint64_t v40 = (char *)a2 + v169;
        uint64_t v41 = type metadata accessor for SnippetHeaderModel();
        uint64_t v42 = *(void *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
          goto LABEL_79;
        }
LABEL_90:
        uint64_t v216 = type metadata accessor for SpeakableString();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v216 - 8) + 32))(v39, v40, v216);
        *(_OWORD *)&v39[*(int *)(v41 + 20)] = *(_OWORD *)&v40[*(int *)(v41 + 20)];
        *(_OWORD *)&v39[*(int *)(v41 + 24)] = *(_OWORD *)&v40[*(int *)(v41 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
        goto LABEL_98;
      case 0xEu:
        uint64_t v53 = type metadata accessor for AppPunchout();
        uint64_t v54 = *(void *)(v53 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v54 + 48))(a2, 1, v53))
        {
          uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
          memcpy(a1, a2, *(void *)(*(void *)(v55 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v54 + 32))(a1, a2, v53);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v54 + 56))(a1, 0, 1, v53);
        }
        uint64_t v170 = (int *)type metadata accessor for TemperatureQueryModel();
        uint64_t v171 = v170[5];
        uint64_t v172 = (char *)a1 + v171;
        uint64_t v173 = (char *)a2 + v171;
        *(void *)uint64_t v172 = *(void *)v173;
        v172[8] = v173[8];
        uint64_t v174 = v170[6];
        uint64_t v175 = (char *)a1 + v174;
        uint64_t v176 = (char *)a2 + v174;
        *(void *)uint64_t v175 = *(void *)v176;
        v175[8] = v176[8];
        uint64_t v177 = v170[7];
        uint64_t v178 = (char *)a1 + v177;
        uint64_t v179 = (char *)a2 + v177;
        v178[8] = v179[8];
        *(void *)uint64_t v178 = *(void *)v179;
        uint64_t v180 = v170[8];
        uint64_t v181 = (char *)a1 + v180;
        uint64_t v182 = (char *)a2 + v180;
        v181[8] = v182[8];
        *(void *)uint64_t v181 = *(void *)v182;
        uint64_t v183 = v170[9];
        uint64_t v184 = (char *)a1 + v183;
        uint64_t v185 = (char *)a2 + v183;
        v184[8] = v185[8];
        *(void *)uint64_t v184 = *(void *)v185;
        uint64_t v186 = v170[10];
        uint64_t v187 = (char *)a1 + v186;
        uint64_t v188 = (char *)a2 + v186;
        uint64_t v72 = type metadata accessor for SpeakableString();
        uint64_t v73 = *(void *)(v72 - 8);
        uint64_t v189 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
        if (v189(v188, 1, v72))
        {
          uint64_t v190 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v187, v188, *(void *)(*(void *)(v190 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v187, v188, v72);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v187, 0, 1, v72);
        }
        *(_OWORD *)((char *)a1 + v170[11]) = *(_OWORD *)((char *)a2 + v170[11]);
        *(_OWORD *)((char *)a1 + v170[12]) = *(_OWORD *)((char *)a2 + v170[12]);
        *(_OWORD *)((char *)a1 + v170[13]) = *(_OWORD *)((char *)a2 + v170[13]);
        *(_OWORD *)((char *)a1 + v170[14]) = *(_OWORD *)((char *)a2 + v170[14]);
        *(_OWORD *)((char *)a1 + v170[15]) = *(_OWORD *)((char *)a2 + v170[15]);
        uint64_t v212 = v170[16];
        uint64_t v213 = (char *)a1 + v212;
        uint64_t v214 = (char *)a2 + v212;
        if (v189((char *)a2 + v212, 1, v72))
        {
          uint64_t v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
          memcpy(v213, v214, *(void *)(*(void *)(v215 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v213, v214, v72);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v213, 0, 1, v72);
        }
        *(_OWORD *)((char *)a1 + v170[17]) = *(_OWORD *)((char *)a2 + v170[17]);
        uint64_t v217 = v170[18];
        uint64_t v39 = (char *)a1 + v217;
        uint64_t v40 = (char *)a2 + v217;
        uint64_t v192 = type metadata accessor for SnippetHeaderModel();
        uint64_t v193 = *(void *)(v192 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v40, 1, v192))
        {
LABEL_79:
          uint64_t v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
          memcpy(v39, v40, *(void *)(*(void *)(v204 - 8) + 64));
        }
        else
        {
LABEL_97:
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v39, v40, v72);
          *(_OWORD *)&v39[*(int *)(v192 + 20)] = *(_OWORD *)&v40[*(int *)(v192 + 20)];
          *(_OWORD *)&v39[*(int *)(v192 + 24)] = *(_OWORD *)&v40[*(int *)(v192 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v193 + 56))(v39, 0, 1, v192);
        }
LABEL_98:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for WellnessSnippets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for WellnessSnippets(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for WellnessSnippets()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for WellnessSnippets()
{
  uint64_t result = type metadata accessor for OxygenSaturationQueryModel();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for BloodPressureQueryModel();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for BloodPressureLogModel();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for CycleTrackingLogModel();
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for GenericButtonModel();
          if (v5 <= 0x3F)
          {
            uint64_t result = type metadata accessor for GenericMedCompletedLogModel();
            if (v6 <= 0x3F)
            {
              uint64_t result = type metadata accessor for HealthDataLogModel();
              if (v7 <= 0x3F)
              {
                uint64_t result = type metadata accessor for GenericQueryModel();
                if (v8 <= 0x3F)
                {
                  uint64_t result = type metadata accessor for HeightQueryModel();
                  if (v9 <= 0x3F)
                  {
                    uint64_t result = type metadata accessor for SingleActivitySummaryModel();
                    if (v10 <= 0x3F)
                    {
                      uint64_t result = type metadata accessor for SleepQueryModel();
                      if (v11 <= 0x3F)
                      {
                        uint64_t result = type metadata accessor for SpecificMedCompletedLogModel();
                        if (v12 <= 0x3F)
                        {
                          uint64_t result = type metadata accessor for TemperatureQueryModel();
                          if (v13 <= 0x3F)
                          {
                            swift_initEnumMetadataMultiPayload();
                            return 0;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WellnessSnippets.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for WellnessSnippets.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *uint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2617FE358);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for WellnessSnippets.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for WellnessSnippets.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void *type metadata accessor for WellnessSnippets.CodingKeys()
{
  return &unk_270D85FF0;
}

uint64_t getEnumTag for WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  return 0;
}

void *type metadata accessor for WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  return &unk_270D86080;
}

void *type metadata accessor for WellnessSnippets.BloodPressureDataQueryCodingKeys()
{
  return &unk_270D86110;
}

void *type metadata accessor for WellnessSnippets.BloodPressureDataLogCodingKeys()
{
  return &unk_270D861A0;
}

void *type metadata accessor for WellnessSnippets.CycleTrackingDataLogCodingKeys()
{
  return &unk_270D86230;
}

void *type metadata accessor for WellnessSnippets.GenericButtonCodingKeys()
{
  return &unk_270D862C0;
}

void *type metadata accessor for WellnessSnippets.GenericBinaryButtonCodingKeys()
{
  return &unk_270D86350;
}

void *type metadata accessor for WellnessSnippets.GenericMedCompletedLogCodingKeys()
{
  return &unk_270D863E0;
}

void *type metadata accessor for WellnessSnippets.GenericDataTypeLogCodingKeys()
{
  return &unk_270D86470;
}

void *type metadata accessor for WellnessSnippets.GenericDataQueryCodingKeys()
{
  return &unk_270D86500;
}

void *type metadata accessor for WellnessSnippets.HeightDataQueryCodingKeys()
{
  return &unk_270D86590;
}

void *type metadata accessor for WellnessSnippets.PhoneRingsCodingKeys()
{
  return &unk_270D86620;
}

void *type metadata accessor for WellnessSnippets.SingleActivitySummaryQueryCodingKeys()
{
  return &unk_270D866B0;
}

void *type metadata accessor for WellnessSnippets.SleepQueryCodingKeys()
{
  return &unk_270D86740;
}

void *type metadata accessor for WellnessSnippets.SpecificMedCompletedLogCodingKeys()
{
  return &unk_270D867D0;
}

void *type metadata accessor for WellnessSnippets.TemperatureDataQueryCodingKeys()
{
  return &unk_270D86860;
}

uint64_t getEnumTagSinglePayload for WellnessSnippets.BloodOxygenDataQueryCodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for WellnessSnippets.BloodOxygenDataQueryCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2617FE590);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for WellnessSnippets.WatchRingsCodingKeys()
{
  return &unk_270D868F0;
}

uint64_t specialized WellnessSnippets.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x80000002618836A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000002618836C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002618836E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000261883700 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x42636972656E6567 && a2 == 0xED00006E6F747475 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000261883720 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000261883740 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883760 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000261883780 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6144746867696568 && a2 == 0xEF79726575516174 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6E6952656E6F6870 && a2 == 0xEA00000000007367 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000002618837A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6575517065656C73 && a2 == 0xEA00000000007972 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002618837C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002618837E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x6E69526863746177 && a2 == 0xEA00000000007367)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 15;
    }
    else {
      return 16;
    }
  }
}

uint64_t SleepQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t SleepQueryModel.appPunchout.setter(uint64_t a1)
{
  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*SleepQueryModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for SleepQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 20), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t type metadata accessor for SleepQueryModel()
{
  uint64_t result = type metadata singleton initialization cache for SleepQueryModel;
  if (!type metadata singleton initialization cache for SleepQueryModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SleepQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for SleepQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 20), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t outlined assign with take of AppPunchout?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t (*SleepQueryModel.snippetHeaderModel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.dateLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.dateLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.sleepTypeLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.sleepTypeLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.sleepTypeLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.dataLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.dataLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.dataLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.avgTimeAsleepLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.avgTimeAsleepLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeAsleepLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.avgTimeInBedLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.avgTimeInBedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 40));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeInBedLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.avgTimeAsleep.getter()
{
  type metadata accessor for SleepQueryModel();

  return swift_retain();
}

uint64_t SleepQueryModel.avgTimeAsleep.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for SleepQueryModel() + 44);
  uint64_t result = swift_release();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeAsleep.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.avgTimeInBed.getter()
{
  type metadata accessor for SleepQueryModel();

  return swift_retain();
}

uint64_t SleepQueryModel.avgTimeInBed.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for SleepQueryModel() + 48);
  uint64_t result = swift_release();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeInBed.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.totalTimeAsleep.getter()
{
  type metadata accessor for SleepQueryModel();

  return swift_retain();
}

uint64_t SleepQueryModel.totalTimeAsleep.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for SleepQueryModel() + 52);
  uint64_t result = swift_release();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*SleepQueryModel.totalTimeAsleep.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.totalTimeInBed.getter()
{
  type metadata accessor for SleepQueryModel();

  return swift_retain();
}

uint64_t SleepQueryModel.totalTimeInBed.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for SleepQueryModel() + 56);
  uint64_t result = swift_release();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*SleepQueryModel.totalTimeInBed.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.sleepDuration.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.sleepDuration.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 60));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.sleepDuration.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.avgTimeAsleepData.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.avgTimeAsleepData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 64));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeAsleepData.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.avgTimeInBedData.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SleepQueryModel() + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepQueryModel.avgTimeInBedData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SleepQueryModel() + 68));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeInBedData.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SleepQueryModel.init(snippetHeaderModel:dateLabel:sleepTypeLabel:dataLabel:avgTimeAsleepLabel:avgTimeInBedLabel:avgTimeAsleep:avgTimeInBed:totalTimeAsleep:totalTimeInBed:url:sleepDuration:avgTimeAsleepData:avgTimeInBedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v56 = a4;
  uint64_t v57 = a5;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t v65 = a14;
  uint64_t v66 = a15;
  uint64_t v63 = a8;
  uint64_t v64 = a13;
  uint64_t v61 = a7;
  uint64_t v62 = a12;
  uint64_t v59 = a6;
  uint64_t v60 = a11;
  uint64_t v58 = a10;
  uint64_t v67 = a16;
  uint64_t v52 = a17;
  uint64_t v53 = a1;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = type metadata accessor for AppPunchout();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
  uint64_t v48 = v22 + 56;
  v47(a9, 1, 1, v21);
  uint64_t Model = (int *)type metadata accessor for SleepQueryModel();
  uint64_t v46 = a9 + Model[5];
  uint64_t v24 = v46;
  uint64_t v25 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  uint64_t v26 = (void *)(a9 + Model[6]);
  void *v26 = 0;
  v26[1] = 0;
  uint64_t v27 = (void *)(a9 + Model[7]);
  void *v27 = 0;
  v27[1] = 0;
  uint64_t v28 = (void *)(a9 + Model[8]);
  void *v28 = 0;
  v28[1] = 0;
  uint64_t v29 = (void *)(a9 + Model[9]);
  void *v29 = 0;
  v29[1] = 0;
  uint64_t v30 = (void *)(a9 + Model[10]);
  void *v30 = 0;
  v30[1] = 0;
  uint64_t v31 = Model[11];
  *(void *)(a9 + v31) = 0;
  uint64_t v49 = Model[12];
  *(void *)(a9 + v49) = 0;
  uint64_t v50 = Model[13];
  *(void *)(a9 + v50) = 0;
  uint64_t v51 = Model[14];
  *(void *)(a9 + v51) = 0;
  uint64_t v32 = (void *)(a9 + Model[15]);
  void *v32 = 0;
  v32[1] = 0;
  uint64_t v33 = (void *)(a9 + Model[16]);
  void *v33 = 0;
  v33[1] = 0;
  uint64_t v34 = (void *)(a9 + Model[17]);
  *uint64_t v34 = 0;
  v34[1] = 0;
  uint64_t v35 = v52;
  SleepQueryModel.createAppPunchout(url:)(v52);
  outlined destroy of Font.Design?(v35, &demangling cache variable for type metadata for URL?);
  v47((uint64_t)v20, 0, 1, v21);
  outlined assign with take of AppPunchout?((uint64_t)v20, a9, &demangling cache variable for type metadata for AppPunchout?);
  outlined assign with take of AppPunchout?(v53, v46, &demangling cache variable for type metadata for SnippetHeaderModel?);
  swift_bridgeObjectRelease();
  uint64_t v36 = v55;
  void *v26 = v54;
  v26[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v37 = v57;
  void *v27 = v56;
  v27[1] = v37;
  swift_bridgeObjectRelease();
  uint64_t v38 = v61;
  void *v28 = v59;
  v28[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v39 = v58;
  void *v29 = v63;
  v29[1] = v39;
  swift_bridgeObjectRelease();
  uint64_t v40 = v62;
  void *v30 = v60;
  v30[1] = v40;
  swift_release();
  *(void *)(a9 + v31) = v64;
  uint64_t v41 = v49;
  swift_release();
  *(void *)(a9 + v41) = v65;
  uint64_t v42 = v50;
  swift_release();
  *(void *)(a9 + v42) = v66;
  uint64_t v43 = v51;
  uint64_t result = swift_release();
  *(void *)(a9 + v43) = v67;
  return result;
}

uint64_t SleepQueryModel.createAppPunchout(url:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  unsigned int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL.absoluteString.getter();
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

Swift::String_optional __swiftcall SleepQueryModel.fetchSleepDuration()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v43 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v42 - v6;
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v42 - v9;
  MEMORY[0x270FA5388](v8);
  unint64_t v12 = (char *)&v42 - v11;
  uint64_t v13 = type metadata accessor for SpeakableString();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v42 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v42 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v42 - v24;
  uint64_t Model = (int *)type metadata accessor for SleepQueryModel();
  if (*(void *)(v1 + Model[11]))
  {
    swift_retain();
    dispatch thunk of DialogDuration.hoursMinutesAbbreviated.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1) {
      goto LABEL_14;
    }
    uint64_t v30 = v13;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v25, v12, v13);
    uint64_t v31 = SpeakableString.print.getter();
    uint64_t v33 = v32;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v25, v30);
    swift_release();
  }
  else
  {
    uint64_t v27 = v7;
    uint64_t v28 = v43;
    if (!*(void *)(v1 + Model[12]))
    {
      if (*(void *)(v1 + Model[13]))
      {
        swift_retain();
        unint64_t v12 = v27;
        dispatch thunk of DialogDuration.hoursMinutesAbbreviated.getter();
        uint64_t v34 = v13;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v27, 1, v13) == 1)
        {
LABEL_14:
          outlined destroy of Font.Design?((uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
          goto LABEL_15;
        }
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v20, v27, v13);
        uint64_t v31 = SpeakableString.print.getter();
        uint64_t v33 = v35;
        (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v34);
      }
      else
      {
        if (!*(void *)(v1 + Model[14]))
        {
LABEL_16:
          uint64_t v31 = 0;
          uint64_t v33 = 0;
          goto LABEL_17;
        }
        swift_retain();
        unint64_t v12 = v28;
        dispatch thunk of DialogDuration.hoursMinutesAbbreviated.getter();
        uint64_t v37 = v13;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v28, 1, v13) == 1) {
          goto LABEL_14;
        }
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v28, v13);
        uint64_t v31 = SpeakableString.print.getter();
        uint64_t v33 = v40;
        (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v37);
      }
      swift_release();
      goto LABEL_17;
    }
    swift_retain();
    dispatch thunk of DialogDuration.hoursMinutesAbbreviated.getter();
    uint64_t v29 = v13;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13) == 1)
    {
      outlined destroy of Font.Design?((uint64_t)v10, &demangling cache variable for type metadata for SpeakableString?);
LABEL_15:
      swift_release();
      goto LABEL_16;
    }
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v23, v10, v13);
    uint64_t v31 = SpeakableString.print.getter();
    uint64_t v33 = v36;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v23, v29);
    swift_release();
  }
LABEL_17:
  uint64_t v38 = v31;
  uint64_t v39 = v33;
  result.value._object = v39;
  result.value._uint64_t countAndFlagsBits = v38;
  return result;
}

uint64_t SleepQueryModel.getAbbrHoursMinDialogDuration(duration:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for SpeakableString();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of DialogDuration.hoursMinutesAbbreviated.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v2, &demangling cache variable for type metadata for SpeakableString?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    uint64_t v7 = SpeakableString.print.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v7;
}

uint64_t SleepQueryModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x68636E7550707061;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000012;
      break;
    case 2:
      unsigned int v3 = 1702125924;
      goto LABEL_6;
    case 3:
      uint64_t result = 0x7079547065656C73;
      break;
    case 4:
      unsigned int v3 = 1635017060;
LABEL_6:
      uint64_t result = v3 | 0x6562614C00000000;
      break;
    case 5:
      uint64_t result = 0xD000000000000012;
      break;
    case 6:
    case 12:
      uint64_t result = 0xD000000000000011;
      break;
    case 7:
      uint64_t result = 0x41656D6954677661;
      break;
    case 8:
      uint64_t result = 0x49656D6954677661;
      break;
    case 9:
    case 10:
      uint64_t result = 0x6D69546C61746F74;
      break;
    case 11:
      uint64_t result = 0x7275447065656C73;
      break;
    case 13:
      uint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SleepQueryModel.CodingKeys()
{
  return SleepQueryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SleepQueryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SleepQueryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SleepQueryModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 14;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SleepQueryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SleepQueryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepQueryModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SleepQueryModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for AppPunchout();
  lazy protocol witness table accessor for type AppPunchout and conformance AppPunchout(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t Model = (int *)type metadata accessor for SleepQueryModel();
    LOBYTE(v13) = 1;
    type metadata accessor for SnippetHeaderModel();
    lazy protocol witness table accessor for type AppPunchout and conformance AppPunchout(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + Model[11]);
    char v12 = 7;
    type metadata accessor for DialogDuration();
    lazy protocol witness table accessor for type AppPunchout and conformance AppPunchout(&lazy protocol witness table cache variable for type DialogDuration and conformance DialogDuration, MEMORY[0x263F6D018]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + Model[12]);
    char v12 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + Model[13]);
    char v12 = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + Model[14]);
    char v12 = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys);
  }
  return result;
}

uint64_t SleepQueryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v85 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v95 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v96 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SleepQueryModel.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v97 = v7;
  uint64_t v98 = v8;
  MEMORY[0x270FA5388](v7);
  char v102 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Model = type metadata accessor for SleepQueryModel();
  uint64_t v11 = (int *)(Model - 8);
  MEMORY[0x270FA5388](Model);
  uint64_t v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AppPunchout();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v94 = v14;
  v15(v13, 1, 1);
  uint64_t v16 = (uint64_t)&v13[v11[7]];
  uint64_t v17 = type metadata accessor for SnippetHeaderModel();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v92 = v16;
  uint64_t v93 = v17;
  v18(v16, 1, 1);
  uint64_t v19 = &v13[v11[8]];
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  uint64_t v91 = v19;
  uint64_t v20 = &v13[v11[9]];
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0;
  char v90 = v20;
  uint64_t v21 = &v13[v11[10]];
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0;
  uint64_t v22 = &v13[v11[11]];
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  uint64_t v23 = &v13[v11[12]];
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  uint64_t v89 = v11[13];
  *(void *)&v13[v89] = 0;
  uint64_t v88 = v11[14];
  *(void *)&v13[v88] = 0;
  uint64_t v87 = v11[15];
  *(void *)&v13[v87] = 0;
  uint64_t v86 = v11[16];
  *(void *)&v13[v86] = 0;
  uint64_t v24 = &v13[v11[17]];
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  uint64_t v25 = (uint64_t *)&v13[v11[18]];
  uint64_t *v25 = 0;
  v25[1] = 0;
  uint64_t v26 = v11[19];
  uint64_t v101 = v13;
  uint64_t v27 = &v13[v26];
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = 0;
  uint64_t v28 = a1[3];
  uint64_t v99 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v28);
  lazy protocol witness table accessor for type SleepQueryModel.CodingKeys and conformance SleepQueryModel.CodingKeys();
  uint64_t v29 = v100;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v29)
  {
    uint64_t v33 = (uint64_t)v101;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v99);
    uint64_t v80 = v33;
  }
  else
  {
    uint64_t v100 = v21;
    uint64_t v30 = (uint64_t)v95;
    uint64_t v83 = v23;
    uint64_t v84 = v22;
    uint64_t v82 = v24;
    uint64_t v81 = v27;
    uint64_t v31 = v98;
    LOBYTE(v104) = 0;
    lazy protocol witness table accessor for type AppPunchout and conformance AppPunchout(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    uint64_t v32 = v96;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v35 = (uint64_t)v32;
    uint64_t v36 = (uint64_t)v101;
    outlined assign with take of AppPunchout?(v35, (uint64_t)v101, &demangling cache variable for type metadata for AppPunchout?);
    LOBYTE(v104) = 1;
    lazy protocol witness table accessor for type AppPunchout and conformance AppPunchout(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v30, v92, &demangling cache variable for type metadata for SnippetHeaderModel?);
    LOBYTE(v104) = 2;
    uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v39 = v38;
    uint64_t v40 = (uint64_t *)v91;
    swift_bridgeObjectRelease();
    *uint64_t v40 = v37;
    v40[1] = v39;
    LOBYTE(v104) = 3;
    uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v43 = v42;
    uint64_t v44 = (uint64_t *)v90;
    swift_bridgeObjectRelease();
    *uint64_t v44 = v41;
    v44[1] = v43;
    LOBYTE(v104) = 4;
    uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v47 = v46;
    uint64_t v48 = (uint64_t *)v100;
    swift_bridgeObjectRelease();
    *uint64_t v48 = v45;
    v48[1] = v47;
    LOBYTE(v104) = 5;
    uint64_t v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v50 = (uint64_t *)v84;
    uint64_t v52 = v51;
    swift_bridgeObjectRelease();
    uint64_t *v50 = v49;
    v50[1] = v52;
    LOBYTE(v104) = 6;
    uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v55 = v54;
    uint64_t v56 = (uint64_t *)v83;
    swift_bridgeObjectRelease();
    *uint64_t v56 = v53;
    v56[1] = v55;
    type metadata accessor for DialogDuration();
    char v103 = 7;
    uint64_t v57 = lazy protocol witness table accessor for type AppPunchout and conformance AppPunchout(&lazy protocol witness table cache variable for type DialogDuration and conformance DialogDuration, MEMORY[0x263F6D018]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v58 = v104;
    uint64_t v100 = (char *)v57;
    uint64_t v59 = v89;
    swift_release();
    *(void *)(v36 + v59) = v58;
    char v103 = 8;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v60 = v104;
    uint64_t v61 = v88;
    swift_release();
    *(void *)(v36 + v61) = v60;
    char v103 = 9;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v62 = v104;
    uint64_t v63 = (uint64_t)v101;
    uint64_t v64 = v87;
    swift_release();
    *(void *)(v63 + v64) = v62;
    char v103 = 10;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v65 = v104;
    uint64_t v66 = (uint64_t)v101;
    uint64_t v67 = v86;
    swift_release();
    *(void *)(v66 + v67) = v65;
    LOBYTE(v104) = 11;
    uint64_t v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v70 = v69;
    char v71 = (uint64_t *)v82;
    swift_bridgeObjectRelease();
    *char v71 = v68;
    v71[1] = v70;
    LOBYTE(v104) = 12;
    uint64_t v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v74 = v73;
    swift_bridgeObjectRelease();
    uint64_t *v25 = v72;
    v25[1] = v74;
    LOBYTE(v104) = 13;
    uint64_t v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v77 = v76;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v102, v97);
    uint64_t v78 = (uint64_t *)v81;
    swift_bridgeObjectRelease();
    *uint64_t v78 = v75;
    v78[1] = v77;
    uint64_t v79 = (uint64_t)v101;
    outlined init with copy of SleepQueryModel((uint64_t)v101, v85);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v99);
    uint64_t v80 = v79;
  }
  return outlined destroy of SleepQueryModel(v80, (uint64_t (*)(void))type metadata accessor for SleepQueryModel);
}

uint64_t outlined init with copy of SleepQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for SleepQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t base witness table accessor for Decodable in SleepQueryModel()
{
  return lazy protocol witness table accessor for type AppPunchout and conformance AppPunchout(&lazy protocol witness table cache variable for type SleepQueryModel and conformance SleepQueryModel, (void (*)(uint64_t))type metadata accessor for SleepQueryModel);
}

uint64_t base witness table accessor for Encodable in SleepQueryModel()
{
  return lazy protocol witness table accessor for type AppPunchout and conformance AppPunchout(&lazy protocol witness table cache variable for type SleepQueryModel and conformance SleepQueryModel, (void (*)(uint64_t))type metadata accessor for SleepQueryModel);
}

uint64_t lazy protocol witness table accessor for type AppPunchout and conformance AppPunchout(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SleepQueryModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepQueryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SleepQueryModel(void *a1)
{
  return SleepQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for SnippetHeaderModel();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      uint64_t v17 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v12, v13, v17);
      uint64_t v18 = *(int *)(v14 + 20);
      uint64_t v19 = &v12[v18];
      uint64_t v20 = &v13[v18];
      uint64_t v21 = *((void *)v20 + 1);
      *(void *)uint64_t v19 = *(void *)v20;
      *((void *)v19 + 1) = v21;
      uint64_t v22 = *(int *)(v14 + 24);
      uint64_t v23 = &v12[v22];
      uint64_t v24 = &v13[v22];
      uint64_t v25 = *((void *)v24 + 1);
      *(void *)uint64_t v23 = *(void *)v24;
      *((void *)v23 + 1) = v25;
      uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v26(v12, 0, 1, v14);
    }
    uint64_t v27 = a3[6];
    uint64_t v28 = a3[7];
    uint64_t v29 = (uint64_t *)((char *)a1 + v27);
    uint64_t v30 = (uint64_t *)((char *)a2 + v27);
    uint64_t v31 = v30[1];
    void *v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = (uint64_t *)((char *)a1 + v28);
    uint64_t v33 = (uint64_t *)((char *)a2 + v28);
    uint64_t v61 = v33[1];
    void *v32 = *v33;
    v32[1] = v61;
    uint64_t v34 = a3[8];
    uint64_t v35 = a3[9];
    uint64_t v36 = (uint64_t *)((char *)a1 + v34);
    uint64_t v37 = (uint64_t *)((char *)a2 + v34);
    uint64_t v38 = v37[1];
    void *v36 = *v37;
    v36[1] = v38;
    uint64_t v39 = (uint64_t *)((char *)a1 + v35);
    uint64_t v40 = (uint64_t *)((char *)a2 + v35);
    uint64_t v60 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v60;
    uint64_t v41 = a3[10];
    uint64_t v42 = a3[11];
    uint64_t v43 = (uint64_t *)((char *)a1 + v41);
    uint64_t v44 = (uint64_t *)((char *)a2 + v41);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    *(uint64_t *)((char *)a1 + v42) = *(uint64_t *)((char *)a2 + v42);
    uint64_t v46 = a3[13];
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *(uint64_t *)((char *)a1 + v46) = *(uint64_t *)((char *)a2 + v46);
    uint64_t v47 = a3[15];
    *(uint64_t *)((char *)a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    uint64_t v48 = (uint64_t *)((char *)a1 + v47);
    uint64_t v49 = (uint64_t *)((char *)a2 + v47);
    uint64_t v50 = v49[1];
    *uint64_t v48 = *v49;
    v48[1] = v50;
    uint64_t v51 = a3[16];
    uint64_t v52 = a3[17];
    uint64_t v53 = (uint64_t *)((char *)a1 + v51);
    uint64_t v54 = (uint64_t *)((char *)a2 + v51);
    uint64_t v55 = v54[1];
    *uint64_t v53 = *v54;
    v53[1] = v55;
    uint64_t v56 = (uint64_t *)((char *)a1 + v52);
    uint64_t v57 = (uint64_t *)((char *)a2 + v52);
    uint64_t v58 = v57[1];
    *uint64_t v56 = *v57;
    v56[1] = v58;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SleepQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    uint64_t v8 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for SleepQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for SnippetHeaderModel();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v10, v11, v15);
    uint64_t v16 = *(int *)(v12 + 20);
    uint64_t v17 = &v10[v16];
    uint64_t v18 = &v11[v16];
    uint64_t v19 = *((void *)v18 + 1);
    *(void *)uint64_t v17 = *(void *)v18;
    *((void *)v17 + 1) = v19;
    uint64_t v20 = *(int *)(v12 + 24);
    uint64_t v21 = &v10[v20];
    uint64_t v22 = &v11[v20];
    uint64_t v23 = *((void *)v22 + 1);
    *(void *)uint64_t v21 = *(void *)v22;
    *((void *)v21 + 1) = v23;
    uint64_t v24 = *(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24(v10, 0, 1, v12);
  }
  uint64_t v25 = a3[6];
  uint64_t v26 = a3[7];
  uint64_t v27 = &a1[v25];
  uint64_t v28 = &a2[v25];
  uint64_t v29 = *((void *)v28 + 1);
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = v29;
  uint64_t v30 = &a1[v26];
  uint64_t v31 = &a2[v26];
  uint64_t v59 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = v59;
  uint64_t v32 = a3[8];
  uint64_t v33 = a3[9];
  uint64_t v34 = &a1[v32];
  uint64_t v35 = &a2[v32];
  uint64_t v36 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = v36;
  uint64_t v37 = &a1[v33];
  uint64_t v38 = &a2[v33];
  uint64_t v58 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v58;
  uint64_t v39 = a3[10];
  uint64_t v40 = a3[11];
  uint64_t v41 = &a1[v39];
  uint64_t v42 = &a2[v39];
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  *(void *)&a1[v40] = *(void *)&a2[v40];
  uint64_t v44 = a3[13];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  *(void *)&a1[v44] = *(void *)&a2[v44];
  uint64_t v45 = a3[15];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  uint64_t v48 = *((void *)v47 + 1);
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + 1) = v48;
  uint64_t v49 = a3[16];
  uint64_t v50 = a3[17];
  uint64_t v51 = &a1[v49];
  uint64_t v52 = &a2[v49];
  uint64_t v53 = *((void *)v52 + 1);
  *(void *)uint64_t v51 = *(void *)v52;
  *((void *)v51 + 1) = v53;
  uint64_t v54 = &a1[v50];
  uint64_t v55 = &a2[v50];
  uint64_t v56 = *((void *)v55 + 1);
  *(void *)uint64_t v54 = *(void *)v55;
  *((void *)v54 + 1) = v56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for SleepQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for SnippetHeaderModel();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v54 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 24))(v13, v14, v54);
      uint64_t v55 = *(int *)(v15 + 20);
      uint64_t v56 = &v13[v55];
      uint64_t v57 = &v14[v55];
      *(void *)uint64_t v56 = *(void *)v57;
      *((void *)v56 + 1) = *((void *)v57 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v58 = *(int *)(v15 + 24);
      uint64_t v59 = &v13[v58];
      uint64_t v60 = &v14[v58];
      *(void *)uint64_t v59 = *(void *)v60;
      *((void *)v59 + 1) = *((void *)v60 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of SleepQueryModel((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v13, v14, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v20 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v13, v14, v20);
  uint64_t v21 = *(int *)(v15 + 20);
  uint64_t v22 = &v13[v21];
  uint64_t v23 = &v14[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  uint64_t v24 = *(int *)(v15 + 24);
  uint64_t v25 = &v13[v24];
  uint64_t v26 = &v14[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = *((void *)v26 + 1);
  uint64_t v27 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(v13, 0, 1, v15);
LABEL_13:
  uint64_t v29 = a3[6];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = *((void *)v31 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[7];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = *((void *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[8];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = *((void *)v37 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[9];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  *(void *)uint64_t v39 = *(void *)v40;
  *((void *)v39 + 1) = *((void *)v40 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[10];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  swift_retain();
  swift_release();
  uint64_t v44 = a3[15];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = *((void *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[16];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = *((void *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = a3[17];
  uint64_t v51 = &a1[v50];
  uint64_t v52 = &a2[v50];
  *(void *)uint64_t v51 = *(void *)v52;
  *((void *)v51 + 1) = *((void *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of SleepQueryModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for SleepQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for SnippetHeaderModel();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v10, v11, v15);
    *(_OWORD *)&v10[*(int *)(v12 + 20)] = *(_OWORD *)&v11[*(int *)(v12 + 20)];
    *(_OWORD *)&v10[*(int *)(v12 + 24)] = *(_OWORD *)&v11[*(int *)(v12 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v16 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  uint64_t v17 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v17] = *(_OWORD *)&a2[v17];
  uint64_t v18 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(void *)&a1[v18] = *(void *)&a2[v18];
  uint64_t v19 = a3[13];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  uint64_t v20 = a3[15];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  *(_OWORD *)&a1[v20] = *(_OWORD *)&a2[v20];
  uint64_t v21 = a3[17];
  *(_OWORD *)&a1[a3[16]] = *(_OWORD *)&a2[a3[16]];
  *(_OWORD *)&a1[v21] = *(_OWORD *)&a2[v21];
  return a1;
}

char *assignWithTake for SleepQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for SnippetHeaderModel();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v63 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 40))(v13, v14, v63);
      uint64_t v64 = *(int *)(v15 + 20);
      uint64_t v65 = &v13[v64];
      uint64_t v66 = &v14[v64];
      uint64_t v68 = *(void *)v66;
      uint64_t v67 = *((void *)v66 + 1);
      *(void *)uint64_t v65 = v68;
      *((void *)v65 + 1) = v67;
      swift_bridgeObjectRelease();
      uint64_t v69 = *(int *)(v15 + 24);
      uint64_t v70 = &v13[v69];
      char v71 = &v14[v69];
      uint64_t v73 = *(void *)v71;
      uint64_t v72 = *((void *)v71 + 1);
      *(void *)uint64_t v70 = v73;
      *((void *)v70 + 1) = v72;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of SleepQueryModel((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v13, v14, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v20 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v13, v14, v20);
  *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
  *(_OWORD *)&v13[*(int *)(v15 + 24)] = *(_OWORD *)&v14[*(int *)(v15 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_13:
  uint64_t v22 = a3[6];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = v26;
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[7];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v31 = *(void *)v29;
  uint64_t v30 = *((void *)v29 + 1);
  *(void *)uint64_t v28 = v31;
  *((void *)v28 + 1) = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[8];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v36 = *(void *)v34;
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[9];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v41 = *(void *)v39;
  uint64_t v40 = *((void *)v39 + 1);
  *(void *)uint64_t v38 = v41;
  *((void *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[10];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v46 = *(void *)v44;
  uint64_t v45 = *((void *)v44 + 1);
  *(void *)uint64_t v43 = v46;
  *((void *)v43 + 1) = v45;
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_release();
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_release();
  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  swift_release();
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  swift_release();
  uint64_t v47 = a3[15];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  uint64_t v51 = *(void *)v49;
  uint64_t v50 = *((void *)v49 + 1);
  *(void *)uint64_t v48 = v51;
  *((void *)v48 + 1) = v50;
  swift_bridgeObjectRelease();
  uint64_t v52 = a3[16];
  uint64_t v53 = &a1[v52];
  uint64_t v54 = &a2[v52];
  uint64_t v56 = *(void *)v54;
  uint64_t v55 = *((void *)v54 + 1);
  *(void *)uint64_t v53 = v56;
  *((void *)v53 + 1) = v55;
  swift_bridgeObjectRelease();
  uint64_t v57 = a3[17];
  uint64_t v58 = &a1[v57];
  uint64_t v59 = &a2[v57];
  uint64_t v61 = *(void *)v59;
  uint64_t v60 = *((void *)v59 + 1);
  *(void *)uint64_t v58 = v61;
  *((void *)v58 + 1) = v60;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261803C90);
}

uint64_t sub_261803C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_261803DD0);
}

uint64_t sub_261803DD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void type metadata completion function for SleepQueryModel()
{
  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, MEMORY[0x263F762C0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for AppPunchout?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for SleepQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SleepQueryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2618041C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SleepQueryModel.CodingKeys()
{
  return &unk_270D86980;
}

uint64_t specialized SleepQueryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883800 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7079547065656C73 && a2 == 0xEE006C6562614C65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6562614C61746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883820 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000261883840 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x41656D6954677661 && a2 == 0xED00007065656C73 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x49656D6954677661 && a2 == 0xEC0000006465426ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6D69546C61746F74 && a2 == 0xEF7065656C734165 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6D69546C61746F74 && a2 == 0xEE006465426E4965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7275447065656C73 && a2 == 0xED00006E6F697461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000261883860 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000261883880)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 13;
    }
    else {
      return 14;
    }
  }
}

uint64_t SpecificMedCompletedLogModel.medStatus.getter()
{
  return *v0;
}

uint64_t SpecificMedCompletedLogModel.time.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.time.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.time.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.requestedMedName.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.requestedMedName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.requestedMedName.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.requestedMedSchedule.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.requestedMedSchedule.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.requestedMedSchedule.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SpecificMedCompletedLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 32), a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t type metadata accessor for SpecificMedCompletedLogModel()
{
  uint64_t result = type metadata singleton initialization cache for SpecificMedCompletedLogModel;
  if (!type metadata singleton initialization cache for SpecificMedCompletedLogModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SpecificMedCompletedLogModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SpecificMedCompletedLogModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(v3 + 32), &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*SpecificMedCompletedLogModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.dosage.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 36));
}

uint64_t SpecificMedCompletedLogModel.dosage.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for SpecificMedCompletedLogModel();
  uint64_t v6 = v2 + *(int *)(result + 36);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.dosage.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.dosageString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.dosageString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 40));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.dosageString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.dosageUnit.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.dosageUnit.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.dosageUnit.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.medType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.medType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 48));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.medType.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.sashBundleID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.sashBundleID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 52));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.sashBundleID.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.dontDisplayGranularTime.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 56));
}

uint64_t SpecificMedCompletedLogModel.dontDisplayGranularTime.setter(char a1)
{
  uint64_t result = type metadata accessor for SpecificMedCompletedLogModel();
  *(unsigned char *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.dontDisplayGranularTime.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.isSmartEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 60));
}

uint64_t SpecificMedCompletedLogModel.isSmartEnabled.setter(char a1)
{
  uint64_t result = type metadata accessor for SpecificMedCompletedLogModel();
  *(unsigned char *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.isSmartEnabled.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.loggedLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.loggedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 64));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.loggedLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.skippedLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.skippedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 68));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.skippedLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.takenLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpecificMedCompletedLogModel.takenLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 72));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.takenLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SpecificMedCompletedLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 76), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t SpecificMedCompletedLogModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SpecificMedCompletedLogModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(v3 + 76), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*SpecificMedCompletedLogModel.snippetHeaderModel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogModel.init(medStatus:givenTime:requestedMedName:requestedMedSchedule:dosage:dosageUnit:url:sashBundleID:dontDisplayGranularTime:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:snippetHeaderModel:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  int v83 = a8;
  uint64_t v81 = a7;
  unint64_t v78 = a6;
  uint64_t v75 = a5;
  uint64_t v77 = a4;
  uint64_t v76 = a3;
  uint64_t v103 = a22;
  uint64_t v104 = a23;
  uint64_t v101 = a20;
  uint64_t v102 = a21;
  uint64_t v99 = a18;
  uint64_t v100 = a19;
  uint64_t v98 = a17;
  int v96 = a15;
  int v97 = a16;
  uint64_t v94 = a13;
  uint64_t v95 = a14;
  uint64_t v92 = a12;
  uint64_t v87 = a11;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v93 = (char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0xE000000000000000;
  uint64_t v28 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  *(_OWORD *)(a9 + 24) = 0u;
  *(_OWORD *)(a9 + 40) = 0u;
  uint64_t v29 = a9 + v28[8];
  uint64_t v30 = type metadata accessor for AppPunchout();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56);
  uint64_t v90 = v30;
  uint64_t v91 = v29;
  uint64_t v88 = v31 + 56;
  uint64_t v89 = v32;
  ((void (*)(uint64_t, uint64_t, uint64_t))v32)(v29, 1, 1);
  uint64_t v33 = a9 + v28[9];
  *(void *)uint64_t v33 = 0;
  *(unsigned char *)(v33 + 8) = 1;
  uint64_t v34 = (uint64_t *)(a9 + v28[10]);
  *uint64_t v34 = 0;
  v34[1] = 0xE000000000000000;
  uint64_t v35 = (void *)(a9 + v28[11]);
  *uint64_t v35 = 0;
  v35[1] = 0;
  uint64_t v74 = v35;
  uint64_t v36 = (uint64_t *)(a9 + v28[12]);
  uint64_t *v36 = 0;
  v36[1] = 0xE000000000000000;
  uint64_t v37 = (void *)(a9 + v28[13]);
  *uint64_t v37 = 0xD000000000000010;
  v37[1] = 0x80000002618838C0;
  uint64_t v86 = v37;
  uint64_t v80 = v28[14];
  *(unsigned char *)(a9 + v80) = 0;
  uint64_t v79 = v28[15];
  *(unsigned char *)(a9 + v79) = 0;
  uint64_t v38 = (void *)(a9 + v28[16]);
  *uint64_t v38 = 0;
  v38[1] = 0;
  uint64_t v39 = (void *)(a9 + v28[17]);
  *uint64_t v39 = 0;
  v39[1] = 0;
  uint64_t v82 = v39;
  uint64_t v40 = (void *)(a9 + v28[18]);
  *uint64_t v40 = 0;
  v40[1] = 0;
  uint64_t v85 = v40;
  uint64_t v41 = a9 + v28[19];
  uint64_t v42 = type metadata accessor for SnippetHeaderModel();
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56);
  uint64_t v84 = v41;
  v43(v41, 1, 1, v42);
  *(unsigned char *)a9 = a1;
  id v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
  objc_msgSend(v44, sel_setTimeStyle_, 1);
  uint64_t v45 = a2;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v47 = objc_msgSend(v44, sel_stringFromDate_, isa);

  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v50 = v49;

  uint64_t v51 = v75;
  *(void *)(a9 + 8) = v48;
  *(void *)(a9 + 16) = v50;
  uint64_t v52 = v77;
  *(void *)(a9 + 24) = v76;
  *(void *)(a9 + 32) = v52;
  unint64_t v53 = v78;
  *(void *)(a9 + 40) = v51;
  *(void *)(a9 + 48) = v53;
  if (v53) {
    uint64_t v54 = 0;
  }
  else {
    uint64_t v54 = v81;
  }
  char v55 = (v53 != 0) | v83;
  *(void *)uint64_t v33 = v54;
  char v56 = v55 & 1;
  *(unsigned char *)(v33 + 8) = v55 & 1;
  swift_bridgeObjectRetain();
  *uint64_t v34 = SpecificMedCompletedLogModel.getFormattedDosageString(_:)(v54, v56);
  v34[1] = v57;
  if (v53)
  {
    swift_bridgeObjectRelease();
    uint64_t v58 = 0;
    uint64_t v59 = 0;
  }
  else
  {
    uint64_t v58 = a10;
    unint64_t v53 = 0xE900000000000064;
    uint64_t v51 = 0x656465654E207341;
    uint64_t v59 = v87;
  }
  uint64_t v60 = v74;
  *uint64_t v74 = v58;
  v60[1] = v59;
  uint64_t *v36 = v51;
  v36[1] = v53;
  uint64_t v62 = v92;
  uint64_t v61 = (uint64_t)v93;
  SpecificMedCompletedLogModel.createAppPunchout(url:)(v92);
  outlined destroy of Font.Design?(v62, &demangling cache variable for type metadata for URL?);
  uint64_t v63 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v45, v63);
  v89(v61, 0, 1, v90);
  outlined assign with take of AppPunchout?(v61, v91, &demangling cache variable for type metadata for AppPunchout?);
  uint64_t v64 = v86;
  swift_bridgeObjectRelease();
  uint64_t v65 = v95;
  *uint64_t v64 = v94;
  v64[1] = v65;
  *(unsigned char *)(a9 + v80) = v96 & 1;
  *(unsigned char *)(a9 + v79) = v97 & 1;
  swift_bridgeObjectRelease();
  uint64_t v66 = v99;
  *uint64_t v38 = v98;
  v38[1] = v66;
  uint64_t v67 = v82;
  swift_bridgeObjectRelease();
  uint64_t v68 = v101;
  *uint64_t v67 = v100;
  v67[1] = v68;
  uint64_t v69 = v85;
  swift_bridgeObjectRelease();
  uint64_t v71 = v103;
  uint64_t v70 = v104;
  *uint64_t v69 = v102;
  v69[1] = v71;
  return outlined assign with take of AppPunchout?(v70, v84, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t SpecificMedCompletedLogModel.getFormattedDosageString(_:)(uint64_t result, char a2)
{
  if (a2) {
    return 0;
  }
  uint64_t v2 = result;
  double v3 = trunc(*(double *)&result);
  if (*(double *)&result <= -9.22337204e18 || *(double *)&result >= 9.22337204e18 || v3 != *(double *)&result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = MEMORY[0x263F8D538];
    *(_OWORD *)(v6 + 16) = xmmword_2618795C0;
    uint64_t v8 = MEMORY[0x263F8D5B8];
    *(void *)(v6 + 56) = v7;
    *(void *)(v6 + 64) = v8;
    *(void *)(v6 + 32) = v2;
    uint64_t v9 = String.init(format:arguments:)();
    swift_bridgeObjectRelease();
    return v9;
  }
  if ((~result & 0x7FF0000000000000) != 0) {
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
  __break(1u);
  return result;
}

uint64_t SpecificMedCompletedLogModel.createAppPunchout(url:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  unsigned int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL.absoluteString.getter();
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t SpecificMedCompletedLogModel.init(medStatus:givenTimeString:requestedMedName:requestedMedSchedule:dosage:dosageUnit:url:sashBundleID:dontDisplayGranularTime:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:snippetHeaderModel:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v67 = a8;
  uint64_t v66 = a5;
  uint64_t v65 = a4;
  uint64_t v64 = a3;
  uint64_t v63 = a2;
  int v62 = a1;
  uint64_t v87 = a23;
  uint64_t v88 = a24;
  uint64_t v85 = a21;
  uint64_t v86 = a22;
  uint64_t v83 = a19;
  uint64_t v84 = a20;
  uint64_t v82 = a18;
  int v80 = a16;
  int v81 = a17;
  uint64_t v78 = a14;
  uint64_t v79 = a15;
  uint64_t v77 = a13;
  uint64_t v73 = a12;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v76 = (char *)&v61 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  uint64_t v30 = a9 + v29[8];
  uint64_t v31 = type metadata accessor for AppPunchout();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56);
  uint64_t v74 = v31;
  uint64_t v75 = v30;
  uint64_t v72 = v33;
  uint64_t v70 = v32 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v33)(v30, 1, 1);
  uint64_t v34 = (void *)(a9 + v29[13]);
  *uint64_t v34 = 0xD000000000000010;
  v34[1] = 0x80000002618838C0;
  uint64_t v69 = v29[14];
  *(unsigned char *)(a9 + v69) = 0;
  uint64_t v68 = v29[15];
  *(unsigned char *)(a9 + v68) = 0;
  uint64_t v35 = (void *)(a9 + v29[16]);
  *uint64_t v35 = 0;
  v35[1] = 0;
  uint64_t v36 = (void *)(a9 + v29[17]);
  void *v36 = 0;
  v36[1] = 0;
  uint64_t v37 = (void *)(a9 + v29[18]);
  *uint64_t v37 = 0;
  v37[1] = 0;
  uint64_t v38 = a9 + v29[19];
  uint64_t v39 = type metadata accessor for SnippetHeaderModel();
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56);
  uint64_t v71 = v38;
  v40(v38, 1, 1, v39);
  *(unsigned char *)a9 = v62;
  uint64_t v41 = v64;
  *(void *)(a9 + 8) = v63;
  *(void *)(a9 + 16) = v41;
  uint64_t v42 = v66;
  *(void *)(a9 + 24) = v65;
  *(void *)(a9 + 32) = v42;
  uint64_t v66 = a6;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  if (a7) {
    uint64_t v43 = 0;
  }
  else {
    uint64_t v43 = v67;
  }
  uint64_t v44 = a9 + v29[9];
  uint64_t v45 = (uint64_t *)(a9 + v29[10]);
  uint64_t v67 = v29[11];
  *(void *)uint64_t v44 = v43;
  char v46 = (a7 != 0) | a10 & 1;
  *(unsigned char *)(v44 + 8) = v46;
  swift_bridgeObjectRetain();
  *uint64_t v45 = SpecificMedCompletedLogModel.getFormattedDosageString(_:)(v43, v46);
  v45[1] = v47;
  if (a7)
  {
    swift_bridgeObjectRelease();
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = v66;
  }
  else
  {
    uint64_t v48 = a11;
    a7 = 0xE900000000000064;
    uint64_t v50 = 0x656465654E207341;
    uint64_t v49 = v73;
  }
  uint64_t v51 = (void *)(a9 + v67);
  *uint64_t v51 = v48;
  v51[1] = v49;
  uint64_t v52 = (uint64_t *)(a9 + v29[12]);
  *uint64_t v52 = v50;
  v52[1] = a7;
  uint64_t v54 = (uint64_t)v76;
  uint64_t v53 = v77;
  SpecificMedCompletedLogModel.createAppPunchout(url:)(v77);
  outlined destroy of Font.Design?(v53, &demangling cache variable for type metadata for URL?);
  v72(v54, 0, 1, v74);
  outlined assign with take of AppPunchout?(v54, v75, &demangling cache variable for type metadata for AppPunchout?);
  swift_bridgeObjectRelease();
  uint64_t v55 = v79;
  *uint64_t v34 = v78;
  v34[1] = v55;
  *(unsigned char *)(a9 + v69) = v80 & 1;
  *(unsigned char *)(a9 + v68) = v81 & 1;
  swift_bridgeObjectRelease();
  uint64_t v56 = v83;
  *uint64_t v35 = v82;
  v35[1] = v56;
  swift_bridgeObjectRelease();
  uint64_t v57 = v85;
  void *v36 = v84;
  v36[1] = v57;
  swift_bridgeObjectRelease();
  uint64_t v59 = v87;
  uint64_t v58 = v88;
  *uint64_t v37 = v86;
  v37[1] = v59;
  return outlined assign with take of AppPunchout?(v58, v71, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

unint64_t SpecificMedCompletedLogModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x757461745364656DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 1701669236;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0x68636E7550707061;
      break;
    case 5:
      unint64_t result = 0x656761736F64;
      break;
    case 6:
      unint64_t result = 0x7453656761736F64;
      break;
    case 7:
      unint64_t result = 0x6E55656761736F64;
      break;
    case 8:
      unint64_t result = 0x6570795464656DLL;
      break;
    case 9:
      unint64_t result = 0x646E754268736173;
      break;
    case 10:
      unint64_t result = 0xD000000000000017;
      break;
    case 11:
      unint64_t result = 0x457472616D537369;
      break;
    case 12:
      unint64_t result = 0x614C646567676F6CLL;
      break;
    case 13:
      unint64_t result = 0x4C64657070696B73;
      break;
    case 14:
      unint64_t result = 0x62614C6E656B6174;
      break;
    case 15:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SpecificMedCompletedLogModel.CodingKeys()
{
  return SpecificMedCompletedLogModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SpecificMedCompletedLogModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SpecificMedCompletedLogModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpecificMedCompletedLogModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpecificMedCompletedLogModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SpecificMedCompletedLogModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpecificMedCompletedLogModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v9 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for SpecificMedCompletedLogModel();
    char v9 = 4;
    type metadata accessor for AppPunchout();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_0(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v9 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 15;
    type metadata accessor for SnippetHeaderModel();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_0(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys);
  }
  return result;
}

uint64_t SpecificMedCompletedLogModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v90 = a1;
  uint64_t v73 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v74 = (uint64_t)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v76 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpecificMedCompletedLogModel.CodingKeys>);
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v78 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SpecificMedCompletedLogModel();
  uint64_t v10 = (int *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0xE000000000000000;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  uint64_t v13 = (uint64_t)&v12[v10[10]];
  uint64_t v14 = type metadata accessor for AppPunchout();
  int v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v89 = v13;
  uint64_t v75 = v14;
  v15(v13, 1, 1);
  uint64_t v16 = &v12[v10[11]];
  *(void *)uint64_t v16 = 0;
  v16[8] = 1;
  uint64_t v17 = &v12[v10[12]];
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0xE000000000000000;
  uint64_t v88 = v17;
  int v18 = &v12[v10[13]];
  *(void *)int v18 = 0;
  *((void *)v18 + 1) = 0;
  uint64_t v87 = v18;
  int v19 = &v12[v10[14]];
  *(void *)int v19 = 0;
  *((void *)v19 + 1) = 0xE000000000000000;
  uint64_t v86 = v19;
  uint64_t v20 = &v12[v10[15]];
  *(void *)uint64_t v20 = 0xD000000000000010;
  *((void *)v20 + 1) = 0x80000002618838C0;
  uint64_t v21 = v10[16];
  v12[v21] = 0;
  uint64_t v22 = v10[17];
  v12[v22] = 0;
  uint64_t v23 = &v12[v10[18]];
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  uint64_t v84 = v23;
  uint64_t v85 = v20;
  uint64_t v24 = &v12[v10[19]];
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  uint64_t v83 = v24;
  uint64_t v25 = &v12[v10[20]];
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = 0;
  int v81 = v25;
  uint64_t v26 = (uint64_t)&v12[v10[21]];
  uint64_t v27 = type metadata accessor for SnippetHeaderModel();
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
  uint64_t v82 = v26;
  v28(v26, 1, 1, v27);
  __swift_project_boxed_opaque_existential_1(v90, v90[3]);
  lazy protocol witness table accessor for type SpecificMedCompletedLogModel.CodingKeys and conformance SpecificMedCompletedLogModel.CodingKeys();
  uint64_t v79 = v8;
  uint64_t v29 = v80;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v29)
  {
    uint64_t v34 = v89;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v90);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of Font.Design?(v34, &demangling cache variable for type metadata for AppPunchout?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined destroy of Font.Design?(v82, &demangling cache variable for type metadata for SnippetHeaderModel?);
  }
  else
  {
    uint64_t v30 = (uint64_t)v76;
    int v80 = (uint64_t *)v16;
    uint64_t v72 = v21;
    char v91 = 0;
    *uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v91 = 1;
    *((void *)v12 + 1) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v12 + 2) = v31;
    char v91 = 2;
    *((void *)v12 + 3) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v12 + 4) = v32;
    char v91 = 3;
    *((void *)v12 + 5) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v12 + 6) = v33;
    char v91 = 4;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_0(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v30, v89, &demangling cache variable for type metadata for AppPunchout?);
    char v91 = 5;
    uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v36 = v80;
    *int v80 = v35;
    *((unsigned char *)v36 + 8) = v37 & 1;
    char v91 = 6;
    uint64_t v38 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v40 = v39;
    uint64_t v41 = (uint64_t *)v88;
    swift_bridgeObjectRelease();
    *uint64_t v41 = v38;
    v41[1] = v40;
    char v91 = 7;
    uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v43 = v87;
    uint64_t v44 = v42;
    int v80 = v45;
    swift_bridgeObjectRelease();
    char v46 = v80;
    *uint64_t v43 = v44;
    v43[1] = v46;
    char v91 = 8;
    uint64_t v47 = KeyedDecodingContainer.decode(_:forKey:)();
    int v80 = v48;
    uint64_t v49 = v47;
    uint64_t v50 = v86;
    swift_bridgeObjectRelease();
    uint64_t v51 = v80;
    void *v50 = v49;
    v50[1] = v51;
    char v91 = 9;
    uint64_t v52 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v54 = v53;
    uint64_t v55 = (uint64_t *)v85;
    swift_bridgeObjectRelease();
    *uint64_t v55 = v52;
    v55[1] = v54;
    char v91 = 10;
    v12[v72] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v91 = 11;
    v12[v22] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v91 = 12;
    uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v58 = v57;
    uint64_t v59 = (uint64_t *)v84;
    swift_bridgeObjectRelease();
    uint64_t *v59 = v56;
    v59[1] = v58;
    char v91 = 13;
    uint64_t v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v62 = v61;
    uint64_t v63 = (uint64_t *)v83;
    swift_bridgeObjectRelease();
    *uint64_t v63 = v60;
    v63[1] = v62;
    char v91 = 14;
    uint64_t v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v66 = v65;
    uint64_t v67 = (uint64_t *)v81;
    swift_bridgeObjectRelease();
    *uint64_t v67 = v64;
    v67[1] = v66;
    char v91 = 15;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_0(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v68 = v78;
    uint64_t v69 = v79;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v69, v68);
    outlined assign with take of AppPunchout?(v74, v82, &demangling cache variable for type metadata for SnippetHeaderModel?);
    outlined init with copy of SpecificMedCompletedLogModel((uint64_t)v12, v73);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v90);
    return outlined destroy of SpecificMedCompletedLogModel((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  }
}

uint64_t outlined init with copy of SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpecificMedCompletedLogModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Decodable in SpecificMedCompletedLogModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_0(&lazy protocol witness table cache variable for type SpecificMedCompletedLogModel and conformance SpecificMedCompletedLogModel, (void (*)(uint64_t))type metadata accessor for SpecificMedCompletedLogModel);
}

uint64_t base witness table accessor for Encodable in SpecificMedCompletedLogModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_0(&lazy protocol witness table cache variable for type SpecificMedCompletedLogModel and conformance SpecificMedCompletedLogModel, (void (*)(uint64_t))type metadata accessor for SpecificMedCompletedLogModel);
}

uint64_t _s10SnippetKit11AppPunchoutVACSEAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SpecificMedCompletedLogModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SpecificMedCompletedLogModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SpecificMedCompletedLogModel(void *a1)
{
  return SpecificMedCompletedLogModel.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for SpecificMedCompletedLogModel(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = a2[4];
    a1[3] = a2[3];
    a1[4] = v8;
    uint64_t v9 = a2[6];
    uint64_t v10 = a3[8];
    __dst = (char *)a1 + v10;
    uint64_t v11 = (char *)a2 + v10;
    a1[5] = a2[5];
    a1[6] = v9;
    uint64_t v12 = type metadata accessor for AppPunchout();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v65(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(__dst, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v16 = a3[9];
    uint64_t v17 = a3[10];
    int v18 = (char *)v4 + v16;
    int v19 = (char *)a2 + v16;
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (void *)((char *)v4 + v17);
    uint64_t v21 = (void *)((char *)a2 + v17);
    uint64_t v66 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v66;
    uint64_t v22 = a3[11];
    uint64_t v23 = a3[12];
    uint64_t v24 = (void *)((char *)v4 + v22);
    uint64_t v25 = (void *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    void *v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = (void *)((char *)v4 + v23);
    uint64_t v28 = (void *)((char *)a2 + v23);
    uint64_t v29 = v28[1];
    void *v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = a3[13];
    uint64_t v31 = a3[14];
    uint64_t v32 = (void *)((char *)v4 + v30);
    uint64_t v33 = (void *)((char *)a2 + v30);
    uint64_t v34 = v33[1];
    void *v32 = *v33;
    v32[1] = v34;
    *((unsigned char *)v4 + v31) = *((unsigned char *)a2 + v31);
    uint64_t v35 = a3[16];
    *((unsigned char *)v4 + a3[15]) = *((unsigned char *)a2 + a3[15]);
    uint64_t v36 = (void *)((char *)v4 + v35);
    char v37 = (void *)((char *)a2 + v35);
    uint64_t v38 = v37[1];
    void *v36 = *v37;
    v36[1] = v38;
    uint64_t v39 = a3[17];
    uint64_t v40 = a3[18];
    uint64_t v41 = (void *)((char *)v4 + v39);
    uint64_t v42 = (void *)((char *)a2 + v39);
    uint64_t v43 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v43;
    uint64_t v44 = (void *)((char *)v4 + v40);
    uint64_t v45 = (void *)((char *)a2 + v40);
    uint64_t v46 = *v45;
    uint64_t v47 = v45[1];
    uint64_t v48 = a3[19];
    uint64_t v64 = (char *)a2 + v48;
    __dsta = (char *)v4 + v48;
    *uint64_t v44 = v46;
    v44[1] = v47;
    uint64_t v49 = type metadata accessor for SnippetHeaderModel();
    uint64_t v63 = *(void *)(v49 - 8);
    uint64_t v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v50(v64, 1, v49))
    {
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dsta, v64, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      uint64_t v52 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(__dsta, v64, v52);
      uint64_t v53 = *(int *)(v49 + 20);
      uint64_t v54 = &__dsta[v53];
      uint64_t v55 = &v64[v53];
      uint64_t v56 = *((void *)v55 + 1);
      *(void *)uint64_t v54 = *(void *)v55;
      *((void *)v54 + 1) = v56;
      uint64_t v57 = *(int *)(v49 + 24);
      uint64_t v58 = &__dsta[v57];
      uint64_t v59 = &v64[v57];
      uint64_t v60 = *((void *)v59 + 1);
      *(void *)uint64_t v58 = *(void *)v59;
      *((void *)v58 + 1) = v60;
      uint64_t v61 = *(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v61(__dsta, 0, 1, v49);
    }
  }
  return v4;
}

uint64_t destroy for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 76);
  uint64_t v8 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v7, v10);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = a3[8];
  __dst = (void *)(a1 + v9);
  uint64_t v10 = (const void *)(a2 + v9);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  uint64_t v11 = type metadata accessor for AppPunchout();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v63 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v63(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(__dst, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  uint64_t v14 = a3[9];
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  int v18 = (void *)(a1 + v15);
  int v19 = (void *)(a2 + v15);
  uint64_t v64 = v19[1];
  *int v18 = *v19;
  v18[1] = v64;
  uint64_t v20 = a3[11];
  uint64_t v21 = a3[12];
  uint64_t v22 = (void *)(a1 + v20);
  uint64_t v23 = (void *)(a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (void *)(a1 + v21);
  uint64_t v26 = (void *)(a2 + v21);
  uint64_t v27 = v26[1];
  void *v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = a3[13];
  uint64_t v29 = a3[14];
  uint64_t v30 = (void *)(a1 + v28);
  uint64_t v31 = (void *)(a2 + v28);
  uint64_t v32 = v31[1];
  void *v30 = *v31;
  v30[1] = v32;
  *(unsigned char *)(a1 + v29) = *(unsigned char *)(a2 + v29);
  uint64_t v33 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  uint64_t v37 = a3[17];
  uint64_t v38 = a3[18];
  uint64_t v39 = (void *)(a1 + v37);
  uint64_t v40 = (void *)(a2 + v37);
  uint64_t v41 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v41;
  uint64_t v42 = (void *)(a1 + v38);
  uint64_t v43 = (uint64_t *)(a2 + v38);
  uint64_t v44 = *v43;
  uint64_t v45 = v43[1];
  uint64_t v46 = a3[19];
  uint64_t v62 = (char *)(a2 + v46);
  __dsta = (char *)(a1 + v46);
  *uint64_t v42 = v44;
  v42[1] = v45;
  uint64_t v47 = type metadata accessor for SnippetHeaderModel();
  uint64_t v61 = *(void *)(v47 - 8);
  uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v48(v62, 1, v47))
  {
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dsta, v62, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    uint64_t v50 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(__dsta, v62, v50);
    uint64_t v51 = *(int *)(v47 + 20);
    uint64_t v52 = &__dsta[v51];
    uint64_t v53 = &v62[v51];
    uint64_t v54 = *((void *)v53 + 1);
    *(void *)uint64_t v52 = *(void *)v53;
    *((void *)v52 + 1) = v54;
    uint64_t v55 = *(int *)(v47 + 24);
    uint64_t v56 = &__dsta[v55];
    uint64_t v57 = &v62[v55];
    uint64_t v58 = *((void *)v57 + 1);
    *(void *)uint64_t v56 = *(void *)v57;
    *((void *)v56 + 1) = v58;
    uint64_t v59 = *(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59(__dsta, 0, 1, v47);
  }
  return a1;
}

uint64_t assignWithCopy for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[8];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for AppPunchout();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  *(unsigned char *)(v16 + 8) = *((unsigned char *)v17 + 8);
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[10];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[11];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[12];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  void *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[13];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  void *v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  uint64_t v31 = a3[16];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  void *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[17];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  *uint64_t v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[18];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (void *)(a2 + v37);
  *uint64_t v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[19];
  uint64_t v41 = (char *)(a1 + v40);
  uint64_t v42 = (char *)(a2 + v40);
  uint64_t v43 = type metadata accessor for SnippetHeaderModel();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
  int v46 = v45(v41, 1, v43);
  int v47 = v45(v42, 1, v43);
  if (!v46)
  {
    if (!v47)
    {
      uint64_t v58 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 24))(v41, v42, v58);
      uint64_t v59 = *(int *)(v43 + 20);
      uint64_t v60 = &v41[v59];
      uint64_t v61 = &v42[v59];
      *(void *)uint64_t v60 = *(void *)v61;
      *((void *)v60 + 1) = *((void *)v61 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v62 = *(int *)(v43 + 24);
      uint64_t v63 = &v41[v62];
      uint64_t v64 = &v42[v62];
      *(void *)uint64_t v63 = *(void *)v64;
      *((void *)v63 + 1) = *((void *)v64 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SpecificMedCompletedLogModel((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v47)
  {
LABEL_12:
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v41, v42, *(void *)(*(void *)(v56 - 8) + 64));
    return a1;
  }
  uint64_t v48 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 16))(v41, v42, v48);
  uint64_t v49 = *(int *)(v43 + 20);
  uint64_t v50 = &v41[v49];
  uint64_t v51 = &v42[v49];
  *(void *)uint64_t v50 = *(void *)v51;
  *((void *)v50 + 1) = *((void *)v51 + 1);
  uint64_t v52 = *(int *)(v43 + 24);
  uint64_t v53 = &v41[v52];
  uint64_t v54 = &v42[v52];
  *(void *)uint64_t v53 = *(void *)v54;
  *((void *)v53 + 1) = *((void *)v54 + 1);
  uint64_t v55 = *(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55(v41, 0, 1, v43);
  return a1;
}

uint64_t outlined destroy of SpecificMedCompletedLogModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = a3[8];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for AppPunchout();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[9];
  uint64_t v13 = a3[10];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  uint64_t v16 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  uint64_t v17 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  uint64_t v20 = a3[18];
  uint64_t v19 = a3[19];
  uint64_t v21 = (char *)(a1 + v19);
  uint64_t v22 = (char *)(a2 + v19);
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  uint64_t v23 = type metadata accessor for SnippetHeaderModel();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    uint64_t v26 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v21, v22, v26);
    *(_OWORD *)&v21[*(int *)(v23 + 20)] = *(_OWORD *)&v22[*(int *)(v23 + 20)];
    *(_OWORD *)&v21[*(int *)(v23 + 24)] = *(_OWORD *)&v22[*(int *)(v23 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  return a1;
}

uint64_t assignWithTake for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for AppPunchout();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v18;
  uint64_t v21 = a2 + v18;
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  uint64_t v22 = (void *)(a1 + v19);
  uint64_t v23 = (uint64_t *)(a2 + v19);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  void *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[12];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  void *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[13];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  *uint64_t v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v41) = *(unsigned char *)(a2 + v41);
  uint64_t v42 = a3[16];
  uint64_t v43 = (void *)(a1 + v42);
  uint64_t v44 = (uint64_t *)(a2 + v42);
  uint64_t v46 = *v44;
  uint64_t v45 = v44[1];
  *uint64_t v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[17];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (uint64_t *)(a2 + v47);
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  *uint64_t v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  uint64_t v52 = a3[18];
  uint64_t v53 = (void *)(a1 + v52);
  uint64_t v54 = (uint64_t *)(a2 + v52);
  uint64_t v56 = *v54;
  uint64_t v55 = v54[1];
  *uint64_t v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease();
  uint64_t v57 = a3[19];
  uint64_t v58 = (char *)(a1 + v57);
  uint64_t v59 = (char *)(a2 + v57);
  uint64_t v60 = type metadata accessor for SnippetHeaderModel();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
  int v63 = v62(v58, 1, v60);
  int v64 = v62(v59, 1, v60);
  if (!v63)
  {
    if (!v64)
    {
      uint64_t v68 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 40))(v58, v59, v68);
      uint64_t v69 = *(int *)(v60 + 20);
      uint64_t v70 = &v58[v69];
      uint64_t v71 = &v59[v69];
      uint64_t v73 = *(void *)v71;
      uint64_t v72 = *((void *)v71 + 1);
      *(void *)uint64_t v70 = v73;
      *((void *)v70 + 1) = v72;
      swift_bridgeObjectRelease();
      uint64_t v74 = *(int *)(v60 + 24);
      uint64_t v75 = &v58[v74];
      uint64_t v76 = &v59[v74];
      uint64_t v78 = *(void *)v76;
      uint64_t v77 = *((void *)v76 + 1);
      *(void *)uint64_t v75 = v78;
      *((void *)v75 + 1) = v77;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SpecificMedCompletedLogModel((uint64_t)v58, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v64)
  {
LABEL_12:
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v58, v59, *(void *)(*(void *)(v66 - 8) + 64));
    return a1;
  }
  uint64_t v65 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 32))(v58, v59, v65);
  *(_OWORD *)&v58[*(int *)(v60 + 20)] = *(_OWORD *)&v59[*(int *)(v60 + 20)];
  *(_OWORD *)&v58[*(int *)(v60 + 24)] = *(_OWORD *)&v59[*(int *)(v60 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_26180884C);
}

uint64_t sub_26180884C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 76);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_261808994);
}

uint64_t sub_261808994(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 76);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for SpecificMedCompletedLogModel()
{
  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, MEMORY[0x263F762C0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for SpecificMedCompletedLogModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *uint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x261808CD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SpecificMedCompletedLogModel.CodingKeys()
{
  return &unk_270D86A10;
}

uint64_t specialized SpecificMedCompletedLogModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x757461745364656DLL && a2 == 0xE900000000000073;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701669236 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002618838E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000261883900 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656761736F64 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7453656761736F64 && a2 == 0xEC000000676E6972 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6E55656761736F64 && a2 == 0xEA00000000007469 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6570795464656DLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x646E754268736173 && a2 == 0xEC0000004449656CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000261883920 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x457472616D537369 && a2 == 0xEE0064656C62616ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x4C64657070696B73 && a2 == 0xEC0000006C656261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x62614C6E656B6174 && a2 == 0xEA00000000006C65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883800)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 15;
    }
    else {
      return 16;
    }
  }
}

uint64_t GenericQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t GenericQueryModel.appPunchout.setter(uint64_t a1)
{
  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*GenericQueryModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.averageValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 20));
}

uint64_t type metadata accessor for GenericQueryModel()
{
  uint64_t result = type metadata singleton initialization cache for GenericQueryModel;
  if (!type metadata singleton initialization cache for GenericQueryModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t GenericQueryModel.averageValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for GenericQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 20);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*GenericQueryModel.averageValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.maxValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 24));
}

uint64_t GenericQueryModel.maxValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for GenericQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*GenericQueryModel.maxValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.minValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 28));
}

uint64_t GenericQueryModel.minValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for GenericQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*GenericQueryModel.minValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.mostRecentValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 32));
}

uint64_t GenericQueryModel.mostRecentValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for GenericQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 32);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*GenericQueryModel.mostRecentValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.totalValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 36));
}

uint64_t GenericQueryModel.totalValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for GenericQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 36);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*GenericQueryModel.totalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for GenericQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 40), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t GenericQueryModel.dateLabel.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for GenericQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 40), &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t (*GenericQueryModel.dateLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.averageValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericQueryModel.averageValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for GenericQueryModel() + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericQueryModel.averageValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.maxValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericQueryModel.maxValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for GenericQueryModel() + 48));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericQueryModel.maxValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.minValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericQueryModel.minValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for GenericQueryModel() + 52));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericQueryModel.minValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.mostRecentValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericQueryModel.mostRecentValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for GenericQueryModel() + 56));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericQueryModel.mostRecentValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.totalValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericQueryModel.totalValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for GenericQueryModel() + 60));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericQueryModel.totalValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.unit.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericQueryModel.unit.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for GenericQueryModel() + 64));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericQueryModel.unit.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.averageLabelString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GenericQueryModel() + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericQueryModel.averageLabelString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for GenericQueryModel() + 68));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericQueryModel.averageLabelString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for GenericQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 72), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t GenericQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for GenericQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 72), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*GenericQueryModel.snippetHeaderModel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericQueryModel.init(averageValue:maxValue:minValue:mostRecentValue:totalValue:unit:dateLabel:url:averageLabelString:headerModel:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v92 = a8;
  uint64_t v97 = a7;
  int v87 = a6;
  uint64_t v94 = a5;
  int v85 = a4;
  uint64_t v84 = a1;
  uint64_t v102 = a16;
  uint64_t v103 = a17;
  uint64_t v105 = a18;
  uint64_t v106 = a15;
  uint64_t v107 = a14;
  uint64_t v98 = a12;
  uint64_t v99 = a13;
  uint64_t v96 = a10;
  int v95 = a11;
  BOOL v21 = (a2 & 1) == 0;
  BOOL v83 = (a4 & 1) == 0;
  BOOL v86 = (a6 & 1) == 0;
  BOOL v88 = (a8 & 1) == 0;
  BOOL v93 = (a11 & 1) == 0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for AppPunchout();
  uint64_t v25 = *(void *)(v90 - 8);
  uint64_t v89 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
  uint64_t v91 = v25 + 56;
  v89(a9, 1, 1, v90);
  uint64_t Model = (int *)type metadata accessor for GenericQueryModel();
  uint64_t v82 = a9 + Model[10];
  uint64_t v27 = v82;
  uint64_t v28 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  uint64_t v29 = (uint64_t *)(a9 + Model[11]);
  uint64_t *v29 = 0;
  v29[1] = 0;
  uint64_t v30 = (uint64_t *)(a9 + Model[12]);
  uint64_t v100 = v30;
  uint64_t *v30 = 0;
  v30[1] = 0;
  uint64_t v31 = (uint64_t *)(a9 + Model[13]);
  uint64_t v101 = v31;
  uint64_t *v31 = 0;
  v31[1] = 0;
  uint64_t v32 = (uint64_t *)(a9 + Model[14]);
  uint64_t v104 = v32;
  uint64_t *v32 = 0;
  v32[1] = 0;
  uint64_t v33 = (uint64_t *)(a9 + Model[15]);
  uint64_t *v33 = 0;
  v33[1] = 0;
  uint64_t v34 = (void *)(a9 + Model[17]);
  *uint64_t v34 = 0;
  v34[1] = 0;
  uint64_t v81 = a9 + Model[18];
  uint64_t v35 = v81;
  uint64_t v36 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  uint64_t v37 = v84;
  BOOL v38 = (v84 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v21 && v38) {
    uint64_t v37 = 0;
  }
  char v39 = a2 | v38;
  uint64_t v40 = a9 + Model[5];
  *(void *)uint64_t v40 = v37;
  *(unsigned char *)(v40 + 8) = v39 & 1;
  BOOL v41 = (a3 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v83 && v41) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = a3;
  }
  char v43 = v85 | v41;
  uint64_t v44 = a9 + Model[6];
  *(void *)uint64_t v44 = v42;
  *(unsigned char *)(v44 + 8) = v43 & 1;
  uint64_t v45 = v94;
  BOOL v46 = (v94 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v86 && v46) {
    uint64_t v45 = 0;
  }
  char v47 = v87 | v46;
  uint64_t v48 = a9 + Model[7];
  *(void *)uint64_t v48 = v45;
  *(unsigned char *)(v48 + 8) = v47 & 1;
  uint64_t v49 = v97;
  BOOL v50 = (v97 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v88 && v50) {
    uint64_t v49 = 0;
  }
  char v51 = v92 | v50;
  uint64_t v52 = a9 + Model[8];
  *(void *)uint64_t v52 = v49;
  *(unsigned char *)(v52 + 8) = v51 & 1;
  uint64_t v53 = v96;
  BOOL v54 = (v96 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v93 && v54) {
    uint64_t v53 = 0;
  }
  uint64_t v55 = Model[16];
  char v56 = v95;
  uint64_t v57 = a9 + Model[9];
  *(void *)uint64_t v57 = v53;
  *(unsigned char *)(v57 + 8) = (v56 | v54) & 1;
  uint64_t v58 = (void *)(a9 + v55);
  uint64_t v59 = v99;
  *uint64_t v58 = v98;
  v58[1] = v59;
  outlined assign with copy of SpeakableString?(v107, v82, &demangling cache variable for type metadata for SpeakableString?);
  GenericQueryModel.createAppPunchout(url:)(v106);
  v89((uint64_t)v24, 0, 1, v90);
  outlined assign with take of AppPunchout?((uint64_t)v24, a9, &demangling cache variable for type metadata for AppPunchout?);
  swift_bridgeObjectRelease();
  uint64_t v60 = v103;
  *uint64_t v34 = v102;
  v34[1] = v60;
  outlined assign with copy of SpeakableString?(v105, v81, &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v61 = GenericQueryModel.getFormattedValueString(inputValue:)(*(void *)v57, *(unsigned char *)(v57 + 8));
  uint64_t v63 = v62;
  swift_bridgeObjectRelease();
  uint64_t *v33 = v61;
  v33[1] = v63;
  uint64_t v64 = GenericQueryModel.getFormattedValueString(inputValue:)(*(void *)v40, *(unsigned char *)(v40 + 8));
  uint64_t v66 = v65;
  swift_bridgeObjectRelease();
  uint64_t *v29 = v64;
  v29[1] = v66;
  uint64_t v67 = GenericQueryModel.getFormattedValueString(inputValue:)(*(void *)v44, *(unsigned char *)(v44 + 8));
  uint64_t v69 = v68;
  uint64_t v70 = v100;
  swift_bridgeObjectRelease();
  uint64_t *v70 = v67;
  v70[1] = v69;
  uint64_t v71 = GenericQueryModel.getFormattedValueString(inputValue:)(*(void *)v48, *(unsigned char *)(v48 + 8));
  uint64_t v73 = v72;
  uint64_t v74 = v101;
  swift_bridgeObjectRelease();
  *uint64_t v74 = v71;
  v74[1] = v73;
  uint64_t v75 = GenericQueryModel.getFormattedValueString(inputValue:)(*(void *)v52, *(unsigned char *)(v52 + 8));
  uint64_t v77 = v76;
  outlined destroy of Font.Design?(v105, &demangling cache variable for type metadata for SnippetHeaderModel?);
  outlined destroy of Font.Design?(v106, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(v107, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v78 = v104;
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v78 = v75;
  v78[1] = v77;
  return result;
}

uint64_t GenericQueryModel.createAppPunchout(url:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  unsigned int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL.absoluteString.getter();
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t outlined assign with copy of SpeakableString?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t GenericQueryModel.getFormattedValueString(inputValue:)(uint64_t a1, char a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Model = type metadata accessor for GenericQueryModel();
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v2 + *(int *)(Model + 72), (uint64_t)v7, &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v7, &demangling cache variable for type metadata for SnippetHeaderModel?);
    return 0;
  }
  char v11 = a2 & 1;
  uint64_t v12 = &v7[*(int *)(v9 + 24)];
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  swift_bridgeObjectRetain();
  outlined destroy of GenericQueryModel((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
  if (v14 == 0xD000000000000021 && v13 == 0x80000002618839C0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v14 == 0xD000000000000029 && v13 == 0x80000002618839F0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v14 == 0xD00000000000002ALL && v13 == 0x8000000261883A20
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v14 == 0xD000000000000029 && v13 == 0x8000000261883A50)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      return GenericQueryModel.roundUp(inputValue:)(a1, v11);
    }
  }
  return GenericQueryModel.formatWithCommas(inputValue:)(a1, v11);
}

uint64_t GenericQueryModel.roundUp(inputValue:)(uint64_t result, char a2)
{
  if (a2) {
    return 0;
  }
  uint64_t v2 = result;
  if (*(double *)&result <= 0.0) {
    return 0;
  }
  double v3 = trunc(*(double *)&result);
  if (*(double *)&result <= -9.22337204e18 || *(double *)&result >= 9.22337204e18 || v3 != *(double *)&result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = MEMORY[0x263F8D538];
    *(_OWORD *)(v6 + 16) = xmmword_2618795C0;
    uint64_t v8 = MEMORY[0x263F8D5B8];
    *(void *)(v6 + 56) = v7;
    *(void *)(v6 + 64) = v8;
    *(void *)(v6 + 32) = v2;
    uint64_t v9 = String.init(format:arguments:)();
    swift_bridgeObjectRelease();
    return v9;
  }
  if ((~result & 0x7FF0000000000000) != 0) {
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
  __break(1u);
  return result;
}

uint64_t GenericQueryModel.formatWithCommas(inputValue:)(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0 || *(double *)&a1 <= 0.0) {
    return 0;
  }
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08A30]), sel_init);
  objc_msgSend(v3, sel_setNumberStyle_, 1);
  objc_msgSend(v3, sel_setMaximumFractionDigits_, 1);
  id v4 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, *(double *)&a1);
  id v5 = objc_msgSend(v3, sel_stringFromNumber_, v4);

  if (v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {

    return 0;
  }
  return v6;
}

uint64_t GenericQueryModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x68636E7550707061;
  switch(a1)
  {
    case 1:
      return 0x5665676172657661;
    case 2:
      unsigned int v3 = 1450729837;
      return v3 | 0x65756C6100000000;
    case 3:
      unsigned int v3 = 1450076525;
      return v3 | 0x65756C6100000000;
    case 4:
      return 0x6563655274736F6DLL;
    case 5:
      return 0x6C61566C61746F74;
    case 6:
      return 0x6562614C65746164;
    case 7:
    case 13:
    case 14:
      return 0xD000000000000012;
    case 8:
      unsigned int v4 = 1450729837;
      goto LABEL_11;
    case 9:
      unsigned int v4 = 1450076525;
LABEL_11:
      uint64_t result = v4 | 0x65756C6100000000;
      break;
    case 10:
      uint64_t result = 0xD000000000000015;
      break;
    case 11:
      uint64_t result = 0xD000000000000010;
      break;
    case 12:
      uint64_t result = 1953066613;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GenericQueryModel.CodingKeys()
{
  return GenericQueryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GenericQueryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized GenericQueryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GenericQueryModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 15;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GenericQueryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GenericQueryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t GenericQueryModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GenericQueryModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for AppPunchout();
  _s10SnippetKit11AppPunchoutVACSEAAWlTm_1(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for GenericQueryModel();
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[9] = 6;
    type metadata accessor for SpeakableString();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_1(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[6] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[5] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[4] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[3] = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[2] = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[1] = 14;
    type metadata accessor for SnippetHeaderModel();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_1(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys);
  }
  return result;
}

uint64_t GenericQueryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v107 = a1;
  uint64_t v88 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v89 = (uint64_t)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v100 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v101 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GenericQueryModel.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v102 = v8;
  uint64_t v103 = v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v106 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Model = type metadata accessor for GenericQueryModel();
  uint64_t v12 = (int *)(Model - 8);
  MEMORY[0x270FA5388](Model);
  uint64_t v14 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AppPunchout();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v99 = v15;
  v16(v14, 1, 1);
  uint64_t v17 = &v14[v12[7]];
  *(void *)uint64_t v17 = 0;
  uint64_t v98 = v17;
  v17[8] = 1;
  uint64_t v18 = &v14[v12[8]];
  *(void *)uint64_t v18 = 0;
  uint64_t v97 = (uint64_t *)v18;
  v18[8] = 1;
  uint64_t v19 = &v14[v12[9]];
  *(void *)uint64_t v19 = 0;
  uint64_t v96 = (uint64_t *)v19;
  v19[8] = 1;
  uint64_t v20 = &v14[v12[10]];
  *(void *)uint64_t v20 = 0;
  int v95 = (uint64_t *)v20;
  v20[8] = 1;
  BOOL v21 = &v14[v12[11]];
  *(void *)BOOL v21 = 0;
  BOOL v93 = (uint64_t *)v21;
  v21[8] = 1;
  uint64_t v22 = (uint64_t)&v14[v12[12]];
  uint64_t v23 = type metadata accessor for SpeakableString();
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  uint64_t v92 = v22;
  uint64_t v94 = v23;
  v24(v22, 1, 1);
  uint64_t v25 = &v14[v12[13]];
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = 0;
  uint64_t v91 = v25;
  uint64_t v26 = &v14[v12[14]];
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = 0;
  uint64_t v90 = v26;
  uint64_t v27 = &v14[v12[15]];
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = 0;
  uint64_t v28 = &v14[v12[16]];
  *(void *)uint64_t v28 = 0;
  *((void *)v28 + 1) = 0;
  uint64_t v29 = &v14[v12[17]];
  *(void *)uint64_t v29 = 0;
  *((void *)v29 + 1) = 0;
  uint64_t v30 = (uint64_t *)&v14[v12[18]];
  uint64_t *v30 = 0;
  v30[1] = 0;
  uint64_t v31 = (uint64_t *)&v14[v12[19]];
  uint64_t *v31 = 0;
  v31[1] = 0;
  uint64_t v32 = v12[20];
  uint64_t v105 = v14;
  uint64_t v33 = (uint64_t)&v14[v32];
  uint64_t v34 = type metadata accessor for SnippetHeaderModel();
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56);
  uint64_t v87 = v33;
  v35(v33, 1, 1, v34);
  __swift_project_boxed_opaque_existential_1(v107, v107[3]);
  lazy protocol witness table accessor for type GenericQueryModel.CodingKeys and conformance GenericQueryModel.CodingKeys();
  uint64_t v36 = v104;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v36)
  {
    uint64_t v83 = (uint64_t)v105;
  }
  else
  {
    uint64_t v37 = v98;
    uint64_t v104 = v27;
    BOOL v86 = v28;
    uint64_t v38 = (uint64_t)v100;
    int v85 = v29;
    uint64_t v84 = v34;
    uint64_t v39 = v103;
    char v122 = 0;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_1(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    uint64_t v40 = (uint64_t)v101;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v40, (uint64_t)v105, &demangling cache variable for type metadata for AppPunchout?);
    char v121 = 1;
    *(void *)uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v37[8] = v42 & 1;
    char v120 = 2;
    uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v44 = v97;
    uint64_t *v97 = v43;
    *((unsigned char *)v44 + 8) = v45 & 1;
    char v119 = 3;
    uint64_t v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v47 = v96;
    *uint64_t v96 = v46;
    *((unsigned char *)v47 + 8) = v48 & 1;
    char v118 = 4;
    uint64_t v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    BOOL v50 = v95;
    uint64_t *v95 = v49;
    *((unsigned char *)v50 + 8) = v51 & 1;
    char v117 = 5;
    uint64_t v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v53 = v93;
    *BOOL v93 = v52;
    *((unsigned char *)v53 + 8) = v54 & 1;
    char v116 = 6;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_1(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v38, v92, &demangling cache variable for type metadata for SpeakableString?);
    char v115 = 7;
    uint64_t v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v57 = v56;
    uint64_t v58 = (uint64_t *)v91;
    swift_bridgeObjectRelease();
    *uint64_t v58 = v55;
    v58[1] = v57;
    char v114 = 8;
    uint64_t v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v61 = v60;
    uint64_t v62 = (uint64_t *)v90;
    swift_bridgeObjectRelease();
    *uint64_t v62 = v59;
    v62[1] = v61;
    char v113 = 9;
    uint64_t v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v65 = v64;
    uint64_t v66 = (uint64_t *)v104;
    swift_bridgeObjectRelease();
    *uint64_t v66 = v63;
    v66[1] = v65;
    char v112 = 10;
    uint64_t v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v69 = v68;
    uint64_t v70 = (uint64_t *)v86;
    swift_bridgeObjectRelease();
    uint64_t *v70 = v67;
    v70[1] = v69;
    char v111 = 11;
    uint64_t v71 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v73 = v72;
    uint64_t v74 = (uint64_t *)v85;
    swift_bridgeObjectRelease();
    *uint64_t v74 = v71;
    v74[1] = v73;
    char v110 = 12;
    uint64_t v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v77 = v76;
    swift_bridgeObjectRelease();
    uint64_t *v30 = v75;
    v30[1] = v77;
    char v109 = 13;
    uint64_t v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v80 = v79;
    swift_bridgeObjectRelease();
    uint64_t *v31 = v78;
    v31[1] = v80;
    char v108 = 14;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_1(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v81 = v102;
    uint64_t v82 = v106;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v82, v81);
    uint64_t v83 = (uint64_t)v105;
    outlined assign with take of AppPunchout?(v89, v87, &demangling cache variable for type metadata for SnippetHeaderModel?);
    outlined init with copy of GenericQueryModel(v83, v88);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v107);
  return outlined destroy of GenericQueryModel(v83, (uint64_t (*)(void))type metadata accessor for GenericQueryModel);
}

uint64_t outlined init with copy of GenericQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for GenericQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t base witness table accessor for Decodable in GenericQueryModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_1(&lazy protocol witness table cache variable for type GenericQueryModel and conformance GenericQueryModel, (void (*)(uint64_t))type metadata accessor for GenericQueryModel);
}

uint64_t base witness table accessor for Encodable in GenericQueryModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_1(&lazy protocol witness table cache variable for type GenericQueryModel and conformance GenericQueryModel, (void (*)(uint64_t))type metadata accessor for GenericQueryModel);
}

uint64_t _s10SnippetKit11AppPunchoutVACSEAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GenericQueryModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GenericQueryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GenericQueryModel(void *a1)
{
  return GenericQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for GenericQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    uint64_t v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = a3[7];
    uint64_t v18 = a3[8];
    uint64_t v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    BOOL v21 = (char *)a1 + v18;
    uint64_t v22 = (char *)a2 + v18;
    *(void *)BOOL v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = a3[9];
    uint64_t v24 = a3[10];
    uint64_t v25 = (char *)a1 + v23;
    uint64_t v26 = (char *)a2 + v23;
    v25[8] = v26[8];
    *(void *)uint64_t v25 = *(void *)v26;
    uint64_t v27 = (char *)a1 + v24;
    uint64_t v28 = (char *)a2 + v24;
    uint64_t v29 = type metadata accessor for SpeakableString();
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v74 = v30;
    uint64_t v75 = v29;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    uint64_t v32 = a3[11];
    uint64_t v33 = a3[12];
    uint64_t v34 = (uint64_t *)((char *)a1 + v32);
    uint64_t v35 = (uint64_t *)((char *)a2 + v32);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = (uint64_t *)((char *)a1 + v33);
    uint64_t v38 = (uint64_t *)((char *)a2 + v33);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    uint64_t v40 = a3[13];
    uint64_t v41 = a3[14];
    char v42 = (uint64_t *)((char *)a1 + v40);
    uint64_t v43 = (uint64_t *)((char *)a2 + v40);
    uint64_t v44 = v43[1];
    *char v42 = *v43;
    v42[1] = v44;
    char v45 = (uint64_t *)((char *)a1 + v41);
    uint64_t v46 = (uint64_t *)((char *)a2 + v41);
    uint64_t v47 = v46[1];
    *char v45 = *v46;
    v45[1] = v47;
    uint64_t v48 = a3[15];
    uint64_t v49 = a3[16];
    BOOL v50 = (uint64_t *)((char *)a1 + v48);
    char v51 = (uint64_t *)((char *)a2 + v48);
    uint64_t v52 = v51[1];
    void *v50 = *v51;
    v50[1] = v52;
    uint64_t v53 = (uint64_t *)((char *)a1 + v49);
    char v54 = (uint64_t *)((char *)a2 + v49);
    uint64_t v55 = v54[1];
    *uint64_t v53 = *v54;
    v53[1] = v55;
    uint64_t v56 = a3[17];
    uint64_t v57 = a3[18];
    uint64_t v58 = (uint64_t *)((char *)a1 + v56);
    uint64_t v59 = (uint64_t *)((char *)a2 + v56);
    uint64_t v60 = v59[1];
    uint64_t v77 = (char *)a2 + v57;
    __dst = (char *)a1 + v57;
    *uint64_t v58 = *v59;
    v58[1] = v60;
    uint64_t v61 = type metadata accessor for SnippetHeaderModel();
    uint64_t v73 = *(void *)(v61 - 8);
    uint64_t v76 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v76(v77, 1, v61))
    {
      uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v77, *(void *)(*(void *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(__dst, v77, v75);
      uint64_t v63 = *(int *)(v61 + 20);
      uint64_t v64 = &__dst[v63];
      uint64_t v65 = &v77[v63];
      uint64_t v66 = *((void *)v65 + 1);
      *(void *)uint64_t v64 = *(void *)v65;
      *((void *)v64 + 1) = v66;
      uint64_t v67 = *(int *)(v61 + 24);
      uint64_t v68 = &__dst[v67];
      uint64_t v69 = &v77[v67];
      uint64_t v70 = *((void *)v69 + 1);
      *(void *)uint64_t v68 = *(void *)v69;
      *((void *)v68 + 1) = v70;
      uint64_t v71 = *(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v71(__dst, 0, 1, v61);
    }
  }
  return a1;
}

uint64_t destroy for GenericQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t v7 = type metadata accessor for SpeakableString();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + *(int *)(a2 + 72);
  uint64_t v10 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  if (!result)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  v23[8] = v24[8];
  *(void *)uint64_t v23 = *(void *)v24;
  uint64_t v25 = &a1[v22];
  uint64_t v26 = &a2[v22];
  uint64_t v27 = type metadata accessor for SpeakableString();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v72 = v28;
  uint64_t v73 = v27;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = a3[11];
  uint64_t v31 = a3[12];
  uint64_t v32 = &a1[v30];
  uint64_t v33 = &a2[v30];
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = v34;
  uint64_t v35 = &a1[v31];
  uint64_t v36 = &a2[v31];
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = v37;
  uint64_t v38 = a3[13];
  uint64_t v39 = a3[14];
  uint64_t v40 = &a1[v38];
  uint64_t v41 = &a2[v38];
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = v42;
  uint64_t v43 = &a1[v39];
  uint64_t v44 = &a2[v39];
  uint64_t v45 = *((void *)v44 + 1);
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = v45;
  uint64_t v46 = a3[15];
  uint64_t v47 = a3[16];
  uint64_t v48 = &a1[v46];
  uint64_t v49 = &a2[v46];
  uint64_t v50 = *((void *)v49 + 1);
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = v50;
  char v51 = &a1[v47];
  uint64_t v52 = &a2[v47];
  uint64_t v53 = *((void *)v52 + 1);
  *(void *)char v51 = *(void *)v52;
  *((void *)v51 + 1) = v53;
  uint64_t v54 = a3[17];
  uint64_t v55 = a3[18];
  uint64_t v56 = &a1[v54];
  uint64_t v57 = &a2[v54];
  uint64_t v58 = *((void *)v57 + 1);
  uint64_t v75 = &a2[v55];
  __dst = &a1[v55];
  *(void *)uint64_t v56 = *(void *)v57;
  *((void *)v56 + 1) = v58;
  uint64_t v59 = type metadata accessor for SnippetHeaderModel();
  uint64_t v71 = *(void *)(v59 - 8);
  uint64_t v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v74(v75, 1, v59))
  {
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v75, *(void *)(*(void *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(__dst, v75, v73);
    uint64_t v61 = *(int *)(v59 + 20);
    uint64_t v62 = &__dst[v61];
    uint64_t v63 = &v75[v61];
    uint64_t v64 = *((void *)v63 + 1);
    *(void *)uint64_t v62 = *(void *)v63;
    *((void *)v62 + 1) = v64;
    uint64_t v65 = *(int *)(v59 + 24);
    uint64_t v66 = &__dst[v65];
    uint64_t v67 = &v75[v65];
    uint64_t v68 = *((void *)v67 + 1);
    *(void *)uint64_t v66 = *(void *)v67;
    *((void *)v66 + 1) = v68;
    uint64_t v69 = *(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v69(__dst, 0, 1, v59);
  }
  return a1;
}

char *assignWithCopy for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = v15;
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = a3[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)uint64_t v21 = v23;
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)uint64_t v25 = v27;
  uint64_t v28 = a3[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = *(void *)v30;
  v29[8] = v30[8];
  *(void *)uint64_t v29 = v31;
  uint64_t v32 = a3[10];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v35 = type metadata accessor for SpeakableString();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_12:
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
LABEL_13:
  uint64_t v41 = a3[11];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[12];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = *((void *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[13];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = *((void *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = a3[14];
  char v51 = &a1[v50];
  uint64_t v52 = &a2[v50];
  *(void *)char v51 = *(void *)v52;
  *((void *)v51 + 1) = *((void *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[15];
  uint64_t v54 = &a1[v53];
  uint64_t v55 = &a2[v53];
  *(void *)uint64_t v54 = *(void *)v55;
  *((void *)v54 + 1) = *((void *)v55 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[16];
  uint64_t v57 = &a1[v56];
  uint64_t v58 = &a2[v56];
  *(void *)uint64_t v57 = *(void *)v58;
  *((void *)v57 + 1) = *((void *)v58 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[17];
  uint64_t v60 = &a1[v59];
  uint64_t v61 = &a2[v59];
  *(void *)uint64_t v60 = *(void *)v61;
  *((void *)v60 + 1) = *((void *)v61 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v62 = a3[18];
  uint64_t v63 = &a1[v62];
  uint64_t v64 = &a2[v62];
  uint64_t v65 = type metadata accessor for SnippetHeaderModel();
  uint64_t v66 = *(void *)(v65 - 8);
  uint64_t v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
  int v68 = v67(v63, 1, v65);
  int v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v63, v64, v35);
      uint64_t v79 = *(int *)(v65 + 20);
      uint64_t v80 = &v63[v79];
      uint64_t v81 = &v64[v79];
      *(void *)uint64_t v80 = *(void *)v81;
      *((void *)v80 + 1) = *((void *)v81 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v82 = *(int *)(v65 + 24);
      uint64_t v83 = &v63[v82];
      uint64_t v84 = &v64[v82];
      *(void *)uint64_t v83 = *(void *)v84;
      *((void *)v83 + 1) = *((void *)v84 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericQueryModel((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v69)
  {
LABEL_18:
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v63, v64, *(void *)(*(void *)(v77 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v63, v64, v35);
  uint64_t v70 = *(int *)(v65 + 20);
  uint64_t v71 = &v63[v70];
  uint64_t v72 = &v64[v70];
  *(void *)uint64_t v71 = *(void *)v72;
  *((void *)v71 + 1) = *((void *)v72 + 1);
  uint64_t v73 = *(int *)(v65 + 24);
  uint64_t v74 = &v63[v73];
  uint64_t v75 = &v64[v73];
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = *((void *)v75 + 1);
  uint64_t v76 = *(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v76(v63, 0, 1, v65);
  return a1;
}

uint64_t outlined destroy of GenericQueryModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  v23[8] = v24[8];
  *(void *)uint64_t v23 = *(void *)v24;
  uint64_t v25 = &a1[v22];
  uint64_t v26 = &a2[v22];
  uint64_t v27 = type metadata accessor for SpeakableString();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v30] = *(_OWORD *)&a2[v30];
  uint64_t v31 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)&a1[v31] = *(_OWORD *)&a2[v31];
  uint64_t v32 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  *(_OWORD *)&a1[v32] = *(_OWORD *)&a2[v32];
  uint64_t v33 = a3[17];
  uint64_t v34 = a3[18];
  long long v35 = *(_OWORD *)&a2[v33];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = &a1[v34];
  *(_OWORD *)&a1[v33] = v35;
  uint64_t v38 = type metadata accessor for SnippetHeaderModel();
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38))
  {
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v37, v36, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v37, v36, v27);
    *(_OWORD *)&v37[*(int *)(v38 + 20)] = *(_OWORD *)&v36[*(int *)(v38 + 20)];
    *(_OWORD *)&v37[*(int *)(v38 + 24)] = *(_OWORD *)&v36[*(int *)(v38 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v37, 0, 1, v38);
  }
  return a1;
}

char *assignWithTake for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = &a1[v13];
  uint64_t v17 = &a2[v13];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = a3[9];
  uint64_t v25 = a3[10];
  uint64_t v26 = &a1[v24];
  uint64_t v27 = &a2[v24];
  v26[8] = v27[8];
  *(void *)uint64_t v26 = *(void *)v27;
  uint64_t v28 = &a1[v25];
  uint64_t v29 = &a2[v25];
  uint64_t v30 = type metadata accessor for SpeakableString();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
LABEL_12:
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v28, v29, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v28, v29, v30);
LABEL_13:
  uint64_t v36 = a3[11];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  uint64_t v40 = *(void *)v38;
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = v40;
  *((void *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[12];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  uint64_t v45 = *(void *)v43;
  uint64_t v44 = *((void *)v43 + 1);
  *(void *)uint64_t v42 = v45;
  *((void *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[13];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  uint64_t v50 = *(void *)v48;
  uint64_t v49 = *((void *)v48 + 1);
  *(void *)uint64_t v47 = v50;
  *((void *)v47 + 1) = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[14];
  uint64_t v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  uint64_t v55 = *(void *)v53;
  uint64_t v54 = *((void *)v53 + 1);
  *(void *)uint64_t v52 = v55;
  *((void *)v52 + 1) = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[15];
  uint64_t v57 = &a1[v56];
  uint64_t v58 = &a2[v56];
  uint64_t v60 = *(void *)v58;
  uint64_t v59 = *((void *)v58 + 1);
  *(void *)uint64_t v57 = v60;
  *((void *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
  uint64_t v61 = a3[16];
  uint64_t v62 = &a1[v61];
  uint64_t v63 = &a2[v61];
  uint64_t v65 = *(void *)v63;
  uint64_t v64 = *((void *)v63 + 1);
  *(void *)uint64_t v62 = v65;
  *((void *)v62 + 1) = v64;
  swift_bridgeObjectRelease();
  uint64_t v66 = a3[17];
  uint64_t v67 = &a1[v66];
  int v68 = &a2[v66];
  uint64_t v70 = *(void *)v68;
  uint64_t v69 = *((void *)v68 + 1);
  *(void *)uint64_t v67 = v70;
  *((void *)v67 + 1) = v69;
  swift_bridgeObjectRelease();
  uint64_t v71 = a3[18];
  uint64_t v72 = &a1[v71];
  uint64_t v73 = &a2[v71];
  uint64_t v74 = type metadata accessor for SnippetHeaderModel();
  uint64_t v75 = *(void *)(v74 - 8);
  uint64_t v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48);
  int v77 = v76(v72, 1, v74);
  int v78 = v76(v73, 1, v74);
  if (!v77)
  {
    if (!v78)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v72, v73, v30);
      uint64_t v81 = *(int *)(v74 + 20);
      uint64_t v82 = &v72[v81];
      uint64_t v83 = &v73[v81];
      uint64_t v85 = *(void *)v83;
      uint64_t v84 = *((void *)v83 + 1);
      *(void *)uint64_t v82 = v85;
      *((void *)v82 + 1) = v84;
      swift_bridgeObjectRelease();
      uint64_t v86 = *(int *)(v74 + 24);
      uint64_t v87 = &v72[v86];
      uint64_t v88 = &v73[v86];
      uint64_t v90 = *(void *)v88;
      uint64_t v89 = *((void *)v88 + 1);
      *(void *)uint64_t v87 = v90;
      *((void *)v87 + 1) = v89;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of GenericQueryModel((uint64_t)v72, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v78)
  {
LABEL_18:
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v72, v73, *(void *)(*(void *)(v79 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v72, v73, v30);
  *(_OWORD *)&v72[*(int *)(v74 + 20)] = *(_OWORD *)&v73[*(int *)(v74 + 20)];
  *(_OWORD *)&v72[*(int *)(v74 + 24)] = *(_OWORD *)&v73[*(int *)(v74 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_26180D9FC);
}

uint64_t sub_26180D9FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[10];
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 2147483646)
  {
    unint64_t v14 = *(void *)(a1 + a3[11] + 8);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 - 1;
    if (v15 < 0) {
      int v15 = -1;
    }
    return (v15 + 1);
  }
  else
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[18];
    return v17(v19, a2, v18);
  }
}

uint64_t storeEnumTagSinglePayload for GenericQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_26180DBAC);
}

uint64_t sub_26180DBAC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[10];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[11] + 8) = a2;
  }
  else
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[18];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void type metadata completion function for GenericQueryModel()
{
  _s10SnippetKit11AppPunchoutVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, MEMORY[0x263F762C0]);
  if (v0 <= 0x3F)
  {
    _s10SnippetKit11AppPunchoutVSgMaTm_0(319, &lazy cache variable for type metadata for SpeakableString?, MEMORY[0x263F6D0A0]);
    if (v1 <= 0x3F)
    {
      _s10SnippetKit11AppPunchoutVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void _s10SnippetKit11AppPunchoutVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for GenericQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GenericQueryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *uint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x26180E068);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

void *type metadata accessor for GenericQueryModel.CodingKeys()
{
  return &unk_270D86AA0;
}

uint64_t specialized GenericQueryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5665676172657661 && a2 == 0xEC00000065756C61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6563655274736F6DLL && a2 == 0xEF65756C6156746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C61566C61746F74 && a2 == 0xEA00000000006575 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883940 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000261883960 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000261883980 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 1953066613 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002618839A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883800)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 14;
    }
    else {
      return 15;
    }
  }
}

uint64_t HealthDataLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t HealthDataLogModel.snippetHeaderModel.setter(uint64_t a1)
{
  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*HealthDataLogModel.snippetHeaderModel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.date.getter()
{
  type metadata accessor for HealthDataLogModel();

  return swift_retain();
}

uint64_t type metadata accessor for HealthDataLogModel()
{
  uint64_t result = type metadata singleton initialization cache for HealthDataLogModel;
  if (!type metadata singleton initialization cache for HealthDataLogModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t HealthDataLogModel.date.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for HealthDataLogModel() + 20);
  uint64_t result = swift_release();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*HealthDataLogModel.date.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.dateLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for HealthDataLogModel() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HealthDataLogModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for HealthDataLogModel() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HealthDataLogModel.dateLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.timeLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for HealthDataLogModel() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HealthDataLogModel.timeLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for HealthDataLogModel() + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HealthDataLogModel.timeLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.unitLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for HealthDataLogModel() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HealthDataLogModel.unitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for HealthDataLogModel() + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HealthDataLogModel.unitLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.dataLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for HealthDataLogModel() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HealthDataLogModel.dataLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for HealthDataLogModel() + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HealthDataLogModel.dataLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for HealthDataLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 40), a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t HealthDataLogModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for HealthDataLogModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(v3 + 40), &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*HealthDataLogModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.loggedLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for HealthDataLogModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HealthDataLogModel.loggedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for HealthDataLogModel() + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HealthDataLogModel.loggedLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HealthDataLogModel.init(snippetHeaderModel:date:unitLabel:dataValue:url:loggedButtonLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v68 = a8;
  uint64_t v66 = a7;
  uint64_t v58 = a4;
  uint64_t v59 = a5;
  uint64_t v57 = a3;
  int v56 = a6 & 1;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v65 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v55 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v55 - v18;
  uint64_t v20 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a9, 1, 1, v20);
  uint64_t v21 = (int *)type metadata accessor for HealthDataLogModel();
  uint64_t v22 = v21[5];
  *(void *)(a9 + v22) = 0;
  uint64_t v23 = (uint64_t *)(a9 + v21[6]);
  *uint64_t v23 = 0;
  v23[1] = 0;
  uint64_t v24 = (uint64_t *)(a9 + v21[7]);
  uint64_t *v24 = 0;
  v24[1] = 0;
  uint64_t v60 = v24;
  uint64_t v25 = (void *)(a9 + v21[8]);
  void *v25 = 0;
  v25[1] = 0;
  uint64_t v26 = (uint64_t *)(a9 + v21[9]);
  uint64_t *v26 = 0;
  v26[1] = 0;
  uint64_t v27 = a9 + v21[10];
  uint64_t v28 = type metadata accessor for AppPunchout();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56);
  uint64_t v63 = v28;
  uint64_t v64 = v27;
  uint64_t v61 = v29 + 56;
  uint64_t v62 = v30;
  ((void (*)(uint64_t, uint64_t, uint64_t))v30)(v27, 1, 1);
  uint64_t v31 = (void *)(a9 + v21[11]);
  void *v31 = 0;
  v31[1] = 0;
  uint64_t v67 = a1;
  outlined assign with copy of SnippetHeaderModel?(a1, a9);
  *(void *)(a9 + v22) = a2;
  swift_retain();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v33 = v58;
  uint64_t v32 = v59;
  void *v25 = v57;
  v25[1] = v33;
  uint64_t v34 = HealthDataLogModel.getFormattedValueString(inputValue:)(v32, v56);
  uint64_t v36 = v35;
  swift_bridgeObjectRelease();
  uint64_t *v26 = v34;
  v26[1] = v36;
  if (a2)
  {
    swift_retain();
    dispatch thunk of DialogCalendar.dateDescriptive.getter();
    swift_release();
    uint64_t v37 = type metadata accessor for SpeakableString();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v19, 1, v37) == 1)
    {
      outlined destroy of Font.Design?((uint64_t)v19, &demangling cache variable for type metadata for SpeakableString?);
      uint64_t v39 = 0;
      uint64_t v40 = 0;
    }
    else
    {
      uint64_t v41 = SpeakableString.print.getter();
      uint64_t v43 = v42;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v37);
      uint64_t v69 = v41;
      uint64_t v70 = v43;
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v39 = StringProtocol.capitalized.getter();
      uint64_t v40 = v44;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
  }
  swift_bridgeObjectRelease();
  *uint64_t v23 = v39;
  v23[1] = v40;
  uint64_t v45 = *(void *)(a9 + v22);
  if (v45)
  {
    swift_retain();
    uint64_t v46 = (uint64_t)v55;
    dispatch thunk of DialogCalendar.timeDescriptive.getter();
    swift_release();
    uint64_t v47 = type metadata accessor for SpeakableString();
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47) != 1)
    {
      uint64_t v45 = SpeakableString.print.getter();
      uint64_t v49 = v50;
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
      goto LABEL_11;
    }
    outlined destroy of Font.Design?(v46, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v45 = 0;
  }
  uint64_t v49 = 0;
LABEL_11:
  uint64_t v51 = v60;
  swift_bridgeObjectRelease();
  *uint64_t v51 = v45;
  v51[1] = v49;
  uint64_t v53 = (uint64_t)v65;
  uint64_t v52 = v66;
  HealthDataLogModel.createAppPunchout(url:)(v66);
  swift_release();
  outlined destroy of Font.Design?(v52, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(v67, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v62(v53, 0, 1, v63);
  outlined assign with take of AppPunchout?(v53, v64, &demangling cache variable for type metadata for AppPunchout?);
  uint64_t result = swift_bridgeObjectRelease();
  void *v31 = v68;
  v31[1] = a10;
  return result;
}

uint64_t outlined assign with copy of SnippetHeaderModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t HealthDataLogModel.getFormattedValueString(inputValue:)(uint64_t result, char a2)
{
  if (a2) {
    return 0;
  }
  uint64_t v2 = result;
  double v3 = trunc(*(double *)&result);
  if (*(double *)&result <= -9.22337204e18 || *(double *)&result >= 9.22337204e18 || v3 != *(double *)&result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = MEMORY[0x263F8D538];
    *(_OWORD *)(v6 + 16) = xmmword_2618795C0;
    uint64_t v8 = MEMORY[0x263F8D5B8];
    *(void *)(v6 + 56) = v7;
    *(void *)(v6 + 64) = v8;
    *(void *)(v6 + 32) = v2;
    uint64_t v9 = String.init(format:arguments:)();
    swift_bridgeObjectRelease();
    return v9;
  }
  if ((~result & 0x7FF0000000000000) != 0) {
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
  __break(1u);
  return result;
}

uint64_t HealthDataLogModel.createAppPunchout(url:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL.absoluteString.getter();
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t HealthDataLogModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      return 1702125924;
    case 2:
      unsigned int v3 = 1702125924;
      goto LABEL_7;
    case 3:
      unsigned int v3 = 1701669236;
      goto LABEL_7;
    case 4:
      unsigned int v3 = 1953066613;
      goto LABEL_7;
    case 5:
      unsigned int v3 = 1635017060;
LABEL_7:
      uint64_t result = v3 | 0x6562614C00000000;
      break;
    case 6:
      uint64_t result = 0x68636E7550707061;
      break;
    case 7:
      uint64_t result = 0x614C646567676F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance HealthDataLogModel.CodingKeys()
{
  return HealthDataLogModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance HealthDataLogModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized HealthDataLogModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance HealthDataLogModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HealthDataLogModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HealthDataLogModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t HealthDataLogModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<HealthDataLogModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for SnippetHeaderModel();
  lazy protocol witness table accessor for type SnippetHeaderModel and conformance SnippetHeaderModel(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + *(int *)(type metadata accessor for HealthDataLogModel() + 20));
    v10[7] = 1;
    type metadata accessor for DialogCalendar();
    lazy protocol witness table accessor for type SnippetHeaderModel and conformance SnippetHeaderModel(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, MEMORY[0x263F6D000]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 6;
    type metadata accessor for AppPunchout();
    lazy protocol witness table accessor for type SnippetHeaderModel and conformance SnippetHeaderModel(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys);
  }
  return result;
}

uint64_t HealthDataLogModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v66 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v70 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<HealthDataLogModel.CodingKeys>);
  uint64_t v69 = *(void *)(v71 - 8);
  MEMORY[0x270FA5388](v71);
  uint64_t v75 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for HealthDataLogModel();
  uint64_t v9 = (int *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SnippetHeaderModel();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  uint64_t v68 = v12;
  v13(v11, 1, 1);
  uint64_t v67 = v9[7];
  *(void *)&v11[v67] = 0;
  uint64_t v14 = &v11[v9[8]];
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  uint64_t v15 = &v11[v9[9]];
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  uint64_t v16 = &v11[v9[10]];
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  uint64_t v17 = &v11[v9[11]];
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  uint64_t v18 = (uint64_t)&v11[v9[12]];
  uint64_t v19 = type metadata accessor for AppPunchout();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  uint64_t v65 = v18;
  v20(v18, 1, 1, v19);
  uint64_t v21 = v9[13];
  uint64_t v74 = v11;
  uint64_t v22 = &v11[v21];
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  uint64_t v23 = a1;
  uint64_t v24 = a1[3];
  uint64_t v72 = v23;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  lazy protocol witness table accessor for type HealthDataLogModel.CodingKeys and conformance HealthDataLogModel.CodingKeys();
  uint64_t v25 = v73;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25)
  {
    uint64_t v26 = (uint64_t)v74;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v72);
    return outlined destroy of HealthDataLogModel(v26, (uint64_t (*)(void))type metadata accessor for HealthDataLogModel);
  }
  else
  {
    uint64_t v27 = v67;
    uint64_t v73 = v14;
    uint64_t v62 = v16;
    uint64_t v63 = v15;
    uint64_t v60 = v22;
    uint64_t v61 = v17;
    uint64_t v28 = v69;
    LOBYTE(v77) = 0;
    lazy protocol witness table accessor for type SnippetHeaderModel and conformance SnippetHeaderModel(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v29 = v70;
    uint64_t v30 = v75;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v31 = (uint64_t)v29;
    uint64_t v32 = (uint64_t)v74;
    outlined assign with take of AppPunchout?(v31, (uint64_t)v74, &demangling cache variable for type metadata for SnippetHeaderModel?);
    type metadata accessor for DialogCalendar();
    char v76 = 1;
    lazy protocol witness table accessor for type SnippetHeaderModel and conformance SnippetHeaderModel(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, MEMORY[0x263F6D000]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v33 = v77;
    swift_release();
    *(void *)(v32 + v27) = v33;
    LOBYTE(v77) = 2;
    uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v36 = v35;
    uint64_t v37 = (uint64_t *)v73;
    swift_bridgeObjectRelease();
    *uint64_t v37 = v34;
    v37[1] = v36;
    LOBYTE(v77) = 3;
    uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v41 = v40;
    uint64_t v42 = (uint64_t *)v63;
    swift_bridgeObjectRelease();
    *uint64_t v42 = v39;
    v42[1] = v41;
    LOBYTE(v77) = 4;
    uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v45 = v44;
    uint64_t v46 = (uint64_t *)v62;
    swift_bridgeObjectRelease();
    uint64_t *v46 = v43;
    v46[1] = v45;
    LOBYTE(v77) = 5;
    uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v49 = v48;
    uint64_t v50 = (uint64_t *)v61;
    swift_bridgeObjectRelease();
    uint64_t *v50 = v47;
    v50[1] = v49;
    LOBYTE(v77) = 6;
    lazy protocol witness table accessor for type SnippetHeaderModel and conformance SnippetHeaderModel(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    uint64_t v51 = (uint64_t)v66;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v51, v65, &demangling cache variable for type metadata for AppPunchout?);
    LOBYTE(v77) = 7;
    uint64_t v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v53 = (uint64_t)v72;
    uint64_t v54 = v52;
    uint64_t v56 = v55;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v71);
    uint64_t v57 = v60;
    swift_bridgeObjectRelease();
    *uint64_t v57 = v54;
    v57[1] = v56;
    uint64_t v58 = (uint64_t)v74;
    outlined init with copy of HealthDataLogModel((uint64_t)v74, v64);
    __swift_destroy_boxed_opaque_existential_1Tm(v53);
    return outlined destroy of HealthDataLogModel(v58, (uint64_t (*)(void))type metadata accessor for HealthDataLogModel);
  }
}

uint64_t outlined init with copy of HealthDataLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HealthDataLogModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Decodable in HealthDataLogModel()
{
  return lazy protocol witness table accessor for type SnippetHeaderModel and conformance SnippetHeaderModel(&lazy protocol witness table cache variable for type HealthDataLogModel and conformance HealthDataLogModel, (void (*)(uint64_t))type metadata accessor for HealthDataLogModel);
}

uint64_t base witness table accessor for Encodable in HealthDataLogModel()
{
  return lazy protocol witness table accessor for type SnippetHeaderModel and conformance SnippetHeaderModel(&lazy protocol witness table cache variable for type HealthDataLogModel and conformance HealthDataLogModel, (void (*)(uint64_t))type metadata accessor for HealthDataLogModel);
}

uint64_t lazy protocol witness table accessor for type SnippetHeaderModel and conformance SnippetHeaderModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance HealthDataLogModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return HealthDataLogModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HealthDataLogModel(void *a1)
{
  return HealthDataLogModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for HealthDataLogModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SnippetHeaderModel();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      uint64_t v12 = *(int *)(v7 + 20);
      uint64_t v13 = (uint64_t *)((char *)a1 + v12);
      uint64_t v14 = (uint64_t *)((char *)a2 + v12);
      uint64_t v15 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v15;
      uint64_t v16 = *(int *)(v7 + 24);
      uint64_t v17 = (uint64_t *)((char *)a1 + v16);
      uint64_t v18 = (uint64_t *)((char *)a2 + v16);
      uint64_t v19 = v18[1];
      *uint64_t v17 = *v18;
      v17[1] = v19;
      uint64_t v20 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20(a1, 0, 1, v7);
    }
    uint64_t v21 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v47 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v47;
    uint64_t v24 = a3[7];
    uint64_t v25 = a3[8];
    uint64_t v26 = (uint64_t *)((char *)a1 + v24);
    uint64_t v27 = (uint64_t *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    void *v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = (uint64_t *)((char *)a1 + v25);
    uint64_t v30 = (uint64_t *)((char *)a2 + v25);
    uint64_t v31 = v30[1];
    void *v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = a3[9];
    uint64_t v33 = a3[10];
    uint64_t v34 = (uint64_t *)((char *)a1 + v32);
    uint64_t v35 = (uint64_t *)((char *)a2 + v32);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    __dst = (char *)a1 + v33;
    uint64_t v37 = (char *)a2 + v33;
    uint64_t v38 = type metadata accessor for AppPunchout();
    uint64_t v39 = *(void *)(v38 - 8);
    uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v46(v37, 1, v38))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(__dst, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(__dst, v37, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(__dst, 0, 1, v38);
    }
    uint64_t v41 = a3[11];
    uint64_t v42 = (uint64_t *)((char *)a1 + v41);
    uint64_t v43 = (uint64_t *)((char *)a2 + v41);
    uint64_t v44 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v44;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for HealthDataLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    uint64_t v5 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t v7 = type metadata accessor for AppPunchout();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for HealthDataLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    uint64_t v10 = *(int *)(v6 + 20);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    uint64_t v14 = *(int *)(v6 + 24);
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    uint64_t v18 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18(a1, 0, 1, v6);
  }
  uint64_t v19 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = v22;
  uint64_t v23 = a3[7];
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v23];
  uint64_t v26 = &a2[v23];
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = v27;
  uint64_t v28 = &a1[v24];
  uint64_t v29 = &a2[v24];
  uint64_t v30 = *((void *)v29 + 1);
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = v30;
  uint64_t v31 = a3[9];
  uint64_t v32 = a3[10];
  uint64_t v33 = &a1[v31];
  uint64_t v34 = &a2[v31];
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = v35;
  __dst = &a1[v32];
  uint64_t v45 = &a2[v32];
  uint64_t v36 = type metadata accessor for AppPunchout();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v44(v45, 1, v36))
  {
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(__dst, v45, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(__dst, v45, v36);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v36);
  }
  uint64_t v39 = a3[11];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for HealthDataLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v11 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      uint64_t v12 = *(int *)(v6 + 20);
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      *(void *)uint64_t v13 = *(void *)v14;
      *((void *)v13 + 1) = *((void *)v14 + 1);
      uint64_t v15 = *(int *)(v6 + 24);
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      *((void *)v16 + 1) = *((void *)v17 + 1);
      uint64_t v18 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    outlined destroy of HealthDataLogModel((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v45 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 24))(a1, a2, v45);
  uint64_t v46 = *(int *)(v6 + 20);
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  *(void *)uint64_t v47 = *(void *)v48;
  *((void *)v47 + 1) = *((void *)v48 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v49 = *(int *)(v6 + 24);
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  *(void *)uint64_t v50 = *(void *)v51;
  *((void *)v50 + 1) = *((void *)v51 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  uint64_t v20 = a3[6];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[7];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  *((void *)v24 + 1) = *((void *)v25 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[8];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = *((void *)v28 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[9];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = *((void *)v31 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[10];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v35 = type metadata accessor for AppPunchout();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
    goto LABEL_12;
  }
  if (v39)
  {
LABEL_12:
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_13:
  uint64_t v41 = a3[11];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of HealthDataLogModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for HealthDataLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
    *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  uint64_t v11 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  uint64_t v12 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for AppPunchout();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  return a1;
}

char *assignWithTake for HealthDataLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v11 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
      *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
      *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    outlined destroy of HealthDataLogModel((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_6:
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v48 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 40))(a1, a2, v48);
  uint64_t v49 = *(int *)(v6 + 20);
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  uint64_t v53 = *(void *)v51;
  uint64_t v52 = *((void *)v51 + 1);
  *(void *)uint64_t v50 = v53;
  *((void *)v50 + 1) = v52;
  swift_bridgeObjectRelease();
  uint64_t v54 = *(int *)(v6 + 24);
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  uint64_t v58 = *(void *)v56;
  uint64_t v57 = *((void *)v56 + 1);
  *(void *)uint64_t v55 = v58;
  *((void *)v55 + 1) = v57;
  swift_bridgeObjectRelease();
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v17 = *(void *)v15;
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = v17;
  *((void *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v22 = *(void *)v20;
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = v22;
  *((void *)v19 + 1) = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v27 = *(void *)v25;
  uint64_t v26 = *((void *)v25 + 1);
  *(void *)uint64_t v24 = v27;
  *((void *)v24 + 1) = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v32 = *(void *)v30;
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = v32;
  *((void *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[10];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = type metadata accessor for AppPunchout();
  uint64_t v37 = *(void *)(v36 - 8);
  int v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (!v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v34, v35, v36);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v36);
    goto LABEL_12;
  }
  if (v40)
  {
LABEL_12:
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v34, v35, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
LABEL_13:
  uint64_t v42 = a3[11];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v46 = *(void *)v44;
  uint64_t v45 = *((void *)v44 + 1);
  *(void *)uint64_t v43 = v46;
  *((void *)v43 + 1) = v45;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HealthDataLogModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261811798);
}

uint64_t sub_261811798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 40);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for HealthDataLogModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2618118EC);
}

uint64_t sub_2618118EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 40);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for HealthDataLogModel()
{
  type metadata accessor for SnippetHeaderModel?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SnippetHeaderModel?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, MEMORY[0x263F762C0]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for SnippetHeaderModel?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for HealthDataLogModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HealthDataLogModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x261811CE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void *type metadata accessor for HealthDataLogModel.CodingKeys()
{
  return &unk_270D86B30;
}

uint64_t specialized HealthDataLogModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x8000000261883800
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6562614C656D6974 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6562614C74696E75 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6562614C61746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t GenericButtonSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for GenericButtonSnippet();
  return outlined init with copy of GenericButtonModel(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(void))type metadata accessor for GenericButtonModel);
}

uint64_t type metadata accessor for GenericButtonSnippet()
{
  uint64_t result = type metadata singleton initialization cache for GenericButtonSnippet;
  if (!type metadata singleton initialization cache for GenericButtonSnippet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t GenericButtonSnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ActionHandler.init()();
  uint64_t v4 = type metadata accessor for GenericButtonSnippet();
  return outlined init with take of GenericButtonModel(a1, a2 + *(int *)(v4 + 20), (uint64_t (*)(void))type metadata accessor for GenericButtonModel);
}

id GenericButtonSnippet.punchOutCommand.getter()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64EE0]), sel_init);
  type metadata accessor for GenericButtonSnippet();
  uint64_t v5 = type metadata accessor for GenericButtonModel();
  URL._bridgeToObjectiveC()((NSURL *)*(int *)(v5 + 20));
  BOOL v7 = v6;
  objc_msgSend(v4, sel_setPunchOutUri_, v6);

  id v8 = v4;
  UUID.init()();
  uint64_t v9 = UUID.uuidString.getter();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v12 = (void *)MEMORY[0x263E41CA0](v9, v11);
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setAceId_, v12);

  return v8;
}

uint64_t GenericButtonSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v21 = a1;
  uint64_t v3 = type metadata accessor for RFButtonStyle();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v19 = v3;
  uint64_t v20 = v4;
  MEMORY[0x270FA5388](v3);
  unsigned int v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for GenericButtonSnippet();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of GenericButtonModel(v1, (uint64_t)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for GenericButtonSnippet);
  unint64_t v14 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = swift_allocObject();
  outlined init with take of GenericButtonModel((uint64_t)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, (uint64_t (*)(void))type metadata accessor for GenericButtonSnippet);
  uint64_t v22 = v2;
  Button.init(action:label:)();
  static PrimitiveButtonStyle<>.rfButton.getter();
  lazy protocol witness table accessor for type Button<Text> and conformance Button<A>();
  lazy protocol witness table accessor for type RFButtonStyle and conformance RFButtonStyle();
  uint64_t v16 = v19;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t closure #1 in GenericButtonSnippet.body.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionProperty?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StandardActionHandler?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ActionProperty();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ActionElementConvertible>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_2618795C0;
  uint64_t v14 = type metadata accessor for Command();
  uint64_t v15 = MEMORY[0x263F771C0];
  *(void *)(v13 + 56) = v14;
  *(void *)(v13 + 64) = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 32));
  uint64_t *boxed_opaque_existential_1 = (uint64_t)GenericButtonSnippet.punchOutCommand.getter();
  *((unsigned char *)boxed_opaque_existential_1 + 8) = 1;
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v14 - 8) + 104))(boxed_opaque_existential_1, *MEMORY[0x263F77170], v14);
  ActionProperty.init(_:)();
  ActionHandler.wrappedValue.getter();
  uint64_t v17 = type metadata accessor for StandardActionHandler();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v8, 1, v17) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return outlined destroy of Font.Design?((uint64_t)v8, &demangling cache variable for type metadata for StandardActionHandler?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v5, v12, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v5, 0, 1, v9);
    uint64_t v20 = *MEMORY[0x263F77618];
    uint64_t v21 = type metadata accessor for InteractionType();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v26 = v9;
    uint64_t v23 = (uint64_t)v5;
    uint64_t v24 = v22;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 104))(v2, v20, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v2, 0, 1, v21);
    StandardActionHandler.perform(_:interactionType:)();
    outlined destroy of Font.Design?((uint64_t)v2, &demangling cache variable for type metadata for InteractionType?);
    outlined destroy of Font.Design?(v23, &demangling cache variable for type metadata for ActionProperty?);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v8, v17);
  }
}

uint64_t outlined init with copy of GenericButtonModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of GenericButtonModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t closure #2 in GenericButtonSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for GenericButtonSnippet();
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t partial apply for closure #2 in GenericButtonSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in GenericButtonSnippet.body.getter(a1);
}

unint64_t lazy protocol witness table accessor for type Button<Text> and conformance Button<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>;
  if (!lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<Text>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RFButtonStyle and conformance RFButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type RFButtonStyle and conformance RFButtonStyle;
  if (!lazy protocol witness table cache variable for type RFButtonStyle and conformance RFButtonStyle)
  {
    type metadata accessor for RFButtonStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RFButtonStyle and conformance RFButtonStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in GenericButtonSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for View.body.getter in conformance GenericButtonSnippet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v23 = a2;
  uint64_t v5 = type metadata accessor for RFButtonStyle();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v21 = v5;
  uint64_t v22 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of GenericButtonModel(v2, (uint64_t)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for GenericButtonSnippet);
  unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = swift_allocObject();
  outlined init with take of GenericButtonModel((uint64_t)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, (uint64_t (*)(void))type metadata accessor for GenericButtonSnippet);
  uint64_t v24 = v4;
  Button.init(action:label:)();
  static PrimitiveButtonStyle<>.rfButton.getter();
  lazy protocol witness table accessor for type Button<Text> and conformance Button<A>();
  lazy protocol witness table accessor for type RFButtonStyle and conformance RFButtonStyle();
  uint64_t v18 = v21;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t *initializeBufferWithCopyOfBuffer for GenericButtonSnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionHandler();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8);
    uint64_t v12 = *((void *)v10 + 1);
    *uint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
    uint64_t v14 = (char *)v9 + v13;
    uint64_t v15 = &v10[v13];
    uint64_t v16 = type metadata accessor for URL();
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
  }
  return a1;
}

uint64_t destroy for GenericButtonSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t initializeWithCopy for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
  uint64_t v12 = (char *)v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
  uint64_t v11 = (char *)v8 + v10;
  uint64_t v12 = (char *)v9 + v10;
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + v7) = *v9;
  uint64_t v10 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
  uint64_t v11 = v8 + v10;
  uint64_t v12 = (char *)v9 + v10;
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
  uint64_t v12 = (char *)v8 + v11;
  uint64_t v13 = (char *)v9 + v11;
  uint64_t v14 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261813558);
}

uint64_t sub_261813558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for GenericButtonModel();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_261813664);
}

uint64_t sub_261813664(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ActionHandler();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for GenericButtonModel();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata completion function for GenericButtonSnippet()
{
  uint64_t result = type metadata accessor for ActionHandler();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for GenericButtonModel();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_261813830()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t objectdestroyTm_0()
{
  unint64_t v1 = (int *)(type metadata accessor for GenericButtonSnippet() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v6 + v1[7];
  swift_bridgeObjectRelease();
  uint64_t v9 = v8 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t partial apply for closure #1 in GenericButtonSnippet.body.getter()
{
  type metadata accessor for GenericButtonSnippet();

  return closure #1 in GenericButtonSnippet.body.getter();
}

uint64_t BloodPressureQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t BloodPressureQueryModel.appPunchout.setter(uint64_t a1)
{
  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*BloodPressureQueryModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.systolic.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 20));
}

uint64_t type metadata accessor for BloodPressureQueryModel()
{
  uint64_t result = type metadata singleton initialization cache for BloodPressureQueryModel;
  if (!type metadata singleton initialization cache for BloodPressureQueryModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t BloodPressureQueryModel.systolic.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for BloodPressureQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 20);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolic.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.systolicMin.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 24));
}

uint64_t BloodPressureQueryModel.systolicMin.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for BloodPressureQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicMin.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.systolicMax.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 28));
}

uint64_t BloodPressureQueryModel.systolicMax.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for BloodPressureQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicMax.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.diastolic.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 32));
}

uint64_t BloodPressureQueryModel.diastolic.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for BloodPressureQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 32);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolic.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.diastolicMin.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 36));
}

uint64_t BloodPressureQueryModel.diastolicMin.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for BloodPressureQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 36);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicMin.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.diastolicMax.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 40));
}

uint64_t BloodPressureQueryModel.diastolicMax.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for BloodPressureQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 40);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicMax.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.systolicString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.systolicString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.diastolicString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.diastolicString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 48));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.systolicMinString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.systolicMinString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 52));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicMinString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.systolicMaxString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.systolicMaxString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 56));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicMaxString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.diastolicMinString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.diastolicMinString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 60));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicMinString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.diastolicMaxString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.diastolicMaxString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 64));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicMaxString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.unitLabelString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.unitLabelString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 68));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.unitLabelString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.systolicLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.systolicLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 72));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.diastolicLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 76));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.diastolicLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 76));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 80), a1, &demangling cache variable for type metadata for URL?);
}

uint64_t BloodPressureQueryModel.url.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 80), &demangling cache variable for type metadata for URL?);
}

uint64_t (*BloodPressureQueryModel.url.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.dateLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 84));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 84));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.dateLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.unitLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 88));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureQueryModel.unitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureQueryModel() + 88));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureQueryModel.unitLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 92), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t BloodPressureQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 92), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*BloodPressureQueryModel.snippetHeaderModel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureQueryModel.init(systolic:diastolic:systolicMin:systolicMax:diastolicMin:diastolicMax:unitLabel:systolicLabel:diastolicLabel:dateLabel:url:headerModel:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  int v127 = a6;
  int v128 = a8;
  uint64_t v130 = a5;
  uint64_t v131 = a7;
  int v125 = a4;
  int v126 = a2;
  uint64_t v129 = a3;
  uint64_t v106 = a1;
  uint64_t v135 = a12;
  int v123 = a11;
  int v124 = a13;
  uint64_t v139 = a10;
  uint64_t v140 = a22;
  uint64_t v137 = a21;
  uint64_t v138 = a19;
  uint64_t v112 = a18;
  uint64_t v110 = a17;
  uint64_t v108 = a16;
  uint64_t v107 = a15;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v136 = (char *)&v105 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v105 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for AppPunchout();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v133 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 56);
  uint64_t v134 = v28;
  uint64_t v132 = v29 + 56;
  v133(a9, 1, 1);
  uint64_t Model = (int *)type metadata accessor for BloodPressureQueryModel();
  uint64_t v31 = a9 + Model[5];
  *(void *)uint64_t v31 = 0;
  char v117 = (void *)v31;
  *(unsigned char *)(v31 + 8) = 1;
  uint64_t v32 = a9 + Model[6];
  *(void *)uint64_t v32 = 0;
  char v116 = (void *)v32;
  *(unsigned char *)(v32 + 8) = 1;
  uint64_t v33 = a9 + Model[7];
  *(void *)uint64_t v33 = 0;
  char v114 = (uint64_t *)v33;
  *(unsigned char *)(v33 + 8) = 1;
  uint64_t v34 = a9 + Model[8];
  *(void *)uint64_t v34 = 0;
  char v113 = (void *)v34;
  *(unsigned char *)(v34 + 8) = 1;
  uint64_t v35 = a9 + Model[9];
  *(void *)uint64_t v35 = 0;
  char v111 = (void *)v35;
  *(unsigned char *)(v35 + 8) = 1;
  uint64_t v36 = a9 + Model[10];
  *(void *)uint64_t v36 = 0;
  char v109 = (void *)v36;
  *(unsigned char *)(v36 + 8) = 1;
  uint64_t v37 = (uint64_t *)(a9 + Model[11]);
  *uint64_t v37 = 0;
  v37[1] = 0;
  char v115 = v37;
  int v38 = (uint64_t *)(a9 + Model[12]);
  *int v38 = 0;
  v38[1] = 0;
  char v118 = v38;
  int v39 = (uint64_t *)(a9 + Model[13]);
  *int v39 = 0;
  v39[1] = 0;
  char v119 = v39;
  int v40 = (uint64_t *)(a9 + Model[14]);
  *int v40 = 0;
  v40[1] = 0;
  char v120 = v40;
  uint64_t v41 = (uint64_t *)(a9 + Model[15]);
  *uint64_t v41 = 0;
  v41[1] = 0;
  char v121 = v41;
  uint64_t v42 = (uint64_t *)(a9 + Model[16]);
  *uint64_t v42 = 0;
  v42[1] = 0;
  char v122 = v42;
  uint64_t v43 = (void *)(a9 + Model[17]);
  *uint64_t v43 = 0;
  v43[1] = 0;
  uint64_t v44 = (void *)(a9 + Model[18]);
  uint64_t v45 = (void *)(a9 + Model[19]);
  uint64_t v46 = a9 + Model[20];
  uint64_t v47 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v46, 1, 1, v47);
  uint64_t v48 = (uint64_t *)(a9 + Model[21]);
  *uint64_t v48 = 0;
  v48[1] = 0;
  uint64_t v49 = (void *)(a9 + Model[22]);
  uint64_t v50 = a9 + Model[23];
  uint64_t v51 = type metadata accessor for SnippetHeaderModel();
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56);
  uint64_t v105 = v50;
  v52(v50, 1, 1, v51);
  uint64_t v53 = v107;
  void *v49 = a14;
  v49[1] = v53;
  uint64_t v54 = v110;
  *uint64_t v44 = v108;
  v44[1] = v54;
  uint64_t v55 = v138;
  *uint64_t v45 = v112;
  v45[1] = v55;
  uint64_t v138 = a20;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a20, (uint64_t)v27, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v56 = type metadata accessor for SpeakableString();
  uint64_t v57 = *(void *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v27, 1, v56) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v27, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v58 = 0;
    uint64_t v59 = 0;
  }
  else
  {
    uint64_t v58 = SpeakableString.print.getter();
    uint64_t v59 = v60;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v27, v56);
  }
  char v61 = v124 & 1;
  v123 &= 1u;
  char v62 = v123;
  v124 &= 1u;
  char v63 = v128 & 1;
  v127 &= 1u;
  char v64 = v127;
  v128 &= 1u;
  char v65 = v125 & 1;
  char v66 = v126 & 1;
  swift_bridgeObjectRelease();
  *uint64_t v48 = v58;
  v48[1] = v59;
  outlined assign with copy of SnippetHeaderModel?(v140, v105);
  uint64_t v67 = v117;
  uint64_t v68 = v106;
  void *v117 = v106;
  *((unsigned char *)v67 + 8) = v66;
  uint64_t v69 = v130;
  uint64_t v70 = v131;
  uint64_t v71 = v116;
  *char v116 = v130;
  *((unsigned char *)v71 + 8) = v64;
  uint64_t v72 = v114;
  uint64_t *v114 = v70;
  *((unsigned char *)v72 + 8) = v63;
  uint64_t v73 = v129;
  uint64_t v74 = v113;
  *char v113 = v129;
  *((unsigned char *)v74 + 8) = v65;
  uint64_t v75 = v111;
  *char v111 = v139;
  *((unsigned char *)v75 + 8) = v62;
  uint64_t v76 = v135;
  uint64_t v77 = v109;
  *char v109 = v135;
  *((unsigned char *)v77 + 8) = v61;
  uint64_t v78 = HealthDataLogModel.getFormattedValueString(inputValue:)(v68, v66);
  uint64_t v80 = v79;
  uint64_t v81 = v115;
  swift_bridgeObjectRelease();
  *uint64_t v81 = v78;
  v81[1] = v80;
  uint64_t v82 = HealthDataLogModel.getFormattedValueString(inputValue:)(v73, v65);
  uint64_t v84 = v83;
  uint64_t v85 = v118;
  swift_bridgeObjectRelease();
  uint64_t *v85 = v82;
  v85[1] = v84;
  uint64_t v86 = HealthDataLogModel.getFormattedValueString(inputValue:)(v69, v127);
  uint64_t v88 = v87;
  uint64_t v89 = v119;
  swift_bridgeObjectRelease();
  *uint64_t v89 = v86;
  v89[1] = v88;
  uint64_t v90 = HealthDataLogModel.getFormattedValueString(inputValue:)(v70, v128);
  uint64_t v92 = v91;
  BOOL v93 = v120;
  swift_bridgeObjectRelease();
  *BOOL v93 = v90;
  v93[1] = v92;
  uint64_t v94 = HealthDataLogModel.getFormattedValueString(inputValue:)(v139, v123);
  uint64_t v96 = v95;
  uint64_t v97 = v121;
  swift_bridgeObjectRelease();
  uint64_t *v97 = v94;
  v97[1] = v96;
  uint64_t v98 = HealthDataLogModel.getFormattedValueString(inputValue:)(v76, v124);
  uint64_t v100 = v99;
  uint64_t v101 = v122;
  swift_bridgeObjectRelease();
  *uint64_t v101 = v98;
  v101[1] = v100;
  uint64_t v103 = (uint64_t)v136;
  uint64_t v102 = v137;
  BloodPressureQueryModel.createAppPunchout(url:)(v137);
  outlined destroy of Font.Design?(v140, &demangling cache variable for type metadata for SnippetHeaderModel?);
  outlined destroy of Font.Design?(v102, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(v138, &demangling cache variable for type metadata for SpeakableString?);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v133)(v103, 0, 1, v134);
  return outlined assign with take of AppPunchout?(v103, a9, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t BloodPressureQueryModel.createAppPunchout(url:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL.absoluteString.getter();
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t BloodPressureQueryModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x68636E7550707061;
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 7:
    case 14:
      uint64_t result = 0x63696C6F74737973;
      break;
    case 4:
      uint64_t result = 0x696C6F7473616964;
      break;
    case 5:
    case 6:
    case 15:
      uint64_t result = 0x696C6F7473616964;
      break;
    case 8:
      uint64_t result = 0x696C6F7473616964;
      break;
    case 9:
      uint64_t result = 0xD000000000000011;
      break;
    case 10:
      uint64_t result = 0xD000000000000011;
      break;
    case 11:
    case 12:
    case 19:
      uint64_t result = 0xD000000000000012;
      break;
    case 13:
      uint64_t result = 0x6562614C74696E75;
      break;
    case 16:
      uint64_t result = 7107189;
      break;
    case 17:
      unsigned int v3 = 1702125924;
      goto LABEL_13;
    case 18:
      unsigned int v3 = 1953066613;
LABEL_13:
      uint64_t result = v3 | 0x6562614C00000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance BloodPressureQueryModel.CodingKeys()
{
  return BloodPressureQueryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance BloodPressureQueryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized BloodPressureQueryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance BloodPressureQueryModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 20;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance BloodPressureQueryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance BloodPressureQueryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t BloodPressureQueryModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<BloodPressureQueryModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v9 = 0;
  type metadata accessor for AppPunchout();
  _s10SnippetKit11AppPunchoutVACSEAAWlTm_2(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for BloodPressureQueryModel();
    char v9 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 16;
    type metadata accessor for URL();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_2(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v9 = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 19;
    type metadata accessor for SnippetHeaderModel();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_2(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys);
  }
  return result;
}

uint64_t BloodPressureQueryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v118 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v117 = (uint64_t)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v134 = (char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v135 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<BloodPressureQueryModel.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v136 = v9;
  uint64_t v137 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v141 = (char *)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  uint64_t v13 = (int *)(Model - 8);
  MEMORY[0x270FA5388](Model);
  uint64_t v15 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AppPunchout();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v133 = v16;
  v17(v15, 1, 1);
  uint64_t v18 = &v15[v13[7]];
  *(void *)uint64_t v18 = 0;
  uint64_t v132 = v18;
  v18[8] = 1;
  uint64_t v19 = &v15[v13[8]];
  *(void *)uint64_t v19 = 0;
  uint64_t v131 = (uint64_t *)v19;
  v19[8] = 1;
  uint64_t v20 = &v15[v13[9]];
  *(void *)uint64_t v20 = 0;
  uint64_t v130 = (uint64_t *)v20;
  v20[8] = 1;
  uint64_t v21 = &v15[v13[10]];
  *(void *)uint64_t v21 = 0;
  uint64_t v129 = (uint64_t *)v21;
  v21[8] = 1;
  uint64_t v22 = &v15[v13[11]];
  *(void *)uint64_t v22 = 0;
  int v128 = (uint64_t *)v22;
  v22[8] = 1;
  uint64_t v23 = &v15[v13[12]];
  *(void *)uint64_t v23 = 0;
  int v127 = (uint64_t *)v23;
  v23[8] = 1;
  uint64_t v24 = &v15[v13[13]];
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  int v126 = v24;
  uint64_t v25 = &v15[v13[14]];
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = 0;
  int v125 = v25;
  uint64_t v26 = &v15[v13[15]];
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = 0;
  int v124 = v26;
  uint64_t v27 = &v15[v13[16]];
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = 0;
  int v123 = v27;
  uint64_t v28 = &v15[v13[17]];
  *(void *)uint64_t v28 = 0;
  *((void *)v28 + 1) = 0;
  char v122 = v28;
  uint64_t v29 = &v15[v13[18]];
  *(void *)uint64_t v29 = 0;
  *((void *)v29 + 1) = 0;
  char v121 = v29;
  uint64_t v30 = &v15[v13[19]];
  *(void *)uint64_t v30 = 0;
  *((void *)v30 + 1) = 0;
  char v120 = v30;
  uint64_t v31 = &v15[v13[20]];
  *(void *)uint64_t v31 = 0;
  *((void *)v31 + 1) = 0;
  char v119 = v31;
  uint64_t v32 = &v15[v13[21]];
  *(void *)uint64_t v32 = 0;
  *((void *)v32 + 1) = 0;
  uint64_t v33 = (uint64_t)&v15[v13[22]];
  uint64_t v34 = type metadata accessor for URL();
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56);
  uint64_t v116 = v33;
  v35(v33, 1, 1, v34);
  uint64_t v36 = &v15[v13[23]];
  *(void *)uint64_t v36 = 0;
  *((void *)v36 + 1) = 0;
  uint64_t v37 = &v15[v13[24]];
  *(void *)uint64_t v37 = 0;
  *((void *)v37 + 1) = 0;
  uint64_t v38 = v13[25];
  uint64_t v140 = v15;
  uint64_t v39 = (uint64_t)&v15[v38];
  uint64_t v40 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
  uint64_t v41 = a1;
  uint64_t v42 = a1[3];
  uint64_t v139 = v41;
  __swift_project_boxed_opaque_existential_1(v41, v42);
  lazy protocol witness table accessor for type BloodPressureQueryModel.CodingKeys and conformance BloodPressureQueryModel.CodingKeys();
  uint64_t v43 = v138;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v43)
  {
    uint64_t v112 = (uint64_t)v140;
  }
  else
  {
    uint64_t v44 = v132;
    uint64_t v138 = v32;
    char v113 = v36;
    char v114 = v37;
    uint64_t v115 = v39;
    uint64_t v45 = (uint64_t)v134;
    uint64_t v46 = v137;
    char v142 = 0;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_2(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    uint64_t v47 = (uint64_t)v135;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v47, (uint64_t)v140, &demangling cache variable for type metadata for AppPunchout?);
    char v142 = 1;
    *(void *)uint64_t v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v44[8] = v49 & 1;
    char v142 = 2;
    uint64_t v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v51 = v131;
    *uint64_t v131 = v50;
    *((unsigned char *)v51 + 8) = v52 & 1;
    char v142 = 3;
    uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v54 = v130;
    *uint64_t v130 = v53;
    *((unsigned char *)v54 + 8) = v55 & 1;
    char v142 = 4;
    uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v57 = v129;
    *uint64_t v129 = v56;
    *((unsigned char *)v57 + 8) = v58 & 1;
    char v142 = 5;
    uint64_t v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v60 = v128;
    uint64_t *v128 = v59;
    *((unsigned char *)v60 + 8) = v61 & 1;
    char v142 = 6;
    uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v63 = v127;
    *int v127 = v62;
    *((unsigned char *)v63 + 8) = v64 & 1;
    char v142 = 7;
    uint64_t v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v66 = (uint64_t *)v126;
    uint64_t v135 = v67;
    swift_bridgeObjectRelease();
    uint64_t v68 = v135;
    *char v66 = v65;
    v66[1] = (uint64_t)v68;
    char v142 = 8;
    uint64_t v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v135 = v70;
    uint64_t v71 = v69;
    uint64_t v72 = v125;
    swift_bridgeObjectRelease();
    uint64_t v73 = v135;
    *uint64_t v72 = v71;
    v72[1] = v73;
    char v142 = 9;
    uint64_t v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v76 = v75;
    uint64_t v77 = (uint64_t *)v124;
    swift_bridgeObjectRelease();
    *uint64_t v77 = v74;
    v77[1] = v76;
    char v142 = 10;
    uint64_t v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v80 = v79;
    uint64_t v81 = (uint64_t *)v123;
    swift_bridgeObjectRelease();
    *uint64_t v81 = v78;
    v81[1] = v80;
    char v142 = 11;
    uint64_t v82 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v84 = v83;
    uint64_t v85 = (uint64_t *)v122;
    swift_bridgeObjectRelease();
    uint64_t *v85 = v82;
    v85[1] = v84;
    char v142 = 12;
    uint64_t v86 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v88 = v87;
    uint64_t v89 = (uint64_t *)v121;
    swift_bridgeObjectRelease();
    *uint64_t v89 = v86;
    v89[1] = v88;
    char v142 = 13;
    uint64_t v90 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v92 = v91;
    BOOL v93 = (uint64_t *)v120;
    swift_bridgeObjectRelease();
    *BOOL v93 = v90;
    v93[1] = v92;
    char v142 = 14;
    uint64_t v94 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v96 = v95;
    uint64_t v97 = (uint64_t *)v119;
    swift_bridgeObjectRelease();
    uint64_t *v97 = v94;
    v97[1] = v96;
    char v142 = 15;
    uint64_t v98 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v100 = v99;
    uint64_t v101 = (uint64_t *)v138;
    swift_bridgeObjectRelease();
    *uint64_t v101 = v98;
    v101[1] = v100;
    char v142 = 16;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_2(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v45, v116, &demangling cache variable for type metadata for URL?);
    char v142 = 17;
    uint64_t v102 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v104 = v103;
    uint64_t v105 = (uint64_t *)v113;
    swift_bridgeObjectRelease();
    *uint64_t v105 = v102;
    v105[1] = v104;
    char v142 = 18;
    uint64_t v106 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v108 = v107;
    char v109 = (uint64_t *)v114;
    swift_bridgeObjectRelease();
    *char v109 = v106;
    v109[1] = v108;
    char v142 = 19;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_2(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v110 = v136;
    char v111 = v141;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v111, v110);
    uint64_t v112 = (uint64_t)v140;
    outlined assign with take of AppPunchout?(v117, v115, &demangling cache variable for type metadata for SnippetHeaderModel?);
    outlined init with copy of BloodPressureQueryModel(v112, v118);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v139);
  return outlined destroy of BloodPressureQueryModel(v112, (uint64_t (*)(void))type metadata accessor for BloodPressureQueryModel);
}

uint64_t outlined init with copy of BloodPressureQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t base witness table accessor for Decodable in BloodPressureQueryModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_2(&lazy protocol witness table cache variable for type BloodPressureQueryModel and conformance BloodPressureQueryModel, (void (*)(uint64_t))type metadata accessor for BloodPressureQueryModel);
}

uint64_t base witness table accessor for Encodable in BloodPressureQueryModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_2(&lazy protocol witness table cache variable for type BloodPressureQueryModel and conformance BloodPressureQueryModel, (void (*)(uint64_t))type metadata accessor for BloodPressureQueryModel);
}

uint64_t _s10SnippetKit11AppPunchoutVACSEAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance BloodPressureQueryModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return BloodPressureQueryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance BloodPressureQueryModel(void *a1)
{
  return BloodPressureQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for BloodPressureQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    uint64_t v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = a3[7];
    uint64_t v18 = a3[8];
    uint64_t v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = (char *)a1 + v18;
    uint64_t v22 = (char *)a2 + v18;
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = a3[9];
    uint64_t v24 = a3[10];
    uint64_t v25 = (char *)a1 + v23;
    uint64_t v26 = (char *)a2 + v23;
    uint64_t v27 = *(void *)v26;
    v25[8] = v26[8];
    *(void *)uint64_t v25 = v27;
    uint64_t v28 = (char *)a1 + v24;
    uint64_t v29 = (char *)a2 + v24;
    v28[8] = v29[8];
    *(void *)uint64_t v28 = *(void *)v29;
    uint64_t v30 = a3[11];
    uint64_t v31 = a3[12];
    uint64_t v32 = (uint64_t *)((char *)a1 + v30);
    uint64_t v33 = (uint64_t *)((char *)a2 + v30);
    uint64_t v96 = v33[1];
    void *v32 = *v33;
    v32[1] = v96;
    uint64_t v34 = (uint64_t *)((char *)a1 + v31);
    uint64_t v35 = (uint64_t *)((char *)a2 + v31);
    uint64_t v97 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v97;
    uint64_t v36 = a3[13];
    uint64_t v37 = a3[14];
    uint64_t v38 = (uint64_t *)((char *)a1 + v36);
    uint64_t v39 = (uint64_t *)((char *)a2 + v36);
    uint64_t v94 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v94;
    uint64_t v40 = (uint64_t *)((char *)a1 + v37);
    uint64_t v41 = (uint64_t *)((char *)a2 + v37);
    uint64_t v95 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v95;
    uint64_t v42 = a3[15];
    uint64_t v43 = a3[16];
    uint64_t v44 = (uint64_t *)((char *)a1 + v42);
    uint64_t v45 = (uint64_t *)((char *)a2 + v42);
    uint64_t v46 = v45[1];
    *uint64_t v44 = *v45;
    v44[1] = v46;
    uint64_t v47 = (uint64_t *)((char *)a1 + v43);
    uint64_t v48 = (uint64_t *)((char *)a2 + v43);
    uint64_t v93 = v48[1];
    *uint64_t v47 = *v48;
    v47[1] = v93;
    uint64_t v49 = a3[17];
    uint64_t v50 = a3[18];
    uint64_t v51 = (uint64_t *)((char *)a1 + v49);
    char v52 = (uint64_t *)((char *)a2 + v49);
    uint64_t v53 = v52[1];
    *uint64_t v51 = *v52;
    v51[1] = v53;
    uint64_t v54 = (uint64_t *)((char *)a1 + v50);
    char v55 = (uint64_t *)((char *)a2 + v50);
    uint64_t v56 = v55[1];
    *uint64_t v54 = *v55;
    v54[1] = v56;
    uint64_t v57 = a3[19];
    uint64_t v58 = a3[20];
    uint64_t v59 = (uint64_t *)((char *)a1 + v57);
    uint64_t v60 = (uint64_t *)((char *)a2 + v57);
    uint64_t v61 = v60[1];
    void *v59 = *v60;
    v59[1] = v61;
    __dst = (char *)a1 + v58;
    uint64_t v91 = (char *)a2 + v58;
    uint64_t v62 = type metadata accessor for URL();
    uint64_t v63 = *(void *)(v62 - 8);
    uint64_t v92 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v92(v91, 1, v62))
    {
      uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v91, *(void *)(*(void *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(__dst, v91, v62);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(__dst, 0, 1, v62);
    }
    uint64_t v65 = a3[21];
    uint64_t v66 = a3[22];
    uint64_t v67 = (uint64_t *)((char *)a1 + v65);
    uint64_t v68 = (uint64_t *)((char *)a2 + v65);
    uint64_t v69 = v68[1];
    *uint64_t v67 = *v68;
    v67[1] = v69;
    uint64_t v70 = (uint64_t *)((char *)a1 + v66);
    uint64_t v71 = (uint64_t *)((char *)a2 + v66);
    uint64_t v72 = v71[1];
    void *v70 = *v71;
    v70[1] = v72;
    uint64_t v73 = a3[23];
    uint64_t v74 = (char *)a1 + v73;
    uint64_t v75 = (char *)a2 + v73;
    uint64_t v76 = type metadata accessor for SnippetHeaderModel();
    uint64_t v77 = *(void *)(v76 - 8);
    uint64_t v78 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v78(v75, 1, v76))
    {
      uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v74, v75, *(void *)(*(void *)(v79 - 8) + 64));
    }
    else
    {
      uint64_t v80 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 16))(v74, v75, v80);
      uint64_t v81 = *(int *)(v76 + 20);
      uint64_t v82 = &v74[v81];
      uint64_t v83 = &v75[v81];
      uint64_t v84 = *((void *)v83 + 1);
      *(void *)uint64_t v82 = *(void *)v83;
      *((void *)v82 + 1) = v84;
      uint64_t v85 = *(int *)(v76 + 24);
      uint64_t v86 = &v74[v85];
      uint64_t v87 = &v75[v85];
      uint64_t v88 = *((void *)v87 + 1);
      *(void *)uint64_t v86 = *(void *)v87;
      *((void *)v86 + 1) = v88;
      uint64_t v89 = *(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v89(v74, 0, 1, v76);
    }
  }
  return a1;
}

uint64_t destroy for BloodPressureQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 80);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + *(int *)(a2 + 92);
  uint64_t v10 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  if (!result)
  {
    uint64_t v12 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v9, v12);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = &a1[v22];
  uint64_t v27 = &a2[v22];
  v26[8] = v27[8];
  *(void *)uint64_t v26 = *(void *)v27;
  uint64_t v28 = a3[11];
  uint64_t v29 = a3[12];
  uint64_t v30 = &a1[v28];
  uint64_t v31 = &a2[v28];
  uint64_t v94 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = v94;
  uint64_t v32 = &a1[v29];
  uint64_t v33 = &a2[v29];
  uint64_t v95 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = v95;
  uint64_t v34 = a3[13];
  uint64_t v35 = a3[14];
  uint64_t v36 = &a1[v34];
  uint64_t v37 = &a2[v34];
  uint64_t v92 = *((void *)v37 + 1);
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = v92;
  uint64_t v38 = &a1[v35];
  uint64_t v39 = &a2[v35];
  uint64_t v93 = *((void *)v39 + 1);
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = v93;
  uint64_t v40 = a3[15];
  uint64_t v41 = a3[16];
  uint64_t v42 = &a1[v40];
  uint64_t v43 = &a2[v40];
  uint64_t v44 = *((void *)v43 + 1);
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = v44;
  uint64_t v45 = &a1[v41];
  uint64_t v46 = &a2[v41];
  uint64_t v91 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = v91;
  uint64_t v47 = a3[17];
  uint64_t v48 = a3[18];
  uint64_t v49 = &a1[v47];
  uint64_t v50 = &a2[v47];
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + 1) = v51;
  char v52 = &a1[v48];
  uint64_t v53 = &a2[v48];
  uint64_t v54 = *((void *)v53 + 1);
  *(void *)char v52 = *(void *)v53;
  *((void *)v52 + 1) = v54;
  uint64_t v55 = a3[19];
  uint64_t v56 = a3[20];
  uint64_t v57 = &a1[v55];
  uint64_t v58 = &a2[v55];
  uint64_t v59 = *((void *)v58 + 1);
  *(void *)uint64_t v57 = *(void *)v58;
  *((void *)v57 + 1) = v59;
  __dst = &a1[v56];
  uint64_t v89 = &a2[v56];
  uint64_t v60 = type metadata accessor for URL();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v90(v89, 1, v60))
  {
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(__dst, v89, *(void *)(*(void *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(__dst, v89, v60);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(__dst, 0, 1, v60);
  }
  uint64_t v63 = a3[21];
  uint64_t v64 = a3[22];
  uint64_t v65 = &a1[v63];
  uint64_t v66 = &a2[v63];
  uint64_t v67 = *((void *)v66 + 1);
  *(void *)uint64_t v65 = *(void *)v66;
  *((void *)v65 + 1) = v67;
  uint64_t v68 = &a1[v64];
  uint64_t v69 = &a2[v64];
  uint64_t v70 = *((void *)v69 + 1);
  *(void *)uint64_t v68 = *(void *)v69;
  *((void *)v68 + 1) = v70;
  uint64_t v71 = a3[23];
  uint64_t v72 = &a1[v71];
  uint64_t v73 = &a2[v71];
  uint64_t v74 = type metadata accessor for SnippetHeaderModel();
  uint64_t v75 = *(void *)(v74 - 8);
  uint64_t v76 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v76(v73, 1, v74))
  {
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v72, v73, *(void *)(*(void *)(v77 - 8) + 64));
  }
  else
  {
    uint64_t v78 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16))(v72, v73, v78);
    uint64_t v79 = *(int *)(v74 + 20);
    uint64_t v80 = &v72[v79];
    uint64_t v81 = &v73[v79];
    uint64_t v82 = *((void *)v81 + 1);
    *(void *)uint64_t v80 = *(void *)v81;
    *((void *)v80 + 1) = v82;
    uint64_t v83 = *(int *)(v74 + 24);
    uint64_t v84 = &v72[v83];
    uint64_t v85 = &v73[v83];
    uint64_t v86 = *((void *)v85 + 1);
    *(void *)uint64_t v84 = *(void *)v85;
    *((void *)v84 + 1) = v86;
    uint64_t v87 = *(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v87(v72, 0, 1, v74);
  }
  return a1;
}

char *assignWithCopy for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = v15;
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = a3[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)uint64_t v21 = v23;
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)uint64_t v25 = v27;
  uint64_t v28 = a3[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = *(void *)v30;
  v29[8] = v30[8];
  *(void *)uint64_t v29 = v31;
  uint64_t v32 = a3[10];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v35 = *(void *)v34;
  v33[8] = v34[8];
  *(void *)uint64_t v33 = v35;
  uint64_t v36 = a3[11];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = *((void *)v38 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[12];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = *((void *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[13];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = a3[14];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + 1) = *((void *)v47 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[15];
  uint64_t v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + 1) = *((void *)v50 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[16];
  char v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  *(void *)char v52 = *(void *)v53;
  *((void *)v52 + 1) = *((void *)v53 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[17];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  *((void *)v55 + 1) = *((void *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = a3[18];
  uint64_t v58 = &a1[v57];
  uint64_t v59 = &a2[v57];
  *(void *)uint64_t v58 = *(void *)v59;
  *((void *)v58 + 1) = *((void *)v59 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = a3[19];
  uint64_t v61 = &a1[v60];
  uint64_t v62 = &a2[v60];
  *(void *)uint64_t v61 = *(void *)v62;
  *((void *)v61 + 1) = *((void *)v62 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = a3[20];
  uint64_t v64 = &a1[v63];
  uint64_t v65 = &a2[v63];
  uint64_t v66 = type metadata accessor for URL();
  uint64_t v67 = *(void *)(v66 - 8);
  uint64_t v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
  int v69 = v68(v64, 1, v66);
  int v70 = v68(v65, 1, v66);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v64, v65, v66);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v64, v66);
LABEL_12:
    uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v64, v65, *(void *)(*(void *)(v71 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 24))(v64, v65, v66);
LABEL_13:
  uint64_t v72 = a3[21];
  uint64_t v73 = &a1[v72];
  uint64_t v74 = &a2[v72];
  *(void *)uint64_t v73 = *(void *)v74;
  *((void *)v73 + 1) = *((void *)v74 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v75 = a3[22];
  uint64_t v76 = &a1[v75];
  uint64_t v77 = &a2[v75];
  *(void *)uint64_t v76 = *(void *)v77;
  *((void *)v76 + 1) = *((void *)v77 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v78 = a3[23];
  uint64_t v79 = &a1[v78];
  uint64_t v80 = &a2[v78];
  uint64_t v81 = type metadata accessor for SnippetHeaderModel();
  uint64_t v82 = *(void *)(v81 - 8);
  uint64_t v83 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 48);
  int v84 = v83(v79, 1, v81);
  int v85 = v83(v80, 1, v81);
  if (!v84)
  {
    if (!v85)
    {
      uint64_t v96 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 24))(v79, v80, v96);
      uint64_t v97 = *(int *)(v81 + 20);
      uint64_t v98 = &v79[v97];
      uint64_t v99 = &v80[v97];
      *(void *)uint64_t v98 = *(void *)v99;
      *((void *)v98 + 1) = *((void *)v99 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v100 = *(int *)(v81 + 24);
      uint64_t v101 = &v79[v100];
      uint64_t v102 = &v80[v100];
      *(void *)uint64_t v101 = *(void *)v102;
      *((void *)v101 + 1) = *((void *)v102 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of BloodPressureQueryModel((uint64_t)v79, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v85)
  {
LABEL_18:
    uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v79, v80, *(void *)(*(void *)(v94 - 8) + 64));
    return a1;
  }
  uint64_t v86 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 16))(v79, v80, v86);
  uint64_t v87 = *(int *)(v81 + 20);
  uint64_t v88 = &v79[v87];
  uint64_t v89 = &v80[v87];
  *(void *)uint64_t v88 = *(void *)v89;
  *((void *)v88 + 1) = *((void *)v89 + 1);
  uint64_t v90 = *(int *)(v81 + 24);
  uint64_t v91 = &v79[v90];
  uint64_t v92 = &v80[v90];
  *(void *)uint64_t v91 = *(void *)v92;
  *((void *)v91 + 1) = *((void *)v92 + 1);
  uint64_t v93 = *(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v93(v79, 0, 1, v81);
  return a1;
}

uint64_t outlined destroy of BloodPressureQueryModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  v23[8] = v24[8];
  *(void *)uint64_t v23 = *(void *)v24;
  uint64_t v25 = &a1[v22];
  uint64_t v26 = &a2[v22];
  v25[8] = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  uint64_t v27 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  uint64_t v28 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)&a1[v28] = *(_OWORD *)&a2[v28];
  uint64_t v29 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  uint64_t v30 = a3[18];
  *(_OWORD *)&a1[a3[17]] = *(_OWORD *)&a2[a3[17]];
  *(_OWORD *)&a1[v30] = *(_OWORD *)&a2[v30];
  uint64_t v31 = a3[20];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  *(_OWORD *)&a1[a3[19]] = *(_OWORD *)&a2[a3[19]];
  uint64_t v34 = type metadata accessor for URL();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  uint64_t v37 = a3[22];
  *(_OWORD *)&a1[a3[21]] = *(_OWORD *)&a2[a3[21]];
  *(_OWORD *)&a1[v37] = *(_OWORD *)&a2[v37];
  uint64_t v38 = a3[23];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  uint64_t v41 = type metadata accessor for SnippetHeaderModel();
  uint64_t v42 = *(void *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    uint64_t v44 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v39, v40, v44);
    *(_OWORD *)&v39[*(int *)(v41 + 20)] = *(_OWORD *)&v40[*(int *)(v41 + 20)];
    *(_OWORD *)&v39[*(int *)(v41 + 24)] = *(_OWORD *)&v40[*(int *)(v41 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  return a1;
}

char *assignWithTake for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = &a1[v13];
  uint64_t v17 = &a2[v13];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = a3[9];
  uint64_t v25 = a3[10];
  uint64_t v26 = &a1[v24];
  uint64_t v27 = &a2[v24];
  uint64_t v28 = *(void *)v27;
  v26[8] = v27[8];
  *(void *)uint64_t v26 = v28;
  uint64_t v29 = &a1[v25];
  uint64_t v30 = &a2[v25];
  v29[8] = v30[8];
  *(void *)uint64_t v29 = *(void *)v30;
  uint64_t v31 = a3[11];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v35 = *(void *)v33;
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = v35;
  *((void *)v32 + 1) = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[12];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  uint64_t v40 = *(void *)v38;
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = v40;
  *((void *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[13];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  uint64_t v45 = *(void *)v43;
  uint64_t v44 = *((void *)v43 + 1);
  *(void *)uint64_t v42 = v45;
  *((void *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[14];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  uint64_t v50 = *(void *)v48;
  uint64_t v49 = *((void *)v48 + 1);
  *(void *)uint64_t v47 = v50;
  *((void *)v47 + 1) = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[15];
  char v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  uint64_t v55 = *(void *)v53;
  uint64_t v54 = *((void *)v53 + 1);
  *(void *)char v52 = v55;
  *((void *)v52 + 1) = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[16];
  uint64_t v57 = &a1[v56];
  uint64_t v58 = &a2[v56];
  uint64_t v60 = *(void *)v58;
  uint64_t v59 = *((void *)v58 + 1);
  *(void *)uint64_t v57 = v60;
  *((void *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
  uint64_t v61 = a3[17];
  uint64_t v62 = &a1[v61];
  uint64_t v63 = &a2[v61];
  uint64_t v65 = *(void *)v63;
  uint64_t v64 = *((void *)v63 + 1);
  *(void *)uint64_t v62 = v65;
  *((void *)v62 + 1) = v64;
  swift_bridgeObjectRelease();
  uint64_t v66 = a3[18];
  uint64_t v67 = &a1[v66];
  uint64_t v68 = &a2[v66];
  uint64_t v70 = *(void *)v68;
  uint64_t v69 = *((void *)v68 + 1);
  *(void *)uint64_t v67 = v70;
  *((void *)v67 + 1) = v69;
  swift_bridgeObjectRelease();
  uint64_t v71 = a3[19];
  uint64_t v72 = &a1[v71];
  uint64_t v73 = &a2[v71];
  uint64_t v75 = *(void *)v73;
  uint64_t v74 = *((void *)v73 + 1);
  *(void *)uint64_t v72 = v75;
  *((void *)v72 + 1) = v74;
  swift_bridgeObjectRelease();
  uint64_t v76 = a3[20];
  uint64_t v77 = &a1[v76];
  uint64_t v78 = &a2[v76];
  uint64_t v79 = type metadata accessor for URL();
  uint64_t v80 = *(void *)(v79 - 8);
  uint64_t v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 48);
  int v82 = v81(v77, 1, v79);
  int v83 = v81(v78, 1, v79);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v77, v79);
LABEL_12:
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v77, v78, *(void *)(*(void *)(v84 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v80 + 40))(v77, v78, v79);
LABEL_13:
  uint64_t v85 = a3[21];
  uint64_t v86 = &a1[v85];
  uint64_t v87 = &a2[v85];
  uint64_t v89 = *(void *)v87;
  uint64_t v88 = *((void *)v87 + 1);
  *(void *)uint64_t v86 = v89;
  *((void *)v86 + 1) = v88;
  swift_bridgeObjectRelease();
  uint64_t v90 = a3[22];
  uint64_t v91 = &a1[v90];
  uint64_t v92 = &a2[v90];
  uint64_t v94 = *(void *)v92;
  uint64_t v93 = *((void *)v92 + 1);
  *(void *)uint64_t v91 = v94;
  *((void *)v91 + 1) = v93;
  swift_bridgeObjectRelease();
  uint64_t v95 = a3[23];
  uint64_t v96 = &a1[v95];
  uint64_t v97 = &a2[v95];
  uint64_t v98 = type metadata accessor for SnippetHeaderModel();
  uint64_t v99 = *(void *)(v98 - 8);
  uint64_t v100 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v99 + 48);
  int v101 = v100(v96, 1, v98);
  int v102 = v100(v97, 1, v98);
  if (!v101)
  {
    if (!v102)
    {
      uint64_t v106 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 40))(v96, v97, v106);
      uint64_t v107 = *(int *)(v98 + 20);
      uint64_t v108 = &v96[v107];
      char v109 = &v97[v107];
      uint64_t v111 = *(void *)v109;
      uint64_t v110 = *((void *)v109 + 1);
      *(void *)uint64_t v108 = v111;
      *((void *)v108 + 1) = v110;
      swift_bridgeObjectRelease();
      uint64_t v112 = *(int *)(v98 + 24);
      char v113 = &v96[v112];
      char v114 = &v97[v112];
      uint64_t v116 = *(void *)v114;
      uint64_t v115 = *((void *)v114 + 1);
      *(void *)char v113 = v116;
      *((void *)v113 + 1) = v115;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of BloodPressureQueryModel((uint64_t)v96, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v102)
  {
LABEL_18:
    uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v96, v97, *(void *)(*(void *)(v104 - 8) + 64));
    return a1;
  }
  uint64_t v103 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v103 - 8) + 32))(v96, v97, v103);
  *(_OWORD *)&v96[*(int *)(v98 + 20)] = *(_OWORD *)&v97[*(int *)(v98 + 20)];
  *(_OWORD *)&v96[*(int *)(v98 + 24)] = *(_OWORD *)&v97[*(int *)(v98 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
  return a1;
}

uint64_t getEnumTagSinglePayload for BloodPressureQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2618186C0);
}

uint64_t sub_2618186C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_11:
    return v9(v10, a2, v8);
  }
  if (a2 == 2147483646)
  {
    unint64_t v11 = *(void *)(a1 + a3[11] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    int v12 = v11 - 1;
    if (v12 < 0) {
      int v12 = -1;
    }
    return (v12 + 1);
  }
  else
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v15 = *(void *)(v14 - 8);
    if (*(_DWORD *)(v15 + 84) == a2)
    {
      uint64_t v8 = v14;
      uint64_t v10 = a1 + a3[20];
      int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
      goto LABEL_11;
    }
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[23];
    return v17(v19, a2, v18);
  }
}

uint64_t storeEnumTagSinglePayload for BloodPressureQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_261818870);
}

uint64_t sub_261818870(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[11] + 8) = a2;
    return result;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[20];
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[23];

  return v16(v18, a2, a2, v17);
}

void type metadata completion function for BloodPressureQueryModel()
{
  _s10SnippetKit11AppPunchoutVSgMaTm_1(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, MEMORY[0x263F762C0]);
  if (v0 <= 0x3F)
  {
    _s10SnippetKit11AppPunchoutVSgMaTm_1(319, &lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
    if (v1 <= 0x3F)
    {
      _s10SnippetKit11AppPunchoutVSgMaTm_1(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void _s10SnippetKit11AppPunchoutVSgMaTm_1(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for BloodPressureQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xED) {
    goto LABEL_17;
  }
  if (a2 + 19 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 19) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 19;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v8 = v6 - 20;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BloodPressureQueryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *uint64_t result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x261818D38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 19;
        break;
    }
  }
  return result;
}

void *type metadata accessor for BloodPressureQueryModel.CodingKeys()
{
  return &unk_270D86C10;
}

uint64_t specialized BloodPressureQueryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x63696C6F74737973 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x63696C6F74737973 && a2 == 0xEB000000006E694DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x63696C6F74737973 && a2 == 0xEB0000000078614DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x696C6F7473616964 && a2 == 0xE900000000000063 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x696C6F7473616964 && a2 == 0xEC0000006E694D63 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x696C6F7473616964 && a2 == 0xEC00000078614D63 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x63696C6F74737973 && a2 == 0xEE00676E69727453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x696C6F7473616964 && a2 == 0xEF676E6972745363 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000261883A80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000261883AA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883AC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883AE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6562614C74696E75 && a2 == 0xEF676E697274536CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x63696C6F74737973 && a2 == 0xED00006C6562614CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x696C6F7473616964 && a2 == 0xEE006C6562614C63 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x6562614C74696E75 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883800)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 19;
    }
    else {
      return 20;
    }
  }
}

uint64_t SingleActivitySummaryModel.totalValue.getter()
{
  return *(void *)v0;
}

uint64_t SingleActivitySummaryModel.totalValue.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*SingleActivitySummaryModel.totalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.goalValue.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t SingleActivitySummaryModel.goalValue.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*SingleActivitySummaryModel.goalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.date.getter()
{
  return swift_retain();
}

uint64_t SingleActivitySummaryModel.date.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*SingleActivitySummaryModel.date.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.dateLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SingleActivitySummaryModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*SingleActivitySummaryModel.dateLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.timeLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SingleActivitySummaryModel.timeLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*SingleActivitySummaryModel.timeLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.unitLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SingleActivitySummaryModel.unitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return result;
}

uint64_t (*SingleActivitySummaryModel.unitLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.dataLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SingleActivitySummaryModel.dataLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = a2;
  return result;
}

uint64_t (*SingleActivitySummaryModel.dataLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);

  return outlined init with copy of SnippetHeaderModel?(v3, a1);
}

uint64_t type metadata accessor for SingleActivitySummaryModel()
{
  uint64_t result = type metadata singleton initialization cache for SingleActivitySummaryModel;
  if (!type metadata singleton initialization cache for SingleActivitySummaryModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of SnippetHeaderModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SingleActivitySummaryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);

  return outlined assign with take of SnippetHeaderModel?(a1, v3);
}

uint64_t outlined assign with take of SnippetHeaderModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*SingleActivitySummaryModel.snippetHeaderModel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SingleActivitySummaryModel.init(totalValue:goalValue:date:unitLabel:snippetHeaderModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)v39 - v18;
  uint64_t v20 = type metadata accessor for SingleActivitySummaryModel();
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(void *)(a5 + 72) = 0;
  *(void *)(a5 + 80) = 0;
  uint64_t v21 = a5 + *(int *)(v20 + 44);
  uint64_t v22 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  if (a6 > -9.22337204e18 && a6 < 9.22337204e18 && trunc(a6) == a6)
  {
    *(void *)a5 = (uint64_t)a6;
    if (a7 <= -9.22337204e18)
    {
      uint64_t v23 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v23 = 0;
    *(void *)a5 = 0;
    if (a7 <= -9.22337204e18) {
      goto LABEL_12;
    }
  }
  BOOL v24 = trunc(a7) == a7 && a7 < 9.22337204e18;
  uint64_t v23 = (uint64_t)a7;
  if (!v24) {
    uint64_t v23 = 0;
  }
LABEL_12:
  *(void *)(a5 + 8) = v23;
  *(void *)(a5 + 16) = a1;
  *(void *)(a5 + 56) = a2;
  *(void *)(a5 + 64) = a3;
  swift_retain();
  outlined assign with copy of SnippetHeaderModel?(a4, v21);
  uint64_t v25 = *(void *)(a5 + 16);
  if (!v25)
  {
LABEL_15:
    uint64_t v28 = 0;
    goto LABEL_17;
  }
  swift_retain();
  dispatch thunk of DialogCalendar.dateDescriptive.getter();
  swift_release();
  uint64_t v26 = type metadata accessor for SpeakableString();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v19, 1, v26) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v19, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v25 = 0;
    goto LABEL_15;
  }
  uint64_t v29 = SpeakableString.print.getter();
  uint64_t v31 = v30;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v26);
  v39[0] = v29;
  v39[1] = v31;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v25 = StringProtocol.capitalized.getter();
  uint64_t v28 = v32;
  swift_bridgeObjectRelease();
LABEL_17:
  swift_bridgeObjectRelease();
  *(void *)(a5 + 24) = v25;
  *(void *)(a5 + 32) = v28;
  uint64_t v33 = *(void *)(a5 + 16);
  if (v33)
  {
    swift_retain();
    dispatch thunk of DialogCalendar.timeDescriptive.getter();
    swift_release();
    uint64_t v34 = type metadata accessor for SpeakableString();
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v17, 1, v34) == 1)
    {
      swift_release();
      outlined destroy of Font.Design?(a4, &demangling cache variable for type metadata for SnippetHeaderModel?);
      outlined destroy of Font.Design?((uint64_t)v17, &demangling cache variable for type metadata for SpeakableString?);
      uint64_t v33 = 0;
      uint64_t v36 = 0;
    }
    else
    {
      uint64_t v33 = SpeakableString.print.getter();
      uint64_t v36 = v37;
      swift_release();
      outlined destroy of Font.Design?(a4, &demangling cache variable for type metadata for SnippetHeaderModel?);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v17, v34);
    }
  }
  else
  {
    swift_release();
    outlined destroy of Font.Design?(a4, &demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v36 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a5 + 40) = v33;
  *(void *)(a5 + 48) = v36;
  return result;
}

uint64_t SingleActivitySummaryModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x6C61566C61746F74;
  switch(a1)
  {
    case 1:
      return 0x756C61566C616F67;
    case 2:
      return 1702125924;
    case 3:
      unsigned int v3 = 1702125924;
      goto LABEL_8;
    case 4:
      unsigned int v3 = 1701669236;
      goto LABEL_8;
    case 5:
      unsigned int v3 = 1953066613;
      goto LABEL_8;
    case 6:
      unsigned int v3 = 1635017060;
LABEL_8:
      uint64_t result = v3 | 0x6562614C00000000;
      break;
    case 7:
      uint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SingleActivitySummaryModel.CodingKeys()
{
  return SingleActivitySummaryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SingleActivitySummaryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SingleActivitySummaryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SingleActivitySummaryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SingleActivitySummaryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SingleActivitySummaryModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SingleActivitySummaryModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 16);
    v10[7] = 2;
    type metadata accessor for DialogCalendar();
    lazy protocol witness table accessor for type DialogCalendar and conformance DialogCalendar(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, MEMORY[0x263F6D000]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for SingleActivitySummaryModel();
    LOBYTE(v11) = 7;
    type metadata accessor for SnippetHeaderModel();
    lazy protocol witness table accessor for type DialogCalendar and conformance DialogCalendar(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys);
  }
  return result;
}

uint64_t SingleActivitySummaryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SingleActivitySummaryModel.CodingKeys>);
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  MEMORY[0x270FA5388](v6);
  int v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SingleActivitySummaryModel();
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v12 + 1) = 0u;
  *((void *)v12 + 6) = 0;
  *((_OWORD *)v12 + 2) = 0u;
  *((void *)v12 + 9) = 0;
  *((void *)v12 + 10) = 0;
  uint64_t v13 = (uint64_t)&v12[*(int *)(v10 + 52)];
  uint64_t v14 = type metadata accessor for SnippetHeaderModel();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v32 = v13;
  v15(v13, 1, 1, v14);
  uint64_t v16 = a1[3];
  uint64_t v31 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type SingleActivitySummaryModel.CodingKeys and conformance SingleActivitySummaryModel.CodingKeys();
  uint64_t v17 = v8;
  uint64_t v18 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18)
  {
    uint64_t v23 = v32;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined destroy of Font.Design?(v23, &demangling cache variable for type metadata for SnippetHeaderModel?);
  }
  else
  {
    uint64_t v33 = v14;
    uint64_t v20 = v29;
    uint64_t v19 = v30;
    LOBYTE(v35) = 0;
    *(void *)uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v35) = 1;
    *((void *)v12 + 1) = KeyedDecodingContainer.decode(_:forKey:)();
    type metadata accessor for DialogCalendar();
    char v34 = 2;
    lazy protocol witness table accessor for type DialogCalendar and conformance DialogCalendar(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, MEMORY[0x263F6D000]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *((void *)v12 + 2) = v35;
    LOBYTE(v35) = 3;
    *((void *)v12 + 3) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v12 + 4) = v21;
    LOBYTE(v35) = 4;
    *((void *)v12 + 5) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v12 + 6) = v22;
    LOBYTE(v35) = 5;
    *((void *)v12 + 7) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v12 + 8) = v24;
    LOBYTE(v35) = 6;
    *((void *)v12 + 9) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v12 + 10) = v25;
    LOBYTE(v35) = 7;
    lazy protocol witness table accessor for type DialogCalendar and conformance DialogCalendar(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    outlined assign with take of SnippetHeaderModel?((uint64_t)v5, v32);
    outlined init with copy of SingleActivitySummaryModel((uint64_t)v12, v28);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
    return outlined destroy of SingleActivitySummaryModel((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SingleActivitySummaryModel);
  }
}

uint64_t outlined init with copy of SingleActivitySummaryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SingleActivitySummaryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Decodable in SingleActivitySummaryModel()
{
  return lazy protocol witness table accessor for type DialogCalendar and conformance DialogCalendar(&lazy protocol witness table cache variable for type SingleActivitySummaryModel and conformance SingleActivitySummaryModel, (void (*)(uint64_t))type metadata accessor for SingleActivitySummaryModel);
}

uint64_t base witness table accessor for Encodable in SingleActivitySummaryModel()
{
  return lazy protocol witness table accessor for type DialogCalendar and conformance DialogCalendar(&lazy protocol witness table cache variable for type SingleActivitySummaryModel and conformance SingleActivitySummaryModel, (void (*)(uint64_t))type metadata accessor for SingleActivitySummaryModel);
}

uint64_t lazy protocol witness table accessor for type DialogCalendar and conformance DialogCalendar(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SingleActivitySummaryModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SingleActivitySummaryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SingleActivitySummaryModel(void *a1)
{
  return SingleActivitySummaryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SingleActivitySummaryModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = a2[3];
    a1[2] = a2[2];
    a1[3] = v5;
    uint64_t v6 = a2[5];
    a1[4] = a2[4];
    a1[5] = v6;
    uint64_t v7 = a2[7];
    a1[6] = a2[6];
    a1[7] = v7;
    uint64_t v8 = a2[9];
    a1[8] = a2[8];
    a1[9] = v8;
    uint64_t v9 = *(int *)(a3 + 44);
    __dst = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    a1[10] = a2[10];
    uint64_t v11 = type metadata accessor for SnippetHeaderModel();
    uint64_t v26 = *(void *)(v11 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v10, 1, v11))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v15 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(__dst, v10, v15);
      uint64_t v16 = *(int *)(v11 + 20);
      uint64_t v17 = &__dst[v16];
      uint64_t v18 = &v10[v16];
      uint64_t v19 = *((void *)v18 + 1);
      *(void *)uint64_t v17 = *(void *)v18;
      *((void *)v17 + 1) = v19;
      uint64_t v20 = *(int *)(v11 + 24);
      uint64_t v21 = &__dst[v20];
      uint64_t v22 = &v10[v20];
      uint64_t v23 = *((void *)v22 + 1);
      *(void *)uint64_t v21 = *(void *)v22;
      *((void *)v21 + 1) = v23;
      uint64_t v24 = *(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v24(__dst, 0, 1, v11);
    }
  }
  return v3;
}

uint64_t destroy for SingleActivitySummaryModel(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(int *)(a3 + 44);
  __dst = (char *)(a1 + v8);
  uint64_t v9 = (char *)(a2 + v8);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v10 = type metadata accessor for SnippetHeaderModel();
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v9, 1, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(__dst, v9, v13);
    uint64_t v14 = *(int *)(v10 + 20);
    uint64_t v15 = &__dst[v14];
    uint64_t v16 = &v9[v14];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    uint64_t v18 = *(int *)(v10 + 24);
    uint64_t v19 = &__dst[v18];
    uint64_t v20 = &v9[v18];
    uint64_t v21 = *((void *)v20 + 1);
    *(void *)uint64_t v19 = *(void *)v20;
    *((void *)v19 + 1) = v21;
    uint64_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22(__dst, 0, 1, v10);
  }
  return a1;
}

void *assignWithCopy for SingleActivitySummaryModel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v24 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 24))(v7, v8, v24);
      uint64_t v25 = *(int *)(v9 + 20);
      uint64_t v26 = &v7[v25];
      uint64_t v27 = &v8[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      *((void *)v26 + 1) = *((void *)v27 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v28 = *(int *)(v9 + 24);
      uint64_t v29 = &v7[v28];
      uint64_t v30 = &v8[v28];
      *(void *)uint64_t v29 = *(void *)v30;
      *((void *)v29 + 1) = *((void *)v30 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SingleActivitySummaryModel((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v7, v8, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  uint64_t v14 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
  uint64_t v15 = *(int *)(v9 + 20);
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  uint64_t v18 = *(int *)(v9 + 24);
  uint64_t v19 = &v7[v18];
  uint64_t v20 = &v8[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  uint64_t v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v7, 0, 1, v9);
  return a1;
}

uint64_t outlined destroy of SingleActivitySummaryModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v7 = type metadata accessor for SnippetHeaderModel();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v5, v6, v10);
    *(_OWORD *)&v5[*(int *)(v7 + 20)] = *(_OWORD *)&v6[*(int *)(v7 + 20)];
    *(_OWORD *)&v5[*(int *)(v7 + 24)] = *(_OWORD *)&v6[*(int *)(v7 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 44);
  uint64_t v11 = (char *)(a1 + v10);
  int v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for SnippetHeaderModel();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      uint64_t v21 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 40))(v11, v12, v21);
      uint64_t v22 = *(int *)(v13 + 20);
      uint64_t v23 = &v11[v22];
      uint64_t v24 = &v12[v22];
      uint64_t v26 = *(void *)v24;
      uint64_t v25 = *((void *)v24 + 1);
      *(void *)uint64_t v23 = v26;
      *((void *)v23 + 1) = v25;
      swift_bridgeObjectRelease();
      uint64_t v27 = *(int *)(v13 + 24);
      uint64_t v28 = &v11[v27];
      uint64_t v29 = &v12[v27];
      uint64_t v31 = *(void *)v29;
      uint64_t v30 = *((void *)v29 + 1);
      *(void *)uint64_t v28 = v31;
      *((void *)v28 + 1) = v30;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SingleActivitySummaryModel((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  uint64_t v18 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v11, v12, v18);
  *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
  *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_26181B6CC);
}

uint64_t sub_26181B6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 64);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_26181B794);
}

uint64_t sub_26181B794(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 64) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for SingleActivitySummaryModel()
{
  type metadata accessor for SnippetHeaderModel?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for SnippetHeaderModel?()
{
  if (!lazy cache variable for type metadata for SnippetHeaderModel?)
  {
    type metadata accessor for SnippetHeaderModel();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for SingleActivitySummaryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x26181BA24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SingleActivitySummaryModel.CodingKeys()
{
  return &unk_270D86CA0;
}

uint64_t specialized SingleActivitySummaryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C61566C61746F74 && a2 == 0xEA00000000006575;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x756C61566C616F67 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6562614C656D6974 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6562614C74696E75 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6562614C61746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883800)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t PhoneRingsSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PhoneRingsSnippet() + 20);
  long long v4 = *(_OWORD *)(v3 + 208);
  long long v5 = *(_OWORD *)(v3 + 176);
  long long v36 = *(_OWORD *)(v3 + 192);
  long long v37 = v4;
  long long v6 = *(_OWORD *)(v3 + 208);
  long long v38 = *(_OWORD *)(v3 + 224);
  long long v7 = *(_OWORD *)(v3 + 144);
  long long v9 = *(_OWORD *)(v3 + 112);
  long long v32 = *(_OWORD *)(v3 + 128);
  long long v8 = v32;
  long long v33 = v7;
  long long v10 = *(_OWORD *)(v3 + 144);
  long long v11 = *(_OWORD *)(v3 + 176);
  long long v34 = *(_OWORD *)(v3 + 160);
  long long v12 = v34;
  long long v35 = v11;
  long long v13 = *(_OWORD *)(v3 + 80);
  long long v15 = *(_OWORD *)(v3 + 48);
  long long v28 = *(_OWORD *)(v3 + 64);
  long long v14 = v28;
  long long v29 = v13;
  long long v16 = *(_OWORD *)(v3 + 80);
  long long v17 = *(_OWORD *)(v3 + 112);
  long long v30 = *(_OWORD *)(v3 + 96);
  long long v18 = v30;
  long long v31 = v17;
  long long v19 = *(_OWORD *)(v3 + 16);
  long long v20 = *(_OWORD *)(v3 + 48);
  long long v26 = *(_OWORD *)(v3 + 32);
  long long v21 = v26;
  long long v27 = v20;
  long long v22 = *(_OWORD *)(v3 + 16);
  v25[0] = *(_OWORD *)v3;
  long long v23 = v25[0];
  v25[1] = v22;
  *(_OWORD *)(a1 + 192) = v36;
  *(_OWORD *)(a1 + 208) = v6;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(v3 + 224);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v5;
  *(_OWORD *)(a1 + 64) = v14;
  *(_OWORD *)(a1 + 80) = v16;
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)a1 = v23;
  *(_OWORD *)(a1 + 16) = v19;
  char v39 = *(unsigned char *)(v3 + 240);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(v3 + 240);
  *(_OWORD *)(a1 + 32) = v21;
  *(_OWORD *)(a1 + 48) = v15;
  return outlined retain of PhoneRingsModel((uint64_t)v25);
}

uint64_t type metadata accessor for PhoneRingsSnippet()
{
  uint64_t result = type metadata singleton initialization cache for PhoneRingsSnippet;
  if (!type metadata singleton initialization cache for PhoneRingsSnippet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined retain of PhoneRingsModel(uint64_t a1)
{
  return a1;
}

uint64_t PhoneRingsSnippet.moveRingTextColor.getter()
{
  return PhoneRingsSnippet.moveRingTextColor.getter(0.980392157, 0.0666666667, 0.309803922);
}

uint64_t PhoneRingsSnippet.exerciseRingTextColor.getter()
{
  return PhoneRingsSnippet.moveRingTextColor.getter(0.650980392, 1.0, 0.0);
}

uint64_t PhoneRingsSnippet.standRingTextColor.getter()
{
  return PhoneRingsSnippet.moveRingTextColor.getter(0.0, 1.0, 0.964705882);
}

uint64_t PhoneRingsSnippet.moveRingTextColor.getter(double a1, double a2, double a3)
{
  uint64_t v6 = type metadata accessor for Color.RGBColorSpace();
  MEMORY[0x270FA5388](v6);
  long long v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void))(v9 + 104))(v8, *MEMORY[0x263F1B380]);
  return MEMORY[0x263E41A70](v8, a1, a2, a3, 1.0);
}

__n128 PhoneRingsSnippet.init(model:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  swift_storeEnumTagMultiPayload();
  long long v4 = (char *)a2 + *(int *)(type metadata accessor for PhoneRingsSnippet() + 20);
  long long v5 = *(_OWORD *)(a1 + 208);
  *((_OWORD *)v4 + 12) = *(_OWORD *)(a1 + 192);
  *((_OWORD *)v4 + 13) = v5;
  *((_OWORD *)v4 + 14) = *(_OWORD *)(a1 + 224);
  v4[240] = *(unsigned char *)(a1 + 240);
  long long v6 = *(_OWORD *)(a1 + 144);
  *((_OWORD *)v4 + 8) = *(_OWORD *)(a1 + 128);
  *((_OWORD *)v4 + 9) = v6;
  long long v7 = *(_OWORD *)(a1 + 176);
  *((_OWORD *)v4 + 10) = *(_OWORD *)(a1 + 160);
  *((_OWORD *)v4 + 11) = v7;
  long long v8 = *(_OWORD *)(a1 + 80);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v4 + 5) = v8;
  long long v9 = *(_OWORD *)(a1 + 112);
  *((_OWORD *)v4 + 6) = *(_OWORD *)(a1 + 96);
  *((_OWORD *)v4 + 7) = v9;
  long long v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)long long v4 = *(_OWORD *)a1;
  *((_OWORD *)v4 + 1) = v10;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v12 = *(_OWORD *)(a1 + 48);
  *((__n128 *)v4 + 2) = result;
  *((_OWORD *)v4 + 3) = v12;
  return result;
}

uint64_t PhoneRingsSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v123 = a1;
  uint64_t v2 = type metadata accessor for ComponentStackBottomSpacing();
  uint64_t v121 = *(void *)(v2 - 8);
  uint64_t v122 = v2;
  MEMORY[0x270FA5388](v2);
  char v120 = (char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PhoneRingsSnippet();
  uint64_t v5 = v4 - 8;
  uint64_t v114 = *(void *)(v4 - 8);
  uint64_t v113 = *(void *)(v114 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v112 = (uint64_t)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, Modifie);
  uint64_t v118 = *(void *)(v7 - 8);
  uint64_t v119 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v116 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ComponentStack<TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _Padding);
  MEMORY[0x270FA5388](v117);
  uint64_t v115 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  uint64_t v111 = *(void *)(v10 - 8);
  uint64_t v110 = *(void *)(v111 + 64);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v109 = (uint64_t)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  int v124 = (uint64_t *)((char *)&v94 - v13);
  uint64_t v14 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  long long v17 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v18 = (long long *)(v1 + *(int *)(v5 + 28));
  long long v19 = v18[13];
  long long v20 = v18[11];
  long long v148 = v18[12];
  long long v149 = v19;
  long long v21 = v18[13];
  long long v150 = v18[14];
  long long v22 = v18[9];
  long long v23 = v18[7];
  long long v144 = v18[8];
  long long v145 = v22;
  long long v24 = v18[9];
  long long v25 = v18[11];
  long long v146 = v18[10];
  long long v147 = v25;
  long long v26 = v18[5];
  long long v27 = v18[3];
  long long v140 = v18[4];
  long long v141 = v26;
  long long v28 = v18[5];
  long long v29 = v18[7];
  long long v142 = v18[6];
  long long v143 = v29;
  long long v30 = v18[1];
  v137[0] = *v18;
  v137[1] = v30;
  long long v31 = v18[3];
  long long v33 = *v18;
  long long v32 = v18[1];
  long long v138 = v18[2];
  long long v139 = v31;
  long long v168 = v148;
  long long v169 = v21;
  long long v170 = v18[14];
  long long v164 = v144;
  long long v165 = v24;
  long long v166 = v146;
  long long v167 = v20;
  long long v160 = v140;
  long long v161 = v28;
  long long v162 = v142;
  long long v163 = v23;
  long long v156 = v33;
  long long v157 = v32;
  long long v158 = v138;
  char v151 = *((unsigned char *)v18 + 240);
  LOBYTE(v171) = *((unsigned char *)v18 + 240);
  long long v159 = v27;
  outlined retain of PhoneRingsModel((uint64_t)v137);
  static Alignment.trailing.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v34 = v126;
  uint64_t v105 = v128;
  uint64_t v106 = v130;
  uint64_t v107 = v131;
  char v155 = v127;
  char v153 = v129;
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, *MEMORY[0x263F1B380], v14);
  uint64_t v35 = MEMORY[0x263E41A70](v17, 0.109803922, 0.109803922, 0.117647059, 1.0);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v36 = v132;
  uint64_t v37 = v134;
  uint64_t v38 = v135;
  uint64_t v39 = v136;
  uint64_t v40 = static Alignment.center.getter();
  uint64_t v42 = v41;
  uint64_t v43 = static Alignment.center.getter();
  v172[12] = v168;
  v172[13] = v169;
  v172[14] = v170;
  v172[8] = v164;
  v172[9] = v165;
  v172[10] = v166;
  v172[11] = v167;
  v172[4] = v160;
  v172[5] = v161;
  v172[6] = v162;
  v172[7] = v163;
  v172[0] = v156;
  v172[1] = v157;
  v172[2] = v158;
  v172[3] = v159;
  *(void *)&v172[15] = v171;
  *((void *)&v172[15] + 1) = v34;
  LOBYTE(v172[16]) = v155;
  *(_DWORD *)((char *)&v172[16] + 1) = *(_DWORD *)v154;
  DWORD1(v172[16]) = *(_DWORD *)&v154[3];
  *((void *)&v172[16] + 1) = v105;
  LOBYTE(v172[17]) = v153;
  *(_DWORD *)((char *)&v172[17] + 1) = *(_DWORD *)v152;
  DWORD1(v172[17]) = *(_DWORD *)&v152[3];
  *((void *)&v172[17] + 1) = v106;
  *(void *)&v172[18] = v107;
  *((void *)&v172[18] + 1) = v36;
  *(void *)&v172[19] = v133;
  *((void *)&v172[19] + 1) = v37;
  *(void *)&v172[20] = v38;
  *((void *)&v172[20] + 1) = v39;
  *(void *)&v172[21] = v35;
  WORD4(v172[21]) = 256;
  *(void *)&v172[22] = v40;
  *((void *)&v172[22] + 1) = v42;
  *(void *)&v172[23] = v43;
  *((void *)&v172[23] + 1) = v44;
  LODWORD(v107) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v105 = v46;
  uint64_t v106 = v45;
  uint64_t v103 = v48;
  uint64_t v104 = v47;
  memcpy(v125, v172, sizeof(v125));
  char v173 = 0;
  int v96 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  LOBYTE(v35) = v173;
  char v175 = 0;
  int v97 = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v58 = v57;
  uint64_t v60 = v59;
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  LOBYTE(v42) = v175;
  unsigned __int8 v178 = 0;
  int v98 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v101 = v66;
  uint64_t v102 = v65;
  uint64_t v99 = v68;
  uint64_t v100 = v67;
  int v95 = v178;
  char v181 = 0;
  uint64_t v69 = static HorizontalAlignment.leading.getter();
  uint64_t v70 = v124;
  *int v124 = v69;
  v70[1] = 0x401C000000000000;
  *((unsigned char *)v70 + 16) = 0;
  uint64_t v71 = (char *)v70;
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  uint64_t v73 = v108;
  closure #1 in PhoneRingsSnippet.body.getter(v108, &v71[*(int *)(v72 + 44)]);
  uint64_t v74 = v112;
  outlined init with copy of PhoneRingsSnippet(v73, v112);
  LOBYTE(v14) = v181;
  uint64_t v75 = (uint64_t)v71;
  uint64_t v76 = v109;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v75, v109, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  unint64_t v77 = (*(unsigned __int8 *)(v114 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
  unint64_t v78 = (v113 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v79 = (*(unsigned __int8 *)(v111 + 80) + v78 + 569) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80);
  uint64_t v80 = swift_allocObject();
  outlined init with take of PhoneRingsSnippet(v74, v80 + v77);
  unint64_t v81 = v80 + v78;
  memcpy((void *)(v80 + v78), v125, 0x180uLL);
  *(unsigned char *)(v81 + 384) = v107;
  *(_DWORD *)(v81 + 385) = *(_DWORD *)v174;
  *(_DWORD *)(v81 + 388) = *(_DWORD *)&v174[3];
  uint64_t v82 = v105;
  *(void *)(v81 + 392) = v106;
  *(void *)(v81 + 400) = v82;
  uint64_t v83 = v103;
  *(void *)(v81 + 408) = v104;
  *(void *)(v81 + 416) = v83;
  *(unsigned char *)(v81 + 424) = v35;
  *(_DWORD *)(v81 + 425) = *(_DWORD *)v177;
  *(_DWORD *)(v81 + 428) = *(_DWORD *)&v177[3];
  *(unsigned char *)(v81 + 432) = v96;
  *(_DWORD *)(v81 + 433) = *(_DWORD *)v176;
  *(_DWORD *)(v81 + 436) = *(_DWORD *)&v176[3];
  *(void *)(v81 + 440) = v50;
  *(void *)(v81 + 448) = v52;
  *(void *)(v81 + 456) = v54;
  *(void *)(v81 + 464) = v56;
  *(unsigned char *)(v81 + 472) = v42;
  *(_DWORD *)(v81 + 476) = *(_DWORD *)&v180[3];
  *(_DWORD *)(v81 + 473) = *(_DWORD *)v180;
  *(unsigned char *)(v81 + 480) = v97;
  *(_DWORD *)(v81 + 484) = *(_DWORD *)&v179[3];
  *(_DWORD *)(v81 + 481) = *(_DWORD *)v179;
  *(void *)(v81 + 488) = v58;
  *(void *)(v81 + 496) = v60;
  *(void *)(v81 + 504) = v62;
  *(void *)(v81 + 512) = v64;
  *(unsigned char *)(v81 + 520) = v95;
  *(_DWORD *)(v81 + 524) = *(_DWORD *)((char *)v183 + 3);
  *(_DWORD *)(v81 + 521) = v183[0];
  *(unsigned char *)(v81 + 528) = v98;
  *(_DWORD *)(v81 + 532) = *(_DWORD *)&v182[3];
  *(_DWORD *)(v81 + 529) = *(_DWORD *)v182;
  *(void *)(v81 + 536) = v102;
  *(void *)(v81 + 544) = v101;
  *(void *)(v81 + 552) = v100;
  *(void *)(v81 + 560) = v99;
  *(unsigned char *)(v81 + 568) = v14;
  outlined init with take of VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>(v76, v80 + v79, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  outlined retain of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v172);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<Modifi);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<Mo, &demangling cache variable for type metadata for TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<Modifi);
  uint64_t v84 = v116;
  ComponentStack.init(content:)();
  uint64_t v85 = static Color.black.getter();
  LOBYTE(v76) = static Edge.Set.all.getter();
  uint64_t v87 = v118;
  uint64_t v86 = v119;
  uint64_t v88 = (uint64_t)v115;
  (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v115, v84, v119);
  uint64_t v89 = v88 + *(int *)(v117 + 36);
  *(void *)uint64_t v89 = v85;
  *(unsigned char *)(v89 + 8) = v76;
  (*(void (**)(char *, uint64_t))(v87 + 8))(v84, v86);
  uint64_t v91 = v120;
  uint64_t v90 = v121;
  uint64_t v92 = v122;
  (*(void (**)(char *, void, uint64_t))(v121 + 104))(v120, *MEMORY[0x263F778E8], v122);
  lazy protocol witness table accessor for type ModifiedContent<ComponentStack<TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLa();
  View.lastComponentBottomSpacing(_:)();
  outlined release of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v172);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v92);
  outlined destroy of Font.Design?(v88, &demangling cache variable for type metadata for ModifiedContent<ComponentStack<TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _Padding);
  return outlined destroy of Font.Design?((uint64_t)v124, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
}

uint64_t closure #1 in PhoneRingsSnippet.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v76 = a2;
  uint64_t v86 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v3 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  uint64_t v87 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v85 = *(void *)(v88 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v88);
  uint64_t v75 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v74 = (char *)&v70 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v84 = (char *)&v70 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v72 = (uint64_t)&v70 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v73 = (char *)&v70 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v71 = (uint64_t)&v70 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v83 = (char *)&v70 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  long long v21 = (char *)&v70 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v89 = (char *)&v70 - v22;
  uint64_t v23 = *(int *)(type metadata accessor for PhoneRingsSnippet() + 20);
  uint64_t v90 = a1;
  long long v24 = (void *)(a1 + v23);
  uint64_t v25 = *(void *)(a1 + v23 + 152);
  if (v25)
  {
    uint64_t v79 = v24[18];
    uint64_t v26 = v25;
  }
  else
  {
    uint64_t v26 = 0xE400000000000000;
    uint64_t v79 = 1702260557;
  }
  uint64_t v77 = 3157808;
  uint64_t v27 = v24[21];
  if (v27)
  {
    uint64_t v78 = v24[20];
    uint64_t v28 = v27;
    uint64_t v29 = v24[23];
    if (v29)
    {
LABEL_6:
      uint64_t v30 = v24[22];
      uint64_t v31 = v29;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = 0xE300000000000000;
    uint64_t v78 = 3157808;
    uint64_t v29 = v24[23];
    if (v29) {
      goto LABEL_6;
    }
  }
  uint64_t v31 = 0xE300000000000000;
  uint64_t v30 = 4997443;
LABEL_9:
  uint64_t v32 = v3 + 104;
  long long v33 = *(void (**)(void))(v3 + 104);
  uint64_t v34 = v87;
  unsigned int v81 = *MEMORY[0x263F1B380];
  uint64_t v82 = v32;
  uint64_t v80 = (void (*)(char *, void, uint64_t))v33;
  v33(v87);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v35 = MEMORY[0x263E41A70](v34, 0.980392157, 0.0666666667, 0.309803922, 1.0);
  PhoneRingsSnippet.labelPair(label:value:unit:color:)(v79, v26, v78, v28, v30, v31, v35, (uint64_t)v21);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v78 = *(void *)(v85 + 32);
  uint64_t v79 = v85 + 32;
  ((void (*)(char *, char *, uint64_t))v78)(v89, v21, v88);
  uint64_t v36 = v24[13];
  if (v36)
  {
    uint64_t v70 = v24[12];
    uint64_t v37 = v36;
    uint64_t v38 = v24[15];
    if (v38) {
      goto LABEL_11;
    }
LABEL_14:
    uint64_t v40 = 0xE300000000000000;
    uint64_t v39 = 3157808;
    uint64_t v41 = v24[17];
    if (v41) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  uint64_t v37 = 0xE800000000000000;
  uint64_t v70 = 0x6573696372657845;
  uint64_t v38 = v24[15];
  if (!v38) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v39 = v24[14];
  uint64_t v40 = v38;
  uint64_t v41 = v24[17];
  if (v41)
  {
LABEL_12:
    uint64_t v42 = v24[16];
    uint64_t v43 = v41;
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v43 = 0xE300000000000000;
  uint64_t v42 = 5130573;
LABEL_16:
  uint64_t v44 = v87;
  v80(v87, v81, v86);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v45 = MEMORY[0x263E41A70](v44, 0.650980392, 1.0, 0.0, 1.0);
  uint64_t v46 = v71;
  PhoneRingsSnippet.labelPair(label:value:unit:color:)(v70, v37, v39, v40, v42, v43, v45, v71);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, uint64_t))v78)(v83, v46, v88);
  if (v24[25])
  {
    uint64_t v47 = v24[24];
    uint64_t v48 = v24[25];
    uint64_t v49 = v24[27];
    if (v49) {
      goto LABEL_18;
    }
LABEL_21:
    uint64_t v50 = 0xE300000000000000;
    uint64_t v51 = v24[29];
    if (v51) {
      goto LABEL_19;
    }
LABEL_22:
    uint64_t v53 = 0xE300000000000000;
    uint64_t v52 = 5460552;
    goto LABEL_23;
  }
  uint64_t v48 = 0xE500000000000000;
  uint64_t v47 = 0x646E617453;
  uint64_t v49 = v24[27];
  if (!v49) {
    goto LABEL_21;
  }
LABEL_18:
  uint64_t v77 = v24[26];
  uint64_t v50 = v49;
  uint64_t v51 = v24[29];
  if (!v51) {
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v52 = v24[28];
  uint64_t v53 = v51;
LABEL_23:
  uint64_t v54 = v87;
  v80(v87, v81, v86);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v55 = MEMORY[0x263E41A70](v54, 0.0, 1.0, 0.964705882, 1.0);
  uint64_t v56 = v72;
  PhoneRingsSnippet.labelPair(label:value:unit:color:)(v47, v48, v77, v50, v52, v53, v55, v72);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v57 = v73;
  uint64_t v58 = v56;
  uint64_t v59 = v88;
  ((void (*)(char *, uint64_t, uint64_t))v78)(v73, v58, v88);
  uint64_t v60 = v84;
  uint64_t v61 = v85;
  uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v85 + 16);
  v62(v84, v89, v59);
  uint64_t v63 = v74;
  uint64_t v64 = v83;
  v62(v74, v83, v59);
  uint64_t v65 = v75;
  v62(v75, v57, v59);
  uint64_t v66 = v76;
  v62(v76, v60, v59);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0));
  v62(&v66[*(int *)(v67 + 48)], v63, v59);
  v62(&v66[*(int *)(v67 + 64)], v65, v59);
  uint64_t v68 = *(void (**)(char *, uint64_t))(v61 + 8);
  v68(v57, v59);
  v68(v64, v59);
  v68(v89, v59);
  v68(v65, v59);
  v68(v63, v59);
  return ((uint64_t (*)(char *, uint64_t))v68)(v84, v59);
}

uint64_t PhoneRingsSnippet.labelPair(label:value:unit:color:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v20 = a8;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>>);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v21 = 0xC008000000000000;
  if (PhoneRingsSnippet.isAccessibleAndLargeDynamicType()()) {
    unint64_t v21 = 0xC018000000000000;
  }
  *(void *)uint64_t v17 = static HorizontalAlignment.leading.getter();
  *((void *)v17 + 1) = 0xC014000000000000;
  v17[16] = 0;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>>);
  closure #1 in PhoneRingsSnippet.labelPair(label:value:unit:color:)(a1, a2, (uint64_t)&v21, a3, a4, a5, a6, a7, &v17[*(int *)(v18 + 44)]);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>>);
  View.componentSpacing(top:bottom:)();
  return outlined destroy of Font.Design?((uint64_t)v17, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>>);
}

uint64_t closure #2 in PhoneRingsSnippet.body.getter@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v59 = a3;
  uint64_t v57 = a2;
  uint64_t v55 = a4;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer)>>);
  MEMORY[0x270FA5388](v54);
  uint64_t v52 = (uint64_t *)((char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<);
  MEMORY[0x270FA5388](v58);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>);
  MEMORY[0x270FA5388](v60);
  uint64_t v51 = (uint64_t *)((char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v53 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v61 = (uint64_t)&v50 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v50 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  MEMORY[0x270FA5388](v19 - 8);
  unint64_t v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for SashStandard.Title();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char **)((char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = type metadata accessor for SashStandard();
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SashStandardView?);
  uint64_t v28 = MEMORY[0x270FA5388](v27 - 8);
  uint64_t v56 = (uint64_t)&v50 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)&v50 - v30;
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for PhoneRingsSnippet() + 20) + 240))
  {
    uint64_t v32 = type metadata accessor for SashStandardView();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  }
  else
  {
    void *v25 = 0xD000000000000011;
    v25[1] = 0x8000000261883B00;
    (*(void (**)(void *, void, uint64_t))(v23 + 104))(v25, *MEMORY[0x263F767F8], v22);
    uint64_t v33 = type metadata accessor for VisualProperty();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v21, 1, 1, v33);
    uint64_t v34 = type metadata accessor for Color();
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56);
    uint64_t v50 = v7;
    v35(v18, 1, 1, v34);
    v35(v16, 1, 1, v34);
    uint64_t v7 = v50;
    uint64_t v64 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    SashStandard.init(title:thumbnail:titleColor:backgroundColor:action:componentName:showOnWatch:)();
    SashStandardView.init(model:)();
    uint64_t v36 = type metadata accessor for SashStandardView();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v31, 0, 1, v36);
  }
  uint64_t v37 = (uint64_t)v31;
  if (PhoneRingsSnippet.isAccessibleDynamicType()())
  {
    uint64_t v38 = static HorizontalAlignment.leading.getter();
    uint64_t v39 = (uint64_t)v51;
    *uint64_t v51 = v38;
    *(void *)(v39 + 8) = 0;
    *(unsigned char *)(v39 + 16) = 1;
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>);
    closure #1 in closure #2 in PhoneRingsSnippet.body.getter(v57, v59, (void *)(v39 + *(int *)(v40 + 44)));
    uint64_t v41 = &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v39, (uint64_t)v7, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>);
  }
  else
  {
    uint64_t v42 = static VerticalAlignment.center.getter();
    uint64_t v39 = (uint64_t)v52;
    *uint64_t v52 = v42;
    *(void *)(v39 + 8) = 0;
    *(unsigned char *)(v39 + 16) = 1;
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer)>>);
    closure #2 in closure #2 in PhoneRingsSnippet.body.getter(v57, v59, (char *)(v39 + *(int *)(v43 + 44)));
    uint64_t v41 = &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer)>>;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v39, (uint64_t)v7, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer)>>);
  }
  swift_storeEnumTagMultiPayload();
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer)>>);
  _ConditionalContent<>.init(storage:)();
  outlined destroy of Font.Design?(v39, v41);
  uint64_t v44 = v56;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v37, v56, &demangling cache variable for type metadata for SashStandardView?);
  uint64_t v45 = v61;
  uint64_t v46 = v53;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v61, v53, &demangling cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<);
  uint64_t v47 = v55;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v44, v55, &demangling cache variable for type metadata for SashStandardView?);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v46, v47 + *(int *)(v48 + 48), &demangling cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<);
  outlined destroy of Font.Design?(v45, &demangling cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<);
  outlined destroy of Font.Design?(v37, &demangling cache variable for type metadata for SashStandardView?);
  outlined destroy of Font.Design?(v46, &demangling cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<);
  return outlined destroy of Font.Design?(v44, &demangling cache variable for type metadata for SashStandardView?);
}

uint64_t PhoneRingsSnippet.isAccessibleDynamicType()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PhoneRingsSnippet();
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v34 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v33 = (uint64_t)&v31 - v6;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v31 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v12 = type metadata accessor for DynamicTypeSize();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v31 - v17;
  specialized Environment.wrappedValue.getter((uint64_t)&v31 - v17);
  uint64_t v19 = *MEMORY[0x263F18CC0];
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 104);
  v32(v16, v19, v12);
  char v20 = static DynamicTypeSize.== infix(_:_:)();
  unint64_t v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  v21(v18, v12);
  outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v11);
  if (v20)
  {
    outlined destroy of PhoneRingsSnippet((uint64_t)v11);
    outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v9);
LABEL_4:
    outlined destroy of PhoneRingsSnippet((uint64_t)v9);
    uint64_t v23 = v33;
    outlined init with copy of PhoneRingsSnippet(v1, v33);
LABEL_5:
    outlined destroy of PhoneRingsSnippet(v23);
    uint64_t v24 = v1;
    uint64_t v25 = v34;
    outlined init with copy of PhoneRingsSnippet(v24, v34);
    goto LABEL_6;
  }
  specialized Environment.wrappedValue.getter((uint64_t)v18);
  v32(v16, *MEMORY[0x263F18CD0], v12);
  char v22 = static DynamicTypeSize.== infix(_:_:)();
  v21(v16, v12);
  v21(v18, v12);
  outlined destroy of PhoneRingsSnippet((uint64_t)v11);
  outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v9);
  if (v22) {
    goto LABEL_4;
  }
  specialized Environment.wrappedValue.getter((uint64_t)v18);
  v32(v16, *MEMORY[0x263F18CE0], v12);
  char v28 = static DynamicTypeSize.== infix(_:_:)();
  v21(v16, v12);
  v21(v18, v12);
  outlined destroy of PhoneRingsSnippet((uint64_t)v9);
  uint64_t v23 = v33;
  outlined init with copy of PhoneRingsSnippet(v1, v33);
  if (v28) {
    goto LABEL_5;
  }
  specialized Environment.wrappedValue.getter((uint64_t)v18);
  v32(v16, *MEMORY[0x263F18CE8], v12);
  char v29 = static DynamicTypeSize.== infix(_:_:)();
  v21(v16, v12);
  v21(v18, v12);
  outlined destroy of PhoneRingsSnippet(v23);
  uint64_t v30 = v1;
  uint64_t v25 = v34;
  outlined init with copy of PhoneRingsSnippet(v30, v34);
  if ((v29 & 1) == 0)
  {
    specialized Environment.wrappedValue.getter((uint64_t)v18);
    v32(v16, *MEMORY[0x263F18D00], v12);
    char v26 = static DynamicTypeSize.== infix(_:_:)();
    v21(v16, v12);
    v21(v18, v12);
    goto LABEL_7;
  }
LABEL_6:
  char v26 = 1;
LABEL_7:
  outlined destroy of PhoneRingsSnippet(v25);
  return v26 & 1;
}

uint64_t closure #1 in closure #2 in PhoneRingsSnippet.body.getter@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>);
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v51[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  uint64_t v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v51[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>);
  uint64_t v14 = v13 - 8;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = &v51[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = &v51[-v18 - 8];
  memcpy(v52, a1, 0x239uLL);
  outlined retain of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v52);
  LOBYTE(a1) = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a2, (uint64_t)v8, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  char v28 = &v8[*(int *)(v6 + 44)];
  unsigned char *v28 = (_BYTE)a1;
  *((void *)v28 + 1) = v21;
  *((void *)v28 + 2) = v23;
  *((void *)v28 + 3) = v25;
  *((void *)v28 + 4) = v27;
  v28[40] = 0;
  LOBYTE(v6) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v8, (uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>);
  uint64_t v37 = &v12[*(int *)(v10 + 44)];
  *uint64_t v37 = v6;
  *((void *)v37 + 1) = v30;
  *((void *)v37 + 2) = v32;
  *((void *)v37 + 3) = v34;
  *((void *)v37 + 4) = v36;
  v37[40] = 0;
  outlined destroy of Font.Design?((uint64_t)v8, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>);
  LOBYTE(v6) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v12, (uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  uint64_t v46 = &v17[*(int *)(v14 + 44)];
  unsigned char *v46 = v6;
  *((void *)v46 + 1) = v39;
  *((void *)v46 + 2) = v41;
  *((void *)v46 + 3) = v43;
  *((void *)v46 + 4) = v45;
  v46[40] = 0;
  outlined destroy of Font.Design?((uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  outlined init with take of VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>((uint64_t)v17, (uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>);
  memcpy(v51, v52, sizeof(v51));
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v19, (uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>);
  memcpy(v53, v51, 0x239uLL);
  uint64_t v47 = v50;
  memcpy(v50, v51, 0x239uLL);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>));
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v17, (uint64_t)v47 + *(int *)(v48 + 48), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>);
  outlined retain of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v53);
  outlined destroy of Font.Design?((uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>);
  outlined destroy of Font.Design?((uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>);
  memcpy(v54, v51, 0x239uLL);
  return outlined release of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v54);
}

uint64_t closure #2 in closure #2 in PhoneRingsSnippet.body.getter@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v39[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  uint64_t v11 = v10 - 8;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = &v39[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = &v39[-v15 - 8];
  memcpy(v40, a1, 0x239uLL);
  outlined retain of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v40);
  LOBYTE(a1) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a2, (uint64_t)v9, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  uint64_t v25 = &v9[*(int *)(v7 + 44)];
  unsigned char *v25 = (_BYTE)a1;
  *((void *)v25 + 1) = v18;
  *((void *)v25 + 2) = v20;
  *((void *)v25 + 3) = v22;
  *((void *)v25 + 4) = v24;
  v25[40] = 0;
  LOBYTE(a1) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v9, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>);
  uint64_t v34 = &v14[*(int *)(v11 + 44)];
  *uint64_t v34 = (_BYTE)a1;
  *((void *)v34 + 1) = v27;
  *((void *)v34 + 2) = v29;
  *((void *)v34 + 3) = v31;
  *((void *)v34 + 4) = v33;
  v34[40] = 0;
  outlined destroy of Font.Design?((uint64_t)v9, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>);
  outlined init with take of VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>((uint64_t)v14, (uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  memcpy(v39, v40, sizeof(v39));
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v16, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  memcpy(v41, v39, 0x239uLL);
  memcpy(a3, v39, 0x239uLL);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, Spacer));
  outlined init with copy of Environment<ColorSchemeContrast>.Content((uint64_t)v14, (uint64_t)&a3[*(int *)(v35 + 48)], &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  uint64_t v36 = &a3[*(int *)(v35 + 64)];
  *(void *)uint64_t v36 = 0;
  v36[8] = 1;
  outlined retain of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v41);
  outlined destroy of Font.Design?((uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  outlined destroy of Font.Design?((uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>);
  memcpy(v42, v39, 0x239uLL);
  return outlined release of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>((uint64_t)v42);
}

uint64_t PhoneRingsSnippet.isAccessibleAndLargeDynamicType()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PhoneRingsSnippet();
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v41 = (char *)&v37 - v6;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v40 = (uint64_t)&v37 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v39 = (uint64_t)&v37 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v37 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v37 - v14;
  uint64_t v16 = type metadata accessor for DynamicTypeSize();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v37 - v21;
  specialized Environment.wrappedValue.getter((uint64_t)&v37 - v21);
  uint64_t v23 = *MEMORY[0x263F18CC0];
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 104);
  v38(v20, v23, v16);
  char v24 = static DynamicTypeSize.== infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v20, v16);
  v25(v22, v16);
  outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v15);
  if (v24)
  {
    outlined destroy of PhoneRingsSnippet((uint64_t)v15);
    outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v13);
LABEL_4:
    outlined destroy of PhoneRingsSnippet((uint64_t)v13);
    uint64_t v27 = v39;
    outlined init with copy of PhoneRingsSnippet(v1, v39);
LABEL_5:
    outlined destroy of PhoneRingsSnippet(v27);
    uint64_t v28 = v40;
    outlined init with copy of PhoneRingsSnippet(v1, v40);
    uint64_t v29 = (uint64_t)v41;
LABEL_6:
    outlined destroy of PhoneRingsSnippet(v28);
    outlined init with copy of PhoneRingsSnippet(v1, v29);
LABEL_7:
    outlined destroy of PhoneRingsSnippet(v29);
    uint64_t v30 = v42;
    outlined init with copy of PhoneRingsSnippet(v1, v42);
    goto LABEL_8;
  }
  specialized Environment.wrappedValue.getter((uint64_t)v22);
  v38(v20, *MEMORY[0x263F18CD0], v16);
  char v26 = static DynamicTypeSize.== infix(_:_:)();
  v25(v20, v16);
  v25(v22, v16);
  outlined destroy of PhoneRingsSnippet((uint64_t)v15);
  outlined init with copy of PhoneRingsSnippet(v1, (uint64_t)v13);
  if (v26) {
    goto LABEL_4;
  }
  specialized Environment.wrappedValue.getter((uint64_t)v22);
  v38(v20, *MEMORY[0x263F18CE0], v16);
  char v33 = static DynamicTypeSize.== infix(_:_:)();
  v25(v20, v16);
  v25(v22, v16);
  outlined destroy of PhoneRingsSnippet((uint64_t)v13);
  uint64_t v27 = v39;
  outlined init with copy of PhoneRingsSnippet(v1, v39);
  if (v33) {
    goto LABEL_5;
  }
  specialized Environment.wrappedValue.getter((uint64_t)v22);
  v38(v20, *MEMORY[0x263F18CE8], v16);
  char v34 = static DynamicTypeSize.== infix(_:_:)();
  v25(v20, v16);
  v25(v22, v16);
  outlined destroy of PhoneRingsSnippet(v27);
  uint64_t v28 = v40;
  outlined init with copy of PhoneRingsSnippet(v1, v40);
  uint64_t v29 = (uint64_t)v41;
  if (v34) {
    goto LABEL_6;
  }
  specialized Environment.wrappedValue.getter((uint64_t)v22);
  v38(v20, *MEMORY[0x263F18D00], v16);
  char v35 = static DynamicTypeSize.== infix(_:_:)();
  v25(v20, v16);
  v25(v22, v16);
  outlined destroy of PhoneRingsSnippet(v28);
  outlined init with copy of PhoneRingsSnippet(v1, v29);
  if (v35) {
    goto LABEL_7;
  }
  specialized Environment.wrappedValue.getter((uint64_t)v22);
  v38(v20, *MEMORY[0x263F18D58], v16);
  char v36 = static DynamicTypeSize.== infix(_:_:)();
  v25(v20, v16);
  v25(v22, v16);
  outlined destroy of PhoneRingsSnippet(v29);
  uint64_t v30 = v42;
  outlined init with copy of PhoneRingsSnippet(v1, v42);
  if ((v36 & 1) == 0)
  {
    specialized Environment.wrappedValue.getter((uint64_t)v22);
    v38(v20, *MEMORY[0x263F18D68], v16);
    char v31 = static DynamicTypeSize.== infix(_:_:)();
    v25(v20, v16);
    v25(v22, v16);
    goto LABEL_9;
  }
LABEL_8:
  char v31 = 1;
LABEL_9:
  outlined destroy of PhoneRingsSnippet(v30);
  return v31 & 1;
}

uint64_t closure #1 in PhoneRingsSnippet.labelPair(label:value:unit:color:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v58 = a8;
  uint64_t v59 = a6;
  uint64_t v60 = a7;
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v53 = a3;
  uint64_t v57 = a9;
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v54 = *(void *)(v62 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v62);
  uint64_t v61 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v51 - v13;
  uint64_t v63 = a1;
  uint64_t v64 = a2;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v15 = Text.init<A>(_:)();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  static Font.subheadline.getter();
  uint64_t v20 = Text.font(_:)();
  uint64_t v22 = v21;
  char v24 = v23;
  swift_release();
  outlined consume of Text.Storage(v15, v17, v19);
  swift_bridgeObjectRelease();
  static Font.Weight.regular.getter();
  uint64_t v25 = Text.fontWeight(_:)();
  uint64_t v27 = v26;
  char v29 = v28 & 1;
  outlined consume of Text.Storage(v20, v22, v24 & 1);
  swift_bridgeObjectRelease();
  uint64_t v63 = static Color.gray.getter();
  uint64_t v30 = Text.foregroundStyle<A>(_:)();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  LOBYTE(v22) = v35 & 1;
  outlined consume of Text.Storage(v25, v27, v29);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v63 = v30;
  uint64_t v64 = v32;
  char v65 = v22;
  uint64_t v66 = v34;
  uint64_t v52 = v14;
  View.componentSpacing(top:bottom:)();
  outlined consume of Text.Storage(v30, v32, v22);
  swift_bridgeObjectRelease();
  uint64_t v53 = static VerticalAlignment.lastTextBaseline.getter();
  closure #1 in closure #1 in PhoneRingsSnippet.labelPair(label:value:unit:color:)(v55, v56, v59, v60, &v63);
  uint64_t v36 = v63;
  uint64_t v37 = v64;
  LOBYTE(v27) = v65;
  uint64_t v38 = v66;
  uint64_t v59 = v68;
  uint64_t v60 = v67;
  LODWORD(v55) = v69;
  uint64_t v56 = v70;
  uint64_t v39 = v54;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  uint64_t v42 = v61;
  uint64_t v41 = v62;
  v40(v61, v14, v62);
  uint64_t v43 = v57;
  v40(v57, v42, v41);
  uint64_t v44 = &v43[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>))
                    + 48)];
  *(void *)uint64_t v44 = v53;
  *((void *)v44 + 1) = 0;
  v44[16] = 0;
  *((void *)v44 + 3) = v36;
  *((void *)v44 + 4) = v37;
  v44[40] = v27;
  uint64_t v46 = v59;
  uint64_t v45 = v60;
  *((void *)v44 + 6) = v38;
  *((void *)v44 + 7) = v45;
  *((void *)v44 + 8) = v46;
  LOBYTE(v42) = v55;
  v44[72] = v55;
  uint64_t v47 = v58;
  *((void *)v44 + 10) = v56;
  *((void *)v44 + 11) = v47;
  outlined copy of Text.Storage(v36, v37, v27);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v45, v46, (char)v42);
  uint64_t v48 = *(void (**)(char *, uint64_t))(v39 + 8);
  swift_bridgeObjectRetain();
  swift_retain_n();
  uint64_t v49 = v62;
  v48(v52, v62);
  outlined consume of Text.Storage(v36, v37, v27);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v60, v59, (char)v42);
  swift_release();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v48)(v61, v49);
}

uint64_t closure #1 in closure #1 in PhoneRingsSnippet.labelPair(label:value:unit:color:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v76 = a3;
  uint64_t v77 = a4;
  uint64_t v78 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Font.TextStyle();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = a1;
  uint64_t v80 = a2;
  unint64_t v75 = lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v14 = Text.init<A>(_:)();
  uint64_t v70 = v15;
  uint64_t v71 = v16;
  char v18 = v17 & 1;
  unsigned int v74 = *MEMORY[0x263F1A6E8];
  char v19 = *(void (**)(void))(v11 + 104);
  uint64_t v72 = v11 + 104;
  uint64_t v73 = (void (*)(char *, void, uint64_t))v19;
  uint64_t v20 = v10;
  uint64_t v59 = v10;
  v19(v13);
  unsigned int v68 = *MEMORY[0x263F1A618];
  uint64_t v21 = v68;
  uint64_t v22 = type metadata accessor for Font.Design();
  uint64_t v23 = *(void *)(v22 - 8);
  char v24 = *(void (**)(char *, void, uint64_t))(v23 + 104);
  uint64_t v62 = v23 + 104;
  uint64_t v67 = v24;
  uint64_t v61 = v22;
  v24(v9, v21, v22);
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56);
  uint64_t v60 = v23 + 56;
  char v65 = v25;
  v25(v9, 0, 1, v22);
  uint64_t v58 = v13;
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?((uint64_t)v9, &demangling cache variable for type metadata for Font.Design?);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v63 = v11 + 8;
  uint64_t v64 = v26;
  v26(v13, v20);
  uint64_t v27 = v70;
  uint64_t v28 = Text.font(_:)();
  uint64_t v30 = v29;
  LOBYTE(v20) = v31;
  swift_release();
  outlined consume of Text.Storage(v14, v27, v18);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  uint64_t v32 = Text.fontWeight(_:)();
  uint64_t v70 = v33;
  uint64_t v71 = v32;
  uint64_t v69 = v34;
  int v66 = v35 & 1;
  outlined consume of Text.Storage(v28, v30, v20 & 1);
  swift_bridgeObjectRelease();
  uint64_t v79 = v76;
  uint64_t v80 = v77;
  swift_bridgeObjectRetain();
  uint64_t v36 = Text.init<A>(_:)();
  uint64_t v38 = v37;
  char v40 = v39 & 1;
  uint64_t v41 = v58;
  uint64_t v42 = v59;
  v73(v58, v74, v59);
  uint64_t v43 = v61;
  v67(v9, v68, v61);
  v65(v9, 0, 1, v43);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?((uint64_t)v9, &demangling cache variable for type metadata for Font.Design?);
  v64(v41, v42);
  static Font.Weight.medium.getter();
  Font.weight(_:)();
  swift_release();
  Font.smallCaps()();
  swift_release();
  uint64_t v44 = Text.font(_:)();
  uint64_t v46 = v45;
  LOBYTE(v27) = v47;
  uint64_t v49 = v48;
  swift_release();
  char v50 = v27 & 1;
  outlined consume of Text.Storage(v36, v38, v40);
  swift_bridgeObjectRelease();
  char v51 = v66;
  LOBYTE(v79) = v66;
  uint64_t v52 = v78;
  uint64_t v53 = v70;
  uint64_t v54 = v71;
  uint64_t v55 = v69;
  *uint64_t v78 = v71;
  v52[1] = v55;
  *((unsigned char *)v52 + 16) = v51;
  v52[3] = v53;
  v52[4] = v44;
  v52[5] = v46;
  *((unsigned char *)v52 + 48) = v50;
  v52[7] = v49;
  outlined copy of Text.Storage(v54, v55, v51);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v44, v46, v50);
  swift_bridgeObjectRetain();
  outlined consume of Text.Storage(v44, v46, v50);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v54, v55, v79);
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for EnvironmentValues.dynamicTypeSize : EnvironmentValues()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_26181F5E4()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t key path setter for EnvironmentValues.dynamicTypeSize : EnvironmentValues(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DynamicTypeSize();
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.dynamicTypeSize.setter();
}

uint64_t outlined init with copy of PhoneRingsSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneRingsSnippet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_26181F738()
{
  uint64_t v1 = *(void *)(type metadata accessor for PhoneRingsSnippet() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>)
                 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v0 + v3, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = v2 | v6 | 7;
  unint64_t v10 = (((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + v6 + 569) & ~v6;
  uint64_t v11 = v10 + v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v12 = v0
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>)
               + 44)
      + v10;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v14 = *(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
  v14(v12, v13);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0));
  v14(v12 + *(int *)(v15 + 48), v13);
  v14(v12 + *(int *)(v15 + 64), v13);

  return MEMORY[0x270FA0238](v0, v11, v9);
}

uint64_t outlined init with take of PhoneRingsSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneRingsSnippet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in PhoneRingsSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for PhoneRingsSnippet() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>)
                 - 8);
  uint64_t v7 = v1 + ((v5 + *(unsigned __int8 *)(v6 + 80) + 569) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return closure #2 in PhoneRingsSnippet.body.getter(v1 + v4, (const void *)(v1 + v5), v7, a1);
}

uint64_t associated type witness table accessor for View.Body : View in PhoneRingsSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for PhoneRingsSnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    unint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *(void *)unint64_t v10 = *(void *)v11;
    unsigned char v10[8] = v11[8];
    *((void *)v10 + 2) = *((void *)v11 + 2);
    v10[24] = v11[24];
    *((void *)v10 + 4) = *((void *)v11 + 4);
    v10[40] = v11[40];
    v10[56] = v11[56];
    *((void *)v10 + 6) = *((void *)v11 + 6);
    uint64_t v12 = *((void *)v11 + 8);
    v10[72] = v11[72];
    *((void *)v10 + 8) = v12;
    *((void *)v10 + 10) = *((void *)v11 + 10);
    v10[88] = v11[88];
    uint64_t v13 = *((void *)v11 + 13);
    *((void *)v10 + 12) = *((void *)v11 + 12);
    *((void *)v10 + 13) = v13;
    uint64_t v14 = *((void *)v11 + 15);
    *((void *)v10 + 14) = *((void *)v11 + 14);
    *((void *)v10 + 15) = v14;
    uint64_t v15 = *((void *)v11 + 17);
    *((void *)v10 + 16) = *((void *)v11 + 16);
    *((void *)v10 + 17) = v15;
    uint64_t v16 = *((void *)v11 + 19);
    *((void *)v10 + 18) = *((void *)v11 + 18);
    *((void *)v10 + 19) = v16;
    uint64_t v17 = *((void *)v11 + 21);
    *((void *)v10 + 20) = *((void *)v11 + 20);
    *((void *)v10 + 21) = v17;
    uint64_t v18 = *((void *)v11 + 23);
    *((void *)v10 + 22) = *((void *)v11 + 22);
    *((void *)v10 + 23) = v18;
    uint64_t v19 = *((void *)v11 + 25);
    *((void *)v10 + 24) = *((void *)v11 + 24);
    *((void *)v10 + 25) = v19;
    uint64_t v20 = *((void *)v11 + 27);
    *((void *)v10 + 26) = *((void *)v11 + 26);
    *((void *)v10 + 27) = v20;
    uint64_t v21 = *((void *)v11 + 29);
    *((void *)v10 + 28) = *((void *)v11 + 28);
    *((void *)v10 + 29) = v21;
    v10[240] = v11[240];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PhoneRingsSnippet(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PhoneRingsSnippet(void *a1, void *a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  v8[8] = v9[8];
  *((void *)v8 + 2) = *((void *)v9 + 2);
  v8[24] = v9[24];
  *((void *)v8 + 4) = *((void *)v9 + 4);
  v8[40] = v9[40];
  v8[56] = v9[56];
  *((void *)v8 + 6) = *((void *)v9 + 6);
  uint64_t v10 = *((void *)v9 + 8);
  v8[72] = v9[72];
  *((void *)v8 + 8) = v10;
  *((void *)v8 + 10) = *((void *)v9 + 10);
  v8[88] = v9[88];
  uint64_t v11 = *((void *)v9 + 13);
  *((void *)v8 + 12) = *((void *)v9 + 12);
  *((void *)v8 + 13) = v11;
  uint64_t v12 = *((void *)v9 + 15);
  *((void *)v8 + 14) = *((void *)v9 + 14);
  *((void *)v8 + 15) = v12;
  uint64_t v13 = *((void *)v9 + 17);
  *((void *)v8 + 16) = *((void *)v9 + 16);
  *((void *)v8 + 17) = v13;
  uint64_t v14 = *((void *)v9 + 19);
  *((void *)v8 + 18) = *((void *)v9 + 18);
  *((void *)v8 + 19) = v14;
  uint64_t v15 = *((void *)v9 + 21);
  *((void *)v8 + 20) = *((void *)v9 + 20);
  *((void *)v8 + 21) = v15;
  uint64_t v16 = *((void *)v9 + 23);
  *((void *)v8 + 22) = *((void *)v9 + 22);
  *((void *)v8 + 23) = v16;
  uint64_t v17 = *((void *)v9 + 25);
  *((void *)v8 + 24) = *((void *)v9 + 24);
  *((void *)v8 + 25) = v17;
  uint64_t v18 = *((void *)v9 + 27);
  *((void *)v8 + 26) = *((void *)v9 + 26);
  *((void *)v8 + 27) = v18;
  uint64_t v19 = *((void *)v9 + 29);
  *((void *)v8 + 28) = *((void *)v9 + 28);
  *((void *)v8 + 29) = v19;
  v8[240] = v9[240];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PhoneRingsSnippet(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Font.Design?((uint64_t)a1, &demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)((char *)a2 + v7);
  v8[8] = v9[8];
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = *((void *)v9 + 2);
  v8[24] = v9[24];
  *((void *)v8 + 2) = v11;
  uint64_t v12 = *((void *)v9 + 4);
  v8[40] = v9[40];
  *((void *)v8 + 4) = v12;
  uint64_t v13 = *((void *)v9 + 6);
  v8[56] = v9[56];
  *((void *)v8 + 6) = v13;
  uint64_t v14 = *((void *)v9 + 8);
  v8[72] = v9[72];
  *((void *)v8 + 8) = v14;
  uint64_t v15 = *((void *)v9 + 10);
  v8[88] = v9[88];
  *((void *)v8 + 10) = v15;
  *((void *)v8 + 12) = *((void *)v9 + 12);
  *((void *)v8 + 13) = *((void *)v9 + 13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 14) = *((void *)v9 + 14);
  *((void *)v8 + 15) = *((void *)v9 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 16) = *((void *)v9 + 16);
  *((void *)v8 + 17) = *((void *)v9 + 17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 18) = *((void *)v9 + 18);
  *((void *)v8 + 19) = *((void *)v9 + 19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 20) = *((void *)v9 + 20);
  *((void *)v8 + 21) = *((void *)v9 + 21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 22) = *((void *)v9 + 22);
  *((void *)v8 + 23) = *((void *)v9 + 23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 24) = *((void *)v9 + 24);
  *((void *)v8 + 25) = *((void *)v9 + 25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 26) = *((void *)v9 + 26);
  *((void *)v8 + 27) = *((void *)v9 + 27);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 28) = *((void *)v9 + 28);
  *((void *)v8 + 29) = *((void *)v9 + 29);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[240] = v9[240];
  return a1;
}

char *initializeWithTake for PhoneRingsSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  long long v11 = *((_OWORD *)v10 + 13);
  *((_OWORD *)v9 + 12) = *((_OWORD *)v10 + 12);
  *((_OWORD *)v9 + 13) = v11;
  *((_OWORD *)v9 + 14) = *((_OWORD *)v10 + 14);
  v9[240] = v10[240];
  long long v12 = *((_OWORD *)v10 + 9);
  *((_OWORD *)v9 + 8) = *((_OWORD *)v10 + 8);
  *((_OWORD *)v9 + 9) = v12;
  long long v13 = *((_OWORD *)v10 + 11);
  *((_OWORD *)v9 + 10) = *((_OWORD *)v10 + 10);
  *((_OWORD *)v9 + 11) = v13;
  long long v14 = *((_OWORD *)v10 + 5);
  *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
  *((_OWORD *)v9 + 5) = v14;
  long long v15 = *((_OWORD *)v10 + 7);
  *((_OWORD *)v9 + 6) = *((_OWORD *)v10 + 6);
  *((_OWORD *)v9 + 7) = v15;
  long long v16 = *((_OWORD *)v10 + 1);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v16;
  long long v17 = *((_OWORD *)v10 + 3);
  *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
  *((_OWORD *)v9 + 3) = v17;
  return a1;
}

char *assignWithTake for PhoneRingsSnippet(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Font.Design?((uint64_t)a1, &demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)uint64_t v9 = *(void *)v10;
  v9[8] = v10[8];
  *((void *)v9 + 2) = *((void *)v10 + 2);
  v9[24] = v10[24];
  *((void *)v9 + 4) = *((void *)v10 + 4);
  v9[40] = v10[40];
  v9[56] = v10[56];
  *((void *)v9 + 6) = *((void *)v10 + 6);
  uint64_t v11 = *((void *)v10 + 8);
  v9[72] = v10[72];
  *((void *)v9 + 8) = v11;
  *((void *)v9 + 10) = *((void *)v10 + 10);
  v9[88] = v10[88];
  uint64_t v12 = *((void *)v10 + 13);
  *((void *)v9 + 12) = *((void *)v10 + 12);
  *((void *)v9 + 13) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *((void *)v10 + 15);
  *((void *)v9 + 14) = *((void *)v10 + 14);
  *((void *)v9 + 15) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *((void *)v10 + 17);
  *((void *)v9 + 16) = *((void *)v10 + 16);
  *((void *)v9 + 17) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *((void *)v10 + 19);
  *((void *)v9 + 18) = *((void *)v10 + 18);
  *((void *)v9 + 19) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *((void *)v10 + 21);
  *((void *)v9 + 20) = *((void *)v10 + 20);
  *((void *)v9 + 21) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *((void *)v10 + 23);
  *((void *)v9 + 22) = *((void *)v10 + 22);
  *((void *)v9 + 23) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *((void *)v10 + 25);
  *((void *)v9 + 24) = *((void *)v10 + 24);
  *((void *)v9 + 25) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = *((void *)v10 + 27);
  *((void *)v9 + 26) = *((void *)v10 + 26);
  *((void *)v9 + 27) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *((void *)v10 + 29);
  *((void *)v9 + 28) = *((void *)v10 + 28);
  *((void *)v9 + 29) = v20;
  swift_bridgeObjectRelease();
  v9[240] = v10[240];
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneRingsSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261820698);
}

uint64_t sub_261820698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 104);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PhoneRingsSnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_261820780);
}

uint64_t sub_261820780(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 104) = a2;
  }
  return result;
}

void type metadata completion function for PhoneRingsSnippet()
{
  type metadata accessor for Environment<DynamicTypeSize>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Environment<DynamicTypeSize>.Content()
{
  if (!lazy cache variable for type metadata for Environment<DynamicTypeSize>.Content)
  {
    type metadata accessor for DynamicTypeSize();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    }
  }
}

uint64_t sub_261820930()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ComponentStack<TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _Padding);
  lazy protocol witness table accessor for type ModifiedContent<ComponentStack<TupleView<(SashStandardView?, _ConditionalContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _PaddingLa();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_26182098C()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>>);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, ModifiedContent<HStack<TupleView<(Text, Text)>>, _ForegroundStyleModifier<Color>>)>>);
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined destroy of PhoneRingsSnippet(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PhoneRingsSnippet();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<HKActivityRingUIViewRepresentable, _FrameLayout>, _OverlayModifier<StrokeShapeView<Circle, Color, EmptyView>>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t TemperatureQuerySnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of TemperatureQueryModel(v1, a1, (uint64_t (*)(void))type metadata accessor for TemperatureQueryModel);
}

uint64_t TemperatureQuerySnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for TemperatureQuerySnippet() + 20));
  type metadata accessor for Context();
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_1(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  *unint64_t v4 = EnvironmentObject.init()();
  v4[1] = v5;
  return _s10WellnessUI21TemperatureQueryModelVWObTm_0(a1, a2, (uint64_t (*)(void))type metadata accessor for TemperatureQueryModel);
}

uint64_t type metadata accessor for TemperatureQuerySnippet()
{
  uint64_t result = type metadata singleton initialization cache for TemperatureQuerySnippet;
  if (!type metadata singleton initialization cache for TemperatureQuerySnippet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t TemperatureQuerySnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v206 = a1;
  uint64_t v199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
  uint64_t v197 = *(void *)(v199 - 8);
  MEMORY[0x270FA5388](v199);
  uint64_t v194 = (char *)&v163 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v198 = *(void *)(v200 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v200);
  uint64_t v195 = (char *)&v163 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v196 = (char *)&v163 - v5;
  uint64_t v6 = type metadata accessor for FactItemHeroNumberView();
  uint64_t v175 = *(void *)(v6 - 8);
  uint64_t v176 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v174 = (char *)&v163 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v172 = (char *)&v163 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v10 - 8);
  char v173 = (char *)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Font.TextStyle();
  uint64_t v180 = *(void *)(v12 - 8);
  uint64_t v181 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v184 = (char *)&v163 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = type metadata accessor for MultipleDataPointView();
  MEMORY[0x270FA5388](v179);
  unsigned __int8 v178 = (uint64_t *)((char *)&v163 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t Snippet = type metadata accessor for TemperatureQuerySnippet();
  uint64_t v191 = *(void *)(Snippet - 8);
  uint64_t v16 = MEMORY[0x270FA5388](Snippet - 8);
  uint64_t v193 = (uint64_t)&v163 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v183 = (uint64_t)&v163 - v19;
  uint64_t v192 = v20;
  MEMORY[0x270FA5388](v18);
  uint64_t v182 = (uint64_t)&v163 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v188 = (uint64_t)&v163 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = type metadata accessor for SnippetHeaderView();
  uint64_t v185 = *(void *)(v187 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v187);
  uint64_t v202 = (uint64_t)&v163 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v186 = v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v204 = (uint64_t)&v163 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v28 = MEMORY[0x270FA5388](v27 - 8);
  uint64_t v177 = (uint64_t)&v163 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  char v31 = (char *)&v163 - v30;
  uint64_t v32 = type metadata accessor for AppPunchout();
  uint64_t v205 = *(void *)(v32 - 8);
  uint64_t v33 = MEMORY[0x270FA5388](v32);
  uint64_t v189 = v34;
  uint64_t v190 = (char *)&v163 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v203 = (char *)&v163 - v35;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v36 - 8);
  uint64_t v38 = (char *)&v163 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for SpeakableString();
  uint64_t v40 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v42 = (char *)&v163 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Model = (int *)type metadata accessor for TemperatureQueryModel();
  uint64_t v43 = v1;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + Model[10], (uint64_t)v38, &demangling cache variable for type metadata for SpeakableString?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39) == 1)
  {
    uint64_t v44 = &demangling cache variable for type metadata for SpeakableString?;
    uint64_t v45 = (uint64_t)v38;
LABEL_5:
    outlined destroy of Font.Design?(v45, v44);
    uint64_t v48 = v206;
    uint64_t result = AnyView.init<A>(_:)();
    *uint64_t v48 = result;
    return result;
  }
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v42, v38, v39);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, (uint64_t)v31, &demangling cache variable for type metadata for AppPunchout?);
  uint64_t v46 = v205;
  char v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v205 + 48);
  if (v47(v31, 1, v32) == 1)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
    uint64_t v44 = &demangling cache variable for type metadata for AppPunchout?;
    uint64_t v45 = (uint64_t)v31;
    goto LABEL_5;
  }
  long long v164 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v47;
  uint64_t v170 = v32;
  uint64_t v171 = v42;
  uint64_t v169 = v39;
  long long v166 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v166(v203, v31, v32);
  char v50 = Model;
  uint64_t v51 = v188;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v43 + Model[18], v188, &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v52 = v187;
  uint64_t v53 = v202;
  uint64_t v54 = (uint64_t *)(v202 + *(int *)(v187 + 20));
  *uint64_t v54 = swift_getKeyPath();
  uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v55 = (uint64_t *)(v53 + *(int *)(v52 + 24));
  *uint64_t v55 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with take of SnippetHeaderModel?(v51, v53);
  _s10WellnessUI21TemperatureQueryModelVWObTm_0(v53, v204, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v56 = v50;
  uint64_t v57 = v43 + v50[5];
  char v58 = *(unsigned char *)(v57 + 8);
  uint64_t v59 = v43;
  uint64_t v167 = v46 + 32;
  uint64_t v168 = v40;
  if ((v58 & 1) == 0 && *(double *)v57 > 0.0)
  {
    uint64_t v60 = (char **)(v43 + v56[13]);
    uint64_t v61 = v60[1];
    uint64_t v62 = v56;
    uint64_t v63 = v43;
    uint64_t v64 = v182;
    outlined init with copy of TemperatureQueryModel(v63, v182, (uint64_t (*)(void))type metadata accessor for TemperatureQuerySnippet);
    if (v61)
    {
      uint64_t v65 = *(void *)(v64 + v62[12] + 8);
      swift_bridgeObjectRetain();
      _s10WellnessUI17SnippetHeaderViewVWOhTm_0(v64, (uint64_t (*)(void))type metadata accessor for TemperatureQuerySnippet);
      swift_bridgeObjectRelease();
      uint64_t v66 = v183;
      outlined init with copy of TemperatureQueryModel(v59, v183, (uint64_t (*)(void))type metadata accessor for TemperatureQuerySnippet);
      if (v65)
      {
        _s10WellnessUI17SnippetHeaderViewVWOhTm_0(v66, (uint64_t (*)(void))type metadata accessor for TemperatureQuerySnippet);
        uint64_t v56 = Model;
LABEL_13:
        uint64_t v188 = *(void *)v57;
        LODWORD(v187) = *(unsigned __int8 *)(v57 + 8);
        uint64_t v69 = v56[12];
        uint64_t v70 = (uint64_t *)(v59 + v56[11]);
        uint64_t v71 = v70[1];
        uint64_t v181 = *v70;
        uint64_t v72 = v60;
        uint64_t v73 = v59;
        unsigned int v74 = v72[1];
        uint64_t v184 = *v72;
        unint64_t v75 = *(int **)(v59 + v69 + 8);
        uint64_t Model = *(int **)(v59 + v69);
        uint64_t v76 = v56;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v77 = SpeakableString.print.getter();
        uint64_t v79 = v78;
        uint64_t v80 = (uint64_t *)(v59 + v76[17]);
        uint64_t v81 = *v80;
        unint64_t v82 = v80[1];
        uint64_t v182 = v77;
        uint64_t v183 = v81;
        type metadata accessor for Context();
        _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_1(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
        swift_bridgeObjectRetain();
        uint64_t v83 = EnvironmentObject.init()();
        uint64_t v85 = v178;
        uint64_t v84 = (int *)v179;
        *unsigned __int8 v178 = v83;
        v85[1] = v86;
        uint64_t v87 = (uint64_t *)((char *)v85 + v84[5]);
        uint64_t *v87 = swift_getKeyPath();
        swift_storeEnumTagMultiPayload();
        uint64_t v88 = (char *)v85 + v84[6];
        *(void *)uint64_t v88 = v188;
        v88[8] = v187;
        uint64_t v89 = (uint64_t *)((char *)v85 + v84[7]);
        *uint64_t v89 = v181;
        v89[1] = v71;
        uint64_t v90 = (char **)((char *)v85 + v84[8]);
        *uint64_t v90 = v184;
        v90[1] = v74;
        uint64_t v91 = (int **)((char *)v85 + v84[9]);
        *uint64_t v91 = Model;
        v91[1] = v75;
        uint64_t v92 = (uint64_t *)((char *)v85 + v84[10]);
        void *v92 = 0;
        v92[1] = 0;
        uint64_t v93 = (uint64_t *)((char *)v85 + v84[11]);
        *uint64_t v93 = 0;
        v93[1] = 0;
        uint64_t v94 = (uint64_t *)((char *)v85 + v84[12]);
        *uint64_t v94 = v182;
        v94[1] = v79;
        *((unsigned char *)v85 + v84[13]) = 0;
        uint64_t v95 = 0x65676172657641;
        if (v82) {
          uint64_t v95 = v183;
        }
        unint64_t v96 = 0xE700000000000000;
        if (v82) {
          unint64_t v96 = v82;
        }
        int v97 = (uint64_t *)((char *)v85 + v84[14]);
        uint64_t *v97 = v95;
        v97[1] = v96;
        _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_1(&lazy protocol witness table cache variable for type MultipleDataPointView and conformance MultipleDataPointView, (void (*)(uint64_t))type metadata accessor for MultipleDataPointView);
        uint64_t v98 = AnyView.init<A>(_:)();
        uint64_t v223 = MEMORY[0x263F1B728];
        uint64_t v224 = MEMORY[0x263F1B710];
        v222[0] = v98;
        goto LABEL_24;
      }
    }
    else
    {
      _s10WellnessUI17SnippetHeaderViewVWOhTm_0(v64, (uint64_t (*)(void))type metadata accessor for TemperatureQuerySnippet);
      uint64_t v66 = v183;
      outlined init with copy of TemperatureQueryModel(v59, v183, (uint64_t (*)(void))type metadata accessor for TemperatureQuerySnippet);
    }
    uint64_t v67 = Model;
    uint64_t v68 = *(void *)(v66 + Model[11] + 8);
    _s10WellnessUI17SnippetHeaderViewVWOhTm_0(v66, (uint64_t (*)(void))type metadata accessor for TemperatureQuerySnippet);
    uint64_t v56 = v67;
    if (v68) {
      goto LABEL_13;
    }
  }
  uint64_t v99 = (uint64_t *)(v59 + v56[14]);
  uint64_t v100 = (void *)v99[1];
  if (v100)
  {
    uint64_t v101 = *v99;
    uint64_t Model = (int *)v59;
    uint64_t v102 = v59;
    uint64_t v103 = v177;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v102, v177, &demangling cache variable for type metadata for AppPunchout?);
    if (v164(v103, 1, v170) == 1)
    {
      outlined destroy of Font.Design?(v103, &demangling cache variable for type metadata for AppPunchout?);
      uint64_t v104 = AnyView.init<A>(_:)();
      uint64_t v223 = MEMORY[0x263F1B728];
      uint64_t v224 = MEMORY[0x263F1B710];
      v222[0] = v104;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined destroy of Font.Design?(v103, &demangling cache variable for type metadata for AppPunchout?);
      (*(void (**)(char *, void, uint64_t))(v180 + 104))(v184, *MEMORY[0x263F1A6E0], v181);
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v106._uint64_t countAndFlagsBits = 0;
      v106._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v106);
      v107._uint64_t countAndFlagsBits = v101;
      v107._object = v100;
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v107);
      swift_bridgeObjectRelease();
      v108._uint64_t countAndFlagsBits = 0;
      v108._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v108);
      LocalizedStringKey.init(stringInterpolation:)();
      uint64_t v109 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v111 = v110;
      uint64_t v188 = v112;
      char v114 = v113 & 1;
      uint64_t v115 = *MEMORY[0x263F1A618];
      uint64_t v116 = type metadata accessor for Font.Design();
      uint64_t v117 = *(void *)(v116 - 8);
      uint64_t v118 = (uint64_t)v172;
      (*(void (**)(char *, uint64_t, uint64_t))(v117 + 104))(v172, v115, v116);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v117 + 56))(v118, 0, 1, v116);
      static Font.system(_:design:weight:)();
      outlined destroy of Font.Design?(v118, &demangling cache variable for type metadata for Font.Design?);
      uint64_t v119 = Text.font(_:)();
      uint64_t v121 = v120;
      LOBYTE(v116) = v122;
      swift_release();
      LOBYTE(v115) = v116 & 1;
      outlined consume of Text.Storage(v109, v111, v114);
      swift_bridgeObjectRelease();
      uint64_t v123 = Text.bold()();
      uint64_t v187 = v124;
      uint64_t v188 = v123;
      uint64_t v182 = v125;
      LODWORD(v116) = v126 & 1;
      outlined consume of Text.Storage(v119, v121, v115);
      swift_bridgeObjectRelease();
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v127._uint64_t countAndFlagsBits = 0;
      v127._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v127);
      v128._uint64_t countAndFlagsBits = SpeakableString.print.getter();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v128);
      swift_bridgeObjectRelease();
      v129._uint64_t countAndFlagsBits = 0;
      v129._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v129);
      LocalizedStringKey.init(stringInterpolation:)();
      uint64_t v130 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v132 = v131;
      uint64_t v134 = v133;
      LOBYTE(v109) = v135 & 1;
      uint64_t v223 = MEMORY[0x263F1A838];
      uint64_t v224 = MEMORY[0x263F77350];
      uint64_t v136 = swift_allocObject();
      v222[0] = v136;
      uint64_t v137 = v187;
      uint64_t v138 = v188;
      *(void *)(v136 + 16) = v188;
      *(void *)(v136 + 24) = v137;
      LODWORD(v183) = v116;
      *(unsigned char *)(v136 + 32) = v116;
      *(void *)(v136 + 40) = v182;
      uint64_t OpaqueTypeConformance2 = 0;
      long long v219 = 0u;
      long long v220 = 0u;
      uint64_t v218 = 0;
      long long v216 = 0u;
      long long v217 = 0u;
      uint64_t v214 = MEMORY[0x263F1A838];
      uint64_t v215 = MEMORY[0x263F77350];
      uint64_t v139 = swift_allocObject();
      uint64_t v212 = 0;
      uint64_t v213 = v139;
      *(void *)(v139 + 16) = v130;
      *(void *)(v139 + 24) = v132;
      *(unsigned char *)(v139 + 32) = v109;
      *(void *)(v139 + 40) = v134;
      long long v210 = 0u;
      long long v211 = 0u;
      uint64_t v209 = 0;
      long long v207 = 0u;
      long long v208 = 0u;
      outlined copy of Text.Storage(v138, v137, v116);
      swift_bridgeObjectRetain();
      LOBYTE(v137) = v109;
      outlined copy of Text.Storage(v130, v132, v109);
      swift_bridgeObjectRetain();
      long long v140 = v174;
      FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
      *((void *)&v220 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
      uint64_t v141 = _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_1(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
      uint64_t v142 = v176;
      v222[0] = v176;
      v222[1] = v141;
      uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v219);
      View.componentSpacing(top:bottom:)();
      outlined consume of Text.Storage(v130, v132, v137);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v188, v187, v183);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v175 + 8))(v140, v142);
      (*(void (**)(char *, uint64_t))(v180 + 8))(v184, v181);
      outlined init with take of View(&v219, (uint64_t)v222);
    }
    uint64_t v73 = (uint64_t)Model;
  }
  else
  {
    uint64_t v105 = AnyView.init<A>(_:)();
    uint64_t v223 = MEMORY[0x263F1B728];
    uint64_t v224 = MEMORY[0x263F1B710];
    v222[0] = v105;
    uint64_t v73 = v59;
  }
LABEL_24:
  uint64_t v144 = v185;
  uint64_t v143 = v186;
  uint64_t v145 = v202;
  outlined init with copy of TemperatureQueryModel(v204, v202, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  outlined init with copy of View((uint64_t)v222, (uint64_t)&v219);
  unint64_t v146 = (*(unsigned __int8 *)(v144 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v144 + 80);
  unint64_t v147 = (v143 + v146 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v148 = swift_allocObject();
  _s10WellnessUI21TemperatureQueryModelVWObTm_0(v145, v148 + v146, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  outlined init with take of View(&v219, v148 + v147);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, AnyView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
  long long v149 = v194;
  ComponentStack.init(content:)();
  uint64_t v150 = v193;
  outlined init with copy of TemperatureQueryModel(v73, v193, (uint64_t (*)(void))type metadata accessor for TemperatureQuerySnippet);
  uint64_t v151 = v205;
  uint64_t v152 = v190;
  uint64_t v153 = v170;
  (*(void (**)(char *, char *, uint64_t))(v205 + 16))(v190, v203, v170);
  unint64_t v154 = (*(unsigned __int8 *)(v191 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80);
  unint64_t v155 = (v192 + *(unsigned __int8 *)(v151 + 80) + v154) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80);
  uint64_t v156 = swift_allocObject();
  _s10WellnessUI21TemperatureQueryModelVWObTm_0(v150, v156 + v154, (uint64_t (*)(void))type metadata accessor for TemperatureQuerySnippet);
  v166((char *)(v156 + v155), v152, v153);
  uint64_t v157 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, AnyView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
  long long v158 = v196;
  uint64_t v159 = v199;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v197 + 8))(v149, v159);
  uint64_t v160 = v198;
  uint64_t v161 = v200;
  (*(void (**)(char *, char *, uint64_t))(v198 + 16))(v195, v158, v200);
  *(void *)&long long v219 = v159;
  *((void *)&v219 + 1) = v157;
  swift_getOpaqueTypeConformance2();
  uint64_t v162 = AnyView.init<A>(_:)();
  (*(void (**)(char *, uint64_t))(v160 + 8))(v158, v161);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v222);
  _s10WellnessUI17SnippetHeaderViewVWOhTm_0(v204, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  (*(void (**)(char *, uint64_t))(v151 + 8))(v203, v153);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v168 + 8))(v171, v169);
  *uint64_t v206 = v162;
  return result;
}

uint64_t closure #1 in TemperatureQuerySnippet.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderView();
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v17 - v10;
  outlined init with copy of TemperatureQueryModel(a1, (uint64_t)&v17 - v10, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v12 = __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  MEMORY[0x270FA5388](v12);
  (*(void (**)(char *))(v14 + 16))((char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = AnyView.init<A>(_:)();
  outlined init with copy of TemperatureQueryModel((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  outlined init with copy of TemperatureQueryModel((uint64_t)v9, a3, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  *(void *)(a3
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, AnyView))
                     + 48)) = v15;
  swift_retain();
  _s10WellnessUI17SnippetHeaderViewVWOhTm_0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  swift_release();
  return _s10WellnessUI17SnippetHeaderViewVWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
}

void closure #2 in TemperatureQuerySnippet.body.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + *(int *)(type metadata accessor for TemperatureQuerySnippet() + 20));
  if (v1)
  {
    id v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();
  }
  else
  {
    type metadata accessor for Context();
    _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_1(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t outlined init with copy of View(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_26182253C()
{
  uint64_t v1 = type metadata accessor for SnippetHeaderView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v0 + v3, 1, v6))
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v3, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = v5 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = v5 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  unint64_t v12 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = v12 + 40;
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v12);

  return MEMORY[0x270FA0238](v0, v13, v2 | 7);
}

uint64_t partial apply for closure #1 in TemperatureQuerySnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SnippetHeaderView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in TemperatureQuerySnippet.body.getter(v1 + v4, v5, a1);
}

uint64_t outlined init with copy of TemperatureQueryModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_261822880()
{
  uint64_t Snippet = type metadata accessor for TemperatureQuerySnippet();
  uint64_t v20 = *(unsigned __int8 *)(*(void *)(Snippet - 8) + 80);
  uint64_t v21 = Snippet;
  uint64_t v18 = *(void *)(*(void *)(Snippet - 8) + 64);
  uint64_t v2 = type metadata accessor for AppPunchout();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v17 = *(void *)(v3 + 64);
  uint64_t v22 = v0;
  uint64_t v19 = (v20 + 16) & ~v20;
  uint64_t v5 = v0 + v19;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v0 + v19, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t Model = (int *)type metadata accessor for TemperatureQueryModel();
  uint64_t v7 = v5 + Model[10];
  uint64_t v8 = type metadata accessor for SpeakableString();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + Model[16];
  if (!v10(v11, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = v5 + Model[18];
  uint64_t v13 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = v20 | v4 | 7;
  uint64_t v15 = (v19 + v18 + v4) & ~v4;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v22 + v15, v2);

  return MEMORY[0x270FA0238](v22, v15 + v17, v14);
}

uint64_t _s10WellnessUI21TemperatureQueryModelVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void partial apply for closure #2 in TemperatureQuerySnippet.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for TemperatureQuerySnippet() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for AppPunchout();

  closure #2 in TemperatureQuerySnippet.body.getter(v0 + v2);
}

uint64_t sub_261822D18()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in TemperatureQuerySnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for TemperatureQuerySnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for AppPunchout();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    uint64_t Model = (int *)type metadata accessor for TemperatureQueryModel();
    uint64_t v11 = Model[5];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = Model[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = Model[7];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    v18[8] = v19[8];
    *(void *)uint64_t v18 = *(void *)v19;
    uint64_t v20 = Model[8];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    v21[8] = v22[8];
    *(void *)uint64_t v21 = *(void *)v22;
    uint64_t v23 = Model[9];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    v24[8] = v25[8];
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v26 = Model[10];
    uint64_t v27 = (char *)a1 + v26;
    uint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = type metadata accessor for SpeakableString();
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v86 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
    uint64_t v84 = v30;
    if (v86(v28, 1, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    uint64_t v32 = v29;
    uint64_t v33 = Model[11];
    uint64_t v34 = (uint64_t *)((char *)a1 + v33);
    uint64_t v35 = (uint64_t *)((char *)a2 + v33);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = Model[12];
    uint64_t v38 = (uint64_t *)((char *)a1 + v37);
    uint64_t v39 = (uint64_t *)((char *)a2 + v37);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    uint64_t v41 = Model[13];
    uint64_t v42 = (uint64_t *)((char *)a1 + v41);
    uint64_t v43 = (uint64_t *)((char *)a2 + v41);
    uint64_t v44 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v44;
    uint64_t v45 = Model[14];
    uint64_t v46 = (uint64_t *)((char *)a1 + v45);
    char v47 = (uint64_t *)((char *)a2 + v45);
    uint64_t v48 = v47[1];
    void *v46 = *v47;
    v46[1] = v48;
    uint64_t v49 = Model[15];
    char v50 = (uint64_t *)((char *)a1 + v49);
    uint64_t v51 = (uint64_t *)((char *)a2 + v49);
    uint64_t v52 = v51[1];
    void *v50 = *v51;
    v50[1] = v52;
    uint64_t v53 = Model[16];
    __dst = (char *)a1 + v53;
    uint64_t v54 = (char *)a2 + v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v55 = v32;
    if (v86(v54, 1, v32))
    {
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(__dst, v54, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(__dst, v54, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(__dst, 0, 1, v32);
    }
    uint64_t v57 = Model[17];
    char v58 = (uint64_t *)((char *)a1 + v57);
    uint64_t v59 = (uint64_t *)((char *)a2 + v57);
    uint64_t v60 = v59[1];
    *char v58 = *v59;
    v58[1] = v60;
    uint64_t v61 = Model[18];
    uint64_t v62 = (char *)a1 + v61;
    uint64_t v63 = (char *)a2 + v61;
    uint64_t v64 = type metadata accessor for SnippetHeaderModel();
    uint64_t v65 = *(void *)(v64 - 8);
    uint64_t v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
    swift_bridgeObjectRetain();
    if (v66(v63, 1, v64))
    {
      uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v62, v63, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v62, v63, v55);
      uint64_t v68 = *(int *)(v64 + 20);
      uint64_t v69 = &v62[v68];
      uint64_t v70 = &v63[v68];
      uint64_t v71 = *((void *)v70 + 1);
      *(void *)uint64_t v69 = *(void *)v70;
      *((void *)v69 + 1) = v71;
      uint64_t v72 = *(int *)(v64 + 24);
      uint64_t v73 = &v62[v72];
      unsigned int v74 = &v63[v72];
      uint64_t v75 = *((void *)v74 + 1);
      *(void *)uint64_t v73 = *(void *)v74;
      *((void *)v73 + 1) = v75;
      uint64_t v76 = *(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v76(v62, 0, 1, v64);
    }
    uint64_t v77 = *(int *)(a3 + 20);
    uint64_t v78 = (uint64_t *)((char *)a1 + v77);
    uint64_t v79 = (char *)a2 + v77;
    uint64_t v81 = *(void **)v79;
    uint64_t v80 = *((void *)v79 + 1);
    *uint64_t v78 = v81;
    v78[1] = v80;
    id v82 = v81;
  }
  return a1;
}

void destroy for TemperatureQuerySnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t Model = (int *)type metadata accessor for TemperatureQueryModel();
  uint64_t v7 = a1 + Model[10];
  uint64_t v8 = type metadata accessor for SpeakableString();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = a1 + Model[16];
  if (!v10(v11, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = a1 + Model[18];
  uint64_t v13 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = *(void **)(a1 + *(int *)(a2 + 20));
}

char *initializeWithCopy for TemperatureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  uint64_t Model = (int *)type metadata accessor for TemperatureQueryModel();
  uint64_t v9 = Model[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  unsigned char v10[8] = v11[8];
  uint64_t v12 = Model[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = Model[7];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  v16[8] = v17[8];
  *(void *)uint64_t v16 = *(void *)v17;
  uint64_t v18 = Model[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  v19[8] = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v21 = Model[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = Model[10];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for SpeakableString();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v84 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  uint64_t v82 = v28;
  if (v84(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = v27;
  uint64_t v31 = Model[11];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = v34;
  uint64_t v35 = Model[12];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  uint64_t v38 = *((void *)v37 + 1);
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = v38;
  uint64_t v39 = Model[13];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = v42;
  uint64_t v43 = Model[14];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = v46;
  uint64_t v47 = Model[15];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  uint64_t v50 = *((void *)v49 + 1);
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = v50;
  uint64_t v51 = Model[16];
  __dst = &a1[v51];
  uint64_t v52 = &a2[v51];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v53 = v30;
  if (v84(v52, 1, v30))
  {
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(__dst, v52, *(void *)(*(void *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(__dst, v52, v30);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(__dst, 0, 1, v30);
  }
  uint64_t v55 = Model[17];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  uint64_t v58 = *((void *)v57 + 1);
  *(void *)uint64_t v56 = *(void *)v57;
  *((void *)v56 + 1) = v58;
  uint64_t v59 = Model[18];
  uint64_t v60 = &a1[v59];
  uint64_t v61 = &a2[v59];
  uint64_t v62 = type metadata accessor for SnippetHeaderModel();
  uint64_t v63 = *(void *)(v62 - 8);
  uint64_t v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
  swift_bridgeObjectRetain();
  if (v64(v61, 1, v62))
  {
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v60, v61, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v60, v61, v53);
    uint64_t v66 = *(int *)(v62 + 20);
    uint64_t v67 = &v60[v66];
    uint64_t v68 = &v61[v66];
    uint64_t v69 = *((void *)v68 + 1);
    *(void *)uint64_t v67 = *(void *)v68;
    *((void *)v67 + 1) = v69;
    uint64_t v70 = *(int *)(v62 + 24);
    uint64_t v71 = &v60[v70];
    uint64_t v72 = &v61[v70];
    uint64_t v73 = *((void *)v72 + 1);
    *(void *)uint64_t v71 = *(void *)v72;
    *((void *)v71 + 1) = v73;
    unsigned int v74 = *(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v74(v60, 0, 1, v62);
  }
  uint64_t v75 = *(int *)(a3 + 20);
  uint64_t v76 = &a1[v75];
  uint64_t v77 = &a2[v75];
  uint64_t v79 = *(void **)v77;
  uint64_t v78 = *((void *)v77 + 1);
  *(void *)uint64_t v76 = v79;
  *((void *)v76 + 1) = v78;
  id v80 = v79;
  return a1;
}

char *assignWithCopy for TemperatureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
LABEL_7:
  uint64_t Model = (int *)type metadata accessor for TemperatureQueryModel();
  uint64_t v12 = Model[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  char v15 = v14[8];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v15;
  uint64_t v16 = Model[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  uint64_t v20 = Model[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = Model[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v27;
  uint64_t v28 = Model[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  char v31 = v30[8];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v31;
  uint64_t v32 = Model[10];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v35 = type metadata accessor for SpeakableString();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_12:
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
LABEL_13:
  uint64_t v41 = Model[11];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = Model[12];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = *((void *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = Model[13];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = *((void *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = Model[14];
  uint64_t v51 = &a1[v50];
  uint64_t v52 = &a2[v50];
  *(void *)uint64_t v51 = *(void *)v52;
  *((void *)v51 + 1) = *((void *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = Model[15];
  uint64_t v54 = &a1[v53];
  uint64_t v55 = &a2[v53];
  *(void *)uint64_t v54 = *(void *)v55;
  *((void *)v54 + 1) = *((void *)v55 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = Model[16];
  uint64_t v57 = &a1[v56];
  uint64_t v58 = &a2[v56];
  int v59 = v37(&a1[v56], 1, v35);
  int v60 = v37(v58, 1, v35);
  uint64_t v94 = v36;
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v57, v58, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v57, 0, 1, v35);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v57, v35);
LABEL_18:
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v57, v58, v35);
LABEL_19:
  uint64_t v62 = Model[17];
  uint64_t v63 = &a1[v62];
  uint64_t v64 = &a2[v62];
  *(void *)uint64_t v63 = *(void *)v64;
  *((void *)v63 + 1) = *((void *)v64 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v65 = Model[18];
  uint64_t v66 = &a1[v65];
  uint64_t v67 = &a2[v65];
  uint64_t v68 = type metadata accessor for SnippetHeaderModel();
  uint64_t v69 = *(void *)(v68 - 8);
  uint64_t v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
  int v71 = v70(v66, 1, v68);
  int v72 = v70(v67, 1, v68);
  if (!v71)
  {
    if (!v72)
    {
      (*(void (**)(char *, char *, uint64_t))(v94 + 24))(v66, v67, v35);
      uint64_t v88 = *(int *)(v68 + 20);
      uint64_t v89 = &v66[v88];
      uint64_t v90 = &v67[v88];
      *(void *)uint64_t v89 = *(void *)v90;
      *((void *)v89 + 1) = *((void *)v90 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v91 = *(int *)(v68 + 24);
      uint64_t v92 = &v66[v91];
      uint64_t v93 = &v67[v91];
      *(void *)uint64_t v92 = *(void *)v93;
      *((void *)v92 + 1) = *((void *)v93 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    _s10WellnessUI17SnippetHeaderViewVWOhTm_0((uint64_t)v66, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v72)
  {
LABEL_24:
    uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v66, v67, *(void *)(*(void *)(v80 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v66, v67, v35);
  uint64_t v73 = *(int *)(v68 + 20);
  unsigned int v74 = &v66[v73];
  uint64_t v75 = &v67[v73];
  *(void *)unsigned int v74 = *(void *)v75;
  *((void *)v74 + 1) = *((void *)v75 + 1);
  uint64_t v76 = *(int *)(v68 + 24);
  uint64_t v77 = &v66[v76];
  uint64_t v78 = &v67[v76];
  *(void *)uint64_t v77 = *(void *)v78;
  *((void *)v77 + 1) = *((void *)v78 + 1);
  uint64_t v79 = *(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79(v66, 0, 1, v68);
LABEL_25:
  uint64_t v81 = *(int *)(a3 + 20);
  uint64_t v82 = &a1[v81];
  uint64_t v83 = &a2[v81];
  uint64_t v84 = *(void **)&a1[v81];
  uint64_t v85 = *(void **)v83;
  *(void *)uint64_t v82 = *(void *)v83;
  id v86 = v85;

  *((void *)v82 + 1) = *((void *)v83 + 1);
  return a1;
}

uint64_t _s10WellnessUI17SnippetHeaderViewVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for TemperatureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t Model = (int *)type metadata accessor for TemperatureQueryModel();
  uint64_t v10 = Model[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = Model[6];
  uint64_t v14 = &a1[v13];
  char v15 = &a2[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = Model[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  v17[8] = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = Model[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  v20[8] = v21[8];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = Model[9];
  char v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  v23[8] = v24[8];
  *(void *)char v23 = *(void *)v24;
  uint64_t v25 = Model[10];
  uint64_t v26 = &a1[v25];
  char v27 = &a2[v25];
  uint64_t v28 = type metadata accessor for SpeakableString();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v30(v27, 1, v28))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  *(_OWORD *)&a1[Model[11]] = *(_OWORD *)&a2[Model[11]];
  *(_OWORD *)&a1[Model[12]] = *(_OWORD *)&a2[Model[12]];
  *(_OWORD *)&a1[Model[13]] = *(_OWORD *)&a2[Model[13]];
  *(_OWORD *)&a1[Model[14]] = *(_OWORD *)&a2[Model[14]];
  *(_OWORD *)&a1[Model[15]] = *(_OWORD *)&a2[Model[15]];
  uint64_t v32 = Model[16];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  if (v30(&a2[v32], 1, v28))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v33, v34, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v33, 0, 1, v28);
  }
  *(_OWORD *)&a1[Model[17]] = *(_OWORD *)&a2[Model[17]];
  uint64_t v36 = Model[18];
  uint64_t v37 = &a1[v36];
  int v38 = &a2[v36];
  uint64_t v39 = type metadata accessor for SnippetHeaderModel();
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v37, v38, v28);
    *(_OWORD *)&v37[*(int *)(v39 + 20)] = *(_OWORD *)&v38[*(int *)(v39 + 20)];
    *(_OWORD *)&v37[*(int *)(v39 + 24)] = *(_OWORD *)&v38[*(int *)(v39 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for TemperatureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
LABEL_7:
  uint64_t Model = (int *)type metadata accessor for TemperatureQueryModel();
  uint64_t v12 = Model[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = Model[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = Model[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  v19[8] = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v21 = Model[8];
  uint64_t v22 = &a1[v21];
  char v23 = &a2[v21];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = Model[9];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  v25[8] = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  uint64_t v27 = Model[10];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = type metadata accessor for SpeakableString();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
LABEL_12:
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v28, v29, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v28, v29, v30);
LABEL_13:
  uint64_t v36 = Model[11];
  uint64_t v37 = &a1[v36];
  int v38 = &a2[v36];
  uint64_t v40 = *(void *)v38;
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = v40;
  *((void *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = Model[12];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  uint64_t v45 = *(void *)v43;
  uint64_t v44 = *((void *)v43 + 1);
  *(void *)uint64_t v42 = v45;
  *((void *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = Model[13];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  uint64_t v50 = *(void *)v48;
  uint64_t v49 = *((void *)v48 + 1);
  *(void *)uint64_t v47 = v50;
  *((void *)v47 + 1) = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = Model[14];
  uint64_t v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  uint64_t v55 = *(void *)v53;
  uint64_t v54 = *((void *)v53 + 1);
  *(void *)uint64_t v52 = v55;
  *((void *)v52 + 1) = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = Model[15];
  uint64_t v57 = &a1[v56];
  uint64_t v58 = &a2[v56];
  uint64_t v60 = *(void *)v58;
  uint64_t v59 = *((void *)v58 + 1);
  *(void *)uint64_t v57 = v60;
  *((void *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
  uint64_t v61 = Model[16];
  uint64_t v62 = &a1[v61];
  uint64_t v63 = &a2[v61];
  int v64 = v32(&a1[v61], 1, v30);
  int v65 = v32(v63, 1, v30);
  uint64_t v96 = v31;
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v62, v63, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v62, 0, 1, v30);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v62, v30);
LABEL_18:
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v62, v63, v30);
LABEL_19:
  uint64_t v67 = Model[17];
  uint64_t v68 = &a1[v67];
  uint64_t v69 = &a2[v67];
  uint64_t v71 = *(void *)v69;
  uint64_t v70 = *((void *)v69 + 1);
  *(void *)uint64_t v68 = v71;
  *((void *)v68 + 1) = v70;
  swift_bridgeObjectRelease();
  uint64_t v72 = Model[18];
  uint64_t v73 = &a1[v72];
  unsigned int v74 = &a2[v72];
  uint64_t v75 = type metadata accessor for SnippetHeaderModel();
  uint64_t v76 = *(void *)(v75 - 8);
  uint64_t v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48);
  int v78 = v77(v73, 1, v75);
  int v79 = v77(v74, 1, v75);
  if (!v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v96 + 40))(v73, v74, v30);
      uint64_t v86 = *(int *)(v75 + 20);
      uint64_t v87 = &v73[v86];
      uint64_t v88 = &v74[v86];
      uint64_t v90 = *(void *)v88;
      uint64_t v89 = *((void *)v88 + 1);
      *(void *)uint64_t v87 = v90;
      *((void *)v87 + 1) = v89;
      swift_bridgeObjectRelease();
      uint64_t v91 = *(int *)(v75 + 24);
      uint64_t v92 = &v73[v91];
      uint64_t v93 = &v74[v91];
      uint64_t v95 = *(void *)v93;
      uint64_t v94 = *((void *)v93 + 1);
      *(void *)uint64_t v92 = v95;
      *((void *)v92 + 1) = v94;
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    _s10WellnessUI17SnippetHeaderViewVWOhTm_0((uint64_t)v73, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v79)
  {
LABEL_24:
    uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v73, v74, *(void *)(*(void *)(v80 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v73, v74, v30);
  *(_OWORD *)&v73[*(int *)(v75 + 20)] = *(_OWORD *)&v74[*(int *)(v75 + 20)];
  *(_OWORD *)&v73[*(int *)(v75 + 24)] = *(_OWORD *)&v74[*(int *)(v75 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
LABEL_25:
  uint64_t v81 = *(int *)(a3 + 20);
  uint64_t v82 = &a1[v81];
  uint64_t v83 = &a2[v81];
  uint64_t v84 = *(void **)&a1[v81];
  *(void *)uint64_t v82 = *(void *)v83;

  *((void *)v82 + 1) = *((void *)v83 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemperatureQuerySnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261824E14);
}

uint64_t sub_261824E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  uint64_t v7 = *(void *)(Model - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, Model);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TemperatureQuerySnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_261824EF4);
}

uint64_t sub_261824EF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for TemperatureQueryModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata completion function for TemperatureQuerySnippet()
{
  uint64_t result = type metadata accessor for TemperatureQueryModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_261825044()
{
  return MEMORY[0x263F1B710];
}

void __swiftcall HKActivityRingUIViewRepresentable.init(model:)(WellnessUI::HKActivityRingUIViewRepresentable *__return_ptr retstr, WellnessUI::PhoneRingsModel *model)
{
  Swift::String_optional standValueLabel = model->standValueLabel;
  retstr->model.standLabel = model->standLabel;
  retstr->model.Swift::String_optional standValueLabel = standValueLabel;
  retstr->model.standUnitLabel = model->standUnitLabel;
  retstr->model.isSmartEnabled = model->isSmartEnabled;
  Swift::String_optional moveLabel = model->moveLabel;
  retstr->model.exerciseUnitLabel = model->exerciseUnitLabel;
  retstr->model.Swift::String_optional moveLabel = moveLabel;
  Swift::String_optional moveUnitLabel = model->moveUnitLabel;
  retstr->model.moveValueLabel = model->moveValueLabel;
  retstr->model.Swift::String_optional moveUnitLabel = moveUnitLabel;
  long long v5 = *(_OWORD *)&model->standTotalValue.value;
  *(_OWORD *)&retstr->model.standGoalValue.value = *(_OWORD *)&model->standGoalValue.value;
  *(_OWORD *)&retstr->model.standTotalValue.value = v5;
  Swift::String_optional exerciseValueLabel = model->exerciseValueLabel;
  retstr->model.exerciseLabel = model->exerciseLabel;
  retstr->model.Swift::String_optional exerciseValueLabel = exerciseValueLabel;
  long long v7 = *(_OWORD *)&model->exerciseTotalValue.value;
  *(_OWORD *)&retstr->model.exerciseGoalValue.value = *(_OWORD *)&model->exerciseGoalValue.value;
  *(_OWORD *)&retstr->model.exerciseTotalValue.value = v7;
  long long v8 = *(_OWORD *)&model->moveTotalValue.value;
  *(_OWORD *)&retstr->model.moveGoalValue.value = *(_OWORD *)&model->moveGoalValue.value;
  *(_OWORD *)&retstr->model.moveTotalValue.value = v8;
}

uint64_t HKActivityRingUIViewRepresentable.model.getter@<X0>(uint64_t a1@<X8>)
{
  long long v2 = v1[13];
  long long v3 = v1[11];
  long long v34 = v1[12];
  long long v35 = v2;
  long long v4 = v1[13];
  long long v36 = v1[14];
  long long v5 = v1[9];
  long long v7 = v1[7];
  long long v30 = v1[8];
  long long v6 = v30;
  long long v31 = v5;
  long long v8 = v1[9];
  long long v9 = v1[11];
  long long v32 = v1[10];
  long long v10 = v32;
  long long v33 = v9;
  long long v11 = v1[5];
  long long v13 = v1[3];
  long long v26 = v1[4];
  long long v12 = v26;
  long long v27 = v11;
  long long v14 = v1[5];
  long long v15 = v1[7];
  long long v28 = v1[6];
  long long v16 = v28;
  long long v29 = v15;
  long long v17 = v1[1];
  v23[0] = *v1;
  v23[1] = v17;
  long long v18 = v1[3];
  long long v20 = *v1;
  long long v19 = v1[1];
  long long v24 = v1[2];
  long long v21 = v24;
  long long v25 = v18;
  *(_OWORD *)(a1 + 192) = v34;
  *(_OWORD *)(a1 + 208) = v4;
  *(_OWORD *)(a1 + 224) = v1[14];
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v3;
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v14;
  *(_OWORD *)(a1 + 96) = v16;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)a1 = v20;
  *(_OWORD *)(a1 + 16) = v19;
  char v37 = *((unsigned char *)v1 + 240);
  *(unsigned char *)(a1 + 240) = *((unsigned char *)v1 + 240);
  *(_OWORD *)(a1 + 32) = v21;
  *(_OWORD *)(a1 + 48) = v13;
  return outlined retain of PhoneRingsModel((uint64_t)v23);
}

id HKActivityRingUIViewRepresentable.makeUIView(context:)()
{
  double v1 = *(double *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  double v3 = *(double *)(v0 + 16);
  int v4 = *(unsigned __int8 *)(v0 + 24);
  double v5 = *(double *)(v0 + 32);
  int v6 = *(unsigned __int8 *)(v0 + 40);
  double v7 = *(double *)(v0 + 48);
  int v8 = *(unsigned __int8 *)(v0 + 56);
  double v9 = *(double *)(v0 + 64);
  double v10 = *(double *)(v0 + 80);
  int v33 = *(unsigned __int8 *)(v0 + 88);
  int v34 = *(unsigned __int8 *)(v0 + 72);
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A090]), sel_init);
  long long v12 = self;
  id v13 = objc_msgSend(v12, sel_largeCalorieUnit);
  if (v8) {
    double v7 = 0.0;
  }
  long long v14 = self;
  id v15 = objc_msgSend(v14, sel_quantityWithUnit_doubleValue_, v13, v7);

  objc_msgSend(v11, sel_setActiveEnergyBurned_, v15);
  id v16 = objc_msgSend(v12, sel_largeCalorieUnit);
  double v17 = 500.0;
  if (!v6) {
    double v17 = v5;
  }
  id v18 = objc_msgSend(v14, sel_quantityWithUnit_doubleValue_, v16, v17);

  objc_msgSend(v11, sel_setActiveEnergyBurnedGoal_, v18);
  id v19 = objc_msgSend(v12, sel_hourUnit);
  if (v4) {
    double v20 = 0.0;
  }
  else {
    double v20 = v3;
  }
  id v21 = objc_msgSend(v14, sel_quantityWithUnit_doubleValue_, v19, v20);

  objc_msgSend(v11, sel_setAppleExerciseTime_, v21);
  id v22 = objc_msgSend(v12, sel_hourUnit);
  double v23 = 30.0;
  if (!v2) {
    double v23 = v1;
  }
  id v24 = objc_msgSend(v14, sel_quantityWithUnit_doubleValue_, v22, v23);

  objc_msgSend(v11, sel_setAppleExerciseTimeGoal_, v24);
  id v25 = objc_msgSend(v12, sel_countUnit);
  if (v33) {
    double v26 = 0.0;
  }
  else {
    double v26 = v10;
  }
  id v27 = objc_msgSend(v14, sel_quantityWithUnit_doubleValue_, v25, v26);

  objc_msgSend(v11, sel_setAppleStandHours_, v27);
  id v28 = objc_msgSend(v12, sel_countUnit);
  double v29 = 12.0;
  if (!v34) {
    double v29 = v9;
  }
  id v30 = objc_msgSend(v14, sel_quantityWithUnit_doubleValue_, v28, v29);

  objc_msgSend(v11, sel_setAppleStandHoursGoal_, v30);
  id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0AE08]), sel_init);
  objc_msgSend(v31, sel_setActivitySummary_animated_, v11, 1);

  return v31;
}

unint64_t lazy protocol witness table accessor for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable()
{
  unint64_t result = lazy protocol witness table cache variable for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable;
  if (!lazy protocol witness table cache variable for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable;
  if (!lazy protocol witness table cache variable for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable);
  }
  return result;
}

uint64_t protocol witness for UIViewRepresentable._resetUIView(_:coordinator:destroy:) in conformance HKActivityRingUIViewRepresentable()
{
  return MEMORY[0x270F016E8]();
}

uint64_t protocol witness for static UIViewRepresentable.dismantleUIView(_:coordinator:) in conformance HKActivityRingUIViewRepresentable()
{
  return MEMORY[0x270F016F0]();
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance HKActivityRingUIViewRepresentable()
{
  return MEMORY[0x270F01798]();
}

uint64_t protocol witness for UIViewRepresentable._identifiedViewTree(in:) in conformance HKActivityRingUIViewRepresentable()
{
  return MEMORY[0x270F01730]();
}

uint64_t protocol witness for UIViewRepresentable.sizeThatFits(_:uiView:context:) in conformance HKActivityRingUIViewRepresentable()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t protocol witness for UIViewRepresentable._overrideSizeThatFits(_:in:uiView:) in conformance HKActivityRingUIViewRepresentable()
{
  return MEMORY[0x270F01750]();
}

uint64_t protocol witness for UIViewRepresentable._overrideLayoutTraits(_:for:) in conformance HKActivityRingUIViewRepresentable()
{
  return MEMORY[0x270F01740]();
}

uint64_t protocol witness for static UIViewRepresentable._modifyBridgedViewInputs(_:) in conformance HKActivityRingUIViewRepresentable()
{
  return MEMORY[0x270F01760]();
}

uint64_t protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance HKActivityRingUIViewRepresentable()
{
  return MEMORY[0x270F01720]();
}

uint64_t associated type witness table accessor for View.Body : View in HKActivityRingUIViewRepresentable()
{
  return MEMORY[0x263F1BB60];
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance HKActivityRingUIViewRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable();

  return MEMORY[0x270F01788](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance HKActivityRingUIViewRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type HKActivityRingUIViewRepresentable and conformance HKActivityRingUIViewRepresentable();

  return MEMORY[0x270F01710](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance HKActivityRingUIViewRepresentable()
{
}

uint64_t initializeBufferWithCopyOfBuffer for HKActivityRingUIViewRepresentable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for HKActivityRingUIViewRepresentable()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HKActivityRingUIViewRepresentable(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v4;
  uint64_t v5 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v5;
  uint64_t v6 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v6;
  uint64_t v7 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v7;
  uint64_t v8 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v8;
  uint64_t v9 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v9;
  uint64_t v10 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v10;
  uint64_t v11 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v11;
  uint64_t v12 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v12;
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HKActivityRingUIViewRepresentable(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = a2[8];
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = a2[10];
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = a2[14];
  *(void *)(a1 + 120) = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = a2[16];
  *(void *)(a1 + 136) = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = a2[18];
  *(void *)(a1 + 152) = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = a2[20];
  *(void *)(a1 + 168) = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = a2[22];
  *(void *)(a1 + 184) = a2[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = a2[24];
  *(void *)(a1 + 200) = a2[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = a2[26];
  *(void *)(a1 + 216) = a2[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = a2[28];
  *(void *)(a1 + 232) = a2[29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 240) = *((unsigned char *)a2 + 240);
  return a1;
}

__n128 __swift_memcpy241_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(unsigned char *)(a1 + 240) = *((unsigned char *)a2 + 240);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for HKActivityRingUIViewRepresentable(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKActivityRingUIViewRepresentable(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 241)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 104);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HKActivityRingUIViewRepresentable(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 240) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 241) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 241) = 0;
    }
    if (a2) {
      *(void *)(result + 104) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKActivityRingUIViewRepresentable()
{
  return &type metadata for HKActivityRingUIViewRepresentable;
}

uint64_t SingleDataPointView.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SingleDataPointView.unit.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SingleDataPointView.dateLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SingleDataPointView.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SingleDataPointView() + 32);

  return outlined init with copy of AppPunchout?(v3, a1);
}

uint64_t type metadata accessor for SingleDataPointView()
{
  uint64_t result = type metadata singleton initialization cache for SingleDataPointView;
  if (!type metadata singleton initialization cache for SingleDataPointView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of AppPunchout?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SingleDataPointView.init(data:unit:dateLabel:appPunchout:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  *a8 = EnvironmentObject.init()();
  a8[1] = v16;
  a8[2] = a1;
  a8[3] = a2;
  a8[4] = a3;
  a8[5] = a4;
  a8[6] = a5;
  a8[7] = a6;
  uint64_t v17 = (uint64_t)a8 + *(int *)(type metadata accessor for SingleDataPointView() + 32);

  return outlined init with take of AppPunchout?(a7, v17);
}

uint64_t outlined init with take of AppPunchout?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SingleDataPointView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v131 = a1;
  uint64_t v2 = type metadata accessor for FactItemHeroNumberView();
  uint64_t v126 = *(void *)(v2 - 8);
  uint64_t v127 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v124 = (char *)v104 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v129 = *(void *)(v123 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v123);
  uint64_t v125 = (char *)v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  Swift::String v128 = (char *)v104 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v130 = (char *)v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v10 = type metadata accessor for Font.TextStyle();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  long long v14 = (char *)v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v104 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v17 - 8);
  id v19 = (char *)v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = *(void **)(v1 + 24);
  if (v20)
  {
    id v21 = *(void **)(v1 + 40);
    if (v21)
    {
      if (*(void *)(v1 + 56))
      {
        v121._object = *(void **)(v1 + 56);
        uint64_t v22 = *(void *)(v1 + 16);
        uint64_t v119 = *(void *)(v1 + 32);
        uint64_t v120 = v22;
        v121._uint64_t countAndFlagsBits = *(void *)(v1 + 48);
        uint64_t v23 = type metadata accessor for SingleDataPointView();
        outlined init with copy of AppPunchout?(v1 + *(int *)(v23 + 32), (uint64_t)v19);
        uint64_t v24 = type metadata accessor for AppPunchout();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v19, 1, v24) != 1)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined destroy of Font.Design?((uint64_t)v19, &demangling cache variable for type metadata for AppPunchout?);
          uint64_t v27 = *MEMORY[0x263F1A6E0];
          uint64_t v122 = v11;
          id v28 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
          uint64_t v118 = v16;
          v28(v16, v27, v10);
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v29._uint64_t countAndFlagsBits = 0;
          v29._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v29);
          v30._uint64_t countAndFlagsBits = v119;
          v30._object = v21;
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v30);
          swift_bridgeObjectRelease();
          v31._uint64_t countAndFlagsBits = 0;
          v31._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v31);
          LocalizedStringKey.init(stringInterpolation:)();
          uint64_t v32 = Text.init(_:tableName:bundle:comment:)();
          uint64_t v116 = v33;
          uint64_t v117 = v32;
          uint64_t v119 = v34;
          int v115 = v35 & 1;
          uint64_t v36 = *MEMORY[0x263F1A6D0];
          uint64_t v111 = v10;
          v28(v14, v36, v10);
          unsigned int v113 = *MEMORY[0x263F1A618];
          uint64_t v37 = v113;
          uint64_t v38 = type metadata accessor for Font.Design();
          uint64_t v107 = v38;
          uint64_t v39 = *(void *)(v38 - 8);
          uint64_t v110 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 104);
          uint64_t v114 = v39 + 104;
          uint64_t v40 = (uint64_t)v130;
          v110(v130, v37, v38);
          uint64_t v41 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56);
          uint64_t v108 = v39 + 56;
          uint64_t v109 = v41;
          v41(v40, 0, 1, v38);
          static Font.system(_:design:weight:)();
          outlined destroy of Font.Design?(v40, &demangling cache variable for type metadata for Font.Design?);
          uint64_t v42 = *(uint64_t (**)(char *, uint64_t))(v122 + 8);
          v122 += 8;
          uint64_t v112 = v42;
          v42(v14, v10);
          uint64_t v44 = v116;
          uint64_t v43 = v117;
          LOBYTE(v39) = v115;
          uint64_t v45 = Text.font(_:)();
          uint64_t v105 = v46;
          uint64_t v106 = v47;
          LOBYTE(v37) = v48;
          swift_release();
          outlined consume of Text.Storage(v43, v44, v39);
          swift_bridgeObjectRelease();
          LODWORD(v147) = static HierarchicalShapeStyle.secondary.getter();
          uint64_t v49 = v105;
          uint64_t v50 = Text.foregroundStyle<A>(_:)();
          uint64_t v52 = v51;
          v104[1] = v53;
          char v55 = v54 & 1;
          outlined consume of Text.Storage(v45, v49, v37 & 1);
          swift_bridgeObjectRelease();
          static Font.Weight.semibold.getter();
          uint64_t v56 = Text.fontWeight(_:)();
          uint64_t v116 = v57;
          uint64_t v117 = v56;
          uint64_t v119 = v58;
          int v115 = v59 & 1;
          outlined consume of Text.Storage(v50, v52, v55);
          swift_bridgeObjectRelease();
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v60._uint64_t countAndFlagsBits = 0;
          v60._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v60);
          v61._uint64_t countAndFlagsBits = v120;
          v61._object = v20;
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v61);
          swift_bridgeObjectRelease();
          v62._uint64_t countAndFlagsBits = 0;
          v62._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v62);
          LocalizedStringKey.init(stringInterpolation:)();
          uint64_t v63 = Text.init(_:tableName:bundle:comment:)();
          uint64_t v65 = v64;
          uint64_t v120 = v66;
          char v68 = v67 & 1;
          uint64_t v69 = (uint64_t)v130;
          uint64_t v70 = v107;
          v110(v130, v113, v107);
          v109(v69, 0, 1, v70);
          static Font.system(_:design:weight:)();
          outlined destroy of Font.Design?(v69, &demangling cache variable for type metadata for Font.Design?);
          uint64_t v71 = Text.font(_:)();
          uint64_t v73 = v72;
          LOBYTE(v49) = v74;
          swift_release();
          LOBYTE(v45) = v49 & 1;
          outlined consume of Text.Storage(v63, v65, v68);
          swift_bridgeObjectRelease();
          uint64_t v75 = Text.bold()();
          uint64_t v114 = v76;
          int v78 = v77;
          uint64_t v130 = v77;
          unsigned int v113 = v79 & 1;
          outlined consume of Text.Storage(v71, v73, v45);
          swift_bridgeObjectRelease();
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v80._uint64_t countAndFlagsBits = 0;
          v80._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v80);
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v121);
          v81._uint64_t countAndFlagsBits = 0;
          v81._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v81);
          LocalizedStringKey.init(stringInterpolation:)();
          v121._uint64_t countAndFlagsBits = Text.init(_:tableName:bundle:comment:)();
          v121._object = v82;
          uint64_t v110 = v83;
          LOBYTE(v65) = v84 & 1;
          uint64_t v149 = MEMORY[0x263F1A838];
          uint64_t v150 = MEMORY[0x263F77350];
          uint64_t v85 = MEMORY[0x263F1A838];
          uint64_t v86 = MEMORY[0x263F77350];
          uint64_t v87 = swift_allocObject();
          uint64_t v146 = v86;
          uint64_t v147 = v87;
          uint64_t v120 = v75;
          uint64_t v88 = v114;
          *(void *)(v87 + 16) = v75;
          *(void *)(v87 + 24) = v88;
          char v89 = v113;
          *(unsigned char *)(v87 + 32) = v113;
          *(void *)(v87 + 40) = v78;
          uint64_t v145 = v85;
          uint64_t v90 = v86;
          uint64_t v91 = swift_allocObject();
          uint64_t v143 = 0;
          uint64_t v144 = v91;
          uint64_t v93 = v116;
          uint64_t v92 = v117;
          *(void *)(v91 + 16) = v117;
          *(void *)(v91 + 24) = v93;
          LOBYTE(v86) = v115;
          *(unsigned char *)(v91 + 32) = v115;
          *(void *)(v91 + 40) = v119;
          long long v141 = 0u;
          long long v142 = 0u;
          uint64_t v139 = MEMORY[0x263F1A838];
          uint64_t v140 = v90;
          uint64_t v94 = swift_allocObject();
          uint64_t v137 = 0;
          uint64_t v138 = v94;
          uint64_t countAndFlagsBits = v121._countAndFlagsBits;
          object = v121._object;
          uint64_t v97 = (uint64_t)v110;
          *(void *)(v94 + 16) = v121._countAndFlagsBits;
          *(void *)(v94 + 24) = v97;
          *(unsigned char *)(v94 + 32) = v65;
          *(void *)(v94 + 40) = object;
          long long v135 = 0u;
          long long v136 = 0u;
          uint64_t v134 = 0;
          long long v132 = 0u;
          long long v133 = 0u;
          outlined copy of Text.Storage(v120, v88, v89);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v92, v93, v86);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(countAndFlagsBits, v97, v65);
          swift_bridgeObjectRetain();
          uint64_t v98 = v124;
          FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
          uint64_t v99 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
          uint64_t v101 = v127;
          uint64_t v100 = v128;
          View.componentSpacing(top:bottom:)();
          (*(void (**)(char *, uint64_t))(v126 + 8))(v98, v101);
          uint64_t v102 = v129;
          uint64_t v103 = v123;
          (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v125, v100, v123);
          uint64_t v147 = v101;
          uint64_t v148 = v99;
          swift_getOpaqueTypeConformance2();
          uint64_t v26 = AnyView.init<A>(_:)();
          outlined consume of Text.Storage(v121._countAndFlagsBits, v97, v65);
          swift_bridgeObjectRelease();
          outlined consume of Text.Storage(v117, v116, v115);
          swift_bridgeObjectRelease();
          outlined consume of Text.Storage(v120, v114, v113);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v102 + 8))(v100, v103);
          uint64_t result = v112(v118, v111);
          goto LABEL_7;
        }
        outlined destroy of Font.Design?((uint64_t)v19, &demangling cache variable for type metadata for AppPunchout?);
      }
    }
  }
  uint64_t result = AnyView.init<A>(_:)();
  uint64_t v26 = result;
LABEL_7:
  *uint64_t v131 = v26;
  return result;
}

uint64_t sub_261826A70()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t associated type witness table accessor for View.Body : View in SingleDataPointView()
{
  return swift_getOpaqueTypeConformance2();
}

char *initializeBufferWithCopyOfBuffer for SingleDataPointView(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    uint64_t v6 = a2[4];
    *((void *)a1 + 3) = a2[3];
    *((void *)a1 + 4) = v6;
    uint64_t v7 = a2[6];
    *((void *)a1 + 5) = a2[5];
    *((void *)a1 + 6) = v7;
    uint64_t v8 = *(int *)(a3 + 32);
    __dst = &a1[v8];
    uint64_t v9 = (char *)a2 + v8;
    *((void *)a1 + 7) = a2[7];
    uint64_t v10 = type metadata accessor for AppPunchout();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    uint64_t v13 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(__dst, v9, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    }
  }
  return v5;
}

uint64_t destroy for SingleDataPointView(id *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for SingleDataPointView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(int *)(a3 + 32);
  __dst = (void *)(a1 + v7);
  uint64_t v8 = (const void *)(a2 + v7);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v9 = type metadata accessor for AppPunchout();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  id v12 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(__dst, v8, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithCopy for SingleDataPointView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for AppPunchout();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

_OWORD *initializeWithTake for SingleDataPointView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AppPunchout();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithTake for SingleDataPointView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for AppPunchout();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleDataPointView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2618273CC);
}

uint64_t sub_2618273CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = (char *)a1 + *(int *)(a3 + 32);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for SingleDataPointView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2618274A0);
}

void *sub_2618274A0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for SingleDataPointView()
{
  type metadata accessor for AppPunchout?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for AppPunchout?()
{
  if (!lazy cache variable for type metadata for AppPunchout?)
  {
    type metadata accessor for AppPunchout();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?);
    }
  }
}

uint64_t sub_261827640()
{
  return MEMORY[0x263F1B710];
}

uint64_t HealthDataLogSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of HealthDataLogModel(v1, a1, (uint64_t (*)(void))type metadata accessor for HealthDataLogModel);
}

uint64_t HealthDataLogSnippet.buttonColor.getter()
{
  uint64_t v0 = type metadata accessor for ColorScheme();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v10 - v5;
  type metadata accessor for HealthDataLogSnippet();
  specialized Environment.wrappedValue.getter((uint64_t)v6);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x263F18510], v0);
  char v7 = static ColorScheme.== infix(_:_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  if (v7) {
    return static Color.green.getter();
  }
  else {
    return static Color.blue.getter();
  }
}

uint64_t type metadata accessor for HealthDataLogSnippet()
{
  uint64_t result = type metadata singleton initialization cache for HealthDataLogSnippet;
  if (!type metadata singleton initialization cache for HealthDataLogSnippet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t HealthDataLogSnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for HealthDataLogSnippet();
  uint64_t v5 = (uint64_t *)(a2 + *(int *)(v4 + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  *uint64_t v5 = EnvironmentObject.init()();
  v5[1] = v6;
  char v7 = (uint64_t *)(a2 + *(int *)(v4 + 24));
  *char v7 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of HealthDataLogModel(a1, a2, (uint64_t (*)(void))type metadata accessor for HealthDataLogModel);
}

uint64_t HealthDataLogSnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  char v249 = a1;
  uint64_t v2 = type metadata accessor for HealthDataLogSnippet();
  uint64_t v221 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v222 = v3;
  uint64_t v223 = (uint64_t)v179 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>>);
  uint64_t v226 = *(void *)(v4 - 8);
  uint64_t v227 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v224 = (char *)v179 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v229 = *(void *)(v6 - 8);
  uint64_t v230 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v225 = (char *)v179 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v228 = (char *)v179 - v9;
  uint64_t v10 = type metadata accessor for SeparatorStyle();
  uint64_t v218 = *(void *)(v10 - 8);
  uint64_t v219 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v214 = (char *)v179 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v215 = type metadata accessor for FactItemHeroNumberView();
  uint64_t v213 = *(void *)(v215 - 8);
  MEMORY[0x270FA5388](v215);
  long long v211 = (char *)v179 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  uint64_t v216 = *(void *)(v13 - 8);
  uint64_t v217 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v212 = (char *)v179 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v238 = *(void *)(v15 - 8);
  uint64_t v239 = v15;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  char v234 = (char *)v179 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v220 = v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v237 = (char *)v179 - v18;
  uint64_t v19 = type metadata accessor for StatusIndicatorView.IndicatorType();
  uint64_t v206 = *(void *)(v19 - 8);
  uint64_t v207 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v205 = (char *)v179 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for StatusIndicatorView();
  uint64_t v235 = *(void *)(v21 - 8);
  uint64_t v236 = v21;
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v233 = (char *)v179 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v210 = v23;
  MEMORY[0x270FA5388](v22);
  char v244 = (char *)v179 - v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v231 = (uint64_t)v179 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v240 = (char *)v179 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v203 = type metadata accessor for SnippetHeaderView();
  uint64_t v208 = *(void *)(v203 - 8);
  uint64_t v29 = *(void *)(v208 + 64);
  uint64_t v30 = MEMORY[0x270FA5388](v203);
  uint64_t v232 = (uint64_t)v179 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v243 = (uint64_t)v179 - v31;
  uint64_t v241 = type metadata accessor for Font.TextStyle();
  uint64_t v245 = *(void *)(v241 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v241);
  uint64_t v204 = (char *)v179 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v242 = (char *)v179 - v34;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v35 - 8);
  uint64_t v246 = (void *)((char *)v179 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v247 = type metadata accessor for AppPunchout();
  uint64_t v248 = *(void *)(v247 - 8);
  uint64_t v37 = *(void *)(v248 + 64);
  uint64_t v38 = MEMORY[0x270FA5388](v247);
  uint64_t v209 = (char *)v179 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38);
  uint64_t v40 = (char *)v179 - v39;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v42 = MEMORY[0x270FA5388](v41 - 8);
  uint64_t v44 = (char *)v179 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v42);
  uint64_t v46 = (char *)v179 - v45;
  uint64_t v47 = type metadata accessor for SnippetHeaderModel();
  uint64_t v48 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  uint64_t v50 = (char *)v179 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, (uint64_t)v46, &demangling cache variable for type metadata for SnippetHeaderModel?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v46, &demangling cache variable for type metadata for SnippetHeaderModel?);
LABEL_14:
    unsigned __int8 v178 = v249;
    uint64_t result = AnyView.init<A>(_:)();
    uint64_t v176 = result;
    goto LABEL_15;
  }
  uint64_t v197 = v48;
  uint64_t v198 = v47;
  uint64_t v199 = v44;
  uint64_t v200 = v29;
  uint64_t v201 = v37;
  uint64_t v51 = v247;
  uint64_t v52 = v248;
  outlined init with take of HealthDataLogModel((uint64_t)v46, (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v53 = type metadata accessor for HealthDataLogModel();
  char v54 = (uint64_t *)(v1 + *(int *)(v53 + 32));
  char v55 = (void *)v54[1];
  if (!v55)
  {
    uint64_t v59 = (uint64_t)v50;
LABEL_13:
    outlined destroy of SnippetHeaderModel(v59, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_14;
  }
  uint64_t v56 = (int *)v53;
  uint64_t v202 = v50;
  uint64_t v57 = *v54;
  uint64_t v58 = (void (*)(void, void, void))v246;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v53 + 40), (uint64_t)v246, &demangling cache variable for type metadata for AppPunchout?);
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v52 + 48))(v58, 1, v51) == 1)
  {
    outlined destroy of SnippetHeaderModel((uint64_t)v202, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    outlined destroy of Font.Design?((uint64_t)v58, &demangling cache variable for type metadata for AppPunchout?);
    goto LABEL_14;
  }
  uint64_t v196 = v57;
  Swift::String v60 = v58;
  Swift::String v61 = v40;
  uint64_t v246 = *(void **)(v52 + 32);
  ((void (*)(char *, void, uint64_t))v246)(v40, v60, v51);
  Swift::String v62 = (uint64_t *)(v1 + v56[9]);
  uint64_t v63 = (void *)v62[1];
  if (!v63
    || (uint64_t v64 = (uint64_t *)(v1 + v56[6]), (v65 = (void *)v64[1]) == 0)
    || (uint64_t v66 = (uint64_t *)(v1 + v56[7]), (v67 = (void *)v66[1]) == 0)
    || (v68 = (uint64_t *)(v1 + v56[11]), (uint64_t v69 = v68[1]) == 0))
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v51);
    uint64_t v59 = (uint64_t)v202;
    goto LABEL_13;
  }
  uint64_t v183 = *v62;
  uint64_t v184 = *v64;
  uint64_t v70 = *v68;
  uint64_t v185 = *v66;
  uint64_t v186 = v70;
  uint64_t v71 = *MEMORY[0x263F1A6E0];
  uint64_t v189 = *(void (**)(char *, uint64_t, uint64_t))(v245 + 104);
  uint64_t v192 = v245 + 104;
  uint64_t v193 = v65;
  uint64_t v194 = v67;
  uint64_t v195 = v69;
  uint64_t v191 = v63;
  v189(v242, v71, v241);
  uint64_t v72 = (uint64_t)v199;
  outlined init with copy of HealthDataLogModel((uint64_t)v202, (uint64_t)v199, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v197 + 56))(v72, 0, 1, v198);
  uint64_t v73 = v203;
  uint64_t v74 = *(int *)(v203 + 20);
  uint64_t v190 = v52 + 32;
  uint64_t v75 = (uint64_t *)(v232 + v74);
  uint64_t v76 = v232;
  *uint64_t v75 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v77 = (uint64_t *)(v76 + *(int *)(v73 + 24));
  *uint64_t v77 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with take of SnippetHeaderModel?(v72, v76);
  uint64_t v187 = type metadata accessor for SnippetHeaderView;
  outlined init with take of HealthDataLogModel(v76, v243, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v78._uint64_t countAndFlagsBits = 0;
  v78._object = (void *)0xE000000000000000;
  uint64_t v188 = v1;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v78);
  v79._uint64_t countAndFlagsBits = v196;
  v79._object = v55;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v79);
  swift_bridgeObjectRelease();
  v80._uint64_t countAndFlagsBits = 0;
  v80._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v80);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v81 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v203 = (uint64_t)v61;
  uint64_t v82 = v81;
  uint64_t v198 = v83;
  LODWORD(v197) = v84 & 1;
  uint64_t v85 = v204;
  uint64_t v86 = v241;
  v189(v204, *MEMORY[0x263F1A6D0], v241);
  unsigned int v182 = *MEMORY[0x263F1A618];
  uint64_t v87 = v182;
  uint64_t v88 = type metadata accessor for Font.Design();
  v179[0] = v88;
  uint64_t v89 = *(void *)(v88 - 8);
  uint64_t v181 = *(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 104);
  uint64_t v199 = (char *)(v89 + 104);
  uint64_t v90 = v231;
  v181(v231, v87, v88);
  uint64_t v91 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56);
  v179[1] = v89 + 56;
  uint64_t v180 = v91;
  v91(v90, 0, 1, v88);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?(v90, &demangling cache variable for type metadata for Font.Design?);
  uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v245 + 8);
  v245 += 8;
  uint64_t v189 = v92;
  ((void (*)(char *, uint64_t))v92)(v85, v86);
  uint64_t v93 = v198;
  LOBYTE(v89) = v197;
  uint64_t v94 = Text.font(_:)();
  uint64_t v96 = v95;
  LOBYTE(v90) = v97;
  swift_release();
  outlined consume of Text.Storage(v82, v93, v89);
  swift_bridgeObjectRelease();
  LODWORD(v265) = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v98 = Text.foregroundStyle<A>(_:)();
  uint64_t v100 = v99;
  LOBYTE(v89) = v101 & 1;
  outlined consume of Text.Storage(v94, v96, v90 & 1);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  uint64_t v102 = Text.fontWeight(_:)();
  uint64_t v196 = v103;
  uint64_t v197 = v102;
  uint64_t v198 = v104;
  LODWORD(v192) = v105 & 1;
  outlined consume of Text.Storage(v98, v100, v89);
  swift_bridgeObjectRelease();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v106._uint64_t countAndFlagsBits = 0;
  v106._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v106);
  v107._uint64_t countAndFlagsBits = v183;
  v107._object = v191;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v107);
  swift_bridgeObjectRelease();
  v108._uint64_t countAndFlagsBits = 0;
  v108._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v108);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v109 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v111 = v110;
  LOBYTE(v76) = v112 & 1;
  uint64_t v113 = v231;
  uint64_t v114 = v179[0];
  v181(v231, v182, v179[0]);
  v180(v113, 0, 1, v114);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?(v113, &demangling cache variable for type metadata for Font.Design?);
  uint64_t v115 = Text.font(_:)();
  uint64_t v117 = v116;
  LOBYTE(v90) = v118;
  swift_release();
  outlined consume of Text.Storage(v109, v111, v76);
  swift_bridgeObjectRelease();
  uint64_t v119 = Text.bold()();
  uint64_t v231 = v120;
  uint64_t v122 = v121;
  LODWORD(v111) = v123 & 1;
  outlined consume of Text.Storage(v115, v117, v90 & 1);
  swift_bridgeObjectRelease();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v124._uint64_t countAndFlagsBits = 0;
  v124._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v124);
  v125._uint64_t countAndFlagsBits = v184;
  v125._object = v193;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v125);
  swift_bridgeObjectRelease();
  v126._uint64_t countAndFlagsBits = 8236;
  v126._object = (void *)0xE200000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v126);
  v127._uint64_t countAndFlagsBits = v185;
  v127._object = v194;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v127);
  swift_bridgeObjectRelease();
  v128._uint64_t countAndFlagsBits = 0;
  v128._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v128);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v129 = (void *)Text.init(_:tableName:bundle:comment:)();
  uint64_t v193 = v130;
  uint64_t v194 = v129;
  uint64_t v240 = v131;
  LODWORD(v191) = v132 & 1;
  uint64_t v267 = MEMORY[0x263F8D310];
  uint64_t v268 = MEMORY[0x263F779A0];
  uint64_t v265 = v186;
  uint64_t v266 = v195;
  (*(void (**)(char *, void, uint64_t))(v206 + 104))(v205, *MEMORY[0x263F77778], v207);
  StatusIndicatorView.init(message:type:showIndicator:)();
  uint64_t v133 = MEMORY[0x263F1A838];
  uint64_t v134 = MEMORY[0x263F77350];
  uint64_t v267 = MEMORY[0x263F1A838];
  uint64_t v268 = MEMORY[0x263F77350];
  uint64_t v135 = swift_allocObject();
  uint64_t v264 = v134;
  uint64_t v265 = v135;
  uint64_t v136 = v119;
  uint64_t v183 = v119;
  uint64_t v137 = v231;
  *(void *)(v135 + 16) = v119;
  *(void *)(v135 + 24) = v137;
  LODWORD(v199) = v111;
  *(unsigned char *)(v135 + 32) = v111;
  uint64_t v204 = v122;
  *(void *)(v135 + 40) = v122;
  uint64_t v263 = v133;
  uint64_t v138 = swift_allocObject();
  uint64_t v261 = 0;
  uint64_t v262 = v138;
  uint64_t v140 = v196;
  uint64_t v139 = v197;
  *(void *)(v138 + 16) = v197;
  *(void *)(v138 + 24) = v140;
  LOBYTE(v119) = v192;
  *(unsigned char *)(v138 + 32) = v192;
  *(void *)(v138 + 40) = v198;
  long long v259 = 0u;
  long long v260 = 0u;
  uint64_t v257 = v133;
  uint64_t v258 = v134;
  uint64_t v141 = swift_allocObject();
  uint64_t v256 = v141;
  uint64_t v142 = (uint64_t)v193;
  uint64_t v143 = (uint64_t)v194;
  *(void *)(v141 + 16) = v194;
  *(void *)(v141 + 24) = v142;
  LOBYTE(v134) = (_BYTE)v191;
  *(unsigned char *)(v141 + 32) = (_BYTE)v191;
  *(void *)(v141 + 40) = v240;
  uint64_t v255 = 0;
  long long v253 = 0u;
  long long v254 = 0u;
  uint64_t v252 = 0;
  long long v250 = 0u;
  long long v251 = 0u;
  outlined copy of Text.Storage(v136, v231, (char)v199);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v139, v140, v119);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v143, v142, v134);
  swift_bridgeObjectRetain();
  uint64_t v144 = v211;
  FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
  uint64_t v146 = v218;
  uint64_t v145 = v219;
  uint64_t v147 = v214;
  (*(void (**)(char *, void, uint64_t))(v218 + 104))(v214, *MEMORY[0x263F76988], v219);
  uint64_t v148 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
  uint64_t v149 = v212;
  uint64_t v150 = v215;
  View.separators(_:isOverride:)();
  (*(void (**)(char *, uint64_t))(v146 + 8))(v147, v145);
  (*(void (**)(char *, uint64_t))(v213 + 8))(v144, v150);
  uint64_t v265 = v150;
  uint64_t v266 = v148;
  swift_getOpaqueTypeConformance2();
  uint64_t v151 = v237;
  uint64_t v152 = v217;
  View.componentSpacing(top:bottom:)();
  (*(void (**)(char *, uint64_t))(v216 + 8))(v149, v152);
  uint64_t v153 = v232;
  unint64_t v154 = v187;
  outlined init with copy of HealthDataLogModel(v243, v232, (uint64_t (*)(void))v187);
  uint64_t v155 = v238;
  uint64_t v156 = v239;
  (*(void (**)(char *, char *, uint64_t))(v238 + 16))(v234, v151, v239);
  uint64_t v157 = v235;
  (*(void (**)(char *, char *, uint64_t))(v235 + 16))(v233, v244, v236);
  unint64_t v158 = (*(unsigned __int8 *)(v208 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80);
  unint64_t v159 = (v200 + *(unsigned __int8 *)(v155 + 80) + v158) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
  unint64_t v160 = (v220 + *(unsigned __int8 *)(v157 + 80) + v159) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80);
  uint64_t v161 = swift_allocObject();
  outlined init with take of HealthDataLogModel(v153, v161 + v158, (uint64_t (*)(void))v154);
  (*(void (**)(unint64_t, char *, uint64_t))(v155 + 32))(v161 + v159, v234, v156);
  uint64_t v162 = v236;
  (*(void (**)(unint64_t, char *, uint64_t))(v157 + 32))(v161 + v160, v233, v236);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>);
  uint64_t v163 = v224;
  ComponentStack.init(content:)();
  uint64_t v164 = v223;
  outlined init with copy of HealthDataLogModel(v188, v223, (uint64_t (*)(void))type metadata accessor for HealthDataLogSnippet);
  uint64_t v165 = v248;
  long long v166 = v209;
  uint64_t v167 = v247;
  (*(void (**)(char *, uint64_t, uint64_t))(v248 + 16))(v209, v203, v247);
  unint64_t v168 = (*(unsigned __int8 *)(v221 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v221 + 80);
  unint64_t v169 = (v222 + *(unsigned __int8 *)(v165 + 80) + v168) & ~(unint64_t)*(unsigned __int8 *)(v165 + 80);
  uint64_t v170 = swift_allocObject();
  outlined init with take of HealthDataLogModel(v164, v170 + v168, (uint64_t (*)(void))type metadata accessor for HealthDataLogSnippet);
  ((void (*)(unint64_t, char *, uint64_t))v246)(v170 + v169, v166, v167);
  uint64_t v171 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>>);
  uint64_t v173 = v227;
  uint64_t v172 = v228;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v226 + 8))(v163, v173);
  uint64_t v175 = v229;
  uint64_t v174 = v230;
  (*(void (**)(char *, char *, uint64_t))(v229 + 16))(v225, v172, v230);
  uint64_t v265 = v173;
  uint64_t v266 = v171;
  swift_getOpaqueTypeConformance2();
  uint64_t v176 = AnyView.init<A>(_:)();
  outlined consume of Text.Storage((uint64_t)v194, (uint64_t)v193, (char)v191);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v197, v196, v192);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v183, v231, (char)v199);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v175 + 8))(v172, v174);
  (*(void (**)(char *, uint64_t))(v238 + 8))(v237, v239);
  (*(void (**)(char *, uint64_t))(v235 + 8))(v244, v162);
  outlined destroy of SnippetHeaderModel(v243, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  ((void (*)(char *, uint64_t))v189)(v242, v241);
  (*(void (**)(uint64_t, uint64_t))(v248 + 8))(v203, v167);
  uint64_t result = outlined destroy of SnippetHeaderModel((uint64_t)v202, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
  unsigned __int8 v178 = v249;
LABEL_15:
  *unsigned __int8 v178 = v176;
  return result;
}

uint64_t closure #1 in HealthDataLogSnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v46 = type metadata accessor for StatusIndicatorView();
  uint64_t v43 = *(void *)(v46 - 8);
  uint64_t v6 = v43;
  uint64_t v7 = MEMORY[0x270FA5388](v46);
  uint64_t v47 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v45 = *(void *)(v11 - 8);
  uint64_t v12 = v45;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v50 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v17 = type metadata accessor for SnippetHeaderView();
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v40 = (uint64_t)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v37 - v20;
  uint64_t v44 = (uint64_t)&v37 - v20;
  outlined init with copy of HealthDataLogModel(a1, (uint64_t)&v37 - v20, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v42 = v16;
  uint64_t v39 = v11;
  v22(v16, a2, v11);
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v41 = v10;
  uint64_t v23 = v46;
  v38(v10, v48, v46);
  uint64_t v24 = v40;
  outlined init with copy of HealthDataLogModel((uint64_t)v21, v40, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v25 = v50;
  v22(v50, (uint64_t)v16, v11);
  uint64_t v26 = v47;
  uint64_t v27 = v10;
  uint64_t v28 = v23;
  uint64_t v29 = (void (*)(uint64_t, char *, uint64_t))v38;
  v38(v47, (uint64_t)v27, v23);
  uint64_t v30 = v49;
  outlined init with copy of HealthDataLogModel(v24, v49, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView));
  uint64_t v32 = v25;
  uint64_t v33 = v39;
  v22((char *)(v30 + *(int *)(v31 + 48)), (uint64_t)v32, v39);
  v29(v30 + *(int *)(v31 + 64), v26, v28);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v43 + 8);
  v34(v41, v28);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v45 + 8);
  v35(v42, v33);
  outlined destroy of SnippetHeaderModel(v44, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  v34(v26, v28);
  v35(v50, v33);
  return outlined destroy of SnippetHeaderModel(v24, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
}

void closure #2 in HealthDataLogSnippet.body.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + *(int *)(type metadata accessor for HealthDataLogSnippet() + 20));
  if (v1)
  {
    id v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();
  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t sub_261829550()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_261829594()
{
  uint64_t v1 = type metadata accessor for SnippetHeaderView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v21 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v3 = *(void *)(v22 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = *(void *)(v3 + 64);
  uint64_t v5 = type metadata accessor for StatusIndicatorView();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = *(void *)(v6 + 64);
  uint64_t v8 = v0 + ((v2 + 16) & ~v2);
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v0 + ((v2 + 16) & ~v2), v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = v8 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  uint64_t v13 = v8 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  uint64_t v15 = v2 | v4 | v7 | 7;
  uint64_t v16 = (((v2 + 16) & ~v2) + v21 + v4) & ~v4;
  uint64_t v17 = (v16 + v20 + v7) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v16, v22);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v17, v5);

  return MEMORY[0x270FA0238](v0, v17 + v19, v15);
}

uint64_t partial apply for closure #1 in HealthDataLogSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SnippetHeaderView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0)
                 - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(type metadata accessor for StatusIndicatorView() - 8);
  uint64_t v10 = v1 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return closure #1 in HealthDataLogSnippet.body.getter(v1 + v4, v1 + v7, v10, a1);
}

uint64_t outlined init with copy of HealthDataLogModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_261829A88()
{
  uint64_t v1 = type metadata accessor for HealthDataLogSnippet();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v18 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v17 = *(void *)(v5 + 64);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v0 + v3, 1, v8))
  {
    uint64_t v9 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v0 + v3, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = type metadata accessor for HealthDataLogModel();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v7 + *(int *)(v10 + 40);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v11, v4);
  }
  swift_bridgeObjectRelease();

  uint64_t v12 = v7 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  uint64_t v14 = (v3 + v18 + v6) & ~v6;
  uint64_t v15 = v14 + v17;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v14, v4);

  return MEMORY[0x270FA0238](v0, v15, v2 | v6 | 7);
}

uint64_t outlined init with take of HealthDataLogModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void partial apply for closure #2 in HealthDataLogSnippet.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for HealthDataLogSnippet() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for AppPunchout();

  closure #2 in HealthDataLogSnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in HealthDataLogSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for HealthDataLogSnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for SnippetHeaderModel();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      uint64_t v10 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      uint64_t v11 = *(int *)(v6 + 20);
      uint64_t v12 = (uint64_t *)((char *)a1 + v11);
      uint64_t v13 = (uint64_t *)((char *)a2 + v11);
      uint64_t v14 = v13[1];
      *uint64_t v12 = *v13;
      v12[1] = v14;
      uint64_t v15 = *(int *)(v6 + 24);
      uint64_t v16 = (uint64_t *)((char *)a1 + v15);
      uint64_t v17 = (uint64_t *)((char *)a2 + v15);
      uint64_t v18 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v18;
      uint64_t v19 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19(a1, 0, 1, v6);
    }
    uint64_t v20 = (int *)type metadata accessor for HealthDataLogModel();
    *(uint64_t *)((char *)a1 + v20[5]) = *(uint64_t *)((char *)a2 + v20[5]);
    uint64_t v21 = v20[6];
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = v20[7];
    uint64_t v26 = (uint64_t *)((char *)a1 + v25);
    uint64_t v27 = (uint64_t *)((char *)a2 + v25);
    uint64_t v28 = v27[1];
    void *v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = v20[8];
    uint64_t v30 = (uint64_t *)((char *)a1 + v29);
    uint64_t v31 = (uint64_t *)((char *)a2 + v29);
    uint64_t v32 = v31[1];
    void *v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = v20[9];
    uint64_t v34 = (uint64_t *)((char *)a1 + v33);
    uint64_t v35 = (uint64_t *)((char *)a2 + v33);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = v20[10];
    __dst = (char *)a1 + v37;
    uint64_t v57 = (char *)a2 + v37;
    uint64_t v38 = type metadata accessor for AppPunchout();
    uint64_t v39 = *(void *)(v38 - 8);
    uint64_t v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v56(v57, 1, v38))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(__dst, v57, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(__dst, v57, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(__dst, 0, 1, v38);
    }
    uint64_t v41 = v20[11];
    uint64_t v42 = (uint64_t *)((char *)a1 + v41);
    uint64_t v43 = (uint64_t *)((char *)a2 + v41);
    uint64_t v44 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v44;
    uint64_t v45 = *(int *)(a3 + 20);
    uint64_t v46 = *(int *)(a3 + 24);
    uint64_t v47 = (uint64_t *)((char *)a1 + v45);
    uint64_t v48 = (char *)a2 + v45;
    uint64_t v50 = *(void **)v48;
    uint64_t v49 = *((void *)v48 + 1);
    *uint64_t v47 = v50;
    v47[1] = v49;
    uint64_t v51 = (uint64_t *)((char *)a1 + v46);
    uint64_t v52 = (uint64_t *)((char *)a2 + v46);
    swift_bridgeObjectRetain();
    id v53 = v50;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v54 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v54 - 8) + 16))(v51, v52, v54);
    }
    else
    {
      *uint64_t v51 = *v52;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for HealthDataLogSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    uint64_t v5 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = type metadata accessor for HealthDataLogModel();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(v6 + 40);
  uint64_t v8 = type metadata accessor for AppPunchout();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();

  uint64_t v10 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorScheme();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    return v12(v10, v11);
  }
  else
  {
    return swift_release();
  }
}

char *initializeWithCopy for HealthDataLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for SnippetHeaderModel();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    uint64_t v9 = *(int *)(v5 + 20);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v12;
    uint64_t v13 = *(int *)(v5 + 24);
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)uint64_t v14 = *(void *)v15;
    *((void *)v14 + 1) = v16;
    uint64_t v17 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(a1, 0, 1, v5);
  }
  uint64_t v18 = (int *)type metadata accessor for HealthDataLogModel();
  *(void *)&a1[v18[5]] = *(void *)&a2[v18[5]];
  uint64_t v19 = v18[6];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = v22;
  uint64_t v23 = v18[7];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = *((void *)v25 + 1);
  *(void *)uint64_t v24 = *(void *)v25;
  *((void *)v24 + 1) = v26;
  uint64_t v27 = v18[8];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = *((void *)v29 + 1);
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = v30;
  uint64_t v31 = v18[9];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = v34;
  uint64_t v35 = v18[10];
  uint64_t v58 = a1;
  char v55 = &a2[v35];
  __dst = &a1[v35];
  uint64_t v36 = type metadata accessor for AppPunchout();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v54(v55, 1, v36))
  {
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(__dst, v55, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(__dst, v55, v36);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v36);
  }
  uint64_t v39 = v18[11];
  uint64_t v40 = &v58[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = v42;
  uint64_t v43 = *(int *)(a3 + 20);
  uint64_t v44 = *(int *)(a3 + 24);
  uint64_t v45 = &v58[v43];
  uint64_t v46 = &a2[v43];
  uint64_t v48 = *(void **)v46;
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = v48;
  *((void *)v45 + 1) = v47;
  uint64_t v49 = &v58[v44];
  uint64_t v50 = &a2[v44];
  swift_bridgeObjectRetain();
  id v51 = v48;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v52 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v49, v50, v52);
  }
  else
  {
    *(void *)uint64_t v49 = *(void *)v50;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return v58;
}

char *assignWithCopy for HealthDataLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for SnippetHeaderModel();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      uint64_t v10 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      uint64_t v11 = *(int *)(v5 + 20);
      uint64_t v12 = &a1[v11];
      uint64_t v13 = &a2[v11];
      *(void *)uint64_t v12 = *(void *)v13;
      *((void *)v12 + 1) = *((void *)v13 + 1);
      uint64_t v14 = *(int *)(v5 + 24);
      uint64_t v15 = &a1[v14];
      uint64_t v16 = &a2[v14];
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = *((void *)v16 + 1);
      uint64_t v17 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    outlined destroy of SnippetHeaderModel((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v55 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 24))(a1, a2, v55);
  uint64_t v56 = *(int *)(v5 + 20);
  uint64_t v57 = &a1[v56];
  uint64_t v58 = &a2[v56];
  *(void *)uint64_t v57 = *(void *)v58;
  *((void *)v57 + 1) = *((void *)v58 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v59 = *(int *)(v5 + 24);
  Swift::String v60 = &a1[v59];
  Swift::String v61 = &a2[v59];
  *(void *)Swift::String v60 = *(void *)v61;
  *((void *)v60 + 1) = *((void *)v61 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v19 = (int *)type metadata accessor for HealthDataLogModel();
  *(void *)&a1[v19[5]] = *(void *)&a2[v19[5]];
  swift_retain();
  swift_release();
  uint64_t v20 = v19[6];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = v19[7];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  *((void *)v24 + 1) = *((void *)v25 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = v19[8];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = *((void *)v28 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = v19[9];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = *((void *)v31 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = v19[10];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v35 = type metadata accessor for AppPunchout();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_12:
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
LABEL_13:
  uint64_t v41 = v19[11];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = *(int *)(a3 + 20);
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  uint64_t v47 = *(void **)&a1[v44];
  uint64_t v48 = *(void **)&a2[v44];
  *(void *)uint64_t v45 = v48;
  id v49 = v48;

  *((void *)v45 + 1) = *((void *)v46 + 1);
  if (a1 != a2)
  {
    uint64_t v50 = *(int *)(a3 + 24);
    id v51 = &a1[v50];
    uint64_t v52 = &a2[v50];
    outlined destroy of Font.Design?((uint64_t)&a1[v50], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v53 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
    }
    else
    {
      *(void *)id v51 = *(void *)v52;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for HealthDataLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
    *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = (int *)type metadata accessor for HealthDataLogModel();
  *(void *)&a1[v10[5]] = *(void *)&a2[v10[5]];
  *(_OWORD *)&a1[v10[6]] = *(_OWORD *)&a2[v10[6]];
  *(_OWORD *)&a1[v10[7]] = *(_OWORD *)&a2[v10[7]];
  *(_OWORD *)&a1[v10[8]] = *(_OWORD *)&a2[v10[8]];
  *(_OWORD *)&a1[v10[9]] = *(_OWORD *)&a2[v10[9]];
  uint64_t v11 = v10[10];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = type metadata accessor for AppPunchout();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  *(_OWORD *)&a1[v10[11]] = *(_OWORD *)&a2[v10[11]];
  uint64_t v17 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v18, v19, v21);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for HealthDataLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for SnippetHeaderModel();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      uint64_t v10 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      *(_OWORD *)&a1[*(int *)(v5 + 20)] = *(_OWORD *)&a2[*(int *)(v5 + 20)];
      *(_OWORD *)&a1[*(int *)(v5 + 24)] = *(_OWORD *)&a2[*(int *)(v5 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    outlined destroy of SnippetHeaderModel((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v57 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 40))(a1, a2, v57);
  uint64_t v58 = *(int *)(v5 + 20);
  uint64_t v59 = &a1[v58];
  Swift::String v60 = &a2[v58];
  uint64_t v62 = *(void *)v60;
  uint64_t v61 = *((void *)v60 + 1);
  *(void *)uint64_t v59 = v62;
  *((void *)v59 + 1) = v61;
  swift_bridgeObjectRelease();
  uint64_t v63 = *(int *)(v5 + 24);
  uint64_t v64 = &a1[v63];
  uint64_t v65 = &a2[v63];
  uint64_t v67 = *(void *)v65;
  uint64_t v66 = *((void *)v65 + 1);
  *(void *)uint64_t v64 = v67;
  *((void *)v64 + 1) = v66;
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v12 = (int *)type metadata accessor for HealthDataLogModel();
  *(void *)&a1[v12[5]] = *(void *)&a2[v12[5]];
  swift_release();
  uint64_t v13 = v12[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v17 = *(void *)v15;
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = v17;
  *((void *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = v12[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v22 = *(void *)v20;
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = v22;
  *((void *)v19 + 1) = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = v12[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v27 = *(void *)v25;
  uint64_t v26 = *((void *)v25 + 1);
  *(void *)uint64_t v24 = v27;
  *((void *)v24 + 1) = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = v12[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v32 = *(void *)v30;
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = v32;
  *((void *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = v12[10];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = type metadata accessor for AppPunchout();
  uint64_t v37 = *(void *)(v36 - 8);
  int v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v36);
LABEL_12:
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v34, v35, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v34, v35, v36);
LABEL_13:
  uint64_t v42 = v12[11];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v46 = *(void *)v44;
  uint64_t v45 = *((void *)v44 + 1);
  *(void *)uint64_t v43 = v46;
  *((void *)v43 + 1) = v45;
  swift_bridgeObjectRelease();
  uint64_t v47 = *(int *)(a3 + 20);
  uint64_t v48 = &a1[v47];
  id v49 = &a2[v47];
  uint64_t v50 = *(void **)&a1[v47];
  *(void *)uint64_t v48 = *(void *)v49;

  *((void *)v48 + 1) = *((void *)v49 + 1);
  if (a1 != a2)
  {
    uint64_t v51 = *(int *)(a3 + 24);
    uint64_t v52 = &a1[v51];
    uint64_t v53 = &a2[v51];
    outlined destroy of Font.Design?((uint64_t)&a1[v51], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v55 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32))(v52, v53, v55);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HealthDataLogSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_26182B6C0);
}

uint64_t sub_26182B6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for HealthDataLogModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 24);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for HealthDataLogSnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_26182B810);
}

uint64_t sub_26182B810(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for HealthDataLogModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for HealthDataLogSnippet()
{
  type metadata accessor for HealthDataLogModel();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<ColorScheme>.Content();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t GenericQuerySnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GenericQueryModel(v1, a1, (uint64_t (*)(void))type metadata accessor for GenericQueryModel);
}

uint64_t GenericQuerySnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for GenericQuerySnippet() + 20));
  type metadata accessor for Context();
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_2(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  *uint64_t v4 = EnvironmentObject.init()();
  v4[1] = v5;
  return outlined init with take of GenericQueryModel(a1, a2, (uint64_t (*)(void))type metadata accessor for GenericQueryModel);
}

uint64_t type metadata accessor for GenericQuerySnippet()
{
  uint64_t result = type metadata singleton initialization cache for GenericQuerySnippet;
  if (!type metadata singleton initialization cache for GenericQuerySnippet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t GenericQuerySnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v162 = a1;
  uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  uint64_t v151 = *(void *)(v153 - 8);
  MEMORY[0x270FA5388](v153);
  uint64_t v149 = (char *)&v124 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v154 = *(void *)(v3 - 8);
  uint64_t v155 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v150 = (char *)&v124 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v152 = (char *)&v124 - v6;
  uint64_t v141 = type metadata accessor for SingleDataPointView();
  MEMORY[0x270FA5388](v141);
  uint64_t v140 = (uint64_t *)((char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v136 = type metadata accessor for MultipleDataPointView();
  MEMORY[0x270FA5388](v136);
  uint64_t v135 = (uint64_t *)((char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t Snippet = type metadata accessor for GenericQuerySnippet();
  uint64_t v146 = *(void *)(Snippet - 8);
  uint64_t v10 = MEMORY[0x270FA5388](Snippet - 8);
  uint64_t v148 = (uint64_t)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v139 = (char *)&v124 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v138 = (uint64_t)&v124 - v15;
  uint64_t v147 = v16;
  MEMORY[0x270FA5388](v14);
  uint64_t v137 = (uint64_t)&v124 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v157 = (uint64_t *)((char *)&v124 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v156 = type metadata accessor for SnippetHeaderView();
  uint64_t v142 = *(void *)(v156 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v156);
  uint64_t v159 = (uint64_t)&v124 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v161 = (uint64_t)&v124 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = (char *)&v124 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for AppPunchout();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v144 = v29;
  uint64_t v145 = (char *)&v124 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  unint64_t v160 = (char *)&v124 - v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v31 - 8);
  uint64_t v33 = (char *)&v124 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for SpeakableString();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v37 = (char *)&v124 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Model = type metadata accessor for GenericQueryModel();
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 40), (uint64_t)v33, &demangling cache variable for type metadata for SpeakableString?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v37, v33, v34);
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, (uint64_t)v25, &demangling cache variable for type metadata for AppPunchout?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
      int v38 = &demangling cache variable for type metadata for AppPunchout?;
      uint64_t v39 = (uint64_t)v25;
      goto LABEL_5;
    }
    uint64_t v43 = v1;
    uint64_t v134 = v37;
    uint64_t v44 = *(void (**)(unint64_t, char *, uint64_t))(v27 + 32);
    uint64_t v129 = v27 + 32;
    Swift::String v128 = v44;
    v44((unint64_t)v160, v25, v26);
    uint64_t v46 = v157;
    uint64_t v45 = (int *)Model;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 72), (uint64_t)v157, &demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v47 = v156;
    uint64_t v48 = v159;
    id v49 = (uint64_t *)(v159 + *(int *)(v156 + 20));
    uint64_t *v49 = swift_getKeyPath();
    uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    swift_storeEnumTagMultiPayload();
    uint64_t v50 = (uint64_t *)(v48 + *(int *)(v47 + 24));
    uint64_t *v50 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
    swift_storeEnumTagMultiPayload();
    outlined init with take of SnippetHeaderModel?((uint64_t)v46, v48);
    outlined init with take of GenericQueryModel(v48, v161, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    uint64_t v51 = v43 + v45[5];
    char v52 = *(unsigned char *)(v51 + 8);
    uint64_t v133 = v26;
    uint64_t v132 = v27;
    uint64_t v131 = v34;
    uint64_t v130 = v35;
    if ((v52 & 1) == 0 && *(double *)v51 > 0.0)
    {
      uint64_t v157 = (uint64_t *)(v43 + v45[13]);
      uint64_t v53 = v157[1];
      uint64_t v54 = v137;
      outlined init with copy of GenericQueryModel(v43, v137, (uint64_t (*)(void))type metadata accessor for GenericQuerySnippet);
      if (v53)
      {
        uint64_t v55 = *(void *)(v54 + v45[12] + 8);
        swift_bridgeObjectRetain();
        _s10WellnessUI17SnippetHeaderViewVWOhTm_1(v54, (uint64_t (*)(void))type metadata accessor for GenericQuerySnippet);
        swift_bridgeObjectRelease();
        uint64_t v56 = v138;
        outlined init with copy of GenericQueryModel(v43, v138, (uint64_t (*)(void))type metadata accessor for GenericQuerySnippet);
        uint64_t v57 = (uint64_t)v139;
        if (v55)
        {
          _s10WellnessUI17SnippetHeaderViewVWOhTm_1(v56, (uint64_t (*)(void))type metadata accessor for GenericQuerySnippet);
LABEL_15:
          uint64_t v141 = *(void *)v51;
          LODWORD(v140) = *(unsigned __int8 *)(v51 + 8);
          uint64_t v60 = v45[12];
          uint64_t v61 = (uint64_t *)(v43 + v45[11]);
          uint64_t v62 = v61[1];
          uint64_t v126 = *v61;
          uint64_t v63 = v157[1];
          uint64_t v137 = *v157;
          uint64_t v64 = *(void *)(v43 + v60 + 8);
          uint64_t v156 = *(void *)(v43 + v60);
          uint64_t v65 = v43;
          uint64_t v66 = v45[16];
          uint64_t v67 = (uint64_t *)(v43 + v45[15]);
          uint64_t v68 = v67[1];
          uint64_t v138 = *v67;
          uint64_t v69 = *(char **)(v43 + v66 + 8);
          uint64_t v157 = *(uint64_t **)(v43 + v66);
          uint64_t v139 = v69;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v125 = SpeakableString.print.getter();
          uint64_t v124 = v70;
          uint64_t v71 = (uint64_t *)(v43 + v45[17]);
          unint64_t v72 = v71[1];
          uint64_t Model = *v71;
          type metadata accessor for Context();
          _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_2(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
          swift_bridgeObjectRetain();
          uint64_t v73 = EnvironmentObject.init()();
          uint64_t v74 = v135;
          *uint64_t v135 = v73;
          v74[1] = v75;
          uint64_t v76 = (int *)v136;
          uint64_t v77 = (uint64_t *)((char *)v74 + *(int *)(v136 + 20));
          *uint64_t v77 = swift_getKeyPath();
          swift_storeEnumTagMultiPayload();
          Swift::String v78 = (char *)v74 + v76[6];
          *(void *)Swift::String v78 = v141;
          v78[8] = (char)v140;
          Swift::String v79 = (uint64_t *)((char *)v74 + v76[7]);
          *Swift::String v79 = v126;
          v79[1] = v62;
          Swift::String v80 = (uint64_t *)((char *)v74 + v76[8]);
          *Swift::String v80 = v137;
          v80[1] = v63;
          uint64_t v81 = (uint64_t *)((char *)v74 + v76[9]);
          *uint64_t v81 = v156;
          v81[1] = v64;
          uint64_t v82 = (uint64_t *)((char *)v74 + v76[10]);
          *uint64_t v82 = v138;
          v82[1] = v68;
          uint64_t v83 = (uint64_t **)((char *)v74 + v76[11]);
          char v84 = (uint64_t *)v139;
          *uint64_t v83 = v157;
          v83[1] = v84;
          uint64_t v85 = (uint64_t *)((char *)v74 + v76[12]);
          uint64_t v86 = v124;
          uint64_t *v85 = v125;
          v85[1] = v86;
          *((unsigned char *)v74 + v76[13]) = 1;
          uint64_t v87 = 0x65676172657641;
          if (v72) {
            uint64_t v87 = Model;
          }
          unint64_t v88 = 0xE700000000000000;
          if (v72) {
            unint64_t v88 = v72;
          }
          uint64_t v89 = (uint64_t *)((char *)v74 + v76[14]);
          *uint64_t v89 = v87;
          v89[1] = v88;
          _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_2(&lazy protocol witness table cache variable for type MultipleDataPointView and conformance MultipleDataPointView, (void (*)(uint64_t))type metadata accessor for MultipleDataPointView);
          uint64_t v90 = v65;
          goto LABEL_27;
        }
      }
      else
      {
        _s10WellnessUI17SnippetHeaderViewVWOhTm_1(v54, (uint64_t (*)(void))type metadata accessor for GenericQuerySnippet);
        uint64_t v56 = v138;
        outlined init with copy of GenericQueryModel(v43, v138, (uint64_t (*)(void))type metadata accessor for GenericQuerySnippet);
        uint64_t v57 = (uint64_t)v139;
      }
      uint64_t v58 = *(void *)(v56 + v45[15] + 8);
      outlined init with take of GenericQueryModel(v56, v57, (uint64_t (*)(void))type metadata accessor for GenericQuerySnippet);
      if (v58)
      {
        uint64_t v59 = *(void *)(v57 + v45[11] + 8);
        _s10WellnessUI17SnippetHeaderViewVWOhTm_1(v57, (uint64_t (*)(void))type metadata accessor for GenericQuerySnippet);
        if (v59) {
          goto LABEL_15;
        }
      }
      else
      {
        _s10WellnessUI17SnippetHeaderViewVWOhTm_1(v57, (uint64_t (*)(void))type metadata accessor for GenericQuerySnippet);
      }
    }
    uint64_t v91 = (uint64_t *)(v43 + v45[14]);
    if (v91[1])
    {
      uint64_t v92 = *v91;
      uint64_t v93 = v91[1];
    }
    else
    {
      uint64_t v94 = (uint64_t *)(v43 + v45[15]);
      uint64_t v93 = v94[1];
      if (!v93)
      {
        uint64_t v94 = (uint64_t *)(v43 + v45[11]);
        uint64_t v93 = v94[1];
        uint64_t v95 = v134;
        if (!v93)
        {
          uint64_t v41 = AnyView.init<A>(_:)();
          _s10WellnessUI17SnippetHeaderViewVWOhTm_1(v161, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
          (*(void (**)(char *, uint64_t))(v27 + 8))(v160, v26);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v95, v34);
          goto LABEL_6;
        }
      }
      uint64_t v92 = *v94;
      swift_bridgeObjectRetain();
    }
    uint64_t v96 = (uint64_t *)(v43 + v45[16]);
    uint64_t v98 = *v96;
    uint64_t v97 = v96[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v99 = SpeakableString.print.getter();
    uint64_t v101 = v100;
    uint64_t v102 = v140;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v43, (uint64_t)v140 + *(int *)(v141 + 32), &demangling cache variable for type metadata for AppPunchout?);
    type metadata accessor for Context();
    _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_2(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
    *uint64_t v102 = EnvironmentObject.init()();
    v102[1] = v103;
    v102[2] = v92;
    v102[3] = v93;
    v102[4] = v98;
    v102[5] = v97;
    v102[6] = v99;
    v102[7] = v101;
    _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_2(&lazy protocol witness table cache variable for type SingleDataPointView and conformance SingleDataPointView, (void (*)(uint64_t))type metadata accessor for SingleDataPointView);
    uint64_t v90 = v43;
LABEL_27:
    uint64_t v104 = AnyView.init<A>(_:)();
    uint64_t v42 = v162;
    uint64_t v105 = v143;
    uint64_t v106 = v142;
    uint64_t v162 = (uint64_t *)v104;
    uint64_t v107 = v159;
    outlined init with copy of GenericQueryModel(v161, v159, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    unint64_t v108 = (*(unsigned __int8 *)(v106 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
    unint64_t v109 = (v105 + v108 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v110 = swift_allocObject();
    outlined init with take of GenericQueryModel(v107, v110 + v108, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    *(void *)(v110 + v109) = v104;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>);
    uint64_t v111 = v149;
    ComponentStack.init(content:)();
    uint64_t v112 = v148;
    outlined init with copy of GenericQueryModel(v90, v148, (uint64_t (*)(void))type metadata accessor for GenericQuerySnippet);
    uint64_t v113 = v132;
    uint64_t v114 = v145;
    uint64_t v115 = v133;
    (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v145, v160, v133);
    unint64_t v116 = (*(unsigned __int8 *)(v146 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80);
    unint64_t v117 = (v147 + *(unsigned __int8 *)(v113 + 80) + v116) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
    uint64_t v118 = swift_allocObject();
    outlined init with take of GenericQueryModel(v112, v118 + v116, (uint64_t (*)(void))type metadata accessor for GenericQuerySnippet);
    v128(v118 + v117, v114, v115);
    uint64_t v119 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
    uint64_t v120 = v152;
    uint64_t v121 = v153;
    View.componentTapped(isNavigation:perform:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v151 + 8))(v111, v121);
    uint64_t v122 = v154;
    uint64_t v123 = v155;
    (*(void (**)(char *, char *, uint64_t))(v154 + 16))(v150, v120, v155);
    uint64_t v163 = v121;
    uint64_t v164 = v119;
    swift_getOpaqueTypeConformance2();
    uint64_t v41 = AnyView.init<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v122 + 8))(v120, v123);
    _s10WellnessUI17SnippetHeaderViewVWOhTm_1(v161, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v160, v115);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v134, v131);
    goto LABEL_28;
  }
  int v38 = &demangling cache variable for type metadata for SpeakableString?;
  uint64_t v39 = (uint64_t)v33;
LABEL_5:
  outlined destroy of Font.Design?(v39, v38);
  uint64_t result = AnyView.init<A>(_:)();
  uint64_t v41 = result;
LABEL_6:
  uint64_t v42 = v162;
LABEL_28:
  *uint64_t v42 = v41;
  return result;
}

uint64_t specialized closure #1 in GenericQuerySnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v23 - v11;
  uint64_t v13 = type metadata accessor for SnippetHeaderView();
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v23 - v17;
  outlined init with copy of GenericQueryModel(a1, (uint64_t)v23 - v17, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  v23[1] = a2;
  View.componentSpacing(top:bottom:)();
  outlined init with copy of GenericQueryModel((uint64_t)v18, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v19(v10, v12, v6);
  outlined init with copy of GenericQueryModel((uint64_t)v16, a3, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0));
  v19((char *)(a3 + *(int *)(v20 + 48)), v10, v6);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v12, v6);
  _s10WellnessUI17SnippetHeaderViewVWOhTm_1((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  v21(v10, v6);
  return _s10WellnessUI17SnippetHeaderViewVWOhTm_1((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
}

void closure #2 in GenericQuerySnippet.body.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + *(int *)(type metadata accessor for GenericQuerySnippet() + 20));
  if (v1)
  {
    id v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();
  }
  else
  {
    type metadata accessor for Context();
    _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_2(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t sub_26182CF50()
{
  uint64_t v1 = type metadata accessor for SnippetHeaderView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v0 + v3, 1, v6))
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v3, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = v5 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = v5 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t partial apply for specialized closure #1 in GenericQuerySnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SnippetHeaderView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return specialized closure #1 in GenericQuerySnippet.body.getter(v1 + v4, v5, a1);
}

uint64_t outlined init with copy of GenericQueryModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_26182D294()
{
  uint64_t Snippet = type metadata accessor for GenericQuerySnippet();
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(Snippet - 8) + 80);
  uint64_t v16 = *(void *)(*(void *)(Snippet - 8) + 64);
  uint64_t v2 = type metadata accessor for AppPunchout();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v15 = *(void *)(v3 + 64);
  uint64_t v5 = v0 + ((v1 + 16) & ~v1);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + ((v1 + 16) & ~v1), v2);
  }
  uint64_t Model = type metadata accessor for GenericQueryModel();
  uint64_t v7 = v5 + *(int *)(Model + 40);
  uint64_t v8 = type metadata accessor for SpeakableString();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + *(int *)(Model + 72);
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = v1 | v4 | 7;
  uint64_t v13 = (((v1 + 16) & ~v1) + v16 + v4) & ~v4;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v13, v2);

  return MEMORY[0x270FA0238](v0, v13 + v15, v12);
}

uint64_t outlined init with take of GenericQueryModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void partial apply for closure #2 in GenericQuerySnippet.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for GenericQuerySnippet() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for AppPunchout();

  closure #2 in GenericQuerySnippet.body.getter(v0 + v2);
}

uint64_t _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in GenericQuerySnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for GenericQuerySnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for AppPunchout();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    uint64_t Model = (int *)type metadata accessor for GenericQueryModel();
    uint64_t v11 = Model[5];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = Model[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = Model[7];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    v18[8] = v19[8];
    *(void *)uint64_t v18 = *(void *)v19;
    uint64_t v20 = Model[8];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    v21[8] = v22[8];
    *(void *)uint64_t v21 = *(void *)v22;
    uint64_t v23 = Model[9];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    v24[8] = v25[8];
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v26 = Model[10];
    uint64_t v27 = (char *)a1 + v26;
    uint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = type metadata accessor for SpeakableString();
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v79 = v30;
    uint64_t v80 = v29;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    uint64_t v32 = Model[11];
    uint64_t v33 = (uint64_t *)((char *)a1 + v32);
    uint64_t v34 = (uint64_t *)((char *)a2 + v32);
    uint64_t v83 = v34[1];
    void *v33 = *v34;
    v33[1] = v83;
    uint64_t v35 = Model[12];
    uint64_t v36 = (uint64_t *)((char *)a1 + v35);
    uint64_t v37 = (uint64_t *)((char *)a2 + v35);
    uint64_t v82 = v37[1];
    void *v36 = *v37;
    v36[1] = v82;
    uint64_t v38 = Model[13];
    uint64_t v39 = (uint64_t *)((char *)a1 + v38);
    int v40 = (uint64_t *)((char *)a2 + v38);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = Model[14];
    uint64_t v43 = (uint64_t *)((char *)a1 + v42);
    uint64_t v44 = (uint64_t *)((char *)a2 + v42);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = Model[15];
    uint64_t v47 = (uint64_t *)((char *)a1 + v46);
    uint64_t v48 = (uint64_t *)((char *)a2 + v46);
    uint64_t v49 = v48[1];
    *uint64_t v47 = *v48;
    v47[1] = v49;
    uint64_t v50 = Model[16];
    uint64_t v51 = (uint64_t *)((char *)a1 + v50);
    char v52 = (uint64_t *)((char *)a2 + v50);
    uint64_t v53 = v52[1];
    *uint64_t v51 = *v52;
    v51[1] = v53;
    uint64_t v54 = Model[17];
    uint64_t v55 = (uint64_t *)((char *)a1 + v54);
    uint64_t v56 = (uint64_t *)((char *)a2 + v54);
    uint64_t v57 = v56[1];
    *uint64_t v55 = *v56;
    v55[1] = v57;
    uint64_t v58 = Model[18];
    __dst = (char *)a1 + v58;
    uint64_t v59 = (char *)a2 + v58;
    uint64_t v60 = type metadata accessor for SnippetHeaderModel();
    uint64_t v78 = *(void *)(v60 - 8);
    uint64_t v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v81(v59, 1, v60))
    {
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v59, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(__dst, v59, v80);
      uint64_t v62 = *(int *)(v60 + 20);
      uint64_t v63 = &__dst[v62];
      uint64_t v64 = &v59[v62];
      uint64_t v65 = *((void *)v64 + 1);
      *(void *)uint64_t v63 = *(void *)v64;
      *((void *)v63 + 1) = v65;
      uint64_t v66 = *(int *)(v60 + 24);
      uint64_t v67 = &__dst[v66];
      uint64_t v68 = &v59[v66];
      uint64_t v69 = *((void *)v68 + 1);
      *(void *)uint64_t v67 = *(void *)v68;
      *((void *)v67 + 1) = v69;
      uint64_t v70 = *(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v70(__dst, 0, 1, v60);
    }
    uint64_t v71 = *(int *)(a3 + 20);
    unint64_t v72 = (uint64_t *)((char *)a1 + v71);
    uint64_t v73 = (char *)a2 + v71;
    uint64_t v75 = *(void **)v73;
    uint64_t v74 = *((void *)v73 + 1);
    *unint64_t v72 = v75;
    v72[1] = v74;
    id v76 = v75;
  }
  return a1;
}

void destroy for GenericQuerySnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t Model = type metadata accessor for GenericQueryModel();
  uint64_t v7 = a1 + *(int *)(Model + 40);
  uint64_t v8 = type metadata accessor for SpeakableString();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + *(int *)(Model + 72);
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = *(void **)(a1 + *(int *)(a2 + 20));
}

char *initializeWithCopy for GenericQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  uint64_t Model = (int *)type metadata accessor for GenericQueryModel();
  uint64_t v9 = Model[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  unsigned char v10[8] = v11[8];
  uint64_t v12 = Model[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = Model[7];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  v16[8] = v17[8];
  *(void *)uint64_t v16 = *(void *)v17;
  uint64_t v18 = Model[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  v19[8] = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v21 = Model[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = Model[10];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for SpeakableString();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v77 = v28;
  uint64_t v78 = v27;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = Model[11];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v81 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = v81;
  uint64_t v33 = Model[12];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v80 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = v80;
  uint64_t v36 = Model[13];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v39;
  uint64_t v40 = Model[14];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  uint64_t v44 = Model[15];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = v47;
  uint64_t v48 = Model[16];
  uint64_t v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + 1) = v51;
  uint64_t v52 = Model[17];
  uint64_t v53 = &a1[v52];
  uint64_t v54 = &a2[v52];
  uint64_t v55 = *((void *)v54 + 1);
  *(void *)uint64_t v53 = *(void *)v54;
  *((void *)v53 + 1) = v55;
  uint64_t v56 = Model[18];
  __dst = &a1[v56];
  uint64_t v57 = &a2[v56];
  uint64_t v58 = type metadata accessor for SnippetHeaderModel();
  uint64_t v76 = *(void *)(v58 - 8);
  uint64_t v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v79(v57, 1, v58))
  {
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v57, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(__dst, v57, v78);
    uint64_t v60 = *(int *)(v58 + 20);
    uint64_t v61 = &__dst[v60];
    uint64_t v62 = &v57[v60];
    uint64_t v63 = *((void *)v62 + 1);
    *(void *)uint64_t v61 = *(void *)v62;
    *((void *)v61 + 1) = v63;
    uint64_t v64 = *(int *)(v58 + 24);
    uint64_t v65 = &__dst[v64];
    uint64_t v66 = &v57[v64];
    uint64_t v67 = *((void *)v66 + 1);
    *(void *)uint64_t v65 = *(void *)v66;
    *((void *)v65 + 1) = v67;
    uint64_t v68 = *(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v68(__dst, 0, 1, v58);
  }
  uint64_t v69 = *(int *)(a3 + 20);
  uint64_t v70 = &a1[v69];
  uint64_t v71 = &a2[v69];
  uint64_t v73 = *(void **)v71;
  uint64_t v72 = *((void *)v71 + 1);
  *(void *)uint64_t v70 = v73;
  *((void *)v70 + 1) = v72;
  id v74 = v73;
  return a1;
}

char *assignWithCopy for GenericQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
LABEL_7:
  uint64_t Model = (int *)type metadata accessor for GenericQueryModel();
  uint64_t v12 = Model[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  char v15 = v14[8];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v15;
  uint64_t v16 = Model[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  uint64_t v20 = Model[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = Model[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v27;
  uint64_t v28 = Model[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  char v31 = v30[8];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v31;
  uint64_t v32 = Model[10];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v35 = type metadata accessor for SpeakableString();
  uint64_t v90 = *(void *)(v35 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48);
  int v37 = v36(v33, 1, v35);
  int v38 = v36(v34, 1, v35);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v33, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v33, 0, 1, v35);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v90 + 8))(v33, v35);
LABEL_12:
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v33, v34, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v90 + 24))(v33, v34, v35);
LABEL_13:
  uint64_t v40 = Model[11];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = Model[12];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = *((void *)v45 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = Model[13];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  *(void *)uint64_t v47 = *(void *)v48;
  *((void *)v47 + 1) = *((void *)v48 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v49 = Model[14];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  *(void *)uint64_t v50 = *(void *)v51;
  *((void *)v50 + 1) = *((void *)v51 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v52 = Model[15];
  uint64_t v53 = &a1[v52];
  uint64_t v54 = &a2[v52];
  *(void *)uint64_t v53 = *(void *)v54;
  *((void *)v53 + 1) = *((void *)v54 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v55 = Model[16];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  *(void *)uint64_t v56 = *(void *)v57;
  *((void *)v56 + 1) = *((void *)v57 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = Model[17];
  uint64_t v59 = &a1[v58];
  uint64_t v60 = &a2[v58];
  *(void *)uint64_t v59 = *(void *)v60;
  *((void *)v59 + 1) = *((void *)v60 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v61 = Model[18];
  uint64_t v62 = &a1[v61];
  uint64_t v63 = &a2[v61];
  uint64_t v64 = type metadata accessor for SnippetHeaderModel();
  uint64_t v65 = *(void *)(v64 - 8);
  uint64_t v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48);
  int v67 = v66(v62, 1, v64);
  int v68 = v66(v63, 1, v64);
  if (!v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 24))(v62, v63, v35);
      uint64_t v84 = *(int *)(v64 + 20);
      uint64_t v85 = &v62[v84];
      uint64_t v86 = &v63[v84];
      *(void *)uint64_t v85 = *(void *)v86;
      *((void *)v85 + 1) = *((void *)v86 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v87 = *(int *)(v64 + 24);
      unint64_t v88 = &v62[v87];
      uint64_t v89 = &v63[v87];
      *(void *)unint64_t v88 = *(void *)v89;
      *((void *)v88 + 1) = *((void *)v89 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    _s10WellnessUI17SnippetHeaderViewVWOhTm_1((uint64_t)v62, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v68)
  {
LABEL_18:
    uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v62, v63, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v62, v63, v35);
  uint64_t v69 = *(int *)(v64 + 20);
  uint64_t v70 = &v62[v69];
  uint64_t v71 = &v63[v69];
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = *((void *)v71 + 1);
  uint64_t v72 = *(int *)(v64 + 24);
  uint64_t v73 = &v62[v72];
  id v74 = &v63[v72];
  *(void *)uint64_t v73 = *(void *)v74;
  *((void *)v73 + 1) = *((void *)v74 + 1);
  uint64_t v75 = *(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v75(v62, 0, 1, v64);
LABEL_19:
  uint64_t v77 = *(int *)(a3 + 20);
  uint64_t v78 = &a1[v77];
  uint64_t v79 = &a2[v77];
  uint64_t v80 = *(void **)&a1[v77];
  uint64_t v81 = *(void **)v79;
  *(void *)uint64_t v78 = *(void *)v79;
  id v82 = v81;

  *((void *)v78 + 1) = *((void *)v79 + 1);
  return a1;
}

uint64_t _s10WellnessUI17SnippetHeaderViewVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for GenericQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t Model = (int *)type metadata accessor for GenericQueryModel();
  uint64_t v10 = Model[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = Model[6];
  uint64_t v14 = &a1[v13];
  char v15 = &a2[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = Model[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  v17[8] = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = Model[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  v20[8] = v21[8];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = Model[9];
  char v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  v23[8] = v24[8];
  *(void *)char v23 = *(void *)v24;
  uint64_t v25 = Model[10];
  uint64_t v26 = &a1[v25];
  char v27 = &a2[v25];
  uint64_t v28 = type metadata accessor for SpeakableString();
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  *(_OWORD *)&a1[Model[11]] = *(_OWORD *)&a2[Model[11]];
  *(_OWORD *)&a1[Model[12]] = *(_OWORD *)&a2[Model[12]];
  *(_OWORD *)&a1[Model[13]] = *(_OWORD *)&a2[Model[13]];
  *(_OWORD *)&a1[Model[14]] = *(_OWORD *)&a2[Model[14]];
  *(_OWORD *)&a1[Model[15]] = *(_OWORD *)&a2[Model[15]];
  *(_OWORD *)&a1[Model[16]] = *(_OWORD *)&a2[Model[16]];
  *(_OWORD *)&a1[Model[17]] = *(_OWORD *)&a2[Model[17]];
  uint64_t v31 = Model[18];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = type metadata accessor for SnippetHeaderModel();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v32, v33, v28);
    *(_OWORD *)&v32[*(int *)(v34 + 20)] = *(_OWORD *)&v33[*(int *)(v34 + 20)];
    *(_OWORD *)&v32[*(int *)(v34 + 24)] = *(_OWORD *)&v33[*(int *)(v34 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for GenericQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
LABEL_7:
  uint64_t Model = (int *)type metadata accessor for GenericQueryModel();
  uint64_t v12 = Model[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = Model[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = Model[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  v19[8] = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v21 = Model[8];
  uint64_t v22 = &a1[v21];
  char v23 = &a2[v21];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = Model[9];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  v25[8] = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  uint64_t v27 = Model[10];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = type metadata accessor for SpeakableString();
  uint64_t v94 = *(void *)(v30 - 8);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 48);
  int v32 = v31(v28, 1, v30);
  int v33 = v31(v29, 1, v30);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v28, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v94 + 8))(v28, v30);
LABEL_12:
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v28, v29, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v94 + 40))(v28, v29, v30);
LABEL_13:
  uint64_t v35 = Model[11];
  uint64_t v36 = &a1[v35];
  int v37 = &a2[v35];
  uint64_t v39 = *(void *)v37;
  uint64_t v38 = *((void *)v37 + 1);
  *(void *)uint64_t v36 = v39;
  *((void *)v36 + 1) = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = Model[12];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  uint64_t v44 = *(void *)v42;
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = v44;
  *((void *)v41 + 1) = v43;
  swift_bridgeObjectRelease();
  uint64_t v45 = Model[13];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  uint64_t v49 = *(void *)v47;
  uint64_t v48 = *((void *)v47 + 1);
  *(void *)uint64_t v46 = v49;
  *((void *)v46 + 1) = v48;
  swift_bridgeObjectRelease();
  uint64_t v50 = Model[14];
  uint64_t v51 = &a1[v50];
  uint64_t v52 = &a2[v50];
  uint64_t v54 = *(void *)v52;
  uint64_t v53 = *((void *)v52 + 1);
  *(void *)uint64_t v51 = v54;
  *((void *)v51 + 1) = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = Model[15];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  uint64_t v59 = *(void *)v57;
  uint64_t v58 = *((void *)v57 + 1);
  *(void *)uint64_t v56 = v59;
  *((void *)v56 + 1) = v58;
  swift_bridgeObjectRelease();
  uint64_t v60 = Model[16];
  uint64_t v61 = &a1[v60];
  uint64_t v62 = &a2[v60];
  uint64_t v64 = *(void *)v62;
  uint64_t v63 = *((void *)v62 + 1);
  *(void *)uint64_t v61 = v64;
  *((void *)v61 + 1) = v63;
  swift_bridgeObjectRelease();
  uint64_t v65 = Model[17];
  uint64_t v66 = &a1[v65];
  int v67 = &a2[v65];
  uint64_t v69 = *(void *)v67;
  uint64_t v68 = *((void *)v67 + 1);
  *(void *)uint64_t v66 = v69;
  *((void *)v66 + 1) = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = Model[18];
  uint64_t v71 = &a1[v70];
  uint64_t v72 = &a2[v70];
  uint64_t v73 = type metadata accessor for SnippetHeaderModel();
  uint64_t v74 = *(void *)(v73 - 8);
  uint64_t v75 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48);
  int v76 = v75(v71, 1, v73);
  int v77 = v75(v72, 1, v73);
  if (!v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v94 + 40))(v71, v72, v30);
      uint64_t v84 = *(int *)(v73 + 20);
      uint64_t v85 = &v71[v84];
      uint64_t v86 = &v72[v84];
      uint64_t v88 = *(void *)v86;
      uint64_t v87 = *((void *)v86 + 1);
      *(void *)uint64_t v85 = v88;
      *((void *)v85 + 1) = v87;
      swift_bridgeObjectRelease();
      uint64_t v89 = *(int *)(v73 + 24);
      uint64_t v90 = &v71[v89];
      uint64_t v91 = &v72[v89];
      uint64_t v93 = *(void *)v91;
      uint64_t v92 = *((void *)v91 + 1);
      *(void *)uint64_t v90 = v93;
      *((void *)v90 + 1) = v92;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    _s10WellnessUI17SnippetHeaderViewVWOhTm_1((uint64_t)v71, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v77)
  {
LABEL_18:
    uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v71, v72, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v71, v72, v30);
  *(_OWORD *)&v71[*(int *)(v73 + 20)] = *(_OWORD *)&v72[*(int *)(v73 + 20)];
  *(_OWORD *)&v71[*(int *)(v73 + 24)] = *(_OWORD *)&v72[*(int *)(v73 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
LABEL_19:
  uint64_t v79 = *(int *)(a3 + 20);
  uint64_t v80 = &a1[v79];
  uint64_t v81 = &a2[v79];
  id v82 = *(void **)&a1[v79];
  *(void *)uint64_t v80 = *(void *)v81;

  *((void *)v80 + 1) = *((void *)v81 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericQuerySnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_26182F440);
}

uint64_t sub_26182F440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Model = type metadata accessor for GenericQueryModel();
  uint64_t v7 = *(void *)(Model - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, Model);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for GenericQuerySnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_26182F520);
}

uint64_t sub_26182F520(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for GenericQueryModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata completion function for GenericQuerySnippet()
{
  uint64_t result = type metadata accessor for GenericQueryModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_26182F670()
{
  return MEMORY[0x263F1B710];
}

uint64_t GenericBinaryButtonSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  char v7 = *(unsigned char *)(v1 + 48);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

__n128 GenericBinaryButtonSnippet.init(model:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v9 = (__n128)a1[1];
  long long v10 = *a1;
  uint64_t v3 = *((void *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 5);
  char v5 = *((unsigned char *)a1 + 48);
  type metadata accessor for Context();
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_3(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  uint64_t v6 = EnvironmentObject.init()();
  __n128 result = v9;
  *(_OWORD *)a2 = v10;
  *(__n128 *)(a2 + 16) = v9;
  *(void *)(a2 + 32) = v3;
  *(void *)(a2 + 40) = v4;
  *(unsigned char *)(a2 + 48) = v5;
  *(void *)(a2 + 56) = v6;
  *(void *)(a2 + 64) = v8;
  return result;
}

uint64_t GenericBinaryButtonSnippet.body.getter()
{
  long long v1 = *(_OWORD *)(v0 + 48);
  v7[2] = *(_OWORD *)(v0 + 32);
  v7[3] = v1;
  uint64_t v8 = *(void *)(v0 + 64);
  long long v2 = *(_OWORD *)(v0 + 16);
  v7[0] = *(_OWORD *)v0;
  v7[1] = v2;
  uint64_t v3 = swift_allocObject();
  long long v4 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v3 + 64) = v4;
  *(void *)(v3 + 80) = *(void *)(v0 + 64);
  long long v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 32) = v5;
  outlined retain of GenericBinaryButtonSnippet((uint64_t)v7);
  type metadata accessor for BinaryButtonView();
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_3(&lazy protocol witness table cache variable for type BinaryButtonView and conformance BinaryButtonView, MEMORY[0x263F77658]);
  return ComponentStack.init(content:)();
}

uint64_t closure #1 in GenericBinaryButtonSnippet.body.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ButtonItemButtonStyle.Role();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  long long v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  uint64_t v32 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonRole(_:)>>.0);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v14 = *(_OWORD *)(a1 + 16);
  long long v37 = *(_OWORD *)a1;
  long long v38 = v14;
  long long v39 = *(_OWORD *)(a1 + 32);
  if (*(unsigned char *)(a1 + 48))
  {
    v41[0] = v39;
    long long v34 = v39;
    uint64_t v30 = v10;
    uint64_t v31 = v11;
    uint64_t v20 = swift_allocObject();
    long long v21 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v20 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v20 + 64) = v21;
    *(void *)(v20 + 80) = *(void *)(a1 + 64);
    long long v22 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v20 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v20 + 32) = v22;
    outlined retain of String((uint64_t)v41);
    outlined retain of GenericBinaryButtonSnippet(a1);
    lazy protocol witness table accessor for type String and conformance String();
    Button<>.init<A>(_:action:)();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F774E8], v2);
    uint64_t v23 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>((unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
    View.buttonRole(_:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v19 = *(void (**)(char *, uint64_t))(v32 + 8);
    v19(v8, v6);
    *(void *)&long long v34 = v6;
    *((void *)&v34 + 1) = v23;
    swift_getOpaqueTypeConformance2();
    uint64_t v24 = v30;
    uint64_t v18 = View.eraseToAnyView()();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v24);
  }
  else
  {
    v41[0] = v39;
    long long v34 = v39;
    uint64_t v15 = swift_allocObject();
    long long v16 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v15 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v15 + 64) = v16;
    *(void *)(v15 + 80) = *(void *)(a1 + 64);
    long long v17 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v15 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v15 + 32) = v17;
    outlined retain of GenericBinaryButtonSnippet(a1);
    outlined retain of String((uint64_t)v41);
    lazy protocol witness table accessor for type String and conformance String();
    Button<>.init<A>(_:action:)();
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>((unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
    uint64_t v18 = View.eraseToAnyView()();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v32 + 8);
    v19(v8, v6);
  }
  long long v40 = v38;
  long long v34 = v38;
  uint64_t v25 = swift_allocObject();
  long long v26 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v25 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v25 + 64) = v26;
  *(void *)(v25 + 80) = *(void *)(a1 + 64);
  long long v27 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v25 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v25 + 32) = v27;
  outlined retain of GenericBinaryButtonSnippet(a1);
  outlined retain of String((uint64_t)&v40);
  lazy protocol witness table accessor for type String and conformance String();
  Button<>.init<A>(_:action:)();
  uint64_t v35 = MEMORY[0x263F1B728];
  uint64_t v36 = MEMORY[0x263F774A8];
  *(void *)&long long v34 = v18;
  v33[3] = v6;
  v33[4] = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
  (*(void (**)(uint64_t *, char *, uint64_t))(v32 + 16))(boxed_opaque_existential_1, v8, v6);
  BinaryButtonView.init(primaryButton:secondaryButton:)();
  return ((uint64_t (*)(char *, uint64_t))v19)(v8, v6);
}

uint64_t partial apply for closure #1 in GenericBinaryButtonSnippet.body.getter()
{
  return closure #1 in GenericBinaryButtonSnippet.body.getter(v0 + 16);
}

uint64_t outlined retain of GenericBinaryButtonSnippet(uint64_t a1)
{
  id v2 = *(id *)(a1 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in GenericBinaryButtonSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (AnyHashable, Any)(v6, (uint64_t)v15);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in GenericBinaryButtonSnippet.body.getter(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2618795C0;
    id v5 = v2;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = MEMORY[0x263F8D4F8];
    *(unsigned char *)(inited + 72) = a2;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    dispatch thunk of Context.perform(directInvocation:payload:)();

    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of GenericBinaryButtonSnippet(a1);
    type metadata accessor for Context();
    _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_3(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for View.body.getter in conformance GenericBinaryButtonSnippet()
{
  long long v1 = *(_OWORD *)(v0 + 48);
  v7[2] = *(_OWORD *)(v0 + 32);
  v7[3] = v1;
  uint64_t v8 = *(void *)(v0 + 64);
  long long v2 = *(_OWORD *)(v0 + 16);
  v7[0] = *(_OWORD *)v0;
  v7[1] = v2;
  uint64_t v3 = swift_allocObject();
  long long v4 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v3 + 64) = v4;
  *(void *)(v3 + 80) = *(void *)(v0 + 64);
  long long v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 32) = v5;
  outlined retain of GenericBinaryButtonSnippet((uint64_t)v7);
  type metadata accessor for BinaryButtonView();
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_3(&lazy protocol witness table cache variable for type BinaryButtonView and conformance BinaryButtonView, MEMORY[0x263F77658]);
  return ComponentStack.init(content:)();
}

void destroy for GenericBinaryButtonSnippet(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v2 = *(void **)(a1 + 56);
}

uint64_t initializeWithCopy for GenericBinaryButtonSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void **)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = v7;
  return a1;
}

uint64_t assignWithCopy for GenericBinaryButtonSnippet(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v5 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v5;
  id v6 = v5;

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for GenericBinaryButtonSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericBinaryButtonSnippet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericBinaryButtonSnippet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericBinaryButtonSnippet()
{
  return &type metadata for GenericBinaryButtonSnippet;
}

uint64_t sub_2618304D8()
{
  return lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<BinaryButtonView> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<BinaryButtonView>);
}

uint64_t partial apply for closure #2 in closure #1 in GenericBinaryButtonSnippet.body.getter()
{
  return closure #1 in closure #1 in GenericBinaryButtonSnippet.body.getter(v0 + 16, 1);
}

uint64_t outlined retain of String(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #3 in closure #1 in GenericBinaryButtonSnippet.body.getter()
{
  return closure #1 in closure #1 in GenericBinaryButtonSnippet.body.getter(v0 + 16, 0);
}

uint64_t objectdestroyTm_1()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 88, 7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

uint64_t outlined init with copy of (AnyHashable, Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x263E41DF0](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t BloodPressureLogModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t BloodPressureLogModel.appPunchout.setter(uint64_t a1)
{
  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*BloodPressureLogModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureLogModel.dateLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureLogModel() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for BloodPressureLogModel()
{
  uint64_t result = type metadata singleton initialization cache for BloodPressureLogModel;
  if (!type metadata singleton initialization cache for BloodPressureLogModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t BloodPressureLogModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureLogModel() + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureLogModel.dateLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureLogModel.dataLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureLogModel() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureLogModel.dataLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureLogModel() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureLogModel.dataLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureLogModel.loggedLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureLogModel() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureLogModel.loggedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureLogModel() + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureLogModel.loggedLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for BloodPressureLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 32), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t BloodPressureLogModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for BloodPressureLogModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(v3 + 32), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*BloodPressureLogModel.snippetHeaderModel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureLogModel.timeLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureLogModel() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureLogModel.timeLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureLogModel() + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureLogModel.timeLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureLogModel.unitLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BloodPressureLogModel() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BloodPressureLogModel.unitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BloodPressureLogModel() + 40));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BloodPressureLogModel.unitLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BloodPressureLogModel.init(url:date:dateLabel:systolic:diastolic:loggedLabel:snippetHeaderModel:unitLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8@<D0>, uint64_t a9@<D1>, uint64_t a10)
{
  uint64_t v74 = a6;
  uint64_t v78 = a5;
  uint64_t v79 = a1;
  uint64_t v69 = a3;
  uint64_t v70 = a4;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v14 - 8);
  int v77 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v75 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v68 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  long long v22 = (char *)&v62 - v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = type metadata accessor for AppPunchout();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 56);
  uint64_t v73 = v23;
  uint64_t v71 = v24 + 56;
  v72(a7, 1, 1);
  uint64_t v25 = (int *)type metadata accessor for BloodPressureLogModel();
  long long v26 = (uint64_t *)(a7 + v25[5]);
  uint64_t *v26 = 0;
  v26[1] = 0;
  long long v27 = (uint64_t *)(a7 + v25[6]);
  uint64_t *v27 = 0;
  v27[1] = 0;
  uint64_t v28 = (void *)(a7 + v25[7]);
  void *v28 = 0;
  v28[1] = 0;
  uint64_t v29 = a7 + v25[8];
  uint64_t v30 = type metadata accessor for SnippetHeaderModel();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 56);
  uint64_t v66 = v30;
  uint64_t v64 = v31 + 56;
  v65(v29, 1, 1);
  uint64_t v32 = (uint64_t *)(a7 + v25[9]);
  uint64_t *v32 = 0;
  v32[1] = 0;
  uint64_t v33 = v25[10];
  uint64_t v80 = a7;
  long long v34 = (void *)(a7 + v33);
  *long long v34 = 0;
  v34[1] = 0;
  int v67 = v34;
  uint64_t v76 = a2;
  dispatch thunk of DialogCalendar.dateDescriptive.getter();
  uint64_t v35 = type metadata accessor for SpeakableString();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v37 = v63(v22, 1, v35);
  uint64_t v62 = v36;
  if (v37 == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v22, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v38 = 0;
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = SpeakableString.print.getter();
    uint64_t v41 = v36;
    uint64_t v43 = v42;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v22, v35);
    uint64_t v81 = v40;
    uint64_t v82 = v43;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v38 = StringProtocol.capitalized.getter();
    uint64_t v39 = v44;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t *v26 = v38;
  v26[1] = v39;
  uint64_t v45 = BloodPressureLogModel.createBloodPressureLabel(systolic:diastolic:)(a8, 0, a9, 0);
  uint64_t v47 = v46;
  swift_bridgeObjectRelease();
  uint64_t *v27 = v45;
  v27[1] = v47;
  swift_bridgeObjectRelease();
  uint64_t v48 = v70;
  void *v28 = v69;
  v28[1] = v48;
  outlined destroy of Font.Design?(v29, &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v49 = v78;
  outlined init with copy of SnippetHeaderModel(v78, v29, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v65)(v29, 0, 1, v66);
  uint64_t v50 = (uint64_t)v68;
  dispatch thunk of DialogCalendar.timeDescriptive.getter();
  if (v63((char *)v50, 1, v35) == 1)
  {
    outlined destroy of Font.Design?(v50, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
  }
  else
  {
    uint64_t v51 = SpeakableString.print.getter();
    uint64_t v52 = v53;
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v50, v35);
  }
  swift_bridgeObjectRelease();
  uint64_t *v32 = v51;
  v32[1] = v52;
  uint64_t v54 = v67;
  swift_bridgeObjectRelease();
  *uint64_t v54 = v74;
  v54[1] = a10;
  uint64_t v55 = type metadata accessor for URL();
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v57 = (uint64_t)v77;
  uint64_t v58 = v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v77, v79, v55);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v57, 0, 1, v55);
  uint64_t v59 = (uint64_t)v75;
  uint64_t v60 = v80;
  BloodPressureLogModel.createAppPunchout(url:)(v57);
  swift_release();
  _s10WellnessUI18SnippetHeaderModelVWOhTm_0(v49, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v58, v55);
  outlined destroy of Font.Design?(v57, &demangling cache variable for type metadata for URL?);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v72)(v59, 0, 1, v73);
  return outlined assign with take of AppPunchout?(v59, v60, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t BloodPressureLogModel.createBloodPressureLabel(systolic:diastolic:)(uint64_t result, char a2, uint64_t a3, char a4)
{
  if (a2) {
    goto LABEL_18;
  }
  uint64_t v6 = result;
  double v7 = trunc(*(double *)&result);
  if (*(double *)&result <= -9.22337204e18 || *(double *)&result >= 9.22337204e18 || v7 != *(double *)&result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = MEMORY[0x263F8D538];
    *(_OWORD *)(v10 + 16) = xmmword_2618795C0;
    uint64_t v12 = MEMORY[0x263F8D5B8];
    *(void *)(v10 + 56) = v11;
    *(void *)(v10 + 64) = v12;
    *(void *)(v10 + 32) = v6;
    uint64_t v13 = String.init(format:arguments:)();
    *(double *)&uint64_t result = COERCE_DOUBLE(swift_bridgeObjectRelease());
    if ((a4 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
  if ((~result & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  *(double *)&uint64_t result = COERCE_DOUBLE(dispatch thunk of CustomStringConvertible.description.getter());
  uint64_t v13 = result;
  if (a4)
  {
LABEL_17:
    swift_bridgeObjectRelease();
LABEL_18:
    *(double *)&uint64_t result = 0.0;
    return result;
  }
LABEL_10:
  if (*(double *)&a3 <= -9.22337204e18 || *(double *)&a3 >= 9.22337204e18 || trunc(*(double *)&a3) != *(double *)&a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v17 = swift_allocObject();
    uint64_t v18 = MEMORY[0x263F8D538];
    *(_OWORD *)(v17 + 16) = xmmword_2618795C0;
    uint64_t v19 = MEMORY[0x263F8D5B8];
    *(void *)(v17 + 56) = v18;
    *(void *)(v17 + 64) = v19;
    *(double *)(v17 + 32) = *(double *)&a3;
    uint64_t v14 = String.init(format:arguments:)();
    uint64_t v16 = v20;
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if ((~a3 & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v16 = v15;
LABEL_20:
  swift_bridgeObjectRetain();
  v21._uint64_t countAndFlagsBits = 47;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v22._uint64_t countAndFlagsBits = v14;
  v22._object = v16;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t BloodPressureLogModel.createAppPunchout(url:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL.absoluteString.getter();
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t BloodPressureLogModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x68636E7550707061;
  switch(a1)
  {
    case 1:
      unsigned int v3 = 1702125924;
      goto LABEL_8;
    case 2:
      unsigned int v3 = 1635017060;
      goto LABEL_8;
    case 3:
      return 0x614C646567676F6CLL;
    case 4:
      return 0xD000000000000012;
    case 5:
      unsigned int v3 = 1701669236;
      goto LABEL_8;
    case 6:
      unsigned int v3 = 1953066613;
LABEL_8:
      uint64_t result = v3 | 0x6562614C00000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance BloodPressureLogModel.CodingKeys()
{
  return BloodPressureLogModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance BloodPressureLogModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized BloodPressureLogModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance BloodPressureLogModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance BloodPressureLogModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance BloodPressureLogModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t BloodPressureLogModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<BloodPressureLogModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for AppPunchout();
  _s10SnippetKit11AppPunchoutVACSEAAWlTm_3(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for BloodPressureLogModel();
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    type metadata accessor for SnippetHeaderModel();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_3(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys);
  }
  return result;
}

uint64_t BloodPressureLogModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v58 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v59 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<BloodPressureLogModel.CodingKeys>);
  uint64_t v57 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v64 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BloodPressureLogModel();
  uint64_t v9 = (int *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AppPunchout();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  uint64_t v56 = v12;
  v13(v11, 1, 1);
  uint64_t v14 = (uint64_t *)&v11[v9[7]];
  *uint64_t v14 = 0;
  v14[1] = 0;
  uint64_t v15 = &v11[v9[8]];
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  uint64_t v16 = (uint64_t *)&v11[v9[9]];
  *uint64_t v16 = 0;
  v16[1] = 0;
  uint64_t v17 = (uint64_t)&v11[v9[10]];
  uint64_t v18 = type metadata accessor for SnippetHeaderModel();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v55 = v17;
  v19(v17, 1, 1, v18);
  uint64_t v20 = (uint64_t *)&v11[v9[11]];
  *uint64_t v20 = 0;
  v20[1] = 0;
  uint64_t v21 = v9[12];
  uint64_t v63 = v11;
  Swift::String v22 = &v11[v21];
  *(void *)Swift::String v22 = 0;
  *((void *)v22 + 1) = 0;
  uint64_t v23 = a1;
  uint64_t v24 = a1[3];
  uint64_t v61 = v23;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  lazy protocol witness table accessor for type BloodPressureLogModel.CodingKeys and conformance BloodPressureLogModel.CodingKeys();
  uint64_t v25 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25)
  {
    uint64_t v29 = (uint64_t)v63;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v61);
    uint64_t v50 = v29;
  }
  else
  {
    uint64_t v62 = v15;
    uint64_t v52 = v22;
    uint64_t v53 = v18;
    uint64_t v26 = v57;
    uint64_t v27 = (uint64_t)v58;
    char v71 = 0;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_3(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    uint64_t v28 = (uint64_t)v59;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v28, (uint64_t)v63, &demangling cache variable for type metadata for AppPunchout?);
    char v70 = 1;
    uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    *uint64_t v14 = v31;
    v14[1] = v33;
    char v69 = 2;
    uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v36 = v35;
    int v37 = (uint64_t *)v62;
    swift_bridgeObjectRelease();
    *int v37 = v34;
    v37[1] = v36;
    char v68 = 3;
    uint64_t v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v40 = v39;
    swift_bridgeObjectRelease();
    *uint64_t v16 = v38;
    v16[1] = v40;
    char v67 = 4;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_3(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v41 = v64;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v27, v55, &demangling cache variable for type metadata for SnippetHeaderModel?);
    char v66 = 5;
    uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v44 = v43;
    swift_bridgeObjectRelease();
    *uint64_t v20 = v42;
    v20[1] = v44;
    char v65 = 6;
    uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v47 = v46;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v41, v60);
    uint64_t v48 = (uint64_t *)v52;
    swift_bridgeObjectRelease();
    *uint64_t v48 = v45;
    v48[1] = v47;
    uint64_t v49 = (uint64_t)v63;
    outlined init with copy of SnippetHeaderModel((uint64_t)v63, v54, (uint64_t (*)(void))type metadata accessor for BloodPressureLogModel);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v61);
    uint64_t v50 = v49;
  }
  return _s10WellnessUI18SnippetHeaderModelVWOhTm_0(v50, (uint64_t (*)(void))type metadata accessor for BloodPressureLogModel);
}

uint64_t _s10WellnessUI18SnippetHeaderModelVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t base witness table accessor for Decodable in BloodPressureLogModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_3(&lazy protocol witness table cache variable for type BloodPressureLogModel and conformance BloodPressureLogModel, (void (*)(uint64_t))type metadata accessor for BloodPressureLogModel);
}

uint64_t base witness table accessor for Encodable in BloodPressureLogModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_3(&lazy protocol witness table cache variable for type BloodPressureLogModel and conformance BloodPressureLogModel, (void (*)(uint64_t))type metadata accessor for BloodPressureLogModel);
}

uint64_t _s10SnippetKit11AppPunchoutVACSEAAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance BloodPressureLogModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return BloodPressureLogModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance BloodPressureLogModel(void *a1)
{
  return BloodPressureLogModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for BloodPressureLogModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    uint64_t v13 = (uint64_t *)((char *)a1 + v11);
    uint64_t v14 = (uint64_t *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = (uint64_t *)((char *)a1 + v12);
    uint64_t v17 = (uint64_t *)((char *)a2 + v12);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = a3[7];
    uint64_t v20 = a3[8];
    uint64_t v21 = (uint64_t *)((char *)a1 + v19);
    Swift::String v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    __dst = (char *)a1 + v20;
    uint64_t v24 = (char *)a2 + v20;
    uint64_t v25 = type metadata accessor for SnippetHeaderModel();
    uint64_t v47 = *(void *)(v25 - 8);
    uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v26(v24, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(__dst, v24, v28);
      uint64_t v29 = *(int *)(v25 + 20);
      uint64_t v30 = &__dst[v29];
      uint64_t v31 = &v24[v29];
      uint64_t v32 = *((void *)v31 + 1);
      *(void *)uint64_t v30 = *(void *)v31;
      *((void *)v30 + 1) = v32;
      uint64_t v33 = *(int *)(v25 + 24);
      uint64_t v34 = &__dst[v33];
      uint64_t v35 = &v24[v33];
      uint64_t v36 = *((void *)v35 + 1);
      *(void *)uint64_t v34 = *(void *)v35;
      *((void *)v34 + 1) = v36;
      int v37 = *(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(__dst, 0, 1, v25);
    }
    uint64_t v38 = a3[9];
    uint64_t v39 = a3[10];
    uint64_t v40 = (uint64_t *)((char *)a1 + v38);
    uint64_t v41 = (uint64_t *)((char *)a2 + v38);
    uint64_t v42 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v42;
    uint64_t v43 = (uint64_t *)((char *)a1 + v39);
    uint64_t v44 = (uint64_t *)((char *)a2 + v39);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for BloodPressureLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t v7 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    uint64_t v8 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  uint64_t v13 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = &a1[v10];
  uint64_t v15 = &a2[v10];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = v21;
  __dst = &a1[v18];
  uint64_t v47 = a3;
  Swift::String v22 = &a2[v18];
  uint64_t v23 = type metadata accessor for SnippetHeaderModel();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v25(v22, 1, v23))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v22, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(__dst, v22, v27);
    uint64_t v28 = *(int *)(v23 + 20);
    uint64_t v29 = &__dst[v28];
    uint64_t v30 = &v22[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    uint64_t v32 = *(int *)(v23 + 24);
    uint64_t v33 = &__dst[v32];
    uint64_t v34 = &v22[v32];
    uint64_t v35 = *((void *)v34 + 1);
    *(void *)uint64_t v33 = *(void *)v34;
    *((void *)v33 + 1) = v35;
    uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(__dst, 0, 1, v23);
  }
  uint64_t v37 = v47[9];
  uint64_t v38 = v47[10];
  uint64_t v39 = &a1[v37];
  uint64_t v40 = &a2[v37];
  uint64_t v41 = *((void *)v40 + 1);
  *(void *)uint64_t v39 = *(void *)v40;
  *((void *)v39 + 1) = v41;
  uint64_t v42 = &a1[v38];
  uint64_t v43 = &a2[v38];
  uint64_t v44 = *((void *)v43 + 1);
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[8];
  Swift::String v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for SnippetHeaderModel();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      uint64_t v45 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 24))(v22, v23, v45);
      uint64_t v46 = *(int *)(v24 + 20);
      uint64_t v47 = &v22[v46];
      uint64_t v48 = &v23[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      *((void *)v47 + 1) = *((void *)v48 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v49 = *(int *)(v24 + 24);
      uint64_t v50 = &v22[v49];
      uint64_t v51 = &v23[v49];
      *(void *)uint64_t v50 = *(void *)v51;
      *((void *)v50 + 1) = *((void *)v51 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    _s10WellnessUI18SnippetHeaderModelVWOhTm_0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v22, v23, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v29 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v22, v23, v29);
  uint64_t v30 = *(int *)(v24 + 20);
  uint64_t v31 = &v22[v30];
  uint64_t v32 = &v23[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  uint64_t v33 = *(int *)(v24 + 24);
  uint64_t v34 = &v22[v33];
  uint64_t v35 = &v23[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = *((void *)v35 + 1);
  uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36(v22, 0, 1, v24);
LABEL_13:
  uint64_t v38 = a3[9];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  *(void *)uint64_t v39 = *(void *)v40;
  *((void *)v39 + 1) = *((void *)v40 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[10];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for SnippetHeaderModel();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    uint64_t v16 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v11, v12, v16);
    *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
    *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)&a1[v17] = *(_OWORD *)&a2[v17];
  return a1;
}

char *assignWithTake for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = v16;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[6];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = v21;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[7];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = v26;
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[8];
  int v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = type metadata accessor for SnippetHeaderModel();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (!v33)
  {
    if (!v34)
    {
      uint64_t v48 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 40))(v28, v29, v48);
      uint64_t v49 = *(int *)(v30 + 20);
      uint64_t v50 = &v28[v49];
      uint64_t v51 = &v29[v49];
      uint64_t v53 = *(void *)v51;
      uint64_t v52 = *((void *)v51 + 1);
      *(void *)uint64_t v50 = v53;
      *((void *)v50 + 1) = v52;
      swift_bridgeObjectRelease();
      uint64_t v54 = *(int *)(v30 + 24);
      uint64_t v55 = &v28[v54];
      uint64_t v56 = &v29[v54];
      uint64_t v58 = *(void *)v56;
      uint64_t v57 = *((void *)v56 + 1);
      *(void *)uint64_t v55 = v58;
      *((void *)v55 + 1) = v57;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    _s10WellnessUI18SnippetHeaderModelVWOhTm_0((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v34)
  {
LABEL_12:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v28, v29, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v35 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v28, v29, v35);
  *(_OWORD *)&v28[*(int *)(v30 + 20)] = *(_OWORD *)&v29[*(int *)(v30 + 20)];
  *(_OWORD *)&v28[*(int *)(v30 + 24)] = *(_OWORD *)&v29[*(int *)(v30 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
LABEL_13:
  uint64_t v37 = a3[9];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v41 = *(void *)v39;
  uint64_t v40 = *((void *)v39 + 1);
  *(void *)uint64_t v38 = v41;
  *((void *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[10];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v46 = *(void *)v44;
  uint64_t v45 = *((void *)v44 + 1);
  *(void *)uint64_t v43 = v46;
  *((void *)v43 + 1) = v45;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BloodPressureLogModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261833670);
}

uint64_t sub_261833670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 32);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for BloodPressureLogModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2618337C8);
}

uint64_t sub_2618337C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for BloodPressureLogModel()
{
  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, MEMORY[0x263F762C0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for BloodPressureLogModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BloodPressureLogModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x261833B6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for BloodPressureLogModel.CodingKeys()
{
  return &unk_270D87088;
}

uint64_t specialized BloodPressureLogModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6562614C61746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883800 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6562614C656D6974 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6562614C74696E75 && a2 == 0xE90000000000006CLL)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t CycleTrackingLogSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of CycleTrackingLogModel(v1, a1, (uint64_t (*)(void))type metadata accessor for CycleTrackingLogModel);
}

uint64_t CycleTrackingLogSnippet.buttonColor.getter()
{
  uint64_t v0 = type metadata accessor for ColorScheme();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  unsigned int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  char v6 = (char *)&v10 - v5;
  type metadata accessor for CycleTrackingLogSnippet();
  specialized Environment.wrappedValue.getter((uint64_t)v6);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x263F18510], v0);
  char v7 = static ColorScheme.== infix(_:_:)();
  int v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  if (v7) {
    return static Color.green.getter();
  }
  else {
    return static Color.blue.getter();
  }
}

uint64_t type metadata accessor for CycleTrackingLogSnippet()
{
  uint64_t result = type metadata singleton initialization cache for CycleTrackingLogSnippet;
  if (!type metadata singleton initialization cache for CycleTrackingLogSnippet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CycleTrackingLogSnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v202 = a1;
  uint64_t v2 = type metadata accessor for CycleTrackingLogSnippet();
  uint64_t v177 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v178 = v3;
  uint64_t v179 = (uint64_t)&v143 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>>);
  uint64_t v182 = *(void *)(v184 - 8);
  MEMORY[0x270FA5388](v184);
  uint64_t v180 = (char *)&v143 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v185 = *(void *)(v5 - 8);
  uint64_t v186 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v181 = (char *)&v143 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v183 = (char *)&v143 - v8;
  uint64_t v9 = type metadata accessor for SeparatorStyle();
  uint64_t v173 = *(void *)(v9 - 8);
  uint64_t v174 = v9;
  MEMORY[0x270FA5388](v9);
  unint64_t v169 = (char *)&v143 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v170 = type metadata accessor for FactItemHeroNumberView();
  uint64_t v168 = *(void *)(v170 - 8);
  MEMORY[0x270FA5388](v170);
  long long v166 = (char *)&v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  uint64_t v171 = *(void *)(v12 - 8);
  uint64_t v172 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v167 = (char *)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v194 = *(void *)(v14 - 8);
  uint64_t v195 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v175 = v16;
  uint64_t v176 = (char *)&v143 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v193 = (char *)&v143 - v17;
  uint64_t v18 = type metadata accessor for StatusIndicatorView.IndicatorType();
  uint64_t v159 = *(void *)(v18 - 8);
  uint64_t v160 = v18;
  MEMORY[0x270FA5388](v18);
  unint64_t v158 = (char *)&v143 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for StatusIndicatorView();
  uint64_t v191 = *(void *)(v20 - 8);
  uint64_t v192 = v20;
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v188 = (char *)&v143 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v199 = (char *)&v143 - v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v156 = (uint64_t)&v143 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v157 = (char *)&v143 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = type metadata accessor for SnippetHeaderView();
  uint64_t v161 = *(void *)(v155 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v155);
  uint64_t v187 = (uint64_t)&v143 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v198 = (uint64_t)&v143 - v30;
  uint64_t v31 = type metadata accessor for Font.TextStyle();
  uint64_t v189 = *(void *)(v31 - 8);
  uint64_t v190 = v31;
  MEMORY[0x270FA5388](v31);
  uint64_t v197 = (char *)&v143 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v33 - 8);
  uint64_t v196 = (uint64_t)&v143 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v35 - 8);
  uint64_t v37 = (char *)&v143 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for AppPunchout();
  uint64_t v201 = *(void *)(v38 - 8);
  uint64_t v39 = MEMORY[0x270FA5388](v38);
  uint64_t v163 = v40;
  uint64_t v164 = (char *)&v143 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  uint64_t v200 = (char *)&v143 - v41;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v43 = MEMORY[0x270FA5388](v42 - 8);
  uint64_t v154 = (uint64_t)&v143 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v43);
  uint64_t v46 = (char *)&v143 - v45;
  uint64_t v47 = type metadata accessor for SnippetHeaderModel();
  uint64_t v48 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  uint64_t v50 = (char *)&v143 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = (int *)type metadata accessor for CycleTrackingLogModel();
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + v51[8], (uint64_t)v46, &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v153 = v48;
  uint64_t v52 = v48;
  uint64_t v53 = v47;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v46, 1, v47) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v46, &demangling cache variable for type metadata for SnippetHeaderModel?);
  }
  else
  {
    outlined init with take of SnippetHeaderModel((uint64_t)v46, (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    uint64_t v54 = (char *)v1;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, (uint64_t)v37, &demangling cache variable for type metadata for AppPunchout?);
    uint64_t v55 = v201;
    uint64_t v56 = (uint64_t)v50;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v201 + 48))(v37, 1, v38) == 1)
    {
      outlined destroy of SnippetHeaderModel((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
      outlined destroy of Font.Design?((uint64_t)v37, &demangling cache variable for type metadata for AppPunchout?);
    }
    else
    {
      uint64_t v57 = v38;
      uint64_t v58 = v55 + 32;
      uint64_t v59 = v200;
      uint64_t v152 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
      v152(v200, v37, v57);
      uint64_t v60 = (uint64_t *)&v54[v51[7]];
      if (v60[1]
        && (uint64_t v61 = (uint64_t *)&v54[v51[6]], (v62 = v61[1]) != 0)
        && (uint64_t v63 = (uint64_t *)&v54[v51[5]], (v64 = (void *)v63[1]) != 0))
      {
        uint64_t v150 = (void *)v60[1];
        uint64_t v151 = v64;
        uint64_t v147 = *v60;
        uint64_t v149 = *v61;
        uint64_t v148 = *v63;
        uint64_t v65 = (uint64_t)&v54[v51[9]];
        uint64_t v66 = v196;
        outlined init with copy of Environment<ColorSchemeContrast>.Content(v65, v196, &demangling cache variable for type metadata for URL?);
        uint64_t v67 = type metadata accessor for URL();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 48))(v66, 1, v67) != 1)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined destroy of Font.Design?(v66, &demangling cache variable for type metadata for URL?);
          uint64_t v71 = *MEMORY[0x263F1A6E0];
          uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t))(v189 + 104);
          uint64_t v143 = v62;
          v72(v197, v71, v190);
          uint64_t v73 = v154;
          outlined init with copy of CycleTrackingLogModel(v56, v154, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v153 + 56))(v73, 0, 1, v53);
          uint64_t v74 = v155;
          uint64_t v75 = (uint64_t *)(v187 + *(int *)(v155 + 20));
          uint64_t v76 = v187;
          *uint64_t v75 = swift_getKeyPath();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
          swift_storeEnumTagMultiPayload();
          uint64_t v77 = *(int *)(v74 + 24);
          uint64_t v153 = v58;
          *(void *)(v76 + v77) = swift_getKeyPath();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
          swift_storeEnumTagMultiPayload();
          outlined init with take of SnippetHeaderModel?(v73, v76);
          uint64_t v146 = type metadata accessor for SnippetHeaderView;
          outlined init with take of SnippetHeaderModel(v76, v198, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v78._uint64_t countAndFlagsBits = 0;
          v78._object = (void *)0xE000000000000000;
          uint64_t v154 = v57;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v78);
          v79._uint64_t countAndFlagsBits = v147;
          v79._object = v150;
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v79);
          swift_bridgeObjectRelease();
          v80._uint64_t countAndFlagsBits = 0;
          v80._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v80);
          LocalizedStringKey.init(stringInterpolation:)();
          uint64_t v147 = Text.init(_:tableName:bundle:comment:)();
          uint64_t v196 = v81;
          LOBYTE(v73) = v82 & 1;
          uint64_t v150 = v54;
          uint64_t v83 = *MEMORY[0x263F1A618];
          uint64_t v84 = type metadata accessor for Font.Design();
          uint64_t v155 = v56;
          uint64_t v85 = v84;
          uint64_t v86 = *(void *)(v84 - 8);
          uint64_t v87 = v156;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 104))(v156, v83, v84);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v86 + 56))(v87, 0, 1, v85);
          static Font.system(_:design:weight:)();
          outlined destroy of Font.Design?(v87, &demangling cache variable for type metadata for Font.Design?);
          uint64_t v88 = v196;
          uint64_t v89 = Text.font(_:)();
          uint64_t v91 = v90;
          LOBYTE(v76) = v92;
          swift_release();
          LOBYTE(v83) = v76 & 1;
          outlined consume of Text.Storage(v147, v88, v73);
          swift_bridgeObjectRelease();
          uint64_t v93 = Text.bold()();
          uint64_t v95 = v94;
          uint64_t v196 = v96;
          LODWORD(v73) = v97 & 1;
          outlined consume of Text.Storage(v89, v91, v83);
          swift_bridgeObjectRelease();
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v98._uint64_t countAndFlagsBits = 0;
          v98._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v98);
          v99._uint64_t countAndFlagsBits = v148;
          v99._object = v151;
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v99);
          swift_bridgeObjectRelease();
          v100._uint64_t countAndFlagsBits = 0;
          v100._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v100);
          LocalizedStringKey.init(stringInterpolation:)();
          uint64_t v101 = (void *)Text.init(_:tableName:bundle:comment:)();
          uint64_t v156 = v102;
          uint64_t v157 = v103;
          LODWORD(v89) = v104 & 1;
          uint64_t v220 = MEMORY[0x263F8D310];
          uint64_t v221 = MEMORY[0x263F779A0];
          uint64_t v218 = v149;
          uint64_t v219 = v143;
          (*(void (**)(char *, void, uint64_t))(v159 + 104))(v158, *MEMORY[0x263F77778], v160);
          StatusIndicatorView.init(message:type:showIndicator:)();
          uint64_t v105 = MEMORY[0x263F1A838];
          uint64_t v106 = MEMORY[0x263F77350];
          uint64_t v220 = MEMORY[0x263F1A838];
          uint64_t v221 = MEMORY[0x263F77350];
          uint64_t v107 = swift_allocObject();
          uint64_t v217 = 0;
          uint64_t v218 = v107;
          uint64_t v147 = v93;
          *(void *)(v107 + 16) = v93;
          *(void *)(v107 + 24) = v95;
          uint64_t v145 = v95;
          int v144 = v73;
          *(unsigned char *)(v107 + 32) = v73;
          *(void *)(v107 + 40) = v196;
          long long v215 = 0u;
          long long v216 = 0u;
          uint64_t v214 = 0;
          long long v212 = 0u;
          long long v213 = 0u;
          uint64_t v210 = v105;
          uint64_t v211 = v106;
          uint64_t v108 = swift_allocObject();
          uint64_t v209 = v108;
          uint64_t v151 = v101;
          uint64_t v109 = v156;
          uint64_t v110 = v157;
          *(void *)(v108 + 16) = v101;
          *(void *)(v108 + 24) = v109;
          LODWORD(v148) = v89;
          *(unsigned char *)(v108 + 32) = v89;
          *(void *)(v108 + 40) = v110;
          uint64_t v208 = 0;
          long long v206 = 0u;
          long long v207 = 0u;
          uint64_t v205 = 0;
          long long v203 = 0u;
          long long v204 = 0u;
          outlined copy of Text.Storage(v93, v95, v73);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage((uint64_t)v101, v109, v89);
          swift_bridgeObjectRetain();
          uint64_t v111 = v166;
          FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
          uint64_t v113 = v173;
          uint64_t v112 = v174;
          uint64_t v114 = v169;
          (*(void (**)(char *, void, uint64_t))(v173 + 104))(v169, *MEMORY[0x263F76988], v174);
          uint64_t v115 = lazy protocol witness table accessor for type FactItemHeroNumberView and conformance FactItemHeroNumberView(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
          unint64_t v116 = v167;
          uint64_t v117 = v170;
          View.separators(_:isOverride:)();
          (*(void (**)(char *, uint64_t))(v113 + 8))(v114, v112);
          (*(void (**)(char *, uint64_t))(v168 + 8))(v111, v117);
          uint64_t v218 = v117;
          uint64_t v219 = v115;
          swift_getOpaqueTypeConformance2();
          uint64_t v118 = v193;
          uint64_t v119 = v172;
          View.componentSpacing(top:bottom:)();
          (*(void (**)(char *, uint64_t))(v171 + 8))(v116, v119);
          uint64_t v120 = v187;
          outlined init with copy of CycleTrackingLogModel(v198, v187, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
          uint64_t v121 = v194;
          uint64_t v122 = v195;
          uint64_t v123 = v176;
          (*(void (**)(char *, char *, uint64_t))(v194 + 16))(v176, v118, v195);
          uint64_t v124 = v191;
          (*(void (**)(char *, char *, uint64_t))(v191 + 16))(v188, v199, v192);
          unint64_t v125 = (*(unsigned __int8 *)(v161 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80);
          unint64_t v126 = (v162 + *(unsigned __int8 *)(v121 + 80) + v125) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80);
          unint64_t v127 = (v175 + *(unsigned __int8 *)(v124 + 80) + v126) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80);
          uint64_t v128 = swift_allocObject();
          outlined init with take of SnippetHeaderModel(v120, v128 + v125, (uint64_t (*)(void))v146);
          (*(void (**)(unint64_t, char *, uint64_t))(v121 + 32))(v128 + v126, v123, v122);
          uint64_t v129 = v192;
          (*(void (**)(unint64_t, char *, uint64_t))(v124 + 32))(v128 + v127, v188, v192);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>);
          lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>);
          uint64_t v130 = v180;
          ComponentStack.init(content:)();
          uint64_t v131 = v179;
          outlined init with copy of CycleTrackingLogModel((uint64_t)v150, v179, (uint64_t (*)(void))type metadata accessor for CycleTrackingLogSnippet);
          uint64_t v132 = v201;
          uint64_t v133 = v164;
          uint64_t v134 = v154;
          (*(void (**)(char *, char *, uint64_t))(v201 + 16))(v164, v200, v154);
          unint64_t v135 = (*(unsigned __int8 *)(v177 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v177 + 80);
          unint64_t v136 = (v178 + *(unsigned __int8 *)(v132 + 80) + v135) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
          uint64_t v137 = swift_allocObject();
          outlined init with take of SnippetHeaderModel(v131, v137 + v135, (uint64_t (*)(void))type metadata accessor for CycleTrackingLogSnippet);
          v152((char *)(v137 + v136), v133, v134);
          uint64_t v138 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView)>>);
          uint64_t v140 = v183;
          uint64_t v139 = v184;
          View.componentTapped(isNavigation:perform:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v182 + 8))(v130, v139);
          uint64_t v142 = v185;
          uint64_t v141 = v186;
          (*(void (**)(char *, char *, uint64_t))(v185 + 16))(v181, v140, v186);
          uint64_t v218 = v139;
          uint64_t v219 = v138;
          swift_getOpaqueTypeConformance2();
          uint64_t v70 = AnyView.init<A>(_:)();
          outlined consume of Text.Storage((uint64_t)v151, v156, v148);
          swift_bridgeObjectRelease();
          outlined consume of Text.Storage(v147, v145, v144);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v142 + 8))(v140, v141);
          (*(void (**)(char *, uint64_t))(v194 + 8))(v193, v195);
          (*(void (**)(char *, uint64_t))(v191 + 8))(v199, v129);
          outlined destroy of SnippetHeaderModel(v198, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
          (*(void (**)(char *, uint64_t))(v189 + 8))(v197, v190);
          (*(void (**)(char *, uint64_t))(v132 + 8))(v200, v134);
          uint64_t result = outlined destroy of SnippetHeaderModel(v155, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
          char v68 = v202;
          goto LABEL_12;
        }
        (*(void (**)(char *, uint64_t))(v55 + 8))(v59, v57);
        outlined destroy of SnippetHeaderModel(v56, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
        outlined destroy of Font.Design?(v66, &demangling cache variable for type metadata for URL?);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v55 + 8))(v59, v57);
        outlined destroy of SnippetHeaderModel(v56, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
      }
    }
  }
  char v68 = v202;
  uint64_t result = AnyView.init<A>(_:)();
  uint64_t v70 = result;
LABEL_12:
  uint64_t *v68 = v70;
  return result;
}

uint64_t closure #1 in CycleTrackingLogSnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v46 = type metadata accessor for StatusIndicatorView();
  uint64_t v43 = *(void *)(v46 - 8);
  uint64_t v6 = v43;
  uint64_t v7 = MEMORY[0x270FA5388](v46);
  uint64_t v47 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v45 = *(void *)(v11 - 8);
  uint64_t v12 = v45;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v50 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v17 = type metadata accessor for SnippetHeaderView();
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v40 = (uint64_t)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v37 - v20;
  uint64_t v44 = (uint64_t)&v37 - v20;
  outlined init with copy of CycleTrackingLogModel(a1, (uint64_t)&v37 - v20, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v42 = v16;
  uint64_t v39 = v11;
  v22(v16, a2, v11);
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v41 = v10;
  uint64_t v23 = v46;
  v38(v10, v48, v46);
  uint64_t v24 = v40;
  outlined init with copy of CycleTrackingLogModel((uint64_t)v21, v40, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v25 = v50;
  v22(v50, (uint64_t)v16, v11);
  uint64_t v26 = v47;
  uint64_t v27 = v10;
  uint64_t v28 = v23;
  uint64_t v29 = (void (*)(uint64_t, char *, uint64_t))v38;
  v38(v47, (uint64_t)v27, v23);
  uint64_t v30 = v49;
  outlined init with copy of CycleTrackingLogModel(v24, v49, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, StatusIndicatorView));
  uint64_t v32 = v25;
  uint64_t v33 = v39;
  v22((char *)(v30 + *(int *)(v31 + 48)), (uint64_t)v32, v39);
  v29(v30 + *(int *)(v31 + 64), v26, v28);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v43 + 8);
  v34(v41, v28);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v45 + 8);
  v35(v42, v33);
  outlined destroy of SnippetHeaderModel(v44, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  v34(v26, v28);
  v35(v50, v33);
  return outlined destroy of SnippetHeaderModel(v24, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
}

void closure #2 in CycleTrackingLogSnippet.body.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + *(int *)(type metadata accessor for CycleTrackingLogSnippet() + 20));
  if (v1)
  {
    id v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();
  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type FactItemHeroNumberView and conformance FactItemHeroNumberView(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t CycleTrackingLogSnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of SnippetHeaderModel(a1, a2, (uint64_t (*)(void))type metadata accessor for CycleTrackingLogModel);
  uint64_t v3 = type metadata accessor for CycleTrackingLogSnippet();
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(v3 + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type FactItemHeroNumberView and conformance FactItemHeroNumberView(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  *uint64_t v4 = EnvironmentObject.init()();
  v4[1] = v5;
  uint64_t v6 = (uint64_t *)(a2 + *(int *)(v3 + 24));
  *uint64_t v6 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_261835CA8()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_261835CEC()
{
  uint64_t v1 = type metadata accessor for SnippetHeaderView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v21 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v3 = *(void *)(v22 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = *(void *)(v3 + 64);
  uint64_t v5 = type metadata accessor for StatusIndicatorView();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = *(void *)(v6 + 64);
  uint64_t v8 = v0 + ((v2 + 16) & ~v2);
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v0 + ((v2 + 16) & ~v2), v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = v8 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  uint64_t v13 = v8 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  uint64_t v15 = v2 | v4 | v7 | 7;
  uint64_t v16 = (((v2 + 16) & ~v2) + v21 + v4) & ~v4;
  uint64_t v17 = (v16 + v20 + v7) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v16, v22);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v17, v5);

  return MEMORY[0x270FA0238](v0, v17 + v19, v15);
}

uint64_t partial apply for closure #1 in CycleTrackingLogSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SnippetHeaderView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0)
                 - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(type metadata accessor for StatusIndicatorView() - 8);
  uint64_t v10 = v1 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return closure #1 in CycleTrackingLogSnippet.body.getter(v1 + v4, v1 + v7, v10, a1);
}

uint64_t outlined init with copy of CycleTrackingLogModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2618361E0()
{
  uint64_t v1 = type metadata accessor for CycleTrackingLogSnippet();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v20 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v3 = type metadata accessor for AppPunchout();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v19 = *(void *)(v4 + 64);
  uint64_t v6 = v0 + ((v2 + 16) & ~v2);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + 16) & ~v2), v3);
  }
  uint64_t v7 = type metadata accessor for CycleTrackingLogModel();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v6 + *(int *)(v7 + 32);
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v8, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = v6 + *(int *)(v7 + 36);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }

  uint64_t v14 = v6 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  }
  else
  {
    swift_release();
  }
  uint64_t v16 = (((v2 + 16) & ~v2) + v20 + v5) & ~v5;
  uint64_t v17 = v16 + v19;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v16, v3);

  return MEMORY[0x270FA0238](v0, v17, v2 | v5 | 7);
}

void partial apply for closure #2 in CycleTrackingLogSnippet.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for CycleTrackingLogSnippet() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for AppPunchout();

  closure #2 in CycleTrackingLogSnippet.body.getter(v0 + v2);
}

uint64_t outlined init with take of SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type FactItemHeroNumberView and conformance FactItemHeroNumberView(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in CycleTrackingLogSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for CycleTrackingLogSnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for AppPunchout();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    uint64_t v10 = (int *)type metadata accessor for CycleTrackingLogModel();
    uint64_t v11 = v10[5];
    uint64_t v12 = (uint64_t *)((char *)a1 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = v10[6];
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = v10[7];
    uint64_t v20 = (uint64_t *)((char *)a1 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = v10[8];
    __dst = (char *)a1 + v23;
    uint64_t v24 = (char *)a2 + v23;
    uint64_t v25 = type metadata accessor for SnippetHeaderModel();
    uint64_t v55 = *(void *)(v25 - 8);
    uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v26(v24, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(__dst, v24, v28);
      uint64_t v29 = *(int *)(v25 + 20);
      uint64_t v30 = &__dst[v29];
      uint64_t v31 = &v24[v29];
      uint64_t v32 = *((void *)v31 + 1);
      *(void *)uint64_t v30 = *(void *)v31;
      *((void *)v30 + 1) = v32;
      uint64_t v33 = *(int *)(v25 + 24);
      uint64_t v34 = &__dst[v33];
      uint64_t v35 = &v24[v33];
      uint64_t v36 = *((void *)v35 + 1);
      *(void *)uint64_t v34 = *(void *)v35;
      *((void *)v34 + 1) = v36;
      uint64_t v37 = *(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(__dst, 0, 1, v25);
    }
    uint64_t v38 = v10[9];
    uint64_t v39 = (char *)a1 + v38;
    uint64_t v40 = (char *)a2 + v38;
    uint64_t v41 = type metadata accessor for URL();
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    uint64_t v44 = *(int *)(a3 + 20);
    uint64_t v45 = *(int *)(a3 + 24);
    uint64_t v46 = (uint64_t *)((char *)a1 + v44);
    uint64_t v47 = (char *)a2 + v44;
    uint64_t v49 = *(void **)v47;
    uint64_t v48 = *((void *)v47 + 1);
    void *v46 = v49;
    v46[1] = v48;
    uint64_t v50 = (uint64_t *)((char *)a1 + v45);
    uint64_t v51 = (uint64_t *)((char *)a2 + v45);
    id v52 = v49;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v53 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v53 - 8) + 16))(v50, v51, v53);
    }
    else
    {
      void *v50 = *v51;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CycleTrackingLogSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = type metadata accessor for CycleTrackingLogModel();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(v6 + 32);
  uint64_t v8 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    uint64_t v9 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = a1 + *(int *)(v6 + 36);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }

  uint64_t v13 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for ColorScheme();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
    return v15(v13, v14);
  }
  else
  {
    return swift_release();
  }
}

char *initializeWithCopy for CycleTrackingLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  uint64_t v8 = (int *)type metadata accessor for CycleTrackingLogModel();
  uint64_t v9 = v8[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = v12;
  uint64_t v13 = v8[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  uint64_t v17 = v8[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = v20;
  uint64_t v21 = v8[8];
  uint64_t v56 = a1;
  __dst = &a1[v21];
  uint64_t v22 = &a2[v21];
  uint64_t v23 = type metadata accessor for SnippetHeaderModel();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v25(v22, 1, v23))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v22, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(__dst, v22, v27);
    uint64_t v28 = *(int *)(v23 + 20);
    uint64_t v29 = &__dst[v28];
    uint64_t v30 = &v22[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    uint64_t v32 = *(int *)(v23 + 24);
    uint64_t v33 = &__dst[v32];
    uint64_t v34 = &v22[v32];
    uint64_t v35 = *((void *)v34 + 1);
    *(void *)uint64_t v33 = *(void *)v34;
    *((void *)v33 + 1) = v35;
    uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(__dst, 0, 1, v23);
  }
  uint64_t v37 = v8[9];
  uint64_t v38 = &v56[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v40 = type metadata accessor for URL();
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  uint64_t v43 = *(int *)(a3 + 20);
  uint64_t v44 = *(int *)(a3 + 24);
  uint64_t v45 = &v56[v43];
  uint64_t v46 = &a2[v43];
  uint64_t v48 = *(void **)v46;
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = v48;
  *((void *)v45 + 1) = v47;
  uint64_t v49 = &v56[v44];
  uint64_t v50 = &a2[v44];
  id v51 = v48;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v52 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v49, v50, v52);
  }
  else
  {
    *(void *)uint64_t v49 = *(void *)v50;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return v56;
}

char *assignWithCopy for CycleTrackingLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
LABEL_7:
  uint64_t v11 = (int *)type metadata accessor for CycleTrackingLogModel();
  uint64_t v12 = v11[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = v11[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = v11[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v11[8];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for SnippetHeaderModel();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      uint64_t v29 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v22, v23, v29);
      uint64_t v30 = *(int *)(v24 + 20);
      uint64_t v31 = &v22[v30];
      uint64_t v32 = &v23[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      *((void *)v31 + 1) = *((void *)v32 + 1);
      uint64_t v33 = *(int *)(v24 + 24);
      uint64_t v34 = &v22[v33];
      uint64_t v35 = &v23[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      *((void *)v34 + 1) = *((void *)v35 + 1);
      uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    outlined destroy of SnippetHeaderModel((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v22, v23, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v58 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 24))(v22, v23, v58);
  uint64_t v59 = *(int *)(v24 + 20);
  uint64_t v60 = &v22[v59];
  uint64_t v61 = &v23[v59];
  *(void *)uint64_t v60 = *(void *)v61;
  *((void *)v60 + 1) = *((void *)v61 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v62 = *(int *)(v24 + 24);
  uint64_t v63 = &v22[v62];
  uint64_t v64 = &v23[v62];
  *(void *)uint64_t v63 = *(void *)v64;
  *((void *)v63 + 1) = *((void *)v64 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v38 = v11[9];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  uint64_t v41 = type metadata accessor for URL();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  int v44 = v43(v39, 1, v41);
  int v45 = v43(v40, 1, v41);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
LABEL_18:
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v39, v40, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 24))(v39, v40, v41);
LABEL_19:
  uint64_t v47 = *(int *)(a3 + 20);
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  uint64_t v50 = *(void **)&a1[v47];
  id v51 = *(void **)&a2[v47];
  *(void *)uint64_t v48 = v51;
  id v52 = v51;

  *((void *)v48 + 1) = *((void *)v49 + 1);
  if (a1 != a2)
  {
    uint64_t v53 = *(int *)(a3 + 24);
    uint64_t v54 = &a1[v53];
    uint64_t v55 = &a2[v53];
    outlined destroy of Font.Design?((uint64_t)&a1[v53], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v56 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v54, v55, v56);
    }
    else
    {
      *(void *)uint64_t v54 = *(void *)v55;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for CycleTrackingLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  int v9 = (int *)type metadata accessor for CycleTrackingLogModel();
  *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
  *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
  *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
  uint64_t v10 = v9[8];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for SnippetHeaderModel();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    uint64_t v16 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v11, v12, v16);
    *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
    *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = v9[9];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v23 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v27 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v24, v25, v27);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for CycleTrackingLogSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
LABEL_7:
  uint64_t v11 = (int *)type metadata accessor for CycleTrackingLogModel();
  uint64_t v12 = v11[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = v16;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = v11[6];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = v21;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = v11[7];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = v26;
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = v11[8];
  int v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = type metadata accessor for SnippetHeaderModel();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      uint64_t v35 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v28, v29, v35);
      *(_OWORD *)&v28[*(int *)(v30 + 20)] = *(_OWORD *)&v29[*(int *)(v30 + 20)];
      *(_OWORD *)&v28[*(int *)(v30 + 24)] = *(_OWORD *)&v29[*(int *)(v30 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    outlined destroy of SnippetHeaderModel((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v28, v29, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v56 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 40))(v28, v29, v56);
  uint64_t v57 = *(int *)(v30 + 20);
  uint64_t v58 = &v28[v57];
  uint64_t v59 = &v29[v57];
  uint64_t v61 = *(void *)v59;
  uint64_t v60 = *((void *)v59 + 1);
  *(void *)uint64_t v58 = v61;
  *((void *)v58 + 1) = v60;
  swift_bridgeObjectRelease();
  uint64_t v62 = *(int *)(v30 + 24);
  uint64_t v63 = &v28[v62];
  uint64_t v64 = &v29[v62];
  uint64_t v66 = *(void *)v64;
  uint64_t v65 = *((void *)v64 + 1);
  *(void *)uint64_t v63 = v66;
  *((void *)v63 + 1) = v65;
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v37 = v11[9];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v40 = type metadata accessor for URL();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  int v43 = v42(v38, 1, v40);
  int v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v38, v39, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v38, v40);
LABEL_18:
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v38, v39, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v38, v39, v40);
LABEL_19:
  uint64_t v46 = *(int *)(a3 + 20);
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  uint64_t v49 = *(void **)&a1[v46];
  *(void *)uint64_t v47 = *(void *)v48;

  *((void *)v47 + 1) = *((void *)v48 + 1);
  if (a1 != a2)
  {
    uint64_t v50 = *(int *)(a3 + 24);
    id v51 = &a1[v50];
    id v52 = &a2[v50];
    outlined destroy of Font.Design?((uint64_t)&a1[v50], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v54 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32))(v51, v52, v54);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CycleTrackingLogSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261838308);
}

uint64_t sub_261838308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CycleTrackingLogModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 24);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for CycleTrackingLogSnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_261838458);
}

uint64_t sub_261838458(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CycleTrackingLogModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for CycleTrackingLogSnippet()
{
  type metadata accessor for CycleTrackingLogModel();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<ColorScheme>.Content();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t BloodPressureQuerySnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of BloodPressureQueryModel(v1, a1, (uint64_t (*)(void))type metadata accessor for BloodPressureQueryModel);
}

uint64_t BloodPressureQuerySnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for BloodPressureQuerySnippet() + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  *uint64_t v4 = EnvironmentObject.init()();
  v4[1] = v5;
  return outlined init with take of BloodPressureQueryModel(a1, a2, (uint64_t (*)(void))type metadata accessor for BloodPressureQueryModel);
}

uint64_t type metadata accessor for BloodPressureQuerySnippet()
{
  uint64_t result = type metadata singleton initialization cache for BloodPressureQuerySnippet;
  if (!type metadata singleton initialization cache for BloodPressureQuerySnippet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t BloodPressureQuerySnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v225 = a1;
  uint64_t Snippet = type metadata accessor for BloodPressureQuerySnippet();
  uint64_t v208 = *(void *)(Snippet - 8);
  MEMORY[0x270FA5388](Snippet - 8);
  uint64_t v209 = v4;
  uint64_t v210 = &v172[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
  uint64_t v213 = *(void *)(v215 - 8);
  MEMORY[0x270FA5388](v215);
  uint64_t v211 = &v172[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v216 = *(void *)(v6 - 8);
  uint64_t v217 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  long long v212 = &v172[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v7);
  uint64_t v214 = &v172[-v9];
  uint64_t v10 = type metadata accessor for FactItemHeroNumberView();
  uint64_t v199 = *(void *)(v10 - 8);
  uint64_t v200 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v198 = &v172[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v202 = *(void *)(v12 - 8);
  uint64_t v203 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v201 = &v172[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v218 = &v172[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v219 = type metadata accessor for Font.TextStyle();
  uint64_t v221 = *(void *)(v219 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v219);
  uint64_t v197 = &v172[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v17);
  uint64_t v220 = &v172[-v19];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = &v172[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = type metadata accessor for SnippetHeaderView();
  uint64_t v204 = *(void *)(v23 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v222 = &v172[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v205 = v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v223 = &v172[-v26];
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v29 = &v172[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v224 = type metadata accessor for AppPunchout();
  uint64_t v30 = *(void *)(v224 - 8);
  uint64_t v31 = MEMORY[0x270FA5388](v224);
  uint64_t v206 = v32;
  long long v207 = &v172[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v31);
  int v34 = &v172[-v33];
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  uint64_t v36 = (uint64_t *)(v1 + *(int *)(Model + 88));
  uint64_t v37 = (void *)v36[1];
  if (!v37) {
    goto LABEL_5;
  }
  uint64_t v38 = (int *)Model;
  uint64_t v39 = v1 + *(int *)(Model + 84);
  if (!*(void *)(v39 + 8)) {
    goto LABEL_5;
  }
  v195._object = *(void **)(v39 + 8);
  uint64_t v196 = v34;
  uint64_t v40 = *v36;
  uint64_t v41 = *(void *)v39;
  uint64_t v194 = v40;
  v195._uint64_t countAndFlagsBits = v41;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, (uint64_t)v29, &demangling cache variable for type metadata for AppPunchout?);
  uint64_t v42 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v30 + 48);
  uint64_t v43 = v30;
  uint64_t v44 = v224;
  if (v42(v29, 1, v224) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v29, &demangling cache variable for type metadata for AppPunchout?);
LABEL_5:
    uint64_t result = AnyView.init<A>(_:)();
    uint64_t v46 = result;
    goto LABEL_6;
  }
  uint64_t v193 = v43;
  uint64_t v47 = v43 + 32;
  uint64_t v48 = *(void (**)(unint64_t, unsigned char *, uint64_t))(v43 + 32);
  uint64_t v49 = v196;
  uint64_t v191 = v48;
  uint64_t v192 = v47;
  v48((unint64_t)v196, v29, v44);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + v38[23], (uint64_t)v22, &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v50 = v222;
  id v51 = (uint64_t *)&v222[*(int *)(v23 + 20)];
  *id v51 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  id v52 = (uint64_t *)&v50[*(int *)(v23 + 24)];
  *id v52 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with take of SnippetHeaderModel?((uint64_t)v22, (uint64_t)v50);
  outlined init with take of BloodPressureQueryModel((uint64_t)v50, (uint64_t)v223, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v53 = (uint64_t *)(v1 + v38[13]);
  uint64_t v54 = v53[1];
  if (v54
    && (uint64_t v55 = (uint64_t *)(v1 + v38[14]), (v56 = (void *)v55[1]) != 0)
    && (uint64_t v57 = (uint64_t *)(v1 + v38[15]), (v58 = v57[1]) != 0)
    && (v59 = (uint64_t *)(v1 + v38[16]), (uint64_t v60 = (unsigned char *)v59[1]) != 0))
  {
    uint64_t v61 = *v53;
    uint64_t v62 = *v55;
    uint64_t v219 = *v57;
    uint64_t v220 = v60;
    uint64_t v221 = *v59;
    *(void *)&long long v236 = v61;
    *((void *)&v236 + 1) = v54;
    swift_bridgeObjectRetain();
    object = v195._object;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v64._uint64_t countAndFlagsBits = 9666786;
    v64._object = (void *)0xA300000000000000;
    String.append(_:)(v64);
    v65._uint64_t countAndFlagsBits = v62;
    v65._object = v56;
    String.append(_:)(v65);
    long long v66 = v236;
    *(void *)&long long v236 = v219;
    *((void *)&v236 + 1) = v58;
    swift_bridgeObjectRetain();
    v67._uint64_t countAndFlagsBits = 9666786;
    v67._object = (void *)0xA300000000000000;
    String.append(_:)(v67);
    v68._object = v220;
    v68._uint64_t countAndFlagsBits = v221;
    String.append(_:)(v68);
    long long v69 = v236;
    uint64_t v70 = v38[19];
    uint64_t v71 = (uint64_t *)(v1 + v38[18]);
    uint64_t v72 = *v71;
    uint64_t v73 = v71[1];
    uint64_t v188 = v2;
    uint64_t v74 = v2 + v70;
    uint64_t v75 = *(void *)(v2 + v70);
    uint64_t v76 = *(void *)(v74 + 8);
    *(void *)&long long v236 = v72;
    *((void *)&v236 + 1) = v73;
    long long v237 = v66;
    long long v238 = 0u;
    long long v239 = 0u;
    *(void *)&long long v240 = v75;
    *((void *)&v240 + 1) = v76;
    long long v241 = v69;
    long long v242 = 0u;
    long long v243 = 0u;
    *(void *)&long long v244 = v194;
    *((void *)&v244 + 1) = v37;
    *(void *)&long long v245 = v195._countAndFlagsBits;
    *((void *)&v245 + 1) = object;
    long long v234 = v244;
    long long v235 = v245;
    long long v230 = v240;
    long long v231 = v69;
    long long v226 = v236;
    long long v227 = v66;
    long long v232 = 0u;
    long long v233 = 0u;
    long long v228 = 0u;
    long long v229 = 0u;
    lazy protocol witness table accessor for type MultipleDataPointWithSubTypesView and conformance MultipleDataPointWithSubTypesView();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v77 = View.eraseToAnyView()();
    outlined release of MultipleDataPointWithSubTypesView(&v236);
  }
  else
  {
    Swift::String v78 = (uint64_t *)(v1 + v38[11]);
    Swift::String v79 = (void *)v78[1];
    if (!v79 || (Swift::String v80 = (uint64_t *)(v1 + v38[12]), (v81 = (void *)v80[1]) == 0))
    {
      uint64_t v46 = AnyView.init<A>(_:)();
      outlined destroy of SnippetHeaderView((uint64_t)v223, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v193 + 8))(v49, v224);
      goto LABEL_6;
    }
    uint64_t v188 = v1;
    uint64_t v184 = *v78;
    uint64_t v186 = *v80;
    uint64_t v185 = v81;
    uint64_t v183 = v79;
    char v82 = *(void (**)(unsigned char *, void, uint64_t))(v221 + 104);
    uint64_t v83 = v219;
    v82(v220, *MEMORY[0x263F1A6E0], v219);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v84._uint64_t countAndFlagsBits = 0;
    v84._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v84);
    v85._uint64_t countAndFlagsBits = v194;
    v85._object = v37;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v85);
    swift_bridgeObjectRelease();
    v86._uint64_t countAndFlagsBits = 0;
    v86._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v86);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v87 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v189 = v88;
    uint64_t v190 = v87;
    uint64_t v194 = v89;
    char v91 = v90 & 1;
    char v92 = v197;
    v82(v197, *MEMORY[0x263F1A6D0], v83);
    unsigned int v181 = *MEMORY[0x263F1A618];
    uint64_t v93 = v181;
    uint64_t v94 = type metadata accessor for Font.Design();
    uint64_t v177 = v94;
    uint64_t v95 = *(void *)(v94 - 8);
    uint64_t v180 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v95 + 104);
    uint64_t v182 = v95 + 104;
    uint64_t v96 = v218;
    v180(v218, v93, v94);
    char v97 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v95 + 56);
    uint64_t v178 = v95 + 56;
    uint64_t v179 = v97;
    v97(v96, 0, 1, v94);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?((uint64_t)v96, &demangling cache variable for type metadata for Font.Design?);
    Swift::String v98 = *(void (**)(unsigned char *, uint64_t))(v221 + 8);
    v221 += 8;
    uint64_t v187 = v98;
    v98(v92, v83);
    uint64_t v100 = v189;
    uint64_t v99 = v190;
    uint64_t v101 = Text.font(_:)();
    uint64_t v103 = v102;
    LOBYTE(v95) = v104;
    uint64_t v197 = v105;
    swift_release();
    outlined consume of Text.Storage(v99, v100, v91);
    swift_bridgeObjectRelease();
    LODWORD(v236) = static HierarchicalShapeStyle.secondary.getter();
    uint64_t v106 = Text.foregroundStyle<A>(_:)();
    uint64_t v108 = v107;
    LOBYTE(v99) = v109 & 1;
    outlined consume of Text.Storage(v101, v103, v95 & 1);
    swift_bridgeObjectRelease();
    uint64_t v194 = Text.bold()();
    uint64_t v190 = v110;
    uint64_t v197 = v111;
    LODWORD(v189) = v112 & 1;
    outlined consume of Text.Storage(v106, v108, v99);
    swift_bridgeObjectRelease();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v113._uint64_t countAndFlagsBits = 0;
    v113._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v113);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v195);
    swift_bridgeObjectRelease();
    v114._uint64_t countAndFlagsBits = 0;
    v114._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v114);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v115 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v174 = v116;
    uint64_t v175 = v115;
    uint64_t v176 = v117;
    int v173 = v118 & 1;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v119._uint64_t countAndFlagsBits = 0;
    v119._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v119);
    v120._object = v183;
    v120._uint64_t countAndFlagsBits = v184;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v120);
    v121._uint64_t countAndFlagsBits = 47;
    v121._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v121);
    v122._object = v185;
    v122._uint64_t countAndFlagsBits = v186;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v122);
    v123._uint64_t countAndFlagsBits = 0;
    v123._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v123);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v124 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v126 = v125;
    LOBYTE(v101) = v127 & 1;
    uint64_t v128 = v218;
    uint64_t v129 = v177;
    v180(v218, v181, v177);
    v179(v128, 0, 1, v129);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?((uint64_t)v128, &demangling cache variable for type metadata for Font.Design?);
    uint64_t v130 = Text.font(_:)();
    uint64_t v132 = v131;
    LOBYTE(v95) = v133;
    swift_release();
    LOBYTE(v92) = v95 & 1;
    outlined consume of Text.Storage(v124, v126, v101);
    swift_bridgeObjectRelease();
    uint64_t v134 = (unsigned char *)Text.bold()();
    uint64_t v218 = v134;
    unint64_t v136 = v135;
    v195._uint64_t countAndFlagsBits = v137;
    v195._object = v135;
    uint64_t v138 = v137;
    LOBYTE(v95) = v139 & 1;
    outlined consume of Text.Storage(v130, v132, (char)v92);
    swift_bridgeObjectRelease();
    uint64_t v140 = MEMORY[0x263F1A838];
    uint64_t v141 = MEMORY[0x263F77350];
    *((void *)&v237 + 1) = MEMORY[0x263F1A838];
    *(void *)&long long v238 = MEMORY[0x263F77350];
    uint64_t v142 = swift_allocObject();
    *(void *)&long long v236 = v142;
    *(void *)(v142 + 16) = v134;
    *(void *)(v142 + 24) = v136;
    *(unsigned char *)(v142 + 32) = v95;
    *(void *)(v142 + 40) = v138;
    *((void *)&v227 + 1) = v140;
    *(void *)&long long v228 = v141;
    uint64_t v143 = swift_allocObject();
    *(void *)&long long v226 = v143;
    uint64_t v144 = v194;
    uint64_t v145 = v190;
    *(void *)(v143 + 16) = v194;
    *(void *)(v143 + 24) = v145;
    LOBYTE(v138) = v189;
    *(unsigned char *)(v143 + 32) = v189;
    *(void *)(v143 + 40) = v197;
    uint64_t v257 = 0;
    long long v255 = 0u;
    long long v256 = 0u;
    uint64_t v253 = v140;
    uint64_t v254 = v141;
    uint64_t v146 = swift_allocObject();
    uint64_t v251 = 0;
    uint64_t v252 = v146;
    uint64_t v147 = v174;
    uint64_t v148 = v175;
    *(void *)(v146 + 16) = v175;
    *(void *)(v146 + 24) = v147;
    LOBYTE(v136) = v173;
    *(unsigned char *)(v146 + 32) = v173;
    *(void *)(v146 + 40) = v176;
    long long v249 = 0u;
    long long v250 = 0u;
    uint64_t v248 = 0;
    long long v246 = 0u;
    long long v247 = 0u;
    outlined copy of Text.Storage((uint64_t)v218, (uint64_t)v195._object, v95);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v144, v145, v138);
    swift_bridgeObjectRetain();
    uint64_t v149 = v147;
    outlined copy of Text.Storage(v148, v147, (char)v136);
    swift_bridgeObjectRetain();
    uint64_t v150 = v198;
    FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
    uint64_t v151 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
    uint64_t v152 = v200;
    uint64_t v153 = v201;
    View.componentSpacing(top:bottom:)();
    (*(void (**)(unsigned char *, uint64_t))(v199 + 8))(v150, v152);
    *(void *)&long long v236 = v152;
    *((void *)&v236 + 1) = v151;
    swift_getOpaqueTypeConformance2();
    uint64_t v154 = v203;
    uint64_t v77 = View.eraseToAnyView()();
    outlined consume of Text.Storage(v148, v149, (char)v136);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v194, v190, v189);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage((uint64_t)v218, (uint64_t)v195._object, v95);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v202 + 8))(v153, v154);
    v187(v220, v219);
  }
  uint64_t v221 = v77;
  uint64_t v155 = v222;
  outlined init with copy of BloodPressureQueryModel((uint64_t)v223, (uint64_t)v222, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  unint64_t v156 = (*(unsigned __int8 *)(v204 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v204 + 80);
  unint64_t v157 = (v205 + v156 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v158 = swift_allocObject();
  outlined init with take of BloodPressureQueryModel((uint64_t)v155, v158 + v156, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  *(void *)(v158 + v157) = v77;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
  lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, AnyView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
  uint64_t v159 = v211;
  ComponentStack.init(content:)();
  uint64_t v160 = v210;
  outlined init with copy of BloodPressureQueryModel(v188, (uint64_t)v210, (uint64_t (*)(void))type metadata accessor for BloodPressureQuerySnippet);
  uint64_t v161 = v193;
  uint64_t v162 = v207;
  uint64_t v163 = v224;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v193 + 16))(v207, v196, v224);
  unint64_t v164 = (*(unsigned __int8 *)(v208 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80);
  unint64_t v165 = (v209 + *(unsigned __int8 *)(v161 + 80) + v164) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80);
  uint64_t v166 = swift_allocObject();
  outlined init with take of BloodPressureQueryModel((uint64_t)v160, v166 + v164, (uint64_t (*)(void))type metadata accessor for BloodPressureQuerySnippet);
  v191(v166 + v165, v162, v163);
  uint64_t v167 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, AnyView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
  unint64_t v169 = v214;
  uint64_t v168 = v215;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v213 + 8))(v159, v168);
  uint64_t v171 = v216;
  uint64_t v170 = v217;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v216 + 16))(v212, v169, v217);
  *(void *)&long long v236 = v168;
  *((void *)&v236 + 1) = v167;
  swift_getOpaqueTypeConformance2();
  uint64_t v46 = AnyView.init<A>(_:)();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v171 + 8))(v169, v170);
  outlined destroy of SnippetHeaderView((uint64_t)v223, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v161 + 8))(v196, v163);
LABEL_6:
  uint64_t *v225 = v46;
  return result;
}

uint64_t closure #1 in BloodPressureQuerySnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderView();
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v13 - v10;
  outlined init with copy of BloodPressureQueryModel(a1, (uint64_t)&v13 - v10, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  outlined init with copy of BloodPressureQueryModel((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  outlined init with copy of BloodPressureQueryModel((uint64_t)v9, a3, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  *(void *)(a3
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, AnyView))
                     + 48)) = a2;
  swift_retain_n();
  outlined destroy of SnippetHeaderView((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  swift_release();
  return outlined destroy of SnippetHeaderView((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
}

void closure #2 in BloodPressureQuerySnippet.body.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + *(int *)(type metadata accessor for BloodPressureQuerySnippet() + 20));
  if (v1)
  {
    id v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();
  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t sub_261839D2C()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_261839D70()
{
  uint64_t v1 = type metadata accessor for SnippetHeaderView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v0 + v3, 1, v6))
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v3, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = v5 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = v5 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t partial apply for closure #1 in BloodPressureQuerySnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SnippetHeaderView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in BloodPressureQuerySnippet.body.getter(v1 + v4, v5, a1);
}

uint64_t outlined init with copy of BloodPressureQueryModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_26183A0B4()
{
  uint64_t Snippet = type metadata accessor for BloodPressureQuerySnippet();
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(Snippet - 8) + 80);
  uint64_t v17 = *(void *)(*(void *)(Snippet - 8) + 64);
  uint64_t v2 = type metadata accessor for AppPunchout();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v16 = *(void *)(v3 + 64);
  uint64_t v5 = v0 + ((v1 + 16) & ~v1);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + ((v1 + 16) & ~v1), v2);
  }
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v5 + *(int *)(Model + 80);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + *(int *)(Model + 92);
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v10, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = v1 | v4 | 7;
  uint64_t v14 = (((v1 + 16) & ~v1) + v17 + v4) & ~v4;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v14, v2);

  return MEMORY[0x270FA0238](v0, v14 + v16, v13);
}

uint64_t outlined init with take of BloodPressureQueryModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void partial apply for closure #2 in BloodPressureQuerySnippet.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for BloodPressureQuerySnippet() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for AppPunchout();

  closure #2 in BloodPressureQuerySnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in BloodPressureQuerySnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for BloodPressureQuerySnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for AppPunchout();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    uint64_t Model = (int *)type metadata accessor for BloodPressureQueryModel();
    uint64_t v11 = Model[5];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = Model[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = Model[7];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    v18[8] = v19[8];
    *(void *)uint64_t v18 = *(void *)v19;
    uint64_t v20 = Model[8];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    v21[8] = v22[8];
    *(void *)uint64_t v21 = *(void *)v22;
    uint64_t v23 = Model[9];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    v24[8] = v25[8];
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v26 = Model[10];
    uint64_t v27 = (char *)a1 + v26;
    uint64_t v28 = (char *)a2 + v26;
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = Model[11];
    uint64_t v30 = (uint64_t *)((char *)a1 + v29);
    uint64_t v31 = (uint64_t *)((char *)a2 + v29);
    uint64_t v102 = v31[1];
    void *v30 = *v31;
    v30[1] = v102;
    uint64_t v32 = Model[12];
    uint64_t v33 = (uint64_t *)((char *)a1 + v32);
    int v34 = (uint64_t *)((char *)a2 + v32);
    uint64_t v101 = v34[1];
    void *v33 = *v34;
    v33[1] = v101;
    uint64_t v35 = Model[13];
    uint64_t v36 = (uint64_t *)((char *)a1 + v35);
    uint64_t v37 = (uint64_t *)((char *)a2 + v35);
    uint64_t v100 = v37[1];
    void *v36 = *v37;
    v36[1] = v100;
    uint64_t v38 = Model[14];
    uint64_t v39 = (uint64_t *)((char *)a1 + v38);
    uint64_t v40 = (uint64_t *)((char *)a2 + v38);
    uint64_t v99 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v99;
    uint64_t v41 = Model[15];
    uint64_t v42 = (uint64_t *)((char *)a1 + v41);
    uint64_t v43 = (uint64_t *)((char *)a2 + v41);
    uint64_t v98 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v98;
    uint64_t v44 = Model[16];
    uint64_t v45 = (uint64_t *)((char *)a1 + v44);
    uint64_t v46 = (uint64_t *)((char *)a2 + v44);
    uint64_t v47 = v46[1];
    *uint64_t v45 = *v46;
    v45[1] = v47;
    uint64_t v48 = Model[17];
    uint64_t v49 = (uint64_t *)((char *)a1 + v48);
    uint64_t v50 = (uint64_t *)((char *)a2 + v48);
    uint64_t v51 = v50[1];
    void *v49 = *v50;
    v49[1] = v51;
    uint64_t v52 = Model[18];
    uint64_t v53 = (uint64_t *)((char *)a1 + v52);
    uint64_t v54 = (uint64_t *)((char *)a2 + v52);
    uint64_t v55 = v54[1];
    *uint64_t v53 = *v54;
    v53[1] = v55;
    uint64_t v56 = Model[19];
    uint64_t v57 = (uint64_t *)((char *)a1 + v56);
    uint64_t v58 = (uint64_t *)((char *)a2 + v56);
    uint64_t v59 = v58[1];
    *uint64_t v57 = *v58;
    v57[1] = v59;
    uint64_t v60 = Model[20];
    __dst = (char *)a1 + v60;
    uint64_t v96 = (char *)a2 + v60;
    uint64_t v61 = type metadata accessor for URL();
    uint64_t v62 = *(void *)(v61 - 8);
    char v97 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v97(v96, 1, v61))
    {
      uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v96, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v62 + 16))(__dst, v96, v61);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(__dst, 0, 1, v61);
    }
    uint64_t v64 = Model[21];
    Swift::String v65 = (uint64_t *)((char *)a1 + v64);
    long long v66 = (uint64_t *)((char *)a2 + v64);
    uint64_t v67 = v66[1];
    *Swift::String v65 = *v66;
    v65[1] = v67;
    uint64_t v68 = Model[22];
    long long v69 = (uint64_t *)((char *)a1 + v68);
    uint64_t v70 = (uint64_t *)((char *)a2 + v68);
    uint64_t v71 = v70[1];
    *long long v69 = *v70;
    v69[1] = v71;
    uint64_t v72 = Model[23];
    uint64_t v73 = (char *)a1 + v72;
    uint64_t v74 = (char *)a2 + v72;
    uint64_t v75 = type metadata accessor for SnippetHeaderModel();
    uint64_t v76 = *(void *)(v75 - 8);
    uint64_t v77 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v77(v74, 1, v75))
    {
      uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v73, v74, *(void *)(*(void *)(v78 - 8) + 64));
    }
    else
    {
      uint64_t v79 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16))(v73, v74, v79);
      uint64_t v80 = *(int *)(v75 + 20);
      uint64_t v81 = &v73[v80];
      char v82 = &v74[v80];
      uint64_t v83 = *((void *)v82 + 1);
      *(void *)uint64_t v81 = *(void *)v82;
      *((void *)v81 + 1) = v83;
      uint64_t v84 = *(int *)(v75 + 24);
      Swift::String v85 = &v73[v84];
      Swift::String v86 = &v74[v84];
      uint64_t v87 = *((void *)v86 + 1);
      *(void *)Swift::String v85 = *(void *)v86;
      *((void *)v85 + 1) = v87;
      uint64_t v88 = *(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v88(v73, 0, 1, v75);
    }
    uint64_t v89 = *(int *)(a3 + 20);
    char v90 = (uint64_t *)((char *)a1 + v89);
    char v91 = (char *)a2 + v89;
    uint64_t v93 = *(void **)v91;
    uint64_t v92 = *((void *)v91 + 1);
    *char v90 = v93;
    v90[1] = v92;
    id v94 = v93;
  }
  return a1;
}

void destroy for BloodPressureQuerySnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(Model + 80);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + *(int *)(Model + 92);
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v10, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = *(void **)(a1 + *(int *)(a2 + 20));
}

char *initializeWithCopy for BloodPressureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  uint64_t Model = (int *)type metadata accessor for BloodPressureQueryModel();
  uint64_t v9 = Model[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  unsigned char v10[8] = v11[8];
  uint64_t v12 = Model[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = Model[7];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  v16[8] = v17[8];
  *(void *)uint64_t v16 = *(void *)v17;
  uint64_t v18 = Model[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  v19[8] = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v21 = Model[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = Model[10];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v26[8];
  uint64_t v27 = Model[11];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v100 = *((void *)v29 + 1);
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = v100;
  uint64_t v30 = Model[12];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v99 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = v99;
  uint64_t v33 = Model[13];
  int v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v98 = *((void *)v35 + 1);
  *(void *)int v34 = *(void *)v35;
  *((void *)v34 + 1) = v98;
  uint64_t v36 = Model[14];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  uint64_t v97 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v97;
  uint64_t v39 = Model[15];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v96 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = v96;
  uint64_t v42 = Model[16];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v45 = *((void *)v44 + 1);
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = v45;
  uint64_t v46 = Model[17];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  uint64_t v49 = *((void *)v48 + 1);
  *(void *)uint64_t v47 = *(void *)v48;
  *((void *)v47 + 1) = v49;
  uint64_t v50 = Model[18];
  uint64_t v51 = &a1[v50];
  uint64_t v52 = &a2[v50];
  uint64_t v53 = *((void *)v52 + 1);
  *(void *)uint64_t v51 = *(void *)v52;
  *((void *)v51 + 1) = v53;
  uint64_t v54 = Model[19];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  uint64_t v57 = *((void *)v56 + 1);
  *(void *)uint64_t v55 = *(void *)v56;
  *((void *)v55 + 1) = v57;
  uint64_t v58 = Model[20];
  __dst = &a1[v58];
  id v94 = &a2[v58];
  uint64_t v59 = type metadata accessor for URL();
  uint64_t v60 = *(void *)(v59 - 8);
  uint64_t v95 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v95(v94, 1, v59))
  {
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(__dst, v94, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(__dst, v94, v59);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(__dst, 0, 1, v59);
  }
  uint64_t v62 = Model[21];
  uint64_t v63 = &a1[v62];
  uint64_t v64 = &a2[v62];
  uint64_t v65 = *((void *)v64 + 1);
  *(void *)uint64_t v63 = *(void *)v64;
  *((void *)v63 + 1) = v65;
  uint64_t v66 = Model[22];
  uint64_t v67 = &a1[v66];
  uint64_t v68 = &a2[v66];
  uint64_t v69 = *((void *)v68 + 1);
  *(void *)uint64_t v67 = *(void *)v68;
  *((void *)v67 + 1) = v69;
  uint64_t v70 = Model[23];
  uint64_t v71 = &a1[v70];
  uint64_t v72 = &a2[v70];
  uint64_t v73 = type metadata accessor for SnippetHeaderModel();
  uint64_t v74 = *(void *)(v73 - 8);
  uint64_t v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v75(v72, 1, v73))
  {
    uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v71, v72, *(void *)(*(void *)(v76 - 8) + 64));
  }
  else
  {
    uint64_t v77 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 16))(v71, v72, v77);
    uint64_t v78 = *(int *)(v73 + 20);
    uint64_t v79 = &v71[v78];
    uint64_t v80 = &v72[v78];
    uint64_t v81 = *((void *)v80 + 1);
    *(void *)uint64_t v79 = *(void *)v80;
    *((void *)v79 + 1) = v81;
    uint64_t v82 = *(int *)(v73 + 24);
    uint64_t v83 = &v71[v82];
    uint64_t v84 = &v72[v82];
    uint64_t v85 = *((void *)v84 + 1);
    *(void *)uint64_t v83 = *(void *)v84;
    *((void *)v83 + 1) = v85;
    Swift::String v86 = *(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v86(v71, 0, 1, v73);
  }
  uint64_t v87 = *(int *)(a3 + 20);
  uint64_t v88 = &a1[v87];
  uint64_t v89 = &a2[v87];
  char v91 = *(void **)v89;
  uint64_t v90 = *((void *)v89 + 1);
  *(void *)uint64_t v88 = v91;
  *((void *)v88 + 1) = v90;
  id v92 = v91;
  return a1;
}

char *assignWithCopy for BloodPressureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
LABEL_7:
  uint64_t Model = (int *)type metadata accessor for BloodPressureQueryModel();
  uint64_t v12 = Model[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  char v15 = v14[8];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v15;
  uint64_t v16 = Model[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  uint64_t v20 = Model[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = Model[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v27;
  uint64_t v28 = Model[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  char v31 = v30[8];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v31;
  uint64_t v32 = Model[10];
  uint64_t v33 = &a1[v32];
  int v34 = &a2[v32];
  uint64_t v35 = *(void *)v34;
  v33[8] = v34[8];
  *(void *)uint64_t v33 = v35;
  uint64_t v36 = Model[11];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = *((void *)v38 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = Model[12];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = *((void *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = Model[13];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = Model[14];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + 1) = *((void *)v47 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = Model[15];
  uint64_t v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + 1) = *((void *)v50 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = Model[16];
  uint64_t v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  *(void *)uint64_t v52 = *(void *)v53;
  *((void *)v52 + 1) = *((void *)v53 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = Model[17];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  *((void *)v55 + 1) = *((void *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = Model[18];
  uint64_t v58 = &a1[v57];
  uint64_t v59 = &a2[v57];
  *(void *)uint64_t v58 = *(void *)v59;
  *((void *)v58 + 1) = *((void *)v59 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = Model[19];
  uint64_t v61 = &a1[v60];
  uint64_t v62 = &a2[v60];
  *(void *)uint64_t v61 = *(void *)v62;
  *((void *)v61 + 1) = *((void *)v62 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = Model[20];
  uint64_t v64 = &a1[v63];
  uint64_t v65 = &a2[v63];
  uint64_t v66 = type metadata accessor for URL();
  uint64_t v67 = *(void *)(v66 - 8);
  uint64_t v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
  int v69 = v68(v64, 1, v66);
  int v70 = v68(v65, 1, v66);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v64, v65, v66);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v64, v66);
LABEL_12:
    uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v64, v65, *(void *)(*(void *)(v71 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 24))(v64, v65, v66);
LABEL_13:
  uint64_t v72 = Model[21];
  uint64_t v73 = &a1[v72];
  uint64_t v74 = &a2[v72];
  *(void *)uint64_t v73 = *(void *)v74;
  *((void *)v73 + 1) = *((void *)v74 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v75 = Model[22];
  uint64_t v76 = &a1[v75];
  uint64_t v77 = &a2[v75];
  *(void *)uint64_t v76 = *(void *)v77;
  *((void *)v76 + 1) = *((void *)v77 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v78 = Model[23];
  uint64_t v79 = &a1[v78];
  uint64_t v80 = &a2[v78];
  uint64_t v81 = type metadata accessor for SnippetHeaderModel();
  uint64_t v82 = *(void *)(v81 - 8);
  uint64_t v83 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 48);
  int v84 = v83(v79, 1, v81);
  int v85 = v83(v80, 1, v81);
  if (!v84)
  {
    if (!v85)
    {
      uint64_t v102 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v102 - 8) + 24))(v79, v80, v102);
      uint64_t v103 = *(int *)(v81 + 20);
      char v104 = &v79[v103];
      uint64_t v105 = &v80[v103];
      *(void *)char v104 = *(void *)v105;
      *((void *)v104 + 1) = *((void *)v105 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v106 = *(int *)(v81 + 24);
      uint64_t v107 = &v79[v106];
      uint64_t v108 = &v80[v106];
      *(void *)uint64_t v107 = *(void *)v108;
      *((void *)v107 + 1) = *((void *)v108 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of SnippetHeaderView((uint64_t)v79, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v85)
  {
LABEL_18:
    uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v79, v80, *(void *)(*(void *)(v94 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v86 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 16))(v79, v80, v86);
  uint64_t v87 = *(int *)(v81 + 20);
  uint64_t v88 = &v79[v87];
  uint64_t v89 = &v80[v87];
  *(void *)uint64_t v88 = *(void *)v89;
  *((void *)v88 + 1) = *((void *)v89 + 1);
  uint64_t v90 = *(int *)(v81 + 24);
  char v91 = &v79[v90];
  id v92 = &v80[v90];
  *(void *)char v91 = *(void *)v92;
  *((void *)v91 + 1) = *((void *)v92 + 1);
  uint64_t v93 = *(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v93(v79, 0, 1, v81);
LABEL_19:
  uint64_t v95 = *(int *)(a3 + 20);
  uint64_t v96 = &a1[v95];
  uint64_t v97 = &a2[v95];
  uint64_t v98 = *(void **)&a1[v95];
  uint64_t v99 = *(void **)v97;
  *(void *)uint64_t v96 = *(void *)v97;
  id v100 = v99;

  *((void *)v96 + 1) = *((void *)v97 + 1);
  return a1;
}

char *initializeWithTake for BloodPressureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t Model = (int *)type metadata accessor for BloodPressureQueryModel();
  uint64_t v10 = Model[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = Model[6];
  uint64_t v14 = &a1[v13];
  char v15 = &a2[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = Model[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  v17[8] = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = Model[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  v20[8] = v21[8];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = Model[9];
  char v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  v23[8] = v24[8];
  *(void *)char v23 = *(void *)v24;
  uint64_t v25 = Model[10];
  uint64_t v26 = &a1[v25];
  char v27 = &a2[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  *(_OWORD *)&a1[Model[11]] = *(_OWORD *)&a2[Model[11]];
  *(_OWORD *)&a1[Model[12]] = *(_OWORD *)&a2[Model[12]];
  *(_OWORD *)&a1[Model[13]] = *(_OWORD *)&a2[Model[13]];
  *(_OWORD *)&a1[Model[14]] = *(_OWORD *)&a2[Model[14]];
  *(_OWORD *)&a1[Model[15]] = *(_OWORD *)&a2[Model[15]];
  *(_OWORD *)&a1[Model[16]] = *(_OWORD *)&a2[Model[16]];
  *(_OWORD *)&a1[Model[17]] = *(_OWORD *)&a2[Model[17]];
  *(_OWORD *)&a1[Model[18]] = *(_OWORD *)&a2[Model[18]];
  *(_OWORD *)&a1[Model[19]] = *(_OWORD *)&a2[Model[19]];
  uint64_t v28 = Model[20];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = type metadata accessor for URL();
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  *(_OWORD *)&a1[Model[21]] = *(_OWORD *)&a2[Model[21]];
  *(_OWORD *)&a1[Model[22]] = *(_OWORD *)&a2[Model[22]];
  uint64_t v34 = Model[23];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = type metadata accessor for SnippetHeaderModel();
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    uint64_t v40 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v35, v36, v40);
    *(_OWORD *)&v35[*(int *)(v37 + 20)] = *(_OWORD *)&v36[*(int *)(v37 + 20)];
    *(_OWORD *)&v35[*(int *)(v37 + 24)] = *(_OWORD *)&v36[*(int *)(v37 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for BloodPressureQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
LABEL_7:
  uint64_t Model = (int *)type metadata accessor for BloodPressureQueryModel();
  uint64_t v12 = Model[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = Model[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = Model[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  v19[8] = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v21 = Model[8];
  uint64_t v22 = &a1[v21];
  char v23 = &a2[v21];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = Model[9];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  v25[8] = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  uint64_t v27 = Model[10];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  uint64_t v30 = Model[11];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v34 = *(void *)v32;
  uint64_t v33 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = v34;
  *((void *)v31 + 1) = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = Model[12];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  uint64_t v39 = *(void *)v37;
  uint64_t v38 = *((void *)v37 + 1);
  *(void *)uint64_t v36 = v39;
  *((void *)v36 + 1) = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = Model[13];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  uint64_t v44 = *(void *)v42;
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = v44;
  *((void *)v41 + 1) = v43;
  swift_bridgeObjectRelease();
  uint64_t v45 = Model[14];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  uint64_t v49 = *(void *)v47;
  uint64_t v48 = *((void *)v47 + 1);
  *(void *)uint64_t v46 = v49;
  *((void *)v46 + 1) = v48;
  swift_bridgeObjectRelease();
  uint64_t v50 = Model[15];
  uint64_t v51 = &a1[v50];
  uint64_t v52 = &a2[v50];
  uint64_t v54 = *(void *)v52;
  uint64_t v53 = *((void *)v52 + 1);
  *(void *)uint64_t v51 = v54;
  *((void *)v51 + 1) = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = Model[16];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  uint64_t v59 = *(void *)v57;
  uint64_t v58 = *((void *)v57 + 1);
  *(void *)uint64_t v56 = v59;
  *((void *)v56 + 1) = v58;
  swift_bridgeObjectRelease();
  uint64_t v60 = Model[17];
  uint64_t v61 = &a1[v60];
  uint64_t v62 = &a2[v60];
  uint64_t v64 = *(void *)v62;
  uint64_t v63 = *((void *)v62 + 1);
  *(void *)uint64_t v61 = v64;
  *((void *)v61 + 1) = v63;
  swift_bridgeObjectRelease();
  uint64_t v65 = Model[18];
  uint64_t v66 = &a1[v65];
  uint64_t v67 = &a2[v65];
  uint64_t v69 = *(void *)v67;
  uint64_t v68 = *((void *)v67 + 1);
  *(void *)uint64_t v66 = v69;
  *((void *)v66 + 1) = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = Model[19];
  uint64_t v71 = &a1[v70];
  uint64_t v72 = &a2[v70];
  uint64_t v74 = *(void *)v72;
  uint64_t v73 = *((void *)v72 + 1);
  *(void *)uint64_t v71 = v74;
  *((void *)v71 + 1) = v73;
  swift_bridgeObjectRelease();
  uint64_t v75 = Model[20];
  uint64_t v76 = &a1[v75];
  uint64_t v77 = &a2[v75];
  uint64_t v78 = type metadata accessor for URL();
  uint64_t v79 = *(void *)(v78 - 8);
  uint64_t v80 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v79 + 48);
  int v81 = v80(v76, 1, v78);
  int v82 = v80(v77, 1, v78);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v76, v77, v78);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v82)
  {
    (*(void (**)(char *, uint64_t))(v79 + 8))(v76, v78);
LABEL_12:
    uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v76, v77, *(void *)(*(void *)(v83 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v79 + 40))(v76, v77, v78);
LABEL_13:
  uint64_t v84 = Model[21];
  int v85 = &a1[v84];
  uint64_t v86 = &a2[v84];
  uint64_t v88 = *(void *)v86;
  uint64_t v87 = *((void *)v86 + 1);
  *(void *)int v85 = v88;
  *((void *)v85 + 1) = v87;
  swift_bridgeObjectRelease();
  uint64_t v89 = Model[22];
  uint64_t v90 = &a1[v89];
  char v91 = &a2[v89];
  uint64_t v93 = *(void *)v91;
  uint64_t v92 = *((void *)v91 + 1);
  *(void *)uint64_t v90 = v93;
  *((void *)v90 + 1) = v92;
  swift_bridgeObjectRelease();
  uint64_t v94 = Model[23];
  uint64_t v95 = &a1[v94];
  uint64_t v96 = &a2[v94];
  uint64_t v97 = type metadata accessor for SnippetHeaderModel();
  uint64_t v98 = *(void *)(v97 - 8);
  uint64_t v99 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v98 + 48);
  int v100 = v99(v95, 1, v97);
  int v101 = v99(v96, 1, v97);
  if (!v100)
  {
    if (!v101)
    {
      uint64_t v109 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 40))(v95, v96, v109);
      uint64_t v110 = *(int *)(v97 + 20);
      uint64_t v111 = &v95[v110];
      char v112 = &v96[v110];
      uint64_t v114 = *(void *)v112;
      uint64_t v113 = *((void *)v112 + 1);
      *(void *)uint64_t v111 = v114;
      *((void *)v111 + 1) = v113;
      swift_bridgeObjectRelease();
      uint64_t v115 = *(int *)(v97 + 24);
      uint64_t v116 = &v95[v115];
      uint64_t v117 = &v96[v115];
      uint64_t v119 = *(void *)v117;
      uint64_t v118 = *((void *)v117 + 1);
      *(void *)uint64_t v116 = v119;
      *((void *)v116 + 1) = v118;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of SnippetHeaderView((uint64_t)v95, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v101)
  {
LABEL_18:
    uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v95, v96, *(void *)(*(void *)(v103 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v102 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v102 - 8) + 32))(v95, v96, v102);
  *(_OWORD *)&v95[*(int *)(v97 + 20)] = *(_OWORD *)&v96[*(int *)(v97 + 20)];
  *(_OWORD *)&v95[*(int *)(v97 + 24)] = *(_OWORD *)&v96[*(int *)(v97 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
LABEL_19:
  uint64_t v104 = *(int *)(a3 + 20);
  uint64_t v105 = &a1[v104];
  uint64_t v106 = &a2[v104];
  uint64_t v107 = *(void **)&a1[v104];
  *(void *)uint64_t v105 = *(void *)v106;

  *((void *)v105 + 1) = *((void *)v106 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for BloodPressureQuerySnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_26183C5E0);
}

uint64_t sub_26183C5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  uint64_t v7 = *(void *)(Model - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, Model);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for BloodPressureQuerySnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_26183C6C0);
}

uint64_t sub_26183C6C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for BloodPressureQueryModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata completion function for BloodPressureQuerySnippet()
{
  uint64_t result = type metadata accessor for BloodPressureQueryModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t GenericBinaryButtonModel.invocationIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericBinaryButtonModel.invocationIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*GenericBinaryButtonModel.invocationIdentifier.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericBinaryButtonModel.primaryButtonLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericBinaryButtonModel.primaryButtonLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*GenericBinaryButtonModel.primaryButtonLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericBinaryButtonModel.secondaryButtonLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericBinaryButtonModel.secondaryButtonLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*GenericBinaryButtonModel.secondaryButtonLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericBinaryButtonModel.isSmartEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t GenericBinaryButtonModel.isSmartEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

uint64_t (*GenericBinaryButtonModel.isSmartEnabled.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

void __swiftcall GenericBinaryButtonModel.init(invocationIdentifier:primaryButtonLabel:secondaryButtonLabel:isSmartEnabled:)(WellnessUI::GenericBinaryButtonModel *__return_ptr retstr, Swift::String invocationIdentifier, Swift::String primaryButtonLabel, Swift::String secondaryButtonLabel, Swift::Bool isSmartEnabled)
{
  retstr->invocationIdentifier = invocationIdentifier;
  retstr->primaryButtonLabel = primaryButtonLabel;
  retstr->secondaryButtonLabel = secondaryButtonLabel;
  retstr->isSmartEnabled = isSmartEnabled;
}

unint64_t GenericBinaryButtonModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x457472616D537369;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance GenericBinaryButtonModel.CodingKeys()
{
  return GenericBinaryButtonModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GenericBinaryButtonModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized GenericBinaryButtonModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GenericBinaryButtonModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GenericBinaryButtonModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GenericBinaryButtonModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t GenericBinaryButtonModel.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GenericBinaryButtonModel.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v1 + 16);
  _OWORD v15[2] = *(void *)(v1 + 24);
  v15[3] = v8;
  uint64_t v9 = *(void *)(v1 + 32);
  v15[0] = *(void *)(v1 + 40);
  v15[1] = v9;
  int v16 = *(unsigned __int8 *)(v1 + 48);
  uint64_t v10 = a1[3];
  int v11 = a1;
  uint64_t v13 = v12;
  __swift_project_boxed_opaque_existential_1(v11, v10);
  lazy protocol witness table accessor for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v18 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v17 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v13);
}

unint64_t lazy protocol witness table accessor for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys);
  }
  return result;
}

uint64_t GenericBinaryButtonModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GenericBinaryButtonModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GenericBinaryButtonModel.CodingKeys and conformance GenericBinaryButtonModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  char v29 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v24 = v9;
  char v28 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v25 = v13;
  uint64_t v23 = v12;
  char v27 = 2;
  swift_bridgeObjectRetain();
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v22 = v14;
  char v26 = 3;
  swift_bridgeObjectRetain();
  char v16 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v17 = v16 & 1;
  uint64_t v18 = v25;
  *(void *)a2 = v24;
  *(void *)(a2 + 8) = v11;
  uint64_t v19 = v22;
  *(void *)(a2 + 16) = v23;
  *(void *)(a2 + 24) = v18;
  *(void *)(a2 + 32) = v21;
  *(void *)(a2 + 40) = v19;
  *(unsigned char *)(a2 + 48) = v17;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance GenericBinaryButtonModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GenericBinaryButtonModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GenericBinaryButtonModel(void *a1)
{
  return GenericBinaryButtonModel.encode(to:)(a1);
}

uint64_t destroy for GenericBinaryButtonModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GenericBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GenericBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GenericBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericBinaryButtonModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericBinaryButtonModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericBinaryButtonModel()
{
  return &type metadata for GenericBinaryButtonModel;
}

uint64_t getEnumTagSinglePayload for GenericBinaryButtonModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GenericBinaryButtonModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x26183D474);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for GenericBinaryButtonModel.CodingKeys()
{
  return &unk_270D87290;
}

uint64_t specialized GenericBinaryButtonModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x8000000261883B40
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883B60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000261883B80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x457472616D537369 && a2 == 0xEE0064656C62616ELL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t TemperatureQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t TemperatureQueryModel.appPunchout.setter(uint64_t a1)
{
  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*TemperatureQueryModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.averageValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 20));
}

uint64_t type metadata accessor for TemperatureQueryModel()
{
  uint64_t result = type metadata singleton initialization cache for TemperatureQueryModel;
  if (!type metadata singleton initialization cache for TemperatureQueryModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t TemperatureQueryModel.averageValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for TemperatureQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 20);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TemperatureQueryModel.averageValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.maxValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 24));
}

uint64_t TemperatureQueryModel.maxValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for TemperatureQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TemperatureQueryModel.maxValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.minValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 28));
}

uint64_t TemperatureQueryModel.minValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for TemperatureQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TemperatureQueryModel.minValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.mostRecentValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 32));
}

uint64_t TemperatureQueryModel.mostRecentValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for TemperatureQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 32);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TemperatureQueryModel.mostRecentValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.basalTemperatureValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 36));
}

uint64_t TemperatureQueryModel.basalTemperatureValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for TemperatureQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 36);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TemperatureQueryModel.basalTemperatureValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 40), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t TemperatureQueryModel.dateLabel.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 40), &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t (*TemperatureQueryModel.dateLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.averageValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TemperatureQueryModel.averageValueString.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for TemperatureQueryModel() + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.averageValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.maxValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TemperatureQueryModel.maxValueString.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for TemperatureQueryModel() + 48));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.maxValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.minValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TemperatureQueryModel.minValueString.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for TemperatureQueryModel() + 52));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.minValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.mostRecentValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TemperatureQueryModel.mostRecentValueString.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for TemperatureQueryModel() + 56));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.mostRecentValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.basalTemperatureValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TemperatureQueryModel.basalTemperatureValueString.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for TemperatureQueryModel() + 60));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.basalTemperatureValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.unitString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 64), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t TemperatureQueryModel.unitString.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 64), &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t (*TemperatureQueryModel.unitString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.averageLabelString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for TemperatureQueryModel() + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TemperatureQueryModel.averageLabelString.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for TemperatureQueryModel() + 68));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.averageLabelString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 72), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t TemperatureQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 72), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*TemperatureQueryModel.snippetHeaderModel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t TemperatureQueryModel.init(averageValue:maxValue:minValue:mostRecentValue:basalTemperatureValue:unitString:dateLabel:url:averageLabelString:headerModel:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v94 = a5;
  int v86 = a4;
  uint64_t v88 = a3;
  int v83 = a2;
  uint64_t v85 = a1;
  uint64_t v101 = a15;
  uint64_t v102 = a16;
  uint64_t v104 = a17;
  uint64_t v105 = a14;
  uint64_t v106 = a13;
  uint64_t v107 = a12;
  uint64_t v97 = a10;
  int v95 = a11;
  BOOL v82 = (a2 & 1) == 0;
  BOOL v84 = (a4 & 1) == 0;
  BOOL v87 = (a6 & 1) == 0;
  BOOL v89 = (a8 & 1) == 0;
  BOOL v93 = (a11 & 1) == 0;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v96 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for AppPunchout();
  uint64_t v23 = *(void *)(v91 - 8);
  uint64_t v90 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
  uint64_t v92 = v23 + 56;
  v90(a9, 1, 1, v91);
  uint64_t Model = (int *)type metadata accessor for TemperatureQueryModel();
  uint64_t v81 = a9 + Model[10];
  uint64_t v25 = v81;
  uint64_t v26 = type metadata accessor for SpeakableString();
  char v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
  v27(v25, 1, 1, v26);
  char v28 = (uint64_t *)(a9 + Model[11]);
  uint64_t *v28 = 0;
  v28[1] = 0;
  char v29 = (uint64_t *)(a9 + Model[12]);
  uint64_t v98 = v29;
  uint64_t *v29 = 0;
  v29[1] = 0;
  uint64_t v30 = (uint64_t *)(a9 + Model[13]);
  uint64_t v99 = v30;
  uint64_t *v30 = 0;
  v30[1] = 0;
  uint64_t v31 = (uint64_t *)(a9 + Model[14]);
  int v100 = v31;
  uint64_t *v31 = 0;
  v31[1] = 0;
  uint64_t v32 = (uint64_t *)(a9 + Model[15]);
  uint64_t v103 = v32;
  uint64_t *v32 = 0;
  v32[1] = 0;
  uint64_t v33 = a9 + Model[16];
  v27(v33, 1, 1, v26);
  uint64_t v34 = (void *)(a9 + Model[17]);
  *uint64_t v34 = 0;
  v34[1] = 0;
  uint64_t v80 = a9 + Model[18];
  uint64_t v35 = v80;
  uint64_t v36 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  uint64_t v37 = v85;
  BOOL v38 = (v85 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v82 && v38) {
    uint64_t v37 = 0;
  }
  char v39 = v83 | v38;
  uint64_t v40 = a9 + Model[5];
  *(void *)uint64_t v40 = v37;
  *(unsigned char *)(v40 + 8) = v39 & 1;
  uint64_t v41 = v88;
  BOOL v42 = (v88 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v84 && v42) {
    uint64_t v41 = 0;
  }
  char v43 = v86 | v42;
  uint64_t v44 = a9 + Model[6];
  *(void *)uint64_t v44 = v41;
  *(unsigned char *)(v44 + 8) = v43 & 1;
  uint64_t v45 = v94;
  BOOL v46 = (v94 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v87 && v46) {
    uint64_t v45 = 0;
  }
  char v47 = a6 | v46;
  uint64_t v48 = a9 + Model[7];
  *(void *)uint64_t v48 = v45;
  *(unsigned char *)(v48 + 8) = v47 & 1;
  BOOL v49 = (a7 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v89 && v49) {
    uint64_t v50 = 0;
  }
  else {
    uint64_t v50 = a7;
  }
  char v51 = a8 | v49;
  uint64_t v52 = a9 + Model[8];
  *(void *)uint64_t v52 = v50;
  *(unsigned char *)(v52 + 8) = v51 & 1;
  uint64_t v53 = v97;
  BOOL v54 = (v97 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v93 && v54) {
    uint64_t v53 = 0;
  }
  char v55 = v95 | v54;
  uint64_t v56 = a9 + Model[9];
  *(void *)uint64_t v56 = v53;
  *(unsigned char *)(v56 + 8) = v55 & 1;
  outlined assign with copy of SpeakableString?(v107, v33, &demangling cache variable for type metadata for SpeakableString?);
  outlined assign with copy of SpeakableString?(v106, v81, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v57 = (uint64_t)v96;
  TemperatureQueryModel.createAppPunchout(url:)(v105);
  v90(v57, 0, 1, v91);
  outlined assign with take of AppPunchout?(v57, a9, &demangling cache variable for type metadata for AppPunchout?);
  swift_bridgeObjectRelease();
  uint64_t v58 = v102;
  *uint64_t v34 = v101;
  v34[1] = v58;
  outlined assign with copy of SpeakableString?(v104, v80, &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v59 = TemperatureQueryModel.getFormattedTemperatureString(value:unitString:withUnits:)(*(void *)v40, *(unsigned char *)(v40 + 8), v33, 1);
  uint64_t v61 = v60;
  swift_bridgeObjectRelease();
  uint64_t *v28 = v59;
  v28[1] = v61;
  uint64_t v62 = TemperatureQueryModel.getFormattedTemperatureString(value:unitString:withUnits:)(*(void *)v44, *(unsigned char *)(v44 + 8), v33, 1);
  uint64_t v64 = v63;
  uint64_t v65 = v98;
  swift_bridgeObjectRelease();
  *uint64_t v65 = v62;
  v65[1] = v64;
  uint64_t v66 = TemperatureQueryModel.getFormattedTemperatureString(value:unitString:withUnits:)(*(void *)v48, *(unsigned char *)(v48 + 8), v33, 0);
  uint64_t v68 = v67;
  uint64_t v69 = v99;
  swift_bridgeObjectRelease();
  *uint64_t v69 = v66;
  v69[1] = v68;
  uint64_t v70 = TemperatureQueryModel.getFormattedTemperatureString(value:unitString:withUnits:)(*(void *)v52, *(unsigned char *)(v52 + 8), v33, 1);
  uint64_t v72 = v71;
  uint64_t v73 = v100;
  swift_bridgeObjectRelease();
  *uint64_t v73 = v70;
  v73[1] = v72;
  uint64_t v74 = TemperatureQueryModel.getFormattedTemperatureString(value:unitString:withUnits:)(*(void *)v56, *(unsigned char *)(v56 + 8), v33, 1);
  uint64_t v76 = v75;
  outlined destroy of Font.Design?(v104, &demangling cache variable for type metadata for SnippetHeaderModel?);
  outlined destroy of Font.Design?(v105, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(v106, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of Font.Design?(v107, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v77 = v103;
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v77 = v74;
  v77[1] = v76;
  return result;
}

uint64_t TemperatureQueryModel.createAppPunchout(url:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  unsigned int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL.absoluteString.getter();
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t TemperatureQueryModel.getFormattedTemperatureString(value:unitString:withUnits:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v19 - v10;
  if ((a2 & 1) == 0)
  {
    type metadata accessor for DialogPreciseTemperature.Builder();
    swift_allocObject();
    MEMORY[0x263E41410]();
    dispatch thunk of DialogConvertibleMeasurement.Builder.withValue(_:)();
    swift_release();
    dispatch thunk of DialogConvertibleMeasurement.Builder.withUnits(_:)();
    swift_release();
    dispatch thunk of DialogConvertibleMeasurement.Builder.build()();
    swift_release();
    if (a4)
    {
      dispatch thunk of DialogPreciseTemperature.longSpokenTwoDigits.getter();
      uint64_t v12 = type metadata accessor for SpeakableString();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
      {
        uint64_t v17 = SpeakableString.print.getter();
        swift_release();
        (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
        return v17;
      }
      swift_release();
      uint64_t v14 = (uint64_t)v11;
    }
    else
    {
      dispatch thunk of DialogPreciseTemperature.mediumSpokenTwoDigits.getter();
      uint64_t v15 = type metadata accessor for SpeakableString();
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15) != 1)
      {
        uint64_t v17 = SpeakableString.print.getter();
        swift_release();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v15);
        return v17;
      }
      swift_release();
      uint64_t v14 = (uint64_t)v9;
    }
    outlined destroy of Font.Design?(v14, &demangling cache variable for type metadata for SpeakableString?);
  }
  return 0;
}

uint64_t TemperatureQueryModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x68636E7550707061;
  switch(a1)
  {
    case 1:
      return 0x5665676172657661;
    case 2:
      unsigned int v3 = 1450729837;
      return v3 | 0x65756C6100000000;
    case 3:
      unsigned int v3 = 1450076525;
      return v3 | 0x65756C6100000000;
    case 4:
      return 0x6563655274736F6DLL;
    case 5:
      return 0xD000000000000015;
    case 6:
      return 0x6562614C65746164;
    case 7:
    case 13:
    case 14:
      return 0xD000000000000012;
    case 8:
      unsigned int v4 = 1450729837;
      goto LABEL_11;
    case 9:
      unsigned int v4 = 1450076525;
LABEL_11:
      uint64_t result = v4 | 0x65756C6100000000;
      break;
    case 10:
      uint64_t result = 0xD000000000000015;
      break;
    case 11:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 12:
      uint64_t result = 0x6972745374696E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TemperatureQueryModel.CodingKeys()
{
  return TemperatureQueryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TemperatureQueryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TemperatureQueryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TemperatureQueryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TemperatureQueryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TemperatureQueryModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TemperatureQueryModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[31] = 0;
  type metadata accessor for AppPunchout();
  _s10SnippetKit11AppPunchoutVACSEAAWlTm_4(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for TemperatureQueryModel();
    v8[30] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[29] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[28] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[27] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[26] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[25] = 6;
    type metadata accessor for SpeakableString();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_4(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[24] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[15] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[14] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 12;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[10] = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[9] = 14;
    type metadata accessor for SnippetHeaderModel();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_4(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys);
  }
  return result;
}

uint64_t TemperatureQueryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v109 = a1;
  uint64_t v89 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v90 = (uint64_t)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v102 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v101 = (char *)&v84 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v103 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TemperatureQueryModel.CodingKeys>);
  uint64_t v104 = *(void *)(v10 - 8);
  uint64_t v105 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v108 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  uint64_t v13 = (int *)(Model - 8);
  MEMORY[0x270FA5388](Model);
  uint64_t v15 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AppPunchout();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v100 = v16;
  v17(v15, 1, 1);
  uint64_t v18 = &v15[v13[7]];
  *(void *)uint64_t v18 = 0;
  uint64_t v99 = v18;
  v18[8] = 1;
  uint64_t v19 = &v15[v13[8]];
  *(void *)uint64_t v19 = 0;
  uint64_t v98 = (uint64_t *)v19;
  v19[8] = 1;
  uint64_t v20 = &v15[v13[9]];
  *(void *)uint64_t v20 = 0;
  uint64_t v97 = (uint64_t *)v20;
  v20[8] = 1;
  uint64_t v21 = &v15[v13[10]];
  *(void *)uint64_t v21 = 0;
  uint64_t v96 = (uint64_t *)v21;
  v21[8] = 1;
  uint64_t v22 = &v15[v13[11]];
  *(void *)uint64_t v22 = 0;
  int v95 = (uint64_t *)v22;
  v22[8] = 1;
  uint64_t v23 = (uint64_t)&v15[v13[12]];
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void (**)(void))(*(void *)(v24 - 8) + 56);
  uint64_t v94 = v23;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v25)(v23, 1, 1, v24);
  uint64_t v26 = &v15[v13[13]];
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = 0;
  BOOL v93 = v26;
  char v27 = &v15[v13[14]];
  *(void *)char v27 = 0;
  *((void *)v27 + 1) = 0;
  uint64_t v92 = v27;
  char v28 = &v15[v13[15]];
  *(void *)char v28 = 0;
  *((void *)v28 + 1) = 0;
  char v29 = &v15[v13[16]];
  *(void *)char v29 = 0;
  *((void *)v29 + 1) = 0;
  uint64_t v30 = (uint64_t *)&v15[v13[17]];
  uint64_t *v30 = 0;
  v30[1] = 0;
  uint64_t v91 = &v15[v13[18]];
  v25();
  uint64_t v31 = &v15[v13[19]];
  *(void *)uint64_t v31 = 0;
  *((void *)v31 + 1) = 0;
  uint64_t v32 = v13[20];
  uint64_t v107 = v15;
  uint64_t v33 = (uint64_t)&v15[v32];
  uint64_t v34 = type metadata accessor for SnippetHeaderModel();
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56);
  uint64_t v88 = v33;
  v35(v33, 1, 1, v34);
  __swift_project_boxed_opaque_existential_1(v109, v109[3]);
  lazy protocol witness table accessor for type TemperatureQueryModel.CodingKeys and conformance TemperatureQueryModel.CodingKeys();
  uint64_t v36 = v106;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v36)
  {
    uint64_t v83 = (uint64_t)v107;
  }
  else
  {
    uint64_t v37 = v99;
    uint64_t v106 = v28;
    BOOL v87 = v29;
    uint64_t v38 = (uint64_t)v101;
    uint64_t v85 = v31;
    uint64_t v86 = v34;
    uint64_t v39 = (uint64_t)v102;
    uint64_t v40 = v104;
    char v124 = 0;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_4(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    uint64_t v41 = (uint64_t)v103;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v41, (uint64_t)v107, &demangling cache variable for type metadata for AppPunchout?);
    char v123 = 1;
    *(void *)uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v37[8] = v43 & 1;
    char v122 = 2;
    uint64_t v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v45 = v98;
    *uint64_t v98 = v44;
    *((unsigned char *)v45 + 8) = v46 & 1;
    char v121 = 3;
    uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v48 = v97;
    uint64_t *v97 = v47;
    *((unsigned char *)v48 + 8) = v49 & 1;
    char v120 = 4;
    uint64_t v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v51 = v96;
    *uint64_t v96 = v50;
    *((unsigned char *)v51 + 8) = v52 & 1;
    char v119 = 5;
    uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    BOOL v54 = v95;
    uint64_t *v95 = v53;
    *((unsigned char *)v54 + 8) = v55 & 1;
    char v118 = 6;
    uint64_t v56 = _s10SnippetKit11AppPunchoutVACSEAAWlTm_4(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v38, v94, &demangling cache variable for type metadata for SpeakableString?);
    char v117 = 7;
    uint64_t v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v59 = v58;
    uint64_t v103 = (char *)v56;
    uint64_t v60 = v93;
    uint64_t v61 = v57;
    swift_bridgeObjectRelease();
    *uint64_t v60 = v61;
    v60[1] = v59;
    char v116 = 8;
    uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v64 = v63;
    uint64_t v65 = (uint64_t *)v92;
    swift_bridgeObjectRelease();
    *uint64_t v65 = v62;
    v65[1] = v64;
    char v115 = 9;
    uint64_t v66 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v68 = v67;
    uint64_t v69 = (uint64_t *)v106;
    swift_bridgeObjectRelease();
    *uint64_t v69 = v66;
    v69[1] = v68;
    char v114 = 10;
    uint64_t v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v72 = v71;
    uint64_t v73 = (uint64_t *)v87;
    swift_bridgeObjectRelease();
    *uint64_t v73 = v70;
    v73[1] = v72;
    char v113 = 11;
    uint64_t v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v76 = v75;
    swift_bridgeObjectRelease();
    uint64_t *v30 = v74;
    v30[1] = v76;
    char v112 = 12;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v39, (uint64_t)v91, &demangling cache variable for type metadata for SpeakableString?);
    char v111 = 13;
    uint64_t v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v79 = v78;
    uint64_t v80 = (uint64_t *)v85;
    swift_bridgeObjectRelease();
    *uint64_t v80 = v77;
    v80[1] = v79;
    char v110 = 14;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_4(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v81 = v105;
    BOOL v82 = v108;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v82, v81);
    uint64_t v83 = (uint64_t)v107;
    outlined assign with take of AppPunchout?(v90, v88, &demangling cache variable for type metadata for SnippetHeaderModel?);
    outlined init with copy of TemperatureQueryModel(v83, v89);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v109);
  return _s10WellnessUI21TemperatureQueryModelVWOhTm_0(v83, (uint64_t (*)(void))type metadata accessor for TemperatureQueryModel);
}

uint64_t outlined init with copy of TemperatureQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t base witness table accessor for Decodable in TemperatureQueryModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_4(&lazy protocol witness table cache variable for type TemperatureQueryModel and conformance TemperatureQueryModel, (void (*)(uint64_t))type metadata accessor for TemperatureQueryModel);
}

uint64_t base witness table accessor for Encodable in TemperatureQueryModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_4(&lazy protocol witness table cache variable for type TemperatureQueryModel and conformance TemperatureQueryModel, (void (*)(uint64_t))type metadata accessor for TemperatureQueryModel);
}

uint64_t _s10SnippetKit11AppPunchoutVACSEAAWlTm_4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance TemperatureQueryModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TemperatureQueryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TemperatureQueryModel(void *a1)
{
  return TemperatureQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for TemperatureQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    uint64_t v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = a3[7];
    uint64_t v18 = a3[8];
    uint64_t v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = (char *)a1 + v18;
    uint64_t v22 = (char *)a2 + v18;
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = a3[9];
    uint64_t v24 = a3[10];
    uint64_t v25 = (char *)a1 + v23;
    uint64_t v26 = (char *)a2 + v23;
    v25[8] = v26[8];
    *(void *)uint64_t v25 = *(void *)v26;
    char v27 = (char *)a1 + v24;
    char v28 = (char *)a2 + v24;
    uint64_t v29 = type metadata accessor for SpeakableString();
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
    uint64_t v81 = v30;
    if (v80(v28, 1, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    uint64_t v32 = v29;
    uint64_t v33 = a3[11];
    uint64_t v34 = a3[12];
    uint64_t v35 = (uint64_t *)((char *)a1 + v33);
    uint64_t v36 = (uint64_t *)((char *)a2 + v33);
    uint64_t v37 = v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = (uint64_t *)((char *)a1 + v34);
    uint64_t v39 = (uint64_t *)((char *)a2 + v34);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    uint64_t v41 = a3[13];
    uint64_t v42 = a3[14];
    char v43 = (uint64_t *)((char *)a1 + v41);
    uint64_t v44 = (uint64_t *)((char *)a2 + v41);
    uint64_t v45 = v44[1];
    *char v43 = *v44;
    v43[1] = v45;
    char v46 = (uint64_t *)((char *)a1 + v42);
    uint64_t v47 = (uint64_t *)((char *)a2 + v42);
    uint64_t v48 = v47[1];
    void *v46 = *v47;
    v46[1] = v48;
    uint64_t v49 = a3[15];
    uint64_t v50 = a3[16];
    char v51 = (uint64_t *)((char *)a1 + v49);
    char v52 = (uint64_t *)((char *)a2 + v49);
    uint64_t v53 = v52[1];
    *char v51 = *v52;
    v51[1] = v53;
    __dst = (char *)a1 + v50;
    BOOL v54 = (char *)a2 + v50;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v55 = v32;
    if (v80(v54, 1, v32))
    {
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(__dst, v54, *(void *)(*(void *)(v56 - 8) + 64));
      uint64_t v57 = v81;
    }
    else
    {
      uint64_t v57 = v81;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(__dst, v54, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(__dst, 0, 1, v32);
    }
    uint64_t v58 = a3[17];
    uint64_t v59 = a3[18];
    uint64_t v60 = (uint64_t *)((char *)a1 + v58);
    uint64_t v61 = (uint64_t *)((char *)a2 + v58);
    uint64_t v62 = v61[1];
    *uint64_t v60 = *v61;
    v60[1] = v62;
    uint64_t v63 = (char *)a1 + v59;
    uint64_t v64 = (char *)a2 + v59;
    uint64_t v65 = type metadata accessor for SnippetHeaderModel();
    uint64_t v66 = *(void *)(v65 - 8);
    uint64_t v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
    swift_bridgeObjectRetain();
    if (v67(v64, 1, v65))
    {
      uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v63, v64, *(void *)(*(void *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v63, v64, v55);
      uint64_t v69 = *(int *)(v65 + 20);
      uint64_t v70 = &v63[v69];
      uint64_t v71 = &v64[v69];
      uint64_t v72 = *((void *)v71 + 1);
      *(void *)uint64_t v70 = *(void *)v71;
      *((void *)v70 + 1) = v72;
      uint64_t v73 = *(int *)(v65 + 24);
      uint64_t v74 = &v63[v73];
      uint64_t v75 = &v64[v73];
      uint64_t v76 = *((void *)v75 + 1);
      *(void *)uint64_t v74 = *(void *)v75;
      *((void *)v74 + 1) = v76;
      uint64_t v77 = *(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v77(v63, 0, 1, v65);
    }
  }
  return a1;
}

uint64_t destroy for TemperatureQueryModel(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + a2[10];
  uint64_t v7 = type metadata accessor for SpeakableString();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + a2[16];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = a1 + a2[18];
  uint64_t v12 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
  if (!result)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  v23[8] = v24[8];
  *(void *)uint64_t v23 = *(void *)v24;
  uint64_t v25 = &a1[v22];
  uint64_t v26 = &a2[v22];
  uint64_t v27 = type metadata accessor for SpeakableString();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v78 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  uint64_t v79 = v28;
  if (v78(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = v27;
  uint64_t v31 = a3[11];
  uint64_t v32 = a3[12];
  uint64_t v33 = &a1[v31];
  uint64_t v34 = &a2[v31];
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = v35;
  uint64_t v36 = &a1[v32];
  uint64_t v37 = &a2[v32];
  uint64_t v38 = *((void *)v37 + 1);
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = v38;
  uint64_t v39 = a3[13];
  uint64_t v40 = a3[14];
  uint64_t v41 = &a1[v39];
  uint64_t v42 = &a2[v39];
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  uint64_t v44 = &a1[v40];
  uint64_t v45 = &a2[v40];
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = v46;
  uint64_t v47 = a3[15];
  uint64_t v48 = a3[16];
  uint64_t v49 = &a1[v47];
  uint64_t v50 = &a2[v47];
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + 1) = v51;
  __dst = &a1[v48];
  char v52 = &a2[v48];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v53 = v30;
  if (v78(v52, 1, v30))
  {
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(__dst, v52, *(void *)(*(void *)(v54 - 8) + 64));
    uint64_t v55 = v79;
  }
  else
  {
    uint64_t v55 = v79;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(__dst, v52, v30);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(__dst, 0, 1, v30);
  }
  uint64_t v56 = a3[17];
  uint64_t v57 = a3[18];
  uint64_t v58 = &a1[v56];
  uint64_t v59 = &a2[v56];
  uint64_t v60 = *((void *)v59 + 1);
  *(void *)uint64_t v58 = *(void *)v59;
  *((void *)v58 + 1) = v60;
  uint64_t v61 = &a1[v57];
  uint64_t v62 = &a2[v57];
  uint64_t v63 = type metadata accessor for SnippetHeaderModel();
  uint64_t v64 = *(void *)(v63 - 8);
  uint64_t v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
  swift_bridgeObjectRetain();
  if (v65(v62, 1, v63))
  {
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v61, v62, *(void *)(*(void *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v61, v62, v53);
    uint64_t v67 = *(int *)(v63 + 20);
    uint64_t v68 = &v61[v67];
    uint64_t v69 = &v62[v67];
    uint64_t v70 = *((void *)v69 + 1);
    *(void *)uint64_t v68 = *(void *)v69;
    *((void *)v68 + 1) = v70;
    uint64_t v71 = *(int *)(v63 + 24);
    uint64_t v72 = &v61[v71];
    uint64_t v73 = &v62[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = *(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v75(v61, 0, 1, v63);
  }
  return a1;
}

char *assignWithCopy for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = v15;
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = a3[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)uint64_t v21 = v23;
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)uint64_t v25 = v27;
  uint64_t v28 = a3[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = *(void *)v30;
  v29[8] = v30[8];
  *(void *)uint64_t v29 = v31;
  uint64_t v32 = a3[10];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v35 = type metadata accessor for SpeakableString();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_12:
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
LABEL_13:
  uint64_t v41 = a3[11];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[12];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = *((void *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[13];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = *((void *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = a3[14];
  uint64_t v51 = &a1[v50];
  char v52 = &a2[v50];
  *(void *)uint64_t v51 = *(void *)v52;
  *((void *)v51 + 1) = *((void *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[15];
  uint64_t v54 = &a1[v53];
  uint64_t v55 = &a2[v53];
  *(void *)uint64_t v54 = *(void *)v55;
  *((void *)v54 + 1) = *((void *)v55 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[16];
  uint64_t v57 = &a1[v56];
  uint64_t v58 = &a2[v56];
  int v59 = v37(&a1[v56], 1, v35);
  int v60 = v37(v58, 1, v35);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v57, v58, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v57, 0, 1, v35);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v57, v35);
LABEL_18:
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v57, v58, v35);
LABEL_19:
  uint64_t v62 = a3[17];
  uint64_t v63 = &a1[v62];
  uint64_t v64 = &a2[v62];
  *(void *)uint64_t v63 = *(void *)v64;
  *((void *)v63 + 1) = *((void *)v64 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v65 = a3[18];
  uint64_t v66 = &a1[v65];
  uint64_t v67 = &a2[v65];
  uint64_t v68 = type metadata accessor for SnippetHeaderModel();
  uint64_t v69 = *(void *)(v68 - 8);
  uint64_t v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
  int v71 = v70(v66, 1, v68);
  int v72 = v70(v67, 1, v68);
  if (!v71)
  {
    if (!v72)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v66, v67, v35);
      uint64_t v82 = *(int *)(v68 + 20);
      uint64_t v83 = &v66[v82];
      uint64_t v84 = &v67[v82];
      *(void *)uint64_t v83 = *(void *)v84;
      *((void *)v83 + 1) = *((void *)v84 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v85 = *(int *)(v68 + 24);
      uint64_t v86 = &v66[v85];
      BOOL v87 = &v67[v85];
      *(void *)uint64_t v86 = *(void *)v87;
      *((void *)v86 + 1) = *((void *)v87 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    _s10WellnessUI21TemperatureQueryModelVWOhTm_0((uint64_t)v66, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v72)
  {
LABEL_24:
    uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v66, v67, *(void *)(*(void *)(v80 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v66, v67, v35);
  uint64_t v73 = *(int *)(v68 + 20);
  uint64_t v74 = &v66[v73];
  uint64_t v75 = &v67[v73];
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = *((void *)v75 + 1);
  uint64_t v76 = *(int *)(v68 + 24);
  uint64_t v77 = &v66[v76];
  uint64_t v78 = &v67[v76];
  *(void *)uint64_t v77 = *(void *)v78;
  *((void *)v77 + 1) = *((void *)v78 + 1);
  uint64_t v79 = *(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79(v66, 0, 1, v68);
  return a1;
}

uint64_t _s10WellnessUI21TemperatureQueryModelVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  v23[8] = v24[8];
  *(void *)uint64_t v23 = *(void *)v24;
  uint64_t v25 = &a1[v22];
  uint64_t v26 = &a2[v22];
  uint64_t v27 = type metadata accessor for SpeakableString();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  if (v29(v26, 1, v27))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v31 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v31] = *(_OWORD *)&a2[v31];
  uint64_t v32 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)&a1[v32] = *(_OWORD *)&a2[v32];
  uint64_t v33 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  if (v29(&a2[v33], 1, v27))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v34, v35, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v34, 0, 1, v27);
  }
  uint64_t v37 = a3[18];
  *(_OWORD *)&a1[a3[17]] = *(_OWORD *)&a2[a3[17]];
  int v38 = &a1[v37];
  int v39 = &a2[v37];
  uint64_t v40 = type metadata accessor for SnippetHeaderModel();
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v38, v39, v27);
    *(_OWORD *)&v38[*(int *)(v40 + 20)] = *(_OWORD *)&v39[*(int *)(v40 + 20)];
    *(_OWORD *)&v38[*(int *)(v40 + 24)] = *(_OWORD *)&v39[*(int *)(v40 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  return a1;
}

char *assignWithTake for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = &a1[v13];
  uint64_t v17 = &a2[v13];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = a3[9];
  uint64_t v25 = a3[10];
  uint64_t v26 = &a1[v24];
  uint64_t v27 = &a2[v24];
  v26[8] = v27[8];
  *(void *)uint64_t v26 = *(void *)v27;
  uint64_t v28 = &a1[v25];
  uint64_t v29 = &a2[v25];
  uint64_t v30 = type metadata accessor for SpeakableString();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
LABEL_12:
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v28, v29, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v28, v29, v30);
LABEL_13:
  uint64_t v36 = a3[11];
  uint64_t v37 = &a1[v36];
  int v38 = &a2[v36];
  uint64_t v40 = *(void *)v38;
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = v40;
  *((void *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[12];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  uint64_t v45 = *(void *)v43;
  uint64_t v44 = *((void *)v43 + 1);
  *(void *)uint64_t v42 = v45;
  *((void *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[13];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  uint64_t v50 = *(void *)v48;
  uint64_t v49 = *((void *)v48 + 1);
  *(void *)uint64_t v47 = v50;
  *((void *)v47 + 1) = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[14];
  char v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  uint64_t v55 = *(void *)v53;
  uint64_t v54 = *((void *)v53 + 1);
  *(void *)char v52 = v55;
  *((void *)v52 + 1) = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[15];
  uint64_t v57 = &a1[v56];
  uint64_t v58 = &a2[v56];
  uint64_t v60 = *(void *)v58;
  uint64_t v59 = *((void *)v58 + 1);
  *(void *)uint64_t v57 = v60;
  *((void *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
  uint64_t v61 = a3[16];
  uint64_t v62 = &a1[v61];
  uint64_t v63 = &a2[v61];
  int v64 = v32(&a1[v61], 1, v30);
  int v65 = v32(v63, 1, v30);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v62, v63, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v62, 0, 1, v30);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v62, v30);
LABEL_18:
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v62, v63, v30);
LABEL_19:
  uint64_t v67 = a3[17];
  uint64_t v68 = &a1[v67];
  uint64_t v69 = &a2[v67];
  uint64_t v71 = *(void *)v69;
  uint64_t v70 = *((void *)v69 + 1);
  *(void *)uint64_t v68 = v71;
  *((void *)v68 + 1) = v70;
  swift_bridgeObjectRelease();
  uint64_t v72 = a3[18];
  uint64_t v73 = &a1[v72];
  uint64_t v74 = &a2[v72];
  uint64_t v75 = type metadata accessor for SnippetHeaderModel();
  uint64_t v76 = *(void *)(v75 - 8);
  uint64_t v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48);
  int v78 = v77(v73, 1, v75);
  int v79 = v77(v74, 1, v75);
  if (!v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v73, v74, v30);
      uint64_t v82 = *(int *)(v75 + 20);
      uint64_t v83 = &v73[v82];
      uint64_t v84 = &v74[v82];
      uint64_t v86 = *(void *)v84;
      uint64_t v85 = *((void *)v84 + 1);
      *(void *)uint64_t v83 = v86;
      *((void *)v83 + 1) = v85;
      swift_bridgeObjectRelease();
      uint64_t v87 = *(int *)(v75 + 24);
      uint64_t v88 = &v73[v87];
      uint64_t v89 = &v74[v87];
      uint64_t v91 = *(void *)v89;
      uint64_t v90 = *((void *)v89 + 1);
      *(void *)uint64_t v88 = v91;
      *((void *)v88 + 1) = v90;
      swift_bridgeObjectRelease();
      return a1;
    }
    _s10WellnessUI21TemperatureQueryModelVWOhTm_0((uint64_t)v73, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v79)
  {
LABEL_24:
    uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v73, v74, *(void *)(*(void *)(v80 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v73, v74, v30);
  *(_OWORD *)&v73[*(int *)(v75 + 20)] = *(_OWORD *)&v74[*(int *)(v75 + 20)];
  *(_OWORD *)&v73[*(int *)(v75 + 24)] = *(_OWORD *)&v74[*(int *)(v75 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemperatureQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261841E70);
}

uint64_t sub_261841E70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[10];
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 2147483646)
  {
    unint64_t v14 = *(void *)(a1 + a3[11] + 8);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 - 1;
    if (v15 < 0) {
      int v15 = -1;
    }
    return (v15 + 1);
  }
  else
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[18];
    return v17(v19, a2, v18);
  }
}

uint64_t storeEnumTagSinglePayload for TemperatureQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_261842020);
}

uint64_t sub_261842020(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[10];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[11] + 8) = a2;
  }
  else
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[18];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void type metadata completion function for TemperatureQueryModel()
{
  _s10SnippetKit11AppPunchoutVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, MEMORY[0x263F762C0]);
  if (v0 <= 0x3F)
  {
    _s10SnippetKit11AppPunchoutVSgMaTm_0(319, &lazy cache variable for type metadata for SpeakableString?, MEMORY[0x263F6D0A0]);
    if (v1 <= 0x3F)
    {
      _s10SnippetKit11AppPunchoutVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

unsigned char *storeEnumTagSinglePayload for TemperatureQueryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *uint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2618423F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TemperatureQueryModel.CodingKeys()
{
  return &unk_270D87320;
}

uint64_t specialized TemperatureQueryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5665676172657661 && a2 == 0xEC00000065756C61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6563655274736F6DLL && a2 == 0xEF65756C6156746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000261883BA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883940 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000261883960 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000261883BC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6972745374696E75 && a2 == 0xEA0000000000676ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002618839A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883800)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 14;
    }
    else {
      return 15;
    }
  }
}

uint64_t WatchRingsModel.exerciseGoalValue.getter()
{
  return *(void *)v0;
}

uint64_t WatchRingsModel.exerciseGoalValue.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.exerciseGoalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t WatchRingsModel.exerciseTotalValue.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t WatchRingsModel.exerciseTotalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.exerciseTotalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t WatchRingsModel.moveGoalValue.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t WatchRingsModel.moveGoalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.moveGoalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t WatchRingsModel.moveTotalValue.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t WatchRingsModel.moveTotalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 48) = result;
  *(unsigned char *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.moveTotalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t WatchRingsModel.standGoalValue.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t WatchRingsModel.standGoalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 64) = result;
  *(unsigned char *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.standGoalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t WatchRingsModel.standTotalValue.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t WatchRingsModel.standTotalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 80) = result;
  *(unsigned char *)(v2 + 88) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.standTotalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

void __swiftcall WatchRingsModel.init(exerciseGoalValue:exerciseTotalValue:moveGoalValue:moveTotalValue:standGoalValue:standTotalValue:)(WellnessUI::WatchRingsModel *__return_ptr retstr, Swift::Double exerciseGoalValue, Swift::Double exerciseTotalValue, Swift::Double moveGoalValue, Swift::Double moveTotalValue, Swift::Double standGoalValue, Swift::Double standTotalValue)
{
  retstr->exerciseGoalValue.value = exerciseGoalValue;
  retstr->exerciseGoalValue.is_nil = 0;
  retstr->exerciseTotalValue.value = exerciseTotalValue;
  retstr->exerciseTotalValue.is_nil = 0;
  retstr->moveGoalValue.value = moveGoalValue;
  retstr->moveGoalValue.is_nil = 0;
  retstr->moveTotalValue.value = moveTotalValue;
  retstr->moveTotalValue.is_nil = 0;
  retstr->standGoalValue.value = standGoalValue;
  retstr->standGoalValue.is_nil = 0;
  retstr->standTotalValue.value = standTotalValue;
  retstr->standTotalValue.is_nil = 0;
}

unint64_t WatchRingsModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x6C616F4765766F6DLL;
      break;
    case 3:
      unint64_t result = 0x61746F5465766F6DLL;
      break;
    case 4:
      unint64_t result = 0x616F47646E617473;
      break;
    case 5:
      unint64_t result = 0x746F54646E617473;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WatchRingsModel.CodingKeys()
{
  return WatchRingsModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WatchRingsModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized WatchRingsModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance WatchRingsModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WatchRingsModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WatchRingsModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t WatchRingsModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WatchRingsModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v1 + 16);
  int v19 = *(unsigned __int8 *)(v1 + 24);
  uint64_t v18 = *(void *)(v1 + 32);
  int v17 = *(unsigned __int8 *)(v1 + 40);
  uint64_t v16 = *(void *)(v1 + 48);
  int v7 = *(unsigned __int8 *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  int v14 = *(unsigned __int8 *)(v1 + 72);
  int v15 = v7;
  uint64_t v12 = *(void *)(v1 + 80);
  uint64_t v13 = v8;
  v11[1] = *(unsigned __int8 *)(v1 + 88);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v27 = 0;
  uint64_t v9 = v21;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v9)
  {
    char v26 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v25 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v24 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v23 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v22 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys);
  }
  return result;
}

uint64_t WatchRingsModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WatchRingsModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WatchRingsModel.CodingKeys and conformance WatchRingsModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v38 = 0;
    uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v11 = v10;
    char v37 = 1;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v31 = v13;
    uint64_t v32 = v12;
    char v36 = 2;
    uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v29 = v15;
    uint64_t v30 = v14;
    char v35 = 3;
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v27 = v17;
    uint64_t v28 = v16;
    char v34 = 4;
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    HIDWORD(v25) = v19;
    uint64_t v26 = v18;
    char v33 = 5;
    uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v22 = v8;
    char v24 = v23;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v22, v5);
    *(void *)a2 = v9;
    *(unsigned char *)(a2 + 8) = v11 & 1;
    *(void *)(a2 + 16) = v32;
    *(unsigned char *)(a2 + 24) = v31 & 1;
    *(void *)(a2 + 32) = v30;
    *(unsigned char *)(a2 + 40) = v29 & 1;
    *(void *)(a2 + 48) = v28;
    *(unsigned char *)(a2 + 56) = v27 & 1;
    *(void *)(a2 + 64) = v26;
    *(unsigned char *)(a2 + 72) = BYTE4(v25) & 1;
    *(void *)(a2 + 80) = v21;
    *(unsigned char *)(a2 + 88) = v24 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WatchRingsModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return WatchRingsModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WatchRingsModel(void *a1)
{
  return WatchRingsModel.encode(to:)(a1);
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for WatchRingsModel(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WatchRingsModel(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 89) = v3;
  return result;
}

ValueMetadata *type metadata accessor for WatchRingsModel()
{
  return &type metadata for WatchRingsModel;
}

uint64_t getEnumTagSinglePayload for WatchRingsModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for WatchRingsModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x26184367CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for WatchRingsModel.CodingKeys()
{
  return &unk_270D87440;
}

uint64_t specialized WatchRingsModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x8000000261883BE0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883C00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C616F4765766F6DLL && a2 == 0xED000065756C6156 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x61746F5465766F6DLL && a2 == 0xEE0065756C61566CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x616F47646E617473 && a2 == 0xEE0065756C61566CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746F54646E617473 && a2 == 0xEF65756C61566C61)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t OxygenSaturationQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t OxygenSaturationQueryModel.appPunchout.setter(uint64_t a1)
{
  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*OxygenSaturationQueryModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.averageValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 20));
}

uint64_t type metadata accessor for OxygenSaturationQueryModel()
{
  uint64_t result = type metadata singleton initialization cache for OxygenSaturationQueryModel;
  if (!type metadata singleton initialization cache for OxygenSaturationQueryModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t OxygenSaturationQueryModel.averageValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 20);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.averageValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.maxValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 24));
}

uint64_t OxygenSaturationQueryModel.maxValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.maxValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.minValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 28));
}

uint64_t OxygenSaturationQueryModel.minValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.minValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.mostRecentValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 32));
}

uint64_t OxygenSaturationQueryModel.mostRecentValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 32);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.mostRecentValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 36), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t OxygenSaturationQueryModel.dateLabel.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 36), &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t (*OxygenSaturationQueryModel.dateLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.averageValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OxygenSaturationQueryModel.averageValueString.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 40));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.averageValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.maxValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OxygenSaturationQueryModel.maxValueString.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.maxValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.minValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OxygenSaturationQueryModel.minValueString.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 48));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.minValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.mostRecentValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OxygenSaturationQueryModel.mostRecentValueString.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 52));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.mostRecentValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.unit.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OxygenSaturationQueryModel.unit.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 56));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.unit.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.averageLabelString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OxygenSaturationQueryModel.averageLabelString.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for OxygenSaturationQueryModel() + 60));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.averageLabelString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 64), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t OxygenSaturationQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 64), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*OxygenSaturationQueryModel.snippetHeaderModel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t OxygenSaturationQueryModel.init(averageValue:maxValue:minValue:mostRecentValue:unit:dateLabel:url:averageLabelString:headerModel:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v80 = a8;
  int v70 = a6;
  int v73 = a4;
  uint64_t v78 = a3;
  uint64_t v87 = a15;
  uint64_t v88 = a16;
  uint64_t v86 = a14;
  uint64_t v89 = a13;
  uint64_t v90 = a12;
  uint64_t v83 = a7;
  uint64_t v84 = a11;
  uint64_t v81 = a5;
  uint64_t v82 = a10;
  BOOL v71 = (a2 & 1) == 0;
  BOOL v72 = (a4 & 1) == 0;
  BOOL v74 = (a6 & 1) == 0;
  BOOL v79 = (a8 & 1) == 0;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for AppPunchout();
  uint64_t v22 = *(void *)(v76 - 8);
  uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
  uint64_t v77 = v22 + 56;
  v75(a9, 1, 1, v76);
  uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v69 = a9 + Model[9];
  uint64_t v24 = v69;
  uint64_t v25 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  uint64_t v26 = (uint64_t *)(a9 + Model[10]);
  uint64_t *v26 = 0;
  v26[1] = 0;
  int v27 = (uint64_t *)(a9 + Model[11]);
  uint64_t *v27 = 0;
  v27[1] = 0;
  uint64_t v28 = (uint64_t *)(a9 + Model[12]);
  uint64_t *v28 = 0;
  v28[1] = 0;
  int v29 = (uint64_t *)(a9 + Model[13]);
  uint64_t v85 = v29;
  uint64_t *v29 = 0;
  v29[1] = 0;
  uint64_t v30 = (void *)(a9 + Model[15]);
  void *v30 = 0;
  v30[1] = 0;
  uint64_t v68 = a9 + Model[16];
  uint64_t v31 = v68;
  uint64_t v32 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  BOOL v33 = (a1 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v71 && v33) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = a1;
  }
  uint64_t v35 = a9 + Model[5];
  *(void *)uint64_t v35 = v34;
  *(unsigned char *)(v35 + 8) = (a2 | v33) & 1;
  uint64_t v36 = v78;
  BOOL v37 = (v78 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v72 && v37) {
    uint64_t v36 = 0;
  }
  char v38 = v73 | v37;
  uint64_t v39 = a9 + Model[6];
  *(void *)uint64_t v39 = v36;
  *(unsigned char *)(v39 + 8) = v38 & 1;
  uint64_t v40 = v81;
  BOOL v41 = (v81 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v74 && v41) {
    uint64_t v40 = 0;
  }
  char v42 = v70 | v41;
  uint64_t v43 = a9 + Model[7];
  *(void *)uint64_t v43 = v40;
  *(unsigned char *)(v43 + 8) = v42 & 1;
  uint64_t v44 = v83;
  BOOL v45 = (v83 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  char v46 = v80;
  if (v79 && v45) {
    uint64_t v44 = 0;
  }
  uint64_t v47 = Model[14];
  uint64_t v48 = a9 + Model[8];
  *(void *)uint64_t v48 = v44;
  *(unsigned char *)(v48 + 8) = (v46 | v45) & 1;
  uint64_t v49 = (void *)(a9 + v47);
  uint64_t v50 = v84;
  void *v49 = v82;
  v49[1] = v50;
  outlined assign with copy of SpeakableString?(v90, v69, &demangling cache variable for type metadata for SpeakableString?);
  OxygenSaturationQueryModel.createAppPunchout(url:)(v89);
  v75((uint64_t)v21, 0, 1, v76);
  outlined assign with take of AppPunchout?((uint64_t)v21, a9, &demangling cache variable for type metadata for AppPunchout?);
  swift_bridgeObjectRelease();
  uint64_t v51 = v87;
  uint64_t v52 = v88;
  void *v30 = v86;
  v30[1] = v51;
  outlined assign with copy of SpeakableString?(v52, v68, &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v53 = GenericQueryModel.roundUp(inputValue:)(*(void *)v35, *(unsigned char *)(v35 + 8));
  uint64_t v55 = v54;
  swift_bridgeObjectRelease();
  uint64_t *v26 = v53;
  v26[1] = v55;
  uint64_t v56 = GenericQueryModel.roundUp(inputValue:)(*(void *)v39, *(unsigned char *)(v39 + 8));
  uint64_t v58 = v57;
  swift_bridgeObjectRelease();
  uint64_t *v27 = v56;
  v27[1] = v58;
  uint64_t v59 = GenericQueryModel.roundUp(inputValue:)(*(void *)v43, *(unsigned char *)(v43 + 8));
  uint64_t v61 = v60;
  swift_bridgeObjectRelease();
  uint64_t *v28 = v59;
  v28[1] = v61;
  uint64_t v62 = GenericQueryModel.roundUp(inputValue:)(*(void *)v48, *(unsigned char *)(v48 + 8));
  uint64_t v64 = v63;
  outlined destroy of Font.Design?(v52, &demangling cache variable for type metadata for SnippetHeaderModel?);
  outlined destroy of Font.Design?(v89, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(v90, &demangling cache variable for type metadata for SpeakableString?);
  int v65 = v85;
  uint64_t result = swift_bridgeObjectRelease();
  *int v65 = v62;
  v65[1] = v64;
  return result;
}

uint64_t OxygenSaturationQueryModel.createAppPunchout(url:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  unsigned int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL.absoluteString.getter();
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t OxygenSaturationQueryModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x68636E7550707061;
  switch(a1)
  {
    case 1:
      return 0x5665676172657661;
    case 2:
      unsigned int v3 = 1450729837;
      return v3 | 0x65756C6100000000;
    case 3:
      unsigned int v3 = 1450076525;
      return v3 | 0x65756C6100000000;
    case 4:
      return 0x6563655274736F6DLL;
    case 5:
      return 0x6562614C65746164;
    case 6:
    case 11:
    case 12:
      return 0xD000000000000012;
    case 7:
      unsigned int v4 = 1450729837;
      goto LABEL_10;
    case 8:
      unsigned int v4 = 1450076525;
LABEL_10:
      uint64_t result = v4 | 0x65756C6100000000;
      break;
    case 9:
      uint64_t result = 0xD000000000000015;
      break;
    case 10:
      uint64_t result = 1953066613;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance OxygenSaturationQueryModel.CodingKeys()
{
  return OxygenSaturationQueryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance OxygenSaturationQueryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized OxygenSaturationQueryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance OxygenSaturationQueryModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 13;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OxygenSaturationQueryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OxygenSaturationQueryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t OxygenSaturationQueryModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<OxygenSaturationQueryModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for AppPunchout();
  _s10SnippetKit11AppPunchoutVACSEAAWlTm_5(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for OxygenSaturationQueryModel();
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[10] = 5;
    type metadata accessor for SpeakableString();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_5(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[6] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[5] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[4] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[3] = 12;
    type metadata accessor for SnippetHeaderModel();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_5(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys);
  }
  return result;
}

uint64_t OxygenSaturationQueryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v81 = (uint64_t)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v91 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v92 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<OxygenSaturationQueryModel.CodingKeys>);
  uint64_t v90 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  uint64_t v97 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  char v11 = (int *)(Model - 8);
  MEMORY[0x270FA5388](Model);
  int v13 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AppPunchout();
  int v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v89 = v14;
  v15(v13, 1, 1);
  uint64_t v16 = &v13[v11[7]];
  *(void *)uint64_t v16 = 0;
  uint64_t v88 = v16;
  v16[8] = 1;
  int v17 = &v13[v11[8]];
  *(void *)int v17 = 0;
  uint64_t v87 = (uint64_t *)v17;
  v17[8] = 1;
  uint64_t v18 = &v13[v11[9]];
  *(void *)uint64_t v18 = 0;
  uint64_t v86 = (uint64_t *)v18;
  v18[8] = 1;
  uint64_t v19 = &v13[v11[10]];
  *(void *)uint64_t v19 = 0;
  uint64_t v84 = (uint64_t *)v19;
  v19[8] = 1;
  uint64_t v20 = (uint64_t)&v13[v11[11]];
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
  uint64_t v83 = v20;
  uint64_t v85 = v21;
  v22(v20, 1, 1);
  char v23 = &v13[v11[12]];
  *(void *)char v23 = 0;
  *((void *)v23 + 1) = 0;
  uint64_t v82 = v23;
  uint64_t v24 = &v13[v11[13]];
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  uint64_t v25 = &v13[v11[14]];
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = 0;
  uint64_t v26 = &v13[v11[15]];
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = 0;
  int v27 = (uint64_t *)&v13[v11[16]];
  uint64_t *v27 = 0;
  v27[1] = 0;
  uint64_t v28 = (uint64_t *)&v13[v11[17]];
  uint64_t *v28 = 0;
  v28[1] = 0;
  uint64_t v29 = v11[18];
  uint64_t v96 = v13;
  uint64_t v30 = (uint64_t)&v13[v29];
  uint64_t v31 = type metadata accessor for SnippetHeaderModel();
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56);
  uint64_t v79 = v30;
  v32(v30, 1, 1, v31);
  BOOL v33 = a1;
  uint64_t v34 = a1[3];
  int v95 = v33;
  __swift_project_boxed_opaque_existential_1(v33, v34);
  lazy protocol witness table accessor for type OxygenSaturationQueryModel.CodingKeys and conformance OxygenSaturationQueryModel.CodingKeys();
  uint64_t v35 = v94;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v35)
  {
    uint64_t v75 = (uint64_t)v96;
  }
  else
  {
    uint64_t v36 = v88;
    uint64_t v94 = v24;
    uint64_t v78 = v25;
    uint64_t v77 = v26;
    uint64_t v38 = v90;
    uint64_t v37 = (uint64_t)v91;
    char v110 = 0;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_5(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    uint64_t v39 = (uint64_t)v92;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v39, (uint64_t)v96, &demangling cache variable for type metadata for AppPunchout?);
    char v109 = 1;
    *(void *)uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v36[8] = v41 & 1;
    char v108 = 2;
    uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v43 = v87;
    uint64_t *v87 = v42;
    *((unsigned char *)v43 + 8) = v44 & 1;
    char v107 = 3;
    uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v46 = v86;
    *uint64_t v86 = v45;
    *((unsigned char *)v46 + 8) = v47 & 1;
    char v106 = 4;
    uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v49 = v84;
    uint64_t *v84 = v48;
    *((unsigned char *)v49 + 8) = v50 & 1;
    char v105 = 5;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_5(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v37, v83, &demangling cache variable for type metadata for SpeakableString?);
    char v104 = 6;
    uint64_t v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v53 = v52;
    uint64_t v54 = v82;
    uint64_t v92 = (char *)v51;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v54 = v92;
    *((void *)v54 + 1) = v53;
    char v103 = 7;
    uint64_t v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v57 = v56;
    uint64_t v58 = v94;
    uint64_t v92 = (char *)v55;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v58 = v92;
    *((void *)v58 + 1) = v57;
    char v102 = 8;
    uint64_t v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v61 = v60;
    uint64_t v62 = (uint64_t *)v78;
    swift_bridgeObjectRelease();
    *uint64_t v62 = v59;
    v62[1] = v61;
    char v101 = 9;
    uint64_t v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v65 = v64;
    uint64_t v66 = (uint64_t *)v77;
    swift_bridgeObjectRelease();
    *uint64_t v66 = v63;
    v66[1] = v65;
    char v100 = 10;
    uint64_t v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v69 = v68;
    swift_bridgeObjectRelease();
    uint64_t *v27 = v67;
    v27[1] = v69;
    char v99 = 11;
    uint64_t v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v72 = v71;
    swift_bridgeObjectRelease();
    uint64_t *v28 = v70;
    v28[1] = v72;
    char v98 = 12;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_5(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v73 = v93;
    BOOL v74 = v97;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v74, v73);
    uint64_t v75 = (uint64_t)v96;
    outlined assign with take of AppPunchout?(v81, v79, &demangling cache variable for type metadata for SnippetHeaderModel?);
    outlined init with copy of OxygenSaturationQueryModel(v75, v80);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v95);
  return outlined destroy of OxygenSaturationQueryModel(v75, (uint64_t (*)(void))type metadata accessor for OxygenSaturationQueryModel);
}

uint64_t outlined init with copy of OxygenSaturationQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t base witness table accessor for Decodable in OxygenSaturationQueryModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_5(&lazy protocol witness table cache variable for type OxygenSaturationQueryModel and conformance OxygenSaturationQueryModel, (void (*)(uint64_t))type metadata accessor for OxygenSaturationQueryModel);
}

uint64_t base witness table accessor for Encodable in OxygenSaturationQueryModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_5(&lazy protocol witness table cache variable for type OxygenSaturationQueryModel and conformance OxygenSaturationQueryModel, (void (*)(uint64_t))type metadata accessor for OxygenSaturationQueryModel);
}

uint64_t _s10SnippetKit11AppPunchoutVACSEAAWlTm_5(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance OxygenSaturationQueryModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return OxygenSaturationQueryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance OxygenSaturationQueryModel(void *a1)
{
  return OxygenSaturationQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for OxygenSaturationQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    int v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    *(void *)int v13 = *(void *)v14;
    v13[8] = v14[8];
    int v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = a3[7];
    uint64_t v18 = a3[8];
    uint64_t v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = (char *)a1 + v18;
    uint64_t v22 = (char *)a2 + v18;
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = a3[9];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = type metadata accessor for SpeakableString();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v69 = v27;
    uint64_t v70 = v26;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    uint64_t v29 = a3[10];
    uint64_t v30 = a3[11];
    uint64_t v31 = (uint64_t *)((char *)a1 + v29);
    uint64_t v32 = (uint64_t *)((char *)a2 + v29);
    uint64_t v33 = v32[1];
    void *v31 = *v32;
    v31[1] = v33;
    uint64_t v34 = (uint64_t *)((char *)a1 + v30);
    uint64_t v35 = (uint64_t *)((char *)a2 + v30);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = a3[12];
    uint64_t v38 = a3[13];
    uint64_t v39 = (uint64_t *)((char *)a1 + v37);
    uint64_t v40 = (uint64_t *)((char *)a2 + v37);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = (uint64_t *)((char *)a1 + v38);
    uint64_t v43 = (uint64_t *)((char *)a2 + v38);
    uint64_t v44 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v44;
    uint64_t v45 = a3[14];
    uint64_t v46 = a3[15];
    char v47 = (uint64_t *)((char *)a1 + v45);
    uint64_t v48 = (uint64_t *)((char *)a2 + v45);
    uint64_t v49 = v48[1];
    *char v47 = *v48;
    v47[1] = v49;
    char v50 = (uint64_t *)((char *)a1 + v46);
    uint64_t v51 = (uint64_t *)((char *)a2 + v46);
    uint64_t v52 = *v51;
    uint64_t v53 = v51[1];
    uint64_t v54 = a3[16];
    uint64_t v71 = (char *)a2 + v54;
    __dst = (char *)a1 + v54;
    void *v50 = v52;
    v50[1] = v53;
    uint64_t v55 = type metadata accessor for SnippetHeaderModel();
    uint64_t v68 = *(void *)(v55 - 8);
    uint64_t v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v56(v71, 1, v55))
    {
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v71, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(__dst, v71, v70);
      uint64_t v58 = *(int *)(v55 + 20);
      uint64_t v59 = &__dst[v58];
      uint64_t v60 = &v71[v58];
      uint64_t v61 = *((void *)v60 + 1);
      *(void *)uint64_t v59 = *(void *)v60;
      *((void *)v59 + 1) = v61;
      uint64_t v62 = *(int *)(v55 + 24);
      uint64_t v63 = &__dst[v62];
      uint64_t v64 = &v71[v62];
      uint64_t v65 = *((void *)v64 + 1);
      *(void *)uint64_t v63 = *(void *)v64;
      *((void *)v63 + 1) = v65;
      uint64_t v66 = *(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v66(__dst, 0, 1, v55);
    }
  }
  return a1;
}

uint64_t destroy for OxygenSaturationQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t v7 = type metadata accessor for SpeakableString();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + *(int *)(a2 + 64);
  uint64_t v10 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  if (!result)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for OxygenSaturationQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  int v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)int v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v67 = v25;
  uint64_t v68 = v24;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  uint64_t v27 = a3[10];
  uint64_t v28 = a3[11];
  uint64_t v29 = &a1[v27];
  uint64_t v30 = &a2[v27];
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = *(void *)v30;
  *((void *)v29 + 1) = v31;
  uint64_t v32 = &a1[v28];
  uint64_t v33 = &a2[v28];
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = v34;
  uint64_t v35 = a3[12];
  uint64_t v36 = a3[13];
  uint64_t v37 = &a1[v35];
  uint64_t v38 = &a2[v35];
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v39;
  uint64_t v40 = &a1[v36];
  uint64_t v41 = &a2[v36];
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = v42;
  uint64_t v43 = a3[14];
  uint64_t v44 = a3[15];
  uint64_t v45 = &a1[v43];
  uint64_t v46 = &a2[v43];
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = v47;
  uint64_t v48 = &a1[v44];
  uint64_t v49 = &a2[v44];
  uint64_t v50 = *(void *)v49;
  uint64_t v51 = *((void *)v49 + 1);
  uint64_t v52 = a3[16];
  uint64_t v69 = &a2[v52];
  __dst = &a1[v52];
  *(void *)uint64_t v48 = v50;
  *((void *)v48 + 1) = v51;
  uint64_t v53 = type metadata accessor for SnippetHeaderModel();
  uint64_t v66 = *(void *)(v53 - 8);
  uint64_t v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v54(v69, 1, v53))
  {
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v69, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(__dst, v69, v68);
    uint64_t v56 = *(int *)(v53 + 20);
    uint64_t v57 = &__dst[v56];
    uint64_t v58 = &v69[v56];
    uint64_t v59 = *((void *)v58 + 1);
    *(void *)uint64_t v57 = *(void *)v58;
    *((void *)v57 + 1) = v59;
    uint64_t v60 = *(int *)(v53 + 24);
    uint64_t v61 = &__dst[v60];
    uint64_t v62 = &v69[v60];
    uint64_t v63 = *((void *)v62 + 1);
    *(void *)uint64_t v61 = *(void *)v62;
    *((void *)v61 + 1) = v63;
    uint64_t v64 = *(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v64(__dst, 0, 1, v53);
  }
  return a1;
}

char *assignWithCopy for OxygenSaturationQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  int v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)int v13 = v15;
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = a3[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)uint64_t v21 = v23;
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)uint64_t v25 = v27;
  uint64_t v28 = a3[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = type metadata accessor for SpeakableString();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v31);
LABEL_12:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v29, v30, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v29, v30, v31);
LABEL_13:
  uint64_t v37 = a3[10];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = *((void *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[11];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[12];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = *((void *)v45 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[13];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  *(void *)uint64_t v47 = *(void *)v48;
  *((void *)v47 + 1) = *((void *)v48 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v49 = a3[14];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  *(void *)uint64_t v50 = *(void *)v51;
  *((void *)v50 + 1) = *((void *)v51 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v52 = a3[15];
  uint64_t v53 = &a1[v52];
  uint64_t v54 = &a2[v52];
  *(void *)uint64_t v53 = *(void *)v54;
  *((void *)v53 + 1) = *((void *)v54 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v55 = a3[16];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  uint64_t v58 = type metadata accessor for SnippetHeaderModel();
  uint64_t v59 = *(void *)(v58 - 8);
  uint64_t v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  int v61 = v60(v56, 1, v58);
  int v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v56, v57, v31);
      uint64_t v72 = *(int *)(v58 + 20);
      uint64_t v73 = &v56[v72];
      BOOL v74 = &v57[v72];
      *(void *)uint64_t v73 = *(void *)v74;
      *((void *)v73 + 1) = *((void *)v74 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v75 = *(int *)(v58 + 24);
      uint64_t v76 = &v56[v75];
      uint64_t v77 = &v57[v75];
      *(void *)uint64_t v76 = *(void *)v77;
      *((void *)v76 + 1) = *((void *)v77 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of OxygenSaturationQueryModel((uint64_t)v56, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v62)
  {
LABEL_18:
    uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v56, v57, *(void *)(*(void *)(v70 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v56, v57, v31);
  uint64_t v63 = *(int *)(v58 + 20);
  uint64_t v64 = &v56[v63];
  uint64_t v65 = &v57[v63];
  *(void *)uint64_t v64 = *(void *)v65;
  *((void *)v64 + 1) = *((void *)v65 + 1);
  uint64_t v66 = *(int *)(v58 + 24);
  uint64_t v67 = &v56[v66];
  uint64_t v68 = &v57[v66];
  *(void *)uint64_t v67 = *(void *)v68;
  *((void *)v67 + 1) = *((void *)v68 + 1);
  uint64_t v69 = *(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69(v56, 0, 1, v58);
  return a1;
}

uint64_t outlined destroy of OxygenSaturationQueryModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for OxygenSaturationQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  int v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)int v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  uint64_t v27 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  uint64_t v28 = a3[13];
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  *(_OWORD *)&a1[v28] = *(_OWORD *)&a2[v28];
  uint64_t v29 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  uint64_t v30 = a3[16];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = type metadata accessor for SnippetHeaderModel();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v31, v32, v24);
    *(_OWORD *)&v31[*(int *)(v33 + 20)] = *(_OWORD *)&v32[*(int *)(v33 + 20)];
    *(_OWORD *)&v31[*(int *)(v33 + 24)] = *(_OWORD *)&v32[*(int *)(v33 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

char *assignWithTake for OxygenSaturationQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = &a1[v13];
  uint64_t v17 = &a2[v13];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = a3[9];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for SpeakableString();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_12:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v25, v26, v27);
LABEL_13:
  uint64_t v33 = a3[10];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v37 = *(void *)v35;
  uint64_t v36 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = v37;
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[11];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  uint64_t v42 = *(void *)v40;
  uint64_t v41 = *((void *)v40 + 1);
  *(void *)uint64_t v39 = v42;
  *((void *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[12];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  uint64_t v47 = *(void *)v45;
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = v47;
  *((void *)v44 + 1) = v46;
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[13];
  uint64_t v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  uint64_t v52 = *(void *)v50;
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)uint64_t v49 = v52;
  *((void *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[14];
  uint64_t v54 = &a1[v53];
  uint64_t v55 = &a2[v53];
  uint64_t v57 = *(void *)v55;
  uint64_t v56 = *((void *)v55 + 1);
  *(void *)uint64_t v54 = v57;
  *((void *)v54 + 1) = v56;
  swift_bridgeObjectRelease();
  uint64_t v58 = a3[15];
  uint64_t v59 = &a1[v58];
  uint64_t v60 = &a2[v58];
  uint64_t v62 = *(void *)v60;
  uint64_t v61 = *((void *)v60 + 1);
  *(void *)uint64_t v59 = v62;
  *((void *)v59 + 1) = v61;
  swift_bridgeObjectRelease();
  uint64_t v63 = a3[16];
  uint64_t v64 = &a1[v63];
  uint64_t v65 = &a2[v63];
  uint64_t v66 = type metadata accessor for SnippetHeaderModel();
  uint64_t v67 = *(void *)(v66 - 8);
  uint64_t v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
  int v69 = v68(v64, 1, v66);
  int v70 = v68(v65, 1, v66);
  if (!v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v64, v65, v27);
      uint64_t v73 = *(int *)(v66 + 20);
      BOOL v74 = &v64[v73];
      uint64_t v75 = &v65[v73];
      uint64_t v77 = *(void *)v75;
      uint64_t v76 = *((void *)v75 + 1);
      *(void *)BOOL v74 = v77;
      *((void *)v74 + 1) = v76;
      swift_bridgeObjectRelease();
      uint64_t v78 = *(int *)(v66 + 24);
      uint64_t v79 = &v64[v78];
      uint64_t v80 = &v65[v78];
      uint64_t v82 = *(void *)v80;
      uint64_t v81 = *((void *)v80 + 1);
      *(void *)uint64_t v79 = v82;
      *((void *)v79 + 1) = v81;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of OxygenSaturationQueryModel((uint64_t)v64, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v70)
  {
LABEL_18:
    uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v64, v65, *(void *)(*(void *)(v71 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v64, v65, v27);
  *(_OWORD *)&v64[*(int *)(v66 + 20)] = *(_OWORD *)&v65[*(int *)(v66 + 20)];
  *(_OWORD *)&v64[*(int *)(v66 + 24)] = *(_OWORD *)&v65[*(int *)(v66 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  return a1;
}

uint64_t getEnumTagSinglePayload for OxygenSaturationQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261847600);
}

uint64_t sub_261847600(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[9];
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 2147483646)
  {
    unint64_t v14 = *(void *)(a1 + a3[10] + 8);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 - 1;
    if (v15 < 0) {
      int v15 = -1;
    }
    return (v15 + 1);
  }
  else
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[16];
    return v17(v19, a2, v18);
  }
}

uint64_t storeEnumTagSinglePayload for OxygenSaturationQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2618477B0);
}

uint64_t sub_2618477B0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[9];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[10] + 8) = a2;
  }
  else
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[16];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void type metadata completion function for OxygenSaturationQueryModel()
{
  _s10SnippetKit11AppPunchoutVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, MEMORY[0x263F762C0]);
  if (v0 <= 0x3F)
  {
    _s10SnippetKit11AppPunchoutVSgMaTm_0(319, &lazy cache variable for type metadata for SpeakableString?, MEMORY[0x263F6D0A0]);
    if (v1 <= 0x3F)
    {
      _s10SnippetKit11AppPunchoutVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for OxygenSaturationQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for OxygenSaturationQueryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *uint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x261847C18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

void *type metadata accessor for OxygenSaturationQueryModel.CodingKeys()
{
  return &unk_270D874D0;
}

uint64_t specialized OxygenSaturationQueryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5665676172657661 && a2 == 0xEC00000065756C61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6563655274736F6DLL && a2 == 0xEF65756C6156746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883940 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000261883960 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 1953066613 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002618839A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883800)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 12;
    }
    else {
      return 13;
    }
  }
}

uint64_t OxygenSaturationQuerySnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OxygenSaturationQueryModel(v1, a1, (uint64_t (*)(void))type metadata accessor for OxygenSaturationQueryModel);
}

uint64_t OxygenSaturationQuerySnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for OxygenSaturationQuerySnippet() + 20));
  type metadata accessor for Context();
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_2(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  *unsigned int v4 = EnvironmentObject.init()();
  v4[1] = v5;
  return outlined init with take of OxygenSaturationQueryModel(a1, a2, (uint64_t (*)(void))type metadata accessor for OxygenSaturationQueryModel);
}

uint64_t type metadata accessor for OxygenSaturationQuerySnippet()
{
  uint64_t result = type metadata singleton initialization cache for OxygenSaturationQuerySnippet;
  if (!type metadata singleton initialization cache for OxygenSaturationQuerySnippet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t OxygenSaturationQuerySnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v163 = a1;
  uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
  uint64_t v153 = *(void *)(v155 - 8);
  MEMORY[0x270FA5388](v155);
  uint64_t v151 = (char *)&v125 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v156 = *(void *)(v3 - 8);
  uint64_t v157 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v152 = (char *)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v154 = (char *)&v125 - v6;
  uint64_t v138 = type metadata accessor for SingleDataPointView();
  MEMORY[0x270FA5388](v138);
  uint64_t v137 = (uint64_t *)((char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v140 = type metadata accessor for MultipleDataPointView();
  MEMORY[0x270FA5388](v140);
  char v139 = (uint64_t *)((char *)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t Snippet = type metadata accessor for OxygenSaturationQuerySnippet();
  uint64_t v148 = *(void *)(Snippet - 8);
  uint64_t v10 = MEMORY[0x270FA5388](Snippet - 8);
  uint64_t v150 = (uint64_t)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v142 = (uint64_t)&v125 - v13;
  uint64_t v149 = v14;
  MEMORY[0x270FA5388](v12);
  uint64_t v143 = (uint64_t)&v125 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v158 = (uint64_t)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SnippetHeaderView();
  uint64_t v144 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v159 = (uint64_t)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v125 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = (char *)&v125 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for AppPunchout();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v161 = v26;
  uint64_t v162 = v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v146 = v29;
  uint64_t v147 = (char *)&v125 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v160 = (char *)&v125 - v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v31 - 8);
  uint64_t v33 = (char *)&v125 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for SpeakableString();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v37 = (char *)&v125 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v39 = (uint64_t *)(v1 + *(int *)(Model + 56));
  if (!v39[1]) {
    goto LABEL_7;
  }
  uint64_t v40 = (int *)Model;
  uint64_t v136 = v39[1];
  uint64_t v141 = v22;
  uint64_t v135 = *v39;
  uint64_t v41 = v1;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 36), (uint64_t)v33, &demangling cache variable for type metadata for SpeakableString?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v37, v33, v34);
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, (uint64_t)v25, &demangling cache variable for type metadata for AppPunchout?);
    uint64_t v45 = v161;
    uint64_t v44 = v162;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v162 + 48))(v25, 1, v161) == 1)
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
      uint64_t v42 = &demangling cache variable for type metadata for AppPunchout?;
      uint64_t v43 = (uint64_t)v25;
      goto LABEL_6;
    }
    uint64_t v132 = v35;
    uint64_t v133 = v34;
    uint64_t v134 = v37;
    uint64_t v48 = v44 + 32;
    uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    v49(v160, v25, v45);
    uint64_t v50 = v158;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v41 + v40[16], v158, &demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v51 = v159;
    uint64_t v52 = (uint64_t *)(v159 + *(int *)(v18 + 20));
    *uint64_t v52 = swift_getKeyPath();
    uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    swift_storeEnumTagMultiPayload();
    uint64_t v53 = (uint64_t *)(v51 + *(int *)(v18 + 24));
    *uint64_t v53 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
    swift_storeEnumTagMultiPayload();
    outlined init with take of SnippetHeaderModel?(v50, v51);
    outlined init with take of OxygenSaturationQueryModel(v51, (uint64_t)v141, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    uint64_t v54 = v41 + v40[5];
    uint64_t v55 = v134;
    if ((*(unsigned char *)(v54 + 8) & 1) == 0 && *(double *)v54 > 0.0)
    {
      uint64_t v131 = (void (*)(unint64_t, char *, uint64_t))v49;
      uint64_t v158 = v48;
      uint64_t v56 = (uint64_t *)(v41 + v40[12]);
      uint64_t v57 = v56[1];
      uint64_t v58 = v143;
      outlined init with copy of OxygenSaturationQueryModel(v41, v143, (uint64_t (*)(void))type metadata accessor for OxygenSaturationQuerySnippet);
      if (v57)
      {
        uint64_t v59 = *(void *)(v58 + v40[11] + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _s10WellnessUI17SnippetHeaderViewVWOhTm_2(v58, (uint64_t (*)(void))type metadata accessor for OxygenSaturationQuerySnippet);
        swift_bridgeObjectRelease();
        uint64_t v60 = v41;
        uint64_t v61 = v41;
        uint64_t v62 = v142;
        outlined init with copy of OxygenSaturationQueryModel(v61, v142, (uint64_t (*)(void))type metadata accessor for OxygenSaturationQuerySnippet);
        if (v59)
        {
          _s10WellnessUI17SnippetHeaderViewVWOhTm_2(v62, (uint64_t (*)(void))type metadata accessor for OxygenSaturationQuerySnippet);
          uint64_t v63 = (uint64_t)v141;
LABEL_16:
          uint64_t v142 = *(void *)v54;
          LODWORD(v138) = *(unsigned __int8 *)(v54 + 8);
          uint64_t v66 = v40[11];
          uint64_t v67 = v60;
          uint64_t v68 = (uint64_t *)(v60 + v40[10]);
          uint64_t v69 = v68[1];
          uint64_t v126 = *v68;
          uint64_t v70 = *v56;
          uint64_t v71 = v56[1];
          uint64_t v129 = v70;
          uint64_t v72 = *(void *)(v67 + v66);
          uint64_t v73 = *(void *)(v67 + v66 + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v128 = SpeakableString.print.getter();
          uint64_t v127 = v74;
          uint64_t v75 = v40[15];
          uint64_t v143 = v67;
          uint64_t v76 = (uint64_t **)(v67 + v75);
          unint64_t v77 = (unint64_t)v76[1];
          uint64_t v137 = *v76;
          type metadata accessor for Context();
          _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_2(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
          swift_bridgeObjectRetain();
          uint64_t v78 = EnvironmentObject.init()();
          uint64_t v79 = v139;
          *char v139 = v78;
          v79[1] = v80;
          uint64_t v81 = (int *)v140;
          uint64_t v82 = (uint64_t *)((char *)v79 + *(int *)(v140 + 20));
          *uint64_t v82 = swift_getKeyPath();
          swift_storeEnumTagMultiPayload();
          uint64_t v83 = (char *)v79 + v81[6];
          *(void *)uint64_t v83 = v142;
          v83[8] = v138;
          uint64_t v84 = (uint64_t *)((char *)v79 + v81[7]);
          void *v84 = v126;
          v84[1] = v69;
          uint64_t v85 = (uint64_t *)((char *)v79 + v81[8]);
          void *v85 = v129;
          v85[1] = v71;
          uint64_t v86 = (uint64_t *)((char *)v79 + v81[9]);
          *uint64_t v86 = v72;
          v86[1] = v73;
          uint64_t v87 = (uint64_t *)((char *)v79 + v81[10]);
          void *v87 = 0;
          v87[1] = 0;
          uint64_t v88 = (uint64_t *)((char *)v79 + v81[11]);
          uint64_t v89 = v136;
          *uint64_t v88 = v135;
          v88[1] = v89;
          uint64_t v90 = (uint64_t *)((char *)v79 + v81[12]);
          uint64_t v91 = v127;
          *uint64_t v90 = v128;
          v90[1] = v91;
          *((unsigned char *)v79 + v81[13]) = 1;
          uint64_t v92 = 0x65676172657641;
          if (v77) {
            uint64_t v92 = (uint64_t)v137;
          }
          unint64_t v93 = 0xE700000000000000;
          if (v77) {
            unint64_t v93 = v77;
          }
          uint64_t v94 = (uint64_t *)((char *)v79 + v81[14]);
          *uint64_t v94 = v92;
          v94[1] = v93;
          _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_2(&lazy protocol witness table cache variable for type MultipleDataPointView and conformance MultipleDataPointView, (void (*)(uint64_t))type metadata accessor for MultipleDataPointView);
          uint64_t v95 = AnyView.init<A>(_:)();
LABEL_24:
          uint64_t v142 = v95;
          uint64_t v107 = v159;
          outlined init with copy of OxygenSaturationQueryModel(v63, v159, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
          unint64_t v108 = (*(unsigned __int8 *)(v144 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v144 + 80);
          unint64_t v109 = (v145 + v108 + 7) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v110 = swift_allocObject();
          outlined init with take of OxygenSaturationQueryModel(v107, v110 + v108, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
          *(void *)(v110 + v109) = v95;
          swift_retain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
          lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, AnyView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
          char v111 = v151;
          ComponentStack.init(content:)();
          uint64_t v112 = v150;
          outlined init with copy of OxygenSaturationQueryModel(v143, v150, (uint64_t (*)(void))type metadata accessor for OxygenSaturationQuerySnippet);
          uint64_t v113 = v161;
          uint64_t v114 = v162;
          char v115 = v147;
          char v116 = v160;
          (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v147, v160, v161);
          unint64_t v117 = (*(unsigned __int8 *)(v148 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80);
          unint64_t v118 = (v149 + *(unsigned __int8 *)(v114 + 80) + v117) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
          uint64_t v119 = swift_allocObject();
          outlined init with take of OxygenSaturationQueryModel(v112, v119 + v117, (uint64_t (*)(void))type metadata accessor for OxygenSaturationQuerySnippet);
          v131(v119 + v118, v115, v113);
          uint64_t v120 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, AnyView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
          char v122 = v154;
          uint64_t v121 = v155;
          View.componentTapped(isNavigation:perform:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v153 + 8))(v111, v121);
          uint64_t v124 = v156;
          uint64_t v123 = v157;
          (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v152, v122, v157);
          uint64_t v164 = v121;
          uint64_t v165 = v120;
          swift_getOpaqueTypeConformance2();
          uint64_t v47 = AnyView.init<A>(_:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v124 + 8))(v122, v123);
          _s10WellnessUI17SnippetHeaderViewVWOhTm_2((uint64_t)v141, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
          (*(void (**)(char *, uint64_t))(v114 + 8))(v116, v113);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v132 + 8))(v134, v133);
          goto LABEL_8;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        _s10WellnessUI17SnippetHeaderViewVWOhTm_2(v58, (uint64_t (*)(void))type metadata accessor for OxygenSaturationQuerySnippet);
        uint64_t v60 = v41;
        uint64_t v64 = v41;
        uint64_t v62 = v142;
        outlined init with copy of OxygenSaturationQueryModel(v64, v142, (uint64_t (*)(void))type metadata accessor for OxygenSaturationQuerySnippet);
      }
      uint64_t v65 = *(void *)(v62 + v40[10] + 8);
      _s10WellnessUI17SnippetHeaderViewVWOhTm_2(v62, (uint64_t (*)(void))type metadata accessor for OxygenSaturationQuerySnippet);
      uint64_t v63 = (uint64_t)v141;
      if (v65) {
        goto LABEL_16;
      }
      swift_bridgeObjectRelease();
      uint64_t v41 = v60;
      uint64_t v45 = v161;
      uint64_t v48 = v158;
      uint64_t v49 = (void (*)(char *, char *, uint64_t))v131;
    }
    uint64_t v96 = (uint64_t *)(v41 + v40[13]);
    uint64_t v97 = v96[1];
    if (!v97)
    {
      uint64_t v47 = AnyView.init<A>(_:)();
      _s10WellnessUI17SnippetHeaderViewVWOhTm_2((uint64_t)v141, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      (*(void (**)(char *, uint64_t))(v162 + 8))(v160, v45);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v132 + 8))(v55, v133);
      goto LABEL_8;
    }
    uint64_t v131 = (void (*)(unint64_t, char *, uint64_t))v49;
    uint64_t v158 = v48;
    uint64_t v98 = *v96;
    uint64_t v99 = *v39;
    uint64_t v100 = v39[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v101 = SpeakableString.print.getter();
    uint64_t v103 = v102;
    char v104 = v137;
    uint64_t v105 = (uint64_t)v137 + *(int *)(v138 + 32);
    uint64_t v143 = v41;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v41, v105, &demangling cache variable for type metadata for AppPunchout?);
    type metadata accessor for Context();
    _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_2(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
    *char v104 = EnvironmentObject.init()();
    v104[1] = v106;
    void v104[2] = v98;
    v104[3] = v97;
    v104[4] = v99;
    v104[5] = v100;
    v104[6] = v101;
    v104[7] = v103;
    _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_2(&lazy protocol witness table cache variable for type SingleDataPointView and conformance SingleDataPointView, (void (*)(uint64_t))type metadata accessor for SingleDataPointView);
    uint64_t v95 = AnyView.init<A>(_:)();
    uint64_t v63 = (uint64_t)v141;
    goto LABEL_24;
  }
  uint64_t v42 = &demangling cache variable for type metadata for SpeakableString?;
  uint64_t v43 = (uint64_t)v33;
LABEL_6:
  outlined destroy of Font.Design?(v43, v42);
LABEL_7:
  uint64_t result = AnyView.init<A>(_:)();
  uint64_t v47 = result;
LABEL_8:
  *uint64_t v163 = v47;
  return result;
}

uint64_t closure #1 in OxygenSaturationQuerySnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderView();
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v13 - v10;
  outlined init with copy of OxygenSaturationQueryModel(a1, (uint64_t)&v13 - v10, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  outlined init with copy of OxygenSaturationQueryModel((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  outlined init with copy of OxygenSaturationQueryModel((uint64_t)v9, a3, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  *(void *)(a3
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, AnyView))
                     + 48)) = a2;
  swift_retain_n();
  _s10WellnessUI17SnippetHeaderViewVWOhTm_2((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  swift_release();
  return _s10WellnessUI17SnippetHeaderViewVWOhTm_2((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
}

void closure #2 in OxygenSaturationQuerySnippet.body.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + *(int *)(type metadata accessor for OxygenSaturationQuerySnippet() + 20));
  if (v1)
  {
    id v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();
  }
  else
  {
    type metadata accessor for Context();
    _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_2(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t sub_26184967C()
{
  uint64_t v1 = type metadata accessor for SnippetHeaderView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v0 + v3, 1, v6))
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v3, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = v5 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = v5 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t partial apply for closure #1 in OxygenSaturationQuerySnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SnippetHeaderView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in OxygenSaturationQuerySnippet.body.getter(v1 + v4, v5, a1);
}

uint64_t outlined init with copy of OxygenSaturationQueryModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2618499C0()
{
  uint64_t Snippet = type metadata accessor for OxygenSaturationQuerySnippet();
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(Snippet - 8) + 80);
  uint64_t v16 = *(void *)(*(void *)(Snippet - 8) + 64);
  uint64_t v2 = type metadata accessor for AppPunchout();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v15 = *(void *)(v3 + 64);
  uint64_t v5 = v0 + ((v1 + 16) & ~v1);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + ((v1 + 16) & ~v1), v2);
  }
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v7 = v5 + *(int *)(Model + 36);
  uint64_t v8 = type metadata accessor for SpeakableString();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + *(int *)(Model + 64);
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = v1 | v4 | 7;
  uint64_t v13 = (((v1 + 16) & ~v1) + v16 + v4) & ~v4;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v13, v2);

  return MEMORY[0x270FA0238](v0, v13 + v15, v12);
}

uint64_t outlined init with take of OxygenSaturationQueryModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void partial apply for closure #2 in OxygenSaturationQuerySnippet.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for OxygenSaturationQuerySnippet() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for AppPunchout();

  closure #2 in OxygenSaturationQuerySnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in OxygenSaturationQuerySnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for OxygenSaturationQuerySnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for AppPunchout();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
    uint64_t v11 = Model[5];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = Model[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = Model[7];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    v18[8] = v19[8];
    *(void *)uint64_t v18 = *(void *)v19;
    uint64_t v20 = Model[8];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    v21[8] = v22[8];
    *(void *)uint64_t v21 = *(void *)v22;
    uint64_t v23 = Model[9];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = type metadata accessor for SpeakableString();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v73 = v27;
    uint64_t v74 = v26;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    uint64_t v29 = Model[10];
    uint64_t v30 = (uint64_t *)((char *)a1 + v29);
    uint64_t v31 = (uint64_t *)((char *)a2 + v29);
    uint64_t v76 = v31[1];
    void *v30 = *v31;
    v30[1] = v76;
    uint64_t v32 = Model[11];
    uint64_t v33 = (uint64_t *)((char *)a1 + v32);
    uint64_t v34 = (uint64_t *)((char *)a2 + v32);
    uint64_t v35 = v34[1];
    void *v33 = *v34;
    v33[1] = v35;
    uint64_t v36 = Model[12];
    uint64_t v37 = (uint64_t *)((char *)a1 + v36);
    uint64_t v38 = (uint64_t *)((char *)a2 + v36);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    uint64_t v40 = Model[13];
    uint64_t v41 = (uint64_t *)((char *)a1 + v40);
    uint64_t v42 = (uint64_t *)((char *)a2 + v40);
    uint64_t v43 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v43;
    uint64_t v44 = Model[14];
    uint64_t v45 = (uint64_t *)((char *)a1 + v44);
    uint64_t v46 = (uint64_t *)((char *)a2 + v44);
    uint64_t v47 = v46[1];
    *uint64_t v45 = *v46;
    v45[1] = v47;
    uint64_t v48 = Model[15];
    uint64_t v49 = (uint64_t *)((char *)a1 + v48);
    uint64_t v50 = (uint64_t *)((char *)a2 + v48);
    uint64_t v51 = v50[1];
    void *v49 = *v50;
    v49[1] = v51;
    uint64_t v52 = Model[16];
    __dst = (char *)a1 + v52;
    uint64_t v53 = (char *)a2 + v52;
    uint64_t v54 = type metadata accessor for SnippetHeaderModel();
    uint64_t v72 = *(void *)(v54 - 8);
    uint64_t v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v75(v53, 1, v54))
    {
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v53, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v73 + 16))(__dst, v53, v74);
      uint64_t v56 = *(int *)(v54 + 20);
      uint64_t v57 = &__dst[v56];
      uint64_t v58 = &v53[v56];
      uint64_t v59 = *((void *)v58 + 1);
      *(void *)uint64_t v57 = *(void *)v58;
      *((void *)v57 + 1) = v59;
      uint64_t v60 = *(int *)(v54 + 24);
      uint64_t v61 = &__dst[v60];
      uint64_t v62 = &v53[v60];
      uint64_t v63 = *((void *)v62 + 1);
      *(void *)uint64_t v61 = *(void *)v62;
      *((void *)v61 + 1) = v63;
      uint64_t v64 = *(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v64(__dst, 0, 1, v54);
    }
    uint64_t v65 = *(int *)(a3 + 20);
    uint64_t v66 = (uint64_t *)((char *)a1 + v65);
    uint64_t v67 = (char *)a2 + v65;
    uint64_t v69 = *(void **)v67;
    uint64_t v68 = *((void *)v67 + 1);
    *uint64_t v66 = v69;
    v66[1] = v68;
    id v70 = v69;
  }
  return a1;
}

void destroy for OxygenSaturationQuerySnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v7 = a1 + *(int *)(Model + 36);
  uint64_t v8 = type metadata accessor for SpeakableString();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + *(int *)(Model + 64);
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = *(void **)(a1 + *(int *)(a2 + 20));
}

char *initializeWithCopy for OxygenSaturationQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v9 = Model[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  unsigned char v10[8] = v11[8];
  uint64_t v12 = Model[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = Model[7];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  v16[8] = v17[8];
  *(void *)uint64_t v16 = *(void *)v17;
  uint64_t v18 = Model[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  v19[8] = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v21 = Model[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v71 = v25;
  uint64_t v72 = v24;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  uint64_t v27 = Model[10];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v74 = *((void *)v29 + 1);
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = v74;
  uint64_t v30 = Model[11];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = v33;
  uint64_t v34 = Model[12];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = v37;
  uint64_t v38 = Model[13];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  uint64_t v41 = *((void *)v40 + 1);
  *(void *)uint64_t v39 = *(void *)v40;
  *((void *)v39 + 1) = v41;
  uint64_t v42 = Model[14];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v45 = *((void *)v44 + 1);
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = v45;
  uint64_t v46 = Model[15];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  uint64_t v49 = *((void *)v48 + 1);
  *(void *)uint64_t v47 = *(void *)v48;
  *((void *)v47 + 1) = v49;
  uint64_t v50 = Model[16];
  __dst = &a1[v50];
  uint64_t v51 = &a2[v50];
  uint64_t v52 = type metadata accessor for SnippetHeaderModel();
  uint64_t v70 = *(void *)(v52 - 8);
  uint64_t v73 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v73(v51, 1, v52))
  {
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v51, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(__dst, v51, v72);
    uint64_t v54 = *(int *)(v52 + 20);
    uint64_t v55 = &__dst[v54];
    uint64_t v56 = &v51[v54];
    uint64_t v57 = *((void *)v56 + 1);
    *(void *)uint64_t v55 = *(void *)v56;
    *((void *)v55 + 1) = v57;
    uint64_t v58 = *(int *)(v52 + 24);
    uint64_t v59 = &__dst[v58];
    uint64_t v60 = &v51[v58];
    uint64_t v61 = *((void *)v60 + 1);
    *(void *)uint64_t v59 = *(void *)v60;
    *((void *)v59 + 1) = v61;
    uint64_t v62 = *(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v62(__dst, 0, 1, v52);
  }
  uint64_t v63 = *(int *)(a3 + 20);
  uint64_t v64 = &a1[v63];
  uint64_t v65 = &a2[v63];
  uint64_t v67 = *(void **)v65;
  uint64_t v66 = *((void *)v65 + 1);
  *(void *)uint64_t v64 = v67;
  *((void *)v64 + 1) = v66;
  id v68 = v67;
  return a1;
}

char *assignWithCopy for OxygenSaturationQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
LABEL_7:
  uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v12 = Model[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  char v15 = v14[8];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v15;
  uint64_t v16 = Model[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  uint64_t v20 = Model[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = Model[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v27;
  uint64_t v28 = Model[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = type metadata accessor for SpeakableString();
  uint64_t v83 = *(void *)(v31 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48);
  int v33 = v32(v29, 1, v31);
  int v34 = v32(v30, 1, v31);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v29, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v29, 0, 1, v31);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v83 + 8))(v29, v31);
LABEL_12:
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v29, v30, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v83 + 24))(v29, v30, v31);
LABEL_13:
  uint64_t v36 = Model[10];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = *((void *)v38 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = Model[11];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = *((void *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = Model[12];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = Model[13];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + 1) = *((void *)v47 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = Model[14];
  uint64_t v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + 1) = *((void *)v50 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = Model[15];
  uint64_t v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  *(void *)uint64_t v52 = *(void *)v53;
  *((void *)v52 + 1) = *((void *)v53 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = Model[16];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  uint64_t v57 = type metadata accessor for SnippetHeaderModel();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
  int v60 = v59(v55, 1, v57);
  int v61 = v59(v56, 1, v57);
  if (!v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v83 + 24))(v55, v56, v31);
      uint64_t v77 = *(int *)(v57 + 20);
      uint64_t v78 = &v55[v77];
      uint64_t v79 = &v56[v77];
      *(void *)uint64_t v78 = *(void *)v79;
      *((void *)v78 + 1) = *((void *)v79 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v80 = *(int *)(v57 + 24);
      uint64_t v81 = &v55[v80];
      uint64_t v82 = &v56[v80];
      *(void *)uint64_t v81 = *(void *)v82;
      *((void *)v81 + 1) = *((void *)v82 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    _s10WellnessUI17SnippetHeaderViewVWOhTm_2((uint64_t)v55, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v61)
  {
LABEL_18:
    uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v55, v56, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v55, v56, v31);
  uint64_t v62 = *(int *)(v57 + 20);
  uint64_t v63 = &v55[v62];
  uint64_t v64 = &v56[v62];
  *(void *)uint64_t v63 = *(void *)v64;
  *((void *)v63 + 1) = *((void *)v64 + 1);
  uint64_t v65 = *(int *)(v57 + 24);
  uint64_t v66 = &v55[v65];
  uint64_t v67 = &v56[v65];
  *(void *)uint64_t v66 = *(void *)v67;
  *((void *)v66 + 1) = *((void *)v67 + 1);
  id v68 = *(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v68(v55, 0, 1, v57);
LABEL_19:
  uint64_t v70 = *(int *)(a3 + 20);
  uint64_t v71 = &a1[v70];
  uint64_t v72 = &a2[v70];
  uint64_t v73 = *(void **)&a1[v70];
  uint64_t v74 = *(void **)v72;
  *(void *)uint64_t v71 = *(void *)v72;
  id v75 = v74;

  *((void *)v71 + 1) = *((void *)v72 + 1);
  return a1;
}

uint64_t _s10WellnessUI17SnippetHeaderViewVWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for OxygenSaturationQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v10 = Model[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = Model[6];
  uint64_t v14 = &a1[v13];
  char v15 = &a2[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = Model[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  v17[8] = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = Model[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  v20[8] = v21[8];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = Model[9];
  char v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for SpeakableString();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  *(_OWORD *)&a1[Model[10]] = *(_OWORD *)&a2[Model[10]];
  *(_OWORD *)&a1[Model[11]] = *(_OWORD *)&a2[Model[11]];
  *(_OWORD *)&a1[Model[12]] = *(_OWORD *)&a2[Model[12]];
  *(_OWORD *)&a1[Model[13]] = *(_OWORD *)&a2[Model[13]];
  *(_OWORD *)&a1[Model[14]] = *(_OWORD *)&a2[Model[14]];
  *(_OWORD *)&a1[Model[15]] = *(_OWORD *)&a2[Model[15]];
  uint64_t v28 = Model[16];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = type metadata accessor for SnippetHeaderModel();
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v29, v30, v25);
    *(_OWORD *)&v29[*(int *)(v31 + 20)] = *(_OWORD *)&v30[*(int *)(v31 + 20)];
    *(_OWORD *)&v29[*(int *)(v31 + 24)] = *(_OWORD *)&v30[*(int *)(v31 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for OxygenSaturationQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
LABEL_7:
  uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v12 = Model[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = Model[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = Model[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  v19[8] = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v21 = Model[8];
  uint64_t v22 = &a1[v21];
  char v23 = &a2[v21];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = Model[9];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for SpeakableString();
  uint64_t v86 = *(void *)(v27 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v86 + 48);
  int v29 = v28(v25, 1, v27);
  int v30 = v28(v26, 1, v27);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v86 + 8))(v25, v27);
LABEL_12:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v86 + 40))(v25, v26, v27);
LABEL_13:
  uint64_t v32 = Model[10];
  uint64_t v33 = &a1[v32];
  int v34 = &a2[v32];
  uint64_t v36 = *(void *)v34;
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = Model[11];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v41 = *(void *)v39;
  uint64_t v40 = *((void *)v39 + 1);
  *(void *)uint64_t v38 = v41;
  *((void *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = Model[12];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v46 = *(void *)v44;
  uint64_t v45 = *((void *)v44 + 1);
  *(void *)uint64_t v43 = v46;
  *((void *)v43 + 1) = v45;
  swift_bridgeObjectRelease();
  uint64_t v47 = Model[13];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  uint64_t v51 = *(void *)v49;
  uint64_t v50 = *((void *)v49 + 1);
  *(void *)uint64_t v48 = v51;
  *((void *)v48 + 1) = v50;
  swift_bridgeObjectRelease();
  uint64_t v52 = Model[14];
  uint64_t v53 = &a1[v52];
  uint64_t v54 = &a2[v52];
  uint64_t v56 = *(void *)v54;
  uint64_t v55 = *((void *)v54 + 1);
  *(void *)uint64_t v53 = v56;
  *((void *)v53 + 1) = v55;
  swift_bridgeObjectRelease();
  uint64_t v57 = Model[15];
  uint64_t v58 = &a1[v57];
  uint64_t v59 = &a2[v57];
  uint64_t v61 = *(void *)v59;
  uint64_t v60 = *((void *)v59 + 1);
  *(void *)uint64_t v58 = v61;
  *((void *)v58 + 1) = v60;
  swift_bridgeObjectRelease();
  uint64_t v62 = Model[16];
  uint64_t v63 = &a1[v62];
  uint64_t v64 = &a2[v62];
  uint64_t v65 = type metadata accessor for SnippetHeaderModel();
  uint64_t v66 = *(void *)(v65 - 8);
  uint64_t v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
  int v68 = v67(v63, 1, v65);
  int v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 40))(v63, v64, v27);
      uint64_t v76 = *(int *)(v65 + 20);
      uint64_t v77 = &v63[v76];
      uint64_t v78 = &v64[v76];
      uint64_t v80 = *(void *)v78;
      uint64_t v79 = *((void *)v78 + 1);
      *(void *)uint64_t v77 = v80;
      *((void *)v77 + 1) = v79;
      swift_bridgeObjectRelease();
      uint64_t v81 = *(int *)(v65 + 24);
      uint64_t v82 = &v63[v81];
      uint64_t v83 = &v64[v81];
      uint64_t v85 = *(void *)v83;
      uint64_t v84 = *((void *)v83 + 1);
      *(void *)uint64_t v82 = v85;
      *((void *)v82 + 1) = v84;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    _s10WellnessUI17SnippetHeaderViewVWOhTm_2((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v69)
  {
LABEL_18:
    uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v63, v64, *(void *)(*(void *)(v70 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v63, v64, v27);
  *(_OWORD *)&v63[*(int *)(v65 + 20)] = *(_OWORD *)&v64[*(int *)(v65 + 20)];
  *(_OWORD *)&v63[*(int *)(v65 + 24)] = *(_OWORD *)&v64[*(int *)(v65 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
LABEL_19:
  uint64_t v71 = *(int *)(a3 + 20);
  uint64_t v72 = &a1[v71];
  uint64_t v73 = &a2[v71];
  uint64_t v74 = *(void **)&a1[v71];
  *(void *)uint64_t v72 = *(void *)v73;

  *((void *)v72 + 1) = *((void *)v73 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for OxygenSaturationQuerySnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_26184B9E4);
}

uint64_t sub_26184B9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v7 = *(void *)(Model - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, Model);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for OxygenSaturationQuerySnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_26184BAC4);
}

uint64_t sub_26184BAC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata completion function for OxygenSaturationQuerySnippet()
{
  uint64_t result = type metadata accessor for OxygenSaturationQueryModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t WatchRingsSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  char v6 = *(unsigned char *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  char v8 = *(unsigned char *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  uint64_t result = *(unsigned __int8 *)(v1 + 72);
  uint64_t v11 = *(void *)(v1 + 80);
  char v12 = *(unsigned char *)(v1 + 88);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(unsigned char *)(a1 + 72) = result;
  *(void *)(a1 + 80) = v11;
  *(unsigned char *)(a1 + 88) = v12;
  return result;
}

void __swiftcall WatchRingsSnippet.init(model:)(WellnessUI::WatchRingsSnippet *__return_ptr retstr, WellnessUI::WatchRingsModel *model)
{
  Swift::Double value = model->exerciseGoalValue.value;
  Swift::Bool is_nil = model->exerciseGoalValue.is_nil;
  Swift::Double v4 = model->exerciseTotalValue.value;
  Swift::Bool v5 = model->exerciseTotalValue.is_nil;
  Swift::Double v6 = model->moveGoalValue.value;
  Swift::Bool v7 = model->moveGoalValue.is_nil;
  Swift::Double v8 = model->moveTotalValue.value;
  Swift::Bool v9 = model->moveTotalValue.is_nil;
  Swift::Double v10 = model->standGoalValue.value;
  Swift::Bool v11 = model->standGoalValue.is_nil;
  Swift::Double v12 = model->standTotalValue.value;
  Swift::Bool v13 = model->standTotalValue.is_nil;
  retstr->model.exerciseGoalValue.Swift::Double value = value;
  retstr->model.exerciseGoalValue.Swift::Bool is_nil = is_nil;
  retstr->model.exerciseTotalValue.Swift::Double value = v4;
  retstr->model.exerciseTotalValue.Swift::Bool is_nil = v5;
  retstr->model.moveGoalValue.Swift::Double value = v6;
  retstr->model.moveGoalValue.Swift::Bool is_nil = v7;
  retstr->model.moveTotalValue.Swift::Double value = v8;
  retstr->model.moveTotalValue.Swift::Bool is_nil = v9;
  retstr->model.standGoalValue.Swift::Double value = v10;
  retstr->model.standGoalValue.Swift::Bool is_nil = v11;
  retstr->model.standTotalValue.Swift::Double value = v12;
  retstr->model.standTotalValue.Swift::Bool is_nil = v13;
}

uint64_t WatchRingsSnippet.body.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();

  return SnippetBody.init(content:)();
}

double closure #1 in WatchRingsSnippet.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static Color.red.getter();
  uint64_t KeyPath = swift_getKeyPath();
  static Alignment.trailing.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a1 = KeyPath;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  double result = *(double *)&v9;
  *(_OWORD *)(a1 + 48) = v9;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>);
    lazy protocol witness table accessor for type ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type Circle and conformance Circle();
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Circle and conformance Circle()
{
  unint64_t result = lazy protocol witness table cache variable for type Circle and conformance Circle;
  if (!lazy protocol witness table cache variable for type Circle and conformance Circle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle and conformance Circle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in WatchRingsSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for View.body.getter in conformance WatchRingsSnippet()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();

  return SnippetBody.init(content:)();
}

ValueMetadata *type metadata accessor for WatchRingsSnippet()
{
  return &type metadata for WatchRingsSnippet;
}

uint64_t sub_26184BFE8()
{
  return lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type SnippetBody<ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>> and conformance SnippetBody<A>, &demangling cache variable for type metadata for SnippetBody<ModifiedContent<ModifiedContent<Circle, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>>);
}

uint64_t sub_26184C024@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_26184C050()
{
  return EnvironmentValues.foregroundColor.setter();
}

__n128 MultipleDataPointWithSubTypesView.init(firstRowLabel:firstRowData:firstRowTextData:secondRowLabel:secondRowData:secondRowTextData:unitString:dateLabelString:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, long long a11, long long a12, long long a13, __n128 a14, uint64_t a15, uint64_t a16)
{
  __n128 result = a14;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(_OWORD *)(a9 + 80) = a11;
  *(_OWORD *)(a9 + 96) = a12;
  *(_OWORD *)(a9 + 112) = a13;
  *(__n128 *)(a9 + 128) = a14;
  *(void *)(a9 + 144) = a15;
  *(void *)(a9 + 152) = a16;
  return result;
}

uint64_t MultipleDataPointWithSubTypesView.firstRowLabel.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointWithSubTypesView.firstRowData.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointWithSubTypesView.firstRowTextData.getter()
{
  uint64_t v1 = v0[4];
  outlined copy of Text?(v1, v0[5], v0[6], v0[7]);
  return v1;
}

uint64_t outlined copy of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t MultipleDataPointWithSubTypesView.secondRowLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointWithSubTypesView.secondRowData.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointWithSubTypesView.secondRowTextData.getter()
{
  uint64_t v1 = v0[12];
  outlined copy of Text?(v1, v0[13], v0[14], v0[15]);
  return v1;
}

uint64_t MultipleDataPointWithSubTypesView.unitString.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointWithSubTypesView.dateLabelString.getter()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultipleDataPointWithSubTypesView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ComponentStackBottomSpacing();
  uint64_t v333 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v331 = (char *)&v281 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v332 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  uint64_t v330 = *(void *)(v332 - 8);
  MEMORY[0x270FA5388](v332);
  uint64_t v328 = (char *)&v281 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.lastComponentBottomSpacing(_:)>>.0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v329 = (char *)&v281 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  Swift::Bool v11 = (char *)&v281 - v10;
  uint64_t v335 = type metadata accessor for SeparatorStyle();
  uint64_t v340 = *(void *)(v335 - 8);
  MEMORY[0x270FA5388](v335);
  uint64_t v334 = (char *)&v281 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SimpleItemRichView();
  uint64_t v336 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v326 = v15;
  uint64_t v327 = (char *)&v281 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v342 = (char *)&v281 - v16;
  uint64_t v343 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  uint64_t v338 = *(void *)(v343 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v343);
  uint64_t v325 = (char *)&v281 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  char v324 = (char *)&v281 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v337 = (char *)&v281 - v22;
  uint64_t v323 = v23;
  MEMORY[0x270FA5388](v21);
  v341 = (char *)&v281 - v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v25 - 8);
  Swift::String v344 = (char *)&v281 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v345 = type metadata accessor for Font.TextStyle();
  uint64_t v27 = *(void *)(v345 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v345);
  uint64_t v339 = (char *)&v281 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)&v281 - v30;
  uint64_t v32 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v32 - 8);
  int v34 = (void (*)(char *, uint64_t))((char *)&v281 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = (void *)v1[19];
  if (!v35
    || (uint64_t v36 = (void *)v1[1]) == 0
    || (uint64_t v37 = (void *)v1[9]) == 0
    || (uint64_t v38 = v1[7], v308 = v1[3], !(v308 | v38)))
  {
    uint64_t result = AnyView.init<A>(_:)();
    uint64_t v40 = result;
LABEL_6:
    *a1 = v40;
    return result;
  }
  v295._object = v35;
  uint64_t v288 = v3;
  uint64_t v289 = v11;
  uint64_t v309 = v13;
  v307._uint64_t countAndFlagsBits = *v1;
  v307._object = v36;
  uint64_t v41 = v1[2];
  uint64_t v316 = v1[4];
  uint64_t v317 = v38;
  uint64_t v315 = v1[5];
  uint64_t v42 = v1[6];
  v297._uint64_t countAndFlagsBits = v1[8];
  v297._object = v37;
  uint64_t v283 = v1[10];
  uint64_t v284 = v41;
  uint64_t v43 = v1[11];
  uint64_t v292 = a1;
  uint64_t v293 = (void *)v43;
  uint64_t v44 = v1[12];
  uint64_t v45 = v1[13];
  uint64_t v319 = v34;
  uint64_t v320 = v45;
  uint64_t v281 = v1[14];
  uint64_t v282 = v42;
  uint64_t v46 = v1[16];
  uint64_t v321 = v1[15];
  uint64_t v322 = v44;
  uint64_t v47 = (void *)v1[17];
  v295._uint64_t countAndFlagsBits = v1[18];
  uint64_t v290 = v7;
  uint64_t v291 = v6;
  uint64_t v318 = v27;
  if (v47)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v48._uint64_t countAndFlagsBits = 0;
    v48._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v48);
    swift_bridgeObjectRetain();
    v49._uint64_t countAndFlagsBits = v46;
    v49._object = v47;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v49);
    swift_bridgeObjectRelease();
    v50._uint64_t countAndFlagsBits = 0;
    v50._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v50);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v51 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v314 = v52;
    LODWORD(v313) = v53 & 1;
    uint64_t v54 = v27;
    uint64_t v55 = v345;
    (*(void (**)(char *, void, uint64_t))(v27 + 104))(v31, *MEMORY[0x263F1A6D0], v345);
    LODWORD(v310) = *MEMORY[0x263F1A618];
    uint64_t v56 = v310;
    uint64_t v57 = type metadata accessor for Font.Design();
    uint64_t v58 = *(void *)(v57 - 8);
    uint64_t v59 = (uint64_t)v344;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 104))(v344, v56, v57);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v59);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v31, v55);
    uint64_t v60 = v314;
    LOBYTE(v56) = v313;
    uint64_t v61 = Text.font(_:)();
    uint64_t v63 = v62;
    LOBYTE(v55) = v64;
    uint64_t v312 = v65;
    swift_release();
    LOBYTE(v57) = v55 & 1;
    outlined consume of Text.Storage(v51, v60, v56);
    swift_bridgeObjectRelease();
    LODWORD(v370) = static HierarchicalShapeStyle.secondary.getter();
    uint64_t v66 = Text.foregroundStyle<A>(_:)();
    uint64_t v68 = v67;
    char v70 = v69 & 1;
    uint64_t v71 = v61;
    uint64_t v72 = (uint64_t)v344;
    outlined consume of Text.Storage(v71, v63, v57);
    swift_bridgeObjectRelease();
    uint64_t v73 = Text.bold()();
    uint64_t v313 = v74;
    uint64_t v314 = v73;
    uint64_t v312 = v75;
    int v311 = v76;
    uint64_t v77 = v66;
    uint64_t v78 = v310;
    uint64_t v79 = v345;
    outlined consume of Text.Storage(v77, v68, v70);
    swift_bridgeObjectRelease();
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v80 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v313 = v81;
    uint64_t v314 = v80;
    uint64_t v312 = v82;
    int v311 = v83;
    uint64_t v78 = *MEMORY[0x263F1A618];
    uint64_t v79 = v345;
    uint64_t v72 = (uint64_t)v344;
  }
  uint64_t v84 = v31;
  uint64_t v294 = v31;
  LODWORD(v310) = v78;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v85._uint64_t countAndFlagsBits = 0;
  v85._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v85);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v307);
  v86._uint64_t countAndFlagsBits = 0;
  v86._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v86);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v87 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v299 = v88;
  uint64_t v300 = v87;
  char v90 = v89 & 1;
  LODWORD(v296) = *MEMORY[0x263F1A720];
  uint64_t v91 = v318;
  uint64_t v92 = *(void (**)(void))(v318 + 104);
  uint64_t v302 = (void (*)(char *, uint64_t))(v318 + 104);
  v303 = (void (*)(char *, void, uint64_t))v92;
  v92(v84);
  unint64_t v93 = (void *)type metadata accessor for Font.Design();
  uint64_t v94 = *(v93 - 1);
  uint64_t v305 = *(void (**)(uint64_t, uint64_t, void *))(v94 + 104);
  uint64_t v306 = v94 + 104;
  v307._object = v93;
  v305(v72, v78, v93);
  uint64_t v95 = *(void (**)(uint64_t, void, uint64_t, void *))(v94 + 56);
  v307._uint64_t countAndFlagsBits = v94 + 56;
  v304 = v95;
  v95(v72, 0, 1, v93);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?(v72);
  uint64_t v96 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
  uint64_t v318 = v91 + 8;
  char v301 = v96;
  v96((uint64_t)v84, v79);
  uint64_t v97 = v299;
  uint64_t v98 = v300;
  uint64_t v99 = Text.font(_:)();
  uint64_t v101 = v100;
  char v103 = v102;
  swift_release();
  char v104 = v103 & 1;
  outlined consume of Text.Storage(v98, v97, v90);
  swift_bridgeObjectRelease();
  LODWORD(v370) = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v105 = Text.foregroundStyle<A>(_:)();
  uint64_t v107 = v106;
  LOBYTE(v98) = v108 & 1;
  outlined consume of Text.Storage(v99, v101, v104);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  uint64_t v109 = Text.fontWeight(_:)();
  uint64_t v298 = v110;
  uint64_t v299 = v109;
  int v287 = v111;
  uint64_t v300 = v112;
  outlined consume of Text.Storage(v105, v107, v98);
  swift_bridgeObjectRelease();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v113._uint64_t countAndFlagsBits = 0;
  v113._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v113);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v297);
  v114._uint64_t countAndFlagsBits = 0;
  v114._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v114);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v115 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v117 = v116;
  char v119 = v118 & 1;
  uint64_t v120 = (uint64_t)v294;
  v303(v294, v296, v345);
  uint64_t v121 = (uint64_t)v344;
  object = v307._object;
  v305((uint64_t)v344, v310, (void *)v307._object);
  v304(v121, 0, 1, object);
  static Font.system(_:design:weight:)();
  outlined destroy of Font.Design?(v121);
  v301(v120, v345);
  uint64_t v123 = Text.font(_:)();
  uint64_t v125 = v124;
  LOBYTE(v98) = v126;
  swift_release();
  outlined consume of Text.Storage(v115, v117, v119);
  swift_bridgeObjectRelease();
  LODWORD(v370) = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v127 = Text.foregroundStyle<A>(_:)();
  uint64_t v129 = v128;
  LOBYTE(v117) = v130 & 1;
  outlined consume of Text.Storage(v123, v125, v98 & 1);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  uint64_t v131 = Text.fontWeight(_:)();
  uint64_t v296 = v132;
  v297._uint64_t countAndFlagsBits = v131;
  int v286 = v133;
  v297._object = v134;
  outlined consume of Text.Storage(v127, v129, v117);
  swift_bridgeObjectRelease();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v135._uint64_t countAndFlagsBits = 0;
  v135._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v135);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v295);
  v136._uint64_t countAndFlagsBits = 0;
  v136._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v136);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v137 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v139 = v138;
  LOBYTE(v123) = v140 & 1;
  static Font.footnote.getter();
  uint64_t v141 = Text.font(_:)();
  uint64_t v143 = v142;
  LOBYTE(v117) = v144;
  swift_release();
  outlined consume of Text.Storage(v137, v139, v123);
  swift_bridgeObjectRelease();
  LODWORD(v370) = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v145 = Text.foregroundStyle<A>(_:)();
  uint64_t v147 = v146;
  LOBYTE(v123) = v148 & 1;
  outlined consume of Text.Storage(v141, v143, v117 & 1);
  swift_bridgeObjectRelease();
  static Font.Weight.regular.getter();
  uint64_t v149 = Text.fontWeight(_:)();
  uint64_t v151 = v150;
  int v153 = v152;
  uint64_t v155 = v154;
  outlined consume of Text.Storage(v145, v147, v123);
  swift_bridgeObjectRelease();
  uint64_t result = ((uint64_t (*)(char *, void, uint64_t))v303)(v339, *MEMORY[0x263F1A6E0], v345);
  uint64_t v156 = (void *)v308;
  v295._uint64_t countAndFlagsBits = v149;
  v295._object = v155;
  uint64_t v294 = (char *)v151;
  int v285 = v153;
  if (v308)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v157._uint64_t countAndFlagsBits = 0;
    v157._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v157);
    swift_bridgeObjectRetain();
    v158._uint64_t countAndFlagsBits = v284;
    v158._object = v156;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v158);
    swift_bridgeObjectRelease();
    v159._uint64_t countAndFlagsBits = 0;
    v159._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v159);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v160 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v162 = v161;
    char v164 = v163 & 1;
    uint64_t v165 = (uint64_t)v344;
    uint64_t v166 = v307._object;
    v305((uint64_t)v344, v310, (void *)v307._object);
    v304(v165, 0, 1, v166);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v165);
    uint64_t v167 = Text.font(_:)();
    uint64_t v169 = v168;
    char v171 = v170;
    swift_release();
    outlined consume of Text.Storage(v160, v162, v164);
    swift_bridgeObjectRelease();
    static Font.Weight.semibold.getter();
    uint64_t v172 = Text.fontWeight(_:)();
    uint64_t v174 = v173;
    char v176 = v175 & 1;
    outlined consume of Text.Storage(v167, v169, v171 & 1);
    swift_bridgeObjectRelease();
    int v177 = v311;
    uint64_t v179 = v313;
    uint64_t v178 = v314;
    uint64_t v180 = v312;
    uint64_t v181 = static Text.+ infix(_:_:)();
    uint64_t v315 = v182;
    uint64_t v316 = v181;
    uint64_t v317 = v183;
    LODWORD(v308) = v184 & 1;
    outlined consume of Text.Storage(v172, v174, v176);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v186 = v321;
    uint64_t v185 = v322;
    uint64_t v187 = v320;
  }
  else
  {
    if (!v317)
    {
      __break(1u);
      goto LABEL_20;
    }
    LODWORD(v308) = v282 & 1;
    outlined copy of Text.Storage(v316, v315, v282 & 1);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v186 = v321;
    uint64_t v185 = v322;
    uint64_t v187 = v320;
    uint64_t v179 = v313;
    uint64_t v178 = v314;
    uint64_t v180 = v312;
    int v177 = v311;
  }
  uint64_t v188 = v293;
  uint64_t v313 = v179;
  uint64_t v314 = v178;
  uint64_t v312 = v180;
  int v311 = v177;
  if (v293)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v189._uint64_t countAndFlagsBits = 0;
    v189._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v189);
    swift_bridgeObjectRetain();
    v190._uint64_t countAndFlagsBits = v283;
    v190._object = v188;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v190);
    swift_bridgeObjectRelease();
    v191._uint64_t countAndFlagsBits = 0;
    v191._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v191);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v192 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v194 = v193;
    char v196 = v195 & 1;
    uint64_t v197 = (uint64_t)v344;
    uint64_t v198 = v307._object;
    v305((uint64_t)v344, v310, (void *)v307._object);
    v304(v197, 0, 1, v198);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v197);
    uint64_t v199 = Text.font(_:)();
    uint64_t v201 = v200;
    LOBYTE(v197) = v202;
    swift_release();
    char v203 = v197 & 1;
    outlined consume of Text.Storage(v192, v194, v196);
    swift_bridgeObjectRelease();
    static Font.Weight.semibold.getter();
    uint64_t v204 = Text.fontWeight(_:)();
    uint64_t v206 = v205;
    LOBYTE(v197) = v207 & 1;
    outlined consume of Text.Storage(v199, v201, v203);
    swift_bridgeObjectRelease();
    uint64_t v208 = static Text.+ infix(_:_:)();
    uint64_t v321 = v209;
    uint64_t v322 = v208;
    uint64_t v320 = v210;
    LODWORD(v344) = v211 & 1;
    outlined consume of Text.Storage(v204, v206, v197);
    swift_bridgeObjectRelease();
LABEL_18:
    char v212 = v287;
    uint64_t v372 = MEMORY[0x263F1A838];
    uint64_t v373 = MEMORY[0x263F77350];
    uint64_t v213 = MEMORY[0x263F1A838];
    uint64_t v214 = MEMORY[0x263F77350];
    uint64_t v215 = swift_allocObject();
    uint64_t v370 = v215;
    uint64_t v217 = v298;
    uint64_t v216 = v299;
    *(void *)(v215 + 16) = v299;
    *(void *)(v215 + 24) = v217;
    *(unsigned char *)(v215 + 32) = v212 & 1;
    LODWORD(v307._object) = v212 & 1;
    *(void *)(v215 + 40) = v300;
    *((void *)&v368 + 1) = v213;
    uint64_t v369 = v214;
    uint64_t v218 = swift_allocObject();
    *(void *)&long long v367 = v218;
    uint64_t v220 = v315;
    uint64_t v219 = v316;
    *(void *)(v218 + 16) = v316;
    *(void *)(v218 + 24) = v220;
    uint64_t v315 = v220;
    uint64_t v316 = v219;
    int v221 = v308;
    *(unsigned char *)(v218 + 32) = v308;
    LODWORD(v308) = v221;
    uint64_t v222 = v317;
    *(void *)(v218 + 40) = v317;
    uint64_t v317 = v222;
    uint64_t v366 = 0;
    long long v364 = 0u;
    long long v365 = 0u;
    uint64_t v363 = 0;
    long long v361 = 0u;
    long long v362 = 0u;
    uint64_t v360 = 0;
    long long v358 = 0u;
    long long v359 = 0u;
    uint64_t v357 = 0;
    long long v355 = 0u;
    long long v356 = 0u;
    uint64_t v354 = 0;
    long long v352 = 0u;
    long long v353 = 0u;
    uint64_t v351 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    uint64_t v348 = 0;
    long long v346 = 0u;
    long long v347 = 0u;
    outlined copy of Text.Storage(v216, v217, v212 & 1);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v219, v220, v221);
    swift_bridgeObjectRetain();
    uint64_t v223 = v342;
    SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)();
    LODWORD(v306) = *MEMORY[0x263F76988];
    uint64_t v224 = v340;
    uint64_t v225 = *(void (**)(void))(v340 + 104);
    v304 = (void (*)(uint64_t, void, uint64_t, void *))(v340 + 104);
    uint64_t v305 = (void (*)(uint64_t, uint64_t, void *))v225;
    long long v227 = v334;
    uint64_t v226 = v335;
    v225(v334);
    v303 = (void (*)(char *, void, uint64_t))lazy protocol witness table accessor for type SimpleItemRichView and conformance SimpleItemRichView();
    uint64_t v228 = v309;
    View.separators(_:isOverride:)();
    long long v229 = *(void (**)(char *, uint64_t))(v224 + 8);
    uint64_t v340 = v224 + 8;
    uint64_t v302 = v229;
    v229(v227, v226);
    long long v230 = *(void (**)(char *, uint64_t))(v336 + 8);
    uint64_t v310 = v336 + 8;
    uint64_t v319 = v230;
    v230(v223, v228);
    uint64_t v231 = MEMORY[0x263F1A838];
    uint64_t v372 = MEMORY[0x263F1A838];
    uint64_t v232 = MEMORY[0x263F77350];
    uint64_t v373 = MEMORY[0x263F77350];
    uint64_t v233 = swift_allocObject();
    uint64_t v370 = v233;
    uint64_t v235 = v296;
    uint64_t countAndFlagsBits = v297._countAndFlagsBits;
    *(void *)(v233 + 16) = v297._countAndFlagsBits;
    *(void *)(v233 + 24) = v235;
    LODWORD(v226) = v286 & 1;
    *(unsigned char *)(v233 + 32) = v286 & 1;
    LODWORD(v307._countAndFlagsBits) = v226;
    *(void *)(v233 + 40) = v297._object;
    *((void *)&v368 + 1) = v231;
    uint64_t v369 = v232;
    uint64_t v236 = swift_allocObject();
    *(void *)&long long v367 = v236;
    uint64_t v237 = v321;
    uint64_t v238 = v322;
    uint64_t v239 = v320;
    *(void *)(v236 + 16) = v322;
    *(void *)(v236 + 24) = v239;
    uint64_t v320 = v239;
    LODWORD(v232) = v344;
    *(unsigned char *)(v236 + 32) = (_BYTE)v344;
    LODWORD(v344) = v232;
    *(void *)(v236 + 40) = v237;
    uint64_t v366 = 0;
    long long v364 = 0u;
    long long v365 = 0u;
    uint64_t v363 = 0;
    long long v361 = 0u;
    long long v362 = 0u;
    uint64_t v360 = 0;
    long long v358 = 0u;
    long long v359 = 0u;
    uint64_t v357 = 0;
    long long v355 = 0u;
    long long v356 = 0u;
    uint64_t v354 = 0;
    long long v352 = 0u;
    long long v353 = 0u;
    uint64_t v351 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    uint64_t v348 = 0;
    long long v346 = 0u;
    long long v347 = 0u;
    outlined copy of Text.Storage(countAndFlagsBits, v235, v226);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v238, v239, v232);
    swift_bridgeObjectRetain();
    long long v240 = v342;
    SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)();
    long long v241 = v334;
    uint64_t v242 = v335;
    v305((uint64_t)v334, v306, (void *)v335);
    long long v243 = v337;
    uint64_t v244 = v309;
    View.separators(_:isOverride:)();
    v302(v241, v242);
    uint64_t v245 = v244;
    v319(v240, v244);
    uint64_t v372 = MEMORY[0x263F1A838];
    uint64_t v373 = MEMORY[0x263F77350];
    uint64_t v246 = swift_allocObject();
    uint64_t v370 = v246;
    uint64_t v247 = (uint64_t)v294;
    uint64_t v248 = v295._countAndFlagsBits;
    *(void *)(v246 + 16) = v295._countAndFlagsBits;
    *(void *)(v246 + 24) = v247;
    uint64_t v249 = v247;
    LODWORD(v247) = v285 & 1;
    *(unsigned char *)(v246 + 32) = v247;
    LODWORD(v340) = v247;
    *(void *)(v246 + 40) = v295._object;
    uint64_t v369 = 0;
    long long v367 = 0u;
    long long v368 = 0u;
    uint64_t v366 = 0;
    long long v364 = 0u;
    long long v365 = 0u;
    uint64_t v363 = 0;
    long long v361 = 0u;
    long long v362 = 0u;
    uint64_t v360 = 0;
    long long v358 = 0u;
    long long v359 = 0u;
    uint64_t v357 = 0;
    long long v355 = 0u;
    long long v356 = 0u;
    uint64_t v354 = 0;
    long long v352 = 0u;
    long long v353 = 0u;
    uint64_t v351 = 0;
    long long v349 = 0u;
    long long v350 = 0u;
    uint64_t v348 = 0;
    long long v346 = 0u;
    long long v347 = 0u;
    outlined copy of Text.Storage(v248, v249, v247);
    swift_bridgeObjectRetain();
    long long v250 = v240;
    SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)();
    uint64_t v251 = v338;
    uint64_t v252 = *(void (**)(char *, char *, uint64_t))(v338 + 16);
    uint64_t v253 = v324;
    uint64_t v254 = v343;
    v252(v324, v341, v343);
    long long v255 = v325;
    v252(v325, v243, v254);
    uint64_t v256 = v336;
    uint64_t v257 = v327;
    (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v327, v250, v245);
    uint64_t v258 = *(unsigned __int8 *)(v251 + 80);
    uint64_t v259 = v251;
    uint64_t v260 = (v258 + 16) & ~v258;
    uint64_t v261 = (v323 + v258 + v260) & ~v258;
    uint64_t v262 = v256;
    unint64_t v263 = (v323 + *(unsigned __int8 *)(v256 + 80) + v261) & ~(unint64_t)*(unsigned __int8 *)(v256 + 80);
    uint64_t v264 = swift_allocObject();
    uint64_t v265 = *(void (**)(uint64_t, char *, uint64_t))(v259 + 32);
    uint64_t v266 = v253;
    uint64_t v267 = v343;
    v265(v264 + v260, v266, v343);
    v265(v264 + v261, v255, v267);
    uint64_t v268 = *(void (**)(unint64_t, char *, uint64_t))(v262 + 32);
    uint64_t v269 = v309;
    v268(v264 + v263, v257, v309);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>);
    uint64_t v270 = v328;
    ComponentStack.init(content:)();
    uint64_t v271 = v333;
    uint64_t v272 = v331;
    uint64_t v273 = v288;
    (*(void (**)(char *, void, uint64_t))(v333 + 104))(v331, *MEMORY[0x263F778E8], v288);
    uint64_t v274 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
    uint64_t v275 = v289;
    uint64_t v276 = v332;
    View.lastComponentBottomSpacing(_:)();
    (*(void (**)(char *, uint64_t))(v271 + 8))(v272, v273);
    (*(void (**)(char *, uint64_t))(v330 + 8))(v270, v276);
    uint64_t v278 = v290;
    uint64_t v277 = v291;
    (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v329, v275, v291);
    uint64_t v370 = v276;
    uint64_t v371 = v274;
    swift_getOpaqueTypeConformance2();
    uint64_t v40 = AnyView.init<A>(_:)();
    outlined consume of Text.Storage(v314, v312, v311 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v295._countAndFlagsBits, (uint64_t)v294, v340);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v297._countAndFlagsBits, v296, v307._countAndFlagsBits);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v299, v298, (char)v307._object);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v316, v315, v308);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v322, v320, (char)v344);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v278 + 8))(v275, v277);
    v319(v342, v269);
    uint64_t v279 = *(void (**)(char *, uint64_t))(v338 + 8);
    uint64_t v280 = v343;
    v279(v337, v343);
    v279(v341, v280);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v301)(v339, v345);
    a1 = v292;
    goto LABEL_6;
  }
  if (v186)
  {
    LODWORD(v344) = v281 & 1;
    outlined copy of Text.Storage(v185, v187, v281 & 1);
    swift_bridgeObjectRetain();
    goto LABEL_18;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t outlined destroy of Font.Design?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_26184DE40()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

unint64_t lazy protocol witness table accessor for type SimpleItemRichView and conformance SimpleItemRichView()
{
  unint64_t result = lazy protocol witness table cache variable for type SimpleItemRichView and conformance SimpleItemRichView;
  if (!lazy protocol witness table cache variable for type SimpleItemRichView and conformance SimpleItemRichView)
  {
    type metadata accessor for SimpleItemRichView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SimpleItemRichView and conformance SimpleItemRichView);
  }
  return result;
}

uint64_t closure #1 in MultipleDataPointWithSubTypesView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v41 = a3;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v43 = a4;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v45 = *(void *)(v42 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v42);
  uint64_t v40 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v46 = (char *)&v33 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v8 = v35;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v37 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v44 = (char *)&v33 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v33 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v33 - v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  uint64_t v18 = type metadata accessor for SimpleItemRichView();
  unint64_t v19 = lazy protocol witness table accessor for type SimpleItemRichView and conformance SimpleItemRichView();
  uint64_t v47 = v18;
  unint64_t v48 = v19;
  swift_getOpaqueTypeConformance2();
  uint64_t v36 = v17;
  View.componentSpacing(top:bottom:)();
  int v34 = v15;
  View.componentSpacing(top:bottom:)();
  swift_checkMetadataState();
  uint64_t v20 = v46;
  View.componentSpacing(top:bottom:)();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v22 = v44;
  v21(v44, v17, v7);
  uint64_t v23 = v37;
  v21(v37, v15, v7);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  uint64_t v25 = v40;
  uint64_t v26 = v20;
  uint64_t v27 = v42;
  v24(v40, v26, v42);
  uint64_t v28 = v43;
  v21(v43, v22, v7);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0));
  v21(&v28[*(int *)(v29 + 48)], v23, v7);
  v24(&v28[*(int *)(v29 + 64)], v25, v27);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v45 + 8);
  v30(v46, v27);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v35 + 8);
  v31(v34, v7);
  v31(v36, v7);
  v30(v25, v27);
  v31(v23, v7);
  return ((uint64_t (*)(char *, uint64_t))v31)(v44, v7);
}

uint64_t sub_26184E2B8()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  uint64_t v7 = type metadata accessor for SimpleItemRichView();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v6 + v5 + v9) & ~v9;
  uint64_t v11 = v10 + *(void *)(v8 + 64);
  uint64_t v12 = v3 | v9 | 7;
  uint64_t v13 = v0 + v4;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v14(v13, v1);
  v14(v0 + v6, v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v10, v7);

  return MEMORY[0x270FA0238](v0, v11, v12);
}

uint64_t partial apply for closure #1 in MultipleDataPointWithSubTypesView.body.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0)
                 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = (v6 + v4 + v5) & ~v4;
  uint64_t v8 = *(void *)(type metadata accessor for SimpleItemRichView() - 8);
  uint64_t v9 = v1 + ((v7 + v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  return closure #1 in MultipleDataPointWithSubTypesView.body.getter(v1 + v5, v1 + v7, v9, a1);
}

uint64_t associated type witness table accessor for View.Body : View in MultipleDataPointWithSubTypesView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for MultipleDataPointWithSubTypesView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 120))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 96), *(void *)(a1 + 104), *(unsigned char *)(a1 + 112));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MultipleDataPointWithSubTypesView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    uint64_t v8 = *(void *)(a2 + 40);
    char v9 = *(unsigned char *)(a2 + 48);
    outlined copy of Text.Storage(v7, v8, v9);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v8;
    *(unsigned char *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
  }
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v11;
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v12;
  uint64_t v13 = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13)
  {
    uint64_t v14 = *(void *)(a2 + 96);
    uint64_t v15 = *(void *)(a2 + 104);
    char v16 = *(unsigned char *)(a2 + 112);
    outlined copy of Text.Storage(v14, v15, v16);
    *(void *)(a1 + 96) = v14;
    *(void *)(a1 + 104) = v15;
    *(unsigned char *)(a1 + 112) = v16;
    *(void *)(a1 + 120) = v13;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v17;
  }
  uint64_t v18 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v18;
  uint64_t v19 = *(void *)(a2 + 144);
  uint64_t v20 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = v19;
  *(void *)(a1 + 152) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MultipleDataPointWithSubTypesView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 32);
  uint64_t v5 = (_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 32);
      uint64_t v8 = *(void *)(a2 + 40);
      char v9 = *(unsigned char *)(a2 + 48);
      outlined copy of Text.Storage(v7, v8, v9);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      char v12 = *(unsigned char *)(a1 + 48);
      *(void *)(a1 + 32) = v7;
      *(void *)(a1 + 40) = v8;
      *(unsigned char *)(a1 + 48) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 32);
      long long v16 = *(_OWORD *)(a2 + 48);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 48) = v16;
    }
  }
  else if (v6)
  {
    uint64_t v13 = *(void *)(a2 + 32);
    uint64_t v14 = *(void *)(a2 + 40);
    char v15 = *(unsigned char *)(a2 + 48);
    outlined copy of Text.Storage(v13, v14, v15);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v14;
    *(unsigned char *)(a1 + 48) = v15;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 48);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 48) = v17;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = (_OWORD *)(a1 + 96);
  uint64_t v19 = (_OWORD *)(a2 + 96);
  uint64_t v20 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 120))
  {
    if (v20)
    {
      uint64_t v21 = *(void *)(a2 + 96);
      uint64_t v22 = *(void *)(a2 + 104);
      char v23 = *(unsigned char *)(a2 + 112);
      outlined copy of Text.Storage(v21, v22, v23);
      uint64_t v24 = *(void *)(a1 + 96);
      uint64_t v25 = *(void *)(a1 + 104);
      char v26 = *(unsigned char *)(a1 + 112);
      *(void *)(a1 + 96) = v21;
      *(void *)(a1 + 104) = v22;
      *(unsigned char *)(a1 + 112) = v23;
      outlined consume of Text.Storage(v24, v25, v26);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 96);
      long long v30 = *(_OWORD *)(a2 + 112);
      *uint64_t v18 = *v19;
      *(_OWORD *)(a1 + 112) = v30;
    }
  }
  else if (v20)
  {
    uint64_t v27 = *(void *)(a2 + 96);
    uint64_t v28 = *(void *)(a2 + 104);
    char v29 = *(unsigned char *)(a2 + 112);
    outlined copy of Text.Storage(v27, v28, v29);
    *(void *)(a1 + 96) = v27;
    *(void *)(a1 + 104) = v28;
    *(unsigned char *)(a1 + 112) = v29;
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v31 = *(_OWORD *)(a2 + 112);
    *uint64_t v18 = *v19;
    *(_OWORD *)(a1 + 112) = v31;
  }
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Text(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for MultipleDataPointWithSubTypesView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    uint64_t v6 = *(void *)(a2 + 56);
    if (v6)
    {
      char v7 = *(unsigned char *)(a2 + 48);
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      char v10 = *(unsigned char *)(a1 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(unsigned char *)(a1 + 48) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(void *)(a1 + 56) = v6;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 32);
  }
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
LABEL_6:
  uint64_t v12 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v13;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 120))
  {
LABEL_10:
    long long v19 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v19;
    goto LABEL_11;
  }
  uint64_t v14 = *(void *)(a2 + 120);
  if (!v14)
  {
    outlined destroy of Text(a1 + 96);
    goto LABEL_10;
  }
  char v15 = *(unsigned char *)(a2 + 112);
  uint64_t v16 = *(void *)(a1 + 96);
  uint64_t v17 = *(void *)(a1 + 104);
  char v18 = *(unsigned char *)(a1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = v15;
  outlined consume of Text.Storage(v16, v17, v18);
  *(void *)(a1 + 120) = v14;
  swift_bridgeObjectRelease();
LABEL_11:
  uint64_t v20 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MultipleDataPointWithSubTypesView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 160)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MultipleDataPointWithSubTypesView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 160) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MultipleDataPointWithSubTypesView()
{
  return &type metadata for MultipleDataPointWithSubTypesView;
}

uint64_t GenericButtonModel.label.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericButtonModel.label.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *long long v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*GenericButtonModel.label.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericButtonModel.punchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for GenericButtonModel()
{
  uint64_t result = type metadata singleton initialization cache for GenericButtonModel;
  if (!type metadata singleton initialization cache for GenericButtonModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t GenericButtonModel.punchout.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*GenericButtonModel.punchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericButtonModel.init(label:punchout:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  uint64_t v5 = (char *)a4 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
  uint64_t v6 = type metadata accessor for URL();
  char v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);

  return v7(v5, a3, v6);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GenericButtonModel.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GenericButtonModel.CodingKeys()
{
  if (*v0) {
    return 0x74756F68636E7570;
  }
  else {
    return 0x6C6562616CLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GenericButtonModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized GenericButtonModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GenericButtonModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GenericButtonModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GenericButtonModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t GenericButtonModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GenericButtonModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for GenericButtonModel();
    v8[14] = 1;
    type metadata accessor for URL();
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys);
  }
  return result;
}

uint64_t GenericButtonModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GenericButtonModel.CodingKeys>);
  uint64_t v23 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  char v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for GenericButtonModel();
  MEMORY[0x270FA5388](v8);
  char v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GenericButtonModel.CodingKeys and conformance GenericButtonModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v19 = v8;
  uint64_t v20 = v5;
  uint64_t v12 = v23;
  uint64_t v11 = v24;
  char v27 = 0;
  uint64_t v13 = v25;
  uint64_t v14 = (uint64_t)v10;
  uint64_t *v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v10[1] = v15;
  char v26 = 1;
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  uint64_t v16 = v20;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v14 + *(int *)(v19 + 20), v16, v11);
  outlined init with copy of GenericButtonModel(v14, v22);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return outlined destroy of GenericButtonModel(v14);
}

uint64_t outlined init with copy of GenericButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GenericButtonModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of GenericButtonModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GenericButtonModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t base witness table accessor for Decodable in GenericButtonModel()
{
  return lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type GenericButtonModel and conformance GenericButtonModel, (void (*)(uint64_t))type metadata accessor for GenericButtonModel);
}

uint64_t base witness table accessor for Encodable in GenericButtonModel()
{
  return lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type GenericButtonModel and conformance GenericButtonModel, (void (*)(uint64_t))type metadata accessor for GenericButtonModel);
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GenericButtonModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GenericButtonModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GenericButtonModel(void *a1)
{
  return GenericButtonModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for GenericButtonModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    char v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    char v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for GenericButtonModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for GenericButtonModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  char v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for GenericButtonModel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  char v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for GenericButtonModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for GenericButtonModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericButtonModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_26184FA04);
}

uint64_t sub_26184FA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for GenericButtonModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_26184FAC8);
}

uint64_t sub_26184FAC8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for GenericButtonModel()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GenericButtonModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GenericButtonModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x26184FD64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for GenericButtonModel.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

void *type metadata accessor for GenericButtonModel.CodingKeys()
{
  return &unk_270D87718;
}

uint64_t specialized GenericButtonModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74756F68636E7570 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t SnippetHeaderModel.categoryLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SpeakableString();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t SnippetHeaderModel.categoryListIconName.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SnippetHeaderModel() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for SnippetHeaderModel()
{
  uint64_t result = type metadata singleton initialization cache for SnippetHeaderModel;
  if (!type metadata singleton initialization cache for SnippetHeaderModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SnippetHeaderModel.categoryIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SnippetHeaderModel() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SnippetHeaderModel.init(categoryLabel:categoryListIconName:categoryIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a6, a1, v12);
  uint64_t result = type metadata accessor for SnippetHeaderModel();
  uint64_t v14 = (void *)(a6 + *(int *)(result + 20));
  *uint64_t v14 = a2;
  v14[1] = a3;
  uint64_t v15 = (void *)(a6 + *(int *)(result + 24));
  *uint64_t v15 = a4;
  v15[1] = a5;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SnippetHeaderModel.CodingKeys()
{
  unint64_t v1 = 0xD000000000000014;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000012;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x79726F6765746163;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SnippetHeaderModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SnippetHeaderModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SnippetHeaderModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SnippetHeaderModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SnippetHeaderModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SnippetHeaderModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SnippetHeaderModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for SpeakableString();
  lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for SnippetHeaderModel();
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys);
  }
  return result;
}

uint64_t SnippetHeaderModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v4 = type metadata accessor for SpeakableString();
  uint64_t v28 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v29 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SnippetHeaderModel.CodingKeys>);
  uint64_t v27 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  BOOL v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SnippetHeaderModel();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SnippetHeaderModel.CodingKeys and conformance SnippetHeaderModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v12 = v27;
  uint64_t v11 = v28;
  uint64_t v25 = v8;
  char v33 = 0;
  lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  uint64_t v24 = v10;
  v13(v10, v29, v4);
  char v32 = 1;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = (uint64_t *)&v24[*(int *)(v25 + 20)];
  *uint64_t v15 = v14;
  v15[1] = v16;
  char v31 = 2;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v30);
  uint64_t v20 = (uint64_t)v24;
  uint64_t v21 = (uint64_t *)&v24[*(int *)(v25 + 24)];
  *uint64_t v21 = v17;
  v21[1] = v19;
  outlined init with copy of SnippetHeaderModel(v20, v26);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return outlined destroy of SnippetHeaderModel(v20);
}

uint64_t outlined init with copy of SnippetHeaderModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SnippetHeaderModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t base witness table accessor for Decodable in SnippetHeaderModel()
{
  return lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
}

uint64_t base witness table accessor for Encodable in SnippetHeaderModel()
{
  return lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
}

uint64_t lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SnippetHeaderModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SnippetHeaderModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SnippetHeaderModel(void *a1)
{
  return SnippetHeaderModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SnippetHeaderModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SnippetHeaderModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261850E60);
}

uint64_t sub_261850E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_261850F38);
}

uint64_t sub_261850F38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SpeakableString();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for SnippetHeaderModel()
{
  uint64_t result = type metadata accessor for SpeakableString();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SnippetHeaderModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SnippetHeaderModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2618511ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SnippetHeaderModel.CodingKeys()
{
  return &unk_270D877A8;
}

uint64_t specialized SnippetHeaderModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x79726F6765746163 && a2 == 0xED00006C6562614CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000261883C20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883C40)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t SingleActivitySummarySnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SingleActivitySummaryModel(v1, a1, (uint64_t (*)(void))type metadata accessor for SingleActivitySummaryModel);
}

uint64_t SingleActivitySummarySnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SingleActivitySummarySnippet();
  uint64_t v5 = (uint64_t *)(a2 + *(int *)(v4 + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  *uint64_t v5 = EnvironmentObject.init()();
  v5[1] = v6;
  BOOL v7 = (void *)(a2 + *(int *)(v4 + 24));
  *BOOL v7 = 0;
  v7[1] = 0;
  return outlined init with take of SingleActivitySummaryModel(a1, a2, (uint64_t (*)(void))type metadata accessor for SingleActivitySummaryModel);
}

uint64_t type metadata accessor for SingleActivitySummarySnippet()
{
  uint64_t result = type metadata singleton initialization cache for SingleActivitySummarySnippet;
  if (!type metadata singleton initialization cache for SingleActivitySummarySnippet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SingleActivitySummarySnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v166 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v150 = v2;
  uint64_t v151 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v162 = (char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  BOOL v7 = (char *)&v128 - v6;
  uint64_t v158 = type metadata accessor for FactItemHeroNumberView();
  uint64_t v156 = *(void *)(v158 - 8);
  MEMORY[0x270FA5388](v158);
  uint64_t v155 = (char *)&v128 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v160 = *(void *)(v154 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v154);
  Swift::String v159 = (char *)&v128 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v161 = (char *)&v128 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v165 = (char *)&v128 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v128 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v128 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for SnippetHeaderView();
  uint64_t v152 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v128 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v167 = (uint64_t)&v128 - v24;
  uint64_t v25 = type metadata accessor for Font.TextStyle();
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v128 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  char v32 = (void *)v1[4];
  if (v32 && (char v33 = (void *)v1[6]) != 0)
  {
    uint64_t v34 = v1[5];
    uint64_t v136 = v1[3];
    uint64_t v137 = v34;
    char v163 = v1;
    uint64_t v35 = *MEMORY[0x263F1A6E0];
    uint64_t v141 = v7;
    uint64_t v147 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 104);
    uint64_t v148 = v30;
    uint64_t v134 = v32;
    Swift::String v135 = v33;
    uint64_t v149 = (char *)&v128 - v29;
    uint64_t v164 = v31;
    v147((char *)&v128 - v29, v35, v30);
    uint64_t v36 = type metadata accessor for SingleActivitySummaryModel();
    outlined init with copy of SnippetHeaderModel?((uint64_t)v1 + *(int *)(v36 + 44), (uint64_t)v19);
    uint64_t v37 = v16;
    uint64_t v38 = (uint64_t *)&v23[*(int *)(v20 + 20)];
    *uint64_t v38 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    swift_storeEnumTagMultiPayload();
    uint64_t v39 = (uint64_t *)&v23[*(int *)(v20 + 24)];
    *uint64_t v39 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
    swift_storeEnumTagMultiPayload();
    outlined init with take of SnippetHeaderModel?((uint64_t)v19, (uint64_t)v23);
    uint64_t v139 = type metadata accessor for SnippetHeaderView;
    outlined init with take of SingleActivitySummaryModel((uint64_t)v23, v167, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v40._uint64_t countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v40);
    uint64_t v42 = v163[7];
    uint64_t v41 = (void *)v163[8];
    swift_bridgeObjectRetain();
    v43._uint64_t countAndFlagsBits = v42;
    v43._object = v41;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v43);
    swift_bridgeObjectRelease();
    v44._uint64_t countAndFlagsBits = 0;
    v44._object = (void *)0xE000000000000000;
    uint64_t v142 = v37;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v44);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v45 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v145 = v46;
    uint64_t v146 = v47;
    char v49 = v48 & 1;
    uint64_t v50 = *MEMORY[0x263F1A6D0];
    uint64_t v138 = v23;
    uint64_t v51 = v148;
    v147(v28, v50, v148);
    LODWORD(v133) = *MEMORY[0x263F1A618];
    uint64_t v52 = v133;
    uint64_t v53 = type metadata accessor for Font.Design();
    uint64_t v129 = v53;
    uint64_t v54 = *(void *)(v53 - 8);
    uint64_t v132 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 104);
    uint64_t v143 = v54 + 104;
    uint64_t v55 = (uint64_t)v165;
    v132(v165, v52, v53);
    uint64_t v56 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56);
    uint64_t v130 = v54 + 56;
    uint64_t v131 = v56;
    v56(v55, 0, 1, v53);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v55);
    uint64_t v57 = *(uint64_t (**)(char *, uint64_t))(v164 + 8);
    v164 += 8;
    char v140 = v57;
    v57(v28, v51);
    uint64_t v58 = v45;
    uint64_t v59 = v145;
    uint64_t v60 = Text.font(_:)();
    uint64_t v62 = v61;
    char v64 = v63;
    swift_release();
    outlined consume of Text.Storage(v58, v59, v49);
    swift_bridgeObjectRelease();
    LODWORD(v183) = static HierarchicalShapeStyle.secondary.getter();
    uint64_t v65 = Text.foregroundStyle<A>(_:)();
    uint64_t v67 = v66;
    LOBYTE(v59) = v68 & 1;
    outlined consume of Text.Storage(v60, v62, v64 & 1);
    swift_bridgeObjectRelease();
    static Font.Weight.semibold.getter();
    uint64_t v69 = Text.fontWeight(_:)();
    uint64_t v145 = v70;
    uint64_t v146 = v69;
    uint64_t v147 = v71;
    int v144 = v72 & 1;
    outlined consume of Text.Storage(v65, v67, v59);
    swift_bridgeObjectRelease();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v73._uint64_t countAndFlagsBits = 0;
    v73._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v73);
    uint64_t v74 = v163;
    uint64_t v183 = *v163;
    v75._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v75);
    swift_bridgeObjectRelease();
    v76._uint64_t countAndFlagsBits = 2109216;
    v76._object = (void *)0xE300000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v76);
    uint64_t v183 = v74[1];
    v77._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v77);
    swift_bridgeObjectRelease();
    v78._uint64_t countAndFlagsBits = 0;
    v78._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v78);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v79 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v81 = v80;
    LOBYTE(v52) = v82 & 1;
    uint64_t v83 = (uint64_t)v165;
    uint64_t v84 = v129;
    v132(v165, v133, v129);
    v131(v83, 0, 1, v84);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v83);
    uint64_t v85 = Text.font(_:)();
    uint64_t v87 = v86;
    LOBYTE(v83) = v88;
    swift_release();
    LOBYTE(v84) = v83 & 1;
    outlined consume of Text.Storage(v79, v81, v52);
    swift_bridgeObjectRelease();
    uint64_t v89 = Text.bold()();
    char v163 = v90;
    uint64_t v165 = v91;
    LODWORD(v52) = v92 & 1;
    outlined consume of Text.Storage(v85, v87, v84);
    swift_bridgeObjectRelease();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v93._uint64_t countAndFlagsBits = 0;
    v93._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v93);
    v94._uint64_t countAndFlagsBits = v136;
    v94._object = v134;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v94);
    swift_bridgeObjectRelease();
    v95._uint64_t countAndFlagsBits = 8236;
    v95._object = (void *)0xE200000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v95);
    v96._uint64_t countAndFlagsBits = v137;
    v96._object = v135;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v96);
    swift_bridgeObjectRelease();
    v97._uint64_t countAndFlagsBits = 0;
    v97._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v97);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v98 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v100 = v99;
    uint64_t v142 = v101;
    LODWORD(v87) = v102 & 1;
    uint64_t v184 = MEMORY[0x263F1A838];
    uint64_t v185 = MEMORY[0x263F77350];
    uint64_t v103 = MEMORY[0x263F1A838];
    uint64_t v104 = MEMORY[0x263F77350];
    uint64_t v105 = swift_allocObject();
    uint64_t v182 = v104;
    uint64_t v183 = v105;
    uint64_t v106 = v89;
    uint64_t v133 = v89;
    uint64_t v107 = v163;
    *(void *)(v105 + 16) = v89;
    *(void *)(v105 + 24) = v107;
    LODWORD(v143) = v52;
    *(unsigned char *)(v105 + 32) = v52;
    *(void *)(v105 + 40) = v165;
    uint64_t v181 = v103;
    uint64_t v108 = swift_allocObject();
    uint64_t v179 = 0;
    uint64_t v180 = v108;
    uint64_t v110 = v145;
    uint64_t v109 = v146;
    *(void *)(v108 + 16) = v146;
    *(void *)(v108 + 24) = v110;
    LOBYTE(v89) = v144;
    *(unsigned char *)(v108 + 32) = v144;
    *(void *)(v108 + 40) = v147;
    long long v177 = 0u;
    long long v178 = 0u;
    uint64_t v175 = MEMORY[0x263F1A838];
    uint64_t v176 = MEMORY[0x263F77350];
    uint64_t v111 = swift_allocObject();
    uint64_t v173 = 0;
    uint64_t v174 = v111;
    uint64_t v136 = v100;
    uint64_t v137 = v98;
    *(void *)(v111 + 16) = v98;
    *(void *)(v111 + 24) = v100;
    LODWORD(v135) = v87;
    *(unsigned char *)(v111 + 32) = v87;
    *(void *)(v111 + 40) = v142;
    long long v171 = 0u;
    long long v172 = 0u;
    uint64_t v170 = 0;
    long long v168 = 0u;
    long long v169 = 0u;
    outlined copy of Text.Storage(v106, (uint64_t)v163, v143);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v109, v110, v89);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v98, v100, v87);
    swift_bridgeObjectRetain();
    uint64_t v112 = v155;
    FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
    Swift::String v113 = v161;
    uint64_t v114 = v158;
    View.componentSpacing(top:bottom:)();
    (*(void (**)(char *, uint64_t))(v156 + 8))(v112, v114);
    uint64_t v115 = (uint64_t)v138;
    uint64_t v116 = v139;
    outlined init with copy of SingleActivitySummaryModel(v167, (uint64_t)v138, (uint64_t (*)(void))v139);
    uint64_t v117 = v159;
    uint64_t v118 = v160;
    uint64_t v119 = v154;
    (*(void (**)(char *, char *, uint64_t))(v160 + 16))(v159, v113, v154);
    unint64_t v120 = (*(unsigned __int8 *)(v152 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80);
    unint64_t v121 = (v153 + *(unsigned __int8 *)(v118 + 80) + v120) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
    uint64_t v122 = swift_allocObject();
    outlined init with take of SingleActivitySummaryModel(v115, v122 + v120, (uint64_t (*)(void))v116);
    (*(void (**)(unint64_t, char *, uint64_t))(v118 + 32))(v122 + v121, v117, v119);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>);
    uint64_t v123 = v141;
    ComponentStack.init(content:)();
    uint64_t v124 = v150;
    uint64_t v125 = v151;
    (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v162, v123, v150);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>);
    uint64_t v126 = AnyView.init<A>(_:)();
    outlined consume of Text.Storage(v137, v136, (char)v135);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v146, v145, v144);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v133, (uint64_t)v163, v143);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v125 + 8))(v123, v124);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v113, v119);
    outlined destroy of SnippetHeaderView(v167, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    uint64_t result = v140(v149, v148);
  }
  else
  {
    uint64_t result = AnyView.init<A>(_:)();
    uint64_t v126 = result;
  }
  *uint64_t v166 = v126;
  return result;
}

uint64_t closure #1 in SingleActivitySummarySnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = type metadata accessor for SnippetHeaderView();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v22 - v16;
  outlined init with copy of SingleActivitySummaryModel(a1, (uint64_t)&v22 - v16, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v18(v11, v23, v5);
  outlined init with copy of SingleActivitySummaryModel((uint64_t)v17, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  v18(v9, (uint64_t)v11, v5);
  outlined init with copy of SingleActivitySummaryModel((uint64_t)v15, a3, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, <<opaque return type of View.componentSpacing(top:bottom:)>>.0));
  v18((char *)(a3 + *(int *)(v19 + 48)), (uint64_t)v9, v5);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v11, v5);
  outlined destroy of SnippetHeaderView((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  v20(v9, v5);
  return outlined destroy of SnippetHeaderView((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
}

uint64_t outlined init with take of SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_26185270C()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t outlined init with copy of SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2618527B8()
{
  uint64_t v1 = type metadata accessor for SnippetHeaderView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v18 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v0 + v3, 1, v9))
  {
    uint64_t v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v0 + v3, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = v8 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  uint64_t v13 = v8 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  uint64_t v15 = (v3 + v18 + v6) & ~v6;
  uint64_t v16 = v15 + v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v15, v4);

  return MEMORY[0x270FA0238](v0, v16, v2 | v6 | 7);
}

uint64_t partial apply for closure #1 in SingleActivitySummarySnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SnippetHeaderView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0)
                 - 8);
  uint64_t v7 = v1 + ((v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return closure #1 in SingleActivitySummarySnippet.body.getter(v1 + v4, v7, a1);
}

uint64_t associated type witness table accessor for View.Body : View in SingleActivitySummarySnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for SingleActivitySummarySnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    uint64_t v9 = a2[9];
    a1[8] = a2[8];
    a1[9] = v9;
    a1[10] = a2[10];
    uint64_t v10 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
    uint64_t v37 = (char *)a2 + v10;
    __dst = (char *)v4 + v10;
    uint64_t v11 = type metadata accessor for SnippetHeaderModel();
    uint64_t v36 = *(void *)(v11 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v37, 1, v11))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v37, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v15 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(__dst, v37, v15);
      uint64_t v16 = *(int *)(v11 + 20);
      uint64_t v17 = &__dst[v16];
      uint64_t v18 = &v37[v16];
      uint64_t v19 = *((void *)v18 + 1);
      *(void *)uint64_t v17 = *(void *)v18;
      *((void *)v17 + 1) = v19;
      uint64_t v20 = *(int *)(v11 + 24);
      uint64_t v21 = &__dst[v20];
      uint64_t v22 = &v37[v20];
      uint64_t v23 = *((void *)v22 + 1);
      *(void *)uint64_t v21 = *(void *)v22;
      *((void *)v21 + 1) = v23;
      uint64_t v24 = *(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v24(__dst, 0, 1, v11);
    }
    uint64_t v25 = *(int *)(a3 + 20);
    uint64_t v26 = *(int *)(a3 + 24);
    uint64_t v27 = (uint64_t *)((char *)v4 + v25);
    uint64_t v28 = (char *)a2 + v25;
    uint64_t v30 = *(void **)v28;
    uint64_t v29 = *((void *)v28 + 1);
    void *v27 = v30;
    v27[1] = v29;
    uint64_t v31 = (uint64_t *)((char *)v4 + v26);
    char v32 = (uint64_t *)((char *)a2 + v26);
    uint64_t v33 = v32[1];
    void *v31 = *v32;
    v31[1] = v33;
    id v34 = v30;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for SingleActivitySummarySnippet(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
  uint64_t v5 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    uint64_t v6 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SingleActivitySummarySnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v9 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
  uint64_t v35 = (char *)(a2 + v9);
  __dst = (char *)(a1 + v9);
  uint64_t v10 = type metadata accessor for SnippetHeaderModel();
  uint64_t v34 = *(void *)(v10 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v35, 1, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v35, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(__dst, v35, v13);
    uint64_t v14 = *(int *)(v10 + 20);
    uint64_t v15 = &__dst[v14];
    uint64_t v16 = &v35[v14];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    uint64_t v18 = *(int *)(v10 + 24);
    uint64_t v19 = &__dst[v18];
    uint64_t v20 = &v35[v18];
    uint64_t v21 = *((void *)v20 + 1);
    *(void *)uint64_t v19 = *(void *)v20;
    *((void *)v19 + 1) = v21;
    uint64_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22(__dst, 0, 1, v10);
  }
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = *(int *)(a3 + 24);
  uint64_t v25 = (void *)(a1 + v23);
  uint64_t v26 = a2 + v23;
  uint64_t v28 = *(void **)v26;
  uint64_t v27 = *(void *)(v26 + 8);
  void *v25 = v28;
  v25[1] = v27;
  uint64_t v29 = (void *)(a1 + v24);
  uint64_t v30 = (void *)(a2 + v24);
  uint64_t v31 = v30[1];
  void *v29 = *v30;
  v29[1] = v31;
  id v32 = v28;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SingleActivitySummarySnippet(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v33 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 24))(v7, v8, v33);
      uint64_t v34 = *(int *)(v9 + 20);
      uint64_t v35 = &v7[v34];
      uint64_t v36 = &v8[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      *((void *)v35 + 1) = *((void *)v36 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v37 = *(int *)(v9 + 24);
      uint64_t v38 = &v7[v37];
      uint64_t v39 = &v8[v37];
      *(void *)uint64_t v38 = *(void *)v39;
      *((void *)v38 + 1) = *((void *)v39 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    outlined destroy of SnippetHeaderView((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v7, v8, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
  uint64_t v15 = *(int *)(v9 + 20);
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  uint64_t v18 = *(int *)(v9 + 24);
  uint64_t v19 = &v7[v18];
  uint64_t v20 = &v8[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  uint64_t v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v7, 0, 1, v9);
LABEL_7:
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = *(void **)((char *)a1 + v23);
  uint64_t v27 = *(void **)((char *)a2 + v23);
  void *v24 = v27;
  id v28 = v27;

  v24[1] = *((void *)v25 + 1);
  uint64_t v29 = *(int *)(a3 + 24);
  uint64_t v30 = (void *)((char *)a1 + v29);
  uint64_t v31 = (void *)((char *)a2 + v29);
  void *v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SingleActivitySummarySnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v6 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v7, v8, v12);
    *(_OWORD *)&v7[*(int *)(v9 + 20)] = *(_OWORD *)&v8[*(int *)(v9 + 20)];
    *(_OWORD *)&v7[*(int *)(v9 + 24)] = *(_OWORD *)&v8[*(int *)(v9 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t assignWithTake for SingleActivitySummarySnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for SnippetHeaderModel();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      uint64_t v30 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 40))(v11, v12, v30);
      uint64_t v31 = *(int *)(v13 + 20);
      id v32 = &v11[v31];
      uint64_t v33 = &v12[v31];
      uint64_t v35 = *(void *)v33;
      uint64_t v34 = *((void *)v33 + 1);
      *(void *)id v32 = v35;
      *((void *)v32 + 1) = v34;
      swift_bridgeObjectRelease();
      uint64_t v36 = *(int *)(v13 + 24);
      uint64_t v37 = &v11[v36];
      uint64_t v38 = &v12[v36];
      uint64_t v40 = *(void *)v38;
      uint64_t v39 = *((void *)v38 + 1);
      *(void *)uint64_t v37 = v40;
      *((void *)v37 + 1) = v39;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    outlined destroy of SnippetHeaderView((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v18 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v11, v12, v18);
  *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
  *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v20 = *(int *)(a3 + 20);
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = *(void **)(a1 + v20);
  *uint64_t v21 = *v22;

  v21[1] = v22[1];
  uint64_t v24 = *(int *)(a3 + 24);
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  void *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleActivitySummarySnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2618538E8);
}

uint64_t sub_2618538E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SingleActivitySummaryModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SingleActivitySummarySnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2618539C8);
}

uint64_t sub_2618539C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SingleActivitySummaryModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata completion function for SingleActivitySummarySnippet()
{
  uint64_t result = type metadata accessor for SingleActivitySummaryModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_261853B1C()
{
  return MEMORY[0x263F1B710];
}

uint64_t GenericMedCompletedLogModel.medStatus.getter()
{
  return *v0;
}

uint64_t GenericMedCompletedLogModel.time.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericMedCompletedLogModel.time.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.time.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for GenericMedCompletedLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t type metadata accessor for GenericMedCompletedLogModel()
{
  uint64_t result = type metadata singleton initialization cache for GenericMedCompletedLogModel;
  if (!type metadata singleton initialization cache for GenericMedCompletedLogModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t GenericMedCompletedLogModel.appPunchout.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for GenericMedCompletedLogModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(v3 + 24), &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*GenericMedCompletedLogModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.dontDisplayGranularTime.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 28));
}

uint64_t GenericMedCompletedLogModel.dontDisplayGranularTime.setter(char a1)
{
  uint64_t result = type metadata accessor for GenericMedCompletedLogModel();
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.dontDisplayGranularTime.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.sashBundleID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericMedCompletedLogModel.sashBundleID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.sashBundleID.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.isSmartEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 36));
}

uint64_t GenericMedCompletedLogModel.isSmartEnabled.setter(char a1)
{
  uint64_t result = type metadata accessor for GenericMedCompletedLogModel();
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.isSmartEnabled.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.loggedLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericMedCompletedLogModel.loggedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 40));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.loggedLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.skippedLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericMedCompletedLogModel.skippedLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.skippedLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.takenLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericMedCompletedLogModel.takenLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 48));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.takenLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.allScheduledMedicationsLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericMedCompletedLogModel.allScheduledMedicationsLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 52));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.allScheduledMedicationsLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for GenericMedCompletedLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 56), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t GenericMedCompletedLogModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for GenericMedCompletedLogModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(v3 + 56), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*GenericMedCompletedLogModel.snippetHeaderModel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t GenericMedCompletedLogModel.init(medStatus:givenTime:url:dontDisplayGranularTime:sashBundleID:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:allScheduledMedicationsLabel:snippetHeaderModel:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v65 = a7;
  uint64_t v62 = a5;
  uint64_t v63 = a6;
  int v60 = a4;
  uint64_t v59 = a3;
  uint64_t v71 = a16;
  uint64_t v72 = a17;
  uint64_t v69 = a14;
  uint64_t v70 = a15;
  uint64_t v67 = a8;
  uint64_t v68 = a13;
  uint64_t v66 = a12;
  uint64_t v64 = a11;
  uint64_t v61 = a10;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v50 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0xE000000000000000;
  uint64_t v22 = (int *)type metadata accessor for GenericMedCompletedLogModel();
  uint64_t v58 = a9 + v22[6];
  uint64_t v23 = v58;
  uint64_t v52 = type metadata accessor for AppPunchout();
  uint64_t v24 = *(void *)(v52 - 8);
  uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
  uint64_t v53 = v24 + 56;
  v51(v23, 1, 1, v52);
  uint64_t v55 = v22[7];
  *(unsigned char *)(a9 + v55) = 0;
  uint64_t v25 = (void *)(a9 + v22[8]);
  void *v25 = 0xD000000000000010;
  v25[1] = 0x80000002618838C0;
  uint64_t v54 = v22[9];
  *(unsigned char *)(a9 + v54) = 0;
  uint64_t v26 = (void *)(a9 + v22[10]);
  void *v26 = 0;
  v26[1] = 0;
  uint64_t v27 = (void *)(a9 + v22[11]);
  void *v27 = 0;
  v27[1] = 0;
  uint64_t v28 = (void *)(a9 + v22[12]);
  void *v28 = 0;
  v28[1] = 0;
  uint64_t v29 = (void *)(a9 + v22[13]);
  uint64_t v57 = v29;
  void *v29 = 0;
  v29[1] = 0;
  uint64_t v30 = a9 + v22[14];
  uint64_t v56 = v30;
  uint64_t v31 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  *(unsigned char *)a9 = a1;
  id v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
  objc_msgSend(v32, sel_setTimeStyle_, 1);
  uint64_t v33 = a2;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v35 = objc_msgSend(v32, sel_stringFromDate_, isa);

  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v37;

  *(void *)(a9 + 8) = v36;
  *(void *)(a9 + 16) = v38;
  uint64_t v39 = (uint64_t)v50;
  uint64_t v40 = v59;
  GenericMedCompletedLogModel.createAppPunchout(url:)(v59);
  outlined destroy of Font.Design?(v40, &demangling cache variable for type metadata for URL?);
  uint64_t v41 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(v33, v41);
  v51(v39, 0, 1, v52);
  outlined assign with take of AppPunchout?(v39, v58, &demangling cache variable for type metadata for AppPunchout?);
  *(unsigned char *)(a9 + v55) = v60;
  swift_bridgeObjectRelease();
  uint64_t v42 = v63;
  void *v25 = v62;
  v25[1] = v42;
  *(unsigned char *)(a9 + v54) = v65;
  swift_bridgeObjectRelease();
  uint64_t v43 = v61;
  void *v26 = v67;
  v26[1] = v43;
  swift_bridgeObjectRelease();
  uint64_t v44 = v66;
  void *v27 = v64;
  v27[1] = v44;
  swift_bridgeObjectRelease();
  uint64_t v45 = v69;
  void *v28 = v68;
  v28[1] = v45;
  uint64_t v46 = v57;
  swift_bridgeObjectRelease();
  uint64_t v48 = v71;
  uint64_t v47 = v72;
  void *v46 = v70;
  v46[1] = v48;
  return outlined assign with take of AppPunchout?(v47, v56, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t GenericMedCompletedLogModel.createAppPunchout(url:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL.absoluteString.getter();
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

unint64_t GenericMedCompletedLogModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x757461745364656DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 1701669236;
      break;
    case 2:
      unint64_t result = 0x68636E7550707061;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0x646E754268736173;
      break;
    case 5:
      unint64_t result = 0x457472616D537369;
      break;
    case 6:
      unint64_t result = 0x614C646567676F6CLL;
      break;
    case 7:
      unint64_t result = 0x4C64657070696B73;
      break;
    case 8:
      unint64_t result = 0x62614C6E656B6174;
      break;
    case 9:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance GenericMedCompletedLogModel.CodingKeys()
{
  return GenericMedCompletedLogModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GenericMedCompletedLogModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized GenericMedCompletedLogModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GenericMedCompletedLogModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GenericMedCompletedLogModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GenericMedCompletedLogModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t GenericMedCompletedLogModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GenericMedCompletedLogModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for GenericMedCompletedLogModel();
    v8[13] = 2;
    type metadata accessor for AppPunchout();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_6(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[6] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[5] = 10;
    type metadata accessor for SnippetHeaderModel();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_6(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys);
  }
  return result;
}

uint64_t GenericMedCompletedLogModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v57 = (uint64_t)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v5 - 8);
  int v60 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GenericMedCompletedLogModel.CodingKeys>);
  uint64_t v59 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for GenericMedCompletedLogModel();
  uint64_t v10 = (int *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0xE000000000000000;
  uint64_t v13 = (uint64_t)&v12[v10[8]];
  uint64_t v14 = type metadata accessor for AppPunchout();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v69 = v13;
  v15(v13, 1, 1, v14);
  uint64_t v58 = v10[9];
  v12[v58] = 0;
  int v16 = &v12[v10[10]];
  *(void *)int v16 = 0xD000000000000010;
  *((void *)v16 + 1) = 0x80000002618838C0;
  uint64_t v17 = v10[11];
  v12[v17] = 0;
  uint64_t v18 = &v12[v10[12]];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  uint64_t v71 = v18;
  uint64_t v19 = &v12[v10[13]];
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  uint64_t v70 = v19;
  uint64_t v20 = &v12[v10[14]];
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0;
  uint64_t v67 = v20;
  uint64_t v68 = v16;
  uint64_t v21 = &v12[v10[15]];
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0;
  uint64_t v66 = v21;
  uint64_t v22 = (uint64_t)&v12[v10[16]];
  uint64_t v23 = type metadata accessor for SnippetHeaderModel();
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  uint64_t v64 = v22;
  v24(v22, 1, 1, v23);
  uint64_t v25 = a1[3];
  int v65 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v25);
  lazy protocol witness table accessor for type GenericMedCompletedLogModel.CodingKeys and conformance GenericMedCompletedLogModel.CodingKeys();
  uint64_t v62 = v8;
  uint64_t v26 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v26)
  {
    uint64_t v31 = v69;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v65);
    swift_bridgeObjectRelease();
    outlined destroy of Font.Design?(v31, &demangling cache variable for type metadata for AppPunchout?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined destroy of Font.Design?(v64, &demangling cache variable for type metadata for SnippetHeaderModel?);
  }
  else
  {
    uint64_t v63 = v17;
    uint64_t v27 = (uint64_t)v60;
    uint64_t v28 = v58;
    uint64_t v29 = v59;
    char v82 = 0;
    *uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v81 = 1;
    *((void *)v12 + 1) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v12 + 2) = v30;
    char v80 = 2;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_6(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v27, v69, &demangling cache variable for type metadata for AppPunchout?);
    char v79 = 3;
    v12[v28] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v78 = 4;
    uint64_t v32 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v34 = v33;
    id v35 = (uint64_t *)v68;
    swift_bridgeObjectRelease();
    *id v35 = v32;
    v35[1] = v34;
    char v77 = 5;
    v12[v63] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v76 = 6;
    uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v38 = v37;
    uint64_t v39 = v71;
    uint64_t v63 = v36;
    swift_bridgeObjectRelease();
    *uint64_t v39 = v63;
    v39[1] = v38;
    char v75 = 7;
    uint64_t v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v42 = v41;
    uint64_t v43 = v70;
    uint64_t v63 = v40;
    swift_bridgeObjectRelease();
    *uint64_t v43 = v63;
    v43[1] = v42;
    char v74 = 8;
    uint64_t v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v46 = v45;
    uint64_t v47 = (uint64_t *)v67;
    swift_bridgeObjectRelease();
    *uint64_t v47 = v44;
    v47[1] = v46;
    char v73 = 9;
    uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v50 = v49;
    uint64_t v51 = (uint64_t *)v66;
    swift_bridgeObjectRelease();
    *uint64_t v51 = v48;
    v51[1] = v50;
    char v72 = 10;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_6(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v52 = v61;
    uint64_t v53 = v62;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v53, v52);
    outlined assign with take of AppPunchout?(v57, v64, &demangling cache variable for type metadata for SnippetHeaderModel?);
    outlined init with copy of GenericMedCompletedLogModel((uint64_t)v12, v56);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v65);
    return _s10WellnessUI27GenericMedCompletedLogModelVWOhTm_0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for GenericMedCompletedLogModel);
  }
}

uint64_t outlined init with copy of GenericMedCompletedLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GenericMedCompletedLogModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Decodable in GenericMedCompletedLogModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_6(&lazy protocol witness table cache variable for type GenericMedCompletedLogModel and conformance GenericMedCompletedLogModel, (void (*)(uint64_t))type metadata accessor for GenericMedCompletedLogModel);
}

uint64_t base witness table accessor for Encodable in GenericMedCompletedLogModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_6(&lazy protocol witness table cache variable for type GenericMedCompletedLogModel and conformance GenericMedCompletedLogModel, (void (*)(uint64_t))type metadata accessor for GenericMedCompletedLogModel);
}

uint64_t _s10SnippetKit11AppPunchoutVACSEAAWlTm_6(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GenericMedCompletedLogModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GenericMedCompletedLogModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GenericMedCompletedLogModel(void *a1)
{
  return GenericMedCompletedLogModel.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for GenericMedCompletedLogModel(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for AppPunchout();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[8];
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    uint64_t v17 = (void *)((char *)v4 + v16);
    uint64_t v18 = (void *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    uint64_t v21 = (void *)((char *)v4 + v20);
    uint64_t v22 = (void *)((char *)a2 + v20);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = a3[11];
    uint64_t v25 = a3[12];
    uint64_t v26 = (void *)((char *)v4 + v24);
    uint64_t v27 = (void *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    void *v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = (void *)((char *)v4 + v25);
    uint64_t v30 = (void *)((char *)a2 + v25);
    uint64_t v31 = v30[1];
    void *v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = a3[13];
    uint64_t v33 = a3[14];
    uint64_t v34 = (void *)((char *)v4 + v32);
    id v35 = (void *)((char *)a2 + v32);
    uint64_t v36 = v35[1];
    uint64_t v37 = (char *)a2 + v33;
    __dst = (char *)v4 + v33;
    *uint64_t v34 = *v35;
    v34[1] = v36;
    uint64_t v38 = type metadata accessor for SnippetHeaderModel();
    uint64_t v52 = *(void *)(v38 - 8);
    uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v39(v37, 1, v38))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      uint64_t v41 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(__dst, v37, v41);
      uint64_t v42 = *(int *)(v38 + 20);
      uint64_t v43 = &__dst[v42];
      uint64_t v44 = &v37[v42];
      uint64_t v45 = *((void *)v44 + 1);
      *(void *)uint64_t v43 = *(void *)v44;
      *((void *)v43 + 1) = v45;
      uint64_t v46 = *(int *)(v38 + 24);
      uint64_t v47 = &__dst[v46];
      uint64_t v48 = &v37[v46];
      uint64_t v49 = *((void *)v48 + 1);
      *(void *)uint64_t v47 = *(void *)v48;
      *((void *)v47 + 1) = v49;
      uint64_t v50 = *(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50(__dst, 0, 1, v38);
    }
  }
  return v4;
}

uint64_t destroy for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 56);
  uint64_t v8 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v7, v10);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for AppPunchout();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = a3[11];
  uint64_t v23 = a3[12];
  uint64_t v24 = (void *)(a1 + v22);
  uint64_t v25 = (void *)(a2 + v22);
  uint64_t v26 = v25[1];
  void *v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = (void *)(a1 + v23);
  uint64_t v28 = (void *)(a2 + v23);
  uint64_t v29 = v28[1];
  void *v27 = *v28;
  v27[1] = v29;
  uint64_t v30 = a3[13];
  uint64_t v31 = a3[14];
  uint64_t v32 = (void *)(a1 + v30);
  uint64_t v33 = (void *)(a2 + v30);
  uint64_t v34 = v33[1];
  id v35 = (char *)(a2 + v31);
  __dst = (char *)(a1 + v31);
  void *v32 = *v33;
  v32[1] = v34;
  uint64_t v36 = type metadata accessor for SnippetHeaderModel();
  uint64_t v50 = *(void *)(v36 - 8);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v37(v35, 1, v36))
  {
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v35, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    uint64_t v39 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(__dst, v35, v39);
    uint64_t v40 = *(int *)(v36 + 20);
    uint64_t v41 = &__dst[v40];
    uint64_t v42 = &v35[v40];
    uint64_t v43 = *((void *)v42 + 1);
    *(void *)uint64_t v41 = *(void *)v42;
    *((void *)v41 + 1) = v43;
    uint64_t v44 = *(int *)(v36 + 24);
    uint64_t v45 = &__dst[v44];
    uint64_t v46 = &v35[v44];
    uint64_t v47 = *((void *)v46 + 1);
    *(void *)uint64_t v45 = *(void *)v46;
    *((void *)v45 + 1) = v47;
    uint64_t v48 = *(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(__dst, 0, 1, v36);
  }
  return a1;
}

uint64_t assignWithCopy for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for AppPunchout();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v15 = a3[8];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v18 = a3[10];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[11];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[12];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  void *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[13];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  void *v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[14];
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  uint64_t v33 = type metadata accessor for SnippetHeaderModel();
  uint64_t v34 = *(void *)(v33 - 8);
  id v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      uint64_t v48 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 24))(v31, v32, v48);
      uint64_t v49 = *(int *)(v33 + 20);
      uint64_t v50 = &v31[v49];
      uint64_t v51 = &v32[v49];
      *(void *)uint64_t v50 = *(void *)v51;
      *((void *)v50 + 1) = *((void *)v51 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v52 = *(int *)(v33 + 24);
      uint64_t v53 = &v31[v52];
      uint64_t v54 = &v32[v52];
      *(void *)uint64_t v53 = *(void *)v54;
      *((void *)v53 + 1) = *((void *)v54 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    _s10WellnessUI27GenericMedCompletedLogModelVWOhTm_0((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v37)
  {
LABEL_12:
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v31, v32, *(void *)(*(void *)(v46 - 8) + 64));
    return a1;
  }
  uint64_t v38 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v31, v32, v38);
  uint64_t v39 = *(int *)(v33 + 20);
  uint64_t v40 = &v31[v39];
  uint64_t v41 = &v32[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = *((void *)v41 + 1);
  uint64_t v42 = *(int *)(v33 + 24);
  uint64_t v43 = &v31[v42];
  uint64_t v44 = &v32[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = *((void *)v44 + 1);
  uint64_t v45 = *(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v45(v31, 0, 1, v33);
  return a1;
}

uint64_t _s10WellnessUI27GenericMedCompletedLogModelVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for AppPunchout();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  uint64_t v14 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v15 = a3[13];
  uint64_t v16 = a3[14];
  uint64_t v17 = (char *)(a1 + v16);
  uint64_t v18 = (char *)(a2 + v16);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  uint64_t v19 = type metadata accessor for SnippetHeaderModel();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    uint64_t v22 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v17, v18, v22);
    *(_OWORD *)&v17[*(int *)(v19 + 20)] = *(_OWORD *)&v18[*(int *)(v19 + 20)];
    *(_OWORD *)&v17[*(int *)(v19 + 24)] = *(_OWORD *)&v18[*(int *)(v19 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

uint64_t assignWithTake for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for AppPunchout();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  void *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[12];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  void *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[13];
  int v37 = (void *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  *int v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[14];
  uint64_t v42 = (char *)(a1 + v41);
  uint64_t v43 = (char *)(a2 + v41);
  uint64_t v44 = type metadata accessor for SnippetHeaderModel();
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1, v44);
  int v48 = v46(v43, 1, v44);
  if (!v47)
  {
    if (!v48)
    {
      uint64_t v52 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 40))(v42, v43, v52);
      uint64_t v53 = *(int *)(v44 + 20);
      uint64_t v54 = &v42[v53];
      uint64_t v55 = &v43[v53];
      uint64_t v57 = *(void *)v55;
      uint64_t v56 = *((void *)v55 + 1);
      *(void *)uint64_t v54 = v57;
      *((void *)v54 + 1) = v56;
      swift_bridgeObjectRelease();
      uint64_t v58 = *(int *)(v44 + 24);
      uint64_t v59 = &v42[v58];
      int v60 = &v43[v58];
      uint64_t v62 = *(void *)v60;
      uint64_t v61 = *((void *)v60 + 1);
      *(void *)uint64_t v59 = v62;
      *((void *)v59 + 1) = v61;
      swift_bridgeObjectRelease();
      return a1;
    }
    _s10WellnessUI27GenericMedCompletedLogModelVWOhTm_0((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v48)
  {
LABEL_12:
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v42, v43, *(void *)(*(void *)(v50 - 8) + 64));
    return a1;
  }
  uint64_t v49 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 32))(v42, v43, v49);
  *(_OWORD *)&v42[*(int *)(v44 + 20)] = *(_OWORD *)&v43[*(int *)(v44 + 20)];
  *(_OWORD *)&v42[*(int *)(v44 + 24)] = *(_OWORD *)&v43[*(int *)(v44 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261856B20);
}

uint64_t sub_261856B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 56);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_261856C68);
}

uint64_t sub_261856C68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 56);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for GenericMedCompletedLogModel()
{
  type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, MEMORY[0x263F762C0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppPunchout?(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for GenericMedCompletedLogModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GenericMedCompletedLogModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x261857028);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

void *type metadata accessor for GenericMedCompletedLogModel.CodingKeys()
{
  return &unk_270D87888;
}

uint64_t specialized GenericMedCompletedLogModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x757461745364656DLL && a2 == 0xE900000000000073;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701669236 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000261883920 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x646E754268736173 && a2 == 0xEC0000004449656CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x457472616D537369 && a2 == 0xEE0064656C62616ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x4C64657070696B73 && a2 == 0xEC0000006C656261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x62614C6E656B6174 && a2 == 0xEA00000000006C65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000261883C60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883800)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t HeightQuerySnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of HeightQueryModel(v1, a1, (uint64_t (*)(void))type metadata accessor for HeightQueryModel);
}

uint64_t HeightQuerySnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for HeightQuerySnippet() + 20));
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  *unsigned int v4 = EnvironmentObject.init()();
  v4[1] = v5;
  return outlined init with take of HeightQueryModel(a1, a2, (uint64_t (*)(void))type metadata accessor for HeightQueryModel);
}

uint64_t type metadata accessor for HeightQuerySnippet()
{
  uint64_t result = type metadata singleton initialization cache for HeightQuerySnippet;
  if (!type metadata singleton initialization cache for HeightQuerySnippet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t HeightQuerySnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
  uint64_t v162 = *(void *)(v164 - 8);
  MEMORY[0x270FA5388](v164);
  uint64_t v160 = (char *)&v136 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v165 = *(void *)(v4 - 8);
  uint64_t v166 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v161 = (char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  char v163 = (char *)&v136 - v7;
  uint64_t v157 = type metadata accessor for FactItemHeroNumberView();
  uint64_t v155 = *(void *)(v157 - 8);
  MEMORY[0x270FA5388](v157);
  uint64_t v153 = (char *)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentSpacing(top:bottom:)>>.0);
  MEMORY[0x270FA5388](v154);
  uint64_t v152 = (char *)&v136 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v147 = (uint64_t)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v167 = (char *)&v136 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Font.TextStyle();
  uint64_t v170 = *(void *)(v14 - 8);
  uint64_t v171 = v14;
  MEMORY[0x270FA5388](v14);
  long long v169 = (char *)&v136 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Snippet = type metadata accessor for HeightQuerySnippet();
  uint64_t v156 = *(void *)(Snippet - 8);
  uint64_t v17 = MEMORY[0x270FA5388](Snippet - 8);
  uint64_t v158 = v18;
  uint64_t v159 = (uint64_t)&v136 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v146 = (uint64_t)&v136 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v144 = (uint64_t)&v136 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = type metadata accessor for SnippetHeaderView();
  uint64_t v148 = *(void *)(v143 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v143);
  uint64_t v168 = (uint64_t)&v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v173 = (uint64_t)&v136 - v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v136 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for AppPunchout();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v150 = v31;
  uint64_t v151 = (char *)&v136 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  long long v172 = (char *)&v136 - v32;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v33 - 8);
  uint64_t v35 = (char *)&v136 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Model = type metadata accessor for HeightQueryModel();
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 32), (uint64_t)v35, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v36 = type metadata accessor for SpeakableString();
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36) != 1)
  {
    uint64_t v142 = a1;
    uint64_t v141 = SpeakableString.print.getter();
    uint64_t v39 = v38;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v35, v36);
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, (uint64_t)v27, &demangling cache variable for type metadata for AppPunchout?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
    {
      swift_bridgeObjectRelease();
      outlined destroy of Font.Design?((uint64_t)v27, &demangling cache variable for type metadata for AppPunchout?);
      a1 = v142;
      goto LABEL_5;
    }
    uint64_t v42 = v1;
    uint64_t v139 = v29;
    uint64_t v140 = v28;
    uint64_t v43 = *(void (**)(unint64_t, char *, uint64_t))(v29 + 32);
    uint64_t v138 = v29 + 32;
    uint64_t v136 = v39;
    uint64_t v137 = v43;
    v43((unint64_t)v172, v27, v28);
    uint64_t v44 = v144;
    uint64_t v45 = (int *)Model;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 40), v144, &demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v46 = v143;
    uint64_t v47 = v168;
    int v48 = (uint64_t *)(v168 + *(int *)(v143 + 20));
    *int v48 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    swift_storeEnumTagMultiPayload();
    uint64_t v49 = (uint64_t *)(v47 + *(int *)(v46 + 24));
    uint64_t *v49 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
    swift_storeEnumTagMultiPayload();
    outlined init with take of SnippetHeaderModel?(v44, v47);
    outlined init with take of HeightQueryModel(v47, v173, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    LOBYTE(v49) = *(unsigned char *)(v42 + v45[7] + 8);
    uint64_t v50 = v146;
    outlined init with copy of HeightQueryModel(v42, v146, (uint64_t (*)(void))type metadata accessor for HeightQuerySnippet);
    if (v49)
    {
      outlined destroy of HeightQuerySnippet(v50, (uint64_t (*)(void))type metadata accessor for HeightQuerySnippet);
      (*(void (**)(char *, void, uint64_t))(v170 + 104))(v169, *MEMORY[0x263F1A6E0], v171);
    }
    else
    {
      char v51 = *(unsigned char *)(v50 + v45[6] + 8);
      outlined destroy of HeightQuerySnippet(v50, (uint64_t (*)(void))type metadata accessor for HeightQuerySnippet);
      (*(void (**)(char *, void, uint64_t))(v170 + 104))(v169, *MEMORY[0x263F1A6E0], v171);
      if ((v51 & 1) == 0)
      {
        LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v78._uint64_t countAndFlagsBits = 0;
        v78._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v78);
        long long v189 = *(_OWORD *)(v42 + v45[11]);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        v79._uint64_t countAndFlagsBits = Optional.description.getter();
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v79);
        swift_bridgeObjectRelease();
        v80._uint64_t countAndFlagsBits = 2108704;
        v80._object = (void *)0xE300000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v80);
        long long v189 = *(_OWORD *)(v42 + v45[12]);
        v81._uint64_t countAndFlagsBits = Optional.description.getter();
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v81);
        swift_bridgeObjectRelease();
        v82._uint64_t countAndFlagsBits = 0;
        v82._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v82);
        LocalizedStringKey.init(stringInterpolation:)();
        uint64_t v83 = Text.init(_:tableName:bundle:comment:)();
        uint64_t Model = v84;
        uint64_t v146 = v83;
        uint64_t v144 = v85;
        char v87 = v86 & 1;
        uint64_t v88 = *MEMORY[0x263F1A618];
        uint64_t v89 = type metadata accessor for Font.Design();
        uint64_t v90 = *(void *)(v89 - 8);
        uint64_t v91 = v147;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 104))(v147, v88, v89);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v90 + 56))(v91, 0, 1, v89);
        static Font.system(_:design:weight:)();
        outlined destroy of Font.Design?(v91, &demangling cache variable for type metadata for Font.Design?);
        uint64_t v93 = Model;
        uint64_t v92 = v146;
        uint64_t v94 = Text.font(_:)();
        uint64_t v96 = v95;
        LOBYTE(v90) = v97;
        swift_release();
        outlined consume of Text.Storage(v92, v93, v87);
        swift_bridgeObjectRelease();
        uint64_t v98 = Text.bold()();
        uint64_t v100 = v99;
        LOBYTE(v88) = v101;
        uint64_t v103 = v102;
        outlined consume of Text.Storage(v94, v96, v90 & 1);
        swift_bridgeObjectRelease();
        *(void *)&long long v189 = v98;
        *((void *)&v189 + 1) = v100;
        char v190 = v88 & 1;
        uint64_t v191 = v103;
        uint64_t v77 = AnyView.init<A>(_:)();
        uint64_t v76 = v42;
        goto LABEL_11;
      }
    }
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v52._uint64_t countAndFlagsBits = 0;
    v52._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v52);
    long long v189 = *(_OWORD *)(v42 + v45[13]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v53._uint64_t countAndFlagsBits = Optional.description.getter();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v53);
    swift_bridgeObjectRelease();
    v54._uint64_t countAndFlagsBits = 0;
    v54._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v54);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v55 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v57 = v56;
    char v59 = v58 & 1;
    uint64_t v60 = *MEMORY[0x263F1A618];
    uint64_t v61 = type metadata accessor for Font.Design();
    uint64_t v62 = *(void *)(v61 - 8);
    uint64_t v146 = v42;
    uint64_t v63 = v62;
    uint64_t v64 = v147;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 104))(v147, v60, v61);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v63 + 56))(v64, 0, 1, v61);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v64, &demangling cache variable for type metadata for Font.Design?);
    uint64_t v65 = Text.font(_:)();
    uint64_t v67 = v66;
    LOBYTE(v63) = v68;
    swift_release();
    outlined consume of Text.Storage(v55, v57, v59);
    swift_bridgeObjectRelease();
    uint64_t v69 = Text.bold()();
    uint64_t v71 = v70;
    LOBYTE(v57) = v72;
    uint64_t v74 = v73;
    uint64_t v75 = v65;
    uint64_t v76 = v146;
    outlined consume of Text.Storage(v75, v67, v63 & 1);
    swift_bridgeObjectRelease();
    *(void *)&long long v189 = v69;
    *((void *)&v189 + 1) = v71;
    char v190 = v57 & 1;
    uint64_t v191 = v74;
    uint64_t v77 = AnyView.init<A>(_:)();
LABEL_11:
    uint64_t v144 = v77;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v104._uint64_t countAndFlagsBits = 0;
    v104._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v104);
    v105._uint64_t countAndFlagsBits = v141;
    v105._object = v136;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v105);
    swift_bridgeObjectRelease();
    v106._uint64_t countAndFlagsBits = 0;
    v106._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v106);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v107 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v146 = v108;
    uint64_t v147 = v107;
    uint64_t v109 = v108;
    uint64_t v111 = v110;
    uint64_t v167 = v110;
    uint64_t v191 = MEMORY[0x263F1B728];
    uint64_t v192 = MEMORY[0x263F774A8];
    char v113 = v112 & 1;
    LODWORD(Model) = v112 & 1;
    *(void *)&long long v189 = v77;
    uint64_t v188 = 0;
    long long v186 = 0u;
    long long v187 = 0u;
    uint64_t v185 = 0;
    long long v183 = 0u;
    long long v184 = 0u;
    uint64_t v182 = 0;
    long long v180 = 0u;
    long long v181 = 0u;
    uint64_t v178 = MEMORY[0x263F1A838];
    uint64_t v179 = MEMORY[0x263F77350];
    uint64_t v114 = swift_allocObject();
    uint64_t v176 = 0;
    uint64_t v177 = v114;
    *(void *)(v114 + 16) = v107;
    *(void *)(v114 + 24) = v109;
    *(unsigned char *)(v114 + 32) = v113;
    *(void *)(v114 + 40) = v111;
    long long v174 = 0u;
    long long v175 = 0u;
    swift_retain();
    outlined copy of Text.Storage(v107, v109, v113);
    swift_bridgeObjectRetain();
    uint64_t v115 = v153;
    FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
    uint64_t v116 = lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
    uint64_t v117 = v157;
    View.componentSpacing(top:bottom:)();
    (*(void (**)(char *, uint64_t))(v155 + 8))(v115, v117);
    *(void *)&long long v189 = v117;
    *((void *)&v189 + 1) = v116;
    swift_getOpaqueTypeConformance2();
    uint64_t v118 = AnyView.init<A>(_:)();
    uint64_t v119 = v168;
    outlined init with copy of HeightQueryModel(v173, v168, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    unint64_t v120 = (*(unsigned __int8 *)(v148 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80);
    unint64_t v121 = (v149 + v120 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v122 = swift_allocObject();
    outlined init with take of HeightQueryModel(v119, v122 + v120, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    *(void *)(v122 + v121) = v118;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(SnippetHeaderView, AnyView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SnippetHeaderView, AnyView)>);
    uint64_t v123 = v160;
    ComponentStack.init(content:)();
    uint64_t v124 = v159;
    outlined init with copy of HeightQueryModel(v76, v159, (uint64_t (*)(void))type metadata accessor for HeightQuerySnippet);
    uint64_t v125 = v139;
    uint64_t v126 = v140;
    uint64_t v127 = v151;
    (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v151, v172, v140);
    unint64_t v128 = (*(unsigned __int8 *)(v156 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80);
    unint64_t v129 = (v158 + *(unsigned __int8 *)(v125 + 80) + v128) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80);
    uint64_t v130 = swift_allocObject();
    outlined init with take of HeightQueryModel(v124, v130 + v128, (uint64_t (*)(void))type metadata accessor for HeightQuerySnippet);
    v137(v130 + v129, v127, v126);
    uint64_t v131 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SnippetHeaderView, AnyView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SnippetHeaderView, AnyView)>>);
    uint64_t v132 = v163;
    uint64_t v133 = v164;
    View.componentTapped(isNavigation:perform:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v162 + 8))(v123, v133);
    uint64_t v135 = v165;
    uint64_t v134 = v166;
    (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v161, v132, v166);
    *(void *)&long long v189 = v133;
    *((void *)&v189 + 1) = v131;
    swift_getOpaqueTypeConformance2();
    uint64_t v41 = AnyView.init<A>(_:)();
    swift_release();
    outlined consume of Text.Storage(v147, v146, Model);
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v135 + 8))(v132, v134);
    (*(void (**)(char *, uint64_t))(v170 + 8))(v169, v171);
    outlined destroy of HeightQuerySnippet(v173, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v172, v126);
    a1 = v142;
    goto LABEL_12;
  }
  outlined destroy of Font.Design?((uint64_t)v35, &demangling cache variable for type metadata for SpeakableString?);
LABEL_5:
  uint64_t result = AnyView.init<A>(_:)();
  uint64_t v41 = result;
LABEL_12:
  *a1 = v41;
  return result;
}

uint64_t closure #1 in HeightQuerySnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderView();
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v13 - v10;
  outlined init with copy of HeightQueryModel(a1, (uint64_t)&v13 - v10, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  outlined init with copy of HeightQueryModel((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  outlined init with copy of HeightQueryModel((uint64_t)v9, a3, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  *(void *)(a3
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SnippetHeaderView, AnyView))
                     + 48)) = a2;
  swift_retain_n();
  outlined destroy of HeightQuerySnippet((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
  swift_release();
  return outlined destroy of HeightQuerySnippet((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
}

void closure #2 in HeightQuerySnippet.body.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + *(int *)(type metadata accessor for HeightQuerySnippet() + 20));
  if (v1)
  {
    id v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();
  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t sub_261858C1C()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t outlined init with copy of HeightQueryModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_261858CC8()
{
  uint64_t v1 = type metadata accessor for SnippetHeaderView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v0 + v3, 1, v6))
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v3, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = v5 + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = v5 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t partial apply for closure #1 in HeightQuerySnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SnippetHeaderView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in HeightQuerySnippet.body.getter(v1 + v4, v5, a1);
}

uint64_t sub_261858FA4()
{
  uint64_t Snippet = type metadata accessor for HeightQuerySnippet();
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(Snippet - 8) + 80);
  uint64_t v16 = *(void *)(*(void *)(Snippet - 8) + 64);
  uint64_t v2 = type metadata accessor for AppPunchout();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v15 = *(void *)(v3 + 64);
  uint64_t v18 = v0;
  uint64_t v5 = v0 + ((v1 + 16) & ~v1);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + ((v1 + 16) & ~v1), v2);
  }
  uint64_t Model = type metadata accessor for HeightQueryModel();
  uint64_t v7 = v5 + *(int *)(Model + 32);
  uint64_t v8 = type metadata accessor for SpeakableString();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v10 = v5 + *(int *)(Model + 40);
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = v1 | v4 | 7;
  uint64_t v13 = (((v1 + 16) & ~v1) + v16 + v4) & ~v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v18 + v13, v2);

  return MEMORY[0x270FA0238](v18, v13 + v15, v12);
}

uint64_t outlined init with take of HeightQueryModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void partial apply for closure #2 in HeightQuerySnippet.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for HeightQuerySnippet() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for AppPunchout();

  closure #2 in HeightQuerySnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in HeightQuerySnippet()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for HeightQuerySnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t Model = (int *)type metadata accessor for HeightQueryModel();
    uint64_t v12 = Model[5];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    uint64_t v15 = Model[6];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = Model[7];
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    v19[8] = v20[8];
    *(void *)uint64_t v19 = *(void *)v20;
    uint64_t v21 = Model[8];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = type metadata accessor for SpeakableString();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    *((unsigned char *)a1 + Model[9]) = *((unsigned char *)a2 + Model[9]);
    uint64_t v27 = Model[10];
    uint64_t v28 = (char *)a1 + v27;
    uint64_t v29 = (char *)a2 + v27;
    uint64_t v30 = type metadata accessor for SnippetHeaderModel();
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v29, v24);
      uint64_t v33 = *(int *)(v30 + 20);
      uint64_t v34 = &v28[v33];
      uint64_t v35 = &v29[v33];
      uint64_t v36 = *((void *)v35 + 1);
      *(void *)uint64_t v34 = *(void *)v35;
      *((void *)v34 + 1) = v36;
      uint64_t v37 = *(int *)(v30 + 24);
      uint64_t v38 = &v28[v37];
      uint64_t v39 = &v29[v37];
      uint64_t v40 = *((void *)v39 + 1);
      *(void *)uint64_t v38 = *(void *)v39;
      *((void *)v38 + 1) = v40;
      uint64_t v41 = *(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v41(v28, 0, 1, v30);
    }
    uint64_t v42 = Model[11];
    uint64_t v43 = (uint64_t *)((char *)a1 + v42);
    uint64_t v44 = (uint64_t *)((char *)a2 + v42);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = Model[12];
    uint64_t v47 = (uint64_t *)((char *)a1 + v46);
    int v48 = (uint64_t *)((char *)a2 + v46);
    uint64_t v49 = v48[1];
    *uint64_t v47 = *v48;
    v47[1] = v49;
    uint64_t v50 = Model[13];
    char v51 = (uint64_t *)((char *)a1 + v50);
    Swift::String v52 = (uint64_t *)((char *)a2 + v50);
    uint64_t v53 = v52[1];
    *char v51 = *v52;
    v51[1] = v53;
    uint64_t v54 = *(int *)(a3 + 20);
    uint64_t v55 = (uint64_t *)((char *)a1 + v54);
    uint64_t v56 = (char *)a2 + v54;
    char v58 = *(void **)v56;
    uint64_t v57 = *((void *)v56 + 1);
    *uint64_t v55 = v58;
    v55[1] = v57;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v59 = v58;
  }
  return a1;
}

void destroy for HeightQuerySnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t Model = type metadata accessor for HeightQueryModel();
  uint64_t v7 = a1 + *(int *)(Model + 32);
  uint64_t v8 = type metadata accessor for SpeakableString();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v10 = a1 + *(int *)(Model + 40);
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void **)(a1 + *(int *)(a2 + 20));
}

char *initializeWithCopy for HeightQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t Model = (int *)type metadata accessor for HeightQueryModel();
  uint64_t v10 = Model[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = Model[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = Model[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  v17[8] = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = Model[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = type metadata accessor for SpeakableString();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  a1[Model[9]] = a2[Model[9]];
  uint64_t v25 = Model[10];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v28 = type metadata accessor for SnippetHeaderModel();
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v27, v22);
    uint64_t v31 = *(int *)(v28 + 20);
    uint64_t v32 = &v26[v31];
    uint64_t v33 = &v27[v31];
    uint64_t v34 = *((void *)v33 + 1);
    *(void *)uint64_t v32 = *(void *)v33;
    *((void *)v32 + 1) = v34;
    uint64_t v35 = *(int *)(v28 + 24);
    uint64_t v36 = &v26[v35];
    uint64_t v37 = &v27[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *(void *)uint64_t v36 = *(void *)v37;
    *((void *)v36 + 1) = v38;
    uint64_t v39 = *(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v39(v26, 0, 1, v28);
  }
  uint64_t v40 = Model[11];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  uint64_t v44 = Model[12];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = v47;
  uint64_t v48 = Model[13];
  uint64_t v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + 1) = v51;
  uint64_t v52 = *(int *)(a3 + 20);
  uint64_t v53 = &a1[v52];
  uint64_t v54 = &a2[v52];
  uint64_t v56 = *(void **)v54;
  uint64_t v55 = *((void *)v54 + 1);
  *(void *)uint64_t v53 = v56;
  *((void *)v53 + 1) = v55;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v57 = v56;
  return a1;
}

char *assignWithCopy for HeightQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
LABEL_7:
  uint64_t Model = (int *)type metadata accessor for HeightQueryModel();
  uint64_t v12 = Model[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  char v15 = v14[8];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v15;
  uint64_t v16 = Model[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  uint64_t v20 = Model[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = Model[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for SpeakableString();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  uint64_t v71 = v28;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_12:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v25, v26, v27);
LABEL_13:
  a1[Model[9]] = a2[Model[9]];
  uint64_t v33 = Model[10];
  uint64_t v34 = &a1[v33];
  uint64_t v73 = a2;
  uint64_t v35 = &a2[v33];
  uint64_t v36 = type metadata accessor for SnippetHeaderModel();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (!v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 24))(v34, v35, v27);
      uint64_t v65 = *(int *)(v36 + 20);
      uint64_t v66 = &v34[v65];
      uint64_t v67 = &v35[v65];
      *(void *)uint64_t v66 = *(void *)v67;
      *((void *)v66 + 1) = *((void *)v67 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v68 = *(int *)(v36 + 24);
      uint64_t v69 = &v34[v68];
      uint64_t v70 = &v35[v68];
      *(void *)uint64_t v69 = *(void *)v70;
      *((void *)v69 + 1) = *((void *)v70 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of HeightQuerySnippet((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v40)
  {
LABEL_18:
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v34, v35, *(void *)(*(void *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v34, v35, v27);
  uint64_t v41 = *(int *)(v36 + 20);
  uint64_t v42 = &v34[v41];
  uint64_t v43 = &v35[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  uint64_t v44 = *(int *)(v36 + 24);
  uint64_t v45 = &v34[v44];
  uint64_t v46 = &v35[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = *((void *)v46 + 1);
  uint64_t v47 = *(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v47(v34, 0, 1, v36);
LABEL_19:
  uint64_t v49 = Model[11];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &v73[v49];
  *(void *)uint64_t v50 = *(void *)v51;
  *((void *)v50 + 1) = *((void *)v51 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v52 = Model[12];
  uint64_t v53 = &a1[v52];
  uint64_t v54 = &v73[v52];
  *(void *)uint64_t v53 = *(void *)v54;
  *((void *)v53 + 1) = *((void *)v54 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v55 = Model[13];
  uint64_t v56 = &a1[v55];
  id v57 = &v73[v55];
  *(void *)uint64_t v56 = *(void *)v57;
  *((void *)v56 + 1) = *((void *)v57 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = *(int *)(a3 + 20);
  id v59 = &a1[v58];
  uint64_t v60 = &v73[v58];
  uint64_t v61 = *(void **)&a1[v58];
  uint64_t v62 = *(void **)&v73[v58];
  *(void *)id v59 = *(void *)v60;
  id v63 = v62;

  *((void *)v59 + 1) = *((void *)v60 + 1);
  return a1;
}

uint64_t outlined destroy of HeightQuerySnippet(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for HeightQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t Model = (int *)type metadata accessor for HeightQueryModel();
  uint64_t v10 = Model[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = Model[6];
  uint64_t v14 = &a1[v13];
  char v15 = &a2[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = Model[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  v17[8] = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = Model[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = type metadata accessor for SpeakableString();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  a1[Model[9]] = a2[Model[9]];
  uint64_t v25 = Model[10];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v28 = type metadata accessor for SnippetHeaderModel();
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v26, v27, v22);
    *(_OWORD *)&v26[*(int *)(v28 + 20)] = *(_OWORD *)&v27[*(int *)(v28 + 20)];
    *(_OWORD *)&v26[*(int *)(v28 + 24)] = *(_OWORD *)&v27[*(int *)(v28 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  *(_OWORD *)&a1[Model[11]] = *(_OWORD *)&a2[Model[11]];
  *(_OWORD *)&a1[Model[12]] = *(_OWORD *)&a2[Model[12]];
  *(_OWORD *)&a1[Model[13]] = *(_OWORD *)&a2[Model[13]];
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for HeightQuerySnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AppPunchout();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
LABEL_7:
  uint64_t Model = (int *)type metadata accessor for HeightQueryModel();
  uint64_t v12 = Model[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = Model[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = Model[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  v19[8] = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v21 = Model[8];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  uint64_t v69 = v25;
  uint64_t v70 = v24;
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_13:
  a1[Model[9]] = a2[Model[9]];
  uint64_t v30 = Model[10];
  int v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = type metadata accessor for SnippetHeaderModel();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 40))(v31, v32, v70);
      uint64_t v59 = *(int *)(v33 + 20);
      uint64_t v60 = &v31[v59];
      uint64_t v61 = &v32[v59];
      uint64_t v63 = *(void *)v61;
      uint64_t v62 = *((void *)v61 + 1);
      *(void *)uint64_t v60 = v63;
      *((void *)v60 + 1) = v62;
      swift_bridgeObjectRelease();
      uint64_t v64 = *(int *)(v33 + 24);
      uint64_t v65 = &v31[v64];
      uint64_t v66 = &v32[v64];
      uint64_t v68 = *(void *)v66;
      uint64_t v67 = *((void *)v66 + 1);
      *(void *)uint64_t v65 = v68;
      *((void *)v65 + 1) = v67;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of HeightQuerySnippet((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v37)
  {
LABEL_18:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v31, v32, v70);
  *(_OWORD *)&v31[*(int *)(v33 + 20)] = *(_OWORD *)&v32[*(int *)(v33 + 20)];
  *(_OWORD *)&v31[*(int *)(v33 + 24)] = *(_OWORD *)&v32[*(int *)(v33 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_19:
  uint64_t v39 = Model[11];
  int v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)int v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = Model[12];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  uint64_t v48 = *(void *)v46;
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = v48;
  *((void *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = Model[13];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  uint64_t v53 = *(void *)v51;
  uint64_t v52 = *((void *)v51 + 1);
  *(void *)uint64_t v50 = v53;
  *((void *)v50 + 1) = v52;
  swift_bridgeObjectRelease();
  uint64_t v54 = *(int *)(a3 + 20);
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  id v57 = *(void **)&a1[v54];
  *(void *)uint64_t v55 = *(void *)v56;

  *((void *)v55 + 1) = *((void *)v56 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for HeightQuerySnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_26185AD24);
}

uint64_t sub_26185AD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Model = type metadata accessor for HeightQueryModel();
  uint64_t v7 = *(void *)(Model - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, Model);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for HeightQuerySnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_26185AE04);
}

uint64_t sub_26185AE04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for HeightQueryModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata completion function for HeightQuerySnippet()
{
  uint64_t result = type metadata accessor for HeightQueryModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void Image.init(fileName:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Dummy #1 in Image.init(fileName:)();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v5 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v6 = (void *)MEMORY[0x263E41CA0](a1, a2);
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(self, sel_imageNamed_inBundle_withConfiguration_, v6, v5, 0);

  if (v7)
  {
    id v8 = v7;
    Image.init(uiImage:)();
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for Dummy #1 in Image.init(fileName:)()
{
  return self;
}

uint64_t __deallocating_deinit in Dummy #1 in Image.init(fileName:)()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t HeightQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t HeightQueryModel.appPunchout.setter(uint64_t a1)
{
  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*HeightQueryModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.height.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 20));
}

uint64_t type metadata accessor for HeightQueryModel()
{
  uint64_t result = type metadata singleton initialization cache for HeightQueryModel;
  if (!type metadata singleton initialization cache for HeightQueryModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t HeightQueryModel.height.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for HeightQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 20);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*HeightQueryModel.height.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.maxHeight.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 24));
}

uint64_t HeightQueryModel.maxHeight.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for HeightQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*HeightQueryModel.maxHeight.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.minHeight.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 28));
}

uint64_t HeightQueryModel.minHeight.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for HeightQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*HeightQueryModel.minHeight.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for HeightQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 32), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t HeightQueryModel.dateLabel.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for HeightQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 32), &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t (*HeightQueryModel.dateLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.isDifferenceNegligible.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 36));
}

uint64_t HeightQueryModel.isDifferenceNegligible.setter(char a1)
{
  uint64_t result = type metadata accessor for HeightQueryModel();
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*HeightQueryModel.isDifferenceNegligible.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for HeightQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 40), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t HeightQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for HeightQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 40), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*HeightQueryModel.snippetHeaderModel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.minHeightSymbolic.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HeightQueryModel.minHeightSymbolic.setter(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)(v2 + *(int *)(type metadata accessor for HeightQueryModel() + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *id v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HeightQueryModel.minHeightSymbolic.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.maxHeightSymbolic.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HeightQueryModel.maxHeightSymbolic.setter(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)(v2 + *(int *)(type metadata accessor for HeightQueryModel() + 48));
  uint64_t result = swift_bridgeObjectRelease();
  *id v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HeightQueryModel.maxHeightSymbolic.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.heightSymbolic.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HeightQueryModel.heightSymbolic.setter(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)(v2 + *(int *)(type metadata accessor for HeightQueryModel() + 52));
  uint64_t result = swift_bridgeObjectRelease();
  *id v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HeightQueryModel.heightSymbolic.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t HeightQueryModel.init(height:maxHeight:minHeight:dateLabel:isDifferenceNegligible:unit:url:headerModel:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v63 = a8;
  uint64_t v62 = a5;
  uint64_t v60 = a3;
  uint64_t v64 = a12;
  uint64_t v65 = a10;
  uint64_t v66 = a11;
  uint64_t v67 = a7;
  BOOL v55 = (a2 & 1) == 0;
  int v56 = a2;
  BOOL v59 = (a4 & 1) == 0;
  BOOL v61 = (a6 & 1) == 0;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AppPunchout();
  uint64_t v20 = *(void *)(v19 - 8);
  id v57 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
  uint64_t v58 = v20 + 56;
  v57(a9, 1, 1, v19);
  uint64_t Model = (int *)type metadata accessor for HeightQueryModel();
  uint64_t v53 = a9 + Model[8];
  uint64_t v22 = v53;
  uint64_t v23 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  uint64_t v54 = a9 + Model[10];
  uint64_t v24 = v54;
  uint64_t v25 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  uint64_t v26 = (uint64_t *)(a9 + Model[11]);
  uint64_t *v26 = 0;
  v26[1] = 0;
  int v27 = (uint64_t *)(a9 + Model[12]);
  uint64_t *v27 = 0;
  v27[1] = 0;
  int v28 = (uint64_t *)(a9 + Model[13]);
  BOOL v29 = (a1 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  char v30 = v56;
  if (v55 && v29) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = a1;
  }
  uint64_t *v28 = 0;
  v28[1] = 0;
  uint64_t v32 = a9 + Model[5];
  *(void *)uint64_t v32 = v31;
  *(unsigned char *)(v32 + 8) = (v30 | v29) & 1;
  uint64_t v33 = v60;
  BOOL v34 = (v60 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v59 && v34) {
    uint64_t v33 = 0;
  }
  char v35 = a4 | v34;
  uint64_t v36 = a9 + Model[6];
  *(void *)uint64_t v36 = v33;
  *(unsigned char *)(v36 + 8) = v35 & 1;
  uint64_t v37 = v62;
  BOOL v38 = (v62 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v61 && v38) {
    uint64_t v37 = 0;
  }
  char v39 = a6 | v38;
  uint64_t v40 = a9 + Model[7];
  *(void *)uint64_t v40 = v37;
  *(unsigned char *)(v40 + 8) = v39 & 1;
  *(unsigned char *)(a9 + Model[9]) = v63;
  outlined assign with copy of SpeakableString?(v67, v53, &demangling cache variable for type metadata for SpeakableString?);
  HeightQueryModel.createAppPunchout(url:)(v66);
  v57((uint64_t)v18, 0, 1, v19);
  outlined assign with take of AppPunchout?((uint64_t)v18, a9, &demangling cache variable for type metadata for AppPunchout?);
  uint64_t v41 = v64;
  outlined assign with copy of SpeakableString?(v64, v54, &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v42 = v65;
  uint64_t v43 = HeightQueryModel.getFormattedSymbolicString(value:unit:)(*(void *)v40, *(unsigned char *)(v40 + 8), v65);
  uint64_t v45 = v44;
  swift_bridgeObjectRelease();
  uint64_t *v26 = v43;
  v26[1] = v45;
  uint64_t v46 = HeightQueryModel.getFormattedSymbolicString(value:unit:)(*(void *)v36, *(unsigned char *)(v36 + 8), v42);
  uint64_t v48 = v47;
  swift_bridgeObjectRelease();
  uint64_t *v27 = v46;
  v27[1] = v48;
  uint64_t v49 = HeightQueryModel.getFormattedSymbolicString(value:unit:)(*(void *)v32, *(unsigned char *)(v32 + 8), v42);
  uint64_t v51 = v50;
  outlined destroy of Font.Design?(v41, &demangling cache variable for type metadata for SnippetHeaderModel?);
  outlined destroy of Font.Design?(v66, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(v42, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of Font.Design?(v67, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t *v28 = v49;
  v28[1] = v51;
  return result;
}

uint64_t HeightQueryModel.createAppPunchout(url:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL.absoluteString.getter();
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t HeightQueryModel.getFormattedSymbolicString(value:unit:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v24 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v23 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = type metadata accessor for SpeakableString();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = 0;
  if ((a2 & 1) == 0)
  {
    outlined init with copy of Environment<ColorSchemeContrast>.Content(a3, (uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    if (v18(v12, 1, v13) == 1)
    {
      uint64_t v19 = (uint64_t)v12;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
      type metadata accessor for DialogPersonHeight.Builder();
      swift_allocObject();
      DialogPersonHeight.Builder.init()();
      dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
      swift_release();
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v10, v16, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
      swift_release();
      outlined destroy of Font.Design?((uint64_t)v10, &demangling cache variable for type metadata for SpeakableString?);
      dispatch thunk of DialogAbstractMeasurement.Builder.build()();
      swift_release();
      uint64_t v20 = v24;
      dispatch thunk of DialogPersonHeight.symbolic.getter();
      if (v18(v20, 1, v13) != 1)
      {
        uint64_t v17 = SpeakableString.print.getter();
        swift_release();
        uint64_t v21 = *(void (**)(char *, uint64_t))(v14 + 8);
        v21(v16, v13);
        v21(v20, v13);
        return v17;
      }
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      swift_release();
      uint64_t v19 = (uint64_t)v20;
    }
    outlined destroy of Font.Design?(v19, &demangling cache variable for type metadata for SpeakableString?);
    return 0;
  }
  return v17;
}

uint64_t HeightQueryModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x68636E7550707061;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x746867696568;
      break;
    case 2:
      unsigned int v3 = 1215848813;
      goto LABEL_5;
    case 3:
      unsigned int v3 = 1215195501;
LABEL_5:
      uint64_t result = v3 | 0x6867696500000000;
      break;
    case 4:
      uint64_t result = 0x6562614C65746164;
      break;
    case 5:
      uint64_t result = 0xD000000000000016;
      break;
    case 6:
      uint64_t result = 0xD000000000000012;
      break;
    case 7:
    case 8:
      uint64_t result = 0xD000000000000011;
      break;
    case 9:
      uint64_t result = 0x7953746867696568;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance HeightQueryModel.CodingKeys()
{
  return HeightQueryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance HeightQueryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized HeightQueryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance HeightQueryModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HeightQueryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HeightQueryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t HeightQueryModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<HeightQueryModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for AppPunchout();
  _s10SnippetKit11AppPunchoutVACSEAAWlTm_7(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for HeightQueryModel();
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    type metadata accessor for SpeakableString();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_7(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[9] = 6;
    type metadata accessor for SnippetHeaderModel();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_7(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[6] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys);
  }
  return result;
}

uint64_t HeightQueryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v3 - 8);
  BOOL v59 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v5 - 8);
  BOOL v61 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v62 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<HeightQueryModel.CodingKeys>);
  uint64_t v63 = *(void *)(v9 - 8);
  uint64_t v64 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v73 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Model = (int *)type metadata accessor for HeightQueryModel();
  MEMORY[0x270FA5388](Model);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AppPunchout();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v60 = v14;
  v15(v13, 1, 1);
  uint64_t v16 = &v13[Model[5]];
  *(void *)uint64_t v16 = 0;
  v16[8] = 1;
  uint64_t v17 = &v13[Model[6]];
  *(void *)uint64_t v17 = 0;
  v17[8] = 1;
  uint64_t v18 = &v13[Model[7]];
  *(void *)uint64_t v18 = 0;
  v18[8] = 1;
  uint64_t v19 = (uint64_t)&v13[Model[8]];
  uint64_t v20 = type metadata accessor for SpeakableString();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  uint64_t v69 = v19;
  v21(v19, 1, 1, v20);
  uint64_t v22 = &v13[Model[10]];
  uint64_t v23 = type metadata accessor for SnippetHeaderModel();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  uint64_t v68 = (uint64_t)v22;
  v24(v22, 1, 1, v23);
  uint64_t v25 = &v13[Model[11]];
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = 0;
  uint64_t v71 = v25;
  char v72 = v13;
  uint64_t v26 = &v13[Model[12]];
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = 0;
  uint64_t v70 = v26;
  int v27 = &v13[Model[13]];
  *(void *)int v27 = 0;
  *((void *)v27 + 1) = 0;
  uint64_t v28 = a1[3];
  uint64_t v65 = v27;
  uint64_t v66 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v28);
  lazy protocol witness table accessor for type HeightQueryModel.CodingKeys and conformance HeightQueryModel.CodingKeys();
  BOOL v29 = v67;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v29)
  {
    uint64_t v31 = v68;
    uint64_t v30 = v69;
    uint64_t v36 = (uint64_t)v72;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v66);
    outlined destroy of Font.Design?(v36, &demangling cache variable for type metadata for AppPunchout?);
    outlined destroy of Font.Design?(v30, &demangling cache variable for type metadata for SpeakableString?);
    outlined destroy of Font.Design?(v31, &demangling cache variable for type metadata for SnippetHeaderModel?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v32 = v16;
    uint64_t v67 = (uint64_t *)v18;
    uint64_t v57 = v23;
    uint64_t v33 = (uint64_t)v61;
    char v83 = 0;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_7(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    uint64_t v34 = (uint64_t)v62;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v35 = (uint64_t *)v71;
    outlined assign with take of AppPunchout?(v34, (uint64_t)v72, &demangling cache variable for type metadata for AppPunchout?);
    char v82 = 1;
    *(void *)uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v32[8] = v38 & 1;
    char v81 = 2;
    *(void *)uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v17[8] = v39 & 1;
    char v80 = 3;
    uint64_t v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v41 = v67;
    *uint64_t v67 = v40;
    *((unsigned char *)v41 + 8) = v42 & 1;
    char v79 = 4;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_7(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v43 = v68;
    outlined assign with take of AppPunchout?(v33, v69, &demangling cache variable for type metadata for SpeakableString?);
    char v78 = 5;
    v72[Model[9]] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v77 = 6;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_7(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v44 = (uint64_t)v59;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v44, v43, &demangling cache variable for type metadata for SnippetHeaderModel?);
    char v76 = 7;
    uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v47 = v46;
    swift_bridgeObjectRelease();
    *char v35 = v45;
    v35[1] = v47;
    char v75 = 8;
    uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v50 = v49;
    uint64_t v51 = (uint64_t *)v70;
    swift_bridgeObjectRelease();
    *uint64_t v51 = v48;
    v51[1] = v50;
    char v74 = 9;
    uint64_t v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v54 = v53;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v73, v64);
    BOOL v55 = (uint64_t *)v65;
    swift_bridgeObjectRelease();
    *BOOL v55 = v52;
    v55[1] = v54;
    uint64_t v56 = (uint64_t)v72;
    outlined init with copy of HeightQueryModel((uint64_t)v72, v58);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v66);
    return outlined destroy of HeightQueryModel(v56, (uint64_t (*)(void))type metadata accessor for HeightQueryModel);
  }
}

uint64_t outlined init with copy of HeightQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for HeightQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t base witness table accessor for Decodable in HeightQueryModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_7(&lazy protocol witness table cache variable for type HeightQueryModel and conformance HeightQueryModel, (void (*)(uint64_t))type metadata accessor for HeightQueryModel);
}

uint64_t base witness table accessor for Encodable in HeightQueryModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_7(&lazy protocol witness table cache variable for type HeightQueryModel and conformance HeightQueryModel, (void (*)(uint64_t))type metadata accessor for HeightQueryModel);
}

uint64_t _s10SnippetKit11AppPunchoutVACSEAAWlTm_7(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance HeightQueryModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return HeightQueryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HeightQueryModel(void *a1)
{
  return HeightQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for HeightQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    uint64_t v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = a3[7];
    uint64_t v18 = a3[8];
    uint64_t v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = (char *)a1 + v18;
    uint64_t v22 = (char *)a2 + v18;
    uint64_t v23 = type metadata accessor for SpeakableString();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    uint64_t v26 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    int v27 = (char *)a1 + v26;
    uint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = type metadata accessor for SnippetHeaderModel();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v27, v28, v23);
      uint64_t v32 = *(int *)(v29 + 20);
      uint64_t v33 = &v27[v32];
      uint64_t v34 = &v28[v32];
      uint64_t v35 = *((void *)v34 + 1);
      *(void *)uint64_t v33 = *(void *)v34;
      *((void *)v33 + 1) = v35;
      uint64_t v36 = *(int *)(v29 + 24);
      uint64_t v37 = &v27[v36];
      char v38 = &v28[v36];
      uint64_t v39 = *((void *)v38 + 1);
      *(void *)uint64_t v37 = *(void *)v38;
      *((void *)v37 + 1) = v39;
      uint64_t v40 = *(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40(v27, 0, 1, v29);
    }
    uint64_t v41 = a3[11];
    uint64_t v42 = a3[12];
    uint64_t v43 = (uint64_t *)((char *)a1 + v41);
    uint64_t v44 = (uint64_t *)((char *)a2 + v41);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = (uint64_t *)((char *)a1 + v42);
    uint64_t v47 = (uint64_t *)((char *)a2 + v42);
    uint64_t v48 = v47[1];
    void *v46 = *v47;
    v46[1] = v48;
    uint64_t v49 = a3[13];
    uint64_t v50 = (uint64_t *)((char *)a1 + v49);
    uint64_t v51 = (uint64_t *)((char *)a2 + v49);
    uint64_t v52 = v51[1];
    void *v50 = *v51;
    v50[1] = v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for HeightQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t v7 = type metadata accessor for SpeakableString();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v9 = a1 + *(int *)(a2 + 40);
  uint64_t v10 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for SnippetHeaderModel();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v25, v26, v21);
    uint64_t v30 = *(int *)(v27 + 20);
    uint64_t v31 = &v25[v30];
    uint64_t v32 = &v26[v30];
    uint64_t v33 = *((void *)v32 + 1);
    *(void *)uint64_t v31 = *(void *)v32;
    *((void *)v31 + 1) = v33;
    uint64_t v34 = *(int *)(v27 + 24);
    uint64_t v35 = &v25[v34];
    uint64_t v36 = &v26[v34];
    uint64_t v37 = *((void *)v36 + 1);
    *(void *)uint64_t v35 = *(void *)v36;
    *((void *)v35 + 1) = v37;
    char v38 = *(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38(v25, 0, 1, v27);
  }
  uint64_t v39 = a3[11];
  uint64_t v40 = a3[12];
  uint64_t v41 = &a1[v39];
  uint64_t v42 = &a2[v39];
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  uint64_t v44 = &a1[v40];
  uint64_t v45 = &a2[v40];
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = v46;
  uint64_t v47 = a3[13];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  uint64_t v50 = *((void *)v49 + 1);
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = v15;
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = a3[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)uint64_t v21 = v23;
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for SpeakableString();
  uint64_t v64 = *(void *)(v27 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
  int v29 = v28(v25, 1, v27);
  int v30 = v28(v26, 1, v27);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v25, v27);
LABEL_12:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v64 + 24))(v25, v26, v27);
LABEL_13:
  a1[a3[9]] = a2[a3[9]];
  uint64_t v65 = a3;
  uint64_t v32 = a3[10];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v35 = type metadata accessor for SnippetHeaderModel();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v64 + 24))(v33, v34, v27);
      uint64_t v58 = *(int *)(v35 + 20);
      BOOL v59 = &v33[v58];
      uint64_t v60 = &v34[v58];
      *(void *)BOOL v59 = *(void *)v60;
      *((void *)v59 + 1) = *((void *)v60 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v61 = *(int *)(v35 + 24);
      uint64_t v62 = &v33[v61];
      uint64_t v63 = &v34[v61];
      *(void *)uint64_t v62 = *(void *)v63;
      *((void *)v62 + 1) = *((void *)v63 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of HeightQueryModel((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v39)
  {
LABEL_18:
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v33, v34, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v33, v34, v27);
  uint64_t v40 = *(int *)(v35 + 20);
  uint64_t v41 = &v33[v40];
  uint64_t v42 = &v34[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = *((void *)v42 + 1);
  uint64_t v43 = *(int *)(v35 + 24);
  uint64_t v44 = &v33[v43];
  uint64_t v45 = &v34[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = *((void *)v45 + 1);
  uint64_t v46 = *(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v46(v33, 0, 1, v35);
LABEL_19:
  uint64_t v48 = v65[11];
  uint64_t v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + 1) = *((void *)v50 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = v65[12];
  uint64_t v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  *(void *)uint64_t v52 = *(void *)v53;
  *((void *)v52 + 1) = *((void *)v53 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = v65[13];
  BOOL v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  *(void *)BOOL v55 = *(void *)v56;
  *((void *)v55 + 1) = *((void *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of HeightQueryModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for SnippetHeaderModel();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v25, v26, v21);
    *(_OWORD *)&v25[*(int *)(v27 + 20)] = *(_OWORD *)&v26[*(int *)(v27 + 20)];
    *(_OWORD *)&v25[*(int *)(v27 + 24)] = *(_OWORD *)&v26[*(int *)(v27 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v30] = *(_OWORD *)&a2[v30];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  return a1;
}

char *assignWithTake for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = &a1[v13];
  uint64_t v17 = &a2[v13];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  uint64_t v65 = v25;
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_13:
  uint64_t v30 = a3[10];
  uint64_t v66 = a3;
  a1[a3[9]] = a2[a3[9]];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = type metadata accessor for SnippetHeaderModel();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 40))(v31, v32, v24);
      uint64_t v55 = *(int *)(v33 + 20);
      uint64_t v56 = &v31[v55];
      uint64_t v57 = &v32[v55];
      uint64_t v59 = *(void *)v57;
      uint64_t v58 = *((void *)v57 + 1);
      *(void *)uint64_t v56 = v59;
      *((void *)v56 + 1) = v58;
      swift_bridgeObjectRelease();
      uint64_t v60 = *(int *)(v33 + 24);
      uint64_t v61 = &v31[v60];
      uint64_t v62 = &v32[v60];
      uint64_t v64 = *(void *)v62;
      uint64_t v63 = *((void *)v62 + 1);
      *(void *)uint64_t v61 = v64;
      *((void *)v61 + 1) = v63;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    outlined destroy of HeightQueryModel((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v37)
  {
LABEL_18:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v31, v32, v24);
  *(_OWORD *)&v31[*(int *)(v33 + 20)] = *(_OWORD *)&v32[*(int *)(v33 + 20)];
  *(_OWORD *)&v31[*(int *)(v33 + 24)] = *(_OWORD *)&v32[*(int *)(v33 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_19:
  uint64_t v39 = v66[11];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = v66[12];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  uint64_t v48 = *(void *)v46;
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = v48;
  *((void *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = v66[13];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  uint64_t v53 = *(void *)v51;
  uint64_t v52 = *((void *)v51 + 1);
  *(void *)uint64_t v50 = v53;
  *((void *)v50 + 1) = v52;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HeightQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_26185E844);
}

uint64_t sub_26185E844(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[8];
LABEL_7:
    uint64_t v10 = a1 + v13;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[10];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[11] + 8);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  int v17 = v16 - 1;
  if (v17 < 0) {
    int v17 = -1;
  }
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for HeightQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_26185E9D4);
}

uint64_t sub_26185E9D4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[8];
    }
    else
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[11] + 8) = a2;
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[10];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void type metadata completion function for HeightQueryModel()
{
  _s10SnippetKit11AppPunchoutVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, MEMORY[0x263F762C0]);
  if (v0 <= 0x3F)
  {
    _s10SnippetKit11AppPunchoutVSgMaTm_0(319, &lazy cache variable for type metadata for SpeakableString?, MEMORY[0x263F6D0A0]);
    if (v1 <= 0x3F)
    {
      _s10SnippetKit11AppPunchoutVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for HeightQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HeightQueryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x26185EE14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void *type metadata accessor for HeightQueryModel.CodingKeys()
{
  return &unk_270D87990;
}

uint64_t specialized HeightQueryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746867696568 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x686769654878616DLL && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x68676965486E696DLL && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000261883CC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883800 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000261883CE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000261883D00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x7953746867696568 && a2 == 0xEE0063696C6F626DLL)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t SnippetHeaderView.init(headerModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SnippetHeaderView();
  uint64_t v5 = (uint64_t *)(a2 + *(int *)(v4 + 20));
  *uint64_t v5 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  char v6 = (uint64_t *)(a2 + *(int *)(v4 + 24));
  *char v6 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  swift_storeEnumTagMultiPayload();

  return outlined init with take of SnippetHeaderModel?(a1, a2);
}

uint64_t type metadata accessor for SnippetHeaderView()
{
  uint64_t result = type metadata singleton initialization cache for SnippetHeaderView;
  if (!type metadata singleton initialization cache for SnippetHeaderView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SnippetHeaderView.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SnippetHeaderModel?(v1, a1);
}

uint64_t SnippetHeaderView.isLightMode.getter()
{
  uint64_t v0 = type metadata accessor for ColorScheme();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  char v6 = (char *)&v10 - v5;
  type metadata accessor for SnippetHeaderView();
  specialized Environment.wrappedValue.getter((uint64_t)v6);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x263F18510], v0);
  char v7 = static ColorScheme.== infix(_:_:)();
  int v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  return v7 & 1;
}

uint64_t SnippetHeaderView.isIncreasedContrast.getter()
{
  uint64_t v0 = type metadata accessor for ColorSchemeContrast();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  char v6 = (char *)&v10 - v5;
  type metadata accessor for SnippetHeaderView();
  specialized Environment.wrappedValue.getter((uint64_t)v6);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x263F19970], v0);
  char v7 = static ColorScheme.== infix(_:_:)();
  int v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  return v7 & 1;
}

void one-time initialization function for sideLength()
{
  static SnippetHeaderView.sideLength = 0x4034000000000000;
}

uint64_t SnippetHeaderView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SashStandardView();
  uint64_t v91 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v89 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v90 = (char *)&v78 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v8 - 8);
  char v87 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for Font.TextStyle();
  uint64_t v86 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v85 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Image.ResizingMode();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  int v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for SpeakableString();
  uint64_t v93 = *(void *)(v94 - 8);
  MEMORY[0x270FA5388](v94);
  uint64_t v96 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for SnippetHeaderModel();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v95 = (uint64_t)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = v2;
  outlined init with copy of SnippetHeaderModel?(v2, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v21, &demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t result = AnyView.init<A>(_:)();
    uint64_t v26 = result;
  }
  else
  {
    char v78 = v13;
    uint64_t v83 = v4;
    uint64_t v84 = a1;
    uint64_t v27 = v95;
    outlined init with take of SnippetHeaderModel((uint64_t)v21, v95);
    (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v96, v27, v94);
    int v28 = (uint64_t *)(v27 + *(int *)(v22 + 20));
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    swift_bridgeObjectRetain();
    Image.init(fileName:)(v29, v30);
    uint64_t v32 = v31;
    (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, *MEMORY[0x263F1B4C0], v14);
    uint64_t v82 = v32;
    uint64_t v79 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if (one-time initialization token for sideLength != -1) {
      swift_once();
    }
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v33 = v108;
    char v34 = v109;
    uint64_t v35 = v110;
    char v36 = v111;
    uint64_t v38 = v112;
    uint64_t v37 = v113;
    char v80 = (uint64_t *)(v95 + *(int *)(v22 + 24));
    uint64_t v39 = *v80;
    uint64_t v40 = v80[1];
    swift_bridgeObjectRetain();
    uint64_t v41 = SnippetHeaderView.getCategoryColor(id:)(v39, v40);
    swift_bridgeObjectRelease();
    uint64_t v100 = v79;
    uint64_t v101 = v33;
    char v102 = v34;
    uint64_t v103 = v35;
    LOBYTE(v104) = v36;
    uint64_t v105 = v38;
    uint64_t v106 = v37;
    uint64_t v107 = v41;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _FrameLayout>, _ForegroundStyleModifier<Color>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    uint64_t v81 = View.eraseToAnyView()();
    swift_release();
    swift_release();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v42._uint64_t countAndFlagsBits = 0;
    v42._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v42);
    v43._uint64_t countAndFlagsBits = SpeakableString.print.getter();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v43);
    swift_bridgeObjectRelease();
    v44._uint64_t countAndFlagsBits = 0;
    v44._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v44);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v45 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v47 = v46;
    LOBYTE(v33) = v48 & 1;
    uint64_t v49 = Text.bold()();
    uint64_t v51 = v50;
    uint64_t v79 = v52;
    LOBYTE(v37) = v53 & 1;
    outlined consume of Text.Storage(v45, v47, v33);
    swift_bridgeObjectRelease();
    uint64_t v54 = v86;
    uint64_t v55 = v85;
    uint64_t v56 = v88;
    (*(void (**)(char *, void, uint64_t))(v86 + 104))(v85, *MEMORY[0x263F1A6D0], v88);
    uint64_t v57 = *MEMORY[0x263F1A618];
    uint64_t v58 = type metadata accessor for Font.Design();
    uint64_t v59 = *(void *)(v58 - 8);
    uint64_t v60 = (uint64_t)v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 104))(v87, v57, v58);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(v60, 0, 1, v58);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v60, &demangling cache variable for type metadata for Font.Design?);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
    uint64_t v61 = Text.font(_:)();
    uint64_t v63 = v62;
    LOBYTE(v60) = v64;
    swift_release();
    LOBYTE(v57) = v60 & 1;
    outlined consume of Text.Storage(v49, v51, v37);
    swift_bridgeObjectRelease();
    uint64_t v65 = *v80;
    uint64_t v66 = v80[1];
    swift_bridgeObjectRetain();
    uint64_t v67 = SnippetHeaderView.getCategoryColor(id:)(v65, v66);
    swift_bridgeObjectRelease();
    uint64_t v100 = v67;
    uint64_t v68 = Text.foregroundStyle<A>(_:)();
    uint64_t v70 = v69;
    uint64_t v72 = v71;
    LOBYTE(v60) = v73 & 1;
    outlined consume of Text.Storage(v61, v63, v57);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v100 = v68;
    uint64_t v101 = v70;
    char v102 = v60;
    uint64_t v103 = v72;
    uint64_t v74 = View.eraseToAnyView()();
    outlined consume of Text.Storage(v68, v70, v60);
    swift_bridgeObjectRelease();
    uint64_t v103 = MEMORY[0x263F1B728];
    uint64_t v104 = MEMORY[0x263F774A8];
    uint64_t v100 = v81;
    uint64_t v98 = MEMORY[0x263F1B728];
    uint64_t v99 = MEMORY[0x263F774A8];
    uint64_t v97 = v74;
    swift_retain();
    swift_retain();
    char v75 = v90;
    SashStandardView.init(icon:title:showOnWatch:)();
    uint64_t v76 = v91;
    uint64_t v77 = v83;
    (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v89, v75, v83);
    lazy protocol witness table accessor for type SashStandardView and conformance SashStandardView();
    uint64_t v26 = AnyView.init<A>(_:)();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v96, v94);
    outlined destroy of SnippetHeaderModel(v95, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v75, v77);
    a1 = v84;
  }
  *a1 = v26;
  return result;
}

uint64_t SnippetHeaderView.getCategoryColor(id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v350 = v6;
  uint64_t v351 = v7;
  MEMORY[0x270FA5388](v6);
  long long v352 = (char *)&v326 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ColorSchemeContrast();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v343 = v9;
  uint64_t v344 = v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  v341 = (char *)&v326 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v342 = (uint64_t)&v326 - v13;
  uint64_t v14 = type metadata accessor for SnippetHeaderView();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  int v17 = (char *)&v326 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v337 = (void (*)(char *, uint64_t, uint64_t))((char *)&v326 - v19);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  long long v346 = (void (*)(char *, uint64_t, uint64_t))((char *)&v326 - v21);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v335 = (uint64_t)&v326 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v345 = (void (*)(char *, uint64_t, uint64_t))((char *)&v326 - v25);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v333 = (uint64_t)&v326 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v336 = (void (*)(char *, uint64_t, uint64_t))((char *)&v326 - v29);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v332 = (uint64_t)&v326 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v334 = (uint64_t)&v326 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v330 = (uint64_t)&v326 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v331 = (uint64_t)&v326 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v329 = (uint64_t)&v326 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v347 = (uint64_t)&v326 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  Swift::String v44 = (char *)&v326 - v43;
  uint64_t v45 = MEMORY[0x270FA5388](v42);
  uint64_t v339 = (uint64_t)&v326 - v46;
  MEMORY[0x270FA5388](v45);
  char v48 = (char *)&v326 - v47;
  uint64_t v49 = type metadata accessor for ColorScheme();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v353 = v49;
  uint64_t v354 = v50;
  uint64_t v51 = MEMORY[0x270FA5388](v49);
  char v53 = (char *)&v326 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v51);
  uint64_t v55 = (char *)&v326 - v54;
  uint64_t v340 = v3;
  uint64_t v338 = v14;
  uint64_t v348 = v53;
  uint64_t v349 = (uint64_t)&v326 - v54;
  if (a1 == 0xD000000000000021 && a2 == 0x8000000261883D20
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD00000000000002FLL && a2 == 0x8000000261883D50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000028 && a2 == 0x8000000261883D80
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v347 = v3 + *(int *)(v14 + 20);
    specialized Environment.wrappedValue.getter((uint64_t)v55);
    uint64_t v57 = v353;
    uint64_t v56 = v354;
    uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v354 + 104);
    LODWORD(v346) = *MEMORY[0x263F18510];
    uint64_t v345 = v58;
    ((void (*)(char *))v58)(v53);
    char v59 = static ColorScheme.== infix(_:_:)();
    uint64_t v62 = *(void (**)(char *, uint64_t))(v56 + 8);
    uint64_t v60 = v56 + 8;
    uint64_t v61 = v62;
    v62(v53, v57);
    v62(v55, v57);
    outlined init with copy of SnippetHeaderView(v3, (uint64_t)v48);
    if (v59)
    {
      uint64_t v354 = v60;
      uint64_t v63 = v342;
      specialized Environment.wrappedValue.getter(v342);
      uint64_t v64 = v344;
      uint64_t v65 = v341;
      uint64_t v66 = (uint64_t)v48;
      uint64_t v67 = v343;
      (*(void (**)(char *, void, uint64_t))(v344 + 104))(v341, *MEMORY[0x263F19970], v343);
      char v68 = static ColorScheme.== infix(_:_:)();
      uint64_t v69 = *(void (**)(char *, uint64_t))(v64 + 8);
      v69(v65, v67);
      v69((char *)v63, v67);
      uint64_t v70 = v352;
      outlined destroy of SnippetHeaderModel(v66, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      if (v68)
      {
        uint64_t v71 = *MEMORY[0x263F1B380];
        uint64_t v72 = v351;
LABEL_13:
        (*(void (**)(char *, uint64_t, uint64_t))(v72 + 104))(v70, v71, v350);
        v73.n128_u64[0] = 0x3FEA7A7A7A7A7A7ALL;
        v74.n128_u64[0] = 0x3FAE1E1E1E1E1E1ELL;
        v75.n128_u64[0] = 0x3FD1515151515151;
        return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
      }
    }
    else
    {
      outlined destroy of SnippetHeaderModel((uint64_t)v48, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    }
    uint64_t v76 = v349;
    specialized Environment.wrappedValue.getter(v349);
    uint64_t v77 = v348;
    uint64_t v78 = v346;
    uint64_t v79 = v353;
    char v80 = v345;
    v345(v348, v346, v353);
    char v81 = static ColorScheme.== infix(_:_:)();
    v61(v77, v79);
    v61((char *)v76, v79);
    if (v81)
    {
LABEL_16:
      uint64_t v70 = v352;
      (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
      v74.n128_u64[0] = 0x3FC6969696969697;
      v75.n128_u64[0] = 0x3FD5555555555555;
      goto LABEL_24;
    }
    specialized Environment.wrappedValue.getter(v76);
    v80(v77, v78, v79);
    char v82 = static ColorScheme.== infix(_:_:)();
    v61(v77, v79);
    v61((char *)v76, v79);
    uint64_t v83 = v339;
    outlined init with copy of SnippetHeaderView(v340, v339);
    if (v82)
    {
      outlined destroy of SnippetHeaderModel(v83, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      uint64_t v84 = v351;
LABEL_22:
      uint64_t v92 = *MEMORY[0x263F1B380];
LABEL_23:
      uint64_t v70 = v352;
      (*(void (**)(char *, uint64_t, uint64_t))(v84 + 104))(v352, v92, v350);
      v74.n128_u64[0] = 0x3FCB9B9B9B9B9B9CLL;
      v75.n128_u64[0] = 0x3FD7D7D7D7D7D7D8;
      goto LABEL_24;
    }
    uint64_t v85 = v342;
    specialized Environment.wrappedValue.getter(v342);
    uint64_t v86 = v343;
    uint64_t v87 = v344;
    uint64_t v88 = v341;
    (*(void (**)(char *, void, uint64_t))(v344 + 104))(v341, *MEMORY[0x263F19970], v343);
    char v89 = static ColorScheme.== infix(_:_:)();
    uint64_t v90 = *(void (**)(char *, uint64_t))(v87 + 8);
    v90(v88, v86);
    v90((char *)v85, v86);
    outlined destroy of SnippetHeaderModel(v83, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    uint64_t v84 = v351;
    if ((v89 & 1) == 0) {
      goto LABEL_22;
    }
    uint64_t v91 = *MEMORY[0x263F1B380];
LABEL_21:
    uint64_t v70 = v352;
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 104))(v352, v91, v350);
    v74.n128_u64[0] = 0x3FD9191919191919;
    v75.n128_u64[0] = 0x3FE0505050505050;
    goto LABEL_24;
  }
  if (a1 == 0xD00000000000002ELL && a2 == 0x8000000261883DB0) {
    goto LABEL_28;
  }
  char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v108 = a1 == 0xD000000000000021 && a2 == 0x80000002618839C0;
  BOOL v109 = v108;
  if ((v107 & 1) != 0
    || v109
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000027 && a2 == 0x8000000261883DE0)
  {
    goto LABEL_28;
  }
  uint64_t v339 = 0xD000000000000027;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD00000000000002ALL && a2 == 0x8000000261883A20)
  {
    goto LABEL_28;
  }
  char v110 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v111 = a1 == 0xD000000000000021 && a2 == 0x8000000261883E10;
  BOOL v112 = v111;
  if ((v110 & 1) != 0 || v112) {
    goto LABEL_28;
  }
  char v113 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v114 = a1 == 0xD00000000000002ALL && a2 == 0x8000000261883E40;
  BOOL v115 = v114;
  if ((v113 & 1) != 0
    || v115
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000029 && a2 == 0x80000002618839F0)
  {
    goto LABEL_28;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_28;
  }
  unint64_t v328 = 0xD000000000000026;
  if (a1 == 0xD000000000000026 && a2 == 0x8000000261883E70) {
    goto LABEL_28;
  }
  char v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v117 = a1 == 0xD000000000000029 && a2 == 0x8000000261883A50;
  BOOL v118 = v117;
  if ((v116 & 1) != 0
    || v118
    || ((char v119 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == v328)
      ? (BOOL v120 = a2 == 0x8000000261883EA0)
      : (BOOL v120 = 0),
        !v120 ? (char v121 = 0) : (char v121 = 1),
        (v119 & 1) != 0
     || (v121 & 1) != 0
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
     || (unint64_t v327 = 0xD000000000000025, a1 == 0xD000000000000025) && a2 == 0x8000000261883ED0
     || ((char v122 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == v328)
       ? (BOOL v123 = a2 == 0x8000000261883F00)
       : (BOOL v123 = 0),
         !v123 ? (char v124 = 0) : (char v124 = 1),
         (v122 & 1) != 0 || (v124 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
  {
LABEL_28:
    uint64_t v94 = v340;
    uint64_t v345 = (void (*)(char *, uint64_t, uint64_t))(v340 + *(int *)(v14 + 20));
    specialized Environment.wrappedValue.getter((uint64_t)v55);
    uint64_t v96 = v353;
    uint64_t v95 = v354;
    uint64_t v97 = *(void (**)(char *, uint64_t, uint64_t))(v354 + 104);
    LODWORD(v339) = *MEMORY[0x263F18510];
    long long v346 = (void (*)(char *, uint64_t, uint64_t))(v354 + 104);
    uint64_t v337 = v97;
    ((void (*)(char *))v97)(v53);
    char v98 = static ColorScheme.== infix(_:_:)();
    uint64_t v99 = *(void (**)(char *, uint64_t))(v95 + 8);
    v99(v53, v96);
    uint64_t v354 = v95 + 8;
    v99(v55, v96);
    outlined init with copy of SnippetHeaderView(v94, (uint64_t)v44);
    uint64_t v100 = v344;
    if (v98)
    {
      uint64_t v101 = v342;
      specialized Environment.wrappedValue.getter(v342);
      char v102 = v341;
      uint64_t v103 = v343;
      (*(void (**)(char *, void, uint64_t))(v100 + 104))(v341, *MEMORY[0x263F19970], v343);
      char v104 = static ColorScheme.== infix(_:_:)();
      uint64_t v105 = *(void (**)(char *, uint64_t))(v100 + 8);
      v105(v102, v103);
      v105((char *)v101, v103);
      uint64_t v106 = v351;
      outlined destroy of SnippetHeaderModel((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      if (v104)
      {
        uint64_t v70 = v352;
        (*(void (**)(char *, void, uint64_t))(v106 + 104))(v352, *MEMORY[0x263F1B380], v350);
        v73.n128_u64[0] = 0x3FEA9A9A9A9A9A9BLL;
        v74.n128_u64[0] = 0x3FD0D0D0D0D0D0D1;
        v75.n128_u64[0] = 0;
        return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
      }
    }
    else
    {
      outlined destroy of SnippetHeaderModel((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    }
    uint64_t v146 = v349;
    specialized Environment.wrappedValue.getter(v349);
    uint64_t v147 = v348;
    uint64_t v148 = v339;
    uint64_t v149 = v353;
    uint64_t v150 = v337;
    v337(v348, v339, v353);
    char v151 = static ColorScheme.== infix(_:_:)();
    v99(v147, v149);
    v99((char *)v146, v149);
    if ((v151 & 1) == 0)
    {
      specialized Environment.wrappedValue.getter(v146);
      v150(v147, v148, v149);
      char v152 = static ColorScheme.== infix(_:_:)();
      v99(v147, v149);
      v99((char *)v146, v149);
      uint64_t v153 = v347;
      outlined init with copy of SnippetHeaderView(v340, v347);
      if (v152)
      {
        outlined destroy of SnippetHeaderModel(v153, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
        uint64_t v154 = v350;
      }
      else
      {
        uint64_t v155 = v342;
        specialized Environment.wrappedValue.getter(v342);
        uint64_t v156 = v343;
        uint64_t v157 = v344;
        uint64_t v158 = v341;
        (*(void (**)(char *, void, uint64_t))(v344 + 104))(v341, *MEMORY[0x263F19970], v343);
        char v159 = static ColorScheme.== infix(_:_:)();
        uint64_t v160 = *(void (**)(char *, uint64_t))(v157 + 8);
        v160(v158, v156);
        v160((char *)v155, v156);
        outlined destroy of SnippetHeaderModel(v153, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
        uint64_t v154 = v350;
        if (v159)
        {
          uint64_t v70 = v352;
          (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
          v74.n128_u64[0] = 0x3FDE5E5E5E5E5E5ELL;
          v75.n128_u64[0] = 0x3FD3535353535353;
          goto LABEL_24;
        }
      }
      uint64_t v70 = v352;
      (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v154);
      v73.n128_u64[0] = 0x3FEF9F9F9F9F9FA0;
      v74.n128_u64[0] = 0x3FD999999999999ALL;
      v75.n128_u64[0] = 0x3FC999999999999ALL;
      return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
    }
    uint64_t v70 = v352;
    (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
    v74.n128_u64[0] = 0x3FD6D6D6D6D6D6D7;
    v75.n128_u64[0] = 0x3FC2121212121212;
LABEL_24:
    v73.n128_u64[0] = 1.0;
    return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
  }
  if (a1 == 0xD00000000000002CLL && a2 == 0x8000000261883F30
    || ((char v125 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == v327)
      ? (BOOL v126 = a2 == 0x8000000261883F60)
      : (BOOL v126 = 0),
        !v126 ? (char v127 = 0) : (char v127 = 1),
        (v125 & 1) != 0
     || (v127 & 1) != 0
     || ((char v128 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD00000000000002ELL)
       ? (BOOL v129 = a2 == 0x8000000261883F90)
       : (BOOL v129 = 0),
         !v129 ? (char v130 = 0) : (char v130 = 1),
         (v128 & 1) != 0 || (v130 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
  {
    uint64_t v131 = v340;
    uint64_t v132 = v349;
    uint64_t v347 = v340 + *(int *)(v338 + 20);
    specialized Environment.wrappedValue.getter(v349);
    uint64_t v133 = *MEMORY[0x263F18510];
    uint64_t v135 = v353;
    uint64_t v134 = v354;
    uint64_t v136 = v348;
    long long v346 = *(void (**)(char *, uint64_t, uint64_t))(v354 + 104);
    v346(v348, v133, v353);
    char v137 = static ColorScheme.== infix(_:_:)();
    uint64_t v138 = *(void (**)(char *, uint64_t))(v134 + 8);
    v138(v136, v135);
    uint64_t v354 = v134 + 8;
    v138((char *)v132, v135);
    outlined init with copy of SnippetHeaderView(v131, v329);
    if (v137)
    {
      uint64_t v139 = v329;
      uint64_t v140 = v342;
      specialized Environment.wrappedValue.getter(v342);
      uint64_t v141 = v343;
      uint64_t v142 = v344;
      uint64_t v143 = v341;
      (*(void (**)(char *, void, uint64_t))(v344 + 104))(v341, *MEMORY[0x263F19970], v343);
      char v144 = static ColorScheme.== infix(_:_:)();
      uint64_t v145 = *(void (**)(char *, uint64_t))(v142 + 8);
      v145(v143, v141);
      v145((char *)v140, v141);
      outlined destroy of SnippetHeaderModel(v139, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      if (v144)
      {
        uint64_t v70 = v352;
        (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
        v73.n128_u64[0] = 0x3FCB1B1B1B1B1B1BLL;
        v74.n128_u64[0] = 0x3FCA1A1A1A1A1A1ALL;
        v75.n128_u64[0] = 0x3FE4747474747474;
        return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
      }
    }
    else
    {
      outlined destroy of SnippetHeaderModel(v329, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    }
    uint64_t v161 = v349;
    specialized Environment.wrappedValue.getter(v349);
    uint64_t v162 = v348;
    uint64_t v163 = v353;
    v346(v348, v133, v353);
    char v164 = static ColorScheme.== infix(_:_:)();
    v138(v162, v163);
    v138((char *)v161, v163);
    if (v164)
    {
      uint64_t v70 = v352;
      (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
      v73.n128_u64[0] = 0x3FD6161616161616;
      v74.n128_u64[0] = 0x3FD5959595959596;
      v75.n128_u64[0] = 0x3FEADADADADADADBLL;
      return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
    }
    uint64_t v165 = v349;
    specialized Environment.wrappedValue.getter(v349);
    uint64_t v166 = v348;
    uint64_t v167 = v353;
    v346(v348, v133, v353);
    char v168 = static ColorScheme.== infix(_:_:)();
    v138(v166, v167);
    v138((char *)v165, v167);
    outlined init with copy of SnippetHeaderView(v340, v331);
    if (v168)
    {
      outlined destroy of SnippetHeaderModel(v331, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    }
    else
    {
      uint64_t v169 = v331;
      uint64_t v170 = v342;
      specialized Environment.wrappedValue.getter(v342);
      uint64_t v172 = v343;
      uint64_t v171 = v344;
      uint64_t v173 = v341;
      (*(void (**)(char *, void, uint64_t))(v344 + 104))(v341, *MEMORY[0x263F19970], v343);
      char v174 = static ColorScheme.== infix(_:_:)();
      long long v175 = *(void (**)(char *, uint64_t))(v171 + 8);
      v175(v173, v172);
      v175((char *)v170, v172);
      outlined destroy of SnippetHeaderModel(v169, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      if (v174)
      {
        uint64_t v70 = v352;
        (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
        v73.n128_u64[0] = 0x3FDF5F5F5F5F5F5FLL;
        v74.n128_u64[0] = 0x3FDE9E9E9E9E9E9FLL;
        v75.n128_u64[0] = 1.0;
        return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
      }
    }
    uint64_t v70 = v352;
    (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
    v73.n128_u64[0] = 0x3FD7979797979798;
    v74.n128_u64[0] = 0x3FD7171717171717;
LABEL_133:
    v75.n128_u64[0] = 0x3FECDCDCDCDCDCDDLL;
    return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
  }
  if (a1 == 0xD00000000000001ELL && a2 == 0x8000000261883FC0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000020 && a2 == 0x8000000261883FE0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v176 = v340;
    uint64_t v177 = v349;
    uint64_t v347 = v340 + *(int *)(v338 + 20);
    specialized Environment.wrappedValue.getter(v349);
    uint64_t v178 = *MEMORY[0x263F18510];
    uint64_t v180 = v353;
    uint64_t v179 = v354;
    long long v181 = v348;
    long long v346 = *(void (**)(char *, uint64_t, uint64_t))(v354 + 104);
    v346(v348, v178, v353);
    char v182 = static ColorScheme.== infix(_:_:)();
    long long v183 = *(void (**)(char *, uint64_t))(v179 + 8);
    v183(v181, v180);
    uint64_t v354 = v179 + 8;
    v183((char *)v177, v180);
    outlined init with copy of SnippetHeaderView(v176, v330);
    if (v182)
    {
      uint64_t v184 = v330;
      uint64_t v185 = v342;
      specialized Environment.wrappedValue.getter(v342);
      uint64_t v187 = v343;
      uint64_t v186 = v344;
      uint64_t v188 = v341;
      (*(void (**)(char *, void, uint64_t))(v344 + 104))(v341, *MEMORY[0x263F19970], v343);
      char v189 = static ColorScheme.== infix(_:_:)();
      char v190 = *(void (**)(char *, uint64_t))(v186 + 8);
      v190(v188, v187);
      v190((char *)v185, v187);
      outlined destroy of SnippetHeaderModel(v184, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      if (v189)
      {
        uint64_t v70 = v352;
        (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
        v73.n128_u64[0] = 0x3FE1313131313131;
        v74.n128_u64[0] = 0x3FD1111111111111;
        v75.n128_u64[0] = 0x3FE5757575757575;
        return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
      }
    }
    else
    {
      outlined destroy of SnippetHeaderModel(v330, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    }
    uint64_t v191 = v349;
    specialized Environment.wrappedValue.getter(v349);
    uint64_t v192 = v348;
    uint64_t v193 = v353;
    v346(v348, v178, v353);
    char v194 = static ColorScheme.== infix(_:_:)();
    v183(v192, v193);
    v183((char *)v191, v193);
    if ((v194 & 1) == 0)
    {
      uint64_t v195 = v349;
      specialized Environment.wrappedValue.getter(v349);
      char v196 = v348;
      uint64_t v197 = v353;
      v346(v348, v178, v353);
      char v198 = static ColorScheme.== infix(_:_:)();
      v183(v196, v197);
      v183((char *)v195, v197);
      outlined init with copy of SnippetHeaderView(v340, v334);
      if (v198)
      {
        outlined destroy of SnippetHeaderModel(v334, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      }
      else
      {
        uint64_t v199 = v334;
        uint64_t v200 = v342;
        specialized Environment.wrappedValue.getter(v342);
        uint64_t v202 = v343;
        uint64_t v201 = v344;
        char v203 = v341;
        (*(void (**)(char *, void, uint64_t))(v344 + 104))(v341, *MEMORY[0x263F19970], v343);
        char v204 = static ColorScheme.== infix(_:_:)();
        uint64_t v205 = *(void (**)(char *, uint64_t))(v201 + 8);
        v205(v203, v202);
        v205((char *)v200, v202);
        outlined destroy of SnippetHeaderModel(v199, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
        if (v204)
        {
          uint64_t v70 = v352;
          (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
          v73.n128_u64[0] = 0x3FEB5B5B5B5B5B5BLL;
          v74.n128_u64[0] = 0x3FE1F1F1F1F1F1F2;
          v75.n128_u64[0] = 1.0;
          return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
        }
      }
      uint64_t v70 = v352;
      (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
      v73.n128_u64[0] = 0x3FE7F7F7F7F7F7F8;
      v74.n128_u64[0] = 0x3FD6969696969697;
      v75.n128_u64[0] = 0x3FEE5E5E5E5E5E5ELL;
      return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
    }
    uint64_t v70 = v352;
    (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
    v73.n128_u64[0] = 0x3FE5F5F5F5F5F5F6;
    v74.n128_u64[0] = 0x3FD4949494949495;
    v75.n128_u64[0] = 0x3FEBDBDBDBDBDBDCLL;
    return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
  }
  if (a1 == v339 && a2 == 0x8000000261884010
    || ((char v221 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD000000000000028)
      ? (BOOL v222 = a2 == 0x8000000261884040)
      : (BOOL v222 = 0),
        !v222 ? (char v223 = 0) : (char v223 = 1),
        (v221 & 1) != 0 || (v223 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v206 = v340;
    uint64_t v207 = v349;
    uint64_t v347 = v340 + *(int *)(v338 + 20);
    specialized Environment.wrappedValue.getter(v349);
    uint64_t v208 = *MEMORY[0x263F18510];
    uint64_t v210 = v353;
    uint64_t v209 = v354;
    char v211 = v348;
    long long v346 = *(void (**)(char *, uint64_t, uint64_t))(v354 + 104);
    v346(v348, v208, v353);
    char v212 = static ColorScheme.== infix(_:_:)();
    uint64_t v213 = *(void (**)(char *, uint64_t))(v209 + 8);
    v213(v211, v210);
    uint64_t v354 = v209 + 8;
    v213((char *)v207, v210);
    outlined init with copy of SnippetHeaderView(v206, v332);
    if (v212)
    {
      uint64_t v214 = v332;
      uint64_t v215 = v342;
      specialized Environment.wrappedValue.getter(v342);
      uint64_t v217 = v343;
      uint64_t v216 = v344;
      uint64_t v218 = v341;
      (*(void (**)(char *, void, uint64_t))(v344 + 104))(v341, *MEMORY[0x263F19970], v343);
      char v219 = static ColorScheme.== infix(_:_:)();
      uint64_t v220 = *(void (**)(char *, uint64_t))(v216 + 8);
      v220(v218, v217);
      v220((char *)v215, v217);
      outlined destroy of SnippetHeaderModel(v214, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      if (v219) {
        goto LABEL_155;
      }
    }
    else
    {
      outlined destroy of SnippetHeaderModel(v332, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    }
    uint64_t v242 = v349;
    specialized Environment.wrappedValue.getter(v349);
    long long v243 = v348;
    uint64_t v244 = v353;
    v346(v348, v208, v353);
    char v245 = static ColorScheme.== infix(_:_:)();
    v213(v243, v244);
    v213((char *)v242, v244);
    if ((v245 & 1) == 0)
    {
      uint64_t v246 = v349;
      specialized Environment.wrappedValue.getter(v349);
      uint64_t v247 = v348;
      uint64_t v248 = v353;
      v346(v348, v208, v353);
      char v249 = static ColorScheme.== infix(_:_:)();
      v213(v247, v248);
      v213((char *)v246, v248);
      outlined init with copy of SnippetHeaderView(v340, (uint64_t)v336);
      if (v249)
      {
        long long v250 = v336;
LABEL_184:
        outlined destroy of SnippetHeaderModel((uint64_t)v250, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
        goto LABEL_188;
      }
      uint64_t v251 = v336;
LABEL_186:
      uint64_t v252 = v342;
      specialized Environment.wrappedValue.getter(v342);
      uint64_t v254 = v343;
      uint64_t v253 = v344;
      long long v255 = v341;
      (*(void (**)(char *, void, uint64_t))(v344 + 104))(v341, *MEMORY[0x263F19970], v343);
      char v256 = static ColorScheme.== infix(_:_:)();
      uint64_t v257 = *(void (**)(char *, uint64_t))(v253 + 8);
      v257(v255, v254);
      v257((char *)v252, v254);
      outlined destroy of SnippetHeaderModel((uint64_t)v251, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      if (v256)
      {
        uint64_t v70 = v352;
        (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
        v73.n128_u64[0] = 0x3FDC1C1C1C1C1C1CLL;
        v74.n128_u64[0] = 0x3FEAFAFAFAFAFAFBLL;
        v75.n128_u64[0] = 1.0;
        return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
      }
LABEL_188:
      uint64_t v70 = v352;
      (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
      v73.n128_u64[0] = 0x3FD9191919191919;
      v74.n128_u64[0] = 0x3FEA5A5A5A5A5A5ALL;
      v75.n128_u64[0] = 1.0;
      return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
    }
LABEL_181:
    uint64_t v70 = v352;
    (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
    v73.n128_u64[0] = 0x3FC9191919191919;
    v74.n128_u64[0] = 0x3FE5B5B5B5B5B5B6;
    goto LABEL_133;
  }
  if (a1 == 0xD000000000000024 && a2 == 0x8000000261884070
    || ((char v224 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == v339)
      ? (BOOL v225 = a2 == 0x80000002618840A0)
      : (BOOL v225 = 0),
        !v225 ? (char v226 = 0) : (char v226 = 1),
        (v224 & 1) != 0 || (v226 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v227 = v340;
    uint64_t v228 = v349;
    uint64_t v347 = v340 + *(int *)(v338 + 20);
    specialized Environment.wrappedValue.getter(v349);
    uint64_t v229 = *MEMORY[0x263F18510];
    uint64_t v231 = v353;
    uint64_t v230 = v354;
    uint64_t v232 = v348;
    long long v346 = *(void (**)(char *, uint64_t, uint64_t))(v354 + 104);
    v346(v348, v229, v353);
    char v233 = static ColorScheme.== infix(_:_:)();
    long long v234 = *(void (**)(char *, uint64_t))(v230 + 8);
    v234(v232, v231);
    uint64_t v354 = v230 + 8;
    v234((char *)v228, v231);
    outlined init with copy of SnippetHeaderView(v227, v333);
    if (v233)
    {
      uint64_t v235 = v333;
      uint64_t v236 = v342;
      specialized Environment.wrappedValue.getter(v342);
      uint64_t v238 = v343;
      uint64_t v237 = v344;
      uint64_t v239 = v341;
      (*(void (**)(char *, void, uint64_t))(v344 + 104))(v341, *MEMORY[0x263F19970], v343);
      char v240 = static ColorScheme.== infix(_:_:)();
      long long v241 = *(void (**)(char *, uint64_t))(v237 + 8);
      v241(v239, v238);
      v241((char *)v236, v238);
      outlined destroy of SnippetHeaderModel(v235, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      if (v240)
      {
        uint64_t v71 = *MEMORY[0x263F1B380];
        uint64_t v72 = v351;
        uint64_t v70 = v352;
        goto LABEL_13;
      }
    }
    else
    {
      outlined destroy of SnippetHeaderModel(v333, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    }
    uint64_t v258 = v349;
    specialized Environment.wrappedValue.getter(v349);
    uint64_t v259 = v348;
    uint64_t v260 = v353;
    v346(v348, v229, v353);
    char v261 = static ColorScheme.== infix(_:_:)();
    v234(v259, v260);
    v234((char *)v258, v260);
    if (v261) {
      goto LABEL_16;
    }
    uint64_t v262 = v349;
    specialized Environment.wrappedValue.getter(v349);
    unint64_t v263 = v348;
    uint64_t v264 = v353;
    v346(v348, v229, v353);
    char v265 = static ColorScheme.== infix(_:_:)();
    v234(v263, v264);
    v234((char *)v262, v264);
    outlined init with copy of SnippetHeaderView(v340, (uint64_t)v345);
    if (v265)
    {
      outlined destroy of SnippetHeaderModel((uint64_t)v345, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    }
    else
    {
      uint64_t v266 = v345;
      uint64_t v267 = v342;
      specialized Environment.wrappedValue.getter(v342);
      uint64_t v269 = v343;
      uint64_t v268 = v344;
      uint64_t v270 = v341;
      (*(void (**)(char *, void, uint64_t))(v344 + 104))(v341, *MEMORY[0x263F19970], v343);
      char v271 = static ColorScheme.== infix(_:_:)();
      uint64_t v272 = *(void (**)(char *, uint64_t))(v268 + 8);
      v272(v270, v269);
      v272((char *)v267, v269);
      outlined destroy of SnippetHeaderModel((uint64_t)v266, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      if (v271)
      {
        uint64_t v91 = *MEMORY[0x263F1B380];
        uint64_t v84 = v351;
        goto LABEL_21;
      }
    }
    uint64_t v92 = *MEMORY[0x263F1B380];
    uint64_t v84 = v351;
    goto LABEL_23;
  }
  if (a1 == 0xD000000000000036 && a2 == 0x80000002618840D0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v273 = v340;
    uint64_t v274 = v349;
    uint64_t v347 = v340 + *(int *)(v338 + 20);
    specialized Environment.wrappedValue.getter(v349);
    uint64_t v275 = *MEMORY[0x263F18510];
    uint64_t v277 = v353;
    uint64_t v276 = v354;
    uint64_t v278 = v348;
    uint64_t v345 = *(void (**)(char *, uint64_t, uint64_t))(v354 + 104);
    v345(v348, v275, v353);
    char v279 = static ColorScheme.== infix(_:_:)();
    uint64_t v280 = *(void (**)(char *, uint64_t))(v276 + 8);
    v280(v278, v277);
    uint64_t v354 = v276 + 8;
    v280((char *)v274, v277);
    outlined init with copy of SnippetHeaderView(v273, v335);
    if ((v279 & 1) == 0)
    {
      outlined destroy of SnippetHeaderModel(v335, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      goto LABEL_203;
    }
    uint64_t v281 = v335;
    uint64_t v282 = v342;
    specialized Environment.wrappedValue.getter(v342);
    uint64_t v284 = v343;
    uint64_t v283 = v344;
    int v285 = v341;
    (*(void (**)(char *, void, uint64_t))(v344 + 104))(v341, *MEMORY[0x263F19970], v343);
    char v286 = static ColorScheme.== infix(_:_:)();
    int v287 = *(void (**)(char *, uint64_t))(v283 + 8);
    v287(v285, v284);
    v287((char *)v282, v284);
    outlined destroy of SnippetHeaderModel(v281, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    if ((v286 & 1) == 0)
    {
LABEL_203:
      uint64_t v288 = v349;
      specialized Environment.wrappedValue.getter(v349);
      uint64_t v289 = v348;
      uint64_t v290 = v353;
      v345(v348, v275, v353);
      char v291 = static ColorScheme.== infix(_:_:)();
      v280(v289, v290);
      v280((char *)v288, v290);
      if ((v291 & 1) == 0)
      {
        uint64_t v292 = v349;
        specialized Environment.wrappedValue.getter(v349);
        uint64_t v293 = v348;
        uint64_t v294 = v353;
        v345(v348, v275, v353);
        char v295 = static ColorScheme.== infix(_:_:)();
        v280(v293, v294);
        v280((char *)v292, v294);
        outlined init with copy of SnippetHeaderView(v340, (uint64_t)v346);
        if (v295)
        {
          long long v250 = v346;
          goto LABEL_184;
        }
        uint64_t v251 = v346;
        goto LABEL_186;
      }
      goto LABEL_181;
    }
LABEL_155:
    uint64_t v70 = v352;
    (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
    v74.n128_u64[0] = 0x3FDC5C5C5C5C5C5CLL;
    v75.n128_u64[0] = 0x3FE4949494949495;
    v73.n128_u64[0] = 0;
    return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
  }
  if (a1 == v327 && a2 == 0x8000000261884110 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v296 = v340;
    uint64_t v297 = v349;
    uint64_t v347 = v340 + *(int *)(v338 + 20);
    specialized Environment.wrappedValue.getter(v349);
    uint64_t v299 = v353;
    uint64_t v298 = v354;
    uint64_t v300 = *(void (**)(char *, uint64_t, uint64_t))(v354 + 104);
    char v301 = v348;
    LODWORD(v346) = *MEMORY[0x263F18510];
    uint64_t v345 = v300;
    ((void (*)(char *))v300)(v348);
    char v302 = static ColorScheme.== infix(_:_:)();
    v303 = *(void (**)(char *, uint64_t))(v298 + 8);
    v303(v301, v299);
    uint64_t v354 = v298 + 8;
    v303((char *)v297, v299);
    outlined init with copy of SnippetHeaderView(v296, (uint64_t)v337);
    if (v302)
    {
      v304 = v337;
      uint64_t v305 = v342;
      specialized Environment.wrappedValue.getter(v342);
      uint64_t v307 = v343;
      uint64_t v306 = v344;
      uint64_t v308 = v341;
      (*(void (**)(char *, void, uint64_t))(v344 + 104))(v341, *MEMORY[0x263F19970], v343);
      char v309 = static ColorScheme.== infix(_:_:)();
      uint64_t v310 = *(void (**)(char *, uint64_t))(v306 + 8);
      v310(v308, v307);
      v310((char *)v305, v307);
      outlined destroy of SnippetHeaderModel((uint64_t)v304, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      if (v309)
      {
        uint64_t v70 = v352;
        (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
        v73.n128_u64[0] = 0x3FA8181818181818;
        v74.n128_u64[0] = 0x3FE0303030303030;
        v75.n128_u64[0] = 0x3FDEDEDEDEDEDEDFLL;
        return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
      }
    }
    else
    {
      outlined destroy of SnippetHeaderModel((uint64_t)v337, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    }
    uint64_t v311 = v349;
    specialized Environment.wrappedValue.getter(v349);
    uint64_t v312 = v348;
    uint64_t v313 = v353;
    v345(v348, v346, v353);
    char v314 = static ColorScheme.== infix(_:_:)();
    v303(v312, v313);
    v303((char *)v311, v313);
    if (v314)
    {
      uint64_t v70 = v352;
      (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
      v74.n128_u64[0] = 0x3FE8F8F8F8F8F8F9;
      v75.n128_u64[0] = 0x3FE7D7D7D7D7D7D8;
      v73.n128_u64[0] = 0;
    }
    else
    {
      uint64_t v315 = v349;
      specialized Environment.wrappedValue.getter(v349);
      uint64_t v316 = v348;
      uint64_t v317 = v353;
      v345(v348, v346, v353);
      char v318 = static ColorScheme.== infix(_:_:)();
      v303(v316, v317);
      v303((char *)v315, v317);
      outlined init with copy of SnippetHeaderView(v340, (uint64_t)v17);
      if (v318)
      {
        uint64_t v319 = (uint64_t)v17;
      }
      else
      {
        uint64_t v320 = v17;
        uint64_t v321 = v342;
        specialized Environment.wrappedValue.getter(v342);
        uint64_t v323 = v343;
        uint64_t v322 = v344;
        char v324 = v341;
        (*(void (**)(char *, void, uint64_t))(v344 + 104))(v341, *MEMORY[0x263F19970], v343);
        static ColorScheme.== infix(_:_:)();
        uint64_t v325 = *(void (**)(char *, uint64_t))(v322 + 8);
        v325(v324, v323);
        v325((char *)v321, v323);
        uint64_t v319 = (uint64_t)v320;
      }
      outlined destroy of SnippetHeaderModel(v319, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
      uint64_t v70 = v352;
      (*(void (**)(char *, void, uint64_t))(v351 + 104))(v352, *MEMORY[0x263F1B380], v350);
      v73.n128_u64[0] = 0x3FD999999999999ALL;
      v74.n128_u64[0] = 0x3FEA9A9A9A9A9A9BLL;
      v75.n128_u64[0] = 0x3FE9F9F9F9F9F9FALL;
    }
    return MEMORY[0x263E41A70](v70, v73, v74, v75, 1.0);
  }

  return static Color.black.getter();
}

uint64_t outlined init with take of SnippetHeaderModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _FrameLayout>, _ForegroundStyleModifier<Color>>);
    lazy protocol witness table accessor for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _ForegroundStyleModifier<Color> and conformance _ForegroundStyleModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _FrameLayout>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ForegroundStyleModifier<Color> and conformance _ForegroundStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ForegroundStyleModifier<Color> and conformance _ForegroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _ForegroundStyleModifier<Color> and conformance _ForegroundStyleModifier<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ForegroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundStyleModifier<Color> and conformance _ForegroundStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SashStandardView and conformance SashStandardView()
{
  unint64_t result = lazy protocol witness table cache variable for type SashStandardView and conformance SashStandardView;
  if (!lazy protocol witness table cache variable for type SashStandardView and conformance SashStandardView)
  {
    type metadata accessor for SashStandardView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SashStandardView and conformance SashStandardView);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SnippetHeaderView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for SnippetHeaderView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SnippetHeaderModel();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      uint64_t v12 = *(int *)(v7 + 20);
      uint64_t v13 = (uint64_t *)((char *)a1 + v12);
      uint64_t v14 = (uint64_t *)((char *)a2 + v12);
      uint64_t v15 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v15;
      uint64_t v16 = *(int *)(v7 + 24);
      int v17 = (uint64_t *)((char *)a1 + v16);
      uint64_t v18 = (uint64_t *)((char *)a2 + v16);
      uint64_t v19 = v18[1];
      *int v17 = *v18;
      v17[1] = v19;
      uint64_t v20 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20(a1, 0, 1, v7);
    }
    uint64_t v21 = *(int *)(a3 + 20);
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
    }
    else
    {
      *uint64_t v22 = *v23;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v25 = *(int *)(a3 + 24);
    uint64_t v26 = (uint64_t *)((char *)a1 + v25);
    uint64_t v27 = (uint64_t *)((char *)a2 + v25);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v28 = type metadata accessor for ColorSchemeContrast();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
    }
    else
    {
      void *v26 = *v27;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for SnippetHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    uint64_t v5 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for ColorSchemeContrast();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
    return v10(v8, v9);
  }
  else
  {
    return swift_release();
  }
}

char *initializeWithCopy for SnippetHeaderView(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    uint64_t v10 = *(int *)(v6 + 20);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    uint64_t v14 = *(int *)(v6 + 24);
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    uint64_t v18 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18(a1, 0, 1, v6);
  }
  uint64_t v19 = *(int *)(a3 + 20);
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  }
  else
  {
    *(void *)uint64_t v20 = *(void *)v21;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v23 = *(int *)(a3 + 24);
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
  }
  else
  {
    *(void *)uint64_t v24 = *(void *)v25;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithCopy for SnippetHeaderView(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v11 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      uint64_t v12 = *(int *)(v6 + 20);
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      *(void *)uint64_t v13 = *(void *)v14;
      *((void *)v13 + 1) = *((void *)v14 + 1);
      uint64_t v15 = *(int *)(v6 + 24);
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      *((void *)v16 + 1) = *((void *)v17 + 1);
      uint64_t v18 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(a1, 0, 1, v6);
      if (a1 == a2) {
        return a1;
      }
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v19 - 8) + 64));
    if (a1 == a2) {
      return a1;
    }
    goto LABEL_8;
  }
  if (v10)
  {
    outlined destroy of SnippetHeaderModel((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_7;
  }
  uint64_t v29 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 24))(a1, a2, v29);
  uint64_t v30 = *(int *)(v6 + 20);
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = *(int *)(v6 + 24);
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = *((void *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 == a2) {
    return a1;
  }
LABEL_8:
  uint64_t v20 = *(int *)(a3 + 20);
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  outlined destroy of Font.Design?((uint64_t)&a1[v20], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  }
  else
  {
    *(void *)uint64_t v21 = *(void *)v22;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = *(int *)(a3 + 24);
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  outlined destroy of Font.Design?((uint64_t)&a1[v24], &demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v27 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
  }
  else
  {
    *(void *)uint64_t v25 = *(void *)v26;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *initializeWithTake for SnippetHeaderView(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
    *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for SnippetHeaderView(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v11 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
      *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
      *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      if (a1 == a2) {
        return a1;
      }
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    if (a1 == a2) {
      return a1;
    }
    goto LABEL_8;
  }
  if (v10)
  {
    outlined destroy of SnippetHeaderModel((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_7;
  }
  uint64_t v24 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 40))(a1, a2, v24);
  uint64_t v25 = *(int *)(v6 + 20);
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v29 = *(void *)v27;
  uint64_t v28 = *((void *)v27 + 1);
  *(void *)uint64_t v26 = v29;
  *((void *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = *(int *)(v6 + 24);
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v34 = *(void *)v32;
  uint64_t v33 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = v34;
  *((void *)v31 + 1) = v33;
  swift_bridgeObjectRelease();
  if (a1 == a2) {
    return a1;
  }
LABEL_8:
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  outlined destroy of Font.Design?((uint64_t)&a1[v13], &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  outlined destroy of Font.Design?((uint64_t)&a1[v18], &demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = type metadata accessor for ColorSchemeContrast();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v19, v20, v22);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SnippetHeaderView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261864050);
}

uint64_t sub_261864050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for SnippetHeaderView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2618641BC);
}

uint64_t sub_2618641BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

void type metadata completion function for SnippetHeaderView()
{
  _s10WellnessUI18SnippetHeaderModelVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (uint64_t (*)(uint64_t))type metadata accessor for SnippetHeaderModel, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    _s10WellnessUI18SnippetHeaderModelVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Environment<ColorScheme>.Content, MEMORY[0x263F18518], MEMORY[0x263F185C0]);
    if (v1 <= 0x3F)
    {
      _s10WellnessUI18SnippetHeaderModelVSgMaTm_0(319, &lazy cache variable for type metadata for Environment<ColorSchemeContrast>.Content, MEMORY[0x263F19980], MEMORY[0x263F185C0]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void _s10WellnessUI18SnippetHeaderModelVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with copy of SnippetHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SnippetHeaderView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CycleTrackingLogModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t CycleTrackingLogModel.appPunchout.setter(uint64_t a1)
{
  return outlined assign with take of AppPunchout?(a1, v1);
}

uint64_t outlined assign with take of AppPunchout?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*CycleTrackingLogModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t CycleTrackingLogModel.dateLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CycleTrackingLogModel() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for CycleTrackingLogModel()
{
  uint64_t result = type metadata singleton initialization cache for CycleTrackingLogModel;
  if (!type metadata singleton initialization cache for CycleTrackingLogModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CycleTrackingLogModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for CycleTrackingLogModel() + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*CycleTrackingLogModel.dateLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t CycleTrackingLogModel.loggedLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CycleTrackingLogModel() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CycleTrackingLogModel.cycleTrackingType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CycleTrackingLogModel() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CycleTrackingLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CycleTrackingLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 32), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t CycleTrackingLogModel.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CycleTrackingLogModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(v3 + 36), a1, &demangling cache variable for type metadata for URL?);
}

uint64_t CycleTrackingLogModel.init(date:loggedLabel:cycleTrackingType:snippetHeaderModel:url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v44 = a7;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v40 = a2;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AppPunchout();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56);
  uint64_t v38 = v19 + 56;
  uint64_t v39 = v20;
  v20((char *)a8, 1, 1, v18);
  uint64_t v21 = (int *)type metadata accessor for CycleTrackingLogModel();
  uint64_t v22 = (uint64_t *)(a8 + v21[5]);
  *uint64_t v22 = 0;
  v22[1] = 0;
  uint64_t v43 = a1;
  if (a1)
  {
    uint64_t v37 = a6;
    dispatch thunk of DialogCalendar.dateDescriptive.getter();
    uint64_t v23 = type metadata accessor for SpeakableString();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v17, 1, v23) == 1)
    {
      outlined destroy of Font.Design?((uint64_t)v17, &demangling cache variable for type metadata for SpeakableString?);
      a1 = 0;
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v26 = SpeakableString.print.getter();
      uint64_t v36 = a5;
      uint64_t v28 = v27;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v23);
      uint64_t v45 = v26;
      uint64_t v46 = v28;
      lazy protocol witness table accessor for type String and conformance String();
      a1 = StringProtocol.capitalized.getter();
      uint64_t v25 = v29;
      a5 = v36;
      swift_bridgeObjectRelease();
    }
    a6 = v37;
  }
  else
  {
    uint64_t v25 = 0;
  }
  swift_bridgeObjectRelease();
  *uint64_t v22 = a1;
  v22[1] = v25;
  uint64_t v30 = (void *)(a8 + v21[6]);
  uint64_t v31 = v41;
  void *v30 = v40;
  v30[1] = v31;
  uint64_t v32 = (void *)(a8 + v21[7]);
  void *v32 = v42;
  v32[1] = a5;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a6, a8 + v21[8], &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v33 = v44;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v44, a8 + v21[9], &demangling cache variable for type metadata for URL?);
  CycleTrackingLogModel.createAppPunchout(url:)(v33);
  swift_release();
  outlined destroy of Font.Design?(v33, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(a6, &demangling cache variable for type metadata for SnippetHeaderModel?);
  v39(v14, 0, 1, v18);
  return outlined assign with take of AppPunchout?((uint64_t)v14, a8);
}

uint64_t CycleTrackingLogModel.createAppPunchout(url:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL.absoluteString.getter();
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

unint64_t CycleTrackingLogModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x68636E7550707061;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6562614C65746164;
      break;
    case 2:
      unint64_t result = 0x614C646567676F6CLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 7107189;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance CycleTrackingLogModel.CodingKeys()
{
  return CycleTrackingLogModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CycleTrackingLogModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CycleTrackingLogModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CycleTrackingLogModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CycleTrackingLogModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CycleTrackingLogModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CycleTrackingLogModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for AppPunchout();
  _s10SnippetKit11AppPunchoutVACSEAAWlTm_8(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for CycleTrackingLogModel();
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    type metadata accessor for SnippetHeaderModel();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_8(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[10] = 5;
    type metadata accessor for URL();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_8(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys);
  }
  return result;
}

uint64_t CycleTrackingLogModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CycleTrackingLogModel.CodingKeys>);
  uint64_t v38 = *(void *)(v12 - 8);
  uint64_t v39 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CycleTrackingLogModel();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AppPunchout();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v41 = a1;
  uint64_t v42 = (int *)v15;
  uint64_t v19 = &v17[*(int *)(v15 + 20)];
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  uint64_t v44 = v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CycleTrackingLogModel.CodingKeys and conformance CycleTrackingLogModel.CodingKeys();
  uint64_t v40 = v14;
  uint64_t v20 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v41);
    outlined destroy of Font.Design?((uint64_t)v17, &demangling cache variable for type metadata for AppPunchout?);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v43 = v8;
    uint64_t v21 = v38;
    char v50 = 0;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_8(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    uint64_t v22 = v39;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?((uint64_t)v11, (uint64_t)v17);
    char v49 = 1;
    uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v25 = v24;
    uint64_t v26 = (uint64_t *)v44;
    swift_bridgeObjectRelease();
    uint64_t *v26 = v23;
    v26[1] = v25;
    char v48 = 2;
    uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v28 = v42;
    uint64_t v29 = (uint64_t *)&v17[v42[6]];
    uint64_t *v29 = v27;
    v29[1] = v30;
    char v47 = 3;
    uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v32 = (uint64_t *)&v17[v28[7]];
    uint64_t *v32 = v31;
    v32[1] = v33;
    type metadata accessor for SnippetHeaderModel();
    char v46 = 4;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_8(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v34 = (uint64_t)v43;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined init with take of VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>(v34, (uint64_t)&v17[v28[8]], &demangling cache variable for type metadata for SnippetHeaderModel?);
    type metadata accessor for URL();
    char v45 = 5;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_8(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    uint64_t v35 = v40;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v35, v22);
    outlined init with take of VStack<TupleView<(<<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0, <<opaque return type of View.componentSpacing(top:bottom:)>>.0)>>((uint64_t)v5, (uint64_t)&v17[v28[9]], &demangling cache variable for type metadata for URL?);
    outlined init with copy of CycleTrackingLogModel((uint64_t)v17, v37);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v41);
    return outlined destroy of CycleTrackingLogModel((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CycleTrackingLogModel);
  }
}

uint64_t outlined init with copy of CycleTrackingLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CycleTrackingLogModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Decodable in CycleTrackingLogModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_8(&lazy protocol witness table cache variable for type CycleTrackingLogModel and conformance CycleTrackingLogModel, (void (*)(uint64_t))type metadata accessor for CycleTrackingLogModel);
}

uint64_t base witness table accessor for Encodable in CycleTrackingLogModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_8(&lazy protocol witness table cache variable for type CycleTrackingLogModel and conformance CycleTrackingLogModel, (void (*)(uint64_t))type metadata accessor for CycleTrackingLogModel);
}

uint64_t _s10SnippetKit11AppPunchoutVACSEAAWlTm_8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CycleTrackingLogModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CycleTrackingLogModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CycleTrackingLogModel(void *a1)
{
  return CycleTrackingLogModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for CycleTrackingLogModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    uint64_t v13 = (uint64_t *)((char *)a1 + v11);
    uint64_t v14 = (uint64_t *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = (uint64_t *)((char *)a1 + v12);
    uint64_t v17 = (uint64_t *)((char *)a2 + v12);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = a3[7];
    uint64_t v20 = a3[8];
    uint64_t v21 = (uint64_t *)((char *)a1 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    __dst = (char *)a1 + v20;
    uint64_t v24 = (char *)a2 + v20;
    uint64_t v25 = type metadata accessor for SnippetHeaderModel();
    uint64_t v45 = *(void *)(v25 - 8);
    uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v26(v24, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(__dst, v24, v28);
      uint64_t v29 = *(int *)(v25 + 20);
      uint64_t v30 = &__dst[v29];
      uint64_t v31 = &v24[v29];
      uint64_t v32 = *((void *)v31 + 1);
      *(void *)uint64_t v30 = *(void *)v31;
      *((void *)v30 + 1) = v32;
      uint64_t v33 = *(int *)(v25 + 24);
      uint64_t v34 = &__dst[v33];
      uint64_t v35 = &v24[v33];
      uint64_t v36 = *((void *)v35 + 1);
      *(void *)uint64_t v34 = *(void *)v35;
      *((void *)v34 + 1) = v36;
      uint64_t v37 = *(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(__dst, 0, 1, v25);
    }
    uint64_t v38 = a3[9];
    uint64_t v39 = (char *)a1 + v38;
    uint64_t v40 = (char *)a2 + v38;
    uint64_t v41 = type metadata accessor for URL();
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
  }
  return a1;
}

uint64_t destroy for CycleTrackingLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t v7 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    uint64_t v8 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = a1 + *(int *)(a2 + 36);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v10 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v9, 1, v10);
  if (!result)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
    return v12(v9, v10);
  }
  return result;
}

char *initializeWithCopy for CycleTrackingLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  uint64_t v13 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = &a1[v10];
  uint64_t v15 = &a2[v10];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = v21;
  __dst = &a1[v18];
  uint64_t v45 = a3;
  uint64_t v22 = &a2[v18];
  uint64_t v23 = type metadata accessor for SnippetHeaderModel();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v25(v22, 1, v23))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dst, v22, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(__dst, v22, v27);
    uint64_t v28 = *(int *)(v23 + 20);
    uint64_t v29 = &__dst[v28];
    uint64_t v30 = &v22[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    uint64_t v32 = *(int *)(v23 + 24);
    uint64_t v33 = &__dst[v32];
    uint64_t v34 = &v22[v32];
    uint64_t v35 = *((void *)v34 + 1);
    *(void *)uint64_t v33 = *(void *)v34;
    *((void *)v33 + 1) = v35;
    uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(__dst, 0, 1, v23);
  }
  uint64_t v37 = v45[9];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v40 = type metadata accessor for URL();
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  return a1;
}

char *assignWithCopy for CycleTrackingLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[8];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for SnippetHeaderModel();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      uint64_t v29 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v22, v23, v29);
      uint64_t v30 = *(int *)(v24 + 20);
      uint64_t v31 = &v22[v30];
      uint64_t v32 = &v23[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      *((void *)v31 + 1) = *((void *)v32 + 1);
      uint64_t v33 = *(int *)(v24 + 24);
      uint64_t v34 = &v22[v33];
      uint64_t v35 = &v23[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      *((void *)v34 + 1) = *((void *)v35 + 1);
      uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    outlined destroy of CycleTrackingLogModel((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v22, v23, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v48 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 24))(v22, v23, v48);
  uint64_t v49 = *(int *)(v24 + 20);
  char v50 = &v22[v49];
  uint64_t v51 = &v23[v49];
  *(void *)char v50 = *(void *)v51;
  *((void *)v50 + 1) = *((void *)v51 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v52 = *(int *)(v24 + 24);
  char v53 = &v22[v52];
  uint64_t v54 = &v23[v52];
  *(void *)char v53 = *(void *)v54;
  *((void *)v53 + 1) = *((void *)v54 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v38 = a3[9];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  uint64_t v41 = type metadata accessor for URL();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  int v44 = v43(v39, 1, v41);
  int v45 = v43(v40, 1, v41);
  if (!v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 24))(v39, v40, v41);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
    goto LABEL_18;
  }
  if (v45)
  {
LABEL_18:
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v39, v40, *(void *)(*(void *)(v46 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  return a1;
}

uint64_t outlined destroy of CycleTrackingLogModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for CycleTrackingLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for SnippetHeaderModel();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    uint64_t v16 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v11, v12, v16);
    *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
    *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = a3[9];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

char *assignWithTake for CycleTrackingLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = v16;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[6];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = v21;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[7];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = v26;
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[8];
  int v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = type metadata accessor for SnippetHeaderModel();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      uint64_t v35 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v28, v29, v35);
      *(_OWORD *)&v28[*(int *)(v30 + 20)] = *(_OWORD *)&v29[*(int *)(v30 + 20)];
      *(_OWORD *)&v28[*(int *)(v30 + 24)] = *(_OWORD *)&v29[*(int *)(v30 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    outlined destroy of CycleTrackingLogModel((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v28, v29, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v47 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 40))(v28, v29, v47);
  uint64_t v48 = *(int *)(v30 + 20);
  uint64_t v49 = &v28[v48];
  char v50 = &v29[v48];
  uint64_t v52 = *(void *)v50;
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)uint64_t v49 = v52;
  *((void *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  uint64_t v53 = *(int *)(v30 + 24);
  uint64_t v54 = &v28[v53];
  uint64_t v55 = &v29[v53];
  uint64_t v57 = *(void *)v55;
  uint64_t v56 = *((void *)v55 + 1);
  *(void *)uint64_t v54 = v57;
  *((void *)v54 + 1) = v56;
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v37 = a3[9];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v40 = type metadata accessor for URL();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  int v43 = v42(v38, 1, v40);
  int v44 = v42(v39, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v38, v39, v40);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v38, v40);
    goto LABEL_18;
  }
  if (v44)
  {
LABEL_18:
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v38, v39, *(void *)(*(void *)(v45 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v38, v39, v40);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  return a1;
}

uint64_t getEnumTagSinglePayload for CycleTrackingLogModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_26186719C);
}

uint64_t sub_26186719C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_11:
    return v9(v10, a2, v8);
  }
  if (a2 == 2147483646)
  {
    unint64_t v11 = *(void *)(a1 + a3[5] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    int v12 = v11 - 1;
    if (v12 < 0) {
      int v12 = -1;
    }
    return (v12 + 1);
  }
  else
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v15 = *(void *)(v14 - 8);
    if (*(_DWORD *)(v15 + 84) == a2)
    {
      uint64_t v8 = v14;
      uint64_t v10 = a1 + a3[8];
      int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
      goto LABEL_11;
    }
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[9];
    return v17(v19, a2, v18);
  }
}

uint64_t storeEnumTagSinglePayload for CycleTrackingLogModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_26186734C);
}

uint64_t sub_26186734C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[5] + 8) = a2;
    return result;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[8];
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[9];

  return v16(v18, a2, a2, v17);
}

void type metadata completion function for CycleTrackingLogModel()
{
  _s10SnippetKit11AppPunchoutVSgMaTm_2(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, MEMORY[0x263F762C0]);
  if (v0 <= 0x3F)
  {
    _s10SnippetKit11AppPunchoutVSgMaTm_2(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F)
    {
      _s10SnippetKit11AppPunchoutVSgMaTm_2(319, &lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void _s10SnippetKit11AppPunchoutVSgMaTm_2(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for CycleTrackingLogModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x261867760);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CycleTrackingLogModel.CodingKeys()
{
  return &unk_270D87A20;
}

uint64_t specialized CycleTrackingLogModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000261884140 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883800 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t SpecificMedCompletedLogSnippet.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SpecificMedCompletedLogModel(v1, a1, (uint64_t (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
}

uint64_t SpecificMedCompletedLogSnippet.text2.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogSnippet() + 20);
  uint64_t v2 = *(void *)v1;
  outlined copy of Text.Storage(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for SpecificMedCompletedLogSnippet()
{
  uint64_t result = type metadata singleton initialization cache for SpecificMedCompletedLogSnippet;
  if (!type metadata singleton initialization cache for SpecificMedCompletedLogSnippet) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SpecificMedCompletedLogSnippet.text2.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v9 = v4 + *(int *)(type metadata accessor for SpecificMedCompletedLogSnippet() + 20);
  outlined consume of Text.Storage(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + 8) = a2;
  *(unsigned char *)(v9 + 16) = a3 & 1;
  *(void *)(v9 + 24) = a4;
  return result;
}

uint64_t (*SpecificMedCompletedLogSnippet.text2.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t SpecificMedCompletedLogSnippet.text3.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogSnippet() + 24);
  uint64_t v2 = *(void *)v1;
  outlined copy of Text.Storage(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t SpecificMedCompletedLogSnippet.text3.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v9 = v4 + *(int *)(type metadata accessor for SpecificMedCompletedLogSnippet() + 24);
  outlined consume of Text.Storage(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + 8) = a2;
  *(unsigned char *)(v9 + 16) = a3 & 1;
  *(void *)(v9 + 24) = a4;
  return result;
}

uint64_t (*SpecificMedCompletedLogSnippet.text3.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

void SpecificMedCompletedLogSnippet.init(model:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = (int *)type metadata accessor for SpecificMedCompletedLogSnippet();
  unint64_t v11 = (uint64_t *)(a2 + v10[7]);
  type metadata accessor for Context();
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_4(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  *unint64_t v11 = EnvironmentObject.init()();
  v11[1] = v12;
  outlined init with copy of SpecificMedCompletedLogModel(a1, a2, (uint64_t (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  uint64_t v13 = *(void **)(a1 + 32);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 24);
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v15._object = (void *)0x8000000261884160;
    v15._uint64_t countAndFlagsBits = 0x1000000000000010;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v15);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(a1 + v4[12]));
    v16._uint64_t countAndFlagsBits = 32;
    v16._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v16);
    v17._uint64_t countAndFlagsBits = v14;
    v17._object = v13;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v17);
    v18._uint64_t countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v18);
    goto LABEL_5;
  }
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v19._object = (void *)0x8000000261884160;
  v19._uint64_t countAndFlagsBits = 0x1000000000000010;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v19);
  uint64_t v20 = *(void *)(a1 + 48);
  if (v20)
  {
    uint64_t v21 = *(void *)(a1 + 40);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(&v20 - 1));
    v22._uint64_t countAndFlagsBits = 0x6C75646568635320;
    v22._object = (void *)0xE900000000000065;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v22);
LABEL_5:
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v23 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v24 = a2 + v10[5];
    *(void *)uint64_t v24 = v23;
    *(void *)(v24 + 8) = v25;
    *(unsigned char *)(v24 + 16) = v26 & 1;
    *(void *)(v24 + 24) = v27;
    char v28 = *(unsigned char *)(a1 + v4[9] + 8);
    outlined init with copy of SpecificMedCompletedLogModel(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
    if (v28)
    {
      _s10WellnessUI28SpecificMedCompletedLogModelVWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
    }
    else
    {
      uint64_t v29 = *(void *)&v6[v4[11] + 8];
      _s10WellnessUI28SpecificMedCompletedLogModelVWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
      if (v29)
      {
        LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v30._uint64_t countAndFlagsBits = 0;
        v30._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v30);
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(a1 + v4[10]));
        v31._uint64_t countAndFlagsBits = 32;
        v31._object = (void *)0xE100000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v31);
        uint64_t v32 = (uint64_t *)(a1 + v4[11]);
        uint64_t v33 = v32[1];
        if (v33) {
          uint64_t v34 = *v32;
        }
        else {
          uint64_t v34 = 0;
        }
        if (v33) {
          uint64_t v35 = (void *)v32[1];
        }
        else {
          uint64_t v35 = (void *)0xE000000000000000;
        }
        swift_bridgeObjectRetain();
        v36._uint64_t countAndFlagsBits = v34;
        v36._object = v35;
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v36);
        swift_bridgeObjectRelease();
        v37._uint64_t countAndFlagsBits = 544497952;
        v37._object = (void *)0xE400000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v37);
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(a1 + 8));
        v38._uint64_t countAndFlagsBits = 0;
        v38._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v38);
        goto LABEL_18;
      }
    }
    if (*(unsigned char *)(a1 + v4[14]) == 1)
    {
      LocalizedStringKey.init(stringLiteral:)();
LABEL_19:
      uint64_t v41 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v43 = v42;
      char v45 = v44;
      uint64_t v47 = v46;
      _s10WellnessUI28SpecificMedCompletedLogModelVWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
      uint64_t v48 = a2 + v10[6];
      *(void *)uint64_t v48 = v41;
      *(void *)(v48 + 8) = v43;
      *(unsigned char *)(v48 + 16) = v45 & 1;
      *(void *)(v48 + 24) = v47;
      return;
    }
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v39._uint64_t countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v39);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(a1 + 8));
    v40._uint64_t countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v40);
LABEL_18:
    LocalizedStringKey.init(stringInterpolation:)();
    goto LABEL_19;
  }
  __break(1u);
}

uint64_t SpecificMedCompletedLogSnippet.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v191 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetBody<TupleView<(AnyView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>>);
  uint64_t v188 = *(void *)(v1 - 8);
  uint64_t v189 = v1;
  MEMORY[0x270FA5388](v1);
  int v3 = (char *)&countAndFlagsBits - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = type metadata accessor for SpecificMedCompletedLogSnippet();
  uint64_t v190 = *(void *)(v161 - 8);
  uint64_t v4 = *(void *)(v190 + 64);
  MEMORY[0x270FA5388](v161);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>>);
  uint64_t v171 = *(void *)(v5 - 8);
  uint64_t v172 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v170 = (char *)&countAndFlagsBits - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v174 = *(void *)(v7 - 8);
  uint64_t v175 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v173 = (char *)&countAndFlagsBits - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SeparatorStyle();
  uint64_t v168 = *(void *)(v9 - 8);
  uint64_t v169 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v165 = (char *)&countAndFlagsBits - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = type metadata accessor for FactItemHeroNumberView();
  uint64_t v164 = *(void *)(v166 - 8);
  MEMORY[0x270FA5388](v166);
  uint64_t v162 = (char *)&countAndFlagsBits - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  uint64_t v181 = *(void *)(v12 - 8);
  uint64_t v182 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v167 = (char *)&countAndFlagsBits - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v180 = (char *)&countAndFlagsBits - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v156 = (char *)&countAndFlagsBits - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v155 = (char *)&countAndFlagsBits - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for StatusIndicatorView.IndicatorType();
  uint64_t v153 = *(void *)(v20 - 8);
  uint64_t v154 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v152 = (uint64_t)&countAndFlagsBits - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for StatusIndicatorView();
  uint64_t v178 = *(void *)(v22 - 8);
  uint64_t v179 = v22;
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v159 = v24;
  uint64_t v160 = (char *)&countAndFlagsBits - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v184 = (char *)&countAndFlagsBits - v25;
  uint64_t v151 = type metadata accessor for SnippetHeaderView();
  uint64_t v26 = MEMORY[0x270FA5388](v151);
  uint64_t v149 = (char *)&countAndFlagsBits - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v150 = (uint64_t)&countAndFlagsBits - v28;
  uint64_t v29 = type metadata accessor for Font.TextStyle();
  uint64_t v176 = *(void *)(v29 - 8);
  uint64_t v177 = v29;
  MEMORY[0x270FA5388](v29);
  long long v183 = (char *)&countAndFlagsBits - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v32 = MEMORY[0x270FA5388](v31 - 8);
  uint64_t v148 = (uint64_t)&countAndFlagsBits - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v35 = (char *)&countAndFlagsBits - v34;
  uint64_t v36 = type metadata accessor for SpeakableString();
  uint64_t v147 = *(void *)(v36 - 8);
  uint64_t v37 = MEMORY[0x270FA5388](v36);
  Swift::String v39 = (char *)&countAndFlagsBits - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  uint64_t v41 = (char *)&countAndFlagsBits - v40;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v42 - 8);
  char v44 = (char *)&countAndFlagsBits - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for AppPunchout();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v186 = v45;
  uint64_t v187 = v46;
  uint64_t v47 = MEMORY[0x270FA5388](v45);
  uint64_t v157 = v48;
  uint64_t v158 = (char *)&countAndFlagsBits - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v47);
  uint64_t v185 = (char *)&countAndFlagsBits - v49;
  char v50 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  if (*(unsigned char *)(v192 + v50[15]) != 1)
  {
    outlined init with copy of SpecificMedCompletedLogModel(v192, (uint64_t)&countAndFlagsBits - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SpecificMedCompletedLogSnippet);
    unint64_t v59 = (*(unsigned __int8 *)(v190 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v190 + 80);
    uint64_t v60 = swift_allocObject();
    outlined init with take of SpecificMedCompletedLogSnippet((uint64_t)&countAndFlagsBits - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v60 + v59, (uint64_t (*)(void))type metadata accessor for SpecificMedCompletedLogSnippet);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(AnyView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(AnyView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(AnyView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>);
    SnippetBody.init(content:)();
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type SnippetBody<TupleView<(AnyView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>> and conformance SnippetBody<A>, &demangling cache variable for type metadata for SnippetBody<TupleView<(AnyView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)>>);
    uint64_t v61 = v189;
    uint64_t v58 = View.eraseToAnyView()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v188 + 8))(v3, v61);
    goto LABEL_8;
  }
  uint64_t v188 = v4;
  uint64_t v189 = (uint64_t)&countAndFlagsBits - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = (uint64_t *)(v192 + v50[18]);
  uint64_t v52 = (void *)v51[1];
  if (!v52 || (v53 = (uint64_t *)(v192 + v50[17]), (uint64_t v54 = (void *)v53[1]) == 0))
  {
LABEL_6:
    uint64_t result = AnyView.init<A>(_:)();
    uint64_t v58 = result;
LABEL_8:
    *uint64_t v191 = v58;
    return result;
  }
  uint64_t v145 = *v51;
  uint64_t v146 = v54;
  uint64_t v144 = *v53;
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v192 + v50[8], (uint64_t)v44, &demangling cache variable for type metadata for AppPunchout?);
  uint64_t v56 = v186;
  uint64_t v55 = v187;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48))(v44, 1, v186) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v44, &demangling cache variable for type metadata for AppPunchout?);
    goto LABEL_6;
  }
  uint64_t v142 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
  uint64_t v143 = v55 + 32;
  v142(v185, v44, v56);
  if (*(void *)(v192 + 32))
  {
    swift_bridgeObjectRetain();
    uint64_t v62 = v146;
    swift_bridgeObjectRetain();
    Swift::String v63 = String.firstLetterCapitalized()();
    uint64_t countAndFlagsBits = v63._countAndFlagsBits;
    object = v63._object;
    uint64_t v65 = v151;
LABEL_11:
    (*(void (**)(char *, void, uint64_t))(v176 + 104))(v183, *MEMORY[0x263F1A6E0], v177);
    uint64_t v66 = (unsigned char *)v192;
    uint64_t v67 = v148;
    outlined init with copy of Environment<ColorSchemeContrast>.Content(v192 + v50[19], v148, &demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v68 = (uint64_t)v149;
    uint64_t v69 = (uint64_t *)&v149[*(int *)(v65 + 20)];
    *uint64_t v69 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    swift_storeEnumTagMultiPayload();
    uint64_t v70 = (uint64_t *)(v68 + *(int *)(v65 + 24));
    uint64_t *v70 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content);
    swift_storeEnumTagMultiPayload();
    outlined init with take of SnippetHeaderModel?(v67, v68);
    uint64_t v71 = v150;
    outlined init with take of SpecificMedCompletedLogSnippet(v68, v150, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_4(&lazy protocol witness table cache variable for type SnippetHeaderView and conformance SnippetHeaderView, (void (*)(uint64_t))type metadata accessor for SnippetHeaderView);
    uint64_t v155 = (char *)View.eraseToAnyView()();
    _s10WellnessUI28SpecificMedCompletedLogModelVWOhTm_0(v71, (uint64_t (*)(void))type metadata accessor for SnippetHeaderView);
    if (*v66) {
      uint64_t v72 = v145;
    }
    else {
      uint64_t v72 = v144;
    }
    if (*v66) {
      __n128 v73 = v52;
    }
    else {
      __n128 v73 = v62;
    }
    if (*v66) {
      __n128 v74 = (unsigned int *)MEMORY[0x263F77778];
    }
    else {
      __n128 v74 = (unsigned int *)MEMORY[0x263F77788];
    }
    swift_bridgeObjectRelease();
    uint64_t v210 = MEMORY[0x263F8D310];
    uint64_t v211 = MEMORY[0x263F779A0];
    uint64_t v208 = v72;
    uint64_t v209 = v73;
    (*(void (**)(uint64_t, void, uint64_t))(v153 + 104))(v152, *v74, v154);
    StatusIndicatorView.init(message:type:showIndicator:)();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v75._uint64_t countAndFlagsBits = 0;
    v75._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v75);
    v76._uint64_t countAndFlagsBits = countAndFlagsBits;
    v76._object = object;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v76);
    swift_bridgeObjectRelease();
    v77._uint64_t countAndFlagsBits = 0;
    v77._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v77);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v78 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v80 = v79;
    char v82 = v81 & 1;
    uint64_t v83 = *MEMORY[0x263F1A618];
    uint64_t v84 = type metadata accessor for Font.Design();
    uint64_t v85 = *(void *)(v84 - 8);
    uint64_t v86 = (uint64_t)v156;
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 104))(v156, v83, v84);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v85 + 56))(v86, 0, 1, v84);
    static Font.system(_:design:weight:)();
    outlined destroy of Font.Design?(v86, &demangling cache variable for type metadata for Font.Design?);
    uint64_t v87 = Text.font(_:)();
    uint64_t v89 = v88;
    LOBYTE(v84) = v90;
    swift_release();
    outlined consume of Text.Storage(v78, v80, v82);
    swift_bridgeObjectRelease();
    uint64_t v91 = Text.bold()();
    uint64_t v93 = v92;
    uint64_t v95 = v94;
    LODWORD(v78) = v96 & 1;
    outlined consume of Text.Storage(v87, v89, v84 & 1);
    swift_bridgeObjectRelease();
    uint64_t v97 = MEMORY[0x263F1A838];
    uint64_t v210 = MEMORY[0x263F1A838];
    uint64_t v211 = MEMORY[0x263F77350];
    uint64_t v98 = swift_allocObject();
    uint64_t v208 = v98;
    *(void *)(v98 + 16) = v91;
    *(void *)(v98 + 24) = v93;
    uint64_t v99 = v91;
    uint64_t v152 = v93;
    uint64_t v153 = v91;
    LODWORD(v156) = v78;
    *(unsigned char *)(v98 + 32) = v78;
    *(void *)(v98 + 40) = v95;
    uint64_t v154 = v95;
    uint64_t v207 = 0;
    long long v205 = 0u;
    long long v206 = 0u;
    uint64_t v204 = 0;
    long long v202 = 0u;
    long long v203 = 0u;
    uint64_t v100 = v192 + *(int *)(v161 + 24);
    uint64_t v101 = *(void *)v100;
    uint64_t v102 = *(void *)(v100 + 8);
    LOBYTE(v87) = *(unsigned char *)(v100 + 16);
    uint64_t v103 = *(void *)(v100 + 24);
    uint64_t v200 = v97;
    uint64_t v201 = MEMORY[0x263F77350];
    uint64_t v104 = swift_allocObject();
    uint64_t v198 = 0;
    uint64_t v199 = v104;
    *(void *)(v104 + 16) = v101;
    *(void *)(v104 + 24) = v102;
    *(unsigned char *)(v104 + 32) = v87;
    *(void *)(v104 + 40) = v103;
    long long v196 = 0u;
    long long v197 = 0u;
    uint64_t v195 = 0;
    long long v193 = 0u;
    long long v194 = 0u;
    outlined copy of Text.Storage(v99, v93, v78);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v101, v102, v87);
    swift_bridgeObjectRetain();
    uint64_t v105 = v162;
    FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
    uint64_t v107 = v168;
    uint64_t v106 = v169;
    BOOL v108 = v165;
    (*(void (**)(char *, void, uint64_t))(v168 + 104))(v165, *MEMORY[0x263F76988], v169);
    _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_4(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
    BOOL v109 = v180;
    uint64_t v110 = v166;
    View.separators(_:isOverride:)();
    (*(void (**)(char *, uint64_t))(v107 + 8))(v108, v106);
    (*(void (**)(char *, uint64_t))(v164 + 8))(v105, v110);
    uint64_t v112 = v181;
    uint64_t v111 = v182;
    char v113 = v167;
    (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v167, v109, v182);
    uint64_t v114 = v179;
    uint64_t v115 = v178;
    char v116 = v160;
    (*(void (**)(char *, char *, uint64_t))(v178 + 16))(v160, v184, v179);
    unint64_t v117 = (*(unsigned __int8 *)(v112 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80);
    unint64_t v118 = (v163 + *(unsigned __int8 *)(v115 + 80) + v117) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80);
    uint64_t v119 = swift_allocObject();
    *(void *)(v119 + 16) = v155;
    (*(void (**)(unint64_t, char *, uint64_t))(v112 + 32))(v119 + v117, v113, v111);
    uint64_t v120 = v178;
    (*(void (**)(unint64_t, char *, uint64_t))(v178 + 32))(v119 + v118, v116, v114);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>);
    lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>);
    char v121 = v170;
    ComponentStack.init(content:)();
    uint64_t v122 = v189;
    outlined init with copy of SpecificMedCompletedLogModel(v192, v189, (uint64_t (*)(void))type metadata accessor for SpecificMedCompletedLogSnippet);
    uint64_t v123 = v186;
    uint64_t v124 = v187;
    char v125 = v158;
    (*(void (**)(char *, char *, uint64_t))(v187 + 16))(v158, v185, v186);
    unint64_t v126 = (*(unsigned __int8 *)(v190 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v190 + 80);
    unint64_t v127 = (v188 + *(unsigned __int8 *)(v124 + 80) + v126) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80);
    uint64_t v128 = swift_allocObject();
    outlined init with take of SpecificMedCompletedLogSnippet(v122, v128 + v126, (uint64_t (*)(void))type metadata accessor for SpecificMedCompletedLogSnippet);
    v142((char *)(v128 + v127), v125, v123);
    uint64_t v129 = lazy protocol witness table accessor for type TupleView<(SashStandardView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView)>>);
    uint64_t v130 = v172;
    uint64_t v131 = v173;
    View.componentTapped(isNavigation:perform:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v171 + 8))(v121, v130);
    uint64_t v208 = v130;
    uint64_t v209 = (void *)v129;
    swift_getOpaqueTypeConformance2();
    uint64_t v132 = v175;
    uint64_t v58 = View.eraseToAnyView()();
    swift_release();
    outlined consume of Text.Storage(v153, v152, (char)v156);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v174 + 8))(v131, v132);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v180, v182);
    (*(void (**)(char *, uint64_t))(v120 + 8))(v184, v179);
    (*(void (**)(char *, uint64_t))(v176 + 8))(v183, v177);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v124 + 8))(v185, v123);
    goto LABEL_8;
  }
  uint64_t v133 = v187;
  if (!*(void *)(v192 + 48))
  {
LABEL_24:
    uint64_t v58 = AnyView.init<A>(_:)();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v133 + 8))(v185, v56);
    goto LABEL_8;
  }
  outlined init with copy of Environment<ColorSchemeContrast>.Content(v192 + v50[19], (uint64_t)v35, &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v134 = type metadata accessor for SnippetHeaderModel();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v134 - 8) + 48))(v35, 1, v134) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of Font.Design?((uint64_t)v35, &demangling cache variable for type metadata for SnippetHeaderModel?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  uint64_t v135 = v147;
  (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v39, v35, v36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s10WellnessUI28SpecificMedCompletedLogModelVWOhTm_0((uint64_t)v35, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v135 + 32))(v41, v39, v36);
  if (*(void *)(v192 + 48))
  {
    Swift::String v136 = String.firstLetterCapitalized()();
    uint64_t countAndFlagsBits = v136._countAndFlagsBits;
    uint64_t v208 = 32;
    uint64_t v209 = (void *)0xE100000000000000;
    v137._uint64_t countAndFlagsBits = SpeakableString.print.getter();
    String.append(_:)(v137);
    swift_bridgeObjectRelease();
    uint64_t v139 = v208;
    uint64_t v138 = v209;
    uint64_t v208 = countAndFlagsBits;
    uint64_t v209 = v136._object;
    swift_bridgeObjectRetain();
    v140._uint64_t countAndFlagsBits = v139;
    v140._object = v138;
    String.append(_:)(v140);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    object = v209;
    uint64_t countAndFlagsBits = v208;
    (*(void (**)(char *, uint64_t))(v135 + 8))(v41, v36);
    uint64_t v65 = v151;
    uint64_t v62 = v146;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in SpecificMedCompletedLogSnippet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a1;
  uint64_t v38 = type metadata accessor for StatusIndicatorView();
  uint64_t v33 = *(void *)(v38 - 8);
  uint64_t v5 = v33;
  uint64_t v6 = MEMORY[0x270FA5388](v38);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v8;
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v12 = v34;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18((char *)&v29 - v16, a2, v11);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v31 = v10;
  uint64_t v20 = v38;
  v19(v10, v35, v38);
  uint64_t v32 = v15;
  v18(v15, (uint64_t)v17, v11);
  v19(v8, (uint64_t)v10, v20);
  uint64_t v21 = v36;
  *(void *)uint64_t v36 = v37;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyView, <<opaque return type of View.separators(_:isOverride:)>>.0, StatusIndicatorView));
  v18(&v21[*(int *)(v22 + 48)], (uint64_t)v15, v11);
  uint64_t v23 = &v21[*(int *)(v22 + 64)];
  uint64_t v24 = v30;
  uint64_t v25 = v38;
  v19(v23, (uint64_t)v30, v38);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v33 + 8);
  swift_retain_n();
  v26(v31, v25);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v34 + 8);
  v27(v17, v11);
  v26(v24, v25);
  v27(v32, v11);
  return swift_release();
}

void closure #2 in SpecificMedCompletedLogSnippet.body.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + *(int *)(type metadata accessor for SpecificMedCompletedLogSnippet() + 28));
  if (v1)
  {
    id v2 = v1;
    dispatch thunk of Context.perform(appPunchout:)();
  }
  else
  {
    type metadata accessor for Context();
    _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_4(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t closure #3 in SpecificMedCompletedLogSnippet.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v84 = a1;
  uint64_t v101 = a2;
  uint64_t v3 = type metadata accessor for StatusIndicatorView.IndicatorType();
  uint64_t v98 = *(void *)(v3 - 8);
  uint64_t v99 = (void (*)(char *, char *, uint64_t))v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v97 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for StatusIndicatorView();
  uint64_t v100 = *(void *)(v102 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v102);
  uint64_t v107 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v106 = (char *)&v83 - v7;
  uint64_t v88 = type metadata accessor for SpecificMedCompletedLogSnippet();
  uint64_t v90 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v91 = v8;
  uint64_t v92 = (uint64_t)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FactItemHeroNumberView();
  uint64_t v94 = *(void *)(v9 - 8);
  uint64_t v95 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v93 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v105 = *(void *)(v96 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v96);
  uint64_t v104 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v89 = (char *)&v83 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v103 = (char *)&v83 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color?);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v87 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v83 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = v23;
  uint64_t v24 = type metadata accessor for SashStandard.Title();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char **)((char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = type metadata accessor for SashStandard();
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v29 = type metadata accessor for SashStandardView();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v85 = v29;
  uint64_t v86 = v30;
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v83 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = (void *)(a1 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 52));
  uint64_t v34 = v33[1];
  void *v27 = *v33;
  v27[1] = v34;
  (*(void (**)(void *, void, uint64_t))(v25 + 104))(v27, *MEMORY[0x263F767F8], v24);
  uint64_t v35 = type metadata accessor for VisualProperty();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v23, 1, 1, v35);
  uint64_t v36 = type metadata accessor for Color();
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56);
  v37(v20, 1, 1, v36);
  v37(v87, 1, 1, v36);
  uint64_t v125 = 0;
  long long v123 = 0u;
  long long v124 = 0u;
  swift_bridgeObjectRetain();
  SashStandard.init(title:thumbnail:titleColor:backgroundColor:action:componentName:showOnWatch:)();
  SashStandardView.init(model:)();
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type SashStandardView and conformance SashStandardView, MEMORY[0x263F776C0]);
  uint64_t v38 = v85;
  uint64_t v87 = (char *)View.eraseToAnyView()();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v32, v38);
  uint64_t v39 = v84;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v40 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v42 = v41;
  LOBYTE(v36) = v43;
  uint64_t v45 = v44;
  *((void *)&v124 + 1) = MEMORY[0x263F1A838];
  uint64_t v125 = MEMORY[0x263F77350];
  uint64_t v46 = MEMORY[0x263F1A838];
  uint64_t v47 = MEMORY[0x263F77350];
  uint64_t v48 = swift_allocObject();
  *(void *)&long long v123 = v48;
  *(void *)(v48 + 16) = v40;
  *(void *)(v48 + 24) = v42;
  *(unsigned char *)(v48 + 32) = v36 & 1;
  *(void *)(v48 + 40) = v45;
  uint64_t v122 = 0;
  long long v120 = 0u;
  long long v121 = 0u;
  uint64_t v49 = v88;
  uint64_t v50 = v39 + *(int *)(v88 + 20);
  uint64_t v51 = *(void *)v50;
  uint64_t v52 = *(void *)(v50 + 8);
  LOBYTE(v36) = *(unsigned char *)(v50 + 16);
  uint64_t v53 = *(void *)(v50 + 24);
  uint64_t v118 = v46;
  uint64_t v119 = v47;
  uint64_t v54 = swift_allocObject();
  *(void *)(v54 + 16) = v51;
  *(void *)(v54 + 24) = v52;
  *(unsigned char *)(v54 + 32) = v36;
  *(void *)(v54 + 40) = v53;
  uint64_t v55 = v39 + *(int *)(v49 + 24);
  uint64_t v56 = *(void *)v55;
  uint64_t v57 = *(void *)(v55 + 8);
  char v58 = *(unsigned char *)(v55 + 16);
  uint64_t v59 = *(void *)(v55 + 24);
  uint64_t v115 = MEMORY[0x263F1A838];
  uint64_t v117 = v54;
  uint64_t v116 = MEMORY[0x263F77350];
  uint64_t v60 = swift_allocObject();
  uint64_t v114 = v60;
  *(void *)(v60 + 16) = v56;
  *(void *)(v60 + 24) = v57;
  *(unsigned char *)(v60 + 32) = v58;
  *(void *)(v60 + 40) = v59;
  uint64_t v113 = 0;
  long long v111 = 0u;
  long long v112 = 0u;
  uint64_t v110 = 0;
  long long v108 = 0u;
  long long v109 = 0u;
  outlined copy of Text.Storage(v51, v52, v36);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v56, v57, v58);
  swift_bridgeObjectRetain();
  uint64_t v61 = v93;
  FactItemHeroNumberView.init(number:text1:text2:text3:text4:text5:)();
  uint64_t v62 = v92;
  outlined init with copy of SpecificMedCompletedLogModel(v39, v92, (uint64_t (*)(void))type metadata accessor for SpecificMedCompletedLogSnippet);
  unint64_t v63 = (*(unsigned __int8 *)(v90 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
  uint64_t v64 = swift_allocObject();
  outlined init with take of SpecificMedCompletedLogSnippet(v62, v64 + v63, (uint64_t (*)(void))type metadata accessor for SpecificMedCompletedLogSnippet);
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_4(&lazy protocol witness table cache variable for type FactItemHeroNumberView and conformance FactItemHeroNumberView, MEMORY[0x263F77828]);
  uint64_t v65 = v89;
  uint64_t v66 = v95;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v61, v66);
  uint64_t v67 = v105;
  uint64_t v68 = v103;
  uint64_t v69 = v65;
  uint64_t v70 = v96;
  (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v103, v69, v96);
  *((void *)&v124 + 1) = MEMORY[0x263F8D310];
  uint64_t v125 = MEMORY[0x263F779A0];
  *(void *)&long long v123 = 0x646567676F4CLL;
  *((void *)&v123 + 1) = 0xE600000000000000;
  (*(void (**)(char *, void, void))(v98 + 104))(v97, *MEMORY[0x263F77778], v99);
  uint64_t v71 = v106;
  StatusIndicatorView.init(message:type:showIndicator:)();
  uint64_t v99 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  uint64_t v72 = v104;
  v99(v104, v68, v70);
  uint64_t v73 = v100;
  uint64_t v98 = *(void *)(v100 + 16);
  __n128 v74 = v71;
  uint64_t v75 = v102;
  ((void (*)(char *, char *, uint64_t))v98)(v107, v74, v102);
  Swift::String v76 = v101;
  *(void *)uint64_t v101 = v87;
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyView, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, StatusIndicatorView));
  v99(&v76[*(int *)(v77 + 48)], v72, v70);
  uint64_t v78 = &v76[*(int *)(v77 + 64)];
  uint64_t v79 = v107;
  ((void (*)(char *, char *, uint64_t))v98)(v78, v107, v75);
  uint64_t v80 = *(void (**)(char *, uint64_t))(v73 + 8);
  swift_retain_n();
  v80(v106, v75);
  char v81 = *(void (**)(char *, uint64_t))(v105 + 8);
  v81(v103, v70);
  swift_release();
  v80(v79, v75);
  v81(v104, v70);
  return swift_release();
}

uint64_t outlined init with copy of SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #3 in SpecificMedCompletedLogSnippet.body.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SpecificMedCompletedLogSnippet() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #3 in SpecificMedCompletedLogSnippet.body.getter(v4, a1);
}

uint64_t closure #1 in closure #3 in SpecificMedCompletedLogSnippet.body.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)(a1 + *(int *)(type metadata accessor for SpecificMedCompletedLogSnippet() + 28));
  if (v5)
  {
    uint64_t v6 = type metadata accessor for SpecificMedCompletedLogModel();
    outlined init with copy of Environment<ColorSchemeContrast>.Content(a1 + *(int *)(v6 + 32), (uint64_t)v4, &demangling cache variable for type metadata for AppPunchout?);
    uint64_t v7 = type metadata accessor for AppPunchout();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v7) != 1)
    {
      id v9 = v5;
      dispatch thunk of Context.perform(appPunchout:)();

      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v4, v7);
    }
    __break(1u);
  }
  type metadata accessor for Context();
  _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_4(&lazy protocol witness table cache variable for type Context and conformance Context, MEMORY[0x263F77978]);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t outlined init with take of SpecificMedCompletedLogSnippet(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s10WellnessUI28SpecificMedCompletedLogModelVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_26186AA28()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_26186AA6C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for StatusIndicatorView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return MEMORY[0x270FA0238](v0, v10, v11);
}

uint64_t partial apply for closure #1 in SpecificMedCompletedLogSnippet.body.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.separators(_:isOverride:)>>.0)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for StatusIndicatorView() - 8);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return closure #1 in SpecificMedCompletedLogSnippet.body.getter(v7, v1 + v4, v8, a1);
}

uint64_t sub_26186ACA4()
{
  uint64_t v1 = (int *)type metadata accessor for SpecificMedCompletedLogSnippet();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v17 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v16 = *(void *)(v5 + 64);
  uint64_t v7 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for SpecificMedCompletedLogModel();
  uint64_t v9 = v0 + v3 + *(int *)(v8 + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v7 + *(int *)(v8 + 76);
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v10, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = v2 | v6 | 7;
  uint64_t v14 = (v3 + v17 + v6) & ~v6;
  outlined consume of Text.Storage(*(void *)(v7 + v1[5]), *(void *)(v7 + v1[5] + 8), *(unsigned char *)(v7 + v1[5] + 16));
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(*(void *)(v7 + v1[6]), *(void *)(v7 + v1[6] + 8), *(unsigned char *)(v7 + v1[6] + 16));
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v14, v4);

  return MEMORY[0x270FA0238](v0, v14 + v16, v13);
}

void partial apply for closure #2 in SpecificMedCompletedLogSnippet.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for SpecificMedCompletedLogSnippet() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for AppPunchout();

  closure #2 in SpecificMedCompletedLogSnippet.body.getter(v0 + v2);
}

uint64_t associated type witness table accessor for View.Body : View in SpecificMedCompletedLogSnippet()
{
  return swift_getOpaqueTypeConformance2();
}

void *initializeBufferWithCopyOfBuffer for SpecificMedCompletedLogSnippet(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    uint64_t v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    uint64_t v8 = a2[6];
    a1[5] = a2[5];
    a1[6] = v8;
    uint64_t v9 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
    uint64_t v10 = v9[8];
    __dst = (char *)v4 + v10;
    uint64_t v11 = (char *)a2 + v10;
    uint64_t v12 = type metadata accessor for AppPunchout();
    uint64_t v13 = *(void *)(v12 - 8);
    char v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v81(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(__dst, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v16 = v9[9];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (char *)a2 + v16;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = v9[10];
    uint64_t v20 = (void *)((char *)v4 + v19);
    uint64_t v21 = (void *)((char *)a2 + v19);
    uint64_t v82 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v82;
    uint64_t v22 = v9[11];
    uint64_t v23 = (void *)((char *)v4 + v22);
    uint64_t v24 = (void *)((char *)a2 + v22);
    uint64_t v80 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v80;
    uint64_t v25 = v9[12];
    uint64_t v26 = (void *)((char *)v4 + v25);
    uint64_t v27 = (void *)((char *)a2 + v25);
    uint64_t v28 = v27[1];
    void *v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = v9[13];
    uint64_t v30 = (void *)((char *)v4 + v29);
    uint64_t v31 = (void *)((char *)a2 + v29);
    uint64_t v32 = v31[1];
    void *v30 = *v31;
    v30[1] = v32;
    *((unsigned char *)v4 + v9[14]) = *((unsigned char *)a2 + v9[14]);
    *((unsigned char *)v4 + v9[15]) = *((unsigned char *)a2 + v9[15]);
    uint64_t v33 = v9[16];
    uint64_t v34 = (void *)((char *)v4 + v33);
    uint64_t v35 = (void *)((char *)a2 + v33);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = v9[17];
    uint64_t v38 = (void *)((char *)v4 + v37);
    uint64_t v39 = (void *)((char *)a2 + v37);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    uint64_t v41 = v9[18];
    uint64_t v42 = (void *)((char *)v4 + v41);
    char v43 = (void *)((char *)a2 + v41);
    uint64_t v44 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v44;
    uint64_t v45 = v9[19];
    __dsta = (char *)v4 + v45;
    uint64_t v46 = (char *)a2 + v45;
    uint64_t v47 = type metadata accessor for SnippetHeaderModel();
    uint64_t v78 = *(void *)(v47 - 8);
    uint64_t v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v79(v46, 1, v47))
    {
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(__dsta, v46, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      uint64_t v49 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(__dsta, v46, v49);
      uint64_t v50 = *(int *)(v47 + 20);
      uint64_t v51 = &__dsta[v50];
      uint64_t v52 = &v46[v50];
      uint64_t v53 = *((void *)v52 + 1);
      *(void *)uint64_t v51 = *(void *)v52;
      *((void *)v51 + 1) = v53;
      uint64_t v54 = *(int *)(v47 + 24);
      uint64_t v55 = &__dsta[v54];
      uint64_t v56 = &v46[v54];
      uint64_t v57 = *((void *)v56 + 1);
      *(void *)uint64_t v55 = *(void *)v56;
      *((void *)v55 + 1) = v57;
      char v58 = *(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v58(__dsta, 0, 1, v47);
    }
    uint64_t v59 = a3[5];
    uint64_t v60 = (char *)v4 + v59;
    uint64_t v61 = (char *)a2 + v59;
    uint64_t v62 = *(void *)((char *)a2 + v59);
    uint64_t v63 = *(void *)((char *)a2 + v59 + 8);
    char v64 = *((unsigned char *)a2 + v59 + 16);
    outlined copy of Text.Storage(v62, v63, v64);
    *(void *)uint64_t v60 = v62;
    *((void *)v60 + 1) = v63;
    v60[16] = v64;
    *((void *)v60 + 3) = *((void *)v61 + 3);
    uint64_t v65 = a3[6];
    uint64_t v66 = (char *)v4 + v65;
    uint64_t v67 = (char *)a2 + v65;
    uint64_t v68 = *(void *)((char *)a2 + v65);
    uint64_t v69 = *(void *)((char *)a2 + v65 + 8);
    char v70 = *((unsigned char *)a2 + v65 + 16);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v68, v69, v70);
    *(void *)uint64_t v66 = v68;
    *((void *)v66 + 1) = v69;
    v66[16] = v70;
    *((void *)v66 + 3) = *((void *)v67 + 3);
    uint64_t v71 = a3[7];
    uint64_t v72 = (void *)((char *)v4 + v71);
    uint64_t v73 = (char *)a2 + v71;
    uint64_t v75 = *(void **)v73;
    uint64_t v74 = *((void *)v73 + 1);
    *uint64_t v72 = v75;
    v72[1] = v74;
    swift_bridgeObjectRetain();
    id v76 = v75;
  }
  return v4;
}

void destroy for SpecificMedCompletedLogSnippet(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for SpecificMedCompletedLogModel();
  uint64_t v5 = a1 + *(int *)(v4 + 32);
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + *(int *)(v4 + 76);
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v8, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(void *)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8), *(unsigned char *)(a1 + a2[5] + 16));
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8), *(unsigned char *)(a1 + a2[6] + 16));
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void **)(a1 + a2[7]);
}

uint64_t initializeWithCopy for SpecificMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  uint64_t v9 = v8[8];
  __dst = (void *)(a1 + v9);
  uint64_t v10 = (const void *)(a2 + v9);
  uint64_t v11 = type metadata accessor for AppPunchout();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v79 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v79(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(__dst, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  uint64_t v14 = v8[9];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = v8[10];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v80 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v80;
  uint64_t v20 = v8[11];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v78 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v78;
  uint64_t v23 = v8[12];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = v25[1];
  void *v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = v8[13];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = v29[1];
  void *v28 = *v29;
  v28[1] = v30;
  *(unsigned char *)(a1 + v8[14]) = *(unsigned char *)(a2 + v8[14]);
  *(unsigned char *)(a1 + v8[15]) = *(unsigned char *)(a2 + v8[15]);
  uint64_t v31 = v8[16];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  uint64_t v34 = v33[1];
  void *v32 = *v33;
  v32[1] = v34;
  uint64_t v35 = v8[17];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  uint64_t v38 = v37[1];
  void *v36 = *v37;
  v36[1] = v38;
  uint64_t v39 = v8[18];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (void *)(a2 + v39);
  uint64_t v42 = v41[1];
  *uint64_t v40 = *v41;
  v40[1] = v42;
  uint64_t v43 = v8[19];
  __dsta = (char *)(a1 + v43);
  uint64_t v44 = (char *)(a2 + v43);
  uint64_t v45 = type metadata accessor for SnippetHeaderModel();
  uint64_t v76 = *(void *)(v45 - 8);
  uint64_t v77 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v77(v44, 1, v45))
  {
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(__dsta, v44, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    uint64_t v47 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(__dsta, v44, v47);
    uint64_t v48 = *(int *)(v45 + 20);
    uint64_t v49 = &__dsta[v48];
    uint64_t v50 = &v44[v48];
    uint64_t v51 = *((void *)v50 + 1);
    *(void *)uint64_t v49 = *(void *)v50;
    *((void *)v49 + 1) = v51;
    uint64_t v52 = *(int *)(v45 + 24);
    uint64_t v53 = &__dsta[v52];
    uint64_t v54 = &v44[v52];
    uint64_t v55 = *((void *)v54 + 1);
    *(void *)uint64_t v53 = *(void *)v54;
    *((void *)v53 + 1) = v55;
    uint64_t v56 = *(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v56(__dsta, 0, 1, v45);
  }
  uint64_t v57 = a3[5];
  uint64_t v58 = a1 + v57;
  uint64_t v59 = a2 + v57;
  uint64_t v60 = *(void *)(a2 + v57);
  uint64_t v61 = *(void *)(a2 + v57 + 8);
  char v62 = *(unsigned char *)(a2 + v57 + 16);
  outlined copy of Text.Storage(v60, v61, v62);
  *(void *)uint64_t v58 = v60;
  *(void *)(v58 + 8) = v61;
  *(unsigned char *)(v58 + 16) = v62;
  *(void *)(v58 + 24) = *(void *)(v59 + 24);
  uint64_t v63 = a3[6];
  uint64_t v64 = a1 + v63;
  uint64_t v65 = a2 + v63;
  uint64_t v66 = *(void *)(a2 + v63);
  uint64_t v67 = *(void *)(a2 + v63 + 8);
  char v68 = *(unsigned char *)(a2 + v63 + 16);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v66, v67, v68);
  *(void *)uint64_t v64 = v66;
  *(void *)(v64 + 8) = v67;
  *(unsigned char *)(v64 + 16) = v68;
  *(void *)(v64 + 24) = *(void *)(v65 + 24);
  uint64_t v69 = a3[7];
  char v70 = (void *)(a1 + v69);
  uint64_t v71 = a2 + v69;
  uint64_t v73 = *(void **)v71;
  uint64_t v72 = *(void *)(v71 + 8);
  void *v70 = v73;
  v70[1] = v72;
  swift_bridgeObjectRetain();
  id v74 = v73;
  return a1;
}

uint64_t assignWithCopy for SpecificMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  uint64_t v6 = v5[8];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for AppPunchout();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[9];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  *(unsigned char *)(v16 + 8) = *((unsigned char *)v17 + 8);
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = v5[10];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = v5[11];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = v5[12];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  void *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = v5[13];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  void *v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v5[14]) = *(unsigned char *)(a2 + v5[14]);
  *(unsigned char *)(a1 + v5[15]) = *(unsigned char *)(a2 + v5[15]);
  uint64_t v31 = v5[16];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  void *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = v5[17];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  *uint64_t v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = v5[18];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (void *)(a2 + v37);
  *uint64_t v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = v5[19];
  uint64_t v41 = (char *)(a1 + v40);
  uint64_t v42 = (char *)(a2 + v40);
  uint64_t v43 = type metadata accessor for SnippetHeaderModel();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
  int v46 = v45(v41, 1, v43);
  int v47 = v45(v42, 1, v43);
  if (!v46)
  {
    if (!v47)
    {
      uint64_t v82 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 24))(v41, v42, v82);
      uint64_t v83 = *(int *)(v43 + 20);
      uint64_t v84 = &v41[v83];
      uint64_t v85 = &v42[v83];
      *(void *)uint64_t v84 = *(void *)v85;
      *((void *)v84 + 1) = *((void *)v85 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v86 = *(int *)(v43 + 24);
      uint64_t v87 = &v41[v86];
      uint64_t v88 = &v42[v86];
      *(void *)uint64_t v87 = *(void *)v88;
      *((void *)v87 + 1) = *((void *)v88 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    _s10WellnessUI28SpecificMedCompletedLogModelVWOhTm_0((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v47)
  {
LABEL_12:
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v41, v42, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v48 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 16))(v41, v42, v48);
  uint64_t v49 = *(int *)(v43 + 20);
  uint64_t v50 = &v41[v49];
  uint64_t v51 = &v42[v49];
  *(void *)uint64_t v50 = *(void *)v51;
  *((void *)v50 + 1) = *((void *)v51 + 1);
  uint64_t v52 = *(int *)(v43 + 24);
  uint64_t v53 = &v41[v52];
  uint64_t v54 = &v42[v52];
  *(void *)uint64_t v53 = *(void *)v54;
  *((void *)v53 + 1) = *((void *)v54 + 1);
  uint64_t v55 = *(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55(v41, 0, 1, v43);
LABEL_13:
  uint64_t v57 = a3[5];
  uint64_t v58 = a1 + v57;
  uint64_t v59 = a2 + v57;
  uint64_t v60 = *(void *)(a2 + v57);
  uint64_t v61 = *(void *)(a2 + v57 + 8);
  char v62 = *(unsigned char *)(a2 + v57 + 16);
  outlined copy of Text.Storage(v60, v61, v62);
  uint64_t v63 = *(void *)v58;
  uint64_t v64 = *(void *)(v58 + 8);
  char v65 = *(unsigned char *)(v58 + 16);
  *(void *)uint64_t v58 = v60;
  *(void *)(v58 + 8) = v61;
  *(unsigned char *)(v58 + 16) = v62;
  outlined consume of Text.Storage(v63, v64, v65);
  *(void *)(v58 + 24) = *(void *)(v59 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v66 = a3[6];
  uint64_t v67 = a1 + v66;
  uint64_t v68 = a2 + v66;
  uint64_t v69 = *(void *)(a2 + v66);
  uint64_t v70 = *(void *)(a2 + v66 + 8);
  char v71 = *(unsigned char *)(a2 + v66 + 16);
  outlined copy of Text.Storage(v69, v70, v71);
  uint64_t v72 = *(void *)v67;
  uint64_t v73 = *(void *)(v67 + 8);
  char v74 = *(unsigned char *)(v67 + 16);
  *(void *)uint64_t v67 = v69;
  *(void *)(v67 + 8) = v70;
  *(unsigned char *)(v67 + 16) = v71;
  outlined consume of Text.Storage(v72, v73, v74);
  *(void *)(v67 + 24) = *(void *)(v68 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v75 = a3[7];
  uint64_t v76 = (void *)(a1 + v75);
  uint64_t v77 = a2 + v75;
  uint64_t v78 = *(void **)(a1 + v75);
  uint64_t v79 = *(void **)v77;
  *uint64_t v76 = *(void *)v77;
  id v80 = v79;

  v76[1] = *(void *)(v77 + 8);
  return a1;
}

uint64_t initializeWithTake for SpecificMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  uint64_t v7 = v6[8];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for AppPunchout();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = v6[9];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(_OWORD *)(a1 + v6[10]) = *(_OWORD *)(a2 + v6[10]);
  *(_OWORD *)(a1 + v6[11]) = *(_OWORD *)(a2 + v6[11]);
  *(_OWORD *)(a1 + v6[12]) = *(_OWORD *)(a2 + v6[12]);
  *(_OWORD *)(a1 + v6[13]) = *(_OWORD *)(a2 + v6[13]);
  *(unsigned char *)(a1 + v6[14]) = *(unsigned char *)(a2 + v6[14]);
  *(unsigned char *)(a1 + v6[15]) = *(unsigned char *)(a2 + v6[15]);
  *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
  *(_OWORD *)(a1 + v6[17]) = *(_OWORD *)(a2 + v6[17]);
  *(_OWORD *)(a1 + v6[18]) = *(_OWORD *)(a2 + v6[18]);
  uint64_t v16 = v6[19];
  uint64_t v17 = (char *)(a1 + v16);
  uint64_t v18 = (char *)(a2 + v16);
  uint64_t v19 = type metadata accessor for SnippetHeaderModel();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    uint64_t v22 = type metadata accessor for SpeakableString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v17, v18, v22);
    *(_OWORD *)&v17[*(int *)(v19 + 20)] = *(_OWORD *)&v18[*(int *)(v19 + 20)];
    *(_OWORD *)&v17[*(int *)(v19 + 24)] = *(_OWORD *)&v18[*(int *)(v19 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v23 = a3[5];
  uint64_t v24 = a3[6];
  long long v25 = *(_OWORD *)(a2 + v23);
  long long v26 = *(_OWORD *)(a2 + v23 + 16);
  uint64_t v27 = (_OWORD *)(a1 + v23);
  _OWORD *v27 = v25;
  v27[1] = v26;
  uint64_t v28 = (_OWORD *)(a1 + v24);
  uint64_t v29 = (_OWORD *)(a2 + v24);
  long long v30 = v29[1];
  _OWORD *v28 = *v29;
  v28[1] = v30;
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for SpecificMedCompletedLogSnippet(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
  uint64_t v9 = v8[8];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for AppPunchout();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = v8[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  uint64_t v21 = v8[10];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = v8[11];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  void *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = v8[12];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  void *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = v8[13];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  *uint64_t v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v8[14]) = *(unsigned char *)(a2 + v8[14]);
  *(unsigned char *)(a1 + v8[15]) = *(unsigned char *)(a2 + v8[15]);
  uint64_t v41 = v8[16];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (uint64_t *)(a2 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  *uint64_t v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = v8[17];
  int v47 = (void *)(a1 + v46);
  uint64_t v48 = (uint64_t *)(a2 + v46);
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  *int v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = v8[18];
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = (uint64_t *)(a2 + v51);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  *uint64_t v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = v8[19];
  uint64_t v57 = (char *)(a1 + v56);
  uint64_t v58 = (char *)(a2 + v56);
  uint64_t v59 = type metadata accessor for SnippetHeaderModel();
  uint64_t v60 = *(void *)(v59 - 8);
  uint64_t v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48);
  int v62 = v61(v57, 1, v59);
  int v63 = v61(v58, 1, v59);
  if (!v62)
  {
    if (!v63)
    {
      uint64_t v83 = type metadata accessor for SpeakableString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 40))(v57, v58, v83);
      uint64_t v84 = *(int *)(v59 + 20);
      uint64_t v85 = &v57[v84];
      uint64_t v86 = &v58[v84];
      uint64_t v88 = *(void *)v86;
      uint64_t v87 = *((void *)v86 + 1);
      *(void *)uint64_t v85 = v88;
      *((void *)v85 + 1) = v87;
      swift_bridgeObjectRelease();
      uint64_t v89 = *(int *)(v59 + 24);
      uint64_t v90 = &v57[v89];
      uint64_t v91 = &v58[v89];
      uint64_t v93 = *(void *)v91;
      uint64_t v92 = *((void *)v91 + 1);
      *(void *)uint64_t v90 = v93;
      *((void *)v90 + 1) = v92;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    _s10WellnessUI28SpecificMedCompletedLogModelVWOhTm_0((uint64_t)v57, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v63)
  {
LABEL_12:
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v57, v58, *(void *)(*(void *)(v65 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v64 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32))(v57, v58, v64);
  *(_OWORD *)&v57[*(int *)(v59 + 20)] = *(_OWORD *)&v58[*(int *)(v59 + 20)];
  *(_OWORD *)&v57[*(int *)(v59 + 24)] = *(_OWORD *)&v58[*(int *)(v59 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
LABEL_13:
  uint64_t v66 = a3[5];
  uint64_t v67 = a1 + v66;
  uint64_t v68 = a2 + v66;
  LOBYTE(v66) = *(unsigned char *)(a2 + v66 + 16);
  uint64_t v69 = *(void *)v67;
  uint64_t v70 = *(void *)(v67 + 8);
  char v71 = *(unsigned char *)(v67 + 16);
  *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
  *(unsigned char *)(v67 + 16) = v66;
  outlined consume of Text.Storage(v69, v70, v71);
  *(void *)(v67 + 24) = *(void *)(v68 + 24);
  swift_bridgeObjectRelease();
  uint64_t v72 = a3[6];
  uint64_t v73 = a1 + v72;
  uint64_t v74 = a2 + v72;
  LOBYTE(v72) = *(unsigned char *)(a2 + v72 + 16);
  uint64_t v75 = *(void *)v73;
  uint64_t v76 = *(void *)(v73 + 8);
  char v77 = *(unsigned char *)(v73 + 16);
  *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
  *(unsigned char *)(v73 + 16) = v72;
  outlined consume of Text.Storage(v75, v76, v77);
  *(void *)(v73 + 24) = *(void *)(v74 + 24);
  swift_bridgeObjectRelease();
  uint64_t v78 = a3[7];
  uint64_t v79 = (void *)(a1 + v78);
  id v80 = (void *)(a2 + v78);
  char v81 = *(void **)(a1 + v78);
  *uint64_t v79 = *v80;

  v79[1] = v80[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for SpecificMedCompletedLogSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_26186CA34);
}

uint64_t sub_26186CA34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpecificMedCompletedLogModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SpecificMedCompletedLogSnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_26186CB0C);
}

uint64_t sub_26186CB0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SpecificMedCompletedLogModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for SpecificMedCompletedLogSnippet()
{
  uint64_t result = type metadata accessor for SpecificMedCompletedLogModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_26186CC6C()
{
  return MEMORY[0x263F1B710];
}

uint64_t _s9SnippetUI7ContextCAC7Combine16ObservableObjectAAWlTm_4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t objectdestroyTm_2()
{
  unint64_t v1 = (int *)type metadata accessor for SpecificMedCompletedLogSnippet();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for SpecificMedCompletedLogModel();
  uint64_t v7 = v0 + v3 + *(int *)(v6 + 32);
  uint64_t v8 = type metadata accessor for AppPunchout();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + *(int *)(v6 + 76);
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v10, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(void *)(v5 + v1[5]), *(void *)(v5 + v1[5] + 8), *(unsigned char *)(v5 + v1[5] + 16));
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(*(void *)(v5 + v1[6]), *(void *)(v5 + v1[6] + 8), *(unsigned char *)(v5 + v1[6] + 16));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in closure #3 in SpecificMedCompletedLogSnippet.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for SpecificMedCompletedLogSnippet() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in closure #3 in SpecificMedCompletedLogSnippet.body.getter(v2);
}

uint64_t BodyMassQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1, a1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t BodyMassQueryModel.appPunchout.setter(uint64_t a1)
{
  return outlined assign with take of AppPunchout?(a1, v1, &demangling cache variable for type metadata for AppPunchout?);
}

uint64_t (*BodyMassQueryModel.appPunchout.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.averageValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 20));
}

uint64_t type metadata accessor for BodyMassQueryModel()
{
  uint64_t result = type metadata singleton initialization cache for BodyMassQueryModel;
  if (!type metadata singleton initialization cache for BodyMassQueryModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t BodyMassQueryModel.averageValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for BodyMassQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 20);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BodyMassQueryModel.averageValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.maxValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 24));
}

uint64_t BodyMassQueryModel.maxValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for BodyMassQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BodyMassQueryModel.maxValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.minValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 28));
}

uint64_t BodyMassQueryModel.minValue.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for BodyMassQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BodyMassQueryModel.minValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.value.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 32));
}

uint64_t BodyMassQueryModel.value.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for BodyMassQueryModel();
  uint64_t v6 = v2 + *(int *)(result + 32);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*BodyMassQueryModel.value.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 36), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t BodyMassQueryModel.dateLabel.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 36), &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t (*BodyMassQueryModel.dateLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.averageValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BodyMassQueryModel.averageValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BodyMassQueryModel() + 40));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BodyMassQueryModel.averageValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.maxValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BodyMassQueryModel.maxValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BodyMassQueryModel() + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BodyMassQueryModel.maxValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.minValueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BodyMassQueryModel.minValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BodyMassQueryModel() + 48));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BodyMassQueryModel.minValueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.valueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BodyMassQueryModel() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BodyMassQueryModel.valueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for BodyMassQueryModel() + 52));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*BodyMassQueryModel.valueString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.unitString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 56), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t BodyMassQueryModel.unitString.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 56), &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t (*BodyMassQueryModel.unitString.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  return outlined init with copy of Environment<ColorSchemeContrast>.Content(v1 + *(int *)(Model + 60), a1, &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t BodyMassQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  return outlined assign with take of AppPunchout?(a1, v1 + *(int *)(Model + 60), &demangling cache variable for type metadata for SnippetHeaderModel?);
}

uint64_t (*BodyMassQueryModel.snippetHeaderModel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t BodyMassQueryModel.init(averageValue:maxValue:minValue:value:unitString:dateLabel:url:headerModel:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v74 = a8;
  uint64_t v75 = a5;
  uint64_t v76 = a7;
  int v69 = a6;
  uint64_t v68 = a3;
  uint64_t v64 = a1;
  uint64_t v78 = a13;
  uint64_t v79 = a12;
  uint64_t v80 = a11;
  uint64_t v81 = a10;
  BOOL v62 = (a2 & 1) == 0;
  int v63 = a2;
  BOOL v65 = (a4 & 1) == 0;
  int v66 = a4;
  BOOL v67 = (a6 & 1) == 0;
  BOOL v73 = (a8 & 1) == 0;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v14 - 8);
  int v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for AppPunchout();
  uint64_t v17 = *(void *)(v71 - 8);
  uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v72 = v17 + 56;
  v70(a9, 1, 1, v71);
  uint64_t Model = (int *)type metadata accessor for BodyMassQueryModel();
  uint64_t v61 = a9 + Model[9];
  uint64_t v19 = v61;
  uint64_t v20 = type metadata accessor for SpeakableString();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  v21(v19, 1, 1, v20);
  uint64_t v22 = (uint64_t *)(a9 + Model[10]);
  *uint64_t v22 = 0;
  v22[1] = 0;
  uint64_t v23 = (uint64_t *)(a9 + Model[11]);
  *uint64_t v23 = 0;
  v23[1] = 0;
  uint64_t v24 = (uint64_t *)(a9 + Model[12]);
  uint64_t *v24 = 0;
  v24[1] = 0;
  uint64_t v25 = (uint64_t *)(a9 + Model[13]);
  char v77 = v25;
  uint64_t *v25 = 0;
  v25[1] = 0;
  uint64_t v26 = a9 + Model[14];
  v21(v26, 1, 1, v20);
  uint64_t v60 = a9 + Model[15];
  uint64_t v27 = v60;
  uint64_t v28 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  uint64_t v29 = v64;
  BOOL v30 = (v64 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v62 && v30) {
    uint64_t v29 = 0;
  }
  char v31 = v63 | v30;
  uint64_t v32 = a9 + Model[5];
  *(void *)uint64_t v32 = v29;
  *(unsigned char *)(v32 + 8) = v31 & 1;
  uint64_t v33 = v68;
  BOOL v34 = (v68 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v65 && v34) {
    uint64_t v33 = 0;
  }
  char v35 = v66 | v34;
  uint64_t v36 = a9 + Model[6];
  *(void *)uint64_t v36 = v33;
  *(unsigned char *)(v36 + 8) = v35 & 1;
  uint64_t v37 = v75;
  BOOL v38 = (v75 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v67 && v38) {
    uint64_t v37 = 0;
  }
  char v39 = v69 | v38;
  uint64_t v40 = a9 + Model[7];
  *(void *)uint64_t v40 = v37;
  *(unsigned char *)(v40 + 8) = v39 & 1;
  uint64_t v41 = v76;
  BOOL v42 = (v76 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v73 && v42) {
    uint64_t v41 = 0;
  }
  char v43 = v74 | v42;
  uint64_t v44 = a9 + Model[8];
  *(void *)uint64_t v44 = v41;
  *(unsigned char *)(v44 + 8) = v43 & 1;
  outlined assign with copy of SpeakableString?(v81, v26, &demangling cache variable for type metadata for SpeakableString?);
  outlined assign with copy of SpeakableString?(v80, v61, &demangling cache variable for type metadata for SpeakableString?);
  BodyMassQueryModel.createAppPunchout(url:)(v79);
  v70((uint64_t)v16, 0, 1, v71);
  outlined assign with take of AppPunchout?((uint64_t)v16, a9, &demangling cache variable for type metadata for AppPunchout?);
  uint64_t v45 = v78;
  outlined assign with copy of SpeakableString?(v78, v60, &demangling cache variable for type metadata for SnippetHeaderModel?);
  uint64_t v46 = GenericQueryModel.roundUp(inputValue:)(*(void *)v32, *(unsigned char *)(v32 + 8));
  uint64_t v48 = v47;
  swift_bridgeObjectRelease();
  *uint64_t v22 = v46;
  v22[1] = v48;
  uint64_t v49 = GenericQueryModel.roundUp(inputValue:)(*(void *)v36, *(unsigned char *)(v36 + 8));
  uint64_t v51 = v50;
  swift_bridgeObjectRelease();
  *uint64_t v23 = v49;
  v23[1] = v51;
  uint64_t v52 = GenericQueryModel.roundUp(inputValue:)(*(void *)v40, *(unsigned char *)(v40 + 8));
  uint64_t v54 = v53;
  swift_bridgeObjectRelease();
  uint64_t *v24 = v52;
  v24[1] = v54;
  uint64_t v55 = GenericQueryModel.roundUp(inputValue:)(*(void *)v44, *(unsigned char *)(v44 + 8));
  uint64_t v57 = v56;
  outlined destroy of Font.Design?(v45, &demangling cache variable for type metadata for SnippetHeaderModel?);
  outlined destroy of Font.Design?(v79, &demangling cache variable for type metadata for URL?);
  outlined destroy of Font.Design?(v80, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of Font.Design?(v81, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v58 = v77;
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v58 = v55;
  v58[1] = v57;
  return result;
}

uint64_t BodyMassQueryModel.createAppPunchout(url:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<ColorSchemeContrast>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Font.Design?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    URL.absoluteString.getter();
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t BodyMassQueryModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x68636E7550707061;
  switch(a1)
  {
    case 1:
      return 0x5665676172657661;
    case 2:
      unsigned int v3 = 1450729837;
      return v3 | 0x65756C6100000000;
    case 3:
      unsigned int v3 = 1450076525;
      return v3 | 0x65756C6100000000;
    case 4:
      return 0x65756C6176;
    case 5:
      return 0x6562614C65746164;
    case 6:
    case 11:
      return 0xD000000000000012;
    case 7:
      unsigned int v4 = 1450729837;
      goto LABEL_10;
    case 8:
      unsigned int v4 = 1450076525;
LABEL_10:
      uint64_t result = v4 | 0x65756C6100000000;
      break;
    case 9:
      uint64_t result = 0x72745365756C6176;
      break;
    case 10:
      uint64_t result = 0x6972745374696E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance BodyMassQueryModel.CodingKeys()
{
  return BodyMassQueryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance BodyMassQueryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized BodyMassQueryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance BodyMassQueryModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance BodyMassQueryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance BodyMassQueryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t BodyMassQueryModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<BodyMassQueryModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[31] = 0;
  type metadata accessor for AppPunchout();
  _s10SnippetKit11AppPunchoutVACSEAAWlTm_9(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for BodyMassQueryModel();
    v8[30] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[29] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[28] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[27] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[26] = 5;
    type metadata accessor for SpeakableString();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_9(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[25] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[24] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[15] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[14] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[12] = 11;
    type metadata accessor for SnippetHeaderModel();
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_9(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys);
  }
  return result;
}

uint64_t BodyMassQueryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v92 = a1;
  uint64_t v75 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v76 = (uint64_t)v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v85 = (char *)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v84 = (char *)v70 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v86 = (char *)v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<BodyMassQueryModel.CodingKeys>);
  uint64_t v87 = *(void *)(v10 - 8);
  uint64_t v88 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v91 = (char *)v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  uint64_t v13 = (int *)(Model - 8);
  MEMORY[0x270FA5388](Model);
  uint64_t v15 = (char *)v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AppPunchout();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v83 = v16;
  v17(v15, 1, 1);
  uint64_t v18 = &v15[v13[7]];
  *(void *)uint64_t v18 = 0;
  uint64_t v82 = v18;
  v18[8] = 1;
  uint64_t v19 = &v15[v13[8]];
  *(void *)uint64_t v19 = 0;
  uint64_t v80 = (uint64_t *)v19;
  v19[8] = 1;
  uint64_t v20 = &v15[v13[9]];
  *(void *)uint64_t v20 = 0;
  uint64_t v79 = (uint64_t *)v20;
  v20[8] = 1;
  uint64_t v21 = &v15[v13[10]];
  *(void *)uint64_t v21 = 0;
  uint64_t v78 = (uint64_t *)v21;
  v21[8] = 1;
  uint64_t v22 = (uint64_t)&v15[v13[11]];
  uint64_t v23 = type metadata accessor for SpeakableString();
  uint64_t v24 = *(void (**)(void))(*(void *)(v23 - 8) + 56);
  uint64_t v77 = v22;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24)(v22, 1, 1, v23);
  uint64_t v25 = &v15[v13[12]];
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = 0;
  uint64_t v26 = &v15[v13[13]];
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = 0;
  uint64_t v27 = &v15[v13[14]];
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = 0;
  uint64_t v28 = &v15[v13[15]];
  *(void *)uint64_t v28 = 0;
  *((void *)v28 + 1) = 0;
  uint64_t v81 = &v15[v13[16]];
  v24();
  uint64_t v29 = v13[17];
  uint64_t v90 = v15;
  uint64_t v30 = (uint64_t)&v15[v29];
  uint64_t v31 = type metadata accessor for SnippetHeaderModel();
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56);
  uint64_t v74 = v30;
  v32(v30, 1, 1, v31);
  __swift_project_boxed_opaque_existential_1(v92, v92[3]);
  lazy protocol witness table accessor for type BodyMassQueryModel.CodingKeys and conformance BodyMassQueryModel.CodingKeys();
  uint64_t v33 = v89;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v33)
  {
    uint64_t v69 = (uint64_t)v90;
  }
  else
  {
    BOOL v34 = v82;
    uint64_t v89 = v25;
    BOOL v73 = v26;
    uint64_t v72 = v27;
    uint64_t v71 = v28;
    uint64_t v35 = (uint64_t)v84;
    uint64_t v36 = (uint64_t)v81;
    v70[1] = v31;
    uint64_t v37 = (uint64_t)v85;
    uint64_t v38 = v87;
    char v104 = 0;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_9(&lazy protocol witness table cache variable for type AppPunchout and conformance AppPunchout, MEMORY[0x263F762C0]);
    uint64_t v39 = (uint64_t)v86;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v39, (uint64_t)v90, &demangling cache variable for type metadata for AppPunchout?);
    char v103 = 1;
    *(void *)BOOL v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v34[8] = v41 & 1;
    char v102 = 2;
    uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v43 = v80;
    *uint64_t v80 = v42;
    *((unsigned char *)v43 + 8) = v44 & 1;
    char v101 = 3;
    uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v46 = v79;
    *uint64_t v79 = v45;
    *((unsigned char *)v46 + 8) = v47 & 1;
    char v100 = 4;
    uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v49 = v78;
    *uint64_t v78 = v48;
    *((unsigned char *)v49 + 8) = v50 & 1;
    char v99 = 5;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_9(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, MEMORY[0x263F6D0A0]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v35, v77, &demangling cache variable for type metadata for SpeakableString?);
    char v98 = 6;
    uint64_t v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v53 = v52;
    uint64_t v54 = v89;
    uint64_t v86 = (char *)v51;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v54 = v86;
    *((void *)v54 + 1) = v53;
    char v97 = 7;
    uint64_t v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v57 = v56;
    uint64_t v58 = v73;
    uint64_t v89 = (char *)v55;
    swift_bridgeObjectRelease();
    *uint64_t v58 = v89;
    v58[1] = v57;
    char v96 = 8;
    uint64_t v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v61 = v60;
    BOOL v62 = (uint64_t *)v72;
    swift_bridgeObjectRelease();
    *BOOL v62 = v59;
    v62[1] = v61;
    char v95 = 9;
    uint64_t v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v65 = v64;
    int v66 = (uint64_t *)v71;
    swift_bridgeObjectRelease();
    *int v66 = v63;
    v66[1] = v65;
    char v94 = 10;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of AppPunchout?(v37, v36, &demangling cache variable for type metadata for SpeakableString?);
    char v93 = 11;
    _s10SnippetKit11AppPunchoutVACSEAAWlTm_9(&lazy protocol witness table cache variable for type SnippetHeaderModel and conformance SnippetHeaderModel, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v67 = v88;
    uint64_t v68 = v91;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v68, v67);
    uint64_t v69 = (uint64_t)v90;
    outlined assign with take of AppPunchout?(v76, v74, &demangling cache variable for type metadata for SnippetHeaderModel?);
    outlined init with copy of BodyMassQueryModel(v69, v75);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v92);
  return outlined destroy of BodyMassQueryModel(v69, (uint64_t (*)(void))type metadata accessor for BodyMassQueryModel);
}

uint64_t outlined init with copy of BodyMassQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t base witness table accessor for Decodable in BodyMassQueryModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_9(&lazy protocol witness table cache variable for type BodyMassQueryModel and conformance BodyMassQueryModel, (void (*)(uint64_t))type metadata accessor for BodyMassQueryModel);
}

uint64_t base witness table accessor for Encodable in BodyMassQueryModel()
{
  return _s10SnippetKit11AppPunchoutVACSEAAWlTm_9(&lazy protocol witness table cache variable for type BodyMassQueryModel and conformance BodyMassQueryModel, (void (*)(uint64_t))type metadata accessor for BodyMassQueryModel);
}

uint64_t _s10SnippetKit11AppPunchoutVACSEAAWlTm_9(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance BodyMassQueryModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return BodyMassQueryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance BodyMassQueryModel(void *a1)
{
  return BodyMassQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for BodyMassQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    uint64_t v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = a3[7];
    uint64_t v18 = a3[8];
    uint64_t v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = (char *)a1 + v18;
    uint64_t v22 = (char *)a2 + v18;
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = a3[9];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = type metadata accessor for SpeakableString();
    uint64_t v27 = *(void *)(v26 - 8);
    int v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    uint64_t v67 = v27;
    if (v66(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    uint64_t v29 = a3[10];
    uint64_t v30 = a3[11];
    uint64_t v31 = (uint64_t *)((char *)a1 + v29);
    uint64_t v32 = (uint64_t *)((char *)a2 + v29);
    uint64_t v33 = v32[1];
    void *v31 = *v32;
    v31[1] = v33;
    BOOL v34 = (uint64_t *)((char *)a1 + v30);
    uint64_t v35 = (uint64_t *)((char *)a2 + v30);
    uint64_t v36 = v35[1];
    *BOOL v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = a3[12];
    uint64_t v38 = a3[13];
    uint64_t v39 = (uint64_t *)((char *)a1 + v37);
    uint64_t v40 = (uint64_t *)((char *)a2 + v37);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = (uint64_t *)((char *)a1 + v38);
    char v43 = (uint64_t *)((char *)a2 + v38);
    uint64_t v44 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v44;
    uint64_t v45 = a3[14];
    uint64_t v46 = (char *)a1 + v45;
    char v47 = (char *)a2 + v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v66(v47, 1, v26))
    {
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
      uint64_t v49 = v67;
    }
    else
    {
      uint64_t v49 = v67;
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v46, v47, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v46, 0, 1, v26);
    }
    uint64_t v50 = a3[15];
    uint64_t v51 = (char *)a1 + v50;
    uint64_t v52 = (char *)a2 + v50;
    uint64_t v53 = type metadata accessor for SnippetHeaderModel();
    uint64_t v54 = *(void *)(v53 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
    {
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
      memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v51, v52, v26);
      uint64_t v56 = *(int *)(v53 + 20);
      uint64_t v57 = &v51[v56];
      uint64_t v58 = &v52[v56];
      uint64_t v59 = *((void *)v58 + 1);
      *(void *)uint64_t v57 = *(void *)v58;
      *((void *)v57 + 1) = v59;
      uint64_t v60 = *(int *)(v53 + 24);
      uint64_t v61 = &v51[v60];
      BOOL v62 = &v52[v60];
      uint64_t v63 = *((void *)v62 + 1);
      *(void *)uint64_t v61 = *(void *)v62;
      *((void *)v61 + 1) = v63;
      uint64_t v64 = *(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v64(v51, 0, 1, v53);
    }
  }
  return a1;
}

uint64_t destroy for BodyMassQueryModel(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + a2[9];
  uint64_t v7 = type metadata accessor for SpeakableString();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + a2[14];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v11 = a1 + a2[15];
  uint64_t v12 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
  if (!result)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v65 = v25;
  if (v64(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  uint64_t v27 = a3[10];
  uint64_t v28 = a3[11];
  uint64_t v29 = &a1[v27];
  uint64_t v30 = &a2[v27];
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = *(void *)v30;
  *((void *)v29 + 1) = v31;
  uint64_t v32 = &a1[v28];
  uint64_t v33 = &a2[v28];
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = v34;
  uint64_t v35 = a3[12];
  uint64_t v36 = a3[13];
  uint64_t v37 = &a1[v35];
  uint64_t v38 = &a2[v35];
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v39;
  uint64_t v40 = &a1[v36];
  uint64_t v41 = &a2[v36];
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = v42;
  uint64_t v43 = a3[14];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v64(v45, 1, v24))
  {
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
    uint64_t v47 = v65;
  }
  else
  {
    uint64_t v47 = v65;
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v44, v45, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v44, 0, 1, v24);
  }
  uint64_t v48 = a3[15];
  uint64_t v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  uint64_t v51 = type metadata accessor for SnippetHeaderModel();
  uint64_t v52 = *(void *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
  {
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v49, v50, v24);
    uint64_t v54 = *(int *)(v51 + 20);
    uint64_t v55 = &v49[v54];
    uint64_t v56 = &v50[v54];
    uint64_t v57 = *((void *)v56 + 1);
    *(void *)uint64_t v55 = *(void *)v56;
    *((void *)v55 + 1) = v57;
    uint64_t v58 = *(int *)(v51 + 24);
    uint64_t v59 = &v49[v58];
    uint64_t v60 = &v50[v58];
    uint64_t v61 = *((void *)v60 + 1);
    *(void *)uint64_t v59 = *(void *)v60;
    *((void *)v59 + 1) = v61;
    BOOL v62 = *(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v62(v49, 0, 1, v51);
  }
  return a1;
}

char *assignWithCopy for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = v15;
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = a3[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)uint64_t v21 = v23;
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)uint64_t v25 = v27;
  uint64_t v28 = a3[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = type metadata accessor for SpeakableString();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v31);
LABEL_12:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v29, v30, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v29, v30, v31);
LABEL_13:
  uint64_t v37 = a3[10];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = *((void *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[11];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[12];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = *((void *)v45 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[13];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  *(void *)uint64_t v47 = *(void *)v48;
  *((void *)v47 + 1) = *((void *)v48 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v49 = a3[14];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  int v52 = v33(&a1[v49], 1, v31);
  int v53 = v33(v51, 1, v31);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v50, v51, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v50, 0, 1, v31);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v50, v31);
LABEL_18:
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v50, v51, v31);
LABEL_19:
  uint64_t v55 = a3[15];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  uint64_t v58 = type metadata accessor for SnippetHeaderModel();
  uint64_t v59 = *(void *)(v58 - 8);
  uint64_t v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  int v61 = v60(v56, 1, v58);
  int v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v56, v57, v31);
      uint64_t v72 = *(int *)(v58 + 20);
      BOOL v73 = &v56[v72];
      uint64_t v74 = &v57[v72];
      *(void *)BOOL v73 = *(void *)v74;
      *((void *)v73 + 1) = *((void *)v74 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v75 = *(int *)(v58 + 24);
      uint64_t v76 = &v56[v75];
      uint64_t v77 = &v57[v75];
      *(void *)uint64_t v76 = *(void *)v77;
      *((void *)v76 + 1) = *((void *)v77 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of BodyMassQueryModel((uint64_t)v56, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v62)
  {
LABEL_24:
    uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v56, v57, *(void *)(*(void *)(v70 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v56, v57, v31);
  uint64_t v63 = *(int *)(v58 + 20);
  uint64_t v64 = &v56[v63];
  uint64_t v65 = &v57[v63];
  *(void *)uint64_t v64 = *(void *)v65;
  *((void *)v64 + 1) = *((void *)v65 + 1);
  uint64_t v66 = *(int *)(v58 + 24);
  uint64_t v67 = &v56[v66];
  uint64_t v68 = &v57[v66];
  *(void *)uint64_t v67 = *(void *)v68;
  *((void *)v67 + 1) = *((void *)v68 + 1);
  uint64_t v69 = *(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69(v56, 0, 1, v58);
  return a1;
}

uint64_t outlined destroy of BodyMassQueryModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v26(v23, 1, v24))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  uint64_t v28 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v28] = *(_OWORD *)&a2[v28];
  uint64_t v29 = a3[13];
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  uint64_t v30 = a3[14];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  if (v26(&a2[v30], 1, v24))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v31, v32, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v31, 0, 1, v24);
  }
  uint64_t v34 = a3[15];
  int v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = type metadata accessor for SnippetHeaderModel();
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v35, v36, v24);
    *(_OWORD *)&v35[*(int *)(v37 + 20)] = *(_OWORD *)&v36[*(int *)(v37 + 20)];
    *(_OWORD *)&v35[*(int *)(v37 + 24)] = *(_OWORD *)&v36[*(int *)(v37 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  return a1;
}

char *assignWithTake for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = &a1[v13];
  uint64_t v17 = &a2[v13];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = a3[9];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for SpeakableString();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_12:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v25, v26, v27);
LABEL_13:
  uint64_t v33 = a3[10];
  uint64_t v34 = &a1[v33];
  int v35 = &a2[v33];
  uint64_t v37 = *(void *)v35;
  uint64_t v36 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = v37;
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[11];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  uint64_t v42 = *(void *)v40;
  uint64_t v41 = *((void *)v40 + 1);
  *(void *)uint64_t v39 = v42;
  *((void *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[12];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  uint64_t v47 = *(void *)v45;
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = v47;
  *((void *)v44 + 1) = v46;
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[13];
  uint64_t v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  uint64_t v52 = *(void *)v50;
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)uint64_t v49 = v52;
  *((void *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[14];
  uint64_t v54 = &a1[v53];
  uint64_t v55 = &a2[v53];
  int v56 = v29(&a1[v53], 1, v27);
  int v57 = v29(v55, 1, v27);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v54, v55, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v54, 0, 1, v27);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v54, v27);
LABEL_18:
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v54, v55, v27);
LABEL_19:
  uint64_t v59 = a3[15];
  uint64_t v60 = &a1[v59];
  int v61 = &a2[v59];
  uint64_t v62 = type metadata accessor for SnippetHeaderModel();
  uint64_t v63 = *(void *)(v62 - 8);
  uint64_t v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  int v65 = v64(v60, 1, v62);
  int v66 = v64(v61, 1, v62);
  if (!v65)
  {
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v60, v61, v27);
      uint64_t v69 = *(int *)(v62 + 20);
      uint64_t v70 = &v60[v69];
      uint64_t v71 = &v61[v69];
      uint64_t v73 = *(void *)v71;
      uint64_t v72 = *((void *)v71 + 1);
      *(void *)uint64_t v70 = v73;
      *((void *)v70 + 1) = v72;
      swift_bridgeObjectRelease();
      uint64_t v74 = *(int *)(v62 + 24);
      uint64_t v75 = &v60[v74];
      uint64_t v76 = &v61[v74];
      uint64_t v78 = *(void *)v76;
      uint64_t v77 = *((void *)v76 + 1);
      *(void *)uint64_t v75 = v78;
      *((void *)v75 + 1) = v77;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of BodyMassQueryModel((uint64_t)v60, (uint64_t (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v66)
  {
LABEL_24:
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    memcpy(v60, v61, *(void *)(*(void *)(v67 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v60, v61, v27);
  *(_OWORD *)&v60[*(int *)(v62 + 20)] = *(_OWORD *)&v61[*(int *)(v62 + 20)];
  *(_OWORD *)&v60[*(int *)(v62 + 24)] = *(_OWORD *)&v61[*(int *)(v62 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
  return a1;
}

uint64_t getEnumTagSinglePayload for BodyMassQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261870DA8);
}

uint64_t sub_261870DA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[9];
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 2147483646)
  {
    unint64_t v14 = *(void *)(a1 + a3[10] + 8);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 - 1;
    if (v15 < 0) {
      int v15 = -1;
    }
    return (v15 + 1);
  }
  else
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[15];
    return v17(v19, a2, v18);
  }
}

uint64_t storeEnumTagSinglePayload for BodyMassQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_261870F58);
}

uint64_t sub_261870F58(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppPunchout?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[9];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[10] + 8) = a2;
  }
  else
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetHeaderModel?);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[15];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void type metadata completion function for BodyMassQueryModel()
{
  _s10SnippetKit11AppPunchoutVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for AppPunchout?, MEMORY[0x263F762C0]);
  if (v0 <= 0x3F)
  {
    _s10SnippetKit11AppPunchoutVSgMaTm_0(319, &lazy cache variable for type metadata for SpeakableString?, MEMORY[0x263F6D0A0]);
    if (v1 <= 0x3F)
    {
      _s10SnippetKit11AppPunchoutVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for SnippetHeaderModel?, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for BodyMassQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BodyMassQueryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2618713BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

void *type metadata accessor for BodyMassQueryModel.CodingKeys()
{
  return &unk_270D87B78;
}

uint64_t specialized BodyMassQueryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5665676172657661 && a2 == 0xEC00000065756C61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883940 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x72745365756C6176 && a2 == 0xEB00000000676E69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6972745374696E75 && a2 == 0xEA0000000000676ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000261883800)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

uint64_t PhoneRingsModel.exerciseGoalValue.getter()
{
  return *(void *)v0;
}

uint64_t PhoneRingsModel.exerciseGoalValue.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*PhoneRingsModel.exerciseGoalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.exerciseTotalValue.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PhoneRingsModel.exerciseTotalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*PhoneRingsModel.exerciseTotalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.moveGoalValue.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t PhoneRingsModel.moveGoalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*PhoneRingsModel.moveGoalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.moveTotalValue.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t PhoneRingsModel.moveTotalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 48) = result;
  *(unsigned char *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*PhoneRingsModel.moveTotalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.standGoalValue.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t PhoneRingsModel.standGoalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 64) = result;
  *(unsigned char *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t (*PhoneRingsModel.standGoalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.standTotalValue.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t PhoneRingsModel.standTotalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 80) = result;
  *(unsigned char *)(v2 + 88) = a2 & 1;
  return result;
}

uint64_t (*PhoneRingsModel.standTotalValue.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.exerciseLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.exerciseLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.exerciseLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.exerciseValueLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.exerciseValueLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.exerciseValueLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.exerciseUnitLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.exerciseUnitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.exerciseUnitLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.moveLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.moveLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 144) = a1;
  *(void *)(v2 + 152) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.moveLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.moveValueLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.moveValueLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 160) = a1;
  *(void *)(v2 + 168) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.moveValueLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.moveUnitLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.moveUnitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 176) = a1;
  *(void *)(v2 + 184) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.moveUnitLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.standLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 192);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.standLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 192) = a1;
  *(void *)(v2 + 200) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.standLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.standValueLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 208);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.standValueLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 208) = a1;
  *(void *)(v2 + 216) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.standValueLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.standUnitLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 224);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneRingsModel.standUnitLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 224) = a1;
  *(void *)(v2 + 232) = a2;
  return result;
}

uint64_t (*PhoneRingsModel.standUnitLabel.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

uint64_t PhoneRingsModel.isSmartEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 240);
}

uint64_t PhoneRingsModel.isSmartEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 240) = result;
  return result;
}

uint64_t (*PhoneRingsModel.isSmartEnabled.modify())()
{
  return GenericMedCompletedLogSnippet.text3.modify;
}

void __swiftcall PhoneRingsModel.init(exerciseGoalValue:exerciseTotalValue:moveGoalValue:moveTotalValue:standGoalValue:standTotalValue:exerciseLabel:exerciseUnitLabel:moveLabel:moveUnitLabel:standLabel:standUnitLabel:isSmartEnabled:)(WellnessUI::PhoneRingsModel *__return_ptr retstr, Swift::Double exerciseGoalValue, Swift::Double exerciseTotalValue, Swift::Double moveGoalValue, Swift::Double moveTotalValue, Swift::Double standGoalValue, Swift::Double standTotalValue, Swift::String exerciseLabel, Swift::String exerciseUnitLabel, Swift::String moveLabel, Swift::String moveUnitLabel, Swift::String standLabel, Swift::String standUnitLabel, Swift::Bool isSmartEnabled)
{
  if ((~*(void *)&exerciseTotalValue & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (exerciseTotalValue <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (exerciseTotalValue >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  object = moveUnitLabel._object;
  uint64_t countAndFlagsBits = moveUnitLabel._countAndFlagsBits;
  uint64_t v19 = moveLabel._object;
  uint64_t v20 = moveLabel._countAndFlagsBits;
  uint64_t v21 = exerciseUnitLabel._object;
  uint64_t v22 = exerciseUnitLabel._countAndFlagsBits;
  uint64_t v23 = exerciseLabel._object;
  uint64_t v49 = exerciseLabel._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v50.value._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v50.value._object = v28;
  v29._uint64_t countAndFlagsBits = 47;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  if ((~*(void *)&exerciseGoalValue & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (exerciseGoalValue <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (exerciseGoalValue >= 9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v48 = v22;
  v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  if ((~*(void *)&moveTotalValue & 0x7FF0000000000000) == 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (moveTotalValue <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (moveTotalValue >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int v31 = v50.value._object;
  uint64_t v47 = v50.value._countAndFlagsBits;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50.value._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v50.value._object = v32;
  v33._uint64_t countAndFlagsBits = 47;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  if ((~*(void *)&moveGoalValue & 0x7FF0000000000000) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (moveGoalValue <= -9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (moveGoalValue >= 9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  if ((~*(void *)&standTotalValue & 0x7FF0000000000000) == 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (standTotalValue <= -9.22337204e18)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (standTotalValue >= 9.22337204e18)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  Swift::String_optional v46 = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50.value._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v50.value._object = v35;
  v36._uint64_t countAndFlagsBits = 47;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  if ((~*(void *)&standGoalValue & 0x7FF0000000000000) == 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (standGoalValue <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (standGoalValue < 9.22337204e18)
  {
    v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    Swift::String_optional v38 = v50;
    *(Swift::Double *)&v50.value._uint64_t countAndFlagsBits = exerciseGoalValue;
    LOBYTE(v50.value._object) = 0;
    *(Swift::Double *)&long long v51 = exerciseTotalValue;
    BYTE8(v51) = 0;
    *(Swift::Double *)&long long v52 = moveGoalValue;
    BYTE8(v52) = 0;
    *(Swift::Double *)&long long v53 = moveTotalValue;
    BYTE8(v53) = 0;
    *(Swift::Double *)&long long v54 = standGoalValue;
    BYTE8(v54) = 0;
    *(Swift::Double *)&long long v55 = standTotalValue;
    BYTE8(v55) = 0;
    v56.value._uint64_t countAndFlagsBits = v49;
    v56.value._object = v23;
    v57.value._uint64_t countAndFlagsBits = v47;
    v57.value._object = v31;
    v58.value._uint64_t countAndFlagsBits = v48;
    v58.value._object = v21;
    v59.value._uint64_t countAndFlagsBits = v20;
    v59.value._object = v19;
    Swift::String_optional v60 = v46;
    v61.value._uint64_t countAndFlagsBits = countAndFlagsBits;
    v61.value._object = object;
    Swift::String v62 = standLabel;
    Swift::String_optional v63 = v38;
    Swift::String v64 = standUnitLabel;
    Swift::Bool v65 = isSmartEnabled;
    outlined retain of PhoneRingsModel((uint64_t)&v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of PhoneRingsModel((uint64_t)&v50);
    Swift::String_optional v39 = v63;
    retstr->standLabel.Swift::Double value = v62;
    retstr->Swift::String_optional standValueLabel = v39;
    retstr->standUnitLabel.Swift::Double value = v64;
    retstr->isSmartEnabled = v65;
    Swift::String_optional v40 = v59;
    retstr->exerciseUnitLabel = v58;
    retstr->Swift::String_optional moveLabel = v40;
    Swift::String_optional v41 = v61;
    retstr->moveValueLabel = v60;
    retstr->Swift::String_optional moveUnitLabel = v41;
    long long v42 = v55;
    *(_OWORD *)&retstr->standGoalValue.Swift::Double value = v54;
    *(_OWORD *)&retstr->standTotalValue.Swift::Double value = v42;
    Swift::String_optional v43 = v57;
    retstr->exerciseLabel = v56;
    retstr->Swift::String_optional exerciseValueLabel = v43;
    long long v44 = v51;
    *(Swift::String_optional *)&retstr->exerciseGoalValue.Swift::Double value = v50;
    *(_OWORD *)&retstr->exerciseTotalValue.Swift::Double value = v44;
    long long v45 = v53;
    *(_OWORD *)&retstr->moveGoalValue.Swift::Double value = v52;
    *(_OWORD *)&retstr->moveTotalValue.Swift::Double value = v45;
    return;
  }
LABEL_37:
  __break(1u);
}