@interface HMDHome
+ (BOOL)didHomeAppOnboardHindsightWithAppData:(id)a3;
+ (BOOL)isObjectContainedInHome:(id)a3;
+ (BOOL)supportsSecureCoding;
+ (BOOL)updateCHIPPropertiesOnHomeModel:(id)a3 forAddedHAPAccessoryServer:(id)a4;
+ (HMDHome)homeWithHomeManager:(id)a3 backingStore:(id)a4 model:(id)a5 error:(id *)a6;
+ (id)createNewHomeModelsWithModelID:(id)a3 parentModelID:(id)a4 name:(id)a5 acwgGroupResolvingKey:(id)a6 acwgIssuerPublicKeyExternalRepresentation:(id)a7 userUniqueIDForAccessories:(id)a8 ownedBy:(id)a9;
+ (id)createUserUniqueIDForAccessoriesWithoutDuplicatingExistingIDs:(id)a3;
+ (id)decodedMigrationBulletinBoardNotifications:(id)a3;
+ (id)decodedMigrationCameraNotificationSettings:(id)a3;
+ (id)encodedMigrationBulletinBoardNotifications:(id)a3;
+ (id)encodedMigrationCameraNotificationSettings:(id)a3;
+ (id)filterAllowedToPostBulletinFromCharacteristics:(id)a3;
+ (id)filterUsersSupportingPresence:(id)a3;
+ (id)getBuiltinActionSets;
+ (id)loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID:(id)a3;
+ (id)logCategory;
+ (id)matterDeviceControllerWithUUID:(id)a3;
+ (id)migrationBulletinBoardNotificationsForHome:(id)a3;
+ (id)migrationCameraNotificationSettingsForHome:(id)a3;
+ (id)nfcIssuerKeyIdentifierWithPairingIdentity:(id)a3;
+ (id)notificationPayloadForChangedCharacteristics:(id)a3 destination:(id)a4 destinationIsXPCTransport:(BOOL)a5;
+ (id)notificationPayloadForChangedCharacteristics:(id)a3 destinationIsXPCTransport:(BOOL)a4;
+ (id)shortDescription;
+ (id)supportedAccessoryClasses;
+ (id)updatedHomeModelCHIPPropertiesForAddedHAPAccessoryServer:(id)a3;
+ (id)zoneIDFromHomeUUID:(id)a3;
+ (unint64_t)privilegeFromUserInviteInformation:(id)a3;
+ (unint64_t)sanitizedOriginalSourceForMessage:(uint64_t)a1;
+ (void)_initialize;
+ (void)appendCharacteristicsToAccessoryList:(id)a3 responseTuples:(id)a4 forMultipleCharacteristicsRemoteRead:(id)a5;
+ (void)appendCharacteristicsToAccessoryList:(id)a3 responseTuples:(id)a4 forMultipleCharacteristicsRemoteWrite:(id)a5 message:(id)a6;
+ (void)dumpAccessories:(id)a3 usingTag:(id)a4 flow:(id)a5;
+ (void)removeCharacteristicAuthorizationDataMigrationFileFromDiskWithhHomeUUID:(id)a3;
+ (void)updateCHIPPropertiesOnAccessoryModel:(id)a3 forAddedHAPAccessoryServer:(id)a4;
+ (void)updateCHIPPropertiesOnMKFAccessoryModel:(id)a3 forAddedHAPAccessoryServer:(id)a4;
- (BOOL)__shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:(id)a3 error:(id *)a4;
- (BOOL)_addAccessory:(id)a3;
- (BOOL)_addOwnerToPrimaryAccessory:(id)a3 error:(id *)a4;
- (BOOL)_doesInvitedUserHasTheSamePairingIdentityAsOwner:(id)a3;
- (BOOL)_doesUsersHaveCATID;
- (BOOL)_ensureDevicesSymptomDiscoveryMessageCanBeHandled:(id)a3;
- (BOOL)_hasPairedReachableBTLEAccessories;
- (BOOL)_isEventTriggerOnLocalDeviceForAccessory:(id)a3;
- (BOOL)_isEventTriggerOnRemoteGatewayForAccessory:(id)a3;
- (BOOL)_isNetworkRouterSupportEnabledForCurrentDevice;
- (BOOL)_isReadRequestAllowForCharacteristics:(id)a3 message:(id)a4 error:(id *)a5;
- (BOOL)_isRegisteredForNotificationsForClients:(id)a3;
- (BOOL)_isRegisteredForNotificationsWithRemoteGateway:(id)a3;
- (BOOL)_isRetrievalInProgressForPrimaryAccessory:(id)a3 linkType:(int64_t)a4;
- (BOOL)_isSecureClassTriggeredByCharacteristics:(id)a3;
- (BOOL)_isSharedHomeVersionTrustZoneCapable;
- (BOOL)_isUserValid:(id)a3 error:(id *)a4;
- (BOOL)_justSentInvitation:(id)a3;
- (BOOL)_overrideStartThreadTimeout;
- (BOOL)_populateTriggerModel:(id)a3 fromBuilderMessage:(id)a4 transaction:(id)a5 responsePayload:(id)a6;
- (BOOL)_removeAccessory:(id)a3;
- (BOOL)_residentDeviceAvailable;
- (BOOL)_sendMatterHMFMessageRequest:(id)a3;
- (BOOL)_sendMatterMessagePayloadToPrimaryResident:(id)a3 responseHandler:(id)a4;
- (BOOL)_shouldAllowAddingAccessoryOfCategory:(id)a3 requestMessage:(id)a4 error:(id *)a5;
- (BOOL)_shouldAllowAddingAccessoryWithDescription:(id)a3 requestMessage:(id)a4 error:(id *)a5;
- (BOOL)_shouldAvoidTombstoningAccessoryServer:(id)a3 accessory:(id)a4;
- (BOOL)_shouldFallbackLocallyForRemoteMatterRequest:(id)a3;
- (BOOL)_shouldRateLimitChangeNotificationsForCharacteristic:(id)a3;
- (BOOL)_shouldRegisterForNotificationsWithDevice:(id)a3;
- (BOOL)_shouldResendOutgoingInvitation:(id)a3;
- (BOOL)_shouldSendToDestination:(id)a3 device:(id)a4 remoteSourceDevice:(id)a5;
- (BOOL)_shouldUseAttributeReportForBulletin:(id)a3;
- (BOOL)_shouldUseDeprecatedAddAccessoryMessage:(id)a3 minimumVersion:(id)a4 primaryResident:(id)a5 shouldRelayMessages:(BOOL)a6;
- (BOOL)_shouldWaitForAccessoriesToBeReachable;
- (BOOL)_validateAddingNewTriggerWithName:(id)a3 message:(id)a4;
- (BOOL)_validateSettingsUpdate:(id)a3 type:(int64_t *)a4 keyPath:(id *)a5 value:(id *)a6 error:(id *)a7;
- (BOOL)_verifyUserManagementPermissionForAccessory:(id)a3 error:(id *)a4;
- (BOOL)addBulletinConditions:(id)a3 on:(id)a4 context:(id)a5;
- (BOOL)addElement:(id)a3 toCondition:(id)a4 isStartElement:(BOOL)a5;
- (BOOL)addPresenceBulletinCondition:(id)a3 on:(id)a4 context:(id)a5;
- (BOOL)addSunriseSunSetTimePeriodElement:(id)a3 toCondition:(id)a4 isStartElement:(BOOL)a5;
- (BOOL)addTimeOfDayTimePeriodElement:(id)a3 toCondition:(id)a4 isStartElement:(BOOL)a5;
- (BOOL)addTimePeriodBulletinCondition:(id)a3 on:(id)a4;
- (BOOL)allowsRemoteAccess;
- (BOOL)applyDeviceLockStatus:(id)a3;
- (BOOL)areAllThreadResidentNodesUnreachable;
- (BOOL)areCharacteristicRequests:(id)a3 allowedForUser:(id)a4;
- (BOOL)attemptToUpdateThreadNetworkID:(id)a3;
- (BOOL)awdPrimaryReportingDevice;
- (BOOL)bulletinBoardNotificationsMigrationFileExistsOnDisk;
- (BOOL)bulletinNotificationsSupported;
- (BOOL)cameraNotificationSettingsMigrationFileExistsOnDisk;
- (BOOL)canTopicBeForwardedToPrimaryFromResident:(id)a3;
- (BOOL)checkForNetworkRouterSupport:(unint64_t)a3 error:(id *)a4;
- (BOOL)configureWithHomeManager:(id)a3 accessoriesPresent:(id)a4 uncommittedTransactions:(id)a5 source:(unint64_t)a6;
- (BOOL)containsRemovedUser:(id)a3;
- (BOOL)currentDeviceSupportsSidekickSettings;
- (BOOL)currentDeviceSupportsSiriUnsecuringActionsWithNoPasscodeForSiriSecureAccessoryAccessController:(id)a3;
- (BOOL)currentDeviceSupportsSiriUnsecuringActionsWithWatchAuthForSiriSecureAccessoryAccessController:(id)a3;
- (BOOL)currentMatterClientRegistration;
- (BOOL)currentRemoteReachabilityRegistration;
- (BOOL)defaultRoomContainsAccessoryWithUUID:(id)a3;
- (BOOL)didOnboardAudioAnalysis;
- (BOOL)didOnboardEventLog;
- (BOOL)didOnboardLocationServices;
- (BOOL)dismissedWalletKeyUWBUnlockOnboarding;
- (BOOL)doesHomeContainResident;
- (BOOL)doesThisHomeHaveCameras;
- (BOOL)enableBulletinRegistrations:(id)a3 source:(id)a4 homeMember:(id)a5 context:(id)a6;
- (BOOL)enabledResidentsSupportsHomeHub;
- (BOOL)evaluatePredicate:(id)a3;
- (BOOL)getUpdateTransactionForAccessory:(id)a3 hapAccessory:(id)a4 accessoryTransaction:(id)a5 addSvcTransactions:(id *)a6 updateSvcTransactions:(id *)a7 removeSvcTransactions:(id *)a8;
- (BOOL)hasActiveWACPairing;
- (BOOL)hasAnyAccessoryWithACBWalletKeySupport;
- (BOOL)hasAnyAccessoryWithACPWalletKeySupport;
- (BOOL)hasAnyAccessoryWithUnifiedAccessWalletKeySupport;
- (BOOL)hasAnyAccessoryWithWalletKeyAndAccessCodeSupport;
- (BOOL)hasAnyAccessoryWithWalletKeySupport;
- (BOOL)hasAnyResident;
- (BOOL)hasAnyUserAcknowledgedCameraRecordingOnboarding;
- (BOOL)hasCharacteristicNotificationRegistrations;
- (BOOL)hasNeverAddedAnyHAPAccessory;
- (BOOL)hasOnboardedForAccessCode;
- (BOOL)hasOnboardedForWalletKey;
- (BOOL)hasPostedWalletKeyOnboardingBulletinForAnyAccessory;
- (BOOL)hasReachableAccessories;
- (BOOL)hasResidentDevicesForPrimaryResidentChangeMonitor:(id)a3;
- (BOOL)hasSharedUser;
- (BOOL)hasSiriEndpointAccessory;
- (BOOL)insertOrUpdateAudioAnalysisEventBulletinRegistrations:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 user:(id)a7 context:(id)a8;
- (BOOL)insertOrUpdateCameraAccessModeBulletinRegistration:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 user:(id)a7 context:(id)a8;
- (BOOL)insertOrUpdateCameraReachabilityBulletinRegistration:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 user:(id)a7 context:(id)a8;
- (BOOL)insertOrUpdateCameraSignificantEventBulletinRegistration:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 user:(id)a7 context:(id)a8;
- (BOOL)insertOrUpdateCharacteristicBulletinRegistration:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 homeMember:(id)a7 context:(id)a8;
- (BOOL)insertOrUpdateMatterBulletinRegistration:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 homeMember:(id)a7 context:(id)a8;
- (BOOL)isAccessAllowedForCharacteristicsWithMessage:(id)a3;
- (BOOL)isActiveNetworkRouterInitialSetupNeeded;
- (BOOL)isAdminUser;
- (BOOL)isAnyBTLEAccessoryReachable;
- (BOOL)isAppleMediaAccessory:(id)a3;
- (BOOL)isAutomaticSoftwareUpdateEnabled;
- (BOOL)isAutomaticThirdPartyAccessorySoftwareUpdateEnabled;
- (BOOL)isCarPlayAccessAllowedForActionSet:(id)a3 withMessage:(id)a4 fromSource:(unint64_t)a5;
- (BOOL)isCarPlayAccessAllowedForCharacteristic:(id)a3 withMessage:(id)a4 fromSource:(unint64_t)a5;
- (BOOL)isClientIdentifierSubscribedToAppleMediaAccessoryState:(id)a3;
- (BOOL)isCompanionReachable;
- (BOOL)isCurrentDeviceAvailableResident;
- (BOOL)isCurrentDeviceConfirmedPrimaryResident;
- (BOOL)isCurrentDevicePairedWithWatchForSiriSecureAccessoryAccessController:(id)a3;
- (BOOL)isCurrentDevicePrimaryResident;
- (BOOL)isCurrentDevicePrimaryResidentForRemoteEventRouterClientController:(id)a3;
- (BOOL)isCurrentDeviceResidentCapableForRemoteEventRouterClientController:(id)a3;
- (BOOL)isCurrentDeviceThreadBorderRouterCapable;
- (BOOL)isCurrentDeviceThreadPreferredPrimaryResident;
- (BOOL)isCurrentUserRestrictedForRemoteEventRouterClientController:(id)a3;
- (BOOL)isDeviceIdentifierPrimaryResident:(id)a3;
- (BOOL)isDevicePrimaryResident:(id)a3;
- (BOOL)isEventLogEnabled;
- (BOOL)isEventLogHomeSettingEnabled;
- (BOOL)isMediaPeerToPeerEnabled;
- (BOOL)isMediaSystem:(id)a3;
- (BOOL)isMessagedHomepodSettingsEnabledForClientController:(id)a3;
- (BOOL)isMigratingAfterResidentChange;
- (BOOL)isMultiUserEnabled;
- (BOOL)isNetworkAvailable;
- (BOOL)isOwnerTrustZoneCapable;
- (BOOL)isOwnerUser;
- (BOOL)isPrimaryResidentNodeReachable;
- (BOOL)isPrimaryResidentNodeReachableAndThreadCapable;
- (BOOL)isRemoteAccessDeviceReachable;
- (BOOL)isResidentReachable:(id)a3;
- (BOOL)isResidentSupported;
- (BOOL)isSharedAdmin;
- (BOOL)isSidekickAccessory:(id)a3;
- (BOOL)isSiriPhraseOptionsHeySiriEnabled;
- (BOOL)isSiriPhraseOptionsJustSiriEnabled;
- (BOOL)isSmokeAlarmEnabled;
- (BOOL)isThisHomeMigratedToHH2;
- (BOOL)isThreadCapable;
- (BOOL)isThreadNetworkUp;
- (BOOL)isUpdatedToHH2;
- (BOOL)locationServicesEnabled;
- (BOOL)overrideSentinelZoneForConvergencePeriod;
- (BOOL)ownerTrustZoneCapable;
- (BOOL)receivedRemoteMessageOverTransportType:(int)a3 remoteMessageSenderContext:(id)a4;
- (BOOL)registeredNotificationWithRemoteGateway;
- (BOOL)remoteAccessIsEnabled;
- (BOOL)remoteEventAllowedForTopic:(id)a3 deviceType:(unint64_t)a4 userType:(unint64_t)a5;
- (BOOL)requiresUnlockToAccessCharacteristics:(id)a3 withMessage:(id)a4;
- (BOOL)residentSyncClientDidSync;
- (BOOL)residentSyncDidSync;
- (BOOL)router:(id)a3 shouldHandleMessage:(id)a4 usingRouter:(id)a5;
- (BOOL)shouldAccessoryRemovalFallbackToLocalRemovalOnError:(id)a3 accessory:(id)a4;
- (BOOL)shouldAllowTopic:(id)a3 forDeviceWithMessageIdentifier:(id)a4;
- (BOOL)shouldEncodeHasOnboardedForWalletKey;
- (BOOL)shouldEncodeLegacyLocationServiceSettingForSettingsParentUUID:(id)a3;
- (BOOL)shouldEncodeNFCReaderKey;
- (BOOL)shouldPostBulletin;
- (BOOL)shouldRelayNotificationToRegisteredDevicesForSource:(id)a3;
- (BOOL)shouldRestrictAllMessagingToLocalTransportsForUser:(id)a3;
- (BOOL)shouldWeSendAutomationsToClients;
- (BOOL)soundCheckEnabled;
- (BOOL)startThreadNetworkInProgress;
- (BOOL)supportsDeviceWithCapabilities:(id)a3;
- (BOOL)supportsResidentSelection;
- (BOOL)supportsRouterManagement;
- (BOOL)supportsSiriEndpointOnBoarding;
- (BOOL)synchronouslyFetchIsCarPlayConnectedStatus;
- (BOOL)synchronouslyFetchIsConnectedToCarPlayNetwork;
- (BOOL)threadNetworkIsUp;
- (BOOL)threadNetworkShouldRestartOnNetworkChange;
- (BOOL)threadPreferredNetworkExists;
- (BOOL)updateCHIPPropertiesOnHomeModel:(id)a3 usingUpdatedHomeInfo:(id)a4;
- (BOOL)updateFabricUsingHomeModel:(id)a3;
- (BOOL)updateMatterFabricIDIfNeeded;
- (BOOL)validateActionsDoNotConflict:(id)a3;
- (BOOL)watchSkipVersionCheck;
- (Class)lightLogCategory;
- (Class)walletLogCategory;
- (HAPKeyStore)keychainStore;
- (HMDAccessCodeManager)accessCodeManager;
- (HMDAccessory)currentAccessory;
- (HMDAccessoryBrowserProtocol)accessoryBrowser;
- (HMDAccessoryBulletinNotificationManager)accessoryBulletinNotificationManager;
- (HMDAccessoryCount)accessoryCount;
- (HMDAccessoryInfoFetchController)accessoryInfoFetchController;
- (HMDAccessoryNetworkProtectionGroupRegistry)networkProtectionGroupRegistry;
- (HMDAccessoryReachabilityChangedLogEventManager)reachabilityChangedLogEventManager;
- (HMDAccessorySettingsMessenger)accessorySettingsMessenger;
- (HMDActionSet)_createActionSetWithUUID:(void *)a3 name:(void *)a4 type:(void *)a5 fromDictionary:(void *)a6 transaction:(void *)a7 response:(void *)a8 error:;
- (HMDActionSetStateObserver)actionSetStateObserver;
- (HMDActionSetStateSubscriptionManager)actionSetStateSubscriptionManager;
- (HMDAppleAccountSettings)accountSettings;
- (HMDAppleMediaAccessoryMessageRouter)appleDeviceRouter;
- (HMDApplicationData)appData;
- (HMDAudioAnalysisBulletinNotificationManager)audioAnalysisBulletinNotificationManager;
- (HMDBackgroundTaskManager)backgroundTaskManager;
- (HMDBackingStore)backingStore;
- (HMDBulletinUserAttributionManager)bulletinUserAttributionManager;
- (HMDCHIPControllerPrivateStorage)controllerPrivateStorage;
- (HMDCHIPHomeStorage)chipStorage;
- (HMDCameraAnalysisStatePublisher)analysisStatePublisher;
- (HMDCameraBulletinNotificationManager)cameraBulletinNotificationManager;
- (HMDCarPlayDataSource)carPlayDataSource;
- (HMDDelegatingMessageRouter)accessoryMessageRouterViaPrimary;
- (HMDDevice)companionDevice;
- (HMDDevice)currentDevice;
- (HMDDeviceHomeKitSetupSession)deviceHomeKitSetupSession;
- (HMDDeviceLockStateDataSource)deviceLockStateDataSource;
- (HMDFeaturesDataSource)featureDataSource;
- (HMDFetchedAccessorySettingsSubscriber)fetchedAccessorySettingsSubscriber;
- (HMDHAPAccessory)activeNetworkRouterAccessory;
- (HMDHAPAccessoryConnectionCoordinator)accessoryConnectionCoordinator;
- (HMDHAPAccessoryReaderWriter)accessoryReaderWriter;
- (HMDHAPMetadata)hapMetadata;
- (HMDHome)initWithCoder:(id)a3;
- (HMDHome)initWithName:(id)a3 uuid:(id)a4 defaultRoomUUID:(id)a5 owner:(id)a6 homeManager:(id)a7 presenceAuth:(id)a8;
- (HMDHome)initWithName:(id)a3 uuid:(id)a4 defaultRoomUUID:(id)a5 owner:(id)a6 homeManager:(id)a7 presenceAuth:(id)a8 metricsDispatcherFactory:(id)a9 logEventSubmitter:(id)a10 dailyScheduler:(id)a11 currentUserFactory:(id)a12 residentDeviceManagerFactory:(id)a13 locationHandlerFactory:(id)a14 hapMetadata:(id)a15 siriSecureAccessoryAccessController:(id)a16 carPlayDataSource:(id)a17 deviceLockStateDataSource:(id)a18 notificationRegistry:(id)a19 administratorHandlerFactory:(id)a20 netManagerFactory:(id)a21 wifiManagerFactory:(id)a22 matterCapabilitiesFactory:(id)a23 xpcMessageTransportFactory:(id)a24 localCapabilitiesDataSource:(id)a25 notificationCenter:(id)a26 keychainStore:(id)a27 reportingSessionManager:(id)a28;
- (HMDHomeAdministratorHandler)administratorHandler;
- (HMDHomeAudioAnalysisStereoPairController)audioAnalysisStereoPairController;
- (HMDHomeHindsightCloudShareManager)hindsightCloudShareManager;
- (HMDHomeKitVersion)currentHomeKitVersion;
- (HMDHomeKitVersion)minHomeKitVersionForAccessoryNetworkProtectionChange;
- (HMDHomeKitVersion)minimumNetworkRouterSupportHomeKitVersion;
- (HMDHomeKitVersion)sharedHomeSourceVersion;
- (HMDHomeLocalDeviceCapabilitiesDataSource)localCapabilitiesDataSource;
- (HMDHomeLocationHandler)homeLocationHandler;
- (HMDHomeLockNotificationManager)lockNotificationManager;
- (HMDHomeManager)homeManager;
- (HMDHomeMediaStateSubscriber)mediaStateSubscriber;
- (HMDHomeMediaSystemHandler)mediaSystemController;
- (HMDHomeMetricsDispatcher)metricsDispatcher;
- (HMDHomeNFCReaderKey)nfcReaderKey;
- (HMDHomeNFCReaderKeyManager)nfcReaderKeyManager;
- (HMDHomeNaturalLightingContextUpdater)naturalLightingContextUpdater;
- (HMDHomeNaturalLightingCurveWriter)naturalLightingCurveWriter;
- (HMDHomeObjectChangeHandler)homeObjectChangeHandler;
- (HMDHomeObjectLookup)lookup;
- (HMDHomePeriodicReader)periodicReader;
- (HMDHomePersonDataManager)personDataManager;
- (HMDHomePersonManager)personManager;
- (HMDHomePresenceMonitor)presenceMonitor;
- (HMDHomePrimaryResidentMessagingHandler)primaryResidentMessagingHandler;
- (HMDHomeRemoteEventAccessController)homeRemoteEventAccessController;
- (HMDHomeRemoteEventRouterClientController)remoteEventRouterClientController;
- (HMDHomeReprovisionHandler)homeReprovisionHandler;
- (HMDHomeWalletKeyManager)walletKeyManager;
- (HMDLaunchHandler)launchHandler;
- (HMDLogEventDailyScheduler)dailyScheduler;
- (HMDManagedStagedValue)stagedRemoteReachabilityRegistration;
- (HMDMediaActionRouter)mediaActionRouter;
- (HMDMediaGroupSetupMetricDispatcher)homeTheaterSetupMetricDispatcher;
- (HMDMediaGroupSetupMetricDispatcher)mediaSystemSetupMetricDispatcher;
- (HMDMediaGroupsAggregateConsumer)mediaGroupsAggregateConsumer;
- (HMDMediaGroupsAggregator)mediaGroupsAggregator;
- (HMDMediaGroupsUnconfiguredParticipantOnboardingManager)mediaGroupsUnconfiguredParticipantOnboardingManager;
- (HMDModernMessagingHandler)modernMessagingHandler;
- (HMDMultiuserSettingsMessenger)multiuserSettingsMessenger;
- (HMDNaturalLightingContext)naturalLightingContext;
- (HMDNetworkRouterClientManager)routerClientManager;
- (HMDNotificationRegistry)notificationRegistry;
- (HMDPredicateUtilities)predicateUtility;
- (HMDPrimaryResidentCapabilitiesAggregator)capabilitiesAggregator;
- (HMDPrimaryResidentChangeMonitor)primaryResidentChangeMonitor;
- (HMDPrimaryResidentMessageRouter)primaryResidentMessageRouter;
- (HMDRemoteEventRouterServer)remoteEventRouterServer;
- (HMDResidentDevice)userSelectedPreferredResident;
- (HMDResidentDeviceManager)residentDeviceManager;
- (HMDResidentReachabilityNotificationManager)reachabilityNotificationManager;
- (HMDResidentSyncManager)residentSyncManager;
- (HMDRoom)roomForEntireHome;
- (HMDSelfRemovalWatchdog)selfRemovalWatchdog;
- (HMDSharedHomeUpdateHandler)sharedHomeUpdateHandler;
- (HMDSiriEndpointProfilesMessenger)siriEndpointProfilesMessenger;
- (HMDSiriSecureAccessoryAccessController)siriSecureAccessoryAccessController;
- (HMDThreadNetworkStatusReporter)threadNetworkPeriodicStatusReporter;
- (HMDUnifiedLanguageValueListSettingDataProvider)unifiedLanguageValueListSettingDataProvider;
- (HMDUser)currentUser;
- (HMDUserActionPredictionManager)userActionPredictionManager;
- (HMDUserActivityStateDetectorManager)userActivityStateDetectorManager;
- (HMDUserPresenceFeeder)presenceFeeder;
- (HMDXPCMessageReportingSessionManager)reportingSessionManager;
- (HMDXPCMessageTransportFactory)xpcMessageTransportFactory;
- (HMEDelegatingEventRouter)serverDelegatingEventRouter;
- (HMEEventForwarder)eventForwarder;
- (HMFFuture)residentSyncClientDidSyncFuture;
- (HMFMessageDestination)messageDestination;
- (HMFMessageDispatcher)msgDispatcher;
- (HMFPromise)residentSyncClientDidSyncPromise;
- (HMFTimer)disableNotificationTimer;
- (HMFTimer)modifyNotificationsCoalesceTimer;
- (HMFTimer)pendingResponsesTimer;
- (HMFTimer)reachabilityNotificationTimer;
- (HMFWiFiManager)wifiManager;
- (HMHomePersonManagerSettings)personManagerSettings;
- (HMMLogEventSubmitting)logEventSubmitter;
- (HMMTRFabric)fabric;
- (HMUserPresenceAuthorization)presenceAuthStatus;
- (HMUserPresenceCompute)presenceComputeStatus;
- (HomeIntelligenceActivityLogger)homeIntelligenceActivityLogger;
- (MTRDeviceController)matterDeviceController;
- (NSArray)accessories;
- (NSArray)accessoriesRequiringManualReconfigurationOnRouterRemoval;
- (NSArray)accessoriesWithWalletKeySupport;
- (NSArray)appleMediaAccessories;
- (NSArray)autoSelectedPreferredResidents;
- (NSArray)cameraAccessories;
- (NSArray)enabledResidents;
- (NSArray)hapAccessories;
- (NSArray)hapAccessoriesForLegacyDataBlobEncoding;
- (NSArray)matterAccessories;
- (NSArray)mediaDestinations;
- (NSArray)mediaSessionStates;
- (NSArray)mediaSessions;
- (NSArray)mediaSystems;
- (NSArray)nativeMatterAccessories;
- (NSArray)residentCapableDevices;
- (NSArray)residentEnabledDevices;
- (NSArray)triggers;
- (NSArray)users;
- (NSArray)usersSupportingPresence;
- (NSArray)wiFiRouterAccessories;
- (NSData)acwgGroupResolvingKey;
- (NSData)threadOperationalDataset;
- (NSDate)creationDate;
- (NSDate)firstHAPAccessoryAddedDate;
- (NSDate)notificationsUpdatedTime;
- (NSDictionary)assistantObject;
- (NSHashTable)connectionsDiscoveringSymptomsForNearbyDevices;
- (NSHashTable)removeAccessoryInProgressForHMDAccessories;
- (NSHashTable)unpairedSecondaryHAPAccessories;
- (NSMapTable)addPendingAccessories;
- (NSMapTable)uuidToHAPAccessoryConfigTable;
- (NSMutableArray)accessoryRemoteReachabilityEnabledClients;
- (NSMutableArray)actionSets;
- (NSMutableArray)actionSetsDisableNotificationPayload;
- (NSMutableArray)actionSetsEnableNotificationPayload;
- (NSMutableArray)assistantOperations;
- (NSMutableArray)currentTriggers;
- (NSMutableArray)discoveredAccessories;
- (NSMutableArray)matterFabricEnabledClients;
- (NSMutableArray)outgoingInvitations;
- (NSMutableArray)ownedTriggers;
- (NSMutableArray)reachabilityRegisteredDevices;
- (NSMutableArray)remoteReachabilityNotificationPendingAccessories;
- (NSMutableArray)removedUsers;
- (NSMutableArray)retrievalAccessoryCompletionTuples;
- (NSMutableArray)rooms;
- (NSMutableArray)serviceGroups;
- (NSMutableArray)services;
- (NSMutableArray)triggerOwnedActionSets;
- (NSMutableArray)unconfiguredResidentDevices;
- (NSMutableArray)usersPendingUserManagementOperations;
- (NSMutableArray)zones;
- (NSMutableDictionary)addPendingAccessoryOnboardingSetupPayloadStrings;
- (NSMutableDictionary)addPendingAccessorySetupCodeHandlers;
- (NSMutableDictionary)addPendingAccessorySetupCodes;
- (NSMutableDictionary)chipLocalSubscribers;
- (NSMutableDictionary)disableNotificationPayload;
- (NSMutableDictionary)enableNotificationPayload;
- (NSMutableDictionary)labelIdentifiersByAccessCode;
- (NSMutableDictionary)labelsByAccessCode;
- (NSMutableDictionary)matterAttributesEnableNotificationPayload;
- (NSMutableDictionary)newlyConfiguredAccessories;
- (NSMutableDictionary)notificationHandlerMap;
- (NSMutableDictionary)pendingCharacteristicThresholdPayload;
- (NSMutableDictionary)pendingResponses;
- (NSMutableDictionary)removedUserInfoByAccessCode;
- (NSMutableSet)heartbeatPingMessagesQueuedWithServer;
- (NSMutableSet)pendingResponsesForRemoteAccessSetup;
- (NSNotificationCenter)notificationCenter;
- (NSNumber)availableBSPsCount;
- (NSNumber)availableBorderRouters;
- (NSNumber)currentAdministerCATID;
- (NSNumber)currentOperateCATID;
- (NSNumber)matterFabricID;
- (NSNumber)numberOfCameras;
- (NSNumber)overriddenHomeAccessControl;
- (NSNumber)residentSelectionVersion;
- (NSObject)WiFiAssertion;
- (NSSet)notificationDeregistrations;
- (NSSet)notificationRegistrations;
- (NSString)contextID;
- (NSString)debugDescription;
- (NSString)description;
- (NSString)name;
- (NSString)ownerName;
- (NSString)threadNetworkID;
- (NSString)unfilteredThreadNetworkID;
- (NSString)urlString;
- (NSTimeZone)timeZone;
- (NSUUID)activeNetworkRouterUUID;
- (NSUUID)altTargetFabricUUID;
- (NSUUID)clientWalletKeyUUID;
- (NSUUID)contextSPIUniqueIdentifier;
- (NSUUID)personManagerZoneUUID;
- (NSUUID)primaryNetworkRouterManagingDeviceUUID;
- (NSUUID)spiClientIdentifier;
- (NSUUID)uuid;
- (NSUUID)zoneID;
- (OS_dispatch_queue)workQueue;
- (double)currentDeviceBecamePrimaryTime;
- (double)primaryResidentChangedTime;
- (id)__modelObjectsForRemovingOutgoingInvitationForUser:(id)a3;
- (id)__readWriteResponseHandler:(id)a3 unhandledRequests:(id)a4;
- (id)_addAccessoriesUsingPrimaryAccessoryModel:(void *)a3 updatedHomeInfo:(void *)a4 message:;
- (id)_addMediaSessionForCurrentAccessory:(id)a3;
- (id)_addOwnerToNewlyPairedAccessoryServer:(id)a3;
- (id)_changedHMDCharacteristicsForHAPCharacteristics:(id)a3 stateNumber:(id)a4 broadcast:(BOOL)a5 accessoryServer:(id)a6;
- (id)_characteristicNotificationPayloadsOnDirectTransports:(BOOL)a3;
- (id)_characteristicUpdatesByDestinationForNotificationRegistryDestinations:(id)a3 bulletinDestinations:(id)a4 broadcast:(BOOL)a5;
- (id)_characteristicUpdatesForChangedCharacteristics:(id)a3 bulletinCharacteristics:(id)a4 broadcast:(BOOL)a5;
- (id)_checkResidentCapabilitiesForCredentialSharing:(id)a3;
- (id)_checkResidentCapabilitiesForNativeMatter:(id)a3;
- (id)_configureTTUAndUWBOnAccessory:(id)a3 accessoryModel:(id)a4;
- (id)_configureWithFeatureSpecificDataAccessory:(id)a3 accessoryModel:(id)a4;
- (id)_createBuiltinActionSets;
- (id)_createEventsPayload:(uint64_t)a1;
- (id)_createMediaSessionWithEndpoint:(id)a3;
- (id)_createMessageForReadWriteRequest:(id)a3 source:(unint64_t)a4 withCompletionHandler:(id)a5;
- (id)_currentDeviceCapabilities;
- (id)_disablePayloadFromRemotelyUpdatedCharacteristicNotifications:(id)a3;
- (id)_discoveredAccessoriesForServer:(id)a3;
- (id)_discoveredAccessoriesForServer:(id)a3 linkType:(int64_t)a4;
- (id)_enqueueRetrievalTupleForAccessory:(id)a3 linkType:(int64_t)a4 inProgress:(BOOL *)a5 completion:(id)a6;
- (id)_getContainerForAppData:(id)a3 keyName:(id *)a4;
- (id)_getLogEventsForOperation:(BOOL)a3 startTime:(double)a4 accessories:(id)a5 requestMap:(id)a6 identifier:(id)a7 userUUID:(id)a8 source:(unint64_t)a9 bundleID:(id)a10;
- (id)_handleRenameHomeModel:(id)a3 message:(id)a4;
- (id)_handleSetNaturalLightingEnabled:(BOOL)a3 forLightProfiles:(id)a4;
- (id)_hasConfirmedPrimaryResidentDevice;
- (id)_hmdCharacteristicsForUpdatedHAPCharacteristics:(id)a3 accessoryServer:(id)a4;
- (id)_initWithCoder:(id)a3;
- (id)_outgoingInvitationForUserWithHandle:(id)a3;
- (id)_primaryAccessoryForServer:(id)a3;
- (id)_processTestModeHomeAccessControlOverride:(id)a3;
- (id)_processTestModeHomeLocationStatusOverride:(id)a3;
- (id)_processTestModeSkipHH2MigrationOverride:(id)a3;
- (id)_processTestModeUpdateHomeLocation:(id)a3;
- (id)_productDataFromHAPAccessory:(id)a3;
- (id)_pushTokenToDestinationMappingForDestinations:(id)a3;
- (id)_readDataNeededImmediatelyAfterPairing:(id)a3 intoModel:(id)a4;
- (id)_readRequestTuplesFromMessage:(id)a3 outUnhandledRequests:(id *)a4;
- (id)_removeAccessoriesCommon:(id)a3;
- (id)_removeUserFromNewlyPairedAccessoryServer:(id)a3 user:(id)a4;
- (id)_residentDeviceForResidentUser:(id)a3;
- (id)_residentUserForResidentDevice:(id)a3;
- (id)_residentUsers;
- (id)_retrieveTupleForPrimaryAccessory:(id)a3 linkType:(int64_t)a4;
- (id)_setupCodeProviderForMessage:(id)a3;
- (id)_setupDescriptionFromData:(id)a3 error:(id *)a4;
- (id)_splitCharacteristicChanges:(id)a3 changedAccessories:(id)a4;
- (id)_unexpectedCharacteristicsFromCharacteristicNotifications:(id)a3;
- (id)_userForDevice:(id)a3;
- (id)accessCodeForMatterUserWithUserUniqueID:(id)a3;
- (id)accessoriesWithUUIDs:(id)a3;
- (id)accessoryAdministerPrivilegeCATID:(BOOL)a3;
- (id)accessoryOperatePrivilegeCATID:(BOOL)a3;
- (id)accessorySettingsMessengerMessageTargetUUID;
- (id)accessoryWithDeviceIdentifier:(id)a3;
- (id)accessoryWithEndpointIdentifier:(id)a3;
- (id)accessoryWithIdentifier:(id)a3;
- (id)accessoryWithSPIClientIdentifier:(id)a3;
- (id)accessoryWithUUID:(id)a3;
- (id)actionSetWithName:(id)a3;
- (id)actionSetWithUUID:(id)a3;
- (id)actionSetsUUIDsForStateObserver:(id)a3;
- (id)actionWithDictionaryRepresentation:(id)a3;
- (id)addActionSetName:(id)a3;
- (id)addName:(id)a3;
- (id)addUserAccessCodeForUser:(id)a3 fromOutgoingInvitation:(id)a4;
- (id)allNewlyConfiguredAccessories;
- (id)appleMediaAccessoryUUIDsForMediaStateSubscriber:(id)a3;
- (id)audioDestinationControllerDataForDestination:(id)a3;
- (id)backingStoreObjects:(int64_t)a3;
- (id)backingStoreObjects:(int64_t)a3 hh2Migration:(BOOL)a4;
- (id)builtInActionSetInfo;
- (id)createAccessorySettingsLocalMessageHandlerWithHomeUUID:(id)a3 languageValuesDataProvider:(id)a4;
- (id)createAccessorySettingsMessengerWithMessageTargetUUID:(id)a3 messageDispatcher:(id)a4 messageRouter:(id)a5 messageHandler:(id)a6 logEventSubmitter:(id)a7;
- (id)createActionSetStateManager;
- (id)createActionSetStateObserver;
- (id)createActionSetWithName:(id)a3 uuid:(id)a4 type:(id)a5;
- (id)createAppleMediaAccessoriesStateMessengerWithIdentifier:(id)a3 messageDispatcher:(id)a4;
- (id)createModelForAppDataPayload:(id)a3 existingAppData:(id)a4 parentUUID:(id)a5;
- (id)createMultiuserSettingsMessenger:(id)a3 messageDispatcher:(id)a4;
- (id)createPrimaryResidentMessageRouterMetricsDispatcherWithLogEventSubmitter:(id)a3;
- (id)createPrimaryResidentMessageRouterWithHomeUUID:(id)a3 messageDispatcher:(id)a4 metricsDispatcher:(id)a5;
- (id)createSiriEndpointProfileMessageHandlerWithHomeUUID:(id)a3;
- (id)createSiriEndpointProfilesMessengerWithMessageTargetUUID:(id)a3 messageDispatcher:(id)a4 messageRouter:(id)a5 messageHandler:(id)a6;
- (id)createUnifiedLanguageValueListSettingDataProvider;
- (id)createUserUniqueIDForAccessories;
- (id)currentAccessoryHomeUUID;
- (id)currentAccessorySetupMetricDispatcher;
- (id)currentAccessoryUUIDsForMediaStateSubscriber:(id)a3;
- (id)currentDeviceControllerNodeID;
- (id)currentUserFactory;
- (id)dataProvidersForUnifiedLanguageValueListSettingDataProvider:(id)a3;
- (id)delegatingRouter:(id)a3 filteredTopics:(id)a4 forRouter:(id)a5;
- (id)delegatingRouter:(id)a3 upstreamTopicsFor:(id)a4;
- (id)deletedBackingStoreObject;
- (id)descriptionWithPointer:(BOOL)a3;
- (id)destinationControllerDataForAppleMediaAccessory:(id)a3;
- (id)destinationControllerWithCommittedDestinationIdentifier:(id)a3;
- (id)destinationControllerWithDestinationIdentifier:(id)a3;
- (id)destinationControllerWithIdentifier:(id)a3;
- (id)destinationControllers;
- (id)destinationForAppleMediaAccessory:(id)a3;
- (id)destinationForEnabledResidents;
- (id)destinationForMediaSystem:(id)a3;
- (id)destinationManagerPassingTest:(id)a3;
- (id)destinationManagerWithDestinationIdentifier:(id)a3;
- (id)destinationManagerWithParentIdentifier:(id)a3;
- (id)destinationManagersWithDestinationIdentifiers:(id)a3 supportedOptions:(unint64_t)a4;
- (id)deviceControllerWithUniqueIdentifier:(id)a3 stateObserver:(id)a4;
- (id)deviceForAccessoryUUID:(id)a3 forRemoteEventRouterClientController:(id)a4;
- (id)deviceForAppleMediaAccessoryMessageRouter:(id)a3 message:(id)a4;
- (id)deviceForPrimaryResidentForRemoteEventRouterClientController:(id)a3;
- (id)dumpActionSetDescription;
- (id)dumpBulletinNotificationRegistrationsState;
- (id)dumpCharacteristicNotificationRegistry;
- (id)dumpMediaSessionDescription;
- (id)dumpState;
- (id)emptyModelObjectWithChangeType:(unint64_t)a3;
- (id)eventRouterDumpStateInfo;
- (id)eventRouterServerDiagnosticInfo;
- (id)eventSourceForMediaGroupsAggregator:(id)a3;
- (id)eventStoreReadHandle;
- (id)eventStoreReadHandleForRemoteEventRouterClientController:(id)a3;
- (id)eventStoreWriteHandleForRemoteEventRouterClientController:(id)a3;
- (id)executeMatterNaturalLightingActions:(id)a3;
- (id)expandedTopicsWithTopics:(id)a3;
- (id)filterBuiltinActionSets:(id)a3;
- (id)findAdditionalUUIDsForUser:(id)a3;
- (id)findBulletinRegistration:(id)a3 source:(id)a4 homeMember:(id)a5 context:(id)a6;
- (id)findOrAddRestrictedGuestUserUniqueIdentifier:(id)a3 onAccessory:(id)a4 user:(id)a5 flow:(id)a6;
- (id)findOrAddUser:(id)a3 onAccessory:(id)a4 didRedispatch:(BOOL)a5 flow:(id)a6;
- (id)findOrAddUser:(id)a3 onAccessory:(id)a4 flow:(id)a5;
- (id)findOrAddUserIndexForUserUUID:(id)a3 guestName:(id)a4 accessory:(id)a5 flow:(id)a6;
- (id)findOrAddUserUniqueIDForGuestAccessCode:(id)a3 onAccessory:(id)a4;
- (id)findUserIndexForUserUUID:(id)a3 guestName:(id)a4 accessory:(id)a5;
- (id)findUserSlotForUserUniqueIdentifier:(id)a3 onAccessory:(id)a4;
- (id)getBulletinBoardNotificationSerializedFileName;
- (id)getCameraNotificationSettingsSerializedFileName;
- (id)getOrCreateUniqueIDForAccessoriesForUser:(id)a3 flow:(id)a4;
- (id)getReachabilityTupleForAccessoryUUID:(id)a3;
- (id)getServiceTransaction:(id)a3 parentUUID:(id)a4 changeType:(unint64_t)a5;
- (id)getTransactionFromHAPAccessory:(id)a3 hmdAccessory:(id)a4 uuid:(id)a5 hostAccessoryUUID:(id)a6 objectChangeType:(unint64_t)a7;
- (id)handleFindOrAddUserUniqueIdentifier:(id)a3 onAccessory:(id)a4 flow:(id)a5;
- (id)handleRemoveUserUniqueIdentifier:(id)a3 fromAccessory:(id)a4;
- (id)handleSetNaturalLightingEnabled:(BOOL)a3 forMatterLightProfiles:(id)a4;
- (id)hapAccessoriesForServer:(id)a3;
- (id)hapAccessoriesForServer:(id)a3 linkType:(int64_t)a4;
- (id)hapAccessoryServerIdentifiers;
- (id)hapAccessoryUniqueIdentifiers;
- (id)hapAccessoryWithIdentifier:(id)a3;
- (id)hapAccessoryWithIdentifier:(id)a3 instanceID:(id)a4;
- (id)hmdHAPAccessoryWithHAPAccessory:(id)a3;
- (id)homeBulletinContext;
- (id)homeConfigurationModelObjectWithChangeType:(unint64_t)a3;
- (id)homeConfigurationUUID;
- (id)hubAccessories;
- (id)invitationWithIDSInvitationIdentifier:(id)a3;
- (id)invitationWithInvitationIdentifier:(id)a3;
- (id)isAccessoryCertifiedForNaturalLighting:(id)a3;
- (id)languageValueList;
- (id)lightProfileWithUUID:(id)a3;
- (id)loadMigrationBulletinBoardNotificationsFromDisk;
- (id)loadMigrationCameraNotificationSettingsFromDisk;
- (id)localAndRemoteSubscriptionProvider;
- (id)matterAccessoriesWithNewFirmwareInstalledInHome;
- (id)matterAccessoryWithNodeID:(id)a3;
- (id)matterCapabilitiesFactory;
- (id)matterPathWithUUID:(id)a3;
- (id)mediaDestinationManagersWithHomeTheaterSupportedOptions;
- (id)mediaDestinationManagersWithSupportedOptions:(unint64_t)a3;
- (id)mediaDestinationsInRoom:(id)a3;
- (id)mediaGroupsAggregateDataTopicName;
- (id)mediaPassword;
- (id)mediaProfileForAccessoryUUID:(id)a3 stateObserver:(id)a4;
- (id)mediaProfileForAppleMediaAccessoryUUID:(id)a3 mediaStateSubscriber:(id)a4;
- (id)mediaProfileWithUUID:(id)a3;
- (id)mediaSessionStateWithIdentifier:(id)a3;
- (id)mediaSessionWithIdentifier:(id)a3;
- (id)mediaSessionWithUUID:(id)a3;
- (id)mediaSystemController:(id)a3 accessoryForUUID:(id)a4;
- (id)mediaSystemForAppleMediaAccessory:(id)a3;
- (id)mediaSystemWithUUID:(id)a3;
- (id)mediaSystemsWithUUIDs:(id)a3;
- (id)messageTargetForDeviceIdentifier:(id)a3;
- (id)modelObjectWithChangeType:(unint64_t)a3;
- (id)modelObjectWithChangeType:(unint64_t)a3 version:(int64_t)a4;
- (id)multiUserSettings;
- (id)namesOfServicesWithNewFirmwareAvailableInHome;
- (id)netManagerFactory;
- (id)notificationRegistrationsForAppleMediaAccessories;
- (id)outgoingInvitationToResendForUser:(id)a3;
- (id)outgoingInvitationWithUUID:(id)a3;
- (id)owner;
- (id)participantDataTopicForAccessory:(id)a3 mediaGroupsAggregator:(id)a4;
- (id)payloadFromEnableRegistrations:(id)a3 disableRegistration:(id)a4 source:(id)a5;
- (id)payloadFromRegistrations:(id)a3;
- (id)pendingUsers;
- (id)performReadRequests:(id)a3 loggingObject:(id)a4;
- (id)performReadRequests:(id)a3 withRetries:(int64_t)a4 timeInterval:(double)a5 loggingObject:(id)a6;
- (id)performWriteRequests:(id)a3 loggingObject:(id)a4;
- (id)performWriteRequests:(id)a3 withRetries:(int64_t)a4 timeInterval:(double)a5 loggingObject:(id)a6;
- (id)playbackArchiveWithSessionIdentifier:(id)a3;
- (id)preferredDevice;
- (id)preflightCheckLogEventWithSessionIdentifier:(id)a3 accessoryCategory:(id)a4 fetchDuration:(double)a5 firstImportCompleted:(BOOL)a6 hasMediaRouteIdentifier:(BOOL)a7 hasPairingIdentity:(BOOL)a8 hasConnectedEventRouterClient:(BOOL)a9 isCloudSignedIn:(BOOL)a10 hasManatee:(BOOL)a11 isIdsReady:(BOOL)a12 isOwnerUser:(BOOL)a13 homeUUID:(id)a14;
- (id)primaryResident;
- (id)primaryResidentDeviceIdentifierForRemoteEventRouterClientController:(id)a3;
- (id)privateDataSourceForNode:(id)a3;
- (id)receiverForParticipantAccessoryUUID:(id)a3 mediaGroupsLocalDataStorage:(id)a4;
- (id)registrationSourceFromPayload:(id)a3;
- (id)registrationsFromPayload:(id)a3 enabled:(BOOL)a4;
- (id)removeGuestAccessCode:(id)a3 fromAccessory:(id)a4;
- (id)removeName:(id)a3;
- (id)removeUser:(id)a3 fromAccessory:(id)a4;
- (id)removeUserFromMatterAccessories:(id)a3;
- (id)removeUsersFromAccessory:(id)a3;
- (id)replaceActionSetName:(id)a3 withNewName:(id)a4;
- (id)replaceName:(id)a3 withNewName:(id)a4;
- (id)resolveReceiverForMessageTargetUUID:(id)a3;
- (id)restrictedGuests;
- (id)retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:(id)a3;
- (id)retrieveNewlyAddedAccessoriesForPairedAccessoryServerInfo:(id)a3;
- (id)roomForAllDestinationParentIdentifiers:(id)a3;
- (id)roomWithName:(id)a3;
- (id)roomWithUUID:(id)a3;
- (id)roomWithUniqueIdentifier:(id)a3 forClientIdentifierSalt:(id)a4;
- (id)roomsForMediaGroupsAggregator:(id)a3;
- (id)rootDestinationManagerWithDescendantDestinationIdentifier:(id)a3;
- (id)routerForParticipantAccessoryUUID:(id)a3 mediaGroupsLocalDataStorage:(id)a4;
- (id)routerServerUserAccessControlProviderForIdentifier:(id)a3;
- (id)routerServerUserAccessControlProviderIdentifierForMessage:(id)a3;
- (id)saveUserUniqueID:(id)a3 ForGuestAccessCode:(id)a4;
- (id)serviceGroupWithName:(id)a3;
- (id)serviceGroupWithUUID:(id)a3;
- (id)sharedHomeModel;
- (id)sharedUsers;
- (id)shortDescription;
- (id)targetAccessoriesWithDestinationIdentifiers:(id)a3;
- (id)triggerOwnedActionSetWithUUID:(id)a3;
- (id)triggerWithName:(id)a3;
- (id)triggerWithUUID:(id)a3;
- (id)uniqueIDsOfAllUsers;
- (id)updateHomeWithModel:(id)a3 message:(id)a4;
- (id)updatePersonManagerSettings:(id)a3;
- (id)userFromOutgoingInvitationModel:(id)a3;
- (id)userIncludingPendingUserWithUUID:(id)a3;
- (id)userUniqueIDForGuestAccessCode:(id)a3;
- (id)userWithMergeID:(id)a3;
- (id)userWithPairingIdentity:(id)a3;
- (id)userWithPairingIdentityIdentifier:(id)a3;
- (id)userWithUUID:(id)a3;
- (id)usersIncludingPendingUsers:(BOOL)a3;
- (id)validateName:(id)a3;
- (id)wifiManagerFactory;
- (id)writeRequestTuplesFromMessage:(id)a3 outUnhandledRequests:(id *)a4;
- (id)zoneWithName:(id)a3;
- (id)zoneWithUUID:(id)a3;
- (int64_t)atHomeLevel;
- (int64_t)configurationVersion;
- (int64_t)destinationTypeForDestinationWithIdentifier:(id)a3;
- (int64_t)expectedConfigurationVersion;
- (int64_t)homeLocation;
- (int64_t)lastSyncedConfigurationVersion;
- (int64_t)minimumMediaUserPrivilege;
- (int64_t)previousReachableAccessoriesCount;
- (int64_t)previousReachableAccessoriesCountExcludingMatter;
- (int64_t)previousReachableAppleMediaAccessoriesCount;
- (int64_t)protectionMode;
- (int64_t)reachableAccessoriesCount;
- (int64_t)reachableAccessoriesCountExcludingMatter;
- (int64_t)reachableAppleMediaAccessoriesCount;
- (int64_t)threadNetworkConnectionState;
- (int64_t)threadNetworkNodeType;
- (uint64_t)isCharacteristicAllowedForCarPlayAccess:(void *)a1;
- (uint64_t)isMessageEntitledForCarPlayAccess:(uint64_t)a3 source:;
- (unint64_t)accessNotAllowedReasonCode;
- (unint64_t)accessoryCountForRoom:(id)a3;
- (unint64_t)accessorySettingsLocalMessageHandler:(id)a3 callerPrivilegeWithMessage:(id)a4;
- (unint64_t)assistantAccessCapableAccessoryCount;
- (unint64_t)audioAnalysisClassifierOptions;
- (unint64_t)deriveNetworkRouterSupport:(unint64_t)a3;
- (unint64_t)eventLogDuration;
- (unint64_t)homeHubState;
- (unint64_t)networkRouterSupport;
- (unint64_t)networkRouterSupportDisableReason;
- (unint64_t)nonIPadResidentDeviceCountForHH2Migration;
- (unint64_t)pendingUserPrivilegeFromOutgoingInvitationUUID:(id)a3;
- (unint64_t)siriPhraseOptions;
- (unint64_t)threadNetworkSequenceNumber;
- (void)__addMediaSession:(id)a3;
- (void)__encodeAccessoriesWithCoder:(id)a3 options:(unint64_t)a4;
- (void)__handleAcceptedOutgoingInvitationResponse:(id)a3 destinationAddress:(id)a4 publicKey:(id)a5 username:(id)a6 reverseShare:(id)a7 reverseShareToken:(id)a8 issuerPublicKeyER:(id)a9 presenceAuthStatus:(id)a10 completionHandler:(id)a11;
- (void)__handleAddHAPAccessoryModel:(id)a3 message:(id)a4;
- (void)__handleAddMediaAccessoryModel:(id)a3 message:(id)a4;
- (void)__handleCancelledOutgoingInvitation:(id)a3;
- (void)__handleCompletedOutgoingInvitation:(id)a3;
- (void)__handleProcessStateChange:(id)a3;
- (void)__handleUpdateRestrictedGuestSettings:(id)a3;
- (void)__registerForRemoteAccessoryReachabilityNotifications:(BOOL)a3 clientIdentifier:(id)a4;
- (void)__removeAccessory:(char)a3 isBeingReplaced:(int)a4 isForceUpdate:(void *)a5 message:;
- (void)__requestAccessoryBrowsing;
- (void)__sendOutgoingInvitation:(void *)a3 shareURL:(void *)a4 shareToken:(uint64_t)a5 suppressHomeInviteNotification:(void *)a6 logEventBuilder:;
- (void)__sendOutgoingInvitations:(id)a3 suppressHomeInviteNotification:(BOOL)a4;
- (void)__updateServiceTransaction:(id)a3 accessoryTransaction:(id)a4 service:(id)a5 accessory:(id)a6 hapService:(id)a7;
- (void)_accessoryPairingDidComplete:(id)a3 configuration:(id)a4 pairingEvent:(id)a5 accessoryServer:(id)a6 certificationStatus:(int64_t)a7 requestMessage:(id)a8;
- (void)_addAccessories:(id)a3;
- (void)_addAllUsersToAccessory:(id)a3;
- (void)_addAndMaybeAssociateMediaAccessory:(void *)a3 message:;
- (void)_addMediaAccessory:(void *)a3 message:;
- (void)_addNewTrigger:(id)a3 message:(id)a4 payloadAnnex:(id)a5 triggerModel:(id)a6;
- (void)_addOutgoingInvitations:(id)a3 message:(id)a4 transactionCompleted:(id)a5;
- (void)_addResidentWithUsername:(id)a3 publicKey:(id)a4 destination:(id)a5;
- (void)_addResponseTuplesFromDictionary:(id)a3 accessoryRequestMapTable:(id)a4 responseTuples:(id)a5 completedGroup:(id)a6 logEvents:(id)a7;
- (void)_addRetrievalCompletionTuple:(id)a3;
- (void)_addTransactionForActiveNetworkRouterAccessory:(id)a3 isReplacement:(BOOL)a4;
- (void)_addTransactionForMinimumHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3 message:(id)a4;
- (void)_addTransactionForMinimumNetworkRouterHomeKitVersion:(id)a3 message:(id)a4;
- (void)_addTransactionWithProtectionMode:(id)a3 message:(id)a4;
- (void)_addUserToContainer:(id)a3;
- (void)_addUserToIdentityRegistry:(id)a3;
- (void)_addUsersWithInviteInformations:(id)a3 message:(id)a4;
- (void)_applyDeviceLockCheck:(unint64_t)a3 forSource:(void *)a4 message:(void *)a5 completion:;
- (void)_applyNotificationDeregistrations;
- (void)_areWriteRequestsAllowed:(id)a3 message:(id)a4 completion:(id)a5;
- (void)_auditAccessForUsers;
- (void)_auditActionSetsAndTriggersForAccessory:(id)a3;
- (void)_auditAndDeregisterCharacteristicsForHAPAccessory:(id)a3;
- (void)_auditChangedCharactersitics:(id)a3;
- (void)_cancelPairingWithAccessoryDescription:(id)a3 context:(id)a4;
- (void)_cancelPairingWithAccessoryUUID:(id)a3 context:(id)a4 completionHandler:(id)a5;
- (void)_checkHomeManagerAppData:(void *)a1;
- (void)_cleanAddAccessoryOperations;
- (void)_cleanRemovedUsers:(id)a3;
- (void)_clearAccessoryNetworkProtectionStateWithTransaction:(id)a3;
- (void)_clearCHIPStorageWithCompletion:(id)a3;
- (void)_configureBulletinNotification;
- (void)_configureConfiguredResident:(id)a3 desiredConfigState:(unint64_t)a4 message:(id)a5;
- (void)_configureNetworkRouterClientManager:(id)a3;
- (void)_configurePairedAccessoriesForServer:(id)a3 reAddServices:(BOOL)a4;
- (void)_configureUnconfiguredResident:(id)a3 desiredConfigState:(unint64_t)a4;
- (void)_continueLegacyAddAccessoryWithUUID:(id)a3 unassociatedAccessory:(id)a4 setupCode:(id)a5 appID:(id)a6 message:(id)a7;
- (void)_continuePairingAfterUserConsentWithAccessoryDescription:(id)a3 progressHandlerDelegate:(id)a4 message:(id)a5;
- (void)_continuePairingAfterUserConsentWithAccessoryUUID:(id)a3 orUnassociatedAccessory:(id)a4 message:(id)a5;
- (void)_createModifyNotificationsCoalesceTimerIfNeeded;
- (void)_createUniquePSKClientConfigurationWithRequestMessage:(id)a3 pairingEvent:(id)a4 completion:(id)a5;
- (void)_dequeueRetrievalForAccessory:(id)a3 linkType:(int64_t)a4 error:(id)a5;
- (void)_deregisterDeviceForReachabilityNotification:(id)a3;
- (void)_deregisterPairedAccessory:(id)a3;
- (void)_didOnboardHindsightChanged;
- (void)_disableDirectCharacteristicNotificationsForClient:(id)a3;
- (void)_disableNotificationsForClient:(id)a3;
- (void)_disableNotificationsForDevices:(id)a3;
- (void)_dispatchCHIPReport:(id)a3 destination:(id)a4;
- (void)_enableMultiUserWithMessage:(void *)a1;
- (void)_enableNotificationsForDevices:(id)a3;
- (void)_encodeActionSets:(id)a3 coder:(id)a4;
- (void)_encodeObjectsWithAccessoriesWithCoder:(id)a3;
- (void)_encodeWithCoder:(id)a3;
- (void)_evaluateNetworkProtectionAndRouterManagement;
- (void)_evaluateNetworkProtectionSupport;
- (void)_evaluateNetworkRouterManagementForTransaction:(id)a3;
- (void)_evaluateOwnerTrustZoneCapabilityAndNotify;
- (void)_evaluateShouldRelaunchAndSetRelaunch;
- (void)_fetchMetadataFromPrimaryResidentWithCompletion:(id)a3;
- (void)_fetchMetadataOnCurrentDeviceWithCompletion:(id)a3;
- (void)_fixupHindsightOnboarding;
- (void)_fixupUsersWithoutMergeID;
- (void)_getRunTimeStateUpdateWithOptions:(unint64_t)a3 includeMediaAccessorySessionState:(BOOL)a4 includeResidentDeviceState:(BOOL)a5 completion:(id)a6;
- (void)_grantAccessAndSendOutgoingInvitation:(id)a3 suppressHomeInviteNotification:(BOOL)a4;
- (void)_handleAccessoryReachabilityChange:(id)a3;
- (void)_handleAccessoryReachabilityRegistration:(id)a3;
- (void)_handleAccessoryReachabilityRegistrationAndEnable:(id)a3;
- (void)_handleAccessoryReachabilityUpdatesTimerFired;
- (void)_handleAddAccessory:(id)a3;
- (void)_handleAddAccessoryModel:(id)a3 message:(id)a4;
- (void)_handleAddAccessoryWithDescription:(id)a3;
- (void)_handleAddAccessoryWithDescription:(void *)a3 progressHandlerDelegate:(void *)a4 message:;
- (void)_handleAddActionSet:(id)a3;
- (void)_handleAddActionSetFromBuilder:(id)a3;
- (void)_handleAddActionSetModel:(id)a3 message:(id)a4;
- (void)_handleAddEventTrigger:(id)a3;
- (void)_handleAddEventTriggerModel:(id)a3 message:(id)a4;
- (void)_handleAddHomeOwnedActionSet:(id)a3;
- (void)_handleAddOutgoingHomeInvitationModel:(id)a3 message:(id)a4;
- (void)_handleAddRoom:(id)a3;
- (void)_handleAddRoomModel:(id)a3 message:(id)a4;
- (void)_handleAddServiceGroup:(id)a3;
- (void)_handleAddServiceGroupModel:(id)a3 message:(id)a4;
- (void)_handleAddTimerTrigger:(id)a3;
- (void)_handleAddTimerTriggerModel:(id)a3 message:(id)a4;
- (void)_handleAddTriggerOwnedActionSet:(id)a3;
- (void)_handleAddUserModel:(id)a3 message:(id)a4;
- (void)_handleAddZone:(id)a3;
- (void)_handleAddZoneModel:(id)a3 message:(id)a4;
- (void)_handleAllowUserManagementMessage:(id)a3;
- (void)_handleAssistantAccessControlUpdate:(id)a3;
- (void)_handleAudioAnalysisClassifierOptionsChange:(id)a3 message:(id)a4;
- (void)_handleAudioAnalysisClassifierOptionsUpdateRequest:(id)a3;
- (void)_handleAudioAnalysisOnboardingStatusChange:(id)a3 message:(id)a4;
- (void)_handleAudioAnalysisOnboardingUpdateRequest:(id)a3;
- (void)_handleCHIPSendRemoteRequestMessage:(id)a3;
- (void)_handleCancelPairingAccessory:(id)a3;
- (void)_handleCharacteristicEnableNotification:(id)a3;
- (void)_handleCharacteristicRead:(id)a3;
- (void)_handleCharacteristicWrite:(id)a3;
- (void)_handleCharacteristicsChangedNotification:(id)a3;
- (void)_handleCoalescedModifyNotifications;
- (void)_handleConfirmResidentRequest:(id)a3;
- (void)_handleContinuePairingAccessory:(id)a3;
- (void)_handleCreateUniquePSKClientConfiguration:(id)a3;
- (void)_handleDidOnboardLocationServicesChange:(id)a3 message:(id)a4;
- (void)_handleDidReceiveIDSMessageWithNoListenerFromAddress:(id)a3;
- (void)_handleDisableNotificationsTimerFired;
- (void)_handleEnableMultiUserRequest:(id)a3;
- (void)_handleEnableNotifications:(id)a3;
- (void)_handleEventLogClearMessage:(id)a3;
- (void)_handleEventLogSetDidOnboard:(id)a3;
- (void)_handleEventLogSetDurationMessage:(id)a3;
- (void)_handleEventLogSetEnabledMessage:(id)a3;
- (void)_handleExecuteActionSet:(id)a3;
- (void)_handleExecuteConfirmationOfTrigger:(id)a3;
- (void)_handleFetchLastModifiedServiceOfType:(id)a3;
- (void)_handleFetchPresenceMapMessage:(id)a3;
- (void)_handleFetchTriggerNameRequest:(id)a3;
- (void)_handleHasAnyUserAcknowledgedCameraRecordingOnboardingChange:(id)a3 message:(id)a4;
- (void)_handleHomeDataRequest:(id)a3;
- (void)_handleHomeLocationChange:(int64_t)a3 previousLocation:(int64_t)a4;
- (void)_handleHomeLocationUpdateFromSharedAdmin:(id)a3;
- (void)_handleHomeUpdateDidOnboardLocationServicesRequest:(id)a3;
- (void)_handleHomeUpdateLocationServicesEnabledRequest:(id)a3;
- (void)_handleIncomingMTRPluginMatterRequest:(id)a3;
- (void)_handleJoinOrFormThreadNetworkMessage:(id)a3;
- (void)_handleLegacyAddAccessory:(id)a3;
- (void)_handleLocationServicesEnabledChange:(id)a3 message:(id)a4;
- (void)_handleMatterLockChangedCharacteristics:(id)a3 message:(id)a4 remoteRequest:(BOOL)a5;
- (void)_handleMediaContentProfileAccessControlUpdate:(id)a3;
- (void)_handleMediaPropertiesRead:(id)a3;
- (void)_handleMediaPropertiesWrite:(id)a3;
- (void)_handleModifyCharacteristicNotifications:(id)a3;
- (void)_handleMultiUserEnabledChange:(id)a3 message:(id)a4;
- (void)_handleMultipleCharacteristicRead:(id)a3;
- (void)_handleMultipleCharacteristicWrite:(id)a3;
- (void)_handleNetworkProtectionModeChangeForTransaction:(id)a3;
- (void)_handleOutgoingInvitations:(id)a3;
- (void)_handleOwnerSettingsUpdate:(id)a3;
- (void)_handlePendingResponsesTimerFired:(BOOL)a3;
- (void)_handlePerformMediaGroupReadinessCheck:(id)a3;
- (void)_handlePrimaryResidentDidBecomeCurrentDevice;
- (void)_handlePrimaryResidentDidBecomeOtherDevice;
- (void)_handleQueryResidentReachabilityForAccessories:(id)a3;
- (void)_handleReadMediaProperties:(id)a3 source:(unint64_t)a4 message:(id)a5 completionHandler:(id)a6;
- (void)_handleReceivedNonCloudSourcedSharedHomeModel;
- (void)_handleRemoteAddHAPAccessories:(id)a3;
- (void)_handleRemoteAddMediaAccessory:(id)a3;
- (void)_handleRemoteAddMediaAccessoryRequest:(id)a3;
- (void)_handleRemoteGatewayNotificationRegistration:(id)a3 enable:(BOOL)a4;
- (void)_handleRemoteReachabilityNotificationTimerFired;
- (void)_handleRemoteUserClientCloudShareRepairRequest:(id)a3;
- (void)_handleRemoteUserClientCloudShareRequest:(id)a3;
- (void)_handleRemoveAccessoryAfterUserConsent:(id)a3 message:(id)a4;
- (void)_handleRemoveAccessoryMessage:(id)a3;
- (void)_handleRemoveAccessoryModel:(id)a3 message:(id)a4;
- (void)_handleRemoveActionSet:(id)a3;
- (void)_handleRemoveActionSetModel:(id)a3 message:(id)a4;
- (void)_handleRemoveAppDataModel:(id)a3 message:(id)a4;
- (void)_handleRemoveClientConfiguration:(id)a3;
- (void)_handleRemoveOutgoingHomeInvitationModel:(id)a3 message:(id)a4;
- (void)_handleRemoveRoom:(id)a3;
- (void)_handleRemoveRoomModel:(id)a3 message:(id)a4;
- (void)_handleRemoveServiceGroup:(id)a3;
- (void)_handleRemoveServiceGroupModel:(id)a3 message:(id)a4;
- (void)_handleRemoveTrigger:(id)a3;
- (void)_handleRemoveTriggerModel:(id)a3 message:(id)a4;
- (void)_handleRemoveUser:(id)a3;
- (void)_handleRemoveUserModel:(id)a3 message:(id)a4;
- (void)_handleRemoveZone:(id)a3;
- (void)_handleRemoveZoneModel:(id)a3 message:(id)a4;
- (void)_handleRename:(id)a3;
- (void)_handleRequestHomeDataSync:(id)a3;
- (void)_handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage:(id)a3;
- (void)_handleResetMatterStorageRequest:(id)a3;
- (void)_handleResidentChange;
- (void)_handleResolveThreadNetworkRequest:(id)a3;
- (void)_handleResponseForElectMessageToResident:(id)a3 error:(id)a4;
- (void)_handleRetrieveAsyncResults:(id)a3;
- (void)_handleRetrieveHomeLocationForFeedback:(id)a3;
- (void)_handleRollReaderKey:(id)a3;
- (void)_handleSendingNotificationsForRequest:(id)a3 requestIdentifier:(id)a4 supportsMultiPartResponse:(BOOL)a5 characteristicUpdates:(id)a6 completion:(id)a7;
- (void)_handleSetAppData:(id)a3;
- (void)_handleSetDismissedUWBOnboarding:(id)a3;
- (void)_handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest:(id)a3;
- (void)_handleSetHasOnboardedForAccessCodeChange:(id)a3 message:(id)a4;
- (void)_handleSetHasOnboardedForAccessCodeMessage:(id)a3;
- (void)_handleSetHasOnboardedForWalletKeyChange:(id)a3 message:(id)a4;
- (void)_handleSetHasOnboardedForWalletKeyMessage:(id)a3;
- (void)_handleSetHomeManagerAppData:(id)a3;
- (void)_handleSetMinHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3;
- (void)_handleSetMinimumNetworkRouterHomeKitVersion:(id)a3;
- (void)_handleSetResidentElectionVersion:(id)a3;
- (void)_handleSharedUserSettingsUpdate:(id)a3;
- (void)_handleSiriPhraseOptionsStatusChange:(id)a3 message:(id)a4;
- (void)_handleSiriPhraseOptionsUpdateRequest:(id)a3;
- (void)_handleSoundCheckChange:(id)a3 message:(id)a4;
- (void)_handleSoundCheckUpdateRequest:(id)a3;
- (void)_handleStartDiscoveringSymptomsForNearbyDevicesMessage:(id)a3;
- (void)_handleStopDiscoveringSymptomsForNearbyDevicesMessage:(id)a3;
- (void)_handleTestUpgradeToROAR:(id)a3;
- (void)_handleThreadNetworkCredentialsRequest:(id)a3;
- (void)_handleUnjoinThreadNetworkMessage:(id)a3;
- (void)_handleUpdateAppDataModel:(id)a3 message:(id)a4;
- (void)_handleUpdateAudioAnalysisAccess:(id)a3;
- (void)_handleUpdateAutomaticSoftwareUpdate:(id)a3;
- (void)_handleUpdateAutomaticThirdPartyAccessorySoftwareUpdate:(id)a3;
- (void)_handleUpdateMediaPassword:(id)a3;
- (void)_handleUpdateMediaPeerToPeerEnabled:(id)a3;
- (void)_handleUpdateMinimumMediaUserPrivilege:(id)a3;
- (void)_handleUpdateNetworkProtection:(id)a3;
- (void)_handleUpdateNetworkProtectionWithHomeModel:(id)a3 message:(id)a4;
- (void)_handleUpdateOutgoingInvitationState:(id)a3;
- (void)_handleUpdatePresenceConsent:(id)a3;
- (void)_handleUpdateRequestForHomeInvitation:(id)a3 controllerPublicKey:(id)a4 controllerUsername:(id)a5 invitationState:(int64_t)a6 presenceAuthStatus:(id)a7 preferredUserID:(id)a8 fromHandle:(id)a9 fromAddress:(id)a10 fromMergeID:(id)a11 reverseShareURL:(id)a12 reverseShareToken:(id)a13 issuerPublicKeyER:(id)a14 message:(id)a15 messageResponseHandler:(id)a16;
- (void)_handleUpdateRestrictedGuestSettings:(id)a3;
- (void)_handleUpdateUserAccess:(id)a3;
- (void)_handleUpdateUserAnnounceAccess:(id)a3;
- (void)_handleUpdateUserCamerasAccessLevel:(id)a3;
- (void)_handleUpdatedCharacteristics:(id)a3 accessoryServer:(id)a4 stateNumber:(id)a5 broadcast:(BOOL)a6 internal:(BOOL)a7;
- (void)_handleUserConsentForAccessoryReplacement:(id)a3 consent:(BOOL)a4 message:(id)a5;
- (void)_handleUserConsentResponseForAccessory:(id)a3;
- (void)_handleUserInvitations:(id)a3;
- (void)_handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs:(id)a3;
- (void)_handleWriteMediaProperties:(id)a3 source:(unint64_t)a4 requestMessage:(id)a5 completionHandler:(id)a6;
- (void)_homeManagerAppDataChanged:(id)a3;
- (void)_incrementCurrentSequenceNumber;
- (void)_loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance:(id)a3;
- (void)_locallyAddMediaAccessory:(void *)a3 message:;
- (void)_modifyCharacteristicNotifications:(id)a3 characteristicChangeThresholds:(id)a4 mediaNotifications:(id)a5 actionSetNotificationPayload:(id)a6 enableNotification:(BOOL)a7 withDevice:(id)a8;
- (void)_modifyCharacteristicNotifications:(id)a3 characteristicChangeThresholds:(id)a4 mediaNotifications:(id)a5 actionSetNotificationPayload:(id)a6 matterAttributeNotifications:(id)a7 enableNotification:(BOOL)a8 withDevice:(id)a9 completion:(id)a10;
- (void)_modifyCharacteristicNotificationsOnResident:(id)a3 characteristicChangeThresholds:(id)a4 mediaNotifications:(id)a5 actionSetNotificationPayload:(id)a6 matterAttributeNotifications:(id)a7 enableNotification:(BOOL)a8;
- (void)_notificationPayloadsForRemoteGateway:(void *)a3 accessories:(void *)a4 enableCharacteristicNotificationPayload:(void *)a5 characteristicNotificationThresholdsPayload:(void *)a6 disableCharacteristicNotificationPayload:(void *)a7 enableMediaNotificationPayload:(void *)a8 disableMediaNotificationPayload:;
- (void)_notifyChangedActionSetResponses:(id)a3 notificationUpdateIdentifier:(id)a4 toUserDeviceAddress:(id)a5;
- (void)_notifyChangedCharacteristics:(id)a3 identifier:(id)a4 multiPartResponse:(BOOL)a5 moreMessagesInMultipart:(BOOL)a6 requestMessage:(id)a7 withCompletionHandler:(id)a8;
- (void)_notifyChangedCharacteristics:(id)a3 message:(id)a4 modifiedCharacteristics:(id)a5 broadcast:(BOOL)a6;
- (void)_notifyChangedCharacteristics:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6 broadcast:(BOOL)a7;
- (void)_notifyChangedProperties:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6;
- (void)_notifyClientOfNewlyAddedAccessories:(id)a3 requestMessage:(id)a4;
- (void)_notifyClientsOfAccessoryInfoUpdatedForAccessories:(id)a3 shouldRefreshBadge:(BOOL)a4 withCompletion:(id)a5;
- (void)_notifyClientsOfUpdatedResidentUser:(id)a3;
- (void)_notifyRemoteUsersOfChangedActionSetResponses:(id)a3;
- (void)_notifyRemoteUsersOfChangedCharacteristics:(id)a3 message:(id)a4 broadcast:(BOOL)a5;
- (void)_notifyRemoteUsersOfChangedProperties:(id)a3 requestMessageInformation:(id)a4;
- (void)_notifyRetrievalError:(id)a3 accessoryServer:(id)a4 linkType:(int64_t)a5 accessoryOperationBlock:(id)a6;
- (void)_notifyThreadLayerOfResidentChange;
- (void)_notifyUpdatedCharacteristic:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6 completion:(id)a7;
- (void)_pairAccessoryWithAccessoryDescription:(id)a3 configuration:(id)a4 pairingEvent:(id)a5 progressHandler:(id)a6 requestMessage:(id)a7;
- (void)_pairAccessoryWithAccessoryDescription:(id)a3 unpairedAccessory:(id)a4 configuration:(id)a5 pairingEvent:(id)a6 requestMessage:(id)a7;
- (void)_performAllowedWriteCharacteristicValues:(unint64_t)a3 source:(void *)a4 identifier:(uint64_t)a5 qualityOfService:(void *)a6 withCompletionHandler:(void *)a7 activity:;
- (void)_performMediaGroupReadinessCheckAndSubmitMetricEventWithTimeout:(double)a3 accessoryUUID:(id)a4 setupSessionIdentifier:(id)a5;
- (void)_performOperation:(id)a3 completion:(id)a4;
- (void)_performRemoteAddHAPAccessories:(id)a3;
- (void)_performUpdateBulletinRegistrations:(id)a3;
- (void)_postInternalNotificationForChangedCharacteristics:(id)a3 previouslyNilChangedCharacteristics:(id)a4 modifiedCharacteristics:(id)a5 changedByThisDevice:(BOOL)a6 residentShouldNotifyPeers:(BOOL)a7 message:(id)a8 broadcast:(BOOL)a9;
- (void)_processAccessoriesToAddForUnpairedAccessory:(id)a3 certificationStatus:(int64_t)a4 accessoryServer:(id)a5 networkCredential:(id)a6 pairingEvent:(id)a7 message:(id)a8 completionHandler:(id)a9;
- (void)_processLegacyPairingRequestForMessage:(id)a3 cancelPairing:(BOOL)a4 context:(id)a5;
- (void)_processOutgoingInvitationsRequest:(id)a3;
- (void)_processPairingRequestForMessage:(id)a3 cancelPairing:(BOOL)a4 context:(id)a5;
- (void)_processProductDataForNewlyAddedAccessory:(id)a3 transaction:(id)a4;
- (void)_processUnacceptReverseShareAccessForUsers;
- (void)_processUnsentOutgoingInvitations;
- (void)_processUpdatedAccessoryServer:(id)a3 reAddServices:(BOOL)a4;
- (void)_processUpdatedProductDataForAccessory:(id)a3 hapAccessory:(id)a4 transaction:(id)a5;
- (void)_purgeResidentUsers;
- (void)_reachabilityChangedForAccessory:(id)a3 reachable:(BOOL)a4;
- (void)_readCharacteristicValues:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 withCompletionHandler:(id)a6;
- (void)_readLocalHomeKeyMiscInfo;
- (void)_readProfileState:(void *)a3 viaDevice:;
- (void)_reconfigureAccessoriesOnRouterRemovalWithCompletion:(id)a3;
- (void)_reevaluateAccessoryInfoWithBadgeRefresh:(BOOL)a3;
- (void)_refreshCharacteristicValuesOnHomeNotificationEnable;
- (void)_refreshUserDisplayNames;
- (void)_registerDeviceForReachabilityNotification:(id)a3 accessoryList:(id)a4;
- (void)_registerForAccessoryReachabilityNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientIdentifier:(id)a5;
- (void)_registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientIdentifier:(id)a5;
- (void)_registerForMatterRequests;
- (void)_registerForMessages;
- (void)_registerForNotifications;
- (void)_registerForReachabilityChangeNotificationsEnabled:(BOOL)a3 completionHandler:(id)a4;
- (void)_registerForThreadNetworkEvents;
- (void)_registerPairedAccessory:(id)a3 transports:(unint64_t)a4 setupHash:(id)a5;
- (void)_registerPerformMediaGroupReadinessCheckMessage;
- (void)_registerThreadResidentCommissioningMessageHandlers;
- (void)_relayAddTriggerToResident:(id)a3;
- (void)_remoteAccessEnabled:(BOOL)a3;
- (void)_remoteAccessHealthMonitorTimerDidFire;
- (void)_remotelyAddMediaAccessory:(void *)a3 usingRemoteMessageName:(void *)a4 message:(void *)a5 fallbackBlock:;
- (void)_remotelySetNotificationsEnabled:(BOOL)a3 forActionSetUUIDs:(id)a4;
- (void)_remotelySetNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 characteristicChangeThresholds:(id)a5;
- (void)_remotelySetNotificationsEnabled:(BOOL)a3 forMatterAttributes:(id)a4;
- (void)_removeAccessories:(id)a3 message:(id)a4;
- (void)_removeAccessoriesForPrimaryAccessory:(id)a3 error:(id)a4 completionHandler:(id)a5;
- (void)_removeAccessoriesFromContainers:(id)a3;
- (void)_removeAccessory:(id)a3 completionHandler:(id)a4;
- (void)_removeAccessoryWithUUID:(id)a3 message:(id)a4;
- (void)_removeAllHomeContentsAndAccessoryPairings:(BOOL)a3 queue:(id)a4 completionHandler:(id)a5;
- (void)_removeClientConfigurationWithIdentifier:(id)a3;
- (void)_removeClientConfigurationWithIdentifier:(id)a3 completion:(id)a4;
- (void)_removeCloudData;
- (void)_removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:(id)a3;
- (void)_removeCorruptAccessories;
- (void)_removeFailedAddWithAccessoryServerInfo:(id)a3;
- (void)_removeMediaSessionWithIdentifier:(id)a3;
- (void)_removeOutgoingInvitationForUser:(id)a3;
- (void)_removePendingAccessoryAdd:(id)a3;
- (void)_removeRetrievalCompletionTuple:(id)a3;
- (void)_removeService:(id)a3;
- (void)_removeTrigger:(id)a3 message:(id)a4;
- (void)_removeUser:(id)a3;
- (void)_removeUser:(id)a3 message:(id)a4;
- (void)_removeUserFromContainer:(id)a3;
- (void)_removeWithMergeSecondaryAccessory:(id)a3 removedFromBridgeAccessory:(id)a4 completionHandler:(id)a5;
- (void)_requestRemoveClientConfigurationWithIdentifier:(id)a3;
- (void)_requestUniquePSKClientConfigurationWithCompletion:(id)a3;
- (void)_resubscribeForNotificationsOnResident:(id)a3;
- (void)_retrieveHAPAccessoryForHMDHAPAccessory:(id)a3 linkType:(int64_t)a4 forceRetrieve:(BOOL)a5 completion:(id)a6;
- (void)_retrievePreferredNetworkWithCompletion:(id)a3;
- (void)_retryStartThreadNetwork:(double)a3;
- (void)_saveAndSyncMatterFabricIDWithCompletion:(id)a3;
- (void)_saveOutgoingInvitationsWithRestrictedGuestSettings:(id)a3 inTransaction:(id)a4 message:(id)a5 transactionCompleted:(id)a6;
- (void)_saveRestrictedGuestSettingsFromOutgoingInvitation:(id)a3 managedObjectContext:(id)a4 error:(id *)a5;
- (void)_scheduleApplyNetworkRouterSettingsAction:(id)a3;
- (void)_sendClientCharacteristicsChangedNotificationWithIdentifier:(id)a3 requestMessage:(id)a4 multiPartResponse:(BOOL)a5 moreInMultiPartResponse:(BOOL)a6 characteristicChanges:(id)a7 completionHandler:(id)a8;
- (void)_sendCoalescedRemoteNotificationsForRequestMessage:(id)a3 accessories:(id)a4;
- (void)_sendInvitation:(id)a3 message:(id)a4 shareURL:(id)a5 shareToken:(id)a6 suppressHomeInviteNotification:(BOOL)a7 logEventBuilder:(id)a8;
- (void)_sendInvitationCancelationRequestToInvitee:(id)a3;
- (void)_sendRemoteMessageUsingNodeId:(unint64_t)a3 payload:(id)a4 completion:(id)a5;
- (void)_sendRemoveCompletionStatusForHMDAccessories:(id)a3 withCompletion:(id)a4 error:(id)a5;
- (void)_sendResidentInviteWithDestination:(id)a3;
- (void)_setAccessories:(id)a3;
- (void)_setDidOnboardEventLog:(void *)a3 message:;
- (void)_setDismissedUWBOnboardingInLocalStore;
- (void)_setupActiveNetworkRouterAccessory:(id)a3 existingRouterAccessories:(id)a4;
- (void)_startHomeNotificationDeregistrationTimer;
- (void)_startThreadNetworkOnCommissionerForIOSWithOperationalDataset:(id)a3 completion:(id)a4;
- (void)_startThreadNetworkOnCommissionerWithCompletion:(id)a3;
- (void)_startThreadNetworkOnIOSWithCompletion:(id)a3;
- (void)_startThreadNetworkWithCompletion:(id)a3;
- (void)_stopThreadNetworkWithCompletion:(id)a3;
- (void)_submitRemovalLogEventForAccessory:(id)a3 isLocalRemoval:(BOOL)a4 isLocalFallback:(BOOL)a5 isDuplicate:(BOOL)a6 duplicateCount:(int64_t)a7 error:(id)a8;
- (void)_subscribeForHomeNotificationsFromRemoteGateway:(BOOL)a3;
- (void)_subscribeForHomeNotificationsFromRemoteGateway:(BOOL)a3 accessories:(id)a4;
- (void)_subscribeForHomeNotificationsOnDirectTransports:(void *)a1;
- (void)_subscribeForNotificationFromRemoteGateway:(void *)a1;
- (void)_testOnlyAddMediaAccessory:(id)a3 message:(id)a4;
- (void)_unconfigureNetworkRouterClientManager;
- (void)_unconfigurePairedAccessoriesForServer:(id)a3 updateReachability:(BOOL)a4;
- (void)_unitTest_setRetrievalCompletionsTimeout:(double)a3;
- (void)_unjoinThreadNetworkWithCompletion:(id)a3;
- (void)_unregisterForThreadNetworkEvents;
- (void)_updateActiveNetworkRouterAccessory:(id)a3 isReplacement:(BOOL)a4 withTransaction:(id)a5;
- (void)_updateBulletinBoardOfChangedCharacteristics:(id)a3 modifiedCharacteristics:(id)a4 changedByThisDevice:(BOOL)a5 changeNotificationFromPrimary:(BOOL)a6;
- (void)_updateConfigurationStateForResidentDevice:(id)a3 desiredConfigState:(unint64_t)a4 message:(id)a5;
- (void)_updateConfigurationVersion;
- (void)_updateExpectConfigurationVersion;
- (void)_updateHomeLocation;
- (void)_updateOwnedTriggers;
- (void)_updateOwnerSettingDependents:(id)a3 keyPath:(id)a4 value:(id)a5;
- (void)_updateReachabilityChangeToRegisteredDevices:(id)a3;
- (void)_updateRestrictedGuestHomeAccessSettingsFromOutgoingInvitation:(id)a3 forUserModel:(id)a4;
- (void)_updateThreadNetworkWithModel:(id)a3 message:(id)a4;
- (void)_updateWoWState:(id)a3;
- (void)_wol_processChangedCharacteristicResponses:(id)a3;
- (void)_writeAccessoryCapabilities:(id)a3 accessoryUUID:(id)a4 homeUUID:(id)a5;
- (void)_writeCharacteristicValues:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 withCompletionHandler:(id)a6;
- (void)_writeCharacteristicValues:(void *)a3 source:(void *)a4 message:(void *)a5 identifier:(void *)a6 qualityOfService:(void *)a7 withCompletionHandler:(void *)a8 activity:;
- (void)_writeLogData:(id)a3 logName:(id)a4 completion:(id)a5;
- (void)_writeResidentCapabilities:(id)a3 accessoryUUID:(id)a4 homeUUID:(id)a5;
- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didDiscoverAccessories:(id)a5 transaction:(id)a6 error:(id)a7;
- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didStopPairingWithError:(id)a5;
- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateCategory:(id)a5;
- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateConnectionState:(BOOL)a5 linkLayerType:(int64_t)a6 bookkeeping:(id)a7 withError:(id)a8;
- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateConnectionState:(BOOL)a5 sessionInfo:(id)a6 linkLayerType:(int64_t)a7 withError:(id)a8;
- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateHasPairings:(BOOL)a5;
- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateValuesForCharacteristics:(id)a5 stateNumber:(id)a6 broadcast:(BOOL)a7;
- (void)accessoryBrowser:(id)a3 didAddAccessoryAdvertisement:(id)a4;
- (void)accessoryBrowser:(id)a3 didFindAccessoryServer:(id)a4 stateChanged:(BOOL)a5 stateNumber:(id)a6 completion:(id)a7;
- (void)accessoryBrowser:(id)a3 didFindAccessoryServerNeedingReprovisioning:(id)a4 error:(id)a5;
- (void)accessoryBrowser:(id)a3 didFinishPairingForAccessoryServer:(id)a4;
- (void)accessoryBrowser:(id)a3 didFinishWACForAccessoryWithIdentifier:(id)a4 error:(id)a5;
- (void)accessoryBrowser:(id)a3 didRemoveAccessoryAdvertisement:(id)a4;
- (void)accessoryBrowser:(id)a3 didRemoveAccessoryServer:(id)a4 error:(id)a5;
- (void)accessoryBrowser:(id)a3 didTombstoneAccessoryServer:(id)a4;
- (void)accessoryBrowser:(id)a3 didUpdateEndpoint:(id)a4;
- (void)accessoryBrowser:(id)a3 didUpdateReachability:(BOOL)a4 forBTLEAccessoriesWithServerIdentifier:(id)a5;
- (void)accessoryBrowser:(id)a3 discoveryFailedWithError:(id)a4 accessoryServer:(id)a5 linkType:(int64_t)a6;
- (void)accessoryBrowser:(id)a3 identifier:(id)a4 reachable:(BOOL)a5;
- (void)actionSetResponsePayloadForActionSetsPayload:(id)a3 completion:(id)a4;
- (void)actionSetStateDidChangeForActionSet:(id)a3 currentActiveState:(BOOL)a4 stateObserver:(id)a5;
- (void)addAccessory:(id)a3;
- (void)addCompanionAsResidentUser:(id)a3;
- (void)addMediaSession:(id)a3;
- (void)addMediaSessionState:(id)a3;
- (void)addNewlyConfiguredAccessories:(id)a3 addSessionIdentifier:(id)a4;
- (void)addNotificationDeregistrationForClientIdentifier:(id)a3;
- (void)addNotificationRegistrationForClientIdentifier:(id)a3 includesAppleMediaAccessories:(BOOL)a4;
- (void)addOutgoingInvitation:(id)a3;
- (void)addResidentCapableDevice:(id)a3;
- (void)addSharedUserEventBuilder:(id)a3;
- (void)addSharedUserResponseEventBuilder:(id)a3;
- (void)addToCurrentTriggers:(id)a3;
- (void)addUnconfiguredResidentDevice:(id)a3;
- (void)addUser:(id)a3;
- (void)aggregator:(id)a3 accessoryCapabilitiesWithUUID:(id)a4 completion:(id)a5;
- (void)aggregator:(id)a3 changedAccessoryCapabilities:(id)a4 rawCapabilities:(id)a5 accessoryUUID:(id)a6 homeUUID:(id)a7;
- (void)aggregator:(id)a3 changedResidentCapabilities:(id)a4 rawCapabilities:(id)a5 accessoryUUID:(id)a6 homeUUID:(id)a7;
- (void)aggregator:(id)a3 didReceiveDeviceIRKWithUUID:(id)a4 deviceIRK:(id)a5;
- (void)aggregator:(id)a3 didReceivePublicPairingKeyWithUUID:(id)a4 pairingIdentity:(id)a5;
- (void)aggregator:(id)a3 didReceiveSoftwareVersionWithUUID:(id)a4 softwareVersion:(id)a5;
- (void)aggregator:(id)a3 residentCapabilitiesWithUUID:(id)a4 completion:(id)a5;
- (void)aggregatorDidBecomePrimary:(id)a3;
- (void)auditAccessForUsers;
- (void)auditDestinationsForNotifications:(id)a3;
- (void)btleAccessoryReachabilityProbeTimer:(BOOL)a3;
- (void)checkForCATIDUpdate:(id)a3;
- (void)clearEventsWithCompletion:(id)a3;
- (void)clientController:(id)a3 connectionStatusDidChange:(BOOL)a4;
- (void)clientController:(id)a3 didReceiveFetchedCachedEvents:(id)a4 source:(id)a5;
- (void)clientController:(id)a3 primaryClientConnectMessageFailWithError:(id)a4;
- (void)computeBridgedAccessoriesForAllBridges;
- (void)configureAccessorySettingsMessengerWithMessengerFactory:(id)a3 messageHandlerFactory:(id)a4;
- (void)configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory:(id)a3 accessories:(id)a4 uncommittedTransactions:(id)a5;
- (void)configureBulletinNotification;
- (void)configureMediaDestinationControllersForAccessories:(id)a3;
- (void)configureMediaGroupObjects;
- (void)configureMediaGroupsAggregateConsumer;
- (void)configureMediaGroupsAggregator;
- (void)configureMediaGroupsUnconfiguredParticipantOnboardingManager;
- (void)configureMediaSystems;
- (void)configureMultiuserSettingsMessengerWithMessengerFactory:(id)a3;
- (void)configureNaturalLightingForDemoMode;
- (void)configureNaturalLightingWithDemoModeEnabled:(BOOL)a3;
- (void)configurePrimaryResidentMessageRouterWithFactory:(id)a3 metricsDispatcherFactory:(id)a4;
- (void)configureRemoteEventRouterClientControllerForAccessories:(id)a3;
- (void)configureSiriEndpointProfilesMessengerWithMessengerFactory:(id)a3 messageHandlerFactory:(id)a4;
- (void)configureUnifiedLanguageValueListSettingDataProviderWithFactory:(id)a3;
- (void)configureUserActivityStateDetectorManager;
- (void)connectToThreadAccessoryWithExtendedMACAddress:(id)a3 completion:(id)a4;
- (void)convertHAPAccessoryToNativeMatter:(id)a3 accessoryModel:(id)a4;
- (void)createAndConfigureBulletinManagers;
- (void)createRemoteEventRouterServerIfNeeded;
- (void)dealloc;
- (void)didReceiveAccessorySetting:(id)a3 accessoryUUID:(id)a4;
- (void)didUpdateAggregateDataForMediaGroupsAggregateConsumer:(id)a3;
- (void)didUpdateSubscriptionForActionSetStateWithActionSetUUID:(id)a3 isSubscribed:(BOOL)a4;
- (void)disableBulletinRegistrations:(id)a3 source:(id)a4 homeMember:(id)a5 context:(id)a6;
- (void)disableNotificationsForDevices:(id)a3;
- (void)discoverPrimaryResidentForEventRouterClientController:(id)a3;
- (void)dispatchRequestToEvaluateCondition:(id)a3 forCharacteristics:(id)a4 completion:(id)a5;
- (void)doFullImportWithCompletion:(id)a3;
- (void)downloadLogWithController:(id)a3 nodeId:(id)a4 type:(int64_t)a5 timeout:(double)a6 completion:(id)a7;
- (void)enableMultiUser;
- (void)enableNotificationsForDevices:(id)a3;
- (void)enableUserListeningHistoryForAccessoryUUID:(id)a3 userUUID:(id)a4;
- (void)encodeMediaSystemsWithCoder:(id)a3 modifiedOptions:(unint64_t)a4;
- (void)encodeWithCoder:(id)a3;
- (void)endReportingSessionForMessage:(id)a3;
- (void)evaluateBulletinNotificationsSupported;
- (void)evaluateNotificationConditionForCharacteristics:(id)a3 homePresence:(id)a4 completion:(id)a5;
- (void)evaluateResidentUpdate;
- (void)evaluateShouldRelaunchAndSetRelaunch;
- (void)executeActionSet:(id)a3;
- (void)executeActionsFromMessage:(id)a3;
- (void)fetchOperationalCertificatesForNewFabricWithFabricID:(id)a3 publicKey:(id)a4 fetchFromResident:(BOOL)a5 completion:(id)a6;
- (void)filterServiceTransactions:(id)a3 removedServiceUUIDs:(id)a4;
- (void)finishPairingForServer:(id)a3;
- (void)fixupHomeAfterDecoding;
- (void)getOrCreateUniqueIDForAccessoriesForUser:(id)a3 flow:(id)a4 completionHandler:(id)a5;
- (void)getReachableIPAccessories:(unint64_t *)a3 btleAccessories:(unint64_t *)a4 mediaAccessories:(unint64_t *)a5;
- (void)getRunTimeStateUpdateWithOptions:(unint64_t)a3 includeMediaAccessorySessionState:(BOOL)a4 includeResidentDeviceState:(BOOL)a5 completion:(id)a6;
- (void)handleAcceptRequestForIDSInvitationWithIdentifier:(id)a3 payload:(id)a4 fromAddress:(id)a5 fromMergeID:(id)a6;
- (void)handleAccessoryDidAddNetworkRouterControllerNotification:(id)a3;
- (void)handleAccessoryDidRemoveNetworkRouterControllerNotification:(id)a3;
- (void)handleAccessoryReachabilityChangeNotification:(id)a3;
- (void)handleAccountHandlesUpdated:(id)a3;
- (void)handleActiveAccountChanged:(id)a3;
- (void)handleAddMatterAccessoryModel:(id)a3 message:(id)a4;
- (void)handleCATUpdate;
- (void)handleCHIPSendRemoteRequestMessage:(id)a3;
- (void)handleCHIPSendReportMessage:(id)a3;
- (void)handleClientProcessDisconnectedNotification:(id)a3;
- (void)handleCommissioningCertificateRequest:(id)a3;
- (void)handleCommissioningCertificateRequestWithCommissionerNodeID:(id)a3 commissioneeNodeID:(id)a4 fabricID:(id)a5 publicKey:(id)a6 sender:(id)a7 completion:(id)a8;
- (void)handleCurrentAccountMergeIdentifierUpdated:(id)a3;
- (void)handleCurrentUserPrivilegeChanged:(id)a3;
- (void)handleCurrentWiFiNetworkChangedNotification:(id)a3;
- (void)handleDeclineRequestForIDSInvitationWithIdentifier:(id)a3 fromAddress:(id)a4;
- (void)handleDidReceiveIDSMessageWithNoListener:(id)a3;
- (void)handleEvaluatePredicateMessage:(id)a3;
- (void)handleFMFDeviceChangedNotification:(id)a3;
- (void)handleFetchLightProfileSettingsMessage:(id)a3;
- (void)handleFetchLightProfileSettingsMessage:(id)a3 withLightProfileUUIDs:(id)a4;
- (void)handleFindResidentsNotification:(id)a3;
- (void)handleFirstProcessDidBecomeActiveNotification:(id)a3;
- (void)handleHomeDataLoaded:(id)a3;
- (void)handleHomeWasRemoved;
- (void)handleLastProcessDidBecomeInactiveNotification:(id)a3;
- (void)handleMatterPairingCompletionNotification:(id)a3;
- (void)handleMobileAssetsUpdatedNotification:(id)a3;
- (void)handlePrimaryResidentChangeMonitorConfirmedDeviceIdentifierChangeNotification:(id)a3;
- (void)handlePrimaryResidentChangeNotification:(id)a3;
- (void)handlePrimaryResidentIsCurrentDeviceChangeNotification:(id)a3;
- (void)handleRemoteUpdateCHIPKeyValueStoreMessage:(id)a3;
- (void)handleRemoveAccessory:(id)a3 completion:(id)a4;
- (void)handleRemoveAccessoryMessage:(id)a3;
- (void)handleRemovedMediaSessions:(id)a3;
- (void)handleReportingSessionResponseMessage:(id)a3;
- (void)handleResetMatterStorageRequest:(id)a3;
- (void)handleSetNaturalLightingEnabledForLightProfilesMessage:(id)a3;
- (void)handleSetPreferredPrimaryMessage:(id)a3;
- (void)handleSignificantTimeChange;
- (void)handleSiriEndPointAddedNotification:(id)a3;
- (void)handleSwitchFromResidentSelectionToREV2:(id)a3;
- (void)handleUpdateBulletinRegistrations:(id)a3;
- (void)handleUpdatedCHIPPropertiesOnHomeModel:(id)a3 actions:(id)a4;
- (void)handleUpdatedCharacteristics:(id)a3 accessoryServer:(id)a4;
- (void)handleWiFiInfoFetchWithMessage:(id)a3;
- (void)handleXPCConnectionInvalidated:(id)a3;
- (void)incrementOperatePrivilegeCATVersion:(id)a3;
- (void)invokeCommandWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 commandId:(id)a6 fields:(id)a7 timedInvokeTimeout:(id)a8 source:(unint64_t)a9 completion:(id)a10;
- (void)matterAccessoryBecameReachable;
- (void)maybeRemoveStaleRegistrationsFromPreviousUserForSource:(id)a3 homeMember:(id)a4 context:(id)a5;
- (void)mediaSystemController:(id)a3 didRemoveMediaSystem:(id)a4;
- (void)mediaSystemController:(id)a3 removeAccessories:(id)a4 fromAssistantAccessControl:(id)a5;
- (void)mergeMediaDestinationControllerDataWithConsumer:(id)a3;
- (void)mergeMediaDestinationsWithConsumer:(id)a3;
- (void)mergeMediaGroupsAggregateDataWithConsumer:(id)a3;
- (void)migrateAfterResidentChange;
- (void)modifyCharacteristicNotifications:(id)a3 characteristicChangeThresholds:(id)a4 mediaNotifications:(id)a5 actionSetNotificationPayload:(id)a6 enableNotification:(BOOL)a7 withDevice:(id)a8;
- (void)notifyClientOfVendorInfoUpdatedForManufacturers:(id)a3 withCompletion:(id)a4;
- (void)notifyClientsOfAccessoryInfoUpdatedForAccessories:(id)a3;
- (void)notifyClientsOfReachabilityUpdateForAccessory:(id)a3;
- (void)notifyNewRemotePeersFound:(BOOL)a3 remoteUsersRemoved:(id)a4 forceRemoteNotificationRegistration:(BOOL)a5;
- (void)notifyOfAddedAccessory:(id)a3;
- (void)notifyOfChangedCharacteristic:(id)a3 changedByThisDevice:(BOOL)a4 residentShouldNotifyPeers:(BOOL)a5 message:(id)a6;
- (void)notifyOfNewlyAddedAccessoryByThisOwnerDevice:(id)a3;
- (void)notifyOfRemovedAccessory:(id)a3 source:(unint64_t)a4;
- (void)notifyRemoteUsersOfChangedCharacteristics:(id)a3 message:(id)a4 broadcast:(BOOL)a5;
- (void)notifyRemoteUsersOfChangedProperties:(id)a3 requestMessageInformation:(id)a4;
- (void)onThreadNetworkCallStateChange:(BOOL)a3;
- (void)onThreadNetworkConnectionStateChange:(int64_t)a3;
- (void)onThreadNetworkNodeTypeStateChange:(int64_t)a3;
- (void)onThreadNetworkPeripheralDeviceNodeTypeChange:(id)a3;
- (void)onThreadNetworkWakeOnDeviceConnectionStateChange:(id)a3;
- (void)performLocalAddAccessoryWithDescription:(id)a3 progressHandlerDelegate:(id)a4 completion:(id)a5;
- (void)queryPrimaryResidentReachabilityForAccessories:(id)a3 completion:(id)a4;
- (void)reEvaluateHomeHubState;
- (void)reEvaluateTriggers;
- (void)reachabilityChangedForAccessory:(id)a3 reachable:(BOOL)a4;
- (void)readAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 params:(id)a7 completion:(id)a8;
- (void)readCharacteristicValues:(id)a3 identifier:(id)a4 source:(unint64_t)a5 qualityOfService:(int64_t)a6 withCompletionHandler:(id)a7;
- (void)readCharacteristicValues:(id)a3 source:(unint64_t)a4 qualityOfService:(int64_t)a5 withCompletionHandler:(id)a6;
- (void)readCharacteristicValues:(id)a3 source:(unint64_t)a4 sourceForLogging:(id)a5 qualityOfService:(int64_t)a6 withCompletionHandler:(id)a7;
- (void)readProfileState:(id)a3 viaDevice:(id)a4;
- (void)redispatchMediaReadRequests:(id)a3 viaDevice:(id)a4 completion:(id)a5;
- (void)redispatchMediaWriteRequests:(id)a3 viaDevice:(id)a4 completion:(id)a5;
- (void)redispatchToResidentMessage:(id)a3 target:(id)a4 responseQueue:(id)a5;
- (void)redispatchToResidentMessage:(id)a3 target:(id)a4 responseQueue:(id)a5 viaDevice:(id)a6;
- (void)reevaluateAccessoryInfo;
- (void)refreshUserDisplayNames;
- (void)regionStateUpdated;
- (void)registerForAccessoryReachabilityNotifications:(BOOL)a3 registrationIdentifier:(id)a4;
- (void)registerForBulletinNotificationRegistrationHandlersUsingPolicies:(id)a3;
- (void)registerForDeviceWithCapabilities;
- (void)registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4;
- (void)registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientIdentifier:(id)a5;
- (void)registerWiFiInfoFetchMessage;
- (void)remoteAccessEnabled:(BOOL)a3;
- (void)remoteAccessHealthMonitorTimerDidFire;
- (void)remotelySetNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 characteristicChangeThresholds:(id)a5;
- (void)remotelySetNotificationsEnabled:(BOOL)a3 forMatterAttributes:(id)a4;
- (void)remotelyUpdateHomeModelWithCHIPKeyValueStore:(id)a3 removedKeys:(id)a4 completion:(id)a5;
- (void)removeAccessory:(id)a3;
- (void)removeAccessory:(id)a3 completionHandler:(id)a4;
- (void)removeAllHomeContentsAndAccessoryPairings:(BOOL)a3 queue:(id)a4 completionHandler:(id)a5;
- (void)removeAllUsersAndCloudDataFromAccessory:(id)a3 completionHandler:(id)a4;
- (void)removeBulletinBoardNotificationsMigrationFileFromDisk;
- (void)removeCameraNotificationSettingsMigrationFileFromDisk;
- (void)removeFromCurrentTriggers:(id)a3;
- (void)removeMediaSession:(id)a3;
- (void)removeMediaSessionState:(id)a3;
- (void)removeNotificationDeregistrationForClientIdentifier:(id)a3;
- (void)removeOutgoingInvitation:(id)a3;
- (void)removeResidentCapableDevice:(id)a3;
- (void)removeService:(id)a3;
- (void)removeSharedUserEventBuilder:(id)a3;
- (void)removeSharedUserResponseEventBuilder:(id)a3;
- (void)removeThreadNetworkPreferredNetworkWithCompletion:(id)a3;
- (void)removeTrigger:(id)a3;
- (void)removeTriggerNoNotification:(id)a3;
- (void)removeUnconfiguredResidentDeviceWithUserID:(id)a3;
- (void)removeUser:(id)a3;
- (void)removeUserWithUserID:(id)a3;
- (void)removeWithMergeSecondaryAccessory:(id)a3 removedFromBridgeAccessory:(id)a4 completionHandler:(id)a5;
- (void)resendOutgoingInvitationToUser:(id)a3;
- (void)resetAccessoryHashedRouteIdentifiers;
- (void)resetConfiguration;
- (void)resetHomeKeyMiscInfo;
- (void)residentDeviceManager:(id)a3 didUpdatePrimaryResident:(id)a4 previousPrimaryResident:(id)a5;
- (void)residentDeviceManager:(id)a3 didUpdateResidentAvailable:(BOOL)a4;
- (void)residentDeviceManagerDidUpdateResidents:(id)a3;
- (void)respondMessage:(id)a3 withSettingResults:(id)a4;
- (void)resubscribeForNotificationsOnResident:(id)a3;
- (void)retrieveHAPAccessoryForHMDAccessory:(id)a3 linkType:(int64_t)a4 forceRetrieve:(BOOL)a5 queue:(id)a6 completion:(id)a7;
- (void)retrieveOperationalCertificatesForFabricID:(id)a3 commissionerNodeID:(id)a4 commissioneeNodeID:(id)a5 publicKey:(id)a6 completion:(id)a7;
- (void)retrieveStateForTrackedAccessory:(id)a3 stateNumber:(id *)a4 isReachable:(BOOL *)a5 linkQuality:(unint64_t *)a6 lastSeen:(id *)a7;
- (void)retrieveThreadNetworkMetadataWithCompletion:(id)a3;
- (void)runDailyTask;
- (void)runLocationServicesEnabledUpdateWithValue:(BOOL)a3;
- (void)runLocationServicesEnabledUpdateWithValue:(BOOL)a3 message:(id)a4;
- (void)saveAndSyncWithThreadOperationalDataset:(id)a3;
- (void)saveAttributedUserUUID:(id)a3 forTargetStateCharacteristic:(id)a4;
- (void)saveClientWalletKeyUUIDToLocalStore:(id)a3;
- (void)saveToCurrentAccountWithReason:(id)a3;
- (void)scheduleRemoval;
- (void)setAccessCodeManager:(id)a3;
- (void)setAccessories:(id)a3;
- (void)setAccessoryBrowser:(id)a3;
- (void)setAccessoryBulletinNotificationManager:(id)a3;
- (void)setAccessoryConnectionCoordinator:(id)a3;
- (void)setAccessoryMessageRouterViaPrimary:(id)a3;
- (void)setAccessoryReaderWriter:(id)a3;
- (void)setAccessorySettingsMessenger:(id)a3;
- (void)setActionSets:(id)a3;
- (void)setActiveNetworkRouterInitialSetupNeeded:(BOOL)a3;
- (void)setActiveNetworkRouterUUID:(id)a3;
- (void)setAcwgGroupResolvingKey:(id)a3;
- (void)setAddPendingAccessories:(id)a3;
- (void)setAddPendingAccessorySetupCodeHandlers:(id)a3;
- (void)setAddPendingAccessorySetupCodes:(id)a3;
- (void)setAdminUser:(BOOL)a3;
- (void)setAllowsRemoteAccess:(BOOL)a3;
- (void)setAnyBTLEAccessoryReachable:(BOOL)a3;
- (void)setAppData:(id)a3;
- (void)setAppleDeviceRouter:(id)a3;
- (void)setAssistantOperations:(id)a3;
- (void)setAtHomeLevel:(int64_t)a3;
- (void)setAudioAnalysisBulletinNotificationManager:(id)a3;
- (void)setAudioAnalysisClassifierOptions:(unint64_t)a3;
- (void)setAudioAnalysisStereoPairController:(id)a3;
- (void)setAutomaticSoftwareUpdateEnabled:(BOOL)a3;
- (void)setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:(BOOL)a3;
- (void)setAvailableBSPsCount:(id)a3;
- (void)setAvailableBorderRouters:(id)a3;
- (void)setBackingStore:(id)a3;
- (void)setBulletinNotificationsSupported:(BOOL)a3;
- (void)setBulletinUserAttributionManager:(id)a3;
- (void)setCHIPReportHandlerWithSubscriber:(id)a3 handler:(id)a4;
- (void)setCameraBulletinNotificationManager:(id)a3;
- (void)setCapabilitiesAggregator:(id)a3;
- (void)setChipLocalSubscribers:(id)a3;
- (void)setChipStorage:(id)a3;
- (void)setClientWalletKeyUUID:(id)a3;
- (void)setConfigurationVersion:(int64_t)a3;
- (void)setControllerPrivateStorage:(id)a3;
- (void)setCreationDate:(id)a3;
- (void)setCurrentAdministerCATID:(id)a3;
- (void)setCurrentDeviceBecamePrimaryTime:(double)a3;
- (void)setCurrentHomeKitVersion:(id)a3;
- (void)setCurrentMatterClientRegistration:(BOOL)a3;
- (void)setCurrentOperateCATID:(id)a3;
- (void)setCurrentRemoteReachabilityRegistration:(BOOL)a3;
- (void)setCurrentTriggers:(id)a3;
- (void)setDeviceHomeKitSetupSession:(id)a3;
- (void)setDidOnboardAudioAnalysis:(BOOL)a3;
- (void)setDidOnboardEventLog:(BOOL)a3;
- (void)setDidOnboardLocationServices:(BOOL)a3;
- (void)setDisableNotificationTimer:(id)a3;
- (void)setDiscoveredAccessories:(id)a3;
- (void)setDismissedWalletKeyUWBUnlockOnboarding:(BOOL)a3;
- (void)setEventLogDuration:(unint64_t)a3;
- (void)setEventLogHomeSettingEnabled:(BOOL)a3;
- (void)setExpectedConfigurationVersion:(int64_t)a3;
- (void)setFabric:(id)a3;
- (void)setFeatureDataSource:(id)a3;
- (void)setFetchedAccessorySettingsSubscriber:(id)a3;
- (void)setFirstHAPAccessoryAddedDate:(id)a3;
- (void)setHasAnyUserAcknowledgedCameraRecordingOnboarding:(BOOL)a3;
- (void)setHasOnboardedForAccessCode:(BOOL)a3;
- (void)setHasOnboardedForWalletKey:(BOOL)a3;
- (void)setHeartbeatPingMessagesQueuedWithServer:(id)a3;
- (void)setHindsightCloudShareManager:(id)a3;
- (void)setHomeHubState:(unint64_t)a3;
- (void)setHomeLocation:(int64_t)a3;
- (void)setHomeManager:(id)a3;
- (void)setHomeReprovisionHandler:(id)a3;
- (void)setHomeUpdatedToROARAndInformClients;
- (void)setIsNetworkAvailable:(BOOL)a3;
- (void)setIsSiriPhraseOptionsHeySiriEnabled:(BOOL)a3;
- (void)setIsSiriPhraseOptionsJustSiriEnabled:(BOOL)a3;
- (void)setIsSmokeAlarmEnabled:(BOOL)a3;
- (void)setIsUpdatedToHH2:(BOOL)a3;
- (void)setLabelIdentifiersByAccessCode:(id)a3;
- (void)setLabelsByAccessCode:(id)a3;
- (void)setLastSyncedConfigurationVersion:(int64_t)a3;
- (void)setLocationServicesEnabled:(BOOL)a3;
- (void)setMatterDeviceController:(id)a3;
- (void)setMediaActionRouter:(id)a3;
- (void)setMediaGroupsAggregator:(id)a3;
- (void)setMediaGroupsUnconfiguredParticipantOnboardingManager:(id)a3;
- (void)setMediaPassword:(id)a3;
- (void)setMediaPeerToPeerEnabled:(BOOL)a3;
- (void)setMediaSessionStates:(id)a3;
- (void)setMediaSessions:(id)a3;
- (void)setMediaSettingsValue:(int64_t)a3 mediaPassword:(id)a4 enabled:(BOOL)a5;
- (void)setMediaStateSubscriber:(id)a3;
- (void)setMediaSystemController:(id)a3;
- (void)setMigratingAfterResidentChange:(BOOL)a3;
- (void)setMinHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3;
- (void)setMinimumMediaUserPrivilege:(int64_t)a3;
- (void)setMinimumNetworkRouterSupportHomeKitVersion:(id)a3;
- (void)setModifyNotificationsCoalesceTimer:(id)a3;
- (void)setMsgDispatcher:(id)a3;
- (void)setMultiUserEnabled:(BOOL)a3;
- (void)setMultiuserSettingsMessenger:(id)a3;
- (void)setName:(id)a3;
- (void)setNaturalLightingContext:(id)a3;
- (void)setNaturalLightingContextUpdater:(id)a3;
- (void)setNetManagerFactory:(id)a3;
- (void)setNetworkProtectionGroupRegistry:(id)a3;
- (void)setNetworkRouterSupport:(unint64_t)a3;
- (void)setNetworkRouterSupportDisableReason:(unint64_t)a3;
- (void)setNfcReaderKey:(id)a3;
- (void)setNotificationHandlerMap:(id)a3;
- (void)setNotificationRegistry:(id)a3;
- (void)setNotificationsUpdatedTime:(id)a3;
- (void)setNumberOfCameras:(id)a3;
- (void)setOutgoingInvitations:(id)a3;
- (void)setOverriddenHomeAccessControl:(id)a3;
- (void)setOverrideSentinelZoneForConvergencePeriod:(BOOL)a3;
- (void)setOwnedTriggers:(id)a3;
- (void)setOwnerName:(id)a3;
- (void)setOwnerTrustZoneCapable:(BOOL)a3;
- (void)setOwnerUser:(BOOL)a3;
- (void)setPendingResponses:(id)a3;
- (void)setPendingResponsesForRemoteAccessSetup:(id)a3;
- (void)setPendingResponsesTimer:(id)a3;
- (void)setPersonManagerSettings:(id)a3;
- (void)setPersonManagerZoneUUID:(id)a3;
- (void)setPresenceAuthStatus:(id)a3;
- (void)setPresenceComputeStatus:(id)a3;
- (void)setPresenceMonitor:(id)a3;
- (void)setPreviousReachableAccessoriesCount:(int64_t)a3;
- (void)setPreviousReachableAccessoriesCountExcludingMatter:(int64_t)a3;
- (void)setPreviousReachableAppleMediaAccessoriesCount:(int64_t)a3;
- (void)setPrimaryNetworkRouterManagingDeviceUUID:(id)a3;
- (void)setPrimaryResidentChangedTime:(double)a3;
- (void)setPrimaryResidentMessageRouter:(id)a3;
- (void)setProtectionMode:(int64_t)a3;
- (void)setReachabilityNotificationTimer:(id)a3;
- (void)setReachabilityRegisteredDevices:(id)a3;
- (void)setRegisteredNotificationWithRemoteGateway:(BOOL)a3;
- (void)setRemoteAccessEnabled:(BOOL)a3;
- (void)setRemoteAccessIsEnabled:(BOOL)a3;
- (void)setRemoteEventRouterClientController:(id)a3;
- (void)setRemoteEventRouterServer:(id)a3;
- (void)setRemoteReachabilityNotificationPendingAccessories:(id)a3;
- (void)setRemoveAccessoryInProgressForHMDAccessories:(id)a3;
- (void)setRemovedUserInfoByAccessCode:(id)a3;
- (void)setRemovedUsers:(id)a3;
- (void)setResidentSelectionVersion:(id)a3;
- (void)setResidentSyncClientDidSync:(BOOL)a3;
- (void)setResidentSyncManager:(id)a3;
- (void)setRetrievalAccessoryCompletionTuples:(id)a3;
- (void)setRoomForEntireHome:(id)a3;
- (void)setRooms:(id)a3;
- (void)setRouterClientManager:(id)a3;
- (void)setSelfRemovalWatchdog:(id)a3;
- (void)setServiceGroups:(id)a3;
- (void)setServices:(id)a3;
- (void)setSharedAdmin:(BOOL)a3;
- (void)setSharedHomeSourceVersion:(id)a3;
- (void)setSiriEndpointProfilesMessenger:(id)a3;
- (void)setSiriPhraseOptions:(unint64_t)a3;
- (void)setSoundCheckEnabled:(BOOL)a3;
- (void)setStartThreadNetworkInProgress:(BOOL)a3;
- (void)setThreadNetworkConnectionState:(int64_t)a3;
- (void)setThreadNetworkID:(id)a3;
- (void)setThreadNetworkIsUp:(BOOL)a3;
- (void)setThreadNetworkNodeType:(int64_t)a3;
- (void)setThreadNetworkPeriodicStatusReporter:(id)a3;
- (void)setThreadNetworkSequenceNumber:(unint64_t)a3;
- (void)setThreadNetworkShouldRestartOnNetworkChange:(BOOL)a3;
- (void)setThreadOperationalDataset:(id)a3;
- (void)setThreadPreferredNetworkExists:(BOOL)a3;
- (void)setTimeZone:(id)a3;
- (void)setTriggerOwnedActionSets:(id)a3;
- (void)setUnconfiguredResidentDevices:(id)a3;
- (void)setUnifiedLanguageValueListSettingDataProvider:(id)a3;
- (void)setUserActionPredictionManager:(id)a3;
- (void)setUserActivityStateDetectorManager:(id)a3;
- (void)setUsersPendingUserManagementOperations:(id)a3;
- (void)setUuidToHAPAccessoryConfigTable:(id)a3;
- (void)setWatchSkipVersionCheck:(BOOL)a3;
- (void)setWiFiAssertion:(id)a3;
- (void)setWifiManagerFactory:(id)a3;
- (void)setWorkQueue:(id)a3;
- (void)setZones:(id)a3;
- (void)startMonitoringMediaStateForAppleMediaAccessoryUUID:(id)a3 stateObserver:(id)a4;
- (void)startMonitoringWithCharacteristics:(id)a3 stateObserver:(id)a4 completionHandler:(id)a5;
- (void)startReportingSessionForMessage:(id)a3;
- (void)startThreadAccessoryFirmwareUpdateWithExtendedMACAddress:(id)a3 isWedDevice:(BOOL)a4 completion:(id)a5;
- (void)startThreadAccessoryPairingWithExtendedMACAddress:(id)a3 isWedDevice:(BOOL)a4 completion:(id)a5;
- (void)startThreadNetwork:(BOOL)a3;
- (void)stopMonitoringMediaStateForAppleMediaAccessoryUUID:(id)a3 stateObserver:(id)a4;
- (void)stopMonitoringWithCharacteristics:(id)a3 stateObserver:(id)a4;
- (void)stopThreadAccessoryFirmwareUpdateWithCompletion:(id)a3;
- (void)stopThreadAccessoryPairingWithCompletion:(id)a3;
- (void)stopThreadNetwork:(BOOL)a3;
- (void)stopThreadNetworkWithCompletion:(BOOL)a3 completion:(id)a4;
- (void)storeMigrationBulletinBoardNotificationsToDisk;
- (void)storeMigrationCameraNotificationSettingsToDisk;
- (void)storeMigrationCharacteristicsAuthorizationData;
- (void)submitHomeOwnerRestrictedGuestFeatureLogEvent;
- (void)submitLogEventForCommandResponse:(id)a3 nodeID:(unint64_t)a4 endpointID:(id)a5 clusterID:(id)a6 commandID:(id)a7 fields:(id)a8 source:(unint64_t)a9 error:(id)a10;
- (void)submitLogEventForWriteAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 value:(id)a7 timedWriteTimeout:(id)a8 error:(id)a9;
- (void)submitRestrictedGuestLogEvents;
- (void)submitRestrictedGuestUserInfoLogEvent;
- (void)submitRvcUsageLogEventForNodeID:(unint64_t)a3 endpointID:(id)a4 source:(unint64_t)a5 error:(id)a6;
- (void)subscribeForNotificationsFromRemoteGateway;
- (void)subscribeToAccessoryLanguageSettingsIfNeeded;
- (void)suspendedStateChangedForAccessory:(id)a3 suspendedState:(unint64_t)a4;
- (void)timerDidFire:(id)a3;
- (void)transactionObjectRemoved:(id)a3 message:(id)a4;
- (void)transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5;
- (void)unconfigure;
- (void)updateAccessoryBrowsing;
- (void)updateActionSetExecutionDates:(id)a3;
- (void)updateAppData:(id)a3 identifierKey:(id)a4 lookup:(id)a5;
- (void)updateBulletinRegistrationOnPrimaryResidentWithSource:(id)a3 enableRegistrations:(id)a4 disableRegistration:(id)a5 completionHandler:(id)a6;
- (void)updateCATIDForUsersIfNeeded:(BOOL)a3;
- (void)updateCATIDsForUsersIfNeeded:(BOOL)a3 completion:(id)a4;
- (void)updateEnabledBulletinRegistrations:(id)a3 disabledBulletinRegistrations:(id)a4 source:(id)a5 context:(id)a6 completionHandler:(id)a7;
- (void)updateHasOnboardedForWalletKey:(BOOL)a3 message:(id)a4;
- (void)updateHomeConfigurationWithModel:(id)a3 message:(id)a4;
- (void)updateHomeFirstHAPAccessoryAddedDateToNow;
- (void)updateHomeLocation;
- (void)updateHomeLocationForPairing;
- (void)updateLightProfilesSettings:(id)a3;
- (void)updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled:(BOOL)a3;
- (void)updateMediaStateWithResponses:(void *)a3 requestMessageInformation:;
- (void)updateNetworkConnectivity:(BOOL)a3 companionReachable:(BOOL)a4;
- (void)updateNetworkRouterManagingDeviceSettingsWithModel:(id)a3 message:(id)a4;
- (void)updateNetworkRouterSettingsWithModel:(id)a3 message:(id)a4;
- (void)updateROARStatus:(id)a3 message:(id)a4;
- (void)updateThreadOperationalDatasetWithHomeModel:(id)a3 message:(id)a4;
- (void)updateUserCATWithOperatePrivilege:(id)a3 administerPrivilege:(id)a4;
- (void)updateUserCATWithOperatePrivilege:(id)a3 administerPrivilege:(id)a4 completion:(id)a5;
- (void)userAssistantAccessControlDidUpdate:(id)a3 accessories:(id)a4;
- (void)writeAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 value:(id)a7 timedWriteTimeout:(id)a8 completion:(id)a9;
- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 identifier:(id)a5 transport:(id)a6 qualityOfService:(int64_t)a7 withCompletionHandler:(id)a8;
- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 message:(id)a5 identifier:(id)a6 qualityOfService:(int64_t)a7 withCompletionHandler:(id)a8;
@end

@implementation HMDHome

- (void)clearEventsWithCompletion:(id)a3
{
  v4 = _Block_copy(a3);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  v6 = self;
  sub_22F565290((uint64_t)sub_22F565940, v5);

  swift_release();
}

- (void)registerWiFiInfoFetchMessage
{
  v2 = self;
  HMDHome.registerWiFiInfoFetchMessage()();
}

- (void)handleWiFiInfoFetchWithMessage:(id)a3
{
  v4 = (objc_class *)a3;
  v5._internal = (HMFMessageInternal *)self;
  internal = v5._internal;
  v5.super.super.isa = v4;
  HMDHome.handleWiFiInfoFetch(message:)(v5);
}

- (id)preflightCheckLogEventWithSessionIdentifier:(id)a3 accessoryCategory:(id)a4 fetchDuration:(double)a5 firstImportCompleted:(BOOL)a6 hasMediaRouteIdentifier:(BOOL)a7 hasPairingIdentity:(BOOL)a8 hasConnectedEventRouterClient:(BOOL)a9 isCloudSignedIn:(BOOL)a10 hasManatee:(BOOL)a11 isIdsReady:(BOOL)a12 isOwnerUser:(BOOL)a13 homeUUID:(id)a14
{
  BOOL v38 = a8;
  BOOL v39 = a9;
  BOOL v36 = a6;
  BOOL v37 = a7;
  BOOL v34 = a11;
  BOOL v35 = a12;
  BOOL v33 = a10;
  uint64_t v17 = sub_2302DD2B0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v21 = &v32[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v19);
  v23 = &v32[-v22];
  if (a3)
  {
    uint64_t v24 = sub_2302DDBB0();
    uint64_t v26 = v25;
    if (a4)
    {
LABEL_3:
      a4 = (id)sub_2302DDBB0();
      uint64_t v28 = v27;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v26 = 0;
    if (a4) {
      goto LABEL_3;
    }
  }
  uint64_t v28 = 0;
LABEL_6:
  sub_2302DD270();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 16))(v21, v23, v17);
  id v29 = objc_allocWithZone((Class)_s10MediaGroupO22PreflightCheckLogEventCMa());
  id v30 = sub_22F6689F8(v24, v26, (uint64_t)a4, v28, v36, v37, v38, v39, a5, v33, v34, v35, a13, (uint64_t)v21, 2);
  (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v23, v17);
  return v30;
}

- (void)convertHAPAccessoryToNativeMatter:(id)a3 accessoryModel:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  v8 = self;
  sub_22F67C938(v6, v7);
}

- (void)handleAddMatterAccessoryModel:(id)a3 message:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  v8 = self;
  sub_22F67D538(v6, a4);
}

- (id)homeBulletinContext
{
  v9[2] = *MEMORY[0x263EF8340];
  v8[0] = @"home";
  v3 = [(HMDHome *)self contextID];
  v9[0] = v3;
  v8[1] = *MEMORY[0x263F0BAC8];
  v4 = [(HMDHome *)self contextSPIUniqueIdentifier];
  HMFMessage v5 = [v4 UUIDString];
  v9[1] = v5;
  id v6 = [NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];

  return v6;
}

- (NSUUID)contextSPIUniqueIdentifier
{
  v3 = +[HMDProcessInfo privateClientIdentifierSalt];
  v4 = (void *)MEMORY[0x263F08C38];
  HMFMessage v5 = [(HMDHome *)self uuid];
  id v6 = objc_msgSend(v4, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v5, v3);

  return (NSUUID *)v6;
}

- (NSString)contextID
{
  v2 = [(HMDHome *)self uuid];
  v3 = [v2 UUIDString];

  return (NSString *)v3;
}

- (void)updateHasOnboardedForWalletKey:(BOOL)a3 message:(id)a4
{
  BOOL v4 = a3;
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v6 = a4;
  if ([(HMDHome *)self hasOnboardedForWalletKey] != v4)
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    v8 = self;
    v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = HMFGetLogIdentifier();
      [(HMDHome *)v8 hasOnboardedForWalletKey];
      v11 = HMFBooleanToString();
      v12 = HMFBooleanToString();
      int v23 = 138544130;
      uint64_t v24 = v10;
      __int16 v25 = 2112;
      uint64_t v26 = v11;
      __int16 v27 = 2112;
      uint64_t v28 = v12;
      __int16 v29 = 2112;
      id v30 = v6;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Updating has onboarded for wallet key from %@ to %@ with message: %@", (uint8_t *)&v23, 0x2Au);
    }
    v13 = [HMDHomeModel alloc];
    v14 = [(HMDHome *)v8 uuid];
    v15 = [(HMDHome *)v8 homeManager];
    v16 = [v15 uuid];
    uint64_t v17 = [(HMDBackingStoreModelObject *)v13 initWithObjectChangeType:2 uuid:v14 parentUUID:v16];

    if (v4) {
      uint64_t v18 = MEMORY[0x263EFFA88];
    }
    else {
      uint64_t v18 = MEMORY[0x263EFFA80];
    }
    [(HMDHomeModel *)v17 setHasOnboardedForWalletKey:v18];
    uint64_t v19 = [(HMDHome *)v8 backingStore];
    uint64_t v20 = [v6 name];
    v21 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
    uint64_t v22 = [v19 transaction:v20 options:v21];

    [v22 add:v17 withMessage:v6];
    [v22 run];
  }
}

- (BOOL)hasPostedWalletKeyOnboardingBulletinForAnyAccessory
{
  v2 = [(HMDHome *)self accessories];
  char v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_780);

  return v3;
}

uint64_t __70__HMDHome_Wallet__hasPostedWalletKeyOnboardingBulletinForAnyAccessory__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  id v4 = v3;
  uint64_t v5 = [v4 hasPostedBulletinForWalletKeyOnboarding];

  return v5;
}

- (NSArray)accessoriesWithWalletKeySupport
{
  id v2 = [(HMDHome *)self accessories];
  char v3 = objc_msgSend(v2, "na_map:", &__block_literal_global_778);

  return (NSArray *)v3;
}

id __50__HMDHome_Wallet__accessoriesWithWalletKeySupport__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  id v4 = v3;
  id v5 = 0;
  if ([v4 supportsWalletKey]) {
    id v5 = v4;
  }

  return v5;
}

- (BOOL)hasAnyAccessoryWithWalletKeyAndAccessCodeSupport
{
  id v2 = [(HMDHome *)self accessories];
  char v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_774);

  return v3;
}

uint64_t __67__HMDHome_Wallet__hasAnyAccessoryWithWalletKeyAndAccessCodeSupport__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  id v4 = v3;
  unsigned int v5 = [v4 supportsAccessCode];
  int v6 = [v4 supportsWalletKey];

  return v6 & v5;
}

- (BOOL)hasAnyAccessoryWithACBWalletKeySupport
{
  if (!_os_feature_enabled_impl()
    || (isInternalBuild() & 1) == 0
    && !CFPreferencesGetAppBooleanValue(@"UWBUnlock", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0))
  {
    return 0;
  }
  uint64_t v8 = 0;
  v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  char v3 = [(HMDHome *)self backingStore];
  id v4 = [v3 context];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __57__HMDHome_Wallet__hasAnyAccessoryWithACBWalletKeySupport__block_invoke;
  v7[3] = &unk_264A2F0A0;
  v7[4] = self;
  v7[5] = &v8;
  [v4 unsafeSynchronousBlock:v7];

  BOOL v5 = *((unsigned char *)v9 + 24) != 0;
  _Block_object_dispose(&v8, 8);
  return v5;
}

void __57__HMDHome_Wallet__hasAnyAccessoryWithACBWalletKeySupport__block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) uuid];
  char v3 = +[HMCContext findHomeWithModelID:v2];

  id v4 = [v3 accessories];
  BOOL v5 = objc_msgSend(v4, "na_map:", &__block_literal_global_771);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __57__HMDHome_Wallet__hasAnyAccessoryWithACBWalletKeySupport__block_invoke_3;
  v6[3] = &unk_264A149F8;
  v6[4] = *(void *)(a1 + 32);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend(v5, "na_any:", v6);
}

uint64_t __57__HMDHome_Wallet__hasAnyAccessoryWithACBWalletKeySupport__block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) currentUser];
  BOOL v5 = [v4 restrictedGuestAccessSettings];
  int v6 = [v5 schedule];

  id v7 = [*(id *)(a1 + 32) currentUser];
  if ([v7 isRestrictedGuest]) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {

    goto LABEL_11;
  }
  v9 = [v6 weekDayRules];
  unint64_t v10 = [v9 count];
  char v11 = [v3 weekDayScheduleCapacity];
  if (v10 > [v11 integerValue])
  {

    uint64_t v12 = 0;
LABEL_12:

    goto LABEL_13;
  }
  v13 = [v6 yearDayRules];
  unint64_t v14 = [v13 count];
  v15 = [v3 yearDayScheduleCapacity];
  unint64_t v16 = [v15 integerValue];

  if (v14 <= v16)
  {
LABEL_11:
    id v7 = [v3 supportsMatCredACB];
    uint64_t v12 = [v7 BOOLValue];
    goto LABEL_12;
  }
  uint64_t v12 = 0;
LABEL_13:

  return v12;
}

id __57__HMDHome_Wallet__hasAnyAccessoryWithACBWalletKeySupport__block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 conformsToProtocol:&unk_26E55CBD8]) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  return v4;
}

- (BOOL)hasAnyAccessoryWithACPWalletKeySupport
{
  if (!_os_feature_enabled_impl()
    || (isInternalBuild() & 1) == 0
    && !CFPreferencesGetAppBooleanValue(@"UWBUnlock", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0))
  {
    return 0;
  }
  uint64_t v8 = 0;
  v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  id v3 = [(HMDHome *)self backingStore];
  id v4 = [v3 context];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __57__HMDHome_Wallet__hasAnyAccessoryWithACPWalletKeySupport__block_invoke;
  v7[3] = &unk_264A2F0A0;
  v7[4] = self;
  v7[5] = &v8;
  [v4 unsafeSynchronousBlock:v7];

  BOOL v5 = *((unsigned char *)v9 + 24) != 0;
  _Block_object_dispose(&v8, 8);
  return v5;
}

void __57__HMDHome_Wallet__hasAnyAccessoryWithACPWalletKeySupport__block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) uuid];
  id v3 = +[HMCContext findHomeWithModelID:v2];

  id v4 = [v3 accessories];
  BOOL v5 = objc_msgSend(v4, "na_map:", &__block_literal_global_769);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __57__HMDHome_Wallet__hasAnyAccessoryWithACPWalletKeySupport__block_invoke_3;
  v6[3] = &unk_264A149F8;
  v6[4] = *(void *)(a1 + 32);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend(v5, "na_any:", v6);
}

uint64_t __57__HMDHome_Wallet__hasAnyAccessoryWithACPWalletKeySupport__block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) currentUser];
  BOOL v5 = [v4 restrictedGuestAccessSettings];
  int v6 = [v5 schedule];

  id v7 = [*(id *)(a1 + 32) currentUser];
  if ([v7 isRestrictedGuest]) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {

    goto LABEL_11;
  }
  v9 = [v6 weekDayRules];
  unint64_t v10 = [v9 count];
  char v11 = [v3 weekDayScheduleCapacity];
  if (v10 > [v11 integerValue])
  {

    uint64_t v12 = 0;
LABEL_12:

    goto LABEL_13;
  }
  v13 = [v6 yearDayRules];
  unint64_t v14 = [v13 count];
  v15 = [v3 yearDayScheduleCapacity];
  unint64_t v16 = [v15 integerValue];

  if (v14 <= v16)
  {
LABEL_11:
    id v7 = [v3 supportsMatCredACP];
    uint64_t v12 = [v7 BOOLValue];
    goto LABEL_12;
  }
  uint64_t v12 = 0;
LABEL_13:

  return v12;
}

id __57__HMDHome_Wallet__hasAnyAccessoryWithACPWalletKeySupport__block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 conformsToProtocol:&unk_26E55CBD8]) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  return v4;
}

- (BOOL)hasAnyAccessoryWithUnifiedAccessWalletKeySupport
{
  uint64_t v7 = 0;
  BOOL v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  id v3 = [(HMDHome *)self backingStore];
  id v4 = [v3 context];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __67__HMDHome_Wallet__hasAnyAccessoryWithUnifiedAccessWalletKeySupport__block_invoke;
  v6[3] = &unk_264A2F0A0;
  v6[4] = self;
  void v6[5] = &v7;
  [v4 unsafeSynchronousBlock:v6];

  LOBYTE(v3) = *((unsigned char *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return (char)v3;
}

void __67__HMDHome_Wallet__hasAnyAccessoryWithUnifiedAccessWalletKeySupport__block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) uuid];
  id v3 = +[HMCContext findHomeWithModelID:v2];

  id v4 = [v3 accessories];
  BOOL v5 = objc_msgSend(v4, "na_map:", &__block_literal_global_2399);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __67__HMDHome_Wallet__hasAnyAccessoryWithUnifiedAccessWalletKeySupport__block_invoke_3;
  v6[3] = &unk_264A149F8;
  v6[4] = *(void *)(a1 + 32);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend(v5, "na_any:", v6);
}

uint64_t __67__HMDHome_Wallet__hasAnyAccessoryWithUnifiedAccessWalletKeySupport__block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) currentUser];
  BOOL v5 = [v4 restrictedGuestAccessSettings];
  int v6 = [v5 schedule];

  uint64_t v7 = [*(id *)(a1 + 32) currentUser];
  if ([v7 isRestrictedGuest]) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {

    goto LABEL_11;
  }
  uint64_t v9 = [v6 weekDayRules];
  unint64_t v10 = [v9 count];
  char v11 = [v3 weekDayScheduleCapacity];
  if (v10 > [v11 integerValue])
  {

    uint64_t v12 = 0;
LABEL_16:

    goto LABEL_17;
  }
  v13 = [v6 yearDayRules];
  unint64_t v14 = [v13 count];
  v15 = [v3 yearDayScheduleCapacity];
  unint64_t v16 = [v15 integerValue];

  if (v14 <= v16)
  {
LABEL_11:
    uint64_t v17 = [v3 services];
    if (objc_msgSend(v17, "na_any:", &__block_literal_global_754))
    {
      uint64_t v18 = [v3 services];
      char v19 = objc_msgSend(v18, "na_any:", &__block_literal_global_757);

      if (v19)
      {
        uint64_t v12 = 1;
        goto LABEL_17;
      }
    }
    else
    {
    }
    uint64_t v7 = [v3 supportsMatterWalletKey];
    uint64_t v12 = [v7 BOOLValue];
    goto LABEL_16;
  }
  uint64_t v12 = 0;
LABEL_17:

  return v12;
}

uint64_t __67__HMDHome_Wallet__hasAnyAccessoryWithUnifiedAccessWalletKeySupport__block_invoke_5(uint64_t a1, void *a2)
{
  id v2 = [a2 serviceType];
  id v3 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:@"00000266-0000-1000-8000-0026BB765291"];
  uint64_t v4 = objc_msgSend(v2, "hmf_isEqualToUUID:", v3);

  return v4;
}

uint64_t __67__HMDHome_Wallet__hasAnyAccessoryWithUnifiedAccessWalletKeySupport__block_invoke_4(uint64_t a1, void *a2)
{
  id v2 = [a2 serviceType];
  id v3 = objc_alloc(MEMORY[0x263F08C38]);
  uint64_t v4 = (void *)[v3 initWithUUIDString:*MEMORY[0x263F0D798]];
  uint64_t v5 = objc_msgSend(v2, "hmf_isEqualToUUID:", v4);

  return v5;
}

id __67__HMDHome_Wallet__hasAnyAccessoryWithUnifiedAccessWalletKeySupport__block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 conformsToProtocol:&unk_26E55CBD8]) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  return v4;
}

- (BOOL)hasAnyAccessoryWithWalletKeySupport
{
  if ([(HMDHome *)self hasAnyAccessoryWithUnifiedAccessWalletKeySupport])
  {
    return 1;
  }
  return [(HMDHome *)self hasAnyAccessoryWithACPWalletKeySupport];
}

+ (id)nfcIssuerKeyIdentifierWithPairingIdentity:(id)a3
{
  id v3 = [a3 publicKey];
  id v4 = [v3 data];
  uint64_t v5 = +[HMDHomeNFCReaderKey identifierForKey:v4];

  return v5;
}

- (id)matterPathWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self featureDataSource];
  int v6 = [v5 isNativeMatterEnabled];

  if (v6)
  {
    uint64_t v7 = [(HMDHome *)self matterAccessories];
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = __36__HMDHome_CHIP__matterPathWithUUID___block_invoke;
    v11[3] = &unk_264A15AE8;
    id v12 = v4;
    BOOL v8 = objc_msgSend(v7, "na_map:", v11);
    uint64_t v9 = [v8 firstObject];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id __36__HMDHome_CHIP__matterPathWithUUID___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 matterAdapter];
  id v4 = [v3 matterPathWithUUID:*(void *)(a1 + 32)];

  return v4;
}

- (BOOL)isPrimaryResidentNodeReachable
{
  id v2 = [(HMDHome *)self primaryResident];
  char v3 = [v2 isReachable];

  return v3;
}

- (id)currentDeviceControllerNodeID
{
  id v2 = [(HMDHome *)self controllerPrivateStorage];
  char v3 = [v2 cachedLocalControllerNodeID];

  return v3;
}

- (id)privateDataSourceForNode:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self controllerPrivateStorage];
  int v6 = [v5 privateDataSourceForControllerNodeID:v4];

  return v6;
}

- (BOOL)areAllThreadResidentNodesUnreachable
{
  id v2 = [(HMDHome *)self enabledResidents];
  char v3 = objc_msgSend(v2, "na_allObjectsPassTest:", &__block_literal_global_338);

  return v3;
}

uint64_t __53__HMDHome_CHIP__areAllThreadResidentNodesUnreachable__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  char v3 = [v2 capabilities];
  if ([v3 supportsThreadBorderRouter]) {
    uint64_t v4 = [v2 isReachable] ^ 1;
  }
  else {
    uint64_t v4 = 1;
  }

  return v4;
}

- (BOOL)isPrimaryResidentNodeReachableAndThreadCapable
{
  char v3 = [(HMDHome *)self primaryResident];
  if ([v3 isReachable])
  {
    uint64_t v4 = [(HMDHome *)self primaryResident];
    uint64_t v5 = [v4 capabilities];
    char v6 = [v5 supportsThreadBorderRouter];
  }
  else
  {
    char v6 = 0;
  }

  return v6;
}

- (void)updateUserCATWithOperatePrivilege:(id)a3 administerPrivilege:(id)a4 completion:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  char v11 = [(HMDHome *)self workQueue];
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  v15[2] = __82__HMDHome_CHIP__updateUserCATWithOperatePrivilege_administerPrivilege_completion___block_invoke;
  v15[3] = &unk_264A2EE30;
  v15[4] = self;
  id v16 = v8;
  id v17 = v9;
  id v18 = v10;
  id v12 = v10;
  id v13 = v9;
  id v14 = v8;
  dispatch_async(v11, v15);
}

void __82__HMDHome_CHIP__updateUserCATWithOperatePrivilege_administerPrivilege_completion___block_invoke(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) backingStore];
  char v3 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  v32 = [v2 transaction:@"UpdatingUserCATIDs" options:v3];

  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v4 = [*(id *)(v1 + 32) users];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v34 objects:v46 count:16];
  if (!v5)
  {

    goto LABEL_23;
  }
  uint64_t v7 = v5;
  char v8 = 0;
  uint64_t v9 = *(void *)v35;
  BOOL v33 = (id *)(v1 + 48);
  uint64_t v31 = v1;
  id v10 = (id *)(v1 + 40);
  *(void *)&long long v6 = 138544130;
  long long v28 = v6;
  id v30 = v4;
  do
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      if (*(void *)v35 != v9) {
        objc_enumerationMutation(v4);
      }
      id v12 = *(void **)(*((void *)&v34 + 1) + 8 * i);
      uint64_t v13 = objc_msgSend(v12, "privilege", v28);
      if (v13 != 4)
      {
        if (v13 == 3)
        {
          if (!*v33) {
            continue;
          }
          id v17 = [v12 matterCASEAuthenticatedTagID];
          char v18 = [v17 isEqual:*v33];

          id v16 = v33;
          if (v18) {
            continue;
          }
          goto LABEL_14;
        }
        if (v13) {
          continue;
        }
      }
      if (!*v10) {
        continue;
      }
      id v14 = [v12 matterCASEAuthenticatedTagID];
      char v15 = [v14 isEqual:*v10];

      id v16 = v10;
      if (v15) {
        continue;
      }
LABEL_14:
      id v19 = *v16;
      if (v19)
      {
        uint64_t v20 = v19;
        v21 = (void *)[v12 newModelWithChangeType:2];
        [v21 setMatterCASEAuthenticatedTagID:v20];
        uint64_t v22 = (void *)MEMORY[0x230FBD990]([v32 add:v21]);
        id v23 = *(id *)(v31 + 32);
        uint64_t v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          __int16 v25 = v29 = v22;
          uint64_t v26 = [v20 integerValue];
          *(_DWORD *)buf = v28;
          BOOL v39 = v25;
          __int16 v40 = 2112;
          v41 = v12;
          __int16 v42 = 2048;
          uint64_t v43 = v26;
          __int16 v44 = 2112;
          v45 = v20;
          _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Updated CATID transaction for user %@ to 0x%lX (%@)", buf, 0x2Au);

          uint64_t v22 = v29;
        }

        char v8 = 1;
        uint64_t v4 = v30;
      }
    }
    uint64_t v7 = [v4 countByEnumeratingWithState:&v34 objects:v46 count:16];
  }
  while (v7);

  uint64_t v1 = v31;
  if (v8)
  {
    [v32 run:*(void *)(v31 + 56)];
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v27 = *(void *)(v1 + 56);
  if (v27) {
    (*(void (**)(uint64_t, void))(v27 + 16))(v27, 0);
  }
LABEL_25:
}

- (void)updateUserCATWithOperatePrivilege:(id)a3 administerPrivilege:(id)a4
{
}

- (void)incrementOperatePrivilegeCATVersion:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void (**)(id, void *))a3;
  uint64_t v5 = [(HMDHome *)self accessoryOperatePrivilegeCATID:1];
  int v12 = 0;
  [MEMORY[0x263F49840] parseCaseAuthenticatedTag:v5 identifier:(char *)&v12 + 2 version:&v12];
  long long v6 = [MEMORY[0x263F49840] caseAuthenticatedTagWithIdentifier:HIWORD(v12) version:(unsigned __int16)(v12 + 1)];
  uint64_t v7 = (void *)MEMORY[0x230FBD990]();
  char v8 = self;
  uint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    uint64_t v11 = [v6 integerValue];
    *(_DWORD *)buf = 138543874;
    id v14 = v10;
    __int16 v15 = 2048;
    uint64_t v16 = v11;
    __int16 v17 = 2112;
    char v18 = v6;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Bumping tag version for operate as 0x%lX (%@)", buf, 0x20u);
  }
  v4[2](v4, v6);
}

- (id)accessoryAdministerPrivilegeCATID:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v47 = *MEMORY[0x263EF8340];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v5 = [(HMDHome *)self users];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v34 objects:v46 count:16];
  if (!v6)
  {
LABEL_21:

LABEL_22:
    char v8 = [(HMDHome *)self currentAdministerCATID];

    if (v8)
    {
      char v8 = [(HMDHome *)self currentAdministerCATID];
    }
    if (!v8 && v3)
    {
      char v8 = objc_msgSend(MEMORY[0x263F49840], "caseAuthenticatedTagWithIdentifier:version:", objc_msgSend(MEMORY[0x263F49840], "randomCASEAuthenticatedTagIdentifier"), 1);
      uint64_t v27 = (void *)MEMORY[0x230FBD990]();
      long long v28 = self;
      __int16 v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        id v30 = HMFGetLogIdentifier();
        uint64_t v31 = [v8 integerValue];
        *(_DWORD *)buf = 138543874;
        BOOL v39 = v30;
        __int16 v40 = 2048;
        uint64_t v41 = v31;
        __int16 v42 = 2112;
        uint64_t v43 = (uint64_t)v8;
        _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Generated new CAT for accessory administer 0x%lX (%@)", buf, 0x20u);
      }
    }
    goto LABEL_29;
  }
  uint64_t v7 = v6;
  BOOL v33 = v3;
  char v8 = 0;
  uint64_t v9 = *(void *)v35;
  while (2)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      if (*(void *)v35 != v9) {
        objc_enumerationMutation(v5);
      }
      uint64_t v11 = *(void **)(*((void *)&v34 + 1) + 8 * i);
      if ([v11 privilege] == 3)
      {
        if (v8
          || ([v11 matterCASEAuthenticatedTagID],
              char v18 = objc_claimAutoreleasedReturnValue(),
              v18,
              !v18))
        {
          int v12 = [v11 matterCASEAuthenticatedTagID];
          char v13 = [v12 isEqual:v8];

          if ((v13 & 1) == 0)
          {
            uint64_t v14 = [v11 matterCASEAuthenticatedTagID];
            if (v14)
            {
              __int16 v15 = (void *)v14;
              uint64_t v16 = [v11 matterCASEAuthenticatedTagID];
              char v17 = [v16 isEqual:v8];

              if ((v17 & 1) == 0)
              {
                uint64_t v19 = (void *)MEMORY[0x230FBD990]();
                uint64_t v20 = self;
                v21 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  id v23 = HMFGetLogIdentifier();
                  uint64_t v24 = [v8 integerValue];
                  __int16 v25 = [v11 matterCASEAuthenticatedTagID];
                  uint64_t v26 = [v25 integerValue];
                  *(_DWORD *)buf = 138544130;
                  BOOL v39 = v23;
                  __int16 v40 = 2048;
                  uint64_t v41 = v24;
                  __int16 v42 = 2048;
                  uint64_t v43 = v26;
                  __int16 v44 = 2112;
                  v45 = v11;
                  _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@CATID mismatch between users - current 0x%lX userCAT 0x%lX user %@", buf, 0x2Au);
                }

                BOOL v3 = v33;
                goto LABEL_21;
              }
            }
          }
        }
        else
        {
          char v8 = [v11 matterCASEAuthenticatedTagID];
        }
      }
    }
    uint64_t v7 = [v5 countByEnumeratingWithState:&v34 objects:v46 count:16];
    if (v7) {
      continue;
    }
    break;
  }

  BOOL v3 = v33;
  if (!v8) {
    goto LABEL_22;
  }
LABEL_29:
  [(HMDHome *)self setCurrentAdministerCATID:v8];
  return v8;
}

- (id)accessoryOperatePrivilegeCATID:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v47 = *MEMORY[0x263EF8340];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v5 = [(HMDHome *)self users];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v34 objects:v46 count:16];
  if (!v6)
  {
LABEL_21:

LABEL_22:
    char v8 = [(HMDHome *)self currentOperateCATID];

    if (v8)
    {
      char v8 = [(HMDHome *)self currentOperateCATID];
    }
    if (!v8 && v3)
    {
      char v8 = objc_msgSend(MEMORY[0x263F49840], "caseAuthenticatedTagWithIdentifier:version:", objc_msgSend(MEMORY[0x263F49840], "randomCASEAuthenticatedTagIdentifier"), 1);
      uint64_t v27 = (void *)MEMORY[0x230FBD990]();
      long long v28 = self;
      __int16 v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        id v30 = HMFGetLogIdentifier();
        uint64_t v31 = [v8 integerValue];
        *(_DWORD *)buf = 138543874;
        BOOL v39 = v30;
        __int16 v40 = 2048;
        uint64_t v41 = v31;
        __int16 v42 = 2112;
        uint64_t v43 = (uint64_t)v8;
        _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Generated new CAT for accessory operate 0x%lX (%@)", buf, 0x20u);
      }
    }
    goto LABEL_29;
  }
  uint64_t v7 = v6;
  BOOL v33 = v3;
  char v8 = 0;
  uint64_t v9 = *(void *)v35;
  while (2)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      if (*(void *)v35 != v9) {
        objc_enumerationMutation(v5);
      }
      uint64_t v11 = *(void **)(*((void *)&v34 + 1) + 8 * i);
      if (([v11 privilege] | 4) == 4)
      {
        if (v8
          || ([v11 matterCASEAuthenticatedTagID],
              char v18 = objc_claimAutoreleasedReturnValue(),
              v18,
              !v18))
        {
          int v12 = [v11 matterCASEAuthenticatedTagID];
          char v13 = [v12 isEqual:v8];

          if ((v13 & 1) == 0)
          {
            uint64_t v14 = [v11 matterCASEAuthenticatedTagID];
            if (v14)
            {
              __int16 v15 = (void *)v14;
              uint64_t v16 = [v11 matterCASEAuthenticatedTagID];
              char v17 = [v16 isEqual:v8];

              if ((v17 & 1) == 0)
              {
                uint64_t v19 = (void *)MEMORY[0x230FBD990]();
                uint64_t v20 = self;
                v21 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  id v23 = HMFGetLogIdentifier();
                  uint64_t v24 = [v8 integerValue];
                  __int16 v25 = [v11 matterCASEAuthenticatedTagID];
                  uint64_t v26 = [v25 integerValue];
                  *(_DWORD *)buf = 138544130;
                  BOOL v39 = v23;
                  __int16 v40 = 2048;
                  uint64_t v41 = v24;
                  __int16 v42 = 2048;
                  uint64_t v43 = v26;
                  __int16 v44 = 2112;
                  v45 = v11;
                  _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@CATID mismatch between users - current 0x%lX userCAT 0x%lX user %@", buf, 0x2Au);
                }

                BOOL v3 = v33;
                goto LABEL_21;
              }
            }
          }
        }
        else
        {
          char v8 = [v11 matterCASEAuthenticatedTagID];
        }
      }
    }
    uint64_t v7 = [v5 countByEnumeratingWithState:&v34 objects:v46 count:16];
    if (v7) {
      continue;
    }
    break;
  }

  BOOL v3 = v33;
  if (!v8) {
    goto LABEL_22;
  }
LABEL_29:
  [(HMDHome *)self setCurrentOperateCATID:v8];
  return v8;
}

- (BOOL)hasSharedUser
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = [(HMDHome *)self users];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if ([v7 privilege] == 4 || !objc_msgSend(v7, "privilege"))
        {
          BOOL v8 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      BOOL v8 = 0;
      if (v4) {
        continue;
      }
      break;
    }
  }
  else
  {
    BOOL v8 = 0;
  }
LABEL_13:

  return v8;
}

- (void)updateCATIDsForUsersIfNeeded:(BOOL)a3 completion:(id)a4
{
  BOOL v4 = a3;
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v6 = (void (**)(id, void))a4;
  if ([(HMDHome *)self _doesUsersHaveCATID] || ![(HMDHome *)self isOwnerUser]) {
    goto LABEL_16;
  }
  uint64_t v7 = [(HMDHome *)self matterAccessories];
  uint64_t v8 = [v7 count];

  if (!v8 && !v4)
  {
    uint64_t v9 = (void *)MEMORY[0x230FBD990]();
    long long v10 = self;
    long long v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      long long v12 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v27 = v12;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_DEBUG, "%{public}@Not Updating CAT as its not pairing and there are no matter accessories yet", buf, 0xCu);
    }
    goto LABEL_16;
  }
  long long v13 = [(HMDHome *)self residentDeviceManager];
  if ([v13 hasAnyResident])
  {
    uint64_t v14 = [(HMDHome *)self residentDeviceManager];
    char v15 = [v14 isCurrentDeviceConfirmedPrimaryResident];

    if (v15) {
      goto LABEL_19;
    }
  }
  else
  {
  }
  uint64_t v16 = [(HMDHome *)self residentDeviceManager];
  if ([v16 hasAnyResident])
  {

    goto LABEL_16;
  }
  char v17 = isThisDeviceDesignatedFMFDevice();

  if ((v17 & 1) == 0 && !v4)
  {
LABEL_16:
    if (v6) {
      v6[2](v6, 0);
    }
    goto LABEL_18;
  }
LABEL_19:
  char v18 = [(HMDHome *)self accessoryAdministerPrivilegeCATID:1];
  if ([(HMDHome *)self hasSharedUser])
  {
    uint64_t v19 = [(HMDHome *)self accessoryOperatePrivilegeCATID:1];
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v20 = (void *)MEMORY[0x230FBD990]();
  v21 = self;
  uint64_t v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    id v23 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138544386;
    uint64_t v27 = v23;
    __int16 v28 = 2048;
    uint64_t v29 = [v19 integerValue];
    __int16 v30 = 2112;
    uint64_t v31 = v19;
    __int16 v32 = 2048;
    uint64_t v33 = [v18 integerValue];
    __int16 v34 = 2112;
    long long v35 = v18;
    _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_DEBUG, "%{public}@Updating CAT for new user Operate 0x%lX %@, Administer 0x%lX (%@)", buf, 0x34u);
  }
  v24[0] = MEMORY[0x263EF8330];
  v24[1] = 3221225472;
  v24[2] = __57__HMDHome_CHIP__updateCATIDsForUsersIfNeeded_completion___block_invoke;
  v24[3] = &unk_264A2EDE0;
  v24[4] = v21;
  __int16 v25 = v6;
  [(HMDHome *)v21 updateUserCATWithOperatePrivilege:v19 administerPrivilege:v18 completion:v24];

LABEL_18:
}

void __57__HMDHome_CHIP__updateCATIDsForUsersIfNeeded_completion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    BOOL v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v20 = v7;
      __int16 v21 = 2112;
      id v22 = v3;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed transaction to update user CAT: %@", buf, 0x16u);
    }
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8)
    {
      uint64_t v9 = *(void (**)(void))(v8 + 16);
LABEL_10:
      v9();
    }
  }
  else if (isFeatureMatterLocalFabricConfigEnabled())
  {
    long long v10 = [*(id *)(a1 + 32) fabric];
    [v10 invalidateCachedData];

    long long v11 = [*(id *)(a1 + 32) fabric];
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    v15[2] = __57__HMDHome_CHIP__updateCATIDsForUsersIfNeeded_completion___block_invoke_331;
    v15[3] = &unk_264A2E788;
    uint64_t v12 = *(void *)(a1 + 32);
    long long v13 = *(void **)(a1 + 40);
    id v16 = 0;
    uint64_t v17 = v12;
    id v18 = v13;
    [v11 loadFabricAndControllerDataForPairing:0 fetchFromResident:0 completion:v15];
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 40);
    if (v14)
    {
      uint64_t v9 = *(void (**)(void))(v14 + 16);
      goto LABEL_10;
    }
  }
}

void __57__HMDHome_CHIP__updateCATIDsForUsersIfNeeded_completion___block_invoke_331(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    BOOL v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      int v9 = 138543618;
      long long v10 = v7;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to refresh fabric with updated CAT IDs: %@", (uint8_t *)&v9, 0x16u);
    }
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(uint64_t, void))(v8 + 16))(v8, *(void *)(a1 + 32));
  }
}

- (void)updateCATIDForUsersIfNeeded:(BOOL)a3
{
}

- (BOOL)_doesUsersHaveCATID
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v2 = [(HMDHome *)self users];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if ([v7 isAllowedToHaveCATId])
        {
          uint64_t v8 = [v7 matterCASEAuthenticatedTagID];
          if (!v8
            || (int v9 = (void *)v8,
                [v7 matterCASEAuthenticatedTagID],
                long long v10 = objc_claimAutoreleasedReturnValue(),
                int v11 = [v10 intValue],
                v10,
                v9,
                !v11))
          {
            BOOL v12 = 0;
            goto LABEL_13;
          }
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  BOOL v12 = 1;
LABEL_13:

  return v12;
}

- (void)_clearCHIPStorageWithCompletion:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self chipStorage];
  uint64_t v6 = [v5 keyValueStore];
  uint64_t v7 = [v6 count];

  if (v7)
  {
    uint64_t v8 = [HMDCHIPHomeDataSource alloc];
    int v9 = [(HMDHome *)self matterFabricID];
    long long v10 = [(HMDCHIPHomeDataSource *)v8 initWithFabricID:v9 home:self];

    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke;
    v11[3] = &unk_264A2EDE0;
    void v11[4] = self;
    id v12 = v4;
    [(HMDCHIPHomeDataSource *)v10 updateKeyValueStore:MEMORY[0x263EFFA78] completion:v11];
  }
  else
  {
    (*((void (**)(id, void))v4 + 2))(v4, 0);
  }
}

void __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke_2;
  v7[3] = &unk_264A2F870;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

- (void)_handleResetMatterStorageRequest:(id)a3
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 stringForKey:*MEMORY[0x263F0CDC8]];
  id v6 = (void *)MEMORY[0x230FBD990]();
  uint64_t v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v36 = v9;
    __int16 v37 = 2112;
    BOOL v38 = v5;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Handling request to reset Matter storage with corruption option: %@", buf, 0x16u);
  }
  if ([v5 isEqual:*MEMORY[0x263F0CDB8]])
  {
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
    {
      long long v10 = [(HMDHome *)v7 fabric];
      int v11 = [v10 storage];

      id v12 = [v11 nocSigner];
      uint64_t v13 = [v11 operationalKeyPair];
      long long v14 = (void *)v13;
      if (v12 && v13)
      {
        [v11 setNocSigner:v13];
        long long v15 = [(HMDHome *)v7 fabric];
        [v15 invalidateCachedData];

        long long v16 = [(HMDHome *)v7 fabric];
        v30[0] = MEMORY[0x263EF8330];
        v30[1] = 3221225472;
        v30[2] = __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke;
        v30[3] = &unk_264A28C88;
        id v31 = v11;
        id v32 = v12;
        uint64_t v33 = v7;
        id v34 = v4;
        [v16 createNewFabricIdentityWithCompletion:v30];

        long long v17 = v31;
      }
      else
      {
        uint64_t v23 = (void *)MEMORY[0x230FBD990]();
        uint64_t v24 = v7;
        __int16 v25 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          uint64_t v36 = v26;
          _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_ERROR, "%{public}@Cannot generate bad fabric data when fabric isn't created yet", buf, 0xCu);
        }
        long long v17 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
        [v4 respondWithError:v17];
      }
    }
    else
    {
      id v18 = (void *)MEMORY[0x230FBD990]();
      uint64_t v19 = v7;
      uint64_t v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        __int16 v21 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v36 = v21;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@Bad-cert option for resetting Matter storage is not supported in current configuration", buf, 0xCu);
      }
      id v22 = [MEMORY[0x263F087E8] hmfErrorWithCode:5];
      [v4 respondWithError:v22];
    }
  }
  else
  {
    v27[0] = MEMORY[0x263EF8330];
    v27[1] = 3221225472;
    v27[2] = __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_328;
    v27[3] = &unk_264A2E210;
    v27[4] = v7;
    id v28 = v4;
    id v29 = v5;
    [(HMDHome *)v7 _clearCHIPStorageWithCompletion:v27];
  }
}

void __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v3 = a2;
  [*(id *)(a1 + 32) setNocSigner:*(void *)(a1 + 40)];
  id v4 = [*(id *)(a1 + 48) fabric];
  [v4 invalidateCachedData];

  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = HMFGetOSLogHandle();
  id v8 = v7;
  if (v3)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      int v11 = 138543618;
      id v12 = v9;
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate bad fabric data into Matter storage: %@", (uint8_t *)&v11, 0x16u);
    }
    [*(id *)(a1 + 56) respondWithError:v3];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      long long v10 = HMFGetLogIdentifier();
      int v11 = 138543362;
      id v12 = v10;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Replaced Matter storage with bad fabric data", (uint8_t *)&v11, 0xCu);
    }
    [*(id *)(a1 + 56) respondWithSuccess];
  }
}

void __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_328(id *a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = a1[4];
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v32 = v7;
      __int16 v33 = 2112;
      id v34 = v3;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to clear CHIP storage: %@", buf, 0x16u);
    }
    [a1[5] respondWithError:v3];
    goto LABEL_19;
  }
  if ([a1[6] isEqual:*MEMORY[0x263F0CDC0]])
  {
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
    {
      id v8 = [a1[4] fabric];
      [v8 invalidateCachedData];

      id v9 = (void *)MEMORY[0x230FBD990]();
      id v10 = a1[4];
      int v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        id v12 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v32 = v12;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Cleared and left CHIP storage as empty", buf, 0xCu);
      }
      [a1[5] respondWithSuccess];
      goto LABEL_19;
    }
    __int16 v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = a1[4];
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      long long v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v32 = v16;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Empty storage option for resetting Matter storage is not supported in current configuration - option is ignored", buf, 0xCu);
    }
  }
  long long v17 = [a1[4] homeManager];
  id v18 = v17;
  if (v17)
  {
    uint64_t v19 = [v17 accessoryBrowser];
    uint64_t v20 = [v19 chipAccessoryServerBrowser];
    v28[0] = MEMORY[0x263EF8330];
    v28[1] = 3221225472;
    v28[2] = __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_329;
    v28[3] = &unk_264A1FDA8;
    id v21 = a1[5];
    v28[4] = a1[4];
    id v29 = v21;
    id v30 = v18;
    [v20 createNewFabricIDWithCompletion:v28];
  }
  else
  {
    id v22 = (void *)MEMORY[0x230FBD990]();
    id v23 = a1[4];
    uint64_t v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      __int16 v25 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v32 = v25;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Cleared CHIP storage but no home manager to create new Matter storage with", buf, 0xCu);
    }
    id v26 = a1[5];
    uint64_t v27 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
    [v26 respondWithError:v27];
  }
LABEL_19:
}

void __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_329(id *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = a1[4];
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v23 = v7;
    __int16 v24 = 2112;
    id v25 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Creating new CHIP storage content with fabric ID %@", buf, 0x16u);
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_330;
  aBlock[3] = &unk_264A2E210;
  aBlock[4] = a1[4];
  id v8 = v3;
  id v20 = v8;
  id v21 = a1[5];
  id v9 = _Block_copy(aBlock);
  int v10 = isFeatureMatterLocalFabricConfigEnabled();
  id v11 = a1[4];
  if (v10)
  {
    id v12 = [v11 fabric];
    [v12 invalidateCachedData];

    __int16 v13 = [a1[4] fabric];
    [v13 setFabricID:v8];

    id v14 = [a1[4] chipStorage];
    [v14 setFabricID:v8];

    uint64_t v15 = [a1[6] accessoryBrowser];
    long long v16 = [v15 chipAccessoryServerBrowser];
    long long v17 = [a1[4] fabric];
    [v16 createNewFabricDataForFabric:v17 completion:v9];
  }
  else
  {
    id v18 = [v11 chipStorage];
    [v18 setFabricID:v8];

    uint64_t v15 = [a1[6] accessoryBrowser];
    long long v16 = [v15 chipAccessoryServerBrowser];
    [v16 createNewFabricDataForFabricID:v8 completion:v9];
  }
}

void __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_330(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  uint64_t v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      uint64_t v9 = *(void *)(a1 + 40);
      int v12 = 138543874;
      __int16 v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      id v17 = v3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to create new fabric data for fabric ID %@: %@", (uint8_t *)&v12, 0x20u);
    }
    [*(id *)(a1 + 48) respondWithError:v3];
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v10 = HMFGetLogIdentifier();
      uint64_t v11 = *(void *)(a1 + 40);
      int v12 = 138543618;
      __int16 v13 = v10;
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully created new fabric data for fabric ID %@", (uint8_t *)&v12, 0x16u);
    }
    [*(id *)(a1 + 48) respondWithSuccess];
  }
}

- (void)handleMatterPairingCompletionNotification:(id)a3
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 numberForKey:@"HMDHomePairingCompletionNodeIDMessageKey"];
  id v6 = [v4 numberForKey:@"HMDHomePairingCompletionFabricIDMessageKey"];
  uint64_t v7 = [v4 numberForKey:@"HMDHomePairingCompletionVendorIDMessageKey"];
  id v8 = [v4 numberForKey:@"HMDHomePairingCompletionProductIDMessageKey"];
  uint64_t v9 = [v4 numberForKey:@"HMDHomePairingCompletionConfigNumberMessageKey"];
  int v10 = [v4 numberForKey:@"HMDHomePairingCompletionCategoryMessageKey"];
  uint64_t v11 = [v4 dataForKey:@"HMDHomePairingCompletionTopologyMessageKey"];
  int v12 = (void *)v11;
  if (v5 && v6)
  {
    id v21 = [(HMDHome *)self homeManager];
    __int16 v13 = [v21 accessoryBrowserInternal];
    __int16 v14 = [v13 chipAccessoryServerBrowser];
    [v14 handlePairingCompletionForAccessoryWithNodeID:v5 fabricID:v6 vendorID:v7 productID:v8 configNumber:v9 category:v10 topology:v12];

    [v4 respondWithSuccess];
  }
  else
  {
    id v20 = v10;
    id v22 = (void *)v11;
    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    __int16 v16 = self;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      __int16 v24 = v18;
      __int16 v25 = 2112;
      uint64_t v26 = v5;
      __int16 v27 = 2112;
      id v28 = v6;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Resident cannot establish connection with accessory with accessory node ID = %@, fabric ID = %@", buf, 0x20u);
    }
    uint64_t v19 = [MEMORY[0x263F087E8] hmfErrorWithCode:8];
    [v4 respondWithError:v19];

    int v10 = v20;
    int v12 = v22;
  }
}

- (void)handleCommissioningCertificateRequestWithCommissionerNodeID:(id)a3 commissioneeNodeID:(id)a4 fabricID:(id)a5 publicKey:(id)a6 sender:(id)a7 completion:(id)a8
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  if (![(HMDHome *)self isOwnerUser])
  {
    id v23 = (void *)MEMORY[0x230FBD990]();
    __int16 v24 = self;
    __int16 v25 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    uint64_t v26 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    v80 = v26;
    id v28 = "%{public}@Non-owner user cannot handle request to generate certificates";
    uint64_t v29 = v25;
    uint32_t v30 = 12;
LABEL_13:
    _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, v28, buf, v30);
LABEL_14:

    goto LABEL_15;
  }
  if (!v17)
  {
    id v23 = (void *)MEMORY[0x230FBD990]();
    __int16 v24 = self;
    __int16 v25 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    uint64_t v26 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    v80 = v26;
    __int16 v81 = 2112;
    id v82 = 0;
    id v28 = "%{public}@Cannot handle remote request to retrieve certificates with public Key: %@";
    uint64_t v29 = v25;
    uint32_t v30 = 22;
    goto LABEL_13;
  }
  if (!isFeatureMatterLocalFabricConfigEnabled())
  {
    if (([v16 isEqual:&unk_26E470810] & 1) == 0)
    {
      if (v16)
      {
        id v32 = [(HMDHome *)self chipStorage];
        __int16 v33 = [v32 fabricID];
        char v34 = [v16 isEqual:v33];

        if ((v34 & 1) == 0)
        {
          id v23 = (void *)MEMORY[0x230FBD990]();
          __int16 v24 = self;
          __int16 v25 = HMFGetOSLogHandle();
          if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            goto LABEL_15;
          }
          uint64_t v26 = HMFGetLogIdentifier();
          v59 = [(HMDHome *)v24 chipStorage];
          v61 = v23;
          __int16 v27 = [v59 fabricID];
          *(_DWORD *)buf = 138543874;
          v80 = v26;
          __int16 v81 = 2112;
          id v82 = v16;
          __int16 v83 = 2112;
          v84 = v27;
          goto LABEL_40;
        }
      }
LABEL_21:
      if ([v14 isEqualToNumber:&unk_26E470810])
      {

        id v14 = 0;
      }
      if (v15 && !v16)
      {
        uint64_t v35 = (void *)MEMORY[0x230FBD990]();
        uint64_t v36 = self;
        __int16 v37 = HMFGetOSLogHandle();
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
LABEL_28:

          id v16 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
          (*((void (**)(id, void, void, void, void, id))v19 + 2))(v19, 0, 0, 0, 0, v16);
          goto LABEL_16;
        }
        BOOL v38 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        v80 = v38;
        __int16 v81 = 2112;
        id v82 = v15;
        __int16 v83 = 2112;
        v84 = 0;
        uint64_t v39 = "%{public}@Cannot handle remote request to retrieve certificates with device Node ID %@ and fabricID %@";
        __int16 v40 = v37;
        uint32_t v41 = 32;
LABEL_27:
        _os_log_impl(&dword_22F52A000, v40, OS_LOG_TYPE_ERROR, v39, buf, v41);

        goto LABEL_28;
      }
      if (isFeatureMatterLocalFabricConfigEnabled())
      {
        __int16 v42 = [(HMDHome *)self fabric];
        uint64_t v43 = [v42 fabricID];

        char v44 = [v18 isOwner];
        if (v43) {
          goto LABEL_37;
        }
      }
      else
      {
        v45 = [(HMDHome *)self chipStorage];
        uint64_t v43 = [v45 fabricID];

        char v44 = 0;
        if (v43) {
          goto LABEL_37;
        }
      }
      if (![(HMDHome *)self isCurrentDevicePrimaryResident]
        && [(HMDHome *)self doesHomeContainResident])
      {
        uint64_t v35 = (void *)MEMORY[0x230FBD990]();
        uint64_t v36 = self;
        __int16 v37 = HMFGetOSLogHandle();
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
          goto LABEL_28;
        }
        BOOL v38 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        v80 = v38;
        uint64_t v39 = "%{public}@Failing commissioning cert because operational cert creation is not allowed in this device while"
              " there is a resident in Home";
        __int16 v40 = v37;
        uint32_t v41 = 12;
        goto LABEL_27;
      }
LABEL_37:
      v46 = [(HMDHome *)self homeManager];
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 3221225472;
      aBlock[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke;
      aBlock[3] = &unk_264A15A00;
      id v47 = v19;
      id v77 = v47;
      id v48 = v46;
      id v73 = v48;
      id v49 = v14;
      id v74 = v49;
      id v58 = v19;
      id v50 = v18;
      id v51 = v15;
      id v75 = v51;
      char v78 = v44;
      id v62 = v15;
      id v52 = v17;
      id v76 = v52;
      id v60 = v17;
      v53 = _Block_copy(aBlock);
      v63[0] = MEMORY[0x263EF8330];
      v63[1] = 3221225472;
      v63[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2;
      v63[3] = &unk_264A15AC0;
      v63[4] = self;
      id v64 = v43;
      id v69 = v53;
      id v65 = v48;
      id v14 = v49;
      id v66 = v14;
      id v54 = v51;
      id v18 = v50;
      id v19 = v58;
      id v67 = v54;
      char v71 = v44;
      id v68 = v52;
      id v70 = v47;
      id v55 = v48;
      id v56 = v53;
      id v17 = v60;
      id v57 = v56;
      id v16 = v43;
      [(HMDHome *)self updateCATIDsForUsersIfNeeded:1 completion:v63];

      id v15 = v62;
      goto LABEL_16;
    }
LABEL_18:

    id v16 = 0;
    goto LABEL_21;
  }
  if ([v16 isEqualToNumber:&unk_26E470810]) {
    goto LABEL_18;
  }
  if (!v16) {
    goto LABEL_21;
  }
  id v20 = [(HMDHome *)self fabric];
  id v21 = [v20 fabricID];
  char v22 = [v16 isEqual:v21];

  if (v22) {
    goto LABEL_21;
  }
  id v23 = (void *)MEMORY[0x230FBD990]();
  __int16 v24 = self;
  __int16 v25 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    uint64_t v26 = HMFGetLogIdentifier();
    v59 = [(HMDHome *)v24 fabric];
    v61 = v23;
    __int16 v27 = [v59 fabricID];
    *(_DWORD *)buf = 138543874;
    v80 = v26;
    __int16 v81 = 2112;
    id v82 = v16;
    __int16 v83 = 2112;
    v84 = v27;
LABEL_40:
    _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle remote request to retrieve certificates for unknown fabricID %@. Current home fabric ID %@", buf, 0x20u);

    id v23 = v61;
    goto LABEL_14;
  }
LABEL_15:

  id v31 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
  (*((void (**)(id, void, void, void, void, void *))v19 + 2))(v19, 0, 0, 0, 0, v31);

LABEL_16:
}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    id v5 = [*(id *)(a1 + 32) accessoryBrowser];
    id v6 = [v5 chipAccessoryServerBrowser];
    [v6 fetchCertificatesForMatterNodeWithCommissionerNodeID:*(void *)(a1 + 40) commissioneeNodeID:*(void *)(a1 + 48) forOwner:*(unsigned __int8 *)(a1 + 72) publicKey:*(void *)(a1 + 56) fabricID:v7 completionHandler:*(void *)(a1 + 64)];
  }
}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_3;
  aBlock[3] = &unk_264A15A28;
  id v4 = *(void **)(a1 + 40);
  void aBlock[4] = *(void *)(a1 + 32);
  id v30 = v4;
  id v32 = *(id *)(a1 + 80);
  id v5 = v3;
  id v31 = v5;
  id v6 = _Block_copy(aBlock);
  id v7 = *(void **)(a1 + 40);
  if (v7 && ![v7 isEqual:&unk_26E470810])
  {
    __int16 v13 = [*(id *)(a1 + 48) accessoryBrowser];
    id v14 = [v13 chipAccessoryServerBrowser];
    uint64_t v15 = *(void *)(a1 + 72);
    uint64_t v19 = *(void *)(a1 + 64);
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v16 = *(unsigned __int8 *)(a1 + 96);
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 3221225472;
    v21[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_3_322;
    v21[3] = &unk_264A15A98;
    uint64_t v17 = *(void *)(a1 + 40);
    v21[4] = *(void *)(a1 + 32);
    int v10 = &v22;
    uint64_t v11 = &v24;
    id v22 = *(id *)(a1 + 48);
    __int16 v24 = v6;
    id v23 = *(id *)(a1 + 40);
    id v25 = *(id *)(a1 + 88);
    id v18 = v6;
    [v14 fetchCertificatesForMatterNodeWithCommissionerNodeID:v20 commissioneeNodeID:v19 forOwner:v16 publicKey:v15 fabricID:v17 completionHandler:v21];

    id v8 = v23;
  }
  else
  {
    id v8 = [*(id *)(a1 + 48) accessoryBrowser];
    uint64_t v9 = [v8 chipAccessoryServerBrowser];
    v26[0] = MEMORY[0x263EF8330];
    v26[1] = 3221225472;
    v26[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_318;
    v26[3] = &unk_264A15A50;
    v26[4] = *(void *)(a1 + 32);
    int v10 = &v27;
    uint64_t v11 = &v28;
    id v27 = *(id *)(a1 + 48);
    id v28 = v6;
    id v12 = v6;
    [v9 createNewFabricIDWithCompletion:v26];
  }
}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = HMFGetLogIdentifier();
      int v26 = 138543618;
      id v27 = v10;
      __int16 v28 = 2112;
      id v29 = v6;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Couldn't create CHIP storage: %@", (uint8_t *)&v26, 0x16u);
    }
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = [*(id *)(a1 + 32) fabric];
    [v12 setFabricID:v11];

    uint64_t v13 = *(void *)(a1 + 40);
    id v14 = [*(id *)(a1 + 32) chipStorage];
    [v14 setFabricID:v13];

    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
LABEL_9:
    v15();
    goto LABEL_10;
  }
  uint64_t v16 = [*(id *)(a1 + 32) matterFabricID];
  char v17 = [v16 isEqual:v5];

  id v18 = (void *)MEMORY[0x230FBD990]();
  id v19 = *(id *)(a1 + 32);
  uint64_t v20 = HMFGetOSLogHandle();
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
  if (v17)
  {
    if (v21)
    {
      id v22 = HMFGetLogIdentifier();
      int v26 = 138543618;
      id v27 = v22;
      __int16 v28 = 2112;
      id v29 = v5;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Initialized CHIP storage with fabric ID: %@", (uint8_t *)&v26, 0x16u);
    }
    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    goto LABEL_9;
  }
  if (v21)
  {
    id v23 = HMFGetLogIdentifier();
    int v26 = 138543618;
    id v27 = v23;
    __int16 v28 = 2112;
    id v29 = v5;
    _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@CHIP storage wasn't initialized with fabric ID %@ due to asynchronous model update", (uint8_t *)&v26, 0x16u);
  }
  uint64_t v24 = *(void *)(a1 + 56);
  id v25 = [MEMORY[0x263F087E8] hmfErrorWithCode:12];
  (*(void (**)(uint64_t, void, void *))(v24 + 16))(v24, 0, v25);

LABEL_10:
}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_318(id *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = a1[4];
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    __int16 v28 = v7;
    __int16 v29 = 2112;
    id v30 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Attempting to initialize fabric data with fabric ID: %@", buf, 0x16u);
  }
  int v8 = isFeatureMatterLocalFabricConfigEnabled();
  id v9 = a1[4];
  if (v8)
  {
    int v10 = [v9 fabric];
    [v10 setFabricID:v3];

    uint64_t v11 = [a1[4] chipStorage];
    [v11 setFabricID:v3];

    id v12 = [a1[5] accessoryBrowser];
    uint64_t v13 = [v12 chipAccessoryServerBrowser];
    id v14 = [a1[4] fabric];
    v24[0] = MEMORY[0x263EF8330];
    v24[1] = 3221225472;
    v24[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_319;
    v24[3] = &unk_264A2EDE0;
    uint64_t v15 = &v26;
    id v16 = a1[6];
    char v17 = &v25;
    id v25 = v3;
    id v26 = v16;
    id v18 = v3;
    [v13 createNewFabricDataForFabric:v14 completion:v24];
  }
  else
  {
    id v19 = [v9 chipStorage];
    [v19 setFabricID:v3];

    id v12 = [a1[5] accessoryBrowser];
    uint64_t v13 = [v12 chipAccessoryServerBrowser];
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 3221225472;
    v21[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2_320;
    v21[3] = &unk_264A2EDE0;
    uint64_t v15 = &v23;
    id v20 = a1[6];
    char v17 = &v22;
    id v22 = v3;
    id v23 = v20;
    [v13 createNewFabricDataForFabricID:v3 completion:v21];
  }
}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_3_322(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = v15;
  if (v15
    && ([v15 underlyingErrors],
        char v17 = objc_claimAutoreleasedReturnValue(),
        int v18 = objc_msgSend(v17, "na_any:", &__block_literal_global_325),
        v17,
        v18))
  {
    id v19 = (void *)MEMORY[0x230FBD990]();
    id v20 = *(id *)(a1 + 32);
    BOOL v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      id v22 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v36 = v22;
      _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Regenerating cert when handling commissioning cert request", buf, 0xCu);
    }
    int v23 = isFeatureMatterLocalFabricConfigEnabled();
    uint64_t v24 = [*(id *)(a1 + 40) accessoryBrowser];
    id v25 = [v24 chipAccessoryServerBrowser];
    if (v23)
    {
      id v26 = [*(id *)(a1 + 32) fabric];
      v32[0] = MEMORY[0x263EF8330];
      v32[1] = 3221225472;
      v32[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_326;
      v32[3] = &unk_264A2EDE0;
      id v34 = *(id *)(a1 + 56);
      id v33 = *(id *)(a1 + 48);
      [v25 createNewFabricDataForFabric:v26 completion:v32];

      id v27 = v34;
    }
    else
    {
      v29[0] = MEMORY[0x263EF8330];
      v29[1] = 3221225472;
      v29[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2_327;
      v29[3] = &unk_264A2EDE0;
      uint64_t v28 = *(void *)(a1 + 48);
      id v31 = *(id *)(a1 + 56);
      id v30 = *(id *)(a1 + 48);
      [v25 createNewFabricDataForFabricID:v28 completion:v29];

      id v27 = v31;
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

uint64_t __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_326(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

uint64_t __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2_327(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

BOOL __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_4(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 domain];
  if ([v3 isEqual:*MEMORY[0x263F49710]]) {
    BOOL v4 = [v2 code] == 2;
  }
  else {
    BOOL v4 = 0;
  }

  return v4;
}

uint64_t __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_319(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

uint64_t __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2_320(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

- (void)handleCommissioningCertificateRequest:(id)a3
{
  id v4 = a3;
  id v5 = [v4 numberForKey:@"HMDHomeCommissioningDeviceNodeIDMessageKey"];
  id v6 = [v4 numberForKey:@"HMDHomeCommissioningFabricIDMessageKey"];
  id v7 = [v4 dataForKey:@"HMDHomeCommissioningPublicKeyMessageKey"];
  int v8 = [v4 userForHome:self];
  if (!isFeatureMatterLocalFabricConfigEnabled()) {
    goto LABEL_4;
  }
  id v9 = [v4 numberForKey:@"HMDHomeCommissioningCommissionerNodeIDMessageKey"];
  if ([v9 isEqualToNumber:&unk_26E470810])
  {

LABEL_4:
    id v9 = 0;
  }
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  v11[2] = __55__HMDHome_CHIP__handleCommissioningCertificateRequest___block_invoke;
  v11[3] = &unk_264A159D8;
  id v12 = v4;
  id v10 = v4;
  [(HMDHome *)self handleCommissioningCertificateRequestWithCommissionerNodeID:v9 commissioneeNodeID:v5 fabricID:v6 publicKey:v7 sender:v8 completion:v11];
}

void __55__HMDHome_CHIP__handleCommissioningCertificateRequest___block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  id v15 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  if (a6)
  {
    [*(id *)(a1 + 32) respondWithError:a6];
  }
  else
  {
    id v14 = [MEMORY[0x263EFF9A0] dictionary];
    [v14 setObject:v15 forKeyedSubscript:@"HMDHomeCommissioningRootCertMessageKey"];
    [v14 setObject:v11 forKeyedSubscript:@"HMDHomeCommissioningOperationalCertMessageKey"];
    [v14 setObject:v12 forKeyedSubscript:@"HMDHomeCommissioningOwnerNodeIDMessageKey"];
    [v14 setObject:v13 forKeyedSubscript:@"HMDHomeCommissioningIPKMessageKey"];
    [*(id *)(a1 + 32) respondWithPayload:v14];
  }
}

- (void)_dispatchCHIPReport:(id)a3 destination:(id)a4
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  int v8 = +[HMDDeviceHandle deviceHandleForDestination:v7];
  id v9 = +[HMDAccountRegistry sharedRegistry];
  id v10 = [v9 deviceForHandle:v8];

  id v11 = [v10 account];

  if (v11)
  {
    if (![v10 isCurrentDevice])
    {
      objc_initWeak((id *)buf, self);
      id v20 = [(HMDHome *)self homeManager];
      BOOL v21 = (void *)[v6 copy];
      id v22 = [(HMDHome *)self uuid];
      int v23 = [(HMDHome *)self workQueue];
      v24[0] = MEMORY[0x263EF8330];
      v24[1] = 3221225472;
      v24[2] = __49__HMDHome_CHIP___dispatchCHIPReport_destination___block_invoke;
      v24[3] = &unk_264A2E890;
      objc_copyWeak(&v27, (id *)buf);
      id v25 = v6;
      id v26 = v7;
      [v20 sendSecureMessage:v21 target:v22 userID:v26 destination:v26 responseQueue:v23 responseHandler:v24];

      objc_destroyWeak(&v27);
      objc_destroyWeak((id *)buf);
      goto LABEL_10;
    }
    id v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v29 = v15;
      __int16 v30 = 2112;
      id v31 = v7;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Skipping device %@ - ourselves", buf, 0x16u);
    }
  }
  else
  {
    id v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      int v18 = HMFGetLogIdentifier();
      id v19 = [v10 shortDescription];
      *(_DWORD *)buf = 138543874;
      __int16 v29 = v18;
      __int16 v30 = 2112;
      id v31 = v19;
      __int16 v32 = 2112;
      id v33 = v7;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Device %@ for CHIP report destination %@ has no user attached to it. Destination removed.", buf, 0x20u);
    }
  }

  id v16 = [(HMDHome *)v13 notificationRegistry];
  char v17 = [v16 chipRemoteSubscribers];
  [v17 removeObject:v7];

LABEL_10:
}

void __49__HMDHome_CHIP___dispatchCHIPReport_destination___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    int v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = WeakRetained;
    id v10 = HMFGetOSLogHandle();
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if (v5)
    {
      if (v11)
      {
        id v12 = HMFGetLogIdentifier();
        id v13 = *(void **)(a1 + 40);
        int v16 = 138543874;
        char v17 = v12;
        __int16 v18 = 2112;
        id v19 = v13;
        __int16 v20 = 2112;
        id v21 = v5;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Failed to send CHIP report to user %@ due to error %@", (uint8_t *)&v16, 0x20u);
LABEL_7:
      }
    }
    else if (v11)
    {
      id v12 = HMFGetLogIdentifier();
      id v14 = [*(id *)(a1 + 32) messagePayload];
      id v15 = *(void **)(a1 + 40);
      int v16 = 138543874;
      char v17 = v12;
      __int16 v18 = 2112;
      id v19 = v14;
      __int16 v20 = 2112;
      id v21 = v15;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Sent CHIP report: %@ to user %@", (uint8_t *)&v16, 0x20u);

      goto LABEL_7;
    }
  }
}

- (void)_handleCHIPSendRemoteRequestMessage:(id)a3
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v39 = [v4 numberForKey:@"HMDHomeCHIPNodeIDMessageKey"];
  if (v39)
  {
    id v37 = v4;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id v5 = [(HMDHome *)self matterAccessories];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v40 objects:v50 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v41;
      while (2)
      {
        uint64_t v9 = 0;
        uint64_t v38 = v7;
        do
        {
          if (*(void *)v41 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v40 + 1) + 8 * v9);
          BOOL v11 = (void *)MEMORY[0x230FBD990]();
          id v12 = self;
          id v13 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            uint64_t v14 = v8;
            id v15 = self;
            char v17 = v16 = v5;
            __int16 v18 = [v10 matterNodeID];
            *(_DWORD *)buf = 138543874;
            v45 = v17;
            __int16 v46 = 2112;
            id v47 = v18;
            __int16 v48 = 2112;
            id v49 = v39;
            _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Remote request dispatch compares %@ with %@", buf, 0x20u);

            id v5 = v16;
            self = v15;
            uint64_t v8 = v14;
            uint64_t v7 = v38;
          }

          id v19 = [v10 matterNodeID];
          if ([v19 isEqual:&unk_26E470810])
          {
          }
          else
          {
            __int16 v20 = [v10 matterNodeID];
            int v21 = [v20 isEqualToNumber:v39];

            if (v21)
            {
              __int16 v32 = (void *)MEMORY[0x230FBD990]();
              id v33 = v12;
              uint64_t v34 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v35 = HMFGetLogIdentifier();
                uint64_t v36 = [v10 identifier];
                *(_DWORD *)buf = 138543618;
                v45 = v35;
                __int16 v46 = 2112;
                id v47 = v36;
                _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_DEBUG, "%{public}@Dispatching remote request to accessory %@", buf, 0x16u);
              }
              id v4 = v37;
              [v10 handleCHIPSendRemoteRequestMessage:v37];
              goto LABEL_24;
            }
          }
          ++v9;
        }
        while (v7 != v9);
        uint64_t v7 = [v5 countByEnumeratingWithState:&v40 objects:v50 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }

    uint64_t v22 = MEMORY[0x230FBD990]();
    int v23 = self;
    uint64_t v24 = HMFGetOSLogHandle();
    id v4 = v37;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      id v25 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      v45 = v25;
      __int16 v46 = 2112;
      id v47 = v37;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Cannot find accessory for CHIP remote request: %@", buf, 0x16u);
    }
    id v26 = (void *)v22;
  }
  else
  {
    uint64_t v27 = MEMORY[0x230FBD990]();
    uint64_t v28 = self;
    __int16 v29 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      __int16 v30 = HMFGetLogIdentifier();
      id v31 = [v4 messagePayload];
      *(_DWORD *)buf = 138543618;
      v45 = v30;
      __int16 v46 = 2112;
      id v47 = v31;
      _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, "%{public}@Cannot find node ID in CHIP remote request message payload: %@", buf, 0x16u);
    }
    id v26 = (void *)v27;
  }
  id v5 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
  [v4 respondWithError:v5];
LABEL_24:
}

- (void)_handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage:(id)a3
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kAccessoryUUID"];
  if (v5)
  {
    uint64_t v6 = [(HMDHome *)self matterAccessories];
    v24[0] = MEMORY[0x263EF8330];
    v24[1] = 3221225472;
    v24[2] = __74__HMDHome_CHIP___handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke;
    v24[3] = &unk_264A18BB0;
    id v7 = v5;
    id v25 = v7;
    uint64_t v8 = objc_msgSend(v6, "na_firstObjectPassingTest:", v24);

    uint64_t v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = self;
    BOOL v11 = HMFGetOSLogHandle();
    id v12 = v11;
    if (v8)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        id v13 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v27 = v13;
        __int16 v28 = 2112;
        id v29 = v8;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Resetting and removing all CHIP pairings from accessory: %@", buf, 0x16u);
      }
      v22[0] = MEMORY[0x263EF8330];
      v22[1] = 3221225472;
      v22[2] = __74__HMDHome_CHIP___handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke_313;
      v22[3] = &unk_264A2F370;
      v22[4] = v10;
      id v23 = v4;
      [v8 removeAllCHIPPairingsWithCompletion:v22];
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        __int16 v20 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v27 = v20;
        __int16 v28 = 2112;
        id v29 = v7;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Cannot find accessory with UUID %@ for reset and remove all CHIP pairings message", buf, 0x16u);
      }
      int v21 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      [v4 respondWithError:v21];
    }
    id v19 = v25;
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x230FBD990]();
    id v15 = self;
    int v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      char v17 = HMFGetLogIdentifier();
      __int16 v18 = [v4 messagePayload];
      *(_DWORD *)buf = 138543618;
      uint64_t v27 = v17;
      __int16 v28 = 2112;
      id v29 = v18;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Cannot find accessory UUID in reset and remove all CHIP pairings message payload: %@", buf, 0x16u);
    }
    id v19 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v4 respondWithError:v19];
  }
}

uint64_t __74__HMDHome_CHIP___handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 uuid];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void __74__HMDHome_CHIP___handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke_313(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Ignoring remove all CHIP pairings error: %@", (uint8_t *)&v8, 0x16u);
    }
  }
  [*(id *)(a1 + 32) handleRemoveAccessoryMessage:*(void *)(a1 + 40)];
}

- (BOOL)_shouldFallbackLocallyForRemoteMatterRequest:(id)a3
{
  id v3 = a3;
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    unint64_t v4 = [v3 code];
    BOOL v5 = 1;
    if (v4 > 8 || ((1 << v4) & 0x11C) == 0) {
      BOOL v5 = v4 == 3201;
    }
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

- (void)_sendRemoteMessageUsingNodeId:(unint64_t)a3 payload:(id)a4 completion:(id)a5
{
  v31[2] = *MEMORY[0x263EF8340];
  id v8 = a4;
  id v9 = a5;
  id v10 = objc_alloc(MEMORY[0x263F42570]);
  id v11 = [(HMDHome *)self uuid];
  uint64_t v12 = (void *)[v10 initWithTarget:v11];

  v30[0] = @"HMDHomeCHIPNodeIDMessageKey";
  id v13 = [NSNumber numberWithUnsignedLongLong:a3];
  v30[1] = @"HMDHomeCHIPRequestMessageKey";
  v31[0] = v13;
  v31[1] = v8;
  uint64_t v14 = [NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:2];

  id v15 = [MEMORY[0x263F42590] messageWithName:@"HMDHomeCHIPSendRemoteRequestMessage" destination:v12 payload:v14];
  int v16 = [v8 CHIPRemoteMessageTimeout];

  if (v16)
  {
    char v17 = [v8 CHIPRemoteMessageTimeout];
    [v17 doubleValue];
    objc_msgSend(v15, "setTimeout:");
  }
  uint64_t v21 = MEMORY[0x263EF8330];
  uint64_t v22 = 3221225472;
  id v23 = __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke;
  uint64_t v24 = &unk_264A159B0;
  id v28 = v9;
  unint64_t v29 = a3;
  id v25 = self;
  id v26 = v12;
  id v27 = v14;
  id v18 = v14;
  id v19 = v12;
  id v20 = v9;
  [v15 setResponseHandler:&v21];
  -[HMDHome handleCHIPSendRemoteRequestMessage:](self, "handleCHIPSendRemoteRequestMessage:", v15, v21, v22, v23, v24, v25);
}

void __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if ([*(id *)(a1 + 32) _shouldFallbackLocallyForRemoteMatterRequest:v5])
    {
      id v7 = [MEMORY[0x263F42590] messageWithName:@"HMDHomeCHIPSendRemoteRequestMessage" destination:*(void *)(a1 + 40) payload:*(void *)(a1 + 48)];
      v22[0] = MEMORY[0x263EF8330];
      v22[1] = 3221225472;
      v22[2] = __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke_312;
      v22[3] = &unk_264A15988;
      id v9 = *(void **)(a1 + 56);
      uint64_t v8 = *(void *)(a1 + 64);
      v22[4] = *(void *)(a1 + 32);
      uint64_t v24 = v8;
      id v23 = v9;
      [v7 setResponseHandler:v22];
      [*(id *)(a1 + 32) _handleCHIPSendRemoteRequestMessage:v7];
    }
    else
    {
      int v16 = (void *)MEMORY[0x230FBD990]();
      id v17 = *(id *)(a1 + 32);
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        id v19 = HMFGetLogIdentifier();
        uint64_t v20 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 138543874;
        id v26 = v19;
        __int16 v27 = 2048;
        uint64_t v28 = v20;
        __int16 v29 = 2112;
        id v30 = v5;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute CHIP remote operation for nodeID=%llu: error=%@", buf, 0x20u);
      }
      uint64_t v21 = *(void *)(a1 + 56);
      id v7 = [v6 objectForKeyedSubscript:@"HMDHomeCHIPResponseMessageKey"];
      (*(void (**)(uint64_t, void *, id))(v21 + 16))(v21, v7, v5);
    }
  }
  else
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = *(id *)(a1 + 32);
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      uint64_t v14 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 138543618;
      id v26 = v13;
      __int16 v27 = 2048;
      uint64_t v28 = v14;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Successfully executed CHIP remote operation for nodeID=%llu", buf, 0x16u);
    }
    uint64_t v15 = *(void *)(a1 + 56);
    id v7 = [v6 objectForKeyedSubscript:@"HMDHomeCHIPResponseMessageKey"];
    (*(void (**)(uint64_t, void *, void))(v15 + 16))(v15, v7, 0);
  }
}

void __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke_312(uint64_t a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  id v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v11 = HMFGetLogIdentifier();
      uint64_t v12 = *(void *)(a1 + 48);
      int v20 = 138543874;
      uint64_t v21 = v11;
      __int16 v22 = 2048;
      uint64_t v23 = v12;
      __int16 v24 = 2112;
      id v25 = v5;
      id v13 = "%{public}@Failed to execute CHIP local fallback operation for nodeID=%llu: error=%@";
      uint64_t v14 = v10;
      os_log_type_t v15 = OS_LOG_TYPE_ERROR;
      uint32_t v16 = 32;
LABEL_6:
      _os_log_impl(&dword_22F52A000, v14, v15, v13, (uint8_t *)&v20, v16);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    uint64_t v17 = *(void *)(a1 + 48);
    int v20 = 138543618;
    uint64_t v21 = v11;
    __int16 v22 = 2048;
    uint64_t v23 = v17;
    id v13 = "%{public}@Successfully executed CHIP local fallback operation for nodeID=%llu";
    uint64_t v14 = v10;
    os_log_type_t v15 = OS_LOG_TYPE_INFO;
    uint32_t v16 = 22;
    goto LABEL_6;
  }

  uint64_t v18 = *(void *)(a1 + 40);
  id v19 = [v6 objectForKeyedSubscript:@"HMDHomeCHIPResponseMessageKey"];
  (*(void (**)(uint64_t, void *, id))(v18 + 16))(v18, v19, v5);
}

- (void)fetchOperationalCertificatesForNewFabricWithFabricID:(id)a3 publicKey:(id)a4 fetchFromResident:(BOOL)a5 completion:(id)a6
{
  BOOL v7 = a5;
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  id v12 = a6;
  if (v7 || [(HMDHome *)self isOwnerUser])
  {
    if (isFeatureMatterLocalFabricConfigEnabled())
    {
      id v13 = [(HMDHome *)self controllerPrivateStorage];
      uint64_t v14 = [v13 cachedLocalControllerNodeID];

      if (!v7)
      {
LABEL_5:
        os_log_type_t v15 = [(HMDHome *)self currentUser];
        [(HMDHome *)self handleCommissioningCertificateRequestWithCommissionerNodeID:0 commissioneeNodeID:0 fabricID:v10 publicKey:v11 sender:v15 completion:v12];

LABEL_8:
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v14 = 0;
      if (!v7) {
        goto LABEL_5;
      }
    }
    [(HMDHome *)self retrieveOperationalCertificatesForFabricID:v10 commissionerNodeID:v14 commissioneeNodeID:0 publicKey:v11 completion:v12];
    goto LABEL_8;
  }
  uint32_t v16 = (void *)MEMORY[0x230FBD990]();
  uint64_t v17 = self;
  uint64_t v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    id v19 = HMFGetLogIdentifier();
    int v20 = [(HMDHome *)v17 currentUser];
    int v22 = 138543618;
    uint64_t v23 = v19;
    __int16 v24 = 2112;
    id v25 = v20;
    _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Current user %@ is not the owner. Therefore it must request NOC from the primary resident", (uint8_t *)&v22, 0x16u);
  }
  uint64_t v21 = [MEMORY[0x263F087E8] hmErrorWithCode:10];
  (*((void (**)(id, void, void, void, void, void *))v12 + 2))(v12, 0, 0, 0, 0, v21);

LABEL_12:
}

- (void)handleResetMatterStorageRequest:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) primaryResidentMessageRouter];
  id v3 = v2;
  if (v2)
  {
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke_311;
    v11[3] = &unk_264A2F558;
    uint64_t v4 = *(void *)(a1 + 40);
    void v11[4] = *(void *)(a1 + 32);
    [v2 routeMessage:v4 localHandler:v11];
  }
  else
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = *(id *)(a1 + 32);
    BOOL v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v13 = v8;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident message router to handle request to reset Matter storage", buf, 0xCu);
    }
    id v9 = *(void **)(a1 + 40);
    id v10 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v9 respondWithError:v10];
  }
}

uint64_t __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke_311(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _handleResetMatterStorageRequest:a2];
}

- (void)handleCHIPSendReportMessage:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  if ([*(id *)(a1 + 32) isCurrentDevicePrimaryResident])
  {
    id v2 = [*(id *)(a1 + 32) notificationRegistry];
    id v3 = [v2 chipRemoteSubscribers];
    id v4 = (void *)[v3 copy];

    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    id v5 = v4;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v46 objects:v57 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v47;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v47 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v46 + 1) + 8 * i);
          id v11 = (void *)MEMORY[0x230FBD990]();
          id v12 = *(id *)(a1 + 32);
          id v13 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            uint64_t v14 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            id v52 = v14;
            __int16 v53 = 2112;
            uint64_t v54 = v10;
            _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Dispatch CHIP report to %@", buf, 0x16u);
          }
          [*(id *)(a1 + 32) _dispatchCHIPReport:*(void *)(a1 + 40) destination:v10];
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v46 objects:v57 count:16];
      }
      while (v7);
    }
  }
  os_log_type_t v15 = [*(id *)(a1 + 40) numberForKey:@"HMDHomeCHIPNodeIDMessageKey"];
  uint64_t v37 = [v15 unsignedIntegerValue];

  uint32_t v16 = [*(id *)(a1 + 40) arrayForKey:@"HMDHomeCHIPReportMessageKey"];
  uint64_t v38 = objc_msgSend(v16, "na_filter:", &__block_literal_global_309);

  uint64_t v17 = [*(id *)(a1 + 32) featureDataSource];
  int v18 = [v17 isNativeMatterEnabled];

  if (v18 && ([*(id *)(a1 + 32) isCurrentDevicePrimaryResident] & 1) == 0)
  {
    id v19 = [*(id *)(a1 + 32) matterAccessories];
    v45[0] = MEMORY[0x263EF8330];
    v45[1] = 3221225472;
    v45[2] = __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke_2;
    v45[3] = &__block_descriptor_40_e50_B16__0__HMDAccessory_HMDMatterAccessoryProtocol__8l;
    v45[4] = v37;
    int v20 = objc_msgSend(v19, "na_firstObjectPassingTest:", v45);

    if (v20)
    {
      v43[0] = MEMORY[0x263EF8330];
      v43[1] = 3221225472;
      v43[2] = __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke_3;
      v43[3] = &unk_264A28618;
      v43[4] = *(void *)(a1 + 32);
      id v44 = v20;
      objc_msgSend(v38, "na_each:", v43);
    }
    else
    {
      uint64_t v21 = (void *)MEMORY[0x230FBD990]();
      id v22 = *(id *)(a1 + 32);
      uint64_t v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        __int16 v24 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        id v52 = v24;
        __int16 v53 = 2048;
        uint64_t v54 = v37;
        __int16 v55 = 2112;
        id v56 = v38;
        _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to find matching accessory for attribute update notification. nodeID=%lu report=%@", buf, 0x20u);
      }
    }
  }
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v25 = [*(id *)(a1 + 32) chipLocalSubscribers];
  uint64_t v26 = [v25 countByEnumeratingWithState:&v39 objects:v50 count:16];
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = *(void *)v40;
    do
    {
      for (uint64_t j = 0; j != v27; ++j)
      {
        if (*(void *)v40 != v28) {
          objc_enumerationMutation(v25);
        }
        uint64_t v30 = *(void *)(*((void *)&v39 + 1) + 8 * j);
        uint64_t v31 = (void *)MEMORY[0x230FBD990]();
        id v32 = *(id *)(a1 + 32);
        id v33 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v34 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v52 = v34;
          __int16 v53 = 2112;
          uint64_t v54 = v30;
          _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_DEBUG, "%{public}@Calling CHIP report handler for subscriber %@", buf, 0x16u);
        }
        uint64_t v35 = [*(id *)(a1 + 32) chipLocalSubscribers];
        uint64_t v36 = [v35 objectForKeyedSubscript:v30];
        ((void (**)(void, uint64_t, void *))v36)[2](v36, v37, v38);
      }
      uint64_t v27 = [v25 countByEnumeratingWithState:&v39 objects:v50 count:16];
    }
    while (v27);
  }

  [*(id *)(a1 + 40) respondWithSuccess];
}

uint64_t __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = [a2 matterNodeID];
  id v4 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 32)];
  uint64_t v5 = [v3 isEqualToNumber:v4];

  return v5;
}

void __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [MEMORY[0x263EFF9A0] dictionary];
  uint64_t v5 = objc_msgSend(v3, "hmf_arrayForKey:", *MEMORY[0x263F10B70]);
  uint64_t v6 = v5;
  if (v5 && [v5 count] == 3)
  {
    uint64_t v7 = [v6 objectAtIndexedSubscript:0];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    id v9 = v8;

    uint64_t v10 = [v6 objectAtIndexedSubscript:1];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v11 = v10;
    }
    else {
      id v11 = 0;
    }
    id v12 = v11;

    id v13 = [v6 objectAtIndexedSubscript:2];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    id v15 = v14;

    if (v9) {
      BOOL v16 = v12 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16 || v15 == 0)
    {
      int v18 = (void *)MEMORY[0x230FBD990]();
      id v19 = *(id *)(a1 + 32);
      int v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = HMFGetLogIdentifier();
        int v33 = 138543618;
        uint64_t v34 = v21;
        __int16 v35 = 2112;
        id v36 = v3;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to process attribute update: missing endpointID, clusterID, or attributeID. report=%@", (uint8_t *)&v33, 0x16u);
      }
    }
    else
    {
      [v4 setObject:v9 forKeyedSubscript:@"HMDMatterAttributeChangedNotificationEndpointIDKey"];
      [v4 setObject:v12 forKeyedSubscript:@"HMDMatterAttributeChangedNotificationClusterIDKey"];
      [v4 setObject:v15 forKeyedSubscript:@"HMDMatterAttributeChangedNotificationAttributeIDKey"];
      uint64_t v26 = objc_msgSend(v3, "hmf_dictionaryForKey:", *MEMORY[0x263F10B90]);
      uint64_t v27 = *MEMORY[0x263F10C30];
      uint64_t v28 = [v26 valueForKey:*MEMORY[0x263F10C30]];
      [v4 setObject:v28 forKeyedSubscript:@"HMDMatterAttributeChangedNotificationValueKey"];

      __int16 v29 = objc_msgSend(v3, "hmf_dictionaryForKey:", *MEMORY[0x263F10C00]);
      uint64_t v30 = [v29 valueForKey:v27];
      [v4 setObject:v30 forKeyedSubscript:@"HMDMatterAttributeChangedNotificationPreviousValueKey"];

      uint64_t v31 = *(void **)(a1 + 40);
      id v32 = (void *)[v4 copy];
      logAndPostNotification(@"HMDMatterAttributeChangedNotification", v31, v32);
    }
  }
  else
  {
    id v22 = (void *)MEMORY[0x230FBD990]();
    id v23 = *(id *)(a1 + 32);
    __int16 v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      id v25 = HMFGetLogIdentifier();
      int v33 = 138543618;
      uint64_t v34 = v25;
      __int16 v35 = 2112;
      id v36 = v3;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to process attribute update: AttributePath array is invalid. report=%@", (uint8_t *)&v33, 0x16u);
    }
  }
}

uint64_t __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke_306(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  uint64_t v3 = objc_opt_isKindOfClass() & (v2 != 0);

  return v3;
}

- (void)handleCHIPSendRemoteRequestMessage:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled()
    && ([*(id *)(a1 + 32) isPrimaryResidentNodeReachable] & 1) == 0)
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = *(id *)(a1 + 32);
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v17 = v14;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Primary resident unreachable, handling CHIP remote request locally", buf, 0xCu);
    }
    [*(id *)(a1 + 32) _handleCHIPSendRemoteRequestMessage:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = [*(id *)(a1 + 32) primaryResidentMessageRouter];
    uint64_t v3 = v2;
    if (v2)
    {
      v15[0] = MEMORY[0x263EF8330];
      v15[1] = 3221225472;
      v15[2] = __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke_304;
      v15[3] = &unk_264A2F558;
      uint64_t v4 = *(void *)(a1 + 40);
      void v15[4] = *(void *)(a1 + 32);
      [v2 routeMessage:v4 localHandler:v15];
    }
    else
    {
      uint64_t v5 = (void *)MEMORY[0x230FBD990]();
      id v6 = *(id *)(a1 + 32);
      uint64_t v7 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        id v8 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v17 = v8;
        _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident message router to handle CHIP remote request", buf, 0xCu);
      }
      id v9 = *(void **)(a1 + 40);
      uint64_t v10 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      [v9 respondWithError:v10];
    }
  }
}

uint64_t __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke_304(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _handleCHIPSendRemoteRequestMessage:a2];
}

- (void)handleRemoteUpdateCHIPKeyValueStoreMessage:(id)a3
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self matterFabricID];
  id v6 = (void *)MEMORY[0x230FBD990]();
  uint64_t v7 = self;
  id v8 = HMFGetOSLogHandle();
  id v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      id v11 = [v4 shortDescription];
      *(_DWORD *)buf = 138543618;
      uint64_t v28 = v10;
      __int16 v29 = 2112;
      uint64_t v30 = v11;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Handling remote update CHIP key-value store message: %@", buf, 0x16u);
    }
    id v12 = [[HMDCHIPHomeDataSource alloc] initWithFabricID:v5 home:v7];
    id v13 = [v4 dictionaryForKey:@"HMDHomeRemoteUpdateCHIPKeyValueStoreMessageKey"];
    if (v13)
    {
      uint64_t v14 = [v4 arrayForKey:@"HMDHomeRemoteUpdateCHIPRemovedKeysMessageKey"];
      v24[0] = MEMORY[0x263EF8330];
      v24[1] = 3221225472;
      v24[2] = __60__HMDHome_CHIP__handleRemoteUpdateCHIPKeyValueStoreMessage___block_invoke;
      v24[3] = &unk_264A15940;
      id v25 = v13;
      id v26 = v14;
      v22[0] = MEMORY[0x263EF8330];
      v22[1] = 3221225472;
      v22[2] = __60__HMDHome_CHIP__handleRemoteUpdateCHIPKeyValueStoreMessage___block_invoke_2;
      v22[3] = &unk_264A2F3E8;
      id v23 = v4;
      id v15 = v14;
      [(HMDCHIPHomeDataSource *)v12 updateKeyValueStoreWithBlock:v24 completion:v22];
    }
    else
    {
      uint64_t v17 = (void *)MEMORY[0x230FBD990]();
      uint64_t v18 = v7;
      id v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        int v20 = HMFGetLogIdentifier();
        uint64_t v21 = [v4 messagePayload];
        *(_DWORD *)buf = 138543618;
        uint64_t v28 = v20;
        __int16 v29 = 2112;
        uint64_t v30 = v21;
        _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Did not find key-value store in message payload: %@", buf, 0x16u);
      }
      id v15 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
      [v4 respondWithError:v15];
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      BOOL v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v28 = v16;
      __int16 v29 = 2112;
      uint64_t v30 = 0;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle remote update CHIP key-value store message with fabricID: %@", buf, 0x16u);
    }
    id v12 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
    [v4 respondWithError:v12];
  }
}

uint64_t __60__HMDHome_CHIP__handleRemoteUpdateCHIPKeyValueStoreMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        if ((objc_msgSend(v12, "isEqual:", @"HMD.MTRPlugin.PairedNodeIDs", (void)v16) & 1) == 0)
        {
          id v13 = [v5 objectForKeyedSubscript:v12];

          if (v13) {
            continue;
          }
        }
        uint64_t v14 = [*(id *)(a1 + 32) objectForKeyedSubscript:v12];
        [v5 setObject:v14 forKeyedSubscript:v12];
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v9);
  }

  if (*(void *)(a1 + 40))
  {
    objc_msgSend(v5, "removeObjectsForKeys:");
    [v6 addObjectsFromArray:*(void *)(a1 + 40)];
  }

  return 1;
}

uint64_t __60__HMDHome_CHIP__handleRemoteUpdateCHIPKeyValueStoreMessage___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)setCHIPReportHandlerWithSubscriber:(id)a3 handler:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __60__HMDHome_CHIP__setCHIPReportHandlerWithSubscriber_handler___block_invoke;
  block[3] = &unk_264A2EE80;
  id v12 = v6;
  id v13 = v7;
  block[4] = self;
  id v9 = v6;
  id v10 = v7;
  dispatch_async(v8, block);
}

void __60__HMDHome_CHIP__setCHIPReportHandlerWithSubscriber_handler___block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = (void *)MEMORY[0x230FBD990]();
  id v4 = *(id *)(a1 + 32);
  id v5 = HMFGetOSLogHandle();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v6)
    {
      id v7 = HMFGetLogIdentifier();
      uint64_t v8 = *(void *)(a1 + 40);
      int v15 = 138543618;
      long long v16 = v7;
      __int16 v17 = 2112;
      uint64_t v18 = v8;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Register CHIP report handler for subscriber %@", (uint8_t *)&v15, 0x16u);
    }
    id v9 = [*(id *)(a1 + 32) chipLocalSubscribers];

    if (!v9)
    {
      id v10 = objc_alloc_init(MEMORY[0x263EFF9A0]);
      [*(id *)(a1 + 32) setChipLocalSubscribers:v10];
    }
    id v11 = _Block_copy(*(const void **)(a1 + 48));
    id v12 = [*(id *)(a1 + 32) chipLocalSubscribers];
    [v12 setObject:v11 forKeyedSubscript:*(void *)(a1 + 40)];
  }
  else
  {
    if (v6)
    {
      id v13 = HMFGetLogIdentifier();
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 138543618;
      long long v16 = v13;
      __int16 v17 = 2112;
      uint64_t v18 = v14;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Deregister CHIP report handler for subscriber %@", (uint8_t *)&v15, 0x16u);
    }
    id v11 = [*(id *)(a1 + 32) chipLocalSubscribers];
    [v11 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  }
}

- (void)finishPairingForServer:(id)a3
{
  id v6 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v6;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  [v5 finishPairing];

  if (![(HMDHome *)self hasAnyResident]) {
    [(HMDHome *)self updateHomeLocationForPairing];
  }
}

- (void)_saveAndSyncMatterFabricIDWithCompletion:(id)a3
{
  id v4 = a3;
  if ([(HMDHome *)self isOwnerUser])
  {
    id v5 = [(HMDHome *)self emptyModelObjectWithChangeType:2];
    id v6 = [(HMDHome *)self fabric];
    id v7 = [v6 fabricID];
    [v5 setMatterFabricID:v7];

    uint64_t v8 = [(HMDHome *)self backingStore];
    id v9 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v10 = [v8 transaction:@"Update Matter Fabric ID" options:v9];

    [v10 add:v5];
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    v12[2] = __58__HMDHome_CHIP___saveAndSyncMatterFabricIDWithCompletion___block_invoke;
    v12[3] = &unk_264A2EDE0;
    v12[4] = self;
    id v13 = v4;
    [v10 run:v12];
  }
  else
  {
    id v11 = _Block_copy(v4);
    id v5 = v11;
    if (v11) {
      (*((void (**)(void *, void))v11 + 2))(v11, 0);
    }
  }
}

void __58__HMDHome_CHIP___saveAndSyncMatterFabricIDWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    uint64_t v8 = HMFGetLogIdentifier();
    id v9 = [*(id *)(a1 + 32) fabric];
    id v10 = [v9 fabricID];
    int v16 = 138543618;
    __int16 v17 = v8;
    __int16 v18 = 2112;
    uint64_t v19 = v10;
    id v11 = "%{public}@Failed to sync Matter Fabric ID to %@";
    id v12 = v7;
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
      goto LABEL_7;
    }
    uint64_t v8 = HMFGetLogIdentifier();
    id v9 = [*(id *)(a1 + 32) fabric];
    id v10 = [v9 fabricID];
    int v16 = 138543618;
    __int16 v17 = v8;
    __int16 v18 = 2112;
    uint64_t v19 = v10;
    id v11 = "%{public}@Successfully sync'ed Matter Fabric ID to %@";
    id v12 = v7;
    os_log_type_t v13 = OS_LOG_TYPE_INFO;
  }
  _os_log_impl(&dword_22F52A000, v12, v13, v11, (uint8_t *)&v16, 0x16u);

LABEL_7:
  uint64_t v14 = _Block_copy(*(const void **)(a1 + 40));
  int v15 = v14;
  if (v14) {
    (*((void (**)(void *, id))v14 + 2))(v14, v3);
  }
}

- (BOOL)updateFabricUsingHomeModel:(id)a3
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 setProperties];
  if (![v5 containsObject:@"matterFabricID"]) {
    goto LABEL_11;
  }
  id v6 = [(HMDHome *)self fabric];
  id v7 = [v6 fabricID];
  uint64_t v8 = [v4 matterFabricID];
  int v9 = HMFEqualObjects();

  if (v9 || ([v4 matterFabricID], (id v10 = objc_claimAutoreleasedReturnValue()) == 0))
  {
LABEL_11:

    goto LABEL_12;
  }
  id v11 = v10;
  char v12 = [v10 isEqualToNumber:&unk_26E470810];

  if (v12)
  {
LABEL_12:
    int v25 = 0;
    goto LABEL_13;
  }
  os_log_type_t v13 = [(HMDHome *)self fabric];
  uint64_t v14 = [v13 fabricID];

  int v15 = (void *)MEMORY[0x230FBD990]();
  int v16 = self;
  __int16 v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    __int16 v18 = HMFGetLogIdentifier();
    uint64_t v19 = [(HMDHome *)v16 fabric];
    uint64_t v20 = [v19 fabricID];
    uint64_t v21 = [v4 matterFabricID];
    int v47 = 138543874;
    long long v48 = v18;
    __int16 v49 = 2112;
    id v50 = v20;
    __int16 v51 = 2112;
    id v52 = v21;
    _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Updating fabric ID from %@ to %@", (uint8_t *)&v47, 0x20u);
  }
  id v22 = [v4 matterFabricID];
  id v23 = [(HMDHome *)v16 fabric];
  [v23 setFabricID:v22];

  if (v14 && ([v14 isEqualToNumber:&unk_26E470810] & 1) == 0)
  {
    __int16 v24 = [(HMDHome *)v16 fabric];
    [v24 invalidateCachedData];
  }
  int v25 = 1;
LABEL_13:
  id v26 = [(HMDHome *)self chipStorage];
  uint64_t v27 = [v26 fabricID];
  uint64_t v28 = v27;
  if (v27 && ([v27 isEqualToNumber:&unk_26E470810] & 1) == 0)
  {
    uint64_t v30 = [(HMDHome *)self fabric];
    uint64_t v31 = [v30 fabricID];
    id v32 = [(HMDHome *)self chipStorage];
    int v33 = [v32 fabricID];
    char v34 = HMFEqualObjects();

    if (v34)
    {
      if (!v25) {
        goto LABEL_16;
      }
    }
    else
    {
      __int16 v35 = (void *)MEMORY[0x230FBD990]();
      id v36 = self;
      uint64_t v37 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        uint64_t v38 = HMFGetLogIdentifier();
        long long v39 = [(HMDHome *)v36 fabric];
        long long v40 = [v39 fabricID];
        long long v41 = [(HMDHome *)v36 chipStorage];
        long long v42 = [v41 fabricID];
        int v47 = 138543874;
        long long v48 = v38;
        __int16 v49 = 2112;
        id v50 = v40;
        __int16 v51 = 2112;
        id v52 = v42;
        _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@Updating fabric ID from CHIPStorage from %@ to %@", (uint8_t *)&v47, 0x20u);
      }
      long long v43 = [(HMDHome *)v36 chipStorage];
      id v44 = [v43 fabricID];
      v45 = [(HMDHome *)v36 fabric];
      [v45 setFabricID:v44];
    }
LABEL_23:
    [(HMDHome *)self _saveAndSyncMatterFabricIDWithCompletion:0];
    BOOL v29 = 1;
    goto LABEL_24;
  }

  if (v25) {
    goto LABEL_23;
  }
LABEL_16:
  BOOL v29 = 0;
LABEL_24:

  return v29;
}

- (BOOL)updateMatterFabricIDIfNeeded
{
  id v3 = [(HMDHome *)self chipStorage];
  id v4 = [v3 fabricID];
  if (v4)
  {
    id v5 = v4;
    char v6 = [v4 isEqualToNumber:&unk_26E470810];

    if ((v6 & 1) == 0)
    {
      id v7 = [(HMDHome *)self chipStorage];
      uint64_t v8 = [v7 fabricID];
      int v9 = [(HMDHome *)self fabric];
      [v9 setFabricID:v8];

      [(HMDHome *)self _saveAndSyncMatterFabricIDWithCompletion:0];
      return 1;
    }
  }
  else
  {
  }
  return 0;
}

- (void)handleUpdatedCHIPPropertiesOnHomeModel:(id)a3 actions:(id)a4
{
  v14[1] = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self chipStorage];
  int v9 = [v8 updateUsingHomeModel:v6];

  if (v9)
  {
    BOOL v10 = (unint64_t)[v7 source] < 2;
    os_log_type_t v13 = @"HMDHomeCHIPStorageIsLocalChangeNotificationKey";
    id v11 = [NSNumber numberWithBool:v10];
    v14[0] = v11;
    char v12 = [NSDictionary dictionaryWithObjects:v14 forKeys:&v13 count:1];

    logAndPostNotification(@"HMDHomeCHIPStorageUpdatedNotification", self, v12);
    [v7 markChanged];
  }
  if (isFeatureMatterLocalFabricConfigEnabled()
    && [(HMDHome *)self updateFabricUsingHomeModel:v6])
  {
    [v7 markChanged];
  }
}

- (void)_writeLogData:(id)a3 logName:(id)a4 completion:(id)a5
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = v10;
  if (v8 && v9)
  {
    char v12 = [(HMDHome *)self homeManager];
    os_log_type_t v13 = [v12 chipDataSource];
    uint64_t v14 = [v13 fileManager];

    int v15 = NSURL;
    uint64_t v16 = HMDCreateHomeKitDaemonCacheDirectory();
    __int16 v17 = [v15 fileURLWithPath:v16];

    __int16 v18 = [v17 URLByAppendingPathComponent:@"MatterDiagnostics"];

    id v36 = 0;
    LOBYTE(v16) = [v14 createDirectoryAtURL:v18 withIntermediateDirectories:1 attributes:0 error:&v36];
    id v19 = v36;
    if (v16)
    {
      uint64_t v20 = [v18 URLByAppendingPathComponent:v9];
      id v35 = v19;
      char v21 = [v14 writeData:v8 toURL:v20 options:0 error:&v35];
      id v22 = v35;

      if ((v21 & 1) == 0)
      {
        id v23 = (void *)MEMORY[0x230FBD990]();
        __int16 v24 = self;
        int v25 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          id v26 = v34 = v23;
          *(_DWORD *)buf = 138543874;
          uint64_t v38 = v26;
          __int16 v39 = 2112;
          long long v40 = v20;
          __int16 v41 = 2112;
          id v42 = v22;
          _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_ERROR, "%{public}@Failed to write log file to path: %@ error: %@", buf, 0x20u);

          id v23 = v34;
        }

        uint64_t v20 = 0;
      }
      uint64_t v27 = (void (**)(void *, void *, id))_Block_copy(v11);
      if (v27)
      {
        uint64_t v28 = [v20 path];
        v27[2](v27, v28, v22);
      }
    }
    else
    {
      BOOL v29 = (void *)MEMORY[0x230FBD990]();
      uint64_t v30 = self;
      uint64_t v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        id v32 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        uint64_t v38 = v32;
        __int16 v39 = 2112;
        long long v40 = v18;
        __int16 v41 = 2112;
        id v42 = v19;
        _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_ERROR, "%{public}@Failed to create directory at path: %@ error: %@", buf, 0x20u);
      }
      int v33 = _Block_copy(v11);
      uint64_t v20 = v33;
      if (v33) {
        (*((void (**)(void *, void, id))v33 + 2))(v33, 0, v19);
      }
      id v22 = v19;
    }

    goto LABEL_19;
  }
  uint64_t v14 = (void (**)(void, void, void))_Block_copy(v10);
  if (v14)
  {
    __int16 v18 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    ((void (**)(void, void, void *))v14)[2](v14, 0, v18);
LABEL_19:
  }
}

- (void)downloadLogWithController:(id)a3 nodeId:(id)a4 type:(int64_t)a5 timeout:(double)a6 completion:(id)a7
{
  id v11 = a4;
  id v12 = a7;
  os_log_type_t v13 = [MEMORY[0x263EFF9A0] dictionary];
  [v13 setCHIPRemoteCommand:*MEMORY[0x263F49910]];
  uint64_t v14 = [NSNumber numberWithInteger:a5];
  [v13 setCHIPDownloadLogType:v14];

  int v15 = [NSNumber numberWithDouble:a6];
  [v13 setCHIPDownloadTimeout:v15];

  if ((unint64_t)a6)
  {
    uint64_t v16 = [NSNumber numberWithUnsignedInteger:(unint64_t)(a6 + 10.0)];
    [v13 setCHIPRemoteMessageTimeout:v16];
  }
  uint64_t v17 = [v11 unsignedLongValue];
  __int16 v18 = (void *)[v13 copy];
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 3221225472;
  v20[2] = __74__HMDHome_CHIP__downloadLogWithController_nodeId_type_timeout_completion___block_invoke;
  v20[3] = &unk_264A22F40;
  v20[4] = self;
  id v21 = v12;
  id v19 = v12;
  [(HMDHome *)self _sendRemoteMessageUsingNodeId:v17 payload:v18 completion:v20];
}

void __74__HMDHome_CHIP__downloadLogWithController_nodeId_type_timeout_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    int v15 = 138543874;
    uint64_t v16 = v10;
    __int16 v17 = 2112;
    id v18 = v5;
    __int16 v19 = 2112;
    id v20 = v6;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Download log response: %@, error: %@", (uint8_t *)&v15, 0x20u);
  }
  id v11 = objc_msgSend(v5, "hmf_dataForKey:", *MEMORY[0x263F49930]);
  id v12 = objc_msgSend(v5, "hmf_stringForKey:", *MEMORY[0x263F49938]);
  if (v6)
  {
    os_log_type_t v13 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v14 = v13;
    if (v13) {
      (*((void (**)(void *, void, id))v13 + 2))(v13, 0, v6);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _writeLogData:v11 logName:v12 completion:*(void *)(a1 + 40)];
  }
}

- (void)submitRvcUsageLogEventForNodeID:(unint64_t)a3 endpointID:(id)a4 source:(unint64_t)a5 error:(id)a6
{
  id v10 = a4;
  id v11 = a6;
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  void v14[2] = __73__HMDHome_CHIP__submitRvcUsageLogEventForNodeID_endpointID_source_error___block_invoke;
  v14[3] = &unk_264A15918;
  v14[4] = self;
  id v15 = v10;
  unint64_t v17 = a3;
  unint64_t v18 = a5;
  id v16 = v11;
  id v12 = v11;
  id v13 = v10;
  [(HMDHome *)self readAttributeWithNodeId:a3 endpointId:v13 clusterId:&unk_26E470798 attributeId:&unk_26E4707B0 params:0 completion:v14];
}

void __73__HMDHome_CHIP__submitRvcUsageLogEventForNodeID_endpointID_source_error___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = MEMORY[0x230FBD990]();
    id v8 = *(id *)(a1 + 32);
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v38 = v10;
      __int16 v39 = 2112;
      id v40 = v6;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Accessory returned error for current clean mode read, cannot submit clean modes in RVCUsageLogEvent. readCurrentCleanModeError=%@", buf, 0x16u);
    }
    id v11 = (void *)v7;
LABEL_12:
    id v20 = 0;
    goto LABEL_13;
  }
  id v12 = v5;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v13 = v12;
  }
  else {
    id v13 = 0;
  }
  id v14 = v13;

  int v15 = objc_msgSend(v14, "hmf_isEmpty");
  if (v15)
  {
    uint64_t v16 = MEMORY[0x230FBD990]();
    id v17 = *(id *)(a1 + 32);
    unint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      __int16 v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v38 = v19;
      __int16 v39 = 2112;
      id v40 = v12;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Accessory returned incorrect data for readCurrentCleanModeValues, cannot submit clean modes in RVCUsageLogEvent. readCurrentCleanModeValues=%@", buf, 0x16u);
    }
    id v11 = (void *)v16;
    goto LABEL_12;
  }
  uint64_t v27 = [v12 objectAtIndexedSubscript:0];
  uint64_t v28 = [v27 objectForKeyedSubscript:*MEMORY[0x263F10B90]];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    BOOL v29 = v28;
  }
  else {
    BOOL v29 = 0;
  }
  id v30 = v29;

  id v20 = objc_msgSend(v30, "hmf_numberForKey:", *MEMORY[0x263F10C30]);

LABEL_13:
  uint64_t v21 = *(void *)(a1 + 56);
  id v23 = *(void **)(a1 + 32);
  id v22 = *(void **)(a1 + 40);
  v31[0] = MEMORY[0x263EF8330];
  v31[1] = 3221225472;
  v31[2] = __73__HMDHome_CHIP__submitRvcUsageLogEventForNodeID_endpointID_source_error___block_invoke_271;
  void v31[3] = &unk_264A158F0;
  v31[4] = v23;
  id v32 = v20;
  uint64_t v35 = v21;
  id v24 = v22;
  uint64_t v25 = *(void *)(a1 + 64);
  id v33 = v24;
  uint64_t v36 = v25;
  id v34 = *(id *)(a1 + 48);
  id v26 = v20;
  [v23 readAttributeWithNodeId:v21 endpointId:v24 clusterId:&unk_26E470798 attributeId:&unk_26E4707C8 params:0 completion:v31];
}

void __73__HMDHome_CHIP__submitRvcUsageLogEventForNodeID_endpointID_source_error___block_invoke_271(uint64_t a1, void *a2, void *a3)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = &unk_2303E3000;
  if (v6)
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = *(id *)(a1 + 32);
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v57 = v11;
      __int16 v58 = 2112;
      id v59 = v6;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Accessory returned error for supported clean modes, cannot submit clean modes in RVCUsageLogEvent. readSupportedCleanModesError=%@", buf, 0x16u);
    }
LABEL_12:

    unint64_t v18 = 0;
    goto LABEL_13;
  }
  id v12 = v5;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v13 = v12;
  }
  else {
    id v13 = 0;
  }
  id v14 = v13;

  int v15 = objc_msgSend(v14, "hmf_isEmpty");
  if (v15)
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = *(id *)(a1 + 32);
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v57 = v17;
      __int16 v58 = 2112;
      id v59 = v12;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Accessory returned incorrect data for readSupportedCleanModesValues, cannot submit clean modes in RVCUsageLogEvent. readSupportedCleanModesValues=%@", buf, 0x16u);
    }
    goto LABEL_12;
  }
  id v23 = [v12 objectAtIndexedSubscript:0];
  uint64_t v24 = *MEMORY[0x263F10B90];
  uint64_t v25 = [v23 objectForKeyedSubscript:*MEMORY[0x263F10B90]];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v26 = v25;
  }
  else {
    id v26 = 0;
  }
  id v27 = v26;

  uint64_t v28 = *MEMORY[0x263F10C30];
  __int16 v49 = v27;
  BOOL v29 = objc_msgSend(v27, "hmf_arrayForKey:", *MEMORY[0x263F10C30]);
  v54[0] = MEMORY[0x263EF8330];
  v54[1] = 3221225472;
  v54[2] = __73__HMDHome_CHIP__submitRvcUsageLogEventForNodeID_endpointID_source_error___block_invoke_272;
  v54[3] = &unk_264A2C198;
  id v55 = *(id *)(a1 + 40);
  id v30 = objc_msgSend(v29, "na_firstObjectPassingTest:", v54);
  uint64_t v31 = [v30 objectForKeyedSubscript:v24];
  id v32 = [v31 objectForKeyedSubscript:v28];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v33 = v32;
  }
  else {
    id v33 = 0;
  }
  id v34 = v33;

  unint64_t v35 = [v34 count];
  if (v35 < 3)
  {
    v45 = (void *)MEMORY[0x230FBD990]();
    id v46 = *(id *)(a1 + 32);
    int v47 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      long long v48 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v57 = v48;
      __int16 v58 = 2112;
      id v59 = v12;
      _os_log_impl(&dword_22F52A000, v47, OS_LOG_TYPE_ERROR, "%{public}@Accessory returned incorrect data for readSupportedCleanModesValues, cannot submit clean modes in RVCUsageLogEvent. readSupportedCleanModesValues=%@", buf, 0x16u);
    }
    unint64_t v18 = 0;
  }
  else
  {
    uint64_t v36 = [v30 objectForKeyedSubscript:v24];
    uint64_t v37 = [v36 objectForKeyedSubscript:v28];
    uint64_t v38 = [v37 objectAtIndexedSubscript:2];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      __int16 v39 = v38;
    }
    else {
      __int16 v39 = 0;
    }
    id v40 = v39;

    uint64_t v41 = [v40 objectForKeyedSubscript:v24];

    id v42 = [v41 objectForKeyedSubscript:v28];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v43 = v42;
    }
    else {
      uint64_t v43 = 0;
    }
    id v44 = v43;

    unint64_t v18 = objc_msgSend(v44, "na_map:", &__block_literal_global_9058);
  }
  uint64_t v7 = (void *)&unk_2303E3000;
LABEL_13:
  __int16 v19 = *(void **)(a1 + 32);
  v50[0] = MEMORY[0x263EF8330];
  v50[1] = v7[326];
  v50[2] = __73__HMDHome_CHIP__submitRvcUsageLogEventForNodeID_endpointID_source_error___block_invoke_279;
  v50[3] = &unk_264A158C8;
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v53 = *(void *)(a1 + 72);
  v50[4] = v19;
  id v51 = v18;
  uint64_t v21 = *(void *)(a1 + 48);
  id v52 = *(id *)(a1 + 56);
  id v22 = v18;
  [v19 readAttributeWithNodeId:v20 endpointId:v21 clusterId:&unk_26E4707E0 attributeId:&unk_26E4707F8 params:0 completion:v50];
}

uint64_t __73__HMDHome_CHIP__submitRvcUsageLogEventForNodeID_endpointID_source_error___block_invoke_272(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *MEMORY[0x263F10B90];
  id v5 = [v3 objectForKeyedSubscript:*MEMORY[0x263F10B90]];
  uint64_t v6 = *MEMORY[0x263F10C30];
  uint64_t v7 = [v5 objectForKeyedSubscript:*MEMORY[0x263F10C30]];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v8 = v7;
  }
  else {
    id v8 = 0;
  }
  id v9 = v8;

  unint64_t v10 = [v9 count];
  if (v10 >= 2)
  {
    id v12 = [v3 objectForKeyedSubscript:v4];
    id v13 = [v12 objectForKeyedSubscript:v6];
    id v14 = [v13 objectAtIndexedSubscript:1];
    int v15 = [v14 objectForKeyedSubscript:v4];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    id v17 = v16;

    unint64_t v18 = objc_msgSend(v17, "hmf_numberForKey:", v6);

    uint64_t v11 = [v18 isEqual:*(void *)(a1 + 32)];
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void __73__HMDHome_CHIP__submitRvcUsageLogEventForNodeID_endpointID_source_error___block_invoke_279(uint64_t a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = MEMORY[0x230FBD990]();
    id v8 = *(id *)(a1 + 32);
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      unint64_t v10 = HMFGetLogIdentifier();
      int v34 = 138543618;
      unint64_t v35 = v10;
      __int16 v36 = 2112;
      id v37 = v6;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Accessory returned error for selected areas, cannot submit roomCount in RVCUsageLogEvent. readSelectedAreasError=%@", (uint8_t *)&v34, 0x16u);
    }
    uint64_t v11 = (void *)v7;
LABEL_12:
    uint64_t v20 = 0;
    goto LABEL_13;
  }
  id v12 = v5;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v13 = v12;
  }
  else {
    id v13 = 0;
  }
  id v14 = v13;

  int v15 = objc_msgSend(v14, "hmf_isEmpty");
  if (v15)
  {
    uint64_t v16 = MEMORY[0x230FBD990]();
    id v17 = *(id *)(a1 + 32);
    unint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      __int16 v19 = HMFGetLogIdentifier();
      int v34 = 138543618;
      unint64_t v35 = v19;
      __int16 v36 = 2112;
      id v37 = v12;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Accessory returned incorrect data for readSelectedAreasValues, cannot submit roomCount in RVCUsageLogEvent. readSelectedAreasValues=%@", (uint8_t *)&v34, 0x16u);
    }
    uint64_t v11 = (void *)v16;
    goto LABEL_12;
  }
  BOOL v29 = [v12 objectAtIndexedSubscript:0];
  id v30 = [v29 objectForKeyedSubscript:*MEMORY[0x263F10B90]];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = 0;
  }
  id v32 = v31;

  id v33 = objc_msgSend(v32, "hmf_arrayForKey:", *MEMORY[0x263F10C30]);

  uint64_t v20 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v33, "count"));

LABEL_13:
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v22 = [v20 isEqual:&unk_26E470810];
  if ([v20 isEqual:&unk_26E470810]) {
    id v23 = 0;
  }
  else {
    id v23 = v20;
  }
  uint64_t v24 = NSNumber;
  uint64_t v25 = [*(id *)(a1 + 32) rooms];
  id v26 = objc_msgSend(v24, "numberWithUnsignedInteger:", objc_msgSend(v25, "count"));
  id v27 = +[HMDRVCUsageLogEvent eventWithSource:v21 wholeHouse:v22 roomCount:v23 roomsInHome:v26 cleanModes:*(void *)(a1 + 40)];

  uint64_t v28 = [*(id *)(a1 + 32) logEventSubmitter];
  [v28 submitLogEvent:v27 error:*(void *)(a1 + 48)];
}

id __73__HMDHome_CHIP__submitRvcUsageLogEventForNodeID_endpointID_source_error___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = *MEMORY[0x263F10B90];
  uint64_t v4 = [v2 objectForKeyedSubscript:*MEMORY[0x263F10B90]];
  uint64_t v5 = *MEMORY[0x263F10C30];
  id v6 = [v4 objectForKeyedSubscript:*MEMORY[0x263F10C30]];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = v7;

  unint64_t v9 = [v8 count];
  unint64_t v10 = 0;
  if (v9 >= 2)
  {
    uint64_t v11 = [v2 objectForKeyedSubscript:v3];
    id v12 = [v11 objectForKeyedSubscript:v5];
    id v13 = [v12 objectAtIndexedSubscript:1];
    id v14 = [v13 objectForKeyedSubscript:v3];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    id v16 = v15;

    unint64_t v10 = objc_msgSend(v16, "hmf_numberForKey:", v5);
  }
  return v10;
}

- (void)submitLogEventForCommandResponse:(id)a3 nodeID:(unint64_t)a4 endpointID:(id)a5 clusterID:(id)a6 commandID:(id)a7 fields:(id)a8 source:(unint64_t)a9 error:(id)a10
{
  id v21 = a5;
  id v15 = a7;
  id v16 = a10;
  id v17 = a8;
  id v18 = a6;
  if ([v18 isEqual:&unk_26E470768]
    && [v15 isEqual:&unk_26E470780])
  {
    [(HMDHome *)self submitRvcUsageLogEventForNodeID:a4 endpointID:v21 source:a9 error:v16];
  }
  __int16 v19 = [[HMDMatterAccessoryInvokeCommandLogEvent alloc] initWithHome:self nodeId:a4 endpointId:v21 clusterId:v18 commandId:v15 fields:v17 source:a9];

  uint64_t v20 = [(HMDHome *)self logEventSubmitter];
  [v20 submitLogEvent:v19 error:v16];
}

- (void)submitLogEventForWriteAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 value:(id)a7 timedWriteTimeout:(id)a8 error:(id)a9
{
  id v16 = a9;
  id v17 = a8;
  id v18 = a7;
  id v19 = a6;
  id v20 = a5;
  id v21 = a4;
  id v23 = [[HMDMatterAccessoryWriteAttributeLogEvent alloc] initWithHome:self nodeId:a3 endpointId:v21 clusterId:v20 attributeId:v19 value:v18 timedWriteTimeout:v17];

  uint64_t v22 = [(HMDHome *)self logEventSubmitter];
  [v22 submitLogEvent:v23 error:v16];
}

- (void)invokeCommandWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 commandId:(id)a6 fields:(id)a7 timedInvokeTimeout:(id)a8 source:(unint64_t)a9 completion:(id)a10
{
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = a7;
  id v20 = a8;
  id v21 = a10;
  uint64_t v22 = [(HMDHome *)self featureDataSource];
  int v23 = [v22 isRVCEnabled];

  if (v23)
  {
    id v28 = v21;
    uint64_t v24 = [NSNumber numberWithUnsignedLongLong:a3];
    uint64_t v25 = [(HMDHome *)self matterAccessoryWithNodeID:v24];
    id v26 = [v25 matterAdapter];

    if ([v26 useMatterPlugin])
    {
      id v27 = [MEMORY[0x263F10D90] commandPathWithEndpointID:v16 clusterID:v17 commandID:v18];
      [v26 invokeCommand:v27 fields:v19 expectedValues:0 source:a9 completion:v28];

      id v21 = v28;
      goto LABEL_10;
    }

    id v21 = v28;
  }
  id v26 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  [v26 setCHIPRemoteCommand:*MEMORY[0x263F49908]];
  [v26 setCHIPEndpointId:v16 clusterId:v17 commandId:v18];
  if (v19) {
    [v26 setCHIPCommandFields:v19];
  }
  if (v20) {
    [v26 setCHIPTimedInvokeTimeout:v20];
  }
  v29[0] = MEMORY[0x263EF8330];
  v29[1] = 3221225472;
  v29[2] = __116__HMDHome_CHIP__invokeCommandWithNodeId_endpointId_clusterId_commandId_fields_timedInvokeTimeout_source_completion___block_invoke;
  v29[3] = &unk_264A15880;
  void v29[4] = self;
  id v34 = v21;
  unint64_t v35 = a3;
  id v30 = v16;
  id v31 = v17;
  id v32 = v18;
  id v33 = v19;
  unint64_t v36 = a9;
  [(HMDHome *)self _sendRemoteMessageUsingNodeId:a3 payload:v26 completion:v29];

LABEL_10:
}

void __116__HMDHome_CHIP__invokeCommandWithNodeId_endpointId_clusterId_commandId_fields_timedInvokeTimeout_source_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  unint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v10 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    id v14 = v10;
    __int16 v15 = 2112;
    id v16 = v5;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Invoke command response: %@, error: %@", buf, 0x20u);
  }
  uint64_t v11 = *(void *)(a1 + 72);
  id v12 = [v5 objectForKeyedSubscript:@"results"];
  (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v12, v6);

  [*(id *)(a1 + 32) submitLogEventForCommandResponse:v5 nodeID:*(void *)(a1 + 80) endpointID:*(void *)(a1 + 40) clusterID:*(void *)(a1 + 48) commandID:*(void *)(a1 + 56) fields:*(void *)(a1 + 64) source:*(void *)(a1 + 88) error:v6];
}

- (void)writeAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 value:(id)a7 timedWriteTimeout:(id)a8 completion:(id)a9
{
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = a9;
  id v21 = [(HMDHome *)self featureDataSource];
  int v22 = [v21 isRVCEnabled];

  if (v22)
  {
    id v27 = v20;
    int v23 = [NSNumber numberWithUnsignedLongLong:a3];
    uint64_t v24 = [(HMDHome *)self matterAccessoryWithNodeID:v23];
    id v25 = [v24 matterAdapter];

    if ([v25 useMatterPlugin])
    {
      id v26 = [MEMORY[0x263F10C50] attributePathWithEndpointID:v15 clusterID:v16 attributeID:v17];
      [v25 writeAttribute:v26 value:v18 timedWriteTimeout:v19 completion:v27];

      id v20 = v27;
      goto LABEL_8;
    }

    id v20 = v27;
  }
  id v25 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  [v25 setCHIPRemoteCommand:*MEMORY[0x263F49928]];
  [v25 setCHIPEndpointId:v15 clusterId:v16 attributeId:v17];
  [v25 setCHIPData:v18];
  if (v19) {
    [v25 setCHIPTimedWriteTimeout:v19];
  }
  v28[0] = MEMORY[0x263EF8330];
  v28[1] = 3221225472;
  v28[2] = __110__HMDHome_CHIP__writeAttributeWithNodeId_endpointId_clusterId_attributeId_value_timedWriteTimeout_completion___block_invoke;
  v28[3] = &unk_264A15858;
  v28[4] = self;
  id v34 = v20;
  unint64_t v35 = a3;
  id v29 = v15;
  id v30 = v16;
  id v31 = v17;
  id v32 = v18;
  id v33 = v19;
  [(HMDHome *)self _sendRemoteMessageUsingNodeId:a3 payload:v25 completion:v28];

LABEL_8:
}

void __110__HMDHome_CHIP__writeAttributeWithNodeId_endpointId_clusterId_attributeId_value_timedWriteTimeout_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  unint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v10 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    id v14 = v10;
    __int16 v15 = 2112;
    id v16 = v5;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Write attribute response: %@, error: %@", buf, 0x20u);
  }
  uint64_t v11 = *(void *)(a1 + 80);
  id v12 = [v5 objectForKeyedSubscript:@"results"];
  (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v12, v6);

  [*(id *)(a1 + 32) submitLogEventForWriteAttributeWithNodeId:*(void *)(a1 + 88) endpointId:*(void *)(a1 + 40) clusterId:*(void *)(a1 + 48) attributeId:*(void *)(a1 + 56) value:*(void *)(a1 + 64) timedWriteTimeout:*(void *)(a1 + 72) error:v6];
}

- (void)readAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 params:(id)a7 completion:(id)a8
{
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  uint64_t v19 = [(HMDHome *)self featureDataSource];
  int v20 = [v19 isRVCEnabled];

  if (!v20) {
    goto LABEL_5;
  }
  id v21 = [NSNumber numberWithUnsignedLongLong:a3];
  int v22 = [(HMDHome *)self matterAccessoryWithNodeID:v21];
  id v23 = [v22 matterAdapter];

  if (![v23 useMatterPlugin])
  {

LABEL_5:
    id v23 = objc_alloc_init(MEMORY[0x263EFF9A0]);
    [v23 setCHIPRemoteCommand:*MEMORY[0x263F49920]];
    [v23 setCHIPEndpointId:v14 clusterId:v15 attributeId:v16];
    [v23 setCHIPEncodedParams:v17];
    v26[0] = MEMORY[0x263EF8330];
    v26[1] = 3221225472;
    v26[2] = __92__HMDHome_CHIP__readAttributeWithNodeId_endpointId_clusterId_attributeId_params_completion___block_invoke;
    v26[3] = &unk_264A22F40;
    v26[4] = self;
    id v27 = v18;
    [(HMDHome *)self _sendRemoteMessageUsingNodeId:a3 payload:v23 completion:v26];

    goto LABEL_6;
  }
  uint64_t v24 = [MEMORY[0x263F10C50] attributePathWithEndpointID:v14 clusterID:v15 attributeID:v16];
  id v25 = [MEMORY[0x263F10DB0] decodeXPCReadParams:v17];
  [v23 readAttribute:v24 params:v25 completion:v18];

LABEL_6:
}

void __92__HMDHome_CHIP__readAttributeWithNodeId_endpointId_clusterId_attributeId_params_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  unint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v10 = HMFGetLogIdentifier();
    int v13 = 138543874;
    id v14 = v10;
    __int16 v15 = 2112;
    id v16 = v5;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Read attribute response: %@, error: %@", (uint8_t *)&v13, 0x20u);
  }
  uint64_t v11 = *(void *)(a1 + 40);
  id v12 = [v5 objectForKeyedSubscript:@"results"];
  (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v12, v6);
}

- (id)matterAccessoryWithNodeID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self matterAccessories];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  v9[2] = __43__HMDHome_CHIP__matterAccessoryWithNodeID___block_invoke;
  void v9[3] = &unk_264A18BB0;
  id v10 = v4;
  id v6 = v4;
  uint64_t v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v9);

  return v7;
}

uint64_t __43__HMDHome_CHIP__matterAccessoryWithNodeID___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 matterNodeID];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

- (void)remotelyUpdateHomeModelWithCHIPKeyValueStore:(id)a3 removedKeys:(id)a4 completion:(id)a5
{
  v54[1] = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [(HMDHome *)self home];
  if (v11)
  {
    id v12 = (void *)MEMORY[0x263EFF9A0];
    uint64_t v53 = @"HMDHomeRemoteUpdateCHIPKeyValueStoreMessageKey";
    v54[0] = v8;
    int v13 = [NSDictionary dictionaryWithObjects:v54 forKeys:&v53 count:1];
    id v14 = [v12 dictionaryWithDictionary:v13];

    id v44 = v9;
    [v14 setObject:v9 forKeyedSubscript:@"HMDHomeRemoteUpdateCHIPRemovedKeysMessageKey"];
    id v15 = objc_alloc(MEMORY[0x263F42590]);
    id v16 = objc_alloc(MEMORY[0x263F42570]);
    __int16 v17 = [v11 messageTargetUUID];
    id v18 = (void *)[v16 initWithTarget:v17];
    uint64_t v19 = (void *)[v15 initWithName:@"HMDHomeRemoteUpdateCHIPKeyValueStoreMessage" destination:v18 payload:v14];

    int v20 = [v19 identifier];
    v46[0] = MEMORY[0x263EF8330];
    v46[1] = 3221225472;
    v46[2] = __85__HMDHome_CHIP__remotelyUpdateHomeModelWithCHIPKeyValueStore_removedKeys_completion___block_invoke;
    v46[3] = &unk_264A2B910;
    v46[4] = self;
    id v42 = v20;
    id v43 = v10;
    id v47 = v42;
    id v21 = v10;
    id v48 = v21;
    int v22 = (void *)MEMORY[0x230FBD990]([v19 setResponseHandler:v46]);
    id v23 = self;
    uint64_t v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      id v25 = HMFGetLogIdentifier();
      [v19 shortDescription];
      v27 = id v26 = v8;
      *(_DWORD *)buf = 138543618;
      id v50 = v25;
      __int16 v51 = 2112;
      id v52 = v27;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Remotely updating home model with CHIP key value store using message: %@", buf, 0x16u);

      id v8 = v26;
    }

    id v28 = [(HMDHome *)v23 administratorHandler];
    id v45 = 0;
    id v29 = [v28 operationForMessage:v19 error:&v45];
    id v30 = v45;

    if (v29)
    {
      id v31 = [(HMDHome *)v23 administratorHandler];
      [v31 addOperation:v29];
    }
    else
    {
      unint64_t v36 = (void *)MEMORY[0x230FBD990]();
      id v37 = v23;
      uint64_t v38 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        uint64_t v41 = v36;
        v40 = id v39 = v8;
        *(_DWORD *)buf = 138543618;
        id v50 = v40;
        __int16 v51 = 2112;
        id v52 = v30;
        _os_log_impl(&dword_22F52A000, v38, OS_LOG_TYPE_ERROR, "%{public}@Failed to create home administration configuration operation for remotely updating home model with key value store: %@", buf, 0x16u);

        id v8 = v39;
        unint64_t v36 = v41;
      }

      (*((void (**)(id, id))v21 + 2))(v21, v30);
    }
    id v9 = v44;

    id v10 = v43;
    goto LABEL_14;
  }
  id v32 = (void *)MEMORY[0x230FBD990]();
  id v33 = self;
  id v34 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    unint64_t v35 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v50 = v35;
    _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_ERROR, "%{public}@Home reference is nil", buf, 0xCu);
  }
  id v14 = (void (**)(void, void))_Block_copy(v10);
  if (v14)
  {
    uint64_t v19 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    ((void (**)(void, void *))v14)[2](v14, v19);
LABEL_14:
  }
}

void __85__HMDHome_CHIP__remotelyUpdateHomeModelWithCHIPKeyValueStore_removedKeys_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  id v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      uint64_t v12 = *(void *)(a1 + 40);
      int v20 = 138543874;
      id v21 = v11;
      __int16 v22 = 2112;
      uint64_t v23 = v12;
      __int16 v24 = 2112;
      id v25 = v5;
      int v13 = "%{public}@Failed to remotely update CHIP key value store for message %@: %@";
      id v14 = v10;
      os_log_type_t v15 = OS_LOG_TYPE_ERROR;
      uint32_t v16 = 32;
LABEL_6:
      _os_log_impl(&dword_22F52A000, v14, v15, v13, (uint8_t *)&v20, v16);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    uint64_t v17 = *(void *)(a1 + 40);
    int v20 = 138543618;
    id v21 = v11;
    __int16 v22 = 2112;
    uint64_t v23 = v17;
    int v13 = "%{public}@Successfully remotely updated CHIP key value store for message %@";
    id v14 = v10;
    os_log_type_t v15 = OS_LOG_TYPE_INFO;
    uint32_t v16 = 22;
    goto LABEL_6;
  }

  (*(void (**)(void, id, uint64_t, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v5, v18, v19);
}

- (BOOL)updateCHIPPropertiesOnHomeModel:(id)a3 usingUpdatedHomeInfo:(id)a4
{
  id v6 = a3;
  uint64_t v7 = [a4 objectForKeyedSubscript:@"HMDHomeModelUpdatedCHIPPropertiesMessageKeyFabricID"];
  if (v7
    && ([(HMDHome *)self chipStorage],
        id v8 = objc_claimAutoreleasedReturnValue(),
        [v8 fabricID],
        id v9 = objc_claimAutoreleasedReturnValue(),
        char v10 = HMFEqualObjects(),
        v9,
        v8,
        (v10 & 1) == 0))
  {
    [v6 setChipFabricID:v7];
    [v6 setChipFabricIndex:v7];
    BOOL v11 = 1;
  }
  else
  {
    BOOL v11 = 0;
  }

  return v11;
}

+ (void)updateCHIPPropertiesOnAccessoryModel:(id)a3 forAddedHAPAccessoryServer:(id)a4
{
  id v10 = a3;
  id v5 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;
  id v8 = v7;
  if (v7)
  {
    id v9 = [v7 nodeID];
    [v10 setChipNodeID:v9];
  }
}

+ (BOOL)updateCHIPPropertiesOnHomeModel:(id)a3 forAddedHAPAccessoryServer:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }
  id v8 = v7;
  id v9 = [v8 fabricID];

  if (v9)
  {
    id v10 = [v8 fabricID];
    [v5 setChipFabricID:v10];

    BOOL v11 = [v8 fabricID];
    [v5 setChipFabricIndex:v11];
  }
  return v9 != 0;
}

+ (void)updateCHIPPropertiesOnMKFAccessoryModel:(id)a3 forAddedHAPAccessoryServer:(id)a4
{
  id v18 = a3;
  id v5 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;
  id v8 = v7;
  if (v7)
  {
    id v9 = [v7 nodeID];
    [v18 setMatterNodeID:v9];

    id v10 = [v8 vendorID];

    if (v10)
    {
      BOOL v11 = [v8 vendorID];
      [v18 setMatterVendorID:v11];
    }
    uint64_t v12 = [v8 productID];

    if (v12)
    {
      int v13 = [v8 productID];
      [v18 setMatterProductID:v13];
    }
    id v14 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v8, "isWEDDevice"));
    [v18 setMatterWEDSupport:v14];

    os_log_type_t v15 = [v8 eMACAddress];
    [v18 setMatterExtendedMACAddress:v15];

    uint32_t v16 = [v8 softwareVersionNumber];
    [v18 setMatterSoftwareVersionNumber:v16];

    uint64_t v17 = [v8 supportedLinkLayerTypes];
    [v18 setSupportedLinkLayerTypes:v17];
  }
}

+ (id)updatedHomeModelCHIPPropertiesForAddedHAPAccessoryServer:(id)a3
{
  v11[2] = *MEMORY[0x263EF8340];
  id v3 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = v4;
  id v6 = [v5 fabricID];

  if (v6)
  {
    v10[0] = @"HMDHomeModelUpdatedCHIPPropertiesMessageKeyFabricID";
    id v7 = [v5 fabricID];
    v10[1] = @"HMDHomeModelUpdatedCHIPPropertiesMessageKeyFabricIndex";
    v11[0] = v7;
    id v8 = [v5 fabricID];
    v11[1] = v8;
    id v6 = [NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:2];
  }
  return v6;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_notificationHandlerMap, 0);
  objc_storeStrong((id *)&self->_featureDataSource, 0);
  objc_storeStrong((id *)&self->_hindsightCloudShareManager, 0);
  objc_storeStrong((id *)&self->_deviceHomeKitSetupSession, 0);
  objc_storeStrong((id *)&self->_audioAnalysisBulletinNotificationManager, 0);
  objc_storeStrong((id *)&self->_audioAnalysisStereoPairController, 0);
  objc_storeStrong((id *)&self->_actionSetStateSubscriptionManager, 0);
  objc_storeStrong((id *)&self->_carPlayDataSource, 0);
  objc_storeStrong((id *)&self->_siriSecureAccessoryAccessController, 0);
  objc_storeStrong((id *)&self->_homeTheaterSetupMetricDispatcher, 0);
  objc_storeStrong((id *)&self->_mediaSystemSetupMetricDispatcher, 0);
  objc_storeStrong((id *)&self->_mediaGroupsAggregateConsumer, 0);
  objc_storeStrong((id *)&self->_chipLocalSubscribers, 0);
  objc_storeStrong((id *)&self->_altTargetFabricUUID, 0);
  objc_storeStrong((id *)&self->_currentAdministerCATID, 0);
  objc_storeStrong((id *)&self->_currentOperateCATID, 0);
  objc_storeStrong((id *)&self->_threadOperationalDataset, 0);
  objc_storeStrong((id *)&self->_fabric, 0);
  objc_storeStrong((id *)&self->_controllerPrivateStorage, 0);
  objc_storeStrong((id *)&self->_chipStorage, 0);
  objc_storeStrong((id *)&self->_accountSettings, 0);
  objc_storeStrong((id *)&self->_homeRemoteEventAccessController, 0);
  objc_storeStrong((id *)&self->_reachabilityNotificationManager, 0);
  objc_storeStrong((id *)&self->_personManagerZoneUUID, 0);
  objc_storeStrong((id *)&self->_fetchedAccessorySettingsSubscriber, 0);
  objc_storeStrong((id *)&self->_mediaActionRouter, 0);
  objc_storeStrong((id *)&self->_sharedHomeSourceVersion, 0);
  objc_storeStrong((id *)&self->_predicateUtility, 0);
  objc_storeStrong((id *)&self->_uuidToHAPAccessoryConfigTable, 0);
  objc_storeStrong((id *)&self->_ownedTriggers, 0);
  objc_storeStrong((id *)&self->_pendingResponsesTimer, 0);
  objc_storeStrong((id *)&self->_pendingResponses, 0);
  objc_storeStrong((id *)&self->_disableNotificationTimer, 0);
  objc_storeStrong((id *)&self->_remoteReachabilityNotificationPendingAccessories, 0);
  objc_storeStrong((id *)&self->_reachabilityNotificationTimer, 0);
  objc_storeStrong((id *)&self->_reachabilityRegisteredDevices, 0);
  objc_storeStrong((id *)&self->_stagedRemoteReachabilityRegistration, 0);
  objc_storeStrong((id *)&self->_sharedHomeUpdateHandler, 0);
  objc_storeStrong((id *)&self->_residentDeviceManager, 0);
  objc_storeStrong((id *)&self->_unpairedSecondaryHAPAccessories, 0);
  objc_storeStrong((id *)&self->_modifyNotificationsCoalesceTimer, 0);
  objc_storeStrong((id *)&self->_localCapabilitiesDataSource, 0);
  objc_storeStrong((id *)&self->_matterAttributesEnableNotificationPayload, 0);
  objc_storeStrong((id *)&self->_actionSetsDisableNotificationPayload, 0);
  objc_storeStrong((id *)&self->_actionSetsEnableNotificationPayload, 0);
  objc_storeStrong((id *)&self->_disableNotificationPayload, 0);
  objc_storeStrong((id *)&self->_enableNotificationPayload, 0);
  objc_storeStrong((id *)&self->_assistantOperations, 0);
  objc_storeStrong((id *)&self->_pendingResponsesForRemoteAccessSetup, 0);
  objc_storeStrong((id *)&self->_heartbeatPingMessagesQueuedWithServer, 0);
  objc_storeStrong((id *)&self->_notificationRegistry, 0);
  objc_storeStrong((id *)&self->_firstHAPAccessoryAddedDate, 0);
  objc_storeStrong((id *)&self->_creationDate, 0);
  objc_storeStrong((id *)&self->_ownerName, 0);
  objc_storeStrong((id *)&self->_roomForEntireHome, 0);
  objc_storeStrong((id *)&self->_unconfiguredResidentDevices, 0);
  objc_storeStrong((id *)&self->_removedUsers, 0);
  objc_storeStrong((id *)&self->_usersPendingUserManagementOperations, 0);
  objc_storeStrong((id *)&self->_retrievalAccessoryCompletionTuples, 0);
  objc_storeStrong((id *)&self->_triggerOwnedActionSets, 0);
  objc_storeStrong((id *)&self->_actionSets, 0);
  objc_storeStrong((id *)&self->_serviceGroups, 0);
  objc_storeStrong((id *)&self->_services, 0);
  objc_storeStrong((id *)&self->_discoveredAccessories, 0);
  objc_storeStrong((id *)&self->_zones, 0);
  objc_storeStrong((id *)&self->_rooms, 0);
  objc_storeStrong((id *)&self->_accessoryMessageRouterViaPrimary, 0);
  objc_storeStrong((id *)&self->_notificationCenter, 0);
  objc_storeStrong((id *)&self->_appleDeviceRouter, 0);
  objc_storeStrong((id *)&self->_primaryResidentMessageRouter, 0);
  objc_storeStrong((id *)&self->_accessoryBrowser, 0);
  objc_storeStrong((id *)&self->_msgDispatcher, 0);
  objc_storeStrong((id *)&self->_workQueue, 0);
  objc_storeStrong((id *)&self->_homeObjectChangeHandler, 0);
  objc_storeStrong((id *)&self->_accessorySettingsMessenger, 0);
  objc_storeStrong((id *)&self->_multiuserSettingsMessenger, 0);
  objc_storeStrong((id *)&self->_siriEndpointProfilesMessenger, 0);
  objc_storeStrong((id *)&self->_unifiedLanguageValueListSettingDataProvider, 0);
  objc_storeStrong((id *)&self->_appData, 0);
  objc_storeStrong(&self->_wifiManagerFactory, 0);
  objc_storeStrong(&self->_netManagerFactory, 0);
  objc_storeStrong((id *)&self->_matterFabricEnabledClients, 0);
  objc_storeStrong((id *)&self->_accessoryRemoteReachabilityEnabledClients, 0);
  objc_storeStrong((id *)&self->_remoteEventRouterClientController, 0);
  objc_storeStrong((id *)&self->_pendingCharacteristicThresholdPayload, 0);
  objc_storeStrong((id *)&self->_selfRemovalWatchdog, 0);
  objc_storeStrong((id *)&self->_mediaStateSubscriber, 0);
  objc_storeStrong((id *)&self->_currentHomeKitVersion, 0);
  objc_storeStrong(&self->_matterCapabilitiesFactory, 0);
  objc_storeStrong((id *)&self->_modernMessagingHandler, 0);
  objc_storeStrong((id *)&self->_reportingSessionManager, 0);
  objc_storeStrong((id *)&self->_keychainStore, 0);
  objc_storeStrong((id *)&self->_primaryResidentMessagingHandler, 0);
  objc_storeStrong((id *)&self->_capabilitiesAggregator, 0);
  objc_storeStrong((id *)&self->_serverDelegatingEventRouter, 0);
  objc_storeStrong((id *)&self->_accessoryInfoFetchController, 0);
  objc_storeStrong((id *)&self->_deviceLockStateDataSource, 0);
  objc_storeStrong((id *)&self->_hapMetadata, 0);
  objc_storeStrong((id *)&self->_metricsDispatcher, 0);
  objc_storeStrong((id *)&self->_homeIntelligenceActivityLogger, 0);
  objc_storeStrong((id *)&self->_residentSyncClientDidSyncPromise, 0);
  objc_storeStrong((id *)&self->_accessoryReaderWriter, 0);
  objc_storeStrong((id *)&self->_accessoryConnectionCoordinator, 0);
  objc_storeStrong((id *)&self->_naturalLightingContextUpdater, 0);
  objc_storeStrong((id *)&self->_personDataManager, 0);
  objc_storeStrong((id *)&self->_remoteEventRouterServer, 0);
  objc_storeStrong((id *)&self->_actionSetStateObserver, 0);
  objc_storeStrong((id *)&self->_connectionsDiscoveringSymptomsForNearbyDevices, 0);
  objc_storeStrong((id *)&self->_homeReprovisionHandler, 0);
  objc_storeStrong((id *)&self->_addPendingAccessories, 0);
  objc_storeStrong((id *)&self->_addPendingAccessoryOnboardingSetupPayloadStrings, 0);
  objc_storeStrong((id *)&self->_addPendingAccessorySetupCodes, 0);
  objc_storeStrong((id *)&self->_addPendingAccessorySetupCodeHandlers, 0);
  objc_storeStrong((id *)&self->_WiFiAssertion, 0);
  objc_storeStrong((id *)&self->_removeAccessoryInProgressForHMDAccessories, 0);
  objc_storeStrong((id *)&self->_xpcMessageTransportFactory, 0);
  objc_storeStrong(&self->_currentUserFactory, 0);
  objc_storeStrong((id *)&self->_timeZone, 0);
  objc_storeStrong((id *)&self->_acwgGroupResolvingKey, 0);
  objc_storeStrong((id *)&self->_dailyScheduler, 0);
  objc_storeStrong((id *)&self->_logEventSubmitter, 0);
  objc_storeStrong((id *)&self->_bulletinUserAttributionManager, 0);
  objc_storeStrong((id *)&self->_cameraBulletinNotificationManager, 0);
  objc_storeStrong((id *)&self->_accessoryBulletinNotificationManager, 0);
  objc_storeStrong((id *)&self->_reachabilityChangedLogEventManager, 0);
  objc_storeStrong((id *)&self->_residentSyncClientDidSyncFuture, 0);
  objc_storeStrong((id *)&self->_residentSyncManager, 0);
  objc_storeStrong((id *)&self->_lockNotificationManager, 0);
  objc_storeStrong((id *)&self->_removedUserInfoByAccessCode, 0);
  objc_storeStrong((id *)&self->_labelIdentifiersByAccessCode, 0);
  objc_storeStrong((id *)&self->_labelsByAccessCode, 0);
  objc_storeStrong((id *)&self->_accessCodeManager, 0);
  objc_storeStrong((id *)&self->_nfcReaderKeyManager, 0);
  objc_storeStrong((id *)&self->_walletKeyManager, 0);
  objc_storeStrong((id *)&self->_naturalLightingCurveWriter, 0);
  objc_storeStrong((id *)&self->_userActionPredictionManager, 0);
  objc_storeStrong((id *)&self->_analysisStatePublisher, 0);
  objc_storeStrong((id *)&self->_primaryResidentChangeMonitor, 0);
  objc_storeStrong((id *)&self->_periodicReader, 0);
  objc_storeStrong((id *)&self->_mediaSystemController, 0);
  objc_storeStrong((id *)&self->_presenceMonitor, 0);
  objc_storeStrong((id *)&self->_notificationsUpdatedTime, 0);
  objc_storeStrong((id *)&self->_mediaGroupsUnconfiguredParticipantOnboardingManager, 0);
  objc_storeStrong((id *)&self->_mediaGroupsAggregator, 0);
  objc_storeStrong((id *)&self->_administratorHandler, 0);
  objc_storeStrong((id *)&self->_presenceComputeStatus, 0);
  objc_storeStrong((id *)&self->_presenceAuthStatus, 0);
  objc_storeStrong((id *)&self->_homeLocationHandler, 0);
  objc_storeStrong((id *)&self->_zoneID, 0);
  objc_storeStrong((id *)&self->_spiClientIdentifier, 0);
  objc_storeStrong((id *)&self->_uuid, 0);
  objc_destroyWeak((id *)&self->_homeManager);
  objc_storeStrong((id *)&self->_lookup, 0);
  objc_storeStrong((id *)&self->_naturalLightingContext, 0);
  objc_storeStrong((id *)&self->_personManagerSettings, 0);
  objc_storeStrong((id *)&self->_userActivityStateDetectorManager, 0);
  objc_storeStrong((id *)&self->_clientWalletKeyUUID, 0);
  objc_storeStrong((id *)&self->_numberOfCameras, 0);
  objc_storeStrong((id *)&self->_matterDeviceController, 0);
  objc_storeStrong((id *)&self->_availableBSPsCount, 0);
  objc_storeStrong((id *)&self->_availableBorderRouters, 0);
  objc_storeStrong((id *)&self->_overriddenHomeAccessControl, 0);
  objc_storeStrong((id *)&self->_nfcReaderKey, 0);
  objc_storeStrong((id *)&self->_threadNetworkPeriodicStatusReporter, 0);
  objc_storeStrong((id *)&self->_unfilteredThreadNetworkID, 0);
  objc_storeStrong((id *)&self->_outgoingInvitations, 0);
  objc_storeStrong((id *)&self->_currentTriggers, 0);
  objc_storeStrong((id *)&self->_name, 0);
  objc_storeStrong((id *)&self->_minHomeKitVersionForAccessoryNetworkProtectionChange, 0);
  objc_storeStrong((id *)&self->_minimumNetworkRouterSupportHomeKitVersion, 0);
  objc_storeStrong((id *)&self->_backingStore, 0);
  objc_storeStrong((id *)&self->_primaryNetworkRouterManagingDeviceUUID, 0);
  objc_storeStrong((id *)&self->_presenceFeeder, 0);
  objc_storeStrong((id *)&self->_newlyConfiguredAccessories, 0);
  objc_storeStrong((id *)&self->_activeNetworkRouterUUID, 0);
  objc_storeStrong((id *)&self->_networkProtectionGroupRegistry, 0);
  objc_storeStrong((id *)&self->_routerClientManager, 0);
  objc_storeStrong((id *)&self->_sharedUserResponseEventBuilders, 0);
  objc_storeStrong((id *)&self->_sharedUserInviteEventBuilders, 0);
  objc_storeStrong((id *)&self->_notificationDeregistrations, 0);
  objc_storeStrong((id *)&self->_notificationRegistrationsForAppleMediaAccessories, 0);
  objc_storeStrong((id *)&self->_notificationRegistrations, 0);
  objc_storeStrong((id *)&self->_residentSelectionVersion, 0);
  objc_storeStrong((id *)&self->_logger, 0);
  objc_storeStrong((id *)&self->_reachabilityUpdatedAccessories, 0);
  objc_storeStrong((id *)&self->_accessoryReachabilityUpdatesTimer, 0);
  objc_storeStrong((id *)&self->_homeLocationTimer, 0);
  objc_storeStrong((id *)&self->_mediaPassword, 0);
  objc_storeStrong((id *)&self->_currentUser, 0);
  objc_storeStrong((id *)&self->_owner, 0);
  objc_storeStrong((id *)&self->_users, 0);
  objc_storeStrong((id *)&self->_mediaSessionStates, 0);
  objc_storeStrong((id *)&self->_mediaSessions, 0);
  objc_storeStrong((id *)&self->_accessories, 0);
}

- (void)setPrimaryResidentChangedTime:(double)a3
{
  self->_primaryResidentChangedTime = a3;
}

- (double)primaryResidentChangedTime
{
  return self->_primaryResidentChangedTime;
}

- (void)setCurrentDeviceBecamePrimaryTime:(double)a3
{
  self->_currentDeviceBecamePrimaryTime = a3;
}

- (double)currentDeviceBecamePrimaryTime
{
  return self->_currentDeviceBecamePrimaryTime;
}

- (void)setDismissedWalletKeyUWBUnlockOnboarding:(BOOL)a3
{
  self->_dismissedWalletKeyUWBUnlockOnboarding = a3;
}

- (BOOL)dismissedWalletKeyUWBUnlockOnboarding
{
  return self->_dismissedWalletKeyUWBUnlockOnboarding;
}

- (void)setNotificationHandlerMap:(id)a3
{
}

- (NSMutableDictionary)notificationHandlerMap
{
  return self->_notificationHandlerMap;
}

- (void)setFeatureDataSource:(id)a3
{
}

- (HMDFeaturesDataSource)featureDataSource
{
  return (HMDFeaturesDataSource *)objc_getProperty(self, a2, 1800, 1);
}

- (void)setThreadNetworkNodeType:(int64_t)a3
{
  self->_threadNetworkNodeType = a3;
}

- (int64_t)threadNetworkNodeType
{
  return self->_threadNetworkNodeType;
}

- (void)setThreadNetworkConnectionState:(int64_t)a3
{
  self->_threadNetworkConnectionState = a3;
}

- (int64_t)threadNetworkConnectionState
{
  return self->_threadNetworkConnectionState;
}

- (void)setHindsightCloudShareManager:(id)a3
{
}

- (HMDHomeHindsightCloudShareManager)hindsightCloudShareManager
{
  return (HMDHomeHindsightCloudShareManager *)objc_getProperty(self, a2, 1776, 1);
}

- (void)setEventLogDuration:(unint64_t)a3
{
  self->_eventLogDuration = a3;
}

- (unint64_t)eventLogDuration
{
  return self->_eventLogDuration;
}

- (void)setEventLogHomeSettingEnabled:(BOOL)a3
{
  self->_eventLogHomeSettingEnabled = a3;
}

- (BOOL)isEventLogHomeSettingEnabled
{
  return self->_eventLogHomeSettingEnabled;
}

- (void)setDidOnboardEventLog:(BOOL)a3
{
  self->_didOnboardEventLog = a3;
}

- (BOOL)didOnboardEventLog
{
  return self->_didOnboardEventLog;
}

- (void)setDeviceHomeKitSetupSession:(id)a3
{
}

- (HMDDeviceHomeKitSetupSession)deviceHomeKitSetupSession
{
  return self->_deviceHomeKitSetupSession;
}

- (void)setIsSiriPhraseOptionsJustSiriEnabled:(BOOL)a3
{
  self->_isSiriPhraseOptionsJustSiriEnabled = a3;
}

- (void)setIsSiriPhraseOptionsHeySiriEnabled:(BOOL)a3
{
  self->_isSiriPhraseOptionsHeySiriEnabled = a3;
}

- (void)setIsSmokeAlarmEnabled:(BOOL)a3
{
  self->_isSmokeAlarmEnabled = a3;
}

- (void)setAudioAnalysisBulletinNotificationManager:(id)a3
{
}

- (HMDAudioAnalysisBulletinNotificationManager)audioAnalysisBulletinNotificationManager
{
  return (HMDAudioAnalysisBulletinNotificationManager *)objc_getProperty(self, a2, 1752, 1);
}

- (void)setAudioAnalysisStereoPairController:(id)a3
{
}

- (HMDHomeAudioAnalysisStereoPairController)audioAnalysisStereoPairController
{
  return (HMDHomeAudioAnalysisStereoPairController *)objc_getProperty(self, a2, 1744, 1);
}

- (HMDActionSetStateSubscriptionManager)actionSetStateSubscriptionManager
{
  return (HMDActionSetStateSubscriptionManager *)objc_getProperty(self, a2, 1736, 1);
}

- (HMDCarPlayDataSource)carPlayDataSource
{
  return (HMDCarPlayDataSource *)objc_getProperty(self, a2, 1728, 1);
}

- (HMDSiriSecureAccessoryAccessController)siriSecureAccessoryAccessController
{
  return (HMDSiriSecureAccessoryAccessController *)objc_getProperty(self, a2, 1720, 1);
}

- (void)setThreadNetworkShouldRestartOnNetworkChange:(BOOL)a3
{
  self->_threadNetworkShouldRestartOnNetworkChange = a3;
}

- (BOOL)threadNetworkShouldRestartOnNetworkChange
{
  return self->_threadNetworkShouldRestartOnNetworkChange;
}

- (HMDMediaGroupSetupMetricDispatcher)homeTheaterSetupMetricDispatcher
{
  return self->_homeTheaterSetupMetricDispatcher;
}

- (HMDMediaGroupSetupMetricDispatcher)mediaSystemSetupMetricDispatcher
{
  return self->_mediaSystemSetupMetricDispatcher;
}

- (HMDMediaGroupsAggregateConsumer)mediaGroupsAggregateConsumer
{
  return (HMDMediaGroupsAggregateConsumer *)objc_getProperty(self, a2, 1696, 1);
}

- (void)setBulletinNotificationsSupported:(BOOL)a3
{
  self->_bulletinNotificationsSupported = a3;
}

- (BOOL)bulletinNotificationsSupported
{
  return self->_bulletinNotificationsSupported;
}

- (void)setChipLocalSubscribers:(id)a3
{
}

- (NSMutableDictionary)chipLocalSubscribers
{
  return self->_chipLocalSubscribers;
}

- (NSUUID)altTargetFabricUUID
{
  return (NSUUID *)objc_getProperty(self, a2, 1680, 1);
}

- (void)setCurrentMatterClientRegistration:(BOOL)a3
{
  self->_currentMatterClientRegistration = a3;
}

- (BOOL)currentMatterClientRegistration
{
  return self->_currentMatterClientRegistration;
}

- (void)setCurrentAdministerCATID:(id)a3
{
}

- (NSNumber)currentAdministerCATID
{
  return self->_currentAdministerCATID;
}

- (void)setCurrentOperateCATID:(id)a3
{
}

- (NSNumber)currentOperateCATID
{
  return self->_currentOperateCATID;
}

- (void)setThreadOperationalDataset:(id)a3
{
}

- (NSData)threadOperationalDataset
{
  return self->_threadOperationalDataset;
}

- (void)setFabric:(id)a3
{
}

- (HMMTRFabric)fabric
{
  return (HMMTRFabric *)objc_getProperty(self, a2, 1648, 1);
}

- (void)setControllerPrivateStorage:(id)a3
{
}

- (HMDCHIPControllerPrivateStorage)controllerPrivateStorage
{
  return (HMDCHIPControllerPrivateStorage *)objc_getProperty(self, a2, 1640, 1);
}

- (void)setChipStorage:(id)a3
{
}

- (HMDCHIPHomeStorage)chipStorage
{
  return (HMDCHIPHomeStorage *)objc_getProperty(self, a2, 1632, 1);
}

- (HMDAppleAccountSettings)accountSettings
{
  return (HMDAppleAccountSettings *)objc_getProperty(self, a2, 1624, 1);
}

- (unint64_t)nonIPadResidentDeviceCountForHH2Migration
{
  return self->_nonIPadResidentDeviceCountForHH2Migration;
}

- (HMDHomeRemoteEventAccessController)homeRemoteEventAccessController
{
  return (HMDHomeRemoteEventAccessController *)objc_getProperty(self, a2, 1608, 1);
}

- (HMDResidentReachabilityNotificationManager)reachabilityNotificationManager
{
  return (HMDResidentReachabilityNotificationManager *)objc_getProperty(self, a2, 1600, 1);
}

- (void)setPersonManagerZoneUUID:(id)a3
{
}

- (NSUUID)personManagerZoneUUID
{
  return self->_personManagerZoneUUID;
}

- (void)setFetchedAccessorySettingsSubscriber:(id)a3
{
}

- (HMDFetchedAccessorySettingsSubscriber)fetchedAccessorySettingsSubscriber
{
  return self->_fetchedAccessorySettingsSubscriber;
}

- (void)setMediaActionRouter:(id)a3
{
}

- (HMDMediaActionRouter)mediaActionRouter
{
  return self->_mediaActionRouter;
}

- (void)setSharedHomeSourceVersion:(id)a3
{
}

- (HMDHomeKitVersion)sharedHomeSourceVersion
{
  return self->_sharedHomeSourceVersion;
}

- (HMDPredicateUtilities)predicateUtility
{
  return self->_predicateUtility;
}

- (void)setUuidToHAPAccessoryConfigTable:(id)a3
{
}

- (NSMapTable)uuidToHAPAccessoryConfigTable
{
  return self->_uuidToHAPAccessoryConfigTable;
}

- (void)setOwnedTriggers:(id)a3
{
}

- (NSMutableArray)ownedTriggers
{
  return self->_ownedTriggers;
}

- (void)setPendingResponsesTimer:(id)a3
{
}

- (HMFTimer)pendingResponsesTimer
{
  return self->_pendingResponsesTimer;
}

- (void)setPendingResponses:(id)a3
{
}

- (NSMutableDictionary)pendingResponses
{
  return self->_pendingResponses;
}

- (void)setDisableNotificationTimer:(id)a3
{
}

- (HMFTimer)disableNotificationTimer
{
  return self->_disableNotificationTimer;
}

- (void)setRemoteReachabilityNotificationPendingAccessories:(id)a3
{
}

- (NSMutableArray)remoteReachabilityNotificationPendingAccessories
{
  return self->_remoteReachabilityNotificationPendingAccessories;
}

- (void)setReachabilityNotificationTimer:(id)a3
{
}

- (HMFTimer)reachabilityNotificationTimer
{
  return self->_reachabilityNotificationTimer;
}

- (void)setReachabilityRegisteredDevices:(id)a3
{
}

- (NSMutableArray)reachabilityRegisteredDevices
{
  return self->_reachabilityRegisteredDevices;
}

- (void)setIsUpdatedToHH2:(BOOL)a3
{
  self->_isUpdatedToHH2 = a3;
}

- (BOOL)isUpdatedToHH2
{
  return self->_isUpdatedToHH2;
}

- (HMDManagedStagedValue)stagedRemoteReachabilityRegistration
{
  return self->_stagedRemoteReachabilityRegistration;
}

- (void)setCurrentRemoteReachabilityRegistration:(BOOL)a3
{
  self->_currentRemoteReachabilityRegistration = a3;
}

- (HMDSharedHomeUpdateHandler)sharedHomeUpdateHandler
{
  return self->_sharedHomeUpdateHandler;
}

- (HMDResidentDeviceManager)residentDeviceManager
{
  return self->_residentDeviceManager;
}

- (NSHashTable)unpairedSecondaryHAPAccessories
{
  return self->_unpairedSecondaryHAPAccessories;
}

- (void)setModifyNotificationsCoalesceTimer:(id)a3
{
}

- (HMFTimer)modifyNotificationsCoalesceTimer
{
  return self->_modifyNotificationsCoalesceTimer;
}

- (HMDHomeLocalDeviceCapabilitiesDataSource)localCapabilitiesDataSource
{
  return self->_localCapabilitiesDataSource;
}

- (NSMutableDictionary)matterAttributesEnableNotificationPayload
{
  return self->_matterAttributesEnableNotificationPayload;
}

- (NSMutableArray)actionSetsDisableNotificationPayload
{
  return self->_actionSetsDisableNotificationPayload;
}

- (NSMutableArray)actionSetsEnableNotificationPayload
{
  return self->_actionSetsEnableNotificationPayload;
}

- (NSMutableDictionary)disableNotificationPayload
{
  return self->_disableNotificationPayload;
}

- (NSMutableDictionary)enableNotificationPayload
{
  return self->_enableNotificationPayload;
}

- (void)setAssistantOperations:(id)a3
{
}

- (NSMutableArray)assistantOperations
{
  return self->_assistantOperations;
}

- (void)setMigratingAfterResidentChange:(BOOL)a3
{
  self->_migratingAfterResidentChange = a3;
}

- (BOOL)isMigratingAfterResidentChange
{
  return self->_migratingAfterResidentChange;
}

- (void)setAllowsRemoteAccess:(BOOL)a3
{
  self->_allowsRemoteAccess = a3;
}

- (BOOL)allowsRemoteAccess
{
  return self->_allowsRemoteAccess;
}

- (void)setRegisteredNotificationWithRemoteGateway:(BOOL)a3
{
  self->_registeredNotificationWithRemoteGateway = a3;
}

- (BOOL)registeredNotificationWithRemoteGateway
{
  return self->_registeredNotificationWithRemoteGateway;
}

- (void)setSharedAdmin:(BOOL)a3
{
  self->_sharedAdmin = a3;
}

- (void)setAdminUser:(BOOL)a3
{
  self->_adminUser = a3;
}

- (void)setPendingResponsesForRemoteAccessSetup:(id)a3
{
}

- (NSMutableSet)pendingResponsesForRemoteAccessSetup
{
  return self->_pendingResponsesForRemoteAccessSetup;
}

- (void)setHeartbeatPingMessagesQueuedWithServer:(id)a3
{
}

- (NSMutableSet)heartbeatPingMessagesQueuedWithServer
{
  return self->_heartbeatPingMessagesQueuedWithServer;
}

- (void)setRemoteAccessIsEnabled:(BOOL)a3
{
  self->_remoteAccessIsEnabled = a3;
}

- (void)setNotificationRegistry:(id)a3
{
}

- (HMDNotificationRegistry)notificationRegistry
{
  return self->_notificationRegistry;
}

- (void)setFirstHAPAccessoryAddedDate:(id)a3
{
}

- (NSDate)firstHAPAccessoryAddedDate
{
  return self->_firstHAPAccessoryAddedDate;
}

- (void)setCreationDate:(id)a3
{
}

- (NSDate)creationDate
{
  return self->_creationDate;
}

- (void)setOwnerName:(id)a3
{
}

- (NSString)ownerName
{
  return self->_ownerName;
}

- (void)setExpectedConfigurationVersion:(int64_t)a3
{
  self->_expectedConfigurationVersion = a3;
}

- (int64_t)expectedConfigurationVersion
{
  return self->_expectedConfigurationVersion;
}

- (void)setLastSyncedConfigurationVersion:(int64_t)a3
{
  self->_lastSyncedConfigurationVersion = a3;
}

- (int64_t)lastSyncedConfigurationVersion
{
  return self->_lastSyncedConfigurationVersion;
}

- (void)setConfigurationVersion:(int64_t)a3
{
  self->_configurationVersion = a3;
}

- (int64_t)configurationVersion
{
  return self->_configurationVersion;
}

- (void)setRoomForEntireHome:(id)a3
{
}

- (HMDRoom)roomForEntireHome
{
  return self->_roomForEntireHome;
}

- (void)setUnconfiguredResidentDevices:(id)a3
{
}

- (NSMutableArray)unconfiguredResidentDevices
{
  return self->_unconfiguredResidentDevices;
}

- (void)setRemovedUsers:(id)a3
{
}

- (NSMutableArray)removedUsers
{
  return self->_removedUsers;
}

- (void)setUsersPendingUserManagementOperations:(id)a3
{
}

- (NSMutableArray)usersPendingUserManagementOperations
{
  return self->_usersPendingUserManagementOperations;
}

- (void)setRetrievalAccessoryCompletionTuples:(id)a3
{
}

- (NSMutableArray)retrievalAccessoryCompletionTuples
{
  return self->_retrievalAccessoryCompletionTuples;
}

- (void)setTriggerOwnedActionSets:(id)a3
{
}

- (NSMutableArray)triggerOwnedActionSets
{
  return self->_triggerOwnedActionSets;
}

- (void)setActionSets:(id)a3
{
}

- (NSMutableArray)actionSets
{
  return self->_actionSets;
}

- (void)setServiceGroups:(id)a3
{
}

- (NSMutableArray)serviceGroups
{
  return self->_serviceGroups;
}

- (void)setServices:(id)a3
{
}

- (NSMutableArray)services
{
  return self->_services;
}

- (void)setDiscoveredAccessories:(id)a3
{
}

- (NSMutableArray)discoveredAccessories
{
  return self->_discoveredAccessories;
}

- (void)setZones:(id)a3
{
}

- (NSMutableArray)zones
{
  return self->_zones;
}

- (void)setRooms:(id)a3
{
}

- (NSMutableArray)rooms
{
  return self->_rooms;
}

- (void)setAccessoryMessageRouterViaPrimary:(id)a3
{
}

- (HMDDelegatingMessageRouter)accessoryMessageRouterViaPrimary
{
  return (HMDDelegatingMessageRouter *)objc_getProperty(self, a2, 1224, 1);
}

- (NSNotificationCenter)notificationCenter
{
  return (NSNotificationCenter *)objc_getProperty(self, a2, 1216, 1);
}

- (void)setAppleDeviceRouter:(id)a3
{
}

- (HMDAppleMediaAccessoryMessageRouter)appleDeviceRouter
{
  return (HMDAppleMediaAccessoryMessageRouter *)objc_getProperty(self, a2, 1208, 1);
}

- (void)setPrimaryResidentMessageRouter:(id)a3
{
}

- (HMDPrimaryResidentMessageRouter)primaryResidentMessageRouter
{
  return (HMDPrimaryResidentMessageRouter *)objc_getProperty(self, a2, 1200, 1);
}

- (void)setAccessoryBrowser:(id)a3
{
}

- (HMDAccessoryBrowserProtocol)accessoryBrowser
{
  return self->_accessoryBrowser;
}

- (void)setMsgDispatcher:(id)a3
{
}

- (HMFMessageDispatcher)msgDispatcher
{
  return self->_msgDispatcher;
}

- (void)setWorkQueue:(id)a3
{
}

- (OS_dispatch_queue)workQueue
{
  return self->_workQueue;
}

- (HMDHomeObjectChangeHandler)homeObjectChangeHandler
{
  return self->_homeObjectChangeHandler;
}

- (void)setAccessorySettingsMessenger:(id)a3
{
}

- (HMDAccessorySettingsMessenger)accessorySettingsMessenger
{
  return (HMDAccessorySettingsMessenger *)objc_getProperty(self, a2, 1160, 1);
}

- (void)setMultiuserSettingsMessenger:(id)a3
{
}

- (HMDMultiuserSettingsMessenger)multiuserSettingsMessenger
{
  return (HMDMultiuserSettingsMessenger *)objc_getProperty(self, a2, 1152, 1);
}

- (void)setSiriEndpointProfilesMessenger:(id)a3
{
}

- (HMDSiriEndpointProfilesMessenger)siriEndpointProfilesMessenger
{
  return (HMDSiriEndpointProfilesMessenger *)objc_getProperty(self, a2, 1144, 1);
}

- (void)setUnifiedLanguageValueListSettingDataProvider:(id)a3
{
}

- (HMDUnifiedLanguageValueListSettingDataProvider)unifiedLanguageValueListSettingDataProvider
{
  return (HMDUnifiedLanguageValueListSettingDataProvider *)objc_getProperty(self, a2, 1136, 1);
}

- (void)setAppData:(id)a3
{
}

- (HMDApplicationData)appData
{
  return (HMDApplicationData *)objc_getProperty(self, a2, 1128, 1);
}

- (void)setWifiManagerFactory:(id)a3
{
}

- (id)wifiManagerFactory
{
  return objc_getProperty(self, a2, 1120, 1);
}

- (void)setNetManagerFactory:(id)a3
{
}

- (id)netManagerFactory
{
  return objc_getProperty(self, a2, 1112, 1);
}

- (NSMutableArray)matterFabricEnabledClients
{
  return self->_matterFabricEnabledClients;
}

- (NSMutableArray)accessoryRemoteReachabilityEnabledClients
{
  return self->_accessoryRemoteReachabilityEnabledClients;
}

- (void)setRemoteEventRouterClientController:(id)a3
{
}

- (HMDHomeRemoteEventRouterClientController)remoteEventRouterClientController
{
  return (HMDHomeRemoteEventRouterClientController *)objc_getProperty(self, a2, 1088, 1);
}

- (NSMutableDictionary)pendingCharacteristicThresholdPayload
{
  return self->_pendingCharacteristicThresholdPayload;
}

- (void)setSelfRemovalWatchdog:(id)a3
{
}

- (HMDSelfRemovalWatchdog)selfRemovalWatchdog
{
  return self->_selfRemovalWatchdog;
}

- (void)setMediaStateSubscriber:(id)a3
{
}

- (HMDHomeMediaStateSubscriber)mediaStateSubscriber
{
  return self->_mediaStateSubscriber;
}

- (void)setCurrentHomeKitVersion:(id)a3
{
}

- (HMDHomeKitVersion)currentHomeKitVersion
{
  return self->_currentHomeKitVersion;
}

- (void)setOverrideSentinelZoneForConvergencePeriod:(BOOL)a3
{
  self->_overrideSentinelZoneForConvergencePeriod = a3;
}

- (BOOL)overrideSentinelZoneForConvergencePeriod
{
  return self->_overrideSentinelZoneForConvergencePeriod;
}

- (id)matterCapabilitiesFactory
{
  return self->_matterCapabilitiesFactory;
}

- (HMDModernMessagingHandler)modernMessagingHandler
{
  return self->_modernMessagingHandler;
}

- (HMDXPCMessageReportingSessionManager)reportingSessionManager
{
  return (HMDXPCMessageReportingSessionManager *)objc_getProperty(self, a2, 1032, 1);
}

- (HAPKeyStore)keychainStore
{
  return (HAPKeyStore *)objc_getProperty(self, a2, 1024, 1);
}

- (HMDHomePrimaryResidentMessagingHandler)primaryResidentMessagingHandler
{
  return self->_primaryResidentMessagingHandler;
}

- (void)setCapabilitiesAggregator:(id)a3
{
}

- (HMDPrimaryResidentCapabilitiesAggregator)capabilitiesAggregator
{
  return self->_capabilitiesAggregator;
}

- (HMEDelegatingEventRouter)serverDelegatingEventRouter
{
  return (HMEDelegatingEventRouter *)objc_getProperty(self, a2, 1000, 1);
}

- (HMDAccessoryInfoFetchController)accessoryInfoFetchController
{
  return self->_accessoryInfoFetchController;
}

- (HMDDeviceLockStateDataSource)deviceLockStateDataSource
{
  return (HMDDeviceLockStateDataSource *)objc_getProperty(self, a2, 984, 1);
}

- (HMDHAPMetadata)hapMetadata
{
  return (HMDHAPMetadata *)objc_getProperty(self, a2, 976, 1);
}

- (HMDHomeMetricsDispatcher)metricsDispatcher
{
  return (HMDHomeMetricsDispatcher *)objc_getProperty(self, a2, 968, 1);
}

- (HomeIntelligenceActivityLogger)homeIntelligenceActivityLogger
{
  return (HomeIntelligenceActivityLogger *)objc_getProperty(self, a2, 960, 1);
}

- (void)setIsNetworkAvailable:(BOOL)a3
{
  self->_isNetworkAvailable = a3;
}

- (BOOL)isNetworkAvailable
{
  return self->_isNetworkAvailable;
}

- (HMFPromise)residentSyncClientDidSyncPromise
{
  return self->_residentSyncClientDidSyncPromise;
}

- (void)setResidentSyncClientDidSync:(BOOL)a3
{
  self->_residentSyncClientDidSync = a3;
}

- (BOOL)residentSyncClientDidSync
{
  return self->_residentSyncClientDidSync;
}

- (void)setAccessoryReaderWriter:(id)a3
{
}

- (HMDHAPAccessoryReaderWriter)accessoryReaderWriter
{
  return self->_accessoryReaderWriter;
}

- (void)setAccessoryConnectionCoordinator:(id)a3
{
}

- (HMDHAPAccessoryConnectionCoordinator)accessoryConnectionCoordinator
{
  return self->_accessoryConnectionCoordinator;
}

- (void)setNaturalLightingContextUpdater:(id)a3
{
}

- (HMDHomeNaturalLightingContextUpdater)naturalLightingContextUpdater
{
  return (HMDHomeNaturalLightingContextUpdater *)objc_getProperty(self, a2, 928, 1);
}

- (HMDHomePersonDataManager)personDataManager
{
  return (HMDHomePersonDataManager *)objc_getProperty(self, a2, 920, 1);
}

- (void)setPreviousReachableAccessoriesCountExcludingMatter:(int64_t)a3
{
  self->_previousReachableAccessoriesCountExcludingMatter = a3;
}

- (int64_t)previousReachableAccessoriesCountExcludingMatter
{
  return self->_previousReachableAccessoriesCountExcludingMatter;
}

- (void)setPreviousReachableAppleMediaAccessoriesCount:(int64_t)a3
{
  self->_previousReachableAppleMediaAccessoriesCount = a3;
}

- (int64_t)previousReachableAppleMediaAccessoriesCount
{
  return self->_previousReachableAppleMediaAccessoriesCount;
}

- (void)setPreviousReachableAccessoriesCount:(int64_t)a3
{
  self->_previousReachableAccessoriesCount = a3;
}

- (int64_t)previousReachableAccessoriesCount
{
  return self->_previousReachableAccessoriesCount;
}

- (void)setRemoteEventRouterServer:(id)a3
{
}

- (HMDRemoteEventRouterServer)remoteEventRouterServer
{
  return self->_remoteEventRouterServer;
}

- (BOOL)shouldEncodeNFCReaderKey
{
  return self->_shouldEncodeNFCReaderKey;
}

- (BOOL)shouldEncodeHasOnboardedForWalletKey
{
  return self->_shouldEncodeHasOnboardedForWalletKey;
}

- (HMDActionSetStateObserver)actionSetStateObserver
{
  return (HMDActionSetStateObserver *)objc_getProperty(self, a2, 880, 1);
}

- (NSHashTable)connectionsDiscoveringSymptomsForNearbyDevices
{
  return self->_connectionsDiscoveringSymptomsForNearbyDevices;
}

- (void)setHomeReprovisionHandler:(id)a3
{
}

- (HMDHomeReprovisionHandler)homeReprovisionHandler
{
  return self->_homeReprovisionHandler;
}

- (void)setAddPendingAccessories:(id)a3
{
}

- (NSMutableDictionary)addPendingAccessoryOnboardingSetupPayloadStrings
{
  return self->_addPendingAccessoryOnboardingSetupPayloadStrings;
}

- (void)setAddPendingAccessorySetupCodes:(id)a3
{
}

- (NSMutableDictionary)addPendingAccessorySetupCodes
{
  return self->_addPendingAccessorySetupCodes;
}

- (void)setAddPendingAccessorySetupCodeHandlers:(id)a3
{
}

- (void)setWiFiAssertion:(id)a3
{
}

- (NSObject)WiFiAssertion
{
  return self->_WiFiAssertion;
}

- (void)setHomeHubState:(unint64_t)a3
{
  self->_homeHubState = a3;
}

- (unint64_t)homeHubState
{
  return self->_homeHubState;
}

- (void)setRemoveAccessoryInProgressForHMDAccessories:(id)a3
{
}

- (HMDXPCMessageTransportFactory)xpcMessageTransportFactory
{
  return (HMDXPCMessageTransportFactory *)objc_getProperty(self, a2, 800, 1);
}

- (id)currentUserFactory
{
  return objc_getProperty(self, a2, 792, 1);
}

- (void)setTimeZone:(id)a3
{
}

- (NSTimeZone)timeZone
{
  return self->_timeZone;
}

- (void)setAcwgGroupResolvingKey:(id)a3
{
}

- (NSData)acwgGroupResolvingKey
{
  return (NSData *)objc_getProperty(self, a2, 776, 1);
}

- (HMDLogEventDailyScheduler)dailyScheduler
{
  return self->_dailyScheduler;
}

- (HMMLogEventSubmitting)logEventSubmitter
{
  return self->_logEventSubmitter;
}

- (void)setBulletinUserAttributionManager:(id)a3
{
}

- (HMDBulletinUserAttributionManager)bulletinUserAttributionManager
{
  return (HMDBulletinUserAttributionManager *)objc_getProperty(self, a2, 752, 1);
}

- (void)setCameraBulletinNotificationManager:(id)a3
{
}

- (HMDCameraBulletinNotificationManager)cameraBulletinNotificationManager
{
  return (HMDCameraBulletinNotificationManager *)objc_getProperty(self, a2, 744, 1);
}

- (void)setAccessoryBulletinNotificationManager:(id)a3
{
}

- (HMDAccessoryBulletinNotificationManager)accessoryBulletinNotificationManager
{
  return (HMDAccessoryBulletinNotificationManager *)objc_getProperty(self, a2, 736, 1);
}

- (HMDAccessoryReachabilityChangedLogEventManager)reachabilityChangedLogEventManager
{
  return (HMDAccessoryReachabilityChangedLogEventManager *)objc_getProperty(self, a2, 728, 1);
}

- (HMFFuture)residentSyncClientDidSyncFuture
{
  return self->_residentSyncClientDidSyncFuture;
}

- (void)setResidentSyncManager:(id)a3
{
}

- (HMDResidentSyncManager)residentSyncManager
{
  return self->_residentSyncManager;
}

- (HMDHomeLockNotificationManager)lockNotificationManager
{
  return (HMDHomeLockNotificationManager *)objc_getProperty(self, a2, 704, 1);
}

- (void)setRemovedUserInfoByAccessCode:(id)a3
{
}

- (NSMutableDictionary)removedUserInfoByAccessCode
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 696, 1);
}

- (void)setLabelIdentifiersByAccessCode:(id)a3
{
}

- (NSMutableDictionary)labelIdentifiersByAccessCode
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 688, 1);
}

- (void)setLabelsByAccessCode:(id)a3
{
}

- (NSMutableDictionary)labelsByAccessCode
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 680, 1);
}

- (void)setAccessCodeManager:(id)a3
{
}

- (HMDAccessCodeManager)accessCodeManager
{
  return (HMDAccessCodeManager *)objc_getProperty(self, a2, 672, 1);
}

- (HMDHomeNFCReaderKeyManager)nfcReaderKeyManager
{
  return (HMDHomeNFCReaderKeyManager *)objc_getProperty(self, a2, 664, 1);
}

- (HMDHomeWalletKeyManager)walletKeyManager
{
  return (HMDHomeWalletKeyManager *)objc_getProperty(self, a2, 656, 1);
}

- (HMDHomeNaturalLightingCurveWriter)naturalLightingCurveWriter
{
  return (HMDHomeNaturalLightingCurveWriter *)objc_getProperty(self, a2, 648, 1);
}

- (void)setUserActionPredictionManager:(id)a3
{
}

- (HMDUserActionPredictionManager)userActionPredictionManager
{
  return (HMDUserActionPredictionManager *)objc_getProperty(self, a2, 640, 1);
}

- (HMDCameraAnalysisStatePublisher)analysisStatePublisher
{
  return (HMDCameraAnalysisStatePublisher *)objc_getProperty(self, a2, 632, 1);
}

- (void)setHasOnboardedForWalletKey:(BOOL)a3
{
  self->_hasOnboardedForWalletKey = a3;
}

- (BOOL)hasOnboardedForWalletKey
{
  return self->_hasOnboardedForWalletKey;
}

- (void)setHasOnboardedForAccessCode:(BOOL)a3
{
  self->_hasOnboardedForAccessCode = a3;
}

- (BOOL)hasOnboardedForAccessCode
{
  return self->_hasOnboardedForAccessCode;
}

- (void)setHasAnyUserAcknowledgedCameraRecordingOnboarding:(BOOL)a3
{
  self->_hasAnyUserAcknowledgedCameraRecordingOnboarding = a3;
}

- (BOOL)hasAnyUserAcknowledgedCameraRecordingOnboarding
{
  return self->_hasAnyUserAcknowledgedCameraRecordingOnboarding;
}

- (void)setDidOnboardLocationServices:(BOOL)a3
{
  self->_didOnboardLocationServices = a3;
}

- (BOOL)didOnboardLocationServices
{
  return self->_didOnboardLocationServices;
}

- (void)setLocationServicesEnabled:(BOOL)a3
{
  self->_locationServicesEnabled = a3;
}

- (BOOL)locationServicesEnabled
{
  return self->_locationServicesEnabled;
}

- (void)setSiriPhraseOptions:(unint64_t)a3
{
  self->_siriPhraseOptions = a3;
}

- (unint64_t)siriPhraseOptions
{
  return self->_siriPhraseOptions;
}

- (void)setDidOnboardAudioAnalysis:(BOOL)a3
{
  self->_didOnboardAudioAnalysis = a3;
}

- (BOOL)didOnboardAudioAnalysis
{
  return self->_didOnboardAudioAnalysis;
}

- (void)setAudioAnalysisClassifierOptions:(unint64_t)a3
{
  self->_audioAnalysisClassifierOptions = a3;
}

- (unint64_t)audioAnalysisClassifierOptions
{
  return self->_audioAnalysisClassifierOptions;
}

- (void)setSoundCheckEnabled:(BOOL)a3
{
  self->_soundCheckEnabled = a3;
}

- (BOOL)soundCheckEnabled
{
  return self->_soundCheckEnabled;
}

- (void)setMultiUserEnabled:(BOOL)a3
{
  self->_multiUserEnabled = a3;
}

- (BOOL)isMultiUserEnabled
{
  return self->_multiUserEnabled;
}

- (HMDPrimaryResidentChangeMonitor)primaryResidentChangeMonitor
{
  return (HMDPrimaryResidentChangeMonitor *)objc_getProperty(self, a2, 608, 1);
}

- (HMDHomePeriodicReader)periodicReader
{
  return self->_periodicReader;
}

- (void)setMediaSystemController:(id)a3
{
}

- (HMDHomeMediaSystemHandler)mediaSystemController
{
  return (HMDHomeMediaSystemHandler *)objc_getProperty(self, a2, 592, 1);
}

- (void)setPresenceMonitor:(id)a3
{
}

- (HMDHomePresenceMonitor)presenceMonitor
{
  return self->_presenceMonitor;
}

- (void)setNotificationsUpdatedTime:(id)a3
{
}

- (NSDate)notificationsUpdatedTime
{
  return self->_notificationsUpdatedTime;
}

- (void)setMediaGroupsUnconfiguredParticipantOnboardingManager:(id)a3
{
}

- (HMDMediaGroupsUnconfiguredParticipantOnboardingManager)mediaGroupsUnconfiguredParticipantOnboardingManager
{
  return (HMDMediaGroupsUnconfiguredParticipantOnboardingManager *)objc_getProperty(self, a2, 568, 1);
}

- (void)setMediaGroupsAggregator:(id)a3
{
}

- (HMDMediaGroupsAggregator)mediaGroupsAggregator
{
  return (HMDMediaGroupsAggregator *)objc_getProperty(self, a2, 560, 1);
}

- (HMDHomeAdministratorHandler)administratorHandler
{
  return (HMDHomeAdministratorHandler *)objc_getProperty(self, a2, 552, 1);
}

- (void)setPresenceComputeStatus:(id)a3
{
}

- (HMUserPresenceCompute)presenceComputeStatus
{
  return self->_presenceComputeStatus;
}

- (void)setPresenceAuthStatus:(id)a3
{
}

- (HMUserPresenceAuthorization)presenceAuthStatus
{
  return self->_presenceAuthStatus;
}

- (HMDHomeLocationHandler)homeLocationHandler
{
  return self->_homeLocationHandler;
}

- (NSUUID)zoneID
{
  return self->_zoneID;
}

- (NSUUID)spiClientIdentifier
{
  return self->_spiClientIdentifier;
}

- (NSUUID)uuid
{
  return self->_uuid;
}

- (void)setHomeManager:(id)a3
{
}

- (HMDHomeManager)homeManager
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_homeManager);
  return (HMDHomeManager *)WeakRetained;
}

- (HMDHomeObjectLookup)lookup
{
  return self->_lookup;
}

- (void)setClientWalletKeyUUID:(id)a3
{
}

- (NSUUID)clientWalletKeyUUID
{
  return (NSUUID *)objc_getProperty(self, a2, 456, 1);
}

- (void)setNumberOfCameras:(id)a3
{
}

- (NSNumber)numberOfCameras
{
  return self->_numberOfCameras;
}

- (void)setMatterDeviceController:(id)a3
{
}

- (void)setThreadNetworkIsUp:(BOOL)a3
{
  self->_threadNetworkIsUp = a3;
}

- (BOOL)threadNetworkIsUp
{
  return self->_threadNetworkIsUp;
}

- (void)setThreadPreferredNetworkExists:(BOOL)a3
{
  self->_threadPreferredNetworkExists = a3;
}

- (BOOL)threadPreferredNetworkExists
{
  return self->_threadPreferredNetworkExists;
}

- (void)setThreadNetworkPeriodicStatusReporter:(id)a3
{
}

- (HMDThreadNetworkStatusReporter)threadNetworkPeriodicStatusReporter
{
  return self->_threadNetworkPeriodicStatusReporter;
}

- (void)setStartThreadNetworkInProgress:(BOOL)a3
{
  self->_startThreadNetworkInProgress = a3;
}

- (BOOL)startThreadNetworkInProgress
{
  return self->_startThreadNetworkInProgress;
}

- (void)setCurrentTriggers:(id)a3
{
}

- (NSMutableArray)currentTriggers
{
  return self->_currentTriggers;
}

- (BOOL)isOwnerTrustZoneCapable
{
  return self->_ownerTrustZoneCapable;
}

- (NSMutableDictionary)newlyConfiguredAccessories
{
  return self->_newlyConfiguredAccessories;
}

- (void)setNetworkProtectionGroupRegistry:(id)a3
{
}

- (HMDAccessoryNetworkProtectionGroupRegistry)networkProtectionGroupRegistry
{
  return self->_networkProtectionGroupRegistry;
}

- (void)setMediaSessionStates:(id)a3
{
}

- (void)setMediaSessions:(id)a3
{
}

- (void)setUserActivityStateDetectorManager:(id)a3
{
  uint64_t v4 = (HMDUserActivityStateDetectorManager *)a3;
  os_unfair_recursive_lock_lock_with_options();
  userActivityStateDetectorManager = self->_userActivityStateDetectorManager;
  self->_userActivityStateDetectorManager = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDUserActivityStateDetectorManager)userActivityStateDetectorManager
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_userActivityStateDetectorManager;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (MTRDeviceController)matterDeviceController
{
  os_unfair_recursive_lock_lock_with_options();
  if (!self->_matterDeviceController)
  {
    id v3 = [(HMDHome *)self featureDataSource];
    int v4 = [v3 isRVCEnabled];

    if (v4)
    {
      id v5 = objc_opt_class();
      id v6 = [(HMDHome *)self uuid];
      id v7 = [v5 matterDeviceControllerWithUUID:v6];
      matterDeviceController = self->_matterDeviceController;
      self->_matterDeviceController = v7;
    }
  }
  id v9 = self->_matterDeviceController;
  os_unfair_recursive_lock_unlock();
  return v9;
}

- (void)removeSharedUserResponseEventBuilder:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v5 = v4;
    os_unfair_recursive_lock_lock_with_options();
    [(NSMutableSet *)self->_sharedUserResponseEventBuilders removeObject:v5];
    os_unfair_recursive_lock_unlock();
    id v4 = v5;
  }
}

- (void)addSharedUserResponseEventBuilder:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v8 = v4;
    os_unfair_recursive_lock_lock_with_options();
    sharedUserResponseEventBuilders = self->_sharedUserResponseEventBuilders;
    if (!sharedUserResponseEventBuilders)
    {
      id v6 = [MEMORY[0x263EFF9C0] set];
      id v7 = self->_sharedUserResponseEventBuilders;
      self->_sharedUserResponseEventBuilders = v6;

      sharedUserResponseEventBuilders = self->_sharedUserResponseEventBuilders;
    }
    [(NSMutableSet *)sharedUserResponseEventBuilders addObject:v8];
    os_unfair_recursive_lock_unlock();
    id v4 = v8;
  }
}

- (void)removeSharedUserEventBuilder:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v5 = v4;
    os_unfair_recursive_lock_lock_with_options();
    [(NSMutableSet *)self->_sharedUserInviteEventBuilders removeObject:v5];
    os_unfair_recursive_lock_unlock();
    id v4 = v5;
  }
}

- (void)addSharedUserEventBuilder:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v8 = v4;
    os_unfair_recursive_lock_lock_with_options();
    sharedUserInviteEventBuilders = self->_sharedUserInviteEventBuilders;
    if (!sharedUserInviteEventBuilders)
    {
      id v6 = [MEMORY[0x263EFF9C0] set];
      id v7 = self->_sharedUserInviteEventBuilders;
      self->_sharedUserInviteEventBuilders = v6;

      sharedUserInviteEventBuilders = self->_sharedUserInviteEventBuilders;
    }
    [(NSMutableSet *)sharedUserInviteEventBuilders addObject:v8];
    os_unfair_recursive_lock_unlock();
    id v4 = v8;
  }
}

- (BOOL)shouldPostBulletin
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHome *)self currentUser];
  char v4 = [v3 isAccessCurrentlyAllowedBySchedule];
  if ([v3 isRestrictedGuest]
    && ([(HMDHome *)self homeLocation] == 1 ? (char v5 = v4) : (char v5 = 0), (v5 & 1) == 0))
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      [(HMDHome *)v8 homeLocation];
      BOOL v11 = HMStringFromHomeLocation();
      uint64_t v12 = HMFBooleanToString();
      int v14 = 138543874;
      os_log_type_t v15 = v10;
      __int16 v16 = 2112;
      uint64_t v17 = v11;
      __int16 v18 = 2112;
      uint64_t v19 = v12;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Will not post the bulletin as RG is either away from the home or not within schedule. HomeLocation: %@, allowedBySchedule: %@", (uint8_t *)&v14, 0x20u);
    }
    BOOL v6 = 0;
  }
  else
  {
    BOOL v6 = 1;
  }

  return v6;
}

- (void)_handleFetchTriggerNameRequest:(id)a3
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v4 = a3;
  char v5 = [v4 uuidForKey:@"triggerUUID"];
  if (v5)
  {
    BOOL v6 = [(HMDHome *)self triggers];
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    v19[2] = __42__HMDHome__handleFetchTriggerNameRequest___block_invoke;
    v19[3] = &unk_264A21068;
    id v20 = v5;
    id v7 = objc_msgSend(v6, "na_firstObjectPassingTest:", v19);

    id v8 = [v7 configuredName];
    if (v8 || ([v7 name], (id v8 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      id v21 = @"kTriggerName";
      __int16 v22 = v8;
      id v9 = [NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
      [v4 respondWithPayload:v9];
    }
    else
    {
      os_log_type_t v15 = (void *)MEMORY[0x230FBD990]();
      __int16 v16 = self;
      uint64_t v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        __int16 v18 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        __int16 v24 = v18;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@trigger name is nil.", buf, 0xCu);
      }
      id v8 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
      [v4 respondWithError:v8];
    }

    id v10 = v20;
  }
  else
  {
    BOOL v11 = (void *)MEMORY[0x230FBD990]();
    uint64_t v12 = self;
    int v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v24 = v14;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@message does not contain the trigger SPI identifier", buf, 0xCu);
    }
    id v10 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v4 respondWithError:v10];
  }
}

uint64_t __42__HMDHome__handleFetchTriggerNameRequest___block_invoke(uint64_t a1, void *a2)
{
  id v2 = [a2 spiClientIdentifier];
  uint64_t v3 = HMFEqualObjects();

  return v3;
}

- (NSArray)autoSelectedPreferredResidents
{
  id v2 = [(HMDHome *)self residentDeviceManager];
  uint64_t v3 = [v2 autoSelectedPreferredResidents];

  return (NSArray *)v3;
}

- (HMDResidentDevice)userSelectedPreferredResident
{
  id v2 = [(HMDHome *)self residentDeviceManager];
  uint64_t v3 = [v2 userSelectedPreferredResident];

  return (HMDResidentDevice *)v3;
}

- (BOOL)supportsResidentSelection
{
  id v2 = [(HMDHome *)self residentDeviceManager];
  char v3 = [v2 homeSupportsResidentSelection];

  return v3;
}

- (BOOL)receivedRemoteMessageOverTransportType:(int)a3 remoteMessageSenderContext:(id)a4
{
  id v5 = a4;
  BOOL v6 = [(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident];
  if (v6)
  {
    id v7 = [v5 pairingIdentityIdentifier];
    id v8 = [(HMDHome *)self userWithPairingIdentityIdentifier:v7];

    if (v8 && ([v8 isRemoteAccessAllowed] & 1) == 0)
    {
      id v9 = [(HMDHome *)self presenceMonitor];
      id v10 = [MEMORY[0x263EFF910] now];
      BOOL v11 = [v8 uuid];
      [v9 updateLastLocalActivityTimestamp:v10 forUserUUID:v11];
    }
  }

  return v6;
}

- (BOOL)areCharacteristicRequests:(id)a3 allowedForUser:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  if ([v6 isRestrictedGuest])
  {
    id v7 = [v6 restrictedGuestAccessSettings];
    id v8 = [v7 uuidsOfAllowedAccessories];

    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    v12[2] = __52__HMDHome_areCharacteristicRequests_allowedForUser___block_invoke;
    v12[3] = &unk_264A2E6B0;
    id v9 = v8;
    id v13 = v9;
    if (objc_msgSend(v5, "na_all:", v12)) {
      char v10 = [v6 isAccessCurrentlyAllowedBySchedule];
    }
    else {
      char v10 = 0;
    }
  }
  else
  {
    char v10 = 1;
  }

  return v10;
}

uint64_t __52__HMDHome_areCharacteristicRequests_allowedForUser___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  char v3 = [a2 accessory];
  id v4 = [v3 uuid];
  uint64_t v5 = [v2 containsObject:v4];

  return v5;
}

- (void)_loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance:(id)a3
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self userWithUUID:v4];
  if ([v5 isRestrictedGuest])
  {
    id v6 = [v5 restrictedGuestAccessSettings];
    id v7 = [v6 uuidsOfAllowedAccessories];

    if (v7)
    {
      if ((objc_msgSend(v7, "hmf_isEmpty") & 1) == 0)
      {
        id v8 = [MEMORY[0x263F42530] internalOnlyInitializer];
        id v9 = (void *)MEMORY[0x230FBD990]();
        char v10 = self;
        BOOL v11 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          uint64_t v12 = HMFGetLogIdentifier();
          id v13 = [v8 UUID];
          int v14 = [v5 uuid];
          *(_DWORD *)buf = 138544130;
          id v40 = v12;
          __int16 v41 = 2112;
          id v42 = v13;
          __int16 v43 = 2112;
          id v44 = v14;
          __int16 v45 = 2112;
          id v46 = v7;
          _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Kicking off operations for restricted guest: %@ on invitation acceptance with allowed accessories: %@", buf, 0x2Au);
        }
        id v15 = objc_alloc(MEMORY[0x263F42520]);
        __int16 v16 = [(HMDHome *)v10 workQueue];
        uint64_t v17 = (void *)[v15 initWithQueue:v16];

        __int16 v18 = (void *)MEMORY[0x263F42538];
        v35[0] = MEMORY[0x263EF8330];
        v35[1] = 3221225472;
        v35[2] = __73__HMDHome__loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance___block_invoke;
        v35[3] = &unk_264A2BEC8;
        id v19 = v5;
        id v36 = v19;
        id v37 = v7;
        id v20 = v8;
        id v38 = v20;
        id v21 = [v18 inContext:v17 perform:v35];
        v32[0] = MEMORY[0x263EF8330];
        v32[1] = 3221225472;
        v32[2] = __73__HMDHome__loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance___block_invoke_2;
        v32[3] = &unk_264A22EA0;
        void v32[4] = v10;
        id v33 = v20;
        id v34 = v19;
        id v22 = v20;
        id v23 = (id)[v21 then:v32];
      }
    }
    else
    {
      id v28 = (void *)MEMORY[0x230FBD990]();
      id v29 = self;
      id v30 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        id v31 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v40 = v31;
        __int16 v41 = 2112;
        id v42 = v4;
        _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Allowed Accessories not set for guest: %@", buf, 0x16u);
      }
    }
  }
  else
  {
    __int16 v24 = (void *)MEMORY[0x230FBD990]();
    uint64_t v25 = self;
    uint64_t v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      id v27 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v40 = v27;
      __int16 v41 = 2112;
      id v42 = v4;
      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@User %@ is not a restricted guest, not configuring credentials on locks here", buf, 0x16u);
    }
  }
}

uint64_t __73__HMDHome__loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance___block_invoke(void *a1)
{
  id v1 = +[HMDBackgroundOperationManagerHelper auditAllowedAccessToRestrictedGuest:a1[4] forAccessories:a1[5] shouldRemoveScheduledOperations:0 parentFlow:a1[6]];
  if (v1)
  {
    id v2 = v1;

    return 3;
  }
  else
  {
    uint64_t v4 = _HMFPreconditionFailure();
    return __73__HMDHome__loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance___block_invoke_2(v4);
  }
}

uint64_t __73__HMDHome__loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance___block_invoke_2(id *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = [v3 count];
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = a1[4];
  id v7 = HMFGetOSLogHandle();
  id v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      char v10 = [a1[5] UUID];
      BOOL v11 = [a1[6] uuid];
      int v17 = 138544130;
      __int16 v18 = v9;
      __int16 v19 = 2112;
      id v20 = v10;
      __int16 v21 = 2112;
      id v22 = v11;
      __int16 v23 = 2112;
      id v24 = v3;
      uint64_t v12 = "%{public}@[Flow: %@] Some error occurred when adding pairings, pin codes & Home keys for the restricted gues"
            "t %@ with error dictionary: %@";
      id v13 = v8;
      os_log_type_t v14 = OS_LOG_TYPE_ERROR;
      uint32_t v15 = 42;
LABEL_6:
      _os_log_impl(&dword_22F52A000, v13, v14, v12, (uint8_t *)&v17, v15);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    char v10 = [a1[5] UUID];
    BOOL v11 = [a1[6] uuid];
    int v17 = 138543874;
    __int16 v18 = v9;
    __int16 v19 = 2112;
    id v20 = v10;
    __int16 v21 = 2112;
    id v22 = v11;
    uint64_t v12 = "%{public}@[Flow: %@] Successfully added pairings, pin codes & Home keys for the restricted guest %@";
    id v13 = v8;
    os_log_type_t v14 = OS_LOG_TYPE_INFO;
    uint32_t v15 = 32;
    goto LABEL_6;
  }

  return 1;
}

- (void)_saveRestrictedGuestSettingsFromOutgoingInvitation:(id)a3 managedObjectContext:(id)a4 error:(id *)a5
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  char v10 = [v8 user];
  int v11 = [v10 isRestrictedGuest];

  if (v11)
  {
    uint64_t v12 = [v9 deletedObjects];
    id v13 = objc_msgSend(v12, "na_firstObjectPassingTest:", &__block_literal_global_2450);

    if (v13)
    {
      os_log_type_t v14 = [v8 user];
      uint32_t v15 = [v14 uuid];
      __int16 v16 = +[HMCContext findGuestWithModelID:v15];

      if (v16)
      {
        *(void *)id v42 = 0;
        *(void *)&v42[8] = v42;
        *(void *)&v42[16] = 0x2020000000;
        char v43 = 1;
        int v17 = [v9 deletedObjects];
        v34[0] = MEMORY[0x263EF8330];
        v34[1] = 3221225472;
        v34[2] = __89__HMDHome__saveRestrictedGuestSettingsFromOutgoingInvitation_managedObjectContext_error___block_invoke_2556;
        v34[3] = &unk_264A275E0;
        id v35 = v16;
        id v36 = self;
        id v37 = v42;
        objc_msgSend(v17, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v34);

        if (a5)
        {
          *a5 = 0;
          if (!*(unsigned char *)(*(void *)&v42[8] + 24))
          {
            *a5 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2905];
          }
        }
        __int16 v18 = (void *)MEMORY[0x230FBD990]();
        __int16 v19 = self;
        HMFGetOSLogHandle();
        id v20 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          __int16 v21 = HMFGetLogIdentifier();
          id v22 = *a5;
          *(_DWORD *)buf = 138543618;
          id v39 = v21;
          __int16 v40 = 2112;
          id v41 = v22;
          _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Finishing outgoing invitation acceptance with error: %@", buf, 0x16u);
        }

        _Block_object_dispose(v42, 8);
      }
      else
      {
        context = (void *)MEMORY[0x230FBD990]();
        id v28 = self;
        id v29 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          id v30 = HMFGetLogIdentifier();
          id v31 = objc_msgSend(v8, "user", context);
          id v32 = [v31 uuid];
          *(_DWORD *)id v42 = 138543618;
          *(void *)&v42[4] = v30;
          *(_WORD *)&v42[12] = 2112;
          *(void *)&v42[14] = v32;
          _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the newly created guest model after accepting the invitation in database: %@", v42, 0x16u);
        }
        if (a5)
        {
          *a5 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
        }
      }
    }
    else
    {
      __int16 v23 = (void *)MEMORY[0x230FBD990]();
      id v24 = self;
      uint64_t v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = HMFGetLogIdentifier();
        id v27 = [v8 uuid];
        *(_DWORD *)id v42 = 138543618;
        *(void *)&v42[4] = v26;
        *(_WORD *)&v42[12] = 2112;
        *(void *)&v42[14] = v27;
        _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the outgoing invitation with UUID in database: %@", v42, 0x16u);
      }
      if (a5)
      {
        *a5 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      }
    }
  }
}

void __89__HMDHome__saveRestrictedGuestSettingsFromOutgoingInvitation_managedObjectContext_error___block_invoke_2556(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v5 = a2;
  if ([v5 conformsToProtocol:&unk_26E5C7A08]) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  if (v7)
  {
    char v39 = 0;
    id v8 = *(void **)(a1 + 32);
    id v9 = [MEMORY[0x263F08C38] UUID];
    id v10 = [v8 materializeOrCreateWeekDayScheduleRulesRelationWithModelID:v9 createdNew:&v39];

    if (v39)
    {
      int v11 = [v7 startTime];
      [v10 setStartTime:v11];

      uint64_t v12 = [v7 endTime];
      [v10 setEndTime:v12];

      id v13 = [v7 daysOfTheWeek];
      [v10 setDaysOfTheWeek:v13];

      os_log_type_t v14 = (void *)MEMORY[0x230FBD990]();
      id v15 = *(id *)(a1 + 40);
      __int16 v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        int v17 = HMFGetLogIdentifier();
        __int16 v18 = [v10 debugDescription];
        *(_DWORD *)buf = 138543618;
        id v41 = v17;
        __int16 v42 = 2112;
        id v43 = v18;
        _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Created new week day rule: %@", buf, 0x16u);
      }
    }
    else
    {
      id v31 = (void *)MEMORY[0x230FBD990]();
      id v32 = *(id *)(a1 + 40);
      id v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        id v34 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v41 = v34;
        __int16 v42 = 2112;
        id v43 = v7;
        _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_ERROR, "%{public}@Unable to create week day schedule from : %@", buf, 0x16u);
      }
      *a3 = 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    }
  }
  else
  {
    id v19 = v5;
    if ([v19 conformsToProtocol:&unk_26E579450]) {
      id v20 = v19;
    }
    else {
      id v20 = 0;
    }
    id v10 = v20;

    if (v10)
    {
      char v39 = 0;
      __int16 v21 = *(void **)(a1 + 32);
      id v22 = [MEMORY[0x263F08C38] UUID];
      __int16 v23 = [v21 materializeOrCreateYearDayScheduleRulesRelationWithModelID:v22 createdNew:&v39];

      if (v39)
      {
        id v24 = [v10 startDate];
        [v23 setStartDate:v24];

        uint64_t v25 = [v10 endDate];
        [v23 setEndDate:v25];

        uint64_t v26 = (void *)MEMORY[0x230FBD990]();
        id v27 = *(id *)(a1 + 40);
        id v28 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          id v29 = HMFGetLogIdentifier();
          id v30 = [v23 debugDescription];
          *(_DWORD *)buf = 138543618;
          id v41 = v29;
          __int16 v42 = 2112;
          id v43 = v30;
          _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@Created new year day rule: %@", buf, 0x16u);
        }
      }
      else
      {
        id v35 = (void *)MEMORY[0x230FBD990]();
        id v36 = *(id *)(a1 + 40);
        id v37 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          id v38 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v41 = v38;
          __int16 v42 = 2112;
          id v43 = v10;
          _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_ERROR, "%{public}@Unable to create year day schedule from : %@", buf, 0x16u);
        }
        *a3 = 1;
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
      }
    }
  }
}

uint64_t __89__HMDHome__saveRestrictedGuestSettingsFromOutgoingInvitation_managedObjectContext_error___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  unsigned int v3 = [v2 conformsToProtocol:&unk_26E561650];
  if (v2) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

- (void)_saveOutgoingInvitationsWithRestrictedGuestSettings:(id)a3 inTransaction:(id)a4 message:(id)a5 transactionCompleted:(id)a6
{
  id v10 = a3;
  id v11 = a5;
  id v12 = a6;
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 3221225472;
  v19[2] = __106__HMDHome__saveOutgoingInvitationsWithRestrictedGuestSettings_inTransaction_message_transactionCompleted___block_invoke;
  v19[3] = &unk_264A16C20;
  void v19[4] = self;
  id v20 = v10;
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 3221225472;
  v16[2] = __106__HMDHome__saveOutgoingInvitationsWithRestrictedGuestSettings_inTransaction_message_transactionCompleted___block_invoke_2447;
  v16[3] = &unk_264A2E788;
  id v17 = v11;
  id v18 = v12;
  v16[4] = self;
  id v13 = v11;
  id v14 = v12;
  id v15 = v10;
  [a4 runWithCoreDataBlock:v19 withCompletionBlock:v16];
}

void __106__HMDHome__saveOutgoingInvitationsWithRestrictedGuestSettings_inTransaction_message_transactionCompleted___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = (void *)MEMORY[0x230FBD990]();
  uint64_t v36 = a1;
  id v10 = *(id *)(a1 + 32);
  id v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    id v12 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v44 = v12;
    __int16 v45 = 2112;
    id v46 = v8;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Going to save RG settings with previous error: %@", buf, 0x16u);
  }
  if (!v8)
  {
    id v33 = 0;
    id v34 = v7;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    obuint64_t j = *(id *)(a1 + 40);
    uint64_t v13 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v39;
      p_superclass = &OBJC_METACLASS___HMDNotifyXPCClientsOfHomeConfigurationChangeLogEvent.superclass;
      while (2)
      {
        uint64_t v17 = 0;
        uint64_t v35 = v14;
        do
        {
          if (*(void *)v39 != v15) {
            objc_enumerationMutation(obj);
          }
          id v18 = *(void **)(*((void *)&v38 + 1) + 8 * v17);
          id v19 = objc_msgSend(v18, "identifier", v33, v34);
          id v20 = [p_superclass + 169 findOutgoingInvitationWithModelID:v19];

          if (v20)
          {
            __int16 v21 = [v18 user];
            id v22 = [v21 restrictedGuestAccessSettings];
            __int16 v23 = [v22 schedule];
            char v24 = [v20 populateWorkingStoreFromRestrictedGuestSchedule:v23];

            if ((v24 & 1) == 0)
            {
              if (a4)
              {
                *a4 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2905];
              }

              goto LABEL_22;
            }
          }
          else
          {
            uint64_t v25 = v15;
            uint64_t v26 = p_superclass;
            id v27 = a4;
            id v28 = (void *)MEMORY[0x230FBD990]();
            id v29 = *(id *)(v36 + 32);
            id v30 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              id v31 = HMFGetLogIdentifier();
              id v32 = [v18 uuid];
              *(_DWORD *)buf = 138543618;
              uint64_t v44 = v31;
              __int16 v45 = 2112;
              id v46 = v32;
              _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the outgoing invitation with UUID in database: %@", buf, 0x16u);
            }
            a4 = v27;
            p_superclass = v26;
            uint64_t v15 = v25;
            uint64_t v14 = v35;
            if (a4)
            {
              *a4 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
            }
          }

          ++v17;
        }
        while (v14 != v17);
        uint64_t v14 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
        if (v14) {
          continue;
        }
        break;
      }
    }
LABEL_22:

    id v8 = v33;
    id v7 = v34;
  }
}

void __106__HMDHome__saveOutgoingInvitationsWithRestrictedGuestSettings_inTransaction_message_transactionCompleted___block_invoke_2447(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    int v10 = 138543618;
    id v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@RG settings transaction finished with error: %@", (uint8_t *)&v10, 0x16u);
  }
  id v8 = _Block_copy(*(const void **)(a1 + 48));
  id v9 = v8;
  if (v8) {
    (*((void (**)(void *, id))v8 + 2))(v8, v3);
  }

  [*(id *)(a1 + 40) respondWithPayload:0 error:v3];
}

- (void)__handleUpdateRestrictedGuestSettings:(id)a3
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 flow];
  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    int v10 = [v5 UUID];
    *(_DWORD *)buf = 138543874;
    uint64_t v60 = v9;
    __int16 v61 = 2112;
    id v62 = v10;
    __int16 v63 = 2112;
    id v64 = v4;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Handling update restricted guest settings message: %@", buf, 0x20u);
  }
  id v11 = [v4 stringForKey:@"kUserIDKey"];
  __int16 v12 = [(HMDHome *)v7 users];
  id v13 = objc_msgSend(v12, "hmf_firstObjectWithValue:forKeyPath:", v11, @"userID");

  if (v13)
  {
    if ([v13 isRestrictedGuest])
    {
      uint64_t v14 = *MEMORY[0x263F0D558];
      uint64_t v58 = objc_opt_class();
      uint64_t v15 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v58 count:1];
      __int16 v16 = [v4 unarchivedObjectForKey:v14 ofClasses:v15];

      if (!v16)
      {
        id v37 = (void *)MEMORY[0x230FBD990]();
        long long v38 = v7;
        long long v39 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          long long v40 = HMFGetLogIdentifier();
          long long v41 = [v5 UUID];
          *(_DWORD *)buf = 138543618;
          uint64_t v60 = v40;
          __int16 v61 = 2112;
          id v62 = v41;
          _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to decode restricted guest settings", buf, 0x16u);
        }
        uint64_t v17 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
        [v4 respondWithError:v17];
        goto LABEL_27;
      }
      uint64_t v17 = [[HMDRestrictedGuestHomeAccessSettings alloc] initWithRestrictedGuestHomeAccessSettings:v16];
      if (v17)
      {
        id v18 = [v13 restrictedGuestAccessSettings];
        int v19 = HMFEqualObjects();

        if (!v19)
        {
          id v48 = [(HMDHome *)v7 backingStore];
          __int16 v49 = [v48 context];
          v52[0] = MEMORY[0x263EF8330];
          v52[1] = 3221225472;
          v52[2] = __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke;
          v52[3] = &unk_264A2E908;
          id v53 = v13;
          uint64_t v54 = v7;
          id v55 = v5;
          id v56 = v4;
          id v57 = v17;
          [v49 performBlock:v52];

          uint64_t v47 = v53;
          goto LABEL_26;
        }
        id v20 = (void *)MEMORY[0x230FBD990]();
        __int16 v21 = v7;
        id v22 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          __int16 v23 = HMFGetLogIdentifier();
          [v5 UUID];
          char v24 = v50 = v20;
          *(_DWORD *)buf = 138543618;
          uint64_t v60 = v23;
          __int16 v61 = 2112;
          id v62 = v24;
          _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Current restricted guest settings are the same as the new settings. Nothing to done here", buf, 0x16u);

          id v20 = v50;
        }

        uint64_t v25 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2904];
      }
      else
      {
        __int16 v42 = (void *)MEMORY[0x230FBD990]();
        id v43 = v7;
        uint64_t v44 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          __int16 v45 = HMFGetLogIdentifier();
          [v5 UUID];
          v46 = __int16 v51 = v42;
          *(_DWORD *)buf = 138543618;
          uint64_t v60 = v45;
          __int16 v61 = 2112;
          id v62 = v46;
          _os_log_impl(&dword_22F52A000, v44, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to initialize restricted guest settings", buf, 0x16u);

          __int16 v42 = v51;
        }

        uint64_t v25 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      }
      uint64_t v47 = (void *)v25;
      [v4 respondWithError:v25];
LABEL_26:

LABEL_27:
      goto LABEL_28;
    }
    id v32 = (void *)MEMORY[0x230FBD990]();
    id v33 = v7;
    id v34 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = HMFGetLogIdentifier();
      uint64_t v36 = [v5 UUID];
      *(_DWORD *)buf = 138543874;
      uint64_t v60 = v35;
      __int16 v61 = 2112;
      id v62 = v36;
      __int16 v63 = 2112;
      id v64 = v13;
      _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Cannot update restricted guest settings for user with UUID %@ as the user is not RG", buf, 0x20u);
    }
    uint64_t v31 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2901];
  }
  else
  {
    uint64_t v26 = (void *)MEMORY[0x230FBD990]();
    id v27 = v7;
    id v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      id v29 = HMFGetLogIdentifier();
      id v30 = [v5 UUID];
      *(_DWORD *)buf = 138543874;
      uint64_t v60 = v29;
      __int16 v61 = 2112;
      id v62 = v30;
      __int16 v63 = 2112;
      id v64 = v11;
      _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to find user with userID %@ in the home", buf, 0x20u);
    }
    uint64_t v31 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
  }
  __int16 v16 = (void *)v31;
  [v4 respondWithError:v31];
LABEL_28:
}

void __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke(id *a1)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  id v2 = [a1[4] uuid];
  id v3 = +[HMCContext findGuestWithModelID:v2];

  if (v3)
  {
    id v4 = (void *)MEMORY[0x263EFFA08];
    id v5 = [v3 allowedAccessories];
    id v6 = [v4 setWithArray:v5];

    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    v100 = __Block_byref_object_copy__14257;
    v101 = __Block_byref_object_dispose__14258;
    id v7 = (void *)MEMORY[0x263EFF9C0];
    id v8 = [a1[8] uuidsOfAllowedAccessories];
    objc_msgSend(v7, "setWithCapacity:", objc_msgSend(v8, "count"));
    id v102 = (id)objc_claimAutoreleasedReturnValue();

    uint64_t v84 = 0;
    uint64_t v85 = &v84;
    uint64_t v86 = 0x3032000000;
    v87 = __Block_byref_object_copy__14257;
    v88 = __Block_byref_object_dispose__14258;
    id v89 = 0;
    id v9 = [a1[8] uuidsOfAllowedAccessories];
    v79[0] = MEMORY[0x263EF8330];
    v79[1] = 3221225472;
    v79[2] = __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke_2432;
    v79[3] = &unk_264A17190;
    id v10 = a1[6];
    v79[4] = a1[5];
    id v80 = v10;
    id v82 = &v84;
    __int16 v83 = buf;
    id v11 = v3;
    id v81 = v11;
    objc_msgSend(v9, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v79);

    if (v85[5])
    {
      objc_msgSend(a1[7], "respondWithError:");
    }
    else
    {
      int v19 = [a1[8] uuidsOfAllowedAccessories];
      BOOL v20 = [v19 count] == 0;

      if (v20) {
        [v11 dematerializeAllowedAccessoriesRelationship];
      }
      __int16 v21 = [a1[8] schedule];
      char v22 = [v11 populateWorkingStoreFromRestrictedGuestSchedule:v21];

      if (v22)
      {
        __int16 v23 = (void *)[v6 mutableCopy];
        [v23 minusSet:*(void *)(*(void *)&buf[8] + 40)];
        char v71 = (void *)[*(id *)(*(void *)&buf[8] + 40) mutableCopy];
        [v71 minusSet:v6];
        [(id)objc_opt_class() dumpAccessories:v23 usingTag:@"removed from allowed accessories" flow:a1[6]];
        [(id)objc_opt_class() dumpAccessories:v71 usingTag:@"newly added to allowed accessories" flow:a1[6]];
        v77[0] = MEMORY[0x263EF8330];
        v77[1] = 3221225472;
        v77[2] = __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke_2440;
        v77[3] = &unk_264A171B8;
        id v78 = v11;
        objc_msgSend(v23, "na_each:", v77);
        id v68 = listOfUUIDsFromManagedObjectSet(v23);
        id v67 = listOfUUIDsFromManagedObjectSet(v71);
        char v24 = [a1[4] restrictedGuestAccessSettings];
        uint64_t v25 = [v24 schedule];
        uint64_t v26 = [a1[8] schedule];
        int v69 = HMFEqualObjects();

        if ((v69 & 1) == 0)
        {
          id v27 = (void *)MEMORY[0x230FBD990]();
          id v28 = a1[5];
          HMFGetOSLogHandle();
          id v29 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            __int16 v63 = v27;
            HMFGetLogIdentifier();
            id v65 = (id)objc_claimAutoreleasedReturnValue();
            id v64 = [a1[6] UUID];
            id v30 = [a1[4] restrictedGuestAccessSettings];
            uint64_t v31 = [v30 schedule];
            id v32 = [a1[8] schedule];
            *(_DWORD *)v91 = 138544130;
            id v92 = v65;
            __int16 v93 = 2112;
            v94 = v64;
            __int16 v95 = 2112;
            id v96 = v31;
            __int16 v97 = 2112;
            v98 = v32;
            _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Changing schedule from: %@, to: %@", v91, 0x2Au);

            id v27 = v63;
          }
        }
        id v33 = +[HMCContext currentContext];
        id v76 = 0;
        char v34 = [v33 save:&v76];
        id v66 = v76;

        uint64_t v35 = (void *)MEMORY[0x230FBD990]();
        id v36 = a1[5];
        if (v34)
        {
          HMFGetOSLogHandle();
          id v37 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            id v38 = (id)objc_claimAutoreleasedReturnValue();
            long long v39 = [a1[6] UUID];
            id v40 = a1[8];
            *(_DWORD *)v91 = 138543874;
            id v92 = v38;
            __int16 v93 = 2112;
            v94 = v39;
            __int16 v95 = 2112;
            id v96 = v40;
            _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Successfully saved the restricted guest settings to working store : %@", v91, 0x20u);
          }
          [a1[4] setRestrictedGuestAccessSettings:a1[8]];
          [a1[4] scheduleRestrictedGuestAccessTimersWithReason:@"Admin updated RG Settings"];
          long long v41 = +[HMDBackgroundOperationManagerHelper auditProhibitedAccessToRestrictedGuest:a1[4] forAccessories:v68 shouldRemoveScheduledOperations:1 parentFlow:a1[6]];
          if (v69)
          {
            id v42 = v67;
          }
          else
          {
            id v42 = [a1[8] uuidsOfAllowedAccessories];
          }
          id v70 = v42;
          uint64_t v54 = +[HMDBackgroundOperationManagerHelper auditAllowedAccessToRestrictedGuest:a1[4] forAccessories:v42 shouldRemoveScheduledOperations:1 parentFlow:a1[6]];
          id v55 = objc_alloc(MEMORY[0x263F42520]);
          id v56 = [a1[5] workQueue];
          id v57 = (void *)[v55 initWithQueue:v56];

          uint64_t v58 = (void *)MEMORY[0x263F42538];
          v90[0] = v41;
          v90[1] = v54;
          id v59 = [MEMORY[0x263EFF8C0] arrayWithObjects:v90 count:2];
          uint64_t v60 = [v58 allSettled:v59];

          v72[0] = MEMORY[0x263EF8330];
          v72[1] = 3221225472;
          v72[2] = __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke_2445;
          v72[3] = &unk_264A1FEC0;
          id v61 = a1[6];
          v72[4] = a1[5];
          id v73 = v61;
          id v74 = a1[4];
          id v75 = a1[7];
          id v62 = (id)[v60 inContext:v57 then:v72];
        }
        else
        {
          HMFGetOSLogHandle();
          id v50 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            id v51 = (id)objc_claimAutoreleasedReturnValue();
            id v52 = [a1[6] UUID];
            *(_DWORD *)v91 = 138543874;
            id v92 = v51;
            __int16 v93 = 2112;
            v94 = v52;
            __int16 v95 = 2112;
            id v96 = v66;
            _os_log_impl(&dword_22F52A000, v50, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Unable to save the restricted guest settings to working store : %@", v91, 0x20u);
          }
          id v53 = a1[7];
          long long v41 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2711];
          [v53 respondWithError:v41];
        }
      }
      else
      {
        id v43 = (void *)MEMORY[0x230FBD990]();
        id v44 = a1[5];
        HMFGetOSLogHandle();
        __int16 v45 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          id v46 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v47 = [a1[6] UUID];
          id v48 = [a1[8] schedule];
          *(_DWORD *)v91 = 138543874;
          id v92 = v46;
          __int16 v93 = 2112;
          v94 = v47;
          __int16 v95 = 2112;
          id v96 = v48;
          _os_log_impl(&dword_22F52A000, v45, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Unable to save the restricted guest schedule to working store : %@", v91, 0x20u);
        }
        id v49 = a1[7];
        __int16 v23 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2711];
        [v49 respondWithError:v23];
      }
    }
    _Block_object_dispose(&v84, 8);

    _Block_object_dispose(buf, 8);
  }
  else
  {
    __int16 v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = a1[5];
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      __int16 v16 = [a1[6] UUID];
      uint64_t v17 = [a1[4] uuid];
      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v16;
      *(_WORD *)&buf[22] = 2112;
      v100 = v17;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Unable to fetch the guest with id [%@] from working store", buf, 0x20u);
    }
    id v18 = a1[7];
    id v6 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v18 respondWithError:v6];
  }
}

void __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke_2432(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v6 = a2;
  id v7 = +[HMCContext findAccessoryWithModelID:v6];
  if (v7)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) addObject:v7];
    [*(id *)(a1 + 48) addAllowedAccessoriesObject:v7];
  }
  else
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = *(id *)(a1 + 32);
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = HMFGetLogIdentifier();
      __int16 v12 = [*(id *)(a1 + 40) UUID];
      int v16 = 138543874;
      uint64_t v17 = v11;
      __int16 v18 = 2112;
      int v19 = v12;
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Unable to fetch the accessory with id [%@] from working store", (uint8_t *)&v16, 0x20u);
    }
    uint64_t v13 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;

    *a4 = 1;
  }
}

uint64_t __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke_2440(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) removeAllowedAccessoriesObject:a2];
}

uint64_t __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke_2445(id *a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [v3 objectAtIndexedSubscript:0];
  uint64_t v5 = [v4 count];

  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = a1[4];
  id v8 = HMFGetOSLogHandle();
  id v9 = v8;
  if (v5)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    id v10 = HMFGetLogIdentifier();
    id v11 = [a1[5] UUID];
    __int16 v12 = [a1[6] uuid];
    uint64_t v13 = [v3 objectAtIndexedSubscript:0];
    int v25 = 138544130;
    uint64_t v26 = v10;
    __int16 v27 = 2112;
    id v28 = v11;
    __int16 v29 = 2112;
    id v30 = v12;
    __int16 v31 = 2112;
    id v32 = v13;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Some error occurred when removing pairings, pin codes & Home keys for the restricted guest %@ with error dictionary: %@", (uint8_t *)&v25, 0x2Au);
  }
  else
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
      goto LABEL_7;
    }
    id v10 = HMFGetLogIdentifier();
    id v11 = [a1[5] UUID];
    int v25 = 138543618;
    uint64_t v26 = v10;
    __int16 v27 = 2112;
    id v28 = v11;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Successfully finished removing pairings, pin codes & Home keys for the restricted guest", (uint8_t *)&v25, 0x16u);
  }

LABEL_7:
  uint64_t v14 = [v3 objectAtIndexedSubscript:1];
  uint64_t v15 = [v14 count];

  int v16 = (void *)MEMORY[0x230FBD990]();
  id v17 = a1[4];
  __int16 v18 = HMFGetOSLogHandle();
  int v19 = v18;
  if (v15)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      __int16 v20 = HMFGetLogIdentifier();
      id v21 = [a1[5] UUID];
      uint64_t v22 = [a1[6] uuid];
      __int16 v23 = [v3 objectAtIndexedSubscript:1];
      int v25 = 138544130;
      uint64_t v26 = v20;
      __int16 v27 = 2112;
      id v28 = v21;
      __int16 v29 = 2112;
      id v30 = v22;
      __int16 v31 = 2112;
      id v32 = v23;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Some error occurred when adding pairings, pin codes & Home keys for the restricted guest %@ with error dictionary: %@", (uint8_t *)&v25, 0x2Au);

LABEL_12:
    }
  }
  else if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    __int16 v20 = HMFGetLogIdentifier();
    id v21 = [a1[5] UUID];
    int v25 = 138543618;
    uint64_t v26 = v20;
    __int16 v27 = 2112;
    id v28 = v21;
    _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Successfully finished adding pairings, pin codes & Home keys for the restricted guest", (uint8_t *)&v25, 0x16u);
    goto LABEL_12;
  }

  [a1[7] respondWithSuccess];

  return 1;
}

- (void)_handleUpdateRestrictedGuestSettings:(id)a3
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([(HMDHome *)self hasAnyResident] && isTVOSDevice())
  {
    [(HMDHome *)self __handleUpdateRestrictedGuestSettings:v4];
  }
  else
  {
    uint64_t v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      int v10 = 138543362;
      id v11 = v8;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@Not handling this message as this home does not have any resident and this is controller.", (uint8_t *)&v10, 0xCu);
    }
    id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:91];
    [v4 respondWithError:v9];
  }
}

- (void)_updateRestrictedGuestHomeAccessSettingsFromOutgoingInvitation:(id)a3 forUserModel:(id)a4
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 uuidsOfAllowedAccessories];
  [v7 setAllowedAccessoryUUIDs:v8];

  id v9 = (void *)MEMORY[0x230FBD990]();
  int v10 = self;
  id v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = HMFGetLogIdentifier();
    uint64_t v13 = [v7 allowedAccessoryUUIDs];
    int v14 = 138543618;
    uint64_t v15 = v12;
    __int16 v16 = 2112;
    id v17 = v13;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Allowed accessories for RG users: %@", (uint8_t *)&v14, 0x16u);
  }
}

- (BOOL)shouldWeSendAutomationsToClients
{
  id v2 = [(HMDHome *)self currentUser];
  char v3 = [v2 isRestrictedGuest] ^ 1;

  return v3;
}

- (BOOL)defaultRoomContainsAccessoryWithUUID:(id)a3
{
  id v4 = [(HMDHome *)self accessoryWithUUID:a3];
  uint64_t v5 = [(HMDHome *)self roomForEntireHome];
  id v6 = [v4 room];
  char v7 = [v5 isEqual:v6];

  return v7;
}

- (BOOL)hasActiveWACPairing
{
  id v2 = [(HMDHome *)self accessoryBrowser];
  char v3 = [v2 hasActiveWACPairing];

  return v3;
}

- (id)destinationForAppleMediaAccessory:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self mediaGroupsAggregateConsumer];
  id v6 = [v4 uuid];

  char v7 = [v5 destinationWithParentIdentifier:v6];

  return v7;
}

- (id)destinationControllerDataForAppleMediaAccessory:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self mediaGroupsAggregateConsumer];
  id v6 = [v4 uuid];

  char v7 = [v5 destinationControllerDataWithParentIdentifier:v6];

  return v7;
}

- (void)submitRestrictedGuestUserInfoLogEvent
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  char v3 = [HMDRestrictedGuestInfoLogEvent alloc];
  id v4 = [(HMDHome *)self uuid];
  uint64_t v5 = [(HMDRestrictedGuestInfoLogEvent *)v3 initWithHomeUUID:v4];

  id v6 = [(HMDHome *)self walletKeyManager];
  -[HMDRestrictedGuestInfoLogEvent setHasHomeKey:](v5, "setHasHomeKey:", [v6 hasHomeKeyInWallet]);

  char v7 = [(HMDHome *)self currentUser];
  id v8 = [v7 accessCode];
  [(HMDRestrictedGuestInfoLogEvent *)v5 setHasPinCode:v8 != 0];

  [(HMDRestrictedGuestInfoLogEvent *)v5 setIsChildWatch:0];
  id v9 = [(HMDHome *)self accessories];
  -[HMDRestrictedGuestInfoLogEvent setNumberOfAccessories:](v5, "setNumberOfAccessories:", [v9 count]);

  int v10 = [(HMDHome *)self currentUser];
  id v11 = [v10 restrictedGuestAccessSettings];
  uint64_t v12 = [v11 schedule];
  uint64_t v13 = [v12 weekDayRules];
  uint64_t v14 = [v13 count];

  uint64_t v15 = [(HMDHome *)self currentUser];
  __int16 v16 = [v15 restrictedGuestAccessSettings];
  id v17 = [v16 schedule];
  uint64_t v18 = [v17 yearDayRules];
  uint64_t v19 = [v18 count];

  [(HMDRestrictedGuestInfoLogEvent *)v5 setNumberOfSchedules:v19 + v14];
  uint64_t v20 = 3;
  if (v19 <= 0) {
    uint64_t v20 = 1;
  }
  if (v14 <= 0) {
    uint64_t v21 = 2 * (v19 > 0);
  }
  else {
    uint64_t v21 = v20;
  }
  uint64_t v22 = (void *)MEMORY[0x230FBD990]([(HMDRestrictedGuestInfoLogEvent *)v5 setScheduleType:v21]);
  __int16 v23 = self;
  char v24 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    int v25 = HMFGetLogIdentifier();
    uint64_t v26 = [(HMDRestrictedGuestInfoLogEvent *)v5 coreAnalyticsEventDictionary];
    int v28 = 138543618;
    __int16 v29 = v25;
    __int16 v30 = 2112;
    __int16 v31 = v26;
    _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Submitting restricted guest info log event with data: %@", (uint8_t *)&v28, 0x16u);
  }
  __int16 v27 = [(HMDHome *)v23 logEventSubmitter];
  [v27 submitLogEvent:v5];
}

- (void)submitHomeOwnerRestrictedGuestFeatureLogEvent
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  char v3 = [HMDRestrictedGuestFeatureLogEvent alloc];
  id v4 = [(HMDHome *)self uuid];
  uint64_t v5 = [(HMDRestrictedGuestFeatureLogEvent *)v3 initWithHomeUUID:v4];

  id v6 = [(HMDHome *)self accessories];
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  v18[2] = __56__HMDHome_submitHomeOwnerRestrictedGuestFeatureLogEvent__block_invoke;
  v18[3] = &unk_264A27218;
  v18[4] = self;
  -[HMDRestrictedGuestFeatureLogEvent setHasRGSupportedAccessory:](v5, "setHasRGSupportedAccessory:", objc_msgSend(v6, "na_any:", v18));

  char v7 = [(HMDHome *)self users];
  id v8 = objc_msgSend(v7, "na_filter:", &__block_literal_global_2428);
  -[HMDRestrictedGuestFeatureLogEvent setNumberOfRGs:](v5, "setNumberOfRGs:", [v8 count]);

  id v9 = [(HMDHome *)self residentDeviceManager];
  int v10 = [v9 residentDevices];
  id v11 = objc_msgSend(v10, "na_filter:", &__block_literal_global_2430);
  -[HMDRestrictedGuestFeatureLogEvent setNumEnabledResidentsInHome:](v5, "setNumEnabledResidentsInHome:", [v11 count]);

  uint64_t v12 = (void *)MEMORY[0x230FBD990]();
  uint64_t v13 = self;
  uint64_t v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = HMFGetLogIdentifier();
    __int16 v16 = [(HMDRestrictedGuestFeatureLogEvent *)v5 coreAnalyticsEventDictionary];
    *(_DWORD *)buf = 138543618;
    uint64_t v20 = v15;
    __int16 v21 = 2112;
    uint64_t v22 = v16;
    _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Submitting restricted guest feature log event with data: %@", buf, 0x16u);
  }
  id v17 = [(HMDHome *)v13 logEventSubmitter];
  [v17 submitLogEvent:v5];
}

uint64_t __56__HMDHome_submitHomeOwnerRestrictedGuestFeatureLogEvent__block_invoke(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) services];
  id v2 = objc_msgSend(v1, "na_map:", &__block_literal_global_2425);

  uint64_t v3 = [MEMORY[0x263F0E6E8] doesAccessoryHaveRestrictedGuestCapableServiceTypes:v2];
  return v3;
}

uint64_t __56__HMDHome_submitHomeOwnerRestrictedGuestFeatureLogEvent__block_invoke_4(uint64_t a1, void *a2)
{
  id v2 = [a2 capabilities];
  uint64_t v3 = [v2 supportsRestrictedGuest];

  return v3;
}

uint64_t __56__HMDHome_submitHomeOwnerRestrictedGuestFeatureLogEvent__block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 isRestrictedGuest];
}

uint64_t __56__HMDHome_submitHomeOwnerRestrictedGuestFeatureLogEvent__block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 serviceType];
}

- (void)submitRestrictedGuestLogEvents
{
  uint64_t v3 = [(HMDHome *)self currentUser];
  int v4 = [v3 isOwner];

  if (v4)
  {
    [(HMDHome *)self submitHomeOwnerRestrictedGuestFeatureLogEvent];
  }
  else
  {
    uint64_t v5 = [(HMDHome *)self currentUser];
    int v6 = [v5 isRestrictedGuest];

    if (v6)
    {
      [(HMDHome *)self submitRestrictedGuestUserInfoLogEvent];
    }
  }
}

- (id)mediaGroupsAggregateDataTopicName
{
  id v2 = (void *)MEMORY[0x263F0E3A0];
  uint64_t v3 = *MEMORY[0x263F0C878];
  int v4 = [(HMDHome *)self uuid];
  uint64_t v5 = [v2 topicFromSuffixID:v3 homeUUID:v4];

  return v5;
}

- (void)runDailyTask
{
  uint64_t v3 = [(HMDHome *)self logEventSubmitter];
  int v4 = [[HMDUnexpectedNotificationLogEvent alloc] initWithCount:0];
  [v3 submitLogEvent:v4];

  [(HMDHome *)self submitRestrictedGuestLogEvents];
}

- (void)_handleRetrieveHomeLocationForFeedback:(id)a3
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self homeLocationHandler];

  if (v5)
  {
    int v6 = [MEMORY[0x263EFF9A0] dictionary];
    char v7 = [(HMDHome *)self homeLocationHandler];
    id v8 = [v7 locationUpdateTimestamp];

    if (v8)
    {
      id v9 = [(HMDHome *)self homeLocationHandler];
      int v10 = [v9 locationUpdateTimestamp];
      [v6 setObject:v10 forKeyedSubscript:*MEMORY[0x263F0C948]];
    }
    id v11 = (void *)MEMORY[0x230FBD990]();
    uint64_t v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v19 = 138543618;
      uint64_t v20 = v14;
      __int16 v21 = 2112;
      uint64_t v22 = v6;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Retrieve home location for feedback : %@", (uint8_t *)&v19, 0x16u);
    }
    [v4 respondWithPayload:v6];
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    __int16 v16 = self;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      int v19 = 138543362;
      uint64_t v20 = v18;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Home Location Handler does not exist.", (uint8_t *)&v19, 0xCu);
    }
    int v6 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v4 respondWithError:v6];
  }
}

- (id)_processTestModeHomeAccessControlOverride:(id)a3
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = objc_msgSend(v4, "hmf_BOOLForKey:", @"kConfigTestingResetOverrideKey");
  int v6 = objc_msgSend(v4, "hmf_numberForKey:", @"kConfigTestingHomeAccessControlKey");
  if (v6) {
    char v7 = 1;
  }
  else {
    char v7 = v5;
  }
  if (v7)
  {
    os_unfair_recursive_lock_lock_with_options();
    if (v5)
    {

      int v6 = 0;
    }
    char v8 = HMFEqualObjects();
    objc_storeStrong((id *)&self->_overriddenHomeAccessControl, v6);
    uint64_t v9 = os_unfair_recursive_lock_unlock();
    if (v8)
    {
      int v10 = (void *)MEMORY[0x230FBD990](v9);
      id v11 = self;
      uint64_t v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = HMFGetLogIdentifier();
        int v20 = 138543618;
        __int16 v21 = v13;
        __int16 v22 = 2112;
        id v23 = v4;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Home Access Control overridden to %@", (uint8_t *)&v20, 0x16u);
      }
    }
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    __int16 v16 = self;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      int v20 = 138543618;
      __int16 v21 = v18;
      __int16 v22 = 2112;
      id v23 = v4;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Home Access Control override configuration incomplete: %@", (uint8_t *)&v20, 0x16u);
    }
    uint64_t v14 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    int v6 = 0;
  }

  return v14;
}

- (id)_processTestModeUpdateHomeLocation:(id)a3
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (isInternalBuild())
  {
    int v5 = [v4 dataForKey:@"kHomeLocationDataKey"];
    if (v5)
    {
      id v30 = 0;
      int v6 = [MEMORY[0x263F08928] unarchivedObjectOfClass:objc_opt_class() fromData:v5 error:&v30];
      id v7 = v30;
      if (v6)
      {
        char v8 = objc_msgSend(v4, "hmf_numberForKey:", @"homeLocationSource");
        unint64_t v9 = (int)[v8 intValue];

        int v10 = (void *)MEMORY[0x230FBD990]();
        id v11 = self;
        uint64_t v12 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          uint64_t v13 = HMFGetLogIdentifier();
          uint64_t v14 = HMDHomeLocationSourceToString(v9);
          *(_DWORD *)buf = 138543874;
          uint64_t v32 = v13;
          __int16 v33 = 2112;
          id v34 = v6;
          __int16 v35 = 2112;
          id v36 = v14;
          _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Received new home location override from shared admin: %@, source : %@", buf, 0x20u);
        }
        uint64_t v15 = [(HMDHome *)v11 homeLocationHandler];
        __int16 v16 = [MEMORY[0x263EFF910] date];
        [v15 runTransactionWithLocation:v6 updatedTime:v16 source:v9];
      }
      else
      {
        int v25 = (void *)MEMORY[0x230FBD990]();
        uint64_t v26 = self;
        __int16 v27 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          int v28 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          uint64_t v32 = v28;
          __int16 v33 = 2112;
          id v34 = v7;
          _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive location from data: %@", buf, 0x16u);
        }
      }
    }
    else
    {
      __int16 v21 = (void *)MEMORY[0x230FBD990]();
      __int16 v22 = self;
      id v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v32 = v24;
        __int16 v33 = 2112;
        id v34 = 0;
        _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to find location from data: %@", buf, 0x16u);
      }
      id v7 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    }
  }
  else
  {
    id v17 = (void *)MEMORY[0x230FBD990]();
    uint64_t v18 = self;
    int v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v20 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v32 = v20;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Not processing home location overrides as build is not internal or simulator.", buf, 0xCu);
    }
    id v7 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
  }

  return v7;
}

- (id)_processTestModeHomeLocationStatusOverride:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = objc_msgSend(v4, "hmf_BOOLForKey:", @"kConfigTestingResetOverrideKey");
  int v6 = objc_msgSend(v4, "hmf_numberForKey:", @"kConfigTestingHomeLocationStatusKey");
  id v7 = v6;
  if ((v5 & 1) != 0 || v6)
  {
    int64_t v13 = [v6 unsignedIntegerValue];
    int64_t v14 = [(HMDHome *)self homeLocation];
    os_unfair_recursive_lock_lock_with_options();
    if (v5)
    {
      if (!self->_overrideHomeLocation)
      {
        self->_overriddenHomeLocation = v13;
        os_unfair_recursive_lock_unlock();
LABEL_13:
        uint64_t v12 = 0;
        goto LABEL_14;
      }
      BOOL v15 = 0;
    }
    else
    {
      BOOL v15 = 1;
    }
    self->_overrideHomeLocation = v15;
    self->_overriddenHomeLocation = v13;
    os_unfair_recursive_lock_unlock();
    int64_t v16 = [(HMDHome *)self homeLocation];
    if (v16 != v14) {
      [(HMDHome *)self _handleHomeLocationChange:v16 previousLocation:v14];
    }
    goto LABEL_13;
  }
  char v8 = (void *)MEMORY[0x230FBD990]();
  unint64_t v9 = self;
  int v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    int v18 = 138543618;
    int v19 = v11;
    __int16 v20 = 2112;
    id v21 = v4;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Home Location override configuration incomplete: %@", (uint8_t *)&v18, 0x16u);
  }
  uint64_t v12 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
LABEL_14:

  return v12;
}

- (void)aggregator:(id)a3 didReceiveSoftwareVersionWithUUID:(id)a4 softwareVersion:(id)a5
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = (void *)MEMORY[0x230FBD990]();
  uint64_t v12 = self;
  int64_t v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int64_t v14 = HMFGetLogIdentifier();
    BOOL v15 = [v10 buildVersion];
    *(_DWORD *)buf = 138544130;
    __int16 v27 = v14;
    __int16 v28 = 2112;
    id v29 = v10;
    __int16 v30 = 2112;
    __int16 v31 = v15;
    __int16 v32 = 2112;
    id v33 = v9;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Received accessory software version: %@ (%@) accessory: %@", buf, 0x2Au);
  }
  int64_t v16 = [(HMDHome *)v12 backingStore];
  id v17 = [v16 context];

  if (v17)
  {
    v22[0] = MEMORY[0x263EF8330];
    v22[1] = 3221225472;
    v22[2] = __72__HMDHome_aggregator_didReceiveSoftwareVersionWithUUID_softwareVersion___block_invoke;
    v22[3] = &unk_264A2E610;
    void v22[4] = v12;
    id v23 = v10;
    id v24 = v9;
    id v25 = v17;
    [v25 performBlock:v22];
  }
  else
  {
    int v18 = (void *)MEMORY[0x230FBD990]();
    int v19 = v12;
    __int16 v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      id v21 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v27 = v21;
      __int16 v28 = 2112;
      id v29 = 0;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to handle received software version due to missing backing store context: %@", buf, 0x16u);
    }
  }
}

void __72__HMDHome_aggregator_didReceiveSoftwareVersionWithUUID_softwareVersion___block_invoke(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = HMFGetLogIdentifier();
    int v6 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    id v29 = v5;
    __int16 v30 = 2112;
    id v31 = v6;
    __int16 v32 = 2112;
    uint64_t v33 = v7;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Saving accessory software version: %@ accessory: %@", buf, 0x20u);
  }
  id v8 = +[HMCContext findAppleMediaAccessoryWithModelID:*(void *)(a1 + 48)];
  id v9 = v8;
  if (!v8)
  {
    uint64_t v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = *(id *)(a1 + 32);
    int64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      BOOL v15 = HMFGetLogIdentifier();
      __int16 v20 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      id v29 = v15;
      __int16 v30 = 2112;
      id v31 = v20;
      id v17 = "%{public}@Aggregator: Failed to save accessory software version due to missing mkfAppleMediaAccessory with uuid: %@";
      int v18 = v14;
      os_log_type_t v19 = OS_LOG_TYPE_ERROR;
      goto LABEL_9;
    }
LABEL_10:

    goto LABEL_16;
  }
  id v10 = *(void **)(a1 + 40);
  id v11 = [v8 softwareVersion];
  LODWORD(v10) = [v10 isEqual:v11];

  if (v10)
  {
    uint64_t v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = *(id *)(a1 + 32);
    int64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      BOOL v15 = HMFGetLogIdentifier();
      int64_t v16 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      id v29 = v15;
      __int16 v30 = 2112;
      id v31 = v16;
      id v17 = "%{public}@Aggregator: Skipping already saved accessory software version for accessory: %@";
      int v18 = v14;
      os_log_type_t v19 = OS_LOG_TYPE_INFO;
LABEL_9:
      _os_log_impl(&dword_22F52A000, v18, v19, v17, buf, 0x16u);

      goto LABEL_10;
    }
    goto LABEL_10;
  }
  [v9 setSoftwareVersion:*(void *)(a1 + 40)];
  id v21 = *(void **)(a1 + 56);
  id v27 = 0;
  [v21 save:&v27];
  id v22 = v27;
  if (v22)
  {
    id v23 = (void *)MEMORY[0x230FBD990]();
    id v24 = *(id *)(a1 + 32);
    id v25 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v29 = v26;
      __int16 v30 = 2112;
      id v31 = v22;
      _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to save accessory software version with error: %@", buf, 0x16u);
    }
  }

LABEL_16:
}

- (void)aggregator:(id)a3 didReceiveDeviceIRKWithUUID:(id)a4 deviceIRK:(id)a5
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = (void *)MEMORY[0x230FBD990]();
  uint64_t v12 = self;
  id v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int64_t v14 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    uint64_t v26 = v14;
    __int16 v27 = 2112;
    id v28 = v10;
    __int16 v29 = 2112;
    id v30 = v9;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Received accessory deviceIRK: %@ accessory: %@", buf, 0x20u);
  }
  BOOL v15 = [(HMDHome *)v12 backingStore];
  int64_t v16 = [v15 context];

  if (v16)
  {
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 3221225472;
    v21[2] = __60__HMDHome_aggregator_didReceiveDeviceIRKWithUUID_deviceIRK___block_invoke;
    v21[3] = &unk_264A2E610;
    void v21[4] = v12;
    id v22 = v10;
    id v23 = v9;
    id v24 = v16;
    [v24 performBlock:v21];
  }
  else
  {
    id v17 = (void *)MEMORY[0x230FBD990]();
    int v18 = v12;
    os_log_type_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      __int16 v20 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v26 = v20;
      __int16 v27 = 2112;
      id v28 = 0;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Missing backing store context: %@", buf, 0x16u);
    }
  }
}

void __60__HMDHome_aggregator_didReceiveDeviceIRKWithUUID_deviceIRK___block_invoke(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = HMFGetLogIdentifier();
    int v6 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    id v38 = v5;
    __int16 v39 = 2112;
    id v40 = v6;
    __int16 v41 = 2112;
    uint64_t v42 = v7;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Saving accessory deviceIRK: %@ accessory: %@", buf, 0x20u);
  }
  id v8 = +[HMCContext findAppleMediaAccessoryWithModelID:*(void *)(a1 + 48)];
  id v9 = v8;
  if (v8)
  {
    id v10 = [v8 resident];
    if (!v10)
    {
      id v11 = (void *)MEMORY[0x230FBD990]();
      id v12 = *(id *)(a1 + 32);
      id v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int64_t v14 = HMFGetLogIdentifier();
        BOOL v15 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        id v38 = v14;
        __int16 v39 = 2112;
        id v40 = v15;
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to save deviceIRK due to missing mkfResident for accessory with uuid: %@", buf, 0x16u);
      }
    }
    int64_t v16 = *(void **)(a1 + 40);
    id v17 = [v9 deviceIRKData];
    if ([v16 isEqual:v17])
    {
      int v18 = *(void **)(a1 + 40);
      os_log_type_t v19 = [v10 deviceIRKData];
      LODWORD(v18) = [v18 isEqual:v19];

      if (v18)
      {
        __int16 v20 = (void *)MEMORY[0x230FBD990]();
        id v21 = *(id *)(a1 + 32);
        id v22 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          id v23 = HMFGetLogIdentifier();
          id v24 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138543618;
          id v38 = v23;
          __int16 v39 = 2112;
          id v40 = v24;
          _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Skipping matching deviceIRK for accessory: %@", buf, 0x16u);
        }
LABEL_22:

        goto LABEL_23;
      }
    }
    else
    {
    }
    [v9 setDeviceIRKData:*(void *)(a1 + 40)];
    [v10 setDeviceIRKData:*(void *)(a1 + 40)];
    id v30 = *(void **)(a1 + 56);
    id v36 = 0;
    [v30 save:&v36];
    id v31 = v36;
    if (v31)
    {
      __int16 v32 = (void *)MEMORY[0x230FBD990]();
      id v33 = *(id *)(a1 + 32);
      uint64_t v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        __int16 v35 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v38 = v35;
        __int16 v39 = 2112;
        id v40 = v31;
        _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to save accessory pairing identity with error: %@", buf, 0x16u);
      }
    }

    goto LABEL_22;
  }
  id v25 = (void *)MEMORY[0x230FBD990]();
  id v26 = *(id *)(a1 + 32);
  __int16 v27 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    id v28 = HMFGetLogIdentifier();
    __int16 v29 = *(void **)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    id v38 = v28;
    __int16 v39 = 2112;
    id v40 = v29;
    _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: did not find mkfAppleMediaAccessory with uuid: %@", buf, 0x16u);
  }
LABEL_23:
}

- (void)aggregator:(id)a3 didReceivePublicPairingKeyWithUUID:(id)a4 pairingIdentity:(id)a5
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = (void *)MEMORY[0x230FBD990]();
  id v12 = self;
  id v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int64_t v14 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    id v26 = v14;
    __int16 v27 = 2112;
    id v28 = v10;
    __int16 v29 = 2112;
    id v30 = v9;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Received accessory public pairing identity: %@ accessory: %@", buf, 0x20u);
  }
  BOOL v15 = [(HMDHome *)v12 backingStore];
  int64_t v16 = [v15 context];

  if (v16)
  {
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 3221225472;
    v21[2] = __73__HMDHome_aggregator_didReceivePublicPairingKeyWithUUID_pairingIdentity___block_invoke;
    v21[3] = &unk_264A2E610;
    void v21[4] = v12;
    id v22 = v10;
    id v23 = v9;
    id v24 = v16;
    [v24 performBlock:v21];
  }
  else
  {
    id v17 = (void *)MEMORY[0x230FBD990]();
    int v18 = v12;
    os_log_type_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      __int16 v20 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v26 = v20;
      __int16 v27 = 2112;
      id v28 = 0;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to handle received accessory public pairing identity due to missing backing store context: %@", buf, 0x16u);
    }
  }
}

void __73__HMDHome_aggregator_didReceivePublicPairingKeyWithUUID_pairingIdentity___block_invoke(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = HMFGetLogIdentifier();
    int v6 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    uint64_t v42 = v5;
    __int16 v43 = 2112;
    id v44 = v6;
    __int16 v45 = 2112;
    uint64_t v46 = v7;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Saving accessory public pairing identity: %@ accessory: %@", buf, 0x20u);
  }
  id v8 = +[HMCContext findAppleMediaAccessoryWithModelID:*(void *)(a1 + 48)];
  id v9 = v8;
  if (v8)
  {
    id v10 = [v8 resident];
    if (!v10)
    {
      id v11 = (void *)MEMORY[0x230FBD990]();
      id v12 = *(id *)(a1 + 32);
      id v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int64_t v14 = HMFGetLogIdentifier();
        BOOL v15 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        uint64_t v42 = v14;
        __int16 v43 = 2112;
        id v44 = v15;
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to save accessory public pairing identity due to missing mkfResident for accessory with uuid: %@", buf, 0x16u);
      }
    }
    int64_t v16 = *(void **)(a1 + 40);
    id v17 = [v9 pairingIdentity];
    if ([v16 isEqual:v17])
    {
      int v18 = *(void **)(a1 + 40);
      os_log_type_t v19 = [v10 pairingIdentity];
      LODWORD(v18) = [v18 isEqual:v19];

      if (v18)
      {
        __int16 v20 = (void *)MEMORY[0x230FBD990]();
        id v21 = *(id *)(a1 + 32);
        id v22 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          id v23 = HMFGetLogIdentifier();
          id v24 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138543618;
          uint64_t v42 = v23;
          __int16 v43 = 2112;
          id v44 = v24;
          _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Skipping already saved accessory public pairing identity for accessory: %@", buf, 0x16u);
        }
        goto LABEL_25;
      }
    }
    else
    {
    }
    [v9 setPairingIdentity:*(void *)(a1 + 40)];
    [v10 setPairingIdentity:*(void *)(a1 + 40)];
    id v30 = *(void **)(a1 + 56);
    id v40 = 0;
    int v31 = [v30 save:&v40];
    id v32 = v40;
    id v33 = v32;
    if (v31)
    {
      uint64_t v34 = (void *)MEMORY[0x230FBD990]();
      id v35 = *(id *)(a1 + 32);
      id v36 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        uint64_t v37 = HMFGetLogIdentifier();
        id v38 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        uint64_t v42 = v37;
        __int16 v43 = 2112;
        id v44 = v38;
        _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Saved pairing identity for accessory: %@", buf, 0x16u);
      }
    }
    else
    {
      if (!v32)
      {
LABEL_24:

LABEL_25:
        goto LABEL_26;
      }
      uint64_t v34 = (void *)MEMORY[0x230FBD990]();
      id v35 = *(id *)(a1 + 32);
      id v36 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        __int16 v39 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v42 = v39;
        __int16 v43 = 2112;
        id v44 = v33;
        _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to save pairing identity error: %@", buf, 0x16u);
      }
    }

    goto LABEL_24;
  }
  id v25 = (void *)MEMORY[0x230FBD990]();
  id v26 = *(id *)(a1 + 32);
  __int16 v27 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    id v28 = HMFGetLogIdentifier();
    __int16 v29 = *(void **)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    uint64_t v42 = v28;
    __int16 v43 = 2112;
    id v44 = v29;
    _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to save accessory public pairing identity due to missing mkfAppleMediaAccessory with uuid: %@", buf, 0x16u);
  }
LABEL_26:
}

- (void)aggregator:(id)a3 residentCapabilitiesWithUUID:(id)a4 completion:(id)a5
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = [(HMDHome *)self accessoryWithUUID:v9];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v12 = v11;
  }
  else {
    id v12 = 0;
  }
  id v13 = v12;

  if (v13)
  {
    int64_t v14 = [(HMDHome *)self backingStore];
    BOOL v15 = [v14 context];

    if (v15)
    {
      v24[0] = MEMORY[0x263EF8330];
      v24[1] = 3221225472;
      v24[2] = __62__HMDHome_aggregator_residentCapabilitiesWithUUID_completion___block_invoke;
      v24[3] = &unk_264A2F870;
      id v25 = v9;
      id v26 = v10;
      [v15 performBlock:v24];
    }
    else
    {
      __int16 v20 = (void *)MEMORY[0x230FBD990]();
      id v21 = self;
      id v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        id v23 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v28 = v23;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Did not find backingstore context", buf, 0xCu);
      }
      (*((void (**)(id, void))v10 + 2))(v10, 0);
    }
  }
  else
  {
    int64_t v16 = (void *)MEMORY[0x230FBD990]();
    id v17 = self;
    int v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v28 = v19;
      __int16 v29 = 2112;
      id v30 = v9;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Did not find accessory for %@", buf, 0x16u);
    }
    (*((void (**)(id, void))v10 + 2))(v10, 0);
  }
}

void __62__HMDHome_aggregator_residentCapabilitiesWithUUID_completion___block_invoke(uint64_t a1)
{
  id v5 = +[HMCContext findAppleMediaAccessoryWithModelID:*(void *)(a1 + 32)];
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [v5 resident];
  id v4 = [v3 residentCapabilities];
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v4);
}

- (void)aggregator:(id)a3 accessoryCapabilitiesWithUUID:(id)a4 completion:(id)a5
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = [(HMDHome *)self accessoryWithUUID:v9];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v12 = v11;
  }
  else {
    id v12 = 0;
  }
  id v13 = v12;

  if (v13)
  {
    int64_t v14 = [(HMDHome *)self backingStore];
    BOOL v15 = [v14 context];

    if (v15)
    {
      v24[0] = MEMORY[0x263EF8330];
      v24[1] = 3221225472;
      v24[2] = __63__HMDHome_aggregator_accessoryCapabilitiesWithUUID_completion___block_invoke;
      v24[3] = &unk_264A2F870;
      id v25 = v9;
      id v26 = v10;
      [v15 performBlock:v24];
    }
    else
    {
      __int16 v20 = (void *)MEMORY[0x230FBD990]();
      id v21 = self;
      id v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        id v23 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v28 = v23;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Did not find backingstore context", buf, 0xCu);
      }
      (*((void (**)(id, void))v10 + 2))(v10, 0);
    }
  }
  else
  {
    int64_t v16 = (void *)MEMORY[0x230FBD990]();
    id v17 = self;
    int v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v28 = v19;
      __int16 v29 = 2112;
      id v30 = v9;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Did not find accessory for %@", buf, 0x16u);
    }
    (*((void (**)(id, void))v10 + 2))(v10, 0);
  }
}

void __63__HMDHome_aggregator_accessoryCapabilitiesWithUUID_completion___block_invoke(uint64_t a1)
{
  id v4 = +[HMCContext findAppleMediaAccessoryWithModelID:*(void *)(a1 + 32)];
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [v4 accessoryCapabilities];
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
}

- (void)aggregatorDidBecomePrimary:(id)a3
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  int v6 = [v5 _accessoryOfCurrentDevice];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = v7;

  id v9 = [(HMDHome *)self appleMediaAccessories];
  if (v8)
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v22 = v13;
      __int16 v23 = 2112;
      id v24 = v8;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Became primary with current accessory %@", buf, 0x16u);
    }
    int64_t v14 = [(HMDHome *)v11 backingStore];
    BOOL v15 = [v14 context];

    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 3221225472;
    v17[2] = __38__HMDHome_aggregatorDidBecomePrimary___block_invoke;
    v17[3] = &unk_264A2F2F8;
    id v18 = v9;
    os_log_type_t v19 = v11;
    id v20 = v15;
    id v16 = v15;
    [v16 performBlock:v17];
  }
}

void __38__HMDHome_aggregatorDidBecomePrimary___block_invoke(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v44 = *MEMORY[0x263EF8340];
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v33 = [v2 countByEnumeratingWithState:&v35 objects:v43 count:16];
  if (v33)
  {
    char v3 = 0;
    uint64_t v32 = *(void *)v36;
    uint64_t v34 = v1;
    obuint64_t j = v2;
    do
    {
      for (uint64_t i = 0; i != v33; ++i)
      {
        if (*(void *)v36 != v32) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v35 + 1) + 8 * i);
        int v6 = [v5 uuid];
        uint64_t v7 = +[HMCContext findAppleMediaAccessoryWithModelID:v6];

        id v8 = [*(id *)(v1 + 40) capabilitiesAggregator];
        id v9 = [v5 uuid];
        id v10 = [v7 accessoryCapabilities];
        id v11 = [v8 accessoryCapabilitiesForAccessory:v9 ifDifferentFrom:v10];

        if (v11)
        {
          id v12 = (void *)MEMORY[0x230FBD990]([v7 setAccessoryCapabilities:v11]);
          id v13 = *(id *)(v1 + 40);
          int64_t v14 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v15 = HMFGetLogIdentifier();
            id v16 = [v5 uuid];
            *(_DWORD *)buf = 138543618;
            id v40 = v15;
            __int16 v41 = 2112;
            uint64_t v42 = v16;
            _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Accessory capabilities differ for %@", buf, 0x16u);
          }
          char v3 = 1;
          uint64_t v1 = v34;
        }
        id v17 = [v7 resident];
        id v18 = [*(id *)(v1 + 40) capabilitiesAggregator];
        os_log_type_t v19 = [v5 uuid];
        id v20 = [v17 residentCapabilities];
        id v21 = [v18 residentCapabilitiesForAccessory:v19 ifDifferentFrom:v20];

        if (v17 && v21)
        {
          id v22 = (void *)MEMORY[0x230FBD990]([v17 setResidentCapabilities:v21]);
          id v23 = *(id *)(v34 + 40);
          id v24 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v25 = HMFGetLogIdentifier();
            id v26 = [v5 uuid];
            *(_DWORD *)buf = 138543618;
            id v40 = v25;
            __int16 v41 = 2112;
            uint64_t v42 = v26;
            _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Resident capabilities differ for %@", buf, 0x16u);
          }
          char v3 = 1;
        }

        uint64_t v1 = v34;
      }
      uint64_t v33 = [obj countByEnumeratingWithState:&v35 objects:v43 count:16];
    }
    while (v33);

    if ((v3 & 1) != 0 && [*(id *)(v34 + 48) save])
    {
      __int16 v27 = (void *)MEMORY[0x230FBD990]();
      id v28 = *(id *)(v34 + 40);
      __int16 v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        id v30 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v40 = v30;
        _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Saved capabilities as they are different", buf, 0xCu);
      }
    }
  }
  else
  {
  }
}

- (void)aggregator:(id)a3 changedResidentCapabilities:(id)a4 rawCapabilities:(id)a5 accessoryUUID:(id)a6 homeUUID:(id)a7
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  id v17 = (void *)MEMORY[0x230FBD990]();
  id v18 = self;
  os_log_type_t v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    id v20 = HMFGetLogIdentifier();
    int v21 = 138543618;
    id v22 = v20;
    __int16 v23 = 2112;
    id v24 = v15;
    _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Received resident capabilities for accessory: %@", (uint8_t *)&v21, 0x16u);
  }
  [(HMDHome *)v18 _writeResidentCapabilities:v14 accessoryUUID:v15 homeUUID:v16];
}

- (void)aggregator:(id)a3 changedAccessoryCapabilities:(id)a4 rawCapabilities:(id)a5 accessoryUUID:(id)a6 homeUUID:(id)a7
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  id v17 = (void *)MEMORY[0x230FBD990]();
  id v18 = self;
  os_log_type_t v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    id v20 = HMFGetLogIdentifier();
    int v21 = 138543618;
    id v22 = v20;
    __int16 v23 = 2112;
    id v24 = v15;
    _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Received accessory capabilities for accessory: %@", (uint8_t *)&v21, 0x16u);
  }
  [(HMDHome *)v18 _writeAccessoryCapabilities:v14 accessoryUUID:v15 homeUUID:v16];
}

- (void)_writeResidentCapabilities:(id)a3 accessoryUUID:(id)a4 homeUUID:(id)a5
{
  id v7 = a3;
  id v8 = a4;
  id v9 = [(HMDHome *)self accessoryWithUUID:v8];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0 && v9)
  {
    id v11 = [(HMDHome *)self backingStore];
    id v12 = [v11 context];

    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 3221225472;
    void v14[2] = __61__HMDHome__writeResidentCapabilities_accessoryUUID_homeUUID___block_invoke;
    v14[3] = &unk_264A2E610;
    id v15 = v8;
    id v16 = v7;
    id v17 = v12;
    id v18 = self;
    id v13 = v12;
    [v13 performBlock:v14];
  }
}

void __61__HMDHome__writeResidentCapabilities_accessoryUUID_homeUUID___block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v2 = +[HMCContext findAppleMediaAccessoryWithModelID:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = [v2 resident];
  [v4 setResidentCapabilities:v3];

  if ([*(id *)(a1 + 48) save])
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = *(id *)(a1 + 56);
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = HMFGetLogIdentifier();
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 138543618;
      id v11 = v8;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Saved resident capabilities for %@", (uint8_t *)&v10, 0x16u);
    }
  }
}

- (void)_writeAccessoryCapabilities:(id)a3 accessoryUUID:(id)a4 homeUUID:(id)a5
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = [(HMDHome *)self accessoryWithUUID:v8];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0 && v9)
  {
    id v11 = [(HMDHome *)self backingStore];
    __int16 v12 = [v11 context];

    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 3221225472;
    void v14[2] = __62__HMDHome__writeAccessoryCapabilities_accessoryUUID_homeUUID___block_invoke;
    v14[3] = &unk_264A2E610;
    id v15 = v8;
    id v16 = v7;
    id v17 = v12;
    id v18 = self;
    id v13 = v12;
    [v13 performBlock:v14];
  }
}

void __62__HMDHome__writeAccessoryCapabilities_accessoryUUID_homeUUID___block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v2 = +[HMCContext findAppleMediaAccessoryWithModelID:*(void *)(a1 + 32)];
  [v2 setAccessoryCapabilities:*(void *)(a1 + 40)];
  if ([*(id *)(a1 + 48) save])
  {
    uint64_t v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = *(id *)(a1 + 56);
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = HMFGetLogIdentifier();
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138543618;
      uint64_t v9 = v6;
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Saved accessory capabilities for %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

- (id)localAndRemoteSubscriptionProvider
{
  id v2 = [(HMDHome *)self homeManager];
  uint64_t v3 = [v2 localAndRemoteSubscriptionProvider];

  return v3;
}

- (id)eventStoreReadHandle
{
  id v2 = [(HMDHome *)self homeManager];
  uint64_t v3 = [v2 eventStoreReadHandle];

  return v3;
}

- (HMEEventForwarder)eventForwarder
{
  id v2 = [(HMDHome *)self homeManager];
  uint64_t v3 = [v2 eventForwarder];

  return (HMEEventForwarder *)v3;
}

- (void)didReceiveAccessorySetting:(id)a3 accessoryUUID:(id)a4
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = v6;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  id v10 = v9;

  if (v10
    && ([v10 keyPath],
        uint64_t v11 = objc_claimAutoreleasedReturnValue(),
        char v12 = [v11 isEqualToString:@"root.siri.availableLanguages"],
        v11,
        (v12 & 1) != 0))
  {
    id v13 = [(HMDHome *)self accessoryWithUUID:v7];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    id v15 = v14;

    if (v15)
    {
      id v16 = [(HMDHome *)self notificationCenter];
      id v26 = @"HMDHomeNotificationKey";
      __int16 v27 = self;
      id v17 = [NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
      [v16 postNotificationName:@"HMDAppleMediaAccessoryLanguagesChangedNotification" object:self userInfo:v17];
    }
    else
    {
      id v22 = (void *)MEMORY[0x230FBD990]();
      __int16 v23 = self;
      id v24 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        uint64_t v25 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        __int16 v29 = v25;
        __int16 v30 = 2112;
        id v31 = v8;
        __int16 v32 = 2112;
        id v33 = v7;
        _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Received accessory setting %@ that is not for an accessory %@ in this home", buf, 0x20u);
      }
    }
  }
  else
  {
    id v18 = (void *)MEMORY[0x230FBD990]();
    os_log_type_t v19 = self;
    id v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      int v21 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v29 = v21;
      __int16 v30 = 2112;
      id v31 = v8;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Unexpectedly received accessory setting %@ that is not for available languages", buf, 0x16u);
    }
  }
}

- (id)deviceForAppleMediaAccessoryMessageRouter:(id)a3 message:(id)a4
{
  id v5 = objc_msgSend(a4, "messagePayload", a3);
  id v6 = objc_msgSend(v5, "hmf_UUIDForKey:", *MEMORY[0x263F0B840]);

  id v7 = [(HMDHome *)self accessoryWithUUID:v6];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v8 = v7;
  }
  else {
    id v8 = 0;
  }
  id v9 = v8;

  id v10 = [v9 device];

  return v10;
}

- (BOOL)isCurrentDevicePairedWithWatchForSiriSecureAccessoryAccessController:(id)a3
{
  uint64_t v3 = [(HMDHome *)self homeManager];
  char v4 = [v3 isPairedWithWatch];

  return v4;
}

- (BOOL)currentDeviceSupportsSiriUnsecuringActionsWithWatchAuthForSiriSecureAccessoryAccessController:(id)a3
{
  uint64_t v3 = [(HMDHome *)self localCapabilitiesDataSource];
  char v4 = [v3 supportsSiriUnsecuringActionsWithWatchAuth];

  return v4;
}

- (BOOL)currentDeviceSupportsSiriUnsecuringActionsWithNoPasscodeForSiriSecureAccessoryAccessController:(id)a3
{
  uint64_t v3 = [(HMDHome *)self localCapabilitiesDataSource];
  char v4 = [v3 supportsSiriUnsecuringActionsWithNoPasscode];

  return v4;
}

- (BOOL)isMediaSystem:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self mediaSystems];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  v9[2] = __25__HMDHome_isMediaSystem___block_invoke;
  void v9[3] = &unk_264A1BB98;
  id v10 = v4;
  id v6 = v4;
  id v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v9);

  return v7 != 0;
}

uint64_t __25__HMDHome_isMediaSystem___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 uuid];
  uint64_t v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v4;
}

- (BOOL)isSidekickAccessory:(id)a3
{
  uint64_t v3 = [(HMDHome *)self accessoryWithUUID:a3];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = v4;
  id v6 = v5;
  if (v5)
  {
    id v7 = [v5 siriEndpointProfile];
    BOOL v8 = v7 != 0;
  }
  else
  {
    BOOL v8 = 0;
  }

  return v8;
}

- (BOOL)isAppleMediaAccessory:(id)a3
{
  uint64_t v3 = [(HMDHome *)self accessoryWithUUID:a3];
  objc_opt_class();
  BOOL v4 = objc_opt_isKindOfClass() & (v3 != 0);

  return v4;
}

- (BOOL)router:(id)a3 shouldHandleMessage:(id)a4 usingRouter:(id)a5
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = [(HMDHome *)self accessoryMessageRouterViaPrimary];

  if (v11 != v8)
  {
    BOOL v12 = 0;
    goto LABEL_18;
  }
  id v13 = [v9 messagePayload];
  uint64_t v14 = objc_msgSend(v13, "hmf_UUIDForKey:", *MEMORY[0x263F0B840]);

  id v15 = [(HMDHome *)self accessoryWithUUID:v14];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v16 = v15;
  }
  else {
    id v16 = 0;
  }
  id v17 = v16;

  id v18 = [(HMDHome *)self currentAccessory];
  os_log_type_t v19 = [v18 uuid];
  id v20 = [v17 uuid];
  int v21 = objc_msgSend(v19, "hmf_isEqualToUUID:", v20);

  if (v17)
  {
    id v22 = [(HMDHome *)self appleDeviceRouter];
    if (v22 == v10)
    {
      int v23 = [(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident] | v21;

      if (v23 == 1)
      {
        id v24 = (void *)MEMORY[0x230FBD990]();
        uint64_t v25 = self;
        id v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          __int16 v27 = HMFGetLogIdentifier();
          int v31 = 138543362;
          __int16 v32 = v27;
          _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_DEBUG, "%{public}@accepting accessory router", (uint8_t *)&v31, 0xCu);
        }
        char v28 = 1;
        goto LABEL_14;
      }
    }
    else
    {
    }
  }
  char v28 = 0;
LABEL_14:
  id v29 = [(HMDHome *)self primaryResidentMessageRouter];

  if (v29 == v10) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = v28;
  }

LABEL_18:
  return v12;
}

- (BOOL)remoteEventAllowedForTopic:(id)a3 deviceType:(unint64_t)a4 userType:(unint64_t)a5
{
  id v8 = a3;
  id v9 = [(HMDHome *)self homeRemoteEventAccessController];
  LOBYTE(a5) = [v9 remoteEventAllowedForTopic:v8 deviceType:a4 userType:a5];

  return a5;
}

- (id)currentAccessoryHomeUUID
{
  uint64_t v3 = [(HMDHome *)self currentAccessory];

  if (v3)
  {
    BOOL v4 = [(HMDHome *)self uuid];
  }
  else
  {
    BOOL v4 = 0;
  }
  return v4;
}

- (id)currentAccessorySetupMetricDispatcher
{
  id v2 = [(HMDHome *)self homeManager];
  uint64_t v3 = [v2 currentAccessorySetupMetricDispatcher];

  return v3;
}

- (id)expandedTopicsWithTopics:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  id v6 = +[HMDHomeEventsGenerated expandedTopicsWithTopics:v4 homeManager:v5];

  return v6;
}

- (BOOL)canTopicBeForwardedToPrimaryFromResident:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self currentAccessory];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  if (v7)
  {
    if (self)
    {
      id v8 = (void *)MEMORY[0x263F0DFA8];
      id v9 = v7;
      id v10 = [(HMDHome *)self uuid];
      id v11 = [v9 uuid];

      self = [v8 topicPrefixWithHomeUUID:v10 accessoryUUID:v11];
    }
    char v12 = [v4 hasPrefix:self];
  }
  else
  {
    char v12 = 0;
  }

  return v12;
}

- (id)messageTargetForDeviceIdentifier:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self residentDeviceManager];
  id v6 = [v5 residentDevices];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  v11[2] = __44__HMDHome_messageTargetForDeviceIdentifier___block_invoke;
  void v11[3] = &unk_264A2A830;
  id v12 = v4;
  id v7 = v4;
  id v8 = objc_msgSend(v6, "na_firstObjectPassingTest:", v11);
  id v9 = [v8 device];

  return v9;
}

uint64_t __44__HMDHome_messageTargetForDeviceIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 device];
  id v4 = [v3 identifier];
  uint64_t v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v5;
}

- (BOOL)isDeviceIdentifierPrimaryResident:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self primaryResident];
  id v6 = [v5 device];
  id v7 = [v6 identifier];
  char v8 = objc_msgSend(v7, "hmf_isEqualToUUID:", v4);

  return v8;
}

- (BOOL)isDevicePrimaryResident:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self primaryResident];
  id v6 = [v5 device];
  char v7 = [v6 isEqual:v4];

  return v7;
}

- (BOOL)shouldAllowTopic:(id)a3 forDeviceWithMessageIdentifier:(id)a4
{
  v13[1] = *MEMORY[0x263EF8340];
  id v6 = a3;
  char v7 = [(HMDHome *)self accessoryWithDeviceIdentifier:a4];
  if (v7)
  {
    v13[0] = v6;
    char v8 = [MEMORY[0x263EFF8C0] arrayWithObjects:v13 count:1];
    id v9 = [v7 uuid];
    id v10 = +[HMDAccessoryEventsGenerated topicsRemovingAccessoryTopics:v8 accessoryUUID:v9];
    BOOL v11 = [v10 count] != 0;
  }
  else
  {
    BOOL v11 = 1;
  }

  return v11;
}

- (id)routerServerUserAccessControlProviderForIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self users];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  v9[2] = __62__HMDHome_routerServerUserAccessControlProviderForIdentifier___block_invoke;
  void v9[3] = &unk_264A2DB60;
  id v10 = v4;
  id v6 = v4;
  char v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v9);

  return v7;
}

uint64_t __62__HMDHome_routerServerUserAccessControlProviderForIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 uuid];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

- (id)routerServerUserAccessControlProviderIdentifierForMessage:(id)a3
{
  uint64_t v3 = [a3 matchingRemoteIdentityUserForHome:self];
  uint64_t v4 = [v3 uuid];

  return v4;
}

- (void)clientController:(id)a3 primaryClientConnectMessageFailWithError:(id)a4
{
  id v5 = a4;
  id v6 = [(HMDHome *)self homeManager];
  char v7 = [v6 accessorySetupMetricDispatchersForHome:self];
  uint64_t v14 = MEMORY[0x263EF8330];
  uint64_t v15 = 3221225472;
  id v16 = __69__HMDHome_clientController_primaryClientConnectMessageFailWithError___block_invoke;
  id v17 = &unk_264A17148;
  id v18 = self;
  id v8 = v5;
  id v19 = v8;
  objc_msgSend(v7, "na_each:", &v14);
  uint64_t v9 = [(HMDHome *)self currentDevice];
  if (v9)
  {
    id v10 = (void *)v9;
    BOOL v11 = [(HMDHome *)self _hasConfirmedPrimaryResidentDevice];

    if (v11)
    {
      id v12 = [v6 currentAccessorySetupMetricDispatcher];
      [v12 markEventRouterPrimaryClientConnectMessageFailedWithError:v8];

      id v13 = [v6 currentAccessorySetupMetricDispatcher];
      objc_msgSend(v13, "markCurrentDeviceConfirmedPrimaryResidentStatusDidChange:", -[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"));
    }
  }
}

void __69__HMDHome_clientController_primaryClientConnectMessageFailWithError___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    char v7 = HMFGetLogIdentifier();
    id v8 = [v3 trackingInfo];
    uint64_t v9 = [v8 accessoryUUID];
    int v11 = 138543618;
    id v12 = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Marking primary client connect message failed for accessory: %@", (uint8_t *)&v11, 0x16u);
  }
  id v10 = [*(id *)(a1 + 32) _hasConfirmedPrimaryResidentDevice];

  if (v10) {
    [v3 markEventRouterPrimaryClientConnectMessageFailedWithError:*(void *)(a1 + 40)];
  }
}

- (void)clientController:(id)a3 connectionStatusDidChange:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = [(HMDHome *)self homeManager];
  char v7 = [v6 accessorySetupMetricDispatchersForHome:self];
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  v12[2] = __54__HMDHome_clientController_connectionStatusDidChange___block_invoke;
  v12[3] = &unk_264A17120;
  void v12[4] = self;
  BOOL v13 = v4;
  objc_msgSend(v7, "na_each:", v12);
  uint64_t v8 = [(HMDHome *)self currentDevice];
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    id v10 = [(HMDHome *)self _hasConfirmedPrimaryResidentDevice];

    if (v10)
    {
      int v11 = [v6 currentAccessorySetupMetricDispatcher];
      [v11 markEventRouterPrimaryClientConnectStatusChanged:v4];
    }
  }
}

void __54__HMDHome_clientController_connectionStatusDidChange___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v3 = a2;
  BOOL v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    char v7 = HMFGetLogIdentifier();
    uint64_t v8 = [v3 trackingInfo];
    uint64_t v9 = [v8 accessoryUUID];
    int v11 = 138543618;
    id v12 = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Marking primary client connection status changed for accessory: %@", (uint8_t *)&v11, 0x16u);
  }
  id v10 = [*(id *)(a1 + 32) _hasConfirmedPrimaryResidentDevice];

  if (v10) {
    [v3 markEventRouterPrimaryClientConnectStatusChanged:*(unsigned __int8 *)(a1 + 40)];
  }
}

- (BOOL)isCurrentUserRestrictedForRemoteEventRouterClientController:(id)a3
{
  id v3 = [(HMDHome *)self currentUser];
  char v4 = [v3 isRestrictedGuest];

  return v4;
}

- (void)discoverPrimaryResidentForEventRouterClientController:(id)a3
{
  id v3 = [(HMDHome *)self residentDeviceManager];
  [v3 discoverPrimaryResidentForRequester:0];
}

- (BOOL)isMessagedHomepodSettingsEnabledForClientController:(id)a3
{
  return 1;
}

- (BOOL)isCurrentDevicePrimaryResidentForRemoteEventRouterClientController:(id)a3
{
  id v3 = [(HMDHome *)self residentDeviceManager];
  char v4 = [v3 isCurrentDevicePrimaryResident];

  return v4;
}

- (BOOL)isCurrentDeviceResidentCapableForRemoteEventRouterClientController:(id)a3
{
  id v3 = [(HMDHome *)self localCapabilitiesDataSource];
  char v4 = [v3 isResidentCapable];

  return v4;
}

- (id)deviceForPrimaryResidentForRemoteEventRouterClientController:(id)a3
{
  id v3 = [(HMDHome *)self residentDeviceManager];
  char v4 = [v3 primaryResidentDevice];
  id v5 = [v4 device];

  if ([v5 isCurrentDevice]) {
    id v6 = 0;
  }
  else {
    id v6 = v5;
  }

  return v6;
}

- (id)deviceForAccessoryUUID:(id)a3 forRemoteEventRouterClientController:(id)a4
{
  char v4 = -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", a3, a4);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  if (v6)
  {
    char v7 = [v6 deviceForDirectMessaging];
  }
  else
  {
    char v7 = 0;
  }

  return v7;
}

- (id)eventStoreWriteHandleForRemoteEventRouterClientController:(id)a3
{
  id v3 = [(HMDHome *)self homeManager];
  char v4 = [v3 eventStoreWriteHandle];

  return v4;
}

- (id)eventStoreReadHandleForRemoteEventRouterClientController:(id)a3
{
  id v3 = [(HMDHome *)self homeManager];
  char v4 = [v3 eventStoreReadHandle];

  return v4;
}

- (id)primaryResidentDeviceIdentifierForRemoteEventRouterClientController:(id)a3
{
  id v3 = [(HMDHome *)self residentDeviceManager];
  char v4 = [v3 primaryResidentDevice];
  id v5 = [v4 device];
  id v6 = [v5 identifier];

  return v6;
}

- (void)clientController:(id)a3 didReceiveFetchedCachedEvents:(id)a4 source:(id)a5
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v19 = a3;
  id v7 = a4;
  id v8 = a5;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v9 = v7;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v22;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v22 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void *)(*((void *)&v21 + 1) + 8 * v13);
        uint64_t v15 = (void *)MEMORY[0x230FBD990](v10);
        id v16 = objc_msgSend(v9, "objectForKeyedSubscript:", v14, v19);
        id v17 = [(HMDHome *)self homeManager];
        id v18 = [v17 memoryEventConsumer];
        [v18 didReceiveCachedEvent:v16 topic:v14 source:v8];

        ++v13;
      }
      while (v11 != v13);
      uint64_t v10 = [v9 countByEnumeratingWithState:&v21 objects:v25 count:16];
      uint64_t v11 = v10;
    }
    while (v10);
  }
}

- (id)delegatingRouter:(id)a3 upstreamTopicsFor:(id)a4
{
  return +[HMDHomeEventsGenerated upstreamTopicsForTopic:a4];
}

- (id)delegatingRouter:(id)a3 filteredTopics:(id)a4 forRouter:(id)a5
{
  id v5 = a4;
  return v5;
}

- (id)eventRouterDumpStateInfo
{
  v19[1] = *MEMORY[0x263EF8340];
  id v3 = [(HMDHome *)self uuid];
  char v4 = [v3 UUIDString];

  id v18 = v4;
  v16[0] = @"RemoteClientController";
  id v5 = [(HMDHome *)self remoteEventRouterClientController];
  uint64_t v6 = [v5 dumpStateDescription];
  id v7 = (void *)v6;
  if (v6) {
    id v8 = (__CFString *)v6;
  }
  else {
    id v8 = &stru_26E2EB898;
  }
  v16[1] = @"RemoteServer";
  v17[0] = v8;
  id v9 = [(HMDHome *)self remoteEventRouterServer];
  uint64_t v10 = [v9 dumpStateDescription];
  uint64_t v11 = (void *)v10;
  if (v10) {
    uint64_t v12 = (__CFString *)v10;
  }
  else {
    uint64_t v12 = &stru_26E2EB898;
  }
  v17[1] = v12;
  uint64_t v13 = [NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];
  v19[0] = v13;
  uint64_t v14 = [NSDictionary dictionaryWithObjects:v19 forKeys:&v18 count:1];

  return v14;
}

- (void)_handleRetrieveAsyncResults:(id)a3
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  uint64_t v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    id v9 = [v4 shortDescription];
    *(_DWORD *)buf = 138543618;
    id v53 = v8;
    __int16 v54 = 2112;
    id v55 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling retrieve async results message: %@", buf, 0x16u);
  }
  uint64_t v10 = [v4 dataForKey:*MEMORY[0x263F0CDA8]];
  if (v10)
  {
    uint64_t v11 = [(HMDHome *)v6 reportingSessionManager];
    uint64_t v12 = [v11 consumeResponseMessagePayloadsForSessionWithReportContextRequestInfo:v10];

    if ([v12 count])
    {
      uint64_t v44 = v10;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      id v13 = v12;
      uint64_t v47 = [v13 countByEnumeratingWithState:&v48 objects:v58 count:16];
      if (v47)
      {
        uint64_t v46 = *(void *)v49;
        obuint64_t j = v13;
        do
        {
          for (uint64_t i = 0; i != v47; ++i)
          {
            if (*(void *)v49 != v46) {
              objc_enumerationMutation(obj);
            }
            uint64_t v15 = *(void **)(*((void *)&v48 + 1) + 8 * i);
            id v16 = (void *)MEMORY[0x230FBD990]();
            id v17 = (void *)[v15 mutableCopy];
            id v18 = (void *)MEMORY[0x230FBD990]([v17 setObject:MEMORY[0x263EFFA80] forKeyedSubscript:@"kMultiPartResponseKey"]);
            id v19 = v6;
            id v20 = v6;
            long long v21 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              long long v22 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543874;
              id v53 = v22;
              __int16 v54 = 2112;
              id v55 = v15;
              __int16 v56 = 2112;
              id v57 = v17;
              _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Overriding payload in last cached message from %@ to %@", buf, 0x20u);
            }
            if ([v4 qualityOfService] < 17) {
              uint64_t v23 = 17;
            }
            else {
              uint64_t v23 = [v4 qualityOfService];
            }
            id v24 = objc_alloc(MEMORY[0x263F42570]);
            uint64_t v25 = [(HMDHome *)v20 uuid];
            uint64_t v26 = (void *)[v24 initWithTarget:v25];

            id v27 = objc_alloc(MEMORY[0x263F42590]);
            char v28 = (void *)[v17 copy];
            id v29 = (void *)[v27 initWithName:@"kMultipleCharacteristicValuesUpdatedNotificationKey" qualityOfService:v23 destination:v26 payload:v28];

            __int16 v30 = [v4 transport];
            [v29 setTransport:v30];
            int v31 = [v4 identifier];
            [v29 setIdentifier:v31];

            __int16 v32 = [(HMDHome *)v20 msgDispatcher];
            [v32 sendMessage:v29];

            uint64_t v6 = v19;
          }
          id v13 = obj;
          uint64_t v47 = [obj countByEnumeratingWithState:&v48 objects:v58 count:16];
        }
        while (v47);
      }

      [v4 respondWithSuccess];
      uint64_t v10 = v44;
    }
    else
    {
      long long v38 = v12;
      __int16 v39 = (void *)MEMORY[0x230FBD990]();
      id v40 = v6;
      __int16 v41 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v42 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v53 = v42;
        _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_DEFAULT, "%{public}@Did not find any response message payloads to retrieve", buf, 0xCu);
      }
      __int16 v43 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      [v4 respondWithError:v43];

      id v13 = v38;
    }
  }
  else
  {
    uint64_t v33 = (void *)MEMORY[0x230FBD990]();
    uint64_t v34 = v6;
    long long v35 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      long long v36 = HMFGetLogIdentifier();
      long long v37 = [v4 messagePayload];
      *(_DWORD *)buf = 138543618;
      id v53 = v36;
      __int16 v54 = 2112;
      id v55 = v37;
      _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_ERROR, "%{public}@Could not find request info in message payload: %@", buf, 0x16u);
    }
    id v13 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v4 respondWithError:v13];
  }
}

- (void)endReportingSessionForMessage:(id)a3
{
  id v10 = a3;
  id v4 = reportContextFromMessage(v10);
  if (v4)
  {
    id v5 = v10;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    id v7 = v6;

    if (!v7)
    {
      id v8 = [(HMDHome *)self reportingSessionManager];
      id v9 = [v5 identifier];
      [v8 endSessionWithUUID:v9];
    }
  }
}

- (void)handleReportingSessionResponseMessage:(id)a3
{
  id v4 = a3;
  id v7 = [(HMDHome *)self reportingSessionManager];
  id v5 = [v4 messagePayload];
  uint64_t v6 = [v4 identifier];

  [v7 addResponseMessagePayload:v5 toSessionWithUUID:v6];
}

- (void)startReportingSessionForMessage:(id)a3
{
  id v10 = a3;
  id v4 = reportContextFromMessage(v10);
  if (v4)
  {
    id v5 = [v10 transport];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    id v7 = v6;

    if (v7)
    {
      id v8 = [(HMDHome *)self reportingSessionManager];
      id v9 = [v10 identifier];
      [v8 startSessionWithUUID:v9 reportContext:v4 xpcClientConnection:v7];
    }
  }
}

- (BOOL)hasCharacteristicNotificationRegistrations
{
  id v2 = [(HMDHome *)self notificationRegistrations];
  BOOL v3 = [v2 count] != 0;

  return v3;
}

- (void)_applyNotificationDeregistrations
{
  os_unfair_recursive_lock_lock_with_options();
  [(NSMutableSet *)self->_notificationRegistrations minusSet:self->_notificationDeregistrations];
  [(NSMutableSet *)self->_notificationRegistrationsForAppleMediaAccessories minusSet:self->_notificationDeregistrations];
  [(NSMutableSet *)self->_notificationDeregistrations removeAllObjects];
  os_unfair_recursive_lock_unlock();
}

- (void)removeNotificationDeregistrationForClientIdentifier:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  [(NSMutableSet *)self->_notificationDeregistrations removeObject:v4];
  os_unfair_recursive_lock_unlock();
}

- (void)addNotificationDeregistrationForClientIdentifier:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  [(NSMutableSet *)self->_notificationDeregistrations addObject:v4];
  os_unfair_recursive_lock_unlock();
}

- (NSSet)notificationDeregistrations
{
  os_unfair_recursive_lock_lock_with_options();
  BOOL v3 = (void *)[(NSMutableSet *)self->_notificationDeregistrations copy];
  os_unfair_recursive_lock_unlock();
  return (NSSet *)v3;
}

- (BOOL)isClientIdentifierSubscribedToAppleMediaAccessoryState:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = [(NSMutableSet *)self->_notificationRegistrationsForAppleMediaAccessories containsObject:v4];
  os_unfair_recursive_lock_unlock();

  return (char)self;
}

- (void)addNotificationRegistrationForClientIdentifier:(id)a3 includesAppleMediaAccessories:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  [(NSMutableSet *)self->_notificationRegistrations addObject:v6];
  if (v4) {
    [(NSMutableSet *)self->_notificationRegistrationsForAppleMediaAccessories addObject:v6];
  }
  os_unfair_recursive_lock_unlock();
}

- (id)notificationRegistrationsForAppleMediaAccessories
{
  os_unfair_recursive_lock_lock_with_options();
  BOOL v3 = (void *)[(NSMutableSet *)self->_notificationRegistrationsForAppleMediaAccessories copy];
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (NSSet)notificationRegistrations
{
  os_unfair_recursive_lock_lock_with_options();
  BOOL v3 = (void *)[(NSMutableSet *)self->_notificationRegistrations copy];
  os_unfair_recursive_lock_unlock();
  return (NSSet *)v3;
}

- (void)_handleFetchLastModifiedServiceOfType:(id)a3
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kServiceType"];
  id v6 = v5;
  if (!v5)
  {
    uint64_t v11 = (void *)MEMORY[0x230FBD990]();
    uint64_t v12 = self;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      uint64_t v15 = [v4 messagePayload];
      *(_DWORD *)location = 138543874;
      *(void *)&location[4] = v14;
      __int16 v27 = 2112;
      char v28 = @"kServiceType";
      __int16 v29 = 2112;
      __int16 v30 = v15;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Missing service type parameter in message payload %@:%@", location, 0x20u);
    }
    id v16 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
    [v4 respondWithError:v16];

    goto LABEL_10;
  }
  if (![(__CFString *)v5 isEqualToString:*MEMORY[0x263F0D6F8]])
  {
    id v17 = (void *)MEMORY[0x230FBD990]();
    id v18 = self;
    id v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      id v20 = HMFGetLogIdentifier();
      *(_DWORD *)location = 138543618;
      *(void *)&location[4] = v20;
      __int16 v27 = 2112;
      char v28 = v6;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Querying for the service type is not supported: %@", location, 0x16u);
    }
    long long v21 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    [v4 respondWithError:v21];

LABEL_10:
    id v7 = 0;
    goto LABEL_11;
  }
  id v7 = (id)*MEMORY[0x263F0C4A8];
  objc_initWeak((id *)location, self);
  id v8 = [(HMDHome *)self homeManager];
  id v9 = [v8 biomeEventManager];
  id v10 = [(HMDHome *)self spiClientIdentifier];
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 3221225472;
  v22[2] = __49__HMDHome__handleFetchLastModifiedServiceOfType___block_invoke;
  v22[3] = &unk_264A170F8;
  objc_copyWeak(&v25, (id *)location);
  id v23 = v4;
  id v24 = v6;
  [v9 fetchMostRecentEventWithCharacteristicType:v7 serviceType:v24 homeSPIClientIdentifier:v10 completion:v22];

  objc_destroyWeak(&v25);
  objc_destroyWeak((id *)location);
LABEL_11:
}

void __49__HMDHome__handleFetchLastModifiedServiceOfType___block_invoke(uint64_t a1, void *a2)
{
  v72[1] = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([v3 count])
  {
    id v5 = objc_msgSend(v3, "hmf_UUIDForKey:", @"HMDAccessorySPIClientIdentifierKey");
    uint64_t v6 = objc_msgSend(v3, "hmf_UUIDForKey:", @"HMDServiceSPIClientIdentifierKey");
    id v7 = (void *)v6;
    if (v5 && v6)
    {
      id v8 = [WeakRetained accessoryWithSPIClientIdentifier:v5];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v9 = v8;
      }
      else {
        id v9 = 0;
      }
      id v10 = v9;

      if (v10)
      {
        uint64_t v11 = [v10 identifiersForBridgedAccessories];
        uint64_t v12 = [v11 count];

        uint64_t v55 = a1;
        __int16 v56 = WeakRetained;
        id v57 = v10;
        uint64_t v58 = v5;
        if (v12)
        {
          id v13 = [v10 identifiersForBridgedAccessories];
          uint64_t v14 = [v13 allObjects];
          uint64_t v15 = [WeakRetained accessoriesWithUUIDs:v14];
        }
        else
        {
          v72[0] = v10;
          uint64_t v15 = [MEMORY[0x263EFF8C0] arrayWithObjects:v72 count:1];
        }
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        id v28 = v15;
        uint64_t v29 = [v28 countByEnumeratingWithState:&v59 objects:v71 count:16];
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *(void *)v60;
          while (2)
          {
            for (uint64_t i = 0; i != v30; ++i)
            {
              if (*(void *)v60 != v31) {
                objc_enumerationMutation(v28);
              }
              id v33 = *(id *)(*((void *)&v59 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                uint64_t v34 = v33;
              }
              else {
                uint64_t v34 = 0;
              }
              id v35 = v34;

              if (v35)
              {
                uint64_t v36 = [v35 serviceWithSPIClientIdentifier:v7];
                if (v36)
                {
                  uint64_t v42 = (void *)v36;

                  __int16 v43 = [v42 instanceID];
                  uint64_t v44 = [v33 uuid];
                  __int16 v45 = [v44 UUIDString];

                  if (v43) {
                    BOOL v46 = v45 == 0;
                  }
                  else {
                    BOOL v46 = 1;
                  }
                  if (v46)
                  {
                    context = (void *)MEMORY[0x230FBD990]();
                    id WeakRetained = v56;
                    id v47 = v56;
                    long long v48 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                    {
                      id v53 = HMFGetLogIdentifier();
                      *(_DWORD *)buf = 138543874;
                      id v66 = v53;
                      __int16 v67 = 2112;
                      id v68 = v43;
                      __int16 v69 = 2112;
                      id v70 = v45;
                      _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_ERROR, "%{public}@Either service instanceID (%@) is nil or accessory UUID (%@) is nil", buf, 0x20u);
                    }
                    long long v49 = v43;
                    long long v50 = *(void **)(v55 + 32);
                    id v52 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
                    long long v51 = v50;
                    __int16 v43 = v49;
                    [v51 respondWithError:v52];
                  }
                  else
                  {
                    v63[0] = @"kServiceInstanceID";
                    v63[1] = @"kAccessoryUUID";
                    v64[0] = v43;
                    v64[1] = v45;
                    id v52 = [NSDictionary dictionaryWithObjects:v64 forKeys:v63 count:2];
                    [*(id *)(v55 + 32) respondWithPayload:v52];
                    id WeakRetained = v56;
                  }

                  goto LABEL_43;
                }
              }
            }
            uint64_t v30 = [v28 countByEnumeratingWithState:&v59 objects:v71 count:16];
            if (v30) {
              continue;
            }
            break;
          }
        }

        long long v37 = (void *)MEMORY[0x230FBD990]();
        id WeakRetained = v56;
        id v38 = v56;
        __int16 v39 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          id v40 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v66 = v40;
          __int16 v67 = 2112;
          id v68 = v7;
          _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_ERROR, "%{public}@Unable to find service with serviceSPIClientIdentifier %@", buf, 0x16u);
        }
        __int16 v41 = *(void **)(v55 + 32);
        id v33 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
        [v41 respondWithError:v33];
LABEL_43:

        id v10 = v57;
        id v5 = v58;
      }
      else
      {
        id v23 = (void *)MEMORY[0x230FBD990]();
        id v24 = WeakRetained;
        id v25 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v66 = v26;
          __int16 v67 = 2112;
          id v68 = v5;
          _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_ERROR, "%{public}@Unable to find accessory with accessorySPIClientIdentifier %@", buf, 0x16u);

          id v10 = 0;
        }

        __int16 v27 = *(void **)(a1 + 32);
        id v28 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
        [v27 respondWithError:v28];
      }
    }
    else
    {
      id v18 = (void *)MEMORY[0x230FBD990]();
      id v19 = WeakRetained;
      id v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        long long v21 = HMFGetLogIdentifier();
        long long v22 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138543618;
        id v66 = v21;
        __int16 v67 = 2112;
        id v68 = v22;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Found no query results for last modified service of type: %@ ", buf, 0x16u);
      }
      [*(id *)(a1 + 32) respondWithPayload:MEMORY[0x263EFFA78]];
    }
  }
  else
  {
    id v16 = *(void **)(a1 + 32);
    id v17 = [MEMORY[0x263F087E8] hmErrorWithCode:23];
    [v16 respondWithError:v17];
  }
}

- (void)handleSwitchFromResidentSelectionToREV2:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  uint64_t v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v17 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Received request to switch from Resident Selection to REV2", buf, 0xCu);
  }
  id v9 = [(HMDHome *)v6 backingStore];
  id v10 = [v9 context];

  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  void v13[2] = __51__HMDHome_handleSwitchFromResidentSelectionToREV2___block_invoke;
  v13[3] = &unk_264A2F2F8;
  v13[4] = v6;
  id v14 = v10;
  id v15 = v4;
  id v11 = v4;
  id v12 = v10;
  [v12 performBlock:v13];
}

void __51__HMDHome_handleSwitchFromResidentSelectionToREV2___block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) uuid];
  id v3 = +[HMCContext findHomeWithModelID:v2];

  id v4 = [NSNumber numberWithLong:2];
  [v3 setResidentSelectionVersion:v4];

  id v5 = [v3 residentSelections];
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 3221225472;
  v22[2] = __51__HMDHome_handleSwitchFromResidentSelectionToREV2___block_invoke_2;
  v22[3] = &unk_264A170D0;
  uint64_t v6 = *(void **)(a1 + 40);
  void v22[4] = *(void *)(a1 + 32);
  id v23 = v6;
  objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v22);

  id v7 = *(void **)(a1 + 40);
  id v21 = 0;
  int v8 = [v7 save:&v21];
  id v9 = v21;
  id v10 = v9;
  if (v8)
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = *(id *)(a1 + 32);
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v25 = v14;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Finished removing Resident Selection models.", buf, 0xCu);
    }
    [*(id *)(a1 + 48) respondWithSuccess];
  }
  else if (v9)
  {
    id v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = *(id *)(a1 + 32);
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v25 = v18;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove Resident Selection models.", buf, 0xCu);
    }
    id v19 = *(void **)(a1 + 48);
    id v20 = [MEMORY[0x263F087E8] hmfErrorWithCode:15];
    [v19 respondWithError:v20];
  }
}

void __51__HMDHome_handleSwitchFromResidentSelectionToREV2___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    int v11 = 138543618;
    id v12 = v7;
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Deleting: %@", (uint8_t *)&v11, 0x16u);
  }
  id v8 = v3;
  if ([v8 conformsToProtocol:&unk_26E480D78]) {
    id v9 = v8;
  }
  else {
    id v9 = 0;
  }
  id v10 = v9;

  [*(id *)(a1 + 40) deleteObject:v10];
}

- (void)handleSetPreferredPrimaryMessage:(id)a3
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  uint64_t v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = HMFGetLogIdentifier();
    id v9 = [v4 messagePayload];
    *(_DWORD *)buf = 138543618;
    uint64_t v30 = v8;
    __int16 v31 = 2112;
    __int16 v32 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@SetPreferredPrimary - Received set preferred primary message with payload: %@", buf, 0x16u);
  }
  id v10 = [v4 messagePayload];
  int v11 = objc_msgSend(v10, "hmf_stringForKey:", *MEMORY[0x263F0CE30]);

  id v12 = [v4 messagePayload];
  uint64_t v13 = objc_msgSend(v12, "hmf_BOOLForKey:", *MEMORY[0x263F0CE28]);

  id v14 = [v4 messagePayload];
  uint64_t v15 = objc_msgSend(v14, "hmf_BOOLForKey:", *MEMORY[0x263F0CE38]);

  id v16 = [(HMDHome *)v6 destinationForEnabledResidents];
  if (!v16)
  {
    id v23 = (void *)MEMORY[0x230FBD990]();
    id v24 = v6;
    id v25 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v30 = v26;
      _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@SetPreferredPrimary - Not propagating message, no known enabled residents in home", buf, 0xCu);
    }
    if (v11) {
      goto LABEL_5;
    }
LABEL_10:
    clearPrimaryPreference(0);
    goto LABEL_11;
  }
  v28[0] = v11;
  id v17 = objc_msgSend(NSNumber, "numberWithBool:", v13, @"preferred.primary.identifier", @"preferred.primary.one.time");
  v28[1] = v17;
  v27[2] = @"preferred.primary.trigger.election";
  uint64_t v18 = [NSNumber numberWithBool:v15];
  v28[2] = v18;
  id v19 = [NSDictionary dictionaryWithObjects:v28 forKeys:v27 count:3];

  id v20 = [[HMDRemoteMessage alloc] initWithName:@"mesh.setPreferredPrimary.debug" qualityOfService:9 destination:v16 payload:v19 type:3 timeout:1 secure:0.0];
  id v21 = [(HMDHome *)v6 msgDispatcher];
  [v21 sendMessage:v20];

  if (!v11) {
    goto LABEL_10;
  }
LABEL_5:
  setPrimaryPreference(v11, v13);
  if (v15)
  {
    long long v22 = [(HMDHome *)v6 residentDeviceManager];
    [v22 electResidentDevice:7];
  }
LABEL_11:
  [v4 respondWithSuccess];
}

- (id)destinationForEnabledResidents
{
  id v3 = [(HMDHome *)self enabledResidents];
  id v4 = objc_msgSend(v3, "na_map:", &__block_literal_global_2206);

  if ([v4 count])
  {
    id v5 = [HMDMultipleRemoteDeviceDestination alloc];
    uint64_t v6 = [(HMDHome *)self uuid];
    id v7 = [(HMDMultipleRemoteDeviceDestination *)v5 initWithTarget:v6 devices:v4];
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

id __41__HMDHome_destinationForEnabledResidents__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 device];
  char v4 = [v3 isCurrentDevice];

  if (v4)
  {
    id v5 = 0;
  }
  else
  {
    id v5 = [v2 device];
  }

  return v5;
}

- (void)_handleRollReaderKey:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [MEMORY[0x263F42530] internalOnlyInitializer];
  uint64_t v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    id v10 = [v5 UUID];
    *(_DWORD *)buf = 138543618;
    id v16 = v9;
    __int16 v17 = 2112;
    uint64_t v18 = v10;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Homeutil command received to roll reader key in this home", buf, 0x16u);
  }
  int v11 = [(HMDHome *)v7 nfcReaderKeyManager];
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  void v13[2] = __32__HMDHome__handleRollReaderKey___block_invoke;
  v13[3] = &unk_264A2F3E8;
  id v14 = v4;
  id v12 = v4;
  [v11 rollReaderKeyWithFlow:v5 withCompletion:v13];
}

uint64_t __32__HMDHome__handleRollReaderKey___block_invoke(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 respondWithError:a2];
  }
  else {
    return [v2 respondWithSuccess];
  }
}

- (void)_handleTestUpgradeToROAR:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 numberForKey:*MEMORY[0x263F0CE88]];
  uint64_t v6 = v5;
  if (v5)
  {
    if ([v5 BOOLValue])
    {
      id v7 = +[HMDHomeUpgradedToROAR defaultModelForHome:self];
    }
    else
    {
      [(HMDHome *)self setIsUpdatedToHH2:0];
      uint64_t v13 = [HMDHomeUpgradedToROAR alloc];
      id v14 = +[HMDHomeUpgradedToROAR modelIDForHome:self];
      uint64_t v15 = [(HMDHome *)self uuid];
      id v7 = [(HMDBackingStoreModelObject *)v13 initWithObjectChangeType:3 uuid:v14 parentUUID:v15];

      [(HMDHome *)self saveWithReason:@"Downgrading To HH1" postSyncNotification:0 objectChange:1];
    }
    id v16 = [(HMDHome *)self backingStore];
    __int16 v17 = [v4 name];
    uint64_t v18 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v19 = [v16 transaction:v17 options:v18];

    [v19 add:v7 withMessage:v4];
    [v19 run];
    [v4 respondWithSuccess];
  }
  else
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = HMFGetLogIdentifier();
      int v20 = 138543362;
      id v21 = v11;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Update flag is needed.", (uint8_t *)&v20, 0xCu);
    }
    id v12 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:20 userInfo:0];
    [v4 respondWithError:v12];
  }
}

- (HMDHomeNFCReaderKey)nfcReaderKey
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_nfcReaderKey;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setNfcReaderKey:(id)a3
{
  id v4 = (HMDHomeNFCReaderKey *)a3;
  os_unfair_recursive_lock_lock_with_options();
  nfcReaderKey = self->_nfcReaderKey;
  self->_nfcReaderKey = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)configureNaturalLightingForDemoMode
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = HMFGetLogIdentifier();
    int v7 = 138543362;
    id v8 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Setting up natural lighting for demo mode", (uint8_t *)&v7, 0xCu);
  }
  [(HMDHome *)v4 configureNaturalLightingWithDemoModeEnabled:1];
}

- (HMDNaturalLightingContext)naturalLightingContext
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_naturalLightingContext;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setNaturalLightingContext:(id)a3
{
  id v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ([(HMDNaturalLightingContext *)self->_naturalLightingContext isEqual:v6])
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    id v4 = (HMDNaturalLightingContext *)[v6 copy];
    naturalLightingContext = self->_naturalLightingContext;
    self->_naturalLightingContext = v4;

    os_unfair_recursive_lock_unlock();
    logAndPostNotification(@"HMDHomeNaturalLightingContextUpdatedNotification", self, 0);
  }
}

- (NSArray)mediaSystems
{
  id v2 = [(HMDHome *)self mediaSystemController];
  id v3 = [v2 mediaSystems];

  return (NSArray *)v3;
}

- (BOOL)isResidentReachable:(id)a3
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([(HMDHome *)self isCurrentDevicePrimaryResident]
    || ([(HMDHome *)self primaryResident],
        id v5 = objc_claimAutoreleasedReturnValue(),
        int v6 = [v5 isEqual:v4],
        v5,
        v6))
  {
    char v7 = [v4 isReachable];
  }
  else
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v9 = [(HMDHome *)self appleMediaAccessories];
    uint64_t v10 = [v9 countByEnumeratingWithState:&v22 objects:v30 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v23;
      while (2)
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v23 != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = *(void **)(*((void *)&v22 + 1) + 8 * i);
          uint64_t v15 = [v14 device];
          id v16 = [v4 device];
          int v17 = [v15 isEqual:v16];

          if (v17)
          {
            if ([v14 isReachable]) {
              char v7 = 1;
            }
            else {
              char v7 = [v14 isDeviceReachable];
            }

            goto LABEL_4;
          }
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v22 objects:v30 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }

    uint64_t v18 = (void *)MEMORY[0x230FBD990]();
    uint64_t v19 = self;
    int v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      id v21 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v27 = v21;
      __int16 v28 = 2112;
      id v29 = v4;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Could not find matching accessory for resident %@ so assuming unreachable", buf, 0x16u);
    }
    char v7 = 0;
  }
LABEL_4:

  return v7;
}

- (BOOL)isCompanionReachable
{
  id v2 = [(HMDHome *)self homeManager];
  char v3 = [v2 companionReachable];

  return v3;
}

- (HMDDevice)companionDevice
{
  id v2 = [(HMDHome *)self homeManager];
  char v3 = [v2 companionDevice];

  return (HMDDevice *)v3;
}

- (void)_wol_processChangedCharacteristicResponses:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v3 = a3;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        uint64_t v9 = [v8 request];
        uint64_t v10 = [v9 characteristic];

        uint64_t v11 = [v10 accessory];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        id v13 = v12;

        if ([v13 canWakeUpViaWoL])
        {
          id v14 = [v8 request];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();

          id v16 = [v8 error];
          objc_msgSend(v13, "_wol_processReadWriteResponseForCharacteristic:isRead:error:", v10, (v14 == 0) | ((isKindOfClass & 1) == 0), v16);
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v5);
  }
}

- (BOOL)attemptToUpdateThreadNetworkID:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v5 = a3;
  os_unfair_recursive_lock_lock_with_options();
  p_unfilteredThreadNetworkID = (id *)&self->_unfilteredThreadNetworkID;
  char v7 = HMFEqualObjects();
  id v8 = (void *)MEMORY[0x230FBD990]();
  uint64_t v9 = self;
  if (v7)
  {
    HMFGetOSLogHandle();
    uint64_t v10 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      int v16 = 138543618;
      long long v17 = v11;
      __int16 v18 = 2112;
      id v19 = v5;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_DEBUG, "%{public}@unfilteredThreadNetworkID did not change (%@)", (uint8_t *)&v16, 0x16u);
    }
  }
  else
  {
    HMFGetOSLogHandle();
    uint64_t v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      id v14 = *p_unfilteredThreadNetworkID;
      int v16 = 138543874;
      long long v17 = v13;
      __int16 v18 = 2112;
      id v19 = v14;
      __int16 v20 = 2112;
      id v21 = v5;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@unfilteredThreadNetworkID changed: %@ -> %@", (uint8_t *)&v16, 0x20u);
    }
    objc_storeStrong(p_unfilteredThreadNetworkID, a3);
  }
  os_unfair_recursive_lock_unlock();

  return v7 ^ 1;
}

- (NSString)unfilteredThreadNetworkID
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_unfilteredThreadNetworkID;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setThreadNetworkSequenceNumber:(unint64_t)a3
{
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  self->_threadNetworkSequenceNumber = a3;
}

- (unint64_t)threadNetworkSequenceNumber
{
  id v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  return self->_threadNetworkSequenceNumber;
}

- (void)_handleSetHomeManagerAppData:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  [v5 setAppDataWithMessage:v4];
}

- (void)_handleRemoteUserClientCloudShareRepairRequest:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  [v5 handleRemoteUserClientCloudShareRepairRequest:v4];
}

- (void)_handleRemoteUserClientCloudShareRequest:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  [v5 handleRemoteUserClientCloudShareRequest:v4];
}

- (void)handleXPCConnectionInvalidated:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __42__HMDHome_handleXPCConnectionInvalidated___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  uint64_t v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __42__HMDHome_handleXPCConnectionInvalidated___block_invoke(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:@"connection"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  if (v5)
  {
    [*(id *)(a1 + 40) _removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:v5];
    id v6 = [*(id *)(a1 + 40) deviceHomeKitSetupSession];
    char v7 = [v6 clientConnection];
    int v8 = HMFEqualObjects();

    if (v8)
    {
      uint64_t v9 = (void *)MEMORY[0x230FBD990]();
      id v10 = *(id *)(a1 + 40);
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = HMFGetLogIdentifier();
        id v13 = [v5 shortDescription];
        int v19 = 138543618;
        __int16 v20 = v12;
        __int16 v21 = 2112;
        uint64_t v22 = v13;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Client connection %@ is invalidated, removing device HomeKit setup session", (uint8_t *)&v19, 0x16u);
      }
      [*(id *)(a1 + 40) setDeviceHomeKitSetupSession:0];
    }
  }
  else
  {
    id v14 = (void *)MEMORY[0x230FBD990]();
    id v15 = *(id *)(a1 + 40);
    int v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      long long v17 = HMFGetLogIdentifier();
      __int16 v18 = *(void **)(a1 + 32);
      int v19 = 138543618;
      __int16 v20 = v17;
      __int16 v21 = 2112;
      uint64_t v22 = v18;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Received connection invalidated notification, but no connection object was found: %@", (uint8_t *)&v19, 0x16u);
    }
  }
}

- (id)updatePersonManagerSettings:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self personDataManager];
  id v6 = [v5 updateSettingsModelWithSettings:v4];

  return v6;
}

- (HMDHomePersonManager)personManager
{
  id v2 = [(HMDHome *)self personDataManager];
  id v3 = [v2 personManager];

  return (HMDHomePersonManager *)v3;
}

- (void)setPersonManagerSettings:(id)a3
{
  id v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ([(HMHomePersonManagerSettings *)self->_personManagerSettings isEqual:v6])
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    id v4 = (HMHomePersonManagerSettings *)[v6 copy];
    personManagerSettings = self->_personManagerSettings;
    self->_personManagerSettings = v4;

    os_unfair_recursive_lock_unlock();
    logAndPostNotification(@"HMDHomePersonManagerSettingsDidChangeNotification", self, 0);
  }
}

- (HMHomePersonManagerSettings)personManagerSettings
{
  os_unfair_recursive_lock_lock_with_options();
  personManagerSettings = self->_personManagerSettings;
  if (personManagerSettings) {
    id v4 = personManagerSettings;
  }
  else {
    id v4 = (HMHomePersonManagerSettings *)objc_alloc_init(MEMORY[0x263F0E3D8]);
  }
  id v5 = v4;
  os_unfair_recursive_lock_unlock();
  return v5;
}

- (void)_removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:(id)a3
{
  id v7 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ([(NSHashTable *)self->_connectionsDiscoveringSymptomsForNearbyDevices containsObject:v7])
  {
    [(NSHashTable *)self->_connectionsDiscoveringSymptomsForNearbyDevices removeObject:v7];
    NSUInteger v4 = [(NSHashTable *)self->_connectionsDiscoveringSymptomsForNearbyDevices count];
    os_unfair_recursive_lock_unlock();
    if (!v4)
    {
      id v5 = +[HMDMainDriver driver];
      id v6 = [v5 symptomManager];
      [v6 stopDiscoveringSymptomsRequiringNearbyInfo];
    }
  }
  else
  {
    os_unfair_recursive_lock_unlock();
  }
}

- (void)_handleStopDiscoveringSymptomsForNearbyDevicesMessage:(id)a3
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([(HMDHome *)self _ensureDevicesSymptomDiscoveryMessageCanBeHandled:v4])
  {
    id v5 = [v4 transport];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v6 = v5;
    }
    else {
      id v6 = 0;
    }
    id v7 = v6;

    if (v7)
    {
      [(HMDHome *)self _removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:v7];
    }
    else
    {
      int v8 = (void *)MEMORY[0x230FBD990]();
      uint64_t v9 = self;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        int v12 = 138543362;
        id v13 = v11;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Asked to stop discovering symptoms, but no connection proxy was available", (uint8_t *)&v12, 0xCu);
      }
    }
    [v4 respondWithPayload:0];
  }
}

- (void)_handleStartDiscoveringSymptomsForNearbyDevicesMessage:(id)a3
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([(HMDHome *)self _ensureDevicesSymptomDiscoveryMessageCanBeHandled:v4])
  {
    id v5 = [v4 transport];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v6 = v5;
    }
    else {
      id v6 = 0;
    }
    id v7 = v6;

    if (v7)
    {
      os_unfair_recursive_lock_lock_with_options();
      if ([(NSHashTable *)self->_connectionsDiscoveringSymptomsForNearbyDevices containsObject:v7])
      {
        os_unfair_recursive_lock_unlock();
      }
      else
      {
        [(NSHashTable *)self->_connectionsDiscoveringSymptomsForNearbyDevices addObject:v7];
        NSUInteger v12 = [(NSHashTable *)self->_connectionsDiscoveringSymptomsForNearbyDevices count];
        os_unfair_recursive_lock_unlock();
        if (v12 == 1)
        {
          id v13 = +[HMDMainDriver driver];
          uint64_t v14 = [v13 symptomManager];
          [v14 startDiscoveringSymptomsRequiringNearbyInfo];
        }
      }
    }
    else
    {
      int v8 = (void *)MEMORY[0x230FBD990]();
      uint64_t v9 = self;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        int v15 = 138543362;
        int v16 = v11;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Asked to start discovering symptoms, but no connection proxy was available", (uint8_t *)&v15, 0xCu);
      }
    }
    [v4 respondWithPayload:0];
  }
}

- (BOOL)_ensureDevicesSymptomDiscoveryMessageCanBeHandled:(id)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([v4 isEntitledForSPIAccess])
  {
    if ([(HMDHome *)self isOwnerUser])
    {
      LOBYTE(v5) = 1;
      goto LABEL_13;
    }
    NSUInteger v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = self;
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      int v15 = HMFGetLogIdentifier();
      int v18 = 138543362;
      int v19 = v15;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Only owners may start discovering symptoms for nearby devices", (uint8_t *)&v18, 0xCu);
    }
    id v5 = [v4 responseHandler];

    if (v5)
    {
      id v10 = (void *)MEMORY[0x263F087E8];
      uint64_t v11 = 17;
      goto LABEL_12;
    }
  }
  else
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = self;
    int v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      int v18 = 138543362;
      int v19 = v9;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Only entitled clients may stop discovering symptoms for nearby devices", (uint8_t *)&v18, 0xCu);
    }
    id v5 = [v4 responseHandler];

    if (v5)
    {
      id v10 = (void *)MEMORY[0x263F087E8];
      uint64_t v11 = 10;
LABEL_12:
      id v5 = [v10 hmErrorWithCode:v11];
      int v16 = [v4 responseHandler];
      ((void (**)(void, void *, void))v16)[2](v16, v5, 0);

      LOBYTE(v5) = 0;
    }
  }
LABEL_13:

  return (char)v5;
}

- (void)mediaSystemController:(id)a3 didRemoveMediaSystem:(id)a4
{
  id v5 = a4;
  id v7 = [(HMDHome *)self homeManager];
  id v6 = [v7 lastEventStoreController];
  [v6 didRemoveMediaSystem:v5];
}

- (void)mediaSystemController:(id)a3 removeAccessories:(id)a4 fromAssistantAccessControl:(id)a5
{
  id v11 = a4;
  id v7 = a5;
  int v8 = [(HMDHome *)self currentUser];
  int v9 = [v8 isEqual:v7];

  if (v9)
  {
    id v10 = [(HMDHome *)self currentUser];
    [v10 removeAccessoriesFromAssistantAccessControlList:v11];
  }
}

- (id)mediaSystemController:(id)a3 accessoryForUUID:(id)a4
{
  id v5 = a4;
  id v6 = [(HMDHome *)self accessories];
  id v7 = objc_msgSend(v6, "hmf_firstObjectWithUUID:", v5);

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  id v9 = v8;

  return v9;
}

- (id)destinationForMediaSystem:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self mediaGroupsAggregateConsumer];
  id v6 = [v4 uuid];

  id v7 = [v5 destinationWithParentIdentifier:v6];

  return v7;
}

- (void)userAssistantAccessControlDidUpdate:(id)a3 accessories:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  int v8 = [(HMDHome *)self currentUser];
  int v9 = [v8 isEqual:v6];

  if (v9)
  {
    id v10 = [(HMDHome *)self workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __59__HMDHome_userAssistantAccessControlDidUpdate_accessories___block_invoke;
    block[3] = &unk_264A2F2F8;
    block[4] = self;
    id v12 = v6;
    id v13 = v7;
    dispatch_async(v10, block);
  }
}

void __59__HMDHome_userAssistantAccessControlDidUpdate_accessories___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mediaSystemController];
  [v2 _userAssistantAccessControlDidUpdate:*(void *)(a1 + 40) accessories:*(void *)(a1 + 48)];
}

- (NSArray)cameraAccessories
{
  id v2 = [(HMDHome *)self accessories];
  id v3 = objc_msgSend(v2, "na_map:", &__block_literal_global_2199);

  return (NSArray *)v3;
}

id __28__HMDHome_cameraAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  id v5 = [v4 cameraProfiles];
  uint64_t v6 = [v5 count];

  if (v6) {
    id v7 = v4;
  }
  else {
    id v7 = 0;
  }

  return v7;
}

- (NSArray)hapAccessoriesForLegacyDataBlobEncoding
{
  id v2 = [(HMDHome *)self hapAccessories];
  id v3 = objc_msgSend(v2, "na_filter:", &__block_literal_global_2197);

  return (NSArray *)v3;
}

uint64_t __50__HMDHome_hapAccessoriesForLegacyDataBlobEncoding__block_invoke()
{
  return 1;
}

- (NSArray)nativeMatterAccessories
{
  id v2 = [(HMDHome *)self accessories];
  id v3 = objc_msgSend(v2, "na_map:", &__block_literal_global_2195);

  return (NSArray *)v3;
}

id __34__HMDHome_nativeMatterAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 conformsToProtocol:&unk_26E4FFCC0]) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  id v5 = 0;
  if ([v4 supportsCHIP])
  {
    id v6 = v4;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v7 = v6;
    }
    else {
      id v7 = 0;
    }
    id v5 = v7;
  }
  return v5;
}

- (NSArray)matterAccessories
{
  id v2 = [(HMDHome *)self accessories];
  id v3 = objc_msgSend(v2, "na_map:", &__block_literal_global_2064);

  return (NSArray *)v3;
}

id __28__HMDHome_matterAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 conformsToProtocol:&unk_26E4FFCC0]) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  char v6 = [v5 supportsCHIP];
  if ((v6 & 1) != 0
    || ([v5 matterNodeID],
        id v2 = objc_claimAutoreleasedReturnValue(),
        [v2 unsignedIntValue]))
  {
    id v7 = v5;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      int v8 = v7;
    }
    else {
      int v8 = 0;
    }
    id v9 = v8;

    if (v6) {
      goto LABEL_13;
    }
  }
  else
  {
    id v9 = 0;
  }

LABEL_13:
  return v9;
}

- (NSArray)hapAccessories
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v2 = [(HMDHome *)self accessories];
  id v3 = (void *)[v2 copy];

  id v4 = objc_msgSend(objc_alloc(MEMORY[0x263EFF980]), "initWithCapacity:", objc_msgSend(v3, "count"));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(id *)(*((void *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v11 = v10;
        }
        else {
          id v11 = 0;
        }
        id v12 = v11;

        if (v12) {
          objc_msgSend(v4, "addObject:", v12, (void)v15);
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v7);
  }

  id v13 = (void *)[v4 copy];
  return (NSArray *)v13;
}

- (void)_handleMediaPropertiesWrite:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 source];
  uint64_t v6 = [v4 dictionaryForKey:@"kMediaPropertiesListKey"];
  objc_initWeak(&location, self);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __39__HMDHome__handleMediaPropertiesWrite___block_invoke;
  v8[3] = &unk_264A20778;
  objc_copyWeak(&v10, &location);
  id v7 = v4;
  id v9 = v7;
  [(HMDHome *)self _handleWriteMediaProperties:v6 source:v5 requestMessage:v7 completionHandler:v8];

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void __39__HMDHome__handleMediaPropertiesWrite___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      int v11 = 138543618;
      id v12 = v8;
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Responding to media write with %@", (uint8_t *)&v11, 0x16u);
    }
    id v9 = [*(id *)(a1 + 32) responseHandler];
    ((void (**)(void, void, id))v9)[2](v9, 0, v3);
  }
  else
  {
    id v9 = [*(id *)(a1 + 32) responseHandler];
    id v10 = [MEMORY[0x263F087E8] hmErrorWithCode:4];
    ((void (**)(void, void *, void))v9)[2](v9, v10, 0);
  }
}

- (void)_handleWriteMediaProperties:(id)a3 source:(unint64_t)a4 requestMessage:(id)a5 completionHandler:(id)a6
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v33 = a5;
  id v34 = a6;
  __int16 v41 = v8;
  id v40 = objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(v8, "count"));
  group = dispatch_group_create();
  objc_initWeak(&location, self);
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id v9 = [v8 allKeys];
  uint64_t v10 = [v9 countByEnumeratingWithState:&v51 objects:v62 count:16];
  if (v10)
  {
    uint64_t v39 = *(void *)v52;
    obuint64_t j = v9;
    do
    {
      uint64_t v42 = v10;
      for (uint64_t i = 0; i != v42; ++i)
      {
        if (*(void *)v52 != v39) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void *)(*((void *)&v51 + 1) + 8 * i);
        __int16 v13 = objc_msgSend(objc_alloc(MEMORY[0x263F08C38]), "initWithUUIDString:", v12, v33);
        id v14 = [(HMDHome *)self mediaProfileWithUUID:v13];
        uint64_t v15 = objc_msgSend(v41, "hmf_dictionaryForKey:", v12);
        long long v16 = +[HMDMediaPropertyWriteRequest deserializeWriteRequests:v15 mediaProfile:v14];
        if ([v16 count])
        {
          long long v17 = [v14 mediaSession];
          if (v17)
          {
            dispatch_group_enter(group);
            v47[0] = MEMORY[0x263EF8330];
            v47[1] = 3221225472;
            v47[2] = __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke;
            v47[3] = &unk_264A29D20;
            objc_copyWeak(&v50, &location);
            id v48 = v40;
            long long v49 = group;
            [v17 writeProperties:v16 completion:v47];

            objc_destroyWeak(&v50);
          }
          else
          {
            uint64_t v20 = (void *)MEMORY[0x230FBD990]();
            __int16 v21 = self;
            HMFGetOSLogHandle();
            uint64_t v22 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              log = v22;
              uint64_t v36 = v20;
              HMFGetLogIdentifier();
              id v23 = (id)objc_claimAutoreleasedReturnValue();
              long long v24 = [v14 accessory];
              long long v25 = [v24 name];
              *(_DWORD *)buf = 138543874;
              id v57 = v23;
              __int16 v58 = 2112;
              long long v59 = v25;
              __int16 v60 = 2112;
              uint64_t v61 = v12;
              uint64_t v26 = v23;
              uint64_t v22 = log;
              _os_log_impl(&dword_22F52A000, log, OS_LOG_TYPE_INFO, "%{public}@Accessory with media profile %@/%@ not reachable for writing", buf, 0x20u);

              uint64_t v20 = v36;
            }

            __int16 v27 = [MEMORY[0x263F087E8] hmErrorWithCode:4];
            __int16 v28 = +[HMDMediaPropertyResponse propertyResponsesFromRequests:v16 error:v27];
            id v29 = +[HMDMediaPropertyResponse serializeResponses:v28];
            [v40 addEntriesFromDictionary:v29];

            long long v17 = 0;
          }
        }
        else
        {
          long long v17 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
          long long v18 = +[HMDMediaPropertyResponse propertyResponsesFromRequests:v16 error:v17];
          int v19 = +[HMDMediaPropertyResponse serializeResponses:v18];
          [v40 addEntriesFromDictionary:v19];
        }
      }
      id v9 = obj;
      uint64_t v10 = [obj countByEnumeratingWithState:&v51 objects:v62 count:16];
    }
    while (v10);
  }

  uint64_t v30 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_3;
  block[3] = &unk_264A2F870;
  id v45 = v40;
  id v46 = v34;
  id v31 = v40;
  id v32 = v34;
  dispatch_group_notify(group, v30, block);

  objc_destroyWeak(&location);
}

void __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_2;
    block[3] = &unk_264A2F2F8;
    id v8 = a1[4];
    id v9 = v3;
    id v10 = a1[5];
    dispatch_async(v6, block);
  }
}

void __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)[*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_2(void *a1)
{
  id v2 = (void *)a1[4];
  id v3 = +[HMDMediaPropertyResponse serializeResponses:a1[5]];
  [v2 addEntriesFromDictionary:v3];

  id v4 = a1[6];
  dispatch_group_leave(v4);
}

- (void)redispatchMediaWriteRequests:(id)a3 viaDevice:(id)a4 completion:(id)a5
{
  v27[1] = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v19 = a4;
  id v9 = a5;
  id v10 = +[HMDMediaPropertyWriteRequest serializeWriteRequests:v8];
  if ([v10 count])
  {
    int v11 = [(HMDHome *)self uuid];
    uint64_t v12 = [v11 UUIDString];

    v25[0] = @"kMediaPropertiesListKey";
    v25[1] = @"kHomeUUID";
    v26[0] = v10;
    v26[1] = v12;
    __int16 v13 = [NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:2];
    id v14 = (void *)MEMORY[0x263F42590];
    uint64_t v15 = [(HMDHome *)self messageDestination];
    long long v16 = [v14 messageWithName:@"kMediaPropertiesWriteRequestKey" qualityOfService:25 destination:v15 payload:v13];

    objc_initWeak(&location, self);
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 3221225472;
    v20[2] = __61__HMDHome_redispatchMediaWriteRequests_viaDevice_completion___block_invoke;
    v20[3] = &unk_264A2B560;
    objc_copyWeak(&v23, &location);
    id v22 = v9;
    id v21 = v8;
    [v16 setResponseHandler:v20];
    long long v17 = [(HMDHome *)self uuid];
    long long v18 = [(HMDHome *)self workQueue];
    [(HMDHome *)self redispatchToResidentMessage:v16 target:v17 responseQueue:v18 viaDevice:v19];

    objc_destroyWeak(&v23);
    objc_destroyWeak(&location);
LABEL_5:

    goto LABEL_6;
  }
  if (v9)
  {
    uint64_t v12 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    __int16 v13 = +[HMDMediaPropertyResponse propertyResponsesFromRequests:v8 error:v12];
    v27[0] = v13;
    long long v16 = [MEMORY[0x263EFF8C0] arrayWithObjects:v27 count:1];
    (*((void (**)(id, void *))v9 + 2))(v9, v16);
    goto LABEL_5;
  }
LABEL_6:
}

void __61__HMDHome_redispatchMediaWriteRequests_viaDevice_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  v12[1] = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (v5)
    {
      if (v8)
      {
        id v9 = +[HMDMediaPropertyResponse propertyResponsesFromRequests:*(void *)(a1 + 32) error:v5];
        uint64_t v10 = *(void *)(a1 + 40);
        v12[0] = v9;
        int v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:v12 count:1];
        (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);

LABEL_7:
      }
    }
    else if (v8)
    {
      id v9 = +[HMDMediaPropertyResponse responsesFromSerializedResponse:v6 requests:*(void *)(a1 + 32) home:WeakRetained];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      goto LABEL_7;
    }
  }
}

- (void)_handleMediaPropertiesRead:(id)a3
{
  location[3] = *(id *)MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 dictionaryForKey:@"kMediaPropertiesListKey"];
  if ([v5 count])
  {
    uint64_t v6 = [v4 source];
    objc_initWeak(location, self);
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    void v12[2] = __38__HMDHome__handleMediaPropertiesRead___block_invoke;
    v12[3] = &unk_264A20778;
    objc_copyWeak(&v14, location);
    id v13 = v4;
    [(HMDHome *)self _handleReadMediaProperties:v5 source:v6 message:v13 completionHandler:v12];

    objc_destroyWeak(&v14);
    objc_destroyWeak(location);
  }
  else
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    uint64_t v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v10;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@None of the properties in media properties read are valid", (uint8_t *)location, 0xCu);
    }
    int v11 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v4 respondWithError:v11];
  }
}

void __38__HMDHome__handleMediaPropertiesRead___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      int v11 = 138543618;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Responding to media read with %@", (uint8_t *)&v11, 0x16u);
    }
    [*(id *)(a1 + 32) respondWithPayload:v3];
  }
  else
  {
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v9 respondWithError:v10];
  }
}

- (void)_handleReadMediaProperties:(id)a3 source:(unint64_t)a4 message:(id)a5 completionHandler:(id)a6
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v68 = a5;
  id v69 = a6;
  group = dispatch_group_create();
  id v75 = v8;
  v72 = objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(v8, "count"));
  objc_initWeak(&location, self);
  long long v106 = 0u;
  long long v107 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  obuint64_t j = [v8 allKeys];
  uint64_t v78 = [obj countByEnumeratingWithState:&v104 objects:v113 count:16];
  if (v78)
  {
    uint64_t v77 = *(void *)v105;
    uint64_t v92 = *MEMORY[0x263F0D180];
    uint64_t v91 = *MEMORY[0x263F0D1A8];
    uint64_t v90 = *MEMORY[0x263F0D200];
    uint64_t v89 = *MEMORY[0x263F0D1D0];
    uint64_t v86 = *MEMORY[0x263F0D220];
    uint64_t v83 = *MEMORY[0x263F0D190];
    uint64_t v79 = *MEMORY[0x263F0D210];
    do
    {
      uint64_t v87 = 0;
      do
      {
        if (*(void *)v105 != v77) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v104 + 1) + 8 * v87);
        uint64_t v85 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v9];
        v88 = -[HMDHome mediaProfileWithUUID:](self, "mediaProfileWithUUID:");
        if (v88)
        {
          id v81 = objc_msgSend(v75, "hmf_arrayForKey:", v9);
          uint64_t v10 = +[HMDMediaPropertyRequest deserializeReadRequests:mediaProfile:](HMDMediaPropertyRequest, "deserializeReadRequests:mediaProfile:");
          if (![v10 count]) {
            goto LABEL_53;
          }
          id v82 = [v88 mediaSession];
          int v11 = [v88 accessory];
          id v80 = v10;
          id v76 = v11;
          if (v11)
          {
            uint64_t v12 = [v11 identifier];
            id v13 = [(HMDHome *)self mediaSessionStateWithIdentifier:v12];

            if (!v82 && v13)
            {
              if ([(HMDHome *)self isCurrentDevicePrimaryResident])
              {
                id v14 = (void *)MEMORY[0x230FBD990]();
                char v71 = self;
                HMFGetOSLogHandle();
                uint64_t v15 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  id v16 = (id)objc_claimAutoreleasedReturnValue();
                  long long v17 = [v88 accessory];
                  long long v18 = [v17 name];
                  *(_DWORD *)buf = 138543874;
                  id v115 = v16;
                  __int16 v116 = 2112;
                  v117 = v18;
                  __int16 v118 = 2112;
                  uint64_t v119 = v9;
                  _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory with media profile %@/%@ has no session, returning local state", buf, 0x20u);
                }
                id v13 = v13;
                id v19 = v80;
                id v70 = v19;
                if (self)
                {
                  uint64_t v20 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v19, "count"));
                  id v21 = [MEMORY[0x263EFF910] now];
                  long long v111 = 0u;
                  long long v112 = 0u;
                  long long v109 = 0u;
                  long long v110 = 0u;
                  id v22 = v70;
                  uint64_t v23 = [v22 countByEnumeratingWithState:&v109 objects:buf count:16];
                  if (!v23) {
                    goto LABEL_42;
                  }
                  uint64_t v24 = *(void *)v110;
                  while (1)
                  {
                    for (uint64_t i = 0; i != v23; ++i)
                    {
                      if (*(void *)v110 != v24) {
                        objc_enumerationMutation(v22);
                      }
                      uint64_t v26 = *(void **)(*((void *)&v109 + 1) + 8 * i);
                      __int16 v27 = [v26 property];
                      int v28 = [v27 isEqualToString:v92];

                      if (v28)
                      {
                        id v29 = [v13 sessionIdentifier];
                        uint64_t v30 = +[HMDMediaPropertyResponse responseWithRequest:v26 value:v29 updatedTime:v21];
                        goto LABEL_38;
                      }
                      id v31 = [v26 property];
                      int v32 = [v31 isEqualToString:v91];

                      if (v32)
                      {
                        id v29 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v13, "playbackState"));
                        uint64_t v30 = +[HMDMediaPropertyResponse responseWithRequest:v26 value:v29 updatedTime:v21];
                        goto LABEL_38;
                      }
                      id v33 = [v26 property];
                      int v34 = [v33 isEqualToString:v90];

                      if (v34)
                      {
                        id v29 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v13, "shuffleState"));
                        uint64_t v30 = +[HMDMediaPropertyResponse responseWithRequest:v26 value:v29 updatedTime:v21];
                        goto LABEL_38;
                      }
                      id v35 = [v26 property];
                      int v36 = [v35 isEqualToString:v89];

                      if (v36)
                      {
                        id v29 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v13, "repeatState"));
                        uint64_t v30 = +[HMDMediaPropertyResponse responseWithRequest:v26 value:v29 updatedTime:v21];
                        goto LABEL_38;
                      }
                      long long v37 = [v26 property];
                      if ([v37 isEqualToString:v86])
                      {
                        id v38 = [v13 volume];
                        BOOL v39 = v38 == 0;

                        if (!v39)
                        {
                          id v29 = [v13 volume];
                          uint64_t v30 = +[HMDMediaPropertyResponse responseWithRequest:v26 value:v29 updatedTime:v21];
                          goto LABEL_38;
                        }
                      }
                      else
                      {
                      }
                      id v40 = [v26 property];
                      if ([v40 isEqualToString:v83])
                      {
                        __int16 v41 = [v13 mediaUniqueIdentifier];
                        BOOL v42 = v41 == 0;

                        if (!v42)
                        {
                          id v29 = [v13 mediaUniqueIdentifier];
                          uint64_t v30 = +[HMDMediaPropertyResponse responseWithRequest:v26 value:v29 updatedTime:v21];
                          goto LABEL_38;
                        }
                      }
                      else
                      {
                      }
                      __int16 v43 = [v26 property];
                      int v44 = [v43 isEqualToString:v79];

                      if (!v44) {
                        continue;
                      }
                      id v29 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v13, "sleepWakeState"));
                      uint64_t v30 = +[HMDMediaPropertyResponse responseWithRequest:v26 value:v29 updatedTime:v21];
LABEL_38:
                      id v45 = (void *)v30;

                      if (v45)
                      {
                        [v20 addObject:v45];
                      }
                    }
                    uint64_t v23 = [v22 countByEnumeratingWithState:&v109 objects:buf count:16];
                    if (!v23)
                    {
LABEL_42:

                      id v46 = (void *)[v20 copy];
                      goto LABEL_43;
                    }
                  }
                }
                id v46 = 0;
LABEL_43:

                dispatch_group_enter(group);
                id v47 = [(HMDHome *)v71 workQueue];
                block[0] = MEMORY[0x263EF8330];
                block[1] = 3221225472;
                block[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke;
                block[3] = &unk_264A2F2F8;
                id v101 = v72;
                id v102 = v46;
                uint64_t v103 = group;
                id v48 = v46;
                dispatch_async(v47, block);

LABEL_52:
                uint64_t v10 = v80;
LABEL_53:

                goto LABEL_54;
              }
LABEL_49:
              uint64_t v55 = (void *)MEMORY[0x230FBD990]();
              __int16 v56 = self;
              HMFGetOSLogHandle();
              id v57 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                id v58 = (id)objc_claimAutoreleasedReturnValue();
                long long v59 = [v88 accessory];
                __int16 v60 = [v59 name];
                *(_DWORD *)buf = 138543874;
                id v115 = v58;
                __int16 v116 = 2112;
                v117 = v60;
                __int16 v118 = 2112;
                uint64_t v119 = v9;
                _os_log_impl(&dword_22F52A000, v57, OS_LOG_TYPE_INFO, "%{public}@Accessory with media profile %@/%@ not reachable for reading", buf, 0x20u);
              }
              uint64_t v61 = [MEMORY[0x263F087E8] hmErrorWithCode:4];
              long long v62 = +[HMDMediaPropertyResponse propertyResponsesFromRequests:v80 error:v61];
              uint64_t v63 = +[HMDMediaPropertyResponse serializeResponses:v62];
              [v72 addEntriesFromDictionary:v63];

              goto LABEL_52;
            }
          }
          else
          {
            id v13 = 0;
          }
          if (v82)
          {
            dispatch_group_enter(group);
            long long v49 = (void *)MEMORY[0x230FBD990]();
            id v50 = self;
            HMFGetOSLogHandle();
            long long v51 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v52 = (id)objc_claimAutoreleasedReturnValue();
              long long v53 = [v88 accessory];
              long long v54 = [v53 name];
              *(_DWORD *)buf = 138544130;
              id v115 = v52;
              __int16 v116 = 2112;
              v117 = v54;
              __int16 v118 = 2112;
              uint64_t v119 = v9;
              __int16 v120 = 2112;
              v121 = v82;
              _os_log_impl(&dword_22F52A000, v51, OS_LOG_TYPE_INFO, "%{public}@Reading state for accessory with media profile %@/%@ from media session: %@", buf, 0x2Au);
            }
            v96[0] = MEMORY[0x263EF8330];
            v96[1] = 3221225472;
            v96[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_2060;
            v96[3] = &unk_264A29D20;
            objc_copyWeak(&v99, &location);
            __int16 v97 = group;
            id v98 = v72;
            [v82 readProperties:v80 completion:v96];

            objc_destroyWeak(&v99);
            goto LABEL_52;
          }
          goto LABEL_49;
        }
LABEL_54:

        ++v87;
      }
      while (v87 != v78);
      uint64_t v64 = [obj countByEnumeratingWithState:&v104 objects:v113 count:16];
      uint64_t v78 = v64;
    }
    while (v64);
  }

  id v65 = [(HMDHome *)self workQueue];
  v93[0] = MEMORY[0x263EF8330];
  v93[1] = 3221225472;
  v93[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_3;
  v93[3] = &unk_264A2F870;
  id v94 = v72;
  id v95 = v69;
  id v66 = v72;
  id v67 = v69;
  dispatch_group_notify(group, v65, v93);

  objc_destroyWeak(&location);
}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke(void *a1)
{
  id v2 = (void *)a1[4];
  id v3 = +[HMDMediaPropertyResponse serializeResponses:a1[5]];
  [v2 addEntriesFromDictionary:v3];

  id v4 = a1[6];
  dispatch_group_leave(v4);
}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_2060(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_2;
    block[3] = &unk_264A2F2F8;
    id v8 = a1[5];
    id v9 = v3;
    id v10 = a1[4];
    dispatch_async(v6, block);
  }
  else
  {
    dispatch_group_leave((dispatch_group_t)a1[4]);
  }
}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)[*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_2(void *a1)
{
  id v2 = (void *)a1[4];
  id v3 = +[HMDMediaPropertyResponse serializeResponses:a1[5]];
  [v2 addEntriesFromDictionary:v3];

  id v4 = a1[6];
  dispatch_group_leave(v4);
}

- (void)redispatchMediaReadRequests:(id)a3 viaDevice:(id)a4 completion:(id)a5
{
  v27[1] = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v19 = a4;
  id v9 = a5;
  id v10 = +[HMDMediaPropertyRequest serializeReadRequests:v8];
  if ([v10 count])
  {
    int v11 = [(HMDHome *)self uuid];
    uint64_t v12 = [v11 UUIDString];

    v25[0] = @"kMediaPropertiesListKey";
    v25[1] = @"kHomeUUID";
    v26[0] = v10;
    v26[1] = v12;
    id v13 = [NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:2];
    id v14 = (void *)MEMORY[0x263F42590];
    uint64_t v15 = [(HMDHome *)self messageDestination];
    id v16 = [v14 messageWithName:@"kMediaPropertiesReadRequestKey" qualityOfService:33 destination:v15 payload:v13];

    objc_initWeak(&location, self);
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 3221225472;
    v20[2] = __60__HMDHome_redispatchMediaReadRequests_viaDevice_completion___block_invoke;
    v20[3] = &unk_264A2B560;
    objc_copyWeak(&v23, &location);
    id v22 = v9;
    id v21 = v8;
    [v16 setResponseHandler:v20];
    long long v17 = [(HMDHome *)self uuid];
    long long v18 = [(HMDHome *)self workQueue];
    [(HMDHome *)self redispatchToResidentMessage:v16 target:v17 responseQueue:v18 viaDevice:v19];

    objc_destroyWeak(&v23);
    objc_destroyWeak(&location);
LABEL_5:

    goto LABEL_6;
  }
  if (v9)
  {
    uint64_t v12 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    id v13 = +[HMDMediaPropertyResponse propertyResponsesFromRequests:v8 error:v12];
    v27[0] = v13;
    id v16 = [MEMORY[0x263EFF8C0] arrayWithObjects:v27 count:1];
    (*((void (**)(id, void *))v9 + 2))(v9, v16);
    goto LABEL_5;
  }
LABEL_6:
}

void __60__HMDHome_redispatchMediaReadRequests_viaDevice_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  v12[1] = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (v5)
    {
      if (v8)
      {
        id v9 = +[HMDMediaPropertyResponse propertyResponsesFromRequests:*(void *)(a1 + 32) error:v5];
        uint64_t v10 = *(void *)(a1 + 40);
        v12[0] = v9;
        int v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:v12 count:1];
        (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);

LABEL_7:
      }
    }
    else if (v8)
    {
      id v9 = +[HMDMediaPropertyResponse responsesFromSerializedResponse:v6 requests:*(void *)(a1 + 32) home:WeakRetained];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      goto LABEL_7;
    }
  }
}

- (void)removeMediaSessionState:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ([(NSMutableArray *)self->_mediaSessionStates containsObject:v4]) {
    [(NSMutableArray *)self->_mediaSessionStates removeObject:v4];
  }
  os_unfair_recursive_lock_unlock();
}

- (void)addMediaSessionState:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (([(NSMutableArray *)self->_mediaSessionStates containsObject:v4] & 1) == 0) {
    [(NSMutableArray *)self->_mediaSessionStates addObject:v4];
  }
  os_unfair_recursive_lock_unlock();
}

- (id)mediaSessionStateWithIdentifier:(id)a3
{
  id v4 = a3;
  if ([v4 hasPrefix:@"direct://"])
  {
    id v5 = v4;
    id v6 = [v5 substringFromIndex:8];
  }
  else
  {
    id v5 = [NSString stringWithFormat:@"direct://%@", v4];
    id v6 = v4;
  }
  id v7 = v6;
  uint64_t v8 = [(HMDHome *)self mediaSessionStates];
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  void v13[2] = __43__HMDHome_mediaSessionStateWithIdentifier___block_invoke;
  v13[3] = &unk_264A17068;
  id v14 = v5;
  id v15 = v7;
  id v9 = v7;
  id v10 = v5;
  int v11 = objc_msgSend(v8, "na_firstObjectPassingTest:", v13);

  return v11;
}

uint64_t __43__HMDHome_mediaSessionStateWithIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 sessionIdentifier];
  if ([v4 isEqualToString:*(void *)(a1 + 32)])
  {
    uint64_t v5 = 1;
  }
  else
  {
    id v6 = [v3 sessionIdentifier];
    uint64_t v5 = [v6 isEqualToString:*(void *)(a1 + 40)];
  }
  return v5;
}

- (NSArray)mediaSessionStates
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = (void *)[(NSMutableArray *)self->_mediaSessionStates copy];
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (void)removeMediaSession:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ([(NSMutableArray *)self->_mediaSessions containsObject:v4]) {
    [(NSMutableArray *)self->_mediaSessions removeObject:v4];
  }
  os_unfair_recursive_lock_unlock();
}

- (void)addMediaSession:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (([(NSMutableArray *)self->_mediaSessions containsObject:v4] & 1) == 0) {
    [(NSMutableArray *)self->_mediaSessions addObject:v4];
  }
  os_unfair_recursive_lock_unlock();
}

- (id)mediaSessionWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self mediaSessions];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)mediaSessionWithIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self mediaSessions];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithValue:forKeyPath:", v4, @"sessionIdentifier");

  return v6;
}

- (NSArray)mediaSessions
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = (void *)[(NSMutableArray *)self->_mediaSessions copy];
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (id)homeConfigurationModelObjectWithChangeType:(unint64_t)a3
{
  uint64_t v5 = [HMDHomeConfigurationModel alloc];
  id v6 = [(HMDHome *)self homeConfigurationUUID];
  id v7 = [(HMDHome *)self uuid];
  uint64_t v8 = [(HMDBackingStoreModelObject *)v5 initWithObjectChangeType:a3 uuid:v6 parentUUID:v7];

  id v9 = objc_msgSend(NSNumber, "numberWithInteger:", -[HMDHome configurationVersion](self, "configurationVersion"));
  [(HMDHomeConfigurationModel *)v8 setConfigurationVersion:v9];

  return v8;
}

- (id)homeConfigurationUUID
{
  v7[1] = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x263F08C38];
  id v3 = [(HMDHome *)self uuid];
  v7[0] = @"6741775F-2ED4-4DF8-B582-1F64BB3D1C75";
  id v4 = [MEMORY[0x263EFF8C0] arrayWithObjects:v7 count:1];
  uint64_t v5 = objc_msgSend(v2, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v3, 0, v4);

  return v5;
}

- (id)emptyModelObjectWithChangeType:(unint64_t)a3
{
  uint64_t v5 = [HMDHomeModel alloc];
  id v6 = [(HMDHome *)self uuid];
  id v7 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:@"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"];
  uint64_t v8 = [(HMDBackingStoreModelObject *)v5 initWithObjectChangeType:a3 uuid:v6 parentUUID:v7];

  return v8;
}

- (id)modelObjectWithChangeType:(unint64_t)a3 version:(int64_t)a4
{
  id v6 = [(HMDHome *)self emptyModelObjectWithChangeType:a3];
  id v7 = [(HMDHome *)self name];
  [v6 setName:v7];

  uint64_t v8 = [(HMDHome *)self ownerName];
  if (v8)
  {
    id v9 = (void *)v8;
    id v10 = [(HMDHome *)self owner];
    int v11 = [v10 publicKey];

    if (v11)
    {
      uint64_t v12 = [(HMDHome *)self ownerName];
      [v6 setOwnerName:v12];

      id v13 = [(HMDHome *)self owner];
      id v14 = [v13 uuid];
      id v15 = [v14 UUIDString];
      [v6 setOwnerUUID:v15];

      id v16 = [(HMDHome *)self owner];
      long long v17 = [v16 userID];
      [v6 setOwnerUserID:v17];

      long long v18 = [(HMDHome *)self owner];
      id v19 = [v18 publicKey];
      [v6 setOwnerPublicKey:v19];
    }
  }
  uint64_t v20 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome isOwnerUser](self, "isOwnerUser"));
  [v6 setOwned:v20];

  id v21 = [(HMDHome *)self nfcReaderKey];
  [v6 setNfcReaderKey:v21];

  id v22 = [(HMDHome *)self creationDate];

  if (v22)
  {
    id v23 = [(HMDHome *)self creationDate];
    [v6 setCreationDate:v23];
  }
  uint64_t v24 = [(HMDHome *)self firstHAPAccessoryAddedDate];

  if (v24)
  {
    long long v25 = [(HMDHome *)self firstHAPAccessoryAddedDate];
    [v6 setFirstHAPAccessoryAddedDate:v25];
  }
  uint64_t v26 = [(HMDHome *)self roomForEntireHome];
  __int16 v27 = [v26 uuid];
  int v28 = [v27 UUIDString];
  [v6 setDefaultRoomUUID:v28];

  id v29 = [(HMDHome *)self homeLocationHandler];
  uint64_t v30 = [v29 locationData];
  id v31 = encodeRootObject();
  [v6 setHomeLocationData:v31];

  if (a4 >= 4)
  {
    int v32 = [(HMDHome *)self presenceAuthStatus];

    if (v32)
    {
      id v33 = [(HMDHome *)self presenceAuthStatus];
      int v34 = [v33 number];
      [v6 setPresenceAuthorizationStatus:v34];
    }
    id v35 = [(HMDHome *)self presenceComputeStatus];

    if (v35)
    {
      int v36 = [(HMDHome *)self presenceComputeStatus];
      long long v37 = [v36 number];
      [v6 setPresenceComputeStatus:v37];
    }
    id v38 = [(HMDHome *)self sharedHomeSourceVersion];

    if (v38)
    {
      BOOL v39 = [(HMDHome *)self sharedHomeSourceVersion];
      [v6 setSharedHomeSourceVersion:v39];
    }
    id v40 = objc_msgSend(NSNumber, "numberWithInteger:", -[HMDHome protectionMode](self, "protectionMode"));
    [v6 setNetworkProtectionMode:v40];
  }
  if ([(HMDHome *)self isMultiUserEnabled])
  {
    __int16 v41 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome isMultiUserEnabled](self, "isMultiUserEnabled"));
    [v6 setMultiUserEnabled:v41];
  }
  BOOL v42 = [v6 hasAnyUserAcknowledgedCameraRecordingOnboarding];

  if (v42)
  {
    __int16 v43 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome hasAnyUserAcknowledgedCameraRecordingOnboarding](self, "hasAnyUserAcknowledgedCameraRecordingOnboarding"));
    [v6 setHasAnyUserAcknowledgedCameraRecordingOnboarding:v43];
  }
  if ([(HMDHome *)self hasOnboardedForAccessCode])
  {
    int v44 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome hasOnboardedForAccessCode](self, "hasOnboardedForAccessCode"));
    [v6 setHasOnboardedForAccessCode:v44];
  }
  if ([(HMDHome *)self shouldEncodeHasOnboardedForWalletKey])
  {
    id v45 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome hasOnboardedForWalletKey](self, "hasOnboardedForWalletKey"));
    [v6 setHasOnboardedForWalletKey:v45];
  }
  id v46 = [(HMDHome *)self naturalLightingContext];
  if (v46) {
    [v6 setNaturalLightingContext:v46];
  }
  id v47 = [(HMDHome *)self chipStorage];
  [v47 updateHomeModel:v6];

  if (isFeatureMatterLocalFabricConfigEnabled())
  {
    id v48 = [(HMDHome *)self fabric];
    long long v49 = [v48 fabricID];
    [v6 setMatterFabricID:v49];
  }
  id v50 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome soundCheckEnabled](self, "soundCheckEnabled"));
  [v6 setSoundCheckEnabled:v50];

  long long v51 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[HMDHome audioAnalysisClassifierOptions](self, "audioAnalysisClassifierOptions"));
  [v6 setAnalysisOptions:v51];

  id v52 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome didOnboardAudioAnalysis](self, "didOnboardAudioAnalysis"));
  [v6 setDidOnboardAnalysis:v52];

  long long v53 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[HMDHome siriPhraseOptions](self, "siriPhraseOptions"));
  [v6 setSiriPhraseOptions:v53];

  long long v54 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome locationServicesEnabled](self, "locationServicesEnabled"));
  [v6 setLocationServicesEnabled:v54];

  uint64_t v55 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome didOnboardLocationServices](self, "didOnboardLocationServices"));
  [v6 setDidOnboardLocationServices:v55];

  return v6;
}

- (id)modelObjectWithChangeType:(unint64_t)a3
{
  return [(HMDHome *)self modelObjectWithChangeType:a3 version:4];
}

- (id)backingStoreObjects:(int64_t)a3 hh2Migration:(BOOL)a4
{
  BOOL v171 = a4;
  uint64_t v237 = *MEMORY[0x263EF8340];
  id v6 = [MEMORY[0x263EFF980] array];
  id v7 = [(HMDHome *)self modelObjectWithChangeType:1 version:a3];
  [v6 addObject:v7];

  long long v219 = 0u;
  long long v220 = 0u;
  long long v217 = 0u;
  long long v218 = 0u;
  v175 = self;
  uint64_t v8 = [(HMDHome *)self accessories];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v217 objects:v236 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v218;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v218 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v217 + 1) + 8 * i);
        if (a3 <= 3)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            continue;
          }
        }
        id v14 = [v13 backingStoreObjects:a3];
        [v6 addObjectsFromArray:v14];
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v217 objects:v236 count:16];
    }
    while (v10);
  }

  long long v215 = 0u;
  long long v216 = 0u;
  long long v213 = 0u;
  long long v214 = 0u;
  id v15 = [(HMDHome *)v175 actionSets];
  uint64_t v16 = [v15 countByEnumeratingWithState:&v213 objects:v235 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)v214;
    do
    {
      for (uint64_t j = 0; j != v17; ++j)
      {
        if (*(void *)v214 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void **)(*((void *)&v213 + 1) + 8 * j);
        if (a3 <= 1)
        {
          id v21 = (void *)MEMORY[0x263F0E0C8];
          id v22 = [*(id *)(*((void *)&v213 + 1) + 8 * j) type];
          LOBYTE(v21) = [v21 isBuiltinActionSetType:v22];

          if (v21) {
            continue;
          }
        }
        id v23 = [v20 backingStoreObjects:a3];
        [v6 addObjectsFromArray:v23];
      }
      uint64_t v17 = [v15 countByEnumeratingWithState:&v213 objects:v235 count:16];
    }
    while (v17);
  }

  if (a3 >= 3)
  {
    isWatch();
    long long v209 = 0u;
    long long v210 = 0u;
    long long v211 = 0u;
    long long v212 = 0u;
    uint64_t v24 = [(HMDHome *)v175 triggerOwnedActionSets];
    uint64_t v25 = [v24 countByEnumeratingWithState:&v209 objects:v234 count:16];
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v27 = *(void *)v210;
      do
      {
        for (uint64_t k = 0; k != v26; ++k)
        {
          if (*(void *)v210 != v27) {
            objc_enumerationMutation(v24);
          }
          id v29 = [*(id *)(*((void *)&v209 + 1) + 8 * k) backingStoreObjects:a3];
          [v6 addObjectsFromArray:v29];
        }
        uint64_t v26 = [v24 countByEnumeratingWithState:&v209 objects:v234 count:16];
      }
      while (v26);
    }

    long long v207 = 0u;
    long long v208 = 0u;
    long long v205 = 0u;
    long long v206 = 0u;
    uint64_t v30 = [(HMDHome *)v175 triggers];
    uint64_t v31 = [v30 countByEnumeratingWithState:&v205 objects:v233 count:16];
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v33 = *(void *)v206;
      do
      {
        for (uint64_t m = 0; m != v32; ++m)
        {
          if (*(void *)v206 != v33) {
            objc_enumerationMutation(v30);
          }
          id v35 = *(void **)(*((void *)&v205 + 1) + 8 * m);
          char v36 = [v35 requiresDataVersion4];
          if (a3 > 3 || (v36 & 1) == 0)
          {
            long long v37 = [v35 backingStoreObjects:a3];
            [v6 addObjectsFromArray:v37];
          }
        }
        uint64_t v32 = [v30 countByEnumeratingWithState:&v205 objects:v233 count:16];
      }
      while (v32);
    }
  }
  long long v203 = 0u;
  long long v204 = 0u;
  long long v201 = 0u;
  long long v202 = 0u;
  id v38 = [(HMDHome *)v175 rooms];
  uint64_t v39 = [v38 countByEnumeratingWithState:&v201 objects:v232 count:16];
  BOOL v40 = v171;
  if (v39)
  {
    uint64_t v41 = v39;
    uint64_t v42 = *(void *)v202;
    do
    {
      for (uint64_t n = 0; n != v41; ++n)
      {
        if (*(void *)v202 != v42) {
          objc_enumerationMutation(v38);
        }
        int v44 = [*(id *)(*((void *)&v201 + 1) + 8 * n) backingStoreObjects:a3];
        [v6 addObjectsFromArray:v44];
      }
      uint64_t v41 = [v38 countByEnumeratingWithState:&v201 objects:v232 count:16];
    }
    while (v41);
  }

  long long v199 = 0u;
  long long v200 = 0u;
  long long v197 = 0u;
  long long v198 = 0u;
  id v45 = [(HMDHome *)v175 zones];
  uint64_t v46 = [v45 countByEnumeratingWithState:&v197 objects:v231 count:16];
  if (v46)
  {
    uint64_t v47 = v46;
    uint64_t v48 = *(void *)v198;
    do
    {
      for (iuint64_t i = 0; ii != v47; ++ii)
      {
        if (*(void *)v198 != v48) {
          objc_enumerationMutation(v45);
        }
        id v50 = [*(id *)(*((void *)&v197 + 1) + 8 * ii) backingStoreObjects:a3];
        [v6 addObjectsFromArray:v50];
      }
      uint64_t v47 = [v45 countByEnumeratingWithState:&v197 objects:v231 count:16];
    }
    while (v47);
  }

  long long v195 = 0u;
  long long v196 = 0u;
  long long v193 = 0u;
  long long v194 = 0u;
  long long v51 = [(HMDHome *)v175 serviceGroups];
  uint64_t v52 = [v51 countByEnumeratingWithState:&v193 objects:v230 count:16];
  if (v52)
  {
    uint64_t v53 = v52;
    uint64_t v54 = *(void *)v194;
    do
    {
      for (juint64_t j = 0; jj != v53; ++jj)
      {
        if (*(void *)v194 != v54) {
          objc_enumerationMutation(v51);
        }
        __int16 v56 = [*(id *)(*((void *)&v193 + 1) + 8 * jj) backingStoreObjects:a3];
        [v6 addObjectsFromArray:v56];
      }
      uint64_t v53 = [v51 countByEnumeratingWithState:&v193 objects:v230 count:16];
    }
    while (v53);
  }

  long long v191 = 0u;
  long long v192 = 0u;
  long long v189 = 0u;
  long long v190 = 0u;
  id v57 = [(HMDHome *)v175 users];
  uint64_t v58 = [v57 countByEnumeratingWithState:&v189 objects:v229 count:16];
  if (v58)
  {
    uint64_t v59 = v58;
    uint64_t v60 = *(void *)v190;
    obuint64_t j = v57;
    do
    {
      for (kuint64_t k = 0; kk != v59; ++kk)
      {
        if (*(void *)v190 != v60) {
          objc_enumerationMutation(v57);
        }
        long long v62 = *(HMDOutgoingHomeInvitation **)(*((void *)&v189 + 1) + 8 * kk);
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();
        char v64 = isKindOfClass;
        if (a3 > 1 || (isKindOfClass & 1) == 0)
        {
          isWatch();
          if (a3 > 3 || ([(HMDOutgoingHomeInvitation *)v62 requiresMakoSupport] & 1) == 0)
          {
            if (!v40 || ([(HMDOutgoingHomeInvitation *)v62 isOwner] & 1) != 0)
            {
              id v65 = [(HMDOutgoingHomeInvitation *)v62 backingStoreObjects:a3];
              [v6 addObjectsFromArray:v65];

              continue;
            }
            if (v64)
            {
              id v66 = (void *)MEMORY[0x230FBD990]();
              id v67 = v175;
              id v68 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
              {
                id v69 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                v226 = v69;
                __int16 v227 = 2112;
                v228 = v62;
                id v70 = v68;
                char v71 = "%{public}@Skipping resident user [%@] for HH2 migration as it is deprecated in HH2";
                goto LABEL_83;
              }
              goto LABEL_84;
            }
            v72 = [(HMDOutgoingHomeInvitation *)v62 userID];

            if (v72)
            {
              if ([(HMDHome *)v175 nonIPadResidentDeviceCountForHH2Migration])
              {
                v168 = [HMDOutgoingHomeInvitation alloc];
                id v73 = (void *)MEMORY[0x263F08C38];
                v169 = [(HMDOutgoingHomeInvitation *)v62 uuid];
                v224 = @"50690AC3-FD93-4D1F-A677-9369289BB998";
                id v74 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v224 count:1];
                id v75 = objc_msgSend(v73, "hm_deriveUUIDFromBaseUUID:withSalts:", v169, v74);
                id v76 = [(HMDOutgoingHomeInvitation *)v168 initWithUUID:v75 invitee:v62 invitationState:2 forHome:v175 expiryDate:0 messageIdentifier:0];

                uint64_t v77 = v76;
                uint64_t v78 = [(HMDOutgoingHomeInvitation *)v76 modelObjectWithChangeType:1 version:a3];
                [v6 addObject:v78];

                uint64_t v79 = (void *)MEMORY[0x230FBD990]();
                id v80 = v77;
                id v81 = v175;
                id v82 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  uint64_t v83 = v170 = v79;
                  *(_DWORD *)buf = 138543618;
                  v226 = v83;
                  __int16 v227 = 2112;
                  v228 = v80;
                  _os_log_impl(&dword_22F52A000, v82, OS_LOG_TYPE_INFO, "%{public}@Generated re-invite for shared user: %@", buf, 0x16u);

                  uint64_t v79 = v170;
                }

                [(HMDOutgoingHomeInvitation *)v62 setPrivilege:2];
                uint64_t v84 = [(HMDOutgoingHomeInvitation *)v62 backingStoreObjects:a3];
                [v6 addObjectsFromArray:v84];
              }
              else
              {
                uint64_t v85 = (void *)MEMORY[0x230FBD990]();
                uint64_t v86 = v175;
                uint64_t v87 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
                {
                  v88 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138543618;
                  v226 = v88;
                  __int16 v227 = 2112;
                  v228 = v62;
                  _os_log_impl(&dword_22F52A000, v87, OS_LOG_TYPE_INFO, "%{public}@Dropping shared user as there will be no valid resident after migration: %@", buf, 0x16u);
                }
              }
              BOOL v40 = v171;
            }
            else
            {
              id v66 = (void *)MEMORY[0x230FBD990]();
              id v67 = v175;
              id v68 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
              {
                id v69 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                v226 = v69;
                __int16 v227 = 2112;
                v228 = v62;
                id v70 = v68;
                char v71 = "%{public}@Skipping bad user [%@] for HH2 migration, no account handle";
LABEL_83:
                _os_log_impl(&dword_22F52A000, v70, OS_LOG_TYPE_INFO, v71, buf, 0x16u);

                BOOL v40 = v171;
              }
LABEL_84:
            }
            id v57 = obj;
            continue;
          }
        }
      }
      uint64_t v59 = [v57 countByEnumeratingWithState:&v189 objects:v229 count:16];
    }
    while (v59);
  }

  if (a3 >= 2)
  {
    long long v187 = 0u;
    long long v188 = 0u;
    long long v185 = 0u;
    long long v186 = 0u;
    id obja = [(HMDHome *)v175 outgoingInvitations];
    uint64_t v89 = [obja countByEnumeratingWithState:&v185 objects:v223 count:16];
    if (v89)
    {
      uint64_t v90 = v89;
      uint64_t v91 = *(void *)v186;
      do
      {
        for (muint64_t m = 0; mm != v90; ++mm)
        {
          if (*(void *)v186 != v91) {
            objc_enumerationMutation(obja);
          }
          __int16 v93 = *(HMDOutgoingHomeInvitation **)(*((void *)&v185 + 1) + 8 * mm);
          if (a3 <= 3)
          {
            id v94 = [*(id *)(*((void *)&v185 + 1) + 8 * mm) user];
            char v95 = [v94 requiresMakoSupport];

            if (v95) {
              continue;
            }
          }
          if (v40)
          {
            if (![(HMDHome *)v175 nonIPadResidentDeviceCountForHH2Migration])
            {
              id v98 = (void *)MEMORY[0x230FBD990]();
              id v99 = v175;
              v100 = HMFGetOSLogHandle();
              if (!os_log_type_enabled(v100, OS_LOG_TYPE_INFO)) {
                goto LABEL_117;
              }
              id v101 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              v226 = v101;
              __int16 v227 = 2112;
              v228 = v93;
              id v102 = v100;
              uint64_t v103 = "%{public}@Dropping outgoing invite as there will be no valid resident after migration: %@";
LABEL_116:
              _os_log_impl(&dword_22F52A000, v102, OS_LOG_TYPE_INFO, v103, buf, 0x16u);

              goto LABEL_117;
            }
            if ([(HMDHomeInvitation *)v93 invitationState] != 2)
            {
              id v98 = (void *)MEMORY[0x230FBD990]();
              id v99 = v175;
              v100 = HMFGetOSLogHandle();
              if (!os_log_type_enabled(v100, OS_LOG_TYPE_INFO)) {
                goto LABEL_117;
              }
              id v101 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              v226 = v101;
              __int16 v227 = 2112;
              v228 = v93;
              id v102 = v100;
              uint64_t v103 = "%{public}@Dropping outgoing invite as it is in a terminal state: %@";
              goto LABEL_116;
            }
            id v96 = [(HMDHome *)v175 users];
            v184[0] = MEMORY[0x263EF8330];
            v184[1] = 3221225472;
            v184[2] = __44__HMDHome_backingStoreObjects_hh2Migration___block_invoke;
            v184[3] = &unk_264A2DB60;
            v184[4] = v93;
            char v97 = objc_msgSend(v96, "na_any:", v184);

            if (v97)
            {
              id v98 = (void *)MEMORY[0x230FBD990]();
              id v99 = v175;
              v100 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
              {
                id v101 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                v226 = v101;
                __int16 v227 = 2112;
                v228 = v93;
                id v102 = v100;
                uint64_t v103 = "%{public}@Dropping outgoing invite as there is already a matching user in the home: %@";
                goto LABEL_116;
              }
LABEL_117:

              BOOL v40 = v171;
              continue;
            }
          }
          long long v104 = [(HMDOutgoingHomeInvitation *)v93 modelObjectWithChangeType:1 version:a3];
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            long long v105 = v104;
          }
          else {
            long long v105 = 0;
          }
          id v106 = v105;

          if (v106) {
            [v6 addObject:v106];
          }
        }
        uint64_t v90 = [obja countByEnumeratingWithState:&v185 objects:v223 count:16];
      }
      while (v90);
    }

    if (a3 >= 3)
    {
      long long v182 = 0u;
      long long v183 = 0u;
      long long v180 = 0u;
      long long v181 = 0u;
      long long v107 = [(HMDHome *)v175 residentDeviceManager];
      v108 = [v107 residentDevices];

      uint64_t v109 = [v108 countByEnumeratingWithState:&v180 objects:v222 count:16];
      if (v109)
      {
        uint64_t v110 = v109;
        uint64_t v111 = *(void *)v181;
        do
        {
          for (nuint64_t n = 0; nn != v110; ++nn)
          {
            if (*(void *)v181 != v111) {
              objc_enumerationMutation(v108);
            }
            v113 = [*(id *)(*((void *)&v180 + 1) + 8 * nn) modelObjectWithChangeType:1 version:a3];
            [v6 addObject:v113];
          }
          uint64_t v110 = [v108 countByEnumeratingWithState:&v180 objects:v222 count:16];
        }
        while (v110);
      }

      v114 = [(HMDHome *)v175 appData];

      if (v114)
      {
        id v115 = [(HMDHome *)v175 appData];
        __int16 v116 = [v115 modelObjectWithChangeType:1];
        [v6 addObject:v116];
      }
      if (a3 >= 4)
      {
        v117 = [HMDHomeSettingsModel alloc];
        __int16 v118 = [(HMDHome *)v175 uuid];
        uint64_t v119 = +[HMDHomeSettingsModel modelIDForHomeUUID:v118];
        __int16 v120 = [(HMDHome *)v175 uuid];
        v121 = [(HMDBackingStoreModelObject *)v117 initWithObjectChangeType:1 uuid:v119 parentUUID:v120];

        uint64_t v122 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome isAutomaticSoftwareUpdateEnabled](v175, "isAutomaticSoftwareUpdateEnabled"));
        [(HMDHomeSettingsModel *)v121 setAutomaticSoftwareUpdateEnabled:v122];

        v123 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled](v175, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled"));
        [(HMDHomeSettingsModel *)v121 setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:v123];

        [v6 addObject:v121];
        v124 = [HMDHomeMediaSettingsModel alloc];
        v125 = [(HMDHome *)v175 uuid];
        v126 = +[HMDHomeMediaSettingsModel modelIDForHomeUUID:v125];
        v127 = [(HMDHome *)v175 uuid];
        v128 = [(HMDBackingStoreModelObject *)v124 initWithObjectChangeType:1 uuid:v126 parentUUID:v127];

        v129 = objc_msgSend(NSNumber, "numberWithInteger:", -[HMDHome minimumMediaUserPrivilege](v175, "minimumMediaUserPrivilege"));
        [(HMDHomeMediaSettingsModel *)v128 setMinimumMediaUserPrivilege:v129];

        v130 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome isMediaPeerToPeerEnabled](v175, "isMediaPeerToPeerEnabled"));
        [(HMDHomeMediaSettingsModel *)v128 setMediaPeerToPeerEnabled:v130];

        v131 = [(HMDHome *)v175 mediaPassword];
        [(HMDHomeMediaSettingsModel *)v128 setMediaPassword:v131];

        [v6 addObject:v128];
        v132 = [(HMDHome *)v175 mediaSystemController];
        v133 = [v132 backingStoreObjectsForVersion:a3];

        if ([v133 count]) {
          [v6 addObjectsFromArray:v133];
        }
        id objb = v133;
        v134 = [(HMDHome *)v175 uuid];
        v135 = +[HMDHomeNetworkRouterManagingDeviceSettingsModel defaultModelForHomeUUID:v134];

        v136 = [(HMDHome *)v175 primaryNetworkRouterManagingDeviceUUID];
        v137 = [v136 UUIDString];
        [v135 setPrimaryNetworkRouterManagingDeviceUUID:v137];

        [v6 addObject:v135];
        v138 = [(HMDHome *)v175 uuid];
        v139 = +[HMDHomeNetworkRouterSettingsModel defaultModelForHomeUUID:v138];

        v140 = [(HMDHome *)v175 activeNetworkRouterUUID];
        v141 = [v140 UUIDString];
        [v139 setActiveNetworkRouterAccessoryUUID:v141];

        v142 = [[HMDHomeKitVersion alloc] initWithVersionString:@"6.2"];
        uint64_t v143 = [(HMDHome *)v175 minimumNetworkRouterSupportHomeKitVersion];
        if (!v143
          || (v144 = (void *)v143,
              [(HMDHome *)v175 minimumNetworkRouterSupportHomeKitVersion],
              v145 = objc_claimAutoreleasedReturnValue(),
              uint64_t v146 = [v145 compare:v142],
              v145,
              v144,
              v146 == -1))
        {
          v147 = [(HMDHomeKitVersion *)v142 versionString];
          [v139 setMinimumNetworkRouterSupportHomeKitVersion:v147];
        }
        v148 = [(HMDHome *)v175 minHomeKitVersionForAccessoryNetworkProtectionChange];
        v149 = [v148 versionString];
        [v139 setMinHomeKitVersionForAccessoryNetworkProtectionChange:v149];

        [v6 addObject:v139];
        long long v178 = 0u;
        long long v179 = 0u;
        long long v176 = 0u;
        long long v177 = 0u;
        v150 = [(HMDHome *)v175 networkProtectionGroupRegistry];
        v151 = [v150 persistedGroups];

        uint64_t v152 = [v151 countByEnumeratingWithState:&v176 objects:v221 count:16];
        if (v152)
        {
          uint64_t v153 = v152;
          uint64_t v154 = *(void *)v177;
          do
          {
            for (uint64_t i1 = 0; i1 != v153; ++i1)
            {
              if (*(void *)v177 != v154) {
                objc_enumerationMutation(v151);
              }
              v156 = [*(id *)(*((void *)&v176 + 1) + 8 * i1) modelForVersion:a3];
              [v6 addObject:v156];
            }
            uint64_t v153 = [v151 countByEnumeratingWithState:&v176 objects:v221 count:16];
          }
          while (v153);
        }

        v157 = +[HMDHomeThreadNetworkModel defaultModelForHome:v175];
        v158 = [(HMDHome *)v175 unfilteredThreadNetworkID];
        [v157 setThreadNetworkID:v158];

        [v6 addObject:v157];
        v159 = [(HMDHome *)v175 uuid];
        v160 = +[HMDHomePersonManagerSettingsModel defaultModelForHomeUUID:v159];

        v161 = [(HMDHome *)v175 personManagerZoneUUID];
        [v160 setZoneUUID:v161];

        [v6 addObject:v160];
        v162 = [(HMDHome *)v175 labelsByAccessCode];
        v163 = +[HMDAccessCodeDataManager createHomeAccessCodeModelsFromLabelsByAccessCode:v162 forHome:v175];

        [v6 addObjectsFromArray:v163];
        v164 = [(HMDHome *)v175 removedUserInfoByAccessCode];
        v165 = +[HMDAccessCodeDataManager createRemovedUserInfoModelsFromRemovedUserInfoByAccessCode:v164 forHome:v175];

        [v6 addObjectsFromArray:v165];
      }
    }
  }
  id v166 = v6;

  return v166;
}

uint64_t __44__HMDHome_backingStoreObjects_hh2Migration___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 user];
  uint64_t v5 = [v4 isEqual:v3];

  return v5;
}

- (id)backingStoreObjects:(int64_t)a3
{
  return [(HMDHome *)self backingStoreObjects:a3 hh2Migration:0];
}

- (id)sharedHomeModel
{
  id v3 = [HMDSharedHomeModel alloc];
  id v4 = [(HMDHome *)self uuid];
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:@"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"];
  id v6 = [(HMDBackingStoreModelObject *)v3 initWithObjectChangeType:1 uuid:v4 parentUUID:v5];

  id v7 = [(HMDHome *)self homeManager];
  uint64_t v8 = [v7 generateDataForSharedHomeModel:self];
  [(HMDSharedHomeModel *)v6 setHomeData:v8];

  uint64_t v9 = objc_msgSend(NSNumber, "numberWithInteger:", -[HMDHome configurationVersion](self, "configurationVersion"));
  [(HMDSharedHomeModel *)v6 setConfigurationVersion:v9];

  return v6;
}

- (id)deletedBackingStoreObject
{
  id v3 = [(HMDHome *)self homeManager];
  if ([(HMDHome *)self isOwnerUser]) {
    id v4 = HMDHomeModel;
  }
  else {
    id v4 = HMDSharedHomeModel;
  }
  id v5 = [v4 alloc];
  id v6 = [(HMDHome *)self uuid];
  id v7 = [v3 uuid];
  uint64_t v8 = (void *)[v5 initWithObjectChangeType:3 uuid:v6 parentUUID:v7];

  return v8;
}

- (void)transactionObjectRemoved:(id)a3 message:(id)a4
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = v8;
  if (v9)
  {
    id v10 = [(HMDHome *)self residentDeviceManager];
    [v10 transactionObjectRemoved:v6 message:v7];
  }
  else
  {
    id v11 = v6;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    id v10 = v12;

    if (v10)
    {
      id v13 = [(HMDHome *)self accessCodeManager];
      id v14 = [v13 dataManager];

      if (v14)
      {
        [v14 handleRemovedHomeAccessCodeModel:v10 message:v7];
      }
      else
      {
        id v19 = (void *)MEMORY[0x230FBD990]();
        uint64_t v20 = self;
        id v21 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          id v22 = HMFGetLogIdentifier();
          int v30 = 138543362;
          uint64_t v31 = v22;
          _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDHomeAccessCodeModel because self.accessCodeManager.dataManager is nil", (uint8_t *)&v30, 0xCu);
        }
        id v23 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
        [v7 respondWithError:v23];

        id v14 = 0;
      }
    }
    else
    {
      id v15 = v11;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      id v14 = v16;

      if (v14)
      {
        uint64_t v17 = [(HMDHome *)self accessCodeManager];
        uint64_t v18 = [v17 dataManager];

        if (v18)
        {
          [v18 handleRemovedHMDRemovedUserAccessCodeModel:v14 message:v7];
        }
        else
        {
          uint64_t v25 = (void *)MEMORY[0x230FBD990]();
          uint64_t v26 = self;
          uint64_t v27 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            int v28 = HMFGetLogIdentifier();
            int v30 = 138543362;
            uint64_t v31 = v28;
            _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDRemovedUserAccessCodeModel because self.accessCodeManager.dataManager is nil", (uint8_t *)&v30, 0xCu);
          }
          id v29 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
          [v7 respondWithError:v29];
        }
      }
      else
      {
        uint64_t v24 = [(HMDHome *)self homeObjectChangeHandler];
        [v24 handleObjectRemove:v15 message:v7];
      }
    }
  }
}

- (void)transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v11 = v9;
  }
  else {
    id v11 = 0;
  }
  id v12 = v11;
  if (!v12)
  {
    id v14 = v9;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v15 = v14;
    }
    else {
      id v15 = 0;
    }
    id v16 = v15;

    if (v16)
    {
      [(HMDHome *)self updateHomeConfigurationWithModel:v16 message:v10];
LABEL_90:

      goto LABEL_91;
    }
    id v17 = v14;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    id v19 = v18;

    if (v19)
    {
      uint64_t v20 = [(HMDHome *)self residentDeviceManager];
      [v20 transactionObjectUpdated:v8 newValues:v17 message:v10];

LABEL_89:
      goto LABEL_90;
    }
    id v21 = v17;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v22 = v21;
    }
    else {
      id v22 = 0;
    }
    id v23 = v22;

    if (v23)
    {
      uint64_t v24 = [(HMDHome *)self homeManager];
      [v24 transactionObjectUpdated:v8 newValues:v21 message:v10];

LABEL_88:
      goto LABEL_89;
    }
    id v25 = v21;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    id v27 = v26;

    if (v27)
    {
      __transactionHomeSettingsUpdated(self, v27, v10);
      id v23 = 0;
LABEL_87:

      goto LABEL_88;
    }
    id v28 = v25;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v29 = v28;
    }
    else {
      id v29 = 0;
    }
    id v30 = v29;

    if (v30)
    {
      __transactionHomeMediaSettingsUpdated(self, v30, v10);
      id v23 = 0;
LABEL_86:

      id v27 = 0;
      goto LABEL_87;
    }
    id v31 = v28;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    id v33 = v32;

    if (v33)
    {
      [(HMDHome *)self updateNetworkRouterSettingsWithModel:v33 message:v10];
      id v23 = 0;
      id v30 = 0;
LABEL_85:

      goto LABEL_86;
    }
    id v34 = v31;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v35 = v34;
    }
    else {
      id v35 = 0;
    }
    id v36 = v35;

    if (v36)
    {
      [(HMDHome *)self updateNetworkRouterManagingDeviceSettingsWithModel:v36 message:v10];
      id v23 = 0;
      long long v37 = v36;
      id v33 = 0;
      id v30 = 0;
LABEL_84:

      goto LABEL_85;
    }
    id v38 = v34;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = 0;
    }
    id v40 = v39;

    if (v40)
    {
      [(HMDHome *)self _updateThreadNetworkWithModel:v40 message:v10];
      uint64_t v41 = v40;
      id v23 = 0;
      id v33 = 0;
      id v30 = 0;
LABEL_83:

      long long v37 = 0;
      goto LABEL_84;
    }
    id v42 = v38;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      __int16 v43 = v42;
    }
    else {
      __int16 v43 = 0;
    }
    id v44 = v43;

    if (v44)
    {
      id v45 = v8;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v46 = v45;
      }
      else {
        uint64_t v46 = 0;
      }
      id v47 = v46;

      uint64_t v48 = [(HMDHome *)self personDataManager];
      [v48 handleUpdatedSettingsModel:v44 previousSettingsModel:v47 message:v10];

      goto LABEL_82;
    }
    id v49 = v42;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v50 = v49;
    }
    else {
      id v50 = 0;
    }
    id v51 = v50;

    id v74 = v51;
    if (v51)
    {
      uint64_t v52 = [(HMDHome *)self accessCodeManager];
      uint64_t v53 = [v52 dataManager];

      if (v53)
      {
        uint64_t v54 = v53;
        [v53 handleUpdatedHomeAccessCodeModel:v74 message:v10];
LABEL_81:

        id v44 = 0;
LABEL_82:

        id v23 = 0;
        id v33 = 0;
        id v30 = 0;
        uint64_t v41 = 0;
        goto LABEL_83;
      }
      uint64_t v60 = (void *)MEMORY[0x230FBD990]();
      uint64_t v61 = self;
      long long v62 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        uint64_t v63 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v76 = v63;
        _os_log_impl(&dword_22F52A000, v62, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDHomeAccessCodeModel because self.accessCodeManager.dataManager is nil", buf, 0xCu);
      }
      char v64 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
      [v10 respondWithError:v64];
    }
    else
    {
      id v55 = v49;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        __int16 v56 = v55;
      }
      else {
        __int16 v56 = 0;
      }
      id v57 = v56;

      if (v57)
      {
        uint64_t v54 = v57;
        uint64_t v58 = [(HMDHome *)self accessCodeManager];
        uint64_t v59 = [v58 dataManager];

        if (v59)
        {
          [v59 handleUpdatedHMDRemovedUserAccessCodeModel:v54 message:v10];
        }
        else
        {
          context = (void *)MEMORY[0x230FBD990]();
          id v68 = self;
          id v69 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
          {
            v72 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543362;
            id v76 = v72;
            _os_log_impl(&dword_22F52A000, v69, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDRemovedUserAccessCodeModel because self.accessCodeManager.dataManager is nil", buf, 0xCu);
          }
          id v70 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
          [v10 respondWithError:v70];
        }
        goto LABEL_81;
      }
      id v65 = v55;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v66 = v65;
      }
      else {
        id v66 = 0;
      }
      id v67 = v66;

      if (v67)
      {
        [(HMDHome *)self updateROARStatus:v67 message:v10];
        [v10 respondWithSuccess];
      }
      else
      {
        char v71 = [(HMDHome *)self homeObjectChangeHandler];
        [v71 handleObjectUpdate:v8 newValues:v65 message:v10];
      }
    }
    uint64_t v54 = 0;
    goto LABEL_81;
  }
  id v13 = [(HMDHome *)self updateHomeWithModel:v12 message:v10];
LABEL_91:
}

- (void)updateNetworkRouterManagingDeviceSettingsWithModel:(id)a3 message:(id)a4
{
  id v15 = a3;
  id v6 = a4;
  id v7 = [v15 setProperties];
  if ([v7 containsObject:@"primaryNetworkRouterManagingDeviceUUID"])
  {
    id v8 = [(HMDHome *)self primaryNetworkRouterManagingDeviceUUID];
    id v9 = [v8 UUIDString];
    id v10 = [v15 primaryNetworkRouterManagingDeviceUUID];
    char v11 = HMFEqualObjects();

    if (v11) {
      goto LABEL_5;
    }
    id v12 = objc_alloc(MEMORY[0x263F08C38]);
    id v13 = [v15 primaryNetworkRouterManagingDeviceUUID];
    id v7 = (void *)[v12 initWithUUIDString:v13];

    [(HMDHome *)self setPrimaryNetworkRouterManagingDeviceUUID:v7];
    id v14 = [v6 transactionResult];
    [(HMDHome *)self _evaluateNetworkRouterManagementForTransaction:v14];
    [v14 markChanged];
  }
LABEL_5:
  [v6 respondWithPayload:0];
}

- (void)setHomeUpdatedToROARAndInformClients
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if ([(HMDHome *)self isUpdatedToHH2])
  {
    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = self;
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      int v11 = 138543362;
      id v12 = v6;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@isUpdatedToHH2 is already set on this home. Not doing anything.", (uint8_t *)&v11, 0xCu);
    }
  }
  else if (![(HMDHome *)self isUpdatedToHH2])
  {
    id v7 = (void *)MEMORY[0x230FBD990]([(HMDHome *)self setIsUpdatedToHH2:1]);
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      int v11 = 138543362;
      id v12 = v10;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Marked home upgraded to HH2 & informing clients about the status", (uint8_t *)&v11, 0xCu);
    }
    [(HMDHome *)v8 saveWithReason:@"Upgraded To HH2" postSyncNotification:0 objectChange:1];
  }
}

- (void)updateROARStatus:(id)a3 message:(id)a4
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v11 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v16 = v11;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Found ROAR Model : %@", buf, 0x16u);
  }
  id v12 = [v7 transactionResult];
  uint64_t v13 = [(HMDHome *)v9 workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __36__HMDHome_updateROARStatus_message___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = v9;
  dispatch_async(v13, block);

  [v12 markSaveToAssistant];
  [v12 markChanged];
}

uint64_t __36__HMDHome_updateROARStatus_message___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) setHomeUpdatedToROARAndInformClients];
}

- (void)updateNetworkRouterSettingsWithModel:(id)a3 message:(id)a4
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v7 transactionResult];
  id v9 = [v6 setProperties];
  int v10 = [v9 containsObject:@"activeNetworkRouterAccessoryUUID"];

  if (v10)
  {
    id v11 = objc_alloc(MEMORY[0x263F08C38]);
    id v12 = [v6 activeNetworkRouterAccessoryUUID];
    uint64_t v13 = (void *)[v11 initWithUUIDString:v12];

    id v14 = [(HMDHome *)self activeNetworkRouterUUID];
    int v15 = HMFEqualObjects();

    if ((v15 & 1) == 0)
    {
      [(HMDHome *)self setActiveNetworkRouterUUID:v13];
      if (v13)
      {
        id v16 = [v6 activeNetworkRouterAccessoryUUID];
        __int16 v17 = [v6 activeNetworkRouterInitialSetupNeededUUID];
        -[HMDHome setActiveNetworkRouterInitialSetupNeeded:](self, "setActiveNetworkRouterInitialSetupNeeded:", [v16 isEqual:v17]);
      }
      else
      {
        [(HMDHome *)self setActiveNetworkRouterInitialSetupNeeded:0];
      }
    }
    int v18 = v15 ^ 1;
  }
  else
  {
    int v18 = 0;
  }
  uint64_t v19 = [v6 setProperties];
  int v20 = [v19 containsObject:@"minimumNetworkRouterSupportHomeKitVersion"];

  if (v20)
  {
    id v21 = [v6 minimumNetworkRouterSupportHomeKitVersion];

    if (v21)
    {
      id v22 = [HMDHomeKitVersion alloc];
      id v23 = [v6 minimumNetworkRouterSupportHomeKitVersion];
      id v21 = [(HMDHomeKitVersion *)v22 initWithVersionString:v23];
    }
    uint64_t v24 = [[HMDHomeKitVersion alloc] initWithVersionString:@"6.2"];
    if ([(HMDHome *)self isOwnerUser]
      && [v8 source] != 1
      && [(HMDHomeKitVersion *)v21 isGreaterThanVersion:v24])
    {
      id v25 = (void *)MEMORY[0x230FBD990]();
      uint64_t v26 = self;
      id v27 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v44 = v25;
        v29 = id v28 = v24;
        *(_DWORD *)buf = 138543874;
        uint64_t v53 = v29;
        __int16 v54 = 2112;
        id v55 = v21;
        __int16 v56 = 2112;
        id v57 = v28;
        _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_INFO, "%{public}@Overriding minimum router support HomeKit version to enable network router support from %@ in cloud to our version %@", buf, 0x20u);

        uint64_t v24 = v28;
        id v25 = v44;
      }

      id v30 = [(HMDHome *)v26 workQueue];
      blocuint64_t k = MEMORY[0x263EF8330];
      uint64_t v46 = 3221225472;
      id v47 = __56__HMDHome_updateNetworkRouterSettingsWithModel_message___block_invoke;
      uint64_t v48 = &unk_264A2F2F8;
      id v49 = v26;
      id v50 = v21;
      id v51 = v7;
      dispatch_async(v30, &block);
    }
    else
    {
      id v31 = (void *)MEMORY[0x230FBD990]();
      uint64_t v32 = self;
      id v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        id v34 = HMFGetLogIdentifier();
        [(HMDHome *)v32 minimumNetworkRouterSupportHomeKitVersion];
        id v44 = v8;
        id v35 = v24;
        id v36 = (HMDHomeKitVersion *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        uint64_t v53 = v34;
        __int16 v54 = 2112;
        id v55 = v36;
        __int16 v56 = 2112;
        id v57 = v21;
        _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@Updating minimum router support HomeKit version to enable network router support from %@ to cloud version %@", buf, 0x20u);

        uint64_t v24 = v35;
        id v8 = v44;
      }
      [(HMDHome *)v32 setMinimumNetworkRouterSupportHomeKitVersion:v21];
      int v18 = 1;
    }
  }
  long long v37 = objc_msgSend(v6, "setProperties", v44, block, v46, v47, v48, v49);
  int v38 = [v37 containsObject:@"minHomeKitVersionForAccessoryNetworkProtectionChange"];

  if (v38)
  {
    uint64_t v39 = [v6 minHomeKitVersionForAccessoryNetworkProtectionChange];

    if (v39)
    {
      id v40 = [HMDHomeKitVersion alloc];
      uint64_t v41 = [v6 minHomeKitVersionForAccessoryNetworkProtectionChange];
      uint64_t v39 = [(HMDHomeKitVersion *)v40 initWithVersionString:v41];
    }
    id v42 = [(HMDHome *)self minHomeKitVersionForAccessoryNetworkProtectionChange];
    char v43 = HMFEqualObjects();

    if (v43)
    {

      if ((v18 & 1) == 0) {
        goto LABEL_31;
      }
    }
    else
    {
      [(HMDHome *)self setMinHomeKitVersionForAccessoryNetworkProtectionChange:v39];
    }
  }
  else if (!v18)
  {
    goto LABEL_31;
  }
  [(HMDHome *)self _evaluateNetworkRouterManagementForTransaction:v8];
  [v8 markChanged];
LABEL_31:
  [v7 respondWithPayload:0];
}

uint64_t __56__HMDHome_updateNetworkRouterSettingsWithModel_message___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addTransactionForMinimumNetworkRouterHomeKitVersion:*(void *)(a1 + 40) message:*(void *)(a1 + 48)];
}

- (void)updateHomeConfigurationWithModel:(id)a3 message:(id)a4
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v7 transactionResult];
  id v9 = [v6 setProperties];
  int v10 = [v9 containsObject:@"configurationVersion"];

  if (v10)
  {
    id v11 = [v6 configurationVersion];
    uint64_t v12 = [v11 integerValue];

    uint64_t v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = self;
    int v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = HMFGetLogIdentifier();
      int v22 = 138544130;
      id v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = v12;
      __int16 v26 = 2048;
      uint64_t v27 = [(HMDHome *)v14 lastSyncedConfigurationVersion];
      __int16 v28 = 2048;
      uint64_t v29 = [(HMDHome *)v14 configurationVersion];
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Received incoming configuration version %lu, last synced was %lu, and current is %lu", (uint8_t *)&v22, 0x2Au);
    }
    if ([(HMDHome *)v14 isOwnerUser])
    {
      if (v12 >= [(HMDHome *)v14 configurationVersion])
      {
        uint64_t v21 = [(HMDHome *)v14 configurationVersion];
        if (v21 <= [(HMDHome *)v14 lastSyncedConfigurationVersion])
        {
          [(HMDHome *)v14 setConfigurationVersion:v12];
        }
        else
        {
          [(HMDHome *)v14 setConfigurationVersion:v12 + 1];
          [(HMDHome *)v14 __saveConfigurationVersionTransaction];
        }
        [(HMDHome *)v14 setLastSyncedConfigurationVersion:v12];
      }
      else
      {
        [(HMDHome *)v14 __saveConfigurationVersionTransaction];
      }
    }
    else
    {
      __int16 v17 = (void *)MEMORY[0x230FBD990]();
      int v18 = v14;
      uint64_t v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        int v20 = HMFGetLogIdentifier();
        int v22 = 138543362;
        id v23 = v20;
        _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Shared user will use incoming configuration version", (uint8_t *)&v22, 0xCu);
      }
      [(HMDHome *)v18 setConfigurationVersion:v12];
      [(HMDHome *)v18 setLastSyncedConfigurationVersion:v12];
      [(HMDHome *)v18 setExpectedConfigurationVersion:0];
    }
  }
  [v7 respondWithPayload:0];
  [v8 markChanged];
}

- (id)updateHomeWithModel:(id)a3 message:(id)a4
{
  uint64_t v282 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = (HMDHome *)a4;
  id v8 = [(HMDHome *)v7 transactionResult];
  id v9 = (void *)MEMORY[0x230FBD990]();
  int v10 = self;
  HMFGetOSLogHandle();
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    id v278 = v12;
    __int16 v279 = 2112;
    *(void *)v280 = v6;
    *(_WORD *)&v280[8] = 2112;
    v281 = v7;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Updating home with model: %@ / %@", buf, 0x20u);
  }
  uint64_t v13 = [v6 residentSyncClientDidSync];
  -[HMDHome setResidentSyncClientDidSync:](v10, "setResidentSyncClientDidSync:", [v13 BOOLValue]);

  v266 = v8;
  if ([(HMDHome *)v10 residentSyncDidSync])
  {
    id v14 = (void *)MEMORY[0x230FBD990]();
    int v15 = v10;
    HMFGetOSLogHandle();
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v17 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      id v278 = v17;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Fulfilling resident sync complete promise", buf, 0xCu);

      id v8 = v266;
    }

    int v18 = [(HMDHome *)v15 residentSyncClientDidSyncPromise];
    [v18 fulfillWithNoValue];
  }
  uint64_t v19 = [v6 setProperties];
  int v20 = [v19 containsObject:@"owned"];

  if (v20)
  {
    uint64_t v21 = [v6 owned];
    -[HMDHome setOwnerUser:](v10, "setOwnerUser:", [v21 BOOLValue]);

    int v22 = (void *)MEMORY[0x230FBD990]();
    id v23 = v10;
    HMFGetOSLogHandle();
    __int16 v24 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v25 = (id)objc_claimAutoreleasedReturnValue();
      [(HMDHome *)v23 isOwnerUser];
      HMFBooleanToString();
      id v26 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      id v278 = v25;
      __int16 v279 = 2112;
      *(void *)v280 = v26;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Is this device owner of this home : [%@]", buf, 0x16u);

      id v8 = v266;
    }
  }
  uint64_t v27 = [v6 nfcReaderKey];
  __int16 v28 = [v6 setProperties];
  v263 = (void *)v27;
  if (![v28 containsObject:@"hh2EncodedNfcReaderKey"]) {
    goto LABEL_16;
  }
  uint64_t v29 = [(HMDHome *)v10 nfcReaderKey];
  char v30 = HMFEqualObjects();

  if ((v30 & 1) == 0)
  {
    id v31 = (void *)MEMORY[0x230FBD990]();
    uint64_t v32 = v10;
    HMFGetOSLogHandle();
    id v33 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v34 = (id)objc_claimAutoreleasedReturnValue();
      id v35 = [(HMDHome *)v32 nfcReaderKey];
      *(_DWORD *)buf = 138543874;
      id v278 = v34;
      __int16 v279 = 2112;
      *(void *)v280 = v35;
      *(_WORD *)&v280[8] = 2112;
      v281 = (HMDHome *)v27;
      _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@HH2: Updating nfc reader key from %@ -> %@", buf, 0x20u);

      id v8 = v266;
    }

    __int16 v28 = [MEMORY[0x263EFF9A0] dictionary];
    id v36 = [(HMDHome *)v32 nfcReaderKey];
    [v28 setObject:v36 forKeyedSubscript:@"HMDHomeDidUpdateNFCReaderKeyNotificationKeyPreviousNFCReaderKey"];

    [(HMDHome *)v32 setNfcReaderKey:v27];
    logAndPostNotification(@"HMDHomeDidUpdateNFCReaderKeyNotification", v32, v28);
    [v8 markChanged];
LABEL_16:
  }
  v265 = [v6 residentSelectionVersion];
  long long v37 = [v6 setProperties];
  int v38 = [v37 containsObject:@"residentSelectionVersion"];

  if (v38)
  {
    uint64_t v39 = [(HMDHome *)v10 residentSelectionVersion];

    if (v39 != v265)
    {
      id v40 = (void *)MEMORY[0x230FBD990]();
      uint64_t v41 = v10;
      HMFGetOSLogHandle();
      id v42 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v43 = (id)objc_claimAutoreleasedReturnValue();
        id v44 = [(HMDHome *)v41 residentSelectionVersion];
        *(_DWORD *)buf = 138543874;
        id v278 = v43;
        __int16 v279 = 2114;
        *(void *)v280 = v44;
        *(_WORD *)&v280[8] = 2114;
        v281 = v265;
        _os_log_impl(&dword_22F52A000, v42, OS_LOG_TYPE_INFO, "%{public}@Updating resident selection version from %{public}@ to %{public}@", buf, 0x20u);

        id v8 = v266;
      }

      [(HMDHome *)v41 setResidentSelectionVersion:v265];
      [v8 markChanged];
    }
  }
  v262 = [(HMDHome *)v10 currentUser];
  id v45 = [v6 setProperties];
  int v46 = [v45 containsObject:@"presenceAuthorizationStatus"];

  if (v46)
  {
    id v47 = (void *)MEMORY[0x263F0E8C8];
    uint64_t v48 = [v6 presenceAuthorizationStatus];
    id v49 = [v47 authWithNumber:v48];

    if (isPresenceAuthorizationValid())
    {
      id v50 = [(HMDHome *)v10 presenceAuthStatus];
      char v51 = HMFEqualObjects();

      if (v51)
      {
        uint64_t v52 = (void *)MEMORY[0x230FBD990]();
        uint64_t v53 = v10;
        HMFGetOSLogHandle();
        __int16 v54 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          id v55 = (id)objc_claimAutoreleasedReturnValue();
          __int16 v56 = [(HMDHome *)v53 presenceAuthStatus];
          *(_DWORD *)buf = 138543618;
          id v278 = v55;
          __int16 v279 = 2112;
          *(void *)v280 = v56;
          _os_log_impl(&dword_22F52A000, v54, OS_LOG_TYPE_INFO, "%{public}@Presence auth is not changing from %@", buf, 0x16u);
        }
        int v57 = 0;
      }
      else
      {
        [(HMDHome *)v10 setPresenceAuthStatus:v49];
        [v262 setPresenceAuthStatus:v49];
        [v266 markChanged];
        int v57 = 1;
      }
      if (![(HMDHome *)v10 isOwnerUser]) {
        [v266 markSaveToSharedUserAccount];
      }
    }
    else
    {
      uint64_t v58 = (void *)MEMORY[0x230FBD990]();
      uint64_t v59 = v10;
      HMFGetOSLogHandle();
      uint64_t v60 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v61 = (id)objc_claimAutoreleasedReturnValue();
        long long v62 = [v6 presenceAuthorizationStatus];
        *(_DWORD *)buf = 138543618;
        id v278 = v61;
        __int16 v279 = 2112;
        *(void *)v280 = v62;
        _os_log_impl(&dword_22F52A000, v60, OS_LOG_TYPE_INFO, "%{public}@Ignoring the value for presence auth in home model: %@", buf, 0x16u);
      }
      int v57 = 0;
    }

    BOOL v261 = v57 != 0;
    id v8 = v266;
  }
  else
  {
    BOOL v261 = 0;
  }
  uint64_t v63 = [v6 setProperties];
  int v64 = [v63 containsObject:@"presenceComputeStatus"];

  if (v64)
  {
    id v65 = (void *)MEMORY[0x263F0E8D0];
    id v66 = [v6 presenceComputeStatus];
    id v67 = [v65 computeWithNumber:v66];

    if (v67)
    {
      id v68 = [(HMDHome *)v10 presenceComputeStatus];
      char v69 = HMFEqualObjects();

      if ((v69 & 1) == 0)
      {
        [(HMDHome *)v10 setPresenceComputeStatus:v67];
        if (![(HMDHome *)v10 isOwnerUser]) {
          [v8 markSaveToSharedUserAccount];
        }
        [v8 markChanged];
      }
    }
  }
  id v70 = [v6 setProperties];
  int v71 = [v70 containsObject:@"homeLocationData"];

  if (v71)
  {
    v72 = [(HMDHome *)v10 homeLocationHandler];
    id v73 = [v72 _handleHomeLocationData:v6 message:v7];

    if (v73)
    {
      id v264 = v73;
    }
    else
    {
      v259 = v7;
      id v74 = [MEMORY[0x263EFF9C0] set];
      long long v271 = 0u;
      long long v272 = 0u;
      long long v273 = 0u;
      long long v274 = 0u;
      id v75 = [(HMDHome *)v10 xpcMessageTransportFactory];
      id v76 = [v75 defaultTransport];
      uint64_t v77 = [v76 connections];

      uint64_t v78 = [v77 countByEnumeratingWithState:&v271 objects:v276 count:16];
      if (v78)
      {
        uint64_t v79 = v78;
        uint64_t v80 = *(void *)v272;
        do
        {
          for (uint64_t i = 0; i != v79; ++i)
          {
            if (*(void *)v272 != v80) {
              objc_enumerationMutation(v77);
            }
            id v82 = [*(id *)(*((void *)&v271 + 1) + 8 * i) processInfo];
            uint64_t v83 = [v82 locationAuthorization];

            if (v83) {
              [v74 addObject:v83];
            }
          }
          uint64_t v79 = [v77 countByEnumeratingWithState:&v271 objects:v276 count:16];
        }
        while (v79);
      }

      long long v269 = 0u;
      long long v270 = 0u;
      long long v267 = 0u;
      long long v268 = 0u;
      id v84 = v74;
      uint64_t v85 = [v84 countByEnumeratingWithState:&v267 objects:v275 count:16];
      id v8 = v266;
      if (v85)
      {
        uint64_t v86 = v85;
        uint64_t v87 = *(void *)v268;
        do
        {
          for (uint64_t j = 0; j != v86; ++j)
          {
            if (*(void *)v268 != v87) {
              objc_enumerationMutation(v84);
            }
            uint64_t v89 = *(void **)(*((void *)&v267 + 1) + 8 * j);
            if ([v89 isAuthorized]) {
              [v89 mark];
            }
          }
          uint64_t v86 = [v84 countByEnumeratingWithState:&v267 objects:v275 count:16];
        }
        while (v86);
      }

      id v264 = 0;
      id v7 = v259;
    }
  }
  else
  {
    id v264 = 0;
  }
  uint64_t v90 = [v6 naturalLightingContext];
  uint64_t v91 = [v6 setProperties];
  if ([v91 containsObject:@"encodedNaturalLightingContext"])
  {
    uint64_t v92 = [(HMDHome *)v10 naturalLightingContext];
    char v93 = [v92 isEqual:v90];

    if ((v93 & 1) == 0)
    {
      id v94 = (void *)MEMORY[0x230FBD990]();
      char v95 = v10;
      HMFGetOSLogHandle();
      id v96 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v97 = (id)objc_claimAutoreleasedReturnValue();
        id v98 = [(HMDHome *)v95 naturalLightingContext];
        *(_DWORD *)buf = 138543874;
        id v278 = v97;
        __int16 v279 = 2112;
        *(void *)v280 = v98;
        *(_WORD *)&v280[8] = 2112;
        v281 = (HMDHome *)v90;
        _os_log_impl(&dword_22F52A000, v96, OS_LOG_TYPE_INFO, "%{public}@Updating natural lighting context from %@ -> %@", buf, 0x20u);
      }
      [(HMDHome *)v95 setNaturalLightingContext:v90];
      [v8 markChanged];
    }
  }
  else
  {
  }
  id v99 = [v6 setProperties];
  if (![v99 containsObject:@"name"]) {
    goto LABEL_78;
  }
  v100 = [v6 name];
  id v101 = [(HMDHome *)v10 name];
  char v102 = [v100 isEqualToString:v101];

  if ((v102 & 1) == 0)
  {
    uint64_t v103 = [(HMDHome *)v10 _handleRenameHomeModel:v6 message:v7];
    id v99 = v103;
    if (v103)
    {
      id v104 = v103;

      id v264 = v104;
    }
    [v8 markSaveToAssistant];
    [v8 markChanged];
LABEL_78:
  }
  uint64_t v105 = [v6 creationDate];
  if (v105)
  {
    id v106 = (void *)v105;
    long long v107 = [v6 creationDate];
    v108 = [(HMDHome *)v10 creationDate];
    char v109 = [v107 isEqualToDate:v108];

    if ((v109 & 1) == 0)
    {
      uint64_t v110 = [v6 creationDate];
      [(HMDHome *)v10 setCreationDate:v110];

      [v8 markChanged];
    }
  }
  uint64_t v111 = [v6 firstHAPAccessoryAddedDate];
  if (v111)
  {
    long long v112 = (void *)v111;
    v113 = [v6 firstHAPAccessoryAddedDate];
    v114 = [(HMDHome *)v10 firstHAPAccessoryAddedDate];
    char v115 = [v113 isEqualToDate:v114];

    if ((v115 & 1) == 0)
    {
      __int16 v116 = [v6 firstHAPAccessoryAddedDate];
      [(HMDHome *)v10 setFirstHAPAccessoryAddedDate:v116];

      [v8 markChanged];
    }
  }
  v117 = [v6 setProperties];
  if ([v117 containsObject:@"multiUserEnabled"])
  {
    __int16 v118 = [v6 multiUserEnabled];
    int v119 = [v118 BOOLValue];
    int v120 = [(HMDHome *)v10 isMultiUserEnabled];

    if (v119 != v120)
    {
      v121 = (void *)MEMORY[0x230FBD990]();
      uint64_t v122 = v10;
      HMFGetOSLogHandle();
      v123 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v124 = (id)objc_claimAutoreleasedReturnValue();
        v125 = [v6 multiUserEnabled];
        v126 = @"YES";
        *(_DWORD *)buf = 138543874;
        id v278 = v124;
        __int16 v279 = 2112;
        if (!v125) {
          v126 = @"NO";
        }
        *(void *)v280 = v126;
        *(_WORD *)&v280[8] = 2112;
        v281 = v122;
        _os_log_impl(&dword_22F52A000, v123, OS_LOG_TYPE_INFO, "%{public}@Merging multi-user enabled value %@ into home: %@", buf, 0x20u);
      }
      [(HMDHome *)v122 _handleMultiUserEnabledChange:v6 message:v7];
      [v8 markChanged];
    }
  }
  else
  {
  }
  if ([v6 propertyWasSet:@"soundCheckEnabled"])
  {
    v127 = [v6 soundCheckEnabled];
    int v128 = [v127 BOOLValue];
    int v129 = [(HMDHome *)v10 soundCheckEnabled];

    if (v128 != v129)
    {
      [(HMDHome *)v10 _handleSoundCheckChange:v6 message:v7];
      [v8 markChanged];
    }
  }
  if ([v6 propertyWasSet:@"analysisOptions"])
  {
    v130 = [v6 analysisOptions];
    uint64_t v131 = [v130 unsignedIntegerValue];
    uint64_t v132 = [(HMDHome *)v10 audioAnalysisClassifierOptions];

    if (v131 != v132)
    {
      [(HMDHome *)v10 _handleAudioAnalysisClassifierOptionsChange:v6 message:v7];
      [v8 markChanged];
    }
  }
  if ([v6 propertyWasSet:@"didOnboardAnalysis"])
  {
    v133 = [v6 didOnboardAnalysis];
    int v134 = [v133 BOOLValue];
    int v135 = [(HMDHome *)v10 didOnboardAudioAnalysis];

    if (v134 != v135)
    {
      [(HMDHome *)v10 _handleAudioAnalysisOnboardingStatusChange:v6 message:v7];
      [v8 markChanged];
    }
  }
  if ([v6 propertyWasSet:@"siriPhraseOptions"])
  {
    v136 = [v6 siriPhraseOptions];
    uint64_t v137 = [v136 unsignedIntegerValue];
    uint64_t v138 = [(HMDHome *)v10 siriPhraseOptions];

    if (v137 != v138)
    {
      [(HMDHome *)v10 _handleSiriPhraseOptionsStatusChange:v6 message:v7];
      [v8 markChanged];
    }
  }
  if ([v6 propertyWasSet:@"locationServicesEnabled"])
  {
    v139 = [v6 locationServicesEnabled];
    int v140 = [v139 BOOLValue];
    int v141 = [(HMDHome *)v10 locationServicesEnabled];

    if (v140 != v141)
    {
      [(HMDHome *)v10 _handleLocationServicesEnabledChange:v6 message:v7];
      [v8 markChanged];
    }
  }
  if ([v6 propertyWasSet:@"didOnboardLocationServices"])
  {
    v142 = [v6 didOnboardLocationServices];
    int v143 = [v142 BOOLValue];
    int v144 = [(HMDHome *)v10 didOnboardLocationServices];

    if (v143 != v144)
    {
      [(HMDHome *)v10 _handleDidOnboardLocationServicesChange:v6 message:v7];
      [v8 markChanged];
    }
  }
  v145 = [v6 setProperties];
  if ([v145 containsObject:@"hasAnyUserAcknowledgedCameraRecordingOnboarding"])
  {
    uint64_t v146 = [v6 hasAnyUserAcknowledgedCameraRecordingOnboarding];
    int v147 = [v146 BOOLValue];
    int v148 = [(HMDHome *)v10 hasAnyUserAcknowledgedCameraRecordingOnboarding];

    if (v147 != v148)
    {
      v149 = (void *)MEMORY[0x230FBD990]();
      v150 = v10;
      HMFGetOSLogHandle();
      v151 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v152 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v153 = [v6 hasAnyUserAcknowledgedCameraRecordingOnboarding];
        uint64_t v154 = @"YES";
        *(_DWORD *)buf = 138543874;
        id v278 = v152;
        __int16 v279 = 2112;
        if (!v153) {
          uint64_t v154 = @"NO";
        }
        *(void *)v280 = v154;
        *(_WORD *)&v280[8] = 2112;
        v281 = v150;
        _os_log_impl(&dword_22F52A000, v151, OS_LOG_TYPE_INFO, "%{public}@Merging home's has any user acknowledged camera recording onboarding value %@ into home: %@", buf, 0x20u);
      }
      [(HMDHome *)v150 _handleHasAnyUserAcknowledgedCameraRecordingOnboardingChange:v6 message:v7];
      [v8 markChanged];
    }
  }
  else
  {
  }
  v155 = [v6 setProperties];
  if ([v155 containsObject:@"hasOnboardedForAccessCode"])
  {
    v156 = [v6 hasOnboardedForAccessCode];
    int v157 = [v156 BOOLValue];
    int v158 = [(HMDHome *)v10 hasOnboardedForAccessCode];

    if (v157 != v158)
    {
      v159 = (void *)MEMORY[0x230FBD990]();
      v160 = v10;
      HMFGetOSLogHandle();
      v161 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v161, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v162 = (id)objc_claimAutoreleasedReturnValue();
        v163 = [v6 hasOnboardedForAccessCode];
        [v163 BOOLValue];
        HMFBooleanToString();
        id v164 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        id v278 = v162;
        __int16 v279 = 2112;
        *(void *)v280 = v164;
        *(_WORD *)&v280[8] = 2112;
        v281 = v160;
        _os_log_impl(&dword_22F52A000, v161, OS_LOG_TYPE_INFO, "%{public}@Merging home's has onboarded for access code value %@ into home: %@", buf, 0x20u);

        id v8 = v266;
      }

      [(HMDHome *)v160 _handleSetHasOnboardedForAccessCodeChange:v6 message:v7];
      [v8 markChanged];
    }
  }
  else
  {
  }
  v165 = [v6 setProperties];
  if ([v165 containsObject:@"hasOnboardedForWalletKey"])
  {
    id v166 = [v6 hasOnboardedForWalletKey];
    int v167 = [v166 BOOLValue];
    int v168 = [(HMDHome *)v10 hasOnboardedForWalletKey];

    BOOL v169 = v167 == v168;
    id v8 = v266;
    if (!v169)
    {
      v170 = (void *)MEMORY[0x230FBD990]();
      BOOL v171 = v10;
      HMFGetOSLogHandle();
      v172 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v172, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v173 = (id)objc_claimAutoreleasedReturnValue();
        v174 = [v6 hasOnboardedForWalletKey];
        [v174 BOOLValue];
        HMFBooleanToString();
        id v175 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        id v278 = v173;
        __int16 v279 = 2112;
        *(void *)v280 = v175;
        *(_WORD *)&v280[8] = 2112;
        v281 = v171;
        _os_log_impl(&dword_22F52A000, v172, OS_LOG_TYPE_INFO, "%{public}@Merging home's has onboarded for wallet key value %@ into home: %@", buf, 0x20u);

        id v8 = v266;
      }

      [(HMDHome *)v171 _handleSetHasOnboardedForWalletKeyChange:v6 message:v7];
      [v8 markChanged];
    }
  }
  else
  {
  }
  v260 = (void *)v90;
  long long v176 = [v6 setProperties];
  int v177 = [v176 containsObject:@"networkProtectionMode"];

  if (v177) {
    [(HMDHome *)v10 _handleUpdateNetworkProtectionWithHomeModel:v6 message:v7];
  }
  if (![(HMDHome *)v10 isOwnerUser])
  {
    BOOL v178 = [v8 source] == 2 || objc_msgSend(v8, "source") == 3;
    long long v179 = [v6 setProperties];
    int v180 = [v179 containsObject:@"sharedHomeSourceVersion"];

    if (v180)
    {
      if (!v178)
      {
        long long v181 = (void *)MEMORY[0x230FBD990]([(HMDHome *)v10 _handleReceivedNonCloudSourcedSharedHomeModel]);
        long long v182 = v10;
        HMFGetOSLogHandle();
        long long v183 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v183, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          id v184 = (id)objc_claimAutoreleasedReturnValue();
          long long v185 = [(HMDHome *)v182 sharedHomeSourceVersion];
          long long v186 = [v6 sharedHomeSourceVersion];
          *(_DWORD *)buf = 138543874;
          id v278 = v184;
          __int16 v279 = 2112;
          *(void *)v280 = v185;
          *(_WORD *)&v280[8] = 2112;
          v281 = v186;
          _os_log_impl(&dword_22F52A000, v183, OS_LOG_TYPE_INFO, "%{public}@Updating shared home source version from %@ to %@", buf, 0x20u);

          id v8 = v266;
        }

        long long v187 = [(HMDHome *)v182 sharedHomeSourceVersion];
        long long v188 = [v6 sharedHomeSourceVersion];
        char v189 = HMFEqualObjects();

        if ((v189 & 1) == 0)
        {
          long long v190 = [v6 sharedHomeSourceVersion];
          [(HMDHome *)v182 setSharedHomeSourceVersion:v190];

          [v8 markChanged];
        }
      }
    }
  }
  if ([v6 propertyWasSet:@"threadOperationalDataset"])
  {
    long long v191 = [v6 threadOperationalDataset];

    if (v191) {
      [(HMDHome *)v10 updateThreadOperationalDatasetWithHomeModel:v6 message:v7];
    }
  }
  if ([v6 propertyWasSet:@"matCredGRK"])
  {
    long long v192 = [(HMDHome *)v10 acwgGroupResolvingKey];
    long long v193 = [v6 matCredGRK];
    char v194 = HMFEqualObjects();

    if ((v194 & 1) == 0)
    {
      long long v195 = (void *)MEMORY[0x230FBD990]();
      long long v196 = v10;
      HMFGetOSLogHandle();
      long long v197 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v197, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v198 = (id)objc_claimAutoreleasedReturnValue();
        long long v199 = [v6 matCredGRK];
        *(_DWORD *)buf = 138543618;
        id v278 = v198;
        __int16 v279 = 2112;
        *(void *)v280 = v199;
        _os_log_impl(&dword_22F52A000, v197, OS_LOG_TYPE_INFO, "%{public}@Updating acwgGroupResolvingKey to: %@", buf, 0x16u);

        id v8 = v266;
      }

      long long v200 = [v6 matCredGRK];
      [(HMDHome *)v196 setAcwgGroupResolvingKey:v200];

      [v8 markChanged];
    }
  }
  [(HMDHome *)v10 handleUpdatedCHIPPropertiesOnHomeModel:v6 actions:v8];
  if (![v6 propertyWasSet:@"didOnboardEventLog"]
    || ([v6 didOnboardEventLog],
        long long v201 = objc_claimAutoreleasedReturnValue(),
        uint64_t v202 = [v201 BOOLValue],
        v201,
        v202 == [(HMDHome *)v10 didOnboardEventLog]))
  {
    int v209 = 0;
  }
  else
  {
    long long v203 = (void *)MEMORY[0x230FBD990]([(HMDHome *)v10 setDidOnboardEventLog:v202]);
    long long v204 = v10;
    HMFGetOSLogHandle();
    long long v205 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      id v206 = (id)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      self;
      long long v207 = @"[Hindsight]";
      HMFBooleanToString();
      long long v208 = (HMDHome *)(id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      id v278 = v206;
      __int16 v279 = 2114;
      *(void *)v280 = @"[Hindsight]";
      *(_WORD *)&v280[8] = 2114;
      v281 = v208;
      _os_log_impl(&dword_22F52A000, v205, OS_LOG_TYPE_DEFAULT, "%{public}@%{public}@ Activity history did onboard is now %{public}@", buf, 0x20u);
    }
    [v8 markChanged];
    [(HMDHome *)v204 _didOnboardHindsightChanged];
    int v209 = 1;
  }
  if ([v6 propertyWasSet:@"eventLogHomeSettingEnabled"])
  {
    long long v210 = [v6 eventLogHomeSettingEnabled];
    uint64_t v211 = [v210 BOOLValue];

    if (v211 != [(HMDHome *)v10 isEventLogHomeSettingEnabled])
    {
      long long v212 = (void *)MEMORY[0x230FBD990]([(HMDHome *)v10 setEventLogHomeSettingEnabled:v211]);
      long long v213 = v10;
      HMFGetOSLogHandle();
      long long v214 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v214, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v215 = (id)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        self;
        long long v216 = @"[Hindsight]";
        HMFEnabledStatusToString();
        long long v217 = (HMDHome *)(id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        id v278 = v215;
        __int16 v279 = 2114;
        *(void *)v280 = @"[Hindsight]";
        *(_WORD *)&v280[8] = 2114;
        v281 = v217;
        _os_log_impl(&dword_22F52A000, v214, OS_LOG_TYPE_DEFAULT, "%{public}@%{public}@ Activity history is now %{public}@", buf, 0x20u);
      }
      [v8 markChanged];
      int v209 = 1;
    }
  }
  if ([v6 propertyWasSet:@"eventLogDuration"])
  {
    long long v218 = [v6 eventLogDuration];
    uint64_t v219 = [v218 unsignedIntegerValue];

    if ([(HMDHome *)v10 eventLogDuration] != v219)
    {
      long long v220 = (void *)MEMORY[0x230FBD990]([(HMDHome *)v10 setEventLogDuration:v219]);
      v221 = v10;
      HMFGetOSLogHandle();
      v222 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v222, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v223 = (id)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        self;
        v224 = @"[Hindsight]";
        *(_DWORD *)buf = 138543874;
        id v278 = v223;
        __int16 v279 = 2114;
        *(void *)v280 = @"[Hindsight]";
        *(_WORD *)&v280[8] = 2048;
        v281 = (HMDHome *)v219;
        _os_log_impl(&dword_22F52A000, v222, OS_LOG_TYPE_DEFAULT, "%{public}@%{public}@ Activity history duration is now %lu days", buf, 0x20u);

        id v8 = v266;
      }

      [v8 markChanged];
    }
  }
  if (v209)
  {
    v225 = [(HMDHome *)v10 hindsightCloudShareManager];
    [v225 synchronize];
  }
  if ([v6 propertyWasSet:@"timeZone"])
  {
    v226 = [v6 timeZone];
    __int16 v227 = [(HMDHome *)v10 timeZone];
    char v228 = HMFEqualObjects();

    if ((v228 & 1) == 0)
    {
      v229 = (void *)MEMORY[0x230FBD990]();
      v230 = v10;
      HMFGetOSLogHandle();
      v231 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v231, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v232 = (id)objc_claimAutoreleasedReturnValue();
        v233 = [(HMDHome *)v230 timeZone];
        v234 = [v6 timeZone];
        *(_DWORD *)buf = 138543874;
        id v278 = v232;
        __int16 v279 = 2112;
        *(void *)v280 = v233;
        *(_WORD *)&v280[8] = 2112;
        v281 = v234;
        _os_log_impl(&dword_22F52A000, v231, OS_LOG_TYPE_INFO, "%{public}@Home timeZone was updated to: %@ from : %@", buf, 0x20u);

        id v8 = v266;
      }

      v235 = [v6 timeZone];
      [(HMDHome *)v230 setTimeZone:v235];

      v236 = [(HMDHome *)v230 timeZone];

      if (!v236)
      {
        uint64_t v237 = [MEMORY[0x263EFFA18] localTimeZone];
        [(HMDHome *)v230 setTimeZone:v237];
      }
      [v8 markChanged];
    }
  }
  if ([v6 propertyWasSet:@"numberOfCameras"])
  {
    v238 = [v6 numberOfCameras];
    v239 = [(HMDHome *)v10 numberOfCameras];
    char v240 = HMFEqualObjects();

    if ((v240 & 1) == 0)
    {
      v241 = (void *)MEMORY[0x230FBD990]();
      v242 = v10;
      HMFGetOSLogHandle();
      v243 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v243, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v244 = (id)objc_claimAutoreleasedReturnValue();
        v245 = [(HMDHome *)v242 numberOfCameras];
        int v246 = [v245 unsignedIntValue];
        v247 = [v6 numberOfCameras];
        int v248 = [v247 unsignedIntValue];
        *(_DWORD *)buf = 138543874;
        id v278 = v244;
        __int16 v279 = 1024;
        *(_DWORD *)v280 = v246;
        *(_WORD *)&v280[4] = 1024;
        *(_DWORD *)&v280[6] = v248;
        _os_log_impl(&dword_22F52A000, v243, OS_LOG_TYPE_INFO, "%{public}@Home numberOfCameras changed from %u to %u", buf, 0x18u);

        id v8 = v266;
      }

      v249 = [v6 numberOfCameras];
      [(HMDHome *)v242 setNumberOfCameras:v249];

      [v8 markChanged];
    }
  }
  v250 = [(HMDHome *)v7 responseHandler];

  if (v250)
  {
    v251 = [(HMDHome *)v7 responseHandler];
    ((void (**)(void, id, void))v251)[2](v251, v264, 0);
  }
  if (v261)
  {
    v252 = [(HMDHome *)v7 name];
    int v253 = HMFEqualObjects();

    v254 = [(HMDHome *)v10 presenceFeeder];
    v255 = v254;
    if (v253)
    {
      [v254 presenceAuthChanged];
    }
    else
    {
      v256 = [(HMDHome *)v10 presenceAuthStatus];
      [v255 presenceAuthStatusChangedForUser:v262 presenceAuthStatus:v256];
    }
  }
  id v257 = v264;

  return v257;
}

- (void)_handleUpdateNetworkProtectionWithHomeModel:(id)a3 message:(id)a4
{
  id v9 = a4;
  id v6 = [a3 networkProtectionMode];
  uint64_t v7 = [v6 unsignedIntegerValue];

  if ([(HMDHome *)self protectionMode] != v7)
  {
    [(HMDHome *)self setProtectionMode:v7];
    id v8 = [v9 transactionResult];
    [(HMDHome *)self _handleNetworkProtectionModeChangeForTransaction:v8];
    [v8 markChanged];
  }
}

- (BOOL)awdPrimaryReportingDevice
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHome *)self residentDeviceManager];
  id v4 = [v3 primaryResidentDevice];

  if (v4 && [v4 isReachable])
  {
    id v5 = [v4 device];
    char v6 = [v5 isCurrentDevice];
LABEL_19:

    goto LABEL_20;
  }
  if ([(HMDHome *)self isOwnerUser]
    && ([MEMORY[0x263F42620] productInfo],
        uint64_t v7 = objc_claimAutoreleasedReturnValue(),
        uint64_t v8 = [v7 productClass],
        v7,
        v8 == 1))
  {
    char v6 = 1;
  }
  else
  {
    if ([(HMDHome *)self isOwnerUser])
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      id v9 = +[HMDAppleAccountManager sharedManager];
      int v10 = [v9 account];
      id v5 = [v10 devices];

      uint64_t v11 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)v19;
        while (2)
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v19 != v13) {
              objc_enumerationMutation(v5);
            }
            int v15 = [*(id *)(*((void *)&v18 + 1) + 8 * i) productInfo];
            uint64_t v16 = [v15 productClass];

            if (v16 == 1)
            {
              char v6 = 0;
              goto LABEL_19;
            }
          }
          uint64_t v12 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
          if (v12) {
            continue;
          }
          break;
        }
      }
      char v6 = 1;
      goto LABEL_19;
    }
    char v6 = 0;
  }
LABEL_20:

  return v6;
}

- (NSNumber)availableBorderRouters
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_availableBorderRouters;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setAvailableBorderRouters:(id)a3
{
  id v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  availableBorderRouters = self->_availableBorderRouters;
  self->_availableBorderRouters = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSNumber)availableBSPsCount
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_availableBSPsCount;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setAvailableBSPsCount:(id)a3
{
  id v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  availableBSPsCount = self->_availableBSPsCount;
  self->_availableBSPsCount = v4;

  os_unfair_recursive_lock_unlock();
}

- (id)dumpMediaSessionDescription
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x263EFF980];
  id v4 = [(HMDHome *)self mediaSessionStates];
  id v5 = objc_msgSend(v3, "arrayWithCapacity:", objc_msgSend(v4, "count"));

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  char v6 = [(HMDHome *)self mediaSessionStates];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = [*(id *)(*((void *)&v13 + 1) + 8 * i) dumpState];
        [v5 addObject:v11];
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }

  return v5;
}

- (id)dumpCharacteristicNotificationRegistry
{
  id v3 = (void *)MEMORY[0x263F089D8];
  id v4 = [(HMDHome *)self name];
  id v5 = [(HMDHome *)self uuid];
  char v6 = [v5 UUIDString];
  uint64_t v7 = [v3 stringWithFormat:@"Home %@/%@:", v4, v6];

  uint64_t v8 = [(HMDHome *)self notificationRegistry];
  uint64_t v9 = [v8 shortDescription];
  [v7 appendString:v9];

  return v7;
}

- (id)dumpActionSetDescription
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x263EFF980];
  id v4 = [(HMDHome *)self mediaSessionStates];
  id v5 = objc_msgSend(v3, "arrayWithCapacity:", objc_msgSend(v4, "count"));

  char v6 = [(HMDHome *)self actionSets];
  uint64_t v7 = (void *)[v6 copy];

  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v8 = v7;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v29 != v11) {
          objc_enumerationMutation(v8);
        }
        long long v13 = [*(id *)(*((void *)&v28 + 1) + 8 * i) dumpState];
        [v5 addObject:v13];
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v28 objects:v33 count:16];
    }
    while (v10);
  }

  long long v14 = [(HMDHome *)self triggerOwnedActionSets];
  long long v15 = (void *)[v14 copy];

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v16 = v15;
  uint64_t v17 = [v16 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v25;
    do
    {
      for (uint64_t j = 0; j != v18; ++j)
      {
        if (*(void *)v25 != v19) {
          objc_enumerationMutation(v16);
        }
        long long v21 = objc_msgSend(*(id *)(*((void *)&v24 + 1) + 8 * j), "dumpState", (void)v24);
        [v5 addObject:v21];
      }
      uint64_t v18 = [v16 countByEnumeratingWithState:&v24 objects:v32 count:16];
    }
    while (v18);
  }

  int v22 = (void *)[v5 copy];
  return v22;
}

- (void)doFullImportWithCompletion:(id)a3
{
  id v4 = a3;
  id v6 = +[HMDCoreDataCloudTransform sharedInstance];
  id v5 = [(HMDHome *)self uuid];
  [v6 runCompleteMergeTransformForHomeWithModelID:v5 completion:v4];
}

- (void)_handleResponseForElectMessageToResident:(id)a3 error:(id)a4
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  if ([(HMDHome *)self remoteAccessIsEnabled])
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    uint64_t v9 = self;
    uint64_t v10 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
LABEL_5:

      goto LABEL_19;
    }
    uint64_t v11 = HMFGetLogIdentifier();
    uint64_t v12 = [v6 userID];
    int v36 = 138543618;
    long long v37 = v11;
    __int16 v38 = 2112;
    uint64_t v39 = v12;
    long long v13 = "%{public}@Received response for ping message to resident %@. Remote access is already setup, dropping response";
LABEL_4:
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v36, 0x16u);

    goto LABEL_5;
  }
  if (v7)
  {
    long long v14 = [v7 domain];
    if ([v14 isEqualToString:*MEMORY[0x263F49E40]])
    {
      if ([v7 code] == 16)
      {

LABEL_21:
        id v8 = (void *)MEMORY[0x230FBD990]();
        uint64_t v9 = self;
        uint64_t v10 = HMFGetOSLogHandle();
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
          goto LABEL_5;
        }
        uint64_t v11 = HMFGetLogIdentifier();
        uint64_t v12 = [v6 userID];
        int v36 = 138543618;
        long long v37 = v11;
        __int16 v38 = 2112;
        uint64_t v39 = v12;
        long long v13 = "%{public}@Failed to ping resident %@, will try again at next heartbeat";
        goto LABEL_4;
      }
      uint64_t v35 = [v7 code];

      if (v35 == 23) {
        goto LABEL_21;
      }
    }
    else
    {
    }
    long long v28 = (void *)MEMORY[0x230FBD990]();
    long long v29 = self;
    long long v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      long long v31 = HMFGetLogIdentifier();
      uint64_t v32 = [v6 userID];
      int v36 = 138543874;
      long long v37 = v31;
      __int16 v38 = 2112;
      uint64_t v39 = v32;
      __int16 v40 = 2112;
      id v41 = v7;
      _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_INFO, "%{public}@Failed to ping resident %@, but error %@ is not specific IDS error, will not re-try at next heartbeat", (uint8_t *)&v36, 0x20u);
    }
    id v33 = [(HMDHome *)v29 heartbeatPingMessagesQueuedWithServer];
    uint64_t v34 = [v6 userID];
    [v33 addObject:v34];
  }
  else
  {
    long long v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      uint64_t v19 = [v6 userID];
      int v36 = 138543618;
      long long v37 = v18;
      __int16 v38 = 2112;
      uint64_t v39 = v19;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Successfully sent ping message to resident %@, remembering queued message", (uint8_t *)&v36, 0x16u);
    }
    long long v20 = [(HMDHome *)v16 heartbeatPingMessagesQueuedWithServer];
    long long v21 = [v6 userID];
    [v20 addObject:v21];

    int v22 = (void *)MEMORY[0x230FBD990]();
    uint64_t v23 = v16;
    long long v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      long long v25 = HMFGetLogIdentifier();
      int v36 = 138543362;
      long long v37 = v25;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Home does not have remote access enabled, requesting electing a remote peer", (uint8_t *)&v36, 0xCu);
    }
    long long v26 = [(HMDHome *)v23 homeManager];
    long long v27 = [(HMDHome *)v23 uuid];
    [v26 electRemoteAccessPeerForHome:v27];
  }
LABEL_19:
}

- (void)_remoteAccessHealthMonitorTimerDidFire
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (![(HMDHome *)self remoteAccessIsEnabled])
  {
    id v3 = [(HMDHome *)self _residentUsers];
    objc_initWeak(&location, self);
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    obuint64_t j = v3;
    uint64_t v4 = [obj countByEnumeratingWithState:&v27 objects:v36 count:16];
    if (v4)
    {
      uint64_t v24 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v28 != v24) {
            objc_enumerationMutation(obj);
          }
          id v6 = *(void **)(*((void *)&v27 + 1) + 8 * i);
          id v7 = [(HMDHome *)self heartbeatPingMessagesQueuedWithServer];
          id v8 = [v6 userID];
          char v9 = [v7 containsObject:v8];

          uint64_t v10 = (void *)MEMORY[0x230FBD990]();
          uint64_t v11 = self;
          if (v9)
          {
            HMFGetOSLogHandle();
            uint64_t v12 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v13 = (id)objc_claimAutoreleasedReturnValue();
              long long v14 = [v6 userID];
              *(_DWORD *)buf = 138543618;
              id v33 = v13;
              __int16 v34 = 2112;
              uint64_t v35 = v14;
              _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Remote access health monitor fired, but we already have a ping queued with server to %@", buf, 0x16u);
            }
          }
          else
          {
            HMFGetOSLogHandle();
            long long v15 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v16 = (id)objc_claimAutoreleasedReturnValue();
              uint64_t v17 = [v6 userID];
              *(_DWORD *)buf = 138543618;
              id v33 = v16;
              __int16 v34 = 2112;
              uint64_t v35 = v17;
              _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Remote access health monitor fired, sending ping elect message to %@", buf, 0x16u);
            }
            aBlock[0] = MEMORY[0x263EF8330];
            aBlock[1] = 3221225472;
            aBlock[2] = __49__HMDHome__remoteAccessHealthMonitorTimerDidFire__block_invoke;
            aBlock[3] = &unk_264A17040;
            objc_copyWeak(&v26, &location);
            void aBlock[4] = v6;
            uint64_t v18 = _Block_copy(aBlock);
            uint64_t v19 = [(HMDHome *)v11 homeManager];
            long long v20 = [v6 userID];
            long long v21 = [v6 userID];
            int v22 = [(HMDHome *)v11 workQueue];
            [v19 electDeviceForUser:v20 destination:v21 deviceCapabilities:0 responseTimeout:v22 queue:v18 completionHandler:600.0];

            objc_destroyWeak(&v26);
          }
        }
        uint64_t v4 = [obj countByEnumeratingWithState:&v27 objects:v36 count:16];
      }
      while (v4);
    }

    objc_destroyWeak(&location);
  }
}

void __49__HMDHome__remoteAccessHealthMonitorTimerDidFire__block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v6)
    {
      uint64_t v4 = [v6 userInfo];
      id v5 = [v4 objectForKeyedSubscript:*MEMORY[0x263F08608]];

      [WeakRetained _handleResponseForElectMessageToResident:*(void *)(a1 + 32) error:v5];
    }
    else
    {
      [WeakRetained _handleResponseForElectMessageToResident:*(void *)(a1 + 32) error:0];
    }
  }
}

- (void)remoteAccessHealthMonitorTimerDidFire
{
  if (isiOSDevice())
  {
    id v3 = [(HMDHome *)self workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __48__HMDHome_remoteAccessHealthMonitorTimerDidFire__block_invoke;
    block[3] = &unk_264A2F7F8;
    void block[4] = self;
    dispatch_async(v3, block);
  }
}

uint64_t __48__HMDHome_remoteAccessHealthMonitorTimerDidFire__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _remoteAccessHealthMonitorTimerDidFire];
}

- (void)_handleDidReceiveIDSMessageWithNoListenerFromAddress:(id)a3
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v4 = (__CFString *)a3;
  int v5 = shouldLogPrivateInformation();
  id v6 = @"...";
  if (v5) {
    id v6 = v4;
  }
  id v7 = v6;
  if ([(HMDHome *)self remoteAccessIsEnabled])
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    char v9 = self;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v32 = v11;
      __int16 v33 = 2112;
      __int16 v34 = v7;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Received IDS message from %@ but home has remote access enabled, ignoring notification", buf, 0x16u);
    }
  }
  else
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v12 = [(HMDHome *)self _residentUsers];
    uint64_t v13 = [v12 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v27;
      while (2)
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v27 != v15) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = *(void **)(*((void *)&v26 + 1) + 8 * i);
          if ([v17 configurationState] == 2)
          {
            uint64_t v18 = [v17 userID];
            int v19 = [v18 isEqualToString:v4];

            if (v19)
            {
              long long v20 = (void *)MEMORY[0x230FBD990]();
              long long v21 = self;
              int v22 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
              {
                uint64_t v23 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                uint64_t v32 = v23;
                __int16 v33 = 2112;
                __int16 v34 = v7;
                _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Home does not have remote access enabled but we received a message from resident at %@, requesting electing a remote peer", buf, 0x16u);
              }
              uint64_t v24 = [(HMDHome *)v21 homeManager];
              long long v25 = [(HMDHome *)v21 uuid];
              [v24 electRemoteAccessPeerForHome:v25];

              goto LABEL_20;
            }
          }
        }
        uint64_t v14 = [v12 countByEnumeratingWithState:&v26 objects:v30 count:16];
        if (v14) {
          continue;
        }
        break;
      }
    }
LABEL_20:
  }
}

- (void)handleDidReceiveIDSMessageWithNoListener:(id)a3
{
  id v4 = a3;
  int v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __52__HMDHome_handleDidReceiveIDSMessageWithNoListener___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  char v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __52__HMDHome_handleDidReceiveIDSMessageWithNoListener___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userInfo];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) userInfo];
    objc_msgSend(v3, "hmf_stringForKey:", @"kIDSMessageSourceIDKey");
    id v5 = (id)objc_claimAutoreleasedReturnValue();

    id v4 = v5;
    if (v5)
    {
      [*(id *)(a1 + 40) _handleDidReceiveIDSMessageWithNoListenerFromAddress:v5];
      id v4 = v5;
    }
  }
}

- (void)handleActiveAccountChanged:(id)a3
{
  id v4 = [a3 userInfo];
  id v5 = [v4 objectForKeyedSubscript:@"HMDAccountNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  id v8 = [(HMDHome *)self workQueue];
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  void v10[2] = __38__HMDHome_handleActiveAccountChanged___block_invoke;
  v10[3] = &unk_264A2F820;
  v10[4] = self;
  id v11 = v7;
  id v9 = v7;
  dispatch_async(v8, v10);
}

void __38__HMDHome_handleActiveAccountChanged___block_invoke(uint64_t a1)
{
}

- (void)handleCurrentAccountMergeIdentifierUpdated:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __54__HMDHome_handleCurrentAccountMergeIdentifierUpdated___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __54__HMDHome_handleCurrentAccountMergeIdentifierUpdated___block_invoke(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  if ([*(id *)(a1 + 40) isOwnerUser])
  {
    id v5 = +[HMDAppleAccountManager sharedManager];
    id v6 = [v5 account];
    int v7 = [v4 isEqualToAccount:v6];

    if (v7)
    {
      id v8 = [*(id *)(a1 + 40) currentUser];
      if (v8)
      {
        uint64_t v9 = [v4 senderCorrelationIdentifier];
        if (!v9) {
          goto LABEL_16;
        }
        uint64_t v10 = (void *)v9;
        id v11 = [v4 senderCorrelationIdentifier];
        uint64_t v12 = [v8 mergeIdentifier];
        char v13 = HMFEqualObjects();

        if (v13) {
          goto LABEL_16;
        }
        if (![*(id *)(a1 + 40) hasAnyResident]
          || ([*(id *)(a1 + 40) isCurrentDevicePrimaryResident] & 1) != 0)
        {
          uint64_t v14 = [*(id *)(a1 + 40) backingStore];
          uint64_t v15 = [v14 context];

          v26[0] = MEMORY[0x263EF8330];
          v26[1] = 3221225472;
          void v26[2] = __54__HMDHome_handleCurrentAccountMergeIdentifierUpdated___block_invoke_1926;
          v26[3] = &unk_264A2E610;
          id v27 = v8;
          id v28 = v15;
          id v16 = v4;
          uint64_t v17 = *(void *)(a1 + 40);
          id v29 = v16;
          uint64_t v30 = v17;
          id v18 = v15;
          [v18 unsafeSynchronousBlock:v26];

LABEL_16:
          goto LABEL_17;
        }
        int v19 = (void *)MEMORY[0x230FBD990]();
        id v20 = *(id *)(a1 + 40);
        long long v21 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          int v22 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          uint64_t v32 = v22;
          uint64_t v23 = "%{public}@Skip updating owner user with mergeID since this device is not the primary resident";
          uint64_t v24 = v21;
          os_log_type_t v25 = OS_LOG_TYPE_INFO;
          goto LABEL_14;
        }
      }
      else
      {
        int v19 = (void *)MEMORY[0x230FBD990]();
        id v20 = *(id *)(a1 + 40);
        long long v21 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          int v22 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          uint64_t v32 = v22;
          uint64_t v23 = "%{public}@Home does not currently have a user account. Not attempting to update mergeID.";
          uint64_t v24 = v21;
          os_log_type_t v25 = OS_LOG_TYPE_ERROR;
LABEL_14:
          _os_log_impl(&dword_22F52A000, v24, v25, v23, buf, 0xCu);
        }
      }

      goto LABEL_16;
    }
  }
LABEL_17:
}

void __54__HMDHome_handleCurrentAccountMergeIdentifierUpdated___block_invoke_1926(id *a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v2 = [a1[4] uuid];
  uint64_t v3 = [a1[5] managedObjectContext];
  id v4 = +[_MKFHome findHomeMemberWithUUID:v2 context:v3];

  id v5 = [a1[6] senderCorrelationIdentifier];
  [v4 setIdsMergeIdentifier:v5];

  id v6 = a1[5];
  id v12 = 0;
  LOBYTE(v3) = [v6 save:&v12];
  id v7 = v12;
  if ((v3 & 1) == 0)
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = a1[7];
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v14 = v11;
      __int16 v15 = 2112;
      id v16 = v7;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to update mergeID for owner: %@", buf, 0x16u);
    }
  }
}

- (void)handleAccountHandlesUpdated:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __39__HMDHome_handleAccountHandlesUpdated___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __39__HMDHome_handleAccountHandlesUpdated___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  id v7 = v3;

  id v4 = +[HMDAppleAccountManager sharedManager];
  id v5 = [v4 account];
  int v6 = [v7 isEqualToAccount:v5];

  if (v6) {
    __updateAccountHandleForCurrentUser(*(void **)(a1 + 40), v7);
  }
}

- (void)removeUnconfiguredResidentDeviceWithUserID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __54__HMDHome_removeUnconfiguredResidentDeviceWithUserID___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __54__HMDHome_removeUnconfiguredResidentDeviceWithUserID___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) unconfiguredResidentDevices];
  objc_msgSend(v2, "hmf_firstObjectWithValue:forKeyPath:", *(void *)(a1 + 40), @"userID");
  id v4 = (id)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    [v4 setConfigurationState:2];
    uint64_t v3 = [*(id *)(a1 + 32) unconfiguredResidentDevices];
    [v3 removeObject:v4];
  }
}

- (void)addUnconfiguredResidentDevice:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __41__HMDHome_addUnconfiguredResidentDevice___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __41__HMDHome_addUnconfiguredResidentDevice___block_invoke(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v2 = [*(id *)(a1 + 32) unconfiguredResidentDevices];
  uint64_t v3 = [(HMDResidentUser *)v2 countByEnumeratingWithState:&v31 objects:v40 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v32;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v32 != v5) {
        objc_enumerationMutation(v2);
      }
      id v7 = [*(id *)(*((void *)&v31 + 1) + 8 * v6) device];
      int v8 = [v7 isEqual:*(void *)(a1 + 40)];

      if (v8) {
        break;
      }
      if (v4 == ++v6)
      {
        uint64_t v4 = [(HMDResidentUser *)v2 countByEnumeratingWithState:&v31 objects:v40 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    long long v21 = (void *)MEMORY[0x230FBD990]();
    id v22 = *(id *)(a1 + 32);
    uint64_t v23 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO)) {
      goto LABEL_25;
    }
    uint64_t v24 = HMFGetLogIdentifier();
    os_log_type_t v25 = [*(id *)(a1 + 40) shortDescription];
    *(_DWORD *)buf = 138543618;
    uint64_t v37 = v24;
    __int16 v38 = 2112;
    uint64_t v39 = v25;
    long long v26 = "%{public}@Not adding resident device, %@, to unconfigured list since it already exists";
  }
  else
  {
LABEL_9:

    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "_residentUsers", 0);
    id v2 = (HMDResidentUser *)objc_claimAutoreleasedReturnValue();
    uint64_t v9 = [(HMDResidentUser *)v2 countByEnumeratingWithState:&v27 objects:v35 count:16];
    if (!v9)
    {
LABEL_17:

      __int16 v15 = (void *)MEMORY[0x230FBD990]();
      id v16 = *(id *)(a1 + 32);
      uint64_t v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        id v18 = HMFGetLogIdentifier();
        int v19 = [*(id *)(a1 + 40) shortDescription];
        *(_DWORD *)buf = 138543618;
        uint64_t v37 = v18;
        __int16 v38 = 2112;
        uint64_t v39 = v19;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Adding resident device, %@, to unconfigured list and posting notification", buf, 0x16u);
      }
      id v2 = [[HMDResidentUser alloc] initWithDevice:*(void *)(a1 + 40) home:*(void *)(a1 + 32) pairingIdentity:0 configurationState:1];
      id v20 = [*(id *)(a1 + 32) unconfiguredResidentDevices];
      [v20 addObject:v2];

      [(HMDUser *)v2 setHome:*(void *)(a1 + 32)];
      [*(id *)(a1 + 32) _configureUnconfiguredResident:v2 desiredConfigState:2];
      goto LABEL_26;
    }
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v28;
LABEL_11:
    uint64_t v12 = 0;
    while (1)
    {
      if (*(void *)v28 != v11) {
        objc_enumerationMutation(v2);
      }
      char v13 = [*(id *)(*((void *)&v27 + 1) + 8 * v12) device];
      int v14 = [v13 isEqual:*(void *)(a1 + 40)];

      if (v14) {
        break;
      }
      if (v10 == ++v12)
      {
        uint64_t v10 = [(HMDResidentUser *)v2 countByEnumeratingWithState:&v27 objects:v35 count:16];
        if (v10) {
          goto LABEL_11;
        }
        goto LABEL_17;
      }
    }
    long long v21 = (void *)MEMORY[0x230FBD990]();
    id v22 = *(id *)(a1 + 32);
    uint64_t v23 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO)) {
      goto LABEL_25;
    }
    uint64_t v24 = HMFGetLogIdentifier();
    os_log_type_t v25 = [*(id *)(a1 + 40) shortDescription];
    *(_DWORD *)buf = 138543618;
    uint64_t v37 = v24;
    __int16 v38 = 2112;
    uint64_t v39 = v25;
    long long v26 = "%{public}@Not adding resident device, %@, to unconfigured list since it already exists in users";
  }
  _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, v26, buf, 0x16u);

LABEL_25:
LABEL_26:
}

- (void)timerDidFire:(id)a3
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = (HMFTimer *)a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  uint64_t v6 = [(HMDHome *)self modifyNotificationsCoalesceTimer];

  if (v6 == v4)
  {
    [(HMDHome *)self _handleCoalescedModifyNotifications];
  }
  else
  {
    id v7 = [(HMDHome *)self disableNotificationTimer];

    if (v7 == v4)
    {
      [(HMDHome *)self _handleDisableNotificationsTimerFired];
    }
    else
    {
      int v8 = [(HMDHome *)self reachabilityNotificationTimer];

      if (v8 == v4)
      {
        [(HMDHome *)self _handleRemoteReachabilityNotificationTimerFired];
      }
      else
      {
        uint64_t v9 = [(HMDHome *)self pendingResponsesTimer];

        if (v9 == v4)
        {
          [(HMDHome *)self _handlePendingResponsesTimerFired:0];
        }
        else if (self->_homeLocationTimer == v4)
        {
          uint64_t v10 = (void *)MEMORY[0x230FBD990]();
          uint64_t v11 = self;
          uint64_t v12 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            char v13 = HMFGetLogIdentifier();
            int v14 = 138543362;
            __int16 v15 = v13;
            _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Evaluating home location", (uint8_t *)&v14, 0xCu);
          }
          [(HMDHome *)v11 updateHomeLocation];
        }
        else if (self->_accessoryReachabilityUpdatesTimer == v4)
        {
          [(HMDHome *)self _handleAccessoryReachabilityUpdatesTimerFired];
        }
      }
    }
  }
}

- (void)_handleAccessoryReachabilityUpdatesTimerFired
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v3 = [(NSMutableSet *)self->_reachabilityUpdatedAccessories allObjects];
  [(NSMutableSet *)self->_reachabilityUpdatedAccessories removeAllObjects];
  os_unfair_recursive_lock_unlock();
  uint64_t v4 = self;
  id v66 = v3;
  uint64_t v58 = [v66 count];
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  char v69 = v4;
  uint64_t v6 = HMFGetOSLogHandle();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v58)
  {
    if (v7)
    {
      int v8 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v96 = v8;
      __int16 v97 = 2048;
      uint64_t v98 = v58;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Sending accessory reachability updates - number of entries %lu", buf, 0x16u);
    }
    id v68 = [MEMORY[0x263EFF9A0] dictionaryWithCapacity:v58];
    uint64_t v60 = [MEMORY[0x263EFF9A0] dictionaryWithCapacity:v58];
    id v67 = [MEMORY[0x263EFF980] arrayWithCapacity:v58];
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    obuint64_t j = [(HMDHome *)v69 accessories];
    uint64_t v9 = [obj countByEnumeratingWithState:&v82 objects:buf count:16];
    if (v9)
    {
      id v63 = *(id *)v83;
      uint64_t v61 = *MEMORY[0x263F0B4A0];
      uint64_t v59 = *MEMORY[0x263F0B7F0];
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(id *)v83 != v63) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void **)(*((void *)&v82 + 1) + 8 * i);
          uint64_t v12 = objc_msgSend(v11, "uuid", v58);
          char v13 = [v12 UUIDString];

          if ([v66 containsObject:v13])
          {
            int v14 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v11, "isReachableForXPCClients"));
            __int16 v15 = [v11 messageSendPolicy];
            uint64_t v16 = objc_msgSend(v68, "hmf_mutableDictionaryForKey:", v15);
            if (!v16)
            {
              uint64_t v16 = [MEMORY[0x263EFF9A0] dictionaryWithCapacity:v58];
              [v68 setObject:v16 forKey:v15];
            }
            uint64_t v17 = [MEMORY[0x263EFF9A0] dictionaryWithCapacity:3];
            [v17 setObject:v14 forKeyedSubscript:@"kAccessoryIsReachableKey"];
            id v18 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v11, "reachableTransports"));
            [v17 setObject:v18 forKeyedSubscript:v61];

            id v19 = v11;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              id v20 = v19;
            }
            else {
              id v20 = 0;
            }
            id v21 = v20;

            if (v21)
            {
              id v22 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v21, "suspendedState"));
              [v17 setObject:v22 forKeyedSubscript:v59];
            }
            uint64_t v23 = (void *)[v17 copy];
            [v16 setObject:v23 forKeyedSubscript:v13];

            if (([v15 entitlements] & 4) == 0)
            {
              uint64_t v24 = objc_msgSend(v60, "hmf_mutableDictionaryForKey:", v15);
              if (!v24)
              {
                uint64_t v24 = [MEMORY[0x263EFF9A0] dictionaryWithCapacity:v58];
                [v60 setObject:v24 forKey:v15];
              }
              char v93 = @"kAccessoryIsReachableKey";
              id v94 = v14;
              os_log_type_t v25 = [NSDictionary dictionaryWithObjects:&v94 forKeys:&v93 count:1];
              [v24 setObject:v25 forKeyedSubscript:v13];
            }
          }
        }
        uint64_t v9 = [obj countByEnumeratingWithState:&v82 objects:buf count:16];
      }
      while (v9);
    }

    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    id v64 = [v68 allKeys];
    uint64_t v26 = [v64 countByEnumeratingWithState:&v78 objects:v92 count:16];
    if (v26)
    {
      uint64_t v27 = *(void *)v79;
      uint64_t v28 = *MEMORY[0x263F0B238];
      do
      {
        for (uint64_t j = 0; j != v26; ++j)
        {
          if (*(void *)v79 != v27) {
            objc_enumerationMutation(v64);
          }
          long long v30 = *(void **)(*((void *)&v78 + 1) + 8 * j);
          long long v31 = objc_msgSend(v68, "hmf_mutableDictionaryForKey:", v30, v58);
          if ([v31 count])
          {
            long long v32 = (void *)MEMORY[0x263F42590];
            long long v33 = [(HMDHome *)v69 messageDestination];
            uint64_t v90 = @"kAccessoriesListKey";
            long long v34 = (void *)[v31 copy];
            uint64_t v91 = v34;
            uint64_t v35 = [NSDictionary dictionaryWithObjects:&v91 forKeys:&v90 count:1];
            int v36 = [v32 messageWithName:v28 destination:v33 payload:v35];

            if (([v30 entitlements] & 4) != 0) {
              uint64_t v37 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", [v30 entitlements], objc_msgSend(v30, "options"), 1);
            }
            else {
              uint64_t v37 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", [v30 entitlements] | 4, objc_msgSend(v30, "options"), 1);
            }
            __int16 v38 = v37;
            [v36 setSendPolicy:v37];

            [v67 addObject:v36];
          }
        }
        uint64_t v26 = [v64 countByEnumeratingWithState:&v78 objects:v92 count:16];
      }
      while (v26);
    }

    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    id v65 = [v60 allKeys];
    uint64_t v39 = [v65 countByEnumeratingWithState:&v74 objects:v89 count:16];
    if (v39)
    {
      uint64_t v40 = *(void *)v75;
      uint64_t v41 = *MEMORY[0x263F0B238];
      do
      {
        for (uint64_t k = 0; k != v39; ++k)
        {
          if (*(void *)v75 != v40) {
            objc_enumerationMutation(v65);
          }
          id v43 = *(void **)(*((void *)&v74 + 1) + 8 * k);
          id v44 = objc_msgSend(v68, "hmf_mutableDictionaryForKey:", v43, v58);
          if ([v44 count])
          {
            id v45 = (void *)MEMORY[0x263F42590];
            int v46 = [(HMDHome *)v69 messageDestination];
            uint64_t v87 = @"kAccessoriesListKey";
            id v47 = (void *)[v44 copy];
            v88 = v47;
            uint64_t v48 = [NSDictionary dictionaryWithObjects:&v88 forKeys:&v87 count:1];
            id v49 = [v45 messageWithName:v41 destination:v46 payload:v48];

            [v49 setRequiresNoSPIEntitlement:1];
            id v50 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", [v43 entitlements], objc_msgSend(v43, "options"), 1);
            [v49 setSendPolicy:v50];
            [v67 addObject:v49];
          }
        }
        uint64_t v39 = [v65 countByEnumeratingWithState:&v74 objects:v89 count:16];
      }
      while (v39);
    }

    char v51 = (void *)[v67 copy];
  }
  else
  {
    if (v7)
    {
      uint64_t v52 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v96 = v52;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Reachability update timer fired but no entries", buf, 0xCu);
    }
    char v51 = (void *)MEMORY[0x263EFFA68];
  }

  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  uint64_t v53 = [v51 countByEnumeratingWithState:&v70 objects:v86 count:16];
  if (v53)
  {
    uint64_t v54 = *(void *)v71;
    do
    {
      for (uint64_t m = 0; m != v53; ++m)
      {
        if (*(void *)v71 != v54) {
          objc_enumerationMutation(v51);
        }
        uint64_t v56 = *(void *)(*((void *)&v70 + 1) + 8 * m);
        int v57 = [(HMDHome *)v69 msgDispatcher];
        [v57 sendMessage:v56];
      }
      uint64_t v53 = [v51 countByEnumeratingWithState:&v70 objects:v86 count:16];
    }
    while (v53);
  }
}

- (void)notifyClientsOfReachabilityUpdateForAccessory:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __57__HMDHome_notifyClientsOfReachabilityUpdateForAccessory___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  uint64_t v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __57__HMDHome_notifyClientsOfReachabilityUpdateForAccessory___block_invoke(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) uuid];
  uint64_t v3 = [v2 UUIDString];

  if (v3)
  {
    os_unfair_recursive_lock_lock_with_options();
    if ([*(id *)(*(void *)(a1 + 40) + 112) containsObject:v3])
    {
      BOOL v4 = 0;
    }
    else
    {
      [*(id *)(*(void *)(a1 + 40) + 112) addObject:v3];
      BOOL v4 = [*(id *)(*(void *)(a1 + 40) + 112) count] == 1;
    }
    uint64_t v10 = os_unfair_recursive_lock_unlock();
    uint64_t v11 = (void *)MEMORY[0x230FBD990](v10);
    id v12 = *(id *)(a1 + 40);
    char v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      int v14 = HMFGetLogIdentifier();
      __int16 v15 = [*(id *)(a1 + 32) shortDescription];
      uint64_t v16 = HMFBooleanToString();
      int v17 = 138543874;
      id v18 = v14;
      __int16 v19 = 2112;
      id v20 = v15;
      __int16 v21 = 2112;
      id v22 = v16;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Queuing up reachability update for accessory %@. Started timer: %@", (uint8_t *)&v17, 0x20u);
    }
    if (v4) {
      [*(id *)(*(void *)(a1 + 40) + 104) resume];
    }
  }
  else
  {
    uint64_t v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = *(id *)(a1 + 40);
    BOOL v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      uint64_t v9 = *(void **)(a1 + 32);
      int v17 = 138543618;
      id v18 = v8;
      __int16 v19 = 2112;
      id v20 = v9;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@Attempt to queue reachability update for accessory with no UUID - %@", (uint8_t *)&v17, 0x16u);
    }
  }
}

- (void)_handleDisableNotificationsTimerFired
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  BOOL v4 = [(HMDHome *)self notificationRegistrations];
  uint64_t v5 = (void *)[v4 copy];

  id v6 = [(HMDHome *)self notificationDeregistrations];
  BOOL v7 = (void *)[v6 copy];

  id v8 = (void *)MEMORY[0x230FBD990]();
  uint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    id v12 = [v5 shortDescription];
    char v13 = [v7 shortDescription];
    *(_DWORD *)buf = 138543874;
    uint64_t v42 = v11;
    __int16 v43 = 2112;
    id v44 = v12;
    __int16 v45 = 2112;
    int v46 = v13;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Notification disable timer fired - registrations %@  deregistrations %@", buf, 0x20u);
  }
  [(HMDHome *)v9 setDisableNotificationTimer:0];
  int v14 = [(HMDHome *)v9 notificationRegistrationsForAppleMediaAccessories];
  uint64_t v15 = [v14 count];

  [(HMDHome *)v9 _applyNotificationDeregistrations];
  uint64_t v16 = [(HMDHome *)v9 notificationRegistrations];
  uint64_t v17 = [v16 count];

  id v18 = [(HMDHome *)v9 notificationRegistrationsForAppleMediaAccessories];
  uint64_t v19 = [v18 count];

  if (!v19 && v15)
  {
    id v20 = (void *)MEMORY[0x230FBD990]();
    __int16 v21 = v9;
    id v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v42 = v23;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Modifying Apple Media notification registrations with devices due to HomeKit client no longer active", buf, 0xCu);
    }
    uint64_t v24 = [(HMDHome *)v21 mediaStateSubscriber];
    [v24 unsubscribeForAppleMediaStateWithSubscriptionToken:@"HMDHomeClientMediaStateRegistrationToken"];
  }
  if (!v17)
  {
    os_log_type_t v25 = (void *)MEMORY[0x230FBD990]();
    uint64_t v26 = v9;
    uint64_t v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v42 = v28;
      _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to HomeKit client no longer active", buf, 0xCu);
    }
    [(HMDHome *)v26 _subscribeForHomeNotificationsFromRemoteGateway:0];
    -[HMDHome _subscribeForHomeNotificationsOnDirectTransports:](v26, 0);
    long long v29 = [MEMORY[0x263EFF910] date];
    [(HMDHome *)v26 setNotificationsUpdatedTime:v29];

    long long v30 = [(HMDHome *)v26 homeManager];
    long long v31 = [v30 chipDataSource];
    [v31 updateNotificationsEnabled:0 forHome:v26 keepAliveOnly:0];

    long long v32 = objc_msgSend(NSNumber, "numberWithBool:", 0, @"kCharacteristicNotificationEnableKey");
    v40[0] = v32;
    v39[1] = *MEMORY[0x263F0C828];
    long long v33 = [NSNumber numberWithBool:0];
    v40[1] = v33;
    v39[2] = @"kCharacteristicNotificationEnableTime";
    long long v34 = [(HMDHome *)v26 notificationsUpdatedTime];
    v40[2] = v34;
    uint64_t v35 = [NSDictionary dictionaryWithObjects:v40 forKeys:v39 count:3];

    int v36 = [MEMORY[0x263F42568] entitledMessageWithName:*MEMORY[0x263F0E9C0] messagePayload:v35];
    uint64_t v37 = [(HMDHome *)v26 msgDispatcher];
    __int16 v38 = [(HMDHome *)v26 uuid];
    [v37 sendMessage:v36 target:v38];

    logAndPostNotification(@"HMDHomeDidDisableCharacteristicNotifyEventNotification", v26, 0);
  }
}

- (void)_subscribeForHomeNotificationsOnDirectTransports:(void *)a1
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (a1)
  {
    int v2 = a2;
    BOOL v4 = [a1 _characteristicNotificationPayloadsOnDirectTransports:a2];
    uint64_t v5 = [v4 objectAtIndex:0];
    id v6 = [v4 objectAtIndex:1];
    if ([v5 count] || objc_msgSend(v6, "count"))
    {
      if ([v5 count])
      {
        BOOL v7 = (void *)MEMORY[0x230FBD990]();
        id v8 = a1;
        uint64_t v9 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v10 = HMFGetLogIdentifier();
          uint64_t v11 = [v5 shortDescription];
          *(_DWORD *)buf = 138543618;
          uint64_t v58 = v10;
          __int16 v59 = 2112;
          uint64_t v60 = v11;
          _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Deregistering notifications %@ with direct transports", buf, 0x16u);
        }
      }
      int v46 = v2;
      __int16 v45 = v6;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      id v44 = v5;
      id v12 = v5;
      uint64_t v13 = [v12 countByEnumeratingWithState:&v51 objects:v56 count:16];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = *(void *)v52;
        do
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            if (*(void *)v52 != v15) {
              objc_enumerationMutation(v12);
            }
            uint64_t v17 = *(void *)(*((void *)&v51 + 1) + 8 * i);
            id v18 = objc_msgSend(v12, "objectForKey:", v17, v44);
            uint64_t v19 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v17];
            id v20 = [a1 accessoryWithUUID:v19];

            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              __int16 v21 = v20;
            }
            else {
              __int16 v21 = 0;
            }
            id v22 = v21;

            [v22 enableNotification:0 forCharacteristics:v18 message:0 clientIdentifier:@"com.apple.HomeKitDaemon.homeNotifications"];
          }
          uint64_t v14 = [v12 countByEnumeratingWithState:&v51 objects:v56 count:16];
        }
        while (v14);
      }

      if ([v45 count])
      {
        uint64_t v23 = (void *)MEMORY[0x230FBD990]();
        id v24 = a1;
        os_log_type_t v25 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v26 = HMFGetLogIdentifier();
          uint64_t v27 = [v45 shortDescription];
          *(_DWORD *)buf = 138543618;
          uint64_t v58 = v26;
          __int16 v59 = 2112;
          uint64_t v60 = v27;
          _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_DEBUG, "%{public}@Registering notifications %@ with direct transports", buf, 0x16u);
        }
      }
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id v28 = v45;
      uint64_t v29 = [v28 countByEnumeratingWithState:&v47 objects:v55 count:16];
      uint64_t v5 = v44;
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = *(void *)v48;
        do
        {
          for (uint64_t j = 0; j != v30; ++j)
          {
            if (*(void *)v48 != v31) {
              objc_enumerationMutation(v28);
            }
            uint64_t v33 = *(void *)(*((void *)&v47 + 1) + 8 * j);
            long long v34 = objc_msgSend(v28, "objectForKey:", v33, v44);
            uint64_t v35 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v33];
            int v36 = [a1 accessoryWithUUID:v35];

            id v37 = v36;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              __int16 v38 = v37;
            }
            else {
              __int16 v38 = 0;
            }
            id v39 = v38;

            if (v39)
            {
              if (v46) {
                [v39 enableNotification:1 forCharacteristics:v34 message:0 clientIdentifier:@"com.apple.HomeKitDaemon.homeNotifications"];
              }
              else {
                [v39 updateNotificationEnabled:0 forCharacteristics:v34 onBehalfOf:@"com.apple.HomeKitDaemon.homeNotifications"];
              }
              [v39 checkHAPSessionRestore];
            }
          }
          uint64_t v30 = [v28 countByEnumeratingWithState:&v47 objects:v55 count:16];
        }
        while (v30);
      }

      id v6 = v45;
    }
    else
    {
      uint64_t v40 = (void *)MEMORY[0x230FBD990]();
      id v41 = a1;
      uint64_t v42 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        __int16 v43 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v58 = v43;
        _os_log_impl(&dword_22F52A000, v42, OS_LOG_TYPE_INFO, "%{public}@Not registering notifications on direct transports since we have no modifications", buf, 0xCu);
      }
    }
  }
}

- (void)_handleCoalescedModifyNotifications
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  BOOL v4 = (void *)MEMORY[0x230FBD990]([(HMDHome *)self setModifyNotificationsCoalesceTimer:0]);
  uint64_t v5 = self;
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    BOOL v7 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v18 = v7;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to notification coalesce timer firing", buf, 0xCu);
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __46__HMDHome__handleCoalescedModifyNotifications__block_invoke;
  aBlock[3] = &unk_264A17018;
  void aBlock[4] = v5;
  id v8 = (void (**)(void *, void *, void *, void *, void *, uint64_t))_Block_copy(aBlock);
  uint64_t v9 = [(HMDHome *)v5 enableNotificationPayload];
  uint64_t v10 = [(HMDHome *)v5 pendingCharacteristicThresholdPayload];
  uint64_t v11 = [(HMDHome *)v5 actionSetsEnableNotificationPayload];
  id v12 = [(HMDHome *)v5 matterAttributesEnableNotificationPayload];
  v8[2](v8, v9, v10, v11, v12, 1);

  uint64_t v13 = [(HMDHome *)v5 disableNotificationPayload];
  uint64_t v14 = [MEMORY[0x263EFF9A0] dictionary];
  uint64_t v15 = [(HMDHome *)v5 actionSetsDisableNotificationPayload];
  v8[2](v8, v13, v14, v15, 0, 0);
}

void __46__HMDHome__handleCoalescedModifyNotifications__block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5, unsigned int a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  if ([v11 count] || objc_msgSend(v13, "count") || objc_msgSend(v14, "count"))
  {
    unsigned int v24 = a6;
    uint64_t v15 = objc_msgSend(v11, "na_dictionaryByMappingValues:", &__block_literal_global_1922);
    uint64_t v23 = (void *)[v15 copy];

    uint64_t v16 = (void *)[v13 copy];
    uint64_t v17 = (void *)[v14 copy];
    os_log_type_t v25 = v12;
    id v18 = (void *)[v12 copy];
    uint64_t v19 = (void *)MEMORY[0x230FBD990]();
    id v20 = [*(id *)(a1 + 32) notificationRegistrations];
    uint64_t v21 = [v20 count];

    if (v21)
    {
      v26[0] = MEMORY[0x263EF8330];
      v26[1] = 3221225472;
      void v26[2] = __46__HMDHome__handleCoalescedModifyNotifications__block_invoke_3;
      v26[3] = &unk_264A16FF0;
      void v26[4] = *(void *)(a1 + 32);
      uint64_t v22 = objc_msgSend(v18, "na_filter:", v26);

      id v18 = (void *)v22;
    }
    [*(id *)(a1 + 32) _modifyCharacteristicNotificationsOnResident:v23 characteristicChangeThresholds:v18 mediaNotifications:MEMORY[0x263EFFA78] actionSetNotificationPayload:v16 matterAttributeNotifications:v17 enableNotification:v24];
    [v11 removeAllObjects];
    id v12 = v25;
    [v25 removeAllObjects];
    [v13 removeAllObjects];
    [v14 removeAllObjects];
  }
}

BOOL __46__HMDHome__handleCoalescedModifyNotifications__block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v5];
  if (v7)
  {
    id v8 = [*(id *)(a1 + 32) accessoryWithUUID:v7];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    id v10 = v9;

    if (v10)
    {
      uint64_t v26 = v7;
      id v27 = v5;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      id v11 = [v6 allKeys];
      uint64_t v32 = [v11 countByEnumeratingWithState:&v33 objects:v37 count:16];
      if (v32)
      {
        uint64_t v12 = *(void *)v34;
        uint64_t v29 = v11;
        id v30 = v6;
        uint64_t v28 = *(void *)v34;
        do
        {
          for (uint64_t i = 0; i != v32; ++i)
          {
            if (*(void *)v34 != v12) {
              objc_enumerationMutation(v11);
            }
            id v14 = *(void **)(*((void *)&v33 + 1) + 8 * i);
            uint64_t v15 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v14, "integerValue"));
            if (v15)
            {
              uint64_t v16 = [v10 hmdCharacteristicForInstanceId:v15];
              uint64_t v17 = v16;
              if (v16)
              {
                id v18 = [v16 service];
                if (!v18) {
                  goto LABEL_15;
                }
                uint64_t v19 = [*(id *)(a1 + 32) hapMetadata];
                id v20 = [v17 type];
                [v18 type];
                id v21 = v10;
                v23 = uint64_t v22 = a1;
                int v31 = [v19 shouldEnableHomeNotificationForCharacteristicType:v20 serviceType:v23];

                a1 = v22;
                id v10 = v21;
                uint64_t v12 = v28;

                id v11 = v29;
                id v6 = v30;
                if (v31) {
LABEL_15:
                }
                  [v6 setObject:0 forKeyedSubscript:v14];
              }
              else
              {
                [v6 setObject:0 forKeyedSubscript:v14];
              }
            }
            else
            {
              [v6 setObject:0 forKeyedSubscript:v14];
            }
          }
          uint64_t v32 = [v11 countByEnumeratingWithState:&v33 objects:v37 count:16];
        }
        while (v32);
      }

      BOOL v24 = [v6 count] != 0;
      BOOL v7 = v26;
      id v5 = v27;
    }
    else
    {
      BOOL v24 = 0;
    }
  }
  else
  {
    BOOL v24 = 0;
  }

  return v24;
}

id __46__HMDHome__handleCoalescedModifyNotifications__block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (void *)[a3 copy];
  return v3;
}

- (void)residentDeviceManagerDidUpdateResidents:(id)a3
{
  BOOL v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __51__HMDHome_residentDeviceManagerDidUpdateResidents___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __51__HMDHome_residentDeviceManagerDidUpdateResidents___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _evaluateOwnerTrustZoneCapabilityAndNotify];
}

- (void)residentDeviceManager:(id)a3 didUpdatePrimaryResident:(id)a4 previousPrimaryResident:(id)a5
{
  id v7 = a4;
  id v8 = a5;
  uint64_t v9 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __82__HMDHome_residentDeviceManager_didUpdatePrimaryResident_previousPrimaryResident___block_invoke;
  block[3] = &unk_264A2F2F8;
  void block[4] = self;
  id v13 = v7;
  id v14 = v8;
  id v10 = v8;
  id v11 = v7;
  dispatch_async(v9, block);
}

void __82__HMDHome_residentDeviceManager_didUpdatePrimaryResident_previousPrimaryResident___block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (([*(id *)(a1 + 32) isOwnerUser] & 1) == 0)
  {
    int v2 = [*(id *)(a1 + 32) residentSyncManager];
    [v2 performSync];
  }
  uint64_t v3 = (void *)MEMORY[0x230FBD990]();
  id v4 = *(id *)(a1 + 32);
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    int v12 = 138543874;
    id v13 = v6;
    __int16 v14 = 2112;
    uint64_t v15 = v7;
    __int16 v16 = 2112;
    uint64_t v17 = v8;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Scheduling re-subscription for new primary resident: %@, old primary: %@", (uint8_t *)&v12, 0x20u);
  }
  uint64_t v9 = *(void **)(a1 + 32);
  id v10 = [*(id *)(a1 + 48) device];
  [v9 resubscribeForNotificationsOnResident:v10];

  [*(id *)(a1 + 32) migrateAfterResidentChange];
  [*(id *)(a1 + 32) reEvaluateHomeHubState];
  id v11 = [*(id *)(a1 + 32) stagedRemoteReachabilityRegistration];
  [v11 resetAndStagePriorValue];
}

- (void)residentDeviceManager:(id)a3 didUpdateResidentAvailable:(BOOL)a4
{
  id v6 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __60__HMDHome_residentDeviceManager_didUpdateResidentAvailable___block_invoke;
  v7[3] = &unk_264A2B870;
  void v7[4] = self;
  BOOL v8 = a4;
  dispatch_async(v6, v7);
}

uint64_t __60__HMDHome_residentDeviceManager_didUpdateResidentAvailable___block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = [*(id *)(a1 + 32) shortDescription];
    uint64_t v7 = (void *)v6;
    int v8 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)buf = 138543874;
    os_log_type_t v25 = v5;
    if (v8) {
      uint64_t v9 = @"available";
    }
    else {
      uint64_t v9 = @"unavailable";
    }
    __int16 v26 = 2112;
    uint64_t v27 = v6;
    __int16 v28 = 2112;
    uint64_t v29 = v9;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@[%@] Resident devices are %@ for this home", buf, 0x20u);
  }
  if (!*(unsigned char *)(a1 + 40))
  {
    [*(id *)(a1 + 32) migrateAfterResidentChange];
    if (!*(unsigned char *)(a1 + 40))
    {
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      id v10 = objc_msgSend(*(id *)(a1 + 32), "_residentUsers", 0);
      uint64_t v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)v20;
        do
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v20 != v13) {
              objc_enumerationMutation(v10);
            }
            [*(id *)(a1 + 32) _notifyClientsOfUpdatedResidentUser:*(void *)(*((void *)&v19 + 1) + 8 * i)];
          }
          uint64_t v12 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
        }
        while (v12);
      }

      uint64_t v15 = [*(id *)(a1 + 32) homeManager];
      __int16 v16 = [*(id *)(a1 + 32) uuid];
      [v15 electRemoteAccessPeerForHome:v16];

      if (([*(id *)(a1 + 32) isOwnerUser] & 1) == 0)
      {
        uint64_t v17 = [*(id *)(a1 + 32) residentDeviceManager];
        [v17 discoverPrimaryResidentForRequester:0];
      }
    }
  }
  return [*(id *)(a1 + 32) reEvaluateHomeHubState];
}

- (void)retrieveOperationalCertificatesForFabricID:(id)a3 commissionerNodeID:(id)a4 commissioneeNodeID:(id)a5 publicKey:(id)a6 completion:(id)a7
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v35 = a4;
  id v36 = a5;
  id v37 = a6;
  id v13 = a7;
  __int16 v14 = [(HMDHome *)self primaryResident];
  uint64_t v15 = v14;
  if (v14
    && ([v14 device], (__int16 v16 = objc_claimAutoreleasedReturnValue()) != 0)
    && ([(HMDHome *)self primaryResident],
        uint64_t v17 = objc_claimAutoreleasedReturnValue(),
        char v18 = [v17 isReachable],
        v17,
        v16,
        (v18 & 1) != 0))
  {
    long long v19 = [HMDRemoteDeviceMessageDestination alloc];
    long long v20 = [(HMDHome *)self uuid];
    long long v21 = [v15 device];
    long long v22 = [(HMDRemoteDeviceMessageDestination *)v19 initWithTarget:v20 device:v21];

    uint64_t v23 = [MEMORY[0x263EFF9A0] dictionary];
    [v23 setObject:v36 forKeyedSubscript:@"HMDHomeCommissioningDeviceNodeIDMessageKey"];
    [v23 setObject:v12 forKeyedSubscript:@"HMDHomeCommissioningFabricIDMessageKey"];
    [v23 setObject:v12 forKeyedSubscript:@"HMDHomeCommissioningFabricIndexMessageKey"];
    [v23 setObject:v37 forKeyedSubscript:@"HMDHomeCommissioningPublicKeyMessageKey"];
    if (isFeatureMatterLocalFabricConfigEnabled()) {
      [v23 setObject:v35 forKeyedSubscript:@"HMDHomeCommissioningCommissionerNodeIDMessageKey"];
    }
    BOOL v24 = (void *)[objc_alloc(MEMORY[0x263F42590]) initWithName:@"HMDHomeRequestCommissioningCertificatesMessage" destination:v22 payload:v23];
    [v24 setRemote:1];
    [v24 setSecureRemote:1];
    objc_initWeak(&location, self);
    v38[0] = MEMORY[0x263EF8330];
    v38[1] = 3221225472;
    v38[2] = __113__HMDHome_retrieveOperationalCertificatesForFabricID_commissionerNodeID_commissioneeNodeID_publicKey_completion___block_invoke;
    v38[3] = &unk_264A2EAE0;
    objc_copyWeak(&v40, &location);
    id v39 = v13;
    context = (void *)MEMORY[0x230FBD990]([v24 setResponseHandler:v38]);
    os_log_type_t v25 = self;
    HMFGetOSLogHandle();
    __int16 v26 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v27 = (id)objc_claimAutoreleasedReturnValue();
      __int16 v28 = [v24 shortDescription];
      *(_DWORD *)buf = 138543618;
      id v43 = v27;
      __int16 v44 = 2112;
      __int16 v45 = v28;
      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Sending message %@ to fetch Matter operational certificates from the primary resident", buf, 0x16u);
    }
    uint64_t v29 = [(HMDHome *)v25 msgDispatcher];
    [v29 sendMessage:v24];

    objc_destroyWeak(&v40);
    objc_destroyWeak(&location);
  }
  else
  {
    uint64_t v30 = (void *)MEMORY[0x230FBD990]();
    int v31 = self;
    uint64_t v32 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      long long v33 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v43 = v33;
      _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_ERROR, "%{public}@Primary resident is not available or it is unreachable", buf, 0xCu);
    }
    long long v22 = [MEMORY[0x263F087E8] hmErrorWithCode:91];
    (*((void (**)(id, void, void, void, void, HMDRemoteDeviceMessageDestination *))v13 + 2))(v13, 0, 0, 0, 0, v22);
  }
}

void __113__HMDHome_retrieveOperationalCertificatesForFabricID_commissionerNodeID_commissioneeNodeID_publicKey_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      int v8 = (void *)MEMORY[0x230FBD990]();
      id v9 = WeakRetained;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v27 = v11;
        __int16 v28 = 2112;
        id v29 = v5;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Request for operational certificates failed with %@", buf, 0x16u);
      }
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else
    {
      id v12 = objc_msgSend(v6, "hmf_dataForKey:", @"HMDHomeCommissioningRootCertMessageKey");
      id v13 = objc_msgSend(v6, "hmf_dataForKey:", @"HMDHomeCommissioningOperationalCertMessageKey");
      __int16 v14 = objc_msgSend(v6, "hmf_numberForKey:", @"HMDHomeCommissioningOwnerNodeIDMessageKey");
      uint64_t v15 = objc_msgSend(v6, "hmf_dataForKey:", @"HMDHomeCommissioningIPKMessageKey");
      context = (void *)MEMORY[0x230FBD990]();
      id v16 = WeakRetained;
      uint64_t v17 = HMFGetOSLogHandle();
      char v18 = v17;
      if (v12 && v13)
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          long long v19 = v23 = v15;
          *(_DWORD *)buf = 138544130;
          id v27 = v19;
          __int16 v28 = 2112;
          id v29 = v12;
          __int16 v30 = 2112;
          int v31 = v13;
          __int16 v32 = 2112;
          long long v33 = v14;
          _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Request for operational certificates successful. rootCertificate %@, operationalCert %@, ownerNodeID %@", buf, 0x2Au);

          uint64_t v15 = v23;
        }

        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      }
      else
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          long long v20 = v24 = v15;
          *(_DWORD *)buf = 138544130;
          id v27 = v20;
          __int16 v28 = 2112;
          id v29 = v12;
          __int16 v30 = 2112;
          int v31 = v13;
          __int16 v32 = 2112;
          long long v33 = v14;
          _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Primary resident returned unexpected values for rootCertificate %@, operationalCert %@, ownerNodeID %@", buf, 0x2Au);

          uint64_t v15 = v24;
        }

        uint64_t v21 = *(void *)(a1 + 32);
        long long v22 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
        (*(void (**)(uint64_t, void, void, void, void, void *))(v21 + 16))(v21, 0, 0, 0, 0, v22);
      }
    }
  }
}

- (void)_fetchMetadataFromPrimaryResidentWithCompletion:(id)a3
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v4 = (void (**)(id, void, void *))a3;
  id v5 = [(HMDHome *)self primaryResident];
  id v6 = [(HMDHome *)self _checkResidentCapabilitiesForCredentialSharing:v5];
  if (v6)
  {
    uint64_t v7 = (void *)MEMORY[0x230FBD990]();
    int v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v29 = v10;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find compatible resident to fetch Thread network credentials", buf, 0xCu);
    }
    v4[2](v4, 0, v6);
  }
  else
  {
    if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
      && (+[HMDDeviceCapabilities deviceCapabilities],
          uint64_t v11 = objc_claimAutoreleasedReturnValue(),
          int v12 = [v11 supportsThreadService],
          v11,
          v12))
    {
      __int16 v26 = @"HMDHomeThreadNetworkCredentialsIsRequestorThreadCapablePayloadKey";
      id v27 = &unk_26E470A08;
      id v13 = [NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    }
    else
    {
      id v13 = 0;
    }
    __int16 v14 = [HMDRemoteDeviceMessageDestination alloc];
    uint64_t v15 = [(HMDHome *)self uuid];
    id v16 = [v5 device];
    uint64_t v17 = [(HMDRemoteDeviceMessageDestination *)v14 initWithTarget:v15 device:v16];

    char v18 = (void *)[objc_alloc(MEMORY[0x263F42590]) initWithName:@"HMDHomeThreadNetworkCredentialsRequestKey" destination:v17 payload:v13];
    [v18 setRemote:1];
    [v18 setSecureRemote:1];
    objc_initWeak((id *)buf, self);
    uint64_t v20 = MEMORY[0x263EF8330];
    uint64_t v21 = 3221225472;
    long long v22 = __59__HMDHome__fetchMetadataFromPrimaryResidentWithCompletion___block_invoke;
    uint64_t v23 = &unk_264A2EAE0;
    objc_copyWeak(&v25, (id *)buf);
    BOOL v24 = v4;
    [v18 setResponseHandler:&v20];
    long long v19 = [(HMDHome *)self msgDispatcher];
    [v19 sendMessage:v18 completionHandler:0];

    objc_destroyWeak(&v25);
    objc_destroyWeak((id *)buf);
  }
}

void __59__HMDHome__fetchMetadataFromPrimaryResidentWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      int v8 = (void *)MEMORY[0x230FBD990]();
      id v9 = WeakRetained;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v41 = v11;
        __int16 v42 = 2112;
        id v43 = v5;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Request for Thread Network credentials failed with error: %@", buf, 0x16u);
      }
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else
    {
      int v12 = objc_msgSend(v6, "hmf_dataForKey:", *MEMORY[0x263F0CEA0]);
      id v39 = 0;
      id v13 = [MEMORY[0x263F08928] unarchivedObjectOfClass:objc_opt_class() fromData:v12 error:&v39];
      id v37 = v39;
      __int16 v14 = objc_msgSend(v6, "hmf_dataForKey:", @"HMHomeThreadNetworkCredentialsMasterKeyMessageKey");
      uint64_t v15 = (void *)MEMORY[0x230FBD990]();
      id v16 = WeakRetained;
      uint64_t v17 = HMFGetOSLogHandle();
      char v18 = v17;
      uint64_t v38 = v14;
      if (v13) {
        BOOL v19 = v14 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19)
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v21 = uint64_t v20 = v12;
          uint64_t v22 = [v38 length];
          *(_DWORD *)buf = 138543874;
          id v41 = v21;
          __int16 v42 = 2112;
          id v43 = v13;
          __int16 v44 = 2048;
          uint64_t v45 = v22;
          _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Missing metadata (%@)/masterKeyData (length %zu) in response", buf, 0x20u);

          int v12 = v20;
        }

        uint64_t v23 = *(void *)(a1 + 32);
        BOOL v24 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
        (*(void (**)(uint64_t, void, void *))(v23 + 16))(v23, 0, v24);
        __int16 v14 = v38;
      }
      else
      {
        id v35 = v6;
        id v36 = v12;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          __int16 v26 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          id v41 = v26;
          _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Request for Thread Network Metadata successful", buf, 0xCu);
        }
        id v34 = objc_alloc(MEMORY[0x263F0E850]);
        __int16 v32 = [v13 name];
        unsigned int v33 = [v13 channel];
        int v31 = [v13 PANID];
        id v27 = [v13 extendedPANID];
        __int16 v28 = [v13 passPhrase];
        id v29 = [v13 PSKc];
        uint64_t v30 = [v13 operationalDataset];
        BOOL v24 = (void *)[v34 initWithName:v32 channel:v33 PANID:v31 extendedPANID:v27 masterKey:v14 passPhrase:v28 PSKc:v29 operationalDataset:v30];

        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
        id v6 = v35;
        int v12 = v36;
      }
    }
  }
}

- (id)_checkResidentCapabilitiesForCredentialSharing:(id)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = v4;
  if (v4 && ([v4 device], id v6 = objc_claimAutoreleasedReturnValue(), v6, v6))
  {
    uint64_t v7 = [v5 capabilities];
    char v8 = [v7 supportsThreadNetworkCredentialSharing];

    if (v8)
    {
      id v9 = 0;
      goto LABEL_12;
    }
    id v10 = (void *)MEMORY[0x230FBD990]();
    uint64_t v15 = self;
    int v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      int v18 = 138543362;
      BOOL v19 = v16;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Primary resident doesn't support Thread Network Credential sharing", (uint8_t *)&v18, 0xCu);
    }
    uint64_t v14 = 92;
  }
  else
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    uint64_t v11 = self;
    int v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = HMFGetLogIdentifier();
      int v18 = 138543362;
      BOOL v19 = v13;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@No primary resident device to request thread credentials from", (uint8_t *)&v18, 0xCu);
    }
    uint64_t v14 = 91;
  }

  id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:v14];
LABEL_12:

  return v9;
}

- (void)removeThreadNetworkPreferredNetworkWithCompletion:(id)a3
{
  id v3 = a3;
  id v4 = +[HMDThreadNetworkMetadataStore defaultStore];
  [v4 removePreferredNetworkWithCompletion:v3];
}

- (void)retrieveThreadNetworkMetadataWithCompletion:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v4 = (void (**)(id, void, void *))a3;
  if (![(HMDHome *)self isSharedAdmin] && ![(HMDHome *)self isOwnerUser])
  {
    uint64_t v14 = (void *)MEMORY[0x230FBD990]();
    uint64_t v15 = self;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v21 = v17;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unexpected user. Returning without retrieving thread network credentials", buf, 0xCu);
    }
    id v6 = [MEMORY[0x263F087E8] hmErrorWithCode:47];
    v4[2](v4, 0, v6);
    goto LABEL_16;
  }
  if (![(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
  {
    id v5 = [(HMDHome *)self residentDeviceManager];
    id v6 = [v5 residentDevices];

    if ([v6 count]
      && ([(HMDHome *)self primaryResident],
          uint64_t v7 = objc_claimAutoreleasedReturnValue(),
          int v8 = [v7 isReachable],
          v7,
          v8))
    {
      v18[0] = MEMORY[0x263EF8330];
      v18[1] = 3221225472;
      v18[2] = __55__HMDHome_retrieveThreadNetworkMetadataWithCompletion___block_invoke;
      v18[3] = &unk_264A27100;
      v18[4] = self;
      BOOL v19 = v4;
      [(HMDHome *)self _fetchMetadataFromPrimaryResidentWithCompletion:v18];
    }
    else if ([(HMDHome *)self isSharedAdmin])
    {
      id v9 = (void *)MEMORY[0x230FBD990]();
      id v10 = self;
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v12 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v21 = v12;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@No resident available. Returning without retrieving thread network credentials", buf, 0xCu);
      }
      id v13 = [MEMORY[0x263F087E8] hmErrorWithCode:91];
      v4[2](v4, 0, v13);
    }
    else
    {
      [(HMDHome *)self _fetchMetadataOnCurrentDeviceWithCompletion:v4];
    }
LABEL_16:

    goto LABEL_17;
  }
  [(HMDHome *)self _fetchMetadataOnCurrentDeviceWithCompletion:v4];
LABEL_17:
}

void __55__HMDHome_retrieveThreadNetworkMetadataWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5 && !v6) {
    goto LABEL_9;
  }
  int v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = *(id *)(a1 + 32);
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    int v16 = 138543618;
    uint64_t v17 = v11;
    __int16 v18 = 2112;
    BOOL v19 = v7;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to get thread network credentials from resident. Error: %@", (uint8_t *)&v16, 0x16u);
  }
  if ([*(id *)(a1 + 32) isOwnerUser])
  {
    int v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = *(id *)(a1 + 32);
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      int v16 = 138543362;
      uint64_t v17 = v15;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Falling back to get thread network credentials from current owner device", (uint8_t *)&v16, 0xCu);
    }
    [*(id *)(a1 + 32) _fetchMetadataOnCurrentDeviceWithCompletion:*(void *)(a1 + 40)];
  }
  else
  {
LABEL_9:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

- (void)_fetchMetadataOnCurrentDeviceWithCompletion:(id)a3
{
  id v4 = a3;
  id v6 = +[HMDThreadNetworkMetadataStore defaultStore];
  id v5 = [(HMDHome *)self threadOperationalDataset];
  objc_msgSend(v6, "retrieveMetadata:homeHasResident:completion:", v5, -[HMDHome doesHomeContainResident](self, "doesHomeContainResident"), v4);
}

- (void)_configurePairedAccessoriesForServer:(id)a3 reAddServices:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v6 = a3;
  char v7 = [v6 isPaired];
  int v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  uint64_t v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v12 = HMFGetLogIdentifier();
      int v21 = 138543618;
      uint64_t v22 = v12;
      __int16 v23 = 2112;
      id v24 = v6;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Configuring paired accessories with accessory server '%@'", (uint8_t *)&v21, 0x16u);
    }
    id v13 = [v6 identifier];
    uint64_t v14 = [(HMDHome *)v9 accessoryWithIdentifier:v13];

    if (v14)
    {
      uint64_t v15 = (void *)MEMORY[0x230FBD990]();
      int v16 = v9;
      uint64_t v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        __int16 v18 = HMFGetLogIdentifier();
        int v21 = 138543618;
        uint64_t v22 = v18;
        __int16 v23 = 2112;
        id v24 = v14;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Primary HMDAccessory %@ is listed as paired", (uint8_t *)&v21, 0x16u);
      }
      [(HMDHome *)v16 _processUpdatedAccessoryServer:v6 reAddServices:v4];
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v19 = HMFGetLogIdentifier();
      int v21 = 138543618;
      uint64_t v22 = v19;
      __int16 v23 = 2112;
      id v24 = v6;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Skipping configuration of unpaired accessory server '%@'", (uint8_t *)&v21, 0x16u);
    }
    uint64_t v14 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:4 userInfo:0];
    uint64_t v20 = [v6 identifier];
    -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](v9, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v14, v20, [v6 linkType], 0);
  }
}

- (void)_unconfigurePairedAccessoriesForServer:(id)a3 updateReachability:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v6 = a3;
  if ([v6 isPaired])
  {
    if (v4)
    {
      char v7 = (void *)MEMORY[0x230FBD990]();
      int v8 = self;
      id v9 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        id v10 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v20 = v10;
        __int16 v21 = 2112;
        id v22 = v6;
        _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Setting reachability to false for all paired accessories associated with %@", buf, 0x16u);
      }
    }
    uint64_t v11 = [MEMORY[0x263F087E8] hmErrorWithCode:4];
    int v12 = [v6 identifier];
    uint64_t v13 = [v6 linkType];
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    v15[2] = __69__HMDHome__unconfigurePairedAccessoriesForServer_updateReachability___block_invoke;
    v15[3] = &unk_264A16FA8;
    id v16 = v12;
    uint64_t v17 = v13;
    BOOL v18 = v4;
    id v14 = v12;
    [(HMDHome *)self _notifyRetrievalError:v11 accessoryServer:v14 linkType:v13 accessoryOperationBlock:v15];
  }
}

uint64_t __69__HMDHome__unconfigurePairedAccessoriesForServer_updateReachability___block_invoke(uint64_t a1, void *a2)
{
  return [a2 unconfigureAccessoryWithServerIdentifier:*(void *)(a1 + 32) linkType:*(void *)(a1 + 40) updateReachability:*(unsigned __int8 *)(a1 + 48)];
}

- (void)_processUpdatedAccessoryServer:(id)a3 reAddServices:(BOOL)a4
{
  uint64_t v315 = *MEMORY[0x263EF8340];
  id v201 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  char v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    v304 = v8;
    __int16 v305 = 2112;
    uint64_t v306 = (uint64_t)v201;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating existing HMDAccessory objects from HAPAccessory objects for server: %@", buf, 0x16u);
  }
  id v198 = [(HMDHome *)v6 _primaryAccessoryForServer:v201];
  id v9 = [v201 identifier];
  id v10 = [(HMDHome *)v6 accessoryWithIdentifier:v9];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  id v199 = v11;

  if (!v199)
  {
    id v227 = v198;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      int v12 = v227;
    }
    else {
      int v12 = 0;
    }
    id v197 = v12;

    if ([v197 supportsCHIP]
      && shouldCreateNativeMatterAccessoryFromServer(v201, v6))
    {
      uint64_t v13 = (void *)MEMORY[0x230FBD990]();
      id v14 = v6;
      uint64_t v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        id v16 = HMFGetLogIdentifier();
        uint64_t v17 = [v197 shortDescription];
        *(_DWORD *)buf = 138543618;
        v304 = v16;
        __int16 v305 = 2112;
        uint64_t v306 = (uint64_t)v17;
        _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Found a HAP+Matter accessory that should be native matter accessory: %@. Updating its native matter flag", buf, 0x16u);
      }
      long long v203 = [v197 matterAdapter];
      [v203 updateNativeMatterSupport:1];
LABEL_154:

      goto LABEL_155;
    }
    long long v203 = [MEMORY[0x263EFF980] array];
    uint64_t v202 = [MEMORY[0x263EFF980] array];
    uint64_t v196 = [v227 configNumber];
    BOOL v18 = (void *)MEMORY[0x263EFF980];
    BOOL v19 = [v201 accessories];
    long long v207 = [v18 arrayWithArray:v19];

    uint64_t v20 = (void *)MEMORY[0x263EFF980];
    __int16 v21 = [(HMDHome *)v6 hapAccessoriesForServer:v201];
    long long v220 = [v20 arrayWithArray:v21];

    id v22 = [(HMDHome *)v6 _discoveredAccessoriesForServer:v201];
    [v220 addObjectsFromArray:v22];

    uint64_t v23 = (void *)MEMORY[0x230FBD990]();
    v238 = v6;
    id v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      uint64_t v26 = [v220 count];
      id v27 = [v201 identifier];
      __int16 v28 = [v201 accessories];
      uint64_t v29 = [v28 count];
      *(_DWORD *)buf = 138544130;
      v304 = v25;
      __int16 v305 = 2050;
      uint64_t v306 = v26;
      __int16 v307 = 2114;
      id v308 = v27;
      __int16 v309 = 2050;
      v310 = (__CFString *)v29;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Found %{public}tu existing HMDAccessory objects associated with the server: '%{public}@' and discovered %{public}tu HAPAccessory objects", buf, 0x2Au);
    }
    long long v204 = [MEMORY[0x263EFF980] array];
    long long v205 = [MEMORY[0x263EFF980] array];
    long long v200 = [MEMORY[0x263EFF980] array];
    v235 = [MEMORY[0x263EFF980] array];
    id v232 = [MEMORY[0x263EFF980] array];
    context = [MEMORY[0x263EFF980] array];
    long long v284 = 0u;
    long long v285 = 0u;
    long long v282 = 0u;
    long long v283 = 0u;
    obuint64_t j = [v201 accessories];
    uint64_t v224 = [obj countByEnumeratingWithState:&v282 objects:v301 count:16];
    if (v224)
    {
      uint64_t v221 = *(void *)v283;
      do
      {
        for (uint64_t i = 0; i != v224; ++i)
        {
          if (*(void *)v283 != v221) {
            objc_enumerationMutation(obj);
          }
          int v31 = *(void **)(*((void *)&v282 + 1) + 8 * i);
          long long v278 = 0u;
          long long v279 = 0u;
          long long v280 = 0u;
          long long v281 = 0u;
          id v32 = v220;
          uint64_t v33 = [v32 countByEnumeratingWithState:&v278 objects:v300 count:16];
          if (!v33) {
            goto LABEL_34;
          }
          uint64_t v34 = *(void *)v279;
          while (2)
          {
            for (uint64_t j = 0; j != v33; ++j)
            {
              if (*(void *)v279 != v34) {
                objc_enumerationMutation(v32);
              }
              id v36 = *(id *)(*((void *)&v278 + 1) + 8 * j);
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                id v37 = v36;
              }
              else {
                id v37 = 0;
              }
              id v38 = v37;

              if ([v38 matchesHAPAccessory:v31])
              {

                if (!v38) {
                  goto LABEL_69;
                }
                if (([v38 isPrimary] & 1) == 0 && (objc_msgSend(v38, "isPaired") & 1) == 0)
                {
                  long long v70 = (void *)MEMORY[0x230FBD990]();
                  long long v71 = v238;
                  long long v72 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
                  {
                    long long v73 = HMFGetLogIdentifier();
                    long long v74 = [v38 shortDescription];
                    *(_DWORD *)buf = 138543618;
                    v304 = v73;
                    __int16 v305 = 2114;
                    uint64_t v306 = (uint64_t)v74;
                    _os_log_impl(&dword_22F52A000, v72, OS_LOG_TYPE_INFO, "%{public}@Skipping configuring unpaired secondary accessory with identifier: %{public}@", buf, 0x16u);
                  }
                  goto LABEL_68;
                }
                [v203 addObject:v31];
                [v202 addObject:v38];
                id v39 = [v38 uuid];
                id v40 = [v38 hostAccessory];
                id v41 = [v40 uuid];
                __int16 v42 = [(HMDHome *)v238 getTransactionFromHAPAccessory:v31 hmdAccessory:v38 uuid:v39 hostAccessoryUUID:v41 objectChangeType:2];

                id v43 = v31;
                id v44 = v38;
                id v45 = v42;
                uint64_t v46 = [v44 initialManufacturer];
                if (v46)
                {
LABEL_41:
                }
                else
                {
                  long long v47 = [v43 manufacturer];
                  BOOL v48 = v47 == 0;

                  if (!v48)
                  {
                    uint64_t v46 = [v43 manufacturer];
                    [v45 setInitialManufacturer:v46];
                    goto LABEL_41;
                  }
                }
                long long v49 = [v44 initialModel];
                if (v49)
                {
LABEL_45:
                }
                else
                {
                  long long v50 = [v43 model];
                  BOOL v51 = v50 == 0;

                  if (!v51)
                  {
                    long long v49 = [v43 model];
                    [v45 setInitialModel:v49];
                    goto LABEL_45;
                  }
                }
                long long v52 = [v44 initialCategoryIdentifier];
                if (v52)
                {
LABEL_49:
                }
                else
                {
                  long long v53 = [v43 category];
                  BOOL v54 = v53 == 0;

                  if (!v54)
                  {
                    long long v52 = [v43 category];
                    [v45 setInitialCategoryIdentifier:v52];
                    goto LABEL_49;
                  }
                }
                id v55 = [v44 initialServiceTypeUUIDs];
                BOOL v56 = v55 == 0;

                if (v56)
                {
                  int v57 = serviceTypeUUIDsForAccessory(v43);
                  if (v57) {
                    [v45 setInitialServiceTypeUUIDs:v57];
                  }
                }
                id v277 = v235;
                id v276 = v232;
                id v275 = context;
                [(HMDHome *)v238 getUpdateTransactionForAccessory:v44 hapAccessory:v43 accessoryTransaction:v45 addSvcTransactions:&v277 updateSvcTransactions:&v276 removeSvcTransactions:&v275];
                id val = v277;

                id v236 = v276;
                id v233 = v275;

                if ([v43 isPrimary])
                {
                  uint64_t v58 = [v201 setupHash];
                  if (v58)
                  {
                    contexta = (void *)MEMORY[0x230FBD990]();
                    __int16 v59 = v238;
                    uint64_t v60 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
                    {
                      uint64_t v61 = HMFGetLogIdentifier();
                      long long v62 = [v44 shortDescription];
                      *(_DWORD *)buf = 138543874;
                      v304 = v61;
                      __int16 v305 = 2112;
                      uint64_t v306 = (uint64_t)v58;
                      __int16 v307 = 2112;
                      id v308 = v62;
                      _os_log_impl(&dword_22F52A000, v60, OS_LOG_TYPE_INFO, "%{public}@Saving setup hash '%@ for accessory %@", buf, 0x20u);
                    }
                    [v45 setAccessorySetupHash:v58];
                  }
                  [(HMDHome *)v238 _processUpdatedProductDataForAccessory:v44 hapAccessory:v43 transaction:v45];
                }
                id v63 = [v44 modelObjectWithChangeType:1];
                id v274 = 0;
                [v63 diff:v45 differingFields:&v274];
                id v64 = (__CFString *)v274;

                if ([(__CFString *)v64 count])
                {
                  id v65 = (void *)MEMORY[0x230FBD990]();
                  id v66 = v238;
                  id v67 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
                  {
                    id v68 = HMFGetLogIdentifier();
                    char v69 = [v227 shortDescription];
                    *(_DWORD *)buf = 138544130;
                    v304 = v68;
                    __int16 v305 = 2114;
                    uint64_t v306 = (uint64_t)v69;
                    __int16 v307 = 2114;
                    id v308 = v45;
                    __int16 v309 = 2114;
                    v310 = v64;
                    _os_log_impl(&dword_22F52A000, v67, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Received accessory update %{public}@ due to diff %{public}@", buf, 0x2Au);
                  }
                  [v205 addObject:v45];
                }

                context = v233;
                id v232 = v236;
                v235 = val;
                goto LABEL_68;
              }
            }
            uint64_t v33 = [v32 countByEnumeratingWithState:&v278 objects:v300 count:16];
            if (v33) {
              continue;
            }
            break;
          }
LABEL_34:
          id v36 = v32;
LABEL_68:

LABEL_69:
          ;
        }
        uint64_t v224 = [obj countByEnumeratingWithState:&v282 objects:v301 count:16];
      }
      while (v224);
    }

    long long v75 = (void *)MEMORY[0x230FBD990]();
    vala = v238;
    long long v76 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
    {
      long long v77 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      v304 = v77;
      __int16 v305 = 2112;
      uint64_t v306 = (uint64_t)v201;
      _os_log_impl(&dword_22F52A000, v76, OS_LOG_TYPE_INFO, "%{public}@Finished updating paired accessories for server: %@", buf, 0x16u);
    }
    [v207 removeObjectsInArray:v203];
    [v220 removeObjectsInArray:v202];
    long long v214 = [(HMDHome *)vala accessories];
    long long v272 = 0u;
    long long v273 = 0u;
    long long v270 = 0u;
    long long v271 = 0u;
    id v206 = v207;
    id obja = (id)[v206 countByEnumeratingWithState:&v270 objects:v299 count:16];
    if (obja)
    {
      uint64_t v212 = *(void *)v271;
      do
      {
        uint64_t v78 = 0;
        do
        {
          if (*(void *)v271 != v212)
          {
            uint64_t v79 = v78;
            objc_enumerationMutation(v206);
            uint64_t v78 = v79;
          }
          uint64_t v222 = v78;
          long long v80 = *(void **)(*((void *)&v270 + 1) + 8 * v78);
          long long v266 = 0u;
          long long v267 = 0u;
          long long v268 = 0u;
          long long v269 = 0u;
          id v81 = v214;
          uint64_t v82 = [v81 countByEnumeratingWithState:&v266 objects:v298 count:16];
          if (v82)
          {
            uint64_t v83 = *(void *)v267;
LABEL_80:
            uint64_t v84 = 0;
            while (1)
            {
              if (*(void *)v267 != v83) {
                objc_enumerationMutation(v81);
              }
              id v85 = *(id *)(*((void *)&v266 + 1) + 8 * v84);
              objc_opt_class();
              id v86 = (objc_opt_isKindOfClass() & 1) != 0 ? v85 : 0;
              id v87 = v86;

              v88 = [v80 identifier];
              uint64_t v89 = [v80 instanceID];
              int v90 = [v87 matchesHAPAccessoryWithServerIdentifier:v88 instanceID:v89];

              if (v90) {
                break;
              }

              if (v82 == ++v84)
              {
                uint64_t v82 = [v81 countByEnumeratingWithState:&v266 objects:v298 count:16];
                if (v82) {
                  goto LABEL_80;
                }
                goto LABEL_89;
              }
            }
            v239 = (void *)MEMORY[0x230FBD990]();
            v225 = vala;
            uint64_t v91 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
            {
              long long v208 = HMFGetLogIdentifier();
              long long v210 = [v80 server];
              uint64_t v92 = [v210 identifier];
              char v93 = [v80 instanceID];
              unint64_t v94 = [v80 linkType];
              char v95 = @"Undefined";
              if (v94 <= 2) {
                char v95 = off_264A1CE08[v94];
              }
              id v96 = v95;
              __int16 v97 = [v87 name];
              uint64_t v98 = [v87 uniqueIdentifier];
              *(_DWORD *)buf = 138544642;
              v304 = v208;
              __int16 v305 = 2114;
              uint64_t v306 = (uint64_t)v92;
              __int16 v307 = 2114;
              id v308 = v93;
              __int16 v309 = 2112;
              v310 = v96;
              __int16 v311 = 2112;
              v312 = v97;
              __int16 v313 = 2112;
              v314 = v98;
              _os_log_impl(&dword_22F52A000, v91, OS_LOG_TYPE_INFO, "%{public}@HAPAccessory %{public}@/%{public}@/%@ matches existing HMDAccessory %@(%@)", buf, 0x3Eu);
            }

            if (v87)
            {
              [v220 removeObject:v87];
              uint64_t v99 = [v87 uuid];
              v100 = [v87 hostAccessory];
              id v101 = [v100 uuid];
              char v240 = [(HMDHome *)v225 getTransactionFromHAPAccessory:v80 hmdAccessory:v87 uuid:v99 hostAccessoryUUID:v101 objectChangeType:2];

              id v265 = v235;
              id v264 = v232;
              id v263 = context;
              [(HMDHome *)v225 getUpdateTransactionForAccessory:v87 hapAccessory:v80 accessoryTransaction:v240 addSvcTransactions:&v265 updateSvcTransactions:&v264 removeSvcTransactions:&v263];
              id v102 = v265;

              id v103 = v264;
              id v104 = v263;

              uint64_t v105 = [v87 modelObjectWithChangeType:1];
              id v262 = 0;
              [v105 diff:v240 differingFields:&v262];
              id v106 = (__CFString *)v262;

              if ([(__CFString *)v106 count])
              {
                long long v107 = (void *)MEMORY[0x230FBD990]();
                v108 = v225;
                char v109 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
                {
                  uint64_t v110 = HMFGetLogIdentifier();
                  uint64_t v111 = [v227 uuid];
                  *(_DWORD *)buf = 138544130;
                  v304 = v110;
                  __int16 v305 = 2114;
                  uint64_t v306 = (uint64_t)v111;
                  __int16 v307 = 2114;
                  id v308 = v240;
                  __int16 v309 = 2114;
                  v310 = v106;
                  _os_log_impl(&dword_22F52A000, v109, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Received accessory update %{public}@ due to diff %{public}@", buf, 0x2Au);
                }
                [v205 addObject:v240];
              }
              goto LABEL_109;
            }
          }
          else
          {
LABEL_89:
          }
          if (v227)
          {
            long long v112 = [v80 instanceID];
            v113 = [v112 stringValue];
            v297 = v113;
            id v85 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v297 count:1];

            v114 = (void *)MEMORY[0x263F08C38];
            char v115 = [v227 uuid];
            char v240 = objc_msgSend(v114, "hm_deriveUUIDFromBaseUUID:withSalts:", v115, v85);

            if (!v240)
            {
              __int16 v116 = (void *)MEMORY[0x230FBD990]();
              v117 = vala;
              __int16 v118 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
              {
                int v119 = HMFGetLogIdentifier();
                int v120 = [v227 shortDescription];
                *(_DWORD *)buf = 138543618;
                v304 = v119;
                __int16 v305 = 2112;
                uint64_t v306 = (uint64_t)v120;
                _os_log_impl(&dword_22F52A000, v118, OS_LOG_TYPE_ERROR, "%{public}@Error during _processUpdatedAccessoryServer: Primary Accessory for Server has nil UUID: %@", buf, 0x16u);
              }
              v121 = +[HMDTTRManager sharedManager];
              [v121 requestRadarWithDisplayReason:@"accessory has null identifier" radarTitle:@"PrimaryAccessoryForServer results in nil uuid during processUpdatedAccessoryServer"];
            }
            uint64_t v122 = (void *)MEMORY[0x230FBD990]();
            v123 = vala;
            id v124 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v124, OS_LOG_TYPE_INFO))
            {
              v125 = HMFGetLogIdentifier();
              v126 = [v227 shortDescription];
              v127 = [v80 instanceID];
              int v128 = [v240 UUIDString];
              *(_DWORD *)buf = 138544130;
              v304 = v125;
              __int16 v305 = 2114;
              uint64_t v306 = (uint64_t)v126;
              __int16 v307 = 2114;
              id v308 = v127;
              __int16 v309 = 2114;
              v310 = v128;
              _os_log_impl(&dword_22F52A000, v124, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Adding a new bridged accessory instanceID %{public}@ and uuid %{public}@", buf, 0x2Au);
            }
            int v129 = [v227 uuid];
            id v106 = [(HMDHome *)v123 getTransactionFromHAPAccessory:v80 hmdAccessory:0 uuid:v240 hostAccessoryUUID:v129 objectChangeType:1];

            v130 = [(__CFString *)v106 roomUUID];
            LODWORD(v129) = v130 == 0;

            if (v129)
            {
              uint64_t v131 = [v227 room];
              uint64_t v132 = [v131 uuid];
              v133 = [v132 UUIDString];
              [(__CFString *)v106 setRoomUUID:v133];
            }
            id v261 = v235;
            id v260 = v232;
            id v259 = context;
            [(HMDHome *)v123 getUpdateTransactionForAccessory:0 hapAccessory:v80 accessoryTransaction:v106 addSvcTransactions:&v261 updateSvcTransactions:&v260 removeSvcTransactions:&v259];
            id v102 = v261;

            id v103 = v260;
            id v104 = v259;

            int v134 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v227, "certificationStatus"));
            [(__CFString *)v106 setCertificationStatus:v134];

            int v135 = [(HMDHome *)v123 uuidToHAPAccessoryConfigTable];
            [v135 setObject:v80 forKey:v240];

            [v204 addObject:v106];
LABEL_109:

            context = v104;
            id v232 = v103;
            v235 = v102;
          }
          uint64_t v78 = v222 + 1;
        }
        while ((id)(v222 + 1) != obja);
        id obja = (id)[v206 countByEnumeratingWithState:&v270 objects:v299 count:16];
      }
      while (obja);
    }

    if ([v220 count])
    {
      long long v257 = 0u;
      long long v258 = 0u;
      long long v255 = 0u;
      long long v256 = 0u;
      id v136 = v220;
      uint64_t v137 = [v136 countByEnumeratingWithState:&v255 objects:v296 count:16];
      if (v137)
      {
        uint64_t v138 = *(void *)v256;
        do
        {
          for (uint64_t k = 0; k != v137; ++k)
          {
            if (*(void *)v256 != v138) {
              objc_enumerationMutation(v136);
            }
            int v140 = *(void **)(*((void *)&v255 + 1) + 8 * k);
            if (([v140 isPrimary] & 1) == 0)
            {
              int v141 = [v140 transactionWithObjectChangeType:3];
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                v142 = v141;
              }
              else {
                v142 = 0;
              }
              id v143 = v142;

              int v144 = (void *)MEMORY[0x230FBD990]();
              v145 = vala;
              uint64_t v146 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v146, OS_LOG_TYPE_INFO))
              {
                int v147 = HMFGetLogIdentifier();
                int v148 = [v227 shortDescription];
                *(_DWORD *)buf = 138543874;
                v304 = v147;
                __int16 v305 = 2114;
                uint64_t v306 = (uint64_t)v148;
                __int16 v307 = 2114;
                id v308 = v143;
                _os_log_impl(&dword_22F52A000, v146, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Removing a secondary accessory %{public}@", buf, 0x20u);
              }
              if (v143) {
                [v200 addObject:v143];
              }
            }
          }
          uint64_t v137 = [v136 countByEnumeratingWithState:&v255 objects:v296 count:16];
        }
        while (v137);
      }
    }
    dispatch_group_t v149 = dispatch_group_create();
    id v223 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v226 = v201;
    id v150 = v227;
    id v237 = v235;
    id v234 = v232;
    id v241 = context;
    contextb = v150;
    uint64_t v151 = [v150 configNumber];
    if ([v226 configNumber] == v151)
    {
      if ([v241 count] || objc_msgSend(v237, "count"))
      {

LABEL_134:
        id v152 = (void *)MEMORY[0x230FBD990]();
        uint64_t v153 = vala;
        uint64_t v154 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
        {
          v155 = HMFGetLogIdentifier();
          v156 = [contextb shortDescription];
          int v157 = [NSNumber numberWithUnsignedInteger:v196];
          *(_DWORD *)buf = 138543874;
          v304 = v155;
          __int16 v305 = 2112;
          uint64_t v306 = (uint64_t)v156;
          __int16 v307 = 2112;
          id v308 = v157;
          _os_log_impl(&dword_22F52A000, v154, OS_LOG_TYPE_ERROR, "%{public}@Only storing the update locally since the accessory %@ didn't update its config number: %@ after updating its services/characteristics.", buf, 0x20u);
        }
        int v158 = @"Add Accessory Locally";
        uint64_t v159 = +[HMDBackingStoreTransactionOptions defaultLocalOptions];

        v160 = @"Add Accessory Locally";
        id v223 = (void *)v159;
        goto LABEL_139;
      }
      long long v292 = 0u;
      long long v293 = 0u;
      long long v290 = 0u;
      long long v291 = 0u;
      id objb = v234;
      uint64_t v213 = [objb countByEnumeratingWithState:&v290 objects:buf count:16];
      if (v213)
      {
        uint64_t v179 = *(void *)v291;
        uint64_t v209 = *(void *)v291;
        while (2)
        {
          uint64_t v180 = 0;
          do
          {
            if (*(void *)v291 != v179)
            {
              uint64_t v181 = v180;
              objc_enumerationMutation(objb);
              uint64_t v180 = v181;
            }
            uint64_t v211 = v180;
            long long v182 = *(void **)(*((void *)&v290 + 1) + 8 * v180);
            long long v183 = [v182 instanceID];
            id v184 = [contextb findService:v183];

            long long v185 = [v184 serviceType];
            long long v186 = [v182 serviceType];
            LODWORD(v183) = [v185 isEqualToString:v186];

            if (!v183)
            {
LABEL_174:

              goto LABEL_134;
            }
            long long v288 = 0u;
            long long v289 = 0u;
            long long v286 = 0u;
            long long v287 = 0u;
            id v228 = [v182 characteristics];
            uint64_t v187 = [v228 countByEnumeratingWithState:&v286 objects:v302 count:16];
            if (v187)
            {
              uint64_t v188 = *(void *)v287;
              while (2)
              {
                for (uint64_t m = 0; m != v187; ++m)
                {
                  if (*(void *)v287 != v188) {
                    objc_enumerationMutation(v228);
                  }
                  long long v190 = *(void **)(*((void *)&v286 + 1) + 8 * m);
                  long long v191 = [v190 objectForKeyedSubscript:@"characteristicInstanceID"];
                  long long v192 = [v190 objectForKeyedSubscript:@"characteristicType"];
                  long long v193 = [v184 findCharacteristic:v191];
                  char v194 = [v193 characteristicType];
                  int v195 = [v194 isEqualToString:v192];

                  if (!v195)
                  {

                    goto LABEL_174;
                  }
                }
                uint64_t v187 = [v228 countByEnumeratingWithState:&v286 objects:v302 count:16];
                if (v187) {
                  continue;
                }
                break;
              }
            }

            uint64_t v179 = v209;
            uint64_t v180 = v211 + 1;
          }
          while (v211 + 1 != v213);
          uint64_t v213 = [objb countByEnumeratingWithState:&v290 objects:buf count:16];
          uint64_t v179 = v209;
          if (v213) {
            continue;
          }
          break;
        }
      }
    }
    else
    {
    }
    v160 = @"Add Accessory";
LABEL_139:
    v161 = [(HMDHome *)vala backingStore];
    id v162 = [v161 transaction:v160 options:v223];

    v163 = [v205 arrayByAddingObjectsFromArray:v204];
    id v164 = [v163 arrayByAddingObjectsFromArray:v200];

    long long v253 = 0u;
    long long v254 = 0u;
    long long v251 = 0u;
    long long v252 = 0u;
    id v165 = v164;
    uint64_t v166 = [v165 countByEnumeratingWithState:&v251 objects:v295 count:16];
    if (v166)
    {
      uint64_t v167 = *(void *)v252;
      do
      {
        for (uint64_t n = 0; n != v166; ++n)
        {
          if (*(void *)v252 != v167) {
            objc_enumerationMutation(v165);
          }
          BOOL v169 = *(void **)(*((void *)&v251 + 1) + 8 * n);
          [v169 setConfigurationTracker:v149];
          [v162 add:v169 withMessage:0];
        }
        uint64_t v166 = [v165 countByEnumeratingWithState:&v251 objects:v295 count:16];
      }
      while (v166);
    }

    v170 = [v234 arrayByAddingObjectsFromArray:v237];
    BOOL v171 = [v170 arrayByAddingObjectsFromArray:v241];

    long long v249 = 0u;
    long long v250 = 0u;
    long long v247 = 0u;
    long long v248 = 0u;
    id v172 = v171;
    uint64_t v173 = [v172 countByEnumeratingWithState:&v247 objects:v294 count:16];
    if (v173)
    {
      uint64_t v174 = *(void *)v248;
      do
      {
        for (iuint64_t i = 0; ii != v173; ++ii)
        {
          if (*(void *)v248 != v174) {
            objc_enumerationMutation(v172);
          }
          long long v176 = *(void **)(*((void *)&v247 + 1) + 8 * ii);
          [v176 setConfigurationTracker:v149];
          [v162 add:v176 withMessage:0];
        }
        uint64_t v173 = [v172 countByEnumeratingWithState:&v247 objects:v294 count:16];
      }
      while (v173);
    }

    objc_initWeak((id *)buf, vala);
    v242[0] = MEMORY[0x263EF8330];
    v242[1] = 3221225472;
    v242[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke;
    v242[3] = &unk_264A279B0;
    objc_copyWeak(&v246, (id *)buf);
    id v243 = v226;
    int v177 = v149;
    id v244 = v177;
    id v178 = v204;
    id v245 = v178;
    [v162 run:v242];

    objc_destroyWeak(&v246);
    objc_destroyWeak((id *)buf);

    goto LABEL_154;
  }
  [v199 processUpdatedAccessoryServer:v201];
LABEL_155:
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v28 = a1;
    id v3 = [*(id *)(a1 + 32) accessories];
    uint64_t v30 = WeakRetained;
    uint64_t v29 = [WeakRetained accessories];
    BOOL v4 = [MEMORY[0x263F08968] strongToStrongObjectsMapTable];
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    obuint64_t j = v3;
    uint64_t v31 = [obj countByEnumeratingWithState:&v46 objects:v52 count:16];
    if (v31)
    {
      uint64_t v27 = *(void *)v47;
      do
      {
        for (uint64_t i = 0; i != v31; ++i)
        {
          if (*(void *)v47 != v27) {
            objc_enumerationMutation(obj);
          }
          uint64_t v6 = *(void *)(*((void *)&v46 + 1) + 8 * i);
          long long v42 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          id v7 = v29;
          uint64_t v8 = [v7 countByEnumeratingWithState:&v42 objects:v51 count:16];
          if (v8)
          {
            uint64_t v9 = v8;
            uint64_t v10 = *(void *)v43;
            do
            {
              for (uint64_t j = 0; j != v9; ++j)
              {
                if (*(void *)v43 != v10) {
                  objc_enumerationMutation(v7);
                }
                id v12 = *(id *)(*((void *)&v42 + 1) + 8 * j);
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  uint64_t v13 = v12;
                }
                else {
                  uint64_t v13 = 0;
                }
                id v14 = v13;

                if (v14 && [v14 matchesHAPAccessory:v6]) {
                  [v4 setObject:v6 forKey:v14];
                }
              }
              uint64_t v9 = [v7 countByEnumeratingWithState:&v42 objects:v51 count:16];
            }
            while (v9);
          }
        }
        uint64_t v31 = [obj countByEnumeratingWithState:&v46 objects:v52 count:16];
      }
      while (v31);
    }

    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v15 = v4;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v38 objects:v50 count:16];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v32 = *(void *)v39;
      do
      {
        for (uint64_t k = 0; k != v17; ++k)
        {
          if (*(void *)v39 != v32) {
            objc_enumerationMutation(v15);
          }
          BOOL v19 = *(void **)(*((void *)&v38 + 1) + 8 * k);
          dispatch_group_enter(*(dispatch_group_t *)(v28 + 40));
          uint64_t v20 = [v15 objectForKey:v19];
          __int16 v21 = [v30 notificationRegistrations];
          BOOL v22 = [v21 count] != 0;
          uint64_t v23 = [v30 workQueue];
          v36[0] = MEMORY[0x263EF8330];
          v36[1] = 3221225472;
          v36[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2;
          v36[3] = &unk_264A2F2F8;
          v36[4] = v19;
          v36[5] = v30;
          id v37 = *(id *)(v28 + 40);
          [v19 configureWithAccessory:v20 homeNotificationsEnabled:v22 queue:v23 completion:v36];
        }
        uint64_t v17 = [v15 countByEnumeratingWithState:&v38 objects:v50 count:16];
      }
      while (v17);
    }

    id v24 = *(NSObject **)(v28 + 40);
    id WeakRetained = v30;
    uint64_t v25 = [v30 workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1910;
    block[3] = &unk_264A2F2F8;
    void block[4] = v30;
    id v34 = *(id *)(v28 + 32);
    id v35 = *(id *)(v28 + 48);
    dispatch_group_notify(v24, v25, block);
  }
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  logAndPostNotification(@"HMDAccessoryConnectedNotification", *(void **)(a1 + 32), 0);
  [*(id *)(a1 + 32) updateLightProfilesSettings];
  int v2 = [*(id *)(a1 + 32) chipAccessoryServer];

  if (v2)
  {
    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = *(id *)(a1 + 40);
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = HMFGetLogIdentifier();
      id v7 = [*(id *)(a1 + 32) uuid];
      uint64_t v8 = [*(id *)(a1 + 32) chipAccessoryServer];
      uint64_t v9 = [*(id *)(a1 + 32) chipAccessoryServer];
      int v12 = 138544130;
      uint64_t v13 = v6;
      __int16 v14 = 2112;
      id v15 = v7;
      __int16 v16 = 2048;
      uint64_t v17 = v8;
      __int16 v18 = 2112;
      BOOL v19 = v9;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Configured chipAccessoryServer on accessory: %@, chipAccessoryServer: %p %@", (uint8_t *)&v12, 0x2Au);
    }
    [*(id *)(a1 + 32) setDidConfigureCHIPAccessoryServer];
  }
  uint64_t v10 = [*(id *)(a1 + 40) homeManager];
  int v11 = [v10 hasLoadedData];

  if (v11) {
    [*(id *)(a1 + 40) _auditActionSetsAndTriggersForAccessory:*(void *)(a1 + 32)];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1910(uint64_t a1)
{
  uint64_t v1 = (id *)a1;
  uint64_t v45 = *MEMORY[0x263EF8340];
  int v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) identifier];
  uint64_t v4 = [v1[5] linkType];
  v37[0] = MEMORY[0x263EF8330];
  v37[1] = 3221225472;
  v37[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2_1911;
  v37[3] = &unk_264A28370;
  v37[4] = v1[4];
  [v2 _notifyRetrievalError:0 accessoryServer:v3 linkType:v4 accessoryOperationBlock:v37];

  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  obuint64_t j = v1[6];
  uint64_t v5 = [obj countByEnumeratingWithState:&v33 objects:v44 count:16];
  if (v5)
  {
    uint64_t v7 = v5;
    uint64_t v8 = *(void *)v34;
    uint64_t v9 = v31;
    *(void *)&long long v6 = 138543874;
    long long v26 = v6;
    uint64_t v27 = *(void *)v34;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v34 != v8) {
          objc_enumerationMutation(obj);
        }
        id v11 = v1[4];
        int v12 = objc_msgSend(*(id *)(*((void *)&v33 + 1) + 8 * v10), "uuid", v26);
        uint64_t v13 = [v11 accessoryWithUUID:v12];

        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          __int16 v14 = v13;
        }
        else {
          __int16 v14 = 0;
        }
        id v15 = v14;

        if (v15)
        {
          __int16 v16 = (void *)MEMORY[0x230FBD990]();
          id v17 = v1[4];
          __int16 v18 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            BOOL v19 = HMFGetLogIdentifier();
            uint64_t v20 = [v15 shortDescription];
            [v15 supportsTargetController];
            HMFBooleanToString();
            uint64_t v29 = v16;
            __int16 v21 = v9;
            BOOL v22 = v1;
            id v24 = v23 = v7;
            *(_DWORD *)buf = v26;
            long long v39 = v19;
            __int16 v40 = 2112;
            long long v41 = v20;
            __int16 v42 = 2112;
            long long v43 = v24;
            _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Bridged accessory %@ (supportsTargetController %@) being added to home", buf, 0x20u);

            uint64_t v8 = v27;
            uint64_t v7 = v23;
            uint64_t v1 = v22;
            uint64_t v9 = v21;
            __int16 v16 = v29;
          }
          v30[0] = MEMORY[0x263EF8330];
          v30[1] = 3221225472;
          v31[0] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1912;
          v31[1] = &unk_264A2F3E8;
          id v32 = v15;
          [v32 readInitialRequiredCharacteristicsForAccessory:v30];
        }
        ++v10;
      }
      while (v7 != v10);
      uint64_t v7 = [obj countByEnumeratingWithState:&v33 objects:v44 count:16];
    }
    while (v7);
  }

  return [v1[4] _evaluateShouldRelaunchAndSetRelaunch];
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2_1911(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isPrimary])
  {
    uint64_t v4 = MEMORY[0x263EF8330];
    uint64_t v5 = 3221225472;
    long long v6 = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_3;
    uint64_t v7 = &unk_264A2F370;
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = v3;
    [v9 maybeCommissionToThreadNetworkWithCompletion:&v4];
  }
  objc_msgSend(v3, "handleUpdatedServicesForThreadManagementWithCompletion:", 0, v4, v5, v6, v7, v8);
}

uint64_t __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1912(uint64_t a1)
{
  return [*(id *)(a1 + 32) autoConfigureTargetController];
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  long long v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    uint64_t v8 = [*(id *)(a1 + 40) shortDescription];
    int v9 = 138543874;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    int v12 = v8;
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Commissioning finished for %@ with error: %@", (uint8_t *)&v9, 0x20u);
  }
}

- (void)_processUpdatedProductDataForAccessory:(id)a3 hapAccessory:(id)a4 transaction:(id)a5
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  __int16 v11 = [v8 productData];
  int v12 = [(HMDHome *)self _productDataFromHAPAccessory:v9];
  __int16 v13 = v12;
  if (v11)
  {
    if (v12)
    {
      if (([v12 isEqualToString:v11] & 1) == 0)
      {
        id v14 = +[HMDVendorDataManager sharedVendorDataManager];
        uint64_t v15 = [v14 vendorModelEntryForProductData:v11];

        if (v15)
        {
          __int16 v16 = [v15 productDataAlternates];
          char v17 = [v16 containsObject:v13];

          __int16 v18 = (void *)MEMORY[0x230FBD990]();
          BOOL v19 = self;
          uint64_t v20 = HMFGetOSLogHandle();
          __int16 v21 = v20;
          if (v17)
          {
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              BOOL v22 = v40 = v18;
              uint64_t v23 = [v8 shortDescription];
              *(_DWORD *)buf = 138544130;
              long long v44 = v22;
              __int16 v45 = 2112;
              long long v46 = v23;
              __int16 v47 = 2112;
              long long v48 = v11;
              __int16 v49 = 2112;
              long long v50 = v13;
              _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory %@ has changed its product data to a value that is allowed, binding: %@ -> %@", buf, 0x2Au);

              __int16 v18 = v40;
            }

            [v10 setProductDataV2:v13];
            goto LABEL_22;
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            long long v34 = HMFGetLogIdentifier();
            [v8 shortDescription];
            long long v38 = v42 = v18;
            *(_DWORD *)buf = 138544130;
            long long v44 = v34;
            __int16 v45 = 2112;
            long long v46 = v38;
            __int16 v47 = 2112;
            long long v48 = v11;
            __int16 v49 = 2112;
            long long v50 = v13;
            _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ has changed its productData to a value that is not allowed, keeping previous product data: %@ -> %@", buf, 0x2Au);

            __int16 v18 = v42;
            goto LABEL_20;
          }
        }
        else
        {
          __int16 v18 = (void *)MEMORY[0x230FBD990]();
          BOOL v19 = self;
          __int16 v21 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            long long v34 = HMFGetLogIdentifier();
            long long v35 = [v8 shortDescription];
            [v8 manufacturer];
            long long v36 = v39 = v19;
            [v8 model];
            id v37 = v41 = v18;
            *(_DWORD *)buf = 138544386;
            long long v44 = v34;
            __int16 v45 = 2112;
            long long v46 = v35;
            __int16 v47 = 2112;
            long long v48 = v36;
            __int16 v49 = 2112;
            long long v50 = v37;
            __int16 v51 = 2112;
            long long v52 = v11;
            _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ could not be found in the VIDB, keeping previous product data (manufacturer: '%@', model: '%@', productData: '%@')", buf, 0x34u);

            __int16 v18 = v41;
            BOOL v19 = v39;

            uint64_t v15 = 0;
LABEL_20:
          }
        }

LABEL_22:
      }
    }
    else
    {
      uint64_t v29 = (void *)MEMORY[0x230FBD990]();
      uint64_t v30 = self;
      uint64_t v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        id v32 = HMFGetLogIdentifier();
        long long v33 = [v8 shortDescription];
        *(_DWORD *)buf = 138543874;
        long long v44 = v32;
        __int16 v45 = 2112;
        long long v46 = v33;
        __int16 v47 = 2112;
        long long v48 = v11;
        _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ is no longer advertising product data, keeping previous product data %@", buf, 0x20u);
      }
    }
  }
  else if (v12)
  {
    id v24 = (void *)MEMORY[0x230FBD990]();
    uint64_t v25 = self;
    long long v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = HMFGetLogIdentifier();
      uint64_t v28 = [v8 shortDescription];
      *(_DWORD *)buf = 138543874;
      long long v44 = v27;
      __int16 v45 = 2112;
      long long v46 = v28;
      __int16 v47 = 2112;
      long long v48 = v13;
      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory %@ is now bound to product data %@", buf, 0x20u);
    }
    [v10 setProductDataV2:v13];
    [v10 setProductData:v13];
  }
}

- (void)_processProductDataForNewlyAddedAccessory:(id)a3 transaction:(id)a4
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHome *)self _productDataFromHAPAccessory:v6];
  if (v8)
  {
    id v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = self;
    __int16 v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = HMFGetLogIdentifier();
      __int16 v13 = [v6 shortDescription];
      int v14 = 138543874;
      uint64_t v15 = v12;
      __int16 v16 = 2112;
      char v17 = v13;
      __int16 v18 = 2112;
      BOOL v19 = v8;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory %@ is now bound to productData %@", (uint8_t *)&v14, 0x20u);
    }
    [v7 setProductDataV2:v8];
    [v7 setProductData:v8];
  }
}

- (id)_productDataFromHAPAccessory:(id)a3
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 server];
  id v6 = [v5 productData];

  if (v6)
  {
    id v7 = [v5 productData];
    BOOL v8 = +[HMDAccessory validateProductData:v7];

    if (v8)
    {
      uint64_t v9 = [v4 productData];
      if (v9)
      {
        id v10 = (void *)v9;
        __int16 v11 = [v5 productData];
        int v12 = [v4 productData];
        char v13 = [v11 isEqualToString:v12];

        if ((v13 & 1) == 0)
        {
          int v14 = (void *)MEMORY[0x230FBD990]();
          uint64_t v15 = self;
          __int16 v16 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            char v17 = HMFGetLogIdentifier();
            __int16 v18 = [v4 shortDescription];
            BOOL v19 = [v5 productData];
            uint64_t v20 = [v4 productData];
            int v52 = 138544130;
            uint64_t v53 = v17;
            __int16 v54 = 2112;
            id v55 = v18;
            __int16 v56 = 2112;
            int v57 = v19;
            __int16 v58 = 2112;
            __int16 v59 = v20;
            _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ is using productData from pair setup that differs from productData published on AIS: %@ != %@", (uint8_t *)&v52, 0x2Au);
          }
        }
      }
      __int16 v21 = v5;
      goto LABEL_15;
    }
    BOOL v22 = (void *)MEMORY[0x230FBD990]();
    uint64_t v23 = self;
    id v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      long long v26 = [v4 shortDescription];
      uint64_t v27 = [v5 productData];
      int v52 = 138543874;
      uint64_t v53 = v25;
      __int16 v54 = 2112;
      id v55 = v26;
      __int16 v56 = 2112;
      int v57 = v27;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ has invalid productData from pair setup: %@", (uint8_t *)&v52, 0x20u);
    }
  }
  uint64_t v28 = [v4 productData];

  if (v28)
  {
    uint64_t v29 = [v4 productData];
    BOOL v30 = +[HMDAccessory validateProductData:v29];

    if (v30)
    {
      __int16 v21 = v4;
LABEL_15:
      uint64_t v31 = [v21 productData];
      goto LABEL_29;
    }
    id v32 = (void *)MEMORY[0x230FBD990]();
    long long v33 = self;
    long long v34 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      long long v35 = HMFGetLogIdentifier();
      long long v36 = [v4 shortDescription];
      id v37 = [v4 productData];
      int v52 = 138543874;
      uint64_t v53 = v35;
      __int16 v54 = 2112;
      id v55 = v36;
      __int16 v56 = 2112;
      int v57 = v37;
      _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ has invalid productData published on AIS: %@", (uint8_t *)&v52, 0x20u);
    }
  }
  long long v38 = +[HMDVendorDataManager sharedVendorDataManager];
  long long v39 = [v4 manufacturer];
  __int16 v40 = [v4 model];
  long long v41 = [v38 vendorModelEntryForManufacturer:v39 model:v40];

  if (!v41)
  {
    long long v43 = (void *)MEMORY[0x230FBD990]();
    long long v44 = self;
    __int16 v45 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      long long v46 = HMFGetLogIdentifier();
      __int16 v47 = [v4 shortDescription];
      long long v48 = [v4 manufacturer];
      __int16 v49 = [v4 model];
      int v52 = 138544130;
      uint64_t v53 = v46;
      __int16 v54 = 2112;
      id v55 = v47;
      __int16 v56 = 2112;
      int v57 = v48;
      __int16 v58 = 2112;
      __int16 v59 = v49;
      long long v50 = "%{public}@Accessory %@ could not be found in the VIDB (manufacturer: '%@', model: '%@')";
LABEL_26:
      _os_log_impl(&dword_22F52A000, v45, OS_LOG_TYPE_ERROR, v50, (uint8_t *)&v52, 0x2Au);
    }
LABEL_27:

    uint64_t v31 = 0;
    goto LABEL_28;
  }
  __int16 v42 = [v41 productData];

  if (!v42)
  {
    long long v43 = (void *)MEMORY[0x230FBD990]();
    long long v44 = self;
    __int16 v45 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      long long v46 = HMFGetLogIdentifier();
      __int16 v47 = [v4 shortDescription];
      long long v48 = [v4 manufacturer];
      __int16 v49 = [v4 model];
      int v52 = 138544130;
      uint64_t v53 = v46;
      __int16 v54 = 2112;
      id v55 = v47;
      __int16 v56 = 2112;
      int v57 = v48;
      __int16 v58 = 2112;
      __int16 v59 = v49;
      long long v50 = "%{public}@Accessory %@ does not have productData in the VIDB (manufacturer: '%@', model: '%@')";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  uint64_t v31 = [v41 productData];
LABEL_28:

LABEL_29:
  return v31;
}

- (void)filterServiceTransactions:(id)a3 removedServiceUUIDs:(id)a4
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  if (v6 && [v6 count] && objc_msgSend(v7, "count"))
  {
    BOOL v8 = [MEMORY[0x263F089C8] indexSet];
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v25 = v6;
    id v9 = v6;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v29 objects:v39 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v30;
      uint64_t v26 = *(void *)v30;
      id v27 = v9;
      do
      {
        uint64_t v13 = 0;
        uint64_t v28 = v11;
        do
        {
          if (*(void *)v30 != v12) {
            objc_enumerationMutation(v9);
          }
          int v14 = *(void **)(*((void *)&v29 + 1) + 8 * v13);
          uint64_t v15 = [v14 uuid];
          int v16 = [v7 containsObject:v15];

          if (v16)
          {
            char v17 = (void *)MEMORY[0x230FBD990](objc_msgSend(v8, "addIndex:", objc_msgSend(v9, "indexOfObject:", v14)));
            __int16 v18 = self;
            BOOL v19 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              uint64_t v20 = HMFGetLogIdentifier();
              [v14 uuid];
              __int16 v21 = v8;
              BOOL v22 = self;
              id v24 = v23 = v7;
              *(_DWORD *)buf = 138543874;
              long long v34 = v20;
              __int16 v35 = 2114;
              long long v36 = v24;
              __int16 v37 = 2114;
              long long v38 = v14;
              _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@[Pair-Verify %{public}@] Removing duplicate service transaction %{public}@", buf, 0x20u);

              id v7 = v23;
              self = v22;
              BOOL v8 = v21;
              id v9 = v27;

              uint64_t v12 = v26;
            }

            uint64_t v11 = v28;
          }
          ++v13;
        }
        while (v11 != v13);
        uint64_t v11 = [v9 countByEnumeratingWithState:&v29 objects:v39 count:16];
      }
      while (v11);
    }

    [v9 removeObjectsAtIndexes:v8];
    id v6 = v25;
  }
}

- (BOOL)getUpdateTransactionForAccessory:(id)a3 hapAccessory:(id)a4 accessoryTransaction:(id)a5 addSvcTransactions:(id *)a6 updateSvcTransactions:(id *)a7 removeSvcTransactions:(id *)a8
{
  uint64_t v160 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  id v115 = a5;
  uint64_t v12 = [v10 services];
  uint64_t v13 = (void *)[v12 mutableCopy];

  long long v145 = 0u;
  long long v146 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  id v106 = v11;
  int v14 = [v11 services];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v143 objects:v159 count:16];
  id v116 = v10;
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v144;
    uint64_t v124 = 138544130;
    uint64_t v110 = *(void *)v144;
    uint64_t v111 = v14;
    while (2)
    {
      uint64_t v18 = 0;
      uint64_t v112 = v16;
      do
      {
        if (*(void *)v144 != v17) {
          objc_enumerationMutation(v14);
        }
        BOOL v19 = *(void **)(*((void *)&v143 + 1) + 8 * v18);
        uint64_t v20 = [(HMDHome *)self hapMetadata];
        __int16 v21 = [v19 type];
        char v22 = [v20 shouldFilterServiceOfType:v21];

        if ((v22 & 1) == 0)
        {
          uint64_t v114 = v18;
          id v117 = v13;
          long long v141 = 0u;
          long long v142 = 0u;
          long long v139 = 0u;
          long long v140 = 0u;
          id v23 = [v10 services];
          uint64_t v24 = [v23 countByEnumeratingWithState:&v139 objects:v158 count:16];
          if (v24)
          {
            uint64_t v25 = v24;
            uint64_t v26 = *(void *)v140;
            while (2)
            {
              for (uint64_t i = 0; i != v25; ++i)
              {
                if (*(void *)v140 != v26) {
                  objc_enumerationMutation(v23);
                }
                uint64_t v28 = *(void **)(*((void *)&v139 + 1) + 8 * i);
                long long v29 = [v28 instanceID];
                long long v30 = [v19 instanceID];
                int v31 = [v29 isEqual:v30];

                if (v31)
                {
                  long long v32 = v28;
                  goto LABEL_17;
                }
              }
              uint64_t v25 = [v23 countByEnumeratingWithState:&v139 objects:v158 count:16];
              if (v25) {
                continue;
              }
              break;
            }
          }
          long long v32 = 0;
LABEL_17:

          long long v33 = [v115 uuid];
          if (v32) {
            uint64_t v34 = 2;
          }
          else {
            uint64_t v34 = 1;
          }
          __int16 v35 = [(HMDHome *)self getServiceTransaction:v19 parentUUID:v33 changeType:v34];

          uint64_t v36 = [(HMDServiceTransaction *)v32 type];
          if (v36)
          {
            __int16 v37 = (void *)v36;
            long long v38 = [(HMDServiceTransaction *)v32 type];
            long long v39 = [(HMDServiceTransaction *)v35 serviceType];
            char v40 = [v38 isEqualToString:v39];

            if ((v40 & 1) == 0)
            {

              BOOL v101 = 0;
              id v84 = v117;
              id v102 = v111;
              goto LABEL_75;
            }
          }
          [(HMDHome *)self __updateServiceTransaction:v35 accessoryTransaction:v115 service:v32 accessory:v10 hapService:v19];
          long long v41 = [(HMDServiceTransaction *)v32 accessory];
          __int16 v42 = [v41 shortDescription];
          long long v43 = v42;
          if (v42)
          {
            v125 = v42;
          }
          else
          {
            long long v44 = [(HMDBackingStoreModelObject *)v35 parentUUID];
            v125 = [v44 UUIDString];
          }
          uint64_t v13 = v117;

          if (v32)
          {
            __int16 v45 = [(HMDServiceTransaction *)v32 modelObjectWithChangeType:1];
            id v138 = 0;
            v121 = v45;
            [v45 diff:v35 differingFields:&v138];
            id v46 = v138;
            v113 = v46;
            uint64_t v122 = v35;
            if (a7)
            {
              __int16 v47 = v46;
              if ([v46 count])
              {
                v108 = v32;
                long long v48 = (void *)MEMORY[0x230FBD990]();
                __int16 v49 = self;
                long long v50 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
                {
                  __int16 v51 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138544130;
                  id v151 = v51;
                  __int16 v152 = 2112;
                  uint64_t v153 = v125;
                  __int16 v154 = 2114;
                  v155 = v35;
                  __int16 v156 = 2114;
                  int v157 = v47;
                  _os_log_impl(&dword_22F52A000, v50, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %@] Received service update %{public}@ due to diff %{public}@", buf, 0x2Au);
                }
                long long v136 = 0u;
                long long v137 = 0u;
                long long v134 = 0u;
                long long v135 = 0u;
                obuint64_t j = v47;
                uint64_t v52 = [obj countByEnumeratingWithState:&v134 objects:v149 count:16];
                if (v52)
                {
                  uint64_t v53 = v52;
                  uint64_t v54 = *(void *)v135;
                  do
                  {
                    for (uint64_t j = 0; j != v53; ++j)
                    {
                      if (*(void *)v135 != v54) {
                        objc_enumerationMutation(obj);
                      }
                      __int16 v56 = *(HMDServiceTransaction **)(*((void *)&v134 + 1) + 8 * j);
                      int v57 = (void *)MEMORY[0x230FBD990]();
                      __int16 v58 = v49;
                      __int16 v59 = v49;
                      uint64_t v60 = HMFGetOSLogHandle();
                      if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
                      {
                        uint64_t v61 = HMFGetLogIdentifier();
                        long long v62 = [v121 valueForKeyPath:v56];
                        *(_DWORD *)buf = 138544130;
                        id v151 = v61;
                        __int16 v152 = 2114;
                        uint64_t v153 = v125;
                        __int16 v154 = 2114;
                        v155 = v56;
                        __int16 v156 = 2114;
                        int v157 = v62;
                        _os_log_impl(&dword_22F52A000, v60, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] LOCAL %{public}@: %{public}@", buf, 0x2Au);
                      }
                      id v63 = (void *)MEMORY[0x230FBD990]();
                      id v64 = v59;
                      id v65 = HMFGetOSLogHandle();
                      if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
                      {
                        id v66 = HMFGetLogIdentifier();
                        id v67 = [(HMDServiceTransaction *)v122 valueForKeyPath:v56];
                        *(_DWORD *)buf = 138544130;
                        id v151 = v66;
                        __int16 v152 = 2114;
                        uint64_t v153 = v125;
                        __int16 v154 = 2114;
                        v155 = v56;
                        __int16 v156 = 2114;
                        int v157 = v67;
                        _os_log_impl(&dword_22F52A000, v65, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] UPDATE %{public}@: %{public}@", buf, 0x2Au);
                      }
                      __int16 v49 = v58;
                    }
                    uint64_t v53 = [obj countByEnumeratingWithState:&v134 objects:v149 count:16];
                  }
                  while (v53);
                }

                [*a7 addObject:v122];
                uint64_t v13 = v117;
                long long v32 = v108;
              }
            }
            id v68 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v13, "count"));
            long long v130 = 0u;
            long long v131 = 0u;
            long long v132 = 0u;
            long long v133 = 0u;
            id v69 = v13;
            uint64_t v70 = [v69 countByEnumeratingWithState:&v130 objects:v148 count:16];
            if (v70)
            {
              uint64_t v71 = v70;
              uint64_t v72 = *(void *)v131;
              do
              {
                for (uint64_t k = 0; k != v71; ++k)
                {
                  if (*(void *)v131 != v72) {
                    objc_enumerationMutation(v69);
                  }
                  long long v74 = *(void **)(*((void *)&v130 + 1) + 8 * k);
                  long long v75 = [v74 uuid];
                  long long v76 = [(HMDBackingStoreModelObject *)v32 uuid];
                  char v77 = [v75 isEqual:v76];

                  if ((v77 & 1) == 0) {
                    [v68 addObject:v74];
                  }
                }
                uint64_t v71 = [v69 countByEnumeratingWithState:&v130 objects:v148 count:16];
              }
              while (v71);
            }

            uint64_t v78 = v122;
            uint64_t v79 = v32;
            uint64_t v13 = v68;
            id v10 = v116;
            uint64_t v17 = v110;
            int v14 = v111;
            uint64_t v16 = v112;
            uint64_t v18 = v114;
          }
          else
          {
            long long v80 = (void *)MEMORY[0x230FBD990]();
            id v81 = self;
            uint64_t v82 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
            {
              uint64_t v83 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543874;
              id v151 = v83;
              __int16 v152 = 2114;
              uint64_t v153 = v125;
              __int16 v154 = 2114;
              v155 = v35;
              _os_log_impl(&dword_22F52A000, v82, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Adding service %{public}@", buf, 0x20u);
            }
            [*a6 addObject:v35];
            uint64_t v79 = v35;
            uint64_t v17 = v110;
            int v14 = v111;
            uint64_t v16 = v112;
            uint64_t v18 = v114;
            uint64_t v78 = v125;
          }
        }
        ++v18;
      }
      while (v18 != v16);
      uint64_t v16 = [v14 countByEnumeratingWithState:&v143 objects:v159 count:16];
      if (v16) {
        continue;
      }
      break;
    }
  }

  long long v128 = 0u;
  long long v129 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  id v84 = v13;
  uint64_t v85 = [v84 countByEnumeratingWithState:&v126 objects:v147 count:16];
  if (v85)
  {
    uint64_t v86 = v85;
    id v118 = v84;
    uint64_t v87 = *(void *)v127;
    do
    {
      for (uint64_t m = 0; m != v86; ++m)
      {
        if (*(void *)v127 != v87) {
          objc_enumerationMutation(v118);
        }
        uint64_t v89 = *(void **)(*((void *)&v126 + 1) + 8 * m);
        int v90 = [HMDServiceTransaction alloc];
        uint64_t v91 = [v89 uuid];
        uint64_t v92 = [v10 uuid];
        char v93 = [(HMDBackingStoreModelObject *)v90 initWithObjectChangeType:3 uuid:v91 parentUUID:v92];

        unint64_t v94 = (void *)MEMORY[0x230FBD990]();
        char v95 = self;
        HMFGetOSLogHandle();
        id v96 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          id v97 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v98 = [v89 accessory];
          uint64_t v99 = [v98 shortDescription];
          v100 = v99;
          if (!v99)
          {
            uint64_t v124 = [(HMDBackingStoreModelObject *)v93 parentUUID];
            v100 = (HMDServiceTransaction *)v124;
          }
          *(_DWORD *)buf = 138543874;
          id v151 = v97;
          __int16 v152 = 2114;
          uint64_t v153 = v100;
          __int16 v154 = 2114;
          v155 = v93;
          _os_log_impl(&dword_22F52A000, v96, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Removing service %{public}@", buf, 0x20u);
          if (!v99) {

          }
          id v10 = v116;
        }

        [*a8 addObject:v93];
      }
      uint64_t v86 = [v118 countByEnumeratingWithState:&v126 objects:v147 count:16];
    }
    while (v86);
    id v84 = v118;
  }
  else
  {

    if (!a8)
    {
      BOOL v101 = 1;
      goto LABEL_76;
    }
  }
  id v103 = (void *)MEMORY[0x263EFFA08];
  id v104 = objc_msgSend(*a8, "na_map:", &__block_literal_global_1898);
  id v102 = [v103 setWithArray:v104];

  [(HMDHome *)self filterServiceTransactions:*a6 removedServiceUUIDs:v102];
  [(HMDHome *)self filterServiceTransactions:*a7 removedServiceUUIDs:v102];
  BOOL v101 = 1;
LABEL_75:

LABEL_76:
  return v101;
}

uint64_t __141__HMDHome_getUpdateTransactionForAccessory_hapAccessory_accessoryTransaction_addSvcTransactions_updateSvcTransactions_removeSvcTransactions___block_invoke(uint64_t a1, void *a2)
{
  return [a2 uuid];
}

- (void)__updateServiceTransaction:(id)a3 accessoryTransaction:(id)a4 service:(id)a5 accessory:(id)a6 hapService:(id)a7
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  id v71 = a3;
  id v70 = a4;
  id v12 = a5;
  id v73 = a6;
  id v13 = a7;
  int v14 = (void *)MEMORY[0x263EFF980];
  id v69 = v13;
  uint64_t v15 = [v13 characteristics];
  uint64_t v16 = [v14 arrayWithArray:v15];

  if ([v16 count])
  {
    long long v76 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v16, "count"));
    long long v88 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    id v67 = v16;
    obuint64_t j = v16;
    uint64_t v17 = [obj countByEnumeratingWithState:&v88 objects:v95 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)v89;
      unint64_t v20 = 0x263EFF000uLL;
      id v68 = v12;
      uint64_t v74 = *(void *)v89;
      long long v75 = self;
      do
      {
        uint64_t v21 = 0;
        uint64_t v77 = v18;
        do
        {
          if (*(void *)v89 != v19) {
            objc_enumerationMutation(obj);
          }
          char v22 = *(void **)(*((void *)&v88 + 1) + 8 * v21);
          id v23 = [(HMDHome *)self hapMetadata];
          uint64_t v24 = [v22 type];
          char v25 = [v23 shouldFilterCharacteristicOfType:v24];

          if ((v25 & 1) == 0)
          {
            uint64_t v81 = v21;
            uint64_t v26 = [v22 metadata];
            id v27 = [*(id *)(v20 + 2464) dictionaryWithCapacity:8];
            uint64_t v28 = [v26 format];
            [v27 setObject:v28 forKeyedSubscript:@"metadataFormat"];

            long long v29 = [v26 units];
            [v27 setObject:v29 forKeyedSubscript:@"metadataUnits"];

            long long v30 = [v26 manufacturerDescription];
            [v27 setObject:v30 forKeyedSubscript:@"metadataUserDescription"];

            int v31 = [v26 constraints];

            if (v31)
            {
              long long v32 = [v26 constraints];
              long long v33 = [v32 minimumValue];
              [v27 setObject:v33 forKeyedSubscript:@"metadataMinimumValue"];

              uint64_t v34 = [v26 constraints];
              __int16 v35 = [v34 maximumValue];
              [v27 setObject:v35 forKeyedSubscript:@"metadataMaximumValue"];

              uint64_t v36 = [v26 constraints];
              __int16 v37 = [v36 stepValue];
              [v27 setObject:v37 forKeyedSubscript:@"metadataStepValue"];

              long long v38 = [v26 constraints];
              long long v39 = [v38 maxLength];
              [v27 setObject:v39 forKeyedSubscript:@"metadataMaxLength"];

              char v40 = [v26 constraints];
              long long v41 = [v40 validValues];
              [v27 setObject:v41 forKeyedSubscript:@"metadataValidValues"];
            }
            __int16 v42 = *(void **)(v20 + 2464);
            v93[0] = @"characteristicInstanceID";
            long long v43 = [v22 instanceID];
            v94[0] = v43;
            v93[1] = @"characteristicType";
            long long v44 = [v22 type];
            v94[1] = v44;
            v93[2] = @"characteristicProperties";
            __int16 v45 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v22, "properties"));
            v93[3] = @"characteristicMetadata";
            v94[2] = v45;
            v94[3] = v27;
            id v46 = [NSDictionary dictionaryWithObjects:v94 forKeys:v93 count:4];
            uint64_t v47 = [v42 dictionaryWithDictionary:v46];

            if (v12)
            {
              long long v86 = 0u;
              long long v87 = 0u;
              long long v84 = 0u;
              long long v85 = 0u;
              long long v48 = [v12 characteristics];
              id v49 = (id)[v48 countByEnumeratingWithState:&v84 objects:v92 count:16];
              if (v49)
              {
                uint64_t v72 = (void *)v47;
                uint64_t v79 = v26;
                uint64_t v50 = *(void *)v85;
LABEL_13:
                uint64_t v51 = 0;
                while (1)
                {
                  if (*(void *)v85 != v50) {
                    objc_enumerationMutation(v48);
                  }
                  uint64_t v52 = *(void **)(*((void *)&v84 + 1) + 8 * v51);
                  uint64_t v53 = [v52 instanceID];
                  uint64_t v54 = [v22 instanceID];
                  char v55 = [v53 isEqual:v54];

                  if (v55) {
                    break;
                  }
                  if (v49 == (id)++v51)
                  {
                    id v49 = (id)[v48 countByEnumeratingWithState:&v84 objects:v92 count:16];
                    if (v49) {
                      goto LABEL_13;
                    }
                    id v12 = v68;
                    uint64_t v26 = v79;
                    uint64_t v47 = (uint64_t)v72;
                    goto LABEL_23;
                  }
                }
                id v49 = v52;

                if (v49)
                {
                  __int16 v56 = [v73 findServiceWithServiceType:@"00000701-0000-1000-8000-0026BB765291"];

                  id v12 = v68;
                  uint64_t v26 = v79;
                  if (v56)
                  {
                    uint64_t v57 = [v22 properties];
                    unsigned __int8 v58 = [v49 properties];
                    long long v48 = [NSNumber numberWithUnsignedInteger:v58 & 0x80 | (unint64_t)v57];
                    uint64_t v47 = (uint64_t)v72;
                    [v72 setObject:v48 forKeyedSubscript:@"characteristicProperties"];
                    goto LABEL_23;
                  }
                }
                else
                {
                  id v12 = v68;
                  uint64_t v26 = v79;
                }
                uint64_t v47 = (uint64_t)v72;
              }
              else
              {
LABEL_23:
              }
            }
            long long v80 = v27;
            __int16 v59 = (void *)v47;
            [v76 addObject:v47];
            uint64_t v60 = [v22 value];

            uint64_t v19 = v74;
            uint64_t v21 = v81;
            if (v60)
            {
              aBlock[0] = MEMORY[0x263EF8330];
              aBlock[1] = 3221225472;
              aBlock[2] = __88__HMDHome___updateServiceTransaction_accessoryTransaction_service_accessory_hapService___block_invoke;
              aBlock[3] = &unk_264A1EAE0;
              id v83 = v71;
              uint64_t v61 = _Block_copy(aBlock);
              long long v62 = [v22 type];
              id v63 = [v22 value];
              id v64 = [v69 type];
              +[HMDService processUpdateForCharacteristicType:v62 value:v63 serviceType:v64 service:v12 serviceTransactionGetter:v61 accessory:v73 accessoryTransaction:v70 accessoryTransactionChanged:0];
            }
            self = v75;
            uint64_t v18 = v77;
            unint64_t v20 = 0x263EFF000;
          }
          ++v21;
        }
        while (v21 != v18);
        uint64_t v18 = [obj countByEnumeratingWithState:&v88 objects:v95 count:16];
      }
      while (v18);
    }

    uint64_t v16 = v67;
    id v65 = v76;
  }
  else
  {
    id v65 = 0;
  }
  id v66 = +[HMDCharacteristic sortComparatorForCharacteristicDictionary];
  [v65 sortUsingComparator:v66];

  [v71 setCharacteristics:v65];
}

id __88__HMDHome___updateServiceTransaction_accessoryTransaction_service_accessory_hapService___block_invoke(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

- (void)accessoryBrowser:(id)a3 didFinishPairingForAccessoryServer:(id)a4
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v37 = a3;
  id v38 = a4;
  id v6 = [(HMDHome *)self primaryResident];
  id v7 = v6;
  if (v6 && ([v6 device], BOOL v8 = objc_claimAutoreleasedReturnValue(), v8, v8))
  {
    id v9 = [HMDRemoteDeviceMessageDestination alloc];
    id v10 = [(HMDHome *)self uuid];
    id v11 = [v7 device];
    id v12 = [(HMDRemoteDeviceMessageDestination *)v9 initWithTarget:v10 device:v11];

    id v13 = v38;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    id v15 = v14;

    uint64_t v16 = [MEMORY[0x263EFF9A0] dictionary];
    uint64_t v17 = [v15 nodeID];
    [v16 setObject:v17 forKeyedSubscript:@"HMDHomePairingCompletionNodeIDMessageKey"];

    uint64_t v18 = [v15 fabricID];
    [v16 setObject:v18 forKeyedSubscript:@"HMDHomePairingCompletionFabricIDMessageKey"];

    uint64_t v19 = [v15 fabricID];
    [v16 setObject:v19 forKeyedSubscript:@"HMDHomePairingCompletionFabricIndexMessageKey"];

    unint64_t v20 = [v15 vendorID];
    [v16 setObject:v20 forKeyedSubscript:@"HMDHomePairingCompletionVendorIDMessageKey"];

    uint64_t v21 = [v15 productID];
    [v16 setObject:v21 forKeyedSubscript:@"HMDHomePairingCompletionProductIDMessageKey"];

    char v22 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v15, "configNumber"));
    [v16 setObject:v22 forKeyedSubscript:@"HMDHomePairingCompletionConfigNumberMessageKey"];

    id v23 = [v15 category];
    [v16 setObject:v23 forKeyedSubscript:@"HMDHomePairingCompletionCategoryMessageKey"];

    uint64_t v24 = [v15 topology];
    [v16 setObject:v24 forKeyedSubscript:@"HMDHomePairingCompletionTopologyMessageKey"];

    char v25 = (void *)[objc_alloc(MEMORY[0x263F42590]) initWithName:@"HMDHomeNotificationPairingCompletionMessage" destination:v12 payload:v16];
    [v25 setRemote:1];
    [v25 setSecureRemote:1];
    objc_initWeak(&location, self);
    v39[0] = MEMORY[0x263EF8330];
    v39[1] = 3221225472;
    v39[2] = __63__HMDHome_accessoryBrowser_didFinishPairingForAccessoryServer___block_invoke;
    void v39[3] = &unk_264A2D420;
    uint64_t v36 = &v41;
    objc_copyWeak(&v41, &location);
    id v40 = v13;
    uint64_t v26 = (void *)MEMORY[0x230FBD990]([v25 setResponseHandler:v39]);
    id v27 = self;
    HMFGetOSLogHandle();
    uint64_t v28 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v29 = (id)objc_claimAutoreleasedReturnValue();
      long long v30 = objc_msgSend(v25, "shortDescription", &v41, v37);
      *(_DWORD *)buf = 138543618;
      id v44 = v29;
      __int16 v45 = 2112;
      id v46 = v30;
      _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@Sending message %@ to notify pairing completion", buf, 0x16u);
    }
    int v31 = [(HMDHome *)v27 msgDispatcher];
    [v31 sendMessage:v25];

    objc_destroyWeak(v36);
    objc_destroyWeak(&location);
  }
  else
  {
    long long v32 = (void *)MEMORY[0x230FBD990]();
    long long v33 = self;
    uint64_t v34 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      __int16 v35 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v44 = v35;
      _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_ERROR, "%{public}@Primary resident is not available", buf, 0xCu);
    }
  }
}

void __63__HMDHome_accessoryBrowser_didFinishPairingForAccessoryServer___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    BOOL v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = WeakRetained;
    id v10 = HMFGetOSLogHandle();
    id v11 = v10;
    if (v5)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v12 = HMFGetLogIdentifier();
        uint64_t v13 = *(void *)(a1 + 32);
        int v19 = 138543874;
        unint64_t v20 = v12;
        __int16 v21 = 2112;
        uint64_t v22 = v13;
        __int16 v23 = 2112;
        id v24 = v5;
        int v14 = "%{public}@Failed to notify pairing completion for accessory server %@ to the primary resident with error %@";
        id v15 = v11;
        os_log_type_t v16 = OS_LOG_TYPE_ERROR;
        uint32_t v17 = 32;
LABEL_7:
        _os_log_impl(&dword_22F52A000, v15, v16, v14, (uint8_t *)&v19, v17);
      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      uint64_t v18 = *(void *)(a1 + 32);
      int v19 = 138543618;
      unint64_t v20 = v12;
      __int16 v21 = 2112;
      uint64_t v22 = v18;
      int v14 = "%{public}@Successfully notified the primary resident of pairing completion for accessory server %@";
      id v15 = v11;
      os_log_type_t v16 = OS_LOG_TYPE_INFO;
      uint32_t v17 = 22;
      goto LABEL_7;
    }
  }
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateConnectionState:(BOOL)a5 linkLayerType:(int64_t)a6 bookkeeping:(id)a7 withError:(id)a8
{
  BOOL v10 = a5;
  id v13 = a8;
  id v14 = a7;
  id v15 = [a4 identifier];
  id v16 = [(HMDHome *)self hapAccessoryWithIdentifier:v15];

  [v16 didUpdateConnectionState:v10 sessionInfo:0 linkLayerType:a6 bookkeeping:v14 withError:v13];
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateConnectionState:(BOOL)a5 sessionInfo:(id)a6 linkLayerType:(int64_t)a7 withError:(id)a8
{
  BOOL v11 = a5;
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a4;
  id v16 = a6;
  id v17 = a8;
  uint64_t v18 = [v15 identifier];
  int v19 = [(HMDHome *)self hapAccessoryWithIdentifier:v18];

  [v19 didUpdateConnectionState:v11 sessionInfo:v16 linkLayerType:a7 bookkeeping:0 withError:v17];
  if (!-[HMDHome hasAnyResident](self, "hasAnyResident") && [v19 supportsCHIP] && v11)
  {
    unint64_t v20 = (void *)MEMORY[0x230FBD990]();
    __int16 v21 = self;
    uint64_t v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      __int16 v23 = HMFGetLogIdentifier();
      id v24 = [v19 name];
      int v26 = 138543618;
      id v27 = v23;
      __int16 v28 = 2112;
      id v29 = v24;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_DEBUG, "%{public}@Matter accessory: %@ is reachable. Evaluating home location.", (uint8_t *)&v26, 0x16u);
    }
    uint64_t v25 = [(HMDHome *)v21 homeLocationHandler];
    [v25 matterAccessoryBecameReachable];
  }
}

- (void)accessoryBrowser:(id)a3 didUpdateReachability:(BOOL)a4 forBTLEAccessoriesWithServerIdentifier:(id)a5
{
  BOOL v6 = a4;
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a5;
  BOOL v10 = [(HMDHome *)self hapAccessories];
  v26[0] = MEMORY[0x263EF8330];
  v26[1] = 3221225472;
  void v26[2] = __89__HMDHome_accessoryBrowser_didUpdateReachability_forBTLEAccessoriesWithServerIdentifier___block_invoke;
  v26[3] = &unk_264A28A10;
  id v11 = v9;
  id v27 = v11;
  id v12 = objc_msgSend(v10, "na_firstObjectPassingTest:", v26);

  [v12 setReachability:v6 serverIdentifier:v11 linkType:2];
  if (!v6
    && isiOSDevice()
    && ![(HMDHome *)self _hasPairedReachableBTLEAccessories]
    && ([(HMDHome *)self homeLocation] == 3 || [(HMDHome *)self homeLocation] == 2))
  {
    id v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v29 = v16;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@All BLE accessories have become unreachable and we are out... Stop looking", buf, 0xCu);
    }
    id v17 = [(HMDHome *)v14 accessoryBrowser];
    [v17 btleAccessoryReachabilityProbeTimer:0];

    uint64_t v18 = [(HMDHome *)v14 hapAccessories];
    int v19 = objc_msgSend(v18, "na_map:", &__block_literal_global_1894);

    if ([v19 count])
    {
      unint64_t v20 = (void *)MEMORY[0x230FBD990]();
      __int16 v21 = v14;
      uint64_t v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        __int16 v23 = HMFGetLogIdentifier();
        id v24 = [(HMDHome *)v21 uuid];
        *(_DWORD *)buf = 138543874;
        id v29 = v23;
        __int16 v30 = 2112;
        int v31 = v19;
        __int16 v32 = 2112;
        long long v33 = v24;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Stop tracking BLE accessories: %@ in Home UUID: %@", buf, 0x20u);
      }
      uint64_t v25 = [(HMDHome *)v21 accessoryBrowser];
      [v25 stopTrackingBTLEAccessoriesWithIdentifiers:v19];
    }
  }
}

uint64_t __89__HMDHome_accessoryBrowser_didUpdateReachability_forBTLEAccessoriesWithServerIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  uint64_t v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id __89__HMDHome_accessoryBrowser_didUpdateReachability_forBTLEAccessoriesWithServerIdentifier___block_invoke_1891(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 hasBTLELink])
  {
    id v3 = [v2 identifier];
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateCategory:(id)a5
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = [v9 identifier];
  id v12 = [(HMDHome *)self hapAccessoryWithIdentifier:v11];

  if (v12)
  {
    id v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = HMFGetLogIdentifier();
      id v17 = [v12 shortDescription];
      int v18 = 138543874;
      int v19 = v16;
      __int16 v20 = 2112;
      __int16 v21 = v17;
      __int16 v22 = 2112;
      id v23 = v10;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Paired Accessory: %@, Updated Category to %@", (uint8_t *)&v18, 0x20u);
    }
    [v12 updateCategory:v10];
  }
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateHasPairings:(BOOL)a5
{
  int v5 = a5;
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = [v9 identifier];
  id v11 = [(HMDHome *)self hapAccessoryWithIdentifier:v10];

  if (v11)
  {
    id v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      id v16 = [v9 identifier];
      int v18 = 138543874;
      int v19 = v15;
      __int16 v20 = 2112;
      __int16 v21 = v16;
      __int16 v22 = 1024;
      int v23 = v5;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Updating accessory server %@ with new value of hasPairings: %d", (uint8_t *)&v18, 0x1Cu);
    }
    if ([v9 isPaired] == v5)
    {
      id v17 = [(HMDHome *)v13 accessoryBrowser];
      [v17 resurrectAccessoryServer:v9];
    }
    else
    {
      [(HMDHome *)v13 _unconfigurePairedAccessoriesForServer:v9 updateReachability:1];
      id v17 = [(HMDHome *)v13 accessoryBrowser];
      [v17 tombstoneAccessoryServer:v9];
    }
  }
}

- (BOOL)_isSecureClassTriggeredByCharacteristics:(id)a3
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = (void *)MEMORY[0x263EFF980];
  BOOL v6 = [(HMDHome *)self triggers];
  id v7 = objc_msgSend(v5, "arrayWithCapacity:", objc_msgSend(v6, "count"));

  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id v37 = self;
  obuint64_t j = [(HMDHome *)self triggers];
  uint64_t v40 = [obj countByEnumeratingWithState:&v55 objects:v68 count:16];
  if (v40)
  {
    uint64_t v39 = *(void *)v56;
    do
    {
      for (uint64_t i = 0; i != v40; ++i)
      {
        if (*(void *)v56 != v39) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(id *)(*((void *)&v55 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v10 = v9;
        }
        else {
          id v10 = 0;
        }
        id v11 = v10;

        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        id v41 = v11;
        id v12 = [v11 characteristicBaseEvents];
        uint64_t v13 = [v12 countByEnumeratingWithState:&v51 objects:v67 count:16];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)v52;
          do
          {
            for (uint64_t j = 0; j != v14; ++j)
            {
              if (*(void *)v52 != v15) {
                objc_enumerationMutation(v12);
              }
              id v17 = [*(id *)(*((void *)&v51 + 1) + 8 * j) characteristic];
              int v18 = [v4 containsObject:v17];

              if (v18) {
                [v7 addObject:v9];
              }
            }
            uint64_t v14 = [v12 countByEnumeratingWithState:&v51 objects:v67 count:16];
          }
          while (v14);
        }
      }
      uint64_t v40 = [obj countByEnumeratingWithState:&v55 objects:v68 count:16];
    }
    while (v40);
  }

  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id v19 = v7;
  uint64_t v20 = [v19 countByEnumeratingWithState:&v47 objects:v66 count:16];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)v48;
    uint64_t v42 = *(void *)v48;
    do
    {
      for (uint64_t k = 0; k != v21; ++k)
      {
        if (*(void *)v48 != v22) {
          objc_enumerationMutation(v19);
        }
        uint64_t v24 = *(void **)(*((void *)&v47 + 1) + 8 * k);
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        uint64_t v25 = [v24 actionSets];
        uint64_t v26 = [v25 countByEnumeratingWithState:&v43 objects:v65 count:16];
        if (v26)
        {
          uint64_t v27 = v26;
          uint64_t v28 = *(void *)v44;
          while (2)
          {
            for (uint64_t m = 0; m != v27; ++m)
            {
              if (*(void *)v44 != v28) {
                objc_enumerationMutation(v25);
              }
              __int16 v30 = *(void **)(*((void *)&v43 + 1) + 8 * m);
              if ([v30 containsSecureCharacteristic])
              {
                __int16 v32 = (void *)MEMORY[0x230FBD990]();
                long long v33 = v37;
                uint64_t v34 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
                {
                  __int16 v35 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138543874;
                  uint64_t v60 = v35;
                  __int16 v61 = 2112;
                  long long v62 = v24;
                  __int16 v63 = 2112;
                  id v64 = v30;
                  _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_DEBUG, "%{public}@Trigger %@ has action set %@ with security class", buf, 0x20u);
                }

                BOOL v31 = 1;
                goto LABEL_40;
              }
            }
            uint64_t v27 = [v25 countByEnumeratingWithState:&v43 objects:v65 count:16];
            if (v27) {
              continue;
            }
            break;
          }
        }

        uint64_t v22 = v42;
      }
      uint64_t v21 = [v19 countByEnumeratingWithState:&v47 objects:v66 count:16];
      BOOL v31 = 0;
    }
    while (v21);
  }
  else
  {
    BOOL v31 = 0;
  }
LABEL_40:

  return v31;
}

- (void)_handleUpdatedCharacteristics:(id)a3 accessoryServer:(id)a4 stateNumber:(id)a5 broadcast:(BOOL)a6 internal:(BOOL)a7
{
  BOOL v8 = a6;
  uint64_t v67 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  uint64_t v15 = [v13 identifier];
  id v16 = [(HMDHome *)self hapAccessoryWithIdentifier:v15];

  if (v16)
  {
    if (v8)
    {
      id v17 = +[HMDBLEBroadcastEventReceived broadcastEventFromAccessory:v16 withExpectedGSN:1];
      int v18 = [(HMDHome *)self logEventSubmitter];
      [v18 submitLogEvent:v17];

      id v19 = [(HMDHome *)self _hmdCharacteristicsForUpdatedHAPCharacteristics:v12 accessoryServer:v13];
      BOOL v20 = [(HMDHome *)self _isSecureClassTriggeredByCharacteristics:v19];

      if (v20)
      {
        uint64_t v21 = (void *)MEMORY[0x230FBD990]();
        uint64_t v22 = self;
        int v23 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v24 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          id v66 = v24;
          _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_DEBUG, "%{public}@Broadcasted change - triggering secure class - confirming", buf, 0xCu);
        }
        if ([v13 linkType] == 2)
        {
          id v25 = v13;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v26 = v25;
          }
          else {
            uint64_t v26 = 0;
          }
          id v27 = v26;

          [v27 setConnectReason:4];
        }
        uint64_t v28 = [(HMDHome *)v22 accessoryBrowser];
        [v28 discoverAccessories:v13];
LABEL_33:

        goto LABEL_34;
      }
    }
    id v49 = v14;
    id v50 = v13;
    id v51 = v12;
    id v29 = [(HMDHome *)self _changedHMDCharacteristicsForHAPCharacteristics:v12 stateNumber:v14 broadcast:v8 accessoryServer:v13];
    [(HMDHome *)self _notifyChangedCharacteristics:v29 message:0 modifiedCharacteristics:0 broadcast:v8];
    if (!v8 && !a7) {
      [(HMDHome *)self _auditChangedCharactersitics:v29];
    }
    uint64_t v28 = [MEMORY[0x263EFF9A0] dictionary];
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    id v30 = v29;
    uint64_t v31 = [v30 countByEnumeratingWithState:&v57 objects:v64 count:16];
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v33 = *(void *)v58;
      do
      {
        for (uint64_t i = 0; i != v32; ++i)
        {
          if (*(void *)v58 != v33) {
            objc_enumerationMutation(v30);
          }
          __int16 v35 = *(void **)(*((void *)&v57 + 1) + 8 * i);
          uint64_t v36 = [v35 accessory];
          id v37 = [v36 uuid];
          id v38 = [v28 objectForKeyedSubscript:v37];

          if (!v38)
          {
            id v38 = [MEMORY[0x263EFF980] array];
            uint64_t v39 = [v36 uuid];
            [v28 setObject:v38 forKeyedSubscript:v39];
          }
          [v38 addObject:v35];
        }
        uint64_t v32 = [v30 countByEnumeratingWithState:&v57 objects:v64 count:16];
      }
      while (v32);
    }
    id v48 = v30;

    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    obuint64_t j = [v28 allValues];
    uint64_t v40 = [obj countByEnumeratingWithState:&v53 objects:v63 count:16];
    if (v40)
    {
      uint64_t v41 = v40;
      uint64_t v42 = *(void *)v54;
      do
      {
        for (uint64_t j = 0; j != v41; ++j)
        {
          if (*(void *)v54 != v42) {
            objc_enumerationMutation(obj);
          }
          long long v44 = *(void **)(*((void *)&v53 + 1) + 8 * j);
          v61[0] = @"HMDNotificationCharacteristicValueUpdatedReasonKey";
          v61[1] = @"HMDNotificationCharacteristicValueUpdatedChangedCharacteristicsKey";
          v62[0] = &unk_26E470A50;
          v62[1] = v44;
          long long v45 = objc_msgSend(NSDictionary, "dictionaryWithObjects:forKeys:count:", v62, v61, 2, v48);
          long long v46 = [v44 firstObject];
          long long v47 = [v46 accessory];
          logAndPostNotification(@"HMDNotificationCharacteristicValueUpdated", v47, v45);
        }
        uint64_t v41 = [obj countByEnumeratingWithState:&v53 objects:v63 count:16];
      }
      while (v41);
    }

    id v13 = v50;
    id v12 = v51;
    id v14 = v49;
    id v17 = v48;
    goto LABEL_33;
  }
LABEL_34:
}

- (void)handleUpdatedCharacteristics:(id)a3 accessoryServer:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_handleUpdatedCharacteristics_accessoryServer___block_invoke;
  block[3] = &unk_264A2F2F8;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t __56__HMDHome_handleUpdatedCharacteristics_accessoryServer___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleUpdatedCharacteristics:*(void *)(a1 + 40) accessoryServer:*(void *)(a1 + 48) stateNumber:0 broadcast:0 internal:1];
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateValuesForCharacteristics:(id)a5 stateNumber:(id)a6 broadcast:(BOOL)a7
{
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  id v14 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __100__HMDHome_accessoryBrowser_accessoryServer_didUpdateValuesForCharacteristics_stateNumber_broadcast___block_invoke;
  block[3] = &unk_264A25E10;
  void block[4] = self;
  id v19 = v12;
  id v20 = v11;
  id v21 = v13;
  BOOL v22 = a7;
  id v15 = v13;
  id v16 = v11;
  id v17 = v12;
  dispatch_async(v14, block);
}

uint64_t __100__HMDHome_accessoryBrowser_accessoryServer_didUpdateValuesForCharacteristics_stateNumber_broadcast___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleUpdatedCharacteristics:*(void *)(a1 + 40) accessoryServer:*(void *)(a1 + 48) stateNumber:*(void *)(a1 + 56) broadcast:*(unsigned __int8 *)(a1 + 64) internal:0];
}

- (id)_changedHMDCharacteristicsForHAPCharacteristics:(id)a3 stateNumber:(id)a4 broadcast:(BOOL)a5 accessoryServer:(id)a6
{
  BOOL v7 = a5;
  uint64_t v178 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v139 = a4;
  id v133 = a6;
  long long v144 = [MEMORY[0x263F08968] strongToStrongObjectsMapTable];
  long long v155 = 0u;
  long long v156 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v136 = self;
  obuint64_t j = v10;
  uint64_t v145 = [obj countByEnumeratingWithState:&v155 objects:v177 count:16];
  if (v145)
  {
    long long v140 = *(void **)v156;
    BOOL v137 = v7;
    do
    {
      for (uint64_t i = 0; i != v145; ++i)
      {
        if (*(void **)v156 != v140) {
          objc_enumerationMutation(obj);
        }
        id v12 = *(void **)(*((void *)&v155 + 1) + 8 * i);
        id v13 = [v12 service];
        id v14 = [v13 accessory];
        id v15 = [(HMDHome *)self hapMetadata];
        if (v7)
        {
          id v16 = [v12 type];
          char v17 = [v15 shouldFilterCharacteristicOfType:v16];

          if (v17) {
            goto LABEL_16;
          }
          uint64_t v18 = [v133 primaryAccessory];

          id v14 = (void *)v18;
        }
        else
        {
          id v19 = [v13 type];
          char v20 = [v15 shouldFilterServiceOfType:v19];

          if (v20) {
            goto LABEL_16;
          }
        }
        id v21 = [(HMDHome *)self hmdHAPAccessoryWithHAPAccessory:v14];
        BOOL v22 = [v12 instanceID];
        int v23 = [v21 hmdCharacteristicForInstanceId:v22];

        if (v23)
        {
          [v144 setObject:v23 forKey:v12];
        }
        else
        {
          context = (void *)MEMORY[0x230FBD990]();
          uint64_t v24 = self;
          id v25 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            id v131 = (id)objc_claimAutoreleasedReturnValue();
            [v133 identifier];
            uint64_t v26 = v128 = v24;
            id v27 = [v13 instanceID];
            uint64_t v28 = [v12 instanceID];
            id v29 = [v12 type];
            *(_DWORD *)buf = 138544386;
            id v161 = v131;
            __int16 v162 = 2112;
            uint64_t v163 = (uint64_t)v26;
            __int16 v164 = 2112;
            uint64_t v165 = (uint64_t)v27;
            __int16 v166 = 2112;
            uint64_t v167 = v28;
            __int16 v168 = 2112;
            BOOL v169 = v29;
            _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot map HAPCharacteristic %@/%@/%@/%@ to a HMDCharacteristic", buf, 0x34u);

            uint64_t v24 = v128;
          }

          self = v136;
        }

        BOOL v7 = v137;
LABEL_16:
      }
      uint64_t v145 = [obj countByEnumeratingWithState:&v155 objects:v177 count:16];
    }
    while (v145);
  }

  objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(obj, "count"));
  id v132 = (id)objc_claimAutoreleasedReturnValue();
  v123 = [MEMORY[0x263EFF9C0] set];
  long long v151 = 0u;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  id v30 = [v144 keyEnumerator];
  uint64_t v31 = [v30 allObjects];

  id v129 = v31;
  uint64_t v138 = [v31 countByEnumeratingWithState:&v151 objects:v176 count:16];
  int v33 = 0;
  if (!v138)
  {
    uint64_t v34 = v139;
    goto LABEL_71;
  }
  contexta = *(void **)v152;
  *(void *)&long long v32 = 138543618;
  long long v122 = v32;
  uint64_t v34 = v139;
  do
  {
    uint64_t v35 = 0;
    do
    {
      if (*(void **)v152 != contexta) {
        objc_enumerationMutation(v129);
      }
      uint64_t v36 = *(void **)(*((void *)&v151 + 1) + 8 * v35);
      id v37 = objc_msgSend(v144, "objectForKey:", v36, v122);
      id v38 = [v37 stateNumber];
      int v39 = HMFEqualObjects();

      if (v39)
      {
        uint64_t v146 = v35;
        uint64_t v40 = [v36 value];
        uint64_t v41 = [v37 lastKnownValue];
        BOOL v42 = +[HMDCharacteristic value:v40 differentThan:v41];

        if (v34 && v42)
        {
          long long v141 = (void *)MEMORY[0x230FBD990]();
          long long v43 = self;
          long long v44 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            v125 = HMFGetLogIdentifier();
            long long v45 = [v37 type];
            uint64_t v46 = [v37 instanceID];
            long long v47 = [v37 lastKnownValue];
            id v48 = [v37 stateNumber];
            id v49 = [v36 value];
            id v50 = [v133 identifier];
            *(_DWORD *)buf = 138545154;
            id v161 = v125;
            __int16 v162 = 2112;
            uint64_t v163 = (uint64_t)v45;
            __int16 v164 = 2112;
            uint64_t v165 = v46;
            id v51 = (void *)v46;
            __int16 v166 = 2112;
            uint64_t v167 = v47;
            __int16 v168 = 2112;
            BOOL v169 = v48;
            __int16 v170 = 2112;
            id v171 = v49;
            __int16 v172 = 2112;
            id v173 = v139;
            __int16 v174 = 2112;
            id v175 = v50;
            _os_log_impl(&dword_22F52A000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Characteristic: '%@'/%@ updated value at same state number from %@/%@ to %@/%@ for accessory: %@", buf, 0x52u);

            self = v136;
          }
          goto LABEL_32;
        }
        if ([v37 shouldUpdateValueFromHAPCharacteristic:v36]
          && ([v36 value], id v73 = objc_claimAutoreleasedReturnValue(), v73, v73))
        {
          uint64_t v74 = (void *)MEMORY[0x230FBD990]();
          long long v75 = self;
          long long v76 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v77 = HMFGetLogIdentifier();
            uint64_t v78 = [v37 type];
            [v37 instanceID];
            uint64_t v79 = v126 = v75;
            [v37 lastKnownValue];
            long long v80 = v142 = v74;
            uint64_t v81 = [v36 value];
            uint64_t v82 = [v133 identifier];
            *(_DWORD *)buf = 138544898;
            id v161 = v77;
            __int16 v162 = 2112;
            uint64_t v163 = (uint64_t)v78;
            __int16 v164 = 2112;
            uint64_t v165 = (uint64_t)v79;
            __int16 v166 = 2112;
            uint64_t v167 = v80;
            __int16 v168 = 2112;
            BOOL v169 = v81;
            __int16 v170 = 2112;
            id v171 = v139;
            __int16 v172 = 2112;
            id v173 = v82;
            _os_log_impl(&dword_22F52A000, v76, OS_LOG_TYPE_DEFAULT, "%{public}@Characteristic: '%@'/%@ updated value from %@ to %@ at same state number %@ for accessory: %@", buf, 0x48u);

            uint64_t v74 = v142;
            long long v75 = v126;
          }
          [v132 addObject:v37];
          id v83 = [v37 accessory];
          if (([v83 supportsWoL] & 1) == 0 && !objc_msgSend(v83, "custom1WoBLE")) {
            goto LABEL_48;
          }
          long long v84 = (void *)MEMORY[0x230FBD990]();
          long long v85 = v75;
          long long v86 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
          {
            long long v87 = HMFGetLogIdentifier();
            long long v88 = [v133 identifier];
            *(_DWORD *)buf = 138544130;
            id v161 = v87;
            __int16 v162 = 2112;
            uint64_t v163 = (uint64_t)v36;
            __int16 v164 = 2112;
            uint64_t v165 = (uint64_t)v37;
            __int16 v166 = 2112;
            uint64_t v167 = v88;
            _os_log_impl(&dword_22F52A000, v86, OS_LOG_TYPE_INFO, "%{public}@Checking if we should update value hapCharacteristic %@ to hmdCharacteristic %@ for accessory: %@", buf, 0x2Au);
          }
          if (v42
            || ([v37 lastKnownValueUpdateTime],
                long long v89 = objc_claimAutoreleasedReturnValue(),
                [v36 valueUpdatedTime],
                long long v90 = objc_claimAutoreleasedReturnValue(),
                uint64_t v91 = [v89 compare:v90],
                v90,
                v89,
                v91))
          {
LABEL_48:

            self = v136;
            goto LABEL_33;
          }
          uint64_t v110 = (void *)MEMORY[0x230FBD990]();
          uint64_t v111 = v85;
          uint64_t v112 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
          {
            v113 = HMFGetLogIdentifier();
            uint64_t v114 = [v133 identifier];
            *(_DWORD *)buf = v122;
            id v161 = v113;
            __int16 v162 = 2112;
            uint64_t v163 = (uint64_t)v114;
            _os_log_impl(&dword_22F52A000, v112, OS_LOG_TYPE_INFO, "%{public}@Not updating value because update times and values are the same for accessory: %@", buf, 0x16u);
          }

          uint64_t v34 = v139;
          [v37 setStateNumber:v139];
          int v33 = 1;
        }
        else
        {
          uint64_t v92 = (void *)MEMORY[0x230FBD990]();
          char v93 = self;
          unint64_t v94 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v124 = HMFGetLogIdentifier();
            uint64_t v95 = [v37 type];
            uint64_t v96 = [v37 instanceID];
            [v37 stateNumber];
            id v97 = v127 = v33;
            [v37 lastKnownValue];
            uint64_t v98 = v143 = v92;
            uint64_t v99 = [v36 value];
            v100 = [v133 identifier];
            *(_DWORD *)buf = 138544898;
            id v161 = v124;
            __int16 v162 = 2112;
            uint64_t v163 = v95;
            BOOL v101 = (void *)v95;
            __int16 v164 = 2112;
            uint64_t v165 = (uint64_t)v96;
            __int16 v166 = 2112;
            uint64_t v167 = v97;
            __int16 v168 = 2112;
            BOOL v169 = v98;
            __int16 v170 = 2112;
            id v171 = v99;
            __int16 v172 = 2112;
            id v173 = v100;
            _os_log_impl(&dword_22F52A000, v94, OS_LOG_TYPE_DEBUG, "%{public}@Ignoring the update for characteristic: '%@'/%@/%@ from %@ to %@ for accessory: %@", buf, 0x48u);

            uint64_t v92 = v143;
            int v33 = v127;

            uint64_t v34 = v139;
          }
        }
        self = v136;
LABEL_53:
        uint64_t v35 = v146;
        if (!v34) {
          goto LABEL_59;
        }
LABEL_54:
        if ((v33 & 1) != 0 && ([v37 shouldIgnoreCacheValueForRead] & 1) == 0)
        {
          id v102 = [v37 accessory];
          if (v102) {
            [v123 addObject:v102];
          }
        }
        goto LABEL_59;
      }
      uint64_t v52 = [v36 value];
      if (!v52
        || (long long v53 = (void *)v52,
            char v54 = [v37 shouldUpdateValueFromHAPCharacteristic:v36],
            v53,
            (v54 & 1) != 0))
      {
        long long v141 = (void *)MEMORY[0x230FBD990]();
        long long v55 = self;
        long long v44 = HMFGetOSLogHandle();
        uint64_t v146 = v35;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          long long v56 = HMFGetLogIdentifier();
          long long v57 = [v37 type];
          long long v58 = [v37 instanceID];
          long long v59 = [v37 lastKnownValue];
          long long v60 = [v37 stateNumber];
          __int16 v61 = [v36 value];
          long long v62 = [v133 identifier];
          *(_DWORD *)buf = 138545154;
          id v161 = v56;
          __int16 v162 = 2112;
          uint64_t v163 = (uint64_t)v57;
          __int16 v164 = 2112;
          uint64_t v165 = (uint64_t)v58;
          __int16 v166 = 2112;
          uint64_t v167 = v59;
          __int16 v168 = 2112;
          BOOL v169 = v60;
          __int16 v170 = 2112;
          id v171 = v61;
          __int16 v172 = 2112;
          id v173 = v139;
          __int16 v174 = 2112;
          id v175 = v62;
          _os_log_impl(&dword_22F52A000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Characteristic: '%@'/%@ updated value / state number from %@/%@ to %@/%@ for accessory: %@", buf, 0x52u);

          self = v136;
        }
LABEL_32:

        [v132 addObject:v37];
LABEL_33:
        uint64_t v34 = v139;
        [v37 setStateNumber:v139];
        __int16 v63 = [v36 notificationContext];

        if (v63)
        {
          id v64 = (void *)MEMORY[0x230FBD990]();
          id v65 = self;
          id v66 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
          {
            uint64_t v67 = HMFGetLogIdentifier();
            id v68 = [v36 value];
            uint64_t v69 = [v36 notificationContext];
            *(_DWORD *)buf = 138543874;
            id v161 = v67;
            __int16 v162 = 2112;
            uint64_t v163 = (uint64_t)v68;
            __int16 v164 = 2112;
            uint64_t v165 = (uint64_t)v69;
            _os_log_impl(&dword_22F52A000, v66, OS_LOG_TYPE_INFO, "%{public}@Updating HMD characteristic with value: %@ and notification context: %@", buf, 0x20u);

            self = v136;
          }
        }
        id v70 = [v36 value];
        id v71 = [v36 valueUpdatedTime];
        uint64_t v72 = [v36 notificationContext];
        [v37 updateValue:v70 updatedTime:v71 stateNumber:v139 notificationContext:v72];

        int v33 = 1;
        goto LABEL_53;
      }
      id v103 = (void *)MEMORY[0x230FBD990]();
      id v104 = self;
      uint64_t v105 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
      {
        id v106 = HMFGetLogIdentifier();
        long long v107 = [v36 value];
        v108 = [v37 shortDescription];
        char v109 = [v133 identifier];
        *(_DWORD *)buf = 138544130;
        id v161 = v106;
        __int16 v162 = 2112;
        uint64_t v163 = (uint64_t)v107;
        __int16 v164 = 2112;
        uint64_t v165 = (uint64_t)v108;
        __int16 v166 = 2112;
        uint64_t v167 = v109;
        _os_log_impl(&dword_22F52A000, v105, OS_LOG_TYPE_INFO, "%{public}@Ignoring same value %@ updates from local for characteristic: '%@' for accessory: %@", buf, 0x2Au);

        uint64_t v34 = v139;
        self = v136;
      }
      [v37 setStateNumber:v34];
      int v33 = 1;
      if (v34) {
        goto LABEL_54;
      }
LABEL_59:

      ++v35;
    }
    while (v138 != v35);
    uint64_t v115 = [v129 countByEnumeratingWithState:&v151 objects:v176 count:16];
    uint64_t v138 = v115;
  }
  while (v115);
LABEL_71:

  long long v149 = 0u;
  long long v150 = 0u;
  long long v147 = 0u;
  long long v148 = 0u;
  id v116 = v123;
  uint64_t v117 = [v116 countByEnumeratingWithState:&v147 objects:v159 count:16];
  if (v117)
  {
    uint64_t v118 = v117;
    uint64_t v119 = *(void *)v148;
    do
    {
      for (uint64_t j = 0; j != v118; ++j)
      {
        if (*(void *)v148 != v119) {
          objc_enumerationMutation(v116);
        }
        [*(id *)(*((void *)&v147 + 1) + 8 * j) notifyingCharacteristicStateNumberUpdated:v34];
      }
      uint64_t v118 = [v116 countByEnumeratingWithState:&v147 objects:v159 count:16];
    }
    while (v118);
  }

  if (v34 != 0 && (v33 & 1) != 0) {
    [(HMDHome *)self saveToCurrentAccountWithReason:@"kCharacteristicValueUpdateStateNumberKey"];
  }

  return v132;
}

- (id)_hmdCharacteristicsForUpdatedHAPCharacteristics:(id)a3 accessoryServer:(id)a4
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v24 = a4;
  objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  id v27 = (id)objc_claimAutoreleasedReturnValue();
  int v23 = [(HMDHome *)self accessories];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  obuint64_t j = v6;
  uint64_t v25 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
  if (v25)
  {
    uint64_t v22 = *(void *)v33;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v33 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v26 = v7;
        BOOL v8 = *(void **)(*((void *)&v32 + 1) + 8 * v7);
        id v9 = [v24 primaryAccessory];
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        id v10 = v23;
        uint64_t v11 = [v10 countByEnumeratingWithState:&v28 objects:v36 count:16];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = *(void *)v29;
          do
          {
            for (uint64_t i = 0; i != v12; ++i)
            {
              if (*(void *)v29 != v13) {
                objc_enumerationMutation(v10);
              }
              id v15 = *(id *)(*((void *)&v28 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                id v16 = v15;
              }
              else {
                id v16 = 0;
              }
              id v17 = v16;

              if ([v17 matchesHAPAccessory:v9])
              {
                uint64_t v18 = [v8 instanceID];
                id v19 = [v17 hmdCharacteristicForInstanceId:v18];

                if ([v19 shouldUpdateValueFromHAPCharacteristic:v8]) {
                  [v27 addObject:v19];
                }
              }
            }
            uint64_t v12 = [v10 countByEnumeratingWithState:&v28 objects:v36 count:16];
          }
          while (v12);
        }

        uint64_t v7 = v26 + 1;
      }
      while (v26 + 1 != v25);
      uint64_t v25 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
    }
    while (v25);
  }

  return v27;
}

- (void)accessoryBrowser:(id)a3 didUpdateEndpoint:(id)a4
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  id v53 = a3;
  id v6 = a4;
  uint64_t v7 = (void *)MEMORY[0x263EFF980];
  long long v57 = self;
  BOOL v8 = [(HMDHome *)self accessories];
  id v9 = objc_msgSend(v7, "arrayWithCapacity:", objc_msgSend(v8, "count"));

  char v54 = v6;
  [v6 advertisements];
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v58 = [obj countByEnumeratingWithState:&v69 objects:v85 count:16];
  if (v58)
  {
    uint64_t v56 = *(void *)v70;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v70 != v56) {
          objc_enumerationMutation(obj);
        }
        uint64_t v59 = v10;
        uint64_t v11 = [*(id *)(*((void *)&v69 + 1) + 8 * v10) identifier];
        long long v65 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        uint64_t v12 = [(HMDHome *)v57 accessories];
        uint64_t v13 = [v12 countByEnumeratingWithState:&v65 objects:v84 count:16];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)v66;
          do
          {
            for (uint64_t i = 0; i != v14; ++i)
            {
              if (*(void *)v66 != v15) {
                objc_enumerationMutation(v12);
              }
              id v17 = *(id *)(*((void *)&v65 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                uint64_t v18 = v17;
              }
              else {
                uint64_t v18 = 0;
              }
              id v19 = v18;

              char v20 = [v19 identifier];
              int v21 = [v20 isEqual:v11];

              if (v21) {
                [v9 addObject:v19];
              }
            }
            uint64_t v14 = [v12 countByEnumeratingWithState:&v65 objects:v84 count:16];
          }
          while (v14);
        }

        uint64_t v10 = v59 + 1;
      }
      while (v59 + 1 != v58);
      uint64_t v58 = [obj countByEnumeratingWithState:&v69 objects:v85 count:16];
    }
    while (v58);
  }

  uint64_t v22 = (void *)MEMORY[0x230FBD990]();
  int v23 = v57;
  id v24 = HMFGetOSLogHandle();
  uint64_t v25 = v54;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    uint64_t v26 = HMFGetLogIdentifier();
    id v27 = [v54 sessionIdentifier];
    *(_DWORD *)buf = 138544130;
    long long v75 = v26;
    __int16 v76 = 2112;
    uint64_t v77 = v27;
    __int16 v78 = 2112;
    id v79 = obj;
    __int16 v80 = 2112;
    id v81 = v9;
    _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Endpoint %@ with advertisements %@ matches accessories %@", buf, 0x2Au);
  }
  if ([v9 count])
  {
    long long v28 = [v54 sessionIdentifier];
    if (!v28)
    {
      int v39 = (void *)MEMORY[0x230FBD990]();
      uint64_t v40 = v23;
      uint64_t v41 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        BOOL v42 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v75 = v42;
        __int16 v76 = 2112;
        uint64_t v77 = 0;
        _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_INFO, "%{public}@Nil session identifier - dropping update for endpoint %@", buf, 0x16u);
      }
      goto LABEL_46;
    }
    uint64_t v29 = [(HMDHome *)v23 mediaSessionWithIdentifier:v28];
    long long v60 = v28;
    if (v29)
    {
      long long v30 = (void *)v29;
      long long v31 = (void *)MEMORY[0x230FBD990]();
      long long v32 = v23;
      long long v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        long long v34 = HMFGetLogIdentifier();
        long long v35 = [v30 uuid];
        uint64_t v36 = [v35 UUIDString];
        uint64_t v37 = [v9 count];
        *(_DWORD *)buf = 138544386;
        long long v75 = v34;
        __int16 v76 = 2112;
        uint64_t v77 = v36;
        __int16 v78 = 2112;
        id v79 = v28;
        __int16 v80 = 2112;
        id v81 = obj;
        __int16 v82 = 2048;
        uint64_t v83 = v37;
        uint64_t v38 = "%{public}@Updated the endpoint for mediaSession %@ with sessionIdentifier %@ (%@ advertisements for %tu accessories) ";
LABEL_32:
        _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, v38, buf, 0x34u);
      }
    }
    else
    {
      long long v30 = [(HMDHome *)v23 _createMediaSessionWithEndpoint:v54];
      long long v31 = (void *)MEMORY[0x230FBD990]();
      long long v43 = v23;
      long long v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        long long v34 = HMFGetLogIdentifier();
        long long v35 = [v30 uuid];
        uint64_t v36 = [v35 UUIDString];
        uint64_t v44 = [v9 count];
        *(_DWORD *)buf = 138544386;
        long long v75 = v34;
        __int16 v76 = 2112;
        uint64_t v77 = v36;
        __int16 v78 = 2112;
        id v79 = v28;
        __int16 v80 = 2112;
        id v81 = obj;
        __int16 v82 = 2048;
        uint64_t v83 = v44;
        uint64_t v38 = "%{public}@Creating mediaSession %@ for sessionIdentifier %@ (%@ advertisements for %tu accessories) ";
        goto LABEL_32;
      }
    }

    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    id v45 = v9;
    uint64_t v46 = [v45 countByEnumeratingWithState:&v61 objects:v73 count:16];
    if (v46)
    {
      uint64_t v47 = v46;
      uint64_t v48 = *(void *)v62;
      do
      {
        for (uint64_t j = 0; j != v47; ++j)
        {
          if (*(void *)v62 != v48) {
            objc_enumerationMutation(v45);
          }
          id v50 = *(id *)(*((void *)&v61 + 1) + 8 * j);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v51 = v50;
          }
          else {
            id v51 = 0;
          }
          id v52 = v51;

          if (!v52) {
            [v50 setReachable:1];
          }
          [v50 updateMediaSession:v30];
        }
        uint64_t v47 = [v45 countByEnumeratingWithState:&v61 objects:v73 count:16];
      }
      while (v47);
    }

    uint64_t v25 = v54;
    long long v28 = v60;
LABEL_46:
  }
}

- (void)accessoryBrowser:(id)a3 identifier:(id)a4 reachable:(BOOL)a5
{
  BOOL v17 = a5;
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v6 = a4;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v7 = [(HMDHome *)self accessories];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v19;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v19 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(id *)(*((void *)&v18 + 1) + 8 * v11);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        id v14 = v13;

        if (!v14)
        {
          uint64_t v15 = [v12 identifier];
          int v16 = [v15 isEqualToString:v6];

          if (v16) {
            [v12 setReachable:v17];
          }
        }

        ++v11;
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v9);
  }
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didDiscoverAccessories:(id)a5 transaction:(id)a6 error:(id)a7
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  BOOL v17 = [v13 identifier];
  long long v18 = [(HMDHome *)self hapAccessoryWithIdentifier:v17];

  long long v19 = [v13 identifier];
  long long v20 = [(HMDHome *)self accessoryWithIdentifier:v19];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    long long v21 = v20;
  }
  else {
    long long v21 = 0;
  }
  id v22 = v21;

  if (v16 || !v22)
  {
    id v24 = [(HMDHome *)self featureDataSource];
    if ([v24 isRVCEnabled] && objc_msgSend(v18, "supportsCHIP"))
    {
      int v25 = [v18 convertingToNativeMatter];

      if (v25)
      {
        uint64_t v26 = (void *)MEMORY[0x230FBD990]();
        id v27 = self;
        long long v28 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          uint64_t v29 = v46 = v26;
          *(_DWORD *)buf = 138543618;
          char v54 = v29;
          __int16 v55 = 2112;
          id v56 = v18;
          _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@Ignoring the HAP-Matter accessory while it's being converted to native matter: %@", buf, 0x16u);

          uint64_t v26 = v46;
        }

        goto LABEL_29;
      }
    }
    else
    {
    }
  }
  else
  {
    uint64_t v23 = [(HMDHome *)self _configurePairedAccessoriesForServer:v13 reAddServices:0];
  }
  if (v18)
  {
    long long v30 = (void *)MEMORY[0x230FBD990](v23);
    long long v31 = self;
    long long v32 = HMFGetOSLogHandle();
    long long v33 = v32;
    if (v16)
    {
      id v47 = v15;
      id v34 = v12;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        long long v35 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        char v54 = v35;
        __int16 v55 = 2112;
        id v56 = v13;
        __int16 v57 = 2114;
        id v58 = v16;
        _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_ERROR, "%{public}@Failed HAP service discovery on accessory server %@ with error: %{public}@", buf, 0x20u);
      }
      uint64_t v36 = [v13 identifier];
      uint64_t v37 = [v13 linkType];
      v49[0] = MEMORY[0x263EF8330];
      v49[1] = 3221225472;
      v49[2] = __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke;
      v49[3] = &unk_264A16F60;
      id v38 = v36;
      id v51 = v31;
      uint64_t v52 = v37;
      id v50 = v38;
      [(HMDHome *)v31 _notifyRetrievalError:v16 accessoryServer:v38 linkType:v37 accessoryOperationBlock:v49];
      int v39 = [v16 domain];
      if ([v39 isEqualToString:*MEMORY[0x263F0C710]])
      {
        uint64_t v40 = [v16 code];

        if (v40 == 66)
        {
          [v18 didEncounterError:v16];
          id v12 = v34;
LABEL_28:

          id v15 = v47;
          goto LABEL_29;
        }
      }
      else
      {
      }
      id v44 = v13;
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      id v12 = v34;
      if (v44 && (isKindOfClass & 1) != 0) {
        [v18 _forceEnableReachabilityPingForPrimaryResident:v44];
      }
      goto LABEL_28;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v48 = v14;
      id v41 = v15;
      v43 = id v42 = v12;
      *(_DWORD *)buf = 138543618;
      char v54 = v43;
      __int16 v55 = 2112;
      id v56 = v13;
      _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@Completed HAP service discovery on accessory server %@", buf, 0x16u);

      id v12 = v42;
      id v15 = v41;
      id v14 = v48;
    }

    [v18 setLastPairingFailureTime:0.0];
    [v18 setConsecutivePairingFailures:0];
    -[HMDHome _configurePairedAccessoriesForServer:reAddServices:](v31, "_configurePairedAccessoriesForServer:reAddServices:", v13, [v14 count] == 0);
  }
LABEL_29:
}

void __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke(uint64_t a1, void *a2)
{
  v8[1] = *MEMORY[0x263EF8340];
  id v3 = a2;
  [v3 setReachability:0 serverIdentifier:*(void *)(a1 + 32) linkType:*(void *)(a1 + 48)];
  if ([v3 hasBTLELink] && *(void *)(a1 + 48) == 2)
  {
    id v4 = [*(id *)(a1 + 40) accessoryBrowser];
    v8[0] = *(void *)(a1 + 32);
    int v5 = [MEMORY[0x263EFF8C0] arrayWithObjects:v8 count:1];
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke_2;
    v6[3] = &unk_264A16F38;
    id v7 = v3;
    [v4 probeReachabilityForBTLEAccessoryServersWithIdentifiers:v5 forceScan:1 withCompletion:v6];
  }
}

uint64_t __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setReachability:a3 serverIdentifier:a2 linkType:2];
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didStopPairingWithError:(id)a5
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [v9 identifier];
  id v12 = [(HMDHome *)self hapAccessoryWithIdentifier:v11];

  if (v12)
  {
    id v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = HMFGetLogIdentifier();
      BOOL v17 = [v9 shortDescription];
      *(_DWORD *)buf = 138543874;
      uint64_t v37 = v16;
      __int16 v38 = 2112;
      int v39 = v17;
      __int16 v40 = 2112;
      id v41 = v10;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory server %@ stopped pairing with error: %@", buf, 0x20u);
    }
    long long v18 = (void *)MEMORY[0x230FBD990]();
    long long v19 = v14;
    long long v20 = HMFGetOSLogHandle();
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
    if (v10)
    {
      if (v21)
      {
        id v22 = HMFGetLogIdentifier();
        uint64_t v23 = [v9 shortDescription];
        *(_DWORD *)buf = 138543874;
        uint64_t v37 = v22;
        __int16 v38 = 2112;
        int v39 = v23;
        __int16 v40 = 2112;
        id v41 = v10;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Accessory server %@ failed to pair with error: %@", buf, 0x20u);
      }
      id v24 = [v10 userInfo];
      int v25 = [v24 objectForKeyedSubscript:*MEMORY[0x263F08608]];

      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      id v27 = v26;

      long long v28 = [v27 domain];
      int v29 = HMFEqualObjects();

      if (!v29 || [v27 code] != -6754)
      {
        [v12 setLastPairingFailureTime:CFAbsoluteTimeGetCurrent()];
        objc_msgSend(v12, "setConsecutivePairingFailures:", objc_msgSend(v12, "consecutivePairingFailures") + 1);
      }
      long long v30 = [v9 identifier];
      uint64_t v31 = [v9 linkType];
      v34[0] = MEMORY[0x263EF8330];
      v34[1] = 3221225472;
      v34[2] = __68__HMDHome_accessoryBrowser_accessoryServer_didStopPairingWithError___block_invoke;
      v34[3] = &unk_264A164D8;
      id v35 = v10;
      [(HMDHome *)v19 _notifyRetrievalError:v35 accessoryServer:v30 linkType:v31 accessoryOperationBlock:v34];
    }
    else
    {
      if (v21)
      {
        long long v32 = HMFGetLogIdentifier();
        long long v33 = [v9 shortDescription];
        *(_DWORD *)buf = 138543618;
        uint64_t v37 = v32;
        __int16 v38 = 2112;
        int v39 = v33;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Accessory server %@ pairing completed successfully", buf, 0x16u);
      }
      id v27 = [(HMDHome *)v19 accessoryBrowser];
      [v27 discoverAccessories:v9];
    }
  }
}

uint64_t __68__HMDHome_accessoryBrowser_accessoryServer_didStopPairingWithError___block_invoke(uint64_t a1, void *a2)
{
  return [a2 didEncounterError:*(void *)(a1 + 32)];
}

- (void)accessoryBrowser:(id)a3 discoveryFailedWithError:(id)a4 accessoryServer:(id)a5 linkType:(int64_t)a6
{
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [(HMDHome *)self hapAccessoryWithIdentifier:v10];
  if (v11)
  {
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    void v12[2] = __78__HMDHome_accessoryBrowser_discoveryFailedWithError_accessoryServer_linkType___block_invoke;
    v12[3] = &unk_264A16F10;
    int64_t v14 = a6;
    id v13 = v10;
    [(HMDHome *)self _notifyRetrievalError:v9 accessoryServer:v13 linkType:a6 accessoryOperationBlock:v12];
  }
}

void __78__HMDHome_accessoryBrowser_discoveryFailedWithError_accessoryServer_linkType___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 40) != 2)
  {
    id v6 = v3;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v4 = v6;
    }
    else {
      id v4 = 0;
    }
    id v5 = v4;
    [v5 setReachability:0 serverIdentifier:*(void *)(a1 + 32) linkType:*(void *)(a1 + 40)];

    id v3 = v6;
  }
}

- (void)accessoryBrowser:(id)a3 didFinishWACForAccessoryWithIdentifier:(id)a4 error:(id)a5
{
  id v10 = a4;
  id v7 = a5;
  id v8 = [(HMDHome *)self accessoryWithIdentifier:v10];
  if (v8)
  {
    id v9 = [(HMDHome *)self homeReprovisionHandler];
    [v9 handleReprovionedAccessory:v8 identifier:v10 error:v7];
  }
}

- (void)accessoryBrowser:(id)a3 didFindAccessoryServerNeedingReprovisioning:(id)a4 error:(id)a5
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if ([v9 isPaired])
  {
    uint64_t v11 = [v9 identifier];
    id v12 = [(HMDHome *)self hapAccessoryWithIdentifier:v11];

    if (v12)
    {
      id v13 = (void *)MEMORY[0x230FBD990]();
      int64_t v14 = self;
      id v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        id v16 = HMFGetLogIdentifier();
        BOOL v17 = [v12 shortDescription];
        int v19 = 138543618;
        long long v20 = v16;
        __int16 v21 = 2112;
        id v22 = v17;
        _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ needs reprovisioning is found", (uint8_t *)&v19, 0x16u);
      }
      long long v18 = [(HMDHome *)v14 homeReprovisionHandler];
      [v18 handleFoundAccessoryNeedingReprovisioning:v12 error:v10];
    }
  }
}

- (void)accessoryBrowser:(id)a3 didTombstoneAccessoryServer:(id)a4
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v7 identifier];
  id v9 = [(HMDHome *)self hapAccessoryWithIdentifier:v8];

  if (v9)
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    uint64_t v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int64_t v14 = [v9 shortDescription];
      int v15 = 138543874;
      id v16 = v13;
      __int16 v17 = 2112;
      id v18 = v7;
      __int16 v19 = 2112;
      long long v20 = v14;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@AccessoryServer %@ tombstoned - unconfiguring all paired accessories for %@", (uint8_t *)&v15, 0x20u);
    }
    [(HMDHome *)v11 _unconfigurePairedAccessoriesForServer:v7 updateReachability:1];
  }
}

- (void)accessoryBrowser:(id)a3 didRemoveAccessoryServer:(id)a4 error:(id)a5
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [v9 identifier];
  id v12 = [(HMDHome *)self accessoryWithIdentifier:v11];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v13 = v12;
  }
  else {
    id v13 = 0;
  }
  id v14 = v13;

  int v15 = [v9 identifier];
  [v14 didRemoveAccessoryServer:v15];

  id v16 = [v9 identifier];
  __int16 v17 = [(HMDHome *)self hapAccessoryWithIdentifier:v16];

  if (v17)
  {
    uint64_t v18 = [v9 linkType];
    if (v10) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v18 == 2;
    }
    uint64_t v20 = !v19;
    uint64_t v21 = [v9 linkType];
    if (v21 == 1) {
      uint64_t v21 = objc_msgSend(v17, "_wol_processDidRemoveHPAccessoryServer:", v9);
    }
    id v22 = (void *)MEMORY[0x230FBD990](v21);
    uint64_t v23 = self;
    id v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      int v25 = HMFGetLogIdentifier();
      uint64_t v26 = @"not updating";
      int v29 = 138543874;
      long long v30 = v25;
      __int16 v31 = 2112;
      if (v20) {
        uint64_t v26 = @"updating";
      }
      id v32 = v9;
      __int16 v33 = 2112;
      id v34 = v26;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@AccessoryServer %@ removed - %@ reachability", (uint8_t *)&v29, 0x20u);
    }
    [(HMDHome *)v23 _unconfigurePairedAccessoriesForServer:v9 updateReachability:v20];
    id v27 = objc_alloc_init(HMDHAPMetricsLogEvent);
    [(HMDHAPMetricsLogEvent *)v27 updateWithHAPAccessoryServer:v9];
    long long v28 = [(HMDHome *)v23 logEventSubmitter];
    [v28 submitLogEvent:v27];
  }
}

- (void)accessoryBrowser:(id)a3 didFindAccessoryServer:(id)a4 stateChanged:(BOOL)a5 stateNumber:(id)a6 completion:(id)a7
{
  BOOL v143 = a5;
  uint64_t v159 = *MEMORY[0x263EF8340];
  id v11 = a3;
  id v12 = a4;
  id v13 = (__CFString *)a6;
  id v14 = (void (**)(id, uint64_t, uint64_t))a7;
  int v15 = (void *)MEMORY[0x230FBD990]();
  id v16 = self;
  __int16 v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    uint64_t v18 = HMFGetLogIdentifier();
    [v12 shortDescription];
    v20 = BOOL v19 = v14;
    uint64_t v21 = HMFBooleanToString();
    *(_DWORD *)buf = 138544130;
    long long v148 = v18;
    __int16 v149 = 2112;
    long long v150 = v20;
    __int16 v151 = 2112;
    long long v152 = v13;
    __int16 v153 = 2112;
    long long v154 = v21;
    _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Found paired accessory server %@. State: %@/%@", buf, 0x2Au);

    id v14 = v19;
  }

  id v22 = [v12 identifier];
  uint64_t v23 = [(HMDHome *)v16 hapAccessoryWithIdentifier:v22];

  uint64_t v24 = [(HMDHome *)v16 _shouldAvoidTombstoningAccessoryServer:v12 accessory:v23];
  int v25 = [v12 identifier];
  uint64_t v26 = [(HMDHome *)v16 accessoryWithIdentifier:v25];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v27 = v26;
  }
  else {
    id v27 = 0;
  }
  id v28 = v27;

  uint64_t v29 = v28 != 0;
  if (v28) {
    [v28 didFindAccessoryServer:v12];
  }
  if (!v23) {
    goto LABEL_64;
  }
  BOOL v133 = v28 != 0;
  id v140 = v11;
  long long v30 = [(HMDHome *)v16 residentDeviceManager];
  char v136 = [v30 isCurrentDeviceAvailableResident];

  __int16 v31 = (void *)MEMORY[0x230FBD990]();
  id v32 = v16;
  __int16 v33 = HMFGetOSLogHandle();
  id v141 = v28;
  long long v142 = v13;
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v35 = uint64_t v34 = v24;
    uint64_t v36 = [v23 shortDescription];
    HMFBooleanToString();
    uint64_t v37 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    long long v148 = v35;
    __int16 v149 = 2112;
    long long v150 = v36;
    __int16 v151 = 2112;
    long long v152 = v37;
    _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@Performing accessory/service discovery on paired accessory %@. isResidentDevice: %@", buf, 0x20u);

    uint64_t v24 = v34;
  }

  if ((![v23 canWakeUpViaWoL]
     || [v23 shouldDiscoverSuspendCapableAccessoryServer:v12])
    && ![v12 wakeNumber])
  {
    id v51 = v12;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v52 = v51;
    }
    else {
      uint64_t v52 = 0;
    }
    id v53 = v52;

    long long v130 = v53;
    if ([v51 isReachable] && (objc_msgSend(v53, "isCached") & 1) == 0)
    {
      char v54 = [MEMORY[0x263EFF980] arrayWithObject:v23];
      __int16 v55 = [v23 identifiersForBridgedAccessories];
      id v56 = [v55 allObjects];
      [(HMDHome *)v32 accessoriesWithUUIDs:v56];
      __int16 v57 = v51;
      id v58 = v12;
      uint64_t v59 = v23;
      v61 = long long v60 = v14;
      [v54 addObjectsFromArray:v61];

      id v14 = v60;
      uint64_t v23 = v59;
      id v12 = v58;
      id v51 = v57;

      v145[0] = MEMORY[0x263EF8330];
      v145[1] = 3221225472;
      v145[2] = __87__HMDHome_accessoryBrowser_didFindAccessoryServer_stateChanged_stateNumber_completion___block_invoke;
      v145[3] = &unk_264A164D8;
      id v146 = v57;
      objc_msgSend(v54, "na_each:", v145);
    }
    long long v62 = (void *)MEMORY[0x230FBD990]();
    long long v63 = v32;
    long long v64 = HMFGetOSLogHandle();
    unsigned int v132 = v24;
    if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
    {
      long long v65 = HMFGetLogIdentifier();
      [v23 shortDescription];
      long long v66 = v128 = v62;
      [(HMDHome *)v63 isCurrentDevicePrimaryResident];
      HMFBooleanToString();
      long long v67 = (__CFString *)objc_claimAutoreleasedReturnValue();
      [(HMDHome *)v63 isCurrentDeviceAvailableResident];
      HMFBooleanToString();
      id v68 = v51;
      v70 = long long v69 = v14;
      *(_DWORD *)buf = 138544130;
      long long v148 = v65;
      __int16 v149 = 2112;
      long long v150 = v66;
      __int16 v151 = 2114;
      long long v152 = v67;
      __int16 v153 = 2114;
      long long v154 = v70;
      _os_log_impl(&dword_22F52A000, v64, OS_LOG_TYPE_INFO, "%{public}@Evaluating disconnect on idle status for %@ using - isCurrentDevicePrimaryResident = %{public}@, isCurrentDeviceAvailableResident = %{public}@", buf, 0x2Au);

      long long v62 = v128;
      id v14 = v69;
      id v51 = v68;

      uint64_t v24 = v132;
    }

    uint64_t v71 = shouldDisconnectOnIdleForAccessory(v23);
    if (v71 != [v23 shouldDisconnectOnIdle]) {
      [v23 setShouldDisconnectOnIdle:v71];
    }
    [v51 setShouldDisconnectOnIdle:v71];
    long long v72 = [v51 identifier];
    uint64_t v73 = [v23 supportedTransports];
    uint64_t v74 = [v51 setupHash];
    [(HMDHome *)v63 _registerPairedAccessory:v72 transports:v73 setupHash:v74];

    double DiscoveryBackoffPeriod = 0.0;
    id v11 = v140;
    id v129 = v63;
    if (v136)
    {
      id v28 = v141;
      id v13 = v142;
      uint64_t v29 = v133;
      goto LABEL_49;
    }
    double Current = CFAbsoluteTimeGetCurrent();
    [v23 lastPairingFailureTime];
    double v78 = Current - v77;
    unint64_t v79 = [v23 consecutivePairingFailures];
    if (v78 < getDiscoveryBackoffPeriod() || v79 >= 6)
    {
      if (v79 <= 5) {
        double DiscoveryBackoffPeriod = getDiscoveryBackoffPeriod();
      }
      else {
        double DiscoveryBackoffPeriod = 1800.0;
      }
      id v13 = v142;
      uint64_t v29 = v133;
      [v23 setResetOnBackoffExpiry:v79 > 5];
      uint64_t v86 = [MEMORY[0x263F087E8] hmErrorWithCode:4];
      long long v87 = [v51 identifier];
      long long v63 = v129;
      [(HMDHome *)v129 _notifyRetrievalError:v86 accessoryServer:v87 linkType:0 accessoryOperationBlock:0];

      id v11 = v140;
      id v28 = v141;
      goto LABEL_49;
    }
    if (v130)
    {
      id v28 = v141;
      id v13 = v142;
      uint64_t v29 = v133;
      long long v63 = v129;
      if (!v143) {
        goto LABEL_49;
      }
      if ([v23 isRemotelyReachable])
      {
        id v137 = v51;
        uint64_t v80 = v24;
        id v81 = (void *)MEMORY[0x230FBD990]();
        __int16 v82 = v129;
        uint64_t v83 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
        {
          long long v84 = HMFGetLogIdentifier();
          long long v85 = [v23 shortDescription];
          *(_DWORD *)buf = 138543618;
          long long v148 = v84;
          __int16 v149 = 2112;
          long long v150 = v85;
          _os_log_impl(&dword_22F52A000, v83, OS_LOG_TYPE_INFO, "%{public}@Skipping discovery since accessory: %@ is remotely reachable.", buf, 0x16u);

          id v13 = v142;
          id v28 = v141;
        }

        goto LABEL_48;
      }
      if ([(HMDHome *)v129 _isRegisteredForNotificationsWithRemoteGateway:v23])
      {
        id v137 = v51;
        uint64_t v80 = v24;
        long long v88 = (void *)MEMORY[0x230FBD990]();
        long long v89 = v129;
        long long v90 = HMFGetOSLogHandle();
        if (!os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
        {
LABEL_47:

          double DiscoveryBackoffPeriod = getDiscoveryBackoffPeriod();
LABEL_48:
          uint64_t v24 = v80;
          uint64_t v29 = v133;
          long long v63 = v129;
          id v51 = v137;
LABEL_49:
          if (!v28 && DiscoveryBackoffPeriod == 0.0)
          {
            int v94 = [v23 shouldAutoDiscoverAccessoryServer];
            uint64_t v138 = [v23 enhancedAuthMethod];
            unsigned int v134 = -[HMDHome _isRetrievalInProgressForPrimaryAccessory:linkType:](v63, "_isRetrievalInProgressForPrimaryAccessory:linkType:", v23, [v51 linkType]);
            context = (void *)MEMORY[0x230FBD990]();
            uint64_t v95 = v63;
            uint64_t v96 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
            {
              id v97 = HMFGetLogIdentifier();
              uint64_t v124 = [v51 identifier];
              unint64_t v98 = [v51 linkType];
              v123 = v95;
              if (v98 > 2) {
                uint64_t v99 = @"Undefined";
              }
              else {
                uint64_t v99 = off_264A1CE08[v98];
              }
              v100 = v99;
              HMFBooleanToString();
              BOOL v101 = v125 = v94;
              id v102 = HMFBooleanToString();
              id v103 = HMFBooleanToString();
              *(_DWORD *)buf = 138544642;
              long long v148 = v97;
              __int16 v149 = 2112;
              long long v150 = v124;
              __int16 v151 = 2112;
              long long v152 = v100;
              __int16 v153 = 2112;
              long long v154 = v101;
              __int16 v155 = 2112;
              double v156 = *(double *)&v102;
              __int16 v157 = 2112;
              long long v158 = v103;
              _os_log_impl(&dword_22F52A000, v96, OS_LOG_TYPE_INFO, "%{public}@Evaluating need to discover accessories from found accessory server %@/%@, autoDiscoveryEnabled =  %@, hasExplicitRetrieveRequest = %@ discoverForEAuth = %@", buf, 0x3Eu);

              int v94 = v125;
              id v11 = v140;
              id v28 = v141;
              id v13 = v142;
              uint64_t v95 = v123;
            }

            uint64_t v24 = v132;
            if (v138) {
              uint64_t v29 = v94 | v134;
            }
            else {
              uint64_t v29 = 1;
            }
            long long v63 = v129;
          }

          if (DiscoveryBackoffPeriod > 0.0)
          {
            unsigned int v135 = v29;
            uint64_t v104 = MEMORY[0x230FBD990]();
            uint64_t v105 = v63;
            id v106 = (void *)v104;
            long long v107 = v105;
            v108 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v108, OS_LOG_TYPE_INFO))
            {
              char v109 = HMFGetLogIdentifier();
              uint64_t v110 = [v23 shortDescription];
              HMFBooleanToString();
              v112 = uint64_t v111 = v14;
              *(_DWORD *)buf = 138544386;
              long long v148 = v109;
              __int16 v149 = 2112;
              long long v150 = v110;
              __int16 v151 = 2112;
              long long v152 = v142;
              __int16 v153 = 2112;
              long long v154 = v112;
              __int16 v155 = 2048;
              double v156 = DiscoveryBackoffPeriod;
              _os_log_impl(&dword_22F52A000, v108, OS_LOG_TYPE_INFO, "%{public}@Backing off discovery for accessory %@ with s# %@, state changed: %@ for %.2f sec", buf, 0x34u);

              id v13 = v142;
              id v14 = v111;
              uint64_t v24 = v132;

              id v28 = v141;
            }

            [v23 backOffAccessoryForStateNumber:v13 backoffPeriod:DiscoveryBackoffPeriod];
            uint64_t v29 = v135;
          }
LABEL_64:
          v14[2](v14, v24, v29);
          goto LABEL_65;
        }
        uint64_t v91 = HMFGetLogIdentifier();
        uint64_t v92 = [v23 shortDescription];
        *(_DWORD *)buf = 138543618;
        long long v148 = v91;
        __int16 v149 = 2112;
        long long v150 = v92;
        char v93 = "%{public}@Backing off since notifications for %@ are registered with remote gateway";
LABEL_46:
        _os_log_impl(&dword_22F52A000, v90, OS_LOG_TYPE_INFO, v93, buf, 0x16u);

        id v13 = v142;
        id v28 = v141;
        goto LABEL_47;
      }
      if ([(HMDHome *)v129 _isEventTriggerOnRemoteGatewayForAccessory:v23]&& ![(HMDHome *)v129 _isRegisteredForNotificationsForClients:v23]&& ![(HMDHome *)v129 _isEventTriggerOnLocalDeviceForAccessory:v23])
      {
        id v137 = v51;
        uint64_t v80 = v24;
        long long v88 = (void *)MEMORY[0x230FBD990]();
        long long v89 = v129;
        long long v90 = HMFGetOSLogHandle();
        if (!os_log_type_enabled(v90, OS_LOG_TYPE_INFO)) {
          goto LABEL_47;
        }
        uint64_t v91 = HMFGetLogIdentifier();
        uint64_t v92 = [v23 shortDescription];
        *(_DWORD *)buf = 138543618;
        long long v148 = v91;
        __int16 v149 = 2112;
        long long v150 = v92;
        char v93 = "%{public}@Not discovering accessory (%@) as trigger is active on resident and no clients and no local triggers locally";
        goto LABEL_46;
      }
      BOOL v113 = [(HMDHome *)v129 _isEventTriggerOnRemoteGatewayForAccessory:v23];
      contexta = (void *)MEMORY[0x230FBD990]();
      id v139 = v129;
      uint64_t v114 = HMFGetOSLogHandle();
      BOOL v115 = os_log_type_enabled(v114, OS_LOG_TYPE_INFO);
      if (!v113)
      {
        if (v115)
        {
          uint64_t v118 = HMFGetLogIdentifier();
          uint64_t v119 = [v23 shortDescription];
          int v120 = [v130 stateNumber];
          [v130 stateChanged];
          HMFBooleanToString();
          long long v122 = v121 = v14;
          *(_DWORD *)buf = 138544130;
          long long v148 = v118;
          __int16 v149 = 2112;
          long long v150 = v119;
          __int16 v151 = 2112;
          long long v152 = v120;
          __int16 v153 = 2112;
          long long v154 = v122;
          _os_log_impl(&dword_22F52A000, v114, OS_LOG_TYPE_INFO, "%{public}@Discovering BLE Accessory: %@, State Number: %@, State Changed: %@", buf, 0x2Au);

          id v13 = v142;
          id v14 = v121;
        }

        uint64_t v29 = 1;
        id v28 = v141;
        goto LABEL_64;
      }
      if (v115)
      {
        id v116 = HMFGetLogIdentifier();
        uint64_t v117 = [v23 shortDescription];
        *(_DWORD *)buf = 138543618;
        long long v148 = v116;
        __int16 v149 = 2112;
        long long v150 = v117;
        _os_log_impl(&dword_22F52A000, v114, OS_LOG_TYPE_INFO, "%{public}@Backing off since triggers are on resident and have clients interested for accessory: %@", buf, 0x16u);

        id v13 = v142;
      }

      double DiscoveryBackoffPeriod = getDiscoveryBackoffPeriod();
      id v28 = v141;
    }
    else
    {
      id v28 = v141;
      id v13 = v142;
      uint64_t v29 = v133;
    }
    long long v63 = v129;
    goto LABEL_49;
  }
  __int16 v38 = (void *)MEMORY[0x230FBD990]();
  int v39 = v32;
  __int16 v40 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v41 = v131 = v24;
    uint64_t v42 = [v12 shortDescription];
    [v23 lpmProfile];
    long long v144 = v38;
    long long v43 = (__CFString *)objc_claimAutoreleasedReturnValue();
    id v44 = [v23 connectivityInfo];
    [v44 woWLANInfo];
    id v45 = v12;
    uint64_t v46 = v23;
    v48 = id v47 = v14;
    *(_DWORD *)buf = 138544130;
    long long v148 = v41;
    __int16 v149 = 2112;
    long long v150 = v42;
    __int16 v151 = 2112;
    long long v152 = v43;
    __int16 v153 = 2112;
    long long v154 = v48;
    _os_log_impl(&dword_22F52A000, v40, OS_LOG_TYPE_INFO, "%{public}@Not discovering the suspended accessory server: %@ with LPM Profile: %@ and WoWInfo: %@.", buf, 0x2Au);

    id v14 = v47;
    uint64_t v23 = v46;
    id v12 = v45;

    __int16 v38 = v144;
    uint64_t v24 = v131;
  }

  id v49 = [MEMORY[0x263F087E8] hmErrorWithCode:23];
  id v50 = [v12 identifier];
  -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](v39, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v49, v50, [v12 linkType], 0);

  v14[2](v14, v24, 0);
  id v11 = v140;
  id v28 = v141;
  id v13 = v142;
LABEL_65:
}

void __87__HMDHome_accessoryBrowser_didFindAccessoryServer_stateChanged_stateNumber_completion___block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v6;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  id v5 = [*(id *)(a1 + 32) identifier];
  objc_msgSend(v4, "setReachability:serverIdentifier:linkType:", 1, v5, objc_msgSend(*(id *)(a1 + 32), "linkType"));
}

- (void)handleRemovedMediaSessions:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __38__HMDHome_handleRemovedMediaSessions___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __38__HMDHome_handleRemovedMediaSessions___block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = objc_msgSend(v2, "hmf_arrayForKey:", @"kRemovedMediaSessionIdentifiersKey");

  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend(*(id *)(a1 + 40), "_removeMediaSessionWithIdentifier:", *(void *)(*((void *)&v9 + 1) + 8 * v8++), (void)v9);
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

- (void)accessoryBrowser:(id)a3 didRemoveAccessoryAdvertisement:(id)a4
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v7 identifier];
  long long v9 = [(HMDHome *)self accessoryWithIdentifier:v8];

  if (v9)
  {
    long long v10 = (void *)MEMORY[0x230FBD990]();
    long long v11 = self;
    long long v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int v14 = 138543618;
      int v15 = v13;
      __int16 v16 = 2112;
      id v17 = v7;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Handling removed advertisement: %@", (uint8_t *)&v14, 0x16u);
    }
    [v9 removeAdvertisement:v7];
  }
}

- (void)accessoryBrowser:(id)a3 didAddAccessoryAdvertisement:(id)a4
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v7 identifier];
  long long v9 = [(HMDHome *)self accessoryWithIdentifier:v8];

  if (v9)
  {
    long long v10 = (void *)MEMORY[0x230FBD990]();
    long long v11 = self;
    long long v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int v14 = 138543618;
      int v15 = v13;
      __int16 v16 = 2112;
      id v17 = v7;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Handling added advertisement: %@", (uint8_t *)&v14, 0x16u);
    }
    [v9 addAdvertisement:v7];
  }
}

- (BOOL)isCurrentDeviceAvailableResident
{
  id v2 = [(HMDHome *)self residentDeviceManager];
  char v3 = [v2 isCurrentDeviceAvailableResident];

  return v3;
}

- (BOOL)_shouldAvoidTombstoningAccessoryServer:(id)a3 accessory:(id)a4
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = v7;
  BOOL v9 = 0;
  if (v6 && v7)
  {
    long long v10 = [(HMDHome *)self removeAccessoryInProgressForHMDAccessories];
    int v11 = [v10 containsObject:v8];

    if (v11)
    {
      long long v12 = (void *)MEMORY[0x230FBD990]();
      id v13 = self;
      int v14 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        int v15 = HMFGetLogIdentifier();
        __int16 v16 = [v6 name];
        id v17 = [v6 identifier];
        *(_DWORD *)buf = 138543874;
        id v56 = v15;
        __int16 v57 = 2112;
        id v58 = v16;
        __int16 v59 = 2112;
        long long v60 = v17;
        uint64_t v18 = "%{public}@Accessory %@/%@ being removed from home - not tombstoning";
LABEL_9:
        _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, v18, buf, 0x20u);

        goto LABEL_10;
      }
      goto LABEL_10;
    }
    BOOL v19 = [(HMDHome *)self addPendingAccessorySetupCodeHandlers];
    uint64_t v20 = [v8 uuid];
    uint64_t v21 = [v19 objectForKey:v20];

    if (v21)
    {
      long long v12 = (void *)MEMORY[0x230FBD990]();
      id v13 = self;
      int v14 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        int v15 = HMFGetLogIdentifier();
        __int16 v16 = [v6 name];
        id v17 = [v6 identifier];
        *(_DWORD *)buf = 138543874;
        id v56 = v15;
        __int16 v57 = 2112;
        id v58 = v16;
        __int16 v59 = 2112;
        long long v60 = v17;
        uint64_t v18 = "%{public}@Accessory %@/%@ being added to home - not tombstoning";
        goto LABEL_9;
      }
LABEL_10:

LABEL_11:
      BOOL v9 = 1;
      goto LABEL_12;
    }
    uint64_t v23 = [(HMDHome *)self addPendingAccessories];
    uint64_t v24 = objc_msgSend(v23, "hm_allKeys");
    v53[0] = MEMORY[0x263EF8330];
    v53[1] = 3221225472;
    v53[2] = __60__HMDHome__shouldAvoidTombstoningAccessoryServer_accessory___block_invoke;
    v53[3] = &unk_264A166E0;
    id v25 = v8;
    id v54 = v25;
    int v26 = objc_msgSend(v24, "na_any:", v53);

    if (v26)
    {
      id v27 = (void *)MEMORY[0x230FBD990]();
      id v28 = self;
      uint64_t v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        long long v30 = HMFGetLogIdentifier();
        __int16 v31 = [v6 name];
        id v32 = [v6 identifier];
        *(_DWORD *)buf = 138543874;
        id v56 = v30;
        __int16 v57 = 2112;
        id v58 = v31;
        __int16 v59 = 2112;
        long long v60 = v32;
        _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ being added to home (via setupDescription) - not tombstoning", buf, 0x20u);
      }

      goto LABEL_11;
    }

    __int16 v33 = [(HMDHome *)self currentAccessory];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 0;
    }
    id v35 = v34;

    uint64_t v36 = [v35 sensorManager];
    if (v36)
    {
      uint64_t v37 = (void *)v36;
      __int16 v38 = [v25 identifier];
      int v39 = [v35 sensorManager];
      __int16 v40 = [v39 derivedHAPAccessoryIdentifier];
      if ([v38 isEqualToString:v40])
      {

LABEL_24:
        id v44 = (void *)MEMORY[0x230FBD990]();
        id v45 = self;
        uint64_t v46 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          id v47 = HMFGetLogIdentifier();
          id v48 = [v6 name];
          id v49 = [v6 identifier];
          *(_DWORD *)buf = 138544386;
          id v56 = v47;
          __int16 v57 = 2112;
          id v58 = v48;
          __int16 v59 = 2112;
          long long v60 = v49;
          __int16 v61 = 2112;
          id v62 = v25;
          __int16 v63 = 2112;
          id v64 = v35;
          _os_log_impl(&dword_22F52A000, v46, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ (%@) is a derived homepod sensor for %@ - not tombstoning", buf, 0x34u);
        }
        BOOL v9 = 1;
        goto LABEL_28;
      }
      id v41 = [v25 uuid];
      [v35 sensorManager];
      uint64_t v42 = v50 = v38;
      [v42 derivedSensorUUID];
      long long v43 = v52 = v35;
      char v51 = objc_msgSend(v41, "hmf_isEqualToUUID:", v43);

      id v35 = v52;
      if (v51) {
        goto LABEL_24;
      }
    }
    BOOL v9 = -[HMDHome _isRetrievalInProgressForPrimaryAccessory:linkType:](self, "_isRetrievalInProgressForPrimaryAccessory:linkType:", v25, [v6 linkType]);
LABEL_28:
  }
LABEL_12:

  return v9;
}

uint64_t __60__HMDHome__shouldAvoidTombstoningAccessoryServer_accessory___block_invoke(uint64_t a1, void *a2)
{
  char v3 = [a2 accessoryUUID];
  id v4 = [*(id *)(a1 + 32) uuid];
  uint64_t v5 = [v3 isEqual:v4];

  return v5;
}

- (BOOL)_isEventTriggerOnLocalDeviceForAccessory:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v5 = [(HMDHome *)self triggers];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(id *)(*((void *)&v14 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v10 = v9;
        }
        else {
          long long v10 = 0;
        }
        id v11 = v10;

        char v12 = [v11 isEventTriggerOnLocalDeviceForAccessory:v4];
        if (v12)
        {
          LOBYTE(v6) = 1;
          goto LABEL_14;
        }
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  return v6;
}

- (BOOL)_isEventTriggerOnRemoteGatewayForAccessory:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v5 = [(HMDHome *)self triggers];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(id *)(*((void *)&v14 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v10 = v9;
        }
        else {
          long long v10 = 0;
        }
        id v11 = v10;

        char v12 = [v11 isEventTriggerOnRemoteGatewayForAccessory:v4];
        if (v12)
        {
          LOBYTE(v6) = 1;
          goto LABEL_14;
        }
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  return v6;
}

- (BOOL)_isRegisteredForNotificationsForClients:(id)a3
{
  id v3 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  char v6 = [v5 isClientRegisteredForNotifications];

  return v6;
}

- (BOOL)_isRegisteredForNotificationsWithRemoteGateway:(id)a3
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v3 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  char v6 = [v5 services];
  uint64_t v7 = (void *)[v6 copy];

  uint64_t v8 = [v7 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v26 != v10) {
          objc_enumerationMutation(v7);
        }
        char v12 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        id v13 = objc_msgSend(v12, "characteristics", 0);
        long long v14 = (void *)[v13 copy];

        uint64_t v15 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
        if (v15)
        {
          uint64_t v16 = v15;
          uint64_t v17 = *(void *)v22;
          while (2)
          {
            for (uint64_t j = 0; j != v16; ++j)
            {
              if (*(void *)v22 != v17) {
                objc_enumerationMutation(v14);
              }
              if ([*(id *)(*((void *)&v21 + 1) + 8 * j) notificationRegisteredWithRemoteGateway])
              {

                BOOL v19 = 1;
                goto LABEL_22;
              }
            }
            uint64_t v16 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
            if (v16) {
              continue;
            }
            break;
          }
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v25 objects:v30 count:16];
      BOOL v19 = 0;
    }
    while (v9);
  }
  else
  {
    BOOL v19 = 0;
  }
LABEL_22:

  return v19;
}

- (void)retrieveHAPAccessoryForHMDAccessory:(id)a3 linkType:(int64_t)a4 forceRetrieve:(BOOL)a5 queue:(id)a6 completion:(id)a7
{
  id v12 = a3;
  id v13 = a6;
  id v14 = a7;
  uint64_t v15 = [(HMDHome *)self workQueue];
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 3221225472;
  void v19[2] = __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke;
  v19[3] = &unk_264A1C488;
  void v19[4] = self;
  id v20 = v12;
  id v22 = v14;
  int64_t v23 = a4;
  BOOL v24 = a5;
  id v21 = v13;
  id v16 = v13;
  id v17 = v14;
  id v18 = v12;
  dispatch_async(v15, v19);
}

void __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 56))
  {
    BOOL v6 = v3 != 0;
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3221225472;
    void v8[2] = __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_2;
    v8[3] = &unk_264A2EDE0;
    id v9 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 56);
    [v1 _retrieveHAPAccessoryForHMDHAPAccessory:v2 linkType:v4 forceRetrieve:v6 completion:v8];
  }
  else
  {
    uint64_t v7 = *(void **)(a1 + 32);
    [v7 _retrieveHAPAccessoryForHMDHAPAccessory:v2 linkType:v4 forceRetrieve:v3 != 0 completion:0];
  }
}

void __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 32);
  if (v4)
  {
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    void v7[2] = __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_3;
    v7[3] = &unk_264A2F870;
    id v9 = *(id *)(a1 + 40);
    id v8 = v3;
    dispatch_async(v4, v7);
  }
  else
  {
    id v5 = _Block_copy(*(const void **)(a1 + 40));
    BOOL v6 = v5;
    if (v5) {
      (*((void (**)(void *, id))v5 + 2))(v5, v3);
    }
  }
}

void __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_3(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  if (v2)
  {
    id v3 = v2;
    (*((void (**)(void *, void))v2 + 2))(v2, *(void *)(a1 + 32));
    uint64_t v2 = v3;
  }
}

- (HMFMessageDestination)messageDestination
{
  id v3 = objc_alloc(MEMORY[0x263F42570]);
  uint64_t v4 = [(HMDHome *)self messageTargetUUID];
  id v5 = (void *)[v3 initWithTarget:v4];

  return (HMFMessageDestination *)v5;
}

- (void)_removeCorruptAccessories
{
  uint64_t v2 = self;
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHome *)self accessories];
  long long v25 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v3, "count"));
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v4 = v3;
  uint64_t v28 = [v4 countByEnumeratingWithState:&v29 objects:v41 count:16];
  if (v28)
  {
    uint64_t v6 = *(void *)v30;
    *(void *)&long long v5 = 138544130;
    long long v22 = v5;
    id v23 = v4;
    BOOL v24 = v2;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v30 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v29 + 1) + 8 * v7);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v9 = v8;
        }
        else {
          id v9 = 0;
        }
        id v10 = v9;

        id v11 = [v8 identifier];
        if (v11)
        {
          id v12 = v11;
          if (!v10)
          {

LABEL_16:
            objc_msgSend(v25, "addObject:", v8, v22);
            goto LABEL_17;
          }
          id v13 = [v10 uniqueIdentifier];

          if (v13) {
            goto LABEL_16;
          }
        }
        id v14 = (void *)MEMORY[0x230FBD990]();
        uint64_t v15 = v2;
        id v16 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          long long v26 = HMFGetLogIdentifier();
          id v17 = [v8 uuid];
          id v18 = [v17 UUIDString];
          BOOL v19 = [v8 identifier];
          [v10 uniqueIdentifier];
          long long v27 = v14;
          v21 = uint64_t v20 = v6;
          *(_DWORD *)buf = v22;
          uint64_t v34 = v26;
          __int16 v35 = 2112;
          uint64_t v36 = v18;
          __int16 v37 = 2112;
          __int16 v38 = v19;
          __int16 v39 = 2112;
          __int16 v40 = v21;
          _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Incomplete accessory: %@ (%@ / %@)", buf, 0x2Au);

          uint64_t v6 = v20;
          id v14 = v27;

          id v4 = v23;
          uint64_t v2 = v24;
        }
LABEL_17:

        ++v7;
      }
      while (v28 != v7);
      uint64_t v28 = [v4 countByEnumeratingWithState:&v29 objects:v41 count:16];
    }
    while (v28);
  }

  [(HMDHome *)v2 setAccessories:v25];
}

- (void)_encodeActionSets:(id)a3 coder:(id)a4
{
  id v12 = a3;
  id v6 = a4;
  if ([(HMDHome *)self shouldWeSendAutomationsToClients])
  {
    uint64_t v7 = [MEMORY[0x263EFF980] arrayWithArray:v12];
    id v8 = [MEMORY[0x263F08A98] predicateWithFormat:@"type == %@", *MEMORY[0x263F0B958]];
    id v9 = [v7 filteredArrayUsingPredicate:v8];
    if ([v9 count])
    {
      id v10 = (void *)[v9 copy];
      [v6 encodeObject:v10 forKey:@"actionSets"];
    }
    if ((objc_msgSend(v6, "hmd_isForRemoteGatewayCoder") & 1) == 0)
    {
      id v11 = [v7 arrayByExcludingObjectsInArray:v9];
      [v6 encodeObject:v11 forKey:@"builtinActionSets"];
    }
  }
}

- (void)encodeMediaSystemsWithCoder:(id)a3 modifiedOptions:(unint64_t)a4
{
  char v4 = a4;
  id v6 = a3;
  if ((v4 & 0xC0) != 0)
  {
    id v11 = v6;
    int v7 = objc_msgSend(v6, "hmd_isForXPCTransport");
    id v8 = [(HMDHome *)self mediaSystemController];
    id v9 = v8;
    if (v7)
    {
      id v10 = [v8 filteredMediaSystems];
      [v11 encodeObject:v10 forKey:*MEMORY[0x263F0EAB8]];
    }
    else
    {
      [v11 encodeObject:v8 forKey:*MEMORY[0x263F0EA88]];
    }

    id v6 = v11;
  }
}

- (void)_encodeObjectsWithAccessoriesWithCoder:(id)a3
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = objc_msgSend(v4, "hmd_isForXPCTransport");
  int v6 = objc_msgSend(v4, "hmd_isForLocalStore");
  int v7 = objc_msgSend(v4, "hmd_isForRemoteTransport");
  int v8 = objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount");
  int v9 = objc_msgSend(v4, "hmd_isForRemoteGatewayCoder");
  int v10 = objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess");
  uint64_t v11 = objc_msgSend(v4, "hmd_homeManagerOptions");
  uint64_t v12 = v11;
  if (v11)
  {
    uint64_t v13 = v11 | 0x9FD0;
    if (!v10) {
      uint64_t v13 = v11;
    }
    if (v8) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = -1;
    }
    if (!v7) {
      uint64_t v14 = v11;
    }
    if (v5) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = v14;
    }
    [(HMDHome *)self __encodeAccessoriesWithCoder:v4 options:v15];
    [(HMDHome *)self encodeMediaSystemsWithCoder:v4 modifiedOptions:v15];
    if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
    {
      id v16 = [(HMDHome *)self serviceGroups];
      id v17 = self;
      id v18 = (void *)[v16 copy];
      [v4 encodeObject:v18 forKey:*MEMORY[0x263F0EB58]];

      self = v17;
    }
    BOOL v19 = [(HMDHome *)self actionSets];
    [(HMDHome *)self _encodeActionSets:v19 coder:v4];

    if (((v5 | v6) == 1 || !(v7 ^ 1 | v8) || ((v8 ^ 1 | v9) & 1) == 0)
      && [(HMDHome *)self shouldWeSendAutomationsToClients])
    {
      uint64_t v20 = [(HMDHome *)self triggerOwnedActionSets];
      id v21 = (void *)[v20 copy];
      [v4 encodeObject:v21 forKey:@"HM.triggerOwnedActionSets"];
    }
    isWatch();
    if (v5 && (!isAppleTV() | v10) == 1)
    {
      int v73 = v10;
      long long v22 = (void *)MEMORY[0x263EFF980];
      id v23 = [(HMDHome *)self triggers];
      BOOL v24 = objc_msgSend(v22, "arrayWithCapacity:", objc_msgSend(v23, "count"));

      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      uint64_t v71 = self;
      long long v25 = [(HMDHome *)self triggers];
      uint64_t v26 = [v25 countByEnumeratingWithState:&v82 objects:v90 count:16];
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = *(void *)v83;
        long long v29 = HMDAppleMediaProfile;
        p_cache = HMDProcessRelaunchThresholdLogEvent.cache;
        uint64_t v72 = *(void *)v83;
        do
        {
          for (uint64_t i = 0; i != v27; ++i)
          {
            if (*(void *)v83 != v28) {
              objc_enumerationMutation(v25);
            }
            id v32 = *(id *)(*((void *)&v82 + 1) + 8 * i);
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              __int16 v33 = v32;
            }
            else {
              __int16 v33 = 0;
            }
            id v34 = v33;

            if (v34)
            {
              [v24 addObject:v32];
            }
            else
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                __int16 v35 = v29;
                uint64_t v36 = v25;
                id v37 = v4;
                __int16 v38 = p_cache;
                id v39 = v32;
                __int16 v40 = [v39 significantEvent];

                if (v40) {
                  int v41 = v73;
                }
                else {
                  int v41 = 1;
                }
                if (v41 == 1) {
                  [v24 addObject:v39];
                }

                p_cache = v38;
                id v4 = v37;
                long long v25 = v36;
                long long v29 = v35;
                uint64_t v28 = v72;
              }
            }
          }
          uint64_t v27 = [v25 countByEnumeratingWithState:&v82 objects:v90 count:16];
        }
        while (v27);
      }

      if ([(HMDHome *)v71 shouldWeSendAutomationsToClients])
      {
        uint64_t v42 = (void *)[v24 copy];
        [v4 encodeObject:v42 forKey:@"triggers"];
      }
    }
    else if ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) != 0 {
           || objc_msgSend(v4, "hmd_isForRemoteTransport")
    }
           && (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount") & 1) == 0
           && (objc_msgSend(v4, "hmd_isForRemoteUserAdministrator") & 1) != 0
           || objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount")
           && (objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
    {
      long long v43 = [MEMORY[0x263EFF980] array];
      id v44 = [MEMORY[0x263EFF980] array];
      id v45 = [MEMORY[0x263EFF980] array];
      long long v78 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      uint64_t v46 = [(HMDHome *)self triggers];
      uint64_t v47 = [v46 countByEnumeratingWithState:&v78 objects:v89 count:16];
      if (v47)
      {
        uint64_t v48 = v47;
        uint64_t v49 = *(void *)v79;
        do
        {
          for (uint64_t j = 0; j != v48; ++j)
          {
            if (*(void *)v79 != v49) {
              objc_enumerationMutation(v46);
            }
            [v43 addObject:*(void *)(*((void *)&v78 + 1) + 8 * j)];
          }
          uint64_t v48 = [v46 countByEnumeratingWithState:&v78 objects:v89 count:16];
        }
        while (v48);
      }

      char v51 = (void *)[v44 copy];
      [v4 encodeObject:v51 forKey:@"HM.triggers"];

      id v52 = (void *)[v45 copy];
      [v4 encodeObject:v52 forKey:@"HM.sharedActivationTriggers"];

      if (objc_msgSend(v4, "hmd_isForLocalStore"))
      {
        id v53 = (void *)[v43 copy];
        [v4 encodeObject:v53 forKey:@"triggers"];

        [(HMDHome *)self _updateOwnedTriggers];
        id v54 = [(HMDHome *)self ownedTriggers];
        __int16 v55 = (void *)[v54 copy];
        [v4 encodeObject:v55 forKey:@"HM.deviceOwnedTriggers"];
      }
    }
    else if (objc_msgSend(v4, "hmd_isForNonAdminSharedUser"))
    {
      id v56 = (void *)MEMORY[0x230FBD990]();
      __int16 v57 = self;
      id v58 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        __int16 v59 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v88 = v59;
        _os_log_impl(&dword_22F52A000, v58, OS_LOG_TYPE_INFO, "%{public}@Syncing triggers to remote transport", buf, 0xCu);
      }
      long long v60 = [MEMORY[0x263EFF980] array];
      long long v74 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      __int16 v61 = [(HMDHome *)v57 triggers];
      uint64_t v62 = [v61 countByEnumeratingWithState:&v74 objects:v86 count:16];
      if (v62)
      {
        uint64_t v63 = v62;
        uint64_t v64 = *(void *)v75;
        do
        {
          for (uint64_t k = 0; k != v63; ++k)
          {
            if (*(void *)v75 != v64) {
              objc_enumerationMutation(v61);
            }
            long long v66 = *(void **)(*((void *)&v74 + 1) + 8 * k);
            long long v67 = objc_msgSend(v4, "hmd_supportedFeatures");
            id v68 = objc_msgSend(v4, "hmd_user");
            int v69 = [v66 compatible:v67 user:v68];

            if (v69) {
              [v60 addObject:v66];
            }
          }
          uint64_t v63 = [v61 countByEnumeratingWithState:&v74 objects:v86 count:16];
        }
        while (v63);
      }

      long long v70 = (void *)[v60 copy];
      [v4 encodeObject:v70 forKey:@"HM.triggers"];
    }
  }
  else
  {
    [(HMDHome *)self __encodeAccessoriesWithCoder:v4 options:v11];
    [(HMDHome *)self encodeMediaSystemsWithCoder:v4 modifiedOptions:v12];
  }
}

- (void)__encodeAccessoriesWithCoder:(id)a3 options:(unint64_t)a4
{
  __int16 v4 = a4;
  uint64_t v90 = *MEMORY[0x263EF8340];
  id v63 = a3;
  int v5 = [(HMDHome *)self accessories];
  int v6 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v5, "count"));
  int v7 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v5, "count"));
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  id v8 = v5;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v75 objects:v89 count:16];
  uint64_t v64 = v6;
  uint64_t v65 = v7;
  id v66 = v8;
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v76;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v76 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v75 + 1) + 8 * i);
        int v14 = [v13 isCurrentAccessory];
        if ((v4 & 0x10) != 0 && v14)
        {
          [v7 addObject:v13];
          continue;
        }
        id v15 = v13;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v16 = v15;
        }
        else {
          id v16 = 0;
        }
        id v17 = v16;

        if (v17)
        {
          if ((v4 & 0x100) != 0) {
            [v6 addObject:v17];
          }
          goto LABEL_51;
        }
        id v18 = v15;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          BOOL v19 = v18;
        }
        else {
          BOOL v19 = 0;
        }
        id v20 = v19;

        if (v20)
        {
          if ((v4 & 0x40) != 0
            || (v4 & 0x800) != 0
            && ([v20 device], id v21 = objc_claimAutoreleasedReturnValue(), v21, v21))
          {
            [v7 addObject:v20];
          }
          goto LABEL_50;
        }
        id v22 = v18;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v23 = v22;
        }
        else {
          id v23 = 0;
        }
        id v24 = v23;

        if (!v24)
        {
LABEL_41:
          id v31 = v22;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v32 = v31;
          }
          else {
            id v32 = 0;
          }
          id v33 = v32;

          if (v33) {
            [v65 addObject:v33];
          }

          goto LABEL_49;
        }
        long long v25 = [v24 hostAccessory];
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) == 0 || !v25)
        {
          if ([v24 hasTelevisionService])
          {
            if ((v4 & 0x400) == 0) {
              goto LABEL_49;
            }
LABEL_47:
            long long v30 = v65;
          }
          else
          {
            uint64_t v27 = [v24 networkRouterController];

            if (v27)
            {
              if ((v4 & 0x1000) == 0) {
                goto LABEL_49;
              }
              goto LABEL_47;
            }
            if ((v4 & 0x200) != 0) {
              goto LABEL_47;
            }
            int v28 = [v24 hasSmartSpeakerService];
            if ((v4 & 0x100) == 0 || !v28)
            {
              long long v29 = [v24 siriEndpointProfile];

              if ((v4 & 0x8000) == 0 || !v29) {
                goto LABEL_41;
              }
            }
            long long v30 = v65;
          }
          [v30 addObject:v22];
        }
LABEL_49:

        int v6 = v64;
        int v7 = v65;
LABEL_50:

        id v8 = v66;
LABEL_51:
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v75 objects:v89 count:16];
    }
    while (v10);
  }

  id v34 = (void *)MEMORY[0x230FBD990]();
  __int16 v35 = self;
  uint64_t v36 = HMFGetOSLogHandle();
  id v37 = v63;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
  {
    __int16 v38 = HMFGetLogIdentifier();
    id v39 = objc_msgSend(v63, "hmd_clientIdentifier");
    __int16 v40 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v65, "count"));
    int v41 = [v65 shortDescription];
    *(_DWORD *)buf = 138544130;
    long long v82 = v38;
    __int16 v83 = 2112;
    long long v84 = v39;
    __int16 v85 = 2112;
    uint64_t v86 = v40;
    __int16 v87 = 2112;
    long long v88 = v41;
    _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_DEBUG, "%{public}@encoded Accessories [%@]: %@, %@", buf, 0x2Au);

    int v6 = v64;
    int v7 = v65;

    id v8 = v66;
  }

  uint64_t v42 = (void *)[v7 copy];
  [v63 encodeObject:v42 forKey:@"accessories"];

  long long v43 = (void *)[v6 copy];
  [v63 encodeObject:v43 forKey:@"accessories.airplay"];

  if ((v4 & 5) == 0)
  {
    id v44 = objc_msgSend(MEMORY[0x263EFF9C0], "setWithCapacity:", objc_msgSend(v8, "count"));
    long long v71 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    id v45 = v7;
    uint64_t v46 = [v45 countByEnumeratingWithState:&v71 objects:v80 count:16];
    if (v46)
    {
      uint64_t v47 = v46;
      uint64_t v48 = *(void *)v72;
      do
      {
        for (uint64_t j = 0; j != v47; ++j)
        {
          if (*(void *)v72 != v48) {
            objc_enumerationMutation(v45);
          }
          id v50 = *(void **)(*((void *)&v71 + 1) + 8 * j);
          char v51 = [v50 room];

          if (v51)
          {
            id v52 = [v50 room];
            [v44 addObject:v52];
          }
        }
        uint64_t v47 = [v45 countByEnumeratingWithState:&v71 objects:v80 count:16];
      }
      while (v47);
    }

    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    id v53 = v6;
    uint64_t v54 = [v53 countByEnumeratingWithState:&v67 objects:v79 count:16];
    if (v54)
    {
      uint64_t v55 = v54;
      uint64_t v56 = *(void *)v68;
      do
      {
        for (uint64_t k = 0; k != v55; ++k)
        {
          if (*(void *)v68 != v56) {
            objc_enumerationMutation(v53);
          }
          id v58 = *(void **)(*((void *)&v67 + 1) + 8 * k);
          __int16 v59 = [v58 room];

          if (v59)
          {
            long long v60 = [v58 room];
            [v44 addObject:v60];
          }
        }
        uint64_t v55 = [v53 countByEnumeratingWithState:&v67 objects:v79 count:16];
      }
      while (v55);
    }

    __int16 v61 = [v44 allObjects];
    id v37 = v63;
    [v63 encodeObject:v61 forKey:@"rooms"];

    int v7 = v65;
  }
}

- (void)_encodeWithCoder:(id)a3
{
  uint64_t v313 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v251 = objc_msgSend(v4, "hmd_isForXPCTransport");
  int v5 = objc_msgSend(v4, "hmd_isForLocalStore");
  int v247 = objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess");
  int v246 = objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount");
  __int16 v248 = objc_msgSend(v4, "hmd_homeManagerOptions");
  int v250 = v5;
  if (v5)
  {
    int v6 = (void *)MEMORY[0x230FBD990]();
    int v7 = self;
    HMFGetOSLogHandle();
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      id v9 = (id)objc_claimAutoreleasedReturnValue();
      [(HMDHome *)v7 isOwnerUser];
      HMFBooleanToString();
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      id v298 = v9;
      __int16 v299 = 2112;
      id v300 = v10;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Encoding isOwnerUser : %@ for HH2 migration", buf, 0x16u);
    }
    objc_msgSend(v4, "encodeBool:forKey:", -[HMDHome isOwnerUser](v7, "isOwnerUser"), @"HM.Owner.HH2.MI");
  }
  uint64_t v11 = [(HMDHome *)self uuid];
  uint64_t v12 = [v11 UUIDString];
  [v4 encodeObject:v12 forKey:@"homeUUID"];

  uint64_t v13 = [(HMDHome *)self ownerName];
  [v4 encodeObject:v13 forKey:@"homeAdmin"];

  int v14 = [(HMDUser *)self->_owner uuid];
  id v15 = [v14 UUIDString];
  [v4 encodeObject:v15 forKey:@"kHomeOwnerUUID"];

  id v16 = [(HMDHome *)self creationDate];
  [v4 encodeObject:v16 forKey:@"creationDate"];

  id v17 = [(HMDHome *)self firstHAPAccessoryAddedDate];
  [v4 encodeObject:v17 forKey:@"firstHAPAccessoryAddedDate"];

  int64_t v18 = [(HMDHome *)self configurationVersion];
  BOOL v19 = [NSNumber numberWithInteger:v18];
  [v4 encodeObject:v19 forKey:@"homeConfigVersion"];

  id v20 = [(HMDHome *)self name];
  [v4 encodeObject:v20 forKey:@"homeName"];

  unint64_t v21 = [(HMDHome *)self homeHubState];
  [v4 encodeInteger:v21 forKey:*MEMORY[0x263F0C900]];
  BOOL v22 = [(HMDHome *)self isMultiUserEnabled];
  [v4 encodeBool:v22 forKey:*MEMORY[0x263F0CCF0]];
  if (isFeatureHomeTheaterQFAEnabledForTests) {
    uint64_t v23 = [(id)isFeatureHomeTheaterQFAEnabledForTests BOOLValue];
  }
  else {
    uint64_t v23 = 1;
  }
  [v4 encodeBool:v23 forKey:*MEMORY[0x263F0CE98]];
  BOOL v24 = [(HMDHome *)self soundCheckEnabled];
  [v4 encodeBool:v24 forKey:*MEMORY[0x263F0CE70]];
  long long v25 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[HMDHome audioAnalysisClassifierOptions](self, "audioAnalysisClassifierOptions"));
  [v4 encodeObject:v25 forKey:*MEMORY[0x263F0C7B0]];

  BOOL v26 = [(HMDHome *)self didOnboardAudioAnalysis];
  [v4 encodeBool:v26 forKey:*MEMORY[0x263F0C7D0]];
  uint64_t v27 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[HMDHome siriPhraseOptions](self, "siriPhraseOptions"));
  [v4 encodeObject:v27 forKey:*MEMORY[0x263F0CE60]];

  BOOL v28 = [(HMDHome *)self locationServicesEnabled];
  [v4 encodeBool:v28 forKey:*MEMORY[0x263F0C950]];
  BOOL v29 = [(HMDHome *)self didOnboardLocationServices];
  [v4 encodeBool:v29 forKey:*MEMORY[0x263F0C808]];
  BOOL v30 = [(HMDHome *)self hasAnyUserAcknowledgedCameraRecordingOnboarding];
  [v4 encodeBool:v30 forKey:*MEMORY[0x263F0C8E8]];
  BOOL v31 = [(HMDHome *)self hasOnboardedForAccessCode];
  [v4 encodeBool:v31 forKey:*MEMORY[0x263F0C8F0]];
  BOOL v32 = [(HMDHome *)self hasOnboardedForWalletKey];
  [v4 encodeBool:v32 forKey:*MEMORY[0x263F0C8F8]];
  BOOL v33 = [(HMDHome *)self dismissedWalletKeyUWBUnlockOnboarding];
  [v4 encodeBool:v33 forKey:*MEMORY[0x263F0C818]];
  id v34 = objc_msgSend(v4, "hmd_supportedFeatures");
  int v35 = [v34 containsObject:&unk_26E470A20];

  uint64_t v36 = (void *)MEMORY[0x230FBD990]();
  long long v249 = self;
  HMFGetOSLogHandle();
  id v37 = (id)objc_claimAutoreleasedReturnValue();
  BOOL v38 = os_log_type_enabled(v37, OS_LOG_TYPE_INFO);
  if (v35)
  {
    id v39 = v249;
    if (v38)
    {
      HMFGetLogIdentifier();
      id v40 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      id v298 = v40;
      _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@Forcing isUpdatedToHH2 to YES", buf, 0xCu);
    }
    uint64_t v41 = 1;
  }
  else
  {
    if (v38)
    {
      HMFGetLogIdentifier();
      id v42 = (id)objc_claimAutoreleasedReturnValue();
      [(HMDHome *)v249 isUpdatedToHH2];
      HMFBooleanToString();
      id v43 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      id v298 = v42;
      __int16 v299 = 2112;
      id v300 = v43;
      _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@isUpdatedToHH2 is set to %@", buf, 0x16u);
    }
    id v39 = v249;

    uint64_t v41 = [(HMDHome *)v249 isUpdatedToHH2];
  }
  [v4 encodeBool:v41 forKey:*MEMORY[0x263F0CF10]];
  if (objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
  {
    uint64_t v44 = [(HMDHome *)v39 bulletinNotificationsSupported];
    [v4 encodeBool:v44 forKey:*MEMORY[0x263F0C7F0]];
  }
  if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
  {
    if ((v251 & v247) != 1)
    {
      char v51 = [(HMDHome *)v39 homeLocationHandler];
      id v52 = &kHomeLocationHandlerCodingKey;
      goto LABEL_25;
    }
    if (objc_msgSend(v4, "hmd_isForXPCTransportAuthorizedForLocationAccess"))
    {
      id v45 = [(HMDHome *)v39 homeLocationHandler];
      uint64_t v46 = [v45 location];
      [v4 encodeObject:v46 forKey:@"homeLocation"];

      if (objc_msgSend(v4, "hmd_isForXPCTransportEntitledForHomeLocationAccess"))
      {
        uint64_t v47 = [(HMDHome *)v39 homeLocation];
        [v4 encodeInteger:v47 forKey:*MEMORY[0x263F0C960]];
      }
    }
    uint64_t v48 = [(HMDHome *)v39 primaryResident];
    uint64_t v49 = [v48 capabilities];
    int v50 = [v49 supportsSiriEndpointSetup];

    if (v50)
    {
      char v51 = (void *)[objc_alloc(MEMORY[0x263F42670]) initWithVersionString:@"7.2"];
      id v52 = (__CFString **)MEMORY[0x263F0CE58];
LABEL_25:
      [v4 encodeObject:v51 forKey:*v52];
    }
  }
  if (v5)
  {
    id v53 = objc_msgSend(NSNumber, "numberWithInteger:", -[HMDHome lastSyncedConfigurationVersion](v39, "lastSyncedConfigurationVersion"));
    [v4 encodeObject:v53 forKey:@"lastSyncedHomeConfigVersion"];

    uint64_t v54 = [(HMDHome *)v39 reachabilityNotificationManager];
    uint64_t v55 = [v54 reachabilityContext];
    [v4 encodeObject:v55 forKey:@"HMHH.residentReachabilityContext"];
  }
  __int16 v56 = v248;
  if ((v248 & 9) != 0)
  {
    __int16 v57 = [MEMORY[0x263F08968] strongToStrongObjectsMapTable];
    long long v292 = 0u;
    long long v293 = 0u;
    long long v294 = 0u;
    long long v295 = 0u;
    id v58 = [(HMDHome *)v39 _residentUsers];
    uint64_t v59 = [v58 countByEnumeratingWithState:&v292 objects:v312 count:16];
    if (v59)
    {
      uint64_t v60 = v59;
      uint64_t v61 = *(void *)v293;
      do
      {
        for (uint64_t i = 0; i != v60; ++i)
        {
          if (*(void *)v293 != v61) {
            objc_enumerationMutation(v58);
          }
          id v63 = *(void **)(*((void *)&v292 + 1) + 8 * i);
          uint64_t v64 = [v63 userID];
          uint64_t v65 = +[HMDDevice deviceWithDestination:v64];

          if (v65) {
            [v57 setObject:v63 forKey:v65];
          }
        }
        uint64_t v60 = [v58 countByEnumeratingWithState:&v292 objects:v312 count:16];
      }
      while (v60);
    }

    id v66 = [v57 objectEnumerator];
    long long v67 = [v66 allObjects];

    long long v257 = v57;
    if (v251 && (!isAppleTV() | v247) == 1)
    {
      uint64_t v68 = [MEMORY[0x263EFF980] array];
      long long v69 = (void *)v68;
      id v39 = v249;
      if (v247)
      {
        long long v254 = (void *)v68;
        id v244 = v67;
        long long v258 = v4;
        long long v70 = [(HMDHome *)v249 owner];
        BOOL v71 = [(HMDHome *)v249 isOwnerUser];
        long long v288 = 0u;
        long long v289 = 0u;
        long long v290 = 0u;
        long long v291 = 0u;
        long long v72 = [(HMDHome *)v249 users];
        uint64_t v73 = [v72 countByEnumeratingWithState:&v288 objects:v311 count:16];
        if (v73)
        {
          uint64_t v74 = v73;
          uint64_t v75 = *(void *)v289;
          do
          {
            for (uint64_t j = 0; j != v74; ++j)
            {
              if (*(void *)v289 != v75) {
                objc_enumerationMutation(v72);
              }
              long long v77 = *(void **)(*((void *)&v288 + 1) + 8 * j);
              if (!v71 || ([*(id *)(*((void *)&v288 + 1) + 8 * j) isEqual:v70] & 1) == 0)
              {
                uint64_t v78 = [v77 userID];
                if (!v78) {
                  continue;
                }
                long long v79 = (void *)v78;
                char v80 = [v77 isRemoteGateway];

                if (v80) {
                  continue;
                }
              }
              [v254 addObject:v77];
            }
            uint64_t v74 = [v72 countByEnumeratingWithState:&v288 objects:v311 count:16];
          }
          while (v74);
        }

        id v39 = v249;
        __int16 v57 = v257;
        id v4 = v258;
        long long v67 = v244;
        long long v69 = v254;
        if ([(HMDHome *)v249 isAdminUser])
        {
          long long v81 = (void *)MEMORY[0x263EFF980];
          long long v82 = [(HMDHome *)v249 outgoingInvitations];
          __int16 v83 = objc_msgSend(v81, "arrayWithCapacity:", objc_msgSend(v82, "count"));

          long long v286 = 0u;
          long long v287 = 0u;
          long long v284 = 0u;
          long long v285 = 0u;
          long long v84 = [(HMDHome *)v249 outgoingInvitations];
          uint64_t v85 = [v84 countByEnumeratingWithState:&v284 objects:v310 count:16];
          if (v85)
          {
            uint64_t v86 = v85;
            uint64_t v87 = *(void *)v285;
            do
            {
              for (uint64_t k = 0; k != v86; ++k)
              {
                if (*(void *)v285 != v87) {
                  objc_enumerationMutation(v84);
                }
                long long v89 = *(void **)(*((void *)&v284 + 1) + 8 * k);
                uint64_t v90 = [v89 user];
                char v91 = [v90 isRemoteGateway];

                if ((v91 & 1) == 0) {
                  [v83 addObject:v89];
                }
              }
              uint64_t v86 = [v84 countByEnumeratingWithState:&v284 objects:v310 count:16];
            }
            while (v86);
          }

          uint64_t v92 = (void *)[v83 copy];
          [v258 encodeObject:v92 forKey:@"HM.invitations"];

          id v39 = v249;
          long long v67 = v244;
          long long v69 = v254;
        }
      }
      else
      {
        [(HMDHome *)v249 isAdminUser];
      }
      uint64_t v163 = (void *)[v69 copy];
      [v4 encodeObject:v163 forKey:@"users"];

      objc_msgSend(v4, "encodeBool:forKey:", -[HMDHome isAdminUser](v39, "isAdminUser"), @"isAdminUser");
      objc_msgSend(v4, "encodeBool:forKey:", -[HMDHome isOwnerUser](v39, "isOwnerUser"), @"HM.isOwnerUser");
      uint64_t v164 = [(HMDHome *)v39 isAccessToHomeAllowed];
      [v4 encodeBool:v164 forKey:*MEMORY[0x263F0C930]];
      __int16 v56 = v248;
      if ((v164 & 1) == 0)
      {
        uint64_t v165 = [(HMDHome *)v39 accessNotAllowedReasonCode];
        [v4 encodeInteger:v165 forKey:*MEMORY[0x263F0C758]];
      }
      __int16 v166 = [(HMDHome *)v39 overriddenHomeAccessControl];

      if (!v166) {
        goto LABEL_134;
      }
      id v109 = [(HMDHome *)v39 overriddenHomeAccessControl];
      uint64_t v167 = [v109 unsignedIntegerValue];
      [v4 encodeInteger:v167 forKey:*MEMORY[0x263F0C750]];
    }
    else
    {
      __int16 v56 = v248;
      id v39 = v249;
      if ((v250 | v246) == 1)
      {
        char v93 = (void *)MEMORY[0x263EFF980];
        int v94 = [(HMDHome *)v249 users];
        long long v69 = [v93 arrayWithArray:v94];

        if (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount"))
        {
          uint64_t v95 = objc_msgSend(v4, "hmd_supportedFeatures");
          char v96 = [v95 containsObject:&unk_26E470A38];

          if ((v96 & 1) == 0)
          {
            id v97 = v67;
            long long v282 = 0u;
            long long v283 = 0u;
            long long v280 = 0u;
            long long v281 = 0u;
            unint64_t v98 = [(HMDHome *)v249 users];
            uint64_t v99 = (void *)[v98 copy];

            uint64_t v100 = [v99 countByEnumeratingWithState:&v280 objects:v309 count:16];
            if (v100)
            {
              uint64_t v101 = v100;
              uint64_t v102 = *(void *)v281;
              do
              {
                for (uint64_t m = 0; m != v101; ++m)
                {
                  if (*(void *)v281 != v102) {
                    objc_enumerationMutation(v99);
                  }
                  uint64_t v104 = *(void **)(*((void *)&v280 + 1) + 8 * m);
                  if ([v104 requiresMakoSupport]) {
                    [v69 removeObject:v104];
                  }
                }
                uint64_t v101 = [v99 countByEnumeratingWithState:&v280 objects:v309 count:16];
              }
              while (v101);
            }

            id v39 = v249;
            long long v67 = v97;
          }
        }
        uint64_t v105 = (void *)[v67 mutableCopy];
        id v106 = v67;
        [v69 removeObjectsInArray:v67];
        if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
        {
          long long v107 = [(HMDHome *)v39 usersPendingUserManagementOperations];
          [v69 removeObjectsInArray:v107];

          v108 = [(HMDHome *)v39 usersPendingUserManagementOperations];
          [v105 removeObjectsInArray:v108];
        }
        long long v278 = 0u;
        long long v279 = 0u;
        long long v276 = 0u;
        long long v277 = 0u;
        id v109 = v105;
        uint64_t v110 = [v109 countByEnumeratingWithState:&v276 objects:v308 count:16];
        if (v110)
        {
          uint64_t v111 = v110;
          uint64_t v112 = *(void *)v277;
          do
          {
            for (uint64_t n = 0; n != v111; ++n)
            {
              if (*(void *)v277 != v112) {
                objc_enumerationMutation(v109);
              }
              uint64_t v114 = [*(id *)(*((void *)&v276 + 1) + 8 * n) legacyUser];
              [v69 addObject:v114];
            }
            uint64_t v111 = [v109 countByEnumeratingWithState:&v276 objects:v308 count:16];
          }
          while (v111);
        }

        BOOL v115 = (void *)[v69 copy];
        [v4 encodeObject:v115 forKey:@"users"];

        id v116 = (void *)[v109 copy];
        [v4 encodeObject:v116 forKey:@"residentDevices"];

        __int16 v56 = v248;
        long long v67 = v106;
      }
      else
      {
        if (!objc_msgSend(v4, "hmd_isForRemoteTransport"))
        {
LABEL_135:

          goto LABEL_136;
        }
        long long v69 = [MEMORY[0x263EFF980] array];
        uint64_t v117 = [(HMDHome *)v249 owner];

        if (v117)
        {
          uint64_t v118 = [(HMDHome *)v249 owner];
          [v69 addObject:v118];

          uint64_t v119 = objc_msgSend(v4, "hmd_user");

          if (v119)
          {
            int v120 = objc_msgSend(v4, "hmd_user");
            [v69 addObject:v120];
          }
        }
        long long v274 = 0u;
        long long v275 = 0u;
        long long v272 = 0u;
        long long v273 = 0u;
        id v245 = v67;
        id v121 = v67;
        uint64_t v122 = [v121 countByEnumeratingWithState:&v272 objects:v307 count:16];
        if (v122)
        {
          uint64_t v123 = v122;
          uint64_t v124 = *(void *)v273;
          do
          {
            for (iuint64_t i = 0; ii != v123; ++ii)
            {
              if (*(void *)v273 != v124) {
                objc_enumerationMutation(v121);
              }
              long long v126 = [*(id *)(*((void *)&v272 + 1) + 8 * ii) legacyUser];
              [v69 addObject:v126];
            }
            uint64_t v123 = [v121 countByEnumeratingWithState:&v272 objects:v307 count:16];
          }
          while (v123);
        }

        int v127 = (void *)[v69 copy];
        [v4 encodeObject:v127 forKey:@"users"];

        [v4 encodeObject:v121 forKey:@"residentDevices"];
        long long v255 = v69;
        if (objc_msgSend(v4, "hmd_isForRemoteUserAdministrator"))
        {
          long long v128 = (void *)MEMORY[0x263EFF980];
          id v129 = [(HMDHome *)v249 users];
          long long v130 = objc_msgSend(v128, "arrayWithCapacity:", objc_msgSend(v129, "count"));

          long long v270 = 0u;
          long long v271 = 0u;
          long long v268 = 0u;
          long long v269 = 0u;
          unsigned int v131 = [(HMDHome *)v249 users];
          uint64_t v132 = [v131 countByEnumeratingWithState:&v268 objects:v306 count:16];
          if (v132)
          {
            uint64_t v133 = v132;
            uint64_t v134 = *(void *)v269;
            do
            {
              for (juint64_t j = 0; jj != v133; ++jj)
              {
                if (*(void *)v269 != v134) {
                  objc_enumerationMutation(v131);
                }
                char v136 = *(void **)(*((void *)&v268 + 1) + 8 * jj);
                if (([v136 isRemoteGateway] & 1) == 0
                  && ([v136 privilege] == 4 || !objc_msgSend(v136, "privilege")))
                {
                  if (![v136 requiresMakoSupport]
                    || (objc_msgSend(v4, "hmd_supportedFeatures"),
                        id v137 = objc_claimAutoreleasedReturnValue(),
                        int v138 = [v137 containsObject:&unk_26E470A38],
                        v137,
                        long long v69 = v255,
                        v138))
                  {
                    [v130 addObject:v136];
                  }
                }
              }
              uint64_t v133 = [v131 countByEnumeratingWithState:&v268 objects:v306 count:16];
            }
            while (v133);
          }

          id v139 = (void *)[v130 copy];
          [v4 encodeObject:v139 forKey:@"HM.sharedUsers"];

          __int16 v57 = v257;
        }
        id v140 = (void *)MEMORY[0x230FBD990]();
        id v39 = v249;
        id v141 = v249;
        HMFGetOSLogHandle();
        long long v142 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v142, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          id v143 = (id)objc_claimAutoreleasedReturnValue();
          long long v144 = [(HMDHome *)v141 users];
          uint64_t v145 = objc_msgSend(v4, "hmd_user");
          *(_DWORD *)buf = 138543874;
          id v298 = v143;
          __int16 v299 = 2112;
          id v300 = v144;
          __int16 v301 = 2112;
          v302 = v145;
          _os_log_impl(&dword_22F52A000, v142, OS_LOG_TYPE_INFO, "%{public}@encode users: %@, coder username: %@", buf, 0x20u);

          long long v69 = v255;
          id v39 = v249;
        }

        long long v266 = 0u;
        long long v267 = 0u;
        long long v264 = 0u;
        long long v265 = 0u;
        id v109 = [(HMDHome *)v141 users];
        uint64_t v146 = [v109 countByEnumeratingWithState:&v264 objects:v305 count:16];
        if (v146)
        {
          uint64_t v147 = v146;
          uint64_t v148 = *(void *)v265;
          id v252 = v109;
          long long v253 = v141;
          do
          {
            uint64_t v149 = 0;
            uint64_t v259 = v147;
            do
            {
              if (*(void *)v265 != v148) {
                objc_enumerationMutation(v109);
              }
              long long v150 = *(void **)(*((void *)&v264 + 1) + 8 * v149);
              __int16 v151 = objc_msgSend(v4, "hmd_user");
              int v152 = [v150 isEqual:v151];

              if (v152)
              {
                __int16 v153 = (void *)MEMORY[0x230FBD990]();
                long long v154 = v141;
                HMFGetOSLogHandle();
                __int16 v155 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v155, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  long long v256 = v153;
                  id v156 = (id)objc_claimAutoreleasedReturnValue();
                  __int16 v157 = [(HMDHome *)v154 users];
                  long long v158 = objc_msgSend(v4, "hmd_user");
                  [v150 presenceAuthStatus];
                  uint64_t v159 = v148;
                  v161 = id v160 = v4;
                  *(_DWORD *)buf = 138544130;
                  id v298 = v156;
                  __int16 v299 = 2112;
                  id v300 = v157;
                  __int16 v301 = 2112;
                  v302 = v158;
                  __int16 v303 = 2112;
                  v304 = v161;
                  _os_log_impl(&dword_22F52A000, v155, OS_LOG_TYPE_INFO, "%{public}@encode users: %@, coder username: %@, %@", buf, 0x2Au);

                  id v4 = v160;
                  uint64_t v148 = v159;

                  id v109 = v252;
                  id v141 = v253;

                  __int16 v153 = v256;
                }

                __int16 v162 = [v150 presenceAuthStatus];
                [v162 addToCoder:v4];

                __int16 v57 = v257;
                uint64_t v147 = v259;
              }
              ++v149;
            }
            while (v147 != v149);
            uint64_t v147 = [v109 countByEnumeratingWithState:&v264 objects:v305 count:16];
          }
          while (v147);
          __int16 v56 = v248;
          id v39 = v249;
          long long v67 = v245;
          long long v69 = v255;
        }
        else
        {
          __int16 v56 = v248;
          long long v67 = v245;
        }
      }
    }

LABEL_134:
    goto LABEL_135;
  }
LABEL_136:
  if ((v56 & 0x9FD1) != 0) {
    [(HMDHome *)v39 _encodeObjectsWithAccessoriesWithCoder:v4];
  }
  __int16 v168 = [(HMDHome *)v39 roomForEntireHome];
  [v4 encodeObject:v168 forKey:@"roomForEntireHome"];

  if ((v56 & 5) != 0 && (objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
  {
    BOOL v169 = [(HMDHome *)v39 rooms];
    __int16 v170 = (void *)[v169 copy];
    [v4 encodeObject:v170 forKey:@"rooms"];

    id v171 = [(HMDHome *)v39 zones];
    __int16 v172 = (void *)[v171 copy];
    [v4 encodeObject:v172 forKey:@"zones"];
  }
  if ((v56 & 0x801) != 0)
  {
    if (v251)
    {
      if (!v247) {
        goto LABEL_147;
      }
      id v173 = [(HMDHome *)v39 residentDeviceManager];
      __int16 v174 = [v173 residentDevices];

      [v4 encodeObject:v174 forKey:@"residentDevices"];
      id v175 = [(HMDHome *)v39 notificationRegistrations];
      objc_msgSend(v4, "encodeBool:forKey:", objc_msgSend(v175, "count") != 0, @"kCharacteristicNotificationEnableKey");

      long long v176 = [(HMDHome *)v39 notificationsUpdatedTime];
      [v4 encodeObject:v176 forKey:@"kCharacteristicNotificationEnableTime"];
    }
    else
    {
      int v177 = [(HMDHome *)v39 enabledResidents];
      uint64_t v178 = objc_msgSend(v177, "na_filter:", &__block_literal_global_1872);

      objc_msgSend(v4, "encodeInteger:forKey:", objc_msgSend(v178, "count"), @"HMD.nonIPadResidentDeviceCount");
      __int16 v174 = [(HMDHome *)v39 primaryNetworkRouterManagingDeviceUUID];
      [v4 encodeObject:v174 forKey:@"HMDHomePrimaryNetworkRouterManagingDeviceUUIDCodingKey"];
    }
  }
LABEL_147:
  if ((v56 & 0x85D1) != 0
    && (!objc_msgSend(v4, "hmd_isForXPCTransport")
     || objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess")))
  {
    uint64_t v179 = [(HMDHome *)v39 minimumMediaUserPrivilege];
    [v4 encodeInteger:v179 forKey:*MEMORY[0x263F0CC98]];
    uint64_t v180 = [(HMDHome *)v39 isMediaPeerToPeerEnabled];
    [v4 encodeBool:v180 forKey:*MEMORY[0x263F0CCB0]];
    if ((objc_msgSend(v4, "hmd_isForNonAdminSharedUser") & 1) == 0)
    {
      uint64_t v181 = [(HMDHome *)v39 mediaPassword];
      [v4 encodeObject:v181 forKey:*MEMORY[0x263F0CCA0]];
    }
  }
  if ((v56 & 0x11) != 0
    && (!objc_msgSend(v4, "hmd_isForXPCTransport")
     || objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess")))
  {
    uint64_t v182 = [(HMDHome *)v39 isAutomaticSoftwareUpdateEnabled];
    [v4 encodeBool:v182 forKey:*MEMORY[0x263F0C7E0]];
    uint64_t v183 = [(HMDHome *)v39 isAutomaticThirdPartyAccessorySoftwareUpdateEnabled];
    [v4 encodeBool:v183 forKey:*MEMORY[0x263F0C7E8]];
  }
  id v184 = [(HMDHome *)v39 matterFabricID];
  [v4 encodeObject:v184 forKey:@"HM.matterFabricID"];

  if (v56)
  {
    if (v250)
    {
      long long v185 = [(HMDHome *)v39 presenceMonitor];
      [v4 encodeObject:v185 forKey:@"kHMDHomePresenceMonitorCodingKey"];

      long long v186 = [(HMDHome *)v39 unfilteredThreadNetworkID];
      [v4 encodeObject:v186 forKey:@"HMHM.threadNetworkID"];
    }
    if (objc_msgSend(v4, "hmd_isForRemoteGatewayCoder"))
    {
      if (!v251) {
        goto LABEL_167;
      }
    }
    else
    {
      if ((v251 & 1) == 0)
      {
        long long v190 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome allowsRemoteAccess](v39, "allowsRemoteAccess"));
        [v4 encodeObject:v190 forKey:@"HM.allowsRemoteAccess"];

        long long v191 = [(HMDHome *)v39 networkProtectionGroupRegistry];
        long long v192 = [v191 persistedGroups];
        [v4 encodeObject:v192 forKey:*MEMORY[0x263F0C770]];

LABEL_167:
        char v189 = [(HMDHome *)v39 appData];
        [v4 encodeObject:v189 forKey:@"HM.appDataRepository"];
LABEL_168:

        if (v250)
        {
          long long v193 = [(HMDHome *)v39 removedUsers];
          char v194 = (void *)[v193 copy];
          [v4 encodeObject:v194 forKey:@"HM.removedUsersCodingKey"];
        }
        else if (!v246)
        {
LABEL_172:
          if ((v250 | v246) == 1)
          {
            isWatch();
            if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
            {
              id v197 = (void *)MEMORY[0x263EFF980];
              id v198 = [(HMDHome *)v39 outgoingInvitations];
              id v199 = [v197 arrayWithArray:v198];

              if (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount"))
              {
                long long v200 = objc_msgSend(v4, "hmd_supportedFeatures");
                char v201 = [v200 containsObject:&unk_26E470A38];

                if ((v201 & 1) == 0)
                {
                  long long v262 = 0u;
                  long long v263 = 0u;
                  long long v260 = 0u;
                  long long v261 = 0u;
                  uint64_t v202 = [(HMDHome *)v39 outgoingInvitations];
                  uint64_t v203 = [v202 countByEnumeratingWithState:&v260 objects:v296 count:16];
                  if (v203)
                  {
                    uint64_t v204 = v203;
                    uint64_t v205 = *(void *)v261;
                    do
                    {
                      for (kuint64_t k = 0; kk != v204; ++kk)
                      {
                        if (*(void *)v261 != v205) {
                          objc_enumerationMutation(v202);
                        }
                        long long v207 = *(void **)(*((void *)&v260 + 1) + 8 * kk);
                        long long v208 = [v207 user];
                        if ([v208 requiresMakoSupport]) {
                          [v199 removeObject:v207];
                        }
                      }
                      uint64_t v204 = [v202 countByEnumeratingWithState:&v260 objects:v296 count:16];
                    }
                    while (v204);
                  }

                  id v39 = v249;
                }
              }
              uint64_t v209 = (void *)[v199 copy];
              [v4 encodeObject:v209 forKey:@"HM.invitations"];
            }
          }
          if (!objc_msgSend(v4, "hmd_isForXPCTransport")
            || objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
          {
            uint64_t v210 = [(HMDHome *)v39 protectionMode];
            [v4 encodeInteger:v210 forKey:*MEMORY[0x263F0CCF8]];
          }
          if (objc_msgSend(v4, "hmd_isForXPCTransport"))
          {
            if (objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
            {
              uint64_t v211 = [(HMDHome *)v39 networkRouterSupportDisableReason];
              [v4 encodeInteger:v211 forKey:*MEMORY[0x263F0CD00]];
            }
            unint64_t v212 = [(HMDHome *)v39 networkRouterSupport];
            [v4 encodeBool:(v212 >> 2) & 1 forKey:*MEMORY[0x263F0C780]];
          }
          uint64_t v213 = [(HMDHome *)v39 threadNetworkID];
          if (v213 && objc_msgSend(v4, "hmd_isForXPCTransport"))
          {
            int v214 = objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess");

            if (!v214) {
              goto LABEL_199;
            }
            uint64_t v213 = [(HMDHome *)v39 threadNetworkID];
            [v4 encodeObject:v213 forKey:*MEMORY[0x263F0CEA8]];
          }

LABEL_199:
          if ((objc_msgSend(v4, "hmd_isForXPCTransport") & 1) == 0)
          {
            id v215 = [(HMDHome *)v39 activeNetworkRouterUUID];
            long long v216 = [v215 UUIDString];
            [v4 encodeObject:v216 forKey:@"HMHM.activeNetworkRouter"];

            long long v217 = [(HMDHome *)v39 minimumNetworkRouterSupportHomeKitVersion];
            long long v218 = [v217 versionString];
            [v4 encodeObject:v218 forKey:@"HMHM.minimumNetworkRouterSupportHomeKitVersion"];

            uint64_t v219 = [(HMDHome *)v39 minHomeKitVersionForAccessoryNetworkProtectionChange];
            long long v220 = [v219 versionString];
            [v4 encodeObject:v220 forKey:@"HMHM.minHomeKitVersionForAccessoryNetworkProtectionChangeCodingKey"];
          }
          if (v251)
          {
            if (!objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
            {
LABEL_209:
              if (v250 | v246)
              {
                v229 = [(HMDHome *)v39 chipStorage];
                [v4 encodeObject:v229 forKey:@"HMHM.chipStorage"];
              }
              if (![(HMDHome *)v39 isOwnerUser]
                && ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) != 0
                 || objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount")))
              {
                v230 = [(HMDHome *)v39 sharedHomeSourceVersion];
                [v4 encodeObject:v230 forKey:@"kHomeKitVersionStringKey"];
              }
              if ((v251 & v247) == 1)
              {
                v231 = [(HMDHome *)v39 primaryResident];
                id v232 = [v231 capabilities];
                uint64_t v233 = [v232 supportsResidentActionSetStateEvaluation];
                [v4 encodeBool:v233 forKey:*MEMORY[0x263F0CE78]];

                uint64_t v234 = [(HMDHome *)v39 isEventLogEnabled];
                [v4 encodeBool:v234 forKey:*MEMORY[0x263F0C850]];
                uint64_t v235 = [(HMDHome *)v39 didOnboardEventLog];
                [v4 encodeBool:v235 forKey:*MEMORY[0x263F0C858]];
                uint64_t v236 = [(HMDHome *)v39 eventLogDuration];
                [v4 encodeInteger:v236 forKey:*MEMORY[0x263F0C848]];
                id v237 = [(HMDHome *)v39 timeZone];
                [v4 encodeObject:v237 forKey:*MEMORY[0x263F0CEB0]];

                v238 = [(HMDHome *)v39 numberOfCameras];
                [v4 encodeObject:v238 forKey:*MEMORY[0x263F0CD18]];

                v239 = [(HMDHome *)v39 featureDataSource];
                char v240 = [(HMDHome *)v39 uuid];
                int v241 = [v239 isResidentSelectionEnabledForHomeUUID:v240];

                if (v241)
                {
                  objc_msgSend(v4, "encodeBool:forKey:", -[HMDHome supportsResidentSelection](v39, "supportsResidentSelection"), @"HMHomeResidentSelectionSupported");
                  v242 = [(HMDHome *)v39 userSelectedPreferredResident];
                  [v4 encodeObject:v242 forKey:@"HMHomeUserSelectedPreferredResident"];

                  id v243 = [(HMDHome *)v39 autoSelectedPreferredResidents];
                  [v4 encodeObject:v243 forKey:@"HMHomeAutoSelectedPreferredResidents"];
                }
              }
              goto LABEL_218;
            }
            uint64_t v221 = [(HMDHome *)v39 personManagerSettings];
            [v4 encodeObject:v221 forKey:*MEMORY[0x263F0CD40]];

            uint64_t v222 = [(HMDHome *)v39 personManagerZoneUUID];
            id v223 = (__CFString *)*MEMORY[0x263F0CD58];
          }
          else
          {
            uint64_t v224 = [(HMDHome *)v39 personManagerSettings];
            [v4 encodeObject:v224 forKey:*MEMORY[0x263F0CD40]];

            v225 = [(HMDHome *)v39 personManagerZoneUUID];
            [v4 encodeObject:v225 forKey:*MEMORY[0x263F0CD58]];

            id v226 = [(HMDHome *)v39 naturalLightingContext];
            [v4 encodeObject:v226 forKey:@"HM.nlcck"];

            if ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) != 0
              || objc_msgSend(v4, "hmd_isForRemoteUserAdministrator"))
            {
              id v227 = [(HMDHome *)v39 labelsByAccessCode];
              [v4 encodeObject:v227 forKey:@"HMDHomeLabelsByAccessCodeCodingKey"];

              id v228 = [(HMDHome *)v39 removedUserInfoByAccessCode];
              [v4 encodeObject:v228 forKey:@"HMDHomeRemovedUserInfoByAccessCodeCodingKey"];
            }
            uint64_t v222 = [(HMDHome *)v39 nfcReaderKey];
            id v223 = @"HMDHomeNFCReaderKeyCodingKey";
          }
          [v4 encodeObject:v222 forKey:v223];

          goto LABEL_209;
        }
        int v195 = [(HMDHome *)v39 presenceAuthStatus];
        [v195 addToCoder:v4];

        uint64_t v196 = [(HMDHome *)v39 presenceComputeStatus];
        [v196 addToCoder:v4];

        goto LABEL_172;
      }
      if (v247)
      {
        uint64_t v187 = [(HMDHome *)v39 networkProtectionGroupRegistry];
        uint64_t v188 = [v187 activeGroups];
        [v4 encodeObject:v188 forKey:*MEMORY[0x263F0C770]];
      }
    }
    char v189 = [(HMDHome *)v39 appData];
    [v189 encodeForXPCTransportWithCoder:v4 key:@"HM.appData"];
    goto LABEL_168;
  }
LABEL_218:
}

BOOL __28__HMDHome__encodeWithCoder___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 device];
  id v3 = [v2 productInfo];
  BOOL v4 = [v3 productClass] != 3;

  return v4;
}

- (void)encodeWithCoder:(id)a3
{
  id v5 = a3;
  BOOL v4 = (void *)MEMORY[0x230FBD990]();
  [(HMDHome *)self _encodeWithCoder:v5];
}

- (id)_initWithCoder:(id)a3
{
  uint64_t v390 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"homeName"];
  int v6 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"homeUUID"];
  v331 = (void *)v5;
  v332 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v6];
  int v7 = -[HMDHome initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:](self, "initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:", v5);

  if (!v7) {
    goto LABEL_217;
  }
  uint64_t v8 = +[HMDHome zoneIDFromHomeUUID:v7->_uuid];
  zoneID = v7->_zoneID;
  v7->_zoneID = (NSUUID *)v8;

  id v10 = v7;
  uint64_t v11 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"creationDate"];
  creationDate = v7->_creationDate;
  v7->_creationDate = (NSDate *)v11;

  uint64_t v13 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"firstHAPAccessoryAddedDate"];
  firstHAPAccessoryAddedDate = v7->_firstHAPAccessoryAddedDate;
  v7->_firstHAPAccessoryAddedDate = (NSDate *)v13;

  uint64_t v15 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"homeAdmin"];
  ownerName = v7->_ownerName;
  v7->_ownerName = (NSString *)v15;

  v333 = v4;
  v342 = v7;
  v330 = v6;
  if (objc_msgSend(v4, "hmd_isHH2MigrationInProgress"))
  {
    v7->_ownerUser = [v4 decodeBoolForKey:@"HM.Owner.HH2.MI"];
    id v17 = (void *)MEMORY[0x230FBD990]();
    int64_t v18 = v10;
    HMFGetOSLogHandle();
    BOOL v19 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      id v20 = (id)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      id v21 = (id)objc_claimAutoreleasedReturnValue();
      [(HMDHome *)v18 isOwnerUser];
      HMFBooleanToString();
      BOOL v22 = (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      id v385 = v20;
      __int16 v386 = 2112;
      uint64_t v387 = (uint64_t)v21;
      __int16 v388 = 2112;
      v389 = v22;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@HH2 Migration : isOwnerUser : %@ / %@", buf, 0x20u);
    }
  }
  uint64_t v23 = v342;
  if (v342->_ownerUser)
  {
    BOOL v24 = [(HMDHome *)v342 localCapabilitiesDataSource];
    int v25 = [v24 isResidentCapable];

    uint64_t v23 = v342;
    if (v25)
    {
      BOOL v26 = [v333 decodeObjectOfClass:objc_opt_class() forKey:@"kHMDHomePresenceMonitorCodingKey"];
      uint64_t v27 = v26;
      if (!v26) {
        uint64_t v27 = objc_alloc_init(HMDHomePresenceMonitor);
      }
      objc_storeStrong((id *)&v342->_presenceMonitor, v27);
      if (!v26) {

      }
      BOOL v28 = objc_alloc_init(HMDHomePeriodicReader);
      periodicReader = v342->_periodicReader;
      v342->_periodicReader = v28;

      uint64_t v23 = v342;
    }
  }
  BOOL v30 = [[HMDHomeAdministratorHandler alloc] initWithHome:v23];
  administratorHandler = v23->_administratorHandler;
  v23->_administratorHandler = v30;

  if (v23->_ownerUser)
  {
    sharedHomeUpdateHandler = v23->_sharedHomeUpdateHandler;
    v23->_sharedHomeUpdateHandler = 0;
  }
  else
  {
    isWatch();
    BOOL v33 = objc_alloc_init(HMDSharedHomeUpdateHandler);
    id v34 = v23->_sharedHomeUpdateHandler;
    v23->_sharedHomeUpdateHandler = v33;

    [(HMDSharedHomeUpdateHandler *)v23->_sharedHomeUpdateHandler configureWithHome:v23];
  }
  int v35 = v333;
  uint64_t v36 = [v333 decodeObjectOfClass:objc_opt_class() forKey:*MEMORY[0x263F0EA88]];
  mediaSystemController = v36;
  if (!v36) {
    mediaSystemController = v342->_mediaSystemController;
  }
  objc_storeStrong((id *)&v342->_mediaSystemController, mediaSystemController);

  rooms = v342->_rooms;
  id v39 = (void *)MEMORY[0x263EFFA08];
  v383[0] = objc_opt_class();
  v383[1] = objc_opt_class();
  id v40 = [MEMORY[0x263EFF8C0] arrayWithObjects:v383 count:2];
  uint64_t v41 = [v39 setWithArray:v40];
  id v42 = [v333 decodeObjectOfClasses:v41 forKey:@"rooms"];
  [(NSMutableArray *)rooms setArray:v42];

  zones = v342->_zones;
  uint64_t v44 = (void *)MEMORY[0x263EFFA08];
  v382[0] = objc_opt_class();
  v382[1] = objc_opt_class();
  id v45 = [MEMORY[0x263EFF8C0] arrayWithObjects:v382 count:2];
  uint64_t v46 = [v44 setWithArray:v45];
  uint64_t v47 = [v333 decodeObjectOfClasses:v46 forKey:@"zones"];
  [(NSMutableArray *)zones setArray:v47];

  if ([v333 containsValueForKey:@"accessories"])
  {
    uint64_t v48 = +[HMDHome supportedAccessoryClasses];
    uint64_t v49 = [v333 decodeObjectOfClasses:v48 forKey:@"accessories"];
    [(HMDHome *)v342 _addAccessories:v49];

    int v35 = v333;
  }
  if ([v35 containsValueForKey:@"accessories.airplay"])
  {
    int v50 = +[HMDHome supportedAccessoryClasses];
    char v51 = [v35 decodeObjectOfClasses:v50 forKey:@"accessories.airplay"];
    [(HMDHome *)v342 _addAccessories:v51];

    int v35 = v333;
  }
  if ([v35 containsValueForKey:@"accessories.homepod"])
  {
    id v52 = +[HMDHome supportedAccessoryClasses];
    id v53 = [v35 decodeObjectOfClasses:v52 forKey:@"accessories.homepod"];
    [(HMDHome *)v342 _addAccessories:v53];

    int v35 = v333;
  }
  if ([v35 containsValueForKey:@"accessories.homepod_6_1"])
  {
    uint64_t v54 = +[HMDHome supportedAccessoryClasses];
    uint64_t v55 = [v35 decodeObjectOfClasses:v54 forKey:@"accessories.homepod_6_1"];
    [(HMDHome *)v342 _addAccessories:v55];

    int v35 = v333;
  }
  if ([v35 containsValueForKey:@"HM.AppleMediaAccessorySensor"])
  {
    __int16 v56 = +[HMDHome supportedAccessoryClasses];
    __int16 v57 = [v35 decodeObjectOfClasses:v56 forKey:@"HM.AppleMediaAccessorySensor"];
    [(HMDHome *)v342 _addAccessories:v57];

    int v35 = v333;
  }
  uint64_t v58 = *MEMORY[0x263F0CCF0];
  if ([v35 containsValueForKey:*MEMORY[0x263F0CCF0]]) {
    -[HMDHome setMultiUserEnabled:](v342, "setMultiUserEnabled:", [v35 decodeBoolForKey:v58]);
  }
  v342->_soundCheckEnabled = [v35 decodeBoolForKey:*MEMORY[0x263F0CE70]];
  uint64_t v59 = [v35 decodeObjectOfClass:objc_opt_class() forKey:*MEMORY[0x263F0C7B0]];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v60 = v59;
  }
  else {
    uint64_t v60 = 0;
  }
  id v61 = v60;

  v342->_audioAnalysisClassifierOptions = [v61 unsignedIntegerValue];
  v342->_didOnboardAudioAnalysis = [v333 decodeBoolForKey:*MEMORY[0x263F0C7D0]];
  uint64_t v62 = [v333 decodeObjectOfClass:objc_opt_class() forKey:*MEMORY[0x263F0CE60]];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v63 = v62;
  }
  else {
    id v63 = 0;
  }
  id v64 = v63;

  v342->_siriPhraseOptions = [v64 unsignedIntegerValue];
  v342->_locationServicesEnabled = [v333 decodeBoolForKey:*MEMORY[0x263F0C950]];
  v342->_didOnboardLocationServices = [v333 decodeBoolForKey:*MEMORY[0x263F0C808]];
  uint64_t v65 = *MEMORY[0x263F0C8E8];
  if ([v333 containsValueForKey:*MEMORY[0x263F0C8E8]]) {
    -[HMDHome setHasAnyUserAcknowledgedCameraRecordingOnboarding:](v342, "setHasAnyUserAcknowledgedCameraRecordingOnboarding:", [v333 decodeBoolForKey:v65]);
  }
  uint64_t v66 = *MEMORY[0x263F0C8F0];
  if ([v333 containsValueForKey:*MEMORY[0x263F0C8F0]]) {
    v342->_hasOnboardedForAccessCode = [v333 decodeBoolForKey:v66];
  }
  uint64_t v67 = *MEMORY[0x263F0C8F8];
  if ([v333 containsValueForKey:*MEMORY[0x263F0C8F8]]) {
    v342->_hasOnboardedForWalletKey = [v333 decodeBoolForKey:v67];
  }
  else {
    v342->_shouldEncodeHasOnboardedForWalletKey = 0;
  }
  serviceGroups = v342->_serviceGroups;
  long long v69 = (void *)MEMORY[0x263EFFA08];
  v381[0] = objc_opt_class();
  v381[1] = objc_opt_class();
  long long v70 = [MEMORY[0x263EFF8C0] arrayWithObjects:v381 count:2];
  BOOL v71 = [v69 setWithArray:v70];
  long long v72 = [v333 decodeObjectOfClasses:v71 forKey:*MEMORY[0x263F0EB58]];
  [(NSMutableArray *)serviceGroups setArray:v72];

  uint64_t v73 = (void *)MEMORY[0x263EFFA08];
  v380[0] = objc_opt_class();
  v380[1] = objc_opt_class();
  uint64_t v74 = [MEMORY[0x263EFF8C0] arrayWithObjects:v380 count:2];
  uint64_t v75 = [v73 setWithArray:v74];

  actionSets = v342->_actionSets;
  long long v77 = [v333 decodeObjectOfClasses:v75 forKey:@"actionSets"];
  [(NSMutableArray *)actionSets setArray:v77];

  triggerOwnedActionSets = v342->_triggerOwnedActionSets;
  long long v79 = [v333 decodeObjectOfClasses:v75 forKey:@"HM.triggerOwnedActionSets"];
  [(NSMutableArray *)triggerOwnedActionSets setArray:v79];

  char v80 = [MEMORY[0x263EFF980] array];
  v328 = (void *)v75;
  long long v81 = [v333 decodeObjectOfClasses:v75 forKey:@"builtinActionSets"];
  [v80 setArray:v81];

  v327 = v80;
  if ([v80 count])
  {
    [(NSMutableArray *)v342->_actionSets addObjectsFromArray:v80];
  }
  else if ([(HMDHome *)v342 isOwnerUser])
  {
    long long v82 = (void *)MEMORY[0x230FBD990]();
    __int16 v83 = v342;
    HMFGetOSLogHandle();
    long long v84 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v85 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v86 = [(NSMutableArray *)v342->_actionSets count];
      *(_DWORD *)buf = 138543618;
      id v385 = v85;
      __int16 v386 = 2048;
      uint64_t v387 = v86;
      _os_log_impl(&dword_22F52A000, v84, OS_LOG_TYPE_INFO, "%{public}@init: %ld user-defined actionSets; no builtin actionSets - creating....",
        buf,
        0x16u);
    }
    uint64_t v87 = v342->_actionSets;
    long long v88 = [(HMDHome *)v83 _createBuiltinActionSets];
    [(NSMutableArray *)v87 addObjectsFromArray:v88];
  }
  removedUsers = v342->_removedUsers;
  uint64_t v90 = (void *)MEMORY[0x263EFFA08];
  v379[0] = objc_opt_class();
  v379[1] = objc_opt_class();
  char v91 = [MEMORY[0x263EFF8C0] arrayWithObjects:v379 count:2];
  uint64_t v92 = [v90 setWithArray:v91];
  char v93 = v333;
  int v94 = [v333 decodeObjectOfClasses:v92 forKey:@"HM.removedUsersCodingKey"];
  [(NSMutableArray *)removedUsers setArray:v94];

  v341 = [MEMORY[0x263EFF9C0] set];
  uint64_t v95 = [MEMORY[0x263EFF9C0] set];
  if ([v333 containsValueForKey:@"residentDevices"])
  {
    char v96 = (void *)MEMORY[0x263EFFA08];
    v378[0] = objc_opt_class();
    v378[1] = objc_opt_class();
    id v97 = [MEMORY[0x263EFF8C0] arrayWithObjects:v378 count:2];
    unint64_t v98 = [v96 setWithArray:v97];
    uint64_t v99 = [v333 decodeObjectOfClasses:v98 forKey:@"residentDevices"];
    [v341 addObjectsFromArray:v99];

    char v93 = v333;
  }
  if ([v93 containsValueForKey:@"HM.sharedUsers"])
  {
    uint64_t v100 = (void *)MEMORY[0x263EFFA08];
    v377[0] = objc_opt_class();
    v377[1] = objc_opt_class();
    uint64_t v101 = [MEMORY[0x263EFF8C0] arrayWithObjects:v377 count:2];
    uint64_t v102 = [v100 setWithArray:v101];
    id v103 = [v93 decodeObjectOfClasses:v102 forKey:@"HM.sharedUsers"];
    [v95 addObjectsFromArray:v103];
  }
  uint64_t v104 = (void *)MEMORY[0x263EFFA08];
  v376[0] = objc_opt_class();
  v376[1] = objc_opt_class();
  uint64_t v105 = [MEMORY[0x263EFF8C0] arrayWithObjects:v376 count:2];
  id v106 = [v104 setWithArray:v105];
  long long v107 = [v93 decodeObjectOfClasses:v106 forKey:@"users"];
  [v95 addObjectsFromArray:v107];

  long long v361 = 0u;
  long long v362 = 0u;
  long long v359 = 0u;
  long long v360 = 0u;
  obuint64_t j = v95;
  uint64_t v108 = [obj countByEnumeratingWithState:&v359 objects:v375 count:16];
  if (v108)
  {
    uint64_t v109 = v108;
    uint64_t v339 = *(void *)v360;
    do
    {
      for (uint64_t i = 0; i != v109; ++i)
      {
        if (*(void *)v360 != v339) {
          objc_enumerationMutation(obj);
        }
        uint64_t v111 = *(void **)(*((void *)&v359 + 1) + 8 * i);
        long long v355 = 0u;
        long long v356 = 0u;
        long long v357 = 0u;
        long long v358 = 0u;
        id v112 = v341;
        uint64_t v113 = [v112 countByEnumeratingWithState:&v355 objects:v374 count:16];
        if (v113)
        {
          uint64_t v114 = v113;
          uint64_t v115 = *(void *)v356;
          while (2)
          {
            for (uint64_t j = 0; j != v114; ++j)
            {
              if (*(void *)v356 != v115) {
                objc_enumerationMutation(v112);
              }
              uint64_t v117 = [*(id *)(*((void *)&v355 + 1) + 8 * j) userID];
              uint64_t v118 = [v111 userID];
              char v119 = [v117 isEqualToString:v118];

              if (v119)
              {

                goto LABEL_68;
              }
            }
            uint64_t v114 = [v112 countByEnumeratingWithState:&v355 objects:v374 count:16];
            if (v114) {
              continue;
            }
            break;
          }
        }

        [(NSMutableArray *)v342->_users addObject:v111];
LABEL_68:
        ;
      }
      uint64_t v109 = [obj countByEnumeratingWithState:&v359 objects:v375 count:16];
    }
    while (v109);
  }

  users = v342->_users;
  id v121 = [v341 allObjects];
  [(NSMutableArray *)users addObjectsFromArray:v121];

  uint64_t v122 = (void *)MEMORY[0x230FBD990]();
  uint64_t v123 = v342;
  HMFGetOSLogHandle();
  uint64_t v124 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v124, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    id v125 = (id)objc_claimAutoreleasedReturnValue();
    long long v126 = v342->_users;
    *(_DWORD *)buf = 138543618;
    id v385 = v125;
    __int16 v386 = 2112;
    uint64_t v387 = (uint64_t)v126;
    _os_log_impl(&dword_22F52A000, v124, OS_LOG_TYPE_DEBUG, "%{public}@Received users in the home data: %@", buf, 0x16u);
  }
  int v127 = v333;
  long long v128 = [v333 decodeObjectOfClass:objc_opt_class() forKey:@"roomForEntireHome"];
  uint64_t v129 = HMDDefaultRoomName();
  v329 = (void *)v129;
  if (v128)
  {
    [(HMDRoom *)v128 setName:v129];
  }
  else
  {
    long long v130 = (void *)MEMORY[0x230FBD990]();
    unsigned int v131 = v123;
    HMFGetOSLogHandle();
    uint64_t v132 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v132, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v133 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      id v385 = v133;
      _os_log_impl(&dword_22F52A000, v132, OS_LOG_TYPE_INFO, "%{public}@Missing roomForEntireHome - creating one", buf, 0xCu);
    }
    long long v128 = [[HMDRoom alloc] initWithName:v329 uuid:0 home:v131];
    int v127 = v333;
  }
  v326 = v128;
  objc_storeStrong(v123 + 165, v128);
  isWatch();
  uint64_t v134 = [v127 decodeObjectOfClass:objc_opt_class() forKey:@"homeLocationHandler"];
  if (v134) {
    objc_storeStrong(v123 + 66, v134);
  }

  unsigned int v135 = [v127 decodeObjectOfClass:objc_opt_class() forKey:@"homeConfigVersion"];
  v123[166] = (id)[v135 integerValue];

  if ([v127 containsValueForKey:@"lastSyncedHomeConfigVersion"])
  {
    char v136 = [v127 decodeObjectOfClass:objc_opt_class() forKey:@"lastSyncedHomeConfigVersion"];
    v123[167] = (id)[v136 integerValue];
  }
  isWatch();
  id v137 = objc_alloc_init(HMDNotificationRegistry);
  id v138 = v123[172];
  v123[172] = v137;

  [v123[172] configureWithHome:v123];
  if (isiOSDevice() || isTVOSDevice())
  {
    id v139 = [v127 decodeObjectOfClass:objc_opt_class() forKey:@"HM.allowsRemoteAccess"];
    id v140 = v139;
    if (v139) {
      *((unsigned char *)v123 + 232) = [v139 BOOLValue];
    }
  }
  isWatch();
  id v141 = v123[47];
  long long v142 = (void *)MEMORY[0x263EFFA08];
  v373[0] = objc_opt_class();
  v373[1] = objc_opt_class();
  id v143 = [MEMORY[0x263EFF8C0] arrayWithObjects:v373 count:2];
  long long v144 = [v142 setWithArray:v143];
  uint64_t v145 = [v127 decodeObjectOfClasses:v144 forKey:@"HM.invitations"];
  [v141 setArray:v145];

  long long v353 = 0u;
  long long v354 = 0u;
  long long v351 = 0u;
  long long v352 = 0u;
  uint64_t v146 = v123;
  uint64_t v147 = (void *)[v123[47] copy];
  uint64_t v148 = [v147 countByEnumeratingWithState:&v351 objects:v372 count:16];
  if (v148)
  {
    uint64_t v149 = v148;
    uint64_t v150 = *(void *)v352;
    do
    {
      for (uint64_t k = 0; k != v149; ++k)
      {
        if (*(void *)v352 != v150) {
          objc_enumerationMutation(v147);
        }
        int v152 = *(void **)(*((void *)&v351 + 1) + 8 * k);
        __int16 v153 = [v152 user];
        long long v154 = v153;
        if (v153)
        {
          __int16 v155 = v342->_users;
          id v156 = [v153 userID];
          __int16 v157 = [(NSMutableArray *)v155 hmf_firstObjectWithValue:v156 forKeyPath:@"userID"];

          if (v157 && [v152 isComplete])
          {
            [v146[47] removeObject:v152];
          }
          else if ([v152 isAccepted])
          {
            [(NSMutableArray *)v342->_users addObject:v154];
            [v146[162] addObject:v154];
            [v154 setHome:v146];
          }
        }
      }
      uint64_t v149 = [v147 countByEnumeratingWithState:&v351 objects:v372 count:16];
    }
    while (v149);
  }

  int v158 = objc_msgSend(v333, "hmd_isHH2MigrationInProgress");
  uint64_t v159 = (void *)MEMORY[0x230FBD990]();
  id v160 = v146;
  HMFGetOSLogHandle();
  id v161 = (id)objc_claimAutoreleasedReturnValue();
  BOOL v162 = os_log_type_enabled(v161, OS_LOG_TYPE_INFO);
  if (v158)
  {
    int v6 = v330;
    if (v162)
    {
      HMFGetLogIdentifier();
      id v163 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      id v385 = v163;
      _os_log_impl(&dword_22F52A000, v161, OS_LOG_TYPE_INFO, "%{public}@HH2 Migration is in progress. Not decoding HMDResidentDeviceManagerLegacy as it does not exist in HH2", buf, 0xCu);
    }
  }
  else
  {
    int v6 = v330;
    if (v162)
    {
      HMFGetLogIdentifier();
      id v164 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      id v385 = v164;
      _os_log_impl(&dword_22F52A000, v161, OS_LOG_TYPE_INFO, "%{public}@Allocating a new resident device manager", buf, 0xCu);
    }
    uint64_t v165 = +[HMDResidentDeviceManagerFactory createManagerForHomeUUID:v332];
    id v166 = v160[184];
    v160[184] = (id)v165;
  }
  uint64_t v167 = v333;
  v160[202] = (id)[v333 decodeIntegerForKey:@"HMD.nonIPadResidentDeviceCount"];
  if ([v160 isOwnerUser])
  {
    if (objc_msgSend(v333, "hmd_isHH2MigrationInProgress"))
    {
      __int16 v168 = +[HMDUser currentUserWithPrivilege:3 forHome:v160 forceHH1Key:1];
    }
    else
    {
      id v184 = (void *)MEMORY[0x230FBD990]();
      long long v185 = v160;
      HMFGetOSLogHandle();
      long long v186 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v186, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v187 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        id v385 = v187;
        _os_log_impl(&dword_22F52A000, v186, OS_LOG_TYPE_INFO, "%{public}@Not creating a new owner user in HH2", buf, 0xCu);
      }
      __int16 v168 = 0;
      uint64_t v167 = v333;
    }
    uint64_t v188 = v342;
    uint64_t v189 = [v167 decodeObjectOfClass:objc_opt_class() forKey:@"kHomeOwnerUUID"];
    if (v189)
    {
      long long v190 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v189];
      [v168 setUUID:v190];

      uint64_t v188 = v342;
    }
    v325 = (void *)v189;
    v335 = v160;
    long long v191 = [MEMORY[0x263EFF980] array];
    long long v347 = 0u;
    long long v348 = 0u;
    long long v349 = 0u;
    long long v350 = 0u;
    long long v192 = v188->_users;
    uint64_t v193 = [(NSMutableArray *)v192 countByEnumeratingWithState:&v347 objects:v371 count:16];
    v334 = v191;
    if (v193)
    {
      uint64_t v194 = v193;
      id v336 = 0;
      uint64_t v195 = *(void *)v348;
      do
      {
        for (uint64_t m = 0; m != v194; ++m)
        {
          if (*(void *)v348 != v195) {
            objc_enumerationMutation(v192);
          }
          id v197 = *(void **)(*((void *)&v347 + 1) + 8 * m);
          if ([v197 privilege] == 3 && (objc_msgSend(v197, "isRemoteGateway") & 1) == 0)
          {
            if (v336) {
              goto LABEL_135;
            }
            id v198 = [v197 pairingUsername];
            id v199 = [v168 pairingUsername];
            int v200 = [v198 isEqual:v199];

            long long v191 = v334;
            if (!v200) {
LABEL_135:
            }
              [v191 addObject:v197];
            else {
              id v336 = v197;
            }
          }
        }
        uint64_t v194 = [(NSMutableArray *)v192 countByEnumeratingWithState:&v347 objects:v371 count:16];
      }
      while (v194);
    }
    else
    {
      id v336 = 0;
    }

    char v201 = v342;
    [(NSMutableArray *)v342->_users removeObjectsInArray:v191];
    id v160 = v335;
    uint64_t v202 = v335 + 5;
    if (v336)
    {
      id v203 = v336;
      uint64_t v204 = *v202;
      *uint64_t v202 = v203;
    }
    else
    {
      objc_storeStrong(v335 + 5, v168);
      [(NSMutableArray *)v342->_users addObject:v168];
      [v168 setHome:v335];
      if (!objc_msgSend(v333, "hmd_isHH2MigrationInProgress"))
      {
LABEL_145:
        v324 = v168;
        objc_storeStrong(v335 + 6, *v202);
        uint64_t v205 = [MEMORY[0x263EFF980] array];
        long long v343 = 0u;
        long long v344 = 0u;
        long long v345 = 0u;
        long long v346 = 0u;
        v337 = v201->_users;
        uint64_t v206 = [(NSMutableArray *)v337 countByEnumeratingWithState:&v343 objects:v370 count:16];
        if (!v206) {
          goto LABEL_163;
        }
        uint64_t v207 = v206;
        uint64_t v208 = *(void *)v344;
        while (1)
        {
          for (uint64_t n = 0; n != v207; ++n)
          {
            if (*(void *)v344 != v208) {
              objc_enumerationMutation(v337);
            }
            uint64_t v210 = *(void **)(*((void *)&v343 + 1) + 8 * n);
            uint64_t v211 = objc_msgSend(v210, "pairingUsername", v324);
            unint64_t v212 = [*v202 pairingUsername];
            if ([v211 isEqual:v212])
            {
              if (![v210 privilege])
              {

                goto LABEL_160;
              }
              uint64_t v213 = [v210 privilege];

              if (v213 == 4) {
                goto LABEL_160;
              }
            }
            else
            {
            }
            if ([v210 isValid]) {
              continue;
            }
            int v214 = (void *)MEMORY[0x230FBD990]();
            id v215 = v160;
            HMFGetOSLogHandle();
            long long v216 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v216, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              id v217 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              id v385 = v217;
              __int16 v386 = 2112;
              uint64_t v387 = (uint64_t)v210;
              _os_log_impl(&dword_22F52A000, v216, OS_LOG_TYPE_DEFAULT, "%{public}@Removing invalid user %@", buf, 0x16u);

              id v160 = v335;
            }

LABEL_160:
            [v205 addObject:v210];
          }
          uint64_t v207 = [(NSMutableArray *)v337 countByEnumeratingWithState:&v343 objects:v370 count:16];
          if (!v207)
          {
LABEL_163:

            [(NSMutableArray *)v342->_users removeObjectsInArray:v205];
            uint64_t v167 = v333;
            uint64_t v181 = v324;
            goto LABEL_164;
          }
        }
      }
      uint64_t v204 = [v168 pairingUsername];
      [v335 setOwnerName:v204];
    }

    char v201 = v342;
    goto LABEL_145;
  }
  BOOL v169 = [v160 currentUser];

  if (!v169)
  {
    __int16 v170 = (void *)MEMORY[0x230FBD990]();
    id v171 = v160;
    HMFGetOSLogHandle();
    __int16 v172 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v172, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      id v173 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v333, "hmd_isHH2MigrationInProgress");
      HMFBooleanToString();
      id v174 = (id)objc_claimAutoreleasedReturnValue();
      id v175 = v342->_users;
      *(_DWORD *)buf = 138543874;
      id v385 = v173;
      __int16 v386 = 2112;
      uint64_t v387 = (uint64_t)v174;
      __int16 v388 = 2112;
      v389 = v175;
      _os_log_impl(&dword_22F52A000, v172, OS_LOG_TYPE_DEBUG, "%{public}@No current user found for this home: isHH2MigrationInProgress = %@, users = %@", buf, 0x20u);

      int v6 = v330;
    }

    uint64_t v167 = v333;
    if ((objc_msgSend(v333, "hmd_isHH2MigrationInProgress") & 1) == 0)
    {
      long long v176 = (void *)MEMORY[0x230FBD990]();
      int v177 = v171;
      HMFGetOSLogHandle();
      uint64_t v178 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v179 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        id v385 = v179;
        _os_log_impl(&dword_22F52A000, v178, OS_LOG_TYPE_DEFAULT, "%{public}@Current user not found, creating", buf, 0xCu);
      }
      uint64_t v180 = [v177 currentUserFactory];
      uint64_t v181 = ((void (**)(void, void, id *))v180)[2](v180, 0, v177);

      if (!v181)
      {
        v320 = (void *)MEMORY[0x230FBD990]();
        v321 = v177;
        HMFGetOSLogHandle();
        v322 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v322, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          id v323 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          id v385 = v323;
          _os_log_impl(&dword_22F52A000, v322, OS_LOG_TYPE_ERROR, "%{public}@Current user cannot be found or created, failing to deserialize home", buf, 0xCu);
        }
        int v316 = 0;
        goto LABEL_215;
      }
      uint64_t v167 = v333;
      uint64_t v182 = [v333 decodeObjectOfClass:objc_opt_class() forKey:@"kHomeOwnerUUID"];
      if (v182)
      {
        uint64_t v183 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v182];
        [v181 setUUID:v183];

        uint64_t v167 = v333;
      }
      v325 = (void *)v182;
      objc_storeStrong(v177 + 6, v181);
      [(NSMutableArray *)v342->_users addObject:v181];
      [v181 setHome:v177];
LABEL_164:
    }
  }
  uint64_t v218 = objc_msgSend(MEMORY[0x263F0E8C8], "authWithCoder:", v167, v324);
  id v219 = v160[67];
  v160[67] = (id)v218;

  [v160[6] setPresenceAuthStatus:v160[67]];
  uint64_t v220 = [MEMORY[0x263F0E8D0] computeWithCoder:v167];
  id v221 = v160[68];
  v160[68] = (id)v220;

  uint64_t v222 = (void *)MEMORY[0x230FBD990]();
  id v223 = v160;
  HMFGetOSLogHandle();
  uint64_t v224 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v224, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v225 = (id)objc_claimAutoreleasedReturnValue();
    id v226 = v160[6];
    *(_DWORD *)buf = 138543618;
    id v385 = v225;
    __int16 v386 = 2112;
    uint64_t v387 = (uint64_t)v226;
    _os_log_impl(&dword_22F52A000, v224, OS_LOG_TYPE_INFO, "%{public}@Current user is %@", buf, 0x16u);
  }
  id v227 = [MEMORY[0x263EFF980] array];
  id v228 = v333;
  if ([v333 containsValueForKey:@"triggers"])
  {
    v229 = (void *)MEMORY[0x263EFFA08];
    v369[0] = objc_opt_class();
    v369[1] = objc_opt_class();
    v369[2] = objc_opt_class();
    v369[3] = objc_opt_class();
    v230 = [MEMORY[0x263EFF8C0] arrayWithObjects:v369 count:4];
    v231 = [v229 setWithArray:v230];
    id v232 = [v333 decodeObjectOfClasses:v231 forKey:@"triggers"];
    [v227 addObjectsFromArray:v232];

    id v228 = v333;
  }
  if ([v228 containsValueForKey:@"HM.triggers"])
  {
    uint64_t v233 = (void *)MEMORY[0x263EFFA08];
    v368[0] = objc_opt_class();
    v368[1] = objc_opt_class();
    v368[2] = objc_opt_class();
    v368[3] = objc_opt_class();
    uint64_t v234 = [MEMORY[0x263EFF8C0] arrayWithObjects:v368 count:4];
    uint64_t v235 = [v233 setWithArray:v234];
    uint64_t v236 = [v333 decodeObjectOfClasses:v235 forKey:@"HM.triggers"];
    [v227 addObjectsFromArray:v236];

    id v228 = v333;
  }
  if ([v228 containsValueForKey:@"HM.sharedActivationTriggers"])
  {
    id v237 = (void *)MEMORY[0x263EFFA08];
    v367[0] = objc_opt_class();
    v367[1] = objc_opt_class();
    v367[2] = objc_opt_class();
    v367[3] = objc_opt_class();
    v238 = [MEMORY[0x263EFF8C0] arrayWithObjects:v367 count:4];
    v239 = [v237 setWithArray:v238];
    char v240 = [v228 decodeObjectOfClasses:v239 forKey:@"HM.sharedActivationTriggers"];
    [v227 addObjectsFromArray:v240];
  }
  [v223[46] setArray:v227];
  id v241 = v223[193];
  v242 = (void *)MEMORY[0x263EFFA08];
  v366[0] = objc_opt_class();
  v366[1] = objc_opt_class();
  id v243 = [MEMORY[0x263EFF8C0] arrayWithObjects:v366 count:2];
  id v244 = [v242 setWithArray:v243];
  id v245 = [v228 decodeObjectOfClasses:v244 forKey:@"HM.deviceOwnedTriggers"];
  [v241 setArray:v245];

  uint64_t v246 = [v228 decodeObjectOfClass:objc_opt_class() forKey:@"HM.appDataRepository"];
  id v247 = v223[141];
  v223[141] = (id)v246;

  [v223[141] updateParentUUIDIfNil:v342->_uuid];
  uint64_t v248 = *MEMORY[0x263F0C7E0];
  if ([v228 containsValueForKey:*MEMORY[0x263F0C7E0]]) {
    *((unsigned char *)v223 + 56) = [v228 decodeBoolForKey:v248];
  }
  uint64_t v249 = *MEMORY[0x263F0C7E8];
  if ([v228 containsValueForKey:*MEMORY[0x263F0C7E8]]) {
    *((unsigned char *)v223 + 57) = [v228 decodeBoolForKey:v249];
  }
  uint64_t v250 = *MEMORY[0x263F0CC98];
  if ([v228 containsValueForKey:*MEMORY[0x263F0CC98]]) {
    v223[8] = (id)[v228 decodeIntegerForKey:v250];
  }
  uint64_t v251 = *MEMORY[0x263F0CCB0];
  if ([v228 containsValueForKey:*MEMORY[0x263F0CCB0]]) {
    *((unsigned char *)v223 + 72) = [v228 decodeBoolForKey:v251];
  }
  uint64_t v252 = *MEMORY[0x263F0CCA0];
  if ([v228 containsValueForKey:*MEMORY[0x263F0CCA0]])
  {
    uint64_t v253 = [v228 decodeObjectOfClass:objc_opt_class() forKey:v252];
    id v254 = v223[10];
    v223[10] = (id)v253;
  }
  uint64_t v255 = [v228 decodeObjectOfClass:objc_opt_class() forKey:@"kHomeKitVersionStringKey"];
  id v256 = v223[196];
  v223[196] = (id)v255;

  id v257 = v223[196];
  if (v257)
  {
    long long v258 = [[HMDHomeKitVersion alloc] initWithVersionString:@"6.1"];
    int v259 = [v257 isAtLeastVersion:v258];

    id v228 = v333;
    if (v259) {
      *((unsigned char *)v223 + 211) = 1;
    }
  }
  uint64_t v260 = *MEMORY[0x263F0CCF8];
  if ([v228 containsValueForKey:*MEMORY[0x263F0CCF8]]) {
    uint64_t v261 = [v228 decodeIntegerForKey:v260];
  }
  else {
    uint64_t v261 = 0;
  }
  v223[33] = (id)v261;
  long long v262 = [v228 decodeObjectOfClass:objc_opt_class() forKey:@"HMHM.minimumNetworkRouterSupportHomeKitVersion"];
  if (v262)
  {
    long long v263 = [[HMDHomeKitVersion alloc] initWithVersionString:v262];
    id v264 = v223[41];
    v223[41] = v263;
  }
  long long v265 = [v228 decodeObjectOfClass:objc_opt_class() forKey:@"HMHM.minHomeKitVersionForAccessoryNetworkProtectionChangeCodingKey"];

  if (v265)
  {
    long long v266 = [[HMDHomeKitVersion alloc] initWithVersionString:v265];
    id v267 = v223[42];
    v223[42] = v266;
  }
  int v6 = [v228 decodeObjectOfClass:objc_opt_class() forKey:@"HMHM.activeNetworkRouter"];

  if (v6)
  {
    uint64_t v268 = [objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v6];
    id v269 = v223[36];
    v223[36] = (id)v268;
  }
  if ([v228 containsValueForKey:@"HMDHomePrimaryNetworkRouterManagingDeviceUUIDCodingKey"])
  {
    uint64_t v270 = [v228 decodeObjectOfClass:objc_opt_class() forKey:@"HMDHomePrimaryNetworkRouterManagingDeviceUUIDCodingKey"];
    id v271 = v223[39];
    v223[39] = (id)v270;
  }
  long long v272 = (void *)MEMORY[0x263EFFA08];
  v365[0] = objc_opt_class();
  v365[1] = objc_opt_class();
  long long v273 = [MEMORY[0x263EFF8C0] arrayWithObjects:v365 count:2];
  long long v274 = [v272 setWithArray:v273];
  uint64_t v275 = [v228 decodeObjectOfClasses:v274 forKey:*MEMORY[0x263F0C770]];

  long long v276 = [HMDAccessoryNetworkProtectionGroupRegistry alloc];
  long long v277 = [v223 notificationCenter];
  v340 = (void *)v275;
  uint64_t v278 = [(HMDAccessoryNetworkProtectionGroupRegistry *)v276 initWithHome:v223 notificationCenter:v277 persistedGroups:v275];
  id v279 = v223[35];
  v223[35] = (id)v278;

  long long v280 = [v228 decodeObjectOfClass:objc_opt_class() forKey:@"HMHH.residentReachabilityContext"];
  long long v281 = v280;
  if (v280)
  {
    long long v282 = v280;
  }
  else
  {
    long long v282 = objc_alloc_init(HMDResidentReachabilityContext);
  }
  long long v283 = [[HMDResidentReachabilityNotificationManager alloc] initWithResidentReachabilityContext:v282 workQueue:v223[147]];
  id v284 = v223[200];
  v223[200] = v283;

  if ([v333 containsValueForKey:@"HMHM.threadNetworkID"])
  {
    uint64_t v285 = [v333 decodeObjectOfClass:objc_opt_class() forKey:@"HMHM.threadNetworkID"];
    id v286 = v223[48];
    v223[48] = (id)v285;
  }
  uint64_t v287 = [v333 decodeObjectOfClass:objc_opt_class() forKey:*MEMORY[0x263F0CD40]];
  id v288 = v223[59];
  v223[59] = (id)v287;

  uint64_t v289 = [v333 decodeObjectOfClass:objc_opt_class() forKey:*MEMORY[0x263F0CD58]];
  id v290 = v223[199];
  v223[199] = (id)v289;

  uint64_t v291 = [v333 decodeObjectOfClass:objc_opt_class() forKey:@"HM.nlcck"];
  id v292 = v223[60];
  v223[60] = (id)v291;

  if ([v333 containsValueForKey:@"HMDHomeLabelsByAccessCodeCodingKey"])
  {
    long long v293 = (void *)MEMORY[0x263EFFA08];
    v364[0] = objc_opt_class();
    v364[1] = objc_opt_class();
    long long v294 = [MEMORY[0x263EFF8C0] arrayWithObjects:v364 count:2];
    long long v295 = [v293 setWithArray:v294];
    v296 = [v333 decodeObjectOfClasses:v295 forKey:@"HMDHomeLabelsByAccessCodeCodingKey"];

    uint64_t v297 = [v296 mutableCopy];
    id v298 = v223[85];
    v223[85] = (id)v297;
  }
  if ([v333 containsValueForKey:@"HMDHomeRemovedUserInfoByAccessCodeCodingKey"])
  {
    __int16 v299 = (void *)MEMORY[0x263EFFA08];
    v363[0] = objc_opt_class();
    v363[1] = objc_opt_class();
    v363[2] = objc_opt_class();
    id v300 = [MEMORY[0x263EFF8C0] arrayWithObjects:v363 count:3];
    __int16 v301 = [v299 setWithArray:v300];
    v302 = [v333 decodeObjectOfClasses:v301 forKey:@"HMDHomeRemovedUserInfoByAccessCodeCodingKey"];

    uint64_t v303 = [v302 mutableCopy];
    id v304 = v223[87];
    v223[87] = (id)v303;
  }
  if ([v333 containsValueForKey:@"HMDHomeNFCReaderKeyCodingKey"])
  {
    uint64_t v305 = [v333 decodeObjectOfClass:objc_opt_class() forKey:@"HMDHomeNFCReaderKeyCodingKey"];
    id v306 = v223[51];
    v223[51] = (id)v305;
  }
  else
  {
    *((unsigned char *)v223 + 224) = 0;
  }
  __int16 v307 = [v333 decodeObjectOfClass:objc_opt_class() forKey:@"HMHM.chipStorage"];
  if (v307)
  {
    objc_storeStrong(v223 + 204, v307);
    if (isFeatureMatterLocalFabricConfigEnabled())
    {
      id v308 = v265;
      __int16 v309 = v227;
      v310 = [v307 fabricID];

      if (v310)
      {
        __int16 v311 = [v307 fabricID];
        [v223[206] setFabricID:v311];
      }
      v312 = [v223 homeManager];
      uint64_t v313 = [v312 accessoryBrowser];
      v314 = [v313 chipAccessoryServerBrowser];
      uint64_t v315 = [v314 storage];
      [v223[206] setStorage:v315];

      id v227 = v309;
      long long v265 = v308;
    }
  }
  *((unsigned char *)v223 + 235) = [v333 decodeBoolForKey:*MEMORY[0x263F0CF10]];

  int v316 = 1;
LABEL_215:

  if (!v316)
  {
    v318 = 0;
    id v4 = v333;
    v317 = v342;
    goto LABEL_219;
  }
  id v4 = v333;
  int v7 = v342;
LABEL_217:
  v317 = v7;
  v318 = v7;
LABEL_219:

  return v318;
}

- (HMDHome)initWithCoder:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  int v6 = (HMDHome *)[(HMDHome *)self _initWithCoder:v4];

  return v6;
}

- (void)fixupHomeAfterDecoding
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  char v91 = +[HMDProcessInfo privateClientIdentifierSalt];
  int v94 = [MEMORY[0x263EFF9A0] dictionary];
  long long v88 = self;
  if ([(HMDHome *)self isOwnerUser])
  {
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    id v3 = [(HMDHome *)self accessories];
    uint64_t v4 = [v3 countByEnumeratingWithState:&v107 objects:v123 count:16];
    if (v4)
    {
      uint64_t v6 = v4;
      uint64_t v7 = *(void *)v108;
      uint64_t v8 = HMDAppleMediaProfile;
      *(void *)&long long v5 = 138543874;
      long long v79 = v5;
      __int16 v83 = v3;
      uint64_t v84 = *(void *)v108;
      do
      {
        uint64_t v9 = 0;
        uint64_t v85 = v6;
        do
        {
          if (*(void *)v108 != v7) {
            objc_enumerationMutation(v3);
          }
          id v10 = *(id *)(*((void *)&v107 + 1) + 8 * v9);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v11 = v10;
          }
          else {
            uint64_t v11 = 0;
          }
          id v12 = v11;

          uint64_t v13 = [v12 bridge];
          int v14 = (void *)v13;
          if (v12) {
            BOOL v15 = v13 == 0;
          }
          else {
            BOOL v15 = 1;
          }
          if (!v15)
          {
            id v16 = [v12 uniqueIdentifier];

            if (v16)
            {
              uint64_t v86 = v14;
              uint64_t v87 = v9;
              id v17 = (void *)MEMORY[0x263F08C38];
              int64_t v18 = [v14 uuid];
              BOOL v19 = (void *)MEMORY[0x263F35860];
              id v20 = [v12 uniqueIdentifier];
              id v21 = [v19 instanceIDForUniqueIdentifier:v20];
              BOOL v22 = [v21 stringValue];
              uint64_t v122 = v22;
              uint64_t v23 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v122 count:1];
              BOOL v24 = objc_msgSend(v17, "hm_deriveUUIDFromBaseUUID:withSalts:", v18, v23);

              int v25 = [v12 uuid];
              LOBYTE(v17) = [v24 isEqual:v25];

              if (v17)
              {

                uint64_t v6 = v85;
                int v14 = v86;
                uint64_t v9 = v87;
                uint64_t v7 = v84;
              }
              else
              {
                uint64_t v36 = (void *)MEMORY[0x230FBD990]();
                id v37 = v88;
                BOOL v38 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                {
                  id v39 = HMFGetLogIdentifier();
                  id v40 = [v12 uuid];
                  *(_DWORD *)buf = v79;
                  uint64_t v117 = v39;
                  __int16 v118 = 2112;
                  char v119 = v40;
                  __int16 v120 = 2112;
                  id v121 = v24;
                  _os_log_impl(&dword_22F52A000, v38, OS_LOG_TYPE_DEFAULT, "%{public}@Fixup of accessory uuid from legacy archive %@ -> %@", buf, 0x20u);
                }
                uint64_t v41 = [v12 uuid];
                [v12 setUuid:v24];
                id v42 = [v12 appData];

                if (v42)
                {
                  id v43 = [v12 uuid];
                  uint64_t v44 = [v12 appData];
                  [v44 setParentUUID:v43];
                }
                char v80 = (void *)v41;
                char v93 = objc_msgSend(MEMORY[0x263F08C38], "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v41, v91, 0, v79);
                long long v81 = v24;
                uint64_t v92 = objc_msgSend(MEMORY[0x263F08C38], "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v24, v91, 0);
                long long v103 = 0u;
                long long v104 = 0u;
                long long v105 = 0u;
                long long v106 = 0u;
                id v82 = v12;
                obuint64_t j = [v12 services];
                uint64_t v45 = [obj countByEnumeratingWithState:&v103 objects:v115 count:16];
                if (v45)
                {
                  uint64_t v46 = v45;
                  uint64_t v90 = *(void *)v104;
                  do
                  {
                    for (uint64_t i = 0; i != v46; ++i)
                    {
                      if (*(void *)v104 != v90) {
                        objc_enumerationMutation(obj);
                      }
                      uint64_t v48 = *(void **)(*((void *)&v103 + 1) + 8 * i);
                      [v48 _recalculateUUID];
                      uint64_t v49 = (void *)MEMORY[0x263F08C38];
                      int v50 = [v48 instanceID];
                      char v51 = [v50 stringValue];
                      uint64_t v114 = v51;
                      id v52 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v114 count:1];
                      id v53 = objc_msgSend(v49, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v93, v91, v52);

                      uint64_t v54 = (void *)MEMORY[0x263F08C38];
                      uint64_t v55 = [v48 instanceID];
                      __int16 v56 = [v55 stringValue];
                      uint64_t v113 = v56;
                      __int16 v57 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v113 count:1];
                      uint64_t v58 = objc_msgSend(v54, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v92, v91, v57);

                      uint64_t v59 = [v58 UUIDString];
                      uint64_t v60 = [v53 UUIDString];
                      [v94 setObject:v59 forKey:v60];

                      id v61 = [v48 appData];

                      if (v61)
                      {
                        uint64_t v62 = [v48 uuid];
                        id v63 = [v48 appData];
                        [v63 setParentUUID:v62];
                      }
                    }
                    uint64_t v46 = [obj countByEnumeratingWithState:&v103 objects:v115 count:16];
                  }
                  while (v46);
                }

                id v3 = v83;
                uint64_t v7 = v84;
                uint64_t v8 = HMDAppleMediaProfile;
                uint64_t v6 = v85;
                int v14 = v86;
                uint64_t v9 = v87;
                id v12 = v82;
              }
            }
            else
            {
              BOOL v26 = v14;
              uint64_t v27 = (void *)MEMORY[0x230FBD990]();
              BOOL v28 = v88;
              BOOL v29 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                BOOL v30 = HMFGetLogIdentifier();
                BOOL v31 = [v12 uuid];
                [v31 UUIDString];
                BOOL v32 = v8;
                id v33 = v12;
                v35 = uint64_t v34 = v9;
                *(_DWORD *)buf = 138543618;
                uint64_t v117 = v30;
                __int16 v118 = 2112;
                char v119 = v35;
                _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to check validity of uuid %@ (accessory has nil uniqueIdentifier)", buf, 0x16u);

                uint64_t v9 = v34;
                id v12 = v33;
                uint64_t v8 = v32;

                uint64_t v6 = v85;
                uint64_t v7 = v84;
              }

              int v14 = v26;
              id v3 = v83;
            }
          }

          ++v9;
        }
        while (v9 != v6);
        uint64_t v6 = [v3 countByEnumeratingWithState:&v107 objects:v123 count:16];
      }
      while (v6);
    }

    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    id v64 = [(HMDHome *)v88 rooms];
    uint64_t v65 = [v64 countByEnumeratingWithState:&v99 objects:v112 count:16];
    if (v65)
    {
      uint64_t v66 = v65;
      uint64_t v67 = *(void *)v100;
      do
      {
        for (uint64_t j = 0; j != v66; ++j)
        {
          if (*(void *)v100 != v67) {
            objc_enumerationMutation(v64);
          }
          long long v69 = *(void **)(*((void *)&v99 + 1) + 8 * j);
          long long v70 = objc_msgSend(v69, "appData", v79);

          if (v70)
          {
            BOOL v71 = [v69 appData];
            [(HMDHome *)v88 updateAppData:v71 identifierKey:@"HFSortedIdentifierStrings_roomServices" lookup:v94];
          }
        }
        uint64_t v66 = [v64 countByEnumeratingWithState:&v99 objects:v112 count:16];
      }
      while (v66);
    }

    long long v72 = [(HMDHome *)v88 appData];

    if (v72)
    {
      uint64_t v73 = [(HMDHome *)v88 appData];
      [(HMDHome *)v88 updateAppData:v73 identifierKey:@"HFSortedIdentifierStrings_homeServices" lookup:v94];
    }
    [(HMDHome *)v88 computeBridgedAccessoriesForAllBridges];
  }
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  uint64_t v74 = [(HMDHome *)v88 serviceGroups];
  uint64_t v75 = [v74 countByEnumeratingWithState:&v95 objects:v111 count:16];
  if (v75)
  {
    uint64_t v76 = v75;
    uint64_t v77 = *(void *)v96;
    do
    {
      for (uint64_t k = 0; k != v76; ++k)
      {
        if (*(void *)v96 != v77) {
          objc_enumerationMutation(v74);
        }
        [*(id *)(*((void *)&v95 + 1) + 8 * k) fixupServiceGroup];
      }
      uint64_t v76 = [v74 countByEnumeratingWithState:&v95 objects:v111 count:16];
    }
    while (v76);
  }
}

- (void)updateAppData:(id)a3 identifierKey:(id)a4 lookup:(id)a5
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [v8 dictionary];
  id v12 = objc_msgSend(v11, "hmf_dictionaryForKey:", @"com.apple.homekit-entitledclient.identifer");

  uint64_t v36 = v9;
  uint64_t v13 = [v12 objectForKey:v9];
  int v14 = v13;
  if (v13 && [v13 count])
  {
    id v33 = v12;
    uint64_t v34 = v8;
    BOOL v31 = (void *)[v12 mutableCopy];
    BOOL v15 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v14, "count"));
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    BOOL v32 = v14;
    obuint64_t j = v14;
    uint64_t v38 = [obj countByEnumeratingWithState:&v39 objects:v51 count:16];
    if (v38)
    {
      uint64_t v16 = *(void *)v40;
      uint64_t v35 = *(void *)v40;
      do
      {
        for (uint64_t i = 0; i != v38; ++i)
        {
          if (*(void *)v40 != v16) {
            objc_enumerationMutation(obj);
          }
          int64_t v18 = *(void **)(*((void *)&v39 + 1) + 8 * i);
          BOOL v19 = [v10 objectForKey:v18];
          if (v19)
          {
            id v20 = (void *)MEMORY[0x230FBD990]();
            id v21 = self;
            BOOL v22 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              uint64_t v23 = v15;
              BOOL v24 = self;
              v26 = id v25 = v10;
              *(_DWORD *)buf = 138544130;
              uint64_t v44 = v26;
              __int16 v45 = 2112;
              uint64_t v46 = v36;
              __int16 v47 = 2112;
              uint64_t v48 = v18;
              __int16 v49 = 2112;
              int v50 = v19;
              _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Fixup of service uuid list %@ from legacy archive %@ -> %@", buf, 0x2Au);

              id v10 = v25;
              self = v24;
              BOOL v15 = v23;
              uint64_t v16 = v35;
            }

            uint64_t v27 = v15;
            BOOL v28 = v19;
          }
          else
          {
            uint64_t v27 = v15;
            BOOL v28 = v18;
          }
          [v27 addObject:v28];
        }
        uint64_t v38 = [obj countByEnumeratingWithState:&v39 objects:v51 count:16];
      }
      while (v38);
    }

    BOOL v29 = (void *)[v15 copy];
    [v31 setObject:v29 forKey:v36];

    BOOL v30 = (void *)[v31 copy];
    id v8 = v34;
    [v34 setApplicationData:v30 forIdentifier:@"com.apple.homekit-entitledclient.identifer"];

    int v14 = v32;
    id v12 = v33;
  }
}

- (void)_handleUpdateMediaPassword:(id)a3
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v5 = [v4 messagePayload];
  uint64_t v6 = [v5 objectForKeyedSubscript:*MEMORY[0x263F0CCA8]];

  if (!v6) {
    goto LABEL_5;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x230FBD990]();
    int v14 = self;
    BOOL v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v33 = v16;
      __int16 v34 = 2112;
      uint64_t v35 = v6;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Invalid password: %@", buf, 0x16u);
    }
    id v17 = [v4 responseHandler];

    if (!v17) {
      goto LABEL_18;
    }
    id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:22];
LABEL_16:
    BOOL v30 = [v4 responseHandler];
    ((void (**)(void, HMDHomeMediaSettingsModel *, void))v30)[2](v30, v9, 0);

    goto LABEL_17;
  }
  id v31 = 0;
  char v7 = [MEMORY[0x263F0E390] isValidMediaPassword:v6 error:&v31];
  id v8 = (HMDHomeMediaSettingsModel *)v31;
  id v9 = v8;
  if ((v7 & 1) == 0)
  {
    id v25 = (void *)MEMORY[0x230FBD990]();
    BOOL v26 = self;
    uint64_t v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v28 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      id v33 = v28;
      __int16 v34 = 2112;
      uint64_t v35 = v6;
      __int16 v36 = 2112;
      id v37 = v9;
      _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to validate password, %@, with error: %@", buf, 0x20u);
    }
    BOOL v29 = [v4 responseHandler];

    if (!v29) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

LABEL_5:
  id v10 = [(HMDHome *)self mediaPassword];
  int v11 = HMFEqualObjects();

  if (!v11)
  {
    int64_t v18 = [HMDHomeMediaSettingsModel alloc];
    BOOL v19 = [(HMDHome *)self uuid];
    id v20 = +[HMDHomeMediaSettingsModel modelIDForHomeUUID:v19];
    id v21 = [(HMDHome *)self uuid];
    id v9 = [(HMDBackingStoreModelObject *)v18 initWithObjectChangeType:2 uuid:v20 parentUUID:v21];

    [(HMDHomeMediaSettingsModel *)v9 setMediaPassword:v6];
    BOOL v22 = [(HMDHome *)self backingStore];
    uint64_t v23 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    BOOL v24 = [v22 transaction:@"Update Media Password" options:v23];

    [v24 add:v9 withMessage:v4];
    [v24 run];

    goto LABEL_17;
  }
  id v12 = [v4 responseHandler];

  if (v12)
  {
    id v9 = [v4 responseHandler];
    (*(void (**)(HMDHomeMediaSettingsModel *, void, void))&v9->super.super._bsoDataVersionOverride)(v9, 0, 0);
LABEL_17:
  }
LABEL_18:
}

- (void)setMediaPassword:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v5 = (void *)[v4 copy];
  os_unfair_recursive_lock_lock_with_options();
  if (HMFEqualObjects())
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    objc_storeStrong((id *)&self->_mediaPassword, v5);
    uint64_t v6 = os_unfair_recursive_lock_unlock();
    char v7 = (void *)MEMORY[0x230FBD990](v6);
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      BOOL v15 = v10;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Updated media password to: %@", buf, 0x16u);
    }
    workQueue = v8->_workQueue;
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    void v12[2] = __28__HMDHome_setMediaPassword___block_invoke;
    v12[3] = &unk_264A2F820;
    void v12[4] = v8;
    id v13 = v5;
    dispatch_async(workQueue, v12);
  }
}

void __28__HMDHome_setMediaPassword___block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "accessories", 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(id *)(*((void *)&v10 + 1) + 8 * v6);
        if ([v7 conformsToProtocol:&unk_26E4FEF98]) {
          id v8 = v7;
        }
        else {
          id v8 = 0;
        }
        id v9 = v8;

        if (v9 && [v9 supportsMinimumUserPrivilege]) {
          [v9 handleUpdatedPassword:*(void *)(a1 + 40)];
        }

        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

- (id)mediaPassword
{
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v3 = self->_mediaPassword;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)_handleUpdateMediaPeerToPeerEnabled:(id)a3
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v4 = a3;
  char v23 = 0;
  uint64_t v5 = [v4 BOOLForKey:@"kEnabledKey" keyPresent:&v23];
  if (v23)
  {
    uint64_t v6 = v5;
    if (v5 != [(HMDHome *)self isMediaPeerToPeerEnabled])
    {
      id v7 = [HMDHomeMediaSettingsModel alloc];
      id v8 = [(HMDHome *)self uuid];
      id v9 = +[HMDHomeMediaSettingsModel modelIDForHomeUUID:v8];
      long long v10 = [(HMDHome *)self uuid];
      long long v11 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:2 uuid:v9 parentUUID:v10];

      long long v12 = [NSNumber numberWithBool:v6];
      [(HMDHomeMediaSettingsModel *)v11 setMediaPeerToPeerEnabled:v12];

      long long v13 = [(HMDHome *)self backingStore];
      int v14 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      uint64_t v15 = [v13 transaction:@"Update Media Peer-to-peer Enabled" options:v14];

      [v15 add:v11 withMessage:v4];
      [v15 run];

LABEL_10:
      goto LABEL_11;
    }
    BOOL v22 = [v4 responseHandler];

    if (v22)
    {
      long long v11 = [v4 responseHandler];
      (*(void (**)(HMDHomeMediaSettingsModel *, void, void))&v11->super.super._bsoDataVersionOverride)(v11, 0, 0);
      goto LABEL_10;
    }
  }
  else
  {
    __int16 v16 = (void *)MEMORY[0x230FBD990](v5);
    id v17 = self;
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      BOOL v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v25 = v19;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", buf, 0xCu);
    }
    id v20 = [v4 responseHandler];

    if (v20)
    {
      long long v11 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
      id v21 = [v4 responseHandler];
      ((void (**)(void, HMDHomeMediaSettingsModel *, void))v21)[2](v21, v11, 0);

      goto LABEL_10;
    }
  }
LABEL_11:
}

- (void)setMediaPeerToPeerEnabled:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_mediaPeerToPeerEnabled = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)isMediaPeerToPeerEnabled
{
  LOBYTE(self) = self->_mediaPeerToPeerEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)_handleUpdateMinimumMediaUserPrivilege:(id)a3
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 numberForKey:@"kUserPrivilegeLevelKey"];
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = [v5 integerValue];
    if ([(HMDHome *)self minimumMediaUserPrivilege] != v7)
    {
      __int16 v16 = [HMDHomeMediaSettingsModel alloc];
      id v17 = [(HMDHome *)self uuid];
      uint64_t v18 = +[HMDHomeMediaSettingsModel modelIDForHomeUUID:v17];
      BOOL v19 = [(HMDHome *)self uuid];
      id v20 = [(HMDBackingStoreModelObject *)v16 initWithObjectChangeType:2 uuid:v18 parentUUID:v19];

      id v21 = [NSNumber numberWithInteger:v7];
      [(HMDHomeMediaSettingsModel *)v20 setMinimumMediaUserPrivilege:v21];

      BOOL v22 = [(HMDHome *)self backingStore];
      char v23 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      BOOL v24 = [v22 transaction:@"Update Minimum User Privilege" options:v23];

      [v24 add:v20 withMessage:v4];
      [v24 run];

      goto LABEL_11;
    }
    id v8 = [v4 responseHandler];

    if (v8)
    {
      id v9 = [v4 responseHandler];
      v9[2](v9, 0, 0);
LABEL_9:
    }
  }
  else
  {
    long long v10 = (void *)MEMORY[0x230FBD990]();
    long long v11 = self;
    long long v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      long long v13 = HMFGetLogIdentifier();
      int v25 = 138543362;
      uint64_t v26 = v13;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", (uint8_t *)&v25, 0xCu);
    }
    int v14 = [v4 responseHandler];

    if (v14)
    {
      id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
      uint64_t v15 = [v4 responseHandler];
      v15[2](v15, v9, 0);

      goto LABEL_9;
    }
  }
LABEL_11:
}

- (void)setMinimumMediaUserPrivilege:(int64_t)a3
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  os_unfair_recursive_lock_lock_with_options();
  if (self->_minimumMediaUserPrivilege == a3)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_minimumMediaUserPrivilege = a3;
    uint64_t v5 = os_unfair_recursive_lock_unlock();
    uint64_t v6 = (void *)MEMORY[0x230FBD990](v5);
    uint64_t v7 = self;
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      long long v10 = HMUserPrivilegeToString();
      *(_DWORD *)buf = 138543618;
      int v14 = v9;
      __int16 v15 = 2112;
      __int16 v16 = v10;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Updated minimum user privilege to: %@", buf, 0x16u);
    }
    workQueue = v7->_workQueue;
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    void v12[2] = __40__HMDHome_setMinimumMediaUserPrivilege___block_invoke;
    v12[3] = &unk_264A2C6A0;
    void v12[4] = v7;
    void v12[5] = a3;
    dispatch_async(workQueue, v12);
  }
}

void __40__HMDHome_setMinimumMediaUserPrivilege___block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "accessories", 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(id *)(*((void *)&v10 + 1) + 8 * v6);
        if ([v7 conformsToProtocol:&unk_26E4FEF98]) {
          id v8 = v7;
        }
        else {
          id v8 = 0;
        }
        id v9 = v8;

        if (v9 && [v9 supportsMinimumUserPrivilege]) {
          [v9 handleUpdatedMinimumUserPrivilege:*(void *)(a1 + 40)];
        }

        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

- (int64_t)minimumMediaUserPrivilege
{
  os_unfair_recursive_lock_lock_with_options();
  int64_t minimumMediaUserPrivilege = self->_minimumMediaUserPrivilege;
  os_unfair_recursive_lock_unlock();
  return minimumMediaUserPrivilege;
}

- (void)queryPrimaryResidentReachabilityForAccessories:(id)a3 completion:(id)a4
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = (void (**)(void, void *))a4;
  BOOL v8 = [(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident];
  id v9 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  if (v8)
  {
    id v31 = v7;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v10 = v6;
    uint64_t v11 = [v10 countByEnumeratingWithState:&v38 objects:v47 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v39 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          __int16 v45 = @"kAccessoryIsReachableKey";
          __int16 v16 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v15, "isReachable", v31));
          uint64_t v46 = v16;
          uint64_t v17 = [NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1];

          [v9 addObject:v17];
        }
        uint64_t v12 = [v10 countByEnumeratingWithState:&v38 objects:v47 count:16];
      }
      while (v12);
    }

    id v7 = v31;
    v31[2](v31, v9);
  }
  else
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v18 = v6;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v34 objects:v44 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v35;
      do
      {
        for (uint64_t j = 0; j != v20; ++j)
        {
          if (*(void *)v35 != v21) {
            objc_enumerationMutation(v18);
          }
          char v23 = [*(id *)(*((void *)&v34 + 1) + 8 * j) uuid];
          BOOL v24 = [v23 UUIDString];
          [v9 addObject:v24];
        }
        uint64_t v20 = [v18 countByEnumeratingWithState:&v34 objects:v44 count:16];
      }
      while (v20);
    }

    long long v42 = @"kAccessoriesUUIDKey";
    id v43 = v9;
    int v25 = [NSDictionary dictionaryWithObjects:&v43 forKeys:&v42 count:1];
    uint64_t v26 = (void *)MEMORY[0x263F42568];
    uint64_t v27 = [MEMORY[0x263F08C38] UUID];
    BOOL v28 = [v26 messageWithName:@"HMDHomeQueryResidentReachabilityForAccessoriesMessageKey" identifier:v27 messagePayload:v25];

    v32[0] = MEMORY[0x263EF8330];
    v32[1] = 3221225472;
    v32[2] = __69__HMDHome_queryPrimaryResidentReachabilityForAccessories_completion___block_invoke;
    v32[3] = &unk_264A2B228;
    void v32[4] = self;
    id v33 = v7;
    [v28 setResponseHandler:v32];
    BOOL v29 = [(HMDHome *)self uuid];
    BOOL v30 = [(HMDHome *)self workQueue];
    [(HMDHome *)self redispatchToResidentMessage:v28 target:v29 responseQueue:v30];
  }
}

void __69__HMDHome_queryPrimaryResidentReachabilityForAccessories_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    BOOL v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = *(id *)(a1 + 32);
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      int v15 = 138543618;
      __int16 v16 = v11;
      __int16 v17 = 2112;
      id v18 = v5;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Query reachability response error: %@", (uint8_t *)&v15, 0x16u);
    }
    uint64_t v12 = 0;
LABEL_5:

    goto LABEL_6;
  }
  uint64_t v13 = objc_msgSend(v6, "hmf_arrayForKey:", @"kAccessoriesInfoDictionaryKey");
  uint64_t v12 = v13;
  if (!v13 || ![v13 count])
  {
    BOOL v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = *(id *)(a1 + 32);
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v14 = HMFGetLogIdentifier();
      int v15 = 138543618;
      __int16 v16 = v14;
      __int16 v17 = 2112;
      id v18 = v7;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@No reachability setting in query reachability response: %@", (uint8_t *)&v15, 0x16u);
    }
    goto LABEL_5;
  }
LABEL_6:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

- (void)_handleQueryResidentReachabilityForAccessories:(id)a3
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 messagePayload];
  id v6 = objc_msgSend(v5, "hmf_arrayForKey:", @"kAccessoriesUUIDKey");
  id v7 = v6;
  if (v6)
  {
    BOOL v24 = v5;
    int v25 = v4;
    BOOL v8 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v6, "count"));
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v9 = v7;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v26 objects:v34 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v27 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void *)(*((void *)&v26 + 1) + 8 * i);
          int v15 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v14];
          __int16 v16 = [(HMDHome *)self accessoryWithUUID:v15];

          if (v16)
          {
            v32[0] = @"kAccessoryUUID";
            v32[1] = @"kAccessoryIsReachableKey";
            v33[0] = v14;
            __int16 v17 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v16, "isReachable"));
            v33[1] = v17;
            id v18 = [NSDictionary dictionaryWithObjects:v33 forKeys:v32 count:2];

            [v8 addObject:v18];
          }
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v26 objects:v34 count:16];
      }
      while (v11);
    }

    BOOL v30 = @"kAccessoriesInfoDictionaryKey";
    id v31 = v8;
    uint64_t v19 = [NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
    id v4 = v25;
    [v25 respondWithPayload:v19];

    id v5 = v24;
  }
  else
  {
    uint64_t v20 = (void *)MEMORY[0x230FBD990]();
    uint64_t v21 = self;
    BOOL v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      char v23 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v36 = v23;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Query reachability request is missing accessory UUID in payload", buf, 0xCu);
    }
    BOOL v8 = [MEMORY[0x263F087E8] hmfErrorWithCode:8];
    [v4 respondWithError:v8];
  }
}

- (void)_handleUpdateAutomaticThirdPartyAccessorySoftwareUpdate:(id)a3
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v4 = a3;
  char v23 = 0;
  uint64_t v5 = [v4 BOOLForKey:@"kEnabledKey" keyPresent:&v23];
  if (v23)
  {
    uint64_t v6 = v5;
    if (v5 != [(HMDHome *)self isAutomaticThirdPartyAccessorySoftwareUpdateEnabled])
    {
      id v7 = [HMDHomeSettingsModel alloc];
      BOOL v8 = [(HMDHome *)self uuid];
      id v9 = +[HMDHomeSettingsModel modelIDForHomeUUID:v8];
      uint64_t v10 = [(HMDHome *)self uuid];
      uint64_t v11 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:2 uuid:v9 parentUUID:v10];

      uint64_t v12 = [NSNumber numberWithBool:v6];
      [(HMDHomeSettingsModel *)v11 setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:v12];

      uint64_t v13 = [(HMDHome *)self backingStore];
      uint64_t v14 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      int v15 = [v13 transaction:@"Update Automatic Accessory Firmware Update" options:v14];

      [v15 add:v11 withMessage:v4];
      [v15 run];

LABEL_10:
      goto LABEL_11;
    }
    BOOL v22 = [v4 responseHandler];

    if (v22)
    {
      uint64_t v11 = [v4 responseHandler];
      (*(void (**)(HMDHomeSettingsModel *, void, void))&v11->super.super._bsoDataVersionOverride)(v11, 0, 0);
      goto LABEL_10;
    }
  }
  else
  {
    __int16 v16 = (void *)MEMORY[0x230FBD990](v5);
    __int16 v17 = self;
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      int v25 = v19;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", buf, 0xCu);
    }
    uint64_t v20 = [v4 responseHandler];

    if (v20)
    {
      uint64_t v11 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
      uint64_t v21 = [v4 responseHandler];
      ((void (**)(void, HMDHomeSettingsModel *, void))v21)[2](v21, v11, 0);

      goto LABEL_10;
    }
  }
LABEL_11:
}

- (void)setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v22 = *MEMORY[0x263EF8340];
  os_unfair_recursive_lock_lock_with_options();
  if (self->_automaticThirdPartyAccessorySoftwareUpdateEnabled == v3)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_automaticThirdPartyAccessorySoftwareUpdateEnabled = v3;
    uint64_t v5 = os_unfair_recursive_lock_unlock();
    uint64_t v6 = (void *)MEMORY[0x230FBD990](v5);
    id v7 = self;
    BOOL v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = HMFGetLogIdentifier();
      uint64_t v10 = HMFEnabledStatusToString();
      *(_DWORD *)buf = 138543618;
      uint64_t v19 = v9;
      __int16 v20 = 2112;
      uint64_t v21 = v10;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Setting Automatic third-party accessory software updates to: %@", buf, 0x16u);
    }
    uint64_t v11 = [(HMDHome *)v7 notificationCenter];
    uint64_t v12 = objc_msgSend(NSNumber, "numberWithBool:", v3, @"kEnabledKey");
    __int16 v17 = v12;
    uint64_t v13 = [NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    [v11 postNotificationName:@"HMDHomeAutomaticThirdPartyUpdateEnabledChangedNotification" object:v7 userInfo:v13];

    uint64_t v14 = [(HMDHome *)v7 logEventSubmitter];
    int v15 = +[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent eventWithHome:v7];
    [v14 submitLogEvent:v15];

    [(HMDHome *)v7 _reevaluateAccessoryInfoWithBadgeRefresh:1];
  }
}

- (BOOL)isAutomaticThirdPartyAccessorySoftwareUpdateEnabled
{
  LOBYTE(self) = self->_automaticThirdPartyAccessorySoftwareUpdateEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)_handleUpdateAutomaticSoftwareUpdate:(id)a3
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  uint64_t v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    BOOL v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v40 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling update automatic software update message", buf, 0xCu);
  }
  char v38 = 0;
  uint64_t v9 = [v4 BOOLForKey:@"kEnabledKey" keyPresent:&v38];
  if (v38)
  {
    uint64_t v10 = v9;
    int v11 = [(HMDHome *)v6 isAutomaticSoftwareUpdateEnabled];
    uint64_t v12 = (void *)MEMORY[0x230FBD990]();
    uint64_t v13 = v6;
    uint64_t v14 = HMFGetOSLogHandle();
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
    if (v10 != v11)
    {
      if (v15)
      {
        uint64_t v16 = HMFGetLogIdentifier();
        __int16 v17 = HMFBooleanToString();
        *(_DWORD *)buf = 138543618;
        long long v40 = v16;
        __int16 v41 = 2112;
        long long v42 = v17;
        _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Updating automatic software update to: %@", buf, 0x16u);
      }
      id v18 = +[HMDSoftwareUpdateAutomaticUpdateToggledEvent eventWithAutomaticUpdateEnabled:v10];
      uint64_t v19 = [(HMDHome *)v13 logEventSubmitter];
      [v19 submitLogEvent:v18];

      __int16 v20 = [HMDHomeSettingsModel alloc];
      uint64_t v21 = [(HMDHome *)v13 uuid];
      uint64_t v22 = +[HMDHomeSettingsModel modelIDForHomeUUID:v21];
      char v23 = [(HMDHome *)v13 uuid];
      BOOL v24 = [(HMDBackingStoreModelObject *)v20 initWithObjectChangeType:2 uuid:v22 parentUUID:v23];

      int v25 = [NSNumber numberWithBool:v10];
      [(HMDHomeSettingsModel *)v24 setAutomaticSoftwareUpdateEnabled:v25];

      uint64_t v26 = [(HMDHome *)v13 backingStore];
      long long v27 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      long long v28 = [v26 transaction:@"Update Automatic Software Update" options:v27];

      [v28 add:v24 withMessage:v4];
      [v28 run];

      goto LABEL_16;
    }
    if (v15)
    {
      long long v35 = HMFGetLogIdentifier();
      long long v36 = HMFBooleanToString();
      *(_DWORD *)buf = 138543618;
      long long v40 = v35;
      __int16 v41 = 2112;
      long long v42 = v36;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Not changing the setting because it is already set to: %@", buf, 0x16u);
    }
    uint64_t v37 = [v4 responseHandler];

    if (v37)
    {
      id v18 = [v4 responseHandler];
      v18[2](v18, 0, 0);
      goto LABEL_16;
    }
  }
  else
  {
    long long v29 = (void *)MEMORY[0x230FBD990](v9);
    BOOL v30 = v6;
    id v31 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      BOOL v32 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v40 = v32;
      _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", buf, 0xCu);
    }
    id v33 = [v4 responseHandler];

    if (v33)
    {
      id v18 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
      long long v34 = [v4 responseHandler];
      v34[2](v34, v18, 0);

LABEL_16:
    }
  }
}

- (void)setAutomaticSoftwareUpdateEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v16 = *MEMORY[0x263EF8340];
  os_unfair_recursive_lock_lock_with_options();
  if (self->_automaticSoftwareUpdateEnabled == v3)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_automaticSoftwareUpdateEnabled = v3;
    uint64_t v5 = os_unfair_recursive_lock_unlock();
    uint64_t v6 = (void *)MEMORY[0x230FBD990](v5);
    id v7 = self;
    BOOL v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      uint64_t v10 = (void *)v9;
      int v11 = @"disabled";
      if (v3) {
        int v11 = @"enabled";
      }
      int v12 = 138543618;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      BOOL v15 = v11;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Automatic software updates %@", (uint8_t *)&v12, 0x16u);
    }
    [(HMDHome *)v7 _reevaluateAccessoryInfoWithBadgeRefresh:1];
  }
}

- (BOOL)isAutomaticSoftwareUpdateEnabled
{
  LOBYTE(self) = self->_automaticSoftwareUpdateEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)_handleHomeLocationUpdateFromSharedAdmin:(id)a3
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 dataForKey:@"kHomeLocationDataKey"];
  if (v5)
  {
    id v24 = 0;
    uint64_t v6 = [MEMORY[0x263F08928] unarchivedObjectOfClass:objc_opt_class() fromData:v5 error:&v24];
    id v7 = v24;
    if (!v6)
    {
      id v18 = (void *)MEMORY[0x230FBD990]();
      uint64_t v19 = self;
      __int16 v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v26 = v21;
        __int16 v27 = 2112;
        id v28 = v7;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive location from data: %@", buf, 0x16u);
      }
      goto LABEL_13;
    }
    BOOL v8 = [v4 numberForKey:@"HMD.LOC.SRC"];
    unint64_t v9 = (int)[v8 intValue];

    int v10 = isInternalBuild();
    int v11 = (void *)MEMORY[0x230FBD990]();
    int v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
    if (v10)
    {
      if (v14)
      {
        BOOL v15 = HMFGetLogIdentifier();
        uint64_t v16 = HMDHomeLocationSourceToString(v9);
        *(_DWORD *)buf = 138543874;
        uint64_t v26 = v15;
        __int16 v27 = 2112;
        id v28 = v6;
        __int16 v29 = 2112;
        BOOL v30 = v16;
        __int16 v17 = "%{public}@Received new home location from shared admin: %@, source : %@";
LABEL_11:
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, v17, buf, 0x20u);
      }
    }
    else if (v14)
    {
      BOOL v15 = HMFGetLogIdentifier();
      uint64_t v16 = HMDHomeLocationSourceToString(v9);
      *(_DWORD *)buf = 138543875;
      uint64_t v26 = v15;
      __int16 v27 = 2117;
      id v28 = v6;
      __int16 v29 = 2112;
      BOOL v30 = v16;
      __int16 v17 = "%{public}@Received new home location from shared admin: %{sensitive}@, source : %@";
      goto LABEL_11;
    }

    uint64_t v22 = [(HMDHome *)v12 homeLocationHandler];
    char v23 = [MEMORY[0x263EFF910] date];
    [v22 runTransactionWithLocation:v6 updatedTime:v23 source:v9];

LABEL_13:
  }
}

- (void)_updateHomeLocation
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  BOOL v3 = [(HMDHome *)self homeLocationHandler];
  if (![v3 regionStateAtHome])
  {

    goto LABEL_8;
  }
  id v4 = [(HMDHome *)self homeLocationHandler];
  uint64_t v5 = [v4 regionStateNearbyHome];

  if (!v5)
  {
LABEL_8:
    __int16 v20 = (void *)MEMORY[0x230FBD990]();
    uint64_t v21 = self;
    uint64_t v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      char v23 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      BOOL v30 = v23;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@No reachable accessories found and not all regions are determined. Setting Home location to unknown & home level to Not at Home.", buf, 0xCu);
    }
    uint64_t v19 = 0;
    uint64_t v18 = 1;
    goto LABEL_11;
  }
  uint64_t v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  BOOL v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    unint64_t v9 = HMFGetLogIdentifier();
    int v10 = [(HMDHome *)v7 homeLocationHandler];
    [v10 regionStateAtHome];
    int v11 = HMDRegionStateString();
    int v12 = [(HMDHome *)v7 homeLocationHandler];
    [v12 regionStateNearbyHome];
    uint64_t v13 = HMDRegionStateString();
    uint64_t v14 = [(HMDHome *)v7 reachableAccessoriesCount];
    HMFBooleanToString();
    v15 = id v28 = v6;
    *(_DWORD *)buf = 138544386;
    BOOL v30 = v9;
    __int16 v31 = 2112;
    BOOL v32 = v11;
    __int16 v33 = 2112;
    long long v34 = v13;
    __int16 v35 = 2048;
    uint64_t v36 = v14;
    __int16 v37 = 2112;
    char v38 = v15;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@RegionStateAtHome : %@, RegionStateNearbyHome : %@, reachableAccessoriesCount : %lu/%@", buf, 0x34u);

    uint64_t v6 = v28;
  }

  uint64_t v16 = [(HMDHome *)v7 homeLocationHandler];
  uint64_t v17 = [v16 regionStateAtHome];

  if (v17 == 1)
  {
    uint64_t v18 = 2;
    uint64_t v19 = 1;
  }
  else
  {
    id v24 = [(HMDHome *)v7 homeLocationHandler];
    uint64_t v25 = [v24 regionStateNearbyHome];

    if (v25 == 1)
    {
      uint64_t v18 = 1;
      uint64_t v19 = 3;
    }
    else
    {
      uint64_t v26 = [(HMDHome *)v7 homeLocationHandler];
      uint64_t v27 = [v26 regionStateNearbyHome];

      uint64_t v18 = 1;
      if (v27 != 2) {
        goto LABEL_12;
      }
      uint64_t v19 = 2;
    }
  }
LABEL_11:
  [(HMDHome *)self setHomeLocation:v19];
LABEL_12:
  [(HMDHome *)self setAtHomeLevel:v18];
}

- (void)updateHomeLocation
{
  BOOL v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __29__HMDHome_updateHomeLocation__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __29__HMDHome_updateHomeLocation__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateHomeLocation];
}

- (void)matterAccessoryBecameReachable
{
  BOOL v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __41__HMDHome_matterAccessoryBecameReachable__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

void __41__HMDHome_matterAccessoryBecameReachable__block_invoke(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) homeLocationHandler];
  [v1 matterAccessoryBecameReachable];
}

- (void)updateHomeLocationForPairing
{
  BOOL v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __39__HMDHome_updateHomeLocationForPairing__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

void __39__HMDHome_updateHomeLocationForPairing__block_invoke(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) homeLocationHandler];
  [v1 updateHomeLocationForPairing];
}

- (void)setHomeLocation:(int64_t)a3
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  os_unfair_recursive_lock_lock_with_options();
  BOOL v5 = 0;
  homeLocatiouint64_t n = self->_homeLocation;
  if (homeLocation != a3)
  {
    self->_homeLocatiouint64_t n = a3;
    BOOL v5 = !self->_overrideHomeLocation;
  }
  uint64_t v7 = os_unfair_recursive_lock_unlock();
  BOOL v8 = (void *)MEMORY[0x230FBD990](v7);
  unint64_t v9 = self;
  int v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v11 = HMFGetLogIdentifier();
    if (v5) {
      int v12 = @"Updated";
    }
    else {
      int v12 = @"Did not update";
    }
    uint64_t v13 = HMStringFromHomeLocation();
    uint64_t v14 = HMStringFromHomeLocation();
    int v15 = 138544130;
    uint64_t v16 = v11;
    __int16 v17 = 2112;
    uint64_t v18 = v12;
    __int16 v19 = 2112;
    __int16 v20 = v13;
    __int16 v21 = 2112;
    uint64_t v22 = v14;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@%@ home location from %@ to %@", (uint8_t *)&v15, 0x2Au);
  }
  if (v5) {
    [(HMDHome *)v9 _handleHomeLocationChange:a3 previousLocation:homeLocation];
  }
}

- (void)_handleHomeLocationChange:(int64_t)a3 previousLocation:(int64_t)a4
{
  v36[1] = *MEMORY[0x263EF8340];
  uint64_t v7 = (void *)MEMORY[0x230FBD990](self, a2);
  BOOL v8 = self;
  unint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v10 = HMFGetLogIdentifier();
    int v11 = [(HMDHome *)v8 name];
    int v12 = [(HMDHome *)v8 shortDescription];
    uint64_t v13 = HMStringFromHomeLocation();
    uint64_t v14 = HMStringFromHomeLocation();
    *(_DWORD *)uint64_t v27 = 138544386;
    *(void *)&v27[4] = v10;
    __int16 v28 = 2112;
    __int16 v29 = v11;
    __int16 v30 = 2112;
    __int16 v31 = v12;
    __int16 v32 = 2112;
    __int16 v33 = v13;
    __int16 v34 = 2112;
    __int16 v35 = v14;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Location status for home %@/%@ changing from %@ to %@", v27, 0x34u);
  }
  int v15 = [(HMDHome *)v8 notificationCenter];
  [v15 postNotificationName:@"HMDHomeLocationChangedNotification" object:v8];

  uint64_t v16 = [(HMDHome *)v8 homeManager];
  __int16 v17 = [(HMDHome *)v8 uuid];
  [v16 updateGenerationCounterWithReason:@"HomeLocationChanged" sourceUUID:v17 shouldNotifyClients:0];

  uint64_t v18 = (void *)MEMORY[0x263F42568];
  uint64_t v19 = *MEMORY[0x263F0C958];
  __int16 v20 = v8;
  __int16 v21 = [(HMDHome *)v20 uuid];
  v36[0] = *MEMORY[0x263F0C968];
  uint64_t v22 = [NSNumber numberWithInteger:a3];
  *(void *)uint64_t v27 = v22;
  uint64_t v23 = [NSDictionary dictionaryWithObjects:v27 forKeys:v36 count:1];
  id v24 = [v18 homeLocationAuthorizedAndEntitledMessageWithName:v19 target:v21 messagePayload:v23];

  uint64_t v25 = [(HMDHome *)v20 msgDispatcher];

  [v25 sendMessage:v24 completionHandler:0];
  if (a3 == 1)
  {
    uint64_t v26 = [(HMDHome *)v20 presenceFeeder];
    [v26 notifyDidArriveHome];
LABEL_10:

    return;
  }
  if (a3 == 3 && a4 != 2 || a3 == 2 && a4 != 3)
  {
    uint64_t v26 = [(HMDHome *)v20 presenceFeeder];
    [v26 notifyDidLeaveHome];
    goto LABEL_10;
  }
}

- (BOOL)hasReachableAccessories
{
  return [(HMDHome *)self reachableAccessoriesCount] > 0;
}

- (int64_t)homeLocation
{
  os_unfair_recursive_lock_lock_with_options();
  if (self->_overrideHomeLocation) {
    BOOL v3 = &OBJC_IVAR___HMDHome__overriddenHomeLocation;
  }
  else {
    BOOL v3 = &OBJC_IVAR___HMDHome__homeLocation;
  }
  int64_t v4 = *(int64_t *)((char *)&self->super.super.isa + *v3);
  os_unfair_recursive_lock_unlock();
  return v4;
}

- (void)setAtHomeLevel:(int64_t)a3
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  os_unfair_recursive_lock_lock_with_options();
  unint64_t atHomeLevel = self->_atHomeLevel;
  if (atHomeLevel != a3) {
    self->_unint64_t atHomeLevel = a3;
  }
  uint64_t v6 = os_unfair_recursive_lock_unlock();
  uint64_t v7 = (void *)MEMORY[0x230FBD990](v6);
  BOOL v8 = self;
  unint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    int v11 = (void *)v10;
    int v12 = @"Updated";
    if (atHomeLevel == a3) {
      int v12 = @"Did not update";
    }
    if (atHomeLevel > 3) {
      uint64_t v13 = @"HMDAtHomeLevelNotAtHome";
    }
    else {
      uint64_t v13 = off_264A172C0[atHomeLevel];
    }
    if ((unint64_t)a3 > 3) {
      uint64_t v14 = @"HMDAtHomeLevelNotAtHome";
    }
    else {
      uint64_t v14 = off_264A172C0[a3];
    }
    int v18 = 138544130;
    uint64_t v19 = v10;
    __int16 v20 = 2112;
    __int16 v21 = v12;
    __int16 v22 = 2112;
    uint64_t v23 = v13;
    __int16 v24 = 2112;
    uint64_t v25 = v14;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@%@ atHomeLevel from %@ to %@", (uint8_t *)&v18, 0x2Au);
  }
  if (atHomeLevel != a3)
  {
    int v15 = [(HMDHome *)v8 residentDeviceManager];
    [v15 atHomeLevelChanged:a3];

    uint64_t v16 = [(HMDHome *)v8 homeManager];
    __int16 v17 = [(HMDHome *)v8 uuid];
    [v16 atHomeLevelChanged:a3 formerLevel:atHomeLevel home:v17];
  }
}

- (int64_t)atHomeLevel
{
  os_unfair_recursive_lock_lock_with_options();
  int64_t atHomeLevel = self->_atHomeLevel;
  os_unfair_recursive_lock_unlock();
  return atHomeLevel;
}

- (BOOL)enabledResidentsSupportsHomeHub
{
  uint64_t v2 = [(HMDHome *)self residentDeviceManager];
  BOOL v3 = [v2 availableResidentDevices];
  char v4 = objc_msgSend(v3, "na_any:", &__block_literal_global_1791);

  return v4;
}

uint64_t __42__HMDHome_enabledResidentsSupportsHomeHub__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 capabilities];
  uint64_t v3 = [v2 supportsHomeHub];

  return v3;
}

- (BOOL)currentDeviceSupportsSidekickSettings
{
  uint64_t v2 = [(HMDHome *)self homeManager];
  uint64_t v3 = [v2 capabilitiesController];
  char v4 = [v3 currentResidentCapabilities];
  char v5 = [v4 supportsSiriEndpointSetup];

  return v5;
}

- (BOOL)supportsSiriEndpointOnBoarding
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v3 = [(HMDHome *)self primaryResident];
  char v4 = [v3 capabilities];
  int v5 = [v4 supportsSiriEndpointSetup];

  if (v5)
  {
    uint64_t v6 = [MEMORY[0x263EFF980] array];
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v7 = [(HMDHome *)self appleMediaAccessories];
    uint64_t v8 = [v7 countByEnumeratingWithState:&v27 objects:v32 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v28 != v10) {
            objc_enumerationMutation(v7);
          }
          int v12 = [*(id *)(*((void *)&v27 + 1) + 8 * i) device];
          if (v12) {
            [v6 addObject:v12];
          }
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v27 objects:v32 count:16];
      }
      while (v9);
    }

    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v13 = [(HMDHome *)self residentDeviceManager];
    uint64_t v14 = [v13 residentDevices];

    uint64_t v15 = [v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v24;
      do
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          if (*(void *)v24 != v16) {
            objc_enumerationMutation(v14);
          }
          int v18 = *(void **)(*((void *)&v23 + 1) + 8 * j);
          uint64_t v19 = [v18 device];
          __int16 v20 = [v18 capabilities];
          if ([v20 supportsHomeHub])
          {
            char v21 = [v6 containsObject:v19];

            if (v21)
            {

              LOBYTE(v15) = 1;
              goto LABEL_24;
            }
          }
          else
          {
          }
        }
        uint64_t v15 = [v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
      }
      while (v15);
    }
LABEL_24:
  }
  else
  {
    LOBYTE(v15) = 0;
  }
  return v15;
}

- (void)handleSiriEndPointAddedNotification:(id)a3
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = [v4 object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = v6;

  if (!v7)
  {
    uint64_t v9 = (void *)MEMORY[0x230FBD990]();
    uint64_t v10 = self;
    int v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = HMFGetLogIdentifier();
      int v20 = 138543618;
      char v21 = v12;
      __int16 v22 = 2112;
      id v23 = v4;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@Unable to synchronize settings after receiving endpoint added notification with no HAP accessory. %@", (uint8_t *)&v20, 0x16u);
      goto LABEL_10;
    }
LABEL_11:

    goto LABEL_12;
  }
  uint64_t v8 = [v7 home];

  if (v8 != self)
  {
    uint64_t v9 = (void *)MEMORY[0x230FBD990]();
    uint64_t v10 = self;
    int v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = HMFGetLogIdentifier();
      uint64_t v13 = [v7 home];
      int v20 = 138543874;
      char v21 = v12;
      __int16 v22 = 2112;
      id v23 = v7;
      __int16 v24 = 2112;
      long long v25 = v13;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@New accessory is added for another home for HAP accessory: %@ home:%@", (uint8_t *)&v20, 0x20u);

LABEL_10:
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  uint64_t v14 = [v7 siriEndpointProfile];

  if (v14)
  {
    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    uint64_t v16 = self;
    __int16 v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = HMFGetLogIdentifier();
      int v20 = 138543618;
      char v21 = v18;
      __int16 v22 = 2112;
      id v23 = v7;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@A siri endpoint accessory is added. Confirm resident device: %@", (uint8_t *)&v20, 0x16u);
    }
    uint64_t v19 = [(HMDHome *)v16 residentDeviceManager];
    [v19 confirmWithCompletionHandler:0];
  }
LABEL_12:
}

- (void)_handleEnableNotifications:(id)a3
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  char v57 = 0;
  int v6 = [v4 BOOLForKey:@"kCharacteristicNotificationEnableKey" keyPresent:&v57];
  char v56 = 0;
  uint64_t v7 = *MEMORY[0x263F0C828];
  uint64_t v8 = [v4 BOOLForKey:*MEMORY[0x263F0C828] keyPresent:&v56];
  if (v57 && v56)
  {
    uint64_t v9 = v8;
    uint64_t v10 = [v4 clientIdentifier];
    int v11 = (void *)MEMORY[0x230FBD990]();
    int v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    uint64_t v14 = v13;
    if (!v10)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        __int16 v37 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v61 = v37;
        _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Unable to look up the client identifier from request to enable home notifications", buf, 0xCu);
      }
      uint64_t v10 = [v4 responseHandler];

      if (v10)
      {
        char v38 = [v4 responseHandler];
        uint64_t v39 = [MEMORY[0x263F087E8] hmErrorWithCode:52];
        ((void (**)(void, void *, void))v38)[2](v38, v39, 0);

        uint64_t v10 = 0;
      }
      goto LABEL_36;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      uint64_t v16 = HMFBooleanToString();
      *(_DWORD *)buf = 138543874;
      id v61 = v15;
      __int16 v62 = 2112;
      id v63 = v10;
      __int16 v64 = 2112;
      uint64_t v65 = v16;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Handling Enable Notifications from ClientIdentifier: %@, setting: %@", buf, 0x20u);
    }
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = __38__HMDHome__handleEnableNotifications___block_invoke;
    aBlock[3] = &unk_264A28618;
    void aBlock[4] = v12;
    id v55 = v4;
    __int16 v17 = (void (**)(void *, void))_Block_copy(aBlock);
    if (!v6)
    {
      [(HMDHome *)v12 addNotificationDeregistrationForClientIdentifier:v10];
      [(HMDHome *)v12 _startHomeNotificationDeregistrationTimer];
      long long v40 = [MEMORY[0x263F425F8] sharedPowerLogger];
      [v40 reportCharacteristicNotificationRegistrationEvent:0 clientIdentifier:v10];

LABEL_34:
      v17[2](v17, 0);
LABEL_35:

      goto LABEL_36;
    }
    [(HMDHome *)v12 removeNotificationDeregistrationForClientIdentifier:v10];
    int v18 = [(HMDHome *)v12 notificationRegistrations];
    uint64_t v19 = [v18 count];

    int v20 = [(HMDHome *)v12 notificationRegistrationsForAppleMediaAccessories];
    if ([v20 count]) {
      LODWORD(v21) = 0;
    }
    else {
      LODWORD(v21) = v9;
    }

    uint64_t v22 = [(HMDHome *)v12 addNotificationRegistrationForClientIdentifier:v10 includesAppleMediaAccessories:v9];
    if (v21 == 1)
    {
      uint64_t v53 = v19;
      id v23 = (void *)MEMORY[0x230FBD990](v22);
      char v21 = v12;
      __int16 v24 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        long long v25 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v61 = v25;
        _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Modifying direct Apple Media notification registrations with resident due to HomeKit client request", buf, 0xCu);
      }
      uint64_t v26 = [(HMDHome *)v21 mediaStateSubscriber];
      [v26 subscribeForAppleMediaStateWithSubscriptionToken:@"HMDHomeClientMediaStateRegistrationToken"];

      uint64_t v19 = v53;
      LODWORD(v21) = 1;
    }
    if (v19)
    {
      long long v27 = [(HMDHome *)v12 homeManager];
      long long v28 = [v27 chipDataSource];
      [v28 updateNotificationsEnabled:1 forHome:v12 keepAliveOnly:0];

      if (!v21)
      {
LABEL_30:
        logAndPostNotification(@"HMDHomeDidEnableCharacteristicNotifyEventNotification", v12, 0);
        [(HMDHome *)v12 _refreshCharacteristicValuesOnHomeNotificationEnable];
        if (v19) {
          char v50 = (char)v21;
        }
        else {
          char v50 = 1;
        }
        char v51 = [MEMORY[0x263F425F8] sharedPowerLogger];
        [v51 reportCharacteristicNotificationRegistrationEvent:1 clientIdentifier:v10];

        if (v50) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
    else
    {
      char v52 = (char)v21;
      char v21 = (HMDHome *)MEMORY[0x230FBD990]();
      __int16 v41 = v12;
      long long v42 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        uint64_t v43 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v61 = v43;
        _os_log_impl(&dword_22F52A000, v42, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to HomeKit client request", buf, 0xCu);
      }
      [(HMDHome *)v41 _subscribeForHomeNotificationsFromRemoteGateway:1];
      -[HMDHome _subscribeForHomeNotificationsOnDirectTransports:](v41, 1);
      uint64_t v44 = [MEMORY[0x263EFF910] date];
      [(HMDHome *)v41 setNotificationsUpdatedTime:v44];

      __int16 v45 = [(HMDHome *)v41 homeManager];
      uint64_t v46 = [v45 chipDataSource];
      [v46 updateNotificationsEnabled:1 forHome:v41 keepAliveOnly:0];

      uint64_t v19 = 0;
      LOBYTE(v21) = v52;
    }
    v59[0] = MEMORY[0x263EFFA88];
    v58[0] = @"kCharacteristicNotificationEnableKey";
    v58[1] = @"kCharacteristicNotificationEnableTime";
    __int16 v47 = [(HMDHome *)v12 notificationsUpdatedTime];
    v59[1] = v47;
    v58[2] = v7;
    uint64_t v48 = [NSNumber numberWithBool:v9];
    v59[2] = v48;
    __int16 v49 = [NSDictionary dictionaryWithObjects:v59 forKeys:v58 count:3];

    ((void (**)(void *, void *))v17)[2](v17, v49);
    goto LABEL_30;
  }
  long long v29 = (void *)MEMORY[0x230FBD990](v8);
  long long v30 = self;
  __int16 v31 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    __int16 v32 = HMFGetLogIdentifier();
    uint64_t v33 = HMFBooleanToString();
    __int16 v34 = HMFBooleanToString();
    *(_DWORD *)buf = 138543874;
    id v61 = v32;
    __int16 v62 = 2112;
    id v63 = v33;
    __int16 v64 = 2112;
    uint64_t v65 = v34;
    _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key (hasHAPKey: %@, hasAppleMediaKey: %@) to enable home notifications", buf, 0x20u);
  }
  __int16 v35 = [v4 responseHandler];

  if (v35)
  {
    uint64_t v10 = [v4 responseHandler];
    uint64_t v36 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
    ((void (**)(void, void *, void))v10)[2](v10, v36, 0);

LABEL_36:
  }
}

void __38__HMDHome__handleEnableNotifications___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = (objc_class *)MEMORY[0x263F42570];
  id v4 = a2;
  id v5 = [v3 alloc];
  int v6 = [*(id *)(a1 + 32) uuid];
  uint64_t v7 = (void *)[v5 initWithTarget:v6];

  id v8 = objc_alloc(MEMORY[0x263F42590]);
  uint64_t v9 = (void *)[v8 initWithName:*MEMORY[0x263F0E9C0] destination:v7 payload:v4];

  uint64_t v10 = [*(id *)(a1 + 40) identifier];
  [v9 setIdentifier:v10];

  int v11 = [[HMDHomeManagerXPCMessageSendPolicy alloc] initWithEntitlements:4 options:1];
  [v9 setSendPolicy:v11];
  int v12 = [*(id *)(a1 + 32) msgDispatcher];
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  void v13[2] = __38__HMDHome__handleEnableNotifications___block_invoke_2;
  v13[3] = &unk_264A2F3E8;
  id v14 = *(id *)(a1 + 40);
  [v12 sendMessage:v9 completionHandler:v13];
}

uint64_t __38__HMDHome__handleEnableNotifications___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) respondWithPayload:0];
}

- (void)_refreshCharacteristicValuesOnHomeNotificationEnable
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v3 = [MEMORY[0x263EFF980] array];
  id v4 = [MEMORY[0x263EFF9C0] set];
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  uint64_t v46 = self;
  obuint64_t j = [(HMDHome *)self accessories];
  uint64_t v47 = [obj countByEnumeratingWithState:&v63 objects:v75 count:16];
  if (v47)
  {
    uint64_t v45 = *(void *)v64;
    p_vtable = HMDPersonSettingsModel.vtable;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v64 != v45) {
          objc_enumerationMutation(obj);
        }
        uint64_t v49 = v6;
        id v7 = *(id *)(*((void *)&v63 + 1) + 8 * v6);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v8 = v7;
        }
        else {
          id v8 = 0;
        }
        id v9 = v8;

        v62[0] = MEMORY[0x263EF8330];
        v62[1] = 3221225472;
        void v62[2] = __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke;
        v62[3] = &unk_264A2D3B8;
        v62[4] = v46;
        uint64_t v10 = [v9 characteristicsPassingTest:v62];
        long long v58 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        uint64_t v11 = [v10 countByEnumeratingWithState:&v58 objects:v74 count:16];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = *(void *)v59;
          do
          {
            for (uint64_t i = 0; i != v12; ++i)
            {
              if (*(void *)v59 != v13) {
                objc_enumerationMutation(v10);
              }
              uint64_t v15 = [p_vtable + 147 requestWithCharacteristic:*(void *)(*((void *)&v58 + 1) + 8 * i)];
              [v3 addObject:v15];
            }
            uint64_t v12 = [v10 countByEnumeratingWithState:&v58 objects:v74 count:16];
          }
          while (v12);
        }
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        uint64_t v48 = v9;
        uint64_t v16 = [v9 lightProfiles];
        __int16 v17 = [v16 allObjects];

        uint64_t v18 = [v17 countByEnumeratingWithState:&v54 objects:v73 count:16];
        if (v18)
        {
          uint64_t v19 = v18;
          uint64_t v20 = *(void *)v55;
          do
          {
            for (uint64_t j = 0; j != v19; ++j)
            {
              if (*(void *)v55 != v20) {
                objc_enumerationMutation(v17);
              }
              uint64_t v22 = *(void **)(*((void *)&v54 + 1) + 8 * j);
              if (![v22 supportsCHIP] || (_os_feature_enabled_impl() & 1) == 0)
              {
                id v23 = [v22 readCharacteristicRequests];
                if ([v23 count])
                {
                  [v23 allObjects];
                  v25 = __int16 v24 = v4;
                  [v3 addObjectsFromArray:v25];

                  id v4 = v24;
                  [v24 addObject:v22];
                }
              }
            }
            uint64_t v19 = [v17 countByEnumeratingWithState:&v54 objects:v73 count:16];
          }
          while (v19);
        }

        uint64_t v6 = v49 + 1;
        p_vtable = (void **)(HMDPersonSettingsModel + 24);
      }
      while (v49 + 1 != v47);
      uint64_t v47 = [obj countByEnumeratingWithState:&v63 objects:v75 count:16];
    }
    while (v47);
  }

  char v26 = objc_msgSend(v3, "hmf_isEmpty");
  long long v27 = (void *)MEMORY[0x230FBD990]();
  long long v28 = v46;
  long long v29 = HMFGetOSLogHandle();
  BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
  if (v26)
  {
    if (v30)
    {
      __int16 v31 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v70 = v31;
      _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Not refreshing characteristics as read requests are empty", buf, 0xCu);
    }
  }
  else
  {
    if (v30)
    {
      __int16 v32 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v70 = v32;
      __int16 v71 = 2112;
      long long v72 = v3;
      _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Issuing characteristic read requests when Home app enabled notifications: %@", buf, 0x16u);
    }
    uint64_t v33 = (void *)MEMORY[0x263F42568];
    __int16 v34 = [MEMORY[0x263F42570] allMessageDestinations];
    uint64_t v67 = @"kMultiPartResponseKey";
    uint64_t v68 = MEMORY[0x263EFFA88];
    __int16 v35 = [NSDictionary dictionaryWithObjects:&v68 forKeys:&v67 count:1];
    uint64_t v36 = [v33 messageWithName:@"kMultipleCharacteristicReadRequestKey" destination:v34 payload:v35];

    __int16 v37 = (void *)MEMORY[0x230FBD990]();
    char v38 = v28;
    uint64_t v39 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      long long v40 = HMFGetLogIdentifier();
      [v36 identifier];
      long long v42 = v41 = v4;
      *(_DWORD *)buf = 138543618;
      long long v70 = v40;
      __int16 v71 = 2114;
      long long v72 = v42;
      _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_INFO, "%{public}@Issuing read requests with identifier %{public}@, Source: App enabled notifications", buf, 0x16u);

      id v4 = v41;
    }

    uint64_t v43 = (void *)[v3 copy];
    v50[0] = MEMORY[0x263EF8330];
    v50[1] = 3221225472;
    v50[2] = __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1787;
    v50[3] = &unk_264A2AEE8;
    id v51 = v3;
    char v52 = v38;
    id v53 = v4;
    [(HMDHome *)v38 _readCharacteristicValues:v43 requestMessage:v36 source:7 withCompletionHandler:v50];
  }
}

uint64_t __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 type];
  id v5 = [v3 service];

  uint64_t v6 = [v5 type];

  id v7 = [*(id *)(a1 + 32) hapMetadata];
  uint64_t v8 = [v7 shouldRefreshValueForCharacteristicWithType:v4 serviceType:v6];

  return v8;
}

void __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1787(uint64_t a1, void *a2, void *a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  id v35 = a2;
  id v36 = a3;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v5 = a1;
  obuint64_t j = *(id *)(a1 + 32);
  uint64_t v6 = [obj countByEnumeratingWithState:&v46 objects:v57 count:16];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)v47;
    *(void *)&long long v7 = 138543874;
    long long v32 = v7;
    uint64_t v33 = *(void *)v47;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v47 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v46 + 1) + 8 * i);
        uint64_t v12 = objc_msgSend(v11, "characteristic", v32);
        id v45 = 0;
        uint64_t v13 = objc_msgSend(v36, "hmd_valueOfCharacteristic:error:", v12, &v45);
        id v14 = v45;

        uint64_t v15 = (void *)MEMORY[0x230FBD990]();
        id v16 = *(id *)(v5 + 40);
        __int16 v17 = HMFGetOSLogHandle();
        uint64_t v18 = v17;
        if (v13)
        {
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO)) {
            goto LABEL_12;
          }
          uint64_t v19 = HMFGetLogIdentifier();
          *(_DWORD *)buf = v32;
          char v52 = v19;
          __int16 v53 = 2112;
          long long v54 = v11;
          __int16 v55 = 2112;
          id v56 = v13;
          uint64_t v20 = v18;
          os_log_type_t v21 = OS_LOG_TYPE_INFO;
          uint64_t v22 = "%{public}@Characteristic read request succeeded when Home app enabled notifications %@:%@";
        }
        else
        {
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            goto LABEL_12;
          }
          uint64_t v19 = HMFGetLogIdentifier();
          *(_DWORD *)buf = v32;
          char v52 = v19;
          __int16 v53 = 2112;
          long long v54 = v11;
          __int16 v55 = 2112;
          id v56 = v14;
          uint64_t v20 = v18;
          os_log_type_t v21 = OS_LOG_TYPE_ERROR;
          uint64_t v22 = "%{public}@Characteristic read request when Home app enabled notification failed %@:%@";
        }
        _os_log_impl(&dword_22F52A000, v20, v21, v22, buf, 0x20u);

        uint64_t v9 = v33;
LABEL_12:
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v46 objects:v57 count:16];
    }
    while (v8);
  }

  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v23 = *(id *)(v5 + 48);
  uint64_t v24 = [v23 countByEnumeratingWithState:&v41 objects:v50 count:16];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)v42;
    do
    {
      for (uint64_t j = 0; j != v25; ++j)
      {
        if (*(void *)v42 != v26) {
          objc_enumerationMutation(v23);
        }
        long long v28 = *(void **)(*((void *)&v41 + 1) + 8 * j);
        long long v29 = [v28 workQueue];
        block[0] = MEMORY[0x263EF8330];
        block[1] = 3221225472;
        block[2] = __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1788;
        block[3] = &unk_264A2E610;
        void block[4] = v28;
        id v30 = v36;
        uint64_t v31 = *(void *)(v5 + 40);
        id v38 = v30;
        uint64_t v39 = v31;
        id v40 = v35;
        dispatch_async(v29, block);
      }
      uint64_t v25 = [v23 countByEnumeratingWithState:&v41 objects:v50 count:16];
    }
    while (v25);
  }
}

void __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1788(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v17 = 0;
  id v4 = [v2 updateSettingsWithReadCharacteristicResponsePayload:v3 error:&v17];
  id v5 = v17;
  uint64_t v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = HMFGetOSLogHandle();
  uint64_t v9 = v8;
  if (v4)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      uint64_t v19 = v10;
      __int16 v20 = 2112;
      uint64_t v21 = v11;
      __int16 v22 = 2112;
      id v23 = v4;
      uint64_t v12 = "%{public}@Successfully updated light profile settings %@:%@";
      uint64_t v13 = v9;
      os_log_type_t v14 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl(&dword_22F52A000, v13, v14, v12, buf, 0x20u);
    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 138543874;
    uint64_t v19 = v10;
    __int16 v20 = 2112;
    uint64_t v21 = v15;
    __int16 v22 = 2112;
    id v23 = v16;
    uint64_t v12 = "%{public}@Failed to update light profile settings %@:%@";
    uint64_t v13 = v9;
    os_log_type_t v14 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }
}

- (void)_handleSetHasOnboardedForWalletKeyChange:(id)a3 message:(id)a4
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)MEMORY[0x230FBD990]();
  uint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    int v14 = 138543362;
    uint64_t v15 = v11;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Home's has onboarded for wallet key value changed, sending notification", (uint8_t *)&v14, 0xCu);
  }
  uint64_t v12 = [v6 hasOnboardedForWalletKey];
  -[HMDHome setHasOnboardedForWalletKey:](v9, "setHasOnboardedForWalletKey:", [v12 BOOLValue]);

  uint64_t v13 = [(HMDHome *)v9 notificationCenter];
  [v13 postNotificationName:@"HMDHomeHasOnboardedForWalletKeyChangeNotification" object:v9];
}

- (void)_handleSetHasOnboardedForAccessCodeChange:(id)a3 message:(id)a4
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)MEMORY[0x230FBD990]();
  uint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    int v14 = 138543362;
    uint64_t v15 = v11;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Home's has onboarded for access code value changed, sending notification", (uint8_t *)&v14, 0xCu);
  }
  uint64_t v12 = [v6 hasOnboardedForAccessCode];
  -[HMDHome setHasOnboardedForAccessCode:](v9, "setHasOnboardedForAccessCode:", [v12 BOOLValue]);

  uint64_t v13 = [(HMDHome *)v9 notificationCenter];
  [v13 postNotificationName:@"HMDHomeHasOnboardedForAccessCodeChangeNotification" object:v9];
}

- (void)_handleHasAnyUserAcknowledgedCameraRecordingOnboardingChange:(id)a3 message:(id)a4
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)MEMORY[0x230FBD990]();
  uint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    int v13 = 138543362;
    int v14 = v11;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Home's has any user acknowledged camera recording onboarding value changed, sending notification", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v12 = [v6 hasAnyUserAcknowledgedCameraRecordingOnboarding];
  -[HMDHome setHasAnyUserAcknowledgedCameraRecordingOnboarding:](v9, "setHasAnyUserAcknowledgedCameraRecordingOnboarding:", [v12 BOOLValue]);
}

- (void)_handleResolveThreadNetworkRequest:(id)a3
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    __int16 v20 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to resolve thread network credentials", buf, 0xCu);
  }
  uint64_t v9 = +[HMDThreadNetworkMetadataStore defaultStore];
  if (v9)
  {
    uint64_t v10 = [(HMDHome *)v6 threadOperationalDataset];
    objc_initWeak((id *)buf, v6);
    uint64_t v11 = [(HMDHome *)v6 doesHomeContainResident];
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 3221225472;
    void v16[2] = __46__HMDHome__handleResolveThreadNetworkRequest___block_invoke;
    v16[3] = &unk_264A19A18;
    objc_copyWeak(&v18, (id *)buf);
    id v17 = v4;
    [v9 retrieveMetadata:v10 homeHasResident:v11 completion:v16];

    objc_destroyWeak(&v18);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x230FBD990]();
    int v13 = v6;
    int v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v20 = v15;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@No thread network metadata store", buf, 0xCu);
    }
    uint64_t v10 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
    [v4 respondWithError:v10];
  }
}

void __46__HMDHome__handleResolveThreadNetworkRequest___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v8 = WeakRetained;
  if (v5 && WeakRetained)
  {
    id v24 = 0;
    uint64_t v9 = [MEMORY[0x263F08910] archivedDataWithRootObject:v5 requiringSecureCoding:1 error:&v24];
    id v10 = v24;
    if (v9)
    {
      uint64_t v11 = *(void **)(a1 + 32);
      uint64_t v25 = *MEMORY[0x263F0CEA0];
      uint64_t v26 = v9;
      uint64_t v12 = [NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
      [v11 respondWithPayload:v12];
    }
    else
    {
      uint64_t v19 = (void *)MEMORY[0x230FBD990]();
      id v20 = v8;
      uint64_t v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        __int16 v22 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v28 = v22;
        __int16 v29 = 2112;
        id v30 = v10;
        _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode credentials: %@", buf, 0x16u);
      }
      id v23 = *(void **)(a1 + 32);
      uint64_t v12 = [MEMORY[0x263F087E8] hmfErrorWithCode:15];
      [v23 respondWithError:v12];
    }
  }
  else
  {
    int v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = v8;
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      id v17 = [v14 threadNetworkID];
      *(_DWORD *)buf = 138543874;
      long long v28 = v16;
      __int16 v29 = 2112;
      id v30 = v17;
      __int16 v31 = 2112;
      id v32 = v6;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve metadata for thread network '%@': %@", buf, 0x20u);
    }
    id v18 = *(void **)(a1 + 32);
    id v10 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
    [v18 respondWithError:v10];
  }
}

- (void)_handleHomeUpdateDidOnboardLocationServicesRequest:(id)a3
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    __int16 v31 = v9;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update did onboard locations services request", buf, 0xCu);
  }
  id v10 = [v4 messagePayload];
  uint64_t v11 = *MEMORY[0x263F0C808];
  id v29 = 0;
  uint64_t v12 = objc_msgSend(v10, "hmf_BOOLForKey:error:", v11, &v29);
  id v13 = v29;

  if (v13)
  {
    id v14 = (void *)MEMORY[0x230FBD990]();
    uint64_t v15 = v7;
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v17 = HMFGetLogIdentifier();
      id v18 = [v4 messagePayload];
      *(_DWORD *)buf = 138543618;
      __int16 v31 = v17;
      __int16 v32 = 2112;
      uint64_t v33 = v18;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode did onboard location services from update request payload: %@", buf, 0x16u);
    }
    [v4 respondWithError:v13];
  }
  else
  {
    uint64_t v19 = [HMDHomeModel alloc];
    id v20 = [(HMDHome *)v7 uuid];
    uint64_t v21 = [(HMDHome *)v7 homeManager];
    __int16 v22 = [v21 uuid];
    id v23 = [(HMDBackingStoreModelObject *)v19 initWithObjectChangeType:2 uuid:v20 parentUUID:v22];

    id v24 = [NSNumber numberWithBool:v12];
    [(HMDHomeModel *)v23 setDidOnboardLocationServices:v24];

    uint64_t v25 = [(HMDHome *)v7 backingStore];
    uint64_t v26 = [v4 name];
    long long v27 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
    long long v28 = [v25 transaction:v26 options:v27];

    [v28 add:v23 withMessage:v4];
    [v28 run];
  }
}

- (void)_handleDidOnboardLocationServicesChange:(id)a3 message:(id)a4
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 didOnboardLocationServices];
  uint64_t v9 = [v8 BOOLValue];

  id v10 = (void *)MEMORY[0x230FBD990]();
  uint64_t v11 = self;
  uint64_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    id v14 = HMFBooleanToString();
    int v15 = 138543618;
    uint64_t v16 = v13;
    __int16 v17 = 2112;
    id v18 = v14;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Updating did onboard location services: %@", (uint8_t *)&v15, 0x16u);
  }
  [(HMDHome *)v11 setDidOnboardLocationServices:v9];
}

- (void)runLocationServicesEnabledUpdateWithValue:(BOOL)a3 message:(id)a4
{
  BOOL v4 = a3;
  id v6 = a4;
  id v7 = [HMDHomeModel alloc];
  uint64_t v8 = [(HMDHome *)self uuid];
  uint64_t v9 = [(HMDHome *)self homeManager];
  id v10 = [v9 uuid];
  int v15 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:2 uuid:v8 parentUUID:v10];

  uint64_t v11 = [NSNumber numberWithBool:v4];
  [(HMDHomeModel *)v15 setLocationServicesEnabled:v11];

  [(HMDHomeModel *)v15 setDidOnboardLocationServices:MEMORY[0x263EFFA88]];
  uint64_t v12 = [(HMDHome *)self backingStore];
  id v13 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
  id v14 = [v12 transaction:@"LocationServicesEnabledUpdate" options:v13];

  [v14 add:v15 withMessage:v6];
  [v14 run];
}

- (void)runLocationServicesEnabledUpdateWithValue:(BOOL)a3
{
}

- (void)_handleHomeUpdateLocationServicesEnabledRequest:(id)a3
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v21 = v9;
    __int16 v22 = 2112;
    id v23 = v4;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update location services enabled request message: %@", buf, 0x16u);
  }
  id v10 = [v4 messagePayload];
  uint64_t v11 = *MEMORY[0x263F0C950];
  id v19 = 0;
  uint64_t v12 = objc_msgSend(v10, "hmf_BOOLForKey:error:", v11, &v19);
  id v13 = v19;

  if (v13)
  {
    id v14 = (void *)MEMORY[0x230FBD990]();
    int v15 = v7;
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      __int16 v17 = HMFGetLogIdentifier();
      id v18 = [v4 messagePayload];
      *(_DWORD *)buf = 138543618;
      uint64_t v21 = v17;
      __int16 v22 = 2112;
      id v23 = v18;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode location services enabled from update request payload: %@", buf, 0x16u);
    }
    [v4 respondWithError:v13];
  }
  else
  {
    [(HMDHome *)v7 runLocationServicesEnabledUpdateWithValue:v12 message:v4];
  }
}

- (void)_handleLocationServicesEnabledChange:(id)a3 message:(id)a4
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 locationServicesEnabled];
  uint64_t v9 = [v8 BOOLValue];

  id v10 = (void *)MEMORY[0x230FBD990]();
  uint64_t v11 = self;
  uint64_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    id v14 = HMFBooleanToString();
    int v15 = 138543618;
    uint64_t v16 = v13;
    __int16 v17 = 2112;
    id v18 = v14;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Updating location services enabled: %@", (uint8_t *)&v15, 0x16u);
  }
  [(HMDHome *)v11 setLocationServicesEnabled:v9];
}

- (void)_handleSoundCheckUpdateRequest:(id)a3
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v26 = v9;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update soundCheck request", buf, 0xCu);
  }
  id v10 = [HMDHomeModel alloc];
  uint64_t v11 = [(HMDHome *)v7 uuid];
  uint64_t v12 = [(HMDHome *)v7 homeManager];
  id v13 = [v12 uuid];
  id v14 = [(HMDBackingStoreModelObject *)v10 initWithObjectChangeType:2 uuid:v11 parentUUID:v13];

  int v15 = [v4 messagePayload];
  uint64_t v16 = *MEMORY[0x263F0CE70];
  id v24 = 0;
  uint64_t v17 = objc_msgSend(v15, "hmf_BOOLForKey:error:", v16, &v24);
  id v18 = v24;

  if (v18)
  {
    [v4 respondWithError:v18];
  }
  else
  {
    uint64_t v19 = [NSNumber numberWithBool:v17];
    [(HMDHomeModel *)v14 setSoundCheckEnabled:v19];

    id v20 = [(HMDHome *)v7 backingStore];
    uint64_t v21 = [v4 name];
    __int16 v22 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
    id v23 = [v20 transaction:v21 options:v22];

    [v23 add:v14 withMessage:v4];
    [v23 run];
  }
}

- (void)_handleSoundCheckChange:(id)a3 message:(id)a4
{
  id v5 = [a3 soundCheckEnabled];
  -[HMDHome setSoundCheckEnabled:](self, "setSoundCheckEnabled:", [v5 BOOLValue]);
}

- (BOOL)_validateSettingsUpdate:(id)a3 type:(int64_t *)a4 keyPath:(id *)a5 value:(id *)a6 error:(id *)a7
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = [v12 uuidForKey:@"kUserUUIDKey"];
  if (!v13)
  {
    if (a7)
    {
      uint64_t v19 = (void *)MEMORY[0x263F087E8];
      uint64_t v20 = 27;
      goto LABEL_10;
    }
LABEL_11:
    BOOL v21 = 0;
    goto LABEL_33;
  }
  id v14 = [(HMDHome *)self currentUser];
  int v15 = [v14 uuid];
  char v16 = objc_msgSend(v15, "hmf_isEqualToUUID:", v13);

  if ((v16 & 1) == 0)
  {
    if (a7)
    {
      uint64_t v19 = (void *)MEMORY[0x263F087E8];
      uint64_t v20 = 48;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  uint64_t v17 = [v12 numberForKey:*MEMORY[0x263F0D8E8]];
  int64_t v18 = [v17 integerValue];

  if ((unint64_t)(v18 - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    __int16 v22 = [v12 stringForKey:*MEMORY[0x263F0D8E0]];
    if (!v22)
    {
      if (a7)
      {
        [MEMORY[0x263F087E8] hmErrorWithCode:27];
        BOOL v21 = 0;
        *a7 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        BOOL v21 = 0;
      }
      goto LABEL_32;
    }
    id v23 = [v12 dataForKey:*MEMORY[0x263F0B5A8]];
    if (!v23)
    {
      if (a7)
      {
        [MEMORY[0x263F087E8] hmErrorWithCode:27];
        BOOL v21 = 0;
        *a7 = (id)objc_claimAutoreleasedReturnValue();
        id v23 = 0;
      }
      else
      {
        BOOL v21 = 0;
      }
      goto LABEL_31;
    }
    id v35 = v22;
    id v36 = v23;
    id v37 = 0;
    uint64_t v24 = [MEMORY[0x263F08928] unarchivedObjectOfClass:objc_opt_class() fromData:v23 error:&v37];
    id v33 = v37;
    uint64_t v34 = (void *)v24;
    BOOL v21 = v24 != 0;
    if (v24)
    {
      __int16 v22 = v35;
      if (a4) {
        *a4 = v18;
      }
      uint64_t v25 = v33;
      if (a5) {
        *a5 = v35;
      }
      uint64_t v26 = v34;
      if (!a6) {
        goto LABEL_30;
      }
      uint64_t v27 = [v34 numberValue];
      a7 = a6;
    }
    else
    {
      long long v28 = (void *)MEMORY[0x230FBD990]();
      id v29 = self;
      id v30 = HMFGetOSLogHandle();
      uint64_t v25 = v33;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        __int16 v31 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v39 = v31;
        __int16 v40 = 2112;
        id v41 = v33;
        _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive setting value from encoded value: %@", buf, 0x16u);
      }
      uint64_t v26 = 0;
      __int16 v22 = v35;
      if (!a7) {
        goto LABEL_30;
      }
      uint64_t v27 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    }
    *a7 = v27;
LABEL_30:

    id v23 = v36;
LABEL_31:

LABEL_32:
    goto LABEL_33;
  }
  if (!a7) {
    goto LABEL_11;
  }
  uint64_t v19 = (void *)MEMORY[0x263F087E8];
  uint64_t v20 = 3;
LABEL_10:
  [v19 hmErrorWithCode:v20];
  BOOL v21 = 0;
  *a7 = (id)objc_claimAutoreleasedReturnValue();
LABEL_33:

  return v21;
}

- (void)_handleSharedUserSettingsUpdate:(id)a3
{
  id v4 = a3;
  id v21 = 0;
  uint64_t v22 = 0;
  id v19 = 0;
  id v20 = 0;
  BOOL v5 = [(HMDHome *)self _validateSettingsUpdate:v4 type:&v22 keyPath:&v21 value:&v20 error:&v19];
  id v6 = v21;
  id v7 = v20;
  id v8 = v19;
  uint64_t v9 = v8;
  if (v5)
  {
    id v10 = [(HMDHome *)self backingStore];
    uint64_t v11 = [v10 context];
    id v12 = [v11 managedObjectContext];

    id v13 = [(HMDHome *)self homeManager];
    id v14 = [v13 sharedUserPrivateSettingsManager];

    int v15 = [MEMORY[0x263EFF9A0] dictionary];
    [v15 setObject:v7 forKeyedSubscript:v6];
    if ([v6 isEqualToString:@"root.siri.identifyVoice"]
      && [v7 isEqualToNumber:&unk_26E470A08])
    {
      [v15 setObject:v7 forKeyedSubscript:@"root.music.allowiTunesAccount"];
    }
    char v16 = [(HMDHome *)self uuid];
    uint64_t v17 = [v14 updateSettingsForHome:v16 ofType:v22 withValues:v15 context:v12];
    [v4 respondWithOutcomeOf:v17];
  }
  else if (v8)
  {
    [v4 respondWithError:v8];
  }
  else
  {
    int64_t v18 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v4 respondWithError:v18];
  }
}

- (void)_updateOwnerSettingDependents:(id)a3 keyPath:(id)a4 value:(id)a5
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if ([v9 isEqualToString:@"root.siri.identifyVoice"])
  {
    uint64_t v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = self;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v53 = v14;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Updating owner setting dependents", buf, 0xCu);
    }
    long long v46 = v8;
    if ([v10 isEqualToNumber:&unk_26E470930])
    {
      id v45 = v9;
      int v15 = +[_MKFUser entity];
      char v16 = objc_msgSend(v15, "hmd_attributeForSettingsPath:", @"root.music.playbackInfluencesForYou");

      long long v44 = v16;
      if (v16)
      {
        id v17 = v10;
        int64_t v18 = (void *)MEMORY[0x230FBD990]();
        id v19 = v12;
        id v20 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          id v21 = HMFGetLogIdentifier();
          uint64_t v22 = [v16 name];
          *(_DWORD *)buf = 138544386;
          __int16 v53 = v21;
          __int16 v54 = 2112;
          __int16 v55 = @"root.music.playbackInfluencesForYou";
          __int16 v56 = 2112;
          long long v57 = v22;
          __int16 v58 = 2112;
          id v59 = v17;
          __int16 v60 = 2112;
          long long v61 = @"root.siri.identifyVoice";
          _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Updating setting '%@' (%@) = %@ due to %@ is off", buf, 0x34u);

          char v16 = v44;
        }

        id v23 = [v16 name];
        id v10 = v17;
        [v8 setValue:v17 forKey:v23];
      }
      uint64_t v24 = [v8 accessoriesWithPersonalRequestsEnabled];
      if (v24)
      {
        id v43 = v10;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        id v25 = v24;
        uint64_t v26 = [v25 countByEnumeratingWithState:&v47 objects:v51 count:16];
        if (v26)
        {
          uint64_t v27 = v26;
          uint64_t v28 = *(void *)v48;
          do
          {
            for (uint64_t i = 0; i != v27; ++i)
            {
              if (*(void *)v48 != v28) {
                objc_enumerationMutation(v25);
              }
              id v30 = *(__CFString **)(*((void *)&v47 + 1) + 8 * i);
              __int16 v31 = (void *)MEMORY[0x230FBD990]();
              __int16 v32 = v12;
              id v33 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
              {
                uint64_t v34 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                __int16 v53 = v34;
                __int16 v54 = 2112;
                __int16 v55 = v30;
                _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@Removing personal requests enabled accessory %@", buf, 0x16u);

                id v8 = v46;
              }

              [v8 removeAccessoriesWithPersonalRequestsEnabledObject:v30];
            }
            uint64_t v27 = [v25 countByEnumeratingWithState:&v47 objects:v51 count:16];
          }
          while (v27);
        }

        char v16 = v44;
        id v9 = v45;
        id v10 = v43;
      }
      else
      {
        id v25 = 0;
      }
      goto LABEL_26;
    }
    if ([v10 isEqualToNumber:&unk_26E470A08])
    {
      id v35 = +[_MKFUser entity];
      id v36 = objc_msgSend(v35, "hmd_attributeForSettingsPath:", @"root.music.allowiTunesAccount");

      if (!v36)
      {
        char v16 = 0;
        id v8 = v46;
        goto LABEL_27;
      }
      id v37 = v10;
      id v38 = (void *)MEMORY[0x230FBD990]();
      uint64_t v39 = v12;
      __int16 v40 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        id v41 = HMFGetLogIdentifier();
        uint64_t v42 = [v36 name];
        *(_DWORD *)buf = 138544386;
        __int16 v53 = v41;
        __int16 v54 = 2112;
        __int16 v55 = @"root.music.allowiTunesAccount";
        __int16 v56 = 2112;
        long long v57 = v42;
        __int16 v58 = 2112;
        id v59 = v37;
        __int16 v60 = 2112;
        long long v61 = @"root.siri.identifyVoice";
        _os_log_impl(&dword_22F52A000, v40, OS_LOG_TYPE_INFO, "%{public}@Updating setting '%@' (%@) = %@ due to %@ is on", buf, 0x34u);
      }
      id v25 = [v36 name];
      id v8 = v46;
      id v10 = v37;
      char v16 = v36;
      [v46 setValue:v10 forKey:v25];
LABEL_26:

LABEL_27:
    }
  }
}

- (void)_handleOwnerSettingsUpdate:(id)a3
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v26 = 0;
  uint64_t v27 = 0;
  id v24 = 0;
  id v25 = 0;
  BOOL v5 = [(HMDHome *)self _validateSettingsUpdate:v4 type:&v27 keyPath:&v26 value:&v25 error:&v24];
  id v6 = v26;
  id v7 = v25;
  id v8 = v24;
  id v9 = v8;
  if (v5)
  {
    id v10 = +[_MKFUser entity];
    uint64_t v11 = objc_msgSend(v10, "hmd_attributeForSettingsPath:", v6);

    if (v11)
    {
      id v12 = [(HMDHome *)self backingStore];
      id v13 = [v12 context];
      v19[0] = MEMORY[0x263EF8330];
      v19[1] = 3221225472;
      void v19[2] = __38__HMDHome__handleOwnerSettingsUpdate___block_invoke;
      v19[3] = &unk_264A2E908;
      void v19[4] = self;
      id v20 = v4;
      id v21 = v6;
      id v22 = v11;
      id v23 = v7;
      [v13 performBlock:v19];
    }
    else
    {
      id v14 = (void *)MEMORY[0x230FBD990]();
      int v15 = self;
      char v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        id v17 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v29 = v17;
        __int16 v30 = 2112;
        id v31 = v6;
        _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Invalid settings key path: %@", buf, 0x16u);
      }
      int64_t v18 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      [v4 respondWithError:v18];
    }
    goto LABEL_10;
  }
  if (!v8)
  {
    uint64_t v11 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v4 respondWithError:v11];
LABEL_10:

    goto LABEL_11;
  }
  [v4 respondWithError:v8];
LABEL_11:
}

void __38__HMDHome__handleOwnerSettingsUpdate___block_invoke(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) currentUser];
  uint64_t v3 = [v2 uuid];

  id v4 = +[HMCContext findUserWithModelID:v3];
  BOOL v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = *(id *)(a1 + 32);
  id v7 = HMFGetOSLogHandle();
  id v8 = v7;
  if (!v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v17 = HMFGetLogIdentifier();
      int v21 = 138543618;
      id v22 = v17;
      __int16 v23 = 2112;
      id v24 = v3;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unable to fetch the user with id [%@] from working store", (uint8_t *)&v21, 0x16u);
    }
    char v16 = *(void **)(a1 + 40);
    int64_t v18 = (void *)MEMORY[0x263F087E8];
    uint64_t v19 = 2;
    goto LABEL_10;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    id v10 = *(void **)(a1 + 48);
    uint64_t v11 = [*(id *)(a1 + 56) name];
    uint64_t v12 = *(void *)(a1 + 64);
    int v21 = 138544130;
    id v22 = v9;
    __int16 v23 = 2112;
    id v24 = v10;
    __int16 v25 = 2112;
    id v26 = v11;
    __int16 v27 = 2112;
    uint64_t v28 = v12;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Updating owner setting '%@' (%@) = %@", (uint8_t *)&v21, 0x2Au);
  }
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = [*(id *)(a1 + 56) name];
  [v4 setValue:v13 forKey:v14];

  [*(id *)(a1 + 32) _updateOwnerSettingDependents:v4 keyPath:*(void *)(a1 + 48) value:*(void *)(a1 + 64)];
  int v15 = +[HMCContext currentContext];
  LOBYTE(v14) = [v15 save];

  char v16 = *(void **)(a1 + 40);
  if ((v14 & 1) == 0)
  {
    int64_t v18 = (void *)MEMORY[0x263F087E8];
    uint64_t v19 = -1;
LABEL_10:
    id v20 = [v18 hmErrorWithCode:v19];
    [v16 respondWithError:v20];

    goto LABEL_11;
  }
  [v16 respondWithSuccess];
LABEL_11:
}

- (void)enableUserListeningHistoryForAccessoryUUID:(id)a3 userUUID:(id)a4
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHome *)self userWithUUID:v7];
  id v9 = (void *)MEMORY[0x230FBD990]();
  id v10 = self;
  uint64_t v11 = HMFGetOSLogHandle();
  uint64_t v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v15 = 138543874;
      char v16 = v13;
      __int16 v17 = 2112;
      id v18 = v6;
      __int16 v19 = 2112;
      id v20 = v8;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Enable ULH: accessoryUUID %@ user %@", (uint8_t *)&v15, 0x20u);
    }
    [(HMDHome *)v8 enableUserListeningHistoryForAccessory:v6];
  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v15 = 138543874;
      char v16 = v14;
      __int16 v17 = 2112;
      id v18 = v7;
      __int16 v19 = 2112;
      id v20 = v10;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@No user exist for userUUID %@ in home %@", (uint8_t *)&v15, 0x20u);
    }
  }
}

- (void)_handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs:(id)a3
{
  id v4 = a3;
  __decodeAndVerifyCurrentUser(self, v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [v5 handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs:v4];
}

- (void)_handleMediaContentProfileAccessControlUpdate:(id)a3
{
  id v4 = a3;
  __decodeAndVerifyCurrentUser(self, v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [v5 handleMediaContentProfileAccessControlUpdate:v4];
}

- (void)_handleAssistantAccessControlUpdate:(id)a3
{
  id v4 = a3;
  __decodeAndVerifyCurrentUser(self, v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [v5 handleAssistantAccessControlUpdate:v4];
}

- (void)_handleSiriPhraseOptionsUpdateRequest:(id)a3
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    int v23 = 138543362;
    id v24 = v9;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update Siri phrase options request", (uint8_t *)&v23, 0xCu);
  }
  id v10 = [HMDHomeModel alloc];
  uint64_t v11 = [(HMDHome *)v7 uuid];
  uint64_t v12 = [(HMDHome *)v7 homeManager];
  uint64_t v13 = [v12 uuid];
  uint64_t v14 = [(HMDBackingStoreModelObject *)v10 initWithObjectChangeType:2 uuid:v11 parentUUID:v13];

  int v15 = [v4 messagePayload];
  char v16 = objc_msgSend(v15, "hmf_numberForKey:", *MEMORY[0x263F0CE60]);
  uint64_t v17 = [v16 unsignedIntegerValue];

  id v18 = [NSNumber numberWithUnsignedInteger:v17];
  [(HMDHomeModel *)v14 setSiriPhraseOptions:v18];

  __int16 v19 = [(HMDHome *)v7 backingStore];
  id v20 = [v4 name];
  uint64_t v21 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
  id v22 = [v19 transaction:v20 options:v21];

  [v22 add:v14 withMessage:v4];
  [v22 run];
}

- (void)_handleSiriPhraseOptionsStatusChange:(id)a3 message:(id)a4
{
  id v5 = [a3 siriPhraseOptions];
  -[HMDHome setSiriPhraseOptions:](self, "setSiriPhraseOptions:", [v5 unsignedIntegerValue]);
}

- (void)_handleAudioAnalysisOnboardingUpdateRequest:(id)a3
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    int v22 = 138543362;
    int v23 = v9;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update audio analysis classifier options request", (uint8_t *)&v22, 0xCu);
  }
  id v10 = [HMDHomeModel alloc];
  uint64_t v11 = [(HMDHome *)v7 uuid];
  uint64_t v12 = [(HMDHome *)v7 homeManager];
  uint64_t v13 = [v12 uuid];
  uint64_t v14 = [(HMDBackingStoreModelObject *)v10 initWithObjectChangeType:2 uuid:v11 parentUUID:v13];

  int v15 = [v4 messagePayload];
  uint64_t v16 = objc_msgSend(v15, "hmf_BOOLForKey:", *MEMORY[0x263F0C7D0]);

  uint64_t v17 = [NSNumber numberWithBool:v16];
  [(HMDHomeModel *)v14 setDidOnboardAnalysis:v17];

  id v18 = [(HMDHome *)v7 backingStore];
  __int16 v19 = [v4 name];
  id v20 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
  uint64_t v21 = [v18 transaction:v19 options:v20];

  [v21 add:v14 withMessage:v4];
  [v21 run];
}

- (void)_handleAudioAnalysisOnboardingStatusChange:(id)a3 message:(id)a4
{
  id v5 = [a3 didOnboardAnalysis];
  -[HMDHome setDidOnboardAudioAnalysis:](self, "setDidOnboardAudioAnalysis:", [v5 BOOLValue]);
}

- (void)_handleAudioAnalysisClassifierOptionsUpdateRequest:(id)a3
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    int v23 = 138543362;
    uint64_t v24 = v9;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update audio analysis classifier options request", (uint8_t *)&v23, 0xCu);
  }
  id v10 = [HMDHomeModel alloc];
  uint64_t v11 = [(HMDHome *)v7 uuid];
  uint64_t v12 = [(HMDHome *)v7 homeManager];
  uint64_t v13 = [v12 uuid];
  uint64_t v14 = [(HMDBackingStoreModelObject *)v10 initWithObjectChangeType:2 uuid:v11 parentUUID:v13];

  int v15 = [v4 messagePayload];
  uint64_t v16 = objc_msgSend(v15, "hmf_numberForKey:", *MEMORY[0x263F0C7B0]);
  uint64_t v17 = [v16 unsignedIntegerValue];

  id v18 = [NSNumber numberWithUnsignedInteger:v17];
  [(HMDHomeModel *)v14 setAnalysisOptions:v18];

  __int16 v19 = [(HMDHome *)v7 backingStore];
  id v20 = [v4 name];
  uint64_t v21 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
  int v22 = [v19 transaction:v20 options:v21];

  [v22 add:v14 withMessage:v4];
  [v22 run];
}

- (void)_handleAudioAnalysisClassifierOptionsChange:(id)a3 message:(id)a4
{
  id v5 = [a3 analysisOptions];
  -[HMDHome setAudioAnalysisClassifierOptions:](self, "setAudioAnalysisClassifierOptions:", [v5 unsignedIntegerValue]);

  id v6 = [(HMDHome *)self notificationCenter];
  [v6 postNotificationName:@"HMDAudioAnalysisClassifierOptionsUpdatedNotification" object:self];
}

- (void)_handleMultiUserEnabledChange:(id)a3 message:(id)a4
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    int v20 = 138543362;
    uint64_t v21 = v11;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Multi-user enabled changed, sending notification", (uint8_t *)&v20, 0xCu);
  }
  uint64_t v12 = [v6 multiUserEnabled];
  -[HMDHome setMultiUserEnabled:](v9, "setMultiUserEnabled:", [v12 BOOLValue]);

  uint64_t v13 = [(HMDHome *)v9 notificationCenter];
  uint64_t v14 = *MEMORY[0x263F0CCE8];
  [v13 postNotificationName:*MEMORY[0x263F0CCE8] object:0];

  int v15 = (void *)MEMORY[0x263F42590];
  uint64_t v16 = [(HMDHome *)v9 messageDestination];
  uint64_t v17 = [v15 messageWithName:v14 destination:v16 payload:0];

  id v18 = [v7 identifier];
  [v17 setIdentifier:v18];

  objc_msgSend(v17, "setRemote:", objc_msgSend(v7, "isRemote"));
  __int16 v19 = [(HMDHome *)v9 msgDispatcher];
  [v19 sendMessage:v17 completionHandler:0];
}

- (void)_handleSetHasOnboardedForWalletKeyMessage:(id)a3
{
}

- (void)_handleSetHasOnboardedForAccessCodeMessage:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    int v18 = 138543618;
    __int16 v19 = v8;
    __int16 v20 = 2112;
    id v21 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling message to set has onboarded for access code: %@", (uint8_t *)&v18, 0x16u);
  }
  id v9 = [HMDHomeModel alloc];
  id v10 = [(HMDHome *)v6 uuid];
  uint64_t v11 = [(HMDHome *)v6 homeManager];
  uint64_t v12 = [v11 uuid];
  uint64_t v13 = [(HMDBackingStoreModelObject *)v9 initWithObjectChangeType:2 uuid:v10 parentUUID:v12];

  [(HMDHomeModel *)v13 setHasOnboardedForAccessCode:MEMORY[0x263EFFA88]];
  uint64_t v14 = [(HMDHome *)v6 backingStore];
  int v15 = [v4 name];
  uint64_t v16 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
  uint64_t v17 = [v14 transaction:v15 options:v16];

  [v17 add:v13 withMessage:v4];
  [v17 run];
}

- (void)_handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest:(id)a3
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v22 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Received set has any user acknowledged camera recording onboarding request", buf, 0xCu);
  }
  id v9 = [HMDHomeModel alloc];
  id v10 = [(HMDHome *)v6 uuid];
  uint64_t v11 = [(HMDHome *)v6 homeManager];
  uint64_t v12 = [v11 uuid];
  uint64_t v13 = [(HMDBackingStoreModelObject *)v9 initWithObjectChangeType:2 uuid:v10 parentUUID:v12];

  [(HMDHomeModel *)v13 setHasAnyUserAcknowledgedCameraRecordingOnboarding:MEMORY[0x263EFFA88]];
  uint64_t v14 = [(HMDHome *)v6 backingStore];
  int v15 = [v4 name];
  uint64_t v16 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
  uint64_t v17 = [v14 transaction:v15 options:v16];

  [v17 add:v13 withMessage:v4];
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 3221225472;
  void v19[2] = __76__HMDHome__handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest___block_invoke;
  v19[3] = &unk_264A2F3E8;
  id v20 = v4;
  id v18 = v4;
  [v17 run:v19];
}

uint64_t __76__HMDHome__handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 respondWithError:a2];
  }
  else {
    return [v2 respondWithSuccess];
  }
}

- (void)enableMultiUser
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    int v11 = 138543362;
    uint64_t v12 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Received local request to enable Multi-User", (uint8_t *)&v11, 0xCu);
  }
  id v7 = (void *)MEMORY[0x263F42568];
  uint64_t v8 = *MEMORY[0x263F0C830];
  id v9 = [(HMDHome *)v4 messageDestination];
  id v10 = [v7 messageWithName:v8 destination:v9 payload:MEMORY[0x263EFFA78]];

  -[HMDHome _enableMultiUserWithMessage:](v4, v10);
}

- (void)_enableMultiUserWithMessage:(void *)a1
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (a1)
  {
    if ([a1 isMultiUserEnabled])
    {
      [v3 respondWithSuccess];
    }
    else
    {
      id v4 = (void *)MEMORY[0x230FBD990]();
      id v5 = a1;
      id v6 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        id v7 = HMFGetLogIdentifier();
        int v17 = 138543362;
        id v18 = v7;
        _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Received enable multi-user request", (uint8_t *)&v17, 0xCu);
      }
      uint64_t v8 = [HMDHomeModel alloc];
      id v9 = [v5 uuid];
      id v10 = [v5 homeManager];
      int v11 = [v10 uuid];
      uint64_t v12 = [(HMDBackingStoreModelObject *)v8 initWithObjectChangeType:2 uuid:v9 parentUUID:v11];

      [(HMDHomeModel *)v12 setMultiUserEnabled:MEMORY[0x263EFFA88]];
      uint64_t v13 = [v5 backingStore];
      uint64_t v14 = [v3 name];
      int v15 = +[HMDBackingStoreTransactionOptions defaultPreferencesOptions];
      uint64_t v16 = [v13 transaction:v14 options:v15];

      [v16 add:v12 withMessage:v3];
      [v16 run];
    }
  }
}

- (void)_handleEnableMultiUserRequest:(id)a3
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([v4 isRemote] && (objc_msgSend(v4, "isSecureRemote") & 1) == 0)
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    int v11 = self;
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v37 = v13;
      __int16 v38 = 2112;
      id v39 = v4;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Message not supported: %@", buf, 0x16u);
    }
    uint64_t v14 = [MEMORY[0x263F087E8] hmErrorWithCode:17];
    [v4 respondWithError:v14];
  }
  else
  {
    if ([(HMDHome *)self isOwnerUser])
    {
      -[HMDHome _enableMultiUserWithMessage:](self, v4);
      goto LABEL_16;
    }
    id v5 = [(HMDHome *)self primaryResident];
    if (!v5)
    {
      id v6 = (void *)MEMORY[0x230FBD990]();
      int v15 = self;
      uint64_t v8 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v37 = v16;
        _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unable to forward message to home owner no resident found", buf, 0xCu);
      }
      goto LABEL_15;
    }
    if (([v4 isRemote] & 1) != 0
      || [v4 BOOLForKey:@"kDoNotForwardMessageKey"])
    {
      id v6 = (void *)MEMORY[0x230FBD990]();
      id v7 = self;
      uint64_t v8 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id v9 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v37 = v9;
        _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Did not expect remote message.", buf, 0xCu);
      }
LABEL_15:

      int v17 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      [v4 respondWithError:v17];

      goto LABEL_16;
    }
    id v18 = (void *)[v4 mutableCopy];
    [v18 setRemote:1];
    [v18 setSecureRemote:1];
    uint64_t v34 = @"kDoNotForwardMessageKey";
    uint64_t v35 = MEMORY[0x263EFFA88];
    uint64_t v19 = [NSDictionary dictionaryWithObjects:&v35 forKeys:&v34 count:1];
    [v18 setMessagePayload:v19];

    id v20 = [HMDRemoteDeviceMessageDestination alloc];
    id v21 = [v4 destination];
    uint64_t v22 = [v21 target];
    uint64_t v23 = [v5 device];
    uint64_t v24 = [(HMDRemoteDeviceMessageDestination *)v20 initWithTarget:v22 device:v23];
    [v18 setDestination:v24];

    objc_initWeak(&location, self);
    v30[0] = MEMORY[0x263EF8330];
    v30[1] = 3221225472;
    void v30[2] = __41__HMDHome__handleEnableMultiUserRequest___block_invoke;
    v30[3] = &unk_264A2D420;
    objc_copyWeak(&v32, &location);
    id v31 = v4;
    uint64_t v25 = (void *)MEMORY[0x230FBD990]([v18 setResponseHandler:v30]);
    id v26 = self;
    HMFGetOSLogHandle();
    __int16 v27 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v37 = v28;
      _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_INFO, "%{public}@Forwarding enable multi-user request to owner.", buf, 0xCu);
    }
    uint64_t v29 = [(HMDHome *)v26 msgDispatcher];
    [v29 sendMessage:v18];

    objc_destroyWeak(&v32);
    objc_destroyWeak(&location);
  }
LABEL_16:
}

void __41__HMDHome__handleEnableMultiUserRequest___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = WeakRetained;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v11 = HMFGetLogIdentifier();
    int v14 = 138543618;
    int v15 = v11;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Enabled multi-user on the home error: %@", (uint8_t *)&v14, 0x16u);
  }
  uint64_t v12 = [*(id *)(a1 + 32) responseHandler];

  if (v12)
  {
    uint64_t v13 = [*(id *)(a1 + 32) responseHandler];
    ((void (**)(void, id, id))v13)[2](v13, v5, v6);
  }
}

- (void)handleFindResidentsNotification:(id)a3
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 userInfo];
  id v6 = objc_msgSend(v5, "hmf_UUIDForKey:", @"kHomeUUID");

  if (v6)
  {
    id v7 = [(HMDHome *)self uuid];
    int v8 = [v6 isEqual:v7];

    if (v8)
    {
      id v9 = (void *)MEMORY[0x230FBD990]();
      id v10 = self;
      int v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v23 = v12;
        __int16 v24 = 2112;
        uint64_t v25 = v6;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Received notification to check if there are any residents for home with UUID: %@.", buf, 0x16u);
      }
      uint64_t v13 = +[HMDCoreDataCloudTransform sharedInstance];
      v19[0] = MEMORY[0x263EF8330];
      v19[1] = 3221225472;
      void v19[2] = __43__HMDHome_handleFindResidentsNotification___block_invoke;
      v19[3] = &unk_264A16EE0;
      void v19[4] = v10;
      id v20 = v13;
      id v21 = v6;
      id v14 = v13;
      [v14 countResidentsInHomeWithUUID:v21 completion:v19];
    }
  }
  else
  {
    int v15 = (void *)MEMORY[0x230FBD990]();
    __int16 v16 = self;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v23 = v18;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@homeUUID is nil", buf, 0xCu);
    }
  }
}

void __43__HMDHome_handleFindResidentsNotification___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = v5;
  if (!a2 || v5)
  {
    if (v5)
    {
      int v11 = (void *)MEMORY[0x230FBD990]();
      id v12 = *(id *)(a1 + 32);
      uint64_t v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        id v14 = HMFGetLogIdentifier();
        int v15 = 138543618;
        __int16 v16 = v14;
        __int16 v17 = 2112;
        uint64_t v18 = v6;
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Counting residents in the cloud store failed with error: %@. Starting a full import", (uint8_t *)&v15, 0x16u);
      }
    }
    [*(id *)(a1 + 40) runCompleteMergeTransformForHomeWithModelID:*(void *)(a1 + 48) completion:0];
  }
  else
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = *(id *)(a1 + 32);
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      int v15 = 138543618;
      __int16 v16 = v10;
      __int16 v17 = 2048;
      uint64_t v18 = a2;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Found %lu residents in the cloud store", (uint8_t *)&v15, 0x16u);
    }
  }
}

- (void)_configureConfiguredResident:(id)a3 desiredConfigState:(unint64_t)a4 message:(id)a5
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a5;
  if (a4 == 1)
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    int v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v27 = 138543362;
      uint64_t v28 = v13;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Unconfiguring residents is not supported", (uint8_t *)&v27, 0xCu);
    }
    id v14 = [v9 responseHandler];

    if (v14)
    {
      int v15 = [MEMORY[0x263F087E8] hmErrorWithCode:48 description:0 reason:0 suggestion:0];
      __int16 v16 = [v9 responseHandler];
      ((void (**)(void, void *, void))v16)[2](v16, v15, 0);
LABEL_17:
    }
  }
  else
  {
    uint64_t v17 = [v8 configurationState];
    [(HMDHome *)self _updateConfigurationStateForResidentDevice:v8 desiredConfigState:a4 message:v9];
    if (v17 != a4)
    {
      int v15 = [(HMDHome *)self homeManager];
      uint64_t v18 = (void *)MEMORY[0x230FBD990]();
      uint64_t v19 = self;
      id v20 = HMFGetOSLogHandle();
      BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
      if (a4 == 2)
      {
        if (v21)
        {
          uint64_t v22 = HMFGetLogIdentifier();
          uint64_t v23 = [v8 displayName];
          int v27 = 138543618;
          uint64_t v28 = v22;
          __int16 v29 = 2112;
          __int16 v30 = v23;
          _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Enabling resident device %@, checking if we need to go remote", (uint8_t *)&v27, 0x16u);
        }
      }
      else
      {
        if (v21)
        {
          __int16 v24 = HMFGetLogIdentifier();
          uint64_t v25 = [v8 displayName];
          int v27 = 138543618;
          uint64_t v28 = v24;
          __int16 v29 = 2112;
          __int16 v30 = v25;
          _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Disabling resident device %@, checking if we need to go remote", (uint8_t *)&v27, 0x16u);
        }
        uint64_t v26 = [(HMDHome *)v19 uuid];
        [v15 teardownRemoteAccessForHome:v26];
      }
      if (![(HMDHome *)v19 isResidentSupported]) {
        [v15 checkForRemotePeers];
      }
      __int16 v16 = [v9 name];
      [(HMDHome *)v19 saveWithReason:v16 postSyncNotification:0];
      goto LABEL_17;
    }
  }
}

- (void)_addResidentWithUsername:(id)a3 publicKey:(id)a4 destination:(id)a5
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (v8 && v9)
  {
    int v11 = [(HMDHome *)self unconfiguredResidentDevices];
    id v12 = objc_msgSend(v11, "hmf_firstObjectWithValue:forKeyPath:", v10, @"userID");

    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    id v14 = (void *)MEMORY[0x230FBD990]();
    int v15 = self;
    __int16 v16 = HMFGetOSLogHandle();
    uint64_t v17 = v16;
    if (isKindOfClass)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v32 = v18;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Found user as unconfigured resident, creating an accepted invitation to track adding the resident", buf, 0xCu);
      }
      uint64_t v19 = [[HMDOutgoingHomeInvitation alloc] initWithInvitee:v12 invitationState:5 forHome:v15 expiryDate:0 messageIdentifier:0];
      id v20 = [(HMDHome *)v15 outgoingInvitations];
      [v20 addObject:v19];

      objc_initWeak((id *)buf, v15);
      v27[0] = MEMORY[0x263EF8330];
      v27[1] = 3221225472;
      void v27[2] = __58__HMDHome__addResidentWithUsername_publicKey_destination___block_invoke;
      void v27[3] = &unk_264A2B420;
      objc_copyWeak(&v30, (id *)buf);
      id v28 = v12;
      BOOL v21 = v19;
      __int16 v29 = v21;
      [(HMDHome *)v15 __handleAcceptedOutgoingInvitationResponse:v21 destinationAddress:v10 publicKey:v9 username:v8 reverseShare:0 reverseShareToken:0 issuerPublicKeyER:0 presenceAuthStatus:0 completionHandler:v27];

      objc_destroyWeak(&v30);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v32 = v26;
        __int16 v33 = 2112;
        id v34 = v10;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Attempt to pair an unknown resident user '%@', aborting", buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v22 = (void *)MEMORY[0x230FBD990]();
    uint64_t v23 = self;
    __int16 v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      id v32 = v25;
      __int16 v33 = 2112;
      id v34 = v8;
      __int16 v35 = 2112;
      id v36 = v9;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Aborting adding resident due to missing userName '%@' and publicKey '%@'", buf, 0x20u);
    }
  }
}

void __58__HMDHome__addResidentWithUsername_publicKey_destination___block_invoke(id *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (shouldLogPrivateInformation())
  {
    id v5 = [a1[4] userID];
  }
  else
  {
    id v5 = @"...";
    id v6 = @"...";
  }
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = WeakRetained;
  id v9 = HMFGetOSLogHandle();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (v10)
    {
      int v11 = HMFGetLogIdentifier();
      int v15 = 138543874;
      __int16 v16 = v11;
      __int16 v17 = 2112;
      uint64_t v18 = v5;
      __int16 v19 = 2112;
      id v20 = v3;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to add resident user '%@' invitation with error: %@", (uint8_t *)&v15, 0x20u);
    }
  }
  else if (v10)
  {
    id v12 = HMFGetLogIdentifier();
    uint64_t v13 = [a1[5] identifier];
    id v14 = [v13 UUIDString];
    int v15 = 138543874;
    __int16 v16 = v12;
    __int16 v17 = 2112;
    uint64_t v18 = v5;
    __int16 v19 = 2112;
    id v20 = v14;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Tracking adding resident user '%@' with accepted and pending invitation '%@'", (uint8_t *)&v15, 0x20u);
  }
}

- (void)_sendResidentInviteWithDestination:(id)a3
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = self;
  id v9 = HMFGetOSLogHandle();
  BOOL v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v11 = HMFGetLogIdentifier();
      id v12 = [v6 device];
      uint64_t v13 = [v12 remoteDestinationString];
      *(_DWORD *)buf = 138543618;
      id v41 = v11;
      __int16 v42 = 2112;
      id v43 = v13;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Adding user %@ as remote access point", buf, 0x16u);
    }
    id v14 = [(HMDHome *)v8 homeManager];
    id v36 = 0;
    id v37 = 0;
    id v35 = 0;
    char v15 = [v14 getOrCreateControllerPublicKey:&v37 controllerUsername:&v36 error:&v35];
    id v16 = v37;
    id v31 = v36;
    id v30 = v35;
    if (v15)
    {
      v38[0] = @"kHomeName";
      __int16 v17 = [(HMDHome *)v8 name];
      v39[0] = v17;
      v38[1] = @"kHomeUUID";
      uint64_t v18 = [(HMDHome *)v8 uuid];
      __int16 v19 = [v18 UUIDString];
      v39[1] = v19;
      v38[2] = @"kControllerPublicKey";
      id v20 = v16;
      if (!v16)
      {
        id v20 = [MEMORY[0x263EFF9D0] null];
      }
      v38[3] = @"kControllerPairingNameKey";
      v39[2] = v20;
      void v39[3] = v31;
      __int16 v29 = [NSDictionary dictionaryWithObjects:v39 forKeys:v38 count:4];
      if (!v16) {

      }
      uint64_t v21 = [MEMORY[0x263F42568] internalMessageWithName:@"kAddRemoteAccessRequestKey" destination:v4 messagePayload:v29];
      objc_initWeak((id *)buf, v8);
      v32[0] = MEMORY[0x263EF8330];
      v32[1] = 3221225472;
      void v32[2] = __46__HMDHome__sendResidentInviteWithDestination___block_invoke;
      v32[3] = &unk_264A2D420;
      objc_copyWeak(&v34, (id *)buf);
      id v33 = v6;
      [v21 setResponseHandler:v32];
      uint64_t v22 = [v14 messageDispatcher];
      [v22 sendMessage:v21 completionHandler:0];

      objc_destroyWeak(&v34);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      uint64_t v25 = (void *)MEMORY[0x230FBD990]();
      uint64_t v26 = v8;
      int v27 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        id v28 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v41 = v28;
        _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@Failed getting controller public key to add remote gateway", buf, 0xCu);
      }
    }
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = HMFGetLogIdentifier();
      __int16 v24 = [(HMDHome *)v8 shortDescription];
      *(_DWORD *)buf = 138543874;
      id v41 = v23;
      __int16 v42 = 2112;
      id v43 = v24;
      __int16 v44 = 2112;
      id v45 = v4;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@[%@] Invalid resident invite destination: %@", buf, 0x20u);
    }
  }
}

void __46__HMDHome__sendResidentInviteWithDestination___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = WeakRetained;
  if (v5 || !v6)
  {
    BOOL v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = v8;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      id v14 = [*(id *)(a1 + 32) device];
      char v15 = [v14 remoteDestinationString];
      *(_DWORD *)buf = 138543874;
      uint64_t v21 = v13;
      __int16 v22 = 2112;
      uint64_t v23 = v15;
      __int16 v24 = 2112;
      id v25 = v5;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to receive controller info to auto add user %@ due to error: %@", buf, 0x20u);
    }
  }
  else if (WeakRetained)
  {
    id v9 = [WeakRetained workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __46__HMDHome__sendResidentInviteWithDestination___block_invoke_1765;
    block[3] = &unk_264A2F2F8;
    id v17 = v6;
    uint64_t v18 = v8;
    id v19 = *(id *)(a1 + 32);
    dispatch_async(v9, block);
  }
}

void __46__HMDHome__sendResidentInviteWithDestination___block_invoke_1765(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "hmf_stringForKey:", @"kControllerPairingNameKey");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "hmf_dataForKey:", @"kControllerPublicKey");
  id v3 = *(void **)(a1 + 40);
  id v4 = [*(id *)(a1 + 48) device];
  id v5 = [v4 remoteDestinationString];
  [v3 _addResidentWithUsername:v6 publicKey:v2 destination:v5];
}

- (void)_configureUnconfiguredResident:(id)a3 desiredConfigState:(unint64_t)a4
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  id v6 = a3;
  uint64_t v7 = [v6 configurationState];
  if (v7 != a4)
  {
    uint64_t v8 = v7;
    __int16 v55 = self;
    __int16 v56 = v6;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    id v9 = [(HMDHome *)self outgoingInvitations];
    uint64_t v10 = [v9 countByEnumeratingWithState:&v61 objects:v73 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v62;
      while (2)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v62 != v11) {
            objc_enumerationMutation(v9);
          }
          uint64_t v13 = [*(id *)(*((void *)&v61 + 1) + 8 * i) user];
          id v14 = [v13 userID];
          char v15 = [v56 userID];
          int v16 = [v14 isEqualToString:v15];

          if (v16)
          {
            id v32 = (void *)MEMORY[0x230FBD990]();
            id v33 = v55;
            id v34 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
            {
              id v35 = HMFGetLogIdentifier();
              id v36 = [v56 userID];
              *(_DWORD *)buf = 138543618;
              uint64_t v68 = v35;
              __int16 v69 = 2112;
              long long v70 = v36;
              _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_INFO, "%{public}@Already have a pending invitation for the resident user '%@', not setting up remote access", buf, 0x16u);
            }

            goto LABEL_36;
          }
        }
        uint64_t v10 = [v9 countByEnumeratingWithState:&v61 objects:v73 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }

    if (a4 != 2 || v8 != 1)
    {
      id v37 = (void *)MEMORY[0x230FBD990]();
      __int16 v38 = v55;
      id v39 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        uint64_t v40 = HMFGetLogIdentifier();
        id v41 = [v56 displayName];
        *(_DWORD *)buf = 138543618;
        uint64_t v68 = v40;
        __int16 v69 = 2112;
        long long v70 = v41;
        _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_INFO, "%{public}@Cannot configure unconfigured resident %@ to desired state", buf, 0x16u);
      }
      goto LABEL_36;
    }
    id v17 = [v56 userID];
    uint64_t v18 = [(HMDHome *)v55 homeManager];
    id v19 = (void *)MEMORY[0x230FBD990]();
    id v20 = v55;
    uint64_t v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      __int16 v22 = HMFGetLogIdentifier();
      uint64_t v23 = [v56 displayName];
      *(_DWORD *)buf = 138543874;
      uint64_t v68 = v22;
      __int16 v69 = 2112;
      long long v70 = v17;
      __int16 v71 = 2112;
      long long v72 = v23;
      _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Configuring unconfigured resident %@/%@ for remote access", buf, 0x20u);
    }
    __int16 v24 = [(HMDHome *)v20 hapAccessoryUniqueIdentifiers];
    id v25 = [v24 allObjects];

    if ([v25 count])
    {
      uint64_t v26 = [(HMDHome *)v20 pendingResponsesForRemoteAccessSetup];
      int v27 = [v26 containsObject:v17];

      if (!v27)
      {
        id v43 = [v18 uuid];
        __int16 v44 = +[HMDMessageDispatcher destinationWithTarget:v43 userID:0 destination:v17 multicast:0];

        if (v44)
        {
          id v45 = [(HMDHome *)v20 pendingResponsesForRemoteAccessSetup];
          [v45 addObject:v17];

          v65[0] = @"kAccessoryIdentitiesKey";
          v65[1] = @"kHomeUUID";
          v66[0] = v25;
          uint64_t v46 = [(HMDHome *)v20 uuid];
          long long v47 = [v46 UUIDString];
          v66[1] = v47;
          long long v48 = [NSDictionary dictionaryWithObjects:v66 forKeys:v65 count:2];

          long long v49 = [MEMORY[0x263F42568] internalMessageWithName:@"kDoYouSeeUnpairedAccessoriesKey" destination:v44 messagePayload:v48];
          objc_initWeak((id *)buf, v20);
          v57[0] = MEMORY[0x263EF8330];
          v57[1] = 3221225472;
          v57[2] = __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke;
          v57[3] = &unk_264A2E890;
          objc_copyWeak(&v60, (id *)buf);
          id v58 = v17;
          id v59 = v44;
          [v49 setResponseHandler:v57];
          long long v50 = [v18 messageDispatcher];
          [v50 sendMessage:v49 completionHandler:0];

          objc_destroyWeak(&v60);
          objc_destroyWeak((id *)buf);
        }
        else
        {
          id v51 = (void *)MEMORY[0x230FBD990]();
          char v52 = v20;
          __int16 v53 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v54 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            uint64_t v68 = v54;
            __int16 v69 = 2112;
            long long v70 = v17;
            _os_log_impl(&dword_22F52A000, v53, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot configure unconfigured resident: could not create message destination for address: %@", buf, 0x16u);
          }
        }

        goto LABEL_35;
      }
      id v28 = (void *)MEMORY[0x230FBD990]();
      __int16 v29 = v20;
      id v30 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        id v31 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v68 = v31;
        _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot configure unconfigured resident: there is already a pending request", buf, 0xCu);
      }
    }
    else
    {
      id v28 = (void *)MEMORY[0x230FBD990]();
      __int16 v29 = v20;
      id v30 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v42 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v68 = v42;
        _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot configure unconfigured resident: no accessory identifiers found", buf, 0xCu);
      }
    }

LABEL_35:

LABEL_36:
    id v6 = v56;
    goto LABEL_37;
  }
  [(HMDHome *)self _updateConfigurationStateForResidentDevice:v6 desiredConfigState:a4 message:0];
LABEL_37:
}

void __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = [WeakRetained workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke_2;
    block[3] = &unk_264A2E908;
    void block[4] = v8;
    id v11 = a1[4];
    id v12 = v5;
    id v13 = v6;
    id v14 = a1[5];
    dispatch_async(v9, block);
  }
}

void __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke_2(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) pendingResponsesForRemoteAccessSetup];
  [v2 removeObject:*(void *)(a1 + 40)];

  if (*(void *)(a1 + 48) || (id v9 = *(void **)(a1 + 56)) == 0)
  {
    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = *(id *)(a1 + 32);
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      int v18 = 138543874;
      id v19 = v6;
      __int16 v20 = 2112;
      uint64_t v21 = v7;
      __int16 v22 = 2112;
      uint64_t v23 = v8;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Remote peer %@ failed to look for accessories with error:%@", (uint8_t *)&v18, 0x20u);
    }
  }
  else
  {
    int v10 = objc_msgSend(v9, "hmf_BOOLForKey:", @"kAtHomeStateKey");
    uint64_t v11 = objc_msgSend(*(id *)(a1 + 56), "hmf_stringForKey:", @"kDeviceNameKey");
    id v12 = (void *)v11;
    if (v10 && v11)
    {
      [*(id *)(a1 + 32) _sendResidentInviteWithDestination:*(void *)(a1 + 64)];
    }
    else
    {
      id v13 = (void *)MEMORY[0x230FBD990]();
      id v14 = *(id *)(a1 + 32);
      char v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        int v16 = HMFGetLogIdentifier();
        uint64_t v17 = *(void *)(a1 + 40);
        int v18 = 138543618;
        id v19 = v16;
        __int16 v20 = 2112;
        uint64_t v21 = v17;
        _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Remote peer %@ is not at home", (uint8_t *)&v18, 0x16u);
      }
    }
  }
}

- (void)_updateConfigurationStateForResidentDevice:(id)a3 desiredConfigState:(unint64_t)a4 message:(id)a5
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a5;
  int v10 = (void *)MEMORY[0x230FBD990]();
  uint64_t v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    id v14 = [v8 displayName];
    int v15 = 138543874;
    int v16 = v13;
    __int16 v17 = 2112;
    int v18 = v14;
    __int16 v19 = 2048;
    unint64_t v20 = a4;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Updated configuration state of resident %@ to %ld", (uint8_t *)&v15, 0x20u);
  }
  if ([v8 configurationState] != a4)
  {
    [v8 setConfigurationState:a4];
    [(HMDHome *)v11 _notifyClientsOfUpdatedResidentUser:v8];
  }
}

- (void)notifyNewRemotePeersFound:(BOOL)a3 remoteUsersRemoved:(id)a4 forceRemoteNotificationRegistration:(BOOL)a5
{
  id v8 = a4;
  id v9 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __92__HMDHome_notifyNewRemotePeersFound_remoteUsersRemoved_forceRemoteNotificationRegistration___block_invoke;
  block[3] = &unk_264A26DE8;
  void block[4] = self;
  id v12 = v8;
  BOOL v13 = a3;
  BOOL v14 = a5;
  id v10 = v8;
  dispatch_async(v9, block);
}

void __92__HMDHome_notifyNewRemotePeersFound_remoteUsersRemoved_forceRemoteNotificationRegistration___block_invoke(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x263EFF9C0];
  id v3 = [*(id *)(a1 + 32) users];
  id v4 = [v2 setWithArray:v3];

  id v5 = [MEMORY[0x263EFF9C0] setWithArray:*(void *)(a1 + 40)];
  [v4 intersectSet:v5];
  if ([v4 count])
  {
    uint64_t v40 = v5;
    id v43 = [MEMORY[0x263EFF980] array];
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    id v41 = v4;
    obuint64_t j = [v4 allObjects];
    uint64_t v6 = [obj countByEnumeratingWithState:&v44 objects:v54 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v45;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v45 != v8) {
            objc_enumerationMutation(obj);
          }
          id v10 = *(void **)(*((void *)&v44 + 1) + 8 * i);
          if (shouldLogPrivateInformation())
          {
            uint64_t v11 = [v10 userID];
          }
          else
          {
            uint64_t v11 = @"...";
            id v12 = @"...";
          }
          BOOL v13 = (void *)MEMORY[0x230FBD990]();
          id v14 = *(id *)(a1 + 32);
          int v15 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            int v16 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            id v51 = v16;
            __int16 v52 = 2112;
            __int16 v53 = v11;
            _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Removing remote user %@ since it has de-registered", buf, 0x16u);
          }
          __int16 v17 = [v10 userID];

          if (v17)
          {
            int v18 = [v10 userID];
            [v43 addObject:v18];
          }
          [*(id *)(a1 + 32) _removeOutgoingInvitationForUser:v10];
          [*(id *)(a1 + 32) _removeUserFromContainer:v10];
        }
        uint64_t v7 = [obj countByEnumeratingWithState:&v44 objects:v54 count:16];
      }
      while (v7);
    }

    __int16 v19 = [*(id *)(a1 + 32) usersPendingUserManagementOperations];
    id v4 = v41;
    unint64_t v20 = [v41 allObjects];
    [v19 removeObjectsInArray:v20];

    v48[0] = @"kUserIDsKey";
    uint64_t v21 = (void *)[v43 copy];
    v48[1] = @"kHomeUUID";
    v49[0] = v21;
    __int16 v22 = [*(id *)(a1 + 32) uuid];
    uint64_t v23 = [v22 UUIDString];
    v49[1] = v23;
    uint64_t v24 = [NSDictionary dictionaryWithObjects:v49 forKeys:v48 count:2];

    [*(id *)(a1 + 32) saveWithReason:@"kRemoteUsersDeregistered" information:v24 postSyncNotification:0];
    id v5 = v40;
  }
  id v25 = [*(id *)(a1 + 32) localCapabilitiesDataSource];
  int v26 = [v25 supportsRemoteAccess];

  if (v26)
  {
    int v27 = [*(id *)(a1 + 32) homeManager];
    if (*(unsigned char *)(a1 + 48))
    {
      if ([*(id *)(a1 + 32) reachableAccessoriesCount])
      {
        if ([*(id *)(a1 + 32) allowsRemoteAccess])
        {
          id v28 = [*(id *)(a1 + 32) currentUser];
          int v29 = [v28 isRemoteAccessAllowed];

          if (v29)
          {
            id v30 = (void *)MEMORY[0x230FBD990]();
            id v31 = *(id *)(a1 + 32);
            id v32 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
            {
              id v33 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543362;
              id v51 = v33;
              _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_INFO, "%{public}@We have potential remote gateways that can be auto setup, triggering detection", buf, 0xCu);
            }
            id v34 = [*(id *)(a1 + 32) uuid];
            [v27 accessoriesAreLocallyReachableOnTransientDevice:1 forHome:v34];
          }
        }
      }
    }
    if (([*(id *)(a1 + 32) remoteAccessIsEnabled] & 1) == 0
      && ([*(id *)(a1 + 32) isResidentSupported] & 1) == 0)
    {
      id v35 = (void *)MEMORY[0x230FBD990]();
      id v36 = *(id *)(a1 + 32);
      id v37 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        __int16 v38 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v51 = v38;
        _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@Home does not have remote access enabled, requesting electing a remote peer", buf, 0xCu);
      }
      id v39 = [*(id *)(a1 + 32) uuid];
      [v27 electRemoteAccessPeerForHome:v39];
    }
    -[HMDHome _subscribeForNotificationFromRemoteGateway:](*(void **)(a1 + 32), *(unsigned char *)(a1 + 49));
  }
}

- (void)_subscribeForNotificationFromRemoteGateway:(void *)a1
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (a1)
  {
    id v4 = [a1 workQueue];
    dispatch_assert_queue_V2(v4);

    if ((a2 & 1) != 0 || ![a1 registeredNotificationWithRemoteGateway])
    {
      id v9 = [a1 notificationRegistrations];
      uint64_t v10 = [v9 count];

      uint64_t v11 = (void *)MEMORY[0x230FBD990]();
      id v12 = a1;
      BOOL v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        id v14 = HMFGetLogIdentifier();
        int v15 = [v12 notificationRegistrations];
        int v16 = [v15 shortDescription];
        int v17 = 138543874;
        int v18 = v14;
        __int16 v19 = 2112;
        unint64_t v20 = v16;
        __int16 v21 = 2048;
        uint64_t v22 = v10;
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with new remote gateway: %@/%lu", (uint8_t *)&v17, 0x20u);
      }
      [v12 _subscribeForHomeNotificationsFromRemoteGateway:v10 != 0];
      [v12 setRegisteredNotificationWithRemoteGateway:1];
    }
    else
    {
      id v5 = (void *)MEMORY[0x230FBD990]();
      id v6 = a1;
      uint64_t v7 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = HMFGetLogIdentifier();
        int v17 = 138543362;
        int v18 = v8;
        _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Already registered for notification with remote gateway, skipping", (uint8_t *)&v17, 0xCu);
      }
    }
  }
}

- (void)_remoteAccessEnabled:(BOOL)a3
{
  id v5 = [(HMDHome *)self hapAccessories];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  v9[2] = __32__HMDHome__remoteAccessEnabled___block_invoke;
  void v9[3] = &__block_descriptor_33_e25_v16__0__HMDHAPAccessory_8l;
  BOOL v10 = a3;
  objc_msgSend(v5, "na_each:", v9);

  id v6 = [(HMDHome *)self nativeMatterAccessories];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __32__HMDHome__remoteAccessEnabled___block_invoke_2;
  v7[3] = &__block_descriptor_33_e56_v16__0__HMDMatterAccessory_HMDMatterAccessoryProtocol__8l;
  BOOL v8 = a3;
  objc_msgSend(v6, "na_each:", v7);
}

uint64_t __32__HMDHome__remoteAccessEnabled___block_invoke(uint64_t a1, void *a2)
{
  return [a2 remoteAccessEnabled:*(unsigned __int8 *)(a1 + 32)];
}

uint64_t __32__HMDHome__remoteAccessEnabled___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 remoteAccessEnabled:*(unsigned __int8 *)(a1 + 32)];
}

- (void)remoteAccessEnabled:(BOOL)a3
{
  id v5 = [(HMDHome *)self workQueue];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __31__HMDHome_remoteAccessEnabled___block_invoke;
  v6[3] = &unk_264A2B870;
  void v6[4] = self;
  BOOL v7 = a3;
  dispatch_async(v5, v6);
}

uint64_t __31__HMDHome_remoteAccessEnabled___block_invoke(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (*(unsigned __int8 *)(a1 + 40) == [*(id *)(a1 + 32) remoteAccessIsEnabled]) {
    goto LABEL_25;
  }
  uint64_t v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    id v6 = HMFBooleanToString();
    *(_DWORD *)buf = 138543618;
    id v43 = v5;
    __int16 v44 = 2112;
    long long v45 = v6;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Setting remote access enabled to %@", buf, 0x16u);
  }
  [*(id *)(a1 + 32) setRemoteAccessIsEnabled:*(unsigned __int8 *)(a1 + 40)];
  if (!*(unsigned char *)(a1 + 40))
  {
    int v18 = [*(id *)(a1 + 32) WiFiAssertion];

    if (v18)
    {
      __int16 v19 = (void *)MEMORY[0x230FBD990]();
      id v20 = *(id *)(a1 + 32);
      __int16 v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v43 = v22;
        _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Releasing WiFi assertion", buf, 0xCu);
      }
      uint64_t v23 = [*(id *)(a1 + 32) wifiManager];
      uint64_t v24 = [*(id *)(a1 + 32) WiFiAssertion];
      [v23 endActiveAssertion:v24];

      id v25 = [*(id *)(a1 + 32) wifiManager];
      [v25 releaseWoWAssertion];

      [*(id *)(a1 + 32) setWiFiAssertion:0];
    }
    goto LABEL_16;
  }
  if (isWatch())
  {
    BOOL v7 = [*(id *)(a1 + 32) homeManager];
    if ([v7 isActive])
    {
      BOOL v8 = [*(id *)(a1 + 32) WiFiAssertion];

      if (v8) {
        goto LABEL_16;
      }
      id v9 = (void *)MEMORY[0x230FBD990]();
      id v10 = *(id *)(a1 + 32);
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v43 = v12;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Taking WiFi assertion", buf, 0xCu);
      }
      BOOL v13 = [*(id *)(a1 + 32) wifiManager];
      id v14 = NSString;
      int v15 = [*(id *)(a1 + 32) shortDescription];
      int v16 = [v14 stringWithFormat:@"Remote Access for %@", v15];
      int v17 = [v13 beginActiveAssertionWithOptions:0 reason:v16];
      [*(id *)(a1 + 32) setWiFiAssertion:v17];

      BOOL v7 = [*(id *)(a1 + 32) wifiManager];
      [v7 takeWoWAssertion];
    }
  }
LABEL_16:
  if (([*(id *)(a1 + 32) isResidentSupported] & 1) == 0)
  {
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    int v26 = [*(id *)(a1 + 32) _residentUsers];
    uint64_t v27 = [v26 countByEnumeratingWithState:&v37 objects:v41 count:16];
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = *(void *)v38;
      do
      {
        for (uint64_t i = 0; i != v28; ++i)
        {
          if (*(void *)v38 != v29) {
            objc_enumerationMutation(v26);
          }
          [*(id *)(a1 + 32) _notifyClientsOfUpdatedResidentUser:*(void *)(*((void *)&v37 + 1) + 8 * i)];
        }
        uint64_t v28 = [v26 countByEnumeratingWithState:&v37 objects:v41 count:16];
      }
      while (v28);
    }
  }
LABEL_25:
  id v31 = (void *)MEMORY[0x230FBD990]();
  id v32 = *(id *)(a1 + 32);
  id v33 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    id v34 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v43 = v34;
    _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@Clearing history of all heartbeat queued messages to server", buf, 0xCu);
  }
  id v35 = [*(id *)(a1 + 32) heartbeatPingMessagesQueuedWithServer];
  [v35 removeAllObjects];

  return [*(id *)(a1 + 32) _remoteAccessEnabled:*(unsigned __int8 *)(a1 + 40)];
}

- (BOOL)remoteAccessIsEnabled
{
  LOBYTE(self) = self->_remoteAccessIsEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setRemoteAccessEnabled:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_remoteAccessIsEnabled = a3;
  os_unfair_recursive_lock_unlock();
}

- (void)updateNetworkConnectivity:(BOOL)a3 companionReachable:(BOOL)a4
{
  BOOL v7 = [(HMDHome *)self workQueue];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __56__HMDHome_updateNetworkConnectivity_companionReachable___block_invoke;
  v8[3] = &unk_264A22A20;
  void v8[4] = self;
  BOOL v9 = a3;
  BOOL v10 = a4;
  dispatch_async(v7, v8);
}

uint64_t __56__HMDHome_updateNetworkConnectivity_companionReachable___block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v2 = [*(id *)(a1 + 32) isNetworkAvailable];
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 != v2) {
    [*(id *)(a1 + 32) setIsNetworkAvailable:v3 != 0];
  }
  id v4 = [*(id *)(a1 + 32) remoteEventRouterClientController];
  [v4 networkAvailabilityDidChange:*(unsigned __int8 *)(a1 + 40)];

  isWatch();
  uint64_t result = [*(id *)(a1 + 32) remoteAccessIsEnabled];
  if (result)
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = *(id *)(a1 + 32);
    BOOL v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      BOOL v9 = HMFGetLogIdentifier();
      int v10 = 138543362;
      uint64_t v11 = v9;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@We have no network connectivity, setting reachability state for all accessories to reflect their state", (uint8_t *)&v10, 0xCu);
    }
    return [*(id *)(a1 + 32) _remoteAccessEnabled:*(unsigned __int8 *)(a1 + 40)];
  }
  return result;
}

- (BOOL)_residentDeviceAvailable
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if ([(HMDHome *)self isResidentSupported])
  {
    LOBYTE(v3) = 1;
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    id v4 = [(HMDHome *)self _residentUsers];
    uint64_t v3 = [v4 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v3)
    {
      uint64_t v5 = *(void *)v9;
      while (2)
      {
        for (uint64_t i = 0; i != v3; ++i)
        {
          if (*(void *)v9 != v5) {
            objc_enumerationMutation(v4);
          }
          if ([*(id *)(*((void *)&v8 + 1) + 8 * i) configurationState] == 2)
          {
            LOBYTE(v3) = 1;
            goto LABEL_13;
          }
        }
        uint64_t v3 = [v4 countByEnumeratingWithState:&v8 objects:v12 count:16];
        if (v3) {
          continue;
        }
        break;
      }
    }
LABEL_13:
  }
  return v3;
}

- (id)_residentUsers
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)MEMORY[0x263EFF980];
  id v4 = [(HMDHome *)self users];
  uint64_t v5 = objc_msgSend(v3, "arrayWithCapacity:", objc_msgSend(v4, "count"));

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v6 = [(HMDHome *)self users];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [v5 addObject:v11];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }

  return v5;
}

- (BOOL)isRemoteAccessDeviceReachable
{
  if (![(HMDHome *)self remoteAccessIsEnabled]) {
    return 0;
  }
  uint64_t v3 = [(HMDHome *)self primaryResident];
  BOOL v4 = ([v3 isReachable] & 1) != 0 || -[HMDHome isCompanionReachable](self, "isCompanionReachable");

  return v4;
}

- (void)updateAccessoryBrowsing
{
  BOOL v3 = [(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident];
  BOOL v4 = [(HMDHome *)self isCurrentDeviceAvailableResident];
  id v5 = [(HMDHome *)self accessoryBrowser];
  [v5 updateRemoteAccessoryBrowsing:v4 whbScan:v3];
}

- (void)handlePrimaryResidentChangeNotification:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    uint64_t v9 = [v4 name];
    *(_DWORD *)buf = 138543618;
    long long v16 = v8;
    __int16 v17 = 2112;
    uint64_t v18 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Received resident update notification: %@", buf, 0x16u);
  }
  long long v10 = [(HMDHome *)v6 workQueue];
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  void v12[2] = __51__HMDHome_handlePrimaryResidentChangeNotification___block_invoke;
  v12[3] = &unk_264A2F820;
  id v13 = v4;
  long long v14 = v6;
  id v11 = v4;
  dispatch_async(v10, v12);
}

void __51__HMDHome_handlePrimaryResidentChangeNotification___block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v2 = [*(id *)(a1 + 32) userInfo];
  BOOL v3 = objc_msgSend(v2, "hmf_UUIDForKey:", @"HMDResidentDeviceHomeUUIDNotificationKey");

  id v4 = [*(id *)(a1 + 40) uuid];
  int v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", v3);

  if (v5)
  {
    if ([*(id *)(a1 + 40) isCurrentDeviceConfirmedPrimaryResident])
    {
      id v6 = (void *)MEMORY[0x230FBD990]();
      id v7 = *(id *)(a1 + 40);
      uint64_t v8 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = HMFGetLogIdentifier();
        int v18 = 138543362;
        uint64_t v19 = v9;
        _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Resetting accessory browsers", (uint8_t *)&v18, 0xCu);
      }
      long long v10 = [*(id *)(a1 + 40) accessoryBrowser];
      [v10 restartBrowsers];

      [*(id *)(a1 + 40) _evaluateShouldRelaunchAndSetRelaunch];
      [*(id *)(a1 + 40) _processUnsentOutgoingInvitations];
      [*(id *)(a1 + 40) _processUnacceptReverseShareAccessForUsers];
      [*(id *)(a1 + 40) _fixupUsersWithoutMergeID];
      [*(id *)(a1 + 40) _fixupHindsightOnboarding];
      if ([*(id *)(a1 + 40) isOwnerUser])
      {
        id v11 = [*(id *)(a1 + 40) homeManager];
        uint64_t v12 = [v11 homeOwnerCloudShareManager];
        [v12 updateSharedOwnerAccountHandleForHome:*(void *)(a1 + 40)];
      }
      [*(id *)(a1 + 40) updateCATIDForUsersIfNeeded:0];
      [*(id *)(a1 + 40) updateMatterFabricIDIfNeeded];
      id v13 = [*(id *)(a1 + 40) currentUser];
      [v13 scheduleRestrictedGuestAccessTimersWithReason:@"Primary changed on controller"];

      long long v14 = [*(id *)(a1 + 40) notificationRegistry];
      [v14 reprocessEnabledCharacteristicRegistrations];

      HMFUptime();
      long long v16 = *(void **)(a1 + 40);
    }
    else
    {
      __int16 v17 = [*(id *)(a1 + 40) notificationRegistry];
      [v17 disableAllRegistrations];

      long long v16 = *(void **)(a1 + 40);
      double v15 = 0.0;
    }
    [v16 setCurrentDeviceBecamePrimaryTime:v15];
    if ([*(id *)(a1 + 40) isCurrentDeviceAvailableResident]) {
      [*(id *)(a1 + 40) updateAccessoryBrowsing];
    }
    HMFUptime();
    objc_msgSend(*(id *)(a1 + 40), "setPrimaryResidentChangedTime:");
    [*(id *)(a1 + 40) _notifyThreadLayerOfResidentChange];
  }
}

- (void)_handleResidentChange
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  [(HMDHome *)self setMigratingAfterResidentChange:0];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  double v15 = self;
  BOOL v3 = [(HMDHome *)self triggers];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v18 objects:v23 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v19;
    uint64_t v6 = MEMORY[0x263EF8330];
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v19 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        objc_initWeak(location, v8);
        v16[0] = v6;
        v16[1] = 3221225472;
        void v16[2] = __32__HMDHome__handleResidentChange__block_invoke;
        v16[3] = &unk_264A2DE60;
        objc_copyWeak(&v17, location);
        [v8 activateAfterResidentChangeWithCompletion:v16];
        objc_destroyWeak(&v17);
        objc_destroyWeak(location);
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v18 objects:v23 count:16];
    }
    while (v4);
  }

  uint64_t v9 = (void *)MEMORY[0x230FBD990]();
  long long v10 = v15;
  id v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = HMFGetLogIdentifier();
    LODWORD(location[0]) = 138543362;
    *(id *)((char *)location + 4) = v12;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Calling presence feeder to notify the presence status to the new resident", (uint8_t *)location, 0xCu);
  }
  id v13 = [(HMDHome *)v10 presenceMonitor];
  [v13 residentChanged];

  long long v14 = [(HMDHome *)v10 periodicReader];
  [v14 residentUpdated];

  [(HMDHome *)v10 _evaluateNetworkProtectionAndRouterManagement];
}

void __32__HMDHome__handleResidentChange__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      int v9 = 138543618;
      long long v10 = v8;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Activating trigger after resident change finished with error (%@)", (uint8_t *)&v9, 0x16u);
    }
  }
}

- (void)migrateAfterResidentChange
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x230FBD990](self, a2);
  uint64_t v4 = self;
  uint64_t v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    double v15 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@migrateAfterResidentChange", buf, 0xCu);
  }
  if ([(HMDHome *)v4 isMigratingAfterResidentChange])
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    uint64_t v8 = v4;
    int v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      long long v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      double v15 = v10;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Migration after resident change is already running", buf, 0xCu);
    }
  }
  else
  {
    [(HMDHome *)v4 setMigratingAfterResidentChange:1];
    objc_initWeak((id *)buf, v4);
    __int16 v11 = [(HMDHome *)v4 backingStore];
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    void v12[2] = __37__HMDHome_migrateAfterResidentChange__block_invoke;
    v12[3] = &unk_264A2DE60;
    objc_copyWeak(&v13, (id *)buf);
    [v11 submitBlock:v12];

    objc_destroyWeak(&v13);
    objc_destroyWeak((id *)buf);
  }
}

void __37__HMDHome_migrateAfterResidentChange__block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleResidentChange];
}

- (void)removeResidentCapableDevice:(id)a3
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([(HMDHome *)self isOwnerUser])
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v5 = [(HMDHome *)self residentDeviceManager];
    id v6 = [v5 residentDevices];

    uint64_t v7 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v21;
      while (2)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v21 != v9) {
            objc_enumerationMutation(v6);
          }
          __int16 v11 = *(void **)(*((void *)&v20 + 1) + 8 * i);
          id v12 = [v11 device];
          int v13 = [v12 isEqual:v4];

          if (v13)
          {
            long long v19 = [(HMDHome *)self residentDeviceManager];
            [v19 removeResidentDevice:v11];

            goto LABEL_16;
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }

    if ([v4 isCurrentDevice])
    {
      long long v14 = [(HMDHome *)self notificationRegistry];
      [v14 clearAllRegistrations];
    }
  }
  else
  {
    double v15 = (void *)MEMORY[0x230FBD990]();
    uint64_t v16 = self;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      long long v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      int v26 = v18;
      __int16 v27 = 2112;
      id v28 = v4;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Attempting to remove resident on non-owner home -- device: %@", buf, 0x16u);
    }
  }
LABEL_16:
}

- (void)addResidentCapableDevice:(id)a3
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([(HMDHome *)self isOwnerUser])
  {
    uint64_t v5 = [v4 capabilities];
    int v6 = [v5 isResidentCapable];

    if (v6)
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      uint64_t v7 = [(HMDHome *)self residentDeviceManager];
      uint64_t v8 = [v7 residentDevices];

      uint64_t v9 = [v8 countByEnumeratingWithState:&v30 objects:v38 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v31;
        while (2)
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v31 != v11) {
              objc_enumerationMutation(v8);
            }
            int v13 = *(void **)(*((void *)&v30 + 1) + 8 * i);
            long long v14 = [v13 device];
            int v15 = [v14 isEqual:v4];

            if (v15)
            {
              int v26 = (void *)MEMORY[0x230FBD990]();
              __int16 v27 = self;
              id v28 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v29 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                id v35 = v29;
                __int16 v36 = 2112;
                long long v37 = v13;
                _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_DEBUG, "%{public}@Resident device already exists, refraining from creating a new transaction: %@", buf, 0x16u);
              }
              goto LABEL_17;
            }
          }
          uint64_t v10 = [v8 countByEnumeratingWithState:&v30 objects:v38 count:16];
          if (v10) {
            continue;
          }
          break;
        }
      }

      uint64_t v16 = [(HMDHome *)self uuid];
      id v17 = [v4 identifier];
      uint64_t v8 = +[HMDResidentDevice deriveUUIDFromHomeUUID:v16 deviceUUID:v17];

      long long v18 = [HMDResidentDeviceModel alloc];
      long long v19 = [(HMDHome *)self uuid];
      long long v20 = [(HMDBackingStoreModelObject *)v18 initWithObjectChangeType:1 uuid:v8 parentUUID:v19];

      [(HMDResidentDeviceModel *)v20 setEnabled:MEMORY[0x263EFFA88]];
      long long v21 = [v4 identifier];
      long long v22 = [v21 UUIDString];
      [(HMDResidentDeviceModel *)v20 setDeviceUUID:v22];

      if ([v4 isCurrentDevice]) {
        [(HMDResidentDeviceModel *)v20 setDevice:v4];
      }
      long long v23 = [(HMDHome *)self backingStore];
      uint64_t v24 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      id v25 = [v23 transaction:@"addResidentCapableDevice" options:v24];

      [v25 add:v20 withMessage:0];
      [v25 run];

LABEL_17:
    }
  }
}

- (NSArray)enabledResidents
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = [MEMORY[0x263EFF980] array];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = [(HMDHome *)self residentDeviceManager];
  uint64_t v5 = [v4 residentDevices];

  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ([v10 isEnabled]) {
          [v3 addObject:v10];
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  return (NSArray *)v3;
}

- (NSArray)residentEnabledDevices
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v3 = [MEMORY[0x263EFF980] array];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = [(HMDHome *)self residentDeviceManager];
  uint64_t v5 = [v4 residentDevices];

  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if ([v10 isEnabled])
        {
          uint64_t v11 = [v10 device];
          [v3 addObject:v11];
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v7);
  }

  return (NSArray *)v3;
}

- (NSArray)residentCapableDevices
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = [MEMORY[0x263EFF980] array];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = [(HMDHome *)self residentDeviceManager];
  uint64_t v5 = [v4 residentDevices];

  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = [*(id *)(*((void *)&v12 + 1) + 8 * i) device];
        [v3 addObject:v10];
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  return (NSArray *)v3;
}

- (id)preferredDevice
{
  id v3 = [(HMDHome *)self homeManager];
  id v4 = [v3 messageDispatcher];
  uint64_t v5 = [v4 residentCommunicationHandlerForHome:self];

  uint64_t v6 = [v5 preferredDevice];

  return v6;
}

- (void)_handleSetResidentElectionVersion:(id)a3
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 messagePayload];
  uint64_t v6 = objc_msgSend(v5, "hmf_numberForKey:", *MEMORY[0x263F0CCE0]);

  if (v6)
  {
    uint64_t v7 = (void *)MEMORY[0x230FBD990]();
    uint64_t v8 = self;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      uint64_t v11 = [(HMDHome *)v8 residentSelectionVersion];
      int v23 = 138543874;
      uint64_t v24 = v10;
      __int16 v25 = 2114;
      int v26 = v11;
      __int16 v27 = 2114;
      id v28 = v6;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Received request to update resident selection version from %{public}@ to %{public}@", (uint8_t *)&v23, 0x20u);
    }
    long long v12 = [HMDHomeModel alloc];
    long long v13 = [(HMDHome *)v8 uuid];
    long long v14 = [(HMDHome *)v8 homeManager];
    long long v15 = [v14 uuid];
    long long v16 = [(HMDBackingStoreModelObject *)v12 initWithObjectChangeType:2 uuid:v13 parentUUID:v15];

    [(HMDHomeModel *)v16 setResidentSelectionVersion:v6];
    uint64_t v17 = [v4 untrustedClientIdentifier];
    uint64_t v18 = +[HMDBackingStoreTransactionOptions defaultXPCOptionsWithCDTransactionAuthor:10 clientIdentifier:v17];

    long long v19 = [(HMDHome *)v8 backingStore];
    long long v20 = [v4 name];
    long long v21 = [v19 transaction:v20 options:v18];

    [v21 add:v16 withMessage:v4];
    [v21 run];
  }
  else
  {
    long long v22 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v4 respondWithError:v22];
  }
}

- (void)setResidentSelectionVersion:(id)a3
{
  id v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  residentSelectionVersiouint64_t n = self->_residentSelectionVersion;
  self->_residentSelectionVersiouint64_t n = v4;

  os_unfair_recursive_lock_unlock();
  logAndPostNotification(@"HMDHomeResidentSelectionVersionDidChangeNotification", self, 0);
}

- (NSNumber)residentSelectionVersion
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_residentSelectionVersion;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (BOOL)hasAnyResident
{
  int v2 = [(HMDHome *)self residentDeviceManager];
  char v3 = [v2 hasAnyResident];

  return v3;
}

- (BOOL)doesHomeContainResident
{
  int v2 = [(HMDHome *)self residentDeviceManager];
  char v3 = [v2 residentDevices];
  BOOL v4 = [v3 count] != 0;

  return v4;
}

- (NSNumber)matterFabricID
{
  if (isFeatureMatterLocalFabricConfigEnabled()) {
    [(HMDHome *)self fabric];
  }
  else {
  char v3 = [(HMDHome *)self chipStorage];
  }
  BOOL v4 = [v3 fabricID];

  return (NSNumber *)v4;
}

- (BOOL)isCurrentDeviceConfirmedPrimaryResident
{
  int v2 = [(HMDHome *)self residentDeviceManager];
  char v3 = [v2 isCurrentDeviceConfirmedPrimaryResident];

  return v3;
}

- (id)_hasConfirmedPrimaryResidentDevice
{
  int v2 = [(HMDHome *)self residentDeviceManager];
  char v3 = [v2 confirmedPrimaryResidentDevice];

  return v3;
}

- (BOOL)hasResidentDevicesForPrimaryResidentChangeMonitor:(id)a3
{
  char v3 = [(HMDHome *)self residentDeviceManager];
  BOOL v4 = [v3 residentDevices];
  BOOL v5 = [v4 count] != 0;

  return v5;
}

- (BOOL)residentSyncDidSync
{
  if ([(HMDHome *)self residentSyncClientDidSync]) {
    return 1;
  }
  return [(HMDHome *)self isCurrentDevicePrimaryResident];
}

- (BOOL)isCurrentDevicePrimaryResident
{
  int v2 = [(HMDHome *)self residentDeviceManager];
  char v3 = [v2 isCurrentDevicePrimaryResident];

  return v3;
}

- (id)primaryResident
{
  int v2 = [(HMDHome *)self residentDeviceManager];
  char v3 = [v2 primaryResidentDevice];

  return v3;
}

- (BOOL)isResidentSupported
{
  isWatch();
  char v3 = [(HMDHome *)self residentDeviceManager];
  char v4 = [v3 isResidentAvailable];

  return v4;
}

- (void)_handleCharacteristicEnableNotification:(id)a3
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  id v3 = a3;
  __int16 v71 = v3;
  if ([v3 isRemote] && (objc_msgSend(v3, "isSecureRemote") & 1) == 0)
  {
    uint64_t v10 = (void *)MEMORY[0x230FBD990]();
    uint64_t v11 = self;
    long long v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      long long v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v95 = v13;
      __int16 v96 = 2112;
      long long v97 = v71;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Message not supported: %@", buf, 0x16u);
    }
    long long v14 = [v71 responseHandler];

    if (v14)
    {
      long long v15 = [MEMORY[0x263F087E8] hmErrorWithCode:17];
      long long v16 = [v71 responseHandler];
      ((void (**)(void, void *, void))v16)[2](v16, v15, 0);
    }
  }
  else
  {
    char v4 = [v3 messagePayload];
    __int16 v69 = [v4 objectForKey:@"kNotificationEnablePayloadKey"];

    if (v69)
    {
      BOOL v5 = @"kNotificationEnablePayloadKey";
    }
    else
    {
      uint64_t v6 = [v71 messagePayload];
      uint64_t v7 = [v6 objectForKey:@"kNotificationDisablePayloadKey"];

      if (!v7)
      {
        id v59 = [v71 responseHandler];
        id v60 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
        ((void (**)(void, void *, void))v59)[2](v59, v60, 0);

        goto LABEL_49;
      }
      BOOL v5 = @"kNotificationDisablePayloadKey";
    }
    long long v70 = [v71 dictionaryForKey:v5];
    uint64_t v8 = [v71 clientIdentifier];

    if (v8)
    {
      uint64_t v9 = [v71 clientIdentifier];
      uint64_t v67 = [@"com.apple.HomeKit.client." stringByAppendingString:v9];
    }
    else
    {
      uint64_t v67 = @"com.apple.HomeKitDaemon";
      uint64_t v17 = @"com.apple.HomeKitDaemon";
    }
    group = dispatch_group_create();
    v91[0] = 0;
    v91[1] = v91;
    v91[2] = 0x3032000000;
    v91[3] = __Block_byref_object_copy__14257;
    uint8_t v91[4] = __Block_byref_object_dispose__14258;
    id v92 = 0;
    long long v64 = [MEMORY[0x263F08968] strongToStrongObjectsMapTable];
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    uint64_t v18 = [v70 allKeys];
    uint64_t v19 = [v18 countByEnumeratingWithState:&v87 objects:v106 count:16];
    if (v19)
    {
      uint64_t v72 = *(void *)v88;
      long long v21 = @"disable";
      if (v69) {
        long long v21 = @"enable";
      }
      long long v63 = v21;
      *(void *)&long long v20 = 138544642;
      long long v61 = v20;
      obuint64_t j = v18;
      do
      {
        uint64_t v74 = v19;
        for (uint64_t i = 0; i != v74; ++i)
        {
          if (*(void *)v88 != v72) {
            objc_enumerationMutation(obj);
          }
          int v23 = *(void **)(*((void *)&v87 + 1) + 8 * i);
          uint64_t v24 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v23];
          __int16 v25 = [(HMDHome *)self accessoryWithUUID:v24];

          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            int v26 = v25;
          }
          else {
            int v26 = 0;
          }
          id v27 = v26;

          if (v27)
          {
            id v28 = objc_msgSend(v70, "hmf_arrayForKey:", v23);
            if ([v28 count])
            {
              [v64 setObject:v28 forKey:v27];
            }
            else
            {
              __int16 v36 = (void *)MEMORY[0x230FBD990]();
              long long v37 = self;
              HMFGetOSLogHandle();
              long long v38 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
              {
                long long v62 = v36;
                HMFGetLogIdentifier();
                id v65 = (id)objc_claimAutoreleasedReturnValue();
                uint64_t v39 = [(HMDHome *)v37 name];
                long long v40 = [(HMDHome *)v37 uuid];
                id v41 = [v40 UUIDString];
                __int16 v42 = [v27 name];
                *(_DWORD *)buf = v61;
                id v95 = v65;
                __int16 v96 = 2112;
                long long v97 = v39;
                __int16 v98 = 2112;
                id v99 = v41;
                __int16 v100 = 2112;
                long long v101 = v63;
                __int16 v102 = 2112;
                long long v103 = v42;
                __int16 v104 = 2112;
                long long v105 = v23;
                _os_log_impl(&dword_22F52A000, v38, OS_LOG_TYPE_INFO, "%{public}@%@/%@: Received notification %@ for zero characteristics on accessory %@/%@", buf, 0x3Eu);

                __int16 v36 = v62;
              }
            }
          }
          else
          {
            uint64_t v29 = (void *)MEMORY[0x230FBD990]();
            long long v30 = self;
            HMFGetOSLogHandle();
            long long v31 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v32 = (id)objc_claimAutoreleasedReturnValue();
              long long v33 = [(HMDHome *)v30 name];
              id v34 = [(HMDHome *)v30 uuid];
              id v35 = [v34 UUIDString];
              *(_DWORD *)buf = 138544386;
              id v95 = v32;
              __int16 v96 = 2112;
              long long v97 = v33;
              __int16 v98 = 2112;
              id v99 = v35;
              __int16 v100 = 2112;
              long long v101 = v63;
              __int16 v102 = 2112;
              long long v103 = v23;
              _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_INFO, "%{public}@%@/%@: Received notification %@ for different accessory: %@", buf, 0x34u);
            }
          }
        }
        uint64_t v18 = obj;
        uint64_t v19 = [obj countByEnumeratingWithState:&v87 objects:v106 count:16];
      }
      while (v19);
    }

    uint64_t v43 = [v64 count];
    if (v43)
    {
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      id v44 = v64;
      uint64_t v45 = [v44 countByEnumeratingWithState:&v83 objects:v93 count:16];
      if (v45)
      {
        uint64_t v46 = 0;
        uint64_t v47 = *(void *)v84;
        uint64_t v73 = v43 - 1;
        do
        {
          uint64_t v48 = 0;
          uint64_t v49 = v73 - v46;
          uint64_t v75 = v46 + v45;
          do
          {
            if (*(void *)v84 != v47) {
              objc_enumerationMutation(v44);
            }
            long long v50 = *(void **)(*((void *)&v83 + 1) + 8 * v48);
            dispatch_group_enter(group);
            id v51 = (void *)MEMORY[0x263F42568];
            v80[0] = MEMORY[0x263EF8330];
            v80[1] = 3221225472;
            v80[2] = __51__HMDHome__handleCharacteristicEnableNotification___block_invoke;
            v80[3] = &unk_264A2B138;
            id v82 = v91;
            long long v81 = group;
            __int16 v52 = [v51 messageWithMessage:v71 messagePayload:0 responseHandler:v80];
            __int16 v53 = (void *)[v52 mutableCopy];

            if (v49 != v48)
            {
              __int16 v54 = [MEMORY[0x263F08C38] UUID];
              [v53 setIdentifier:v54];
            }
            uint64_t v55 = objc_msgSend(v44, "objectForKey:", v50, v61);
            [v50 enableNotification:v69 != 0 forCharacteristicIDs:v55 message:v53 clientIdentifier:v67];

            ++v48;
          }
          while (v45 != v48);
          uint64_t v45 = [v44 countByEnumeratingWithState:&v83 objects:v93 count:16];
          uint64_t v46 = v75;
        }
        while (v45);
      }

      __int16 v56 = [(HMDHome *)self workQueue];
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = __51__HMDHome__handleCharacteristicEnableNotification___block_invoke_2;
      block[3] = &unk_264A2F0A0;
      id v78 = v71;
      long long v79 = v91;
      dispatch_group_notify(group, v56, block);

      long long v57 = (void (**)(void, void, void))v78;
    }
    else
    {
      long long v57 = [v71 responseHandler];
      id v58 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      ((void (**)(void, void *, void))v57)[2](v57, v58, 0);
    }
    _Block_object_dispose(v91, 8);
  }
LABEL_49:
}

void __51__HMDHome__handleCharacteristicEnableNotification___block_invoke(uint64_t a1, void *a2)
{
  id v7 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = *(void *)(v4 + 40);
  BOOL v5 = (id *)(v4 + 40);
  if (!v6) {
    objc_storeStrong(v5, a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __51__HMDHome__handleCharacteristicEnableNotification___block_invoke_2(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) responseHandler];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) responseHandler];
    (*((void (**)(id, void, void))v3 + 2))(v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
  }
}

- (void)_handlePendingResponsesTimerFired:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v4 = self;
  uint64_t v60 = *MEMORY[0x263EF8340];
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  BOOL v5 = [(HMDHome *)self pendingResponses];
  uint64_t v6 = [v5 allValues];
  id v7 = (void *)[v6 copy];

  BOOL v8 = v3;
  obuint64_t j = v7;
  uint64_t v48 = [v7 countByEnumeratingWithState:&v49 objects:v59 count:16];
  if (v48)
  {
    uint64_t v47 = *(void *)v50;
    *(void *)&long long v9 = 138543618;
    long long v43 = v9;
    uint64_t v46 = v4;
    do
    {
      for (uint64_t i = 0; i != v48; ++i)
      {
        if (*(void *)v50 != v47) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v49 + 1) + 8 * i);
        if (!objc_msgSend(v11, "pendingResponseCount", v43))
        {
          long long v12 = [v11 allResponses];
          uint64_t v13 = [v12 count];

          if (!v13)
          {
            long long v21 = (void *)MEMORY[0x230FBD990]();
            long long v22 = v4;
            int v23 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v24 = HMFGetLogIdentifier();
              __int16 v25 = [v11 originalRequestIdentifier];
              *(_DWORD *)buf = v43;
              __int16 v54 = v24;
              __int16 v55 = 2112;
              __int16 v56 = v25;
              _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_DEBUG, "%{public}@Removing pending response for identifier %@ - all responses received", buf, 0x16u);
            }
            uint64_t v17 = [(HMDHome *)v22 pendingResponses];
            long long v20 = [v11 originalRequestIdentifier];
            [v17 removeObjectForKey:v20];
            goto LABEL_15;
          }
        }
        long long v14 = [v11 requestMessage];
        int v15 = [v14 BOOLForKey:@"kMultiPartResponseKey"];

        if (v15)
        {
          long long v16 = [v11 retrieveAndClearLatestResponses];
          uint64_t v17 = objc_msgSend(v16, "na_map:", &__block_literal_global_1744);

          if ([v17 count])
          {
            uint64_t v18 = [v11 requestMessage];
            uint64_t v19 = [v11 originalRequestIdentifier];
            [(HMDHome *)v4 _handleSendingNotificationsForRequest:v18 requestIdentifier:v19 supportsMultiPartResponse:1 characteristicUpdates:v17 completion:0];
          }
          long long v20 = [(HMDHome *)v4 pendingResponsesTimer];
          [v20 resume];
LABEL_15:
        }
        if (!v8)
        {
          if ([v11 pendingResponseCount])
          {
            double Current = CFAbsoluteTimeGetCurrent();
            [v11 creationTime];
            if (Current - v27 <= *(double *)&pendingResponseMaxPeriod) {
              continue;
            }
          }
        }
        id v28 = [v11 requestMessage];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = 0;
        }
        id v30 = v29;

        long long v31 = [v11 retrieveAndClearAllResponses];
        if (v30)
        {
          id v32 = [v30 identifier];
          long long v33 = [v30 responseHandler];
          [(HMDHome *)v4 _notifyChangedCharacteristics:v31 identifier:v32 multiPartResponse:1 moreMessagesInMultipart:0 requestMessage:v30 withCompletionHandler:v33];
        }
        id v34 = (void *)MEMORY[0x230FBD990]();
        id v35 = v4;
        __int16 v36 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          long long v37 = HMFGetLogIdentifier();
          [v30 identifier];
          long long v38 = v45 = v34;
          [v11 originalRequestIdentifier];
          v40 = BOOL v39 = v8;
          *(_DWORD *)buf = 138543874;
          __int16 v54 = v37;
          __int16 v55 = 2112;
          __int16 v56 = v38;
          __int16 v57 = 2112;
          id v58 = v40;
          _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_DEBUG, "%{public}@Removing pending response and notifying changes for message identifier: %@(%@)", buf, 0x20u);

          BOOL v8 = v39;
          id v34 = v45;
        }
        id v41 = [(HMDHome *)v35 pendingResponses];
        __int16 v42 = [v11 originalRequestIdentifier];
        [v41 removeObjectForKey:v42];

        uint64_t v4 = v46;
      }
      uint64_t v48 = [obj countByEnumeratingWithState:&v49 objects:v59 count:16];
    }
    while (v48);
  }
}

HMDCharacteristicUpdateTuple *__45__HMDHome__handlePendingResponsesTimerFired___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  BOOL v3 = [v2 error];

  if (v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    BOOL v5 = [HMDCharacteristicUpdateTuple alloc];
    uint64_t v6 = [v2 request];
    id v7 = [v6 characteristic];
    BOOL v8 = [v2 value];
    uint64_t v4 = [(HMDCharacteristicUpdateTuple *)v5 initWithCharacteristic:v7 updatedValue:v8 isBroadcast:0];
  }
  return v4;
}

- (void)_handleSendingNotificationsForRequest:(id)a3 requestIdentifier:(id)a4 supportsMultiPartResponse:(BOOL)a5 characteristicUpdates:(id)a6 completion:(id)a7
{
  BOOL v9 = a5;
  uint64_t v52 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  int v15 = (void (**)(id, void *))a7;
  long long v16 = [v12 destination];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  id v18 = v17;

  if ([v12 isRemote]
    && ([v18 device],
        uint64_t v19 = objc_claimAutoreleasedReturnValue(),
        [v19 remoteDestinationString],
        long long v20 = objc_claimAutoreleasedReturnValue(),
        v20,
        v19,
        v20))
  {
    long long v21 = (void *)MEMORY[0x230FBD990]();
    long long v22 = self;
    int v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      long long v37 = (void *)v24;
      uint64_t v25 = [v12 shortDescription];
      int v26 = "single";
      if (v9) {
        int v26 = "multi";
      }
      id v34 = v26;
      id v35 = (void *)v25;
      double v27 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v14, "count"));
      __int16 v36 = [v18 device];
      [v36 remoteDestinationString];
      *(_DWORD *)buf = 138544898;
      uint64_t v39 = v24;
      __int16 v40 = 2112;
      id v41 = v35;
      __int16 v42 = 2080;
      long long v43 = v34;
      __int16 v44 = 2112;
      uint64_t v45 = v27;
      __int16 v46 = 2112;
      id v47 = v14;
      __int16 v48 = 2112;
      id v49 = v13;
      v51 = __int16 v50 = 2112;
      id v28 = (void *)v51;
      _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Response notification for %@ (%s part) [%@] with chars: %@ with id: %@ to device: %@", buf, 0x48u);
    }
    uint64_t v29 = [MEMORY[0x263F08C38] UUID];
    id v30 = [v29 UUIDString];
    long long v31 = [v18 device];
    id v32 = [v31 remoteDestinationString];
    [(HMDHome *)v22 _notifyUpdatedCharacteristic:v14 withRequestIdentifier:v13 notificationUpdateIdentifier:v30 toUserDeviceAddress:v32 completion:v15];
  }
  else if (v15)
  {
    long long v33 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    v15[2](v15, v33);
  }
}

- (void)_handleMultipleCharacteristicRead:(id)a3
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = [MEMORY[0x263F424F0] currentActivity];
  if ([v4 isRemote] && (objc_msgSend(v4, "isSecureRemote") & 1) == 0)
  {
    long long v16 = (void *)MEMORY[0x230FBD990]();
    uint64_t v17 = self;
    id v18 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    uint64_t v19 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v38 = v19;
    __int16 v39 = 2112;
    id v40 = v4;
    long long v20 = "%{public}@Message not supported: %@";
    long long v21 = v18;
    uint32_t v22 = 22;
    goto LABEL_21;
  }
  if ([v4 isEntitledForSPIAccess] & 1) != 0 || (objc_msgSend(v4, "isRemote"))
  {
    id v36 = 0;
    uint64_t v6 = [(HMDHome *)self _readRequestTuplesFromMessage:v4 outUnhandledRequests:&v36];
    id v7 = v36;
    if ([v6 count])
    {
      if ([v7 count])
      {
        BOOL v8 = (void *)MEMORY[0x230FBD990]();
        BOOL v9 = self;
        uint64_t v10 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          uint64_t v11 = HMFGetLogIdentifier();
          id v12 = [v4 shortDescription];
          *(_DWORD *)buf = 138543874;
          long long v38 = v11;
          __int16 v39 = 2112;
          id v40 = v12;
          __int16 v41 = 2112;
          id v42 = v7;
          _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@%@ has characteristic requests that cannot be handled: %@", buf, 0x20u);
        }
      }
      uint64_t v13 = [v4 source];
      [v6 count];
      [v4 isRemote];
      id v14 = [v4 userForHome:self];
      if (v14
        && ![(HMDHome *)self areCharacteristicRequests:v6 allowedForUser:v14])
      {
        uint64_t v29 = (void *)MEMORY[0x230FBD990]();
        id v30 = self;
        long long v31 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          id v32 = HMFGetLogIdentifier();
          long long v33 = [v14 restrictedGuestAccessSettings];
          [v33 uuidsOfAllowedAccessories];
          id v34 = v35 = v29;
          *(_DWORD *)buf = 138544130;
          long long v38 = v32;
          __int16 v39 = 2112;
          id v40 = v4;
          __int16 v41 = 2112;
          id v42 = v14;
          __int16 v43 = 2112;
          __int16 v44 = v34;
          _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_INFO, "%{public}@Rejecting message which is not allowed for user. Message: %@, user: %@, allowedAccessories: %@", buf, 0x2Au);

          uint64_t v29 = v35;
        }

        int v15 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2906];
        [v4 respondWithError:v15];
      }
      else
      {
        [(HMDHome *)self startReportingSessionForMessage:v4];
        int v15 = [(HMDHome *)self __readWriteResponseHandler:v4 unhandledRequests:v7];
        [(HMDHome *)self _readCharacteristicValues:v6 requestMessage:v4 source:v13 withCompletionHandler:v15];
      }
    }
    else
    {
      int v23 = (void *)MEMORY[0x230FBD990]();
      uint64_t v24 = self;
      uint64_t v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v38 = v26;
        _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@None of the characteristics/properties in multi-read are valid", buf, 0xCu);
      }
      id v14 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      [v14 domain];

      [v14 code];
      double v27 = [v4 responseHandler];

      if (!v27) {
        goto LABEL_28;
      }
      int v15 = [v4 responseHandler];
      ((void (**)(void, void *, void))v15)[2](v15, v14, 0);
    }

LABEL_28:
    goto LABEL_29;
  }
  long long v16 = (void *)MEMORY[0x230FBD990]();
  uint64_t v17 = self;
  id v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v38 = v19;
    long long v20 = "%{public}@Client does not have entitlement to use SPI";
    long long v21 = v18;
    uint32_t v22 = 12;
LABEL_21:
    _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_DEFAULT, v20, buf, v22);
  }
LABEL_22:

  id v7 = [MEMORY[0x263F087E8] hmErrorWithCode:17];
  [v7 domain];

  [v7 code];
  id v28 = [v4 responseHandler];

  if (v28)
  {
    uint64_t v6 = [v4 responseHandler];
    ((void (**)(void, id, void))v6)[2](v6, v7, 0);
LABEL_29:
  }
}

- (void)_handleCharacteristicRead:(id)a3
{
  v64[1] = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = [v4 messagePayload];
  uint64_t v6 = objc_msgSend(v5, "hmf_UUIDForKey:", @"kAccessoryUUID");

  id v7 = [(HMDHome *)self accessoryWithUUID:v6];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    BOOL v8 = v7;
  }
  else {
    BOOL v8 = 0;
  }
  id v9 = v8;

  if (v9)
  {
    uint64_t v10 = [v4 messagePayload];
    uint64_t v11 = [v10 objectForKeyedSubscript:@"kServiceInstanceID"];

    id v12 = [v4 messagePayload];
    uint64_t v13 = [v12 objectForKeyedSubscript:@"kCharacteristicInstanceID"];

    id v14 = [v9 findService:v11];
    uint64_t v15 = [v14 findCharacteristic:v13];
    long long v16 = (void *)v15;
    if (v15)
    {
      __int16 v48 = v11;
      v64[0] = v15;
      uint64_t v17 = [MEMORY[0x263EFF8C0] arrayWithObjects:v64 count:1];
      id v49 = 0;
      BOOL v18 = [(HMDHome *)self _isReadRequestAllowForCharacteristics:v17 message:v4 error:&v49];
      id v19 = v49;

      if (v18)
      {
        id v45 = v19;
        long long v20 = +[HMDCharacteristicRequest requestWithCharacteristic:v16];
        __int16 v43 = (void *)[v4 source];
        uint64_t v21 = [v4 userForHome:self];
        __int16 v46 = (void *)v21;
        id v47 = v20;
        if (v21
          && (uint64_t v22 = v21,
              long long v63 = v20,
              [MEMORY[0x263EFF8C0] arrayWithObjects:&v63 count:1],
              int v23 = objc_claimAutoreleasedReturnValue(),
              LOBYTE(v22) = [(HMDHome *)self areCharacteristicRequests:v23 allowedForUser:v22], v23, long long v20 = v47, (v22 & 1) == 0))
        {
          __int16 v44 = (void *)MEMORY[0x230FBD990]();
          id v34 = self;
          id v35 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            id v36 = HMFGetLogIdentifier();
            contexta = [v46 restrictedGuestAccessSettings];
            uint64_t v37 = [contexta uuidsOfAllowedAccessories];
            *(_DWORD *)buf = 138544130;
            uint64_t v52 = v36;
            __int16 v53 = 2112;
            uint64_t v54 = (uint64_t)v4;
            __int16 v55 = 2112;
            __int16 v56 = v46;
            __int16 v57 = 2112;
            uint64_t v58 = v37;
            long long v38 = (void *)v37;
            _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_INFO, "%{public}@Rejecting message which is not allowed for user. Message: %@, user: %@, allowedAccessories: %@", buf, 0x2Au);

            long long v20 = v47;
          }

          long long v31 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2906];
          [v4 respondWithError:v31];
        }
        else
        {
          context = (void *)MEMORY[0x230FBD990]();
          uint64_t v24 = self;
          uint64_t v25 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            __int16 v39 = HMFGetLogIdentifier();
            uint64_t v26 = [v4 shortDescription];
            [v6 UUIDString];
            double v27 = v40 = v14;
            uint64_t v28 = [v9 uniqueIdentifier];
            *(_DWORD *)buf = 138544642;
            uint64_t v52 = v39;
            __int16 v53 = 2112;
            uint64_t v54 = v26;
            uint64_t v29 = (void *)v26;
            __int16 v55 = 2112;
            __int16 v56 = v27;
            __int16 v57 = 2112;
            uint64_t v58 = v28;
            id v30 = (void *)v28;
            __int16 v59 = 2112;
            uint64_t v60 = v48;
            __int16 v61 = 2112;
            long long v62 = v13;
            _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_INFO, "%{public}@Processing single characteristic read request: %@ (%@/%@/%@/%@) as a special case of multiple characteristic read requests", buf, 0x3Eu);

            long long v20 = v47;
            id v14 = v40;
          }
          __int16 v50 = v20;
          long long v31 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v50 count:1];
          id v32 = [(HMDHome *)v24 __readWriteResponseHandler:v4 unhandledRequests:0];
          [(HMDHome *)v24 _readCharacteristicValues:v31 requestMessage:v4 source:v43 withCompletionHandler:v32];

          long long v20 = v47;
        }

        id v19 = v45;
      }
      else
      {
        [v4 respondWithError:v19];
      }

      uint64_t v11 = v48;
    }
    else
    {
      long long v33 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      [v4 respondWithError:v33];
    }
  }
  else
  {
    uint64_t v11 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v4 respondWithError:v11];
  }
}

- (BOOL)_isReadRequestAllowForCharacteristics:(id)a3 message:(id)a4 error:(id *)a5
{
  id v8 = a4;
  if ([(HMDHome *)self requiresUnlockToAccessCharacteristics:a3 withMessage:v8]&& ![(HMDHome *)self isAccessAllowedForCharacteristicsWithMessage:v8])
  {
    if (a5)
    {
      HMDSecureAccessErrorCodeForMessage(v8, [v8 source]);
      BOOL v9 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      BOOL v9 = 0;
    }
  }
  else
  {
    BOOL v9 = 1;
  }

  return v9;
}

- (id)_readRequestTuplesFromMessage:(id)a3 outUnhandledRequests:(id *)a4
{
  id v32 = a4;
  uint64_t v65 = *MEMORY[0x263EF8340];
  id v33 = a3;
  id v4 = [v33 dictionaryForKey:@"kAccessoriesListKey"];
  BOOL v5 = [MEMORY[0x263EFF980] array];
  id v47 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  obuint64_t j = v4;
  uint64_t v36 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
  if (v36)
  {
    uint64_t v34 = *(void *)v59;
    __int16 v46 = v5;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v59 != v34) {
          objc_enumerationMutation(obj);
        }
        uint64_t v38 = v6;
        uint64_t v7 = *(void *)(*((void *)&v58 + 1) + 8 * v6);
        id v8 = objc_msgSend(obj, "hmf_dictionaryForKey:", v7, v32);
        uint64_t v48 = v7;
        BOOL v9 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v7];
        uint64_t v10 = [(HMDHome *)self accessoryWithUUID:v9];

        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        id v40 = v11;

        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        id v12 = v8;
        BOOL v5 = v46;
        uint64_t v42 = [v12 countByEnumeratingWithState:&v54 objects:v63 count:16];
        if (v42)
        {
          uint64_t v41 = *(void *)v55;
          id v39 = v12;
          do
          {
            for (uint64_t i = 0; i != v42; ++i)
            {
              if (*(void *)v55 != v41) {
                objc_enumerationMutation(v12);
              }
              uint64_t v14 = *(void *)(*((void *)&v54 + 1) + 8 * i);
              uint64_t v15 = objc_msgSend(v12, "hmf_arrayForKey:", v14);
              long long v16 = objc_msgSend(v15, "na_map:", &__block_literal_global_1724);

              uint64_t v17 = HAPInstanceIDFromValue();
              if (v17)
              {
                uint64_t v45 = i;
                __int16 v43 = v17;
                BOOL v18 = [v40 findService:v17];
                long long v50 = 0u;
                long long v51 = 0u;
                long long v52 = 0u;
                long long v53 = 0u;
                __int16 v44 = v16;
                id v19 = v16;
                uint64_t v20 = [v19 countByEnumeratingWithState:&v50 objects:v62 count:16];
                if (v20)
                {
                  uint64_t v21 = v20;
                  uint64_t v22 = *(void *)v51;
                  do
                  {
                    for (uint64_t j = 0; j != v21; ++j)
                    {
                      if (*(void *)v51 != v22) {
                        objc_enumerationMutation(v19);
                      }
                      uint64_t v24 = *(void *)(*((void *)&v50 + 1) + 8 * j);
                      uint64_t v25 = [v18 findCharacteristic:v24];
                      if (v25)
                      {
                        [v5 addObject:v25];
                      }
                      else
                      {
                        objc_msgSend(v47, "hmf_mutableDictionaryForKey:", v48);
                        id v26 = (id)objc_claimAutoreleasedReturnValue();
                        if (!v26)
                        {
                          id v26 = objc_alloc_init(MEMORY[0x263EFF9A0]);
                          [v47 setObject:v26 forKeyedSubscript:v48];
                        }
                        objc_msgSend(v26, "hmf_mutableArrayForKey:", v14);
                        id v27 = (id)objc_claimAutoreleasedReturnValue();
                        if (!v27)
                        {
                          id v27 = objc_alloc_init(MEMORY[0x263EFF980]);
                          [v26 setObject:v27 forKeyedSubscript:v14];
                        }
                        [v27 addObject:v24];

                        BOOL v5 = v46;
                      }
                    }
                    uint64_t v21 = [v19 countByEnumeratingWithState:&v50 objects:v62 count:16];
                  }
                  while (v21);
                }

                id v12 = v39;
                long long v16 = v44;
                uint64_t i = v45;
                uint64_t v17 = v43;
              }
            }
            uint64_t v42 = [v12 countByEnumeratingWithState:&v54 objects:v63 count:16];
          }
          while (v42);
        }

        uint64_t v6 = v38 + 1;
      }
      while (v38 + 1 != v36);
      uint64_t v36 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
    }
    while (v36);
  }

  if (v32) {
    id *v32 = (id)[v47 copy];
  }
  id v49 = 0;
  BOOL v28 = -[HMDHome _isReadRequestAllowForCharacteristics:message:error:](self, "_isReadRequestAllowForCharacteristics:message:error:", v5, v33, &v49, v32);
  id v29 = v49;
  if (v28)
  {
    id v30 = objc_msgSend(v5, "na_map:", &__block_literal_global_1726);
  }
  else
  {
    [v33 respondWithError:v29];
    id v30 = 0;
  }

  return v30;
}

HMDCharacteristicRequest *__62__HMDHome__readRequestTuplesFromMessage_outUnhandledRequests___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return +[HMDCharacteristicRequest requestWithCharacteristic:a2];
}

uint64_t __62__HMDHome__readRequestTuplesFromMessage_outUnhandledRequests___block_invoke()
{
  return HAPInstanceIDFromValue();
}

- (void)_readCharacteristicValues:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 withCompletionHandler:(id)a6
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v11 = a3;
  id v12 = a4;
  id v13 = a6;
  id v14 = objc_alloc(MEMORY[0x263F424F0]);
  uint64_t v15 = NSString;
  long long v16 = MEMORY[0x230FBBCF0](self, a2);
  uint64_t v17 = [v15 stringWithFormat:@"%@, %s:%ld", v16, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 26570];
  id v27 = (void *)[v14 initWithName:v17];

  LOBYTE(v14) = [(HMDHome *)self isCurrentDeviceAvailableResident];
  BOOL v18 = (void *)MEMORY[0x230FBD990]();
  id v19 = self;
  if (v14)
  {
    HMFGetOSLogHandle();
    uint64_t v20 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v21 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v22 = [v12 shortDescription];
      *(_DWORD *)buf = 138543618;
      id v29 = v21;
      __int16 v30 = 2112;
      long long v31 = v22;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Running new accessory communication logic for resident. %@", buf, 0x16u);
    }
  }
  else
  {
    HMFGetOSLogHandle();
    uint64_t v20 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v23 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v24 = [v12 shortDescription];
      *(_DWORD *)buf = 138543618;
      id v29 = v23;
      __int16 v30 = 2112;
      long long v31 = v24;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Routing accessory read requests using Resident First logic. %@", buf, 0x16u);
    }
  }

  uint64_t v25 = [(HMDHome *)v19 _createMessageForReadWriteRequest:v12 source:a5 withCompletionHandler:v13];
  id v26 = [(HMDHome *)v19 accessoryReaderWriter];
  [v26 submitReadRequests:v11 sourceType:a5 requestMessage:v25];

  __HMFActivityScopeLeave();
}

- (void)readCharacteristicValues:(id)a3 source:(unint64_t)a4 sourceForLogging:(id)a5 qualityOfService:(int64_t)a6 withCompletionHandler:(id)a7
{
  id v13 = a3;
  id v14 = a5;
  id v15 = a7;
  id v16 = objc_alloc(MEMORY[0x263F424F0]);
  uint64_t v17 = NSString;
  BOOL v18 = MEMORY[0x230FBBCF0](self, a2);
  id v19 = [v17 stringWithFormat:@"%@, %s:%ld", v18, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 26179];
  id v32 = (id)[v16 initWithName:v19];

  uint64_t v20 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __99__HMDHome_readCharacteristicValues_source_sourceForLogging_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_264A16E78;
  id v25 = v32;
  id v26 = self;
  id v27 = v14;
  id v28 = v13;
  int64_t v30 = a6;
  unint64_t v31 = a4;
  id v29 = v15;
  id v21 = v15;
  id v22 = v13;
  id v23 = v14;
  dispatch_async(v20, block);

  __HMFActivityScopeLeave();
}

void __99__HMDHome_readCharacteristicValues_source_sourceForLogging_qualityOfService_withCompletionHandler___block_invoke(uint64_t a1)
{
  v20[1] = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x263F42568];
  uint64_t v3 = *(void *)(a1 + 72);
  id v4 = [MEMORY[0x263F42570] allMessageDestinations];
  id v19 = @"kMultiPartResponseKey";
  v20[0] = MEMORY[0x263EFFA80];
  BOOL v5 = [NSDictionary dictionaryWithObjects:v20 forKeys:&v19 count:1];
  uint64_t v6 = [v2 messageWithName:@"kMultipleCharacteristicReadRequestKey" qualityOfService:v3 destination:v4 payload:v5];

  uint64_t v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 40);
  BOOL v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    id v11 = [v6 identifier];
    uint64_t v12 = *(void *)(a1 + 48);
    int v13 = 138543874;
    id v14 = v10;
    __int16 v15 = 2114;
    id v16 = v11;
    __int16 v17 = 2114;
    uint64_t v18 = v12;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Issuing read requests with identifier %{public}@, Source: %{public}@", (uint8_t *)&v13, 0x20u);
  }
  [*(id *)(a1 + 40) _readCharacteristicValues:*(void *)(a1 + 56) requestMessage:v6 source:*(void *)(a1 + 80) withCompletionHandler:*(void *)(a1 + 64)];
}

- (void)readCharacteristicValues:(id)a3 source:(unint64_t)a4 qualityOfService:(int64_t)a5 withCompletionHandler:(id)a6
{
}

- (id)_getLogEventsForOperation:(BOOL)a3 startTime:(double)a4 accessories:(id)a5 requestMap:(id)a6 identifier:(id)a7 userUUID:(id)a8 source:(unint64_t)a9 bundleID:(id)a10
{
  BOOL v14 = a3;
  uint64_t v91 = *MEMORY[0x263EF8340];
  id v16 = a5;
  id v17 = a6;
  id v67 = a7;
  id v66 = a8;
  id v65 = a10;
  uint64_t v74 = [MEMORY[0x263EFF9C0] set];
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  obuint64_t j = v16;
  uint64_t v18 = [obj countByEnumeratingWithState:&v84 objects:v90 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v85;
    do
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        if (*(void *)v85 != v20) {
          objc_enumerationMutation(obj);
        }
        id v22 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:*(void *)(*((void *)&v84 + 1) + 8 * i)];
        id v23 = [(HMDHome *)self accessoryWithUUID:v22];

        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        id v25 = v24;

        if (v25)
        {
          if (([v25 isPrimary] & 1) == 0)
          {
            id v23 = [v25 bridge];
          }
          id v26 = [v23 uuid];
          id v27 = [v26 UUIDString];
          [v74 addObject:v27];
        }
      }
      uint64_t v19 = [obj countByEnumeratingWithState:&v84 objects:v90 count:16];
    }
    while (v19);
  }

  objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(v17, "count"));
  id v64 = (id)objc_claimAutoreleasedReturnValue();
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  id v28 = v17;
  uint64_t v29 = [v28 countByEnumeratingWithState:&v80 objects:v89 count:16];
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)v81;
    uint64_t v32 = 2;
    if (v14) {
      uint64_t v32 = 3;
    }
    uint64_t v60 = v32;
    uint64_t v61 = *(void *)v81;
    id v62 = v28;
    do
    {
      uint64_t v33 = 0;
      uint64_t v68 = v30;
      do
      {
        if (*(void *)v81 != v31) {
          objc_enumerationMutation(v28);
        }
        uint64_t v34 = *(void **)(*((void *)&v80 + 1) + 8 * v33);
        id v35 = [v34 uuid];
        uint64_t v36 = [v35 UUIDString];

        if ([v74 containsObject:v36])
        {
          uint64_t v72 = v36;
          uint64_t v73 = v33;
          id v37 = v34;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v38 = v37;
          }
          else {
            uint64_t v38 = 0;
          }
          id v39 = v38;
          id v70 = v37;

          __int16 v71 = v39;
          id v40 = [v28 objectForKey:v39];
          uint64_t v41 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v40, "count"));
          uint64_t v42 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v40, "count"));
          long long v76 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          id v43 = v40;
          uint64_t v44 = [v43 countByEnumeratingWithState:&v76 objects:v88 count:16];
          if (v44)
          {
            uint64_t v45 = v44;
            uint64_t v46 = *(void *)v77;
            do
            {
              for (uint64_t j = 0; j != v45; ++j)
              {
                if (*(void *)v77 != v46) {
                  objc_enumerationMutation(v43);
                }
                uint64_t v48 = *(void **)(*((void *)&v76 + 1) + 8 * j);
                id v49 = [v48 characteristic];
                [v41 addObject:v49];

                id v50 = v48;
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  long long v51 = v50;
                }
                else {
                  long long v51 = 0;
                }
                id v52 = v51;

                if (v14 && v52)
                {
                  long long v53 = [v52 value];
                  if (v53)
                  {
                    [v42 addObject:v53];
                  }
                  else
                  {
                    long long v54 = [MEMORY[0x263EFF9D0] null];
                    [v42 addObject:v54];
                  }
                }
              }
              uint64_t v45 = [v43 countByEnumeratingWithState:&v76 objects:v88 count:16];
            }
            while (v45);
          }

          uint64_t v75 = 0;
          long long v55 = [v71 preferredHAPAccessoryForOperation:v60 linkType:&v75];
          LOBYTE(v59) = 0;
          LOBYTE(v58) = 0;
          long long v56 = [[HMDCharacteristicReadWriteLogEvent alloc] initWithStartTime:v41 characteristics:v70 hmdAccessory:v55 hapAccessory:a9 source:v14 isWriteOperation:0 isTimedWrite:a4 isLocal:v58 transactionId:v67 isCached:v59 bundleId:v65 userUUID:v66 writtenValues:v42];
          uint64_t v36 = v72;
          [v64 setObject:v56 forKeyedSubscript:v72];

          uint64_t v31 = v61;
          id v28 = v62;
          uint64_t v30 = v68;
          uint64_t v33 = v73;
        }
        else
        {
          isWatch();
        }

        ++v33;
      }
      while (v33 != v30);
      uint64_t v30 = [v28 countByEnumeratingWithState:&v80 objects:v89 count:16];
    }
    while (v30);
  }

  return v64;
}

- (void)readCharacteristicValues:(id)a3 identifier:(id)a4 source:(unint64_t)a5 qualityOfService:(int64_t)a6 withCompletionHandler:(id)a7
{
  id v13 = a3;
  id v14 = a4;
  id v15 = a7;
  id v16 = objc_alloc(MEMORY[0x263F424F0]);
  id v17 = NSString;
  uint64_t v18 = MEMORY[0x230FBBCF0](self, a2);
  uint64_t v19 = [v17 stringWithFormat:@"%@, %s:%ld", v18, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 25734];
  uint64_t v20 = (void *)[v16 initWithName:v19];

  id v21 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_264A16E78;
  id v27 = v20;
  id v28 = v13;
  id v31 = v15;
  unint64_t v32 = a5;
  int64_t v33 = a6;
  uint64_t v29 = self;
  id v30 = v14;
  id v22 = v14;
  id v23 = v15;
  id v24 = v13;
  id v25 = v20;
  dispatch_async(v21, block);
}

void __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke(uint64_t a1)
{
  location[3] = *(id *)MEMORY[0x263EF8340];
  if ([*(id *)(a1 + 40) count])
  {
    objc_initWeak(location, *(id *)(a1 + 48));
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke_1720;
    aBlock[3] = &unk_264A16E50;
    objc_copyWeak(&v17, location);
    id v16 = *(id *)(a1 + 64);
    id v13 = *(id *)(a1 + 32);
    long long v18 = *(_OWORD *)(a1 + 72);
    id v14 = *(id *)(a1 + 56);
    id v15 = *(id *)(a1 + 40);
    id v2 = (void (**)(void))_Block_copy(aBlock);
    if ([*(id *)(a1 + 48) _shouldWaitForAccessoriesToBeReachable])
    {
      uint64_t v3 = *(void *)(a1 + 40);
      id v4 = [*(id *)(a1 + 48) workQueue];
      BOOL v5 = +[HMDHomeAssistantOperation homeAssistantOperationWithReadRequests:v3 queue:v4];

      [*(id *)(a1 + 48) _performOperation:v5 completion:v2];
    }
    else
    {
      v2[2](v2);
    }

    objc_destroyWeak(&v17);
    objc_destroyWeak(location);
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = *(id *)(a1 + 48);
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      BOOL v9 = HMFGetLogIdentifier();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v9;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Empty characteristics array was given", (uint8_t *)location, 0xCu);
    }
    uint64_t v10 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:3 userInfo:0];
    uint64_t v11 = *(void *)(a1 + 64);
    if (v11) {
      (*(void (**)(uint64_t, void *, void))(v11 + 16))(v11, v10, 0);
    }
  }
}

void __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke_1720(uint64_t a1)
{
  v29[2] = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    [*(id *)(a1 + 32) begin];
    v28[0] = @"sourceType";
    uint64_t v3 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 72)];
    v28[1] = @"kMultiPartResponseKey";
    v29[0] = v3;
    v29[1] = MEMORY[0x263EFFA88];
    id v4 = [NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:2];

    id v5 = objc_alloc(MEMORY[0x263F42590]);
    uint64_t v6 = *(void *)(a1 + 80);
    id v7 = [MEMORY[0x263F42570] allMessageDestinations];
    id v8 = (void *)[v5 initWithName:@"kMultipleCharacteristicReadRequestKey" qualityOfService:v6 destination:v7 payload:v4];

    BOOL v9 = (void *)MEMORY[0x230FBD990]([v8 setIdentifier:*(void *)(a1 + 40)]);
    id v10 = WeakRetained;
    uint64_t v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      id v13 = [v8 identifier];
      unint64_t v14 = *(void *)(a1 + 72);
      if (v14 > 9) {
        id v15 = @"Unknown";
      }
      else {
        id v15 = off_264A1BC48[v14];
      }
      id v21 = v15;
      int v22 = 138543874;
      id v23 = v12;
      __int16 v24 = 2114;
      id v25 = v13;
      __int16 v26 = 2114;
      id v27 = v21;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Issuing read requests with identifier %{public}@, Source: %{public}@", (uint8_t *)&v22, 0x20u);
    }
    [v10 _readCharacteristicValues:*(void *)(a1 + 48) requestMessage:v8 source:*(void *)(a1 + 72) withCompletionHandler:*(void *)(a1 + 56)];
    [*(id *)(a1 + 32) end];
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 56);
    if (v16)
    {
      id v17 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:3 userInfo:0];
      (*(void (**)(uint64_t, void *, void))(v16 + 16))(v16, v17, 0);
    }
    long long v18 = (void *)MEMORY[0x230FBD990]();
    uint64_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = HMFGetLogIdentifier();
      int v22 = 138543362;
      id v23 = v20;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform read request", (uint8_t *)&v22, 0xCu);
    }
  }
}

- (void)_performOperation:(id)a3 completion:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHome *)self assistantOperations];

  if (!v8)
  {
    BOOL v9 = [MEMORY[0x263EFF980] array];
    [(HMDHome *)self setAssistantOperations:v9];
  }
  id v10 = [(HMDHome *)self assistantOperations];
  [v10 addObject:v6];

  objc_initWeak(&location, self);
  objc_initWeak(&from, v6);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  void v12[2] = __40__HMDHome__performOperation_completion___block_invoke;
  v12[3] = &unk_264A16E28;
  id v11 = v7;
  id v13 = v11;
  objc_copyWeak(&v14, &from);
  objc_copyWeak(&v15, &location);
  [v6 startWithCompletion:v12];
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v14);

  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void __40__HMDHome__performOperation_completion___block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v2 = objc_loadWeakRetained((id *)(a1 + 48));
    uint64_t v3 = [v2 assistantOperations];
    [v3 removeObject:WeakRetained];
  }
}

- (BOOL)_shouldWaitForAccessoriesToBeReachable
{
  if (isWatch())
  {
    uint64_t v3 = +[HMDWatchSystemState sharedState];
    if ([v3 isCompanionReachable])
    {
      LOBYTE(v4) = 0;
    }
    else
    {
      id v5 = [(HMDHome *)self residentDeviceManager];
      id v6 = [v5 primaryResidentDevice];
      int v4 = [v6 isReachable] ^ 1;
    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

- (id)writeRequestTuplesFromMessage:(id)a3 outUnhandledRequests:(id *)a4
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = [v5 dictionaryForKey:@"kAccessoriesListKey"];
  id v57 = [MEMORY[0x263EFF980] array];
  id v40 = a4;
  if (a4) {
    id v52 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  }
  else {
    id v52 = 0;
  }
  id v7 = [v5 uuidForKey:@"kActionSetUUID"];
  if (v7) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = [v5 BOOLForKey:@"kShortActionKey"];
  }
  uint64_t v56 = v8;

  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  obuint64_t j = v6;
  BOOL v9 = v52;
  uint64_t v42 = [obj countByEnumeratingWithState:&v71 objects:v77 count:16];
  if (v42)
  {
    uint64_t v41 = *(void *)v72;
    uint64_t v58 = v5;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v72 != v41) {
          objc_enumerationMutation(obj);
        }
        uint64_t v44 = v10;
        uint64_t v11 = *(void *)(*((void *)&v71 + 1) + 8 * v10);
        uint64_t v12 = objc_msgSend(obj, "hmf_dictionaryForKey:", v11);
        uint64_t v54 = v11;
        id v13 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v11];
        id v14 = [(HMDHome *)self accessoryWithUUID:v13];

        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v15 = v14;
        }
        else {
          id v15 = 0;
        }
        id v46 = v15;

        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        id v16 = v12;
        BOOL v9 = v52;
        uint64_t v48 = [v16 countByEnumeratingWithState:&v67 objects:v76 count:16];
        if (v48)
        {
          uint64_t v47 = *(void *)v68;
          id v45 = v16;
          do
          {
            for (uint64_t i = 0; i != v48; ++i)
            {
              if (*(void *)v68 != v47) {
                objc_enumerationMutation(v16);
              }
              uint64_t v18 = *(void *)(*((void *)&v67 + 1) + 8 * i);
              uint64_t v19 = objc_msgSend(v16, "hmf_dictionaryForKey:", v18);
              uint64_t v55 = v18;
              uint64_t v20 = HAPInstanceIDFromValue();
              if (v20)
              {
                uint64_t v51 = i;
                id v49 = v20;
                uint64_t v60 = [v46 findService:v20];
                long long v63 = 0u;
                long long v64 = 0u;
                long long v65 = 0u;
                long long v66 = 0u;
                id v50 = v19;
                id v21 = v19;
                uint64_t v62 = [v21 countByEnumeratingWithState:&v63 objects:v75 count:16];
                if (!v62) {
                  goto LABEL_52;
                }
                uint64_t v22 = *(void *)v64;
                uint64_t v59 = *(void *)v64;
                while (1)
                {
                  uint64_t v23 = 0;
                  do
                  {
                    if (*(void *)v64 != v22) {
                      objc_enumerationMutation(v21);
                    }
                    uint64_t v24 = *(void *)(*((void *)&v63 + 1) + 8 * v23);
                    id v25 = HAPInstanceIDFromValue();
                    if (v25)
                    {
                      __int16 v26 = [v60 findCharacteristic:v25];
                      if (v26)
                      {
                        if ([v5 isRemote])
                        {
                          id v27 = [NSString stringWithFormat:@"%@-%@", v24, @"kAuthorizationDataKey"];
                          objc_msgSend(v21, "hmf_dataForKey:", v27);
                          id v28 = (id)objc_claimAutoreleasedReturnValue();
                          if (!v28)
                          {
                            uint64_t v29 = [v5 userForHome:self];
                            int v30 = [v29 isRestrictedGuest];

                            if (v30)
                            {
                              id v28 = [v26 authorizationData];
                            }
                            else
                            {
                              id v28 = 0;
                            }
                          }
                        }
                        else
                        {
                          id v28 = [v26 authorizationData];
                        }
                        unsigned int v61 = objc_msgSend(v21, "hmf_BOOLForKey:", @"HMDCharacteristicWriteRequestIncludeResponseValueKey");
                        if ([v5 isRemote])
                        {
                          unint64_t v32 = [NSString stringWithFormat:@"%@-%@", v24, @"kCharacteristicContextDataForWriteKey"];
                          objc_msgSend(v21, "hmf_dataForKey:", v32);
                          id v31 = (id)objc_claimAutoreleasedReturnValue();
                          goto LABEL_44;
                        }
                        unint64_t v33 = +[HMDHome sanitizedOriginalSourceForMessage:]((uint64_t)HMDHome, v5);
                        if (v33 - 2 >= 8 && v33)
                        {
                          id v31 = 0;
                        }
                        else
                        {
                          unint64_t v32 = [(HMDHome *)self currentUser];
                          uint64_t v34 = [v32 notificationContextHAPIdentifier];
                          id v31 = [v26 contextDataForWriteRequestWithIdentifier:v34];

LABEL_44:
                        }
                        id v35 = [v21 objectForKeyedSubscript:v24];
                        uint64_t v36 = [v58 identifier];
                        id v37 = +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:v26 value:v35 authorizationData:v28 identifier:v36 type:v56 includeResponseValue:v61 contextData:v31];

                        [v57 addObject:v37];
                        id v5 = v58;
                        uint64_t v22 = v59;
                      }
                      else
                      {
                        objc_msgSend(v52, "hmf_mutableDictionaryForKey:", v54);
                        id v28 = (id)objc_claimAutoreleasedReturnValue();
                        if (!v28)
                        {
                          id v28 = objc_alloc_init(MEMORY[0x263EFF9A0]);
                          [v52 setObject:v28 forKeyedSubscript:v54];
                        }
                        objc_msgSend(v28, "hmf_mutableArrayForKey:", v55);
                        id v31 = (id)objc_claimAutoreleasedReturnValue();
                        if (!v31)
                        {
                          id v31 = objc_alloc_init(MEMORY[0x263EFF980]);
                          [v28 setObject:v31 forKeyedSubscript:v55];
                        }
                        [v31 addObject:v25];
                      }
                    }
                    ++v23;
                  }
                  while (v62 != v23);
                  uint64_t v38 = [v21 countByEnumeratingWithState:&v63 objects:v75 count:16];
                  uint64_t v62 = v38;
                  if (!v38)
                  {
LABEL_52:

                    uint64_t i = v51;
                    BOOL v9 = v52;
                    id v16 = v45;
                    uint64_t v20 = v49;
                    uint64_t v19 = v50;
                    break;
                  }
                }
              }
            }
            uint64_t v48 = [v16 countByEnumeratingWithState:&v67 objects:v76 count:16];
          }
          while (v48);
        }

        uint64_t v10 = v44 + 1;
      }
      while (v44 + 1 != v42);
      uint64_t v42 = [obj countByEnumeratingWithState:&v71 objects:v77 count:16];
    }
    while (v42);
  }

  if (v40)
  {
    *id v40 = (id)[v9 copy];
    BOOL v9 = v52;
  }

  return v57;
}

+ (unint64_t)sanitizedOriginalSourceForMessage:(uint64_t)a1
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v2 = a2;
  uint64_t v3 = self;
  int v4 = [v2 messagePayload];
  id v5 = objc_msgSend(v4, "hmf_numberForKey:", @"kMessageOriginalSourceKey");

  if (v5)
  {
    unint64_t v6 = [v5 unsignedIntegerValue];
    if (v6 >= 0xA)
    {
      id v7 = (void *)MEMORY[0x230FBD990]();
      id v8 = v3;
      BOOL v9 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = HMFGetLogIdentifier();
        int v12 = 138543874;
        id v13 = v10;
        __int16 v14 = 2114;
        id v15 = @"kMessageOriginalSourceKey";
        __int16 v16 = 2114;
        id v17 = v5;
        _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Unknown value for '%{public}@': %{public}@", (uint8_t *)&v12, 0x20u);
      }
      unint64_t v6 = 0;
    }
  }
  else
  {
    unint64_t v6 = [v2 source];
  }

  return v6;
}

- (void)_areWriteRequestsAllowed:(id)a3 message:(id)a4 completion:(id)a5
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [v9 userForHome:self];
  if (v11
    && ![(HMDHome *)self areCharacteristicRequests:v8 allowedForUser:v11])
  {
    id v15 = (void *)MEMORY[0x230FBD990]();
    __int16 v16 = self;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      uint64_t v19 = [v11 restrictedGuestAccessSettings];
      uint64_t v20 = [v19 uuidsOfAllowedAccessories];
      int v22 = 138544130;
      uint64_t v23 = v18;
      __int16 v24 = 2112;
      id v25 = v9;
      __int16 v26 = 2112;
      id v27 = v11;
      __int16 v28 = 2112;
      uint64_t v29 = v20;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Rejecting message which is not allowed for user. Message: %@, user: %@, allowedAccessories: %@", (uint8_t *)&v22, 0x2Au);
    }
    __int16 v14 = (void (**)(void *, void, void *))_Block_copy(v10);
    if (v14)
    {
      id v21 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2906];
      v14[2](v14, 0, v21);
    }
    goto LABEL_11;
  }
  unint64_t v12 = [v9 source];
  if (![(HMDHome *)self applyDeviceLockStatus:v9])
  {
    id v13 = (void (**)(void *, void, void *))_Block_copy(v10);
    __int16 v14 = v13;
    if (v13) {
      v13[2](v13, 1, 0);
    }
LABEL_11:

    goto LABEL_12;
  }
  -[HMDHome _applyDeviceLockCheck:forSource:message:completion:](self, v8, v12, v9, v10);
LABEL_12:
}

- (void)_applyDeviceLockCheck:(unint64_t)a3 forSource:(void *)a4 message:(void *)a5 completion:
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  id v50 = a2;
  id v52 = a4;
  id v49 = a5;
  if (a1)
  {
    int v8 = [a1 synchronouslyFetchIsCarPlayConnectedStatus];
    id v57 = a1;
    id v9 = [a1 deviceLockStateDataSource];
    int v10 = [v9 isPasscodeEnabled];

    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    obuint64_t j = (__CFString *)v50;
    uint64_t v11 = [(__CFString *)obj countByEnumeratingWithState:&v63 objects:v75 count:16];
    if (v11)
    {
      uint64_t v55 = *(void *)v64;
      int v51 = v10 & v8;
LABEL_4:
      uint64_t v12 = 0;
      while (1)
      {
        if (*(void *)v64 != v55) {
          objc_enumerationMutation(obj);
        }
        id v13 = *(__CFString **)(*((void *)&v63 + 1) + 8 * v12);
        __int16 v14 = [(__CFString *)v13 characteristic];
        id v15 = [(__CFString *)v14 service];
        __int16 v16 = [v57 hapMetadata];
        id v17 = [(__CFString *)v14 type];
        uint64_t v18 = [v15 type];
        int v19 = [v16 requiresDeviceUnlock:v17 forService:v18];

        if (v19)
        {
          uint64_t v20 = [v57 hapMetadata];
          id v21 = [(__CFString *)v14 type];
          int v22 = [(__CFString *)v13 value];
          unsigned __int8 v23 = [v20 allowsSecuringWriteFor:v21 withValue:v22];

          if (((a3 == 1) & v23) == 0)
          {
            int v24 = v51
                ? [v57 isCarPlayAccessAllowedForCharacteristic:v14 withMessage:v52 fromSource:a3]
                : 0;
            if ((([v57 isAccessAllowedForCharacteristicsWithMessage:v52] | v24) & 1) == 0) {
              break;
            }
          }
        }

        if (v11 == ++v12)
        {
          uint64_t v11 = [(__CFString *)obj countByEnumeratingWithState:&v63 objects:v75 count:16];
          if (v11) {
            goto LABEL_4;
          }
          goto LABEL_19;
        }
      }
      uint64_t v56 = HMDSecureAccessErrorCodeForMessage(v52, a3);
      id v25 = (void *)MEMORY[0x230FBD990]();
      id v26 = v57;
      id v27 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        __int16 v28 = HMFGetLogIdentifier();
        if (a3 > 9) {
          uint64_t v29 = @"Unknown";
        }
        else {
          uint64_t v29 = off_264A1BC48[a3];
        }
        uint64_t v30 = v29;
        *(_DWORD *)buf = 138544130;
        long long v68 = v28;
        __int16 v69 = 2112;
        long long v70 = v13;
        __int16 v71 = 2112;
        long long v72 = v14;
        __int16 v73 = 2112;
        long long v74 = v30;
        _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_INFO, "%{public}@Write request (%@) for characteristic: %@ from source: %@ is attempting to perform a securing write", buf, 0x2Au);
      }

      if (a3 != 1) {
        goto LABEL_28;
      }
      if (!v56) {
        goto LABEL_34;
      }
      id v31 = (void *)MEMORY[0x230FBD990]();
      id v32 = v26;
      unint64_t v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        uint64_t v34 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v68 = v34;
        _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@Checking siri unlock access for siri triggered write request", buf, 0xCu);
      }
      objc_initWeak((id *)buf, v32);
      id v35 = [v32 siriSecureAccessoryAccessController];
      v58[0] = MEMORY[0x263EF8330];
      v58[1] = 3221225472;
      v58[2] = __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke;
      void v58[3] = &unk_264A16D88;
      objc_copyWeak(&v62, (id *)buf);
      id v61 = v49;
      uint64_t v59 = obj;
      id v36 = v56;
      id v60 = v36;
      [v35 isUnsecuringSiriActionAllowedWithCompletion:v58];

      objc_destroyWeak(&v62);
      objc_destroyWeak((id *)buf);
    }
    else
    {
LABEL_19:

      if (a3 == 1)
      {
LABEL_34:
        id v43 = (void *)MEMORY[0x230FBD990]();
        id v44 = v57;
        id v45 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          id v46 = HMFGetLogIdentifier();
          uint64_t v47 = @"Siri";
          *(_DWORD *)buf = 138543874;
          long long v68 = v46;
          __int16 v69 = 2112;
          long long v70 = obj;
          __int16 v71 = 2112;
          long long v72 = @"Siri";
          _os_log_impl(&dword_22F52A000, v45, OS_LOG_TYPE_INFO, "%{public}@Access is allowed for write requests (%@) from source: %@", buf, 0x20u);
        }
        (*((void (**)(id, uint64_t, void))v49 + 2))(v49, 1, 0);
      }
      else
      {
        uint64_t v56 = 0;
LABEL_28:
        id v37 = (void *)MEMORY[0x230FBD990]();
        id v38 = v57;
        id v39 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          id v40 = HMFGetLogIdentifier();
          if (v56) {
            uint64_t v41 = @"denied";
          }
          else {
            uint64_t v41 = @"allowed";
          }
          if (a3 > 9) {
            uint64_t v42 = @"Unknown";
          }
          else {
            uint64_t v42 = off_264A1BC48[a3];
          }
          uint64_t v48 = v42;
          *(_DWORD *)buf = 138544130;
          long long v68 = v40;
          __int16 v69 = 2112;
          long long v70 = v41;
          __int16 v71 = 2112;
          long long v72 = obj;
          __int16 v73 = 2112;
          long long v74 = v48;
          _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_INFO, "%{public}@Access is %@ for write requests (%@) from source: %@", buf, 0x2Au);
        }
        (*((void (**)(id, BOOL, void *))v49 + 2))(v49, v56 == 0, v56);
      }
    }
  }
}

void __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = HMFGetLogIdentifier();
      id v9 = @"denied";
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      int v19 = v8;
      if (a2) {
        id v9 = @"allowed";
      }
      __int16 v20 = 2112;
      id v21 = v9;
      __int16 v22 = 2112;
      uint64_t v23 = v10;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Access is %@ for write requests (%@) by siri watch authentication", buf, 0x20u);
    }
    uint64_t v11 = [v6 workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke_1707;
    block[3] = &unk_264A24FC8;
    id v16 = *(id *)(a1 + 48);
    char v17 = a2;
    id v15 = *(id *)(a1 + 40);
    dispatch_async(v11, block);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    id v13 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v13);
  }
}

uint64_t __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke_1707(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(v2 + 16))(v2, *(unsigned char *)(a1 + 48) != 0, v3);
}

- (void)_handleMultipleCharacteristicWrite:(id)a3
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v21 = 0;
  id v5 = [(HMDHome *)self writeRequestTuplesFromMessage:v4 outUnhandledRequests:&v21];
  id v6 = v21;
  if ([v6 count])
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    int v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      uint64_t v11 = [v4 shortDescription];
      *(_DWORD *)buf = 138543874;
      uint64_t v23 = v10;
      __int16 v24 = 2112;
      id v25 = v11;
      __int16 v26 = 2112;
      id v27 = v6;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@%@ has characteristic requests that cannot be handled: %@", buf, 0x20u);
    }
  }
  uint64_t v12 = (void *)[v4 source];
  [v5 count];
  [v4 isRemote];
  objc_initWeak((id *)buf, self);
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 3221225472;
  void v16[2] = __46__HMDHome__handleMultipleCharacteristicWrite___block_invoke;
  v16[3] = &unk_264A16E00;
  objc_copyWeak(v20, (id *)buf);
  id v13 = v4;
  id v17 = v13;
  v20[1] = v12;
  id v14 = v5;
  id v18 = v14;
  id v15 = v6;
  id v19 = v15;
  [(HMDHome *)self _areWriteRequestsAllowed:v14 message:v13 completion:v16];

  objc_destroyWeak(v20);
  objc_destroyWeak((id *)buf);
}

void __46__HMDHome__handleMultipleCharacteristicWrite___block_invoke(uint64_t a1, char a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v7 = WeakRetained;
  if (a2)
  {
    int v8 = *(void **)(a1 + 32);
    if (WeakRetained)
    {
      id v9 = (void *)MEMORY[0x230FBD990]([WeakRetained startReportingSessionForMessage:*(void *)(a1 + 32)]);
      id v10 = v7;
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = HMFGetLogIdentifier();
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        id v13 = [*(id *)(a1 + 32) identifier];

        if (v13)
        {
          id v14 = [*(id *)(a1 + 32) identifier];
          [v14 getUUIDBytes:buf];
        }
        else
        {
          *(_OWORD *)buf = *MEMORY[0x263F42690];
        }
        long long v22 = *(_OWORD *)buf;
        unint64_t v16 = *(void *)(a1 + 64);
        if (v16 > 9) {
          id v17 = @"Unknown";
        }
        else {
          id v17 = off_264A1BC48[v16];
        }
        id v18 = v17;
        *(_DWORD *)buf = 138544130;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&buf[12] = 1042;
        *(_DWORD *)&buf[14] = 16;
        __int16 v24 = 2098;
        id v25 = &v22;
        __int16 v26 = 2114;
        id v27 = v18;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Handling multiple characteristics write requests with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);
      }
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v21 = *(void *)(a1 + 64);
      id v15 = objc_msgSend(v10, "__readWriteResponseHandler:unhandledRequests:", v20, *(void *)(a1 + 48));
      [v10 _writeCharacteristicValues:v19 requestMessage:v20 source:v21 withCompletionHandler:v15];
    }
    else
    {
      id v15 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
      [v8 respondWithError:v15];
    }
  }
  else
  {
    [*(id *)(a1 + 32) respondWithError:v5];
  }
}

- (void)_handleCharacteristicWrite:(id)a3
{
  v38[1] = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 messagePayload];
  id v6 = objc_msgSend(v5, "hmf_UUIDForKey:", @"kAccessoryUUID");

  id v7 = [(HMDHome *)self accessoryWithUUID:v6];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  id v9 = v8;

  if (v9)
  {
    id v10 = [v4 messagePayload];
    uint64_t v11 = [v10 objectForKeyedSubscript:@"kServiceInstanceID"];
    uint64_t v28 = HAPInstanceIDFromValue();

    uint64_t v12 = [v4 messagePayload];
    id v13 = [v12 objectForKeyedSubscript:@"kCharacteristicInstanceID"];
    id v14 = HAPInstanceIDFromValue();

    id v27 = [v9 findService:v28];
    id v15 = [v27 findCharacteristic:v14];
    if (!v15)
    {
      id v25 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      [v4 respondWithError:v25];

      goto LABEL_13;
    }
    if ([v4 isRemote])
    {
      __int16 v26 = [v4 dataForKey:@"kAuthorizationDataKey"];
      if (v26)
      {
LABEL_10:
        id v18 = [v4 messagePayload];
        uint64_t v19 = [v18 objectForKeyedSubscript:@"kCharacteristicValue"];
        uint64_t v20 = [v4 identifier];
        uint64_t v21 = +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:v15 value:v19 authorizationData:v26 identifier:v20 type:0 includeResponseValue:0];

        objc_initWeak(&location, self);
        v38[0] = v21;
        long long v22 = [MEMORY[0x263EFF8C0] arrayWithObjects:v38 count:1];
        v29[0] = MEMORY[0x263EF8330];
        v29[1] = 3221225472;
        v29[2] = __38__HMDHome__handleCharacteristicWrite___block_invoke;
        void v29[3] = &unk_264A16DD8;
        objc_copyWeak(&v36, &location);
        id v30 = v4;
        id v31 = v6;
        id v32 = v9;
        id v33 = v28;
        id v34 = v14;
        id v23 = v21;
        id v35 = v23;
        [(HMDHome *)self _areWriteRequestsAllowed:v22 message:v30 completion:v29];

        objc_destroyWeak(&v36);
        objc_destroyWeak(&location);

LABEL_13:
        goto LABEL_14;
      }
      unint64_t v16 = [v4 userForHome:self];
      int v17 = [v16 isRestrictedGuest];

      if (!v17)
      {
        __int16 v26 = 0;
        goto LABEL_10;
      }
    }
    __int16 v26 = [v15 authorizationData];
    goto LABEL_10;
  }
  __int16 v24 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
  [v4 respondWithError:v24];

LABEL_14:
}

void __38__HMDHome__handleCharacteristicWrite___block_invoke(uint64_t a1, char a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  id v7 = WeakRetained;
  if (a2)
  {
    if (WeakRetained)
    {
      int v8 = (void *)MEMORY[0x230FBD990]();
      id v9 = v7;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        uint64_t v12 = [*(id *)(a1 + 32) shortDescription];
        id v13 = [*(id *)(a1 + 40) UUIDString];
        id v14 = [*(id *)(a1 + 48) uniqueIdentifier];
        uint64_t v15 = *(void *)(a1 + 56);
        uint64_t v16 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 138544642;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v12;
        *(_WORD *)&buf[22] = 2112;
        *(void *)&unsigned char buf[24] = v13;
        *(_WORD *)&buf[32] = 2112;
        *(void *)&buf[34] = v14;
        __int16 v34 = 2112;
        uint64_t v35 = v15;
        __int16 v36 = 2112;
        uint64_t v37 = v16;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Processing single characteristic write request: %@ (%@/%@/%@/%@) as a special case of multiple characteristic write requests", buf, 0x3Eu);
      }
      unint64_t v17 = [*(id *)(a1 + 32) source];
      id v18 = (void *)MEMORY[0x230FBD990]();
      id v19 = v9;
      uint64_t v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        uint64_t v21 = HMFGetLogIdentifier();
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        long long v22 = [*(id *)(a1 + 32) identifier];

        if (v22)
        {
          id v23 = [*(id *)(a1 + 32) identifier];
          [v23 getUUIDBytes:buf];
        }
        else
        {
          *(_OWORD *)buf = *MEMORY[0x263F42690];
        }
        long long v32 = *(_OWORD *)buf;
        if (v17 > 9) {
          __int16 v26 = @"Unknown";
        }
        else {
          __int16 v26 = off_264A1BC48[v17];
        }
        id v27 = v26;
        *(_DWORD *)buf = 138544130;
        *(void *)&uint8_t buf[4] = v21;
        *(_WORD *)&buf[12] = 1042;
        *(_DWORD *)&buf[14] = 16;
        *(_WORD *)&unsigned char buf[18] = 2098;
        *(void *)&buf[20] = &v32;
        *(_WORD *)&buf[28] = 2114;
        *(void *)&buf[30] = v27;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Handling single characteristic write request with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);
      }
      uint64_t v31 = *(void *)(a1 + 72);
      uint64_t v28 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v31 count:1];
      uint64_t v29 = *(void *)(a1 + 32);
      id v30 = objc_msgSend(v19, "__readWriteResponseHandler:unhandledRequests:", v29, 0);
      [v19 _writeCharacteristicValues:v28 requestMessage:v29 source:v17 withCompletionHandler:v30];
    }
    else
    {
      __int16 v24 = *(void **)(a1 + 32);
      id v25 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
      [v24 respondWithError:v25];
    }
  }
  else
  {
    [*(id *)(a1 + 32) respondWithError:v5];
  }
}

- (id)__readWriteResponseHandler:(id)a3 unhandledRequests:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  objc_initWeak(&location, self);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  void v12[2] = __56__HMDHome___readWriteResponseHandler_unhandledRequests___block_invoke;
  v12[3] = &unk_264A2E890;
  objc_copyWeak(&v15, &location);
  id v13 = v7;
  id v14 = v6;
  id v8 = v6;
  id v9 = v7;
  id v10 = _Block_copy(v12);

  objc_destroyWeak(&v15);
  objc_destroyWeak(&location);
  return v10;
}

void __56__HMDHome___readWriteResponseHandler_unhandledRequests___block_invoke(id *a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if ([a1[4] count])
  {
    uint64_t v8 = +[HMDCharacteristicResponseNotificationContext updateMultipleCharacteristicReadWriteResponsePayload:v6 withUnhandledRequests:a1[4]];

    id v6 = (id)v8;
  }
  id v9 = (void *)MEMORY[0x230FBD990]();
  id v10 = WeakRetained;
  uint64_t v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = HMFGetLogIdentifier();
    id v13 = [a1[5] shortDescription];
    int v14 = 138544130;
    id v15 = v12;
    __int16 v16 = 2112;
    unint64_t v17 = v13;
    __int16 v18 = 2112;
    id v19 = v6;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Responding to the client: %@ with payload : %@, error: %@", (uint8_t *)&v14, 0x2Au);
  }
  [a1[5] respondWithPayload:v6 error:v5];
  [a1[5] setResponseHandler:0];
  [v10 endReportingSessionForMessage:a1[5]];
}

- (void)_addResponseTuplesFromDictionary:(id)a3 accessoryRequestMapTable:(id)a4 responseTuples:(id)a5 completedGroup:(id)a6 logEvents:(id)a7
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v35 = a4;
  id v13 = a5;
  group = a6;
  id v33 = a7;
  if (v13) {
    _HMFPreconditionFailure();
  }
  long long v32 = v12;
  objc_msgSend(v12, "hmf_dictionaryForKey:", @"kModifiedCharacteristicsForAccessoryKey");
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v37 = [obj countByEnumeratingWithState:&v49 objects:v53 count:16];
  if (v37)
  {
    uint64_t v36 = *(void *)v50;
    uint64_t v31 = v40;
    do
    {
      for (uint64_t i = 0; i != v37; ++i)
      {
        if (*(void *)v50 != v36) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void *)(*((void *)&v49 + 1) + 8 * i);
        __int16 v16 = objc_msgSend(objc_alloc(MEMORY[0x263F08C38]), "initWithUUIDString:", v15, v31);
        unint64_t v17 = [(HMDHome *)self accessoryWithUUID:v16];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          __int16 v18 = v17;
        }
        else {
          __int16 v18 = 0;
        }
        id v19 = v18;

        if (v19)
        {
          uint64_t v20 = [v19 bridge];
          id v21 = (void *)v20;
          if (v20) {
            uint64_t v22 = (void *)v20;
          }
          else {
            uint64_t v22 = v19;
          }
          id v23 = v22;

          __int16 v24 = [v23 uuid];
          id v25 = [v24 UUIDString];

          __int16 v26 = [v35 objectForKey:v23];
          id v27 = objc_msgSend(obj, "hmf_dictionaryForKey:", v15);
          dispatch_group_enter(group);
          v39[0] = MEMORY[0x263EF8330];
          v39[1] = 3221225472;
          v40[0] = __109__HMDHome__addResponseTuplesFromDictionary_accessoryRequestMapTable_responseTuples_completedGroup_logEvents___block_invoke;
          v40[1] = &unk_264A16DB0;
          id v41 = v26;
          id v28 = v19;
          id v42 = v28;
          id v43 = v33;
          id v44 = v25;
          id v45 = v32;
          id v46 = self;
          id v47 = 0;
          uint64_t v48 = group;
          id v29 = v25;
          id v30 = v26;
          [v28 handleMultipleCharacteristicsUpdated:v27 message:0 completionQueue:0 completionHandler:v39];
        }
      }
      uint64_t v37 = [obj countByEnumeratingWithState:&v49 objects:v53 count:16];
    }
    while (v37);
  }
  dispatch_group_leave(group);
}

void __109__HMDHome__addResponseTuplesFromDictionary_accessoryRequestMapTable_responseTuples_completedGroup_logEvents___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v3 = a2;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v4 = *(id *)(a1 + 32);
  uint64_t v28 = [v4 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v28)
  {
    uint64_t v5 = *(void *)v30;
    uint64_t v26 = *(void *)v30;
    id v24 = v3;
    do
    {
      for (uint64_t i = 0; i != v28; ++i)
      {
        if (*(void *)v30 != v5) {
          objc_enumerationMutation(v4);
        }
        id v7 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        uint64_t v8 = [v7 characteristic];
        id v9 = [v8 accessory];
        id v10 = *(void **)(a1 + 40);

        if (v9 == v10)
        {
          uint64_t v11 = [*(id *)(a1 + 48) objectForKeyedSubscript:*(void *)(a1 + 56)];
          id v12 = [*(id *)(a1 + 64) objectForKeyedSubscript:@"kRemoteMessageTransportAttributionKey"];
          objc_msgSend(v11, "setTransportType:", objc_msgSend(v12, "intValue"));

          id v13 = [v7 characteristic];
          int v14 = [v3 objectForKey:v13];

          if (([v11 isSubmitted] & 1) == 0)
          {
            uint64_t v15 = [*(id *)(a1 + 72) logEventSubmitter];
            __int16 v16 = [v14 error];
            [v15 submitLogEvent:v11 error:v16];

            uint64_t v5 = v26;
          }
          if (v14 && *(void *)(a1 + 80))
          {
            unint64_t v17 = [v14 error];
            id v27 = +[HMDCharacteristicResponse responseWithRequest:v7 error:v17];

            id v25 = [v7 characteristic];
            __int16 v18 = [v25 value];
            id v19 = [v14 valueUpdatedTime];
            uint64_t v20 = [v14 valueUpdatedStateNumber];
            id v21 = [v7 characteristic];
            [v21 notificationContext];
            v23 = id v22 = v4;
            [v27 setValue:v18 updatedTime:v19 stateNumber:v20 notificationContext:v23];

            id v4 = v22;
            id v3 = v24;

            uint64_t v5 = v26;
            [*(id *)(a1 + 80) addObject:v27];
          }
        }
      }
      uint64_t v28 = [v4 countByEnumeratingWithState:&v29 objects:v33 count:16];
    }
    while (v28);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
}

- (void)_writeCharacteristicValues:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 withCompletionHandler:(id)a6
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v11 = a3;
  id v12 = a4;
  id v13 = a6;
  id v14 = objc_alloc(MEMORY[0x263F424F0]);
  uint64_t v15 = NSString;
  __int16 v16 = MEMORY[0x230FBBCF0](self, a2);
  unint64_t v17 = [v15 stringWithFormat:@"%@, %s:%ld", v16, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 25152];
  id v27 = (void *)[v14 initWithName:v17];

  LOBYTE(v14) = [(HMDHome *)self isCurrentDeviceAvailableResident];
  __int16 v18 = (void *)MEMORY[0x230FBD990]();
  id v19 = self;
  if (v14)
  {
    HMFGetOSLogHandle();
    uint64_t v20 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v21 = (id)objc_claimAutoreleasedReturnValue();
      id v22 = [v12 shortDescription];
      *(_DWORD *)buf = 138543618;
      id v29 = v21;
      __int16 v30 = 2112;
      long long v31 = v22;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Running new accessory communication logic for resident. %@", buf, 0x16u);
    }
  }
  else
  {
    HMFGetOSLogHandle();
    uint64_t v20 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v23 = (id)objc_claimAutoreleasedReturnValue();
      id v24 = [v12 shortDescription];
      *(_DWORD *)buf = 138543618;
      id v29 = v23;
      __int16 v30 = 2112;
      long long v31 = v24;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Routing accessory write requests using Resident First logic. %@", buf, 0x16u);
    }
  }

  id v25 = [(HMDHome *)v19 _createMessageForReadWriteRequest:v12 source:a5 withCompletionHandler:v13];
  uint64_t v26 = [(HMDHome *)v19 accessoryReaderWriter];
  [v26 submitWriteRequests:v11 sourceType:a5 requestMessage:v25];

  __HMFActivityScopeLeave();
}

- (id)_createMessageForReadWriteRequest:(id)a3 source:(unint64_t)a4 withCompletionHandler:(id)a5
{
  id v8 = a3;
  id v9 = a5;
  id v10 = [v8 internal];
  id v11 = (void *)[v10 copy];

  id v12 = [v11 messagePayload];
  id v13 = objc_msgSend(v12, "hmf_numberForKey:", @"kMessageOriginalSourceKey");

  if (v13)
  {
    id v14 = 0;
  }
  else
  {
    id v14 = (void *)[v12 mutableCopy];
    uint64_t v15 = [NSNumber numberWithUnsignedInteger:a4];
    [v14 setObject:v15 forKeyedSubscript:@"kMessageOriginalSourceKey"];
  }
  if (a4 == 1 && !isTVOSDevice())
  {
    __int16 v16 = [v8 userForHome:self];
    if (v16)
    {
      if (!v14) {
        id v14 = (void *)[v12 mutableCopy];
      }
      unint64_t v17 = [v16 uuid];
      __int16 v18 = [v17 UUIDString];
      [v14 setObject:v18 forKeyedSubscript:@"kMessageUserOverrideKey"];
    }
  }
  if (v14)
  {
    id v19 = (void *)[v14 copy];
    [v11 setMessagePayload:v19];
  }
  uint64_t v20 = (void *)[objc_alloc((Class)objc_opt_class()) initWithInternalMessage:v11];

  objc_initWeak(&location, v20);
  v24[0] = MEMORY[0x263EF8330];
  v24[1] = 3221225472;
  v24[2] = __74__HMDHome__createMessageForReadWriteRequest_source_withCompletionHandler___block_invoke;
  v24[3] = &unk_264A2B788;
  objc_copyWeak(&v28, &location);
  id v21 = v9;
  id v27 = v21;
  id v22 = v8;
  id v25 = v22;
  uint64_t v26 = self;
  [v20 setResponseHandler:v24];

  objc_destroyWeak(&v28);
  objc_destroyWeak(&location);

  return v20;
}

void __74__HMDHome__createMessageForReadWriteRequest_source_withCompletionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v8 = _Block_copy(*(const void **)(a1 + 48));
  id v9 = v8;
  if (v8) {
    (*((void (**)(void *, id, id))v8 + 2))(v8, v5, v6);
  }

  id v10 = [*(id *)(a1 + 32) responseHandler];

  if (!v10)
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = *(id *)(a1 + 40);
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      id v14 = HMFGetLogIdentifier();
      uint64_t v15 = [*(id *)(a1 + 32) shortDescription];
      int v16 = 138543618;
      unint64_t v17 = v14;
      __int16 v18 = 2112;
      id v19 = v15;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_DEBUG, "%{public}@The response handler became nil for read/write request message: %@", (uint8_t *)&v16, 0x16u);
    }
    [WeakRetained setResponseHandler:0];
  }
}

- (BOOL)requiresUnlockToAccessCharacteristics:(id)a3 withMessage:(id)a4
{
  id v6 = a3;
  if ([(HMDHome *)self applyDeviceLockStatus:a4])
  {
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    v9[2] = __61__HMDHome_requiresUnlockToAccessCharacteristics_withMessage___block_invoke;
    void v9[3] = &unk_264A2D3B8;
    void v9[4] = self;
    char v7 = objc_msgSend(v6, "na_any:", v9);
  }
  else
  {
    char v7 = 0;
  }

  return v7;
}

uint64_t __61__HMDHome_requiresUnlockToAccessCharacteristics_withMessage___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 hapMetadata];
  id v5 = [v3 type];
  id v6 = [v3 service];

  char v7 = [v6 type];
  uint64_t v8 = [v4 requiresDeviceUnlock:v5 forService:v7];

  return v8;
}

- (BOOL)isAccessAllowedForCharacteristicsWithMessage:(id)a3
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([v4 isEntitledForSecureAccess]
    && ([v4 isEntitledForSPIAccess] & 1) != 0)
  {
    BOOL v5 = 1;
  }
  else
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    char v7 = self;
    uint64_t v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      id v10 = [v4 shortDescription];
      int v12 = 138543618;
      id v13 = v9;
      __int16 v14 = 2112;
      uint64_t v15 = v10;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Insufficient entitlements, access is not allowed for characteristic with message: %@", (uint8_t *)&v12, 0x16u);
    }
    BOOL v5 = 0;
  }

  return v5;
}

- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 message:(id)a5 identifier:(id)a6 qualityOfService:(int64_t)a7 withCompletionHandler:(id)a8
{
  id v14 = a3;
  id v15 = a5;
  id v16 = a6;
  id v17 = a8;
  id v18 = objc_alloc(MEMORY[0x263F424F0]);
  id v19 = NSString;
  uint64_t v20 = MEMORY[0x230FBBCF0](self, a2);
  id v21 = [v19 stringWithFormat:@"%@, %s:%ld", v20, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 24009];
  id v22 = (void *)[v18 initWithName:v21];

  objc_initWeak(&location, self);
  id v23 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __102__HMDHome_writeCharacteristicValues_source_message_identifier_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_264A16D38;
  objc_copyWeak(v36, &location);
  id v31 = v14;
  id v32 = v22;
  id v34 = v16;
  id v35 = v17;
  id v33 = v15;
  v36[1] = (id)a4;
  void v36[2] = (id)a7;
  id v24 = v16;
  id v25 = v15;
  id v26 = v22;
  id v27 = v14;
  id v28 = v17;
  dispatch_async(v23, block);

  objc_destroyWeak(v36);
  objc_destroyWeak(&location);
}

void __102__HMDHome_writeCharacteristicValues_source_message_identifier_qualityOfService_withCompletionHandler___block_invoke(id *a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 9;
  id WeakRetained = objc_loadWeakRetained(a1 + 9);
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    if ([WeakRetained _shouldWaitForAccessoriesToBeReachable])
    {
      id v5 = a1[4];
      id v6 = [v4 workQueue];
      char v7 = +[HMDHomeAssistantOperation homeAssistantOperationWithWriteRequests:v5 queue:v6];

      v16[0] = MEMORY[0x263EF8330];
      v16[1] = 3221225472;
      void v16[2] = __102__HMDHome_writeCharacteristicValues_source_message_identifier_qualityOfService_withCompletionHandler___block_invoke_1692;
      v16[3] = &unk_264A16D38;
      objc_copyWeak(v22, v2);
      id v21 = a1[8];
      id v17 = a1[5];
      id v8 = a1[4];
      id v9 = a1[10];
      id v18 = v8;
      v22[1] = v9;
      id v19 = a1[6];
      id v10 = a1[7];
      id v11 = a1[11];
      id v20 = v10;
      v22[2] = v11;
      [v4 _performOperation:v7 completion:v16];

      objc_destroyWeak(v22);
    }
    else
    {
      [a1[5] begin];
      -[HMDHome _writeCharacteristicValues:source:message:identifier:qualityOfService:withCompletionHandler:activity:](v4, a1[4], a1[10], a1[6], a1[7], a1[11], a1[8], a1[5]);
    }
  }
  else
  {
    if (a1[8])
    {
      int v12 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:20 userInfo:0];
      (*((void (**)(void))a1[8] + 2))();
    }
    id v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v24 = v15;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform write request", buf, 0xCu);
    }
  }
}

void __102__HMDHome_writeCharacteristicValues_source_message_identifier_qualityOfService_withCompletionHandler___block_invoke_1692(id *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained(a1 + 9);
  if (WeakRetained)
  {
    [a1[4] begin];
    -[HMDHome _writeCharacteristicValues:source:message:identifier:qualityOfService:withCompletionHandler:activity:](WeakRetained, a1[5], a1[10], a1[6], a1[7], a1[11], a1[8], a1[4]);
  }
  else
  {
    if (a1[8])
    {
      id v3 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:20 userInfo:0];
      (*((void (**)(void))a1[8] + 2))();
    }
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      int v7 = 138543362;
      id v8 = v6;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform write request", (uint8_t *)&v7, 0xCu);
    }
  }
}

- (void)_writeCharacteristicValues:(void *)a3 source:(void *)a4 message:(void *)a5 identifier:(void *)a6 qualityOfService:(void *)a7 withCompletionHandler:(void *)a8 activity:
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  id v12 = a2;
  id v35 = a4;
  id v36 = a5;
  id v37 = a7;
  id v38 = a8;
  id v40 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v12, "count"));
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  obuint64_t j = v12;
  uint64_t v13 = [obj countByEnumeratingWithState:&v49 objects:v55 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v50;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v50 != v14) {
          objc_enumerationMutation(obj);
        }
        id v16 = *(void **)(*((void *)&v49 + 1) + 8 * i);
        id v17 = [v16 characteristic];
        id v18 = [v17 authorizationData];
        id v19 = [a1 home];
        id v20 = [v19 currentUser];
        id v21 = [v20 notificationContextHAPIdentifier];
        id v22 = [v17 contextDataForWriteRequestWithIdentifier:v21];

        id v23 = [v16 value];
        id v24 = +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:contextData:](HMDCharacteristicWriteRequest, "writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:contextData:", v17, v23, v18, 0, [v16 requestType], objc_msgSend(v16, "includeResponseValue"), v22);

        [v40 addObject:v24];
      }
      uint64_t v13 = [obj countByEnumeratingWithState:&v49 objects:v55 count:16];
    }
    while (v13);
  }

  uint64_t v25 = [a1 deviceLockStateDataSource];
  if (([v25 isPasscodeEnabled] & 1) == 0)
  {

    goto LABEL_14;
  }
  id v26 = [a1 deviceLockStateDataSource];
  int v27 = [v26 isLocked];

  if (v27)
  {
LABEL_14:
    objc_initWeak((id *)buf, a1);
    v42[0] = MEMORY[0x263EF8330];
    v42[1] = 3221225472;
    v42[2] = __112__HMDHome__writeCharacteristicValues_source_message_identifier_qualityOfService_withCompletionHandler_activity___block_invoke;
    v42[3] = &unk_264A16D60;
    objc_copyWeak(v47, (id *)buf);
    id v32 = v37;
    char v48 = 1;
    id v46 = v32;
    v47[1] = a3;
    id v43 = v38;
    id v44 = v40;
    id v45 = v36;
    v47[2] = a6;
    -[HMDHome _applyDeviceLockCheck:forSource:message:completion:](a1, v44, (unint64_t)a3, v35, v42);

    objc_destroyWeak(v47);
    objc_destroyWeak((id *)buf);
    goto LABEL_15;
  }
  id v28 = (void *)MEMORY[0x230FBD990]();
  id v29 = a1;
  __int16 v30 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    id v31 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v54 = v31;
    _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_INFO, "%{public}@Allowing characteristic write because device lock check is not required", buf, 0xCu);
  }
  -[HMDHome _performAllowedWriteCharacteristicValues:source:identifier:qualityOfService:withCompletionHandler:activity:](v29, v40, (unint64_t)a3, v36, (uint64_t)a6, v37, v38);
LABEL_15:
}

void __112__HMDHome__writeCharacteristicValues_source_message_identifier_qualityOfService_withCompletionHandler_activity___block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    int v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = WeakRetained;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      if (a2) {
        id v11 = @"Allowing";
      }
      else {
        id v11 = @"Denying";
      }
      id v12 = NSStringFromBOOL();
      uint64_t v13 = *(void *)(a1 + 72);
      int v20 = 138544386;
      id v21 = v10;
      __int16 v22 = 2112;
      id v23 = v11;
      __int16 v24 = 2112;
      uint64_t v25 = v12;
      __int16 v26 = 2048;
      uint64_t v27 = v13;
      __int16 v28 = 2112;
      id v29 = v5;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@%@ characteristic write passcode=%@, source=%lu : %@", (uint8_t *)&v20, 0x34u);
    }
    if (a2)
    {
      -[HMDHome _performAllowedWriteCharacteristicValues:source:identifier:qualityOfService:withCompletionHandler:activity:](v8, *(void **)(a1 + 40), *(void *)(a1 + 72), *(void **)(a1 + 48), *(void *)(a1 + 80), *(void **)(a1 + 56), *(void **)(a1 + 32));
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 56);
      if (v19) {
        (*(void (**)(uint64_t, id, void))(v19 + 16))(v19, v5, 0);
      }
      [*(id *)(a1 + 32) end];
    }
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 56);
    if (v14)
    {
      id v15 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:20 userInfo:0];
      (*(void (**)(uint64_t, void *, void))(v14 + 16))(v14, v15, 0);
    }
    id v16 = (void *)MEMORY[0x230FBD990]();
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      id v18 = HMFGetLogIdentifier();
      int v20 = 138543362;
      id v21 = v18;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform write request", (uint8_t *)&v20, 0xCu);
    }
  }
}

- (void)_performAllowedWriteCharacteristicValues:(unint64_t)a3 source:(void *)a4 identifier:(uint64_t)a5 qualityOfService:(void *)a6 withCompletionHandler:(void *)a7 activity:
{
  void v38[2] = *MEMORY[0x263EF8340];
  id v30 = a2;
  id v13 = a4;
  id v14 = a6;
  id v15 = a7;
  v37[0] = @"sourceType";
  id v16 = [NSNumber numberWithUnsignedInteger:a3];
  v37[1] = @"kMultiPartResponseKey";
  v38[0] = v16;
  v38[1] = MEMORY[0x263EFFA88];
  id v17 = [NSDictionary dictionaryWithObjects:v38 forKeys:v37 count:2];

  id v18 = objc_alloc(MEMORY[0x263F42590]);
  uint64_t v19 = [MEMORY[0x263F42570] allMessageDestinations];
  int v20 = (void *)[v18 initWithName:@"kMultipleCharacteristicWriteRequestKey" qualityOfService:a5 destination:v19 payload:v17];

  id v21 = (void *)MEMORY[0x230FBD990]([v20 setIdentifier:v13]);
  id v22 = a1;
  id v23 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    id v29 = v13;
    __int16 v24 = HMFGetLogIdentifier();
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    uint64_t v25 = [v20 identifier];

    if (v25)
    {
      __int16 v26 = [v20 identifier];
      [v26 getUUIDBytes:buf];
    }
    else
    {
      *(_OWORD *)buf = *MEMORY[0x263F42690];
    }
    long long v31 = *(_OWORD *)buf;
    if (a3 > 9) {
      uint64_t v27 = @"Unknown";
    }
    else {
      uint64_t v27 = off_264A1BC48[a3];
    }
    __int16 v28 = v27;
    *(_DWORD *)buf = 138544130;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&buf[12] = 1042;
    *(_DWORD *)&buf[14] = 16;
    __int16 v33 = 2098;
    id v34 = &v31;
    __int16 v35 = 2114;
    id v36 = v28;
    _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Performing allowed write requests with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);

    id v13 = v29;
  }

  [v22 _writeCharacteristicValues:v30 requestMessage:v20 source:a3 withCompletionHandler:v14];
  [v15 end];
}

- (void)_handleMatterLockChangedCharacteristics:(id)a3 message:(id)a4 remoteRequest:(BOOL)a5
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = [(HMDHome *)self primaryResident];
  char v11 = [v10 isCurrentDevice];

  if (v11)
  {
    id v12 = [v9 name];
    if ([v12 isEqualToString:@"kMultipleCharacteristicReadRequestKey"])
    {
    }
    else
    {
      id v21 = [v9 name];
      int v22 = [v21 isEqualToString:@"kCharacteristicReadRequestKey"];

      if (!v22)
      {
        v23[0] = MEMORY[0x263EF8330];
        v23[1] = 3221225472;
        v23[2] = __73__HMDHome__handleMatterLockChangedCharacteristics_message_remoteRequest___block_invoke;
        v23[3] = &unk_264A1C820;
        v23[4] = self;
        id v24 = v9;
        BOOL v25 = a5;
        objc_msgSend(v8, "na_each:", v23);

        goto LABEL_11;
      }
    }
    id v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v27 = v16;
      __int16 v28 = 2112;
      id v29 = v9;
      id v17 = "%{public}@_handleMatterLockChangedCharacteristics: We are seeing characteristics changed, but from a charact"
            "eristic read request. This is an error, so we should not show a bulletin. We should not be triggering this p"
            "ath from a read request, so this should be looked into and fixed. message=%@";
      id v18 = v15;
      os_log_type_t v19 = OS_LOG_TYPE_ERROR;
      uint32_t v20 = 22;
      goto LABEL_9;
    }
  }
  else
  {
    id v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v27 = v16;
      id v17 = "%{public}@Not handling Matter lock changed characteristic notification because this device is not the primary resident.";
      id v18 = v15;
      os_log_type_t v19 = OS_LOG_TYPE_INFO;
      uint32_t v20 = 12;
LABEL_9:
      _os_log_impl(&dword_22F52A000, v18, v19, v17, buf, v20);
    }
  }

LABEL_11:
}

void __73__HMDHome__handleMatterLockChangedCharacteristics_message_remoteRequest___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [v3 accessory];
  if ([v4 supportsCHIP])
  {
    id v5 = [v4 findServiceWithServiceType:*MEMORY[0x263F0D798]];

    if (v5)
    {
      id v6 = [MEMORY[0x263F42530] internalOnlyInitializer];
      int v7 = (void *)MEMORY[0x230FBD990]();
      id v8 = *(id *)(a1 + 32);
      id v9 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        id v10 = HMFGetLogIdentifier();
        char v11 = [v6 UUID];
        uint64_t v12 = [v4 uuid];
        id v13 = (void *)v12;
        id v14 = *(void **)(a1 + 40);
        int v15 = *(unsigned __int8 *)(a1 + 48);
        *(_DWORD *)buf = 138544642;
        if (v15) {
          id v16 = @"YES";
        }
        else {
          id v16 = @"NO";
        }
        long long v72 = v10;
        __int16 v73 = 2112;
        long long v74 = v11;
        __int16 v75 = 2112;
        uint64_t v76 = v12;
        __int16 v77 = 2112;
        id v78 = v3;
        __int16 v79 = 2112;
        long long v80 = v14;
        __int16 v81 = 2112;
        long long v82 = v16;
        _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] _handleMatterLockChangedCharacteristics: Matter lock characteristic changed, preparing to populate bulletin for accessory=%@ characteristic=%@ message=%@ remoteRequest=%@", buf, 0x3Eu);
      }
      id v17 = [v3 value];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v18 = v17;
      }
      else {
        id v18 = 0;
      }
      id v19 = v18;

      if (v19)
      {
        uint64_t v20 = [v19 integerValue];
        if (!v20)
        {
          id v21 = &unk_26E4709C0;
LABEL_18:
          long long v66 = v21;
          if (!*(unsigned char *)(a1 + 48))
          {
            id v40 = 0;
LABEL_36:
            id v65 = v19;
            long long v70 = v6;
            long long v52 = (void *)MEMORY[0x230FBD990]();
            id v53 = *(id *)(a1 + 32);
            uint64_t v54 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
            {
              uint64_t v55 = HMFGetLogIdentifier();
              [v70 UUID];
              uint64_t v56 = v61 = v52;
              id v57 = [v40 uuid];
              uint64_t v58 = [v4 uuid];
              *(_DWORD *)buf = 138544386;
              long long v72 = v55;
              __int16 v73 = 2112;
              long long v74 = v56;
              __int16 v75 = 2112;
              uint64_t v76 = (uint64_t)v57;
              __int16 v77 = 2112;
              id v78 = v66;
              __int16 v79 = 2112;
              long long v80 = v58;
              _os_log_impl(&dword_22F52A000, v54, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Handling changed matter lock characteristic (For notifications- HMDHome path) with userUUID=%@ operationType=%@ accessory=%@", buf, 0x34u);

              long long v52 = v61;
            }

            uint64_t v59 = [*(id *)(a1 + 32) lockNotificationManager];
            id v60 = [MEMORY[0x263EFF910] now];
            [v59 sendLockOperationEventNotification:v40 userUniqueID:0 lockOperationType:v66 lockOperationSource:&unk_26E4709F0 fabricIndex:0 accessory:v4 timestamp:v60 flow:v70];

            id v6 = v70;
            id v19 = v65;
            goto LABEL_39;
          }
          long long v31 = [*(id *)(a1 + 40) remoteSourceDevice];
          id v32 = [v31 productInfo];
          uint64_t v33 = [v32 productClass];

          if (v33)
          {
            if ((v33 & 0xFFFFFFFFFFFFFFFDLL) == 4)
            {
              id v34 = (void *)MEMORY[0x230FBD990]();
              id v35 = *(id *)(a1 + 32);
              id v36 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                id v37 = v62 = v34;
                [v6 UUID];
                id v38 = v67 = v31;
                id v39 = HMFProductClassToString();
                *(_DWORD *)buf = 138543874;
                long long v72 = v37;
                __int16 v73 = 2112;
                long long v74 = v38;
                __int16 v75 = 2112;
                uint64_t v76 = (uint64_t)v39;
                _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Product class for this request is %@, which is either a HomePod or ATV, so we should not try to attribute a user to this request.", buf, 0x20u);

                long long v31 = v67;
                id v34 = v62;
              }

              id v40 = 0;
LABEL_35:

              goto LABEL_36;
            }
          }
          else
          {
            id v41 = (void *)MEMORY[0x230FBD990]();
            id v42 = *(id *)(a1 + 32);
            id v43 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v44 = v63 = v41;
              [v6 UUID];
              v45 = long long v68 = v31;
              *(_DWORD *)buf = 138543618;
              long long v72 = v44;
              __int16 v73 = 2112;
              long long v74 = v45;
              _os_log_impl(&dword_22F52A000, v43, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Cannot determine product class for this request.", buf, 0x16u);

              long long v31 = v68;
              id v41 = v63;
            }
          }
          id v46 = (void *)MEMORY[0x230FBD990]();
          id v47 = *(id *)(a1 + 32);
          char v48 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            long long v49 = v69 = v31;
            [v6 UUID];
            long long v50 = v64 = v46;
            long long v51 = HMFProductClassToString();
            *(_DWORD *)buf = 138543874;
            long long v72 = v49;
            __int16 v73 = 2112;
            long long v74 = v50;
            __int16 v75 = 2112;
            uint64_t v76 = (uint64_t)v51;
            _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Product class for this request is %@, which is not a HomePod or ATV, so we can try to attribute a user to this request.", buf, 0x20u);

            id v46 = v64;
            long long v31 = v69;
          }

          id v40 = [*(id *)(a1 + 40) userForHome:*(void *)(a1 + 32)];
          goto LABEL_35;
        }
        if (v20 == 1)
        {
          id v21 = &unk_26E4709D8;
          goto LABEL_18;
        }
        int v22 = (void *)MEMORY[0x230FBD990]();
        id v23 = *(id *)(a1 + 32);
        id v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          BOOL v25 = HMFGetLogIdentifier();
          __int16 v26 = [v6 UUID];
          uint64_t v27 = [v4 uuid];
          *(_DWORD *)buf = 138544130;
          long long v72 = v25;
          __int16 v73 = 2112;
          long long v74 = v26;
          __int16 v75 = 2112;
          uint64_t v76 = (uint64_t)v19;
          __int16 v77 = 2112;
          id v78 = v27;
          __int16 v28 = "%{public}@[Flow: %@] Error retrieving characteristic value from characteristic. Value should be either 0"
                " or 1, value=%@. accessoryUUID=%@";
          id v29 = v24;
          uint32_t v30 = 42;
          goto LABEL_26;
        }
      }
      else
      {
        int v22 = (void *)MEMORY[0x230FBD990]();
        id v23 = *(id *)(a1 + 32);
        id v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          BOOL v25 = HMFGetLogIdentifier();
          __int16 v26 = [v6 UUID];
          uint64_t v27 = [v4 uuid];
          *(_DWORD *)buf = 138543874;
          long long v72 = v25;
          __int16 v73 = 2112;
          long long v74 = v26;
          __int16 v75 = 2112;
          uint64_t v76 = (uint64_t)v27;
          __int16 v28 = "%{public}@[Flow: %@] Error retrieving characteristic value from characteristic. Value is not an NSNumber"
                ". accessoryUUID=%@";
          id v29 = v24;
          uint32_t v30 = 32;
LABEL_26:
          _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, v28, buf, v30);
        }
      }

LABEL_39:
    }
  }
}

- (void)_notifyChangedCharacteristics:(id)a3 identifier:(id)a4 multiPartResponse:(BOOL)a5 moreMessagesInMultipart:(BOOL)a6 requestMessage:(id)a7 withCompletionHandler:(id)a8
{
  BOOL v10 = a6;
  BOOL v81 = a5;
  uint64_t v95 = *MEMORY[0x263EF8340];
  id v13 = a3;
  id v14 = a4;
  id v15 = a7;
  aBlocuint64_t k = a8;
  id v78 = v14;
  BOOL v79 = v10;
  id v16 = [[HMDCharacteristicResponseNotificationContext alloc] initWithRequestIdentifier:v14 responses:v13 pendingMultiPartResponses:v10];
  id v17 = (void *)MEMORY[0x230FBD990]();
  id v18 = self;
  id v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v88 = v20;
    __int16 v89 = 2112;
    long long v90 = v16;
    _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Preparing characteristics changed notifications using context: %@", buf, 0x16u);
  }
  id v21 = v15;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v22 = v21;
  }
  else {
    int v22 = 0;
  }
  id v23 = v22;

  id v24 = [v21 destination];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    BOOL v25 = v24;
  }
  else {
    BOOL v25 = 0;
  }
  id v26 = v25;

  BOOL v27 = 0;
  if ([v21 isRemote] && v26) {
    BOOL v27 = [v23 type] != 2;
  }
  __int16 v77 = v23;
  if ([v21 isSingleReadWriteRequest])
  {
    __int16 v28 = [v13 firstObject];
    uint64_t v29 = [v28 characteristicUpdateDictionary];

    if (v27) {
      uint32_t v30 = (void *)v29;
    }
    else {
      uint32_t v30 = 0;
    }
    id v31 = v30;
    id v32 = 0;
    long long v80 = (void *)v29;
    uint64_t v33 = v29;
    id v34 = aBlock;
    if (!v27) {
      goto LABEL_27;
    }
  }
  else
  {
    long long v80 = [(HMDCharacteristicResponseNotificationContext *)v16 notificationPayloadByAccessoryUUID];
    if (!v27)
    {
      id v32 = 0;
      goto LABEL_27;
    }
    if (v81)
    {
      id v35 = [NSNumber numberWithBool:v79];
      uint64_t v33 = +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:v18 changedAccessories:v80 moreMessagesInMultipart:v35];
    }
    else
    {
      uint64_t v33 = +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:v18 changedAccessories:v80 moreMessagesInMultipart:0];
    }
    id v34 = aBlock;
  }
  id v36 = _Block_copy(v34);
  id v37 = v36;
  if (v36) {
    (*((void (**)(void *, void, uint64_t))v36 + 2))(v36, 0, v33);
  }

  id v32 = (void *)v33;
LABEL_27:
  __int16 v75 = v32;
  uint64_t v76 = v26;
  id v38 = [(HMDCharacteristicResponseNotificationContext *)v16 changedCharacteristics];
  id v39 = [v38 allObjects];
  [(HMDHome *)v18 _handleMatterLockChangedCharacteristics:v39 message:v21 remoteRequest:v27];

  id v40 = [(HMDCharacteristicResponseNotificationContext *)v16 changedCharacteristics];
  id v41 = [v40 allObjects];
  id v42 = [(HMDCharacteristicResponseNotificationContext *)v16 previouslyNilChangedCharacteristics];
  id v43 = [v42 allObjects];
  LOBYTE(v72) = 0;
  [(HMDHome *)v18 _postInternalNotificationForChangedCharacteristics:v41 previouslyNilChangedCharacteristics:v43 modifiedCharacteristics:0 changedByThisDevice:v27 ^ 1 residentShouldNotifyPeers:1 message:v21 broadcast:v72];

  uint64_t v83 = v16;
  id v44 = [(HMDCharacteristicResponseNotificationContext *)v16 notificationWithHome:v18];
  if (v44)
  {
    id v45 = (void *)MEMORY[0x230FBD990]();
    id v46 = v18;
    id v47 = HMFGetOSLogHandle();
    id v74 = v13;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
    {
      char v48 = HMFGetLogIdentifier();
      long long v49 = [v44 name];
      long long v50 = [v44 object];
      *(_DWORD *)buf = 138543874;
      long long v88 = v48;
      __int16 v89 = 2112;
      long long v90 = v49;
      __int16 v91 = 2112;
      id v92 = v50;
      _os_log_impl(&dword_22F52A000, v47, OS_LOG_TYPE_INFO, "%{public}@Posting %@ with object: %@", buf, 0x20u);

      id v13 = v74;
    }

    long long v51 = (void *)MEMORY[0x230FBD990]();
    long long v52 = v46;
    id v53 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      uint64_t v54 = v73 = v51;
      uint64_t v55 = [v44 name];
      uint64_t v56 = [v44 object];
      id v57 = [v44 userInfo];
      *(_DWORD *)buf = 138544130;
      long long v88 = v54;
      __int16 v89 = 2112;
      long long v90 = v55;
      __int16 v91 = 2112;
      id v92 = v56;
      __int16 v93 = 2112;
      int v94 = v57;
      _os_log_impl(&dword_22F52A000, v53, OS_LOG_TYPE_DEBUG, "%{public}@Posting %@ with object: %@, userInfo: %@", buf, 0x2Au);

      id v13 = v74;
      long long v51 = v73;
    }

    uint64_t v58 = [(HMDHome *)v52 notificationCenter];
    [v58 postNotification:v44];
  }
  uint64_t v59 = (void *)MEMORY[0x230FBD990]();
  id v60 = [(HMDCharacteristicResponseNotificationContext *)v83 responseCharacteristics];
  id v61 = [v60 allObjects];
  id v62 = [(HMDCharacteristicResponseNotificationContext *)v83 notificationPayloadByAccessoryUUID];
  long long v63 = [(HMDHome *)v18 _splitCharacteristicChanges:v61 changedAccessories:v62];

  if (v21)
  {
    long long v64 = [v21 proxyConnection];
    BOOL v65 = v64 || v27;

    if (!v65)
    {
      long long v66 = aBlock;
      __int16 v71 = _Block_copy(aBlock);
      long long v70 = v71;
      if (v71)
      {
        __int16 v69 = v80;
        (*((void (**)(void *, void, void *))v71 + 2))(v71, 0, v80);
        long long v68 = 0;
      }
      else
      {
        long long v68 = 0;
        __int16 v69 = v80;
      }
      goto LABEL_47;
    }
  }
  long long v66 = aBlock;
  if (aBlock) {
    char v67 = v27;
  }
  else {
    char v67 = 1;
  }
  if ((v67 & 1) == 0)
  {
    v84[0] = MEMORY[0x263EF8330];
    v84[1] = 3221225472;
    v84[2] = __131__HMDHome__notifyChangedCharacteristics_identifier_multiPartResponse_moreMessagesInMultipart_requestMessage_withCompletionHandler___block_invoke;
    v84[3] = &unk_264A2F870;
    id v86 = aBlock;
    __int16 v69 = v80;
    id v85 = v80;
    long long v68 = _Block_copy(v84);

    long long v70 = v86;
LABEL_47:

    goto LABEL_48;
  }
  long long v68 = 0;
  __int16 v69 = v80;
LABEL_48:
  [(HMDHome *)v18 _sendClientCharacteristicsChangedNotificationWithIdentifier:v78 requestMessage:v21 multiPartResponse:v81 moreInMultiPartResponse:v79 characteristicChanges:v63 completionHandler:v68];

  [(HMDHome *)v18 _wol_processChangedCharacteristicResponses:v13];
}

void __131__HMDHome__notifyChangedCharacteristics_identifier_multiPartResponse_moreMessagesInMultipart_requestMessage_withCompletionHandler___block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  if (v2)
  {
    id v3 = v2;
    (*((void (**)(void *, void, void))v2 + 2))(v2, 0, *(void *)(a1 + 32));
    uint64_t v2 = v3;
  }
}

- (void)_sendClientCharacteristicsChangedNotificationWithIdentifier:(id)a3 requestMessage:(id)a4 multiPartResponse:(BOOL)a5 moreInMultiPartResponse:(BOOL)a6 characteristicChanges:(id)a7 completionHandler:(id)a8
{
  BOOL v10 = a6;
  uint64_t v81 = *MEMORY[0x263EF8340];
  id v56 = a3;
  id v57 = a4;
  id v14 = a7;
  id v53 = a8;
  uint64_t v54 = v14;
  *((void *)&v59 + 1) = [v14 objectForKeyedSubscript:@"kCharacteristicUpdatesForAllClientsNotificationKey"];
  *(void *)&long long v59 = [v14 objectForKeyedSubscript:@"kCharacteristicUpdatesForEntitledClientsNotificationKey"];
  if (a5)
  {
    id v15 = [NSNumber numberWithBool:v10];
    long long v52 = +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:self changedAccessories:*((void *)&v59 + 1) moreMessagesInMultipart:v15];
  }
  else
  {
    long long v52 = +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:self changedAccessories:*((void *)&v59 + 1) moreMessagesInMultipart:0];
  }
  if ((void)v59)
  {
    if (*((void *)&v59 + 1)) {
      uint64_t v16 = *((void *)&v59 + 1);
    }
    else {
      uint64_t v16 = MEMORY[0x263EFFA78];
    }
    id v17 = [MEMORY[0x263EFF9A0] dictionaryWithDictionary:v16];
    [v17 addEntriesFromDictionary:(void)v59];
    id v18 = (void *)[v17 copy];
    if (a5)
    {
      id v19 = [NSNumber numberWithBool:v10];
      long long v51 = +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:self changedAccessories:v18 moreMessagesInMultipart:v19];
    }
    else
    {
      long long v51 = +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:self changedAccessories:v18 moreMessagesInMultipart:0];
    }
  }
  else
  {
    long long v51 = 0;
  }
  uint64_t v55 = [v57 proxyConnection];
  uint64_t v58 = [MEMORY[0x263EFF9B0] orderedSet];
  if (v55) {
    objc_msgSend(v58, "addObject:");
  }
  if (v59 != 0)
  {
    uint64_t v20 = [(HMDHome *)self xpcMessageTransportFactory];
    id v21 = [v20 defaultTransport];
    int v22 = [v21 connections];
    [v58 addObjectsFromArray:v22];
  }
  if ([v57 qualityOfService] < 17) {
    uint64_t v23 = 17;
  }
  else {
    uint64_t v23 = [v57 qualityOfService];
  }
  id v24 = objc_alloc(MEMORY[0x263F42570]);
  BOOL v25 = [(HMDHome *)self uuid];
  uint64_t v26 = [v24 initWithTarget:v25];

  long long v50 = (void *)v26;
  BOOL v27 = (void *)[objc_alloc(MEMORY[0x263F42590]) initWithName:@"kMultipleCharacteristicValuesUpdatedNotificationKey" qualityOfService:v23 destination:v26 payload:0];
  __int16 v28 = v27;
  if (v56) {
    objc_msgSend(v27, "setIdentifier:");
  }
  uint64_t v29 = (void *)MEMORY[0x230FBD990]();
  uint32_t v30 = self;
  id v31 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    id v32 = HMFGetLogIdentifier();
    uint64_t v33 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v58, "count"));
    [*((id *)&v59 + 1) count];
    id v34 = HMFBooleanToString();
    [(id)v59 count];
    id v35 = HMFBooleanToString();
    id v36 = HMFBooleanToString();
    id v37 = HMFBooleanToString();
    *(_DWORD *)buf = 138544898;
    *(void *)&uint8_t buf[4] = v32;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v33;
    *(_WORD *)&buf[22] = 2112;
    id v72 = v56;
    __int16 v73 = 2112;
    id v74 = v34;
    __int16 v75 = 2112;
    uint64_t v76 = v35;
    __int16 v77 = 2112;
    id v78 = v36;
    __int16 v79 = 2112;
    long long v80 = v37;
    _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_INFO, "%{public}@Notifying %@ clients of characteristic changes with message identifier: %@ allClients: %@ entitledClients: %@ multiPartResponse: %@ moreMessagesInMultipart: %@", buf, 0x48u);
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  LOBYTE(v72) = v53 != 0;
  dispatch_group_t v38 = dispatch_group_create();
  id v39 = [v58 array];
  v62[0] = MEMORY[0x263EF8330];
  v62[1] = 3221225472;
  void v62[2] = __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke;
  v62[3] = &unk_264A16D10;
  id v40 = v51;
  id v63 = v40;
  id v41 = v28;
  id v64 = v41;
  id v42 = v52;
  id v65 = v42;
  id v43 = v55;
  id v66 = v43;
  __int16 v69 = buf;
  uint64_t v70 = 34305;
  id v44 = v38;
  char v67 = v44;
  id v45 = v53;
  id v68 = v45;
  objc_msgSend(v39, "na_each:", v62);

  id v46 = [(HMDHome *)v30 reportingSessionManager];
  id v47 = [v41 messagePayload];
  char v48 = [v41 identifier];
  [v46 addResponseMessagePayload:v47 toSessionWithUUID:v48];

  if (*(unsigned char *)(*(void *)&buf[8] + 24))
  {
    long long v49 = [(HMDHome *)v30 workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_3;
    block[3] = &unk_264A2DFA0;
    id v61 = v45;
    dispatch_group_notify(v44, v49, block);
  }
  _Block_object_dispose(buf, 8);
}

void __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = (void *)(a1 + 32);
  if (*(void *)(a1 + 32) && ([v3 isEntitledForSPIAccess] & 1) != 0)
  {
    uint64_t v6 = 1;
    uint64_t v7 = 5;
  }
  else
  {
    uint64_t v6 = 0;
    id v5 = (void *)(a1 + 48);
    uint64_t v7 = 1;
  }
  [*(id *)(a1 + 40) setMessagePayload:*v5];
  [*(id *)(a1 + 40) setRequiresSPIEntitlement:v6];
  if (*(void **)(a1 + 56) == v4)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
  }
  else
  {
    [*(id *)(a1 + 40) setQualityOfService:17];
    id v8 = [[HMDHomeManagerXPCMessageSendPolicy alloc] initWithEntitlements:v7 options:*(void *)(a1 + 88) active:1];
    [*(id *)(a1 + 40) setSendPolicy:v8];
  }
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
  id v9 = (void *)[*(id *)(a1 + 40) copy];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  v11[2] = __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_2;
  void v11[3] = &unk_264A2F6E8;
  id v12 = v4;
  id v13 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 72);
  id v14 = *(id *)(a1 + 64);
  id v10 = v4;
  [v10 sendMessage:v9 completionHandler:v11];
}

uint64_t __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (*(void *)(a1 + 32) == *(void *)(a1 + 40))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    if (v3) {
      (*(void (**)(void))(v3 + 16))();
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

- (void)_updateBulletinBoardOfChangedCharacteristics:(id)a3 modifiedCharacteristics:(id)a4 changedByThisDevice:(BOOL)a5 changeNotificationFromPrimary:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v7 = a5;
  id v11 = a3;
  id v9 = a4;
  if ([v11 count])
  {
    id v10 = +[HMDBulletinBoard sharedBulletinBoard];
    [v10 insertBulletinsForChangedCharacteristics:v11 modifiedCharacteristics:v9 changedByThisDevice:v7 changeNotificationFromPrimary:v6 completion:0];
  }
}

- (void)notifyRemoteUsersOfChangedCharacteristics:(id)a3 message:(id)a4 broadcast:(BOOL)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = [(HMDHome *)self workQueue];
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  void v13[2] = __71__HMDHome_notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke;
  v13[3] = &unk_264A2B1D8;
  void v13[4] = self;
  id v14 = v8;
  id v15 = v9;
  BOOL v16 = a5;
  id v11 = v9;
  id v12 = v8;
  dispatch_async(v10, v13);
}

uint64_t __71__HMDHome_notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyRemoteUsersOfChangedCharacteristics:*(void *)(a1 + 40) message:*(void *)(a1 + 48) broadcast:*(unsigned __int8 *)(a1 + 56)];
}

- (void)notifyOfChangedCharacteristic:(id)a3 changedByThisDevice:(BOOL)a4 residentShouldNotifyPeers:(BOOL)a5 message:(id)a6
{
  id v10 = a3;
  id v11 = a6;
  id v12 = [(HMDHome *)self workQueue];
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  v15[2] = __95__HMDHome_notifyOfChangedCharacteristic_changedByThisDevice_residentShouldNotifyPeers_message___block_invoke;
  v15[3] = &unk_264A26EA0;
  void v15[4] = self;
  id v16 = v10;
  BOOL v18 = a4;
  BOOL v19 = a5;
  id v17 = v11;
  id v13 = v11;
  id v14 = v10;
  dispatch_async(v12, v15);
}

void __95__HMDHome_notifyOfChangedCharacteristic_changedByThisDevice_residentShouldNotifyPeers_message___block_invoke(uint64_t a1)
{
  v5[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  v5[0] = *(void *)(a1 + 40);
  uint64_t v3 = [MEMORY[0x263EFF8C0] arrayWithObjects:v5 count:1];
  LOBYTE(v4) = 0;
  [v2 _postInternalNotificationForChangedCharacteristics:v3 previouslyNilChangedCharacteristics:MEMORY[0x263EFFA68] modifiedCharacteristics:0 changedByThisDevice:*(unsigned __int8 *)(a1 + 56) residentShouldNotifyPeers:*(unsigned __int8 *)(a1 + 57) message:*(void *)(a1 + 48) broadcast:v4];
}

- (void)_postInternalNotificationForChangedCharacteristics:(id)a3 previouslyNilChangedCharacteristics:(id)a4 modifiedCharacteristics:(id)a5 changedByThisDevice:(BOOL)a6 residentShouldNotifyPeers:(BOOL)a7 message:(id)a8 broadcast:(BOOL)a9
{
  BOOL v107 = a7;
  BOOL v109 = a6;
  uint64_t v161 = *MEMORY[0x263EF8340];
  id v13 = a3;
  id v108 = a4;
  id v14 = a5;
  id v121 = a8;
  id v15 = (void *)MEMORY[0x230FBD990]();
  id v16 = self;
  id v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    BOOL v18 = HMFGetLogIdentifier();
    BOOL v19 = HMFBooleanToString();
    uint64_t v20 = HMFBooleanToString();
    id v21 = HMFBooleanToString();
    int v22 = [v121 shortDescription];
    *(_DWORD *)buf = 138544642;
    uint64_t v150 = v18;
    __int16 v151 = 2112;
    id v152 = v19;
    __int16 v153 = 2112;
    long long v154 = v20;
    __int16 v155 = 2112;
    id v156 = v21;
    __int16 v157 = 2112;
    id v158 = v13;
    __int16 v159 = 2112;
    id v160 = v22;
    _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Posting internal notification and notifying remote users with changedByThisDevice: %@ residentShouldNotifyPeers: %@ broadcast: %@ about changed characteristics: %@ message: %@ ", buf, 0x3Eu);
  }
  uint64_t v23 = v121;
  if (![v13 count] && !objc_msgSend(v108, "count")) {
    goto LABEL_95;
  }
  uint64_t v24 = [v121 dictionaryForKey:@"kPresenceDictionaryForNotificationKey"];
  uint64_t v25 = [v121 dictionaryForKey:@"kPresencePairingIdentifierDictionaryForNotificationKey"];
  v144[0] = MEMORY[0x263EF8330];
  v144[1] = 3221225472;
  v144[2] = __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke;
  v144[3] = &unk_264A2D3B8;
  v144[4] = v16;
  uint64_t v26 = objc_msgSend(v13, "na_filter:", v144);
  BOOL v27 = [v121 name];
  uint64_t v28 = [v27 isEqual:@"kCharacterisiticsChangedInternalNotificationKey"];

  uint64_t v29 = [(HMDHome *)v16 accessoryBulletinNotificationManager];
  uint64_t v30 = [v29 bulletinCharacteristicsFromChangedCharacteristics:v26 message:v121];

  id v116 = (void *)v24;
  id v117 = v14;
  char v119 = v16;
  uint64_t v114 = (void *)v30;
  uint64_t v115 = (void *)v25;
  long long v105 = (void *)v26;
  if (!v30)
  {
    if (v25)
    {
      id v31 = [[HMDHomePresenceRemote alloc] initWithPresenceByPairingIdentity:v25];
    }
    else
    {
      if (!v24)
      {
        id v32 = 0;
        goto LABEL_12;
      }
      id v31 = [[HMDHomePresenceRemote alloc] initWithPresenceByUserId:v24];
    }
    id v32 = v31;
LABEL_12:
    uint64_t v33 = [(HMDHome *)v16 localCapabilitiesDataSource];
    int v34 = [v33 supportsBulletinBoard];

    if (v34)
    {
      v140[0] = MEMORY[0x263EF8330];
      v140[1] = 3221225472;
      v140[2] = __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke_2;
      v140[3] = &unk_264A16CE8;
      v140[4] = v16;
      id v141 = v14;
      BOOL v142 = v109;
      char v143 = v28;
      [(HMDHome *)v16 evaluateNotificationConditionForCharacteristics:v26 homePresence:v32 completion:v140];
    }
    goto LABEL_15;
  }
  [(HMDHome *)v16 _updateBulletinBoardOfChangedCharacteristics:v30 modifiedCharacteristics:v14 changedByThisDevice:v109 changeNotificationFromPrimary:v28];
LABEL_15:
  uint64_t v123 = [MEMORY[0x263F08968] weakToStrongObjectsMapTable];
  long long v136 = 0u;
  long long v137 = 0u;
  long long v138 = 0u;
  long long v139 = 0u;
  id v106 = v13;
  obuint64_t j = v13;
  uint64_t v35 = [obj countByEnumeratingWithState:&v136 objects:v148 count:16];
  if (v35)
  {
    uint64_t v36 = v35;
    uint64_t v37 = *(void *)v137;
    do
    {
      for (uint64_t i = 0; i != v36; ++i)
      {
        if (*(void *)v137 != v37) {
          objc_enumerationMutation(obj);
        }
        id v39 = *(void **)(*((void *)&v136 + 1) + 8 * i);
        id v40 = [v39 accessory];
        if (v40)
        {
          id v41 = [v123 objectForKey:v40];
          if (!v41)
          {
            id v41 = [MEMORY[0x263EFF9C0] set];
            [v123 setObject:v41 forKey:v40];
          }
          [v41 addObject:v39];
          id v42 = [[HMDHAPAccessoryNotificationEvent alloc] initWithAccessory:v40 characteristic:v39];
          id v43 = [(HMDHome *)v16 logEventSubmitter];
          [v43 submitLogEvent:v42 error:0];
        }
      }
      uint64_t v36 = [obj countByEnumeratingWithState:&v136 objects:v148 count:16];
    }
    while (v36);
  }

  uint64_t v122 = [MEMORY[0x263F08968] weakToStrongObjectsMapTable];
  long long v132 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v135 = 0u;
  id v44 = v108;
  uint64_t v45 = [v44 countByEnumeratingWithState:&v132 objects:v147 count:16];
  if (v45)
  {
    uint64_t v46 = v45;
    uint64_t v47 = *(void *)v133;
    do
    {
      for (uint64_t j = 0; j != v46; ++j)
      {
        if (*(void *)v133 != v47) {
          objc_enumerationMutation(v44);
        }
        long long v49 = *(void **)(*((void *)&v132 + 1) + 8 * j);
        long long v50 = [v49 accessory];
        if (v50)
        {
          long long v51 = [v122 objectForKey:v50];
          if (!v51)
          {
            long long v51 = [MEMORY[0x263EFF9C0] set];
            [v122 setObject:v51 forKey:v50];
          }
          [v51 addObject:v49];
        }
      }
      uint64_t v46 = [v44 countByEnumeratingWithState:&v132 objects:v147 count:16];
    }
    while (v46);
  }

  __int16 v120 = [MEMORY[0x263EFF9A0] dictionary];
  long long v128 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  id v112 = v114;
  uint64_t v52 = [v112 countByEnumeratingWithState:&v128 objects:v146 count:16];
  if (v52)
  {
    uint64_t v53 = v52;
    uint64_t v54 = *(void *)v129;
    do
    {
      for (uint64_t k = 0; k != v53; ++k)
      {
        if (*(void *)v129 != v54) {
          objc_enumerationMutation(v112);
        }
        id v56 = *(void **)(*((void *)&v128 + 1) + 8 * k);
        id v57 = [v56 accessory];
        uint64_t v58 = v57;
        if (v57)
        {
          long long v59 = [v57 uuid];
          id v60 = [v120 objectForKeyedSubscript:v59];
          if (!v60)
          {
            id v60 = [MEMORY[0x263EFF9C0] set];
            [v120 setObject:v60 forKeyedSubscript:v59];
          }
          [v60 addObject:v56];
        }
      }
      uint64_t v53 = [v112 countByEnumeratingWithState:&v128 objects:v146 count:16];
    }
    while (v53);
  }

  id v61 = objc_msgSend(MEMORY[0x263EFF9C0], "setWithCapacity:", objc_msgSend(v122, "count") + objc_msgSend(v123, "count"));
  id v62 = objc_msgSend(v123, "hm_allKeys");
  [v61 addObjectsFromArray:v62];

  id v63 = objc_msgSend(v122, "hm_allKeys");
  [v61 addObjectsFromArray:v63];

  long long v126 = 0u;
  long long v127 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  id v111 = v61;
  uint64_t v23 = v121;
  uint64_t v118 = [v111 countByEnumeratingWithState:&v124 objects:v145 count:16];
  if (v118)
  {
    uint64_t v64 = MEMORY[0x263EFFA68];
    uint64_t v113 = *(void *)v125;
    do
    {
      for (uint64_t m = 0; m != v118; ++m)
      {
        if (*(void *)v125 != v113) {
          objc_enumerationMutation(v111);
        }
        id v66 = *(void **)(*((void *)&v124 + 1) + 8 * m);
        char v67 = [MEMORY[0x263EFF9A0] dictionary];
        id v68 = [v123 objectForKey:v66];
        uint64_t v69 = [v68 allObjects];
        uint64_t v70 = (void *)v69;
        if (v69) {
          uint64_t v71 = v69;
        }
        else {
          uint64_t v71 = v64;
        }
        [v67 setObject:v71 forKeyedSubscript:@"kModifiedCharacteristicsKey"];

        id v72 = [v122 objectForKey:v66];
        uint64_t v73 = [v72 allObjects];
        id v74 = (void *)v73;
        if (v73) {
          uint64_t v75 = v73;
        }
        else {
          uint64_t v75 = v64;
        }
        [v67 setObject:v75 forKeyedSubscript:@"HMDModifiedPreviouslyNilValuedCharacteristicsKey"];

        if (v114)
        {
          uint64_t v76 = [v66 uuid];
          __int16 v77 = [v120 objectForKeyedSubscript:v76];

          uint64_t v78 = [v77 allObjects];
          __int16 v79 = (void *)v78;
          if (v78) {
            uint64_t v80 = v78;
          }
          else {
            uint64_t v80 = v64;
          }
          [v67 setObject:v80 forKeyedSubscript:@"kCharacteristicsToShowBulletinsKey"];
        }
        else
        {
          uint64_t v81 = (void *)MEMORY[0x230FBD990]();
          long long v82 = v16;
          uint64_t v83 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
          {
            long long v84 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543362;
            uint64_t v150 = v84;
            _os_log_impl(&dword_22F52A000, v83, OS_LOG_TYPE_INFO, "%{public}@Not inserting kCharacteristicsToShowBulletinsKey, had to fall back to legacy evaluation", buf, 0xCu);
          }
        }
        uint64_t v23 = v121;
        if (v121)
        {
          id v85 = [v121 name];
          if ([v85 isEqualToString:@"kCharacterisiticsChangedInternalNotificationKey"]) {
            goto LABEL_82;
          }
          id v86 = [v121 name];
          if ([v86 isEqualToString:@"kMultipleCharacteristicReadRequestKey"])
          {
            id v16 = v119;
LABEL_81:

            uint64_t v23 = v121;
LABEL_82:

            goto LABEL_83;
          }
          id v92 = [v121 name];
          char v93 = [v92 isEqualToString:@"kCharacteristicReadRequestKey"];

          uint64_t v23 = v121;
          id v16 = v119;
          if ((v93 & 1) == 0)
          {
            int v94 = (void *)MEMORY[0x230FBD990]();
            uint64_t v95 = v119;
            __int16 v96 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
            {
              long long v97 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              uint64_t v150 = v97;
              __int16 v151 = 2112;
              id v152 = v121;
              _os_log_impl(&dword_22F52A000, v96, OS_LOG_TYPE_DEBUG, "%{public}@Adding user context to changed characteristics notification using message: %@", buf, 0x16u);
            }
            uint64_t v23 = v121;
            id v85 = [v121 userForHome:v95];
            if (v85) {
              goto LABEL_80;
            }
          }
        }
        else if (v109)
        {
          long long v87 = (void *)MEMORY[0x230FBD990]();
          long long v88 = v16;
          __int16 v89 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
          {
            long long v90 = HMFGetLogIdentifier();
            __int16 v91 = [(HMDHome *)v88 currentUser];
            *(_DWORD *)buf = 138543618;
            uint64_t v150 = v90;
            __int16 v151 = 2112;
            id v152 = v91;
            _os_log_impl(&dword_22F52A000, v89, OS_LOG_TYPE_DEBUG, "%{public}@Adding user context to changed characteristics notification using currentUser: %@", buf, 0x16u);

            id v16 = v119;
          }

          id v85 = [(HMDHome *)v88 currentUser];
          uint64_t v23 = 0;
          if (v85)
          {
LABEL_80:
            id v86 = [v85 uuid];
            [v67 setObject:v86 forKeyedSubscript:@"kUserUUIDKey"];
            goto LABEL_81;
          }
        }
LABEL_83:
        __int16 v98 = [v23 uuidForKey:@"kMessageUserOverrideKey"];
        if (v98) {
          [v67 setObject:v98 forKeyedSubscript:@"kMessageUserOverrideKey"];
        }
        if (v23)
        {
          id v99 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", +[HMDHome sanitizedOriginalSourceForMessage:]((uint64_t)HMDHome, v23));
          [v67 setObject:v99 forKeyedSubscript:@"kMessageSourceForNotificationKey"];
        }
        [v67 setObject:v117 forKeyedSubscript:@"kModifiedCharacteristicsMapKey"];
        [v67 setObject:v116 forKeyedSubscript:@"kPresenceDictionaryForNotificationKey"];
        [v67 setObject:v115 forKeyedSubscript:@"kPresencePairingIdentifierDictionaryForNotificationKey"];
        __int16 v100 = (void *)[v67 copy];
        logAndPostNotification(@"HMDAccessoryCharacteristicsChangedNotification", v66, v100);

        uint64_t v64 = MEMORY[0x263EFFA68];
      }
      uint64_t v118 = [v111 countByEnumeratingWithState:&v124 objects:v145 count:16];
    }
    while (v118);
  }

  id v13 = v106;
  id v14 = v117;
  if (v107
    && [(HMDHome *)v16 shouldRelayNotificationToRegisteredDevicesForSource:v23])
  {
    long long v101 = (void *)MEMORY[0x230FBD990]();
    __int16 v102 = v16;
    long long v103 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
    {
      __int16 v104 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v150 = v104;
      _os_log_impl(&dword_22F52A000, v103, OS_LOG_TYPE_INFO, "%{public}@Posting notification to remote users since this is a resident device or is paired with a watch", buf, 0xCu);
    }
    uint64_t v23 = v121;
    [(HMDHome *)v102 notifyRemoteUsersOfChangedCharacteristics:obj message:v121 broadcast:a9];
  }

LABEL_95:
}

uint64_t __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _shouldUseAttributeReportForBulletin:a2];
}

uint64_t __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _updateBulletinBoardOfChangedCharacteristics:a3 modifiedCharacteristics:*(void *)(a1 + 40) changedByThisDevice:*(unsigned __int8 *)(a1 + 48) changeNotificationFromPrimary:*(unsigned __int8 *)(a1 + 49)];
}

- (id)_disablePayloadFromRemotelyUpdatedCharacteristicNotifications:(id)a3
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
  {
    id v31 = [MEMORY[0x263EFF9A0] dictionary];
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    obuint64_t j = [v4 allKeys];
    uint64_t v5 = [obj countByEnumeratingWithState:&v50 objects:v56 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v51;
      unint64_t v8 = 0x263EFF000uLL;
      unint64_t v9 = 0x263F08000uLL;
      uint64_t v33 = self;
      id v34 = v4;
      uint64_t v32 = *(void *)v51;
      do
      {
        uint64_t v10 = 0;
        uint64_t v35 = v6;
        do
        {
          if (*(void *)v51 != v7) {
            objc_enumerationMutation(obj);
          }
          uint64_t v38 = v10;
          uint64_t v11 = *(void *)(*((void *)&v50 + 1) + 8 * v10);
          id v12 = [*(id *)(v8 + 2432) array];
          id v41 = objc_msgSend(v4, "hmf_dictionaryForKey:", v11);
          id v39 = (void *)[objc_alloc(*(Class *)(v9 + 3128)) initWithUUIDString:v11];
          id v13 = -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:");
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v14 = v13;
          }
          else {
            id v14 = 0;
          }
          id v15 = v14;

          if (v15 && ([v15 hasBTLELink] & 1) == 0 && objc_msgSend(v15, "hasIPLink"))
          {
            id v36 = v15;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            id v40 = [v41 allKeys];
            uint64_t v16 = [v40 countByEnumeratingWithState:&v46 objects:v55 count:16];
            if (v16)
            {
              uint64_t v17 = v16;
              uint64_t v18 = *(void *)v47;
              do
              {
                for (uint64_t i = 0; i != v17; ++i)
                {
                  if (*(void *)v47 != v18) {
                    objc_enumerationMutation(v40);
                  }
                  uint64_t v20 = objc_msgSend(v41, "hmf_dictionaryForKey:", *(void *)(*((void *)&v46 + 1) + 8 * i));
                  long long v42 = 0u;
                  long long v43 = 0u;
                  long long v44 = 0u;
                  long long v45 = 0u;
                  id v21 = [v20 allKeys];
                  uint64_t v22 = [v21 countByEnumeratingWithState:&v42 objects:v54 count:16];
                  if (v22)
                  {
                    uint64_t v23 = v22;
                    uint64_t v24 = *(void *)v43;
                    do
                    {
                      for (uint64_t j = 0; j != v23; ++j)
                      {
                        if (*(void *)v43 != v24) {
                          objc_enumerationMutation(v21);
                        }
                        uint64_t v26 = HAPInstanceIDFromValue();
                        if (v26) {
                          [v12 addObject:v26];
                        }
                      }
                      uint64_t v23 = [v21 countByEnumeratingWithState:&v42 objects:v54 count:16];
                    }
                    while (v23);
                  }
                }
                uint64_t v17 = [v40 countByEnumeratingWithState:&v46 objects:v55 count:16];
              }
              while (v17);
            }

            self = v33;
            id v4 = v34;
            uint64_t v7 = v32;
            unint64_t v8 = 0x263EFF000;
            unint64_t v9 = 0x263F08000;
            uint64_t v6 = v35;
            id v15 = v36;
            if ([v12 count])
            {
              BOOL v27 = (void *)[v12 copy];
              uint64_t v28 = [v39 UUIDString];
              [v31 setObject:v27 forKeyedSubscript:v28];

              id v15 = v36;
            }
          }

          uint64_t v10 = v38 + 1;
        }
        while (v38 + 1 != v6);
        uint64_t v6 = [obj countByEnumeratingWithState:&v50 objects:v56 count:16];
      }
      while (v6);
    }

    uint64_t v29 = (void *)[v31 copy];
  }
  else
  {
    uint64_t v29 = (void *)MEMORY[0x263EFFA78];
  }

  return v29;
}

- (void)_handleCharacteristicsChangedNotification:(id)a3
{
  uint64_t v162 = *MEMORY[0x263EF8340];
  id v122 = a3;
  long long v110 = [v122 dictionaryForKey:@"kCharacteristicNotificationsKey"];
  id v111 = [v122 stringForKey:@"kRequestIdentifierKey"];
  long long v126 = [MEMORY[0x263EFF980] array];
  if (v111)
  {
    uint64_t v3 = [(HMDHome *)self accessoryReaderWriter];
    [v3 handleRemotelyUpdatedCharacteristicsMessage:v122];

    BOOL v107 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v111];
    id v4 = [(HMDHome *)self pendingResponses];
    __int16 v120 = [v4 objectForKeyedSubscript:v111];

    uint64_t v5 = [MEMORY[0x263EFF980] array];
    if (v120)
    {
      long long v148 = 0u;
      long long v149 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      obuint64_t j = [v110 allKeys];
      uint64_t v106 = [obj countByEnumeratingWithState:&v146 objects:v161 count:16];
      if (v106)
      {
        uint64_t v104 = *(void *)v147;
        do
        {
          uint64_t v6 = 0;
          do
          {
            if (*(void *)v147 != v104)
            {
              uint64_t v7 = v6;
              objc_enumerationMutation(obj);
              uint64_t v6 = v7;
            }
            uint64_t v105 = v6;
            uint64_t v8 = *(void *)(*((void *)&v146 + 1) + 8 * v6);
            unint64_t v9 = [v110 objectForKeyedSubscript:v8];
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              uint64_t v10 = v9;
            }
            else {
              uint64_t v10 = 0;
            }
            id v114 = v10;

            BOOL v109 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v8];
            uint64_t v11 = [(HMDHome *)self accessoryWithUUID:v109];
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              id v12 = v11;
            }
            else {
              id v12 = 0;
            }
            id v13 = v12;

            long long v144 = 0u;
            long long v145 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            id v112 = [v114 allKeys];
            uint64_t v116 = [v112 countByEnumeratingWithState:&v142 objects:v160 count:16];
            if (v116)
            {
              uint64_t v113 = *(void *)v143;
              do
              {
                uint64_t v14 = 0;
                do
                {
                  if (*(void *)v143 != v113)
                  {
                    uint64_t v15 = v14;
                    objc_enumerationMutation(v112);
                    uint64_t v14 = v15;
                  }
                  uint64_t v118 = v14;
                  uint64_t v16 = [v114 objectForKeyedSubscript:*(void *)(*((void *)&v142 + 1) + 8 * v14)];
                  objc_opt_class();
                  if (objc_opt_isKindOfClass()) {
                    uint64_t v17 = v16;
                  }
                  else {
                    uint64_t v17 = 0;
                  }
                  id v123 = v17;

                  uint64_t v18 = HAPInstanceIDFromValue();
                  unint64_t v19 = [v120 pendingResponseCount];
                  if (v19 >= [v123 count])
                  {
                    uint64_t v21 = [v123 count];
                    uint64_t v20 = [v120 pendingResponseCount] - v21;
                  }
                  else
                  {
                    uint64_t v20 = 0;
                  }
                  [v120 setPendingResponseCount:v20];
                  long long v140 = 0u;
                  long long v141 = 0u;
                  long long v138 = 0u;
                  long long v139 = 0u;
                  uint64_t v22 = [v123 allKeys];
                  uint64_t v23 = [v22 countByEnumeratingWithState:&v138 objects:v159 count:16];
                  if (v23)
                  {
                    uint64_t v24 = 0;
                    uint64_t v25 = *(void *)v139;
                    do
                    {
                      uint64_t v26 = 0;
                      BOOL v27 = v24;
                      do
                      {
                        if (*(void *)v139 != v25) {
                          objc_enumerationMutation(v22);
                        }
                        uint64_t v28 = HAPInstanceIDFromValue();
                        uint64_t v24 = [v13 findCharacteristic:v28 forService:v18];

                        if (v24)
                        {
                          [v5 addObject:v24];
                          if ([v24 isNotificationEnabledForClientIdentifierPrefix:@"com.apple.HomeKitDaemon.Local"])objc_msgSend(v126, "addObject:", v24); {
                        }
                          }

                        ++v26;
                        BOOL v27 = v24;
                      }
                      while (v23 != v26);
                      uint64_t v23 = [v22 countByEnumeratingWithState:&v138 objects:v159 count:16];
                    }
                    while (v23);
                  }
                  uint64_t v14 = v118 + 1;
                }
                while (v118 + 1 != v116);
                uint64_t v116 = [v112 countByEnumeratingWithState:&v142 objects:v160 count:16];
              }
              while (v116);
            }

            uint64_t v6 = v105 + 1;
          }
          while (v105 + 1 != v106);
          uint64_t v106 = [obj countByEnumeratingWithState:&v146 objects:v161 count:16];
        }
        while (v106);
      }

      uint64_t v29 = (void *)MEMORY[0x230FBD990]();
      uint64_t v30 = self;
      id v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v32 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        long long v154 = v32;
        __int16 v155 = 2112;
        uint64_t v156 = (uint64_t)v111;
        __int16 v157 = 2112;
        id v158 = v110;
        _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_DEBUG, "%{public}@Notifying changes for requestIdentifier %@: %@", buf, 0x20u);
      }
      uint64_t v33 = (void *)MEMORY[0x230FBD990]();
      id v34 = [(HMDHome *)v30 _splitCharacteristicChanges:v5 changedAccessories:v110];
      uint64_t v35 = [v120 requestMessage];
      [(HMDHome *)v30 _sendClientCharacteristicsChangedNotificationWithIdentifier:v107 requestMessage:v35 multiPartResponse:1 moreInMultiPartResponse:1 characteristicChanges:v34 completionHandler:0];
    }

    uint64_t v115 = (void *)MEMORY[0x263EFFA68];
  }
  else
  {
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    id v36 = v110;
    uint64_t v37 = [v36 countByEnumeratingWithState:&v134 objects:v152 count:16];
    if (v37)
    {
      uint64_t v38 = *(void *)v135;
      do
      {
        for (uint64_t i = 0; i != v37; ++i)
        {
          if (*(void *)v135 != v38) {
            objc_enumerationMutation(v36);
          }
          uint64_t v40 = *(void *)(*((void *)&v134 + 1) + 8 * i);
          objc_initWeak((id *)buf, self);
          id v41 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v40];
          long long v42 = [(HMDHome *)self accessoryWithUUID:v41];
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            long long v43 = v42;
          }
          else {
            long long v43 = 0;
          }
          id v44 = v43;

          long long v45 = objc_msgSend(v36, "hmf_dictionaryForKey:", v40);
          long long v46 = [(HMDHome *)self workQueue];
          v131[0] = MEMORY[0x263EF8330];
          v131[1] = 3221225472;
          v131[2] = __53__HMDHome__handleCharacteristicsChangedNotification___block_invoke;
          v131[3] = &unk_264A17860;
          objc_copyWeak(&v133, (id *)buf);
          id v132 = v122;
          [v44 handleMultipleCharacteristicsUpdated:v45 message:v132 completionQueue:v46 completionHandler:v131];

          objc_destroyWeak(&v133);
          objc_destroyWeak((id *)buf);
        }
        uint64_t v37 = [v36 countByEnumeratingWithState:&v134 objects:v152 count:16];
      }
      while (v37);
    }

    uint64_t v115 = [(HMDHome *)self _unexpectedCharacteristicsFromCharacteristicNotifications:v36];
  }
  long long v124 = [MEMORY[0x263EFF980] array];
  char v119 = [v122 dictionaryForKey:@"HMDDeviceNotificationActionSetsKey"];
  +[HMDActionSetResponse responsesFromSerializedResponses:v119];
  long long v129 = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  id v47 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v48 = [v47 countByEnumeratingWithState:&v127 objects:v151 count:16];
  if (v48)
  {
    uint64_t v49 = *(void *)v128;
    do
    {
      for (uint64_t j = 0; j != v48; ++j)
      {
        if (*(void *)v128 != v49) {
          objc_enumerationMutation(v47);
        }
        long long v51 = *(void **)(*((void *)&v127 + 1) + 8 * j);
        long long v52 = [v51 actionSetUUID];
        long long v53 = [(HMDHome *)self actionSetWithUUID:v52];

        if (v53)
        {
          uint64_t v54 = [(HMDHome *)self actionSetStateSubscriptionManager];
          uint64_t v55 = [v53 uuid];
          char v56 = [v54 isMonitoringActionSet:v55];

          if (v56)
          {
            uint64_t v57 = [(HMDHome *)self actionSetStateSubscriptionManager];
            uint64_t v58 = [v51 actionSetUUID];
            objc_msgSend(v57, "actionSetStateDidChange:state:", v58, objc_msgSend(v51, "state"));
          }
          else
          {
            id v66 = [v53 uuid];
            char v67 = [v66 UUIDString];
            [v124 addObject:v67];

            id v68 = (void *)MEMORY[0x230FBD990]();
            uint64_t v69 = self;
            uint64_t v70 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v71 = HMFGetLogIdentifier();
              id v72 = [v51 actionSetUUID];
              *(_DWORD *)buf = 138543618;
              long long v154 = v71;
              __int16 v155 = 2112;
              uint64_t v156 = (uint64_t)v72;
              _os_log_impl(&dword_22F52A000, v70, OS_LOG_TYPE_DEFAULT, "%{public}@Got action set response for unregistered action set %@", buf, 0x16u);
            }
          }
        }
        else
        {
          long long v59 = (void *)MEMORY[0x230FBD990]();
          id v60 = self;
          id v61 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            id v62 = HMFGetLogIdentifier();
            id v63 = [v51 actionSetUUID];
            *(_DWORD *)buf = 138543618;
            long long v154 = v62;
            __int16 v155 = 2112;
            uint64_t v156 = (uint64_t)v63;
            _os_log_impl(&dword_22F52A000, v61, OS_LOG_TYPE_ERROR, "%{public}@Got action set response for unknown action set %@", buf, 0x16u);
          }
          uint64_t v64 = [0 uuid];
          id v65 = [v64 UUIDString];
          [v124 addObject:v65];
        }
      }
      uint64_t v48 = [v47 countByEnumeratingWithState:&v127 objects:v151 count:16];
    }
    while (v48);
  }

  uint64_t v73 = [v122 dictionaryForKey:@"kMediaNotificationsKey"];
  id v74 = +[HMDMediaPropertyResponse responsesFromSerializedResponse:v73 requests:0 home:self];
  id v117 = [[HMDMediaSessionRequestMessageInformation alloc] initWithMessage:v122];
  -[HMDHome updateMediaStateWithResponses:requestMessageInformation:]((uint64_t)self, v74, v117);
  uint64_t v75 = [v122 remoteSourceDevice];
  if ([(HMDHome *)self _shouldRegisterForNotificationsWithDevice:v75])
  {
    id v121 = [(HMDHome *)self primaryResident];
    uint64_t v76 = [v121 device];
    if ([v75 isEqual:v76])
    {
      BOOL v77 = [v115 count] == 0;

      if (!v77)
      {
        uint64_t v78 = (void *)MEMORY[0x230FBD990]();
        __int16 v79 = self;
        uint64_t v80 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
        {
          uint64_t v81 = HMFGetLogIdentifier();
          uint64_t v82 = [v115 count];
          *(_DWORD *)buf = 138543618;
          long long v154 = v81;
          __int16 v155 = 2048;
          uint64_t v156 = v82;
          _os_log_impl(&dword_22F52A000, v80, OS_LOG_TYPE_INFO, "%{public}@Disabling %tu registrations with primary resident due to unexpected characteristic notification received", buf, 0x16u);
        }
        uint64_t v83 = [(HMDHome *)v79 logEventSubmitter];
        long long v84 = [[HMDUnexpectedNotificationLogEvent alloc] initWithCount:1];
        [v83 submitLogEvent:v84];

        [(HMDHome *)v79 _remotelySetNotificationsEnabled:0 forCharacteristics:v115 characteristicChangeThresholds:0];
      }
    }
    else
    {
    }
    if ([v126 count])
    {
      if ([(HMDHome *)self isCurrentDeviceAvailableResident])
      {
        if (![(HMDHome *)self isCurrentDevicePrimaryResident])
        {
          __int16 v91 = [v121 device];
          int v92 = [v75 isEqual:v91];

          if (v92)
          {
            char v93 = (void *)MEMORY[0x230FBD990]();
            int v94 = self;
            uint64_t v95 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
            {
              __int16 v96 = HMFGetLogIdentifier();
              uint64_t v97 = [v126 count];
              *(_DWORD *)buf = 138543874;
              long long v154 = v96;
              __int16 v155 = 2048;
              uint64_t v156 = v97;
              __int16 v157 = 2112;
              id v158 = v126;
              _os_log_impl(&dword_22F52A000, v95, OS_LOG_TYPE_INFO, "%{public}@Disabling %tu notifications on primary resident: %@", buf, 0x20u);
            }
            [(HMDHome *)v94 _remotelySetNotificationsEnabled:0 forCharacteristics:v126 characteristicChangeThresholds:0];
          }
        }
      }
    }
    __int16 v98 = [(HMDHome *)self _disablePayloadFromRemotelyUpdatedCharacteristicNotifications:v110];
    if ([v98 count] || objc_msgSend(v124, "count"))
    {
      id v99 = (void *)MEMORY[0x230FBD990]();
      __int16 v100 = self;
      long long v101 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
      {
        __int16 v102 = HMFGetLogIdentifier();
        long long v103 = [v75 shortDescription];
        *(_DWORD *)buf = 138543618;
        long long v154 = v102;
        __int16 v155 = 2112;
        uint64_t v156 = (uint64_t)v103;
        _os_log_impl(&dword_22F52A000, v101, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations due to unexpected characteristic notification received on primary resident from remote device: %@", buf, 0x16u);
      }
      [(HMDHome *)v100 _modifyCharacteristicNotifications:v98 characteristicChangeThresholds:MEMORY[0x263EFFA78] mediaNotifications:MEMORY[0x263EFFA78] actionSetNotificationPayload:v124 enableNotification:0 withDevice:v75];
    }
  }
  else
  {
    id v85 = (void *)MEMORY[0x230FBD990]();
    id v86 = self;
    long long v87 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
    {
      long long v88 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v154 = v88;
      __int16 v155 = 2112;
      uint64_t v156 = (uint64_t)v75;
      _os_log_impl(&dword_22F52A000, v87, OS_LOG_TYPE_INFO, "%{public}@Disabling notification registrations with resident: %@ due to unexpected characteristic notification received", buf, 0x16u);
    }
    __int16 v89 = [(HMDHome *)v86 logEventSubmitter];
    long long v90 = [[HMDUnexpectedNotificationLogEvent alloc] initWithCount:1];
    [v89 submitLogEvent:v90];

    uint64_t v150 = v75;
    id v121 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v150 count:1];
    [(HMDHome *)v86 _disableNotificationsForDevices:v121];
  }

  [v122 respondWithPayload:0];
}

void __53__HMDHome__handleCharacteristicsChangedNotification___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if ([v5 count])
  {
    id v4 = objc_msgSend(v5, "hm_allKeys");
    [WeakRetained _notifyChangedCharacteristics:v4 message:*(void *)(a1 + 32) modifiedCharacteristics:v5 broadcast:0];
  }
}

- (void)updateMediaStateWithResponses:(void *)a3 requestMessageInformation:
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (a1)
  {
    id v29 = v6;
    id v31 = [MEMORY[0x263F08968] strongToStrongObjectsMapTable];
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v28 = v5;
    obuint64_t j = v5;
    uint64_t v8 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v37;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v37 != v10) {
            objc_enumerationMutation(obj);
          }
          id v12 = *(void **)(*((void *)&v36 + 1) + 8 * i);
          id v13 = objc_msgSend(v12, "firstObject", v28);
          uint64_t v14 = [v13 request];
          uint64_t v15 = [v14 mediaProfile];
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = [v15 mediaSession];
            if (v17)
            {
              uint64_t v18 = [v31 objectForKey:v17];
              unint64_t v19 = (void *)[v18 mutableCopy];

              if (v19) {
                [v19 addObjectsFromArray:v12];
              }
              else {
                unint64_t v19 = (void *)[v12 mutableCopy];
              }
              uint64_t v20 = (void *)[v19 copy];
              [v31 setObject:v20 forKey:v17];
            }
            else
            {
              [v16 updateWithResponses:v12 requestMessageInformation:v29];
            }
          }
        }
        uint64_t v9 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
      }
      while (v9);
    }

    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v21 = objc_msgSend(v31, "hm_allKeys");
    uint64_t v22 = [v21 countByEnumeratingWithState:&v32 objects:v40 count:16];
    uint64_t v7 = v29;
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)v33;
      do
      {
        for (uint64_t j = 0; j != v23; ++j)
        {
          if (*(void *)v33 != v24) {
            objc_enumerationMutation(v21);
          }
          uint64_t v26 = *(void **)(*((void *)&v32 + 1) + 8 * j);
          BOOL v27 = objc_msgSend(v31, "objectForKey:", v26, v28);
          [v26 updateWithResponses:v27 requestMessageInformation:v29];
        }
        uint64_t v23 = [v21 countByEnumeratingWithState:&v32 objects:v40 count:16];
      }
      while (v23);
    }

    id v5 = v28;
  }
}

- (void)_notifyChangedProperties:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  if (v13)
  {
    uint64_t v14 = [(HMDHome *)self notificationHandlerMap];
    uint64_t v15 = [v14 objectForKey:v13];

    if (!v15)
    {
      uint64_t v16 = [(HMDHome *)self homeManager];
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      uint64_t v17 = [v16 watchManager];
      uint64_t v18 = [v17 connectedWatches];

      uint64_t v19 = [v18 countByEnumeratingWithState:&v29 objects:v33 count:16];
      if (v19)
      {
        BOOL v27 = v16;
        id v28 = v10;
        uint64_t v20 = *(void *)v30;
        while (2)
        {
          for (uint64_t i = 0; i != v19; ++i)
          {
            if (*(void *)v30 != v20) {
              objc_enumerationMutation(v18);
            }
            uint64_t v22 = objc_msgSend(*(id *)(*((void *)&v29 + 1) + 8 * i), "remoteDestinationString", v27, v28);
            char v23 = [v22 isEqual:v13];

            if (v23)
            {
              uint64_t v19 = 1;
              goto LABEL_13;
            }
          }
          uint64_t v19 = [v18 countByEnumeratingWithState:&v29 objects:v33 count:16];
          if (v19) {
            continue;
          }
          break;
        }
LABEL_13:
        uint64_t v16 = v27;
        id v10 = v28;
      }

      uint64_t v24 = [HMDDeviceNotificationHandler alloc];
      uint64_t v25 = [(HMDHome *)self msgDispatcher];
      uint64_t v15 = [(HMDDeviceNotificationHandler *)v24 initWithDestination:v13 watchDevice:v19 withRequestIdentifier:v11 messageDispatcher:v25 home:self];

      uint64_t v26 = [(HMDHome *)self notificationHandlerMap];
      [v26 setObject:v15 forKey:v13];
    }
    [(HMDDeviceNotificationHandler *)v15 sendNotificationForMediaProperties:v10 withRequestIdentifier:v11 notificationUpdateIdentifier:v12];
  }
}

- (void)_notifyRemoteUsersOfChangedProperties:(id)a3 requestMessageInformation:(id)a4
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)MEMORY[0x230FBD990]();
  uint64_t v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v50 = v11;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Notifying users registered with resident of changes in properties", buf, 0xCu);
  }
  long long v38 = v7;
  id v12 = [v7 remoteSourceDevice];
  id v13 = [(HMDHome *)v9 notificationRegistry];
  uint64_t v14 = [v13 destinationsRegisteredForNotificationsForProperties:v6];

  uint64_t v15 = [MEMORY[0x263EFF9C0] set];
  unint64_t skippedInterDeviceChangeNotifications = v9->_skippedInterDeviceChangeNotifications;
  uint64_t v16 = [MEMORY[0x263F08C38] UUID];
  uint64_t v42 = [v16 UUIDString];

  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  obuint64_t j = v14;
  uint64_t v17 = [obj countByEnumeratingWithState:&v45 objects:v55 count:16];
  id v41 = v12;
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v46;
    uint64_t v20 = HMDAppleMediaProfile;
    id v39 = v6;
    uint64_t v40 = v9;
    uint64_t v43 = *(void *)v46;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v46 != v19) {
          objc_enumerationMutation(obj);
        }
        uint64_t v22 = *(void *)(*((void *)&v45 + 1) + 8 * i);
        char v23 = [&v20[77] deviceWithDestination:v22];
        if (v23)
        {
          [v15 addObject:v23];
          if ([(HMDHome *)v9 _shouldSendToDestination:v22 device:v23 remoteSourceDevice:v12])
          {
            uint64_t v24 = v15;
            uint64_t v25 = [(HMDHome *)v9 notificationRegistry];
            uint64_t v26 = [v25 filterProperties:v6 deviceIdsDestination:v22];

            if ([v26 count])
            {
              BOOL v27 = (void *)MEMORY[0x230FBD990]();
              id v28 = v9;
              long long v29 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
              {
                long long v30 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543874;
                long long v50 = v30;
                __int16 v51 = 2112;
                unint64_t v52 = v22;
                __int16 v53 = 2112;
                uint64_t v54 = v42;
                _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Fanning out to device %@ with the properties that changed with notificationUpdateIdentifier: %@", buf, 0x20u);

                id v6 = v39;
              }

              [(HMDHome *)v28 _notifyChangedProperties:v26 withRequestIdentifier:0 notificationUpdateIdentifier:v42 toUserDeviceAddress:v22];
              uint64_t v9 = v40;
              id v12 = v41;
            }

            uint64_t v15 = v24;
            uint64_t v19 = v43;
            uint64_t v20 = HMDAppleMediaProfile;
          }
        }
      }
      uint64_t v18 = [obj countByEnumeratingWithState:&v45 objects:v55 count:16];
    }
    while (v18);
  }

  if (isInternalBuild()
    && skippedInterDeviceChangeNotifications != v9->_skippedInterDeviceChangeNotifications)
  {
    long long v31 = (void *)MEMORY[0x230FBD990]();
    long long v32 = v9;
    HMFGetOSLogHandle();
    v34 = long long v33 = v9;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      long long v35 = HMFGetLogIdentifier();
      unint64_t v36 = v33->_skippedInterDeviceChangeNotifications;
      *(_DWORD *)buf = 138543618;
      long long v50 = v35;
      __int16 v51 = 2048;
      unint64_t v52 = v36;
      _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_INFO, "%{public}@Skipped %lu spurious inter-device media property change notifications", buf, 0x16u);

      id v12 = v41;
    }
  }
}

- (void)notifyRemoteUsersOfChangedProperties:(id)a3 requestMessageInformation:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __74__HMDHome_notifyRemoteUsersOfChangedProperties_requestMessageInformation___block_invoke;
  block[3] = &unk_264A2F2F8;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t __74__HMDHome_notifyRemoteUsersOfChangedProperties_requestMessageInformation___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyRemoteUsersOfChangedProperties:*(void *)(a1 + 40) requestMessageInformation:*(void *)(a1 + 48)];
}

- (void)_notifyUpdatedCharacteristic:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6 completion:(id)a7
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  if (v15)
  {
    uint64_t v17 = [(HMDHome *)self notificationHandlerMap];
    uint64_t v18 = [v17 objectForKey:v15];

    if (!v18)
    {
      [(HMDHome *)self homeManager];
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      v31 = long long v35 = 0u;
      uint64_t v19 = [v31 watchManager];
      uint64_t v20 = [v19 connectedWatches];

      uint64_t v21 = [v20 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v21)
      {
        id v29 = v14;
        id v30 = v12;
        uint64_t v22 = *(void *)v33;
        while (2)
        {
          for (uint64_t i = 0; i != v21; ++i)
          {
            if (*(void *)v33 != v22) {
              objc_enumerationMutation(v20);
            }
            uint64_t v24 = [*(id *)(*((void *)&v32 + 1) + 8 * i) remoteDestinationString];
            char v25 = [v24 isEqual:v15];

            if (v25)
            {
              uint64_t v21 = 1;
              goto LABEL_13;
            }
          }
          uint64_t v21 = [v20 countByEnumeratingWithState:&v32 objects:v36 count:16];
          if (v21) {
            continue;
          }
          break;
        }
LABEL_13:
        id v14 = v29;
        id v12 = v30;
      }

      uint64_t v26 = [HMDDeviceNotificationHandler alloc];
      BOOL v27 = [(HMDHome *)self msgDispatcher];
      uint64_t v18 = [(HMDDeviceNotificationHandler *)v26 initWithDestination:v15 watchDevice:v21 withRequestIdentifier:v13 messageDispatcher:v27 home:self];

      id v28 = [(HMDHome *)self notificationHandlerMap];
      [v28 setObject:v18 forKey:v15];
    }
    [(HMDDeviceNotificationHandler *)v18 sendNotificationForCharacteristicUpdates:v12 withRequestIdentifier:v13 notificationUpdateIdentifier:v14 completion:v16];
  }
}

- (void)_sendCoalescedRemoteNotificationsForRequestMessage:(id)a3 accessories:(id)a4
{
  id v15 = a4;
  id v6 = a3;
  id v7 = [v6 destination];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = v8;

  int v10 = [v6 isRemote];
  if (v10)
  {
    id v11 = [v9 device];
    id v12 = [v11 remoteDestinationString];

    if (v12)
    {
      id v13 = [(HMDHome *)self notificationHandlerMap];
      id v14 = [v13 objectForKey:v12];

      [v14 sendCoalescedRemoteNotificationForAccessories:v15];
    }
  }
}

- (void)_notifyChangedCharacteristics:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6 broadcast:(BOOL)a7
{
  BOOL v7 = a7;
  id v12 = a6;
  id v13 = a5;
  id v14 = a4;
  id v15 = +[HMDCharacteristicUpdateTuple characteristicUpdateTuplesWithCharacteristics:a3 isBroadcast:v7];
  [(HMDHome *)self _notifyUpdatedCharacteristic:v15 withRequestIdentifier:v14 notificationUpdateIdentifier:v13 toUserDeviceAddress:v12 completion:0];
}

- (BOOL)_shouldSendToDestination:(id)a3 device:(id)a4 remoteSourceDevice:(id)a5
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = +[HMDDeviceHandle deviceHandleForDestination:v8];
  id v12 = +[HMDAccountRegistry sharedRegistry];
  id v13 = [v12 deviceForHandle:v11];

  id v14 = [v13 account];

  if (!v14)
  {
    id v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      uint64_t v22 = [v13 shortDescription];
      int v36 = 138543618;
      uint64_t v37 = v18;
      __int16 v38 = 2112;
      id v39 = v22;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Device %@ has no user attached to it", (uint8_t *)&v36, 0x16u);

LABEL_28:
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  if (v9 && [v10 isEqual:v9])
  {
    id v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      int v36 = 138543618;
      uint64_t v37 = v18;
      __int16 v38 = 2112;
      id v39 = v8;
      uint64_t v19 = "%{public}@Skipping device %@ since it is the original sender";
LABEL_9:
      uint64_t v20 = v17;
      os_log_type_t v21 = OS_LOG_TYPE_DEBUG;
LABEL_27:
      _os_log_impl(&dword_22F52A000, v20, v21, v19, (uint8_t *)&v36, 0x16u);
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  if ([v13 isCurrentDevice])
  {
    id v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      int v36 = 138543618;
      uint64_t v37 = v18;
      __int16 v38 = 2112;
      id v39 = v8;
      uint64_t v19 = "%{public}@Skipping device %@ - ourselves";
      goto LABEL_9;
    }
LABEL_29:

    BOOL v34 = 0;
    goto LABEL_30;
  }
  char v23 = [(HMDHome *)self localCapabilitiesDataSource];
  if ([v23 isCompanionCapable])
  {
  }
  else
  {
    uint64_t v24 = [(HMDHome *)self residentDeviceManager];
    char v25 = [v24 isCurrentDeviceAvailableResident];

    if ((v25 & 1) == 0)
    {
      ++self->_skippedInterDeviceChangeNotifications;
      id v15 = (void *)MEMORY[0x230FBD990]();
      id v16 = self;
      uint64_t v17 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO)) {
        goto LABEL_29;
      }
      uint64_t v18 = HMFGetLogIdentifier();
      int v36 = 138543618;
      uint64_t v37 = v18;
      __int16 v38 = 2112;
      id v39 = v8;
      uint64_t v19 = "%{public}@Skipping device %@ since this device is not a companion or enabled resident";
      goto LABEL_26;
    }
  }
  uint64_t v26 = [(HMDHome *)self localCapabilitiesDataSource];
  int v27 = [v26 isCompanionCapable];

  if (v27)
  {
    uint64_t v28 = [v13 productInfo];
    if (v28
      && (id v29 = (void *)v28,
          [v13 productInfo],
          id v30 = objc_claimAutoreleasedReturnValue(),
          uint64_t v31 = [v30 productClass],
          v30,
          v29,
          v31 != 5))
    {
      ++self->_skippedInterDeviceChangeNotifications;
      id v15 = (void *)MEMORY[0x230FBD990]();
      id v16 = self;
      uint64_t v17 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO)) {
        goto LABEL_29;
      }
      uint64_t v18 = HMFGetLogIdentifier();
      int v36 = 138543618;
      uint64_t v37 = v18;
      __int16 v38 = 2112;
      id v39 = v8;
      uint64_t v19 = "%{public}@Skipping device %@ since this device is a companion but sending to non-watch";
    }
    else
    {
      long long v32 = [(HMDHome *)self homeManager];
      char v33 = [v32 isPairedWithWatch];

      if (v33) {
        goto LABEL_19;
      }
      ++self->_skippedInterDeviceChangeNotifications;
      id v15 = (void *)MEMORY[0x230FBD990]();
      id v16 = self;
      uint64_t v17 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO)) {
        goto LABEL_29;
      }
      uint64_t v18 = HMFGetLogIdentifier();
      int v36 = 138543618;
      uint64_t v37 = v18;
      __int16 v38 = 2112;
      id v39 = v8;
      uint64_t v19 = "%{public}@Skipping device %@ since this device is a companion but not paired with a watch";
    }
LABEL_26:
    uint64_t v20 = v17;
    os_log_type_t v21 = OS_LOG_TYPE_INFO;
    goto LABEL_27;
  }
LABEL_19:
  BOOL v34 = 1;
LABEL_30:

  return v34;
}

- (id)_userForDevice:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self users];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  v9[2] = __26__HMDHome__userForDevice___block_invoke;
  void v9[3] = &unk_264A16CC0;
  id v10 = v4;
  id v6 = v4;
  BOOL v7 = objc_msgSend(v5, "hmf_objectPassingTest:", v9);

  return v7;
}

uint64_t __26__HMDHome__userForDevice___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 account];
  id v4 = [*(id *)(a1 + 32) account];
  uint64_t v5 = [v3 isEqual:v4];

  return v5;
}

- (void)saveAttributedUserUUID:(id)a3 forTargetStateCharacteristic:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = [(HMDHome *)self bulletinUserAttributionManager];

  if (!v8)
  {
    id v9 = [HMDBulletinUserAttributionManager alloc];
    id v10 = +[HMDAccountRegistry sharedRegistry];
    id v11 = [(HMDBulletinUserAttributionManager *)v9 initWithAccountRegistry:v10];
    [(HMDHome *)self setBulletinUserAttributionManager:v11];
  }
  id v12 = [(HMDHome *)self bulletinUserAttributionManager];
  [v12 saveAttributedUserUUID:v7 forTargetStateCharacteristic:v6];
}

- (BOOL)_shouldUseAttributeReportForBulletin:(id)a3
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ((_os_feature_enabled_impl() & 1) == 0
    && (_os_feature_enabled_impl() & 1) == 0
    && !CFPreferencesGetAppBooleanValue(@"MatterTTU", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0))
  {
    goto LABEL_10;
  }
  uint64_t v5 = [v4 accessory];
  if (([v5 supportsCHIP] & 1) == 0)
  {

    goto LABEL_10;
  }
  id v6 = [v4 type];
  int v7 = [v6 isEqualToString:*MEMORY[0x263F0C0B0]];

  if (!v7)
  {
LABEL_10:
    BOOL v12 = 1;
    goto LABEL_11;
  }
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    int v14 = 138543362;
    id v15 = v11;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Not notifying matter lock characteristic change, this is handled upon receiving event report", (uint8_t *)&v14, 0xCu);
  }
  BOOL v12 = 0;
LABEL_11:

  return v12;
}

- (id)_characteristicUpdatesForChangedCharacteristics:(id)a3 bulletinCharacteristics:(id)a4 broadcast:(BOOL)a5
{
  id v8 = a4;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  void v12[2] = __93__HMDHome__characteristicUpdatesForChangedCharacteristics_bulletinCharacteristics_broadcast___block_invoke;
  v12[3] = &unk_264A16C98;
  id v13 = v8;
  int v14 = self;
  BOOL v15 = a5;
  id v9 = v8;
  id v10 = objc_msgSend(a3, "na_map:", v12);

  return v10;
}

HMDCharacteristicUpdateTuple *__93__HMDHome__characteristicUpdatesForChangedCharacteristics_bulletinCharacteristics_broadcast___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v3 = a2;
  int v4 = [*(id *)(a1 + 32) containsObject:v3];
  int v5 = [*(id *)(a1 + 40) _shouldUseAttributeReportForBulletin:v3];
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
LABEL_6:
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  id v8 = [v3 type];
  char v9 = [v8 isEqualToString:*MEMORY[0x263F0C208]];

  if ((v9 & 1) == 0)
  {
    id v10 = [v3 previousValue];

    if (!v10)
    {
      BOOL v15 = (void *)MEMORY[0x230FBD990]();
      id v16 = *(id *)(a1 + 40);
      uint64_t v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = HMFGetLogIdentifier();
        uint64_t v19 = [v3 shortDescription];
        int v20 = 138543618;
        os_log_type_t v21 = v18;
        __int16 v22 = 2112;
        char v23 = v19;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Initial update for characteristic: %@, receiver should not display bulletin", (uint8_t *)&v20, 0x16u);
      }
      goto LABEL_6;
    }
  }
  uint64_t v7 = 1;
LABEL_10:
  id v11 = [HMDCharacteristicUpdateTuple alloc];
  BOOL v12 = [v3 value];
  id v13 = [(HMDCharacteristicUpdateTuple *)v11 initWithCharacteristic:v3 updatedValue:v12 isBroadcast:*(unsigned __int8 *)(a1 + 48) reasons:v7];

  return v13;
}

- (id)_pushTokenToDestinationMappingForDestinations:(id)a3
{
  int v4 = (void *)MEMORY[0x263EFF9A0];
  id v5 = a3;
  BOOL v6 = [v4 dictionary];
  uint64_t v10 = MEMORY[0x263EF8330];
  uint64_t v11 = 3221225472;
  BOOL v12 = __57__HMDHome__pushTokenToDestinationMappingForDestinations___block_invoke;
  id v13 = &unk_264A20CF8;
  int v14 = self;
  id v15 = v6;
  id v7 = v6;
  objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &v10);

  id v8 = objc_msgSend(v7, "copy", v10, v11, v12, v13, v14);
  return v8;
}

void __57__HMDHome__pushTokenToDestinationMappingForDestinations___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v3 = a2;
  int v4 = +[HMDDeviceHandle deviceHandleForDestination:v3];
  id v5 = [v4 pushToken];
  if (v5)
  {
    [*(id *)(a1 + 40) setObject:v3 forKeyedSubscript:v5];
  }
  else
  {
    BOOL v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = *(id *)(a1 + 32);
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      char v9 = HMFGetLogIdentifier();
      int v10 = 138543618;
      uint64_t v11 = v9;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unable to parse push token for destination: %@", (uint8_t *)&v10, 0x16u);
    }
  }
}

- (id)_characteristicUpdatesByDestinationForNotificationRegistryDestinations:(id)a3 bulletinDestinations:(id)a4 broadcast:(BOOL)a5
{
  id v8 = a3;
  id v9 = a4;
  int v10 = [v9 allKeys];
  uint64_t v11 = [(HMDHome *)self _pushTokenToDestinationMappingForDestinations:v10];

  __int16 v12 = [v8 allKeys];
  id v13 = [(HMDHome *)self _pushTokenToDestinationMappingForDestinations:v12];

  uint64_t v14 = [MEMORY[0x263EFF9C0] set];
  id v15 = [v11 allKeys];
  [v14 addObjectsFromArray:v15];

  id v16 = [v13 allKeys];
  [v14 addObjectsFromArray:v16];

  uint64_t v17 = [MEMORY[0x263EFF9A0] dictionary];
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 3221225472;
  void v25[2] = __113__HMDHome__characteristicUpdatesByDestinationForNotificationRegistryDestinations_bulletinDestinations_broadcast___block_invoke;
  v25[3] = &unk_264A16C70;
  id v26 = v11;
  id v27 = v9;
  id v28 = v13;
  id v29 = v8;
  BOOL v32 = a5;
  id v30 = self;
  id v31 = v17;
  id v18 = v17;
  id v19 = v8;
  id v20 = v13;
  id v21 = v9;
  id v22 = v11;
  objc_msgSend(v14, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v25);
  char v23 = (void *)[v18 copy];

  return v23;
}

void __113__HMDHome__characteristicUpdatesByDestinationForNotificationRegistryDestinations_bulletinDestinations_broadcast___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = a2;
  int v4 = [MEMORY[0x263EFF9C0] set];
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  BOOL v6 = [*(id *)(a1 + 40) objectForKeyedSubscript:v5];
  id v7 = [v6 allObjects];
  [v4 addObjectsFromArray:v7];

  id v8 = [*(id *)(a1 + 48) objectForKeyedSubscript:v3];
  id v9 = [*(id *)(a1 + 56) objectForKeyedSubscript:v8];
  int v10 = [v9 allObjects];
  [v4 addObjectsFromArray:v10];

  if ([v4 count])
  {
    uint64_t v11 = [*(id *)(a1 + 64) _characteristicUpdatesForChangedCharacteristics:v4 bulletinCharacteristics:v6 broadcast:*(unsigned __int8 *)(a1 + 80)];
    if (v8) {
      __int16 v12 = v8;
    }
    else {
      __int16 v12 = v5;
    }
    [*(id *)(a1 + 72) setObject:v11 forKeyedSubscript:v12];
  }
  else
  {
    id v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = *(id *)(a1 + 64);
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = HMFGetLogIdentifier();
      int v17 = 138543874;
      id v18 = v16;
      __int16 v19 = 2112;
      id v20 = v5;
      __int16 v21 = 2112;
      id v22 = v8;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@No changed characteristics found for destination: %@ / %@", (uint8_t *)&v17, 0x20u);
    }
  }
}

- (BOOL)_shouldRateLimitChangeNotificationsForCharacteristic:(id)a3
{
  id v3 = a3;
  int v4 = [v3 service];
  id v5 = [v3 type];
  if (([v5 isEqualToString:*MEMORY[0x263F354A8]] & 1) == 0)
  {

    goto LABEL_13;
  }
  BOOL v6 = [v4 type];
  if (![v6 isEqualToString:*MEMORY[0x263F35790]])
  {
    id v7 = [v4 type];
    int v8 = [v7 isEqualToString:*MEMORY[0x263F356F0]];

    if (v8) {
      goto LABEL_6;
    }
LABEL_13:
    BOOL v20 = 0;
    goto LABEL_14;
  }

LABEL_6:
  id v9 = [v3 previousValue];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  id v11 = v10;

  [v11 doubleValue];
  double v13 = v12;

  double v14 = round(v13 + v13) * 0.5;
  id v15 = [v3 value];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v16 = v15;
  }
  else {
    id v16 = 0;
  }
  id v17 = v16;

  [v17 doubleValue];
  double v19 = v18;

  BOOL v20 = vabdd_f64(v14, round(v19 + v19) * 0.5) < 2.22044605e-16;
LABEL_14:

  return v20;
}

- (void)_notifyRemoteUsersOfChangedCharacteristics:(id)a3 message:(id)a4 broadcast:(BOOL)a5
{
  BOOL v107 = a5;
  uint64_t v149 = *MEMORY[0x263EF8340];
  id v7 = a3;
  id v109 = a4;
  uint64_t v116 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v7, "count"));
  id v111 = [MEMORY[0x263EFF9C0] set];
  long long v136 = 0u;
  long long v137 = 0u;
  long long v138 = 0u;
  long long v139 = 0u;
  id v8 = v7;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v136 objects:v148 count:16];
  obuint64_t j = v8;
  char v119 = self;
  if (v9)
  {
    uint64_t v10 = v9;
    int v120 = 0;
    uint64_t v11 = *(void *)v137;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v137 != v11) {
          objc_enumerationMutation(obj);
        }
        double v13 = *(void **)(*((void *)&v136 + 1) + 8 * i);
        double v14 = [v13 accessory];
        id v15 = [v13 stateNumber];
        [v14 updateTrackedAccessoryStateNumber:v15];

        id v16 = [(HMDHome *)self hapMetadata];
        id v17 = [v13 type];
        double v18 = [v13 service];
        [v18 type];
        v20 = double v19 = self;
        char v21 = [v16 shouldFilterChangeNotificationsForCharacteristicType:v17 serviceType:v20];

        if (v21)
        {
          self = v19;
        }
        else
        {
          self = v19;
          if ([(HMDHome *)v19 _shouldRateLimitChangeNotificationsForCharacteristic:v13])
          {
            id v22 = (void *)MEMORY[0x230FBD990]();
            uint64_t v23 = v19;
            uint64_t v24 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              char v25 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              long long v141 = v25;
              __int16 v142 = 2112;
              unint64_t v143 = (unint64_t)v13;
              _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Filtering out characteristic for remote notification due to rate limiting: %@", buf, 0x16u);

              self = v119;
            }
          }
          else
          {
            id v26 = [v13 accessory];
            if ([v26 hasBTLELink])
            {
              id v27 = [v26 identifier];
              id v28 = [v26 matchingTransportInformationWithServerIdentifier:v27 instanceID:0 linkType:1];

              if (([v28 isReachable] & 1) == 0) {
                [v111 addObject:v13];
              }
            }
            v120 |= +[HMDBulletinUserAttributionManager currentStateCharacteristicSupportsUserAttribution:v13];
            [v116 addObject:v13];
          }
        }
      }
      id v8 = obj;
      uint64_t v10 = [obj countByEnumeratingWithState:&v136 objects:v148 count:16];
    }
    while (v10);
  }
  else
  {
    LOBYTE(v120) = 0;
  }

  id v29 = v116;
  if ([v116 count])
  {
    id v30 = v109;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v31 = v30;
    }
    else {
      id v31 = 0;
    }
    id v32 = v31;

    uint64_t v105 = v32;
    char v33 = [v32 destination];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      BOOL v34 = v33;
    }
    else {
      BOOL v34 = 0;
    }
    id v35 = v34;

    uint64_t v104 = v35;
    id v117 = [v35 device];
    int v36 = [(HMDHome *)self primaryResident];
    uint64_t v106 = [v36 device];

    uint64_t v118 = [MEMORY[0x263EFF9C0] set];
    uint64_t v37 = [(HMDHome *)self notificationRegistry];
    id v108 = [v37 characteristicsByDestinationForCharacteristics:v116];

    __int16 v38 = [(HMDHome *)self residentDeviceManager];
    LODWORD(v35) = [v38 isCurrentDeviceConfirmedPrimaryResident];

    if (v35)
    {
      id v39 = [(HMDHome *)self accessoryBulletinNotificationManager];
      uint64_t v40 = [v39 characteristicsByDestinationForCharacteristics:v116];
    }
    else
    {
      uint64_t v40 = MEMORY[0x263EFFA78];
    }
    long long v103 = (void *)v40;
    long long v46 = [(HMDHome *)self _characteristicUpdatesByDestinationForNotificationRegistryDestinations:v108 bulletinDestinations:v40 broadcast:v107];
    long long v47 = (void *)MEMORY[0x263EFF9C0];
    uint64_t v113 = v46;
    long long v48 = [v46 allKeys];
    id v114 = [v47 setWithArray:v48];

    uint64_t v49 = [(HMDHome *)self residentDeviceManager];
    LODWORD(v48) = [v49 isCurrentDeviceAvailableResident];

    int v101 = (int)v48;
    if (v48)
    {
      long long v134 = 0u;
      long long v135 = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      long long v50 = [(HMDHome *)self residentEnabledDevices];
      uint64_t v51 = [v50 countByEnumeratingWithState:&v132 objects:v147 count:16];
      if (!v51) {
        goto LABEL_47;
      }
      uint64_t v52 = v51;
      uint64_t v53 = *(void *)v133;
      while (1)
      {
        for (uint64_t j = 0; j != v52; ++j)
        {
          if (*(void *)v133 != v53) {
            objc_enumerationMutation(v50);
          }
          uint64_t v55 = *(void **)(*((void *)&v132 + 1) + 8 * j);
          uint64_t v56 = [(HMDHome *)self primaryResident];
          if (([v56 isCurrentDevice] & 1) == 0)
          {
            uint64_t v57 = [(HMDHome *)self primaryResident];
            uint64_t v58 = [v57 device];
            long long v59 = [v58 remoteDestinationString];
            char v60 = [v114 containsObject:v59];

            if (v60) {
              goto LABEL_45;
            }
            uint64_t v56 = [v55 remoteDestinationString];
            [v114 addObject:v56];
          }

LABEL_45:
          self = v119;
        }
        uint64_t v52 = [v50 countByEnumeratingWithState:&v132 objects:v147 count:16];
        if (!v52)
        {
LABEL_47:

          id v8 = obj;
          break;
        }
      }
    }
    id v61 = [MEMORY[0x263F08C38] UUID];
    id v112 = [v61 UUIDString];

    unint64_t skippedInterDeviceChangeNotifications = self->_skippedInterDeviceChangeNotifications;
    if (v120) {
      id v62 = dispatch_group_create();
    }
    else {
      id v62 = 0;
    }
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    id v63 = v114;
    uint64_t v64 = [v63 countByEnumeratingWithState:&v128 objects:v146 count:16];
    if (v64)
    {
      uint64_t v65 = v64;
      uint64_t v66 = *(void *)v129;
      char v67 = HMDAppleMediaProfile;
      id v110 = v63;
      uint64_t v115 = *(void *)v129;
      do
      {
        for (uint64_t k = 0; k != v65; ++k)
        {
          if (*(void *)v129 != v66) {
            objc_enumerationMutation(v63);
          }
          uint64_t v69 = *(void **)(*((void *)&v128 + 1) + 8 * k);
          uint64_t v70 = [&v67[77] deviceWithDestination:v69];
          if (v70)
          {
            [v118 addObject:v70];
            if ([(HMDHome *)self _shouldSendToDestination:v69 device:v70 remoteSourceDevice:v117])
            {
              uint64_t v71 = [v113 objectForKeyedSubscript:v69];
              id v72 = [v71 allObjects];

              if ([v72 count])
              {
                uint64_t v73 = (void *)MEMORY[0x230FBD990]();
                id v74 = self;
                uint64_t v75 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v77 = uint64_t v76 = v62;
                  *(_DWORD *)buf = 138543874;
                  long long v141 = v77;
                  __int16 v142 = 2112;
                  unint64_t v143 = (unint64_t)v69;
                  __int16 v144 = 2112;
                  long long v145 = v112;
                  _os_log_impl(&dword_22F52A000, v75, OS_LOG_TYPE_INFO, "%{public}@Fanning out to device %@ with the characteristics that changed for notificationUpdateIdentifier: %@", buf, 0x20u);

                  id v62 = v76;
                  id v63 = v110;
                }

                if (v120) {
                  dispatch_group_enter(v62);
                }
                v125[0] = MEMORY[0x263EF8330];
                v125[1] = 3221225472;
                v125[2] = __72__HMDHome__notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke;
                v125[3] = &unk_264A1CB38;
                char v127 = v120 & 1;
                long long v126 = v62;
                [(HMDHome *)v74 _notifyUpdatedCharacteristic:v72 withRequestIdentifier:0 notificationUpdateIdentifier:v112 toUserDeviceAddress:v69 completion:v125];

                id v8 = obj;
                self = v119;
              }

              uint64_t v66 = v115;
              char v67 = HMDAppleMediaProfile;
            }
          }
        }
        uint64_t v65 = [v63 countByEnumeratingWithState:&v128 objects:v146 count:16];
      }
      while (v65);
    }

    if (v120)
    {
      uint64_t v78 = [(HMDHome *)self workQueue];
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = __72__HMDHome__notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke_2;
      block[3] = &unk_264A2F820;
      id v123 = v116;
      long long v124 = self;
      dispatch_group_notify(v62, v78, block);
    }
    id v29 = v116;
    id v41 = v109;
    __int16 v79 = v106;
    if ([v116 count]
      && v106
      && ([v106 isCurrentDevice] & 1) == 0
      && ([v118 containsObject:v106] & 1) == 0
      && ([v117 isEqual:v106] & 1) == 0)
    {
      if (v101)
      {
        uint64_t v80 = (void *)MEMORY[0x230FBD990]();
        uint64_t v81 = self;
        uint64_t v82 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
        {
          uint64_t v83 = HMFGetLogIdentifier();
          [v106 remoteDestinationString];
          id v85 = v84 = v62;
          *(_DWORD *)buf = 138543874;
          long long v141 = v83;
          __int16 v142 = 2112;
          unint64_t v143 = (unint64_t)v85;
          __int16 v144 = 2112;
          long long v145 = v112;
          _os_log_impl(&dword_22F52A000, v82, OS_LOG_TYPE_INFO, "%{public}@Fanning to primary resident destination %@ with notificationUpdateIdentifier: %@", buf, 0x20u);

          id v62 = v84;
        }

        __int16 v79 = v106;
        id v86 = [v106 remoteDestinationString];
        long long v87 = v81;
        id v29 = v116;
        [(HMDHome *)v87 _notifyChangedCharacteristics:v116 withRequestIdentifier:0 notificationUpdateIdentifier:v112 toUserDeviceAddress:v86 broadcast:v107];
      }
      else if ([v111 count])
      {
        long long v88 = (void *)MEMORY[0x230FBD990]();
        __int16 v89 = self;
        long long v90 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
        {
          __int16 v91 = HMFGetLogIdentifier();
          [v106 remoteDestinationString];
          v93 = int v92 = v62;
          *(_DWORD *)buf = 138543874;
          long long v141 = v91;
          __int16 v142 = 2112;
          unint64_t v143 = (unint64_t)v93;
          __int16 v144 = 2112;
          long long v145 = v112;
          _os_log_impl(&dword_22F52A000, v90, OS_LOG_TYPE_INFO, "%{public}@Fanning the characteristics changed over BTLE to primary resident destination %@ with notificationUpdateIdentifier: %@", buf, 0x20u);

          id v62 = v92;
        }

        int v94 = [v111 allObjects];
        uint64_t v95 = [v106 remoteDestinationString];
        [(HMDHome *)v89 _notifyChangedCharacteristics:v94 withRequestIdentifier:0 notificationUpdateIdentifier:v112 toUserDeviceAddress:v95 broadcast:v107];

        __int16 v79 = v106;
        id v29 = v116;
      }
      else
      {
        ++self->_skippedInterDeviceChangeNotifications;
      }
    }
    if (isInternalBuild()
      && skippedInterDeviceChangeNotifications != self->_skippedInterDeviceChangeNotifications)
    {
      __int16 v96 = (void *)MEMORY[0x230FBD990]();
      uint64_t v97 = self;
      __int16 v98 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
      {
        id v99 = HMFGetLogIdentifier();
        unint64_t v100 = self->_skippedInterDeviceChangeNotifications;
        *(_DWORD *)buf = 138543618;
        long long v141 = v99;
        __int16 v142 = 2048;
        unint64_t v143 = v100;
        _os_log_impl(&dword_22F52A000, v98, OS_LOG_TYPE_INFO, "%{public}@Skipped %lu spurious inter-device characteristic change notifications", buf, 0x16u);
      }
      id v29 = v116;
      __int16 v79 = v106;
    }
  }
  else
  {
    id v41 = v109;
    if ([v8 count])
    {
      uint64_t v42 = (void *)MEMORY[0x230FBD990]();
      uint64_t v43 = self;
      id v44 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        long long v45 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v141 = v45;
        _os_log_impl(&dword_22F52A000, v44, OS_LOG_TYPE_DEBUG, "%{public}@No changes to notify remote devices of changed characteristics after filtering", buf, 0xCu);
      }
      id v29 = v116;
    }
  }
}

void __72__HMDHome__notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
}

void __72__HMDHome__notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke_2(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v15 = a1;
  id v1 = *(id *)(a1 + 32);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v19 != v4) {
          objc_enumerationMutation(v1);
        }
        BOOL v6 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        id v7 = objc_msgSend(v6, "service", v15);
        if (+[HMDBulletinUserAttributionManager currentStateCharacteristicSupportsUserAttribution:v6])
        {
          id v8 = [(id)objc_opt_class() currentTargetStateCharacteristicTypeMap];
          uint64_t v9 = [v6 type];
          uint64_t v10 = objc_msgSend(v8, "hmf_stringForKey:", v9);

          uint64_t v11 = [v7 characteristics];
          v16[0] = MEMORY[0x263EF8330];
          v16[1] = 3221225472;
          void v16[2] = __72__HMDHome__notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke_3;
          v16[3] = &unk_264A2D3B8;
          id v17 = v10;
          id v12 = v10;
          double v13 = objc_msgSend(v11, "na_firstObjectPassingTest:", v16);

          double v14 = [*(id *)(v15 + 40) bulletinUserAttributionManager];
          [v14 removeAttributedUserUUIDForTargetStateCharacteristic:v13];
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v3);
  }
}

uint64_t __72__HMDHome__notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 type];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

- (BOOL)_shouldRegisterForNotificationsWithDevice:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self primaryResident];
  isWatch();
  if (v5)
  {
    BOOL v6 = [v5 device];
    char v7 = [v6 isCurrentDevice];

    if (v7)
    {
      char v8 = 1;
    }
    else
    {
      uint64_t v9 = [v5 device];
      char v8 = [v4 isEqual:v9];
    }
  }
  else
  {
    char v8 = 0;
  }

  return v8;
}

- (BOOL)shouldRelayNotificationToRegisteredDevicesForSource:(id)a3
{
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;
  char v7 = [v4 destination];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (![v6 isRemote] || (isKindOfClass & 1) == 0 || !v7) {
    goto LABEL_15;
  }
  uint64_t v9 = [v6 name];
  if ([v9 isEqualToString:@"kCharacteristicValueUpdatedNotificationKey"])
  {
LABEL_10:

    goto LABEL_11;
  }
  uint64_t v10 = [v6 name];
  if ([v10 isEqualToString:@"kMultipleCharacteristicValuesUpdatedNotificationKey"])
  {

    goto LABEL_10;
  }
  double v14 = [v6 name];
  char v15 = [v14 isEqualToString:@"kCharacterisiticsChangedInternalNotificationKey"];

  if ((v15 & 1) == 0)
  {
LABEL_15:
    isWatch();
    goto LABEL_16;
  }
LABEL_11:
  uint64_t v11 = [(HMDHome *)self primaryResident];
  if ([v11 isCurrentDevice])
  {

LABEL_16:
    char v13 = 1;
    goto LABEL_17;
  }
  id v12 = [(HMDHome *)self homeManager];
  char v13 = [v12 isPairedWithWatch];

LABEL_17:
  return v13;
}

- (void)_notifyChangedCharacteristics:(id)a3 message:(id)a4 modifiedCharacteristics:(id)a5 broadcast:(BOOL)a6
{
  BOOL v6 = a6;
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  char v13 = (void *)MEMORY[0x230FBD990]();
  double v14 = self;
  char v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    id v16 = HMFGetLogIdentifier();
    id v17 = [v11 shortDescription];
    *(_DWORD *)buf = 138543618;
    uint64_t v24 = v16;
    __int16 v25 = 2112;
    id v26 = v17;
    _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Posting internal notification before remote and XPC notifications. %@", buf, 0x16u);
  }
  LOBYTE(v22) = v6;
  long long v18 = (void *)MEMORY[0x230FBD990]([(HMDHome *)v14 _postInternalNotificationForChangedCharacteristics:v10 previouslyNilChangedCharacteristics:MEMORY[0x263EFFA68] modifiedCharacteristics:v12 changedByThisDevice:0 residentShouldNotifyPeers:0 message:v11 broadcast:v22]);
  long long v19 = +[HMDCharacteristicUpdateTuple characteristicUpdateTuplesWithCharacteristics:v10 isBroadcast:v6];
  long long v20 = +[HMDHome notificationPayloadForChangedCharacteristics:v19 destinationIsXPCTransport:1];
  long long v21 = [(HMDHome *)v14 _splitCharacteristicChanges:v10 changedAccessories:v20];
  [(HMDHome *)v14 _sendClientCharacteristicsChangedNotificationWithIdentifier:0 requestMessage:0 multiPartResponse:0 moreInMultiPartResponse:0 characteristicChanges:v21 completionHandler:0];

  isWatch();
  if ([(HMDHome *)v14 shouldRelayNotificationToRegisteredDevicesForSource:v11])
  {
    [(HMDHome *)v14 notifyRemoteUsersOfChangedCharacteristics:v10 message:v11 broadcast:v6];
  }
}

- (id)_splitCharacteristicChanges:(id)a3 changedAccessories:(id)a4
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = a4;
  long long v47 = objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(v6, "count"));
  uint64_t v49 = v6;
  long long v48 = objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(v6, "count"));
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  obuint64_t j = v5;
  uint64_t v7 = [obj countByEnumeratingWithState:&v62 objects:v68 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v63;
    do
    {
      uint64_t v10 = 0;
      uint64_t v54 = v8;
      do
      {
        if (*(void *)v63 != v9) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v62 + 1) + 8 * v10);
        id v12 = [v11 service];
        uint64_t v13 = [v12 accessory];
        double v14 = (void *)v13;
        if (v12) {
          BOOL v15 = v13 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15)
        {
          id v16 = [(HMDHome *)self hapMetadata];
          id v17 = [v11 type];
          if (([v16 shouldFilterCharacteristicOfTypeFromApp:v17] & 1) == 0)
          {
            long long v18 = [(HMDHome *)self hapMetadata];
            long long v19 = [v12 type];
            char v60 = v18;
            if (([v18 shouldFilterServiceOfTypeFromApp:v19] & 1) == 0)
            {
              [(HMDHome *)self hapMetadata];
              v21 = long long v20 = v17;
              uint64_t v22 = [v11 type];
              [v12 type];
              uint64_t v57 = v16;
              uint64_t v24 = v23 = v9;
              char v55 = [v21 shouldFilterChangeNotificationsForCharacteristicType:v22 serviceType:v24];

              uint64_t v9 = v23;
              uint64_t v8 = v54;

              if (v55) {
                goto LABEL_29;
              }
              __int16 v25 = [v14 uuid];
              id v16 = [v25 UUIDString];

              id v26 = [v49 objectForKey:v16];
              uint64_t v27 = [v12 instanceID];
              uint64_t v28 = [v27 stringValue];

              uint64_t v56 = v26;
              char v60 = (void *)v28;
              long long v19 = [v26 objectForKey:v28];
              id v29 = [v11 instanceID];
              id v30 = [v29 stringValue];

              id v31 = [v19 objectForKey:v30];
              if (v31)
              {
                uint64_t v53 = v30;
                id v32 = v48;
                uint64_t v52 = v31;
                if (isAppleTV())
                {
                  uint64_t v58 = v16;
                  char v33 = [(HMDHome *)self hapMetadata];
                  BOOL v34 = [v11 type];
                  id v35 = [v12 type];
                  int v36 = [v33 requiresDeviceUnlock:v34 forService:v35];

                  if (v36)
                  {
                    id v37 = v47;

                    uint64_t v8 = v54;
                    id v16 = v58;
                    goto LABEL_19;
                  }
                  uint64_t v8 = v54;
                  id v16 = v58;
                }
                id v37 = v32;
LABEL_19:
                __int16 v38 = accessoryToEncodeForXPCTransportForAccessory(v14);
                uint64_t v51 = v38;
                if (v38 != v14)
                {
                  id v39 = [v38 uuid];
                  uint64_t v40 = [v39 UUIDString];
                  id v41 = v16;
                  id v16 = (void *)v40;

                  id v42 = v47;
                  id v37 = v42;
                }
                uint64_t v43 = [v37 objectForKey:v16];
                if (!v43)
                {
                  uint64_t v43 = objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(v56, "count"));
                  [v37 setObject:v43 forKey:v16];
                }
                id v44 = [v43 objectForKey:v60];
                if (!v44)
                {
                  id v44 = objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(v19, "count"));
                  [v43 setObject:v44 forKey:v60];
                }
                long long v50 = v43;
                id v30 = v53;
                [v44 setObject:v52 forKey:v53];

                id v31 = v52;
              }

              id v17 = v56;
            }
          }
        }
LABEL_29:

        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [obj countByEnumeratingWithState:&v62 objects:v68 count:16];
    }
    while (v8);
  }

  v66[0] = @"kCharacteristicUpdatesForEntitledClientsNotificationKey";
  v66[1] = @"kCharacteristicUpdatesForAllClientsNotificationKey";
  v67[0] = v47;
  v67[1] = v48;
  long long v45 = [NSDictionary dictionaryWithObjects:v67 forKeys:v66 count:2];

  return v45;
}

- (void)_handleRequestHomeDataSync:(id)a3
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = [(HMDHome *)self isOwnerUser];
  id v6 = (void *)MEMORY[0x263F0C710];
  if (!v5)
  {
    uint64_t v7 = (void *)MEMORY[0x230FBD990]();
    uint64_t v8 = self;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      id v11 = [v4 identifier];
      id v12 = [v11 UUIDString];
      *(_DWORD *)buf = 138543618;
      uint64_t v56 = v10;
      __int16 v57 = 2112;
      uint64_t v58 = v12;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Not owner, cannot send for message: %@", buf, 0x16u);
    }
    uint64_t v13 = [MEMORY[0x263F087E8] errorWithDomain:*v6 code:10 userInfo:0];
    double v14 = [v4 responseHandler];

    if (v14)
    {
      BOOL v15 = [v4 responseHandler];
      ((void (**)(void, void *, void))v15)[2](v15, v13, 0);
    }
  }
  id v16 = [v4 stringForKey:@"pairingUsername"];
  if (!v16)
  {
    id v17 = (void *)MEMORY[0x230FBD990]();
    long long v18 = self;
    long long v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      long long v20 = HMFGetLogIdentifier();
      long long v21 = [v4 identifier];
      uint64_t v22 = [v21 UUIDString];
      *(_DWORD *)buf = 138543618;
      uint64_t v56 = v20;
      __int16 v57 = 2112;
      uint64_t v58 = v22;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@User is not specified for message: %@", buf, 0x16u);

      id v6 = (void *)MEMORY[0x263F0C710];
    }

    uint64_t v23 = [MEMORY[0x263F087E8] errorWithDomain:*v6 code:2 userInfo:0];
    uint64_t v24 = [v4 responseHandler];

    if (v24)
    {
      __int16 v25 = [v4 responseHandler];
      ((void (**)(void, void *, void))v25)[2](v25, v23, 0);
    }
  }
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id v26 = [(HMDHome *)self users];
  uint64_t v27 = [v26 countByEnumeratingWithState:&v50 objects:v54 count:16];
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = *(void *)v51;
LABEL_15:
    uint64_t v30 = 0;
    while (1)
    {
      if (*(void *)v51 != v29) {
        objc_enumerationMutation(v26);
      }
      id v31 = *(void **)(*((void *)&v50 + 1) + 8 * v30);
      if (([v31 isRemoteGateway] & 1) == 0)
      {
        id v32 = [v31 pairingUsername];
        char v33 = [v16 isEqualToString:v32];

        if (v33) {
          break;
        }
      }
      if (v28 == ++v30)
      {
        uint64_t v28 = [v26 countByEnumeratingWithState:&v50 objects:v54 count:16];
        if (v28) {
          goto LABEL_15;
        }
        goto LABEL_22;
      }
    }
    id v34 = v31;

    if (v34) {
      goto LABEL_29;
    }
  }
  else
  {
LABEL_22:
  }
  id v35 = (void *)MEMORY[0x230FBD990]();
  int v36 = self;
  id v37 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
  {
    __int16 v38 = HMFGetLogIdentifier();
    id v39 = [v4 identifier];
    uint64_t v40 = [v39 UUIDString];
    *(_DWORD *)buf = 138543618;
    uint64_t v56 = v38;
    __int16 v57 = 2112;
    uint64_t v58 = v40;
    _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@Unable to find user for message: %@", buf, 0x16u);
  }
  id v41 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
  id v42 = [v4 responseHandler];

  if (v42)
  {
    uint64_t v43 = [v4 responseHandler];
    ((void (**)(void, void *, void))v43)[2](v43, v41, 0);
  }
  id v34 = 0;
LABEL_29:
  id v44 = [v4 destination];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    long long v45 = v44;
  }
  else {
    long long v45 = 0;
  }
  id v46 = v45;

  if (v46)
  {
    long long v47 = [(HMDHome *)self homeManager];
    long long v48 = [v46 device];
    uint64_t v49 = [v48 remoteDestinationString];
    [v47 sendUserAdded:v34 destination:v49 toHome:self];
  }
  [v4 respondWithPayload:0];
}

- (void)_sendInvitationCancelationRequestToInvitee:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(HMDHome *)self homeManager];
  id v6 = [v5 idsInvitationManager];
  uint64_t v7 = [v4 idsInvitationUUID];
  uint64_t v8 = [v4 identifier];
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  void v10[2] = __54__HMDHome__sendInvitationCancelationRequestToInvitee___block_invoke;
  v10[3] = &unk_264A16C48;
  v10[4] = self;
  id v11 = v4;
  id v9 = v4;
  [v6 cancelInvitationWithIDSIdentifier:v7 homeInvitationID:v8 completionBlock:v10];
}

void __54__HMDHome__sendInvitationCancelationRequestToInvitee___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = *(id *)(a1 + 32);
  id v12 = HMFGetOSLogHandle();
  uint64_t v13 = v12;
  if (v9)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      double v14 = HMFGetLogIdentifier();
      BOOL v15 = [*(id *)(a1 + 40) idsInvitationUUID];
      id v16 = [v15 UUIDString];
      *(_DWORD *)buf = 138543874;
      uint64_t v23 = v14;
      __int16 v24 = 2112;
      __int16 v25 = v16;
      __int16 v26 = 2112;
      id v27 = v9;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to cancel invitation state for invitee with ids identifier %@ due to error %@", buf, 0x20u);
    }
  }
  else if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v17 = HMFGetLogIdentifier();
    long long v21 = [*(id *)(a1 + 40) idsInvitationUUID];
    long long v18 = [v21 UUIDString];
    long long v19 = [*(id *)(a1 + 40) identifier];
    long long v20 = [v19 UUIDString];
    *(_DWORD *)buf = 138543874;
    uint64_t v23 = v17;
    __int16 v24 = 2112;
    __int16 v25 = v18;
    __int16 v26 = 2112;
    id v27 = v20;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Canceled invitation state for invitee with ids identifier %@, home identifier %@", buf, 0x20u);
  }
}

- (void)__handleCompletedOutgoingInvitation:(id)a3
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    id v9 = [v4 identifier];
    uint64_t v10 = [v9 UUIDString];
    int v13 = 138543618;
    double v14 = v8;
    __int16 v15 = 2112;
    id v16 = v10;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Removing outgoing invitation '%@' since it completed", (uint8_t *)&v13, 0x16u);
  }
  [v4 updateInvitationState:3];
  id v11 = [v4 user];
  id v12 = [(HMDHome *)v6 usersPendingUserManagementOperations];
  [v12 removeObject:v11];
}

- (void)__handleCancelledOutgoingInvitation:(id)a3
{
}

- (BOOL)_doesInvitedUserHasTheSamePairingIdentityAsOwner:(id)a3
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (v4)
  {
    BOOL v5 = [(HMDHome *)self keychainStore];
    id v6 = [v5 getPreferredHH2ControllerKey];

    id v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    uint64_t v10 = v9;
    if (v6)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        id v12 = [v6 identifier];
        int v25 = 138543874;
        __int16 v26 = v11;
        __int16 v27 = 2112;
        uint64_t v28 = v12;
        __int16 v29 = 2112;
        id v30 = v4;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Owner HH2 pairing identifier: %@, Shared user pairing identifier: %@", (uint8_t *)&v25, 0x20u);
      }
      int v13 = [v6 identifier];
      char v14 = HMFEqualObjects();
    }
    else
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        long long v19 = HMFGetLogIdentifier();
        int v25 = 138543362;
        __int16 v26 = v19;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_FAULT, "%{public}@We are doomed. Could not find owner's HH2 Key and we are in HH2", (uint8_t *)&v25, 0xCu);
      }
      long long v20 = (void *)MEMORY[0x230FBD990]();
      long long v21 = v8;
      uint64_t v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = HMFGetLogIdentifier();
        int v25 = 138543362;
        __int16 v26 = v23;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@We are doomed. Could not find owner's HH2 Key and we are in HH2", (uint8_t *)&v25, 0xCu);
      }
      char v14 = 0;
    }
  }
  else
  {
    __int16 v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      long long v18 = HMFGetLogIdentifier();
      int v25 = 138543362;
      __int16 v26 = v18;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@shared user pairing identifier is nil.", (uint8_t *)&v25, 0xCu);
    }
    char v14 = 0;
  }

  return v14;
}

- (unint64_t)pendingUserPrivilegeFromOutgoingInvitationUUID:(id)a3
{
  id v4 = a3;
  uint64_t v13 = 0;
  char v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  if (v4)
  {
    BOOL v5 = [(HMDHome *)self backingStore];
    id v6 = [v5 context];

    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    v9[2] = __58__HMDHome_pendingUserPrivilegeFromOutgoingInvitationUUID___block_invoke;
    void v9[3] = &unk_264A2F698;
    id v10 = v4;
    id v11 = self;
    id v12 = &v13;
    [v6 unsafeSynchronousBlock:v9];
    unint64_t v7 = v14[3];
  }
  else
  {
    unint64_t v7 = 0;
  }
  _Block_object_dispose(&v13, 8);

  return v7;
}

void __58__HMDHome_pendingUserPrivilegeFromOutgoingInvitationUUID___block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = +[HMCContext findOutgoingInvitationWithModelID:*(void *)(a1 + 32)];
  uint64_t v3 = v2;
  if (v2)
  {
    id v4 = [v2 privilege];
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (int)[v4 intValue];
  }
  else
  {
    BOOL v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = *(id *)(a1 + 40);
    unint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 138543618;
      id v11 = v8;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the outgoing invitation with UUID in database: %@", (uint8_t *)&v10, 0x16u);
    }
  }
}

- (id)addUserAccessCodeForUser:(id)a3 fromOutgoingInvitation:(id)a4
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v7 accessCode];

  uint64_t v9 = (void *)MEMORY[0x230FBD990]();
  int v10 = self;
  id v11 = HMFGetOSLogHandle();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
  if (v8)
  {
    if (v12)
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v18 = 138543618;
      long long v19 = v13;
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Migrating access code from HH1 to HH2 for user : %@", (uint8_t *)&v18, 0x16u);
    }
    uint64_t v14 = [v7 accessCode];
    uint64_t v15 = +[HMDAccessCodeDataManager createUserAccessCodeModelFromAccessCode:v14 forUserUUID:v6 changedByUserUUID:0];
  }
  else
  {
    if (v12)
    {
      uint64_t v16 = HMFGetLogIdentifier();
      int v18 = 138543362;
      long long v19 = v16;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@This user does not have any access code in outgoing invitation. Not adding one.", (uint8_t *)&v18, 0xCu);
    }
    uint64_t v15 = 0;
  }

  return v15;
}

- (void)__handleAcceptedOutgoingInvitationResponse:(id)a3 destinationAddress:(id)a4 publicKey:(id)a5 username:(id)a6 reverseShare:(id)a7 reverseShareToken:(id)a8 issuerPublicKeyER:(id)a9 presenceAuthStatus:(id)a10 completionHandler:(id)a11
{
  uint64_t v138 = *MEMORY[0x263EF8340];
  id v17 = a3;
  id v114 = a4;
  id v119 = a5;
  id v113 = a6;
  id v112 = a7;
  id v118 = a8;
  id v115 = a9;
  id v117 = a10;
  id v18 = a11;
  int v120 = v17;
  long long v19 = [v17 user];
  __int16 v20 = (void *)MEMORY[0x230FBD990]();
  id v21 = self;
  uint64_t v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    uint64_t v23 = HMFGetLogIdentifier();
    unint64_t v24 = [(__CFString *)v19 privilege];
    if (v24 > 5) {
      int v25 = @"None";
    }
    else {
      int v25 = off_264A29920[v24];
    }
    __int16 v26 = v25;
    *(_DWORD *)buf = 138543874;
    long long v133 = v23;
    __int16 v134 = 2112;
    long long v135 = v19;
    __int16 v136 = 2112;
    long long v137 = v26;
    _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@User: %@, has accepted an invitation, processing acceptance. %@", buf, 0x20u);
  }
  uint64_t v116 = v18;

  [(__CFString *)v19 setHome:v21];
  __int16 v27 = [(__CFString *)v19 modelObjectWithChangeType:1];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  id v29 = v28;

  id v30 = [v17 identifier];
  unint64_t v31 = [(HMDHome *)v21 pendingUserPrivilegeFromOutgoingInvitationUUID:v30];

  id v32 = (void *)MEMORY[0x230FBD990]();
  char v33 = v21;
  id v34 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
  {
    id v35 = HMFGetLogIdentifier();
    if (v31 > 5) {
      int v36 = @"None";
    }
    else {
      int v36 = off_264A29920[v31];
    }
    id v37 = v36;
    *(_DWORD *)buf = 138543618;
    long long v133 = v35;
    __int16 v134 = 2112;
    long long v135 = v37;
    _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_INFO, "%{public}@Stored shared user privilege is : %@", buf, 0x16u);
  }
  __int16 v38 = [(HMDHome *)v33 pendingUsers];
  id v39 = [(__CFString *)v19 uuid];
  uint64_t v40 = objc_msgSend(v38, "hmf_firstObjectWithUUID:", v39);

  if (v40)
  {
    [v29 setObjectChangeType:2];
    id v41 = [NSNumber numberWithUnsignedInteger:v31];
    [v29 setPrivilege:v41];
  }
  if (v19 && v29)
  {
    id v42 = v113;
    id v43 = v113;
    id v44 = v112;
    if ([(__CFString *)v19 isRemoteGateway])
    {
      id v108 = v29;
      long long v45 = [(HMDHome *)v33 keychainStore];
      id v129 = 0;
      id v130 = 0;
      char v46 = [v45 getControllerPublicKey:0 secretKey:0 keyPair:0 username:&v130 allowCreation:0 error:&v129];
      id v47 = v130;
      id v106 = v129;

      if ((v46 & 1) == 0)
      {
        id v111 = v47;
        uint64_t v83 = [MEMORY[0x263F087E8] hmErrorWithCode:3 description:@"Failed to set resident pairing name" reason:0 suggestion:0];
        uint64_t v97 = v116;
        int v101 = _Block_copy(v116);
        if (v101)
        {
          uint64_t v105 = v101;
          (*((void (**)(void *, void *))v101 + 2))(v101, v83);
        }
        else
        {
          uint64_t v105 = 0;
        }
        long long v84 = v106;
        id v29 = v108;
LABEL_47:

        goto LABEL_48;
      }
      if ([v47 isEqualToString:v43])
      {
        long long v48 = +[HMDDevice deviceWithDestination:v114];
        uint64_t v49 = [v48 identifier];
        uint64_t v50 = [v49 UUIDString];
        long long v51 = v43;
        long long v52 = v40;
        uint64_t v53 = v50;

        uint64_t v54 = (void *)v53;
        uint64_t v40 = v52;
        id v43 = v54;
      }

      id v29 = v108;
    }
    uint64_t v107 = [objc_alloc(MEMORY[0x263F425F0]) initWithPairingKeyData:v119];
    id v111 = (void *)[objc_alloc(MEMORY[0x263F35A78]) initWithIdentifier:v43 publicKey:v107 privateKey:0 permissions:0];
    char v55 = objc_msgSend(v111, "hmd_dictionaryEncoding");
    [v29 setPairingIdentity:v55];

    uint64_t v56 = [v117 number];
    [v29 setPresenceAuthorizationStatus:v56];

    if (v112)
    {
      __int16 v57 = [v112 recordID];
      [v29 setReverseShareID:v57];
    }
    uint64_t v58 = encodeRootObject();
    [v29 setReverseShareToken:v58];

    uint64_t v59 = objc_opt_class();
    char v60 = [(HMDHome *)v33 uniqueIDsOfAllUsers];
    uint64_t v61 = [v59 createUserUniqueIDForAccessoriesWithoutDuplicatingExistingIDs:v60];

    uint64_t v105 = (void *)v61;
    if (v61)
    {
      [v29 setUniqueIDForAccessories:v61];
      if (v31 == 5)
      {
        id v62 = v29;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v63 = v62;
        }
        else {
          long long v63 = 0;
        }
        id v64 = v63;

        [(HMDHome *)v33 _updateRestrictedGuestHomeAccessSettingsFromOutgoingInvitation:v120 forUserModel:v64];
      }
      id v104 = v43;
      id v109 = v40;
      if (v115 && _os_feature_enabled_impl()) {
        [v29 setMatCredIPKExternalRepresentation:v115];
      }
      [(__CFString *)v19 setPairingIdentity:v111];
      long long v65 = [HMDOutgoingHomeInvitationModel alloc];
      uint64_t v66 = [v120 identifier];
      char v67 = [(HMDHome *)v33 uuid];
      id v68 = [(HMDBackingStoreModelObject *)v65 initWithObjectChangeType:3 uuid:v66 parentUUID:v67];

      [(HMDOutgoingHomeInvitationModel *)v68 setInvitationState:&unk_26E4709A8];
      [(HMDOutgoingHomeInvitationModel *)v68 setInviteeDestinationAddress:v114];
      [(HMDOutgoingHomeInvitationModel *)v68 setPendingUserUUID:0];
      long long v103 = [(HMDHome *)v33 homeManager];
      uint64_t v69 = [v103 backingStore];
      uint64_t v70 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      __int16 v102 = [v69 transaction:@"kUserManagementOperationAddedKey" options:v70];

      dispatch_group_t v71 = dispatch_group_create();
      id v72 = [(HMDHome *)v33 backingStore];
      uint64_t v73 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      id v74 = [v72 transaction:@"kAddUserRequestKey" options:v73];

      uint64_t v75 = (void *)MEMORY[0x263F42568];
      uint64_t v76 = [v120 identifier];
      BOOL v77 = [v75 messageWithName:@"kAddUserRequestKey" identifier:v76 messagePayload:0];
      [v74 add:v29 withMessage:v77];

      [v74 add:v68];
      uint64_t v78 = [v29 uuid];
      __int16 v79 = [(HMDHome *)v33 addUserAccessCodeForUser:v78 fromOutgoingInvitation:v120];

      if (v79) {
        [v74 add:v79];
      }
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 3221225472;
      aBlock[2] = __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1654;
      aBlock[3] = &unk_264A2EEA8;
      void aBlock[4] = v33;
      long long v124 = v19;
      dispatch_group_t v125 = v71;
      id v126 = v102;
      id v127 = 0;
      id v128 = v116;
      id v80 = v102;
      uint64_t v81 = v71;
      uint64_t v82 = _Block_copy(aBlock);
      v121[0] = MEMORY[0x263EF8330];
      v121[1] = 3221225472;
      v121[2] = __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_3;
      v121[3] = &unk_264A16C20;
      v121[4] = v33;
      id v122 = v120;
      [v74 runWithCoreDataBlock:v121 withCompletionBlock:v82];

      uint64_t v83 = 0;
      id v44 = v112;
      id v42 = v113;
      long long v84 = (void *)v107;
      uint64_t v40 = v109;
      id v43 = v104;
    }
    else
    {
      uint64_t v83 = [MEMORY[0x263F087E8] hmErrorWithCode:-1 description:@"Failed to create uniqueIDForAccessories" reason:0 suggestion:0];
      unint64_t v100 = (HMDOutgoingHomeInvitationModel *)_Block_copy(v116);
      id v68 = v100;
      long long v84 = (void *)v107;
      if (v100) {
        (*(void (**)(HMDOutgoingHomeInvitationModel *, void *))&v100->super._bsoDataVersionOverride)(v100, v83);
      }
    }

    uint64_t v97 = v116;
    goto LABEL_47;
  }
  id v110 = v40;
  id v85 = [(HMDHome *)v33 backingStore];
  id v86 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  long long v87 = [v85 transaction:@"kUpdateInvitationStateRequestKey" options:v86];

  long long v88 = [HMDOutgoingHomeInvitationModel alloc];
  __int16 v89 = [v120 identifier];
  long long v90 = [(HMDHome *)v33 uuid];
  uint64_t v91 = [(HMDBackingStoreModelObject *)v88 initWithObjectChangeType:3 uuid:v89 parentUUID:v90];

  int v92 = (void *)v91;
  [v87 add:v91];
  id v43 = v87;
  char v93 = [HMDUserModel alloc];
  int v94 = [(__CFString *)v19 uuid];
  uint64_t v95 = [(HMDHome *)v33 uuid];
  uint64_t v96 = [(HMDBackingStoreModelObject *)v93 initWithObjectChangeType:3 uuid:v94 parentUUID:v95];

  id v111 = (void *)v96;
  [v87 add:v96];
  v131[0] = MEMORY[0x263EF8330];
  v131[1] = 3221225472;
  v131[2] = __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke;
  v131[3] = &unk_264A2F3E8;
  void v131[4] = v33;
  [v87 run:v131];
  uint64_t v83 = [MEMORY[0x263F087E8] hmErrorWithCode:3 description:@"Outgoing Invitation does not have a valid invitee. Cancelling the invite." reason:0 suggestion:0];
  uint64_t v97 = v116;
  __int16 v98 = _Block_copy(v116);
  id v99 = v98;
  if (v98) {
    (*((void (**)(void *, void *))v98 + 2))(v98, v83);
  }

  id v44 = v112;
  id v42 = v113;
  uint64_t v40 = v110;
  long long v84 = v92;
LABEL_48:
}

void __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    int v8 = 138543618;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Finished deleting the outgoing invitation with error: %@", (uint8_t *)&v8, 0x16u);
  }
}

void __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1654(uint64_t a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v3 = a2;
  int v4 = shouldLogPrivateInformation();
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = *(id *)(a1 + 32);
  id v7 = HMFGetOSLogHandle();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (!v8) {
      goto LABEL_7;
    }
    uint64_t v9 = HMFGetLogIdentifier();
    __int16 v10 = [*(id *)(a1 + 40) userID];
    id v11 = [*(id *)(a1 + 40) displayName];
    *(_DWORD *)buf = 138544130;
    int v36 = v9;
    __int16 v37 = 2112;
    __int16 v38 = v10;
    __int16 v39 = 2112;
    uint64_t v40 = v11;
    __int16 v41 = 2112;
    id v42 = v3;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Added user with userID: %@ and displayName: %@ with error: %@", buf, 0x2Au);
  }
  else
  {
    if (!v8) {
      goto LABEL_7;
    }
    uint64_t v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138544130;
    int v36 = v9;
    __int16 v37 = 2112;
    __int16 v38 = @"...";
    __int16 v39 = 2112;
    uint64_t v40 = @"...";
    __int16 v41 = 2112;
    id v42 = v3;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Added user with userID: %@ and displayName: %@ with error: %@", buf, 0x2Au);
  }

LABEL_7:
  uint64_t v12 = (void *)MEMORY[0x230FBD990]();
  id v13 = *(id *)(a1 + 32);
  uint64_t v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = HMFGetLogIdentifier();
    unint64_t v31 = v12;
    uint64_t v16 = NSNumber;
    id v17 = [*(id *)(a1 + 32) users];
    objc_msgSend(v16, "numberWithUnsignedInteger:", objc_msgSend(v17, "count"));
    id v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
    long long v19 = NSNumber;
    [*(id *)(a1 + 32) pendingUsers];
    __int16 v20 = v32 = v3;
    objc_msgSend(v19, "numberWithUnsignedInteger:", objc_msgSend(v20, "count"));
    id v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
    uint64_t v22 = NSNumber;
    uint64_t v23 = [*(id *)(a1 + 32) usersIncludingPendingUsers:1];
    unint64_t v24 = objc_msgSend(v22, "numberWithUnsignedInteger:", objc_msgSend(v23, "count"));
    *(_DWORD *)buf = 138544130;
    int v36 = v15;
    __int16 v37 = 2112;
    __int16 v38 = v18;
    __int16 v39 = 2112;
    uint64_t v40 = v21;
    __int16 v41 = 2112;
    id v42 = v24;
    _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Users: %@, PendingUsers: %@, All Users: %@", buf, 0x2Au);

    uint64_t v12 = v31;
    id v3 = v32;
  }
  int v25 = *(NSObject **)(a1 + 48);
  __int16 v26 = [*(id *)(a1 + 32) workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1655;
  block[3] = &unk_264A2F7F8;
  id v34 = *(id *)(a1 + 56);
  dispatch_group_notify(v25, v26, block);

  if (!v3)
  {
    __int16 v27 = *(void **)(a1 + 32);
    uint64_t v28 = [*(id *)(a1 + 40) uuid];
    [v27 _loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance:v28];
  }
  id v29 = _Block_copy(*(const void **)(a1 + 72));
  id v30 = v29;
  if (v29) {
    (*((void (**)(void *, void))v29 + 2))(v29, *(void *)(a1 + 64));
  }
}

uint64_t __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _saveRestrictedGuestSettingsFromOutgoingInvitation:*(void *)(a1 + 40) managedObjectContext:a2 error:a4];
}

uint64_t __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1655(uint64_t a1)
{
  return [*(id *)(a1 + 32) run:&__block_literal_global_1657];
}

- (void)_handleRemoveUserModel:(id)a3 message:(id)a4
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = [v6 uuid];
  uint64_t v9 = [(HMDHome *)self userIncludingPendingUserWithUUID:v8];

  if (v9)
  {
    if (v9 == self->_currentUser)
    {
      __int16 v10 = (void *)MEMORY[0x230FBD990]();
      id v11 = self;
      uint64_t v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        id v13 = HMFGetLogIdentifier();
        int v26 = 138543362;
        __int16 v27 = v13;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Attempting to remove current user", (uint8_t *)&v26, 0xCu);
      }
      currentUser = self->_currentUser;
      self->_currentUser = 0;
    }
    [(HMDHome *)self _removeUserFromContainer:v9];
    uint64_t v15 = [(HMDHome *)self usersPendingUserManagementOperations];
    [v15 removeObject:v9];

    [(HMDUser *)v9 setHome:0];
    uint64_t v16 = [v7 transactionResult];
    [v16 markChanged];
    if ([v16 source] != 1)
    {
      id v17 = (void *)MEMORY[0x230FBD990]();
      id v18 = self;
      long long v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        __int16 v20 = HMFGetLogIdentifier();
        int v26 = 138543362;
        __int16 v27 = v20;
        _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Skipping remove user due to non-xpc backingstore transaction", (uint8_t *)&v26, 0xCu);
      }
      [v7 respondWithPayload:0];
    }
  }
  else
  {
    id v21 = (void *)MEMORY[0x230FBD990]();
    uint64_t v22 = self;
    uint64_t v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      unint64_t v24 = HMFGetLogIdentifier();
      int v25 = [v6 uuid];
      int v26 = 138543618;
      __int16 v27 = v24;
      __int16 v28 = 2112;
      id v29 = v25;
      _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@Cannot find the user with UUID %@", (uint8_t *)&v26, 0x16u);
    }
    uint64_t v16 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
    [v7 respondWithError:v16];
  }
}

- (void)_handleAddUserModel:(id)a3 message:(id)a4
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = [(HMDHome *)self usersIncludingPendingUsers:1];
  uint64_t v9 = [v6 uuid];
  id v85 = v8;
  objc_msgSend(v8, "hmf_firstObjectWithUUID:", v9);
  __int16 v10 = (HMDResidentUser *)objc_claimAutoreleasedReturnValue();

  id v11 = (void *)MEMORY[0x230FBD990]();
  uint64_t v12 = self;
  id v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = HMFGetLogIdentifier();
    uint64_t v15 = [v6 debugString:1];
    *(_DWORD *)buf = 138543618;
    int v94 = v14;
    __int16 v95 = 2112;
    uint64_t v96 = v15;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Adding HMDUserModel: %@", buf, 0x16u);
  }
  if (!v10)
  {
    long long v84 = v12;
    id v21 = [(HMDHome *)v12 homeManager];
    id v22 = v6;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    id v24 = v23;

    if (v24)
    {
      __int16 v10 = [[HMDResidentUser alloc] initWithModelObject:v24];
    }
    else
    {
      __int16 v10 = [[HMDUser alloc] initWithModelObject:v22];
      [(HMDResidentUser *)v10 refreshDisplayName];
      int v25 = [(HMDResidentUser *)v10 userID];

      if (!v25)
      {
        if (shouldLogPrivateInformation())
        {
          uint64_t v49 = [v22 userID];
        }
        else
        {
          uint64_t v49 = @"...";
          id v74 = @"...";
        }
        uint64_t v75 = (void *)MEMORY[0x230FBD990]();
        uint64_t v76 = v12;
        BOOL v77 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
        {
          uint64_t v78 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          int v94 = v78;
          __int16 v95 = 2112;
          uint64_t v96 = v49;
          _os_log_impl(&dword_22F52A000, v77, OS_LOG_TYPE_ERROR, "%{public}@User created from model no longer has userID, model userID invalid %@", buf, 0x16u);
        }
        id v24 = 0;
LABEL_56:

        goto LABEL_57;
      }
    }
    if (v10)
    {
      id v81 = v24;
      uint64_t v82 = v7;
      uint64_t v83 = v21;
      id v80 = v6;
      [(HMDResidentUser *)v10 configureWithHome:v12];
      [(HMDUser *)v10 updateRestrictedGuestSettingsFromWorkingStoreIfNeeded];
      [(HMDHome *)v12 _addUserToContainer:v10];
      [(HMDHome *)v12 _cleanRemovedUsers:v10];
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      int v26 = [(HMDHome *)v12 outgoingInvitations];
      uint64_t v27 = [v26 countByEnumeratingWithState:&v86 objects:v92 count:16];
      if (v27)
      {
        uint64_t v28 = v27;
        uint64_t v29 = *(void *)v87;
        while (2)
        {
          for (uint64_t i = 0; i != v28; ++i)
          {
            if (*(void *)v87 != v29) {
              objc_enumerationMutation(v26);
            }
            unint64_t v31 = *(void **)(*((void *)&v86 + 1) + 8 * i);
            id v32 = [v31 user];
            char v33 = [v32 pairingIdentity];
            id v34 = [(HMDUser *)v10 pairingIdentity];
            int v35 = [v33 isEqual:v34];

            if (v35)
            {
              [v31 setUser:v10];
              goto LABEL_24;
            }
          }
          uint64_t v28 = [v26 countByEnumeratingWithState:&v86 objects:v92 count:16];
          if (v28) {
            continue;
          }
          break;
        }
      }
LABEL_24:

      int v36 = v84;
      [(HMDHome *)v84 _addUserToIdentityRegistry:v10];
      __int16 v10 = v10;
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      if (isKindOfClass) {
        __int16 v38 = v10;
      }
      else {
        __int16 v38 = 0;
      }
      __int16 v79 = v38;

      if (isKindOfClass)
      {
        __int16 v39 = (void *)MEMORY[0x230FBD990]([(HMDHome *)v84 _updateConfigurationStateForResidentDevice:v10 desiredConfigState:2 message:0]);
        uint64_t v40 = v84;
        __int16 v41 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          id v42 = HMFGetLogIdentifier();
          uint64_t v43 = [(HMDResidentUser *)v10 userID];
          *(_DWORD *)buf = 138543618;
          int v94 = v42;
          __int16 v95 = 2112;
          uint64_t v96 = v43;
          _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_INFO, "%{public}@Removing resident user %@ from unassociated list", buf, 0x16u);
        }
        id v44 = [(HMDResidentUser *)v10 userID];
        [v83 removeFromUnassociatedPeers:v44 home:v40];

        long long v45 = (void *)MEMORY[0x230FBD990]();
        char v46 = v40;
        id v47 = HMFGetOSLogHandle();
        id v6 = v80;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
        {
          long long v48 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          int v94 = v48;
          _os_log_impl(&dword_22F52A000, v47, OS_LOG_TYPE_DEBUG, "%{public}@Add resident device", buf, 0xCu);
        }
      }
      else
      {
        v90[0] = @"kUserUUIDKey";
        uint64_t v50 = [(HMDUser *)v10 uuid];
        long long v51 = [v50 UUIDString];
        v91[0] = v51;
        v90[1] = @"kUserIDKey";
        long long v52 = [(HMDResidentUser *)v10 userID];
        v91[1] = v52;
        void v90[2] = @"kUserDisplayNameKey";
        uint64_t v53 = [(HMDResidentUser *)v10 displayName];
        v91[2] = v53;
        uint64_t v54 = [NSDictionary dictionaryWithObjects:v91 forKeys:v90 count:3];

        char v55 = (void *)[v54 mutableCopy];
        uint64_t v56 = [(HMDResidentUser *)v10 userID];
        [v55 setObject:v56 forKeyedSubscript:@"kUserIDKey"];

        __int16 v57 = [v82 identifier];
        if (v57) {
          [v82 identifier];
        }
        else {
        long long v63 = [MEMORY[0x263F08C38] UUID];
        }
        id v6 = v80;

        id v64 = [MEMORY[0x263F42568] entitledMessageWithName:@"kUserAddedNotificationKey" identifier:v63 messagePayload:v55];
        int v36 = v84;
        long long v65 = [(HMDHome *)v84 msgDispatcher];
        uint64_t v66 = [(HMDHome *)v84 uuid];
        [v65 sendMessage:v64 target:v66];
      }
      id v7 = v82;
      id v21 = v83;
      id v24 = v81;
      uint64_t v49 = v79;
      if ([(HMDUser *)v10 isCurrentUser])
      {
        char v67 = [(HMDHome *)v36 walletKeyManager];
        [v67 didAddCurrentUserWithUUID:v10];

        if (![(HMDHome *)v36 isOwnerUser] && (_os_feature_enabled_impl() & 1) == 0)
        {
          id v68 = (void *)MEMORY[0x230FBD990]();
          uint64_t v69 = v36;
          uint64_t v70 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
          {
            dispatch_group_t v71 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543362;
            int v94 = v71;
            _os_log_impl(&dword_22F52A000, v70, OS_LOG_TYPE_INFO, "%{public}@Calling replaceWalletKeyAfterHH2MigrationIfNecessary because the current shared user has been synced from the primary resident", buf, 0xCu);
          }
          id v72 = [(HMDHome *)v69 walletKeyManager];
          [v72 replaceWalletKeyAfterHH2MigrationIfNecessary];

          id v21 = v83;
          id v24 = v81;
        }
      }
      uint64_t v73 = [v82 transactionResult];
      [v73 markChanged];
    }
    else
    {
      if (shouldLogPrivateInformation())
      {
        uint64_t v49 = [v22 userID];
      }
      else
      {
        uint64_t v49 = @"...";
        uint64_t v58 = @"...";
      }
      uint64_t v59 = (void *)MEMORY[0x230FBD990]();
      char v60 = v12;
      uint64_t v61 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        id v62 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        int v94 = v62;
        __int16 v95 = 2112;
        uint64_t v96 = v49;
        _os_log_impl(&dword_22F52A000, v61, OS_LOG_TYPE_ERROR, "%{public}@Failed to create new user %@", buf, 0x16u);
      }
      __int16 v10 = 0;
    }
    goto LABEL_56;
  }
  uint64_t v16 = (void *)MEMORY[0x230FBD990]();
  id v17 = v12;
  id v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    long long v19 = HMFGetLogIdentifier();
    __int16 v20 = [v6 uuid];
    *(_DWORD *)buf = 138543874;
    int v94 = v19;
    __int16 v95 = 2112;
    uint64_t v96 = v20;
    __int16 v97 = 2112;
    __int16 v98 = v10;
    _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@HMDUserModel %@ passed as add for existing user %@", buf, 0x20u);
  }
  [(HMDResidentUser *)v10 transactionObjectUpdated:0 newValues:v6 message:v7];
LABEL_57:
}

- (void)_handleUpdateRequestForHomeInvitation:(id)a3 controllerPublicKey:(id)a4 controllerUsername:(id)a5 invitationState:(int64_t)a6 presenceAuthStatus:(id)a7 preferredUserID:(id)a8 fromHandle:(id)a9 fromAddress:(id)a10 fromMergeID:(id)a11 reverseShareURL:(id)a12 reverseShareToken:(id)a13 issuerPublicKeyER:(id)a14 message:(id)a15 messageResponseHandler:(id)a16
{
  uint64_t v145 = *MEMORY[0x263EF8340];
  id v20 = a3;
  id v116 = a4;
  id v117 = a5;
  id v21 = a7;
  id v111 = a8;
  id v22 = a9;
  id v23 = a10;
  id v24 = a11;
  id v114 = a12;
  id v25 = a13;
  id v26 = a14;
  id v115 = a15;
  id v118 = a16;
  id v119 = v20;
  if ([v20 isExpired])
  {
    id v104 = v22;
    id v107 = v21;
    uint64_t v27 = (void *)MEMORY[0x230FBD990]();
    uint64_t v28 = self;
    uint64_t v29 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v30 = v26;
      v32 = id v31 = v25;
      [v20 identifier];
      id v33 = v24;
      v35 = id v34 = v23;
      *(_DWORD *)buf = 138543618;
      long long v140 = v32;
      __int16 v141 = 2112;
      __int16 v142 = v35;
      _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Invitation (%@) has already expired, invitee cannot accept or decline", buf, 0x16u);

      id v23 = v34;
      id v24 = v33;

      id v25 = v31;
      id v26 = v30;
    }

    int v36 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:1006 userInfo:0];
    __int16 v37 = (void (**)(void, void, void))v118;
    if (v118) {
      (*((void (**)(id, __CFString *, void))v118 + 2))(v118, v36, 0);
    }
    id v21 = v107;
    __int16 v38 = v111;
    id v22 = v104;
    goto LABEL_50;
  }
  __int16 v39 = self;
  if ([v20 responseReceived])
  {
    __int16 v102 = v25;
    uint64_t v40 = (void *)MEMORY[0x230FBD990]();
    __int16 v41 = self;
    id v42 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      uint64_t v43 = v108 = v21;
      [v20 identifier];
      id v44 = v24;
      char v46 = v45 = v23;
      int v47 = [v20 isDeclined];
      long long v48 = @"accepted";
      *(_DWORD *)buf = 138543874;
      long long v140 = v43;
      __int16 v141 = 2112;
      if (v47) {
        long long v48 = @"declined";
      }
      __int16 v142 = v46;
      __int16 v143 = 2112;
      __int16 v144 = v48;
      _os_log_impl(&dword_22F52A000, v42, OS_LOG_TYPE_INFO, "%{public}@Invitation (%@) has already been %@, invitee cannot accept or decline", buf, 0x20u);

      id v23 = v45;
      id v24 = v44;

      id v21 = v108;
    }

    uint64_t v49 = (void *)MEMORY[0x263F087E8];
    uint64_t v50 = *MEMORY[0x263F0C710];
    if ([v20 isDeclined]) {
      uint64_t v51 = 1008;
    }
    else {
      uint64_t v51 = 1007;
    }
    int v36 = [v49 errorWithDomain:v50 code:v51 userInfo:0];
    __int16 v37 = (void (**)(void, void, void))v118;
    if (v118) {
      (*((void (**)(id, __CFString *, void))v118 + 2))(v118, v36, 0);
    }
    goto LABEL_49;
  }
  __int16 v37 = (void (**)(void, void, void))v118;
  if ((unint64_t)(a6 - 3) <= 1)
  {
    __int16 v102 = v25;
    id v98 = v26;
    if (a6 == 3)
    {
      long long v52 = v22;
      uint64_t v53 = v21;
      uint64_t v54 = [HMDSharedUserInviteOwnerResponseLogEventBuilder alloc];
      char v55 = [v119 identifier];
      uint64_t v56 = [v119 user];
      int v36 = -[HMDSharedUserInviteOwnerResponseLogEventBuilder initWithHome:sessionIdentifier:invitationType:](v54, "initWithHome:sessionIdentifier:invitationType:", self, v55, [v56 privilege]);

      [(HMDHome *)self addSharedUserResponseEventBuilder:v36];
      if (v116 && v117)
      {
        id v100 = v23;
        if (![(HMDHome *)self _doesInvitedUserHasTheSamePairingIdentityAsOwner:v117])
        {
          __int16 v38 = v111;
          if (v111)
          {
            uint64_t v96 = +[HMDAccountHandleFormatter defaultFormatter];
            __int16 v97 = [v96 accountHandleFromString:v111];
          }
          else
          {
            __int16 v97 = 0;
          }
          [(__CFString *)v36 markAuthenticateUserBegin];
          v124[0] = MEMORY[0x263EF8330];
          v124[1] = 3221225472;
          v124[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke;
          v124[3] = &unk_264A16BF8;
          dispatch_group_t v125 = v36;
          id v138 = v118;
          id v126 = v97;
          id v127 = v119;
          id v128 = v116;
          id v129 = v117;
          id v130 = self;
          id v131 = v24;
          id v132 = v114;
          id v133 = v102;
          id v134 = v52;
          id v135 = v23;
          id v136 = v99;
          id v137 = v53;
          id v106 = v36;
          int v36 = v97;
          id v25 = v102;
          id v21 = v53;
          id v22 = v52;
          id v26 = v99;
          __int16 v37 = (void (**)(void, void, void))v118;
          __authenticateAcceptedOutgoingInvitation(self, v127, v134, v36, v124);

          goto LABEL_50;
        }
        __int16 v57 = (void *)MEMORY[0x230FBD990]();
        uint64_t v58 = self;
        uint64_t v59 = HMFGetOSLogHandle();
        __int16 v37 = (void (**)(void, void, void))v118;
        if (os_log_type_enabled(v59, OS_LOG_TYPE_FAULT))
        {
          char v60 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          long long v140 = v60;
          _os_log_impl(&dword_22F52A000, v59, OS_LOG_TYPE_FAULT, "%{public}@Owner and shared user has the same pairing identities.", buf, 0xCu);
        }
        uint64_t v61 = (void *)MEMORY[0x230FBD990]();
        id v62 = v58;
        long long v63 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
        {
          id v64 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          long long v140 = v64;
          __int16 v141 = 2112;
          __int16 v142 = &unk_26E470990;
          _os_log_impl(&dword_22F52A000, v63, OS_LOG_TYPE_ERROR, "%{public}@Owner and shared user has the same pairing identities : %@", buf, 0x16u);
        }
        long long v65 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2722];
        [(__CFString *)v36 markError:v65];
        if (v118) {
          (*((void (**)(id, void *, void))v118 + 2))(v118, v65, 0);
        }

        id v21 = v53;
        __int16 v38 = v111;
        id v22 = v52;
        id v23 = v100;
        id v25 = v102;
      }
      else
      {
        uint64_t v73 = objc_msgSend(MEMORY[0x263F087E8], "errorWithDomain:code:userInfo:", *MEMORY[0x263F0C710], 3, 0, v98);
        [(__CFString *)v36 markError:v73];
        id v21 = v53;
        id v25 = v102;
        __int16 v37 = (void (**)(void, void, void))v118;
        if (v118) {
          (*((void (**)(id, void *, void))v118 + 2))(v118, v73, 0);
        }

        __int16 v38 = v111;
        id v22 = v52;
      }
      id v26 = v98;
      goto LABEL_50;
    }
    id v110 = v21;
    id v101 = v23;
    if (shouldLogPrivateInformation())
    {
      dispatch_group_t v71 = [v119 user];
      int v36 = [v71 userID];
    }
    else
    {
      int v36 = @"...";
      id v72 = @"...";
    }
    id v113 = v24;
    id v105 = v22;
    id v74 = (void *)MEMORY[0x230FBD990](v72);
    uint64_t v75 = v39;
    uint64_t v76 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
    {
      BOOL v77 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v140 = v77;
      __int16 v141 = 2112;
      __int16 v142 = v36;
      _os_log_impl(&dword_22F52A000, v76, OS_LOG_TYPE_INFO, "%{public}@User %@ declined invite", buf, 0x16u);
    }
    id v78 = objc_alloc(MEMORY[0x263F42520]);
    __int16 v79 = [(HMDHome *)v75 workQueue];
    id v80 = (void *)[v78 initWithQueue:v79];

    id v81 = [(HMDHome *)v75 homeManager];
    uint64_t v82 = [v81 homeOwnerCloudShareManager];
    uint64_t v83 = [v119 user];
    long long v84 = [v82 revokeAccessForUser:v83 home:v75];
    v122[0] = MEMORY[0x263EF8330];
    v122[1] = 3221225472;
    v122[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1633;
    v122[3] = &unk_264A2C678;
    v122[4] = v75;
    id v123 = v119;
    v120[0] = MEMORY[0x263EF8330];
    v120[1] = 3221225472;
    v120[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1634;
    v120[3] = &unk_264A2EC50;
    v120[4] = v75;
    id v85 = v123;
    id v121 = v85;
    id v86 = (id)[v84 inContext:v80 then:v122 orRecover:v120];

    uint64_t v87 = [v115 name];
    long long v88 = (void *)v87;
    long long v89 = @"UpdateOutgoingInvitationToAccept";
    if (v87) {
      long long v89 = (__CFString *)v87;
    }
    long long v90 = v89;

    uint64_t v91 = [(HMDHome *)v75 backingStore];
    int v92 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    char v93 = [v91 transaction:v90 options:v92];

    int v94 = [v85 emptyModelObjectWithChangeType:2];
    __int16 v95 = [NSNumber numberWithInteger:a6];
    [v94 setInvitationState:v95];

    if (v115) {
      [v93 add:v94 withMessage:v115];
    }
    else {
      [v93 add:v94];
    }
    id v22 = v105;
    id v26 = v98;
    id v23 = v101;
    id v24 = v113;
    __int16 v37 = (void (**)(void, void, void))v118;
    objc_msgSend(v93, "run", v98);

    id v21 = v110;
LABEL_49:
    __int16 v38 = v111;
    id v25 = v102;
    goto LABEL_50;
  }
  id v109 = v21;
  uint64_t v66 = (void *)MEMORY[0x230FBD990]();
  char v67 = self;
  id v68 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v70 = id v69 = v24;
    *(_DWORD *)buf = 138543618;
    long long v140 = v70;
    __int16 v141 = 2048;
    __int16 v142 = (void *)a6;
    _os_log_impl(&dword_22F52A000, v68, OS_LOG_TYPE_INFO, "%{public}@Failed to update invite state since the value %ld was incorrect", buf, 0x16u);

    id v24 = v69;
    __int16 v37 = (void (**)(void, void, void))v118;
  }

  int v36 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:43 userInfo:0];
  if (v37) {
    ((void (**)(void, __CFString *, void))v37)[2](v37, v36, 0);
  }
  id v21 = v109;
  __int16 v38 = v111;
LABEL_50:
}

void __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 32);
  if (!v3)
  {
    [v4 markAuthenticateUserEnd];
    if (*(void *)(a1 + 40))
    {
      id v6 = [*(id *)(a1 + 48) user];
      id v7 = +[HMDUser userIDForAccountHandle:*(void *)(a1 + 40)];
      [v6 setUserID:v7];
    }
    BOOL v8 = (void *)[objc_alloc(MEMORY[0x263F425F0]) initWithPairingKeyData:*(void *)(a1 + 56)];
    uint64_t v9 = (void *)[objc_alloc(MEMORY[0x263F35A78]) initWithIdentifier:*(void *)(a1 + 64) publicKey:v8 privateKey:0 permissions:0];
    __int16 v10 = [*(id *)(a1 + 72) homeManager];
    id v11 = [*(id *)(a1 + 48) user];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    id v13 = v12;

    if (v13)
    {
      uint64_t v14 = [v13 device];
      if (v14)
      {
        uint64_t v15 = [v10 identityRegistry];
        uint64_t v16 = [*(id *)(a1 + 48) user];
        [v15 registerIdentity:v9 device:v14 object:v16];

LABEL_14:
      }
    }
    else
    {
      id v17 = [*(id *)(a1 + 48) user];
      uint64_t v14 = [v17 account];

      if (v14)
      {
        uint64_t v15 = [v10 identityRegistry];
        [v15 registerIdentity:v9 account:v14 object:*(void *)(a1 + 48)];
        goto LABEL_14;
      }
    }

    id v18 = [*(id *)(a1 + 48) user];
    long long v19 = +[HMDAccountIdentifier accountIdentifierForSenderCorrelationIdentifier:*(void *)(a1 + 80)];
    [v18 setAccountIdentifier:v19];

    id v20 = [*(id *)(a1 + 48) user];
    [v20 setMergeIdentifier:*(void *)(a1 + 80)];

    id v21 = [[HMDCoreDataCloudShareInvitation alloc] initWithURL:*(void *)(a1 + 88) token:*(void *)(a1 + 96)];
    id v22 = [v10 homeOwnerCloudShareManager];
    id v23 = objc_alloc(MEMORY[0x263F42520]);
    id v24 = [*(id *)(a1 + 72) workQueue];
    id v25 = (void *)[v23 initWithQueue:v24];

    [*(id *)(a1 + 32) markJoiningReverseShareBegin];
    id v26 = [v22 acceptShareInvitation:v21];
    v39[0] = MEMORY[0x263EF8330];
    v39[1] = 3221225472;
    void v39[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_2;
    void v39[3] = &unk_264A16BA8;
    void v39[4] = *(void *)(a1 + 72);
    id v40 = *(id *)(a1 + 104);
    id v41 = *(id *)(a1 + 48);
    id v42 = *(id *)(a1 + 32);
    id v43 = *(id *)(a1 + 112);
    id v44 = *(id *)(a1 + 56);
    id v45 = *(id *)(a1 + 64);
    id v46 = *(id *)(a1 + 120);
    id v47 = *(id *)(a1 + 128);
    id v48 = *(id *)(a1 + 136);
    v28[0] = MEMORY[0x263EF8330];
    v28[1] = 3221225472;
    void v28[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_2_1630;
    void v28[3] = &unk_264A16BD0;
    v28[4] = *(void *)(a1 + 72);
    id v29 = *(id *)(a1 + 104);
    id v30 = *(id *)(a1 + 32);
    id v31 = *(id *)(a1 + 48);
    id v32 = *(id *)(a1 + 112);
    id v33 = *(id *)(a1 + 56);
    id v34 = *(id *)(a1 + 64);
    id v35 = *(id *)(a1 + 96);
    id v36 = *(id *)(a1 + 120);
    id v37 = *(id *)(a1 + 128);
    id v38 = *(id *)(a1 + 136);
    id v27 = (id)[v26 inContext:v25 then:v39 orRecover:v28];

    goto LABEL_16;
  }
  [v4 markError:v3];
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5) {
    (*(void (**)(uint64_t, id, void))(v5 + 16))(v5, v3, 0);
  }
LABEL_16:
}

uint64_t __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1633(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = a2;
  int v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    BOOL v8 = [*(id *)(a1 + 40) user];
    uint64_t v9 = [v8 uuid];
    __int16 v10 = [*(id *)(a1 + 32) name];
    id v11 = [*(id *)(a1 + 32) uuid];
    int v13 = 138544130;
    uint64_t v14 = v7;
    __int16 v15 = 2112;
    uint64_t v16 = v9;
    __int16 v17 = 2112;
    id v18 = v10;
    __int16 v19 = 2112;
    id v20 = v11;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Successfully revoked cloud share for declined invite %@ for home %@/%@", (uint8_t *)&v13, 0x2Au);
  }

  return 1;
}

uint64_t __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1634(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = a2;
  int v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v7 = HMFGetLogIdentifier();
    BOOL v8 = [*(id *)(a1 + 40) user];
    uint64_t v9 = [v8 uuid];
    __int16 v10 = [*(id *)(a1 + 32) name];
    id v11 = [*(id *)(a1 + 32) uuid];
    int v13 = 138544386;
    uint64_t v14 = v7;
    __int16 v15 = 2112;
    uint64_t v16 = v9;
    __int16 v17 = 2112;
    id v18 = v10;
    __int16 v19 = 2112;
    id v20 = v11;
    __int16 v21 = 2112;
    id v22 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to revoke cloud share for declined invite %@ for home %@/%@ due to %@", (uint8_t *)&v13, 0x34u);
  }

  return 1;
}

uint64_t __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v3 = a2;
  int v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    uint64_t v22 = *(void *)(a1 + 40);
    BOOL v8 = [*(id *)(a1 + 32) name];
    uint64_t v9 = [*(id *)(a1 + 32) uuid];
    __int16 v10 = [*(id *)(a1 + 48) user];
    unint64_t v11 = [v10 privilege];
    if (v11 > 5) {
      uint64_t v12 = @"None";
    }
    else {
      uint64_t v12 = off_264A29920[v11];
    }
    int v13 = v12;
    *(_DWORD *)buf = 138544642;
    id v27 = v7;
    __int16 v28 = 2112;
    id v29 = v3;
    __int16 v30 = 2112;
    uint64_t v31 = v22;
    __int16 v32 = 2112;
    id v33 = v8;
    __int16 v34 = 2112;
    id v35 = v9;
    __int16 v36 = 2112;
    id v37 = v13;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Joined cloud share %@ from shared user %@ for home %@ /%@ / %@", buf, 0x3Eu);
  }
  [*(id *)(a1 + 56) markJoiningReverseShareEnd];
  [*(id *)(a1 + 56) markAddUserToHomeBegin];
  uint64_t v14 = *(void **)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 88);
  uint64_t v19 = *(void *)(a1 + 96);
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  v23[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1629;
  v23[3] = &unk_264A2EDE0;
  uint64_t v20 = *(void *)(a1 + 48);
  id v24 = *(id *)(a1 + 56);
  id v25 = *(id *)(a1 + 104);
  objc_msgSend(v14, "__handleAcceptedOutgoingInvitationResponse:destinationAddress:publicKey:username:reverseShare:reverseShareToken:issuerPublicKeyER:presenceAuthStatus:completionHandler:", v20, v15, v16, v17, v3, 0, v18, v19, v23);

  return 1;
}

uint64_t __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_2_1630(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v3 = a2;
  int v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = [*(id *)(a1 + 32) name];
    __int16 v10 = [*(id *)(a1 + 32) uuid];
    *(_DWORD *)buf = 138544386;
    id v26 = v7;
    __int16 v27 = 2112;
    uint64_t v28 = v8;
    __int16 v29 = 2112;
    __int16 v30 = v9;
    __int16 v31 = 2112;
    __int16 v32 = v10;
    __int16 v33 = 2112;
    id v34 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to accept cloud share from shared user %@ for home %@/%@ due to %@, will try later", buf, 0x34u);
  }
  [*(id *)(a1 + 48) markError:v3];
  unint64_t v11 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = *(void *)(a1 + 96);
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  v23[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1631;
  v23[3] = &unk_264A2E288;
  uint64_t v18 = *(void *)(a1 + 104);
  id v24 = *(id *)(a1 + 112);
  objc_msgSend(v11, "__handleAcceptedOutgoingInvitationResponse:destinationAddress:publicKey:username:reverseShare:reverseShareToken:issuerPublicKeyER:presenceAuthStatus:completionHandler:", v12, v13, v14, v15, 0, v16, v17, v18, v23);
  dispatch_time_t v19 = dispatch_time(0, 300000000000);
  uint64_t v20 = [*(id *)(a1 + 32) workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_2_1632;
  block[3] = &unk_264A2F7F8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_after(v19, v20, block);

  return 1;
}

uint64_t __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1631(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0);
  }
  return result;
}

uint64_t __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_2_1632(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processUnacceptReverseShareAccessForUsers];
}

void __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1629(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 32);
  id v7 = v3;
  if (v3) {
    objc_msgSend(v4, "markError:");
  }
  else {
    [v4 markAddUserToHomeEnd];
  }
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = v7;
  if (v5)
  {
    (*(void (**)(uint64_t, id, void))(v5 + 16))(v5, v7, 0);
    id v6 = v7;
  }
}

- (void)_processUnacceptReverseShareAccessForUsers
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  if ([(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
  {
    v46[0] = 0;
    v46[1] = v46;
    v46[2] = 0x2020000000;
    char v47 = 0;
    objc_initWeak(&location, self);
    uint64_t v28 = [MEMORY[0x263F42538] futureWithNoValue];
    id v3 = objc_alloc(MEMORY[0x263F42520]);
    int v4 = [(HMDHome *)self workQueue];
    id v26 = (void *)[v3 initWithQueue:v4];

    uint64_t v44 = _HMFThreadLocalAsyncContextPush();
    uint64_t v5 = [(HMDHome *)self home];
    id v6 = [v5 usersSupportingPresence];

    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    obuint64_t j = v6;
    uint64_t v7 = [obj countByEnumeratingWithState:&v40 objects:v57 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v41;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v41 != v8) {
            objc_enumerationMutation(obj);
          }
          __int16 v10 = *(void **)(*((void *)&v40 + 1) + 8 * i);
          if (([v10 isOwner] & 1) == 0)
          {
            *(void *)&long long v52 = 0;
            *((void *)&v52 + 1) = &v52;
            uint64_t v53 = 0x3032000000;
            uint64_t v54 = __Block_byref_object_copy__14257;
            char v55 = __Block_byref_object_dispose__14258;
            id v56 = 0;
            unint64_t v11 = [(HMDHome *)self backingStore];
            uint64_t v12 = [v11 context];

            v36[0] = MEMORY[0x263EF8330];
            v36[1] = 3221225472;
            void v36[2] = __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke;
            id v36[3] = &unk_264A2F000;
            v36[4] = v10;
            id v13 = v12;
            id v37 = v13;
            uint64_t v38 = self;
            __int16 v39 = &v52;
            uint64_t v14 = [v13 unsafeSynchronousBlock:v36];
            if (*(void *)(*((void *)&v52 + 1) + 40))
            {
              v31[0] = MEMORY[0x263EF8330];
              v31[1] = 3221225472;
              void v31[2] = __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1611;
              void v31[3] = &unk_264A16B58;
              objc_copyWeak(&v35, &location);
              __int16 v33 = &v52;
              v31[4] = v10;
              id v32 = v13;
              id v34 = v46;
              uint64_t v15 = [v28 then:v31];

              objc_destroyWeak(&v35);
              uint64_t v28 = (void *)v15;
            }
            else
            {
              uint64_t v16 = (void *)MEMORY[0x230FBD990](v14);
              uint64_t v17 = self;
              HMFGetOSLogHandle();
              uint64_t v18 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
              {
                HMFGetLogIdentifier();
                id v19 = (id)objc_claimAutoreleasedReturnValue();
                uint64_t v20 = [v10 uuid];
                *(_DWORD *)buf = 138543618;
                id v49 = v19;
                __int16 v50 = 2112;
                uint64_t v51 = v20;
                _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_DEBUG, "%{public}@Unable to find user with UUID %@", buf, 0x16u);
              }
            }

            _Block_object_dispose(&v52, 8);
          }
        }
        uint64_t v7 = [obj countByEnumeratingWithState:&v40 objects:v57 count:16];
      }
      while (v7);
    }

    v29[0] = MEMORY[0x263EF8330];
    v29[1] = 3221225472;
    v29[2] = __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1616;
    void v29[3] = &unk_264A16B80;
    objc_copyWeak(&v30, &location);
    void v29[4] = v46;
    id v21 = (id)[v28 then:v29];
    objc_destroyWeak(&v30);

    _HMFThreadLocalAsyncContextPop();
    objc_destroyWeak(&location);
    _Block_object_dispose(v46, 8);
  }
  else
  {
    uint64_t v22 = (void *)MEMORY[0x230FBD990]();
    uint64_t v23 = self;
    id v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      id v25 = HMFGetLogIdentifier();
      LODWORD(v52) = 138543362;
      *(void *)((char *)&v52 + 4) = v25;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Will not try to accept reverse shares because this is not longer the primary resident", (uint8_t *)&v52, 0xCu);
    }
  }
}

void __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) uuid];
  id v3 = [*(id *)(a1 + 40) managedObjectContext];
  int v4 = +[_MKFHome findHomeMemberWithUUID:v2 context:v3];

  if (v4)
  {
    uint64_t v5 = [v4 reverseShareToken];
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = *(id *)(a1 + 48);
    __int16 v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      unint64_t v11 = HMFGetLogIdentifier();
      uint64_t v12 = [*(id *)(a1 + 32) uuid];
      int v13 = 138543618;
      uint64_t v14 = v11;
      __int16 v15 = 2112;
      uint64_t v16 = v12;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to find home member with UUID %@", (uint8_t *)&v13, 0x16u);
    }
  }
}

uint64_t __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1611(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v5 = [HMDCoreDataCloudShareInvitation alloc];
  uint64_t v6 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) shareURL];
  uint64_t v7 = [(HMDCoreDataCloudShareInvitation *)v5 initWithURL:v6 token:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];

  uint64_t v8 = [WeakRetained homeManager];
  id v9 = [v8 homeOwnerCloudShareManager];

  id v10 = objc_alloc(MEMORY[0x263F42520]);
  unint64_t v11 = [WeakRetained workQueue];
  uint64_t v12 = (void *)[v10 initWithQueue:v11];

  int v13 = [v9 acceptShareInvitation:v7];
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 3221225472;
  v21[2] = __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_2;
  v21[3] = &unk_264A16B08;
  objc_copyWeak(&v23, (id *)(a1 + 64));
  uint64_t v14 = *(void **)(a1 + 40);
  void v21[4] = *(void *)(a1 + 32);
  id v22 = v14;
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 3221225472;
  void v19[2] = __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1615;
  v19[3] = &unk_264A16B30;
  objc_copyWeak(&v20, (id *)(a1 + 64));
  uint64_t v15 = *(void *)(a1 + 56);
  void v19[4] = *(void *)(a1 + 32);
  void v19[5] = v15;
  id v16 = [v13 inContext:v12 then:v21 orRecover:v19];
  if (v16)
  {
    uint64_t v17 = v16;

    objc_destroyWeak(&v20);
    objc_destroyWeak(&v23);

    return 3;
  }
  else
  {
    uint64_t result = _HMFPreconditionFailure();
    __break(1u);
  }
  return result;
}

uint64_t __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1616(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = a2;
  int v4 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = WeakRetained;
    uint64_t v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v16 = v9;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@At least one shared user reverse share not accepted, scheduling retry", buf, 0xCu);
    }
    dispatch_time_t v10 = dispatch_time(0, 300000000000);
    unint64_t v11 = [v7 workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1617;
    block[3] = &unk_264A2C170;
    objc_copyWeak(&v14, v4);
    dispatch_after(v10, v11, block);

    objc_destroyWeak(&v14);
  }

  return 1;
}

void __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1617(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _processUnacceptReverseShareAccessForUsers];
}

uint64_t __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      id v9 = [*(id *)(a1 + 32) accountHandle];
      dispatch_time_t v10 = [v6 name];
      unint64_t v11 = [v6 uuid];
      *(_DWORD *)buf = 138544386;
      id v20 = v8;
      __int16 v21 = 2112;
      id v22 = v3;
      __int16 v23 = 2112;
      id v24 = v9;
      __int16 v25 = 2112;
      id v26 = v10;
      __int16 v27 = 2112;
      uint64_t v28 = v11;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Joined cloud share %@ from shared user %@ for home %@/%@", buf, 0x34u);
    }
    uint64_t v12 = [v6 backingStore];
    int v13 = [v12 context];
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 3221225472;
    void v16[2] = __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1613;
    v16[3] = &unk_264A2F2F8;
    id v14 = *(void **)(a1 + 40);
    void v16[4] = *(void *)(a1 + 32);
    id v17 = v14;
    id v18 = v6;
    [v13 unsafeSynchronousBlock:v16];
  }
  return 1;
}

uint64_t __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1615(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = WeakRetained;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    id v9 = [*(id *)(a1 + 32) accountHandle];
    dispatch_time_t v10 = [v6 name];
    unint64_t v11 = [v6 uuid];
    int v13 = 138544386;
    id v14 = v8;
    __int16 v15 = 2112;
    id v16 = v9;
    __int16 v17 = 2112;
    id v18 = v10;
    __int16 v19 = 2112;
    id v20 = v11;
    __int16 v21 = 2112;
    id v22 = v3;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to accept cloud share from shared user %@ for home %@/%@ due to %@", (uint8_t *)&v13, 0x34u);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;

  return 1;
}

void __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1613(id *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = [a1[4] uuid];
  id v3 = [a1[5] managedObjectContext];
  int v4 = +[_MKFHome findHomeMemberWithUUID:v2 context:v3];

  if (v4)
  {
    [v4 setReverseShareToken:0];
    uint64_t v5 = +[HMCContext currentContext];
    [v5 save];
  }
  else
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = a1[6];
    uint64_t v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      dispatch_time_t v10 = [a1[4] uuid];
      int v11 = 138543618;
      uint64_t v12 = v9;
      __int16 v13 = 2112;
      id v14 = v10;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@After accepting share, unable to find home member with UUID %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

- (void)handleAcceptRequestForIDSInvitationWithIdentifier:(id)a3 payload:(id)a4 fromAddress:(id)a5 fromMergeID:(id)a6
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v86 = a6;
  __int16 v13 = objc_msgSend(v11, "hmf_UUIDForKey:", @"kInvitationIdentifierKey");
  id v14 = objc_msgSend(v11, "hmf_dataForKey:", @"kControllerPublicKey");
  uint64_t v83 = objc_msgSend(v11, "hmf_stringForKey:", @"kControllerPairingNameKey");
  uint64_t v15 = objc_msgSend(v11, "hmf_dataForKey:", @"HMDIssuerPublicKeyExternalRepresentationKey");
  id v85 = [MEMORY[0x263F0E8C8] authWithDict:v11];
  long long v84 = objc_msgSend(v11, "hmf_stringForKey:", @"kUserIDKey");
  uint64_t v16 = [(HMDHome *)self invitationWithIDSInvitationIdentifier:v10];
  uint64_t v17 = [(HMDHome *)self invitationWithInvitationIdentifier:v13];
  uint64_t v87 = (void *)v17;
  if (!(v16 | v17))
  {
    long long v41 = (void *)MEMORY[0x230FBD990]();
    long long v42 = self;
    long long v43 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      uint64_t v44 = v82 = v15;
      [v10 UUIDString];
      v45 = id v78 = v12;
      [v13 UUIDString];
      id v46 = v14;
      v48 = id v47 = v10;
      *(_DWORD *)buf = 138543874;
      long long v90 = v44;
      __int16 v91 = 2112;
      id v92 = v45;
      __int16 v93 = 2112;
      int v94 = v48;
      _os_log_impl(&dword_22F52A000, v43, OS_LOG_TYPE_ERROR, "%{public}@Could not find matching outgoingInvitation for idsIdentifier %@ homeIdentifier %@ to handle accept.", buf, 0x20u);

      id v10 = v47;
      id v14 = v46;

      id v12 = v78;
      uint64_t v15 = v82;
    }

    uint64_t v16 = 0;
    goto LABEL_19;
  }
  id v80 = v14;
  id v81 = v15;
  if (!v16 && v17)
  {
    id v18 = (void *)MEMORY[0x230FBD990]();
    __int16 v19 = self;
    id v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      __int16 v21 = HMFGetLogIdentifier();
      [v10 UUIDString];
      id v22 = v72 = v10;
      [v13 UUIDString];
      uint64_t v23 = v69 = v18;
      [0 idsInvitationUUID];
      uint64_t v76 = v13;
      v25 = id v24 = v12;
      id v26 = [v25 UUIDString];
      *(_DWORD *)buf = 138544130;
      long long v90 = v21;
      __int16 v91 = 2112;
      id v92 = v22;
      __int16 v93 = 2112;
      int v94 = v23;
      __int16 v95 = 2112;
      uint64_t v96 = v26;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Could not find matching outgoingInvitation for idsIdentifier %@, but found one for homeIdentifier %@ with idsIdentifier %@. Using homeIdentifier accept invite.", buf, 0x2Au);

      id v12 = v24;
      __int16 v13 = v76;

      id v18 = v69;
      id v10 = v72;
    }
    uint64_t v16 = v87;
    uint64_t v15 = v81;
  }
  __int16 v27 = [(id)v16 identifier];
  char v28 = objc_msgSend(v27, "hmf_isEqualToUUID:", v13);

  if ((v28 & 1) == 0)
  {
    id v49 = (void *)MEMORY[0x230FBD990]();
    __int16 v50 = self;
    uint64_t v51 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      long long v52 = HMFGetLogIdentifier();
      [v10 UUIDString];
      v53 = id v74 = v10;
      [(id)v16 identifier];
      uint64_t v54 = v71 = v49;
      char v55 = [v54 UUIDString];
      [v13 UUIDString];
      __int16 v79 = v13;
      v57 = id v56 = v12;
      *(_DWORD *)buf = 138544130;
      long long v90 = v52;
      __int16 v91 = 2112;
      id v92 = v53;
      __int16 v93 = 2112;
      int v94 = v55;
      __int16 v95 = 2112;
      uint64_t v96 = v57;
      _os_log_impl(&dword_22F52A000, v51, OS_LOG_TYPE_ERROR, "%{public}@Found matching outgoingInvitation for idsIdentifier %@, but homeIdentifier on IDS invitation: %@ did not match the one of the found invitation %@ to handle accept.", buf, 0x2Au);

      id v49 = v71;
      id v12 = v56;
      __int16 v13 = v79;

      id v10 = v74;
    }

    id v14 = v80;
    uint64_t v15 = v81;
LABEL_19:
    __int16 v39 = (void *)v83;
    goto LABEL_26;
  }
  id v77 = v12;
  uint64_t v29 = objc_msgSend(v11, "hmf_stringForKey:", @"HMDHomeInvitationShareURLKey");
  uint64_t v70 = [NSURL URLWithString:v29];
  if (v29)
  {
    uint64_t v66 = v29;
    uint64_t v30 = objc_msgSend(v11, "hmf_dataForKey:", @"HMDHomeInvitationShareTokenKey");
    __int16 v31 = (void *)MEMORY[0x263F08928];
    id v32 = [MEMORY[0x263EFFA08] setWithObject:objc_opt_class()];
    id v88 = 0;
    char v67 = (void *)v30;
    uint64_t v33 = [v31 _strictlyUnarchivedObjectOfClasses:v32 fromData:v30 error:&v88];
    id v34 = v88;

    if (v34)
    {
      id v73 = v10;
      id v35 = (void *)MEMORY[0x230FBD990]();
      __int16 v36 = self;
      id v37 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        uint64_t v38 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v90 = v38;
        __int16 v91 = 2112;
        id v92 = v34;
        _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_ERROR, "%{public}@Unarchive share token due to error %@", buf, 0x16u);
      }
      id v10 = v73;
      id v12 = v77;
      __int16 v39 = (void *)v83;
      long long v40 = (void *)v33;
      uint64_t v29 = v66;
    }
    else
    {
      id v12 = v77;
      id v64 = +[HMDAccountHandle accountHandleForDestination:v77];
      long long v65 = self;
      __int16 v39 = (void *)v83;
      [(HMDHome *)v65 _handleUpdateRequestForHomeInvitation:v16 controllerPublicKey:v80 controllerUsername:v83 invitationState:3 presenceAuthStatus:v85 preferredUserID:v84 fromHandle:v64 fromAddress:v77 fromMergeID:v86 reverseShareURL:v70 reverseShareToken:v33 issuerPublicKeyER:v81 message:0 messageResponseHandler:&__block_literal_global_1610];

      long long v40 = (void *)v33;
      uint64_t v29 = v66;
    }

    id v14 = v80;
    uint64_t v15 = v81;
  }
  else
  {
    uint64_t v58 = (void *)MEMORY[0x230FBD990]();
    uint64_t v59 = self;
    char v60 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v61 = id v68 = v58;
      [(HMDHome *)v59 name];
      id v62 = v75 = v10;
      long long v63 = [(HMDHome *)v59 uuid];
      *(_DWORD *)buf = 138543874;
      long long v90 = v61;
      __int16 v91 = 2112;
      id v92 = v62;
      __int16 v93 = 2112;
      int v94 = v63;
      _os_log_impl(&dword_22F52A000, v60, OS_LOG_TYPE_ERROR, "%{public}@Share URL is missing from invite for home %@/%@", buf, 0x20u);

      uint64_t v15 = v81;
      id v10 = v75;

      uint64_t v58 = v68;
    }

    id v12 = v77;
    id v14 = v80;
    __int16 v39 = (void *)v83;
  }

LABEL_26:
}

- (id)invitationWithIDSInvitationIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self outgoingInvitations];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithValue:forKeyPath:", v4, @"idsInvitationUUID");

  return v6;
}

- (id)invitationWithInvitationIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self outgoingInvitations];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithValue:forKeyPath:", v4, @"identifier");

  return v6;
}

- (void)handleDeclineRequestForIDSInvitationWithIdentifier:(id)a3 fromAddress:(id)a4
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self invitationWithIDSInvitationIdentifier:v6];
  if (v8)
  {
    [(HMDHome *)self _handleUpdateRequestForHomeInvitation:v8 controllerPublicKey:0 controllerUsername:0 invitationState:4 presenceAuthStatus:0 preferredUserID:0 fromHandle:0 fromAddress:v7 fromMergeID:0 reverseShareURL:0 reverseShareToken:0 issuerPublicKeyER:0 message:0 messageResponseHandler:&__block_literal_global_1602];
  }
  else
  {
    id v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = self;
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v12 = HMFGetLogIdentifier();
      __int16 v13 = [v6 UUIDString];
      *(_DWORD *)buf = 138543618;
      uint64_t v15 = v12;
      __int16 v16 = 2112;
      uint64_t v17 = v13;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@Could not find matching outgoingInvitation for idsIdentifier %@ to handle decline.", buf, 0x16u);
    }
  }
}

- (void)_handleUpdateOutgoingInvitationState:(id)a3
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 uuidForKey:@"kInvitationIdentifierKey"];
  uint64_t v6 = [v4 numberForKey:@"kInvitationStateKey"];
  id v7 = (void *)v6;
  if (!v5 || !v6)
  {
    id v45 = (void *)MEMORY[0x230FBD990]();
    id v46 = self;
    id v47 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      id v48 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v66 = v48;
      _os_log_impl(&dword_22F52A000, v47, OS_LOG_TYPE_ERROR, "%{public}@Unable to accept the invitation as could not find the invite", buf, 0xCu);
    }
    id v9 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:3 userInfo:0];
    id v49 = [v4 responseHandler];
    ((void (**)(void, void *, void))v49)[2](v49, v9, 0);
LABEL_22:

    goto LABEL_23;
  }
  uint64_t v8 = [(HMDHome *)self outgoingInvitations];
  id v9 = objc_msgSend(v8, "hmf_firstObjectWithValue:forKeyPath:", v5, @"identifier");

  if (v9)
  {
    if ([v7 integerValue] == 1)
    {
      id v10 = (void *)MEMORY[0x230FBD990]();
      id v11 = self;
      id v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        __int16 v13 = HMFGetLogIdentifier();
        id v14 = [v9 identifier];
        uint64_t v15 = [v14 UUIDString];
        [MEMORY[0x263F0E3B0] homeInvitationStateDescription:1];
        __int16 v16 = v59 = v10;
        *(_DWORD *)buf = 138543874;
        uint64_t v66 = v13;
        __int16 v67 = 2112;
        id v68 = v15;
        __int16 v69 = 2112;
        uint64_t v70 = v16;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@[Home] Processing request to update invitation %@ to state %@", buf, 0x20u);

        id v10 = v59;
      }

      if (([v9 invitationState] & 0xFFFFFFFFFFFFFFFDLL) != 4)
      {
        [(HMDHome *)v11 _sendInvitationCancelationRequestToInvitee:v9];
        id v17 = objc_alloc(MEMORY[0x263F42520]);
        uint64_t v18 = [(HMDHome *)v11 workQueue];
        __int16 v19 = (void *)[v17 initWithQueue:v18];

        id v20 = [(HMDHome *)v11 homeManager];
        __int16 v21 = [v20 homeOwnerCloudShareManager];
        id v22 = [v9 user];
        uint64_t v23 = [v21 revokeAccessForUser:v22 home:v11];
        v63[0] = MEMORY[0x263EF8330];
        v63[1] = 3221225472;
        void v63[2] = __48__HMDHome__handleUpdateOutgoingInvitationState___block_invoke;
        v63[3] = &unk_264A2C678;
        v63[4] = v11;
        id v64 = v9;
        v61[0] = MEMORY[0x263EF8330];
        v61[1] = 3221225472;
        void v61[2] = __48__HMDHome__handleUpdateOutgoingInvitationState___block_invoke_1600;
        v61[3] = &unk_264A2EC50;
        v61[4] = v11;
        id v62 = v64;
        id v24 = (id)[v23 inContext:v19 then:v63 orRecover:v61];
      }
      __int16 v25 = [(HMDHome *)v11 backingStore];
      id v26 = [v4 name];
      __int16 v27 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      char v28 = [v25 transaction:v26 options:v27];

      uint64_t v29 = [v9 emptyModelObjectWithChangeType:3];
      [v28 add:v29 withMessage:v4];

      uint64_t v30 = [v9 pendingUserUUID];
      if (!v30) {
        goto LABEL_26;
      }
      __int16 v31 = (HMDUserModel *)v30;
      id v32 = [v9 user];
      if ([v32 isPending])
      {
        uint64_t v33 = [v9 pendingUserUUID];
        [v9 user];
        id v34 = v60 = v28;
        id v35 = [v34 uuid];
        int v58 = [v33 isEqual:v35];

        char v28 = v60;
        if (!v58)
        {
LABEL_26:
          [v28 run];

          goto LABEL_23;
        }
        __int16 v36 = (void *)MEMORY[0x230FBD990]();
        id v37 = v11;
        uint64_t v38 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          __int16 v39 = HMFGetLogIdentifier();
          long long v40 = [v9 user];
          *(_DWORD *)buf = 138543874;
          uint64_t v66 = v39;
          __int16 v67 = 2112;
          id v68 = v40;
          __int16 v69 = 2112;
          uint64_t v70 = v9;
          _os_log_impl(&dword_22F52A000, v38, OS_LOG_TYPE_INFO, "%{public}@Found pending user [%@] associated with this invitation [%@]. Going to delete it as well.", buf, 0x20u);
        }
        long long v41 = [HMDUserModel alloc];
        long long v42 = [v9 user];
        long long v43 = [v42 uuid];
        uint64_t v44 = [(HMDHome *)v37 uuid];
        __int16 v31 = [(HMDBackingStoreModelObject *)v41 initWithObjectChangeType:3 uuid:v43 parentUUID:v44];

        [v60 add:v31];
      }
      else
      {
      }
      goto LABEL_26;
    }
    id v49 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:43 userInfo:0];
    __int16 v57 = [v4 responseHandler];
    v57[2](v57, v49, 0);

    goto LABEL_22;
  }
  __int16 v50 = (void *)MEMORY[0x230FBD990]();
  uint64_t v51 = self;
  long long v52 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
  {
    uint64_t v53 = HMFGetLogIdentifier();
    uint64_t v54 = [v5 UUIDString];
    *(_DWORD *)buf = 138543618;
    uint64_t v66 = v53;
    __int16 v67 = 2112;
    id v68 = v54;
    _os_log_impl(&dword_22F52A000, v52, OS_LOG_TYPE_ERROR, "%{public}@Invalid invite identifier specified %@", buf, 0x16u);
  }
  char v55 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
  id v56 = [v4 responseHandler];
  ((void (**)(void, void *, void))v56)[2](v56, v55, 0);

  id v9 = 0;
LABEL_23:
}

uint64_t __48__HMDHome__handleUpdateOutgoingInvitationState___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    uint64_t v8 = [*(id *)(a1 + 40) user];
    id v9 = [v8 uuid];
    id v10 = [*(id *)(a1 + 32) name];
    id v11 = [*(id *)(a1 + 32) uuid];
    int v13 = 138544130;
    id v14 = v7;
    __int16 v15 = 2112;
    __int16 v16 = v9;
    __int16 v17 = 2112;
    uint64_t v18 = v10;
    __int16 v19 = 2112;
    id v20 = v11;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Successfully revoked cloud share for canceled invite %@ for home %@/%@", (uint8_t *)&v13, 0x2Au);
  }

  return 1;
}

uint64_t __48__HMDHome__handleUpdateOutgoingInvitationState___block_invoke_1600(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v7 = HMFGetLogIdentifier();
    uint64_t v8 = [*(id *)(a1 + 40) user];
    id v9 = [v8 uuid];
    id v10 = [*(id *)(a1 + 32) name];
    id v11 = [*(id *)(a1 + 32) uuid];
    int v13 = 138544386;
    id v14 = v7;
    __int16 v15 = 2112;
    __int16 v16 = v9;
    __int16 v17 = 2112;
    uint64_t v18 = v10;
    __int16 v19 = 2112;
    id v20 = v11;
    __int16 v21 = 2112;
    id v22 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to revoke cloud share for canceled invite %@ for home %@/%@ due to %@", (uint8_t *)&v13, 0x34u);
  }

  return 1;
}

- (BOOL)doesThisHomeHaveCameras
{
  uint64_t v2 = [(HMDHome *)self accessories];
  char v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_1598);

  return v3;
}

uint64_t __34__HMDHome_doesThisHomeHaveCameras__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  id v4 = v3;
  id v5 = v4;
  if (v4) {
    uint64_t v6 = [v4 hasCameraStreamService];
  }
  else {
    uint64_t v6 = 0;
  }

  return v6;
}

- (void)_sendInvitation:(id)a3 message:(id)a4 shareURL:(id)a5 shareToken:(id)a6 suppressHomeInviteNotification:(BOOL)a7 logEventBuilder:(id)a8
{
  v134[2] = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v96 = a6;
  id v17 = a8;
  id val = v14;
  uint64_t v18 = [v14 user];
  __int16 v19 = [v18 accountHandle];

  id v20 = [v14 identifier];
  __int16 v21 = [val endDate];
  if (a7)
  {
    unsigned int v84 = 1;
  }
  else
  {
    id v22 = [val user];
    unsigned int v84 = [v22 isPending];
  }
  objc_initWeak(&location, self);
  uint64_t v23 = [val expirationHandler];
  BOOL v24 = v23 == 0;

  if (v24)
  {
    __int16 v25 = [(HMDHome *)self workQueue];
    [val setClientQueue:v25];

    objc_initWeak((id *)from, val);
    v106[0] = MEMORY[0x263EF8330];
    v106[1] = 3221225472;
    v106[2] = __102__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification_logEventBuilder___block_invoke;
    v106[3] = &unk_264A2CBC0;
    objc_copyWeak(&v108, &location);
    objc_copyWeak(&v109, (id *)from);
    id v107 = v15;
    [val setExpirationHandler:v106];

    objc_destroyWeak(&v109);
    objc_destroyWeak(&v108);
    objc_destroyWeak((id *)from);
  }
  [v17 markSendInviteBegin];
  id v26 = [val user];
  v99[0] = MEMORY[0x263EF8330];
  v99[1] = 3221225472;
  id v100 = __102__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification_logEventBuilder___block_invoke_1587;
  id v101 = &unk_264A279B0;
  objc_copyWeak(&v105, &location);
  id v27 = v19;
  id v102 = v27;
  id v90 = v17;
  id v103 = v90;
  id v89 = v15;
  id v104 = v89;
  id v28 = v27;
  id v92 = v20;
  id v93 = v21;
  id v95 = v16;
  id v94 = v96;
  id v97 = v26;
  __int16 v91 = v99;
  if (self)
  {
    uint64_t v29 = (void *)MEMORY[0x230FBD990]();
    uint64_t v30 = self;
    __int16 v31 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      id v32 = HMFGetLogIdentifier();
      *(_DWORD *)frouint64_t m = 138543874;
      *(void *)&from[4] = v32;
      *(_WORD *)&from[12] = 2112;
      *(void *)&from[14] = v28;
      *(_WORD *)&from[22] = 2112;
      id v123 = v97;
      _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_INFO, "%{public}@Sending invite to: %@ for user: %@", from, 0x20u);
    }
    uint64_t v33 = +[HMDAppleAccountManager sharedManager];
    id v34 = [v33 account];
    id v35 = [v34 handles];
    int v36 = [v35 containsObject:v28];

    if (v36)
    {
      id v37 = (void *)MEMORY[0x230FBD990]();
      uint64_t v38 = v30;
      __int16 v39 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        long long v40 = HMFGetLogIdentifier();
        *(_DWORD *)frouint64_t m = 138543618;
        *(void *)&from[4] = v40;
        *(_WORD *)&from[12] = 2112;
        *(void *)&from[14] = v28;
        _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@Attempt to add local user: %@", from, 0x16u);
      }
      long long v41 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:3 userInfo:0];
      v100((uint64_t)v91, v41);
    }
    else
    {
      long long v42 = [(HMDHome *)v30 keychainStore];
      long long v41 = [v42 getPreferredHH2ControllerKey];

      if (v41)
      {
        if (!v95 || !v94)
        {
          _HMFPreconditionFailure();
          __break(1u);
        }
        id v120 = 0;
        uint64_t v83 = [MEMORY[0x263F08910] archivedDataWithRootObject:v94 requiringSecureCoding:1 error:&v120];
        id v86 = v120;
        if (v86)
        {
          long long v43 = (void *)MEMORY[0x230FBD990]();
          uint64_t v44 = v30;
          id v45 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            id v46 = HMFGetLogIdentifier();
            *(_DWORD *)frouint64_t m = 138543618;
            *(void *)&from[4] = v46;
            *(_WORD *)&from[12] = 2112;
            *(void *)&from[14] = v94;
            _os_log_impl(&dword_22F52A000, v45, OS_LOG_TYPE_ERROR, "%{public}@Failed to encode share token %@", from, 0x16u);
          }
          v100((uint64_t)v91, v86);
        }
        else
        {
          v133[0] = @"kHomedVersionKey";
          id v55 = (id)homedVersion;
          v133[1] = @"kHomedSupportedFeaturesKey";
          v134[0] = v55;
          v134[1] = &unk_26E473E28;
          id v77 = [NSDictionary dictionaryWithObjects:v134 forKeys:v133 count:2];

          id v56 = [v97 restrictedGuestAccessSettings];
          __int16 v57 = [v56 schedule];

          if (v57)
          {
            int v58 = [v97 restrictedGuestAccessSettings];
            uint64_t v59 = [v58 schedule];
            uint64_t v75 = [v59 dictionaryRepresentation];
          }
          else
          {
            uint64_t v75 = MEMORY[0x263EFFA78];
          }
          v121[0] = @"kHomeName";
          uint64_t v82 = [(HMDHome *)v30 name];
          *(void *)frouint64_t m = v82;
          v121[1] = @"kHomeUUID";
          char v60 = [(HMDHome *)v30 uuid];
          id v81 = [v60 UUIDString];
          *(void *)&from[8] = v81;
          *(void *)&from[16] = v93;
          v121[2] = @"kInvitationExpiryDateKey";
          v121[3] = @"kControllerPublicKey";
          id v80 = [v41 publicKey];
          __int16 v79 = [v80 data];
          id v123 = v79;
          v121[4] = @"kControllerPairingNameKey";
          id v78 = [v41 identifier];
          long long v124 = v78;
          void v121[5] = @"kInvitationIdentifierKey";
          uint64_t v61 = [v92 UUIDString];
          dispatch_group_t v125 = v61;
          id v126 = v77;
          v121[6] = @"kRequestedCapabilitiesKey";
          v121[7] = @"HMDHomeInvitationShareURLKey";
          id v62 = [v95 absoluteString];
          id v127 = v62;
          id v128 = v83;
          v121[8] = @"HMDHomeInvitationShareTokenKey";
          v121[9] = @"HMDHomeSuppressInviteNotificationKey";
          long long v63 = [NSNumber numberWithBool:v84];
          id v129 = v63;
          v121[10] = *MEMORY[0x263F0C928];
          id v64 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v97, "privilege"));
          id v130 = v64;
          v121[11] = *MEMORY[0x263F0CFB8];
          long long v65 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHome doesThisHomeHaveCameras](v30, "doesThisHomeHaveCameras"));
          v121[12] = *MEMORY[0x263F0D560];
          id v131 = v65;
          id v132 = v76;
          id v88 = [NSDictionary dictionaryWithObjects:from forKeys:v121 count:13];

          uint64_t v66 = [HMDRemoteAccountMessageDestination alloc];
          __int16 v67 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:@"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"];
          id v68 = [(HMDRemoteAccountMessageDestination *)v66 initWithTarget:v67 handle:v28 multicast:1];

          id v85 = [MEMORY[0x263F42590] messageWithName:@"kAccessHomeInviteRequestKey" destination:v68 payload:v88];
          objc_initWeak(&v119, v30);
          v116[0] = MEMORY[0x263EF8330];
          v116[1] = 3221225472;
          v116[2] = __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke;
          v116[3] = &unk_264A2D420;
          objc_copyWeak(&v118, &v119);
          id v69 = v28;
          id v117 = v69;
          [v85 setResponseHandler:v116];
          uint64_t v70 = [(HMDHome *)v30 homeManager];
          uint64_t v71 = [v70 idsInvitationManager];
          id v72 = [(HMDRemoteAccountMessageDestination *)v68 remoteDestinationString];
          uint64_t v73 = [v97 isRestrictedGuest];
          v111[0] = MEMORY[0x263EF8330];
          v111[1] = 3221225472;
          v111[2] = __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke_1595;
          v111[3] = &unk_264A16AE0;
          objc_copyWeak(&v115, &v119);
          id v74 = v92;
          id v112 = v74;
          id v113 = v69;
          id v114 = v91;
          [v71 sendInvitationToDestination:v72 expirationDate:v93 dictionary:v88 homeInvitationID:v74 isRestrictedGuestInvitation:v73 completionBlock:v111];

          objc_destroyWeak(&v115);
          objc_destroyWeak(&v118);
          objc_destroyWeak(&v119);
        }
      }
      else
      {
        id v47 = (void *)MEMORY[0x230FBD990]();
        id v48 = v30;
        id v49 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_FAULT))
        {
          __int16 v50 = HMFGetLogIdentifier();
          *(_DWORD *)frouint64_t m = 138543362;
          *(void *)&from[4] = v50;
          _os_log_impl(&dword_22F52A000, v49, OS_LOG_TYPE_FAULT, "%{public}@We are doomed. Could not find owner's HH2 Key and we are in HH2. Cannot send the invite.", from, 0xCu);
        }
        uint64_t v51 = (void *)MEMORY[0x230FBD990]();
        long long v52 = v48;
        uint64_t v53 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          uint64_t v54 = HMFGetLogIdentifier();
          *(_DWORD *)frouint64_t m = 138543362;
          *(void *)&from[4] = v54;
          _os_log_impl(&dword_22F52A000, v53, OS_LOG_TYPE_ERROR, "%{public}@We are doomed. Could not find owner's HH2 Key and we are in HH2. Cannot send the invite.", from, 0xCu);
        }
        uint64_t v87 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2723];
        v100((uint64_t)v91, v87);
      }
    }
  }
  objc_destroyWeak(&v105);
  objc_destroyWeak(&location);
}

void __102__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification_logEventBuilder___block_invoke(id *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  id v3 = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = WeakRetained;
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      uint64_t v8 = [v3 identifier];
      int v10 = 138543618;
      id v11 = v7;
      __int16 v12 = 2112;
      int v13 = v8;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Expiring invitation %@", (uint8_t *)&v10, 0x16u);
    }
    objc_msgSend(v3, "updateInvitationState:", objc_msgSend(v3, "invitationState"));
    id v9 = [a1[4] name];
    [v5 saveWithReason:v9 postSyncNotification:0];
  }
}

void __102__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification_logEventBuilder___block_invoke_1587(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = WeakRetained;
  id v7 = HMFGetOSLogHandle();
  uint64_t v8 = v7;
  if (v3)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      uint64_t v10 = *(void *)(a1 + 32);
      int v17 = 138543874;
      uint64_t v18 = v9;
      __int16 v19 = 2112;
      uint64_t v20 = v10;
      __int16 v21 = 2112;
      id v22 = v3;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to send invite to user, %@, with error: %@", (uint8_t *)&v17, 0x20u);
    }
    id v11 = *(void **)(a1 + 40);
    __int16 v12 = [MEMORY[0x263F087E8] hmInternalErrorWithCode:3503 underlyingError:v3];
    [v11 markError:v12];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v13 = HMFGetLogIdentifier();
      uint64_t v14 = *(void *)(a1 + 32);
      int v17 = 138543618;
      uint64_t v18 = v13;
      __int16 v19 = 2112;
      uint64_t v20 = v14;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Successfully sent invite to user: %@", (uint8_t *)&v17, 0x16u);
    }
    [*(id *)(a1 + 40) markSendInviteEnd];
  }
  id v15 = [*(id *)(a1 + 48) responseHandler];

  if (v15)
  {
    id v16 = [*(id *)(a1 + 48) responseHandler];
    ((void (**)(void, id, void))v16)[2](v16, v3, 0);
  }
}

void __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5 && [v5 code] != 8)
  {
    uint64_t v8 = (void *)MEMORY[0x230FBD990]();
    id v17 = WeakRetained;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = HMFGetLogIdentifier();
      uint64_t v18 = *(void *)(a1 + 32);
      int v19 = 138543874;
      uint64_t v20 = v11;
      __int16 v21 = 2112;
      uint64_t v22 = v18;
      __int16 v23 = 2112;
      id v24 = v5;
      int v13 = "%{public}@Failed to send invitation request to user, %@, due to error: %@";
      uint64_t v14 = v10;
      os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
      uint32_t v16 = 32;
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = WeakRetained;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      uint64_t v12 = *(void *)(a1 + 32);
      int v19 = 138543618;
      uint64_t v20 = v11;
      __int16 v21 = 2112;
      uint64_t v22 = v12;
      int v13 = "%{public}@Successfully sent invitation to: %@";
      uint64_t v14 = v10;
      os_log_type_t v15 = OS_LOG_TYPE_INFO;
      uint32_t v16 = 22;
LABEL_7:
      _os_log_impl(&dword_22F52A000, v14, v15, v13, (uint8_t *)&v19, v16);
    }
  }
}

void __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke_1595(id *a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v10 = [WeakRetained workQueue];
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke_2;
    void v11[3] = &unk_264A2DF78;
    void v11[4] = v9;
    id v12 = a1[4];
    id v13 = v7;
    id v14 = a1[5];
    id v15 = v6;
    id v16 = a1[6];
    dispatch_async(v10, v11);
  }
}

void __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) outgoingInvitations];
  id v3 = objc_msgSend(v2, "hmf_firstObjectWithValue:forKeyPath:", *(void *)(a1 + 40), @"identifier");

  if (*(void *)(a1 + 48))
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
LABEL_5:

      goto LABEL_10;
    }
    id v7 = HMFGetLogIdentifier();
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    int v28 = 138543874;
    uint64_t v29 = v7;
    __int16 v30 = 2112;
    uint64_t v31 = v8;
    __int16 v32 = 2112;
    uint64_t v33 = v9;
    uint64_t v10 = "%{public}@Failed to send ids invitation request to user, %@, due to error: %@";
    id v11 = v6;
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
LABEL_4:
    _os_log_impl(&dword_22F52A000, v11, v12, v10, (uint8_t *)&v28, 0x20u);

    goto LABEL_5;
  }
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  BOOL v13 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (!v3)
  {
    if (!v13) {
      goto LABEL_5;
    }
    id v7 = HMFGetLogIdentifier();
    uint64_t v26 = *(void *)(a1 + 40);
    uint64_t v27 = *(void *)(a1 + 56);
    int v28 = 138543874;
    uint64_t v29 = v7;
    __int16 v30 = 2112;
    uint64_t v31 = v26;
    __int16 v32 = 2112;
    uint64_t v33 = v27;
    uint64_t v10 = "%{public}@Outgoing invite %@ has been removed while sending it %@";
    id v11 = v6;
    os_log_type_t v12 = OS_LOG_TYPE_INFO;
    goto LABEL_4;
  }
  if (v13)
  {
    id v14 = HMFGetLogIdentifier();
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 64);
    int v28 = 138543874;
    uint64_t v29 = v14;
    __int16 v30 = 2112;
    uint64_t v31 = v15;
    __int16 v32 = 2112;
    uint64_t v33 = v16;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Successfully sent invitation to: %@, updating home invitation with IDS invite uuid %@", (uint8_t *)&v28, 0x20u);
  }
  id v17 = [*(id *)(a1 + 32) backingStore];
  uint64_t v18 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  int v19 = [v17 transaction:@"kUpdateInvitationStateRequestKey" options:v18];

  uint64_t v20 = [HMDOutgoingHomeInvitationModel alloc];
  __int16 v21 = [v3 identifier];
  uint64_t v22 = [*(id *)(a1 + 32) uuid];
  __int16 v23 = [(HMDBackingStoreModelObject *)v20 initWithObjectChangeType:2 uuid:v21 parentUUID:v22];

  [(HMDOutgoingHomeInvitationModel *)v23 setIdsInvitationUUID:*(void *)(a1 + 64)];
  id v24 = [MEMORY[0x263EFF910] now];
  [(HMDOutgoingHomeInvitationModel *)v23 setDateSent:v24];

  [v19 add:v23];
  [v19 run];

LABEL_10:
  uint64_t v25 = *(void *)(a1 + 72);
  if (v25) {
    (*(void (**)(uint64_t, void))(v25 + 16))(v25, *(void *)(a1 + 48));
  }
}

- (void)_addOutgoingInvitations:(id)a3 message:(id)a4 transactionCompleted:(id)a5
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v29 = a5;
  uint64_t v10 = [(HMDHome *)self backingStore];
  __int16 v32 = v9;
  id v11 = [v9 name];
  os_log_type_t v12 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  BOOL v13 = [v10 transaction:v11 options:v12];

  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  obuint64_t j = v8;
  uint64_t v33 = [obj countByEnumeratingWithState:&v34 objects:v44 count:16];
  if (v33)
  {
    uint64_t v31 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v33; ++i)
      {
        if (*(void *)v35 != v31) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        [v15 setHome:self];
        uint64_t v16 = [v15 modelObjectWithChangeType:1 version:4];
        [v13 add:v16 withMessage:v32];
        id v17 = [v15 user];
        uint64_t v18 = [v17 userID];

        int v19 = [(HMDHome *)self pendingUsers];
        uint64_t v20 = objc_msgSend(v19, "hmf_firstObjectWithValue:forKeyPath:", v18, @"userID");

        if (v20)
        {
          __int16 v21 = (void *)MEMORY[0x230FBD990]();
          uint64_t v22 = self;
          __int16 v23 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            id v24 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543874;
            __int16 v39 = v24;
            __int16 v40 = 2112;
            long long v41 = v20;
            __int16 v42 = 2112;
            long long v43 = v18;
            _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Found stale pending user instance %@ that we need to remove since the owner is manually re-inviting %@", buf, 0x20u);
          }
          uint64_t v25 = [HMDUserModel alloc];
          uint64_t v26 = [v20 uuid];
          uint64_t v27 = [(HMDHome *)v22 uuid];
          int v28 = [(HMDBackingStoreModelObject *)v25 initWithObjectChangeType:3 uuid:v26 parentUUID:v27];

          [v13 add:v28];
        }
      }
      uint64_t v33 = [obj countByEnumeratingWithState:&v34 objects:v44 count:16];
    }
    while (v33);
  }

  [(HMDHome *)self _saveOutgoingInvitationsWithRestrictedGuestSettings:obj inTransaction:v13 message:v32 transactionCompleted:v29];
}

- (id)_outgoingInvitationForUserWithHandle:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v5 = [(HMDHome *)self outgoingInvitations];
  id v6 = (id)[v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        uint64_t v10 = [v9 user];
        id v11 = [v10 accountHandle];
        char v12 = [v11 isEqual:v4];

        if (v12)
        {
          id v6 = v9;
          goto LABEL_11;
        }
      }
      id v6 = (id)[v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v6;
}

- (void)_processOutgoingInvitationsRequest:(id)a3
{
  void v36[2] = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 dataForKey:@"HM.invitations"];
  if (v5)
  {
    id v6 = (void *)MEMORY[0x263F08928];
    uint64_t v7 = (void *)MEMORY[0x263EFFA08];
    v36[0] = objc_opt_class();
    v36[1] = objc_opt_class();
    id v8 = [MEMORY[0x263EFF8C0] arrayWithObjects:v36 count:2];
    id v9 = [v7 setWithArray:v8];
    id v30 = 0;
    uint64_t v10 = [v6 unarchivedObjectOfClasses:v9 fromData:v5 error:&v30];
    id v11 = v30;

    if (v10)
    {
      char v12 = [v4 BOOLForKey:@"HMDHomeSuppressInviteNotificationKey"];
      objc_initWeak((id *)location, self);
      v26[0] = MEMORY[0x263EF8330];
      v26[1] = 3221225472;
      void v26[2] = __46__HMDHome__processOutgoingInvitationsRequest___block_invoke;
      v26[3] = &unk_264A19B58;
      objc_copyWeak(&v28, (id *)location);
      id v27 = v10;
      char v29 = v12;
      [(HMDHome *)self _addOutgoingInvitations:v27 message:v4 transactionCompleted:v26];

      objc_destroyWeak(&v28);
      objc_destroyWeak((id *)location);
    }
    else
    {
      uint64_t v19 = (void *)MEMORY[0x230FBD990]();
      uint64_t v20 = self;
      __int16 v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        uint64_t v22 = HMFGetLogIdentifier();
        __int16 v23 = [v4 identifier];
        id v24 = [v23 UUIDString];
        *(_DWORD *)id location = 138543874;
        *(void *)&id location[4] = v22;
        __int16 v32 = 2112;
        uint64_t v33 = v24;
        __int16 v34 = 2112;
        id v35 = v11;
        _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Failed to unarchive outgoing home invitations from serialized outgoing home invitation data: %@: %@", location, 0x20u);
      }
      uint64_t v25 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
      [v4 respondWithError:v25];
    }
  }
  else
  {
    BOOL v13 = (void *)MEMORY[0x230FBD990]();
    long long v14 = self;
    long long v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      long long v16 = HMFGetLogIdentifier();
      long long v17 = [v4 identifier];
      uint64_t v18 = [v17 UUIDString];
      *(_DWORD *)id location = 138543618;
      *(void *)&id location[4] = v16;
      __int16 v32 = 2112;
      uint64_t v33 = v18;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Unable to find outgoing invitations to add for message: %@", location, 0x16u);
    }
    id v11 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
    [v4 respondWithError:v11];
  }
}

void __46__HMDHome__processOutgoingInvitationsRequest___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [WeakRetained workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __46__HMDHome__processOutgoingInvitationsRequest___block_invoke_2;
  block[3] = &unk_264A2DFC8;
  void block[4] = WeakRetained;
  id v5 = *(id *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 48);
  dispatch_async(v3, block);
}

uint64_t __46__HMDHome__processOutgoingInvitationsRequest___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _grantAccessAndSendOutgoingInvitation:*(void *)(a1 + 40) suppressHomeInviteNotification:*(unsigned __int8 *)(a1 + 48)];
}

- (void)_handleOutgoingInvitations:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self residentSyncManager];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __38__HMDHome__handleOutgoingInvitations___block_invoke;
  v6[3] = &unk_264A2F558;
  void v6[4] = self;
  [v5 interceptRemoteResidentRequest:v4 proceed:v6];
}

uint64_t __38__HMDHome__handleOutgoingInvitations___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _processOutgoingInvitationsRequest:a2];
}

- (void)handleCATUpdate
{
  id v3 = [(HMDHome *)self fabric];
  id v9 = [v3 fabricID];

  id v4 = +[HMDHomeLocalOperationalCertificateDataStore localOperationalCertDataStore];
  [v4 removeOperationalCertDataForFabricID:v9];

  id v5 = [(HMDHome *)self homeManager];
  char v6 = [v5 accessoryBrowser];
  uint64_t v7 = [v6 chipAccessoryServerBrowser];
  id v8 = [(HMDHome *)self fabric];
  [v7 updateAccessoryACLAndGetNOCFromResidentForSharedUserForFabric:v8];
}

- (void)setOverriddenHomeAccessControl:(id)a3
{
  id v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  overriddenHomeAccessControl = self->_overriddenHomeAccessControl;
  self->_overriddenHomeAccessControl = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSNumber)overriddenHomeAccessControl
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_overriddenHomeAccessControl;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)handleCurrentUserPrivilegeChanged:(id)a3
{
  id v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __45__HMDHome_handleCurrentUserPrivilegeChanged___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __45__HMDHome_handleCurrentUserPrivilegeChanged___block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (isFeatureMatterLocalFabricConfigEnabled())
  {
    id v2 = (void *)MEMORY[0x230FBD990]();
    id v3 = *(id *)(a1 + 32);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = HMFGetLogIdentifier();
      char v6 = [*(id *)(a1 + 32) currentUser];
      unint64_t v7 = [v6 privilege];
      if (v7 > 5) {
        id v8 = @"None";
      }
      else {
        id v8 = off_264A29920[v7];
      }
      id v9 = v8;
      uint64_t v10 = [*(id *)(a1 + 32) fabric];
      id v11 = [v10 accessControl];
      [v11 currentUserPrivilege];
      char v12 = HMMTRUserPrivilegeAsString();
      int v22 = 138543874;
      __int16 v23 = v5;
      __int16 v24 = 2112;
      uint64_t v25 = v9;
      __int16 v26 = 2112;
      id v27 = v12;
      _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Updating Fabric user privilege to %@ from priv %@", (uint8_t *)&v22, 0x20u);
    }
    BOOL v13 = [*(id *)(a1 + 32) currentUser];
    unint64_t v14 = +[HMDUser hmmtrUserPrivilegeFromHMDUserPrivilege:](HMDUser, "hmmtrUserPrivilegeFromHMDUserPrivilege:", [v13 privilege]);
    long long v15 = [*(id *)(a1 + 32) fabric];
    long long v16 = [v15 accessControl];
    [v16 setCurrentUserPrivilege:v14];
  }
  long long v17 = (void *)MEMORY[0x230FBD990]([*(id *)(a1 + 32) _evaluateNetworkProtectionAndRouterManagement]);
  id v18 = *(id *)(a1 + 32);
  uint64_t v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    uint64_t v20 = HMFGetLogIdentifier();
    int v22 = 138543362;
    __int16 v23 = v20;
    _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Configuring HMDUserActivityStateDetectorManager - handleCurrentUserPrivilegeChanged", (uint8_t *)&v22, 0xCu);
  }
  return [*(id *)(a1 + 32) configureUserActivityStateDetectorManager];
}

- (BOOL)_shouldResendOutgoingInvitation:(id)a3
{
  id v4 = a3;
  if ([v4 invitationState] == 2) {
    BOOL v5 = ![(HMDHome *)self _justSentInvitation:v4];
  }
  else {
    LOBYTE(v5) = 0;
  }

  return v5;
}

- (BOOL)_justSentInvitation:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = [v4 dateSent];
  if (v5)
  {
    char v6 = [v4 dateSent];
    [v6 timeIntervalSinceNow];
    double v8 = fabs(v7);
    BOOL v9 = vabdd_f64(300.0, v8) >= 2.22044605e-16 && v8 < 300.0;
  }
  else
  {
    BOOL v9 = 0;
  }

  uint64_t v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = self;
  char v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    BOOL v13 = HMFGetLogIdentifier();
    unint64_t v14 = HMFBooleanToString();
    int v16 = 138543874;
    long long v17 = v13;
    __int16 v18 = 2112;
    id v19 = v4;
    __int16 v20 = 2112;
    __int16 v21 = v14;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Invitation %@ was just sent: %@", (uint8_t *)&v16, 0x20u);
  }

  return v9;
}

- (id)outgoingInvitationToResendForUser:(id)a3
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = (void *)MEMORY[0x230FBD990]();
  char v6 = self;
  double v7 = HMFGetOSLogHandle();
  __int16 v24 = v6;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    double v8 = HMFGetLogIdentifier();
    BOOL v9 = [(HMDHome *)v6 outgoingInvitations];
    *(_DWORD *)buf = 138543618;
    uint64_t v31 = v8;
    __int16 v32 = 2048;
    uint64_t v33 = [v9 count];
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@There are %lu outgoing invitations", buf, 0x16u);

    char v6 = v24;
  }

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  obuint64_t j = [(HMDHome *)v6 outgoingInvitations];
  uint64_t v10 = [obj countByEnumeratingWithState:&v26 objects:v36 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v27 != v12) {
          objc_enumerationMutation(obj);
        }
        unint64_t v14 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        long long v15 = (void *)MEMORY[0x230FBD990]();
        int v16 = v6;
        long long v17 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          __int16 v18 = HMFGetLogIdentifier();
          id v19 = [v14 user];
          *(_DWORD *)buf = 138543874;
          uint64_t v31 = v18;
          __int16 v32 = 2112;
          uint64_t v33 = (uint64_t)v19;
          __int16 v34 = 2112;
          id v35 = v4;
          _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_DEBUG, "%{public}@Inspecting outgoing invite to user %@ to see if it matches %@", buf, 0x20u);

          char v6 = v24;
        }

        __int16 v20 = [v14 user];
        if ([v20 isAccountEqualWithUser:v4])
        {
          BOOL v21 = [(HMDHome *)v16 _shouldResendOutgoingInvitation:v14];

          if (v21)
          {
            id v22 = v14;
            goto LABEL_17;
          }
        }
        else
        {
        }
      }
      uint64_t v11 = [obj countByEnumeratingWithState:&v26 objects:v36 count:16];
    }
    while (v11);
  }
  id v22 = 0;
LABEL_17:

  return v22;
}

- (BOOL)containsRemovedUser:(id)a3
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = [(HMDHome *)self removedUsers];
  char v6 = (void *)[v5 copy];

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v7 = v6;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v7);
        }
        if (objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "isEqualToUser:", v4, (void)v12))
        {
          LOBYTE(v8) = 1;
          goto LABEL_11;
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v8;
}

- (void)_refreshUserDisplayNames
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  id v3 = [MEMORY[0x263EFF9C0] set];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v33 = self;
  id v4 = [(HMDHome *)self outgoingInvitations];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v38 objects:v47 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v39;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v39 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        if ([v9 refreshDisplayName])
        {
          if (isInternalBuild())
          {
            uint64_t v10 = NSString;
            uint64_t v11 = [v9 uuid];
            long long v12 = [v10 stringWithFormat:@"OutgoingInviteDisplayNameUpdate_%@", v11];
            [v3 addObject:v12];
          }
          else
          {
            [v3 addObject:@"OutgoingInviteDisplayNameUpdate"];
          }
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v38 objects:v47 count:16];
    }
    while (v6);
  }

  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v13 = [(HMDHome *)v33 users];
  uint64_t v14 = [v13 countByEnumeratingWithState:&v34 objects:v46 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v35;
    do
    {
      for (uint64_t j = 0; j != v15; ++j)
      {
        if (*(void *)v35 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = *(id *)(*((void *)&v34 + 1) + 8 * j);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v19 = v18;
        }
        else {
          id v19 = 0;
        }
        id v20 = v19;

        if (!v20 && [v18 refreshDisplayName])
        {
          if (isInternalBuild())
          {
            BOOL v21 = NSString;
            id v22 = [v18 uuid];
            __int16 v23 = [v21 stringWithFormat:@"UserDisplayNameUpdate_%@", v22];
            [v3 addObject:v23];
          }
          else
          {
            [v3 addObject:@"UserDisplayNameUpdate"];
          }
        }
      }
      uint64_t v15 = [v13 countByEnumeratingWithState:&v34 objects:v46 count:16];
    }
    while (v15);
  }

  if ([v3 count])
  {
    __int16 v24 = (void *)MEMORY[0x230FBD990]();
    uint64_t v25 = v33;
    long long v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      long long v27 = HMFGetLogIdentifier();
      long long v28 = [v3 allObjects];
      long long v29 = [v28 componentsJoinedByString:@", "];
      *(_DWORD *)buf = 138543618;
      long long v43 = v27;
      __int16 v44 = 2112;
      uint64_t v45 = v29;
      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@User display names updated: %@", buf, 0x16u);
    }
    [(HMDHome *)v25 saveToCurrentAccountWithReason:@"userDisplayNameUpdated"];
    id v30 = [(HMDHome *)v25 home];
    uint64_t v31 = [v30 homeManager];
    __int16 v32 = [(HMDHome *)v25 uuid];
    [v31 updateGenerationCounterWithReason:@"userDisplayNameUpdated" sourceUUID:v32 shouldNotifyClients:1];
  }
}

- (void)refreshUserDisplayNames
{
  id v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __34__HMDHome_refreshUserDisplayNames__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __34__HMDHome_refreshUserDisplayNames__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _refreshUserDisplayNames];
}

- (void)_addUserToContainer:(id)a3
{
  v9[1] = *MEMORY[0x263EF8340];
  id v4 = a3;
  [(HMDHome *)self addUser:v4];
  uint64_t v5 = [(HMDHome *)self presenceMonitor];
  [v5 addNewUser:v4];

  uint64_t v6 = [(HMDHome *)self notificationCenter];
  uint64_t v8 = @"HMDUserNotificationKey";
  v9[0] = v4;
  uint64_t v7 = [NSDictionary dictionaryWithObjects:v9 forKeys:&v8 count:1];

  [v6 postNotificationName:@"HMDHomeUserAddedNotification" object:self userInfo:v7];
  [(HMDHome *)self updateCATIDForUsersIfNeeded:0];
}

- (void)_removeUserFromContainer:(id)a3
{
  v9[1] = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self presenceMonitor];
  [v5 removeUser:v4];

  [v4 removeCloudData];
  [(HMDHome *)self _removeUser:v4];
  [v4 unconfigure];
  uint64_t v6 = [(HMDHome *)self notificationCenter];
  uint64_t v8 = @"HMDUserNotificationKey";
  v9[0] = v4;
  uint64_t v7 = [NSDictionary dictionaryWithObjects:v9 forKeys:&v8 count:1];

  [v6 postNotificationName:@"HMDHomeUserRemovedNotification" object:self userInfo:v7];
}

- (id)findAdditionalUUIDsForUser:(id)a3
{
  id v4 = a3;
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x3032000000;
  uint64_t v17 = __Block_byref_object_copy__14257;
  id v18 = __Block_byref_object_dispose__14258;
  id v19 = 0;
  uint64_t v5 = [(HMDHome *)self backingStore];
  uint64_t v6 = [v5 context];
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  void v10[2] = __38__HMDHome_findAdditionalUUIDsForUser___block_invoke;
  v10[3] = &unk_264A2F698;
  id v7 = v4;
  id v11 = v7;
  long long v12 = self;
  long long v13 = &v14;
  [v6 unsafeSynchronousBlock:v10];

  id v8 = (id)v15[5];
  _Block_object_dispose(&v14, 8);

  return v8;
}

void __38__HMDHome_findAdditionalUUIDsForUser___block_invoke(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) uuid];
  id v3 = +[HMCContext findUserWithModelID:v2];

  if (v3)
  {
    id v4 = [v3 additionalModelsForSameUser];
    uint64_t v5 = v4;
    if (v4)
    {
      if ([v4 count])
      {
        uint64_t v6 = objc_msgSend(MEMORY[0x263EFF9C0], "setWithCapacity:", objc_msgSend(v5, "count"));
        v23[0] = MEMORY[0x263EF8330];
        v23[1] = 3221225472;
        v23[2] = __38__HMDHome_findAdditionalUUIDsForUser___block_invoke_1570;
        v23[3] = &unk_264A16AB8;
        id v24 = v6;
        id v7 = v6;
        objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v23);
        uint64_t v8 = [v7 copy];
        uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
        uint64_t v10 = *(void **)(v9 + 40);
        *(void *)(v9 + 40) = v8;
      }
      else
      {
        uint64_t v20 = [MEMORY[0x263EFFA08] set];
        uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8);
        id v22 = *(void **)(v21 + 40);
        *(void *)(v21 + 40) = v20;
      }
    }
    else
    {
      uint64_t v16 = (void *)MEMORY[0x230FBD990]();
      id v17 = *(id *)(a1 + 40);
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        id v19 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v26 = v19;
        __int16 v27 = 2112;
        long long v28 = v3;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to find potential additional users with model: %@", buf, 0x16u);
      }
    }
  }
  else
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = *(id *)(a1 + 40);
    long long v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      uint64_t v15 = [*(id *)(a1 + 32) uuid];
      *(_DWORD *)buf = 138543618;
      long long v26 = v14;
      __int16 v27 = 2112;
      long long v28 = v15;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to find user model with modelID %@", buf, 0x16u);
    }
  }
}

void __38__HMDHome_findAdditionalUUIDsForUser___block_invoke_1570(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 modelID];
  [v2 addObject:v3];
}

- (void)_removeUser:(id)a3 message:(id)a4
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  if (shouldLogPrivateInformation())
  {
    uint64_t v8 = [v6 userID];
  }
  else
  {
    uint64_t v8 = @"...";
    uint64_t v9 = @"...";
  }
  uint64_t v10 = [v6 pairingIdentity];

  if (v10)
  {
    id v11 = [(HMDHome *)self homeManager];
    if ((_os_feature_enabled_impl() & 1) != 0
      || CFPreferencesGetAppBooleanValue(@"MatterTTU", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0)|| _os_feature_enabled_impl())
    {
      id v12 = [(HMDHome *)self removeUserFromMatterAccessories:v6];
    }
    if (isFeatureMatterLocalFabricConfigEnabled()
      && (![v6 privilege] || objc_msgSend(v6, "privilege") == 4))
    {
      v27[0] = MEMORY[0x263EF8330];
      v27[1] = 3221225472;
      void v27[2] = __31__HMDHome__removeUser_message___block_invoke;
      void v27[3] = &unk_264A29CF8;
      void v27[4] = self;
      [(HMDHome *)self incrementOperatePrivilegeCATVersion:v27];
    }
    long long v13 = [v11 backingStore];
    uint64_t v14 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v15 = [v13 transaction:@"kUserManagementOperationAddedKey" options:v14];

    uint64_t v16 = (uint64_t)dispatch_group_create();
    id v17 = [(HMDHome *)self workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __31__HMDHome__removeUser_message___block_invoke_2;
    block[3] = &unk_264A2E610;
    void block[4] = self;
    id v24 = v15;
    id v25 = v6;
    id v26 = v7;
    id v18 = v15;
    dispatch_group_notify((dispatch_group_t)v16, v17, block);

    goto LABEL_18;
  }
  id v19 = (void *)MEMORY[0x230FBD990]();
  uint64_t v20 = self;
  uint64_t v21 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    id v22 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v29 = v22;
    __int16 v30 = 2112;
    uint64_t v31 = v8;
    _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve user with name: %@", buf, 0x16u);
  }
  if (v7)
  {
    id v11 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:3 userInfo:0];
    uint64_t v16 = [v7 responseHandler];
    (*(void (**)(uint64_t, void *, void))(v16 + 16))(v16, v11, 0);
LABEL_18:
  }
}

uint64_t __31__HMDHome__removeUser_message___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) updateUserCATWithOperatePrivilege:a2 administerPrivilege:0];
}

void __31__HMDHome__removeUser_message___block_invoke_2(uint64_t a1)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v2 = *(void **)(a1 + 40);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __31__HMDHome__removeUser_message___block_invoke_3;
  v3[3] = &unk_264A2B420;
  objc_copyWeak(&v6, &location);
  id v4 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  [v2 run:v3];

  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
}

void __31__HMDHome__removeUser_message___block_invoke_3(id *a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v30 = v3;
    id v6 = [WeakRetained backingStore];
    id v7 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v8 = [v6 transaction:@"kRemoveUserRequestKey" options:v7];

    uint64_t v9 = objc_msgSend(v5, "__modelObjectsForRemovingOutgoingInvitationForUser:", a1[4]);
    [v8 addObjects:v9];

    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    long long v38 = 0u;
    uint64_t v10 = [v5 triggers];
    uint64_t v11 = [v10 countByEnumeratingWithState:&v38 objects:v42 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v39 != v13) {
            objc_enumerationMutation(v10);
          }
          id v15 = *(id *)(*((void *)&v38 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          id v17 = v16;

          [v17 handleRemovalOfUser:a1[4] transaction:v8];
        }
        uint64_t v12 = [v10 countByEnumeratingWithState:&v38 objects:v42 count:16];
      }
      while (v12);
    }

    id v18 = objc_alloc(MEMORY[0x263F42520]);
    id v19 = [v5 workQueue];
    uint64_t v20 = (void *)[v18 initWithQueue:v19];

    uint64_t v21 = [v5 homeManager];
    id v22 = [v21 homeOwnerCloudShareManager];
    __int16 v23 = [v22 revokeAccessForUser:a1[4] home:v5];
    v34[0] = MEMORY[0x263EF8330];
    v34[1] = 3221225472;
    v34[2] = __31__HMDHome__removeUser_message___block_invoke_1565;
    v34[3] = &unk_264A16640;
    void v34[4] = v5;
    id v35 = a1[4];
    id v36 = v8;
    id v37 = a1[5];
    v31[0] = MEMORY[0x263EF8330];
    v31[1] = 3221225472;
    void v31[2] = __31__HMDHome__removeUser_message___block_invoke_1569;
    void v31[3] = &unk_264A2BBB8;
    v31[4] = v5;
    id v32 = a1[4];
    id v33 = a1[5];
    id v24 = v8;
    id v25 = (id)[v23 inContext:v20 then:v34 orRecover:v31];

    id v3 = v30;
  }
  else
  {
    id v26 = (void *)MEMORY[0x230FBD990]();
    __int16 v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      long long v28 = HMFGetLogIdentifier();
      id v29 = a1[4];
      *(_DWORD *)buf = 138543618;
      __int16 v44 = v28;
      __int16 v45 = 2112;
      id v46 = v29;
      _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@Home disappeared, cannot remove user %@", buf, 0x16u);
    }
  }
}

uint64_t __31__HMDHome__removeUser_message___block_invoke_1565(id *a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = a1[4];
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    uint64_t v8 = [a1[5] uuid];
    uint64_t v9 = [a1[4] name];
    uint64_t v10 = [a1[4] uuid];
    *(_DWORD *)buf = 138544130;
    id v29 = v7;
    __int16 v30 = 2112;
    uint64_t v31 = v8;
    __int16 v32 = 2112;
    id v33 = v9;
    __int16 v34 = 2112;
    id v35 = v10;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Successfully revoked cloud share for shared user %@ for home %@/%@", buf, 0x2Au);
  }
  uint64_t v11 = [HMDUserModel alloc];
  uint64_t v12 = [a1[5] uuid];
  uint64_t v13 = [a1[4] uuid];
  uint64_t v14 = [(HMDBackingStoreModelObject *)v11 initWithObjectChangeType:3 uuid:v12 parentUUID:v13];

  [a1[6] add:v14];
  id v15 = [a1[4] findAdditionalUUIDsForUser:a1[5]];
  if ([v15 count])
  {
    v26[0] = MEMORY[0x263EF8330];
    v26[1] = 3221225472;
    void v26[2] = __31__HMDHome__removeUser_message___block_invoke_1566;
    v26[3] = &unk_264A1CD78;
    void v26[4] = a1[4];
    id v27 = a1[6];
    objc_msgSend(v15, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v26);
  }
  uint64_t v16 = (void *)MEMORY[0x230FBD990]();
  id v17 = a1[4];
  id v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    id v19 = HMFGetLogIdentifier();
    id v20 = a1[5];
    uint64_t v21 = [a1[6] objects];
    *(_DWORD *)buf = 138543874;
    id v29 = v19;
    __int16 v30 = 2112;
    uint64_t v31 = v20;
    __int16 v32 = 2112;
    id v33 = v21;
    _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Going to run V4 transaction to remove user: %@ / %@", buf, 0x20u);
  }
  v24[0] = MEMORY[0x263EF8330];
  v24[1] = 3221225472;
  v24[2] = __31__HMDHome__removeUser_message___block_invoke_1568;
  v24[3] = &unk_264A2F370;
  void v24[4] = a1[4];
  id v22 = a1[6];
  id v25 = a1[7];
  [v22 run:v24];

  return 1;
}

uint64_t __31__HMDHome__removeUser_message___block_invoke_1569(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v7 = HMFGetLogIdentifier();
    uint64_t v8 = [*(id *)(a1 + 40) uuid];
    uint64_t v9 = [*(id *)(a1 + 32) name];
    uint64_t v10 = [*(id *)(a1 + 32) uuid];
    int v14 = 138544386;
    id v15 = v7;
    __int16 v16 = 2112;
    id v17 = v8;
    __int16 v18 = 2112;
    id v19 = v9;
    __int16 v20 = 2112;
    uint64_t v21 = v10;
    __int16 v22 = 2112;
    id v23 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to revoke cloud share for shared user %@ for home %@/%@ due to %@", (uint8_t *)&v14, 0x34u);
  }
  uint64_t v11 = *(void **)(a1 + 48);
  uint64_t v12 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:52 userInfo:0];
  [v11 respondWithError:v12];

  return 1;
}

void __31__HMDHome__removeUser_message___block_invoke_1566(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [HMDUserModel alloc];
  id v5 = [*(id *)(a1 + 32) uuid];
  id v6 = [(HMDBackingStoreModelObject *)v4 initWithObjectChangeType:3 uuid:v3 parentUUID:v5];

  id v7 = (void *)MEMORY[0x230FBD990]([*(id *)(a1 + 40) add:v6]);
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    int v11 = 138543618;
    uint64_t v12 = v10;
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Created transaction to remove duplicate user with UUID %@", (uint8_t *)&v11, 0x16u);
  }
}

void __31__HMDHome__removeUser_message___block_invoke_1568(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to commit removeUser transaction with error: %@", (uint8_t *)&v8, 0x16u);
    }
  }
  [*(id *)(a1 + 40) respondWithPayload:0 error:v3];
}

- (id)__modelObjectsForRemovingOutgoingInvitationForUser:(id)a3
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (v4)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v5 = [(HMDHome *)self outgoingInvitations];
    id v6 = (id)[v5 countByEnumeratingWithState:&v43 objects:v51 count:16];
    if (v6)
    {
      long long v38 = self;
      uint64_t v7 = *(void *)v44;
LABEL_4:
      uint64_t v8 = 0;
      while (1)
      {
        if (*(void *)v44 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void **)(*((void *)&v43 + 1) + 8 * v8);
        __int16 v10 = [v9 user];
        if (v10)
        {
          id v11 = [v4 userID];
          uint64_t v12 = [v10 userID];
          int v13 = [v11 isEqualToString:v12];

          if (v13) {
            break;
          }
        }

        if (v6 == (id)++v8)
        {
          id v6 = (id)[v5 countByEnumeratingWithState:&v43 objects:v51 count:16];
          if (v6) {
            goto LABEL_4;
          }
          id v14 = v5;
          uint64_t v15 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_23;
        }
      }
      id v14 = v9;
      if ([v10 isPending]) {
        id v6 = v10;
      }
      else {
        id v6 = 0;
      }

      if (!v14)
      {
        uint64_t v15 = (void *)MEMORY[0x263EFFA68];
        goto LABEL_25;
      }
      __int16 v16 = [MEMORY[0x263EFF980] arrayWithCapacity:2];
      id v17 = objc_alloc(MEMORY[0x263F42520]);
      __int16 v18 = [(HMDHome *)v38 workQueue];
      id v19 = (void *)[v17 initWithQueue:v18];

      __int16 v20 = [(HMDHome *)v38 homeManager];
      uint64_t v21 = [v20 homeOwnerCloudShareManager];
      __int16 v22 = [v21 revokeAccessForUser:v4 home:v38];
      v41[0] = MEMORY[0x263EF8330];
      v41[1] = 3221225472;
      v41[2] = __62__HMDHome___modelObjectsForRemovingOutgoingInvitationForUser___block_invoke;
      v41[3] = &unk_264A2C678;
      v41[4] = v38;
      id v42 = v4;
      v39[0] = MEMORY[0x263EF8330];
      v39[1] = 3221225472;
      void v39[2] = __62__HMDHome___modelObjectsForRemovingOutgoingInvitationForUser___block_invoke_1557;
      void v39[3] = &unk_264A2EC50;
      void v39[4] = v38;
      id v40 = v42;
      id v23 = (id)[v22 inContext:v19 then:v41 orRecover:v39];

      uint64_t v24 = [HMDOutgoingHomeInvitationModel alloc];
      id v25 = [v14 identifier];
      id v26 = [(HMDHome *)v38 uuid];
      id v27 = [(HMDBackingStoreModelObject *)v24 initWithObjectChangeType:3 uuid:v25 parentUUID:v26];

      uint64_t v28 = [v16 addObject:v27];
      if (v6)
      {
        id v29 = (void *)MEMORY[0x230FBD990](v28);
        __int16 v30 = v38;
        uint64_t v31 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          __int16 v32 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          uint64_t v48 = v32;
          __int16 v49 = 2112;
          id v50 = v6;
          _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_INFO, "%{public}@Going to remove pending user with invitation : %@", buf, 0x16u);
        }
        id v33 = [HMDUserModel alloc];
        __int16 v34 = [v6 uuid];
        id v35 = [(HMDHome *)v30 uuid];
        uint64_t v36 = [(HMDBackingStoreModelObject *)v33 initWithObjectChangeType:3 uuid:v34 parentUUID:v35];

        [v16 addObject:v36];
      }
      uint64_t v15 = (void *)[v16 copy];
    }
    else
    {
      uint64_t v15 = (void *)MEMORY[0x263EFFA68];
      id v14 = v5;
    }
LABEL_23:

LABEL_25:
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x263EFFA68];
  }

  return v15;
}

uint64_t __62__HMDHome___modelObjectsForRemovingOutgoingInvitationForUser___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    uint64_t v8 = [*(id *)(a1 + 40) uuid];
    uint64_t v9 = [*(id *)(a1 + 32) name];
    __int16 v10 = [*(id *)(a1 + 32) uuid];
    int v12 = 138544130;
    int v13 = v7;
    __int16 v14 = 2112;
    uint64_t v15 = v8;
    __int16 v16 = 2112;
    id v17 = v9;
    __int16 v18 = 2112;
    id v19 = v10;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Successfully revoked cloud share for pending user %@ for home %@/%@", (uint8_t *)&v12, 0x2Au);
  }

  return 1;
}

uint64_t __62__HMDHome___modelObjectsForRemovingOutgoingInvitationForUser___block_invoke_1557(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    uint64_t v8 = [*(id *)(a1 + 40) uuid];
    uint64_t v9 = [*(id *)(a1 + 32) name];
    __int16 v10 = [*(id *)(a1 + 32) uuid];
    int v12 = 138544386;
    int v13 = v7;
    __int16 v14 = 2112;
    uint64_t v15 = v8;
    __int16 v16 = 2112;
    id v17 = v9;
    __int16 v18 = 2112;
    id v19 = v10;
    __int16 v20 = 2112;
    id v21 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to revoke cloud share for pending user %@ for home %@/%@ due to %@", (uint8_t *)&v12, 0x34u);
  }

  return 1;
}

- (void)_removeOutgoingInvitationForUser:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self __modelObjectsForRemovingOutgoingInvitationForUser:v4];
  if ((objc_msgSend(v5, "hmf_isEmpty") & 1) == 0)
  {
    id v6 = [(HMDHome *)self backingStore];
    uint64_t v7 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v8 = [v6 transaction:@"removeOutgoingInvitation" options:v7];

    [v8 addObjects:v5];
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    void v9[2] = __44__HMDHome__removeOutgoingInvitationForUser___block_invoke;
    void v9[3] = &unk_264A2E210;
    void v9[4] = self;
    id v10 = v4;
    id v11 = v5;
    [v8 run:v9];
  }
}

void __44__HMDHome__removeOutgoingInvitationForUser___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    int v10 = 138543874;
    id v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Error occurred while removing the invitation for the user : %@ / %@", (uint8_t *)&v10, 0x20u);
  }
}

- (void)removeUser:(id)a3
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    __int16 v12 = v8;
    __int16 v13 = 2112;
    id v14 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to remove user: %@", buf, 0x16u);
  }
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  void v10[2] = __22__HMDHome_removeUser___block_invoke;
  v10[3] = &unk_264A2F0C8;
  void v10[4] = v6;
  uint64_t v9 = [MEMORY[0x263F42568] messageWithName:@"kDataSyncResponseNAckKey" messagePayload:0 responseHandler:v10];
  [(HMDHome *)v6 _removeUser:v4 message:v9];
}

void __22__HMDHome_removeUser___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v10 = HMFGetLogIdentifier();
      int v11 = 138543618;
      __int16 v12 = v10;
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Failed to remove user due to %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

- (void)removeUserWithUserID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __32__HMDHome_removeUserWithUserID___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __32__HMDHome_removeUserWithUserID___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) users];
  objc_msgSend(v2, "hmf_firstObjectWithValue:forKeyPath:", *(void *)(a1 + 40), @"userID");
  id v4 = (id)objc_claimAutoreleasedReturnValue();

  id v3 = v4;
  if (v4)
  {
    [*(id *)(a1 + 32) removeUser:v4];
    id v3 = v4;
  }
}

- (void)_handleRemoveUser:(id)a3
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([v4 isEntitledForSPIAccess] & 1) != 0 || (objc_msgSend(v4, "isRemote"))
  {
    id v5 = [v4 uuidForKey:@"kUserUUIDKey"];
    if (v5)
    {
      id v6 = [v4 stringForKey:*MEMORY[0x263F0DD28]];
      if (v6) {
        goto LABEL_9;
      }
      uint64_t v7 = (void *)MEMORY[0x230FBD990]();
      id v8 = self;
      uint64_t v9 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v10 = HMFGetLogIdentifier();
        int v11 = [v5 UUIDString];
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v11;
        _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Message does not contain a mergeID for user being removed, looking mergeID from UUID: %@", buf, 0x16u);
      }
      id v12 = v5;
      __int16 v13 = v12;
      if (v8)
      {
        long long v44 = &v43;
        uint64_t v45 = 0x3032000000;
        long long v46 = __Block_byref_object_copy__14257;
        uint64_t v47 = __Block_byref_object_dispose__14258;
        id v48 = 0;
        id v14 = [(HMDHome *)v8 backingStore];
        uint64_t v15 = [v14 context];

        uint64_t v16 = [v15 managedObjectContext];
        *(void *)buf = MEMORY[0x263EF8330];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __35__HMDHome__findMergeIDForUserUUID___block_invoke;
        id v50 = &unk_264A2F000;
        id v17 = v13;
        id v51 = v17;
        id v18 = v16;
        id v52 = v18;
        uint64_t v53 = v8;
        uint64_t v54 = &v43;
        [v15 unsafeSynchronousBlock:buf];
        id v6 = (id)v44[5];

        _Block_object_dispose(&v43, 8);
        if (v6)
        {
LABEL_9:
          id v19 = (void *)MEMORY[0x230FBD990]();
          __int16 v20 = self;
          id v21 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            uint64_t v22 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            *(void *)&uint8_t buf[4] = v22;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v6;
            _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Looking for user based on mergeID: %@", buf, 0x16u);
          }
          id v23 = [(HMDHome *)v20 userWithMergeID:v6];
          if (v23) {
            goto LABEL_13;
          }
        }
      }
      else
      {

        id v6 = 0;
      }
      uint64_t v24 = [(HMDHome *)self users];
      id v23 = objc_msgSend(v24, "hmf_firstObjectWithUUID:", v5);

      if (!v23)
      {
        id v23 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
        id v42 = [v4 responseHandler];
        ((void (**)(void, void *, void))v42)[2](v42, v23, 0);

LABEL_26:
        goto LABEL_27;
      }
LABEL_13:
      int v25 = [v23 isOwner];
      id v26 = (void *)MEMORY[0x230FBD990]();
      id v27 = self;
      uint64_t v28 = HMFGetOSLogHandle();
      id v29 = v28;
      if (v25)
      {
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          __int16 v30 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v30;
          _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, "%{public}@Owner cannot be removed from home", buf, 0xCu);
        }
        uint64_t v31 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:17 userInfo:0];
        __int16 v32 = [v4 responseHandler];
        ((void (**)(void, void *, void))v32)[2](v32, v31, 0);
      }
      else
      {
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          long long v41 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          *(void *)&uint8_t buf[4] = v41;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v23;
          _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Removing user: %@", buf, 0x16u);
        }
        [(HMDHome *)v27 _removeUser:v23 message:v4];
      }
      goto LABEL_26;
    }
    id v33 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:20 userInfo:0];
    __int16 v34 = [v4 responseHandler];
    ((void (**)(void, void *, void))v34)[2](v34, v33, 0);

    id v5 = 0;
LABEL_27:

    goto LABEL_28;
  }
  id v35 = (void *)MEMORY[0x230FBD990]();
  uint64_t v36 = self;
  id v37 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    long long v38 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    *(void *)&uint8_t buf[4] = v38;
    _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_ERROR, "%{public}@User management (remove) not supported for non-SPI clients", buf, 0xCu);
  }
  long long v39 = [v4 responseHandler];

  if (v39)
  {
    id v5 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    id v40 = [v4 responseHandler];
    ((void (**)(void, void *, void))v40)[2](v40, v5, 0);

    goto LABEL_27;
  }
LABEL_28:
}

void __35__HMDHome__findMergeIDForUserUUID___block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v2 = +[_MKFHome findHomeMemberWithUUID:*(void *)(a1 + 32) context:*(void *)(a1 + 40)];
  id v3 = v2;
  if (!v2) {
    goto LABEL_4;
  }
  id v4 = [v2 home];
  id v5 = [v4 modelID];
  id v6 = [*(id *)(a1 + 48) uuid];
  char v7 = [v5 isEqual:v6];

  if (v7)
  {
    uint64_t v8 = [v3 idsMergeIdentifier];
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
    int v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  else
  {
LABEL_4:
    int v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = *(id *)(a1 + 48);
    __int16 v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = HMFGetLogIdentifier();
      uint64_t v15 = *(void *)(a1 + 32);
      int v16 = 138543618;
      id v17 = v14;
      __int16 v18 = 2112;
      uint64_t v19 = v15;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to find home member model with modelID %@", (uint8_t *)&v16, 0x16u);
    }
  }
}

- (void)_handleUpdatePresenceConsent:(id)a3
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [MEMORY[0x263F0E8C8] authWithMessage:v4];
  if (!v5)
  {
    id v12 = (void *)MEMORY[0x230FBD990]();
    __int16 v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v36 = v15;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Received nil presence auth", buf, 0xCu);
    }
    int v16 = [v4 responseHandler];
    uint64_t v17 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:17 userInfo:0];
    goto LABEL_15;
  }
  id v6 = [(HMDHome *)self presenceAuthStatus];
  int v7 = HMFEqualObjects();

  if (v7)
  {
    uint64_t v8 = (void *)MEMORY[0x230FBD990]();
    uint64_t v9 = self;
    int v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v36 = v11;
      __int16 v37 = 2112;
      long long v38 = v5;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Presence auth status is already set to %@", buf, 0x16u);
    }
LABEL_14:
    int v16 = [v4 responseHandler];
    uint64_t v17 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
LABEL_15:
    id v26 = (void *)v17;
    (*(void (**)(HMDHomeModel *, uint64_t, void))&v16->super._bsoDataVersionOverride)(v16, v17, 0);
    goto LABEL_16;
  }
  if ((unint64_t)([v5 value] - 1) < 2)
  {
    __int16 v18 = [HMDHomeModel alloc];
    uint64_t v19 = [(HMDHome *)self uuid];
    uint64_t v20 = [(HMDHome *)self homeManager];
    id v21 = [v20 uuid];
    int v16 = [(HMDBackingStoreModelObject *)v18 initWithObjectChangeType:2 uuid:v19 parentUUID:v21];

    uint64_t v22 = [v5 number];
    [(HMDHomeModel *)v16 setPresenceAuthorizationStatus:v22];

    id v23 = [(HMDHome *)self backingStore];
    uint64_t v24 = [v4 name];
    int v25 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v26 = [v23 transaction:v24 options:v25];

    [v26 add:v16];
    v32[0] = MEMORY[0x263EF8330];
    v32[1] = 3221225472;
    void v32[2] = __40__HMDHome__handleUpdatePresenceConsent___block_invoke;
    v32[3] = &unk_264A2F370;
    id v33 = v4;
    __int16 v34 = self;
    [v26 run:v32];

LABEL_16:
    goto LABEL_17;
  }
  id v27 = (void *)MEMORY[0x230FBD990]();
  uint64_t v28 = self;
  id v29 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    __int16 v30 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v36 = v30;
    __int16 v37 = 2112;
    long long v38 = v5;
    _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, "%{public}@Received invalid parameter for presence authorization: %@", buf, 0x16u);
  }
  uint64_t v31 = [v4 responseHandler];

  if (v31) {
    goto LABEL_14;
  }
LABEL_17:
}

void __40__HMDHome__handleUpdatePresenceConsent___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    id v8 = [MEMORY[0x263EFF9A0] dictionary];
    id v4 = [*(id *)(a1 + 40) currentUser];
    id v5 = [v4 presenceAuthStatus];
    [v5 addToPayload:v8];

    id v6 = *(void **)(a1 + 32);
    int v7 = (void *)[v8 copy];
    [v6 respondWithPayload:v7];
  }
}

- (void)_readLocalHomeKeyMiscInfo
{
  id v3 = [(HMDHome *)self uuid];
  id v4 = [(HMDHome *)self backingStore];
  id v5 = [v4 context];

  id v6 = [v5 managedObjectContext];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = __36__HMDHome__readLocalHomeKeyMiscInfo__block_invoke;
  void v9[3] = &unk_264A2F2F8;
  id v10 = v3;
  id v11 = v6;
  id v12 = self;
  id v7 = v6;
  id v8 = v3;
  [v7 performBlockAndWait:v9];
}

void __36__HMDHome__readLocalHomeKeyMiscInfo__block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v2 = +[MKFLocalHomeKeyMiscInfo fetchLocalHomeKeyMiscInfoWithHomeUUID:*(void *)(a1 + 32) managedObjectContext:*(void *)(a1 + 40)];
  id v3 = (void *)MEMORY[0x230FBD990]();
  id v4 = *(id *)(a1 + 48);
  id v5 = HMFGetOSLogHandle();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v6)
    {
      id v7 = HMFGetLogIdentifier();
      int v18 = 138543362;
      uint64_t v19 = v7;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Reading local home key miscellaneous info.", (uint8_t *)&v18, 0xCu);
    }
    id v8 = [v2 dismissedWalletKeyUWBUnlockOnboarding];
    objc_msgSend(*(id *)(a1 + 48), "setDismissedWalletKeyUWBUnlockOnboarding:", objc_msgSend(v8, "BOOLValue"));

    uint64_t v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = *(id *)(a1 + 48);
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      int v13 = [*(id *)(a1 + 48) dismissedWalletKeyUWBUnlockOnboarding];
      int v18 = 138543618;
      uint64_t v19 = v12;
      __int16 v20 = 1024;
      LODWORD(v21) = v13;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Dismissed Wallet Key UWB Unlock Onboarding settings read from local store as : %d", (uint8_t *)&v18, 0x12u);
    }
    id v14 = [v2 clientWalletKeyUUID];
    [*(id *)(a1 + 48) setClientWalletKeyUUID:v14];

    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = *(id *)(a1 + 48);
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      int v16 = [*(id *)(a1 + 48) clientWalletKeyUUID];
      int v18 = 138543618;
      uint64_t v19 = v15;
      __int16 v20 = 2112;
      id v21 = v16;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Client Wallet Key UUID read from local store as : %@", (uint8_t *)&v18, 0x16u);
    }
  }
  else if (v6)
  {
    uint64_t v17 = HMFGetLogIdentifier();
    int v18 = 138543362;
    uint64_t v19 = v17;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Did not find home key misc info in local store.", (uint8_t *)&v18, 0xCu);
  }
}

- (void)resetHomeKeyMiscInfo
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if ([(HMDHome *)self dismissedWalletKeyUWBUnlockOnboarding]
    || ([(HMDHome *)self clientWalletKeyUUID],
        id v3 = objc_claimAutoreleasedReturnValue(),
        v3,
        v3))
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = self;
    BOOL v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      [(HMDHome *)v5 dismissedWalletKeyUWBUnlockOnboarding];
      id v8 = HMFBooleanToString();
      uint64_t v9 = [(HMDHome *)v5 clientWalletKeyUUID];
      *(_DWORD *)buf = 138543874;
      int v25 = v7;
      __int16 v26 = 2112;
      id v27 = v8;
      __int16 v28 = 2112;
      id v29 = v9;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Resetting HomeKeyMiscInfo with dismissedUWB: %@ and clientWalletKeyUUID: %@", buf, 0x20u);
    }
    id v10 = [(HMDHome *)v5 uuid];
    id v11 = +[HMDCoreData sharedInstance];
    id v12 = (void *)[v11 newManagedObjectContext];

    int v13 = HMDWorkingContextNameForHomeUUID(v10);
    [v12 setName:v13];

    id v14 = @"HMD.1P";
    [v12 setTransactionAuthor:@"HMD.1P"];

    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 3221225472;
    v21[2] = __31__HMDHome_resetHomeKeyMiscInfo__block_invoke;
    v21[3] = &unk_264A2F2F8;
    void v21[4] = v5;
    id v22 = v10;
    id v23 = v12;
    id v15 = v12;
    id v16 = v10;
    [v15 performBlockAndWait:v21];
    [(HMDHome *)v5 setDismissedWalletKeyUWBUnlockOnboarding:0];
    [(HMDHome *)v5 setClientWalletKeyUUID:0];
  }
  else
  {
    uint64_t v17 = (void *)MEMORY[0x230FBD990]();
    int v18 = self;
    uint64_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      __int16 v20 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      int v25 = v20;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Dismissed Wallet Key UWB Unlock Onboarding and clientWalletKeyUUID already unset, nothing to be done", buf, 0xCu);
    }
  }
}

void __31__HMDHome_resetHomeKeyMiscInfo__block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v21 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to reset HomeKeyMiscInfo Attributes", buf, 0xCu);
  }
  BOOL v6 = +[MKFLocalHomeKeyMiscInfo fetchLocalHomeKeyMiscInfoWithHomeUUID:*(void *)(a1 + 40) managedObjectContext:*(void *)(a1 + 48)];
  id v7 = v6;
  if (v6)
  {
    [v6 setDismissedWalletKeyUWBUnlockOnboarding:MEMORY[0x263EFFA80]];
    [v7 setClientWalletKeyUUID:0];
    id v8 = *(void **)(a1 + 48);
    id v19 = 0;
    [v8 save:&v19];
    id v9 = v19;
    id v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = *(id *)(a1 + 32);
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v13 = HMFGetLogIdentifier();
      id v14 = HMFBooleanToString();
      *(_DWORD *)buf = 138543874;
      id v21 = v13;
      __int16 v22 = 2112;
      id v23 = v9;
      __int16 v24 = 2112;
      int v25 = v14;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Resetting HomeKeyMiscInfo to local store with error :%@, Success : %@", buf, 0x20u);
    }
  }
  else
  {
    id v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = *(id *)(a1 + 32);
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v21 = v18;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Expected to find HomeKeyMiscInfo since cached home properties were not nil when attempting to reset HomeKeyMiscInfo", buf, 0xCu);
    }
  }
}

- (void)saveClientWalletKeyUUIDToLocalStore:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self uuid];
  BOOL v6 = +[HMDCoreData sharedInstance];
  id v7 = (void *)[v6 newManagedObjectContext];

  id v8 = HMDWorkingContextNameForHomeUUID(v5);
  [v7 setName:v8];

  id v9 = @"HMD.1P";
  [v7 setTransactionAuthor:@"HMD.1P"];

  uint64_t v13 = MEMORY[0x263EF8330];
  uint64_t v14 = 3221225472;
  id v15 = __47__HMDHome_saveClientWalletKeyUUIDToLocalStore___block_invoke;
  id v16 = &unk_264A2E610;
  uint64_t v17 = self;
  id v18 = v4;
  id v19 = v5;
  id v20 = v7;
  id v10 = v7;
  id v11 = v5;
  id v12 = v4;
  [v10 performBlockAndWait:&v13];
  -[HMDHome setClientWalletKeyUUID:](self, "setClientWalletKeyUUID:", v12, v13, v14, v15, v16, v17);
}

void __47__HMDHome_saveClientWalletKeyUUIDToLocalStore___block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    BOOL v6 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    uint64_t v17 = v5;
    __int16 v18 = 2112;
    id v19 = v6;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to store client Wallet Key UUID : %@ to local store", buf, 0x16u);
  }
  id v7 = +[MKFLocalHomeKeyMiscInfo fetchLocalHomeKeyMiscInfoWithHomeUUID:*(void *)(a1 + 48) managedObjectContext:*(void *)(a1 + 56)];
  if (!v7)
  {
    id v7 = [[MKFLocalHomeKeyMiscInfo alloc] initWithContext:*(void *)(a1 + 56)];
    [(MKFLocalHomeKeyMiscInfo *)v7 setHomeUUID:*(void *)(a1 + 48)];
  }
  [(MKFLocalHomeKeyMiscInfo *)v7 setClientWalletKeyUUID:*(void *)(a1 + 40)];
  id v8 = *(void **)(a1 + 56);
  id v15 = 0;
  [v8 save:&v15];
  id v9 = v15;
  id v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = *(id *)(a1 + 32);
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = HMFGetLogIdentifier();
    uint64_t v14 = HMFBooleanToString();
    *(_DWORD *)buf = 138543874;
    uint64_t v17 = v13;
    __int16 v18 = 2112;
    id v19 = v9;
    __int16 v20 = 2112;
    id v21 = v14;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Storing client Wallet Key UUID to local store with error :%@, Success : %@", buf, 0x20u);
  }
}

- (void)_setDismissedUWBOnboardingInLocalStore
{
  id v3 = [(HMDHome *)self uuid];
  id v4 = +[HMDCoreData sharedInstance];
  id v5 = (void *)[v4 newManagedObjectContext];

  BOOL v6 = HMDWorkingContextNameForHomeUUID(v3);
  [v5 setName:v6];

  id v7 = @"HMD.1P";
  [v5 setTransactionAuthor:@"HMD.1P"];

  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  void v10[2] = __49__HMDHome__setDismissedUWBOnboardingInLocalStore__block_invoke;
  v10[3] = &unk_264A2F2F8;
  void v10[4] = self;
  id v11 = v3;
  id v12 = v5;
  id v8 = v5;
  id v9 = v3;
  [v8 performBlockAndWait:v10];
}

void __49__HMDHome__setDismissedUWBOnboardingInLocalStore__block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v16 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to store dismissedWalletKeyUWBUnlockOnboarding to TRUE in local store", buf, 0xCu);
  }
  BOOL v6 = +[MKFLocalHomeKeyMiscInfo fetchLocalHomeKeyMiscInfoWithHomeUUID:*(void *)(a1 + 40) managedObjectContext:*(void *)(a1 + 48)];
  if (!v6)
  {
    BOOL v6 = [[MKFLocalHomeKeyMiscInfo alloc] initWithContext:*(void *)(a1 + 48)];
    [(MKFLocalHomeKeyMiscInfo *)v6 setHomeUUID:*(void *)(a1 + 40)];
  }
  [(MKFLocalHomeKeyMiscInfo *)v6 setDismissedWalletKeyUWBUnlockOnboarding:MEMORY[0x263EFFA88]];
  id v7 = *(void **)(a1 + 48);
  id v14 = 0;
  [v7 save:&v14];
  id v8 = v14;
  id v9 = (void *)MEMORY[0x230FBD990]();
  id v10 = *(id *)(a1 + 32);
  id v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    id v12 = HMFGetLogIdentifier();
    uint64_t v13 = HMFBooleanToString();
    *(_DWORD *)buf = 138543874;
    id v16 = v12;
    __int16 v17 = 2112;
    id v18 = v8;
    __int16 v19 = 2112;
    __int16 v20 = v13;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Storing dismissedWalletKeyUWBUnlockOnboarding to local store with error :%@, Success : %@", buf, 0x20u);
  }
}

- (void)_handleSetDismissedUWBOnboarding:(id)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([v4 isRemote])
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    BOOL v6 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      int v18 = 138543362;
      __int16 v19 = v8;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@Received remote message for a local setting of DismissedUWBOnboarding", (uint8_t *)&v18, 0xCu);
    }
    id v9 = [v4 responseHandler];
    id v10 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:17 userInfo:0];
    ((void (**)(void, void *, void))v9)[2](v9, v10, 0);
  }
  else
  {
    BOOL v11 = [(HMDHome *)self dismissedWalletKeyUWBUnlockOnboarding];
    id v12 = (void *)MEMORY[0x230FBD990]();
    uint64_t v13 = self;
    id v14 = HMFGetOSLogHandle();
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
    if (v11)
    {
      if (v15)
      {
        id v16 = HMFGetLogIdentifier();
        int v18 = 138543362;
        __int16 v19 = v16;
        _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Home has already been onboarded for UWB unlock", (uint8_t *)&v18, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        __int16 v17 = HMFGetLogIdentifier();
        int v18 = 138543362;
        __int16 v19 = v17;
        _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Setting Dismissed Wallet Key UWB Unlock Onboarding", (uint8_t *)&v18, 0xCu);
      }
      [(HMDHome *)v13 _setDismissedUWBOnboardingInLocalStore];
      [(HMDHome *)v13 setDismissedWalletKeyUWBUnlockOnboarding:1];
    }
    [v4 respondWithSuccess];
  }
}

- (void)_handleUpdateUserAnnounceAccess:(id)a3
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([v4 isEntitledForSPIAccess] & 1) != 0 || (objc_msgSend(v4, "isRemote"))
  {
    id v5 = [v4 stringForKey:@"kUserIDKey"];
    BOOL v6 = [(HMDHome *)self users];
    id v7 = objc_msgSend(v6, "hmf_firstObjectWithValue:forKeyPath:", v5, @"userID");

    if (v7)
    {
      id v8 = [(HMDHome *)self currentUser];
      if ([v8 isAdministrator])
      {
        id v9 = (void *)[v7 newModelWithChangeType:2];
        id v10 = [v4 numberForKey:*MEMORY[0x263F0CF18]];
        if (v10)
        {
          [v9 setAnnounceAccessAllowed:v10];
          if ([v10 BOOLValue]) {
            BOOL v11 = &unk_26E470960;
          }
          else {
            BOOL v11 = &unk_26E470978;
          }
          [v9 setAnnounceAccessLevel:v11];
        }
        id v12 = [(HMDHome *)self backingStore];
        uint64_t v13 = [v4 name];
        id v14 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        BOOL v15 = [v12 transaction:v13 options:v14];

        [v15 add:v9 withMessage:v4];
        [v15 run];

        goto LABEL_21;
      }
      int v25 = (void *)MEMORY[0x230FBD990]();
      uint64_t v26 = self;
      id v27 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        __int16 v28 = HMFGetLogIdentifier();
        int v30 = 138543618;
        uint64_t v31 = v28;
        __int16 v32 = 2112;
        id v33 = v8;
        _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@Current user is not an administrator, cannot modify access: %@", (uint8_t *)&v30, 0x16u);
      }
      uint64_t v20 = [v4 responseHandler];
      id v29 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:17 userInfo:0];
      ((void (**)(void, void *, void))v20)[2](v20, v29, 0);
    }
    else
    {
      id v16 = (void *)MEMORY[0x230FBD990]();
      __int16 v17 = self;
      int v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        __int16 v19 = HMFGetLogIdentifier();
        int v30 = 138543618;
        uint64_t v31 = v19;
        __int16 v32 = 2112;
        id v33 = v5;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Failed to find user %@", (uint8_t *)&v30, 0x16u);
      }
      id v8 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
      uint64_t v20 = [v4 responseHandler];
      ((void (**)(void, void *, void))v20)[2](v20, v8, 0);
    }

LABEL_21:
    goto LABEL_22;
  }
  uint64_t v21 = (void *)MEMORY[0x230FBD990]();
  uint64_t v22 = self;
  id v23 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    __int16 v24 = HMFGetLogIdentifier();
    int v30 = 138543362;
    uint64_t v31 = v24;
    _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to update users to home", (uint8_t *)&v30, 0xCu);
  }
  id v5 = [v4 responseHandler];
  id v7 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:17 userInfo:0];
  ((void (**)(void, void *, void))v5)[2](v5, v7, 0);
LABEL_22:
}

- (void)_handleUpdateAudioAnalysisAccess:(id)a3
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kUserIDKey"];
  BOOL v6 = [(HMDHome *)self users];
  id v7 = objc_msgSend(v6, "hmf_firstObjectWithValue:forKeyPath:", v5, @"userID");

  if (v7)
  {
    id v8 = [(HMDHome *)self currentUser];
    if ([v8 isAdministrator])
    {
      id v9 = (void (**)(void, void, void))[v7 newModelWithChangeType:2];
      id v10 = [v4 numberForKey:*MEMORY[0x263F0C7C0]];
      BOOL v11 = v10;
      if (v10)
      {
        uint64_t v12 = [v10 integerValue];
        uint64_t v13 = (void *)MEMORY[0x230FBD990]();
        id v14 = self;
        BOOL v15 = HMFGetOSLogHandle();
        uint64_t v36 = v12;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v16 = id v35 = v13;
          __int16 v17 = [NSNumber numberWithUnsignedInteger:v12];
          *(_DWORD *)buf = 138543874;
          long long v41 = v16;
          __int16 v42 = 2112;
          uint64_t v43 = v17;
          __int16 v44 = 2112;
          uint64_t v45 = v7;
          _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Updating audio analysis access level to %@ for user: %@", buf, 0x20u);

          uint64_t v12 = v36;
          uint64_t v13 = v35;
        }

        int v18 = [NSNumber numberWithUnsignedInteger:v12];
        [v9 setAudioAnalysisUserDropInAccessLevel:v18];

        __int16 v19 = [(HMDHome *)v14 backingStore];
        uint64_t v20 = [v4 name];
        uint64_t v21 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        uint64_t v22 = [v19 transaction:v20 options:v21];

        [v22 add:v9 withMessage:v4];
        v37[0] = MEMORY[0x263EF8330];
        v37[1] = 3221225472;
        void v37[2] = __44__HMDHome__handleUpdateAudioAnalysisAccess___block_invoke;
        v37[3] = &unk_264A2F320;
        id v38 = v4;
        uint64_t v39 = v36;
        [v22 run:v37];
      }
      else
      {
        uint64_t v31 = (void *)MEMORY[0x230FBD990]();
        __int16 v32 = self;
        id v33 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          long long v41 = v34;
          _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_ERROR, "%{public}@Missing access level for audio analysis dropIn", buf, 0xCu);
        }
        uint64_t v22 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
        [v4 respondWithError:v22];
      }
    }
    else
    {
      id v27 = (void *)MEMORY[0x230FBD990]();
      __int16 v28 = self;
      id v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        int v30 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v41 = v30;
        __int16 v42 = 2112;
        uint64_t v43 = v8;
        _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, "%{public}@Current user is not an administrator, cannot modify access: %@", buf, 0x16u);
      }
      id v9 = [v4 responseHandler];
      BOOL v11 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:17 userInfo:0];
      ((void (**)(void, void *, void))v9)[2](v9, v11, 0);
    }
  }
  else
  {
    id v23 = (void *)MEMORY[0x230FBD990]();
    __int16 v24 = self;
    int v25 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      uint64_t v26 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v41 = v26;
      __int16 v42 = 2112;
      uint64_t v43 = v5;
      _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_INFO, "%{public}@Failed to find user %@", buf, 0x16u);
    }
    id v8 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v4 respondWithError:v8];
  }
}

void __44__HMDHome__handleUpdateAudioAnalysisAccess___block_invoke(uint64_t a1, uint64_t a2)
{
  v7[1] = *MEMORY[0x263EF8340];
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    uint64_t v6 = *MEMORY[0x263F0C7C0];
    id v4 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 40)];
    v7[0] = v4;
    id v5 = [NSDictionary dictionaryWithObjects:v7 forKeys:&v6 count:1];

    [*(id *)(a1 + 32) respondWithPayload:v5];
  }
}

- (void)_handleUpdateUserAccess:(id)a3
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([v4 isEntitledForSPIAccess] & 1) != 0 || (objc_msgSend(v4, "isRemote"))
  {
    id v5 = [v4 stringForKey:@"kUserIDKey"];
    uint64_t v6 = [(HMDHome *)self users];
    id v7 = objc_msgSend(v6, "hmf_firstObjectWithValue:forKeyPath:", v5, @"userID");

    if (!v7)
    {
      BOOL v15 = (void *)MEMORY[0x230FBD990]();
      id v16 = self;
      __int16 v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        int v18 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v56 = v18;
        __int16 v57 = 2112;
        int v58 = v5;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Failed to find user %@", buf, 0x16u);
      }
      uint64_t v12 = (void *)MEMORY[0x263F087E8];
      uint64_t v13 = *MEMORY[0x263F0C710];
      uint64_t v14 = 2;
      goto LABEL_11;
    }
    if ([v7 isOwner])
    {
      id v8 = (void *)MEMORY[0x230FBD990]();
      id v9 = self;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        BOOL v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v56 = v11;
        __int16 v57 = 2112;
        int v58 = v5;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Cannot modify the owner of the home: %@", buf, 0x16u);
      }
      uint64_t v12 = (void *)MEMORY[0x263F087E8];
      uint64_t v13 = *MEMORY[0x263F0C710];
      uint64_t v14 = 17;
LABEL_11:
      __int16 v19 = [v12 errorWithDomain:v13 code:v14 userInfo:0];
      uint64_t v20 = [v4 responseHandler];
      ((void (**)(void, void *, void))v20)[2](v20, v19, 0);
LABEL_42:

      goto LABEL_43;
    }
    __int16 v19 = [(HMDHome *)self currentUser];
    if (([v19 isAdministrator] & 1) == 0)
    {
      uint64_t v34 = (void *)MEMORY[0x230FBD990]();
      id v35 = self;
      uint64_t v36 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        __int16 v37 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v56 = v37;
        __int16 v57 = 2112;
        int v58 = v19;
        _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_ERROR, "%{public}@Current user is not an administrator, cannot modify access: %@", buf, 0x16u);
      }
      uint64_t v20 = [v4 responseHandler];
      uint64_t v26 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:17 userInfo:0];
      ((void (**)(void, void *, void))v20)[2](v20, v26, 0);
      goto LABEL_41;
    }
    uint64_t v20 = (void (**)(void, void, void))[v7 newModelWithChangeType:2];
    int v25 = [v4 numberForKey:@"kUserAdministratorInformationKey"];
    uint64_t v26 = v25;
    if (!v25) {
      goto LABEL_25;
    }
    int v27 = [v25 BOOLValue];
    if (v27 && ![(HMDHome *)self isResidentSupported])
    {
      id v38 = (void *)MEMORY[0x230FBD990]();
      uint64_t v39 = self;
      id v40 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        long long v41 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v56 = v41;
        __int16 v57 = 2112;
        int v58 = v5;
        _os_log_impl(&dword_22F52A000, v40, OS_LOG_TYPE_INFO, "%{public}@Cannot update user %@ to administrator because it requires a resident", buf, 0x16u);
      }
      __int16 v42 = (void *)MEMORY[0x263F087E8];
      uint64_t v43 = *MEMORY[0x263F0C710];
      uint64_t v44 = 48;
    }
    else
    {
      if (![v7 privilege] || objc_msgSend(v7, "privilege") == 4)
      {
        if (v27) {
          __int16 v28 = &unk_26E470948;
        }
        else {
          __int16 v28 = &unk_26E470918;
        }
        [v20 setPrivilege:v28];
        [v7 privilege];
LABEL_25:
        id v50 = v26;
        id v29 = [v4 numberForKey:@"kUserRemoteAccessInformationKey"];
        if (v29) {
          [v20 setRemoteAccessAllowed:v29];
        }
        int v30 = [(HMDHome *)self backingStore];
        uint64_t v31 = [v4 name];
        __int16 v32 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        id v33 = [v30 transaction:v31 options:v32];

        [v33 add:v20];
        v52[0] = MEMORY[0x263EF8330];
        v52[1] = 3221225472;
        v52[2] = __35__HMDHome__handleUpdateUserAccess___block_invoke;
        v52[3] = &unk_264A2F370;
        id v53 = v4;
        id v54 = v7;
        [v33 run:v52];

        uint64_t v26 = v50;
        goto LABEL_40;
      }
      uint64_t v45 = (void *)MEMORY[0x230FBD990]();
      uint64_t v46 = self;
      uint64_t v47 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v48 = v51 = v45;
        __int16 v49 = @"non-";
        *(_DWORD *)buf = 138543874;
        id v56 = v48;
        __int16 v57 = 2112;
        if (v27) {
          __int16 v49 = &stru_26E2EB898;
        }
        int v58 = v5;
        __int16 v59 = 2112;
        char v60 = v49;
        _os_log_impl(&dword_22F52A000, v47, OS_LOG_TYPE_INFO, "%{public}@Failed to update user %@ to %@administrator", buf, 0x20u);

        uint64_t v45 = v51;
      }

      __int16 v42 = (void *)MEMORY[0x263F087E8];
      uint64_t v43 = *MEMORY[0x263F0C710];
      uint64_t v44 = 10;
    }
    id v29 = [v42 errorWithDomain:v43 code:v44 userInfo:0];
    id v33 = [v4 responseHandler];
    ((void (**)(void, void *, void))v33)[2](v33, v29, 0);
LABEL_40:

LABEL_41:
    goto LABEL_42;
  }
  uint64_t v21 = (void *)MEMORY[0x230FBD990]();
  uint64_t v22 = self;
  id v23 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    __int16 v24 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v56 = v24;
    _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to update users to home", buf, 0xCu);
  }
  id v5 = [v4 responseHandler];
  id v7 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:17 userInfo:0];
  ((void (**)(void, void *, void))v5)[2](v5, v7, 0);
LABEL_43:
}

void __35__HMDHome__handleUpdateUserAccess___block_invoke(uint64_t a1, uint64_t a2)
{
  void v11[5] = *MEMORY[0x263EF8340];
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    v10[0] = @"kUserAdministratorInformationKey";
    id v4 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "isAdministrator"));
    v11[0] = v4;
    v10[1] = @"kUserRemoteAccessInformationKey";
    id v5 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "isRemoteAccessAllowed"));
    v11[1] = v5;
    void v10[2] = @"kUserCamerasAccessLevelInformationKey";
    uint64_t v6 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 40), "camerasAccessLevel"));
    v11[2] = v6;
    v10[3] = *MEMORY[0x263F0CF18];
    id v7 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "isAnnounceAccessAllowed"));
    void v11[3] = v7;
    void v10[4] = *MEMORY[0x263F0C7C0];
    id v8 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 40), "audioAnalysisUserDropInAccessLevel"));
    void v11[4] = v8;
    id v9 = [NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:5];

    [*(id *)(a1 + 32) respondWithPayload:v9];
  }
}

- (void)_handleUpdateUserCamerasAccessLevel:(id)a3
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kUserIDKey"];
  uint64_t v6 = [(HMDHome *)self users];
  id v7 = objc_msgSend(v6, "hmf_firstObjectWithValue:forKeyPath:", v5, @"userID");

  if (!v7)
  {
    uint64_t v14 = (void *)MEMORY[0x230FBD990]();
    BOOL v15 = self;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      __int16 v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v47 = v17;
      __int16 v48 = 2112;
      __int16 v49 = v5;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Failed to find user %@", buf, 0x16u);
    }
    uint64_t v12 = (void *)MEMORY[0x263F087E8];
    uint64_t v13 = 2;
    goto LABEL_9;
  }
  if (![v7 isOwner])
  {
    int v18 = (void *)[v7 newModelWithChangeType:2];
    __int16 v19 = [v4 numberForKey:@"kUserCamerasAccessLevelInformationKey"];
    uint64_t v20 = v19;
    if (v19)
    {
      uint64_t v21 = [v19 integerValue];
      if (HMUserIsValidCameraAccessLevel())
      {
        uint64_t v22 = [v7 camerasAccessLevel];
        id v23 = (void *)MEMORY[0x230FBD990]();
        __int16 v24 = self;
        int v25 = HMFGetOSLogHandle();
        uint64_t v26 = v25;
        if (v22 != v21)
        {
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            id v38 = HMFGetLogIdentifier();
            HMUserCameraAccessLevelAsString();
            uint64_t v39 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            uint64_t v47 = v38;
            __int16 v48 = 2112;
            __int16 v49 = v39;
            __int16 v50 = 2112;
            id v51 = v7;
            _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Updating cameras access level to %@ for user: %@", buf, 0x20u);
          }
          [v18 setCamerasAccessLevel:v20];
          id v40 = [(HMDHome *)v24 backingStore];
          long long v41 = [v4 name];
          __int16 v42 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
          __int16 v37 = [v40 transaction:v41 options:v42];

          [v37 add:v18];
          v43[0] = MEMORY[0x263EF8330];
          v43[1] = 3221225472;
          v43[2] = __47__HMDHome__handleUpdateUserCamerasAccessLevel___block_invoke;
          v43[3] = &unk_264A2F370;
          id v44 = v4;
          id v45 = v20;
          [v37 run:v43];

          goto LABEL_24;
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          int v27 = HMFGetLogIdentifier();
          HMUserCameraAccessLevelAsString();
          __int16 v28 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          uint64_t v47 = v27;
          __int16 v48 = 2112;
          __int16 v49 = v28;
          _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_ERROR, "%{public}@Cameras access level: %@ already set", buf, 0x16u);
        }
        id v29 = (void *)MEMORY[0x263F087E8];
        uint64_t v30 = 1;
LABEL_23:
        __int16 v37 = [v29 hmErrorWithCode:v30];
        [v4 respondWithError:v37];
LABEL_24:

        goto LABEL_25;
      }
      uint64_t v31 = (void *)MEMORY[0x230FBD990]();
      __int16 v32 = self;
      id v35 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v47 = v36;
        __int16 v48 = 2048;
        __int16 v49 = (__CFString *)v21;
        _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_ERROR, "%{public}@Invalid cameras access level value: %ld", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v31 = (void *)MEMORY[0x230FBD990]();
      __int16 v32 = self;
      id v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v47 = v34;
        __int16 v48 = 2112;
        __int16 v49 = @"kUserCamerasAccessLevelInformationKey";
        _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_ERROR, "%{public}@Missing value for key: %@", buf, 0x16u);
      }
    }

    id v29 = (void *)MEMORY[0x263F087E8];
    uint64_t v30 = 3;
    goto LABEL_23;
  }
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    BOOL v11 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v47 = v11;
    __int16 v48 = 2112;
    __int16 v49 = v5;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Cannot modify cameras access level for owner of the home: %@", buf, 0x16u);
  }
  uint64_t v12 = (void *)MEMORY[0x263F087E8];
  uint64_t v13 = 48;
LABEL_9:
  int v18 = [v12 hmErrorWithCode:v13];
  [v4 respondWithError:v18];
LABEL_25:
}

void __47__HMDHome__handleUpdateUserCamerasAccessLevel___block_invoke(uint64_t a1, uint64_t a2)
{
  v7[1] = *MEMORY[0x263EF8340];
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v6 = @"kUserCamerasAccessLevelInformationKey";
    v7[0] = v4;
    id v5 = [NSDictionary dictionaryWithObjects:v7 forKeys:&v6 count:1];
    [*(id *)(a1 + 32) respondWithPayload:v5];
  }
}

- (void)_addUsersWithInviteInformations:(id)a3 message:(id)a4
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v43 = a4;
  __int16 v48 = [MEMORY[0x263EFF980] array];
  uint64_t v47 = [MEMORY[0x263EFF980] array];
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  obuint64_t j = v6;
  uint64_t v7 = [obj countByEnumeratingWithState:&v61 objects:v71 count:16];
  if (v7)
  {
    uint64_t v46 = *(id **)v62;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(id **)v62 != v46) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v61 + 1) + 8 * i);
        uint64_t v10 = [(id)objc_opt_class() privilegeFromUserInviteInformation:v9];
        BOOL v11 = +[HMDAccountHandleFormatter defaultFormatter];
        uint64_t v12 = [v9 userID];
        uint64_t v13 = [v11 accountHandleFromString:v12];

        uint64_t v14 = [[HMDUser alloc] initWithAccountHandle:v13 home:self pairingIdentity:0 privilege:v10];
        [(HMDUser *)v14 refreshDisplayName];
        -[HMDUser setRemoteAccessAllowed:](v14, "setRemoteAccessAllowed:", [v9 isRemoteAccessAllowed]);
        -[HMDUser setCamerasAccessLevel:](v14, "setCamerasAccessLevel:", [v9 camerasAccessLevel]);
        if ([v9 isAnnounceAccessAllowed]) {
          uint64_t v15 = 2;
        }
        else {
          uint64_t v15 = 1;
        }
        [(HMDUser *)v14 setAnnounceAccessLevel:v15];
        if ([v9 isRestrictedGuest])
        {
          id v16 = [HMDRestrictedGuestHomeAccessSettings alloc];
          __int16 v17 = [v9 restrictedGuestHomeAccessSettings];
          int v18 = [(HMDRestrictedGuestHomeAccessSettings *)v16 initWithRestrictedGuestHomeAccessSettings:v17];

          if (v18) {
            uint64_t v19 = [(HMDUser *)v14 setRestrictedGuestAccessSettings:v18];
          }
          uint64_t v20 = (void *)MEMORY[0x230FBD990](v19);
          uint64_t v21 = self;
          uint64_t v22 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            id v23 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            id v68 = v23;
            __int16 v69 = 2112;
            uint64_t v70 = v14;
            _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Received user invite request with restricted access settings : %@", buf, 0x16u);
          }
        }
        __int16 v24 = [[HMDOutgoingHomeInvitation alloc] initWithInvitee:v14 invitationState:2 forHome:self expiryDate:0 messageIdentifier:0];
        [v48 addObject:v24];
        int v25 = [(HMDHomeInvitation *)v24 invitationData];
        [v47 addObject:v25];
      }
      uint64_t v7 = [obj countByEnumeratingWithState:&v61 objects:v71 count:16];
    }
    while (v7);
  }

  uint64_t v26 = _os_feature_enabled_impl();
  objc_initWeak((id *)buf, self);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __51__HMDHome__addUsersWithInviteInformations_message___block_invoke;
  aBlock[3] = &unk_264A27518;
  objc_copyWeak(&v59, (id *)buf);
  id v27 = v48;
  id v58 = v27;
  char v60 = v26;
  __int16 v49 = _Block_copy(aBlock);
  __int16 v28 = [(HMDHome *)self administratorHandler];
  if ([v28 shouldRelayMessages])
  {
    id v29 = encodeRootObject();
    v65[0] = @"HM.invitations";
    v65[1] = @"HMDHomeSuppressInviteNotificationKey";
    v66[0] = v29;
    uint64_t v30 = [NSNumber numberWithBool:v26];
    v66[1] = v30;
    id v44 = [NSDictionary dictionaryWithObjects:v66 forKeys:v65 count:2];

    uint64_t v31 = (void *)MEMORY[0x263F42590];
    v53[0] = MEMORY[0x263EF8330];
    v53[1] = 3221225472;
    v53[2] = __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_2;
    v53[3] = &unk_264A2E890;
    id location = &v56;
    objc_copyWeak(&v56, (id *)buf);
    id v54 = v27;
    id v32 = v43;
    id v55 = v32;
    id v33 = [v31 messageWithName:@"kAddHomeInvitesInternalRequestKey" messagePayload:v44 responseHandler:v53];
    id v34 = objc_alloc(MEMORY[0x263F42570]);
    id v35 = [(HMDHome *)self uuid];
    uint64_t v36 = (void *)[v34 initWithTarget:v35];

    [v33 setDestination:v36];
    [v33 setQualityOfService:33];
    id v52 = 0;
    __int16 v37 = [v28 operationForMessage:v33 error:&v52];
    id v38 = v52;
    uint64_t v39 = v38;
    if (v37)
    {
      objc_msgSend(v28, "addOperation:", v37, &v56);
    }
    else
    {
      id v40 = v38;
      if (!v38)
      {
        id v40 = objc_msgSend(MEMORY[0x263F087E8], "hmErrorWithCode:", 52, &v56);
      }
      objc_msgSend(v32, "respondWithError:", v40, location);
      if (!v39) {
    }
      }
    objc_destroyWeak(locationa);
  }
  else
  {
    v50[0] = MEMORY[0x263EF8330];
    v50[1] = 3221225472;
    v50[2] = __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_1543;
    v50[3] = &unk_264A2E288;
    id v51 = v49;
    [(HMDHome *)self _addOutgoingInvitations:v27 message:v43 transactionCompleted:v50];
    id v29 = v51;
  }

  objc_destroyWeak(&v59);
  objc_destroyWeak((id *)buf);
}

void __51__HMDHome__addUsersWithInviteInformations_message___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "__sendOutgoingInvitations:suppressHomeInviteNotification:", *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 48));
}

void __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_2(id *a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    id v20 = v6;
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = WeakRetained;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      BOOL v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      __int16 v28 = v11;
      __int16 v29 = 2112;
      uint64_t v30 = @"kAddHomeInvitesInternalRequestKey";
      __int16 v31 = 2112;
      id v32 = v5;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Relayed message %@ with error %@", buf, 0x20u);
    }
    id v21 = v5;

    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v12 = a1[4];
    uint64_t v13 = [v12 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v23;
      do
      {
        uint64_t v16 = 0;
        do
        {
          if (*(void *)v23 != v15) {
            objc_enumerationMutation(v12);
          }
          __int16 v17 = [*(id *)(*((void *)&v22 + 1) + 8 * v16) user];
          int v18 = [v17 accountHandle];
          uint64_t v19 = [v9 _outgoingInvitationForUserWithHandle:v18];

          [v19 notifyStateChangedForMessage:a1[5]];
          ++v16;
        }
        while (v14 != v16);
        uint64_t v14 = [v12 countByEnumeratingWithState:&v22 objects:v26 count:16];
      }
      while (v14);
    }

    id v5 = v21;
    [a1[5] respondWithPayload:0 error:v21];
    id v6 = v20;
  }
}

uint64_t __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_1543(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)__sendOutgoingInvitations:(id)a3 suppressHomeInviteNotification:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v6 = a3;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        -[HMDHome __sendOutgoingInvitation:shareURL:shareToken:suppressHomeInviteNotification:logEventBuilder:](self, *(void **)(*((void *)&v11 + 1) + 8 * v10++), 0, 0, v4, 0);
      }
      while (v8 != v10);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }
}

- (void)__sendOutgoingInvitation:(void *)a3 shareURL:(void *)a4 shareToken:(uint64_t)a5 suppressHomeInviteNotification:(void *)a6 logEventBuilder:
{
  if (a1)
  {
    id v11 = a6;
    id v12 = a4;
    id v13 = a3;
    id v15 = a2;
    long long v14 = [v15 user];
    [a1 _cleanRemovedUsers:v14];

    [a1 _sendInvitation:v15 message:0 shareURL:v13 shareToken:v12 suppressHomeInviteNotification:a5 logEventBuilder:v11];
  }
}

- (void)_fixupUsersWithoutMergeID
{
  id v3 = [(HMDHome *)self backingStore];
  BOOL v4 = [v3 context];

  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __36__HMDHome__fixupUsersWithoutMergeID__block_invoke;
  v6[3] = &unk_264A2F820;
  void v6[4] = self;
  id v7 = v4;
  id v5 = v4;
  [v5 performBlock:v6];
}

void __36__HMDHome__fixupUsersWithoutMergeID__block_invoke(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v1 = [*(id *)(a1 + 32) users];
  uint64_t v2 = [v1 countByEnumeratingWithState:&v38 objects:v48 count:16];
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)v39;
    *(void *)&long long v3 = 138543874;
    long long v34 = v3;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v39 != v6) {
          objc_enumerationMutation(v1);
        }
        uint64_t v8 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        uint64_t v9 = objc_msgSend(v8, "mergeIdentifier", v34);

        if (!v9)
        {
          uint64_t v10 = [v8 account];
          id v11 = [v10 senderCorrelationIdentifier];

          if (v11)
          {
            id v12 = [v8 uuid];
            id v13 = [*(id *)(a1 + 40) managedObjectContext];
            long long v14 = +[_MKFHome findHomeMemberWithUUID:v12 context:v13];

            id v15 = [v10 senderCorrelationIdentifier];
            [v14 setIdsMergeIdentifier:v15];

            ++v5;
          }
          else
          {
            uint64_t v16 = (void *)MEMORY[0x230FBD990]();
            id v17 = *(id *)(a1 + 32);
            int v18 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              uint64_t v19 = v35 = v5;
              id v20 = [v8 shortDescription];
              *(_DWORD *)buf = v34;
              id v43 = v19;
              __int16 v44 = 2112;
              id v45 = v20;
              __int16 v46 = 2112;
              uint64_t v47 = v10;
              _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Unable to fix up mergeID for user %@ with account %@", buf, 0x20u);

              uint64_t v5 = v35;
            }
          }
        }
      }
      uint64_t v4 = [v1 countByEnumeratingWithState:&v38 objects:v48 count:16];
    }
    while (v4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v21 = v5;

  long long v22 = (void *)MEMORY[0x230FBD990]();
  id v23 = *(id *)(a1 + 32);
  long long v24 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    long long v25 = HMFGetLogIdentifier();
    uint64_t v26 = [NSNumber numberWithInteger:v21];
    *(_DWORD *)buf = 138543618;
    id v43 = v25;
    __int16 v44 = 2112;
    id v45 = v26;
    _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Fixing up mergeIdentifier for %@ users", buf, 0x16u);
  }
  if (v21 >= 1)
  {
    id v27 = *(void **)(a1 + 40);
    id v37 = 0;
    char v28 = [v27 save:&v37];
    id v29 = v37;
    if ((v28 & 1) == 0)
    {
      uint64_t v30 = (void *)MEMORY[0x230FBD990]();
      id v31 = *(id *)(a1 + 32);
      id v32 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v43 = v33;
        __int16 v44 = 2112;
        id v45 = v29;
        _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_ERROR, "%{public}@Failed to save fixup mergeID for users: %@", buf, 0x16u);
      }
    }
  }
}

- (void)_auditAccessForUsers
{
  long long v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  if ([(HMDHome *)self isOwnerUser])
  {
    uint64_t v4 = [(HMDHome *)self usersSupportingPresence];
    uint64_t v5 = (void *)[v4 mutableCopy];

    uint64_t v6 = [(HMDHome *)self owner];
    [v5 removeObject:v6];

    if ([v5 count])
    {
      id v7 = objc_alloc(MEMORY[0x263F42520]);
      uint64_t v8 = [(HMDHome *)self workQueue];
      uint64_t v9 = (void *)[v7 initWithQueue:v8];

      void v14[5] = _HMFThreadLocalAsyncContextPush();
      uint64_t v10 = [(HMDHome *)self homeManager];
      id v11 = [v10 homeOwnerCloudShareManager];
      id v12 = [v11 auditAccessForUsers:v5 home:self];
      v14[0] = MEMORY[0x263EF8330];
      v14[1] = 3221225472;
      void v14[2] = __31__HMDHome__auditAccessForUsers__block_invoke;
      v14[3] = &unk_264A2BEF0;
      void v14[4] = self;
      id v13 = (id)[v12 then:v14];

      _HMFThreadLocalAsyncContextPop();
    }
  }
}

uint64_t __31__HMDHome__auditAccessForUsers__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v23 = v7;
    __int16 v24 = 2112;
    id v25 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Removing users that are no longer a participant in the share: %@", buf, 0x16u);
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v8 = v3;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v18;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v18 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void *)(*((void *)&v17 + 1) + 8 * v12);
        long long v14 = [*(id *)(a1 + 32) workQueue];
        v16[0] = MEMORY[0x263EF8330];
        v16[1] = 3221225472;
        void v16[2] = __31__HMDHome__auditAccessForUsers__block_invoke_1538;
        v16[3] = &unk_264A2F820;
        void v16[4] = *(void *)(a1 + 32);
        void v16[5] = v13;
        dispatch_async(v14, v16);

        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = [v8 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v10);
  }

  return 1;
}

uint64_t __31__HMDHome__auditAccessForUsers__block_invoke_1538(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeUser:*(void *)(a1 + 40)];
}

- (void)auditAccessForUsers
{
  id v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __30__HMDHome_auditAccessForUsers__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __30__HMDHome_auditAccessForUsers__block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    int v7 = 138543362;
    id v8 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Auditing shared users for home", (uint8_t *)&v7, 0xCu);
  }
  return [*(id *)(a1 + 32) _auditAccessForUsers];
}

- (void)_processUnsentOutgoingInvitations
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x263EFF980];
  uint64_t v4 = [(HMDHome *)self outgoingInvitations];
  id v5 = objc_msgSend(v3, "arrayWithCapacity:", objc_msgSend(v4, "count"));

  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v6 = [(HMDHome *)self outgoingInvitations];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        if ([(HMDHome *)self _shouldResendOutgoingInvitation:v11]) {
          [v5 addObject:v11];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v16 objects:v24 count:16];
    }
    while (v8);
  }

  if ([v5 count])
  {
    uint64_t v12 = (void *)MEMORY[0x230FBD990]();
    uint64_t v13 = self;
    long long v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v21 = v15;
      __int16 v22 = 2112;
      id v23 = v5;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Resending unsent outgoing invitations %@", buf, 0x16u);
    }
    [(HMDHome *)v13 _grantAccessAndSendOutgoingInvitation:v5 suppressHomeInviteNotification:1];
  }
}

- (void)resendOutgoingInvitationToUser:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __42__HMDHome_resendOutgoingInvitationToUser___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __42__HMDHome_resendOutgoingInvitationToUser___block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  char v2 = [*(id *)(a1 + 32) isCurrentDeviceConfirmedPrimaryResident];
  id v3 = (void *)MEMORY[0x230FBD990]();
  id v4 = *(id *)(a1 + 32);
  id v5 = HMFGetOSLogHandle();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v6)
    {
      uint64_t v7 = HMFGetLogIdentifier();
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      long long v16 = v7;
      __int16 v17 = 2112;
      uint64_t v18 = v8;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Resending outgoing invitation (if any) to %@ as prompted by shared user's HH2 upgrade", buf, 0x16u);
    }
    uint64_t v9 = [*(id *)(a1 + 32) outgoingInvitationToResendForUser:*(void *)(a1 + 40)];
    uint64_t v10 = (void *)v9;
    if (v9)
    {
      uint64_t v11 = *(void **)(a1 + 32);
      uint64_t v14 = v9;
      uint64_t v12 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v14 count:1];
      [v11 _grantAccessAndSendOutgoingInvitation:v12 suppressHomeInviteNotification:1];
    }
  }
  else
  {
    if (v6)
    {
      uint64_t v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v16 = v13;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Not resending outgoing invitations as this is not the primary resident.", buf, 0xCu);
    }
  }
}

- (void)_grantAccessAndSendOutgoingInvitation:(id)a3 suppressHomeInviteNotification:(BOOL)a4
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v5 = a3;
  if (!v5) {
    _HMFPreconditionFailure();
  }
  BOOL v6 = v5;
  objc_initWeak(&location, self);
  uint64_t v7 = [MEMORY[0x263F42538] futureWithNoValue];
  id v8 = objc_alloc(MEMORY[0x263F42520]);
  uint64_t v9 = [(HMDHome *)self workQueue];
  id v27 = (void *)[v8 initWithQueue:v9];

  uint64_t v41 = _HMFThreadLocalAsyncContextPush();
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  obuint64_t j = v6;
  uint64_t v10 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v38;
    while (2)
    {
      uint64_t v12 = 0;
      uint64_t v13 = v7;
      do
      {
        if (*(void *)v38 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void **)(*((void *)&v37 + 1) + 8 * v12);
        if (![(HMDHome *)self isCurrentDevicePrimaryResident])
        {
          uint64_t v21 = (void *)MEMORY[0x230FBD990]();
          __int16 v22 = self;
          HMFGetOSLogHandle();
          id v23 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            __int16 v24 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543362;
            __int16 v44 = v24;
            _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@Current device is no longer primary, aborting the sending of outgoing invitations.", buf, 0xCu);
          }
          uint64_t v7 = v13;
          goto LABEL_14;
        }
        id v15 = [HMDSharedUserInviteOwnerSendLogEventBuilder alloc];
        long long v16 = [v14 identifier];
        __int16 v17 = [v14 user];
        uint64_t v18 = -[HMDSharedUserInviteOwnerSendLogEventBuilder initWithHome:sessionIdentifier:invitationType:](v15, "initWithHome:sessionIdentifier:invitationType:", self, v16, [v17 privilege]);

        [(HMDHome *)self addSharedUserEventBuilder:v18];
        uint64_t v19 = [MEMORY[0x263EFF910] now];
        [v14 setDateSent:v19];

        v33[0] = MEMORY[0x263EF8330];
        v33[1] = 3221225472;
        void v33[2] = __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke;
        v33[3] = &unk_264A16A68;
        objc_copyWeak(&v35, &location);
        v33[4] = v14;
        long long v20 = v18;
        long long v34 = v20;
        BOOL v36 = a4;
        uint64_t v7 = [v13 then:v33];

        objc_destroyWeak(&v35);
        ++v12;
        uint64_t v13 = v7;
      }
      while (v10 != v12);
      uint64_t v10 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  v30[0] = MEMORY[0x263EF8330];
  v30[1] = 3221225472;
  void v30[2] = __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1536;
  v30[3] = &unk_264A16A90;
  objc_copyWeak(&v32, &location);
  id v25 = obj;
  id v31 = v25;
  id v26 = (id)[v7 then:v30];

  objc_destroyWeak(&v32);
  _HMFThreadLocalAsyncContextPop();

  objc_destroyWeak(&location);
}

uint64_t __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  id v39 = a2;
  id v3 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v49 = 0;
  __int16 v50 = &v49;
  uint64_t v51 = 0x3032000000;
  id v52 = __Block_byref_object_copy__14257;
  id v53 = __Block_byref_object_dispose__14258;
  id v54 = 0;
  id v5 = [WeakRetained backingStore];
  BOOL v6 = [v5 context];
  v48[0] = MEMORY[0x263EF8330];
  v48[1] = 3221225472;
  void v48[2] = __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_2;
  v48[3] = &unk_264A2F698;
  v48[4] = *(void *)(a1 + 32);
  v48[5] = WeakRetained;
  v48[6] = &v49;
  [v6 unsafeSynchronousBlock:v48];

  uint64_t v7 = [(id)v50[5] shareURL];

  if (v7)
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = WeakRetained;
    HMFGetOSLogHandle();
    uint64_t v10 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v12 = [*(id *)(a1 + 32) user];
      *(_DWORD *)buf = 138543618;
      id v56 = v11;
      __int16 v57 = 2112;
      id v58 = v12;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Resending invite, user already granted access %@", buf, 0x16u);
    }
    [*(id *)(a1 + 40) markUserAlreadyAddedToShare];
    uint64_t v13 = *(void **)(a1 + 32);
    uint64_t v14 = [(id)v50[5] shareURL];
    -[HMDHome __sendOutgoingInvitation:shareURL:shareToken:suppressHomeInviteNotification:logEventBuilder:](v9, v13, v14, (void *)v50[5], *(unsigned __int8 *)(a1 + 56), *(void **)(a1 + 40));
    uint64_t v15 = 1;
  }
  else
  {
    long long v16 = (void *)v50[5];
    if (v16)
    {
      __int16 v17 = [v16 shareURL];
      BOOL v18 = v17 == 0;

      if (v18)
      {
        uint64_t v19 = (void *)MEMORY[0x230FBD990]();
        id v20 = WeakRetained;
        HMFGetOSLogHandle();
        uint64_t v21 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          id v22 = (id)objc_claimAutoreleasedReturnValue();
          id v23 = [*(id *)(a1 + 32) user];
          *(_DWORD *)buf = 138543618;
          id v56 = v22;
          __int16 v57 = 2112;
          id v58 = v23;
          _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@nil shareURL on share token, will attempt to re-grant access for user: %@", buf, 0x16u);
        }
      }
    }
    __int16 v24 = (void *)MEMORY[0x230FBD990]();
    id v25 = WeakRetained;
    HMFGetOSLogHandle();
    id v26 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v27 = (id)objc_claimAutoreleasedReturnValue();
      char v28 = [*(id *)(a1 + 32) user];
      *(_DWORD *)buf = 138543618;
      id v56 = v27;
      __int16 v57 = 2112;
      id v58 = v28;
      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Granting share access for user %@", buf, 0x16u);
    }
    uint64_t v14 = [v25 homeManager];
    id v29 = [v14 homeOwnerCloudShareManager];
    uint64_t v30 = [*(id *)(a1 + 32) user];
    id v31 = [v29 grantAccessForUser:v30 home:v25 logEventBuilder:*(void *)(a1 + 40)];
    v43[0] = MEMORY[0x263EF8330];
    v43[1] = 3221225472;
    v43[2] = __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1532;
    v43[3] = &unk_264A16A18;
    objc_copyWeak(&v46, (id *)(a1 + 48));
    id v32 = (id *)(a1 + 40);
    id v33 = *(id *)(a1 + 40);
    uint64_t v35 = *(void *)(a1 + 32);
    uint64_t v34 = a1 + 32;
    id v44 = v33;
    uint64_t v45 = v35;
    char v47 = *(unsigned char *)(v34 + 24);
    v40[0] = MEMORY[0x263EF8330];
    v40[1] = 3221225472;
    void v40[2] = __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1535;
    void v40[3] = &unk_264A16A40;
    objc_copyWeak(&v42, v3);
    v40[4] = *(void *)v34;
    id v41 = *v32;
    id v36 = [v31 then:v43 orRecover:v40];
    if (!v36)
    {
      _HMFPreconditionFailure();
      __break(1u);
    }
    long long v37 = v36;

    objc_destroyWeak(&v42);
    objc_destroyWeak(&v46);

    uint64_t v15 = 3;
  }

  _Block_object_dispose(&v49, 8);
  return v15;
}

uint64_t __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1536(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v6 = *(id *)(a1 + 32);
    uint64_t v7 = [v6 countByEnumeratingWithState:&v21 objects:v27 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v22;
      while (2)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v22 != v9) {
            objc_enumerationMutation(v6);
          }
          id v11 = [*(id *)(*((void *)&v21 + 1) + 8 * i) dateSent];

          if (!v11)
          {
            uint64_t v12 = (void *)MEMORY[0x230FBD990]();
            id v13 = WeakRetained;
            uint64_t v14 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              uint64_t v15 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543362;
              id v26 = v15;
              _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@At least one invite appears to have not been sent, scheduling resend", buf, 0xCu);
            }
            dispatch_time_t v16 = dispatch_time(0, 300000000000);
            __int16 v17 = [v13 workQueue];
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1537;
            block[3] = &unk_264A2C170;
            objc_copyWeak(&v20, v4);
            dispatch_after(v16, v17, block);

            objc_destroyWeak(&v20);
            goto LABEL_14;
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v21 objects:v27 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
LABEL_14:
  }
  return 1;
}

void __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1537(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _processUnsentOutgoingInvitations];
}

void __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_2(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  char v2 = [*(id *)(a1 + 32) identifier];
  id v3 = +[HMCContext findOutgoingInvitationWithModelID:v2];

  if (v3)
  {
    uint64_t v4 = [v3 shareToken];
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = *(id *)(a1 + 40);
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      id v11 = [*(id *)(a1 + 32) identifier];
      int v12 = 138543618;
      id v13 = v10;
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Unable to find outgoing invitation with UUID %@", (uint8_t *)&v12, 0x16u);
    }
  }
}

uint64_t __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1532(uint64_t a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v5 = [v3 token];
    id v6 = v5;
    if (v5 && ([v5 shareURL], uint64_t v7 = objc_claimAutoreleasedReturnValue(), v7, v7))
    {
      id v8 = [WeakRetained backingStore];
      uint64_t v9 = [v8 context];
      v30[0] = MEMORY[0x263EF8330];
      v30[1] = 3221225472;
      void v30[2] = __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1533;
      v30[3] = &unk_264A2F2F8;
      void v30[4] = *(void *)(a1 + 40);
      v30[5] = WeakRetained;
      id v31 = v6;
      [v9 unsafeSynchronousBlock:v30];

      char v10 = [WeakRetained isCurrentDevicePrimaryResident];
      id v11 = (void *)MEMORY[0x230FBD990]();
      id v12 = WeakRetained;
      id v13 = HMFGetOSLogHandle();
      __int16 v14 = v13;
      if (v10)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          uint64_t v15 = HMFGetLogIdentifier();
          uint64_t v16 = [*(id *)(a1 + 40) user];
          *(_DWORD *)buf = 138543618;
          id v33 = v15;
          __int16 v34 = 2112;
          uint64_t v35 = v16;
          _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Sending outgoing invite for user %@", buf, 0x16u);
        }
        __int16 v17 = *(void **)(a1 + 40);
        BOOL v18 = [v3 url];
        uint64_t v19 = [v3 token];
        -[HMDHome __sendOutgoingInvitation:shareURL:shareToken:suppressHomeInviteNotification:logEventBuilder:](v12, v17, v18, v19, *(unsigned __int8 *)(a1 + 56), *(void **)(a1 + 32));
      }
      else
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          id v27 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          id v33 = v27;
          _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Current device is no longer primary after granting share access, do not send outgoing invitation from here.", buf, 0xCu);
        }
        uint64_t v28 = *(void **)(a1 + 32);
        BOOL v18 = [MEMORY[0x263F087E8] hmInternalErrorWithCode:3202];
        [v28 markError:v18];
      }
    }
    else
    {
      id v20 = (void *)MEMORY[0x230FBD990]();
      id v21 = WeakRetained;
      long long v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        long long v23 = HMFGetLogIdentifier();
        long long v24 = [v6 shareURL];
        *(_DWORD *)buf = 138543874;
        id v33 = v23;
        __int16 v34 = 2112;
        uint64_t v35 = v6;
        __int16 v36 = 2112;
        long long v37 = v24;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Nil token (%@) and/or shareURL (%@) on share invitation, not saving token, not sending outgoing invitation", buf, 0x20u);
      }
      id v25 = *(void **)(a1 + 32);
      id v26 = [MEMORY[0x263F087E8] hmInternalErrorWithCode:3501];
      [v25 markError:v26];
    }
  }
  else
  {
    [*(id *)(a1 + 32) cancel];
  }

  return 1;
}

uint64_t __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1535(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = (void *)MEMORY[0x230FBD990]([*(id *)(a1 + 32) setDateSent:0]);
  id v6 = WeakRetained;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    id v8 = HMFGetLogIdentifier();
    uint64_t v9 = [*(id *)(a1 + 32) user];
    int v13 = 138543874;
    __int16 v14 = v8;
    __int16 v15 = 2112;
    uint64_t v16 = v9;
    __int16 v17 = 2112;
    id v18 = v3;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to add user %@ to share with error %@", (uint8_t *)&v13, 0x20u);
  }
  char v10 = *(void **)(a1 + 40);
  id v11 = [MEMORY[0x263F087E8] hmInternalErrorWithCode:3502 underlyingError:v3];
  [v10 markError:v11];

  return 1;
}

void __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1533(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  char v2 = [*(id *)(a1 + 32) identifier];
  id v3 = +[HMCContext findOutgoingInvitationWithModelID:v2];

  if (v3)
  {
    [v3 setShareToken:*(void *)(a1 + 48)];
    uint64_t v4 = +[HMCContext currentContext];
    [v4 save];
  }
  else
  {
    uint64_t v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = *(id *)(a1 + 40);
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      uint64_t v9 = [*(id *)(a1 + 32) identifier];
      int v10 = 138543618;
      id v11 = v8;
      __int16 v12 = 2112;
      int v13 = v9;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@After granting share, unable to find outgoing invitation with UUID %@", (uint8_t *)&v10, 0x16u);
    }
  }
}

- (void)_handleRemoveOutgoingHomeInvitationModel:(id)a3 message:(id)a4
{
  id v12 = a4;
  id v6 = [a3 uuid];
  uint64_t v7 = [(HMDHome *)self outgoingInvitationWithUUID:v6];

  if (v7)
  {
    [(HMDHome *)self removeOutgoingInvitation:v7];
    id v8 = [v12 transactionResult];
    [v8 markChanged];
    uint64_t v9 = [v7 user];
    int v10 = [v9 uuid];
    id v11 = [(HMDHome *)self userWithUUID:v10];

    if (v11)
    {
      [(HMDHome *)self __handleCompletedOutgoingInvitation:v7];
    }
    else
    {
      if ([v8 source] == 2 || objc_msgSend(v8, "source") == 3) {
        [v7 cancel];
      }
      else {
        [(HMDHome *)self __handleCancelledOutgoingInvitation:v7];
      }
      [v7 updateInvitationState:1];
    }
  }
  [v12 respondWithPayload:0];
}

- (void)_handleAddOutgoingHomeInvitationModel:(id)a3 message:(id)a4
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 uuid];
  uint64_t v9 = [(HMDHome *)self outgoingInvitationWithUUID:v8];

  if (!v9)
  {
    int v10 = [(HMDHome *)self userFromOutgoingInvitationModel:v6];
    [v10 refreshDisplayName];
    id v11 = [HMDOutgoingHomeInvitation alloc];
    id v12 = [v6 uuid];
    int v13 = [v6 invitationState];
    uint64_t v14 = [v13 integerValue];
    __int16 v15 = [v6 expiryDate];
    uint64_t v16 = [(HMDOutgoingHomeInvitation *)v11 initWithUUID:v12 invitee:v10 invitationState:v14 forHome:self expiryDate:v15 messageIdentifier:0];

    __int16 v17 = (void *)MEMORY[0x230FBD990]();
    id v18 = self;
    uint64_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      id v20 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138544130;
      __int16 v36 = v20;
      __int16 v37 = 2112;
      uint64_t v38 = v10;
      __int16 v39 = 2112;
      uint64_t v40 = 0;
      __int16 v41 = 2112;
      id v42 = v16;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Created user [%@] from outgoing invitation: %@ / %@", buf, 0x2Au);
    }
    id v21 = objc_alloc(MEMORY[0x263F42568]);
    long long v22 = [MEMORY[0x263F42570] allMessageDestinations];
    long long v23 = (void *)[v21 initWithName:@"kTransactionUpdate" destination:v22 payload:0];
    [(HMDOutgoingHomeInvitation *)v16 transactionObjectUpdated:0 newValues:v6 message:v23];

    long long v24 = [(HMDHome *)v18 workQueue];
    [(HMDHomeInvitation *)v16 setClientQueue:v24];

    objc_initWeak((id *)buf, v18);
    objc_initWeak(&location, v16);
    uint64_t v27 = MEMORY[0x263EF8330];
    uint64_t v28 = 3221225472;
    id v29 = __57__HMDHome__handleAddOutgoingHomeInvitationModel_message___block_invoke;
    uint64_t v30 = &unk_264A2CBC0;
    objc_copyWeak(&v32, (id *)buf);
    objc_copyWeak(&v33, &location);
    id v25 = v7;
    id v31 = v25;
    [(HMDHomeInvitation *)v16 setExpirationHandler:&v27];
    -[HMDHome addOutgoingInvitation:](v18, "addOutgoingInvitation:", v16, v27, v28, v29, v30);
    [(HMDHome *)v18 _cleanRemovedUsers:v10];
    id v26 = [v25 transactionResult];
    [v26 markChanged];

    objc_destroyWeak(&v33);
    objc_destroyWeak(&v32);
    objc_destroyWeak(&location);
    objc_destroyWeak((id *)buf);
  }
}

void __57__HMDHome__handleAddOutgoingHomeInvitationModel_message___block_invoke(id *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  id v3 = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    uint64_t v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = WeakRetained;
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      id v8 = [v3 identifier];
      int v10 = 138543618;
      id v11 = v7;
      __int16 v12 = 2112;
      int v13 = v8;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Expiring invitation %@", (uint8_t *)&v10, 0x16u);
    }
    [v5 removeOutgoingInvitation:v3];
    objc_msgSend(v5, "__handleCancelledOutgoingInvitation:", v3);
    objc_msgSend(v3, "updateInvitationState:", objc_msgSend(v3, "invitationState"));
    uint64_t v9 = [a1[4] name];
    [v5 saveWithReason:v9 postSyncNotification:0];
  }
}

- (id)userFromOutgoingInvitationModel:(id)a3
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 pendingUserUUID];
  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    int v10 = NSNumber;
    id v11 = [(HMDHome *)v7 pendingUsers];
    __int16 v12 = objc_msgSend(v10, "numberWithUnsignedInteger:", objc_msgSend(v11, "count"));
    int v29 = 138544130;
    uint64_t v30 = v9;
    __int16 v31 = 2112;
    id v32 = v5;
    __int16 v33 = 2112;
    __int16 v34 = v12;
    __int16 v35 = 2112;
    id v36 = v4;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@pending User UUID : %@ / %@ / %@", (uint8_t *)&v29, 0x2Au);
  }
  if (v5)
  {
    int v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = v7;
    __int16 v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      int v29 = 138543618;
      uint64_t v30 = v16;
      __int16 v31 = 2112;
      id v32 = v5;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Going to find existing pending user with UUID: %@", (uint8_t *)&v29, 0x16u);
    }
    __int16 v17 = [(HMDHome *)v14 pendingUsers];
    id v18 = objc_msgSend(v17, "hmf_firstObjectWithUUID:", v5);

    uint64_t v19 = (void *)MEMORY[0x230FBD990]();
    id v20 = v14;
    id v21 = HMFGetOSLogHandle();
    long long v22 = v21;
    if (v18)
    {
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_INFO)) {
        goto LABEL_15;
      }
      long long v23 = HMFGetLogIdentifier();
      int v29 = 138543618;
      uint64_t v30 = v23;
      __int16 v31 = 2112;
      id v32 = v18;
      long long v24 = "%{public}@Found the pending user from the list. Going to use it : %@";
      goto LABEL_14;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      id v25 = HMFGetLogIdentifier();
      int v29 = 138543618;
      uint64_t v30 = v25;
      __int16 v31 = 2112;
      id v32 = v5;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Did not find existing pending user with UUID: %@. Will go ahead and create a brand new user with random UUID", (uint8_t *)&v29, 0x16u);
    }
  }
  id v26 = [v4 user];
  id v18 = +[HMDUser userWithDictionary:v26];

  uint64_t v19 = (void *)MEMORY[0x230FBD990]([v18 setHome:v7]);
  uint64_t v27 = v7;
  long long v22 = HMFGetOSLogHandle();
  if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO)) {
    goto LABEL_15;
  }
  long long v23 = HMFGetLogIdentifier();
  int v29 = 138543618;
  uint64_t v30 = v23;
  __int16 v31 = 2112;
  id v32 = v18;
  long long v24 = "%{public}@No Pending user found for the invite. Creating a brand new user : %@";
LABEL_14:
  _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, v24, (uint8_t *)&v29, 0x16u);

LABEL_15:

  return v18;
}

- (void)_handleUserInvitations:(id)a3
{
  v96[2] = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self residentDeviceManager];
  id v6 = [v5 availableResidentDevices];
  uint64_t v7 = [v6 count];

  if (!v7)
  {
    id v46 = (void *)MEMORY[0x230FBD990]();
    char v47 = self;
    __int16 v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      uint64_t v49 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v91 = v49;
      _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_ERROR, "%{public}@Failed to invite user(s), no resident devices in home", buf, 0xCu);
    }
    id v8 = [MEMORY[0x263F087E8] hmErrorWithCode:91];
    [v4 respondWithError:v8];
    goto LABEL_46;
  }
  id v8 = [v4 dataForKey:*MEMORY[0x263F0CF30]];
  if (!v8)
  {
    __int16 v50 = (void *)MEMORY[0x230FBD990]();
    uint64_t v51 = self;
    id v52 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      id v53 = HMFGetLogIdentifier();
      id v54 = [v4 messagePayload];
      *(_DWORD *)buf = 138543618;
      __int16 v91 = v53;
      __int16 v92 = 2112;
      uint64_t v93 = (uint64_t)v54;
      _os_log_impl(&dword_22F52A000, v52, OS_LOG_TYPE_ERROR, "%{public}@Failed to send invitations, missing user invite information: %@", buf, 0x16u);
    }
    id v14 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:3 userInfo:0];
    [v4 respondWithError:v14];
    goto LABEL_45;
  }
  uint64_t v9 = (void *)MEMORY[0x263F08928];
  int v10 = (void *)MEMORY[0x263EFFA08];
  v96[0] = objc_opt_class();
  v96[1] = objc_opt_class();
  id v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:v96 count:2];
  __int16 v12 = [v10 setWithArray:v11];
  id v88 = 0;
  int v13 = [v9 unarchivedObjectOfClasses:v12 fromData:v8 error:&v88];
  id v14 = v88;

  __int16 v15 = (void *)MEMORY[0x230FBD990]();
  uint64_t v16 = self;
  __int16 v17 = HMFGetOSLogHandle();
  id v18 = v17;
  if (!v13)
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v55 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v91 = v55;
      __int16 v92 = 2112;
      uint64_t v93 = (uint64_t)v14;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode user invite information: %@", buf, 0x16u);
    }
    id v56 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:3 userInfo:0];
    [v4 respondWithError:v56];

    goto LABEL_44;
  }
  id v81 = v14;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = HMFGetLogIdentifier();
    id v20 = [(HMDHome *)v16 users];
    uint64_t v21 = [v20 count];
    *(_DWORD *)buf = 138543874;
    __int16 v91 = v19;
    __int16 v92 = 2048;
    uint64_t v93 = v21;
    __int16 v94 = 2048;
    id v95 = getHMMaximumUsersPerHome;
    _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Adding users; current user count is %ld and max is %ld",
      buf,
      0x20u);
  }
  long long v22 = [(HMDHome *)v16 users];
  uint64_t v23 = [v22 count];
  unint64_t v24 = [v13 count] + v23;
  id v25 = v13;
  unint64_t v26 = maximumUsersPerHome;

  if (v24 >= v26)
  {
    int v13 = v25;
    __int16 v57 = (void *)MEMORY[0x230FBD990]();
    id v58 = v16;
    uint64_t v59 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
    {
      char v60 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v91 = v60;
      _os_log_impl(&dword_22F52A000, v59, OS_LOG_TYPE_INFO, "%{public}@Can't add users; already at maximum users for home",
        buf,
        0xCu);
    }
    long long v61 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:49 userInfo:0];
    long long v62 = [v4 responseHandler];
    ((void (**)(void, void *, void))v62)[2](v62, v61, 0);

    id v14 = v81;
    goto LABEL_44;
  }
  __int16 v79 = v25;
  id v80 = v4;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  obuint64_t j = v25;
  uint64_t v27 = [obj countByEnumeratingWithState:&v84 objects:v89 count:16];
  if (!v27) {
    goto LABEL_23;
  }
  uint64_t v28 = v27;
  uint64_t v29 = *(void *)v85;
  id v78 = v8;
  while (2)
  {
    for (uint64_t i = 0; i != v28; ++i)
    {
      if (*(void *)v85 != v29) {
        objc_enumerationMutation(obj);
      }
      __int16 v31 = *(void **)(*((void *)&v84 + 1) + 8 * i);
      id v32 = (void *)MEMORY[0x230FBD990]();
      __int16 v33 = v16;
      __int16 v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        __int16 v35 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        __int16 v91 = v35;
        __int16 v92 = 2112;
        uint64_t v93 = (uint64_t)v31;
        _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_INFO, "%{public}@Processing invite information : %@", buf, 0x16u);
      }
      id v36 = [v31 userID];
      uint64_t v37 = [(HMDHome *)v33 users];
      uint64_t v38 = objc_msgSend(v37, "hmf_firstObjectWithValue:forKeyPath:", v36, @"userID");

      if (v38)
      {
        long long v63 = (void *)MEMORY[0x230FBD990]();
        long long v64 = v33;
        long long v65 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
        {
          uint64_t v66 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          __int16 v91 = v66;
          __int16 v92 = 2112;
          uint64_t v93 = (uint64_t)v36;
          __int16 v67 = "%{public}@Failed to invite user %@ since the user is already part of the home";
LABEL_40:
          _os_log_impl(&dword_22F52A000, v65, OS_LOG_TYPE_INFO, v67, buf, 0x16u);
        }
LABEL_41:

        id v68 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:1 userInfo:0];
        id v4 = v80;
        __int16 v69 = [v80 responseHandler];
        v69[2](v69, v68, 0);

        goto LABEL_42;
      }
      __int16 v39 = [(HMDHome *)v33 outgoingInvitations];
      uint64_t v38 = objc_msgSend(v39, "hmf_firstObjectWithValue:forKeyPath:", v36, @"user.userID");

      if (v38)
      {
        long long v63 = (void *)MEMORY[0x230FBD990]();
        long long v64 = v33;
        long long v65 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
        {
          uint64_t v66 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          __int16 v91 = v66;
          __int16 v92 = 2112;
          uint64_t v93 = (uint64_t)v36;
          __int16 v67 = "%{public}@Failed to invite user %@ since the user is already invited to the home";
          goto LABEL_40;
        }
        goto LABEL_41;
      }
      if ([v31 isAdministrator]
        && ![(HMDHome *)v33 isResidentSupported])
      {
        uint64_t v70 = (void *)MEMORY[0x230FBD990]();
        uint64_t v71 = v33;
        uint64_t v72 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
        {
          uint64_t v73 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          __int16 v91 = v73;
          __int16 v92 = 2112;
          uint64_t v93 = (uint64_t)v36;
          _os_log_impl(&dword_22F52A000, v72, OS_LOG_TYPE_INFO, "%{public}@Cannot invite admin user %@ because it requires a resident", buf, 0x16u);
        }
        uint64_t v38 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:48 userInfo:0];
        id v4 = v80;
        id v68 = [v80 responseHandler];
        ((void (**)(void, void *, void))v68)[2](v68, v38, 0);
LABEL_42:

LABEL_43:
        id v14 = v81;
        int v13 = v79;

        id v8 = v78;
        goto LABEL_44;
      }
      if ([v31 isRestrictedGuest])
      {
        uint64_t v40 = [v31 restrictedGuestHomeAccessSettings];
        __int16 v41 = [v40 identifiersOfAccessAllowedToAccessories];
        uint64_t v42 = [v41 count];

        if (v42)
        {
          uint64_t v43 = [v31 restrictedGuestHomeAccessSettings];
          id v44 = [v43 identifiersOfAccessAllowedToAccessories];
          v83[0] = MEMORY[0x263EF8330];
          v83[1] = 3221225472;
          v83[2] = __34__HMDHome__handleUserInvitations___block_invoke;
          v83[3] = &unk_264A2F348;
          v83[4] = v33;
          char v45 = objc_msgSend(v44, "na_all:", v83);

          if ((v45 & 1) == 0)
          {
            id v74 = (void *)MEMORY[0x230FBD990]();
            uint64_t v75 = v33;
            uint64_t v76 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
            {
              id v77 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543362;
              __int16 v91 = v77;
              _os_log_impl(&dword_22F52A000, v76, OS_LOG_TYPE_ERROR, "%{public}@Failed to invite guest user as could not find all the accessories in the home.", buf, 0xCu);
            }
            uint64_t v38 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2903];
            id v4 = v80;
            [v80 respondWithError:v38];
            goto LABEL_43;
          }
        }
      }
    }
    uint64_t v28 = [obj countByEnumeratingWithState:&v84 objects:v89 count:16];
    id v8 = v78;
    if (v28) {
      continue;
    }
    break;
  }
LABEL_23:

  id v4 = v80;
  [(HMDHome *)v16 _addUsersWithInviteInformations:obj message:v80];
  id v14 = v81;
  int v13 = v79;
LABEL_44:

LABEL_45:
LABEL_46:
}

BOOL __34__HMDHome__handleUserInvitations___block_invoke(uint64_t a1, uint64_t a2)
{
  char v2 = [*(id *)(a1 + 32) accessoryWithUUID:a2];
  BOOL v3 = v2 != 0;

  return v3;
}

- (void)_cleanRemovedUsers:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [MEMORY[0x263EFF980] array];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v6 = [(HMDHome *)self removedUsers];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if ([v11 isEqualToUser:v4]) {
          [v5 addObject:v11];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }

  __int16 v12 = [(HMDHome *)self removedUsers];
  [v12 removeObjectsInArray:v5];
}

- (void)_addAllUsersToAccessory:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self users];
  [(HMDHome *)self _addUsers:v5 accessory:v4];
}

- (void)removeAllUsersAndCloudDataFromAccessory:(id)a3 completionHandler:(id)a4
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = [(HMDHome *)self isOwnerUser];
  uint64_t v9 = (void *)MEMORY[0x230FBD990]();
  int v10 = self;
  id v11 = HMFGetOSLogHandle();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
  if (v8)
  {
    if (v12)
    {
      long long v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v33 = v13;
      __int16 v34 = 2112;
      id v35 = v6;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Removing cloud data from primary accessory %@", buf, 0x16u);
    }
    id v14 = v6;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      long long v15 = v14;
    }
    else {
      long long v15 = 0;
    }
    id v16 = v15;

    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    __int16 v17 = objc_msgSend(v16, "identifiersForBridgedAccessories", 0);
    uint64_t v18 = [v17 countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)v28;
      do
      {
        uint64_t v21 = 0;
        do
        {
          if (*(void *)v28 != v20) {
            objc_enumerationMutation(v17);
          }
          long long v22 = [(HMDHome *)v10 accessoryWithUUID:*(void *)(*((void *)&v27 + 1) + 8 * v21)];
          [v22 removeCloudData];

          ++v21;
        }
        while (v19 != v21);
        uint64_t v19 = [v17 countByEnumeratingWithState:&v27 objects:v31 count:16];
      }
      while (v19);
    }

    uint64_t v23 = (void *)MEMORY[0x230FBD990]([v14 removeCloudData]);
    +[HMDBackgroundOperationManagerHelper removeAllUsersFromAccessory:v14 withCompletionHandler:v7];
  }
  else
  {
    if (v12)
    {
      unint64_t v24 = HMFGetLogIdentifier();
      id v25 = [v6 shortDescription];
      *(_DWORD *)buf = 138543618;
      __int16 v33 = v24;
      __int16 v34 = 2112;
      id v35 = v25;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Not owner of home - bypassing removing users from accessory %@", buf, 0x16u);
    }
    unint64_t v26 = _Block_copy(v7);
    id v16 = v26;
    if (v26) {
      (*((void (**)(void *))v26 + 2))(v26);
    }
  }
}

- (BOOL)_isUserValid:(id)a3 error:(id *)a4
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = v6;
  if (!v6)
  {
    if (a4)
    {
      int v10 = (void *)MEMORY[0x263F087E8];
      id v11 = @"Missing required parameter to validate user";
      uint64_t v12 = 3;
LABEL_10:
      [v10 hmErrorWithCode:v12 description:v11 reason:0 suggestion:0];
      BOOL v9 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_12;
    }
LABEL_11:
    BOOL v9 = 0;
    goto LABEL_12;
  }
  BOOL v8 = [v6 pairingIdentity];

  if (!v8)
  {
    long long v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = self;
    long long v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      __int16 v17 = [v7 userID];
      int v19 = 138543618;
      uint64_t v20 = v16;
      __int16 v21 = 2112;
      long long v22 = v17;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Invalid user '%@', missing either pairing username or public key", (uint8_t *)&v19, 0x16u);
    }
    if (a4)
    {
      int v10 = (void *)MEMORY[0x263F087E8];
      id v11 = @"Invalid user information";
      uint64_t v12 = 21;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  BOOL v9 = 1;
LABEL_12:

  return v9;
}

- (BOOL)_verifyUserManagementPermissionForAccessory:(id)a3 error:(id *)a4
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v6 = a3;
  if (![(HMDHome *)self isAdminUser])
  {
    BOOL v8 = (void *)MEMORY[0x230FBD990]();
    BOOL v9 = self;
    int v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v27 = v11;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Non administrator cannot perform user management", buf, 0xCu);
    }
    if (a4)
    {
      [MEMORY[0x263F087E8] hmErrorWithCode:17 description:@"Must be administrator to perform user management" reason:0 suggestion:0];
      BOOL v7 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
LABEL_12:
    BOOL v7 = 0;
    goto LABEL_13;
  }
  if (([v6 supportsUserManagement] & 1) == 0)
  {
    uint64_t v12 = (void *)MEMORY[0x230FBD990]();
    long long v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      long long v15 = HMFGetLogIdentifier();
      id v16 = [v6 name];
      *(_DWORD *)buf = 138543618;
      long long v27 = v15;
      __int16 v28 = 2112;
      long long v29 = v16;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Cannot perform user management on '%@' since it is does not support user management operations", buf, 0x16u);
    }
    if (a4)
    {
      v24[0] = *MEMORY[0x263F08320];
      __int16 v17 = NSString;
      uint64_t v18 = [v6 name];
      int v19 = [v17 stringWithFormat:@"Cannot perform user management on '%@'", v18];
      v25[0] = v19;
      v24[1] = *MEMORY[0x263F08338];
      uint64_t v20 = [MEMORY[0x263F086E0] mainBundle];
      __int16 v21 = [v20 localizedStringForKey:@"Accessory is not a primary accessory." value:&stru_26E2EB898 table:0];
      v25[1] = v21;
      long long v22 = [NSDictionary dictionaryWithObjects:v25 forKeys:v24 count:2];

      *a4 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:48 userInfo:v22];
    }
    goto LABEL_12;
  }
  BOOL v7 = 1;
LABEL_13:

  return v7;
}

- (void)_purgeResidentUsers
{
  char v2 = self;
  uint64_t v32 = *MEMORY[0x263EF8340];
  BOOL v3 = [(HMDHome *)self residentCapableDevices];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v4 = [(HMDHome *)v2 _residentUsers];
  id v5 = (void *)[v4 copy];

  uint64_t v22 = [v5 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v22)
  {
    uint64_t v7 = *(void *)v24;
    BOOL v8 = HMDAppleMediaProfile;
    *(void *)&long long v6 = 138543618;
    long long v20 = v6;
    uint64_t v21 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (*(void *)v24 != v7) {
          objc_enumerationMutation(v5);
        }
        int v10 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        id v11 = objc_msgSend(v10, "userID", v20);
        uint64_t v12 = [&v8[77] deviceWithDestination:v11];

        if (v12 && [v3 containsObject:v12])
        {
          long long v13 = (void *)MEMORY[0x230FBD990]();
          id v14 = v2;
          long long v15 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            id v16 = v5;
            __int16 v17 = v3;
            v19 = uint64_t v18 = v2;
            *(_DWORD *)buf = v20;
            __int16 v28 = v19;
            __int16 v29 = 2112;
            uint64_t v30 = v10;
            _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Removing non-legacy resident user from home: %@", buf, 0x16u);

            char v2 = v18;
            BOOL v3 = v17;
            id v5 = v16;
            uint64_t v7 = v21;
          }

          [(HMDHome *)v14 _removeUser:v10];
          BOOL v8 = HMDAppleMediaProfile;
        }
      }
      uint64_t v22 = [v5 countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v22);
  }
}

- (void)_notifyClientsOfUpdatedResidentUser:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self _residentDeviceForResidentUser:v4];
  long long v6 = (void *)MEMORY[0x230FBD990]();
  uint64_t v7 = self;
  BOOL v8 = HMFGetOSLogHandle();
  BOOL v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v10 = HMFGetLogIdentifier();
      int v14 = 138543618;
      long long v15 = v10;
      __int16 v16 = 2112;
      id v17 = v4;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Notifying clients of updated remote access gateway: %@", (uint8_t *)&v14, 0x16u);
    }
    id v11 = [(HMDHome *)v7 homeManager];
    uint64_t v12 = [v5 identifier];
    [v11 updateGenerationCounterWithReason:@"ResidentUserUpdated" sourceUUID:v12 shouldNotifyClients:1];
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      long long v13 = HMFGetLogIdentifier();
      int v14 = 138543618;
      long long v15 = v13;
      __int16 v16 = 2112;
      id v17 = v4;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to find resident for resident user: %@", (uint8_t *)&v14, 0x16u);
    }
  }
}

- (id)_residentDeviceForResidentUser:(id)a3
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 device];
  if (v5)
  {
    long long v6 = [HMDResidentDevice alloc];
    uint64_t v7 = [v4 uuid];
    BOOL v8 = [(HMDResidentDevice *)v6 initWithDevice:v5 identifier:v7];

    if (-[HMDHome isResidentSupported](self, "isResidentSupported") || [v4 configurationState] != 2) {
      [(HMDResidentDevice *)v8 setEnabled:0];
    }
    BOOL v9 = [(HMDHome *)self homeManager];
    int v10 = [v9 messageDispatcher];
    id v11 = [v10 remoteAccessDeviceForHome:self];

    if (([v11 isEqual:v5] & 1) == 0) {
      [(HMDResidentDevice *)v8 setReachable:0];
    }
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x230FBD990]();
    long long v13 = self;
    int v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      long long v15 = HMFGetLogIdentifier();
      int v17 = 138543618;
      uint64_t v18 = v15;
      __int16 v19 = 2112;
      id v20 = v4;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Unable to find matching device for resident user: %@", (uint8_t *)&v17, 0x16u);
    }
    BOOL v8 = 0;
  }

  return v8;
}

- (id)_residentUserForResidentDevice:(id)a3
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self owner];
  long long v6 = [v5 pairingIdentity];

  if (v6)
  {
    uint64_t v7 = [v4 device];
    if (v7)
    {
      id v8 = objc_alloc(MEMORY[0x263F35A78]);
      BOOL v9 = [v7 identifier];
      int v10 = [v9 UUIDString];
      id v11 = [v6 publicKey];
      uint64_t v12 = [v6 privateKey];
      long long v13 = objc_msgSend(v8, "initWithIdentifier:publicKey:privateKey:permissions:", v10, v11, v12, objc_msgSend(v6, "permissions"));

      if ([v4 isEnabled]) {
        uint64_t v14 = 2;
      }
      else {
        uint64_t v14 = 3;
      }
      long long v15 = [HMDResidentUser alloc];
      __int16 v16 = [v4 home];
      int v17 = [(HMDResidentUser *)v15 initWithDevice:v7 home:v16 pairingIdentity:v13 configurationState:v14];

      [(HMDUser *)v17 setHome:self];
      if ([(HMDResidentUser *)v17 isBlocked]) {
        [(HMDResidentUser *)v17 setConfigurationState:3];
      }
    }
    else
    {
      int v17 = 0;
    }
  }
  else
  {
    uint64_t v18 = (void *)MEMORY[0x230FBD990]();
    __int16 v19 = self;
    id v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = HMFGetLogIdentifier();
      int v23 = 138543618;
      long long v24 = v21;
      __int16 v25 = 2112;
      id v26 = v4;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to retrieve owner's pairing identity to create legacy resident user for device: %@", (uint8_t *)&v23, 0x16u);
    }
    int v17 = 0;
  }

  return v17;
}

- (id)userWithMergeID:(id)a3
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (!v4) {
    goto LABEL_13;
  }
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v5 = [(HMDHome *)self users];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v31 objects:v41 count:16];
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)v32;
  uint64_t v30 = self;
  while (2)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      if (*(void *)v32 != v8) {
        objc_enumerationMutation(v5);
      }
      int v10 = *(void **)(*((void *)&v31 + 1) + 8 * i);
      id v11 = [v10 account];
      uint64_t v12 = [v11 senderCorrelationIdentifier];
      int v13 = [v12 isEqualToString:v4];

      if (v13)
      {
        int v23 = (void *)MEMORY[0x230FBD990]();
        long long v24 = v30;
        __int16 v25 = v30;
        id v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
LABEL_20:
          __int16 v28 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          uint64_t v36 = v28;
          __int16 v37 = 2112;
          id v38 = v4;
          __int16 v39 = 2112;
          uint64_t v40 = v10;
          _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_DEBUG, "%{public}@Found user with mergeID %@: %@", buf, 0x20u);
        }
LABEL_21:

        id v22 = v10;

        goto LABEL_22;
      }
      uint64_t v14 = [v10 mergeIdentifier];
      if ([v14 isEqual:v4])
      {

LABEL_19:
        int v23 = (void *)MEMORY[0x230FBD990]();
        long long v24 = v30;
        uint64_t v27 = v30;
        id v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_20;
        }
        goto LABEL_21;
      }
      long long v15 = [v10 accountIdentifier];
      __int16 v16 = [v15 senderCorrelationIdentifier];
      int v17 = [v16 isEqual:v4];

      if (v17) {
        goto LABEL_19;
      }
    }
    uint64_t v7 = [v5 countByEnumeratingWithState:&v31 objects:v41 count:16];
    self = v30;
    if (v7) {
      continue;
    }
    break;
  }
LABEL_12:

LABEL_13:
  uint64_t v18 = (void *)MEMORY[0x230FBD990]();
  __int16 v19 = self;
  id v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v36 = v21;
    __int16 v37 = 2112;
    id v38 = v4;
    _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_DEBUG, "%{public}@No user found with mergeID %@", buf, 0x16u);
  }
  id v22 = 0;
LABEL_22:

  return v22;
}

- (id)userWithPairingIdentityIdentifier:(id)a3
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (v4)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v5 = [(HMDHome *)self users];
    id v6 = (id)[v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v12;
      while (2)
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v5);
          }
          BOOL v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          if ([v9 matchingPairingIdentityIdentifier:v4])
          {
            id v6 = v9;
            goto LABEL_12;
          }
        }
        id v6 = (id)[v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

- (id)userWithPairingIdentity:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (v4)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v5 = [(HMDHome *)self users];
    id v6 = (id)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v14;
      while (2)
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v5);
          }
          BOOL v9 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          int v10 = [v9 pairingIdentity];
          char v11 = [v4 isEqual:v10];

          if (v11)
          {
            id v6 = v9;
            goto LABEL_12;
          }
        }
        id v6 = (id)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

- (BOOL)isSiriPhraseOptionsJustSiriEnabled
{
  os_unfair_recursive_lock_lock_with_options();
  unint64_t v3 = (self->_siriPhraseOptions >> 1) & 1;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (BOOL)isSiriPhraseOptionsHeySiriEnabled
{
  LODWORD(self) = self->_siriPhraseOptions & 1;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (BOOL)isSmokeAlarmEnabled
{
  LODWORD(self) = self->_audioAnalysisClassifierOptions & 1;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (BOOL)isOwnerUser
{
  LOBYTE(self) = self->_ownerUser;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setOwnerUser:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_ownerUser = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)isSharedAdmin
{
  BOOL v3 = [(HMDHome *)self isAdminUser];
  if (v3) {
    LOBYTE(v3) = ![(HMDHome *)self isOwnerUser];
  }
  return v3;
}

- (BOOL)isAdminUser
{
  char v2 = [(HMDHome *)self currentUser];
  char v3 = [v2 isAdministrator];

  return v3;
}

- (HMDUser)currentUser
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  p_currentUser = &self->_currentUser;
  currentUser = self->_currentUser;
  if (!currentUser)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v5 = [(HMDHome *)self users];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v14;
      while (2)
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v5);
          }
          int v10 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          if ([v10 isCurrentUser])
          {
            objc_storeStrong((id *)p_currentUser, v10);
            char v11 = [(HMDHome *)self presenceAuthStatus];
            [(HMDUser *)*p_currentUser setPresenceAuthStatus:v11];

            goto LABEL_12;
          }
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
LABEL_12:

    currentUser = *p_currentUser;
  }
  return currentUser;
}

- (id)owner
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  p_owner = &self->_owner;
  owner = self->_owner;
  if (!owner)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v4 = [(HMDHome *)self users];
    uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v12;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v4);
          }
          BOOL v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          if ([v9 privilege] == 3)
          {
            objc_storeStrong((id *)p_owner, v9);
            goto LABEL_12;
          }
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_12:

    owner = *p_owner;
  }
  return owner;
}

- (void)_removeUser:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v5 = v4;
    os_unfair_recursive_lock_lock_with_options();
    if ([(NSMutableArray *)self->_users containsObject:v5]) {
      [(NSMutableArray *)self->_users removeObject:v5];
    }
    os_unfair_recursive_lock_unlock();
    id v4 = v5;
  }
}

- (void)addUser:(id)a3
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v5 = a3;
  uint64_t v6 = [(HMDHome *)self homeManager];
  if (v5)
  {
    os_unfair_recursive_lock_lock_with_options();
    if (([(NSMutableArray *)self->_users containsObject:v5] & 1) == 0)
    {
      uint64_t v7 = (void *)MEMORY[0x230FBD990]();
      uint64_t v8 = self;
      HMFGetOSLogHandle();
      BOOL v9 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v10 = HMFGetLogIdentifier();
        int v30 = 138543618;
        long long v31 = v10;
        __int16 v32 = 2112;
        id v33 = v5;
        _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Adding a new user : %@", (uint8_t *)&v30, 0x16u);
      }
      [(NSMutableArray *)self->_users addObject:v5];
    }
    os_unfair_recursive_lock_unlock();
    if (([v5 isCurrentUser] & 1) != 0 && (objc_msgSend(v5, "isPending") & 1) == 0)
    {
      long long v11 = (void *)MEMORY[0x230FBD990]();
      long long v12 = self;
      long long v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        long long v14 = HMFGetLogIdentifier();
        long long v15 = [v5 uuid];
        int v30 = 138543618;
        long long v31 = v14;
        __int16 v32 = 2112;
        id v33 = v15;
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Setting user %@ as current user", (uint8_t *)&v30, 0x16u);
      }
      objc_storeStrong((id *)&v12->_currentUser, a3);
      if (v6)
      {
        uint64_t v16 = [(HMDHome *)v12 owner];
        char v17 = [v16 isCurrentUser];

        if ((v17 & 1) == 0)
        {
          uint64_t v18 = [v6 homeSharedUserCloudShareManager];
          __int16 v19 = [(HMDHome *)v12 uuid];
          [v18 removeSharesWithNoParticipantForHomeWithModelID:v19];
        }
        id v20 = [(HMDHome *)v12 uuid];
        [v6 removeHomeFromSharedHomesNotYetMigrated:v20];
      }
      uint64_t v21 = (void *)MEMORY[0x230FBD990]();
      id v22 = v12;
      int v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        long long v24 = HMFGetLogIdentifier();
        int v30 = 138543362;
        long long v31 = v24;
        _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Send the initial presence update to primary.", (uint8_t *)&v30, 0xCu);
      }
      __int16 v25 = [(HMDHome *)v22 presenceFeeder];
      [v25 sendInitialPresenceUpdate];

      id v26 = (void *)MEMORY[0x230FBD990]();
      uint64_t v27 = v22;
      __int16 v28 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        __int16 v29 = HMFGetLogIdentifier();
        int v30 = 138543362;
        long long v31 = v29;
        _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@Configuring HMDUserActivityStateDetectorManager - addUser", (uint8_t *)&v30, 0xCu);
      }
      [(HMDHome *)v27 configureUserActivityStateDetectorManager];
    }
  }
}

- (NSArray)usersSupportingPresence
{
  char v2 = [(HMDHome *)self users];
  char v3 = +[HMDHome filterUsersSupportingPresence:v2];

  return (NSArray *)v3;
}

- (id)usersIncludingPendingUsers:(BOOL)a3
{
  BOOL v3 = a3;
  os_unfair_recursive_lock_lock_with_options();
  users = self->_users;
  if (v3)
  {
    uint64_t v6 = [(NSMutableArray *)users copy];
  }
  else
  {
    uint64_t v6 = [(NSMutableArray *)users na_filter:&__block_literal_global_1501];
  }
  uint64_t v7 = (void *)v6;
  os_unfair_recursive_lock_unlock();
  return v7;
}

uint64_t __38__HMDHome_usersIncludingPendingUsers___block_invoke(uint64_t a1, void *a2)
{
  return [a2 isPending] ^ 1;
}

- (id)pendingUsers
{
  os_unfair_recursive_lock_lock_with_options();
  BOOL v3 = [(NSMutableArray *)self->_users na_filter:&__block_literal_global_1499];
  os_unfair_recursive_lock_unlock();
  return v3;
}

uint64_t __23__HMDHome_pendingUsers__block_invoke(uint64_t a1, void *a2)
{
  return [a2 isPending];
}

- (id)userIncludingPendingUserWithUUID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self usersIncludingPendingUsers:1];
  uint64_t v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)restrictedGuests
{
  char v2 = [(HMDHome *)self users];
  BOOL v3 = objc_msgSend(v2, "na_filter:", &__block_literal_global_1497);

  return v3;
}

BOOL __27__HMDHome_restrictedGuests__block_invoke(uint64_t a1, void *a2)
{
  return [a2 privilege] == 5;
}

- (id)sharedUsers
{
  char v2 = [(HMDHome *)self users];
  BOOL v3 = objc_msgSend(v2, "na_map:", &__block_literal_global_1495);

  return v3;
}

id __22__HMDHome_sharedUsers__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 privilege] == 3) {
    id v3 = 0;
  }
  else {
    id v3 = v2;
  }

  return v3;
}

- (NSArray)users
{
  return (NSArray *)[(HMDHome *)self usersIncludingPendingUsers:0];
}

- (void)_handleRemoveAppDataModel:(id)a3 message:(id)a4
{
  id v5 = a4;
  [(HMDHome *)self setAppData:0];
  id v6 = [v5 transactionResult];
  [v6 markChanged];
  [v5 respondWithPayload:0];
}

- (void)_handleUpdateAppDataModel:(id)a3 message:(id)a4
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self appData];

  if (v8)
  {
    BOOL v9 = [(HMDHome *)self appData];
    [v9 updateWithModel:v6];
  }
  else
  {
    int v10 = [HMDApplicationData alloc];
    long long v11 = [v6 appDataDictionary];
    long long v12 = [(HMDHome *)self uuid];
    long long v13 = [(HMDApplicationData *)v10 initWithDictionary:v11 parentUUID:v12];
    [(HMDHome *)self setAppData:v13];

    long long v14 = (void *)MEMORY[0x230FBD990]();
    long long v15 = self;
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      char v17 = HMFGetLogIdentifier();
      uint64_t v18 = [v6 appDataDictionary];
      int v20 = 138543618;
      uint64_t v21 = v17;
      __int16 v22 = 2112;
      int v23 = v18;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Updating the application data : %@", (uint8_t *)&v20, 0x16u);
    }
  }
  __int16 v19 = [v7 transactionResult];
  [v19 markChanged];
  [v7 respondWithPayload:0];
}

- (id)createModelForAppDataPayload:(id)a3 existingAppData:(id)a4 parentUUID:(id)a5
{
  id v7 = a3;
  id v8 = a5;
  BOOL v9 = (HMDApplicationData *)[a4 copy];
  int v10 = v9;
  if (v7)
  {
    if (!v9) {
      int v10 = [[HMDApplicationData alloc] initWithParentUUID:v8];
    }
    [(HMDApplicationData *)v10 setApplicationData:v7 forIdentifier:@"com.apple.homekit-entitledclient.identifer"];
    long long v11 = [(HMDApplicationData *)v10 modelObjectWithChangeType:1];
    long long v12 = v11;
    if (!a4) {
      [v11 setObjectChangeType:1];
    }
  }
  else
  {
    [(HMDApplicationData *)v9 removeApplicationDataForIdentifier:@"com.apple.homekit-entitledclient.identifer"];
    if (v10)
    {
      long long v12 = [(HMDApplicationData *)v10 modelObjectWithChangeType:1];
    }
    else
    {
      long long v12 = 0;
    }
  }

  return v12;
}

- (void)_handleSetAppData:(id)a3
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 dictionaryForKey:@"kAppDataInformationKey"];
  id v6 = (void *)MEMORY[0x263EFF9A0];
  id v7 = [v4 messagePayload];
  id v8 = objc_msgSend(v6, "dictionaryWithCapacity:", objc_msgSend(v7, "count"));

  id v30 = 0;
  BOOL v9 = [(HMDHome *)self _getContainerForAppData:v4 keyName:&v30];
  id v10 = v30;
  long long v11 = v10;
  if (v9)
  {
    if (v10)
    {
      long long v12 = [v9 uuid];
      long long v13 = [v12 UUIDString];
      [v8 setObject:v13 forKey:v11];
    }
    long long v14 = (void *)MEMORY[0x230FBD990]();
    long long v15 = self;
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      char v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      __int16 v32 = v17;
      __int16 v33 = 2112;
      uint64_t v34 = v9;
      __int16 v35 = 2112;
      uint64_t v36 = v5;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Going to update appData for %@ to: %@", buf, 0x20u);
    }
    uint64_t v18 = [v9 appData];
    __int16 v19 = [v9 uuid];
    int v20 = [(HMDHome *)v15 createModelForAppDataPayload:v5 existingAppData:v18 parentUUID:v19];
    if (v5) {
      [v8 setObject:v5 forKey:@"kAppDataInformationKey"];
    }
    if (v20)
    {
      uint64_t v21 = [(HMDHome *)v15 backingStore];
      __int16 v22 = [v4 name];
      +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      id v29 = v4;
      int v23 = v9;
      uint64_t v24 = v5;
      v26 = __int16 v25 = v8;
      [v21 transaction:v22 options:v26];
      uint64_t v27 = v28 = v11;

      id v8 = v25;
      id v5 = v24;
      BOOL v9 = v23;
      id v4 = v29;

      [v27 add:v20 withMessage:v29];
      [v27 run];

      long long v11 = v28;
    }
    else
    {
      [v4 respondWithPayload:0];
    }
  }
  else
  {
    uint64_t v18 = [v4 responseHandler];
    __int16 v19 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    ((void (**)(void, void *, void))v18)[2](v18, v19, 0);
  }
}

- (id)_getContainerForAppData:(id)a3 keyName:(id *)a4
{
  id v6 = a3;
  id v7 = [v6 uuidForKey:@"kRoomUUID"];
  if (v7)
  {
    if (a4)
    {
      id v8 = @"kRoomUUID";
      *a4 = @"kRoomUUID";
    }
    BOOL v9 = [(HMDHome *)self roomWithUUID:v7];
  }
  else
  {
    id v10 = (void *)*MEMORY[0x263F0EB50];
    long long v11 = [v6 uuidForKey:*MEMORY[0x263F0EB50]];
    if (v11)
    {
      if (a4) {
        *a4 = v10;
      }
      BOOL v9 = [(HMDHome *)self serviceGroupWithUUID:v11];
    }
    else
    {
      long long v12 = [v6 uuidForKey:@"kActionSetUUID"];
      if (v12)
      {
        if (a4)
        {
          long long v13 = @"kActionSetUUID";
          *a4 = @"kActionSetUUID";
        }
        long long v14 = [(HMDHome *)self actionSetWithUUID:v12];
      }
      else
      {
        long long v14 = self;
      }
      BOOL v9 = v14;
    }
  }

  return v9;
}

- (void)_handleAllowUserManagementMessage:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self residentDeviceManager];
  id v6 = [v5 availableResidentDevices];
  uint64_t v7 = [v6 count];

  if (!v7)
  {
    BOOL v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = self;
    long long v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      long long v12 = HMFGetLogIdentifier();
      int v20 = 138543362;
      uint64_t v21 = v12;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@Unable to allow user management, no resident devices in home", (uint8_t *)&v20, 0xCu);
    }
    long long v13 = (void *)MEMORY[0x263F087E8];
    uint64_t v14 = 91;
    goto LABEL_10;
  }
  if (![(HMDHome *)self isAdminUser])
  {
    long long v15 = (void *)MEMORY[0x230FBD990]();
    uint64_t v16 = self;
    char v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      int v20 = 138543362;
      uint64_t v21 = v18;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Unable to allow user management, insufficient privileges", (uint8_t *)&v20, 0xCu);
    }
    long long v13 = (void *)MEMORY[0x263F087E8];
    uint64_t v14 = 17;
LABEL_10:
    id v8 = [v13 hmErrorWithCode:v14];
    __int16 v19 = [v4 responseHandler];
    v19[2](v19, v8, MEMORY[0x263EFFA78]);

    goto LABEL_11;
  }
  id v8 = [v4 responseHandler];
  v8[2](v8, 0, MEMORY[0x263EFFA78]);
LABEL_11:
}

- (void)_handleExecuteConfirmationOfTrigger:(id)a3
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  id v4 = (__CFString *)a3;
  if (([(__CFString *)v4 isEntitledForSPIAccess] & 1) != 0
    || ([(__CFString *)v4 isRemote] & 1) != 0)
  {
    id v5 = [(__CFString *)v4 uuidForKey:@"kTriggerUUID"];
    id v6 = [(HMDHome *)self triggers];
    uint64_t v7 = objc_msgSend(v6, "hmf_firstObjectWithSPIUniqueIdentifier:", v5);

    id v8 = v7;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      BOOL v9 = v8;
    }
    else {
      BOOL v9 = 0;
    }
    id v10 = v9;

    isWatch();
    if (isWatch() && ([v10 hasUserConfirmationSession] & 1) == 0)
    {
      uint64_t v24 = (void *)MEMORY[0x230FBD990]();
      __int16 v25 = self;
      id v26 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        uint64_t v27 = HMFGetLogIdentifier();
        isWatch();
        *(_DWORD *)buf = 138543874;
        uint64_t v49 = v27;
        __int16 v50 = 2112;
        uint64_t v51 = @"non-Tinker HH2";
        __int16 v52 = 2112;
        id v53 = v4;
        _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Received trigger execution confirmation for relay in %@ Watch, %@", buf, 0x20u);
      }
      id v16 = [(HMDHome *)v25 homeManager];
      int v23 = [v16 companionDevice];
      if (v23 && [v16 companionReachable])
      {
        __int16 v28 = [HMDRemoteDeviceMessageDestination alloc];
        id v29 = [(HMDHome *)v25 uuid];
        uint64_t v42 = v23;
        id v30 = [(HMDRemoteDeviceMessageDestination *)v28 initWithTarget:v29 device:v23];

        long long v31 = (void *)MEMORY[0x263F42568];
        __int16 v32 = [(__CFString *)v4 messagePayload];
        __int16 v33 = (void *)[v32 copy];
        uint64_t v34 = [v31 messageWithName:@"kConfirmExecuteTriggerRequestKey" qualityOfService:25 destination:v30 payload:v33];

        v46[0] = MEMORY[0x263EF8330];
        v46[1] = 3221225472;
        v46[2] = __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke;
        void v46[3] = &unk_264A2F0C8;
        char v47 = v4;
        __int16 v35 = (void *)MEMORY[0x230FBD990]([v34 setResponseHandler:v46]);
        uint64_t v36 = v25;
        uint64_t v37 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          id v38 = v41 = v35;
          *(_DWORD *)buf = 138543362;
          uint64_t v49 = v38;
          _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@Sending confirmation to companion", buf, 0xCu);

          __int16 v35 = v41;
        }

        __int16 v39 = [v16 messageDispatcher];
        [v39 sendMessage:v34 completionHandler:0];

        int v23 = v42;
      }
      else
      {
        id v30 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:63 userInfo:0];
        uint64_t v40 = [(__CFString *)v4 responseHandler];
        uint64_t v34 = (void *)v40;
        if (v40) {
          (*(void (**)(uint64_t, HMDRemoteDeviceMessageDestination *, void))(v40 + 16))(v40, v30, 0);
        }
      }
    }
    else
    {
      long long v11 = (void *)MEMORY[0x230FBD990]();
      long long v12 = self;
      long long v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v49 = v14;
        __int16 v50 = 2112;
        uint64_t v51 = v4;
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Received trigger execution confirmation on iOS or HH2 Watch: %@", buf, 0x16u);
      }
      if (v8)
      {
        uint64_t v15 = [(__CFString *)v4 BOOLForKey:@"kTriggerExecuteConfirmationKey"];
        v43[0] = MEMORY[0x263EF8330];
        v43[1] = 3221225472;
        v43[2] = __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke_1491;
        v43[3] = &unk_264A2F370;
        id v44 = v8;
        char v45 = v4;
        [v44 userDidConfirmExecute:v15 completionHandler:v43];

        id v16 = v44;
LABEL_29:

        goto LABEL_30;
      }
      id v16 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
      uint64_t v22 = [(__CFString *)v4 responseHandler];
      int v23 = (void *)v22;
      if (v22) {
        (*(void (**)(uint64_t, id, void))(v22 + 16))(v22, v16, 0);
      }
    }

    goto LABEL_29;
  }
  char v17 = (void *)MEMORY[0x230FBD990]();
  uint64_t v18 = self;
  __int16 v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    int v20 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v49 = v20;
    _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to use SPI and it's not relayed from watch.", buf, 0xCu);
  }
  uint64_t v21 = [(__CFString *)v4 responseHandler];

  if (v21)
  {
    id v5 = [(__CFString *)v4 responseHandler];
    id v8 = [MEMORY[0x263F087E8] hmErrorWithCode:17];
    ((void (**)(void, id, void))v5)[2](v5, v8, 0);
LABEL_30:
  }
}

void __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [*(id *)(a1 + 32) responseHandler];
  id v4 = (void *)v3;
  if (v3) {
    (*(void (**)(uint64_t, id, void))(v3 + 16))(v3, v5, 0);
  }
}

void __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke_1491(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (v5 && isiOSDevice()) {
    +[HMDBulletinUIManager presentExecutionErrorDialogForTrigger:partialSuccess:](HMDBulletinUIManager, "presentExecutionErrorDialogForTrigger:partialSuccess:", *(void *)(a1 + 32), [v5 code] == 64);
  }
  uint64_t v3 = [*(id *)(a1 + 40) responseHandler];
  id v4 = (void *)v3;
  if (v3) {
    (*(void (**)(uint64_t, id, void))(v3 + 16))(v3, v5, 0);
  }
}

- (void)_removeTrigger:(id)a3 message:(id)a4
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  if (v6)
  {
    [(HMDHome *)self removeTriggerNoNotification:v6];
    id v8 = [v7 transactionResult];
    BOOL v9 = (void *)MEMORY[0x230FBD990]([v8 markChanged]);
    id v10 = self;
    long long v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      long long v12 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v30 = v12;
      __int16 v31 = 2112;
      id v32 = v6;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Remove trigger: %@", buf, 0x16u);
    }
    long long v13 = [(HMDHome *)v10 uuid];
    uint64_t v14 = [v13 UUIDString];
    v28[0] = v14;
    v27[1] = @"kTriggerName";
    uint64_t v15 = [v6 name];
    v28[1] = v15;
    void v27[2] = @"kTriggerUUID";
    id v16 = [v6 uuid];
    char v17 = [v16 UUIDString];
    void v28[2] = v17;
    uint64_t v18 = [NSDictionary dictionaryWithObjects:v28 forKeys:v27 count:3];

    __int16 v19 = (void *)MEMORY[0x230FBD990]();
    int v20 = v10;
    uint64_t v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v30 = v22;
      __int16 v31 = 2112;
      id v32 = v18;
      _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Successfully Removed trigger : sending back the result: %@", buf, 0x16u);
    }
    [v7 respondWithPayload:v18];
  }
  else
  {
    int v23 = (void *)MEMORY[0x230FBD990]();
    uint64_t v24 = self;
    __int16 v25 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      id v26 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v30 = v26;
      __int16 v31 = 2112;
      id v32 = 0;
      _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_ERROR, "%{public}@Could not find the Trigger : %@", buf, 0x16u);
    }
    id v8 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
    [v7 respondWithError:v8];
  }
}

- (void)removeTriggerNoNotification:(id)a3
{
  if (a3)
  {
    id v4 = a3;
    [v4 invalidate];
    id v5 = [v4 name];
    id v6 = [(HMDHome *)self removeName:v5];

    [(HMDHome *)self removeFromCurrentTriggers:v4];
    id v8 = [(HMDHome *)self ownedTriggers];
    id v7 = [v4 uuid];

    [v8 removeObject:v7];
  }
}

- (void)removeTrigger:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __25__HMDHome_removeTrigger___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __25__HMDHome_removeTrigger___block_invoke(uint64_t a1)
{
  v11[1] = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x263F42568];
  id v3 = objc_alloc(MEMORY[0x263F42570]);
  id v4 = [*(id *)(a1 + 32) uuid];
  id v5 = (void *)[v3 initWithTarget:v4];
  id v10 = @"kTriggerUUID";
  id v6 = [*(id *)(a1 + 40) uuid];
  id v7 = [v6 UUIDString];
  v11[0] = v7;
  id v8 = [NSDictionary dictionaryWithObjects:v11 forKeys:&v10 count:1];
  BOOL v9 = [v2 messageWithName:@"kRemoveTriggerRequestKey" destination:v5 payload:v8];

  [*(id *)(a1 + 32) _handleRemoveTrigger:v9];
}

- (void)_handleRemoveTriggerModel:(id)a3 message:(id)a4
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 uuid];
  BOOL v9 = [(HMDHome *)self triggerWithUUID:v8];

  if (v9)
  {
    [(HMDHome *)self _removeTrigger:v9 message:v7];
    id v10 = [v7 transactionResult];
    [v10 markChanged];
  }
  else
  {
    long long v11 = (void *)MEMORY[0x230FBD990]();
    long long v12 = self;
    long long v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      uint64_t v15 = [v6 uuid];
      int v16 = 138543618;
      char v17 = v14;
      __int16 v18 = 2112;
      __int16 v19 = v15;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find trigger with UUID %@ to remove.", (uint8_t *)&v16, 0x16u);
    }
    id v10 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v7 respondWithError:v10];
  }
}

- (void)_handleRemoveTrigger:(id)a3
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kTriggerUUID"];
  id v6 = [(HMDHome *)self triggerWithUUID:v5];
  if (v6)
  {
    id v7 = [HMDTriggerModel alloc];
    id v8 = [v6 uuid];
    BOOL v9 = [(HMDHome *)self uuid];
    id v10 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:3 uuid:v8 parentUUID:v9];

    long long v11 = [(HMDHome *)self backingStore];
    long long v12 = [v4 name];
    long long v13 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v14 = [v11 transaction:v12 options:v13];

    [v14 add:v10 withMessage:v4];
    [v14 run];
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    int v16 = self;
    char v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      __int16 v18 = HMFGetLogIdentifier();
      int v20 = 138543618;
      uint64_t v21 = v18;
      __int16 v22 = 2112;
      int v23 = v5;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Cannot find the trigger with UUID %@", (uint8_t *)&v20, 0x16u);
    }
    __int16 v19 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v4 respondWithError:v19];
  }
}

- (void)_addNewTrigger:(id)a3 message:(id)a4 payloadAnnex:(id)a5 triggerModel:(id)a6
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  [(HMDHome *)self addToCurrentTriggers:v10];
  uint64_t v14 = [(HMDHome *)self ownedTriggers];
  uint64_t v15 = [v10 uuid];
  if (([v14 containsObject:v15] & 1) == 0)
  {
    int v16 = [v10 owner];
    int v17 = [v16 isOwner];

    if (!v17) {
      goto LABEL_5;
    }
    uint64_t v14 = [(HMDHome *)self ownedTriggers];
    uint64_t v15 = [v10 uuid];
    [v14 addObject:v15];
  }

LABEL_5:
  __int16 v18 = [(HMDHome *)self msgDispatcher];
  __int16 v19 = [(HMDHome *)self workQueue];
  [v10 configure:self messageDispatcher:v18 queue:v19];

  int v20 = [v11 transactionResult];
  [v20 markChanged];
  uint64_t v21 = [v11 name];
  if ([v21 isEqualToString:@"kAddEventTriggerRequestKey"])
  {
  }
  else
  {
    __int16 v22 = [v11 name];
    char v23 = [v22 isEqualToString:@"kAddTimerTriggerRequestKey"];

    if ((v23 & 1) == 0)
    {
      [v11 respondWithSuccess];
      goto LABEL_14;
    }
  }
  uint64_t v24 = (void *)MEMORY[0x230FBD990]();
  __int16 v25 = self;
  id v26 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    uint64_t v27 = HMFGetLogIdentifier();
    __int16 v28 = [v10 name];
    int v35 = 138543874;
    uint64_t v36 = v27;
    __int16 v37 = 2112;
    id v38 = v28;
    __int16 v39 = 2112;
    id v40 = v11;
    _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Add trigger Transaction marked for change. The client will be updated next: %@, %@", (uint8_t *)&v35, 0x20u);
  }
  id v29 = (void *)MEMORY[0x263EFF9A0];
  id v30 = [v11 messagePayload];
  __int16 v31 = [v29 dictionaryWithDictionary:v30];

  id v32 = HMDRemoteMessagePayloadKeysForTransportMetadata();
  [v31 removeObjectsForKeys:v32];

  uint64_t v33 = [v10 uuid];
  uint64_t v34 = [v33 UUIDString];
  [v31 setObject:v34 forKey:@"kTriggerUUID"];

  if (v12) {
    [v31 addEntriesFromDictionary:v12];
  }
  [v11 respondWithPayload:v31];

LABEL_14:
}

- (void)_handleAddTimerTriggerModel:(id)a3 message:(id)a4
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [[HMDTimerTrigger alloc] initWithModel:v6 home:self];
  if (v8)
  {
    BOOL v9 = [v6 createPayload];
    [(HMDHome *)self _addNewTrigger:v8 message:v7 payloadAnnex:v9 triggerModel:v6];
LABEL_7:

    goto LABEL_8;
  }
  id v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    int v16 = 138543362;
    int v17 = v13;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Could not create timer trigger object from model", (uint8_t *)&v16, 0xCu);
  }
  uint64_t v14 = [v7 responseHandler];

  if (v14)
  {
    BOOL v9 = [v7 responseHandler];
    uint64_t v15 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    ((void (**)(void, void *, void))v9)[2](v9, v15, 0);

    goto LABEL_7;
  }
LABEL_8:
}

- (void)_handleAddTimerTrigger:(id)a3
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self residentEnabledDevices];
  uint64_t v6 = [v5 count];

  if (v6)
  {
    id v7 = [v4 name];
    int v8 = [v7 isEqualToString:*MEMORY[0x263F0B9A0]];

    BOOL v9 = [v4 stringForKey:@"kTriggerName"];
    if ([(HMDHome *)self _validateAddingNewTriggerWithName:v9 message:v4])
    {
      id v10 = [v4 stringForKey:*MEMORY[0x263F0DB68]];
      id v11 = [MEMORY[0x263F08C38] UUID];
      id v12 = [HMDTimerTriggerModel alloc];
      id v13 = [(HMDHome *)self uuid];
      uint64_t v14 = [(HMDBackingStoreModelObject *)v12 initWithObjectChangeType:1 uuid:v11 parentUUID:v13];

      [(HMDTimerTriggerModel *)v14 setName:v9];
      [(HMDTimerTriggerModel *)v14 setConfiguredName:v10];
      [(HMDTimerTriggerModel *)v14 setActive:MEMORY[0x263EFFA80]];
      uint64_t v15 = +[HMDTimerTrigger validateTriggerModel:v14 message:v4 currentFireDate:0];

      if (!v15)
      {
LABEL_16:

        goto LABEL_17;
      }
      __int16 v28 = v11;
      int v16 = v10;
      int v17 = [(HMDHome *)self backingStore];
      uint64_t v18 = [v4 name];
      __int16 v19 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      int v20 = [v17 transaction:v18 options:v19];

      if (v8)
      {
        id v21 = objc_alloc_init(MEMORY[0x263EFF9A0]);
        id v10 = v16;
        id v11 = v28;
        if (![(HMDHome *)self _populateTriggerModel:v15 fromBuilderMessage:v4 transaction:v20 responsePayload:v21])
        {
LABEL_15:

          goto LABEL_16;
        }
      }
      else
      {
        id v21 = 0;
        id v10 = v16;
        id v11 = v28;
      }
      id v26 = [v4 userForHome:self];
      [v15 setOwner:v26];

      uint64_t v27 = [(HMDHome *)self currentDevice];
      [v15 setOwningDevice:v27];

      if (v8)
      {
        [v20 add:v15];
        v29[0] = MEMORY[0x263EF8330];
        v29[1] = 3221225472;
        v29[2] = __34__HMDHome__handleAddTimerTrigger___block_invoke;
        void v29[3] = &unk_264A2E210;
        id v30 = v4;
        id v21 = v21;
        id v31 = v21;
        id v32 = v15;
        [v20 run:v29];
      }
      else
      {
        [v20 add:v15 withMessage:v4];
        [v20 run];
      }
      goto LABEL_15;
    }
    __int16 v22 = (void *)MEMORY[0x230FBD990]();
    char v23 = self;
    uint64_t v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      __int16 v25 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v34 = v25;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Trigger name is not valid", buf, 0xCu);
    }
  }
  else
  {
    BOOL v9 = [MEMORY[0x263F087E8] hmErrorWithCode:91];
    [v4 respondWithError:v9];
  }
LABEL_17:
}

void __34__HMDHome__handleAddTimerTrigger___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = [*(id *)(a1 + 48) createPayload];
    [v4 addEntriesFromDictionary:v5];

    uint64_t v6 = *(void **)(a1 + 32);
    id v7 = (id)[*(id *)(a1 + 40) copy];
    [v6 respondWithPayload:v7];
  }
}

- (void)_relayAddTriggerToResident:(id)a3
{
  v23[1] = *MEMORY[0x263EF8340];
  id v4 = a3;
  v23[0] = v4;
  id v5 = [MEMORY[0x263EFF8C0] arrayWithObjects:v23 count:1];
  uint64_t v6 = encodeRootObject();

  id v21 = @"HM.triggers";
  __int16 v22 = v6;
  id v7 = [NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
  objc_initWeak(&location, self);
  int v8 = (void *)MEMORY[0x263F42590];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  void v17[2] = __38__HMDHome__relayAddTriggerToResident___block_invoke;
  v17[3] = &unk_264A2D420;
  objc_copyWeak(&v19, &location);
  id v9 = v4;
  id v18 = v9;
  id v10 = [v8 messageWithName:@"kAddTriggersInternalRequestKey" messagePayload:v7 responseHandler:v17];
  id v11 = objc_alloc(MEMORY[0x263F42570]);
  id v12 = [(HMDHome *)self uuid];
  id v13 = (void *)[v11 initWithTarget:v12];

  [v10 setDestination:v13];
  [v10 setQualityOfService:33];
  uint64_t v14 = [(HMDHome *)self administratorHandler];
  uint64_t v15 = (void *)[v10 copy];
  int v16 = [v14 operationForMessage:v15 error:0];

  if (v16) {
    [v14 addOperation:v16];
  }

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
}

void __38__HMDHome__relayAddTriggerToResident___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    int v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = WeakRetained;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      int v16 = v11;
      __int16 v17 = 2112;
      id v18 = @"kAddTriggersInternalRequestKey";
      __int16 v19 = 2112;
      id v20 = v5;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Relayed message %@ with error %@", buf, 0x20u);
    }
    if (v5)
    {
      id v12 = [v9 workQueue];
      v13[0] = MEMORY[0x263EF8330];
      v13[1] = 3221225472;
      void v13[2] = __38__HMDHome__relayAddTriggerToResident___block_invoke_1479;
      v13[3] = &unk_264A2F820;
      void v13[4] = v9;
      id v14 = *(id *)(a1 + 32);
      dispatch_async(v12, v13);
    }
  }
}

void __38__HMDHome__relayAddTriggerToResident___block_invoke_1479(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 40);
    int v14 = 138543618;
    uint64_t v15 = v5;
    __int16 v16 = 2112;
    uint64_t v17 = v6;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Removing trigger that was not added to resident: %@", (uint8_t *)&v14, 0x16u);
  }
  id v7 = [HMDTriggerModel alloc];
  int v8 = [*(id *)(a1 + 40) uuid];
  id v9 = [*(id *)(a1 + 32) uuid];
  id v10 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:3 uuid:v8 parentUUID:v9];

  id v11 = [*(id *)(a1 + 32) backingStore];
  id v12 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  id v13 = [v11 transaction:@"relayAddTrigger" options:v12];

  [v13 add:v10 withMessage:0];
  [v13 run];
}

- (BOOL)_validateAddingNewTriggerWithName:(id)a3 message:(id)a4
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  if (v6)
  {
    if ([v6 length])
    {
      unint64_t v8 = HMMaxLengthForNaming();
      if ([v6 length] > v8)
      {
        id v9 = (void *)MEMORY[0x230FBD990]();
        id v10 = self;
        id v11 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          id v12 = HMFGetLogIdentifier();
          int v29 = 138543362;
          id v30 = v12;
          _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v29, 0xCu);
        }
        id v13 = (void *)MEMORY[0x263F087E8];
        uint64_t v14 = 46;
        goto LABEL_9;
      }
      uint64_t v18 = [(HMDHome *)self triggerWithName:v6];
      if (v18)
      {
        __int16 v19 = (void *)MEMORY[0x263F087E8];
        uint64_t v20 = 1;
      }
      else
      {
        uint64_t v21 = [(HMDHome *)self triggers];
        unint64_t v22 = [v21 count];
        unint64_t v23 = maximumTriggersPerHome;

        if (v22 < v23)
        {
          BOOL v16 = 1;
LABEL_19:

          goto LABEL_10;
        }
        uint64_t v24 = (void *)MEMORY[0x230FBD990]();
        __int16 v25 = self;
        id v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          uint64_t v27 = HMFGetLogIdentifier();
          int v29 = 138543618;
          id v30 = v27;
          __int16 v31 = 2112;
          id v32 = v6;
          _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Can't add trigger %@; already at maximum triggers for home",
            (uint8_t *)&v29,
            0x16u);
        }
        __int16 v19 = (void *)MEMORY[0x263F087E8];
        uint64_t v20 = 49;
      }
      __int16 v28 = [v19 hmErrorWithCode:v20];
      [v7 respondWithError:v28];

      BOOL v16 = 0;
      goto LABEL_19;
    }
    id v13 = (void *)MEMORY[0x263F087E8];
    uint64_t v14 = 3;
  }
  else
  {
    id v13 = (void *)MEMORY[0x263F087E8];
    uint64_t v14 = 20;
  }
LABEL_9:
  uint64_t v15 = [v13 hmErrorWithCode:v14];
  [v7 respondWithError:v15];

  BOOL v16 = 0;
LABEL_10:

  return v16;
}

- (void)_handleAddEventTriggerModel:(id)a3 message:(id)a4
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  unint64_t v8 = [[HMDEventTrigger alloc] initWithModel:v6 home:self message:v7];
  if (v8)
  {
    id v9 = [v6 createPayload];
    [(HMDHome *)self _addNewTrigger:v8 message:v7 payloadAnnex:v9 triggerModel:v6];
LABEL_7:

    goto LABEL_8;
  }
  id v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    int v16 = 138543362;
    uint64_t v17 = v13;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Could not create event trigger object from model", (uint8_t *)&v16, 0xCu);
  }
  uint64_t v14 = [v7 responseHandler];

  if (v14)
  {
    id v9 = [v7 responseHandler];
    uint64_t v15 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    ((void (**)(void, void *, void))v9)[2](v9, v15, 0);

    goto LABEL_7;
  }
LABEL_8:
}

- (BOOL)_populateTriggerModel:(id)a3 fromBuilderMessage:(id)a4 transaction:(id)a5 responsePayload:(id)a6
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  id v55 = a5;
  id v57 = a6;
  id v12 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v11, "BOOLForKey:", @"kTriggerActivate"));
  [v10 setActive:v12];

  id v13 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v11, "BOOLForKey:", *MEMORY[0x263F0DB78]));
  [v10 setAutoDelete:v13];

  id v59 = objc_alloc_init(MEMORY[0x263EFF980]);
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  id v56 = v11;
  obuint64_t j = [v11 arrayForKey:@"kTriggerActionSetUUIDKey"];
  uint64_t v14 = [obj countByEnumeratingWithState:&v62 objects:v70 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v63;
    id v53 = v10;
    while (2)
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v63 != v16) {
          objc_enumerationMutation(obj);
        }
        id v18 = *(id *)(*((void *)&v62 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          __int16 v19 = v18;
        }
        else {
          __int16 v19 = 0;
        }
        id v20 = v19;

        if (!v20) {
          goto LABEL_18;
        }
        uint64_t v21 = [objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v20];
        if (!v21)
        {
          id v20 = v18;
LABEL_18:
          __int16 v37 = (void *)MEMORY[0x230FBD990]();
          id v38 = self;
          __int16 v39 = HMFGetOSLogHandle();
          __int16 v28 = v55;
          uint64_t v27 = v56;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            id v40 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            __int16 v67 = v40;
            __int16 v68 = 2112;
            id v69 = v20;
            _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_ERROR, "%{public}@Invalid ActionSet reference: '%@'", buf, 0x16u);
          }
          uint64_t v41 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
          [v56 respondWithError:v41];

          BOOL v42 = 0;
          id v10 = v53;
          goto LABEL_29;
        }
        unint64_t v22 = (void *)v21;
        unint64_t v23 = [(HMDHome *)self actionSetWithUUID:v21];
        if (!v23)
        {
          uint64_t v43 = (void *)MEMORY[0x230FBD990]();
          id v44 = self;
          char v45 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            id v46 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            __int16 v67 = v46;
            __int16 v68 = 2112;
            id v69 = v22;
            _os_log_impl(&dword_22F52A000, v45, OS_LOG_TYPE_ERROR, "%{public}@Failed to resolve ActionSet reference: %@", buf, 0x16u);
          }
          char v47 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
          uint64_t v27 = v56;
          [v56 respondWithError:v47];

          BOOL v42 = 0;
          id v10 = v53;
          __int16 v28 = v55;
          goto LABEL_29;
        }
        uint64_t v24 = v23;
        __int16 v25 = [v23 uuid];
        id v26 = [v25 UUIDString];
        [v59 addObject:v26];
      }
      uint64_t v15 = [obj countByEnumeratingWithState:&v62 objects:v70 count:16];
      id v10 = v53;
      if (v15) {
        continue;
      }
      break;
    }
  }

  uint64_t v27 = v56;
  [v56 dictionaryForKey:@"kTriggerOwnedActionSetKey"];
  __int16 v28 = v55;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  if (!obj) {
    goto LABEL_28;
  }
  int v29 = [MEMORY[0x263F08C38] UUID];
  id v30 = objc_msgSend(MEMORY[0x263F08C38], "hm_deriveUUIDFromBaseUUID:", v29);
  __int16 v31 = [v30 UUIDString];

  id v32 = (void *)*MEMORY[0x263F0B948];
  id v60 = 0;
  id v61 = 0;
  uint64_t v33 = -[HMDHome _createActionSetWithUUID:name:type:fromDictionary:transaction:response:error:](self, v29, v31, v32, obj, v55, &v61, &v60);
  id v34 = v61;
  id v35 = v60;

  if (v33)
  {
    [v57 setObject:v34 forKeyedSubscript:@"kTriggerOwnedActionSetKey"];
    uint64_t v36 = [v29 UUIDString];
    [v59 addObject:v36];
  }
  else
  {
    id v54 = v10;
    context = (void *)MEMORY[0x230FBD990]();
    __int16 v48 = self;
    uint64_t v49 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      __int16 v50 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v67 = v50;
      _os_log_impl(&dword_22F52A000, v49, OS_LOG_TYPE_ERROR, "%{public}@Failed to create trigger-owned action set", buf, 0xCu);
    }
    [v56 respondWithError:v35];
    id v10 = v54;
  }

  if (!v33)
  {
    BOOL v42 = 0;
  }
  else
  {
LABEL_28:
    id v20 = (id)[v59 copy];
    [v10 setCurrentActionSets:v20];
    BOOL v42 = 1;
LABEL_29:
  }
  return v42;
}

- (HMDActionSet)_createActionSetWithUUID:(void *)a3 name:(void *)a4 type:(void *)a5 fromDictionary:(void *)a6 transaction:(void *)a7 response:(void *)a8 error:
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  if (a1)
  {
    id v64 = v15;
    id v65 = v14;
    id v18 = [[HMDActionSet alloc] initWithName:v14 uuid:v13 type:v15 home:a1 queue:0];
    __int16 v19 = [(HMDActionSet *)v18 modelObjectWithChangeType:1];
    [v17 add:v19];

    long long v63 = v16;
    id v20 = v16;
    uint64_t v21 = v18;
    unint64_t v22 = objc_msgSend(v20, "hmf_arrayForKey:", @"kActionSetActions");
    __int16 v68 = objc_msgSend(objc_alloc(MEMORY[0x263EFF980]), "initWithCapacity:", objc_msgSend(v22, "count"));
    long long v69 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    obuint64_t j = v22;
    uint64_t v23 = [obj countByEnumeratingWithState:&v69 objects:v77 count:16];
    uint64_t v66 = v18;
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = *(void *)v70;
      id v61 = v13;
LABEL_4:
      uint64_t v26 = 0;
      while (1)
      {
        if (*(void *)v70 != v25) {
          objc_enumerationMutation(obj);
        }
        id v27 = *(id *)(*((void *)&v69 + 1) + 8 * v26);
        objc_opt_class();
        id v28 = (objc_opt_isKindOfClass() & 1) != 0 ? v27 : 0;
        id v29 = v28;

        if (!v29) {
          break;
        }
        uint64_t v30 = [a1 actionWithDictionaryRepresentation:v29];
        if (!v30)
        {
          uint64_t v51 = (void *)MEMORY[0x230FBD990]();
          id v52 = a1;
          id v53 = HMFGetOSLogHandle();
          id v13 = v61;
          id v16 = v63;
          id v40 = obj;
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            id v54 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            id v74 = v54;
            __int16 v75 = 2112;
            id v76 = v29;
            _os_log_impl(&dword_22F52A000, v53, OS_LOG_TYPE_ERROR, "%{public}@Failed to deserialize action: %@", buf, 0x16u);
          }
          id v14 = v65;
          if (a8)
          {
            *a8 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
          }

          id v15 = v64;
LABEL_36:

          id v46 = 0;
          goto LABEL_43;
        }
        __int16 v31 = (void *)v30;
        id v32 = +[HMDCoreData featuresDataSource];
        int v33 = [v32 isRVCEnabled];

        if (v33)
        {
          id v34 = v17;
          id v35 = v31;
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass) {
            __int16 v37 = v35;
          }
          else {
            __int16 v37 = 0;
          }
          id v38 = v37;

          if (isKindOfClass) {
            [v35 addMatterPathsToTransactionIfNotStored:v34];
          }

          id v17 = v34;
          uint64_t v21 = v66;
        }
        [v68 addObject:v31];
        [v31 updateActionSetIfNil:v21];
        __int16 v39 = [v31 modelObjectWithChangeType:1];
        [v17 add:v39];

        if (v24 == ++v26)
        {
          uint64_t v24 = [obj countByEnumeratingWithState:&v69 objects:v77 count:16];
          id v13 = v61;
          if (v24) {
            goto LABEL_4;
          }
          goto LABEL_21;
        }
      }
      char v47 = (void *)MEMORY[0x230FBD990]();
      id v48 = a1;
      uint64_t v49 = HMFGetOSLogHandle();
      id v14 = v65;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        __int16 v50 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v74 = v50;
        __int16 v75 = 2112;
        id v76 = v65;
        _os_log_impl(&dword_22F52A000, v49, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; invalid serialized action",
          buf,
          0x16u);
      }
      id v13 = v61;
      id v16 = v63;
      id v15 = v64;
      id v40 = obj;
      if (a8)
      {
        *a8 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      }
      goto LABEL_36;
    }
LABEL_21:
    id v40 = obj;

    [(HMDActionSet *)v21 setActions:v68];
    if ([a1 validateActionsDoNotConflict:v68])
    {
      id v16 = v63;
      uint64_t v41 = objc_msgSend(v63, "hmf_dictionaryForKey:", @"kAppDataInformationKey");
      if ([v41 count])
      {
        BOOL v42 = [[HMDApplicationData alloc] initWithParentUUID:v13];
        [(HMDApplicationData *)v42 setApplicationData:v41 forIdentifier:@"com.apple.homekit-entitledclient.identifer"];
        uint64_t v43 = [(HMDApplicationData *)v42 modelObjectWithChangeType:1];
        [v17 add:v43];
      }
      if (a7)
      {
        id v44 = [(HMDActionSet *)v66 createPayload];
        char v45 = (void *)[v44 mutableCopy];

        [v45 setObject:v41 forKeyedSubscript:@"kAppDataInformationKey"];
        *a7 = (id)[v45 copy];
      }
      id v46 = v66;

      id v14 = v65;
    }
    else
    {
      id v55 = (void *)MEMORY[0x230FBD990]();
      id v56 = a1;
      id v57 = HMFGetOSLogHandle();
      id v14 = v65;
      id v16 = v63;
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        id v58 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v74 = v58;
        __int16 v75 = 2112;
        id v76 = v65;
        _os_log_impl(&dword_22F52A000, v57, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; conflicting actions",
          buf,
          0x16u);
      }
      if (a8)
      {
        [MEMORY[0x263F087E8] hmErrorWithCode:3];
        id v46 = 0;
        *a8 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v46 = 0;
      }
    }
    id v15 = v64;
LABEL_43:
  }
  else
  {
    id v46 = 0;
  }

  return v46;
}

- (void)_handleAddEventTrigger:(id)a3
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    unint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v64 = v8;
    __int16 v65 = 2112;
    id v66 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Received message %@", buf, 0x16u);
  }
  id v9 = [(HMDHome *)v6 residentEnabledDevices];
  BOOL v10 = [v9 count] == 0;

  if (!v10)
  {
    id v11 = [v4 name];
    int v12 = [v11 isEqualToString:*MEMORY[0x263F0B998]];

    id v13 = [v4 stringForKey:@"kTriggerName"];
    uint64_t v43 = [v4 stringForKey:*MEMORY[0x263F0DB68]];
    id v44 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
    char v45 = [v4 predicateForKey:@"kEventTriggerConditionKey"];
    id v14 = [v4 numberForKey:@"kEventTriggerRecurrencesKey"];
    char v47 = v14;
    if (v14)
    {
      if ([v14 unsignedIntegerValue] == 127)
      {
        id v46 = 0;
      }
      else
      {
        id v46 = HMDaysOfTheWeekToDateComponents();
      }
    }
    else
    {
      id v46 = [v4 arrayOfDateComponentsForKey:@"kEventTriggerRecurrencesKey"];
    }
    id v15 = [v4 userForHome:v6];
    id v16 = [HMDEventTriggerModel alloc];
    id v17 = [(HMDHome *)v6 uuid];
    id v18 = [(HMDBackingStoreModelObject *)v16 initWithObjectChangeType:1 uuid:v44 parentUUID:v17];

    [(HMDEventTriggerModel *)v18 setName:v13];
    [(HMDEventTriggerModel *)v18 setConfiguredName:v43];
    [(HMDEventTriggerModel *)v18 setActive:MEMORY[0x263EFFA80]];
    [(HMDEventTriggerModel *)v18 setOwner:v15];
    __int16 v19 = [(HMDHome *)v6 currentDevice];
    [(HMDEventTriggerModel *)v18 setOwningDevice:v19];

    id v20 = [(HMDHome *)v6 predicateUtility];
    BOOL v42 = [v20 rewritePredicateForDaemon:v45 message:v4];

    uint64_t v21 = [MEMORY[0x263F08910] archivedDataWithRootObject:v42 requiringSecureCoding:1 error:0];
    [(HMDEventTriggerModel *)v18 setEvaluationCondition:v21];

    unint64_t v22 = [MEMORY[0x263F08910] archivedDataWithRootObject:v46 requiringSecureCoding:1 error:0];
    [(HMDEventTriggerModel *)v18 setRecurrences:v22];

    uint64_t v23 = (void *)[v4 mutableCopy];
    objc_initWeak(&location, v6);
    v56[0] = MEMORY[0x263EF8330];
    v56[1] = 3221225472;
    v56[2] = __34__HMDHome__handleAddEventTrigger___block_invoke;
    v56[3] = &unk_264A169D0;
    objc_copyWeak(&v60, &location);
    id v24 = v4;
    id v57 = v24;
    uint64_t v25 = v18;
    id v58 = v25;
    char v61 = v12;
    id v41 = v15;
    id v59 = v41;
    [v23 setResponseHandler:v56];
    if (![(HMDHome *)v6 _validateAddingNewTriggerWithName:v13 message:v23])goto LABEL_31; {
    if (!v47
    }
      && !+[HMDEventTrigger __validateRecurrences:v46])
    {
      uint64_t v36 = (void *)MEMORY[0x230FBD990]();
      __int16 v37 = v6;
      HMFGetOSLogHandle();
      id v38 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        __int16 v39 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v64 = v39;
        __int16 v65 = 2112;
        id v66 = v46;
        _os_log_impl(&dword_22F52A000, v38, OS_LOG_TYPE_ERROR, "%{public}@Received invalid values for recurrences: %@", buf, 0x16u);
      }
      id v29 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      [v23 respondWithError:v29];
      goto LABEL_30;
    }
    uint64_t v26 = [(HMDHome *)v6 backingStore];
    id v27 = [v24 name];
    id v28 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v40 = [v26 transaction:v27 options:v28];

    if (v12)
    {
      id v29 = objc_alloc_init(MEMORY[0x263EFF9A0]);
      if (![(HMDHome *)v6 _populateTriggerModel:v25 fromBuilderMessage:v23 transaction:v40 responsePayload:v29])
      {
LABEL_29:

LABEL_30:
LABEL_31:

        objc_destroyWeak(&v60);
        objc_destroyWeak(&location);

        goto LABEL_32;
      }
      uint64_t v30 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v24, "BOOLForKey:", @"kEventTriggerExecuteOnce"));
      [(HMDEventTriggerModel *)v25 setExecuteOnce:v30];
    }
    else
    {
      id v29 = 0;
    }
    __int16 v31 = [[HMDEventTrigger alloc] initWithModel:v25 home:v6 message:v24];
    id v32 = v31;
    if (v12) {
      int v33 = v40;
    }
    else {
      int v33 = 0;
    }
    id v55 = 0;
    BOOL v34 = -[HMDEventTrigger addEventsFromMessage:preserveUUIDs:transaction:error:](v31, "addEventsFromMessage:preserveUUIDs:transaction:error:", v24, v12 ^ 1u, v33, &v55, v40);
    id v35 = v55;
    if (v34)
    {
      if (v12)
      {
        [v40 add:v25];
        v48[0] = MEMORY[0x263EF8330];
        v48[1] = 3221225472;
        void v48[2] = __34__HMDHome__handleAddEventTrigger___block_invoke_1478;
        v48[3] = &unk_264A1C158;
        id v49 = v23;
        id v50 = v29;
        uint64_t v51 = v25;
        id v52 = v45;
        id v53 = v6;
        id v54 = v32;
        [v40 run:v48];
      }
      else
      {
        [v40 add:v25 withMessage:v23];
        [v40 run];
      }
    }
    else
    {
      [v23 respondWithError:v35];
    }

    goto LABEL_29;
  }
  id v13 = [MEMORY[0x263F087E8] hmErrorWithCode:91];
  [v4 respondWithError:v13];
LABEL_32:
}

void __34__HMDHome__handleAddEventTrigger___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  unint64_t v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = WeakRetained;
  BOOL v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    int v27 = 138543874;
    id v28 = v11;
    __int16 v29 = 2112;
    uint64_t v30 = v6;
    __int16 v31 = 2112;
    id v32 = v5;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Responding to the client about add event trigger status : Payload : [%@], error : [%@]", (uint8_t *)&v27, 0x20u);
  }
  [*(id *)(a1 + 32) respondWithPayload:v6 error:v5];
  if (v9)
  {
    int v12 = [[HMDEventTrigger alloc] initWithModel:*(void *)(a1 + 40) home:v9 message:*(void *)(a1 + 32)];
    [(HMDEventTrigger *)v12 addEventsFromMessage:*(void *)(a1 + 32) preserveUUIDs:*(unsigned char *)(a1 + 64) == 0 transaction:0 error:0];
    id v13 = [HomeKitEventTriggerAddLogEvent alloc];
    id v14 = [v9 uuid];
    id v15 = [(HomeKitEventTriggerAddLogEvent *)v13 initWithHomeUUID:v14];

    uint64_t v16 = 1;
    id v17 = [[HMDAnalyticsEventTriggerData alloc] initWithEventTrigger:v12 isAdding:1];
    id v18 = [(HomeKitEventTriggerAddLogEvent *)v15 analyticsData];
    [v18 setEventTrigger:v17];

    uint64_t v19 = [v5 code];
    id v20 = [(HomeKitEventTriggerAddLogEvent *)v15 analyticsData];
    [v20 setResultErrorCode:v19];

    if (([*(id *)(a1 + 48) isOwner] & 1) == 0)
    {
      if ([*(id *)(a1 + 48) isAdministrator]) {
        uint64_t v16 = 2;
      }
      else {
        uint64_t v16 = 0;
      }
    }
    uint64_t v21 = [(HomeKitEventTriggerAddLogEvent *)v15 analyticsData];
    [v21 setRequestOrigin:v16];

    unint64_t v22 = (void *)MEMORY[0x230FBD990]();
    id v23 = v9;
    id v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      int v27 = 138543618;
      id v28 = v25;
      __int16 v29 = 2112;
      uint64_t v30 = v15;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Prepared the metric %@, submitting", (uint8_t *)&v27, 0x16u);
    }
    uint64_t v26 = [v23 logEventSubmitter];
    [v26 submitLogEvent:v15];
  }
}

void __34__HMDHome__handleAddEventTrigger___block_invoke_1478(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = [*(id *)(a1 + 48) createPayloadWithCondition:*(void *)(a1 + 56)];
    [v4 addEntriesFromDictionary:v5];

    uint64_t v6 = *(void *)(a1 + 64);
    id v7 = [*(id *)(a1 + 72) triggerEvents];
    unint64_t v8 = -[HMDHome _createEventsPayload:](v6, v7);
    [*(id *)(a1 + 40) setObject:v8 forKeyedSubscript:@"kEventTriggerEventsKey"];

    uint64_t v9 = *(void *)(a1 + 64);
    BOOL v10 = [*(id *)(a1 + 72) endEvents];
    id v11 = -[HMDHome _createEventsPayload:](v9, v10);
    [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:@"kEventTriggerEndEventsKey"];

    int v12 = *(void **)(a1 + 32);
    id v13 = (id)[*(id *)(a1 + 40) copy];
    [v12 respondWithPayload:v13];
  }
}

- (id)_createEventsPayload:(uint64_t)a1
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x263EFF980]);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v5 = v3;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v14;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v5);
          }
          BOOL v10 = objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * i), "createPayload", (void)v13);
          [v4 addObject:v10];
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v7);
    }

    id v11 = (void *)[v4 copy];
  }
  else
  {
    id v11 = 0;
  }

  return v11;
}

- (void)_updateOwnedTriggers
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = [MEMORY[0x263EFF980] array];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = [(HMDHome *)self triggers];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ([v9 isOwnedByThisDevice])
        {
          BOOL v10 = [v9 uuid];
          [v3 addObject:v10];
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }

  id v11 = [(HMDHome *)self ownedTriggers];
  [v11 setArray:v3];
}

- (void)_handleExecuteActionSet:(id)a3
{
  id v10 = a3;
  id v4 = [v10 uuidForKey:@"kActionSetUUID"];
  uint64_t v5 = [(HMDHome *)self actionSetWithUUID:v4];
  if (v5
    || isInternalBuild()
    && ([(HMDHome *)self triggerOwnedActionSetWithUUID:v4],
        (uint64_t v5 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v6 = [v5 type];
    if ([v6 isEqualToString:*MEMORY[0x263F0B948]])
    {
      char v7 = isInternalBuild();

      if ((v7 & 1) == 0)
      {
        uint64_t v8 = [v10 responseHandler];
        uint64_t v9 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
        ((void (**)(void, void *, void))v8)[2](v8, v9, 0);

        goto LABEL_10;
      }
    }
    else
    {
    }
    uint64_t v8 = +[HMDDonationHandler sharedDonationHandler];
    [v8 donateActionSet:v5 withMessage:v10];
    [v5 execute:v10];
  }
  else
  {
    uint64_t v5 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
    uint64_t v8 = [v10 responseHandler];
    ((void (**)(void, void *, void))v8)[2](v8, v5, 0);
  }
LABEL_10:
}

- (void)executeActionSet:(id)a3
{
  id v5 = a3;
  id v6 = objc_alloc(MEMORY[0x263F424F0]);
  char v7 = NSString;
  uint64_t v8 = MEMORY[0x230FBBCF0](self, a2);
  uint64_t v9 = [v7 stringWithFormat:@"%@, %s:%ld", v8, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 17234];
  id v10 = (void *)[v6 initWithName:v9];

  id v11 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __28__HMDHome_executeActionSet___block_invoke;
  block[3] = &unk_264A2F2F8;
  void block[4] = self;
  id v15 = v5;
  id v16 = v10;
  id v12 = v10;
  id v13 = v5;
  dispatch_async(v11, block);
}

void __28__HMDHome_executeActionSet___block_invoke(id *a1)
{
  objc_initWeak(&location, a1[4]);
  uint64_t v7 = MEMORY[0x263EF8330];
  uint64_t v8 = 3221225472;
  uint64_t v9 = __28__HMDHome_executeActionSet___block_invoke_2;
  id v10 = &unk_264A2B5D8;
  objc_copyWeak(&v13, &location);
  id v11 = a1[5];
  id v12 = a1[6];
  id v2 = (void (**)(void))_Block_copy(&v7);
  if (objc_msgSend(a1[4], "_shouldWaitForAccessoriesToBeReachable", v7, v8, v9, v10))
  {
    id v3 = [a1[5] uuidForKey:@"kActionSetUUID"];
    id v4 = [a1[4] actionSetWithUUID:v3];
    id v5 = [a1[4] workQueue];
    id v6 = +[HMDHomeAssistantOperation homeAssistantOperationWithActionSet:v4 queue:v5];

    [a1[4] _performOperation:v6 completion:v2];
  }
  else
  {
    v2[2](v2);
  }

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
}

void __28__HMDHome_executeActionSet___block_invoke_2(id *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    [a1[5] begin];
    [WeakRetained _handleExecuteActionSet:a1[4]];
    [a1[5] end];
  }
  else
  {
    id v3 = [a1[4] responseHandler];

    if (v3)
    {
      id v4 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:3 userInfo:0];
      id v5 = [a1[4] responseHandler];
      ((void (**)(void, void *, void))v5)[2](v5, v4, 0);
    }
    id v6 = (void *)MEMORY[0x230FBD990]();
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      int v9 = 138543362;
      id v10 = v8;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot execute action set", (uint8_t *)&v9, 0xCu);
    }
  }
}

- (void)_handleRemoveActionSetModel:(id)a3 message:(id)a4
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 uuid];
  int v9 = [(HMDHome *)self actionSetWithUUID:v8];
  if (v9
    || ([(HMDHome *)self triggerOwnedActionSetWithUUID:v8],
        (int v9 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v48 = v6;
    id v10 = [(HMDHome *)self workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __47__HMDHome__handleRemoveActionSetModel_message___block_invoke;
    block[3] = &unk_264A2F820;
    void block[4] = self;
    id v11 = v8;
    id v54 = v11;
    dispatch_async(v10, block);

    id v12 = [(HMDHome *)self actionSetStateSubscriptionManager];
    [v12 stopAllMonitoringForActionSetUUID:v11 completion:&__block_literal_global_1472];

    id v13 = [(HMDHome *)self actionSetStateObserver];
    [v13 stopMonitoringActionSet:v9];

    long long v14 = [v9 name];
    id v15 = [(HMDHome *)self removeName:v14];

    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    id v16 = [(HMDHome *)self triggers];
    uint64_t v17 = [v16 countByEnumeratingWithState:&v49 objects:v57 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)v50;
      do
      {
        uint64_t v20 = 0;
        do
        {
          if (*(void *)v50 != v19) {
            objc_enumerationMutation(v16);
          }
          [*(id *)(*((void *)&v49 + 1) + 8 * v20++) removeActionSet:v9 postUpdate:1];
        }
        while (v18 != v20);
        uint64_t v18 = [v16 countByEnumeratingWithState:&v49 objects:v57 count:16];
      }
      while (v18);
    }

    uint64_t v21 = [v7 transactionResult];
    [v21 markChanged];
    unint64_t v22 = [v9 type];
    int v23 = [v22 isEqualToString:*MEMORY[0x263F0B948]];

    id v24 = (void *)MEMORY[0x230FBD990]();
    uint64_t v25 = self;
    uint64_t v26 = HMFGetOSLogHandle();
    BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_INFO);
    if (v23)
    {
      if (v27)
      {
        id v28 = HMFGetLogIdentifier();
        __int16 v29 = [v9 name];
        *(_DWORD *)buf = 138543618;
        id v59 = v28;
        __int16 v60 = 2112;
        char v61 = v29;
        _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Remove trigger owned action set: %@", buf, 0x16u);
      }
      uint64_t v30 = [(HMDHome *)v25 triggerOwnedActionSets];
      [v30 removeObject:v9];
    }
    else
    {
      if (v27)
      {
        __int16 v31 = HMFGetLogIdentifier();
        id v32 = [v9 name];
        *(_DWORD *)buf = 138543618;
        id v59 = v31;
        __int16 v60 = 2112;
        char v61 = v32;
        _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Remove action set: %@", buf, 0x16u);
      }
      uint64_t v33 = [(HMDHome *)v25 actionSets];
      [v33 removeObject:v9];

      [v21 markSaveToAssistant];
    }
    [v9 invalidate];
    v55[0] = @"kHomeUUID";
    BOOL v34 = [(HMDHome *)v25 uuid];
    id v35 = [v34 UUIDString];
    v56[0] = v35;
    v55[1] = @"kActionSetName";
    uint64_t v36 = [v9 name];
    v56[1] = v36;
    v55[2] = @"kActionSetUUID";
    __int16 v37 = [v11 UUIDString];
    v56[2] = v37;
    id v38 = [NSDictionary dictionaryWithObjects:v56 forKeys:v55 count:3];

    __int16 v39 = (void *)MEMORY[0x230FBD990]([v7 respondWithPayload:v38]);
    id v40 = v25;
    id v41 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      BOOL v42 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v59 = v42;
      __int16 v60 = 2112;
      char v61 = v38;
      _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_INFO, "%{public}@Responding back to clients after removing actionSet: %@", buf, 0x16u);
    }

    id v6 = v48;
  }
  else
  {
    uint64_t v43 = (void *)MEMORY[0x230FBD990]();
    id v44 = self;
    char v45 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      id v46 = HMFGetLogIdentifier();
      char v47 = [v8 UUIDString];
      *(_DWORD *)buf = 138543618;
      id v59 = v46;
      __int16 v60 = 2112;
      char v61 = v47;
      _os_log_impl(&dword_22F52A000, v45, OS_LOG_TYPE_ERROR, "%{public}@Count not find action set with UUID: %@", buf, 0x16u);
    }
    int v9 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v7 respondWithError:v9];
  }
}

void __47__HMDHome__handleRemoveActionSetModel_message___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) notificationRegistry];
  [v2 removeRegistrationsForActionSetUUID:*(void *)(a1 + 40)];
}

- (void)_handleRemoveActionSet:(id)a3
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kActionSetUUID"];
  id v6 = [(HMDHome *)self actionSetWithUUID:v5];
  id v7 = v6;
  if (!v6)
  {
    id v16 = (void *)MEMORY[0x230FBD990]();
    uint64_t v17 = self;
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      int v36 = 138543618;
      __int16 v37 = v19;
      __int16 v38 = 2112;
      __int16 v39 = v5;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Did not find the action set with UUID : %@", (uint8_t *)&v36, 0x16u);
    }
    long long v14 = (void *)MEMORY[0x263F087E8];
    uint64_t v15 = 2;
    goto LABEL_9;
  }
  uint64_t v8 = [v6 type];
  int v9 = [v8 isEqualToString:*MEMORY[0x263F0B948]];

  if (v9)
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = HMFGetLogIdentifier();
      int v36 = 138543618;
      __int16 v37 = v13;
      __int16 v38 = 2112;
      __int16 v39 = v7;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Removing this action Set is not supported. : %@", (uint8_t *)&v36, 0x16u);
    }
    long long v14 = (void *)MEMORY[0x263F087E8];
    uint64_t v15 = 48;
LABEL_9:
    uint64_t v20 = [v14 hmErrorWithCode:v15];
    [v4 respondWithError:v20];
    goto LABEL_16;
  }
  uint64_t v20 = +[HMDHome getBuiltinActionSets];
  uint64_t v21 = [v7 type];
  unint64_t v22 = [v20 objectForKey:v21];

  if (v22)
  {
    int v23 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:83 userInfo:0];
    id v24 = [v4 responseHandler];
    ((void (**)(void, HMDActionSetModel *, void))v24)[2](v24, v23, 0);

    uint64_t v25 = (void *)MEMORY[0x230FBD990]();
    uint64_t v26 = self;
    BOOL v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      id v28 = HMFGetLogIdentifier();
      __int16 v29 = [v7 type];
      int v36 = 138543618;
      __int16 v37 = v28;
      __int16 v38 = 2112;
      __int16 v39 = v29;
      _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@Cannot remove built in action set : %@", (uint8_t *)&v36, 0x16u);
    }
    [v4 respondWithError:v23];
  }
  else
  {
    uint64_t v30 = [HMDActionSetModel alloc];
    __int16 v31 = [(HMDHome *)self uuid];
    int v23 = [(HMDBackingStoreModelObject *)v30 initWithObjectChangeType:3 uuid:v5 parentUUID:v31];

    id v32 = [(HMDHome *)self backingStore];
    uint64_t v33 = [v4 name];
    BOOL v34 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v35 = [v32 transaction:v33 options:v34];

    [v35 add:v23 withMessage:v4];
    [v35 run];
  }
LABEL_16:
}

- (void)_handleAddActionSetModel:(id)a3 message:(id)a4
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = v6;
  int v9 = self;
  id v10 = [v8 name];
  id v11 = [v8 uuid];
  id v12 = [v8 type];
  if (v12)
  {
    id v13 = [v8 type];
  }
  else
  {
    id v13 = (id)*MEMORY[0x263F0B958];
  }
  long long v14 = v13;

  uint64_t v15 = [(HMDHome *)v9 createActionSetWithName:v10 uuid:v11 type:v14];

  if (v15)
  {
    id v16 = [v7 transactionResult];
    [v16 markChanged];
    uint64_t v17 = [v8 type];
    int v18 = [v17 isEqualToString:*MEMORY[0x263F0B948]];

    if (v18)
    {
      uint64_t v19 = [(HMDHome *)v9 triggerOwnedActionSets];
      [v19 addObject:v15];
    }
    else
    {
      id v24 = [(HMDHome *)v9 actionSets];
      [v24 addObject:v15];

      uint64_t v25 = [v15 actions];
      uint64_t v26 = [v25 count];

      if (v26) {
        [v16 markSaveToAssistant];
      }
    }
    uint64_t v43 = v16;
    BOOL v27 = v9;
    id v44 = v15;
    id v28 = v15;
    id v45 = v7;
    id v42 = v7;
    v50[0] = @"kHomeUUID";
    __int16 v29 = [(HMDHome *)v27 uuid];
    uint64_t v30 = [v29 UUIDString];
    *(void *)buf = v30;
    v50[1] = @"kActionSetName";
    __int16 v31 = [v28 name];
    *(void *)&buf[8] = v31;
    v50[2] = @"kActionSetUUID";
    id v32 = [v28 uuid];
    uint64_t v33 = [v32 UUIDString];
    *(void *)&buf[16] = v33;
    v50[3] = @"kActionSetType";
    BOOL v34 = [v28 type];
    long long v52 = v34;
    id v35 = [NSDictionary dictionaryWithObjects:buf forKeys:v50 count:4];

    int v36 = (void *)MEMORY[0x230FBD990]();
    __int16 v37 = v27;
    __int16 v38 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      __int16 v39 = HMFGetLogIdentifier();
      *(_DWORD *)char v47 = 138543618;
      *(void *)&void v47[4] = v39;
      __int16 v48 = 2112;
      long long v49 = v35;
      _os_log_impl(&dword_22F52A000, v38, OS_LOG_TYPE_INFO, "%{public}@Add action set finished. Responding to clients with : %@", v47, 0x16u);
    }
    uint64_t v40 = [(HMDHome *)v37 notificationCenter];
    id v46 = @"HMDActionSetNotificationKey";
    *(void *)char v47 = v28;
    id v41 = [NSDictionary dictionaryWithObjects:v47 forKeys:&v46 count:1];
    [v40 postNotificationName:@"HMDActionSetAddedNotification" object:v37 userInfo:v41];

    [v42 respondWithPayload:v35];
    uint64_t v15 = v44;
    id v7 = v45;
  }
  else
  {
    uint64_t v20 = (void *)MEMORY[0x230FBD990]();
    uint64_t v21 = v9;
    unint64_t v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      int v23 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v23;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v7;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unable to create action set model. %@", buf, 0x16u);
    }
  }
}

- (void)_handleAddHomeOwnedActionSet:(id)a3
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    int v42 = 138543362;
    uint64_t v43 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding Home owned action set", (uint8_t *)&v42, 0xCu);
  }
  int v9 = [v4 stringForKey:@"kActionSetName"];
  id v10 = [(HMDHome *)v6 actionSetWithName:v9];
  if (v10)
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = v6;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      long long v14 = HMFGetLogIdentifier();
      int v42 = 138543618;
      uint64_t v43 = v14;
      __int16 v44 = 2112;
      id v45 = v9;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@ as it already exists.", (uint8_t *)&v42, 0x16u);
    }
    uint64_t v15 = (void *)MEMORY[0x263F087E8];
    uint64_t v16 = 1;
LABEL_15:
    uint64_t v21 = [v15 hmErrorWithCode:v16];
LABEL_16:
    [v4 respondWithError:v21];
    goto LABEL_17;
  }
  uint64_t v17 = [(HMDHome *)v6 actionSets];
  unint64_t v18 = [v17 count];
  unint64_t v19 = maximumActionSetsPerHome;

  if (v18 >= v19)
  {
    uint64_t v26 = (void *)MEMORY[0x230FBD990]();
    BOOL v27 = v6;
    id v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      __int16 v29 = HMFGetLogIdentifier();
      int v42 = 138543618;
      uint64_t v43 = v29;
      __int16 v44 = 2112;
      id v45 = v9;
      _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; already at maximum action sets for home",
        (uint8_t *)&v42,
        0x16u);
    }
    uint64_t v15 = (void *)MEMORY[0x263F087E8];
    uint64_t v16 = 49;
    goto LABEL_15;
  }
  uint64_t v20 = [(HMDHome *)v6 addActionSetName:v9];
  if (v20)
  {
    uint64_t v21 = (void *)v20;
    unint64_t v22 = (void *)MEMORY[0x230FBD990]();
    int v23 = v6;
    id v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      int v42 = 138543874;
      uint64_t v43 = v25;
      __int16 v44 = 2112;
      id v45 = v9;
      __int16 v46 = 2112;
      char v47 = v21;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; namespace error %@",
        (uint8_t *)&v42,
        0x20u);
    }
    goto LABEL_16;
  }
  uint64_t v30 = [HMDActionSetModel alloc];
  __int16 v31 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
  id v32 = [(HMDHome *)v6 uuid];
  uint64_t v33 = [(HMDBackingStoreModelObject *)v30 initWithObjectChangeType:1 uuid:v31 parentUUID:v32];

  BOOL v34 = [v4 stringForKey:@"kActionSetName"];
  [(HMDActionSetModel *)v33 setName:v34];

  uint64_t v35 = [v4 stringForKey:@"kActionSetType"];
  int v36 = (void *)v35;
  if (v35) {
    uint64_t v37 = v35;
  }
  else {
    uint64_t v37 = *MEMORY[0x263F0B958];
  }
  [(HMDActionSetModel *)v33 setType:v37];
  __int16 v38 = [(HMDHome *)v6 backingStore];
  __int16 v39 = [v4 name];
  uint64_t v40 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  id v41 = [v38 transaction:v39 options:v40];

  [v41 add:v33 withMessage:v4];
  [v41 run];

  uint64_t v21 = 0;
LABEL_17:
}

- (void)_handleAddTriggerOwnedActionSet:(id)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    int v18 = 138543362;
    unint64_t v19 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding trigger owned action set", (uint8_t *)&v18, 0xCu);
  }
  int v9 = [HMDActionSetModel alloc];
  id v10 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
  id v11 = [(HMDHome *)v6 uuid];
  id v12 = [(HMDBackingStoreModelObject *)v9 initWithObjectChangeType:1 uuid:v10 parentUUID:v11];

  id v13 = [v4 stringForKey:@"kActionSetName"];
  [(HMDActionSetModel *)v12 setName:v13];

  [(HMDActionSetModel *)v12 setType:*MEMORY[0x263F0B948]];
  long long v14 = [(HMDHome *)v6 backingStore];
  uint64_t v15 = [v4 name];
  uint64_t v16 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  uint64_t v17 = [v14 transaction:v15 options:v16];

  [v17 add:v12 withMessage:v4];
  [v17 run];
}

- (void)_handleAddActionSetFromBuilder:(id)a3
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v52 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding Home owned action set (from builder)", buf, 0xCu);
  }
  int v9 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
  id v10 = v9;
  if (v9)
  {
    id v11 = v9;
  }
  else
  {
    id v11 = [MEMORY[0x263F08C38] UUID];
  }
  id v12 = v11;

  uint64_t v13 = [v4 stringForKey:@"kActionSetType"];
  long long v14 = (void *)v13;
  uint64_t v15 = (void *)*MEMORY[0x263F0B958];
  if (v13) {
    uint64_t v15 = (void *)v13;
  }
  id v16 = v15;

  uint64_t v17 = [v4 stringForKey:@"kActionSetName"];
  uint64_t v18 = [(HMDHome *)v6 actionSetWithName:v17];
  if (!v18)
  {
    uint64_t v25 = [(HMDHome *)v6 actionSets];
    unint64_t v26 = [v25 count];
    unint64_t v27 = maximumActionSetsPerHome;

    if (v26 >= v27)
    {
      uint64_t v33 = (void *)MEMORY[0x230FBD990]();
      BOOL v34 = v6;
      uint64_t v35 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        int v36 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v52 = v36;
        __int16 v53 = 2112;
        id v54 = v17;
        _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; already at maximum action sets for home",
          buf,
          0x16u);
      }
      id v19 = [MEMORY[0x263F087E8] hmErrorWithCode:49];
    }
    else
    {
      uint64_t v28 = [(HMDHome *)v6 addActionSetName:v17];
      if (!v28)
      {
        uint64_t v37 = [(HMDHome *)v6 backingStore];
        __int16 v38 = [v4 name];
        __int16 v39 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        uint64_t v40 = [v37 transaction:v38 options:v39];

        id v41 = [v4 messagePayload];
        id v49 = 0;
        id v50 = 0;
        int v42 = -[HMDHome _createActionSetWithUUID:name:type:fromDictionary:transaction:response:error:](v6, v12, v17, v16, v41, v40, &v50, &v49);
        id v43 = v50;
        id v19 = v49;

        if (v42)
        {
          v45[0] = MEMORY[0x263EF8330];
          v45[1] = 3221225472;
          v45[2] = __42__HMDHome__handleAddActionSetFromBuilder___block_invoke;
          v45[3] = &unk_264A28C88;
          v45[4] = v6;
          id v46 = v17;
          id v47 = v4;
          id v48 = v43;
          [v40 run:v45];
        }
        else
        {
          id v44 = [(HMDHome *)v6 removeName:v17];
          [v4 respondWithError:v19];
        }

        goto LABEL_21;
      }
      id v19 = (id)v28;
      __int16 v29 = (void *)MEMORY[0x230FBD990]();
      uint64_t v30 = v6;
      __int16 v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        id v32 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        long long v52 = v32;
        __int16 v53 = 2112;
        id v54 = v17;
        __int16 v55 = 2112;
        id v56 = v19;
        _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; namespace error %@",
          buf,
          0x20u);
      }
    }
    [v4 respondWithError:v19];
    goto LABEL_21;
  }
  id v19 = (id)v18;
  uint64_t v20 = (void *)MEMORY[0x230FBD990]();
  uint64_t v21 = v6;
  unint64_t v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    int v23 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v52 = v23;
    __int16 v53 = 2112;
    id v54 = v17;
    _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@ as it already exists.", buf, 0x16u);
  }
  id v24 = [MEMORY[0x263F087E8] hmErrorWithCode:1];
  [v4 respondWithError:v24];

LABEL_21:
}

void __42__HMDHome__handleAddActionSetFromBuilder___block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    id v3 = (id)[*(id *)(a1 + 32) removeName:*(void *)(a1 + 40)];
    [*(id *)(a1 + 48) respondWithError:v4];
  }
  else
  {
    [*(id *)(a1 + 48) respondWithPayload:*(void *)(a1 + 56)];
  }
}

- (void)_handleAddActionSet:(id)a3
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    int v22 = 138543618;
    int v23 = v8;
    __int16 v24 = 2112;
    id v25 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Received a request to add a new action set : %@", (uint8_t *)&v22, 0x16u);
  }
  id v9 = [v4 stringForKey:@"kActionSetType"];
  if (!v9) {
    id v9 = (id)*MEMORY[0x263F0B958];
  }
  id v10 = [v4 stringForKey:@"kActionSetName"];
  unint64_t v11 = HMMaxLengthForNaming();
  if ([v10 length] <= v11)
  {
    uint64_t v17 = [(HMDHome *)v6 logEventSubmitter];
    uint64_t v18 = [HMDAddActionSetLogEvent alloc];
    id v19 = [(HMDHome *)v6 uuid];
    uint64_t v20 = [(HMDAddActionSetLogEvent *)v18 initWithActionSetType:v9 homeUUID:v19];
    [v17 submitLogEvent:v20];

    uint64_t v21 = [v4 name];
    LODWORD(v20) = [v21 isEqualToString:*MEMORY[0x263F0B990]];

    if (v20)
    {
      [(HMDHome *)v6 _handleAddActionSetFromBuilder:v4];
    }
    else if ([v9 isEqualToString:*MEMORY[0x263F0B948]])
    {
      [(HMDHome *)v6 _handleAddTriggerOwnedActionSet:v4];
    }
    else
    {
      [(HMDHome *)v6 _handleAddHomeOwnedActionSet:v4];
    }
  }
  else
  {
    id v12 = (void *)MEMORY[0x230FBD990]();
    uint64_t v13 = v6;
    long long v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      int v22 = 138543362;
      int v23 = v15;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v22, 0xCu);
    }
    id v16 = [MEMORY[0x263F087E8] hmErrorWithCode:46];
    [v4 respondWithError:v16];
  }
}

- (id)builtInActionSetInfo
{
  id v3 = [MEMORY[0x263EFF980] array];
  id v4 = [(HMDHome *)self workQueue];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = __31__HMDHome_builtInActionSetInfo__block_invoke;
  void v9[3] = &unk_264A2F820;
  void v9[4] = self;
  id v5 = v3;
  id v10 = v5;
  dispatch_sync(v4, v9);

  id v6 = v10;
  id v7 = v5;

  return v7;
}

void __31__HMDHome_builtInActionSetInfo__block_invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v1 = [*(id *)(a1 + 32) actionSets];
  uint64_t v2 = [v1 countByEnumeratingWithState:&v18 objects:v24 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v19;
    uint64_t v5 = *MEMORY[0x263F0B958];
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v19 != v4) {
          objc_enumerationMutation(v1);
        }
        id v7 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        uint64_t v8 = [v7 type];
        if (v8)
        {
          id v9 = (void *)v8;
          id v10 = [v7 type];
          char v11 = [v10 isEqualToString:v5];

          if ((v11 & 1) == 0)
          {
            v22[0] = @"kActionSetName";
            id v12 = [v7 name];
            v23[0] = v12;
            v22[1] = @"kActionSetType";
            uint64_t v13 = [v7 type];
            v23[1] = v13;
            v22[2] = @"kActionSetUUID";
            long long v14 = [v7 uuid];
            uint64_t v15 = [v14 UUIDString];
            void v23[2] = v15;
            id v16 = [NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:3];

            [*(id *)(a1 + 40) addObject:v16];
          }
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v18 objects:v24 count:16];
    }
    while (v3);
  }
}

- (void)_handleRemoveServiceGroupModel:(id)a3 message:(id)a4
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 uuid];
  id v9 = [(HMDHome *)self serviceGroupWithUUID:v8];
  id v10 = v9;
  if (v9)
  {
    char v11 = [v9 name];
    id v12 = [(HMDHome *)self removeName:v11];

    uint64_t v13 = [(HMDHome *)self serviceGroups];
    [v13 removeObject:v10];

    long long v14 = [v7 transactionResult];
    [v14 markChanged];
    uint64_t v15 = (void *)MEMORY[0x230FBD990]([v14 markSaveToAssistant]);
    id v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      long long v18 = HMFGetLogIdentifier();
      long long v19 = [v10 name];
      int v20 = 138543618;
      long long v21 = v18;
      __int16 v22 = 2112;
      int v23 = v19;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Remove service group: %@", (uint8_t *)&v20, 0x16u);
    }
    [v7 respondWithSuccess];
  }
  else
  {
    long long v14 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v7 respondWithError:v14];
  }
}

- (void)_handleRemoveServiceGroup:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 uuidForKey:*MEMORY[0x263F0EB50]];
  id v6 = [(HMDHome *)self serviceGroupWithUUID:v5];
  if (v6)
  {
    id v7 = [HMDServiceGroupModel alloc];
    uint64_t v8 = [(HMDHome *)self uuid];
    id v9 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:3 uuid:v5 parentUUID:v8];

    id v10 = [(HMDHome *)self backingStore];
    char v11 = [v4 name];
    id v12 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v13 = [v10 transaction:v11 options:v12];

    [v13 add:v9];
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 3221225472;
    void v14[2] = __37__HMDHome__handleRemoveServiceGroup___block_invoke;
    v14[3] = &unk_264A2F3E8;
    id v15 = v4;
    [v13 run:v14];
  }
  else
  {
    id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v4 respondWithError:v9];
  }
}

uint64_t __37__HMDHome__handleRemoveServiceGroup___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)_handleAddServiceGroupModel:(id)a3 message:(id)a4
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 name];
  uint64_t v9 = [v6 uuid];
  id v10 = (void *)v9;
  if (v8 && v9)
  {
    uint64_t v11 = objc_msgSend(v8, "hm_truncatedNameString");

    id v12 = [HMDServiceGroup alloc];
    uint64_t v13 = [(HMDHome *)self workQueue];
    long long v14 = [(HMDServiceGroup *)v12 initWithName:v11 uuid:v10 home:self queue:v13];

    id v15 = [(HMDHome *)self serviceGroups];
    [v15 addObject:v14];

    id v16 = [(HMDHome *)self msgDispatcher];
    uint64_t v17 = [(HMDHome *)self workQueue];
    [(HMDServiceGroup *)v14 configure:v16 queue:v17];

    long long v18 = [(HMDServiceGroup *)v14 updateServiceGroupWithModel:v6 message:v7];
    long long v19 = [v7 transactionResult];
    [v19 markChanged];
    int v20 = [(HMDServiceGroup *)v14 serviceUUIDs];
    uint64_t v21 = [v20 count];

    if (v21) {
      uint64_t v22 = [v19 markSaveToAssistant];
    }
    int v23 = (void *)MEMORY[0x230FBD990](v22);
    uint64_t v24 = self;
    uint64_t v25 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v32 = v10;
      v27 = uint64_t v26 = v11;
      *(_DWORD *)buf = 138543618;
      BOOL v34 = v27;
      __int16 v35 = 2112;
      uint64_t v36 = v26;
      _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_INFO, "%{public}@Add service group: %@", buf, 0x16u);

      uint64_t v11 = v26;
      id v10 = v32;
    }

    [v7 respondWithPayload:0 error:v18];

    uint64_t v8 = (void *)v11;
  }
  else
  {
    uint64_t v28 = (void *)MEMORY[0x230FBD990]();
    __int16 v29 = self;
    uint64_t v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      __int16 v31 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      BOOL v34 = v31;
      __int16 v35 = 2112;
      uint64_t v36 = (uint64_t)v8;
      _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Can't add service group %@; invalid parameter",
        buf,
        0x16u);
    }
    long long v14 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v7 respondWithError:v14];
  }
}

- (void)_handleAddServiceGroup:(id)a3
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 stringForKey:*MEMORY[0x263F0EB30]];
  if (v5)
  {
    unint64_t v6 = HMMaxLengthForNaming();
    if ([v5 length] > v6)
    {
      id v7 = (void *)MEMORY[0x230FBD990]();
      uint64_t v8 = self;
      uint64_t v9 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        id v10 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v41 = v10;
        _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);
      }
      uint64_t v11 = (void *)MEMORY[0x263F087E8];
      uint64_t v12 = 46;
      goto LABEL_7;
    }
    uint64_t v13 = [(HMDHome *)self serviceGroupWithName:v5];
    if (v13)
    {
      long long v14 = (void *)MEMORY[0x263F087E8];
      uint64_t v15 = 1;
    }
    else
    {
      id v16 = [(HMDHome *)self serviceGroups];
      unint64_t v17 = [v16 count];
      unint64_t v18 = maximumServiceGroupsPerHome;

      if (v17 < v18)
      {
        long long v19 = [(HMDHome *)self addName:v5];
        if (!v19)
        {
          uint64_t v28 = [HMDServiceGroupModel alloc];
          __int16 v29 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
          uint64_t v30 = [(HMDHome *)self uuid];
          __int16 v31 = [(HMDBackingStoreModelObject *)v28 initWithObjectChangeType:1 uuid:v29 parentUUID:v30];

          [(HMDServiceGroupModel *)v31 setName:v5];
          id v32 = [(HMDHome *)self backingStore];
          uint64_t v33 = [v4 name];
          BOOL v34 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
          __int16 v35 = [v32 transaction:v33 options:v34];

          [v35 add:v31];
          v37[0] = MEMORY[0x263EF8330];
          v37[1] = 3221225472;
          void v37[2] = __34__HMDHome__handleAddServiceGroup___block_invoke;
          v37[3] = &unk_264A2F370;
          id v38 = v4;
          __int16 v39 = v31;
          uint64_t v36 = v31;
          [v35 run:v37];

          goto LABEL_20;
        }
        int v20 = (void *)MEMORY[0x230FBD990]();
        uint64_t v21 = self;
        uint64_t v22 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          int v23 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          id v41 = v23;
          __int16 v42 = 2112;
          id v43 = v5;
          __int16 v44 = 2112;
          id v45 = v19;
          _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Can't add service group %@; namespace error %@",
            buf,
            0x20u);
        }
LABEL_19:
        [v4 respondWithError:v19];
LABEL_20:

        goto LABEL_21;
      }
      uint64_t v24 = (void *)MEMORY[0x230FBD990]();
      uint64_t v25 = self;
      uint64_t v26 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        unint64_t v27 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v41 = v27;
        __int16 v42 = 2112;
        id v43 = v5;
        _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_ERROR, "%{public}@Can't add service group %@; already at maximum service groups for home",
          buf,
          0x16u);
      }
      long long v14 = (void *)MEMORY[0x263F087E8];
      uint64_t v15 = 49;
    }
    long long v19 = [v14 hmErrorWithCode:v15];
    goto LABEL_19;
  }
  uint64_t v11 = (void *)MEMORY[0x263F087E8];
  uint64_t v12 = 20;
LABEL_7:
  uint64_t v13 = [v11 hmErrorWithCode:v12];
  [v4 respondWithError:v13];
LABEL_21:
}

void __34__HMDHome__handleAddServiceGroup___block_invoke(uint64_t a1, uint64_t a2)
{
  void v10[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    v9[0] = *MEMORY[0x263F0EB30];
    uint64_t v5 = [*(id *)(a1 + 40) name];
    v10[0] = v5;
    v9[1] = *MEMORY[0x263F0EB50];
    unint64_t v6 = [*(id *)(a1 + 40) uuid];
    id v7 = [v6 UUIDString];
    v10[1] = v7;
    uint64_t v8 = [NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:2];
    [v2 respondWithPayload:v8];
  }
}

- (void)updateHomeFirstHAPAccessoryAddedDateToNow
{
  uint64_t v3 = [HMDHomeModel alloc];
  id v4 = [(HMDHome *)self uuid];
  uint64_t v5 = [(HMDHome *)self homeManager];
  unint64_t v6 = [v5 uuid];
  uint64_t v11 = [(HMDBackingStoreModelObject *)v3 initWithObjectChangeType:2 uuid:v4 parentUUID:v6];

  id v7 = objc_alloc_init(MEMORY[0x263EFF910]);
  [(HMDHomeModel *)v11 setFirstHAPAccessoryAddedDate:v7];

  uint64_t v8 = [(HMDHome *)self backingStore];
  uint64_t v9 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  id v10 = [v8 transaction:@"updateHomeFirstHAPAccessoryAddedDate" options:v9];

  [v10 add:v11];
  [v10 run];
}

- (void)_processAccessoriesToAddForUnpairedAccessory:(id)a3 certificationStatus:(int64_t)a4 accessoryServer:(id)a5 networkCredential:(id)a6 pairingEvent:(id)a7 message:(id)a8 completionHandler:(id)a9
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  id v16 = a3;
  id v79 = a5;
  id v80 = a6;
  id v81 = a7;
  id v17 = a8;
  id v18 = a9;
  id v19 = objc_alloc(MEMORY[0x263F424F0]);
  int v20 = NSString;
  uint64_t v21 = MEMORY[0x230FBBCF0](self, a2);
  uint64_t v22 = [v20 stringWithFormat:@"%@, %s:%ld", v21, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 16322];
  id v88 = (void *)[v19 initWithName:v22];

  id v85 = v16;
  if (self)
  {
    int v23 = [(HMDHome *)self currentAccessory];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    id v25 = v24;

    long long v84 = 0;
    if (v85 && v25)
    {
      uint64_t v26 = [v25 sensorAccessoryUUID];
      int v27 = objc_msgSend(v26, "hmf_isEqualToUUID:", v85);

      if (v27)
      {
        uint64_t v28 = [v25 uuid];
        long long v84 = +[MKFModelFactory createAppleMediaAccessoryModelWithModelID:v28];

        __int16 v29 = [v25 room];
        uint64_t v30 = [v29 uuid];
        __int16 v31 = +[MKFModelFactory createRoomModelWithModelID:v30];
        [v84 setRoom:v31];
      }
      else
      {
        long long v84 = 0;
      }
    }
  }
  else
  {
    long long v84 = 0;
  }

  id v76 = [v84 modelID];
  id v32 = [[HMDNewPairedAccessoryServerInfo alloc] initWithServer:v79 home:self primaryAccessoryUUID:v85 certificationStatus:a4 hostAccessory:v84 networkCredential:v80 pairingEvent:v81];
  [v88 begin];
  id v87 = v88;
  long long v86 = v32;
  id v83 = v17;
  id v82 = v18;
  if (self)
  {
    uint64_t v33 = [(HMDNewPairedAccessoryServerInfo *)v86 server];
    BOOL v34 = (void *)MEMORY[0x230FBD990]();
    __int16 v35 = self;
    uint64_t v36 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      uint64_t v37 = HMFGetLogIdentifier();
      id v38 = [v33 accessories];
      *(_DWORD *)buf = 138543874;
      id v119 = v37;
      __int16 v120 = 2048;
      uint64_t v121 = [v38 count];
      __int16 v122 = 2112;
      id v123 = v86;
      _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_INFO, "%{public}@Creating %tu new accessory objects for a newly paired accessory server: %@", buf, 0x20u);
    }
    __int16 v39 = [(HMDHome *)v35 uuidToHAPAccessoryConfigTable];
    uint64_t v40 = [v33 primaryAccessory];
    id v41 = [(HMDNewPairedAccessoryServerInfo *)v86 primaryAccessoryUUID];
    [v39 setObject:v40 forKey:v41];

    __int16 v42 = (void *)MEMORY[0x263EFF9A0];
    id v43 = [v33 accessories];
    __int16 v44 = objc_msgSend(v42, "dictionaryWithCapacity:", objc_msgSend(v43, "count"));

    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    id v45 = [v33 accessories];
    uint64_t v46 = [v45 countByEnumeratingWithState:&v114 objects:buf count:16];
    if (v46)
    {
      uint64_t v47 = *(void *)v115;
      do
      {
        for (uint64_t i = 0; i != v46; ++i)
        {
          if (*(void *)v115 != v47) {
            objc_enumerationMutation(v45);
          }
          id v49 = *(void **)(*((void *)&v114 + 1) + 8 * i);
          id v50 = [v49 uniqueIdentifier];
          [v44 setObject:v49 forKey:v50];
        }
        uint64_t v46 = [v45 countByEnumeratingWithState:&v114 objects:buf count:16];
      }
      while (v46);
    }

    if ([(HMDHome *)v35 hasNeverAddedAnyHAPAccessory])
    {
      long long v51 = [(HMDNewPairedAccessoryServerInfo *)v86 pairingEvent];
      [v51 setFirstHAPAccessoryInHome:1];

      long long v52 = [(HMDHome *)v35 homeManager];
      int v53 = [v52 hasHAPAccessoryInAnyHome];
      id v54 = [(HMDNewPairedAccessoryServerInfo *)v86 pairingEvent];
      [v54 setFirstHAPAccessoryInAnyHome:v53 ^ 1u];
    }
    __int16 v55 = [(HMDNewPairedAccessoryServerInfo *)v86 pairingEvent];
    id v56 = [v33 primaryAccessory];
    [v55 updateEventPropertiesWithHAPAccessory:v56];

    v112[0] = 0;
    v112[1] = v112;
    v112[2] = 0x3032000000;
    v112[3] = __Block_byref_object_copy__14257;
    v112[4] = __Block_byref_object_dispose__14258;
    id v113 = 0;
    id v57 = objc_alloc(MEMORY[0x263F42520]);
    id v58 = [(HMDHome *)v35 workQueue];
    uint64_t v78 = (void *)[v57 initWithQueue:v58];

    uint64_t v111 = _HMFThreadLocalAsyncContextPush();
    if ([(HMDHome *)v35 isSharedAdmin])
    {
      id v59 = [(HMDNewPairedAccessoryServerInfo *)v86 server];
      id v77 = [(HMDHome *)v35 _addOwnerToNewlyPairedAccessoryServer:v59];
    }
    else
    {
      id v77 = [MEMORY[0x263F42538] futureWithNoValue];
    }
    v108[0] = MEMORY[0x263EF8330];
    v108[1] = 3221225472;
    v108[2] = __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke;
    v108[3] = &unk_264A1FE70;
    v108[4] = v35;
    __int16 v60 = v86;
    id v109 = v60;
    id v61 = v83;
    id v110 = v61;
    uint64_t v62 = [v77 then:v108];
    long long v63 = [v62 timeout:180.0];
    v103[0] = MEMORY[0x263EF8330];
    v103[1] = 3221225472;
    v103[2] = __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_2;
    v103[3] = &unk_264A16730;
    v103[4] = v35;
    id v107 = v112;
    id v64 = v60;
    id v104 = v64;
    id v65 = v61;
    id v105 = v65;
    id v75 = v44;
    id v106 = v75;
    id v66 = [v63 then:v103];
    v100[0] = MEMORY[0x263EF8330];
    v100[1] = 3221225472;
    v100[2] = __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_3;
    v100[3] = &unk_264A16778;
    v100[4] = v35;
    id v102 = v112;
    uint64_t v67 = v64;
    id v101 = v67;
    __int16 v68 = [v66 then:v100];
    v97[0] = MEMORY[0x263EF8330];
    v97[1] = 3221225472;
    v97[2] = __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_4;
    v97[3] = &unk_264A16778;
    v97[4] = v35;
    id v74 = v33;
    id v98 = v74;
    id v99 = v112;
    long long v69 = [v68 then:v97];
    v93[0] = MEMORY[0x263EF8330];
    v93[1] = 3221225472;
    v93[2] = __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_6;
    v93[3] = &unk_264A167A0;
    void v93[4] = v35;
    id v96 = v112;
    id v70 = v65;
    id v94 = v70;
    id v71 = v82;
    id v95 = v71;
    long long v72 = [v69 then:v93];
    v89[0] = MEMORY[0x263EF8330];
    v89[1] = 3221225472;
    v89[2] = __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_7;
    v89[3] = &unk_264A167C8;
    v89[4] = v35;
    id v90 = v67;
    id v91 = v70;
    id v92 = v71;
    id v73 = (id)[v72 recover:v89];

    _HMFThreadLocalAsyncContextPop();
    _Block_object_dispose(v112, 8);
  }
  __HMFActivityScopeLeave();

  __HMFActivityScopeLeave();
}

uint64_t __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke(void *a1, void *a2)
{
  uint64_t v171 = *MEMORY[0x263EF8340];
  id v144 = a2;
  id v4 = (void *)a1[4];
  uint64_t v3 = (void *)a1[5];
  uint64_t v5 = (void *)a1[6];
  id v6 = v3;
  uint64_t v145 = v4;
  id v146 = v5;
  long long v147 = v6;
  if (!v4) {
    goto LABEL_61;
  }
  id v7 = v6;
  uint64_t v8 = [v7 server];
  uint64_t v9 = [v8 primaryAccessory];

  id v10 = [v7 primaryAccessoryUUID];
  uint64_t v11 = [v7 certificationStatus];
  uint64_t v12 = [v7 networkCredential];
  uint64_t v149 = v7;
  uint64_t v13 = [v7 hostAccessory];
  id v14 = v9;
  id v15 = v10;
  id v16 = v12;
  id v17 = v13;
  id v18 = +[MKFModelFactory createHAPAccessoryModelWithModelID:v15];
  HMDPopulateAccessoryModelFromHAPAccessory(v18, v14, v11, v17);
  id v19 = v14;
  int v20 = [v19 server];
  uint64_t v21 = [v20 productData];

  long long v148 = v19;
  if (v21)
  {
    uint64_t v22 = [v20 productData];
    BOOL v23 = +[HMDAccessory validateProductData:v22];

    if (v23)
    {
      uint64_t v24 = v148;
      uint64_t v25 = [v148 productData];
      if (v25)
      {
        uint64_t v26 = (void *)v25;
        int v27 = [v20 productData];
        uint64_t v28 = [v148 productData];
        char v29 = [v27 isEqualToString:v28];

        uint64_t v24 = v148;
        if ((v29 & 1) == 0)
        {
          uint64_t v30 = (void *)MEMORY[0x230FBD990]();
          __int16 v31 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            id v32 = HMFGetLogIdentifier();
            id objb = v30;
            uint64_t v33 = [v148 uniqueIdentifier];
            [v20 productData];
            v35 = id v34 = v16;
            uint64_t v36 = [v148 productData];
            *(_DWORD *)buf = 138544130;
            *(void *)&uint8_t buf[4] = v32;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v33;
            *(_WORD *)&buf[22] = 2112;
            uint64_t v167 = v35;
            LOWORD(v168) = 2112;
            *(void *)((char *)&v168 + 2) = v36;
            _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_ERROR, "%{public}@Accessory with identifier %@ is using productData from pair setup that differs from productData published on AIS: %@ != %@", buf, 0x2Au);

            uint64_t v30 = objb;
            id v16 = v34;
          }
          uint64_t v24 = v148;
        }
      }
      uint64_t v37 = v20;
      goto LABEL_16;
    }
    id v38 = (void *)MEMORY[0x230FBD990]();
    __int16 v39 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = HMFGetLogIdentifier();
      id v41 = [v148 uniqueIdentifier];
      [v20 productData];
      id objc = v18;
      id v42 = v17;
      id v43 = v15;
      v45 = id v44 = v16;
      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v40;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v41;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v167 = v45;
      _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_ERROR, "%{public}@Accessory with identifier %@ has invalid productData from pair setup: %@", buf, 0x20u);

      id v16 = v44;
      id v15 = v43;
      id v17 = v42;
      id v18 = objc;
    }
    id v19 = v148;
  }
  uint64_t v46 = [v19 productData];

  if (!v46)
  {
LABEL_20:
    id v58 = +[HMDVendorDataManager sharedVendorDataManager];
    id v59 = [v19 manufacturer];
    __int16 v60 = [v19 model];
    id v61 = [v58 vendorModelEntryForManufacturer:v59 model:v60];

    if (v61)
    {
      uint64_t v62 = [v61 productData];

      if (v62)
      {
        id v49 = [v61 productData];
LABEL_29:

        uint64_t v24 = v148;
        goto LABEL_30;
      }
      long long v63 = (void *)MEMORY[0x230FBD990]();
      id v64 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        id v65 = HMFGetLogIdentifier();
        __int16 v151 = v63;
        [v148 uniqueIdentifier];
        id v66 = obj = v16;
        uint64_t v67 = [v148 manufacturer];
        __int16 v68 = [v148 model];
        *(_DWORD *)buf = 138544130;
        *(void *)&uint8_t buf[4] = v65;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v66;
        *(_WORD *)&buf[22] = 2112;
        uint64_t v167 = v67;
        LOWORD(v168) = 2112;
        *(void *)((char *)&v168 + 2) = v68;
        long long v69 = "%{public}@Accessory with identifier %@ does not have productData in the VIDB (manufacturer: '%@', model: '%@')";
        goto LABEL_27;
      }
    }
    else
    {
      long long v63 = (void *)MEMORY[0x230FBD990]();
      id v64 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        id v65 = HMFGetLogIdentifier();
        __int16 v151 = v63;
        [v148 uniqueIdentifier];
        id v66 = obj = v16;
        uint64_t v67 = [v148 manufacturer];
        __int16 v68 = [v148 model];
        *(_DWORD *)buf = 138544130;
        *(void *)&uint8_t buf[4] = v65;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v66;
        *(_WORD *)&buf[22] = 2112;
        uint64_t v167 = v67;
        LOWORD(v168) = 2112;
        *(void *)((char *)&v168 + 2) = v68;
        long long v69 = "%{public}@Accessory with identifier %@ could not be found in the VIDB (manufacturer: '%@', model: '%@')";
LABEL_27:
        _os_log_impl(&dword_22F52A000, v64, OS_LOG_TYPE_ERROR, v69, buf, 0x2Au);

        long long v63 = v151;
        id v16 = obj;
      }
    }

    id v49 = 0;
    goto LABEL_29;
  }
  [v19 productData];
  v47 = uint64_t v24 = v19;
  BOOL v48 = +[HMDAccessory validateProductData:v47];

  if (!v48)
  {
    id v50 = (void *)MEMORY[0x230FBD990]();
    long long v51 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      long long v52 = HMFGetLogIdentifier();
      id v53 = v17;
      id v54 = v15;
      id v55 = v16;
      id v56 = [v148 uniqueIdentifier];
      id v57 = [v148 productData];
      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v52;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v56;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v167 = v57;
      _os_log_impl(&dword_22F52A000, v51, OS_LOG_TYPE_ERROR, "%{public}@Accessory with identifier %@ has invalid productData published on AIS: %@", buf, 0x20u);

      id v16 = v55;
      id v15 = v54;
      id v17 = v53;
    }
    id v19 = v148;
    goto LABEL_20;
  }
  uint64_t v37 = v24;
LABEL_16:
  id v49 = [v37 productData];
LABEL_30:

  if (v49)
  {
    id v70 = v18;
    id v71 = v49;
    long long v72 = (void *)MEMORY[0x230FBD990]();
    id v73 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      id objd = v18;
      id v74 = v17;
      id v75 = v15;
      v77 = id v76 = v16;
      uint64_t v78 = [v70 uniqueIdentifier];
      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v77;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v78;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v167 = v71;
      _os_log_impl(&dword_22F52A000, v73, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory with identifier %@ is now bound to productData %@", buf, 0x20u);

      id v16 = v76;
      id v15 = v75;
      id v17 = v74;
      id v18 = objd;
    }

    [v70 setProductData:v71];

    uint64_t v24 = v148;
  }
  id v79 = [v24 server];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v80 = v79;
  }
  else {
    id v80 = 0;
  }
  id v81 = v24;
  id v82 = v80;

  int v83 = [v82 isWacComplete];
  id v84 = v18;
  id v85 = v16;
  long long v86 = [v85 clientIdentifier];
  [v84 setNetworkClientIdentifier:v86];

  [v84 setNetworkClientLAN:&unk_26E4730D8];
  id v87 = [v85 networkRouterUUID];
  id v88 = [v87 UUIDString];
  [v84 setNetworkRouterUUID:v88];

  id v89 = [v85 wiFiPSK];
  [v84 setWiFiUniquePreSharedKey:v89];

  id v90 = [v85 wiFiPSK];

  uint64_t v91 = 2;
  if (!v83) {
    uint64_t v91 = 0;
  }
  if (v90) {
    uint64_t v92 = 3;
  }
  else {
    uint64_t v92 = v91;
  }
  uint64_t v93 = [NSNumber numberWithInteger:v92];
  [v84 setWiFiCredentialType:v93];

  id v94 = v149;
  id v95 = [v149 server];
  id v96 = [v149 home];
  LODWORD(v93) = shouldCreateNativeMatterAccessoryFromServer(v95, v96);

  if (v93)
  {
    id v97 = (void *)MEMORY[0x230FBD990]();
    id v98 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
    {
      id v99 = HMFGetLogIdentifier();
      id v100 = [v149 primaryAccessoryUUID];
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v99;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v100;
      _os_log_impl(&dword_22F52A000, v98, OS_LOG_TYPE_INFO, "%{public}@Creating native matter accessory model uuid %@", buf, 0x16u);
    }
    [v84 setSupportsNativeMatter:MEMORY[0x263EFFA88]];
  }
  id v101 = [v148 services];
  id v102 = (void *)[v101 copy];
  id v103 = HMDNewModelsFromHAPServices(v102, v84);

  long long v160 = 0u;
  long long v161 = 0u;
  long long v158 = 0u;
  long long v159 = 0u;
  id v104 = [v149 server];
  id v105 = [v104 accessories];

  id obja = v105;
  uint64_t v106 = [v105 countByEnumeratingWithState:&v158 objects:buf count:16];
  if (v106)
  {
    uint64_t v107 = v106;
    uint64_t v108 = *(void *)v159;
    uint64_t v150 = *(void *)v159;
    do
    {
      uint64_t v109 = 0;
      uint64_t v152 = v107;
      do
      {
        if (*(void *)v159 != v108) {
          objc_enumerationMutation(obja);
        }
        id v110 = *(void **)(*((void *)&v158 + 1) + 8 * v109);
        if (([v110 isPrimary] & 1) == 0)
        {
          uint64_t v111 = [v94 certificationStatus];
          id v112 = v84;
          id v113 = v84;
          id v114 = v110;
          long long v115 = [v114 instanceID];
          long long v116 = [v115 stringValue];
          *(void *)uint64_t v162 = v116;
          long long v117 = [MEMORY[0x263EFF8C0] arrayWithObjects:v162 count:1];

          id v118 = (void *)MEMORY[0x263F08C38];
          id v119 = [v113 modelID];
          __int16 v120 = objc_msgSend(v118, "hm_deriveUUIDFromBaseUUID:withSalts:", v119, v117);

          uint64_t v121 = +[MKFModelFactory createHAPAccessoryModelWithModelID:v120];
          [v113 addHostedAccessoriesObject:v121];
          HMDPopulateAccessoryModelFromHAPAccessory(v121, v114, v111, v113);

          [v121 setWiFiCredentialType:&unk_26E4730D8];
          __int16 v122 = (void *)MEMORY[0x230FBD990]();
          id v123 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
          {
            uint64_t v124 = HMFGetLogIdentifier();
            dispatch_group_t v125 = [v114 uniqueIdentifier];
            id v126 = [v121 modelID];
            id v127 = [v126 UUIDString];
            *(_DWORD *)uint64_t v162 = 138543874;
            *(void *)&v162[4] = v124;
            *(_WORD *)&v162[12] = 2112;
            *(void *)&v162[14] = v125;
            *(_WORD *)&v162[22] = 2112;
            id v163 = v127;
            _os_log_impl(&dword_22F52A000, v123, OS_LOG_TYPE_INFO, "%{public}@Created secondary accessory with identifier %@ and uuid %@", v162, 0x20u);

            id v94 = v149;
          }

          id v128 = [v114 services];
          id v129 = (void *)[v128 copy];
          id v130 = HMDNewModelsFromHAPServices(v129, v121);

          id v84 = v112;
          uint64_t v108 = v150;
          uint64_t v107 = v152;
        }
        ++v109;
      }
      while (v107 != v109);
      uint64_t v107 = [obja countByEnumeratingWithState:&v158 objects:buf count:16];
    }
    while (v107);
  }

  id v131 = [v94 server];
  id v132 = +[HMDHome updatedHomeModelCHIPPropertiesForAddedHAPAccessoryServer:v131];

  id v133 = [v145 _readDataNeededImmediatelyAfterPairing:v94 intoModel:v84];
  *(void *)uint64_t v162 = MEMORY[0x263EF8330];
  *(void *)&v162[8] = 3221225472;
  *(void *)&v162[16] = __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke;
  id v163 = &unk_264A2C678;
  id v134 = v84;
  id v164 = v134;
  uint64_t v165 = v145;
  id v135 = [v133 then:v162];
  *(void *)&long long v158 = MEMORY[0x263EF8330];
  *((void *)&v158 + 1) = 3221225472;
  *(void *)&long long v159 = __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke_1412;
  *((void *)&v159 + 1) = &unk_264A1FE70;
  *(void *)&long long v160 = v145;
  *((void *)&v160 + 1) = v94;
  id v136 = v134;
  *(void *)&long long v161 = v136;
  id v137 = [v135 then:&v158];
  *(void *)buf = MEMORY[0x263EF8330];
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke_2;
  uint64_t v167 = &unk_264A2BF18;
  *(void *)&long long v168 = v145;
  *((void *)&v168 + 1) = v136;
  id v169 = v132;
  id v138 = v146;
  id v170 = v146;
  id v139 = v132;
  id v140 = v136;
  id v4 = [v137 then:buf];

  while (1)
  {

    id v141 = v4;
    if (v141) {
      break;
    }
    _HMFPreconditionFailure();
LABEL_61:
    id v138 = v146;
  }
  __int16 v142 = v141;

  return 3;
}

uint64_t __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  id v37 = a2;
  uint64_t v3 = [*(id *)(a1 + 32) administratorHandler];
  int v4 = [v3 shouldRelayMessages];

  uint64_t v5 = *(void **)(a1 + 32);
  if (v4)
  {
    uint64_t v6 = [*(id *)(a1 + 32) retrieveNewlyAddedAccessoriesForPairedAccessoryServerInfo:*(void *)(a1 + 40)];
    uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
  else
  {
    uint64_t v8 = [*(id *)(a1 + 48) identifier];
    uint64_t v9 = [v5 retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:v8];
    uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }
  uint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(void **)(a1 + 56);
  id v14 = *(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  id v15 = v13;
  id v38 = v14;
  if (v12)
  {
    id v41 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v14, "count"));
    id v16 = [v12 notificationRegistrations];
    uint64_t v40 = [v16 count];

    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    obuint64_t j = v14;
    uint64_t v17 = [obj countByEnumeratingWithState:&v46 objects:v50 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)v47;
      int v20 = HMDAppleMediaProfile;
      uint64_t v39 = *(void *)v47;
      do
      {
        uint64_t v21 = 0;
        do
        {
          if (*(void *)v47 != v19) {
            objc_enumerationMutation(obj);
          }
          id v22 = *(id *)(*((void *)&v46 + 1) + 8 * v21);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            BOOL v23 = v22;
          }
          else {
            BOOL v23 = 0;
          }
          id v24 = v23;

          uint64_t v25 = [v24 uniqueIdentifier];
          uint64_t v26 = [v15 objectForKey:v25];

          if (v24) {
            BOOL v27 = v26 == 0;
          }
          else {
            BOOL v27 = 1;
          }
          if (!v27)
          {
            id v45 = 0;
            [MEMORY[0x263F42538] futureWithPromise:&v45];
            id v28 = v15;
            v30 = char v29 = v20;
            [v12 workQueue];
            v32 = __int16 v31 = v12;
            v43[0] = MEMORY[0x263EF8330];
            v43[1] = 3221225472;
            v43[2] = __83__HMDHome__associateAccessoriesWithHAPAccessories_uniqueIdentifierHAPAccessoryMap___block_invoke;
            v43[3] = &unk_264A2F7F8;
            id v44 = v45;
            [v24 configureWithAccessory:v26 homeNotificationsEnabled:v40 != 0 queue:v32 completion:v43];

            uint64_t v12 = v31;
            [v41 addObject:v30];

            int v20 = v29;
            id v15 = v28;
            uint64_t v19 = v39;
          }
          ++v21;
        }
        while (v18 != v21);
        uint64_t v18 = [obj countByEnumeratingWithState:&v46 objects:v50 count:16];
      }
      while (v18);
    }

    uint64_t v33 = [MEMORY[0x263F42538] allSettled:v41];
    uint64_t v12 = [v33 ignoreOutcome];
  }
  id v34 = v12;
  if (!v34) {
    _HMFPreconditionFailure();
  }
  __int16 v35 = v34;

  return 3;
}

uint64_t __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  id v34 = a2;
  uint64_t v3 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  int v4 = *(void **)(a1 + 32);
  uint64_t v5 = [*(id *)(a1 + 40) pairingEvent];
  id v36 = v3;
  id v35 = v5;
  if (!v4) {
    goto LABEL_20;
  }
  uint64_t v6 = (void *)MEMORY[0x230FBD990]();
  id v37 = v4;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    uint64_t v9 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v36, "count"));
    uint64_t v10 = [v35 accessoryUUID];
    *(_DWORD *)buf = 138543874;
    id v54 = v8;
    __int16 v55 = 2112;
    id v56 = v9;
    __int16 v57 = 2112;
    id v58 = v10;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Performing post add configuration for %@ new accessories for pairing: %@", buf, 0x20u);
  }
  id v11 = objc_alloc(MEMORY[0x263F424F0]);
  uint64_t v12 = NSString;
  uint64_t v13 = MEMORY[0x230FBBCF0](v37, sel__configureNewlyAddedAccessories_pairingEvent_);
  id v14 = [v12 stringWithFormat:@"%@, %s:%ld", v13, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 16206];
  id v52 = (id)[v11 initWithName:v14];

  v50[0] = 0;
  v50[1] = v50;
  v50[2] = 0x3032000000;
  v50[3] = __Block_byref_object_copy__14257;
  void v50[4] = __Block_byref_object_dispose__14258;
  id v51 = 0;
  id v15 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v36, "count"));
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id v16 = v36;
  uint64_t v17 = [v16 countByEnumeratingWithState:&v46 objects:buf count:16];
  if (v17)
  {
    uint64_t v18 = *(void *)v47;
    do
    {
      uint64_t v19 = 0;
      do
      {
        if (*(void *)v47 != v18) {
          objc_enumerationMutation(v16);
        }
        id v20 = *(id *)(*((void *)&v46 + 1) + 8 * v19);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        id v22 = v21;

        if (v22)
        {
          v38[0] = 0;
          BOOL v23 = [MEMORY[0x263F42538] futureWithPromise:v38];
          v41[0] = MEMORY[0x263EF8330];
          v41[1] = 3221225472;
          v41[2] = __56__HMDHome__configureNewlyAddedAccessories_pairingEvent___block_invoke;
          v41[3] = &unk_264A2F7A8;
          v41[4] = v37;
          id v24 = v22;
          id v42 = v24;
          id v45 = v50;
          id v43 = v52;
          id v44 = v38[0];
          [v24 readInitialRequiredCharacteristicsForAccessory:v41];
          [v24 checkHAPSessionRestore];
          [v15 addObject:v23];
        }
        ++v19;
      }
      while (v17 != v19);
      uint64_t v17 = [v16 countByEnumeratingWithState:&v46 objects:buf count:16];
    }
    while (v17);
  }

  id v25 = objc_alloc(MEMORY[0x263F42520]);
  uint64_t v26 = [v37 workQueue];
  BOOL v27 = (void *)[v25 initWithQueue:v26];

  id v28 = [MEMORY[0x263F42538] allSettled:v15];
  char v29 = [v28 ignoreOutcome];
  v38[0] = (id)MEMORY[0x263EF8330];
  v38[1] = (id)3221225472;
  void v38[2] = __56__HMDHome__configureNewlyAddedAccessories_pairingEvent___block_invoke_3;
  void v38[3] = &unk_264A169A8;
  void v38[4] = v37;
  uint64_t v40 = v50;
  id v39 = v35;
  uint64_t v30 = [v29 inContext:v27 then:v38];

  _Block_object_dispose(v50, 8);
  __HMFActivityScopeLeave();

  while (1)
  {

    id v31 = v30;
    if (v31) {
      break;
    }
    _HMFPreconditionFailure();
LABEL_20:
    uint64_t v30 = 0;
  }
  id v32 = v31;

  return 3;
}

uint64_t __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_4(uint64_t a1)
{
  return 1;
}

uint64_t __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_6(uint64_t a1)
{
  return 1;
}

uint64_t __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_7(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v3 = a2;
  int v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    uint64_t v8 = *(void *)(a1 + 40);
    int v10 = 138543874;
    id v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    id v15 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Add accessory failed for %@ with error %@", (uint8_t *)&v10, 0x20u);
  }
  [*(id *)(a1 + 32) _removeFailedAddWithAccessoryServerInfo:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) respondWithError:v3];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();

  return 1;
}

void __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_5(uint64_t a1, void *a2)
{
}

void __56__HMDHome__configureNewlyAddedAccessories_pairingEvent___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [*(id *)(a1 + 32) administratorHandler];
  char v5 = [v4 shouldRelayMessages];

  if ((v5 & 1) == 0) {
    [*(id *)(a1 + 40) autoConfigureTargetController];
  }
  if ([*(id *)(a1 + 40) isPrimary])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), *(id *)(a1 + 40));
    [*(id *)(a1 + 48) begin];
    id v9 = *(id *)(a1 + 48);
    uint64_t v6 = *(void **)(a1 + 40);
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    void v7[2] = __56__HMDHome__configureNewlyAddedAccessories_pairingEvent___block_invoke_2;
    v7[3] = &unk_264A2F7F8;
    id v8 = *(id *)(a1 + 56);
    [v6 handleUpdatedServicesForThreadManagementWithCompletion:v7];

    __HMFActivityScopeLeave();
  }
  else
  {
    [*(id *)(a1 + 56) fulfillWithValue:0];
  }
}

uint64_t __56__HMDHome__configureNewlyAddedAccessories_pairingEvent___block_invoke_3(void *a1, void *a2)
{
  id v3 = a2;
  int v4 = (void *)a1[5];
  char v5 = (void *)a1[4];
  id v6 = *(id *)(*(void *)(a1[6] + 8) + 40);
  id v7 = v4;
  if (v5)
  {
    id v8 = [MEMORY[0x263F424F0] currentActivity];
    id v22 = 0;
    char v5 = [MEMORY[0x263F42538] futureWithPromise:&v22];
    if ([v6 isPrimary])
    {
      [v8 begin];
      id v21 = v8;
      id v9 = [MEMORY[0x263EFF910] date];
      v15[0] = MEMORY[0x263EF8330];
      v15[1] = 3221225472;
      v15[2] = __60__HMDHome__commissionAccessoryToThreadNetwork_pairingEvent___block_invoke;
      v15[3] = &unk_264A1D1E8;
      id v10 = v9;
      id v16 = v10;
      id v17 = v21;
      id v18 = v6;
      id v19 = v7;
      id v20 = v22;
      [v18 commissionToThreadNetworkWithPairingEvent:v19 completion:v15];

      __HMFActivityScopeLeave();
    }
    else
    {
      [v22 fulfillWithValue:0];
    }
  }
  id v11 = v5;
  if (!v11)
  {
    __int16 v14 = (_Unwind_Exception *)_HMFPreconditionFailure();
    __HMFActivityScopeLeave();
    _Unwind_Resume(v14);
  }
  __int16 v12 = v11;

  return 3;
}

uint64_t __60__HMDHome__commissionAccessoryToThreadNetwork_pairingEvent___block_invoke(uint64_t a1, void *a2)
{
  id v3 = (void *)MEMORY[0x263EFF910];
  id v4 = a2;
  char v5 = [v3 date];
  [v5 timeIntervalSinceDate:*(void *)(a1 + 32)];
  double v7 = v6;

  [*(id *)(a1 + 48) uuid];
  id v8 = (id)[NSNumber numberWithDouble:v7];
  [v4 domain];

  [v4 code];
  [*(id *)(a1 + 56) setThreadCommissioningDuration:v7];
  [*(id *)(a1 + 56) setThreadCommissioningError:v4];

  id v9 = *(void **)(a1 + 64);
  return [v9 fulfillWithValue:0];
}

uint64_t __56__HMDHome__configureNewlyAddedAccessories_pairingEvent___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) fulfillWithValue:0];
}

uint64_t __83__HMDHome__associateAccessoriesWithHAPAccessories_uniqueIdentifierHAPAccessoryMap___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) fulfillWithValue:0];
}

uint64_t __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) supportsMatCredACP];
  if (![v4 BOOLValue]) {
    goto LABEL_4;
  }
  char v5 = [*(id *)(a1 + 32) mfiCertifiedACWG];
  if ([v5 BOOLValue])
  {

LABEL_4:
LABEL_5:
    double v6 = [*(id *)(a1 + 32) supportsMatCredACP];
    int v7 = [v6 BOOLValue];

    if (v7)
    {
      id v8 = (void *)MEMORY[0x230FBD990]();
      id v9 = *(id *)(a1 + 40);
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        __int16 v12 = [*(id *)(a1 + 32) mfiCertifiedACWG];
        *(_DWORD *)buf = 138543874;
        *(void *)&uint8_t buf[4] = v11;
        __int16 v28 = 1024;
        int v29 = [v12 BOOLValue];
        __int16 v30 = 1024;
        int v31 = skipAuthPromptDialog;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Not showing uncertified dialog for ECB lock. Certification status: %{BOOL}d, shouldSkipAuthPrompt: %{BOOL}d", buf, 0x18u);
      }
    }
    uint64_t v13 = [MEMORY[0x263F42538] futureWithNoValue];
    goto LABEL_10;
  }
  int v17 = skipAuthPromptDialog;

  if (v17) {
    goto LABEL_5;
  }
  id v18 = (void *)MEMORY[0x230FBD990]();
  id v19 = *(id *)(a1 + 40);
  id v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    id v21 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    *(void *)&uint8_t buf[4] = v21;
    _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Uncertified ECB lock detected, showing the uncertified accessory dialog", buf, 0xCu);
  }
  *(void *)buf = 0;
  uint64_t v13 = [MEMORY[0x263F42538] futureWithPromise:buf];
  id v22 = +[HMDUIDialogPresenter sharedUIDialogPresenter];
  uint64_t v23 = *(void *)(a1 + 32);
  id v24 = [*(id *)(a1 + 40) workQueue];
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 3221225472;
  void v25[2] = __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke_1411;
  v25[3] = &unk_264A251B0;
  void v25[4] = *(void *)(a1 + 40);
  id v26 = *(id *)buf;
  [v22 requestUserPermissionForUnauthenticatedAliroLockWithContext:v23 queue:v24 completionHandler:v25];

LABEL_10:
  id v14 = v13;
  if (!v14) {
    _HMFPreconditionFailure();
  }
  id v15 = v14;

  return 3;
}

uint64_t __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke_1412(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) _configureWithFeatureSpecificDataAccessory:*(void *)(a1 + 40) accessoryModel:*(void *)(a1 + 48)];
  if (v4)
  {
    char v5 = v4;

    return 3;
  }
  else
  {
    uint64_t v7 = _HMFPreconditionFailure();
    return __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke_2(v7);
  }
}

uint64_t __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke_2(id *a1, void *a2)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [a1[4] administratorHandler];
  int v5 = [v4 shouldRelayMessages];

  if (!v5)
  {
    long long v47 = (void *)MEMORY[0x230FBD990]();
    id v48 = a1[4];
    long long v49 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      id v50 = HMFGetLogIdentifier();
      id v51 = a1[5];
      id v52 = [a1[7] shortDescription];
      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v50;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v51;
      *(_WORD *)&buf[22] = 2112;
      id v61 = v52;
      _os_log_impl(&dword_22F52A000, v49, OS_LOG_TYPE_INFO, "%{public}@Locally adding accessories for the home using primary accessory model: %@, message: %@", buf, 0x20u);
    }
    -[HMDHome _addAccessoriesUsingPrimaryAccessoryModel:updatedHomeInfo:message:](a1[4], a1[5], a1[6], a1[7]);
    id v53 = (id)objc_claimAutoreleasedReturnValue();
    if (v53)
    {
      id v54 = v53;

      goto LABEL_25;
    }
    goto LABEL_26;
  }
  id v7 = a1[4];
  id v6 = a1[5];
  id v8 = a1[6];
  id v9 = v6;
  id v10 = v8;
  id v56 = v3;
  __int16 v57 = v9;
  if (v7)
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = v7;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v9;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Remotely adding accessories via primary resident using primary accessory model: %@", buf, 0x16u);
    }
    id v15 = objc_alloc_init(MEMORY[0x263EFF9A0]);
    id v16 = v9;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_27:
      objc_opt_class();
      _HMFPreconditionFailureWithFormat();
    }
    id v59 = 0;
    int v17 = +[HMDStructuredWriter writerIntoObject:&v59 extendedTypeOptions:9];
    id v18 = HMDRemoteAddCodingModel();
    [v18 encodeRootObject:v16 withWriter:v17];

    id v19 = (void *)MEMORY[0x230FBD990]();
    id v20 = v12;
    id v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      id v22 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v22;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v59;
      _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_DEBUG, "%{public}@Including serialized accessories: %@", buf, 0x16u);
    }
    uint64_t v23 = [v15 setObject:v59 forKeyedSubscript:@"HMDSerializedAccessoriesMessageKey"];
    if (v10)
    {
      id v24 = (void *)MEMORY[0x230FBD990](v23);
      id v25 = v20;
      id v26 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        BOOL v27 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v27;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v10;
        _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_DEBUG, "%{public}@Including updated home info: %@", buf, 0x16u);
      }
      [v15 setObject:v10 forKeyedSubscript:@"HMDUpdatedHomeInfoMessageKey"];
    }
    __int16 v28 = [v16 hostAccessory];
    int v29 = [v28 modelID];

    if (v29)
    {
      __int16 v30 = (void *)MEMORY[0x230FBD990]();
      id v31 = v20;
      uint64_t v32 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v33 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v33;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v29;
        _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_DEBUG, "%{public}@Including host accessory uuid: %@", buf, 0x16u);
      }
      id v34 = [v29 UUIDString];
      [v15 setObject:v34 forKeyedSubscript:@"HMDHostAccessoryIdentifierMessageKey"];
    }
    id v58 = 0;
    id v35 = [MEMORY[0x263F42538] futureWithPromise:&v58];
    id v36 = (void *)MEMORY[0x263F42590];
    id v37 = (void *)[v15 copy];
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __76__HMDHome__remotelyAddAccessoriesFromPrimaryAccessoryModel_updatedHomeInfo___block_invoke;
    id v61 = &unk_264A2AEE8;
    id v62 = v20;
    id v38 = v16;
    id v63 = v38;
    id v64 = v58;
    id v39 = [v36 messageWithName:@"HMDRemoteAddHAPAccessoriesMessage" messagePayload:v37 responseHandler:buf];

    id v40 = objc_alloc(MEMORY[0x263F42570]);
    id v41 = [v20 uuid];
    id v42 = (void *)[v40 initWithTarget:v41];

    [v39 setDestination:v42];
    [v39 setQualityOfService:33];
    id v43 = [v20 administratorHandler];
    id v44 = [v43 operationForMessage:v39 error:0];
    if (v44) {
      [v43 addOperation:v44];
    }
  }
  else
  {
    id v35 = 0;
  }

  id v45 = v35;
  if (!v45)
  {
LABEL_26:
    _HMFPreconditionFailure();
    goto LABEL_27;
  }
  long long v46 = v45;

  id v3 = v56;
LABEL_25:

  return 3;
}

- (id)_addAccessoriesUsingPrimaryAccessoryModel:(void *)a3 updatedHomeInfo:(void *)a4 message:
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    dispatch_group_t v10 = dispatch_group_create();
    id v11 = [a1 backingStore];
    id v12 = [v9 name];
    uint64_t v13 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v14 = [v11 transaction:v12 options:v13];

    id v15 = v14;
    id v16 = v7;
    id v17 = a1;
    id v18 = v10;
    id v41 = v9;
    id v19 = v9;
    HMDAddToTransactionBlockFromHAPAccessoryModel(v15, v16, v17, v18, v19);
    id v20 = (id)objc_claimAutoreleasedReturnValue();
    if (!v20)
    {
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      id v21 = [v16 hostedAccessories];
      id v20 = (id)[v21 countByEnumeratingWithState:&v46 objects:buf count:16];
      if (v20)
      {
        id v39 = v8;
        id v40 = v7;
        uint64_t v22 = *(void *)v47;
        while (2)
        {
          for (uint64_t i = 0; i != v20; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v47 != v22) {
              objc_enumerationMutation(v21);
            }
            id v24 = objc_msgSend(*(id *)(*((void *)&v46 + 1) + 8 * i), "castIfHAPAccessory", v39, v40);
            if (v24)
            {
              id v25 = v24;
              id v26 = HMDAddToTransactionBlockFromHAPAccessoryModel(v15, v24, v17, v18, v19);
              if (v26)
              {
                id v20 = v26;

                id v21 = v20;
                goto LABEL_15;
              }
            }
          }
          id v20 = (id)[v21 countByEnumeratingWithState:&v46 objects:buf count:16];
          if (v20) {
            continue;
          }
          break;
        }
LABEL_15:
        id v8 = v39;
        id v7 = v40;
      }
    }
    if (v20)
    {
      BOOL v27 = (void *)MEMORY[0x230FBD990]();
      id v28 = v17;
      int v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        __int16 v30 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        *(void *)&uint8_t buf[4] = v30;
        __int16 v51 = 2112;
        id v52 = v16;
        __int16 v53 = 2112;
        id v54 = v20;
        _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, "%{public}@Failed to add to transaction block from primary accessory model %@: %@", buf, 0x20u);
      }
      id v31 = [MEMORY[0x263F42538] futureWithError:v20];

      goto LABEL_29;
    }
    id v32 = v15;
    id v33 = v8;
    id v34 = v17;
    id v35 = [v34 emptyModelObjectWithChangeType:2];
    if (v33)
    {
      int v36 = [v34 updateCHIPPropertiesOnHomeModel:v35 usingUpdatedHomeInfo:v33];
      if (([v34 hasNeverAddedAnyHAPAccessory] & 1) == 0)
      {
        if (!v36) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
    }
    else if (![v34 hasNeverAddedAnyHAPAccessory])
    {
LABEL_28:

      *(void *)buf = 0;
      id v31 = [MEMORY[0x263F42538] futureWithPromise:buf];
      v42[0] = MEMORY[0x263EF8330];
      v42[1] = 3221225472;
      v42[2] = __77__HMDHome__addAccessoriesUsingPrimaryAccessoryModel_updatedHomeInfo_message___block_invoke;
      v42[3] = &unk_264A2E210;
      id v43 = v18;
      id v44 = v34;
      id v45 = *(id *)buf;
      [v32 run:v42];

LABEL_29:
      id v9 = v41;
      goto LABEL_30;
    }
    id v37 = [MEMORY[0x263EFF910] date];
    [v35 setFirstHAPAccessoryAddedDate:v37];

LABEL_27:
    [v32 add:v35];
    goto LABEL_28;
  }
  id v31 = 0;
LABEL_30:

  return v31;
}

void __77__HMDHome__addAccessoriesUsingPrimaryAccessoryModel_updatedHomeInfo_message___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(a1 + 32);
  int v5 = [*(id *)(a1 + 40) workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __77__HMDHome__addAccessoriesUsingPrimaryAccessoryModel_updatedHomeInfo_message___block_invoke_2;
  v7[3] = &unk_264A2F820;
  id v8 = v3;
  id v9 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_group_notify(v4, v5, v7);
}

uint64_t __77__HMDHome__addAccessoriesUsingPrimaryAccessoryModel_updatedHomeInfo_message___block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v1 = *(void **)(a1 + 40);
  if (v2) {
    return objc_msgSend(v1, "rejectWithError:");
  }
  else {
    return objc_msgSend(v1, "fulfillWithValue:");
  }
}

void __76__HMDHome__remotelyAddAccessoriesFromPrimaryAccessoryModel_updatedHomeInfo___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = *(id *)(a1 + 32);
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      dispatch_group_t v10 = HMFGetLogIdentifier();
      uint64_t v11 = *(void *)(a1 + 40);
      int v12 = 138543874;
      uint64_t v13 = v10;
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to remotely add accessories using primary accessory model %@: %@", (uint8_t *)&v12, 0x20u);
    }
    [*(id *)(a1 + 48) rejectWithError:v5];
  }
  else
  {
    [*(id *)(a1 + 48) fulfillWithValue:0];
  }
}

void __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke_1411(uint64_t a1, int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v7)
    {
      id v8 = HMFGetLogIdentifier();
      int v12 = 138543362;
      uint64_t v13 = v8;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Uncertified ECB lock detected, user canceled pairing", (uint8_t *)&v12, 0xCu);
    }
    id v9 = *(void **)(a1 + 40);
    dispatch_group_t v10 = [MEMORY[0x263F087E8] hmErrorWithCode:23];
    [v9 rejectWithError:v10];
  }
  else
  {
    if (v7)
    {
      uint64_t v11 = HMFGetLogIdentifier();
      int v12 = 138543362;
      uint64_t v13 = v11;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Uncertified ECB lock detected, user continued pairing", (uint8_t *)&v12, 0xCu);
    }
    [*(id *)(a1 + 40) fulfillWithNoValue];
  }
}

- (id)_removeUserFromNewlyPairedAccessoryServer:(id)a3 user:(id)a4
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = self;
  dispatch_group_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    int v12 = [v6 identifier];
    *(_DWORD *)uint64_t v18 = 138543618;
    *(void *)&v18[4] = v11;
    __int16 v19 = 2112;
    id v20 = v12;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Removing user from newly paired accessory server: %@", v18, 0x16u);
  }
  *(void *)uint64_t v18 = 0;
  uint64_t v13 = [MEMORY[0x263F42538] futureWithPromise:v18];
  if ([v7 isCurrentUser])
  {
    uint64_t v14 = [(HMDHome *)v9 workQueue];
    uint64_t v15 = [*(id *)v18 errorOnlyResolverBlock];
    [v6 removePairingForCurrentControllerOnQueue:v14 completion:v15];
  }
  else
  {
    uint64_t v14 = [v7 pairingIdentity];
    uint64_t v15 = [(HMDHome *)v9 workQueue];
    __int16 v16 = [*(id *)v18 errorOnlyResolverBlock];
    [v6 removePairing:v14 completionQueue:v15 completionHandler:v16];
  }
  return v13;
}

- (id)_addOwnerToNewlyPairedAccessoryServer:(id)a3
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    id v9 = [v4 identifier];
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v22 = 2112;
    uint64_t v23 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding owner to newly paired accessory server: %@", buf, 0x16u);
  }
  if ([(HMDHome *)v6 isSharedAdmin])
  {
    *(void *)buf = 0;
    dispatch_group_t v10 = [MEMORY[0x263F42538] futureWithPromise:buf];
    id v11 = objc_alloc(MEMORY[0x263F42520]);
    int v12 = [(HMDHome *)v6 workQueue];
    uint64_t v13 = (void *)[v11 initWithQueue:v12];

    uint64_t v14 = [v10 ignoreErrors];
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    void v19[2] = __49__HMDHome__addOwnerToNewlyPairedAccessoryServer___block_invoke;
    v19[3] = &unk_264A2C678;
    void v19[4] = v6;
    id v20 = v4;
    uint64_t v15 = [v14 inContext:v13 then:v19];
  }
  else
  {
    __int16 v16 = (void *)MEMORY[0x263F42538];
    id v17 = [MEMORY[0x263F087E8] hmErrorWithCode:17];
    uint64_t v15 = [v16 futureWithError:v17];
  }
  return v15;
}

uint64_t __49__HMDHome__addOwnerToNewlyPairedAccessoryServer___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) owner];
  id v5 = [v4 pairingIdentity];

  id v6 = objc_alloc(MEMORY[0x263F35A78]);
  id v7 = [v5 identifier];
  id v8 = [v5 publicKey];
  id v9 = (void *)[v6 initWithIdentifier:v7 publicKey:v8 privateKey:0 permissions:1];

  id v21 = 0;
  dispatch_group_t v10 = [MEMORY[0x263F42538] futureWithPromise:&v21];
  id v11 = *(void **)(a1 + 40);
  int v12 = [*(id *)(a1 + 32) workQueue];
  uint64_t v13 = [v21 errorOnlyResolverBlock];
  [v11 addPairing:v9 completionQueue:v12 completionHandler:v13];

  id v14 = v10;
  if (v14)
  {
    uint64_t v15 = v14;

    return 3;
  }
  else
  {
    id v17 = (HMDHome *)_HMFPreconditionFailure();
    return (uint64_t)[(HMDHome *)v17 _readDataNeededImmediatelyAfterPairing:v19 intoModel:v20];
  }
}

- (id)_readDataNeededImmediatelyAfterPairing:(id)a3 intoModel:(id)a4
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [MEMORY[0x263F42530] internalOnlyInitializer];
  id v9 = (void *)MEMORY[0x230FBD990]();
  dispatch_group_t v10 = self;
  id v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    int v12 = HMFGetLogIdentifier();
    uint64_t v13 = [v8 UUID];
    *(_DWORD *)buf = 138543618;
    id v31 = v12;
    __int16 v32 = 2112;
    id v33 = v13;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Reading data needed immediately after pairing", buf, 0x16u);
  }
  id v14 = [v6 server];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  id v16 = v15;

  if (v16)
  {
    id v17 = [MEMORY[0x263F42530] untrackedPlaceholderFlow];
    SEL v18 = [v16 createDoorLockClusterObjectWithFlow:v17];
    uint64_t v22 = MEMORY[0x263EF8330];
    uint64_t v23 = 3221225472;
    uint64_t v24 = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke;
    id v25 = &unk_264A16980;
    id v26 = v8;
    id v27 = v7;
    id v28 = v10;
    id v29 = v16;
    id v19 = [v18 then:&v22];
    id v20 = objc_msgSend(v19, "ignoreOutcome", v22, v23, v24, v25);
  }
  else
  {
    id v20 = [MEMORY[0x263F42538] futureWithNoValue];
  }

  return v20;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 fetchAccessorySupportsPinCodesWithFlow:*(void *)(a1 + 32)];
  v44[0] = MEMORY[0x263EF8330];
  v44[1] = 3221225472;
  v44[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2;
  v44[3] = &unk_264A168B8;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v45 = v5;
  uint64_t v46 = v6;
  id v47 = *(id *)(a1 + 32);
  id v7 = [v4 then:v44];
  id v8 = [v7 ignoreOutcome];
  v39[0] = MEMORY[0x263EF8330];
  v39[1] = 3221225472;
  void v39[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1432;
  void v39[3] = &unk_264A2BF18;
  id v9 = v3;
  id v40 = v9;
  id v10 = *(id *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  id v41 = v10;
  uint64_t v42 = v11;
  id v43 = *(id *)(a1 + 32);
  int v12 = [v8 then:v39];
  uint64_t v13 = [v12 ignoreOutcome];
  v34[0] = MEMORY[0x263EF8330];
  v34[1] = 3221225472;
  v34[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1434;
  v34[3] = &unk_264A2BF18;
  id v14 = v9;
  id v35 = v14;
  id v36 = *(id *)(a1 + 32);
  id v15 = *(id *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  id v37 = v15;
  uint64_t v38 = v16;
  id v17 = [v13 then:v34];
  SEL v18 = [v17 ignoreOutcome];
  v28[0] = MEMORY[0x263EF8330];
  v28[1] = 3221225472;
  void v28[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1439;
  void v28[3] = &unk_264A16958;
  id v19 = v14;
  id v29 = v19;
  id v30 = *(id *)(a1 + 40);
  id v20 = *(id *)(a1 + 32);
  uint64_t v21 = *(void *)(a1 + 48);
  uint64_t v22 = *(void **)(a1 + 56);
  id v31 = v20;
  uint64_t v32 = v21;
  id v33 = v22;
  id v23 = [v18 then:v28];
  if (v23)
  {
    uint64_t v24 = v23;

    return 3;
  }
  else
  {
    id v26 = (id *)_HMFPreconditionFailure();
    return __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2(v26, v27);
  }
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2(id *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [a1[4] supportsMatterAccessCode];
  char v5 = HMFEqualObjects();

  if ((v5 & 1) == 0)
  {
    uint64_t v6 = (void *)MEMORY[0x230FBD990]([a1[4] setSupportsMatterAccessCode:v3]);
    id v7 = a1[5];
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      id v10 = [a1[6] UUID];
      int v12 = 138543874;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      id v15 = v10;
      __int16 v16 = 2112;
      id v17 = v3;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] supportsPinCodes: %@", (uint8_t *)&v12, 0x20u);
    }
  }

  return 1;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1432(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) fetchAccessorySupportsTapToUnlock];
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  void v12[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2_1433;
  v12[3] = &unk_264A168B8;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  id v13 = v5;
  uint64_t v14 = v6;
  id v15 = v7;
  id v8 = [v4 then:v12];
  if (v8)
  {
    id v9 = v8;

    return 3;
  }
  else
  {
    uint64_t v11 = _HMFPreconditionFailure();
    return __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1434(v11);
  }
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1434(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) fetchFeatureMapForSupportingWeekAndYearDayScheduleWithFlow:*(void *)(a1 + 40)];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2_1435;
  void v11[3] = &unk_264A222A0;
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v12 = v5;
  uint64_t v13 = v6;
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 32);
  id v7 = [v4 then:v11];
  if (v7)
  {
    id v8 = v7;

    return 3;
  }
  else
  {
    uint64_t v10 = _HMFPreconditionFailure();
    return __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1439(v10);
  }
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1439(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_os_feature_enabled_impl()
    || (isInternalBuild() & 1) == 0
    && !CFPreferencesGetAppBooleanValue(@"UWBUnlock", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0))
  {
    uint64_t v16 = 1;
    goto LABEL_7;
  }
  id v4 = [*(id *)(a1 + 32) fetchReaderGroupSubIdentifier];
  v31[0] = MEMORY[0x263EF8330];
  v31[1] = 3221225472;
  void v31[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2_1440;
  void v31[3] = &unk_264A168E0;
  id v32 = *(id *)(a1 + 40);
  id v5 = [v4 then:v31];
  uint64_t v6 = [v5 ignoreOutcome];
  v26[0] = MEMORY[0x263EF8330];
  v26[1] = 3221225472;
  void v26[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_3;
  v26[3] = &unk_264A2BF18;
  id v27 = *(id *)(a1 + 32);
  id v28 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 56);
  id v29 = v7;
  uint64_t v30 = v8;
  id v9 = [v6 then:v26];
  uint64_t v10 = [v9 ignoreOutcome];
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 3221225472;
  id v20[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1442;
  v20[3] = &unk_264A16930;
  id v21 = *(id *)(a1 + 32);
  id v22 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void **)(a1 + 64);
  id v23 = v11;
  uint64_t v24 = v12;
  id v25 = v13;
  id v14 = [v10 then:v20];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = 3;

LABEL_7:
    return v16;
  }
  uint64_t v18 = _HMFPreconditionFailure();
  return __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2_1440(v18, v19);
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2_1440(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) fetchAccessorySupportsAliroProvisioningWithFlow:*(void *)(a1 + 40)];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_4;
  void v11[3] = &unk_264A168B8;
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v12 = v5;
  uint64_t v13 = v6;
  id v14 = *(id *)(a1 + 40);
  id v7 = [v4 then:v11];
  if (v7)
  {
    uint64_t v8 = v7;

    return 3;
  }
  else
  {
    uint64_t v10 = _HMFPreconditionFailure();
    return __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1442(v10);
  }
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1442(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) fetchAccessorySupportsAliroBLEUWBWithFlow:*(void *)(a1 + 40)];
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  void v12[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2_1443;
  v12[3] = &unk_264A222A0;
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v13 = v5;
  uint64_t v14 = v6;
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 64);
  id v7 = [v4 then:v12];
  if (v7)
  {
    uint64_t v8 = v7;

    return 3;
  }
  else
  {
    uint64_t v10 = (id *)_HMFPreconditionFailure();
    return __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2_1443(v10, v11);
  }
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2_1443(id *a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]([a1[4] setSupportsMatCredACB:v3]);
  id v5 = a1[5];
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    uint64_t v8 = [a1[6] UUID];
    *(_DWORD *)buf = 138543874;
    id v28 = v7;
    __int16 v29 = 2112;
    uint64_t v30 = v8;
    __int16 v31 = 2112;
    id v32 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] supportsMatCredACB: %@", buf, 0x20u);
  }
  id v9 = (void *)MEMORY[0x230FBD990]();
  id v10 = a1[5];
  id v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    id v12 = HMFGetLogIdentifier();
    id v13 = [a1[6] UUID];
    *(_DWORD *)buf = 138543618;
    id v28 = v12;
    __int16 v29 = 2112;
    uint64_t v30 = v13;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Checking if this matter lock is MFi approved", buf, 0x16u);
  }
  uint64_t v14 = [a1[5] matterCapabilitiesFactory];
  id v15 = v14[2](v14, 0);

  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 3221225472;
  v22[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1444;
  void v22[3] = &unk_264A16908;
  id v16 = a1[7];
  id v17 = a1[5];
  id v18 = a1[6];
  id v23 = v16;
  id v24 = v17;
  id v25 = v18;
  id v26 = a1[4];
  id v19 = [v15 then:v22];
  if (!v19) {
    _HMFPreconditionFailure();
  }
  id v20 = v19;

  return 3;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1444(id *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [a1[4] vendorID];
  uint64_t v5 = (int)[v4 intValue];
  uint64_t v6 = [a1[4] productID];
  uint64_t v7 = objc_msgSend(v3, "isCapabilityAllowed:vendorID:productID:", 0, v5, (int)objc_msgSend(v6, "intValue"));

  uint64_t v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = a1[5];
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    id v12 = [a1[6] UUID];
    id v13 = [a1[4] vendorID];
    uint64_t v14 = [a1[4] productID];
    int v17 = 138544386;
    id v18 = v11;
    __int16 v19 = 2112;
    id v20 = v12;
    __int16 v21 = 2112;
    id v22 = v13;
    __int16 v23 = 2112;
    id v24 = v14;
    __int16 v25 = 1024;
    int v26 = v7;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] ECB lock with VID %@, PID %@ is certified: %{BOOL}d", (uint8_t *)&v17, 0x30u);
  }
  id v15 = [NSNumber numberWithBool:v7];
  [a1[7] setMfiCertifiedACWG:v15];

  return 1;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_4(id *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]([a1[4] setSupportsMatCredACP:v3]);
  id v5 = a1[5];
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    uint64_t v8 = [a1[6] UUID];
    int v10 = 138543874;
    id v11 = v7;
    __int16 v12 = 2112;
    id v13 = v8;
    __int16 v14 = 2112;
    id v15 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] supportsMatCredACP: %@", (uint8_t *)&v10, 0x20u);
  }

  return 1;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2_1435(uint64_t a1, void *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [MEMORY[0x263F49838] doorLockFeatureMapSupportsWeekDaySchedule:v3];
  id v5 = [*(id *)(a1 + 32) supportsMatterWeekDaySchedule];
  char v6 = HMFEqualObjects();

  if ((v6 & 1) == 0)
  {
    uint64_t v7 = (void *)MEMORY[0x230FBD990]([*(id *)(a1 + 32) setSupportsMatterWeekDaySchedule:v4]);
    id v8 = *(id *)(a1 + 40);
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v10 = HMFGetLogIdentifier();
      id v11 = [*(id *)(a1 + 48) UUID];
      *(_DWORD *)buf = 138543874;
      id v41 = v10;
      __int16 v42 = 2112;
      id v43 = v11;
      __int16 v44 = 2112;
      id v45 = v4;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] supportsMatterWeekDaySchedule: %@", buf, 0x20u);
    }
  }
  __int16 v12 = [MEMORY[0x263F49838] doorLockFeatureMapSupportsYearDaySchedule:v3];
  id v13 = [*(id *)(a1 + 32) supportsMatterYearDaySchedule];
  char v14 = HMFEqualObjects();

  if ((v14 & 1) == 0)
  {
    id v15 = (void *)MEMORY[0x230FBD990]([*(id *)(a1 + 32) setSupportsMatterYearDaySchedule:v12]);
    id v16 = *(id *)(a1 + 40);
    int v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      id v18 = HMFGetLogIdentifier();
      __int16 v19 = [*(id *)(a1 + 48) UUID];
      *(_DWORD *)buf = 138543874;
      id v41 = v18;
      __int16 v42 = 2112;
      id v43 = v19;
      __int16 v44 = 2112;
      id v45 = v12;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] supportsMatterYearDaySchedule: %@", buf, 0x20u);
    }
  }
  id v20 = (void *)MEMORY[0x263F42538];
  __int16 v21 = *(void **)(a1 + 56);
  id v22 = [MEMORY[0x263F42530] untrackedPlaceholderFlow];
  __int16 v23 = [v21 numberOfWeekDaySchedulesSupportedWithFlow:v22];
  v39[0] = v23;
  id v24 = *(void **)(a1 + 56);
  __int16 v25 = [MEMORY[0x263F42530] untrackedPlaceholderFlow];
  int v26 = [v24 numberOfYearDaySchedulesSupportedWithFlow:v25];
  v39[1] = v26;
  uint64_t v27 = [MEMORY[0x263EFF8C0] arrayWithObjects:v39 count:2];
  id v28 = [v20 allSettled:v27];
  v35[0] = MEMORY[0x263EF8330];
  v35[1] = 3221225472;
  v35[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1437;
  v35[3] = &unk_264A1FE98;
  id v29 = *(id *)(a1 + 32);
  uint64_t v30 = *(void *)(a1 + 40);
  __int16 v31 = *(void **)(a1 + 48);
  id v36 = v29;
  uint64_t v37 = v30;
  id v38 = v31;
  id v32 = [v28 then:v35];
  if (!v32) {
    _HMFPreconditionFailure();
  }
  uint64_t v33 = v32;

  return 3;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1437(id *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [v3 objectAtIndexedSubscript:0];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  uint64_t v7 = [v3 objectAtIndexedSubscript:1];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v8 = v7;
  }
  else {
    id v8 = 0;
  }
  id v9 = v8;

  if (v6)
  {
    int v10 = [a1[4] matterWeekDayScheduleCapacity];
    char v11 = HMFEqualObjects();

    if ((v11 & 1) == 0)
    {
      __int16 v12 = (void *)MEMORY[0x230FBD990]([a1[4] setMatterWeekDayScheduleCapacity:v6]);
      id v13 = a1[5];
      char v14 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        id v15 = HMFGetLogIdentifier();
        id v16 = [a1[6] UUID];
        int v25 = 138543874;
        int v26 = v15;
        __int16 v27 = 2112;
        id v28 = v16;
        __int16 v29 = 2112;
        id v30 = v6;
        _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] weekDayScheduleCapacity: %@", (uint8_t *)&v25, 0x20u);
      }
    }
    int v17 = [a1[4] matterYearDayScheduleCapacity];
    char v18 = HMFEqualObjects();

    if ((v18 & 1) == 0)
    {
      __int16 v19 = (void *)MEMORY[0x230FBD990]([a1[4] setMatterYearDayScheduleCapacity:v9]);
      id v20 = a1[5];
      __int16 v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        id v22 = HMFGetLogIdentifier();
        __int16 v23 = [a1[6] UUID];
        int v25 = 138543874;
        int v26 = v22;
        __int16 v27 = 2112;
        id v28 = v23;
        __int16 v29 = 2112;
        id v30 = v9;
        _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] yearDayScheduleCapacity: %@", (uint8_t *)&v25, 0x20u);
      }
    }
  }

  return 1;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2_1433(id *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [a1[4] supportsMatterWalletKey];
  char v5 = HMFEqualObjects();

  if ((v5 & 1) == 0)
  {
    id v6 = (void *)MEMORY[0x230FBD990]([a1[4] setSupportsMatterWalletKey:v3]);
    id v7 = a1[5];
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      int v10 = [a1[6] UUID];
      int v12 = 138543874;
      id v13 = v9;
      __int16 v14 = 2112;
      id v15 = v10;
      __int16 v16 = 2112;
      id v17 = v3;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] supportsMatterWalletKey: %@", (uint8_t *)&v12, 0x20u);
    }
  }

  return 1;
}

- (id)_configureTTUAndUWBOnAccessory:(id)a3 accessoryModel:(id)a4
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [MEMORY[0x263F42530] internalOnlyInitializer];
  id v9 = (void *)MEMORY[0x230FBD990]();
  int v10 = self;
  char v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    int v12 = HMFGetLogIdentifier();
    id v13 = [v8 UUID];
    *(_DWORD *)buf = 138544130;
    uint64_t v33 = v12;
    __int16 v34 = 2112;
    id v35 = v13;
    __int16 v36 = 2112;
    id v37 = v6;
    __int16 v38 = 2112;
    id v39 = v7;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Configuring ACWG on accessory with serverInfo: %@, model: %@", buf, 0x2Au);
  }
  __int16 v14 = [v6 server];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v15 = v14;
  }
  else {
    id v15 = 0;
  }
  id v16 = v15;

  if (v16)
  {
    id v17 = [v16 createDoorLockClusterObjectWithFlow:v8];
    uint64_t v18 = [v17 naFuture];
    v29[0] = MEMORY[0x263EF8330];
    v29[1] = 3221225472;
    v29[2] = __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke;
    void v29[3] = &unk_264A16890;
    void v29[4] = v10;
    id v30 = v8;
    id v31 = v7;
    __int16 v19 = [v18 flatMap:v29];
    id v20 = [v19 hmfFuture];
    __int16 v21 = [v20 ignoreResult];
  }
  else
  {
    id v22 = (void *)MEMORY[0x230FBD990]();
    __int16 v23 = v10;
    id v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      int v25 = HMFGetLogIdentifier();
      int v26 = [v8 UUID];
      __int16 v27 = [v6 server];
      *(_DWORD *)buf = 138543874;
      uint64_t v33 = v25;
      __int16 v34 = 2112;
      id v35 = v26;
      __int16 v36 = 2112;
      id v37 = v27;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to find HMMTRAccessoryServer: %@", buf, 0x20u);
    }
    __int16 v21 = [MEMORY[0x263F42538] futureWithNoValue];
  }

  return v21;
}

id __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) nfcReaderKeyManager];
  char v5 = [v4 fetchOrCreateReaderKeyForPairingWithFlow:*(void *)(a1 + 40)];
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  v18[2] = __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_2;
  v18[3] = &unk_264A16818;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v19 = v6;
  uint64_t v20 = v7;
  id v21 = v8;
  id v9 = v3;
  id v22 = v9;
  int v10 = [v5 flatMap:v18];
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  v15[2] = __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_1421;
  v15[3] = &unk_264A16868;
  char v11 = *(void **)(a1 + 40);
  void v15[4] = *(void *)(a1 + 32);
  id v16 = v11;
  id v17 = v9;
  id v12 = v9;
  id v13 = [v10 flatMap:v15];

  return v13;
}

id __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_2(id *a1, void *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = objc_opt_new();
  char v5 = [v3 privateKey];
  [v4 setReaderPrivateKey:v5];

  id v6 = [v3 publicKeyExternalRepresentation];
  [v4 setReaderPublicKeyExternalRepresentation:v6];

  uint64_t v7 = [v3 publicKey];
  id v8 = +[HMDNIST256Utilities identifier16BytesForKey:v7];
  [v4 setReaderGroupIdentifier:v8];

  id v9 = [a1[4] supportsMatCredACB];
  LODWORD(v7) = [v9 BOOLValue];

  if (v7)
  {
    int v10 = [a1[5] acwgGroupResolvingKey];

    if (!v10)
    {
      id v31 = (void *)MEMORY[0x230FBD990]();
      id v32 = a1[5];
      uint64_t v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        __int16 v34 = HMFGetLogIdentifier();
        id v35 = [a1[6] UUID];
        *(_DWORD *)buf = 138543618;
        id v50 = v34;
        __int16 v51 = 2112;
        id v52 = v35;
        _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Missing acwgGroupResolvingKey", buf, 0x16u);
        goto LABEL_15;
      }
LABEL_16:

      __int16 v38 = (void *)MEMORY[0x263F58190];
      int v25 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
      id v30 = [v38 futureWithError:v25];
      goto LABEL_17;
    }
    char v11 = [a1[5] acwgGroupResolvingKey];
    [v4 setGroupResolvingKey:v11];
  }
  uint64_t v12 = [v4 readerPrivateKey];
  if (!v12)
  {
LABEL_11:
    id v31 = (void *)MEMORY[0x230FBD990]();
    id v32 = a1[5];
    uint64_t v33 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      __int16 v34 = HMFGetLogIdentifier();
      id v35 = [a1[6] UUID];
      __int16 v36 = [v4 readerPublicKeyExternalRepresentation];
      id v37 = [v4 readerGroupIdentifier];
      *(_DWORD *)buf = 138544130;
      id v50 = v34;
      __int16 v51 = 2112;
      id v52 = v35;
      __int16 v53 = 2112;
      id v54 = v36;
      __int16 v55 = 2112;
      id v56 = v37;
      _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] User is missing either readerPrivateKey or readerPublicKey or readerGroupIdentifier. readerPublicKeyExternalRepresentation: %@, readerGroupIdentifier: %@", buf, 0x2Au);

LABEL_15:
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  id v13 = (void *)v12;
  uint64_t v14 = [v4 readerPublicKeyExternalRepresentation];
  if (!v14)
  {

    goto LABEL_11;
  }
  id v15 = (void *)v14;
  id v16 = [v4 readerGroupIdentifier];

  if (!v16) {
    goto LABEL_11;
  }
  id v17 = (void *)MEMORY[0x230FBD990]();
  id v18 = a1[5];
  id v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    id v43 = HMFGetLogIdentifier();
    uint64_t v20 = [a1[6] UUID];
    id v41 = [v4 readerPublicKeyExternalRepresentation];
    id v21 = objc_msgSend(v41, "hmf_hexadecimalRepresentation");
    [v4 readerGroupIdentifier];
    uint64_t v40 = v42 = v17;
    id v22 = objc_msgSend(v40, "hmf_hexadecimalRepresentation");
    __int16 v23 = [v4 groupResolvingKey];
    id v24 = objc_msgSend(v23, "hmf_hexadecimalRepresentation");
    *(_DWORD *)buf = 138544386;
    id v50 = v43;
    __int16 v51 = 2112;
    id v52 = v20;
    __int16 v53 = 2112;
    id v54 = v21;
    __int16 v55 = 2112;
    id v56 = v22;
    __int16 v57 = 2112;
    id v58 = v24;
    _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Setting reader config on lock. RPK: %@, RGI: %@, GRK: %@", buf, 0x34u);

    id v17 = v42;
  }

  int v25 = [a1[7] setOrReadReaderConfig:v4 flow:a1[6]];
  int v26 = [v25 naFuture];
  v44[0] = MEMORY[0x263EF8330];
  v44[1] = 3221225472;
  v44[2] = __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_1417;
  v44[3] = &unk_264A167F0;
  id v27 = v4;
  id v28 = a1[5];
  id v29 = a1[6];
  id v45 = v27;
  id v46 = v28;
  id v47 = v29;
  id v48 = a1[4];
  id v30 = [v26 flatMap:v44];

LABEL_17:
  return v30;
}

id __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_1421(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) users];
  id v3 = objc_msgSend(v2, "na_filter:", &__block_literal_global_1425);

  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_3;
  v8[3] = &unk_264A28928;
  id v4 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v4;
  id v10 = *(id *)(a1 + 48);
  char v5 = objc_msgSend(v3, "na_map:", v8);
  id v6 = [v5 combineAllFutures];

  return v6;
}

id __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_3(id *a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [v3 uniqueIDForAccessories];
  char v5 = [v3 acwgIssuerPublicKeyExternalRepresentation];
  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = a1[4];
  id v8 = HMFGetOSLogHandle();
  id v9 = v8;
  if (v4 && v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      char v11 = [a1[5] UUID];
      *(_DWORD *)buf = 138543874;
      id v24 = v10;
      __int16 v25 = 2112;
      int v26 = v11;
      __int16 v27 = 2112;
      id v28 = v3;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Configuring Issuer Key for user: %@", buf, 0x20u);
    }
    uint64_t v12 = [a1[6] findOrAddUserWithUniqueID:v4 flow:a1[5]];
    id v13 = [v12 naFuture];
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    void v19[2] = __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_1426;
    v19[3] = &unk_264A16840;
    id v20 = a1[6];
    id v21 = v5;
    id v22 = a1[5];
    uint64_t v14 = [v13 flatMap:v19];
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v15 = HMFGetLogIdentifier();
      id v16 = [a1[5] UUID];
      id v17 = [v3 uuid];
      *(_DWORD *)buf = 138544386;
      id v24 = v15;
      __int16 v25 = 2112;
      int v26 = v16;
      __int16 v27 = 2112;
      id v28 = v17;
      __int16 v29 = 2112;
      id v30 = v4;
      __int16 v31 = 2112;
      id v32 = v5;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] User is missing either uniqueIDForAccessories or issuerPublicKey. User: %@, uniqueIDForAccessories: %@, issuerPublicKey: %@", buf, 0x34u);
    }
    uint64_t v14 = [MEMORY[0x263F58190] futureWithNoResult];
  }

  return v14;
}

id __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_1426(uint64_t a1, void *a2)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "addIssuerKeyData:forUserIndex:isUnifiedAccess:flow:", *(void *)(a1 + 40), objc_msgSend(a2, "newUserSlot"), 0, *(void *)(a1 + 48));
  id v3 = [v2 naFuture];

  return v3;
}

uint64_t __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_2_1422(uint64_t a1, void *a2)
{
  return [a2 isRestrictedGuest] ^ 1;
}

id __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_1417(id *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  if (v5)
  {
    id v6 = [v3 readerPublicKeyExternalRepresentation];
    id v7 = [a1[4] readerPublicKeyExternalRepresentation];
    int v8 = HMFEqualObjects();

    if (v8
      && ([v3 readerGroupIdentifier],
          id v9 = objc_claimAutoreleasedReturnValue(),
          [a1[4] readerGroupIdentifier],
          id v10 = objc_claimAutoreleasedReturnValue(),
          int v11 = HMFEqualObjects(),
          v10,
          v9,
          v11))
    {
      uint64_t v12 = [v3 groupResolvingKey];
      id v13 = [a1[4] groupResolvingKey];
      char v14 = HMFEqualObjects();

      if (v14) {
        goto LABEL_13;
      }
    }
    else
    {
    }
    id v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = a1[5];
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      id v18 = HMFGetLogIdentifier();
      id v19 = [a1[6] UUID];
      id v30 = [v3 readerPublicKeyExternalRepresentation];
      id v20 = objc_msgSend(v30, "hmf_hexadecimalRepresentation");
      __int16 v29 = [v3 readerGroupIdentifier];
      objc_msgSend(v29, "hmf_hexadecimalRepresentation");
      v21 = __int16 v31 = v15;
      id v22 = [v3 groupResolvingKey];
      __int16 v23 = objc_msgSend(v22, "hmf_hexadecimalRepresentation");
      *(_DWORD *)buf = 138544386;
      uint64_t v33 = v18;
      __int16 v34 = 2112;
      id v35 = v19;
      __int16 v36 = 2112;
      id v37 = v20;
      __int16 v38 = 2112;
      id v39 = v21;
      __int16 v40 = 2112;
      id v41 = v23;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Found existing reader config on lock. RPK: %@, RGI: %@, GRK: %@", buf, 0x34u);

      id v15 = v31;
    }

    id v24 = [v3 readerPublicKeyExternalRepresentation];
    [a1[7] setPreexistingMatCredRPK:v24];

    __int16 v25 = [v3 readerGroupIdentifier];
    [a1[7] setPreexistingMatCredRGI:v25];

    int v26 = [v3 groupResolvingKey];
    [a1[7] setPreexistingMatCredGRK:v26];
  }
LABEL_13:
  __int16 v27 = [MEMORY[0x263F58190] futureWithNoResult];

  return v27;
}

- (id)_configureWithFeatureSpecificDataAccessory:(id)a3 accessoryModel:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  int v8 = [MEMORY[0x263EFF980] array];
  if (_os_feature_enabled_impl()
    && ((isInternalBuild() & 1) != 0
     || CFPreferencesGetAppBooleanValue(@"UWBUnlock", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0)))
  {
    id v9 = [v7 supportsMatCredACP];
    int v10 = [v9 BOOLValue];

    if (v10)
    {
      int v11 = [(HMDHome *)self _configureTTUAndUWBOnAccessory:v6 accessoryModel:v7];
      [v8 addObject:v11];
    }
  }
  uint64_t v12 = [MEMORY[0x263F42538] all:v8];

  return v12;
}

- (void)_removeFailedAddWithAccessoryServerInfo:(id)a3
{
  id v4 = a3;
  id v5 = objc_alloc(MEMORY[0x263F42520]);
  id v6 = [(HMDHome *)self workQueue];
  id v7 = (void *)[v5 initWithQueue:v6];

  uint64_t v20 = _HMFThreadLocalAsyncContextPush();
  if ([(HMDHome *)self isSharedAdmin])
  {
    int v8 = [v4 server];
    id v9 = [(HMDHome *)self owner];
    int v10 = [(HMDHome *)self _removeUserFromNewlyPairedAccessoryServer:v8 user:v9];
  }
  else
  {
    int v10 = [MEMORY[0x263F42538] futureWithNoValue];
  }
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  v18[2] = __51__HMDHome__removeFailedAddWithAccessoryServerInfo___block_invoke;
  v18[3] = &unk_264A2EC78;
  void v18[4] = self;
  id v11 = v4;
  id v19 = v11;
  uint64_t v12 = [v10 finally:v18];
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  v15[2] = __51__HMDHome__removeFailedAddWithAccessoryServerInfo___block_invoke_2;
  v15[3] = &unk_264A2EC78;
  id v13 = v11;
  id v16 = v13;
  id v17 = self;
  id v14 = (id)[v12 finally:v15];

  _HMFThreadLocalAsyncContextPop();
}

uint64_t __51__HMDHome__removeFailedAddWithAccessoryServerInfo___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) server];
  id v4 = [*(id *)(a1 + 32) currentUser];
  id v5 = [v2 _removeUserFromNewlyPairedAccessoryServer:v3 user:v4];
  if (v5)
  {
    id v6 = v5;

    return 3;
  }
  else
  {
    uint64_t v8 = _HMFPreconditionFailure();
    return __51__HMDHome__removeFailedAddWithAccessoryServerInfo___block_invoke_2(v8);
  }
}

uint64_t __51__HMDHome__removeFailedAddWithAccessoryServerInfo___block_invoke_2(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) networkCredential];
  id v3 = [v2 clientIdentifier];

  if (v3) {
    [*(id *)(a1 + 40) _removeClientConfigurationWithIdentifier:v3];
  }

  return 1;
}

- (id)retrieveNewlyAddedAccessoriesForPairedAccessoryServerInfo:(id)a3
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [MEMORY[0x263EFF980] array];
  id v6 = [v4 primaryAccessoryUUID];
  id v7 = [(HMDHome *)self accessoryWithUUID:v6];

  if (v7)
  {
    [v5 addObject:v7];
    id v8 = v7;
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass) {
      int v10 = v8;
    }
    else {
      int v10 = 0;
    }
    id v29 = v10;

    if (isKindOfClass)
    {
      int v26 = v7;
      id v27 = v4;
      id v28 = v5;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      id v11 = [(HMDHome *)self accessories];
      uint64_t v12 = [v11 countByEnumeratingWithState:&v30 objects:v34 count:16];
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)v31;
        do
        {
          for (uint64_t i = 0; i != v13; ++i)
          {
            if (*(void *)v31 != v14) {
              objc_enumerationMutation(v11);
            }
            id v16 = *(id *)(*((void *)&v30 + 1) + 8 * i);
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              id v17 = v16;
            }
            else {
              id v17 = 0;
            }
            id v18 = v17;

            id v19 = [v18 bridge];
            uint64_t v20 = v19;
            if (v19)
            {
              id v21 = [v19 uuid];
              id v22 = [v29 uuid];
              int v23 = [v21 isEqual:v22];

              if (v23) {
                [v28 addObject:v16];
              }
            }
          }
          uint64_t v13 = [v11 countByEnumeratingWithState:&v30 objects:v34 count:16];
        }
        while (v13);
      }

      id v4 = v27;
      id v5 = v28;
      id v7 = v26;
    }
  }
  id v24 = (void *)[v5 copy];

  return v24;
}

- (HMDBackgroundTaskManager)backgroundTaskManager
{
  return +[HMDBackgroundTaskManager sharedManager];
}

- (BOOL)hasNeverAddedAnyHAPAccessory
{
  id v3 = [(HMDHome *)self firstHAPAccessoryAddedDate];
  if (v3)
  {
    BOOL v4 = 0;
  }
  else
  {
    id v5 = [(HMDHome *)self hapAccessories];
    BOOL v4 = [v5 count] == 0;
  }
  return v4;
}

- (void)_processLegacyPairingRequestForMessage:(id)a3 cancelPairing:(BOOL)a4 context:(id)a5
{
  BOOL v6 = a4;
  uint64_t v60 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v50 = a5;
  id v9 = [v8 uuidForKey:@"kAccessoryUUID"];
  if (v9)
  {
    if (v6)
    {
      int v10 = [v8 responseHandler];
      [(HMDHome *)self _cancelPairingWithAccessoryUUID:v9 context:v50 completionHandler:v10];
    }
    else
    {
      long long v49 = [v8 stringForKey:@"kAccessoryPairingPasswordKey"];
      id v48 = [v8 stringForKey:@"kAccessoryOnboardingSetupPayloadStringKey"];
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      id v17 = [(HMDHome *)self addPendingAccessories];
      id v18 = objc_msgSend(v17, "hm_allKeys");

      uint64_t v19 = [v18 countByEnumeratingWithState:&v51 objects:v55 count:16];
      if (v19)
      {
        uint64_t v20 = *(void *)v52;
LABEL_9:
        uint64_t v21 = 0;
        while (1)
        {
          if (*(void *)v52 != v20) {
            objc_enumerationMutation(v18);
          }
          id v22 = *(void **)(*((void *)&v51 + 1) + 8 * v21);
          int v23 = [v22 accessoryUUID];
          char v24 = [v23 isEqual:v9];

          if (v24) {
            break;
          }
          if (v19 == ++v21)
          {
            uint64_t v19 = [v18 countByEnumeratingWithState:&v51 objects:v55 count:16];
            if (v19) {
              goto LABEL_9;
            }
            goto LABEL_15;
          }
        }
        id v25 = v22;

        if (!v25) {
          goto LABEL_24;
        }
        int v26 = (void *)MEMORY[0x230FBD990]();
        id v27 = self;
        id v28 = HMFGetOSLogHandle();
        BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
        if (v49)
        {
          if (v29)
          {
            long long v30 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            __int16 v57 = v30;
            __int16 v58 = 2112;
            uint64_t v59 = v9;
            _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@Storing the setupCode for accessory %@", buf, 0x16u);
          }
          long long v31 = [(HMDHome *)v27 addPendingAccessorySetupCodes];
          [v31 setObject:v49 forKey:v9];

          long long v32 = [(HMDHome *)v27 addPendingAccessoryOnboardingSetupPayloadStrings];
          [v32 setObject:v48 forKeyedSubscript:v9];

          long long v33 = [(HMDHome *)v27 accessoryBrowser];
          __int16 v34 = [v33 unpairedAccessoryWithUUID:v9];

          if (v34)
          {
            uint64_t v35 = [(HMDHome *)v27 accessoryBrowser];
            [v35 handleSetupCodeAvailable:v34];
          }
          __int16 v36 = [(HMDHome *)v27 addPendingAccessorySetupCodeHandlers];
          id v37 = [v36 objectForKeyedSubscript:v9];

          if (v37)
          {
            os_unfair_recursive_lock_lock_with_options();
            [(NSMutableDictionary *)v27->_addPendingAccessorySetupCodeHandlers removeObjectForKey:v9];
            os_unfair_recursive_lock_unlock();
            ((void (**)(void, void *, void *, void))v37)[2](v37, v49, v48, 0);
          }
          else
          {
            __int16 v44 = (void *)MEMORY[0x230FBD990]();
            id v45 = v27;
            id v46 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
            {
              id v47 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              __int16 v57 = v47;
              __int16 v58 = 2112;
              uint64_t v59 = v9;
              _os_log_impl(&dword_22F52A000, v46, OS_LOG_TYPE_INFO, "%{public}@No handler to provide the setup code to for accessory: %@", buf, 0x16u);
            }
          }
          [v8 respondWithSuccess];
        }
        else
        {
          if (v29)
          {
            uint64_t v42 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            __int16 v57 = v42;
            __int16 v58 = 2112;
            uint64_t v59 = v9;
            _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@No setupCode specified to continue pairing with accessory %@", buf, 0x16u);
          }
          id v43 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
          [v8 respondWithError:v43];
        }
      }
      else
      {
LABEL_15:

LABEL_24:
        __int16 v38 = (void *)MEMORY[0x230FBD990]();
        id v39 = self;
        __int16 v40 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          id v41 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          __int16 v57 = v41;
          __int16 v58 = 2112;
          uint64_t v59 = v9;
          _os_log_impl(&dword_22F52A000, v40, OS_LOG_TYPE_INFO, "%{public}@Accessory with UUID %@ not being added to the home", buf, 0x16u);
        }
        id v25 = [MEMORY[0x263F087E8] hmErrorWithCode:79];
        [v8 respondWithError:v25];
      }
    }
  }
  else
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    uint64_t v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      id v15 = [v8 messagePayload];
      *(_DWORD *)buf = 138543618;
      __int16 v57 = v14;
      __int16 v58 = 2112;
      uint64_t v59 = v15;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@No accessory UUID found in payload: %@", buf, 0x16u);
    }
    id v16 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v8 respondWithError:v16];
  }
}

- (void)_cancelPairingWithAccessoryUUID:(id)a3 context:(id)a4 completionHandler:(id)a5
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v39 = a4;
  id v9 = a5;
  int v10 = [(HMDHome *)self accessoryBrowser];
  id v11 = [v10 unassociatedAccessories];
  uint64_t v12 = objc_msgSend(v11, "hmf_firstObjectWithUUID:", v8);

  id v13 = v12;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  id v15 = v14;

  if (v15)
  {
    v42[0] = MEMORY[0x263EF8330];
    v42[1] = 3221225472;
    v42[2] = __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke;
    v42[3] = &unk_264A2DFA0;
    id v43 = v9;
    [v15 cancelConfigurationWithCompletionHandler:v42];
    id v16 = v43;
  }
  else
  {
    id v17 = [(HMDHome *)self accessoryBrowser];
    uint64_t v38 = [v17 unpairedAccessoryWithUUID:v8];

    id v18 = [(HMDHome *)self addPendingAccessorySetupCodeHandlers];
    id v37 = [v18 objectForKeyedSubscript:v8];

    uint64_t v19 = (void *)MEMORY[0x230FBD990]();
    uint64_t v20 = self;
    uint64_t v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      id v22 = HMFGetLogIdentifier();
      int v23 = [v8 UUIDString];
      *(_DWORD *)buf = 138543618;
      id v45 = v22;
      __int16 v46 = 2112;
      id v47 = v23;
      _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Canceling pairing and removing all state for accessory %@", buf, 0x16u);
    }
    os_unfair_recursive_lock_lock_with_options();
    char v24 = [(NSMapTable *)v20->_addPendingAccessories hm_allKeys];
    v40[0] = MEMORY[0x263EF8330];
    v40[1] = 3221225472;
    void v40[2] = __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke_1405;
    void v40[3] = &unk_264A166E0;
    id v25 = v8;
    id v41 = v25;
    int v26 = objc_msgSend(v24, "na_firstObjectPassingTest:", v40);

    [(NSMutableDictionary *)v20->_addPendingAccessorySetupCodeHandlers removeObjectForKey:v25];
    if (v26) {
      [(NSMapTable *)v20->_addPendingAccessories removeObjectForKey:v26];
    }

    uint64_t v27 = os_unfair_recursive_lock_unlock();
    if (v38)
    {
      id v28 = [(HMDHome *)v20 accessoryBrowser];
      BOOL v29 = [MEMORY[0x263F087E8] hmErrorWithCode:23];
      [v28 cancelPairingWithAccessory:v38 error:v29 context:v39];
    }
    if (v37)
    {
      long long v30 = [MEMORY[0x263F087E8] hmErrorWithCode:23];
      ((void (**)(void, void, void, void *))v37)[2](v37, 0, 0, v30);

      if (v9) {
        (*((void (**)(id, void, void))v9 + 2))(v9, 0, 0);
      }
    }
    else
    {
      context = (void *)MEMORY[0x230FBD990](v27);
      long long v31 = v20;
      long long v32 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        long long v33 = HMFGetLogIdentifier();
        __int16 v34 = objc_msgSend(v25, "UUIDString", context);
        *(_DWORD *)buf = 138543618;
        id v45 = v33;
        __int16 v46 = 2112;
        id v47 = v34;
        _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_INFO, "%{public}@Unable to find setup available completion handler for accessory %@", buf, 0x16u);
      }
      if (v9)
      {
        uint64_t v35 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
        (*((void (**)(id, void *, void))v9 + 2))(v9, v35, 0);
      }
    }

    id v16 = (void *)v38;
  }
}

uint64_t __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, 0);
  }
  return result;
}

uint64_t __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke_1405(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 accessoryUUID];
  uint64_t v4 = [v2 isEqual:v3];

  return v4;
}

- (void)_processPairingRequestForMessage:(id)a3 cancelPairing:(BOOL)a4 context:(id)a5
{
  BOOL v6 = a4;
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a5;
  int v10 = [v8 dataForKey:@"kAccessoryDescriptionDataKey"];
  id v18 = 0;
  id v11 = [(HMDHome *)self _setupDescriptionFromData:v10 error:&v18];
  id v12 = v18;
  if (v11)
  {
    if (v6)
    {
      [(HMDHome *)self _cancelPairingWithAccessoryDescription:v11 context:v9];
      [v8 respondWithPayload:0];
    }
  }
  else
  {
    id v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v20 = v16;
      __int16 v21 = 2112;
      id v22 = v12;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive setup accessory description from accessory description data: %@", buf, 0x16u);
    }
    id v17 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v8 respondWithError:v17];
  }
}

- (void)_cancelPairingWithAccessoryDescription:(id)a3 context:(id)a4
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 accessoryUUID];
  id v9 = (void *)MEMORY[0x230FBD990]();
  int v10 = self;
  id v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    id v12 = HMFGetLogIdentifier();
    int v15 = 138543618;
    id v16 = v12;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Canceling pairing and removing all state for accessory with description %@", (uint8_t *)&v15, 0x16u);
  }
  os_unfair_recursive_lock_lock_with_options();
  [(NSMapTable *)v10->_addPendingAccessories removeObjectForKey:v6];
  if (v8)
  {
    [(NSMutableDictionary *)v10->_addPendingAccessorySetupCodes removeObjectForKey:v8];
    [(NSMutableDictionary *)v10->_addPendingAccessoryOnboardingSetupPayloadStrings removeObjectForKey:v8];
    [(NSMutableDictionary *)v10->_addPendingAccessorySetupCodeHandlers removeObjectForKey:v8];
  }
  os_unfair_recursive_lock_unlock();
  id v13 = [(HMDHome *)v10 accessoryBrowser];
  uint64_t v14 = [MEMORY[0x263F087E8] hmErrorWithCode:23];
  [v13 cancelPairingWithAccessoryDescription:v6 error:v14 context:v7];
}

- (void)_handleContinuePairingAccessory:(id)a3
{
}

- (void)_handleCancelPairingAccessory:(id)a3
{
  uint64_t v4 = (void *)MEMORY[0x263F087E8];
  id v5 = a3;
  id v6 = [v4 hmInternalErrorWithCode:1090];
  id v8 = +[HMDMatterAccessoryPairingEndContext hmContextWithCancelledError:v6];

  id v7 = [v5 dataForKey:@"kAccessoryDescriptionDataKey"];

  if (v7) {
    [(HMDHome *)self _processPairingRequestForMessage:v5 cancelPairing:1 context:v8];
  }
  else {
    [(HMDHome *)self _processLegacyPairingRequestForMessage:v5 cancelPairing:1 context:v8];
  }
}

- (id)_setupCodeProviderForMessage:(id)a3
{
  id v4 = a3;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke;
  aBlock[3] = &unk_264A16708;
  objc_copyWeak(&v11, &location);
  id v5 = v4;
  id v10 = v5;
  id v6 = _Block_copy(aBlock);
  id v7 = (void *)[v6 copy];

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);

  return v7;
}

void __40__HMDHome__setupCodeProviderForMessage___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = WeakRetained;
  if (WeakRetained)
  {
    id v12 = [WeakRetained workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_2;
    block[3] = &unk_264A2DDC0;
    void block[4] = v11;
    id v15 = v7;
    id v16 = v8;
    id v18 = v9;
    id v17 = *(id *)(a1 + 32);
    dispatch_async(v12, block);
  }
  else
  {
    id v13 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    (*((void (**)(id, void, void, void *))v9 + 2))(v9, 0, 0, v13);
  }
}

void __40__HMDHome__setupCodeProviderForMessage___block_invoke_2(id *a1)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v2 = [a1[4] homeManager];
  id v3 = [a1[5] uuid];
  uint64_t v4 = [a1[5] name];
  id v5 = (void *)v4;
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6 || (id v7 = a1[6]) == 0)
  {
    id v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = a1[4];
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      id v18 = HMFGetLogIdentifier();
      uint64_t v19 = [v3 UUIDString];
      *(_DWORD *)buf = 138543874;
      id v71 = v18;
      __int16 v72 = 2112;
      id v73 = v5;
      __int16 v74 = 2112;
      id v75 = v19;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ went away while being added to home", buf, 0x20u);
    }
    id v20 = a1[8];
    __int16 v21 = [MEMORY[0x263F087E8] hmErrorWithCode:4];
    (*((void (**)(id, void, void, void *))v20 + 2))(v20, 0, 0, v21);
  }
  else
  {
    if ([v7 isEqualToString:@"HMSetupCodeProviderReasonBadPassword"])
    {
      id v8 = (void *)MEMORY[0x230FBD990]();
      id v9 = a1[4];
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v71 = v11;
        __int16 v72 = 2112;
        id v73 = v3;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Clearing previous password on bad-password error for accessory: %@", buf, 0x16u);
      }
      id v12 = [a1[4] addPendingAccessorySetupCodes];
      [v12 removeObjectForKey:v3];

      id v13 = [a1[4] addPendingAccessoryOnboardingSetupPayloadStrings];
      [v13 removeObjectForKey:v3];
    }
    uint64_t v14 = [a1[7] stringForKey:@"kAccessoryPairingPasswordKey"];
    if (v14 && [a1[7] isEntitledForSPIAccess])
    {
      if ([a1[6] isEqualToString:@"HMSetupCodeProviderReasonBadPassword"])
      {

LABEL_27:
        id v43 = (void *)MEMORY[0x230FBD990]();
        id v44 = a1[4];
        id v45 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          __int16 v46 = HMFGetLogIdentifier();
          id v47 = [a1[7] stringForKey:@"kAccessoryPairingPasswordKey"];
          uint64_t v48 = [v3 UUIDString];
          *(_DWORD *)buf = 138544130;
          id v71 = v46;
          __int16 v72 = 2112;
          id v73 = v47;
          __int16 v74 = 2112;
          id v75 = v5;
          __int16 v76 = 2112;
          id v77 = v48;
          _os_log_impl(&dword_22F52A000, v45, OS_LOG_TYPE_INFO, "%{public}@Provided password %@ incorrect for accessory %@/%@", buf, 0x2Au);
        }
        id v49 = a1[8];
        __int16 v21 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2002];
        (*((void (**)(id, void, void, void *))v49 + 2))(v49, 0, 0, v21);
        goto LABEL_17;
      }
      char v42 = [a1[6] isEqualToString:@"HMSetupCodeProviderReasontTimeoutRetry"];

      if (v42) {
        goto LABEL_27;
      }
    }
    else
    {
    }
    os_unfair_recursive_lock_lock_with_options();
    id v22 = (void *)[a1[8] copy];
    uint64_t v23 = _Block_copy(v22);
    [*((id *)a1[4] + 104) setObject:v23 forKeyedSubscript:v3];

    os_unfair_recursive_lock_unlock();
    if ([a1[6] isEqualToString:@"HMSetupCodeProviderReasonInitial"])
    {
      char v24 = [a1[4] addPendingAccessorySetupCodes];
      __int16 v21 = [v24 objectForKey:v3];

      id v25 = [a1[4] addPendingAccessoryOnboardingSetupPayloadStrings];
      int v26 = [v25 objectForKeyedSubscript:v3];

      uint64_t v27 = (void *)MEMORY[0x230FBD990]();
      id v28 = a1[4];
      BOOL v29 = HMFGetOSLogHandle();
      BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
      if (v21)
      {
        if (v30)
        {
          long long v31 = HMFGetLogIdentifier();
          id v32 = a1[5];
          *(_DWORD *)buf = 138543618;
          id v71 = v31;
          __int16 v72 = 2112;
          id v73 = v32;
          _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Providing setupCode for accessory %@ and removing from tracking", buf, 0x16u);
        }
        (*((void (**)(void))a1[8] + 2))();
      }
      else
      {
        if (v30)
        {
          id v50 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          id v71 = v50;
          __int16 v72 = 2112;
          id v73 = v5;
          __int16 v74 = 2112;
          id v75 = v3;
          _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ prompted for pairing setupCode but did not receive it from HomeUIService", buf, 0x20u);
        }
        if ([a1[7] BOOLForKey:@"kAccessorySetupCodeDeferredKey"])
        {
          long long v51 = (void *)MEMORY[0x230FBD990]();
          id v52 = a1[4];
          long long v53 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
          {
            long long v54 = HMFGetLogIdentifier();
            __int16 v55 = [v3 UUIDString];
            *(_DWORD *)buf = 138543874;
            id v71 = v54;
            __int16 v72 = 2112;
            id v73 = v5;
            __int16 v74 = 2112;
            id v75 = v55;
            _os_log_impl(&dword_22F52A000, v53, OS_LOG_TYPE_INFO, "%{public}@addAccessory request from HomeUIService - waiting for setupCode for accessory %@/%@", buf, 0x20u);
          }
        }
        else
        {
          id v61 = [v2 accessorySetupManager];
          id v62 = [a1[4] uuid];
          id v63 = [a1[7] proxyConnection];
          v65[0] = MEMORY[0x263EF8330];
          v65[1] = 3221225472;
          void v65[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_1400;
          v65[3] = &unk_264A2E788;
          v65[4] = a1[4];
          id v67 = a1[8];
          id v66 = v3;
          [v61 launchAccessorySetupHostToRequestSetupCodeForAccessoryWithUUID:v66 accessoryName:v5 homeUUID:v62 clientConnection:v63 completionHandler:v65];
        }
      }
    }
    else
    {
      id v33 = objc_alloc(MEMORY[0x263F42570]);
      __int16 v34 = [a1[4] uuid];
      __int16 v21 = (void *)[v33 initWithTarget:v34];

      id v35 = objc_alloc(MEMORY[0x263F42590]);
      id v36 = a1[6];
      __int16 v68 = @"kAccessorySetupCodeReasonKey";
      id v69 = v36;
      id v37 = [NSDictionary dictionaryWithObjects:&v69 forKeys:&v68 count:1];
      uint64_t v38 = (void *)[v35 initWithName:*MEMORY[0x263F0C778] qualityOfService:33 destination:v21 payload:v37];

      id v39 = [v2 accessorySetupManager];
      __int16 v40 = [v39 accessorySetupHostClientConnection];

      if (v40)
      {
        [v38 setTransport:v40];
        id v41 = [a1[4] msgDispatcher];
        [v41 sendMessage:v38];
      }
      else
      {
        context = (void *)MEMORY[0x230FBD990]();
        id v56 = a1[4];
        __int16 v57 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
        {
          __int16 v58 = HMFGetLogIdentifier();
          id v59 = a1[5];
          *(_DWORD *)buf = 138543618;
          id v71 = v58;
          __int16 v72 = 2112;
          id v73 = v59;
          _os_log_impl(&dword_22F52A000, v57, OS_LOG_TYPE_INFO, "%{public}@No HomeUIService connection for accessory %@", buf, 0x16u);
        }
        id v60 = a1[8];
        id v41 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2002];
        (*((void (**)(id, void, void, void *))v60 + 2))(v60, 0, 0, v41);
      }
    }
  }
LABEL_17:
}

void __40__HMDHome__setupCodeProviderForMessage___block_invoke_1400(id *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = [a1[4] workQueue];
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    void v5[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_2_1401;
    v5[3] = &unk_264A2EE30;
    v5[4] = a1[4];
    id v6 = v3;
    id v8 = a1[6];
    id v7 = a1[5];
    dispatch_async(v4, v5);
  }
}

uint64_t __40__HMDHome__setupCodeProviderForMessage___block_invoke_2_1401(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    id v13 = v5;
    __int16 v14 = 2112;
    uint64_t v15 = v6;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_ERROR, "%{public}@Failed to request setup code for accessory: %@", buf, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  os_unfair_recursive_lock_lock_with_options();
  id v7 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 856), "hm_allKeys");
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  void v10[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_1402;
  void v10[3] = &unk_264A166E0;
  id v11 = *(id *)(a1 + 48);
  id v8 = objc_msgSend(v7, "na_firstObjectPassingTest:", v10);

  if (v8) {
    [*(id *)(*(void *)(a1 + 32) + 856) removeObjectForKey:v8];
  }
  [*(id *)(*(void *)(a1 + 32) + 832) removeObjectForKey:*(void *)(a1 + 48)];
  [*(id *)(*(void *)(a1 + 32) + 840) removeObjectForKey:*(void *)(a1 + 48)];
  [*(id *)(*(void *)(a1 + 32) + 848) removeObjectForKey:*(void *)(a1 + 48)];

  return os_unfair_recursive_lock_unlock();
}

uint64_t __40__HMDHome__setupCodeProviderForMessage___block_invoke_1402(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 accessoryUUID];
  uint64_t v4 = [v2 isEqual:v3];

  return v4;
}

- (void)retrieveStateForTrackedAccessory:(id)a3 stateNumber:(id *)a4 isReachable:(BOOL *)a5 linkQuality:(unint64_t *)a6 lastSeen:(id *)a7
{
  id v12 = a3;
  id v14 = [(HMDHome *)self accessoryBrowser];
  id v13 = [v14 accessoryBrowserHapProtocol];
  [v13 retrieveCurrentStateForIdentifier:v12 stateNumber:a4 isReachable:a5 linkQuality:a6 lastSeen:a7];
}

- (void)getReachableIPAccessories:(unint64_t *)a3 btleAccessories:(unint64_t *)a4 mediaAccessories:(unint64_t *)a5
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if ((unint64_t)a3 | (unint64_t)a4)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    obuint64_t j = [(HMDHome *)self accessories];
    uint64_t v5 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      unint64_t v9 = 0;
      uint64_t v10 = *(void *)v26;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v26 != v10) {
            objc_enumerationMutation(obj);
          }
          id v12 = *(id *)(*((void *)&v25 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v13 = v12;
          }
          else {
            id v13 = 0;
          }
          id v14 = v13;

          if (v14)
          {
            uint64_t v15 = [v14 matchingHAPAccessoryWithLinkType:1];
            v9 += [v15 isReachable];
            uint64_t v16 = [v14 matchingHAPAccessoryWithLinkType:2];

            v8 += [v16 isReachable];
          }
          id v17 = v12;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v18 = v17;
          }
          else {
            id v18 = 0;
          }
          id v19 = v18;

          unsigned int v20 = [v19 isReachable];
          v7 += v20;
        }
        uint64_t v6 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
      }
      while (v6);
    }
    else
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      unint64_t v9 = 0;
    }

    if (a3) {
      *a3 = v9;
    }
    if (a4) {
      *a4 = v8;
    }
    if (a5) {
      *a5 = v7;
    }
  }
}

- (int64_t)reachableAppleMediaAccessoriesCount
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v2 = [(HMDHome *)self accessories];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    int64_t v5 = 0;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(id *)(*((void *)&v12 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          unint64_t v9 = v8;
        }
        else {
          unint64_t v9 = 0;
        }
        id v10 = v9;

        if (v10) {
          v5 += [v8 isReachable];
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }
  else
  {
    int64_t v5 = 0;
  }

  return v5;
}

- (int64_t)reachableAccessoriesCountExcludingMatter
{
  uint64_t v2 = self;
  uint64_t v40 = *MEMORY[0x263EF8340];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v3 = [(HMDHome *)self accessories];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v29 objects:v39 count:16];
  if (v4)
  {
    uint64_t v6 = v4;
    int64_t v28 = 0;
    uint64_t v7 = *(void *)v30;
    *(void *)&long long v5 = 138543618;
    long long v25 = v5;
    long long v26 = v3;
    long long v27 = v2;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v30 != v7) {
          objc_enumerationMutation(v3);
        }
        id v9 = *(id *)(*((void *)&v29 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v10 = v9;
        }
        else {
          id v10 = 0;
        }
        id v11 = v10;

        if (v11)
        {
          if ([v11 isReachable] && (objc_msgSend(v11, "supportsCHIP") & 1) == 0)
          {
            long long v12 = (void *)MEMORY[0x230FBD990]();
            long long v13 = v2;
            long long v14 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              long long v15 = HMFGetLogIdentifier();
              uint64_t v16 = [v11 name];
              *(_DWORD *)buf = v25;
              __int16 v34 = v15;
              __int16 v35 = 2112;
              id v36 = v16;
              _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Accessory: %@ is reachable", buf, 0x16u);

              uint64_t v2 = v27;
              uint64_t v3 = v26;
            }

            ++v28;
          }
          if (objc_msgSend(v11, "supportsCHIP", v25))
          {
            uint64_t v17 = (void *)MEMORY[0x230FBD990]();
            id v18 = v2;
            id v19 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
            {
              unsigned int v20 = HMFGetLogIdentifier();
              __int16 v21 = [v11 name];
              int v22 = [v11 isReachable];
              *(_DWORD *)buf = 138543874;
              uint64_t v23 = @"NO";
              if (v22) {
                uint64_t v23 = @"YES";
              }
              __int16 v34 = v20;
              __int16 v35 = 2112;
              id v36 = v21;
              __int16 v37 = 2112;
              uint64_t v38 = v23;
              _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Ignoring Matter Accessory: %@ isReachable: %@", buf, 0x20u);

              uint64_t v3 = v26;
              uint64_t v2 = v27;
            }
          }
        }
      }
      uint64_t v6 = [v3 countByEnumeratingWithState:&v29 objects:v39 count:16];
    }
    while (v6);
  }
  else
  {
    int64_t v28 = 0;
  }

  return v28;
}

- (int64_t)reachableAccessoriesCount
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  obuint64_t j = [(HMDHome *)self accessories];
  uint64_t v2 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    int64_t v4 = 0;
    uint64_t v5 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(id *)(*((void *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v8 = v7;
        }
        else {
          id v8 = 0;
        }
        id v9 = v8;

        id v10 = v7;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v11 = v10;
        }
        else {
          id v11 = 0;
        }
        id v12 = v11;

        if (v9 && [v9 isReachable])
        {
          ++v4;
        }
        else if (v12 && [v12 isCurrentAccessory])
        {
          v4 += [v12 isReachable];
        }
      }
      uint64_t v3 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v3);
  }
  else
  {
    int64_t v4 = 0;
  }

  return v4;
}

- (void)_reachabilityChangedForAccessory:(id)a3 reachable:(BOOL)a4
{
  BOOL v53 = a4;
  uint64_t v68 = *MEMORY[0x263EF8340];
  id v5 = a3;
  uint64_t v6 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v6);

  uint64_t v7 = [(HMDHome *)self reachableAccessoriesCount];
  uint64_t v8 = [(HMDHome *)self previousReachableAccessoriesCount];
  int64_t v9 = [(HMDHome *)self reachableAppleMediaAccessoriesCount];
  int64_t v10 = [(HMDHome *)self previousReachableAppleMediaAccessoriesCount];
  [(HMDHome *)self setPreviousReachableAccessoriesCount:v7];
  uint64_t v11 = [(HMDHome *)self setPreviousReachableAppleMediaAccessoriesCount:v9];
  BOOL v12 = v9 + v7 < 1;
  if ((v10 + v8 < 0) ^ __OFADD__(v10, v8) | (v10 + v8 == 0)) {
    int v13 = 0;
  }
  else {
    int v13 = 1;
  }
  char v14 = v12 ^ v13;
  if (((v12 ^ v13) & 1) == 0)
  {
    id v52 = v5;
    char v15 = v12 ^ v13;
    long long v16 = (void *)MEMORY[0x230FBD990](v11);
    long long v17 = self;
    long long v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      id v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138544642;
      uint64_t v57 = (uint64_t)v19;
      __int16 v58 = 2048;
      uint64_t v59 = v7;
      __int16 v60 = 2048;
      int64_t v61 = v9;
      __int16 v62 = 1024;
      BOOL v63 = v53;
      __int16 v64 = 2048;
      uint64_t v65 = v8;
      __int16 v66 = 2048;
      int64_t v67 = v10;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Total reachable accessories %ld, apple media accessories: %ld, reachable = %d,                      last known reachable = %ld, last known apple media reachable = %ld", buf, 0x3Au);
    }
    char v14 = v15;
    id v5 = v52;
  }
  uint64_t v20 = [(HMDHome *)self localCapabilitiesDataSource];
  int v21 = [v20 supportsRemoteAccess];

  if (v21)
  {
    uint64_t v55 = 0;
    [(HMDHome *)self getReachableIPAccessories:&v55 btleAccessories:0 mediaAccessories:0];
    int64_t v22 = [(HMDHome *)self reachableAccessoriesCountExcludingMatter];
    int64_t v23 = [(HMDHome *)self previousReachableAccessoriesCountExcludingMatter];
    [(HMDHome *)self setPreviousReachableAccessoriesCountExcludingMatter:v22];
    char v24 = [(HMDHome *)self homeLocationHandler];
    [v24 accessoryReachabilityChanged:v22 previousReachableAccessoriesCount:v23 reachableAppleMediaAccessoriesCount:v9 previousReachableAppleMediaAccessoriesCount:v10];

    long long v25 = (void *)MEMORY[0x230FBD990]();
    long long v26 = self;
    long long v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = HMFGetLogIdentifier();
      long long v29 = (void *)v28;
      long long v30 = @"don't ";
      if (v7 > 0) {
        long long v30 = &stru_26E2EB898;
      }
      *(_DWORD *)buf = 138543618;
      uint64_t v57 = v28;
      __int16 v58 = 2112;
      uint64_t v59 = (uint64_t)v30;
      _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_INFO, "%{public}@Notifying home manager that we %@have locally reachable accessories", buf, 0x16u);
    }
    long long v31 = [(HMDHome *)v26 homeManager];
    long long v32 = [(HMDHome *)v26 uuid];
    [v31 accessoriesAreLocallyReachableOnTransientDevice:v7 > 0 forHome:v32];

    if ([v5 accessoryReprovisionState] && v53)
    {
      char v54 = v14;
      id v33 = (void *)MEMORY[0x230FBD990]();
      __int16 v34 = v26;
      __int16 v35 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        id v36 = HMFGetLogIdentifier();
        __int16 v37 = [v5 name];
        *(_DWORD *)buf = 138543618;
        uint64_t v57 = (uint64_t)v36;
        __int16 v58 = 2112;
        uint64_t v59 = (uint64_t)v37;
        _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ reprovision state is updated to Not Required", buf, 0x16u);
      }
      [v5 setAccessoryReprovisionState:0];
      uint64_t v38 = [v5 uuid];
      [v31 updateGenerationCounterWithReason:@"ReprovisionStateChange" sourceUUID:v38 shouldNotifyClients:0];

      id v39 = [MEMORY[0x263EFF9A0] dictionary];
      uint64_t v40 = [v5 uuid];
      id v41 = [v40 UUIDString];
      [v39 setObject:v41 forKeyedSubscript:@"kAccessoryUUID"];

      [v39 setObject:&unk_26E470918 forKeyedSubscript:*MEMORY[0x263F0E960]];
      char v42 = (void *)MEMORY[0x263F42590];
      uint64_t v43 = *MEMORY[0x263F0E950];
      id v44 = [(HMDHome *)v34 messageDestination];
      id v45 = [v42 messageWithName:v43 destination:v44 payload:v39];

      __int16 v46 = [(HMDHome *)v34 msgDispatcher];
      [v46 sendMessage:v45 completionHandler:0];

      char v14 = v54;
    }
  }
  if (v7 >= 1 && v8 <= 0)
  {
    id v47 = (void *)MEMORY[0x230FBD990]();
    uint64_t v48 = self;
    id v49 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      id v50 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v57 = (uint64_t)v50;
      _os_log_impl(&dword_22F52A000, v49, OS_LOG_TYPE_INFO, "%{public}@Notifying that we see at least one reachable accessory", buf, 0xCu);
    }
    long long v51 = [(HMDHome *)v48 notificationCenter];
    [v51 postNotificationName:@"HMDHomeCurrentDeviceHasReachableAccessories" object:v48];
  }
  if ((v14 & 1) == 0) {
    [(HMFTimer *)self->_homeLocationTimer resume];
  }
}

- (void)_handleAccessoryReachabilityChange:(id)a3
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kHomeUUID"];
  uint64_t v6 = [(HMDHome *)self uuid];
  uint64_t v7 = [v6 UUIDString];
  char v8 = [v5 isEqualToString:v7];

  id v75 = self;
  BOOL v63 = v5;
  if (v8)
  {
    __int16 v62 = 0;
  }
  else
  {
    int64_t v9 = (void *)MEMORY[0x230FBD990]();
    int64_t v10 = self;
    uint64_t v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      BOOL v12 = HMFGetLogIdentifier();
      int v13 = [(HMDHome *)v10 uuid];
      char v14 = [v13 UUIDString];
      *(_DWORD *)buf = 138543874;
      id v88 = v12;
      __int16 v89 = 2112;
      id v90 = v5;
      __int16 v91 = 2112;
      uint64_t v92 = v14;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@Home does not match, received: %@, current: %@", buf, 0x20u);
    }
    __int16 v62 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
  }
  __int16 v64 = v4;
  char v15 = [v4 messagePayload];
  long long v16 = objc_msgSend(v15, "hmf_arrayForKey:", @"kAccessoriesListKey");

  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  obuint64_t j = v16;
  uint64_t v67 = [obj countByEnumeratingWithState:&v81 objects:v96 count:16];
  if (v67)
  {
    uint64_t v66 = *(void *)v82;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v82 != v66) {
          objc_enumerationMutation(obj);
        }
        uint64_t v68 = v17;
        long long v18 = *(void **)(*((void *)&v81 + 1) + 8 * v17);
        long long v77 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        id v71 = [(HMDHome *)v75 accessories];
        uint64_t v76 = [v71 countByEnumeratingWithState:&v77 objects:v95 count:16];
        if (v76)
        {
          uint64_t v74 = *(void *)v78;
          __int16 v72 = v18;
          do
          {
            for (uint64_t i = 0; i != v76; ++i)
            {
              if (*(void *)v78 != v74) {
                objc_enumerationMutation(v71);
              }
              uint64_t v20 = *(void **)(*((void *)&v77 + 1) + 8 * i);
              int v21 = [v20 uuid];
              int64_t v22 = [v21 UUIDString];

              int64_t v23 = [v18 objectForKeyedSubscript:v22];
              if (v23)
              {
                char v24 = (void *)MEMORY[0x230FBD990]();
                long long v25 = v75;
                long long v26 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
                {
                  long long v27 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138543874;
                  id v88 = v27;
                  __int16 v89 = 2112;
                  id v90 = v22;
                  __int16 v91 = 2112;
                  uint64_t v92 = v23;
                  _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Setting remote reachability for accessory: %@ to: %@", buf, 0x20u);
                }
                objc_msgSend(v20, "setRemotelyReachable:", objc_msgSend(v23, "BOOLValue"));
              }
              id v28 = v20;
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                long long v29 = v28;
              }
              else {
                long long v29 = 0;
              }
              id v30 = v29;

              long long v31 = [v30 identifier];

              if (v31)
              {
                long long v32 = [v30 identifier];
                id v33 = [v18 objectForKeyedSubscript:v32];

                if (v33)
                {
                  uint64_t v34 = [v33 unsignedIntegerValue];
                  context = (void *)MEMORY[0x230FBD990]();
                  __int16 v35 = v75;
                  id v36 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
                  {
                    __int16 v37 = HMFGetLogIdentifier();
                    uint64_t v38 = [v28 identifier];
                    [v30 suspendedState];
                    HAPAccessorySuspendedStateDescription();
                    id v39 = v69 = v22;
                    HAPAccessorySuspendedStateDescription();
                    uint64_t v40 = v70 = v34;
                    *(_DWORD *)buf = 138544130;
                    id v88 = v37;
                    __int16 v89 = 2112;
                    id v90 = v38;
                    __int16 v91 = 2112;
                    uint64_t v92 = v39;
                    __int16 v93 = 2112;
                    id v94 = v40;
                    _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_DEBUG, "%{public}@Handle Reachability change. Setting suspended state of accessory: %@ from '%@' to '%@'", buf, 0x2Au);

                    uint64_t v34 = v70;
                    int64_t v22 = v69;
                  }
                  [v30 setSuspendedState:v34 shouldNotify:0];
                }

                long long v18 = v72;
              }
            }
            uint64_t v76 = [v71 countByEnumeratingWithState:&v77 objects:v95 count:16];
          }
          while (v76);
        }

        uint64_t v17 = v68 + 1;
      }
      while (v68 + 1 != v67);
      uint64_t v67 = [obj countByEnumeratingWithState:&v81 objects:v96 count:16];
    }
    while (v67);
  }

  id v41 = [v64 responseHandler];

  if (v41)
  {
    char v42 = [v64 responseHandler];
    ((void (**)(void, void *, void))v42)[2](v42, v62, 0);
  }
  uint64_t v43 = [v64 remoteSourceDevice];
  id v44 = [(HMDHome *)v75 primaryResident];
  id v45 = [v44 device];
  if ([v43 isEqual:v45])
  {
    BOOL v46 = [(HMDHome *)v75 currentRemoteReachabilityRegistration];

    if (v46) {
      goto LABEL_42;
    }
  }
  else
  {
  }
  id v47 = (void *)MEMORY[0x230FBD990]();
  uint64_t v48 = v75;
  id v49 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
  {
    id v50 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v88 = v50;
    __int16 v89 = 2112;
    id v90 = v43;
    _os_log_impl(&dword_22F52A000, v49, OS_LOG_TYPE_INFO, "%{public}@De-registering stale remote reachability for accessories with device = %@", buf, 0x16u);
  }
  id v51 = objc_alloc(MEMORY[0x263F42568]);
  id v52 = [MEMORY[0x263F42570] allMessageDestinations];
  id v85 = @"kHomeUUID";
  BOOL v53 = [(HMDHome *)v48 uuid];
  char v54 = [v53 UUIDString];
  long long v86 = v54;
  uint64_t v55 = [NSDictionary dictionaryWithObjects:&v86 forKeys:&v85 count:1];
  id v56 = (void *)[v51 initWithName:@"kDisableAccessoryReachabilityNotificationRequestKey" destination:v52 payload:v55];

  uint64_t v57 = [(HMDHome *)v48 homeManager];
  __int16 v58 = [v57 messageDispatcher];
  uint64_t v59 = [(HMDHome *)v48 uuid];
  __int16 v60 = [v43 remoteDestinationString];
  int64_t v61 = [(HMDHome *)v48 workQueue];
  [v58 sendSecureMessage:v56 target:v59 userID:0 destination:v60 responseQueue:v61 responseHandler:0];

LABEL_42:
}

- (void)_handleRemoteReachabilityNotificationTimerFired
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = HMFGetLogIdentifier();
    uint64_t v7 = [(HMDHome *)v4 remoteReachabilityNotificationPendingAccessories];
    *(_DWORD *)buf = 138543618;
    id v71 = v6;
    __int16 v72 = 2112;
    uint64_t v73 = (uint64_t)v7;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Reachability notification timer fired, pending list: %@", buf, 0x16u);
  }
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  obuint64_t j = [(HMDHome *)v4 reachabilityRegisteredDevices];
  uint64_t v54 = [obj countByEnumeratingWithState:&v64 objects:v77 count:16];
  if (v54)
  {
    uint64_t v53 = *(void *)v65;
    *(void *)&long long v8 = 138543874;
    long long v51 = v8;
    unint64_t v9 = 0x263F08000uLL;
    __int16 v58 = v4;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v65 != v53) {
          objc_enumerationMutation(obj);
        }
        uint64_t v55 = *(void **)(*((void *)&v64 + 1) + 8 * v10);
        uint64_t v56 = v10;
        uint64_t v11 = (void *)MEMORY[0x263EFF980];
        BOOL v12 = [(HMDHome *)v4 remoteReachabilityNotificationPendingAccessories];
        uint64_t v59 = objc_msgSend(v11, "arrayWithCapacity:", objc_msgSend(v12, "count"));

        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        id v57 = [(HMDHome *)v4 accessories];
        uint64_t v13 = [v57 countByEnumeratingWithState:&v60 objects:v76 count:16];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)v61;
          do
          {
            for (uint64_t i = 0; i != v14; ++i)
            {
              if (*(void *)v61 != v15) {
                objc_enumerationMutation(v57);
              }
              uint64_t v17 = *(void **)(*((void *)&v60 + 1) + 8 * i);
              long long v18 = [v17 uuid];
              id v19 = [v18 UUIDString];
              uint64_t v20 = [(HMDHome *)v4 getReachabilityTupleForAccessoryUUID:v19];

              if (v20)
              {
                int v21 = (void *)MEMORY[0x263EFF9A0];
                int64_t v22 = objc_msgSend(*(id *)(v9 + 2584), "numberWithBool:", objc_msgSend(v20, "currentReachability"));
                int64_t v23 = [v20 accessoryUUID];
                char v24 = [v21 dictionaryWithObject:v22 forKey:v23];

                id v25 = v17;
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  long long v26 = v25;
                }
                else {
                  long long v26 = 0;
                }
                id v27 = v26;

                id v28 = [v27 identifier];

                if (v28)
                {
                  long long v29 = objc_msgSend(*(id *)(v9 + 2584), "numberWithUnsignedInteger:", objc_msgSend(v27, "suspendedState"));
                  id v30 = [v27 identifier];
                  [v24 setObject:v29 forKey:v30];
                }
                [v59 addObject:v24];

                id v4 = v58;
              }
            }
            uint64_t v14 = [v57 countByEnumeratingWithState:&v60 objects:v76 count:16];
          }
          while (v14);
        }

        if ([v59 count])
        {
          unint64_t v31 = v9;
          long long v32 = (void *)MEMORY[0x230FBD990]();
          id v33 = v4;
          uint64_t v34 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            __int16 v35 = HMFGetLogIdentifier();
            uint64_t v36 = [v59 count];
            __int16 v37 = [v55 device];
            uint64_t v38 = [v37 remoteDestinationString];
            *(_DWORD *)buf = v51;
            id v71 = v35;
            __int16 v72 = 2048;
            uint64_t v73 = v36;
            __int16 v74 = 2112;
            id v75 = v38;
            _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_INFO, "%{public}@Sending current reachability for %tu accessories to destination:%@", buf, 0x20u);
          }
          v68[0] = @"kAccessoriesListKey";
          id v39 = (void *)[v59 copy];
          v68[1] = @"kHomeUUID";
          v69[0] = v39;
          uint64_t v40 = [(HMDHome *)v33 uuid];
          id v41 = [v40 UUIDString];
          v69[1] = v41;
          char v42 = [NSDictionary dictionaryWithObjects:v69 forKeys:v68 count:2];

          uint64_t v43 = [MEMORY[0x263F42568] messageWithName:@"kRemoteReachabilityChangedNotificationKey" identifier:0 messagePayload:v42];
          id v44 = [(HMDHome *)v33 homeManager];
          id v45 = [v44 messageDispatcher];
          BOOL v46 = [(HMDHome *)v33 uuid];
          id v47 = [v55 device];
          uint64_t v48 = [v47 remoteDestinationString];
          id v49 = [(HMDHome *)v33 workQueue];
          [v45 sendSecureMessage:v43 target:v46 userID:0 destination:v48 responseQueue:v49 responseHandler:0];

          id v4 = v58;
          unint64_t v9 = v31;
        }

        uint64_t v10 = v56 + 1;
      }
      while (v56 + 1 != v54);
      uint64_t v54 = [obj countByEnumeratingWithState:&v64 objects:v77 count:16];
    }
    while (v54);
  }

  id v50 = [(HMDHome *)v4 remoteReachabilityNotificationPendingAccessories];
  [v50 removeAllObjects];

  [(HMDHome *)v4 setReachabilityNotificationTimer:0];
}

- (void)_updateReachabilityChangeToRegisteredDevices:(id)a3
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 uuid];
  uint64_t v6 = [v5 UUIDString];

  uint64_t v7 = [(HMDHome *)self getReachabilityTupleForAccessoryUUID:v6];
  uint64_t v8 = [v4 isReachable];
  id v9 = v4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  id v11 = v10;

  if (v11)
  {
    objc_msgSend(v7, "setPreviouslySentSuspendedState:", objc_msgSend(v7, "currentSuspendedState"));
    objc_msgSend(v7, "setCurrentSuspendedState:", objc_msgSend(v11, "suspendedState"));
  }
  if (!v7)
  {
    id v19 = +[HMDAccessoryReachabilityTuple tupleWithAccessoryUUID:v6 reachable:v8];
    objc_msgSend(v19, "setCurrentSuspendedState:", objc_msgSend(v11, "suspendedState"));
    uint64_t v20 = [(HMDHome *)self remoteReachabilityNotificationPendingAccessories];
    [v20 addObject:v19];

    int v21 = [(HMDHome *)self reachabilityNotificationTimer];

    if (!v21)
    {
      int64_t v22 = (void *)[objc_alloc(MEMORY[0x263F42658]) initWithTimeInterval:1 options:*(double *)&remoteReachabilityNotificationsDeferPeriod];
      [(HMDHome *)self setReachabilityNotificationTimer:v22];

      int64_t v23 = [(HMDHome *)self workQueue];
      char v24 = [(HMDHome *)self reachabilityNotificationTimer];
      [v24 setDelegateQueue:v23];

      id v25 = [(HMDHome *)self reachabilityNotificationTimer];
      [v25 setDelegate:self];

      long long v26 = [(HMDHome *)self reachabilityNotificationTimer];
      [v26 resume];

      id v27 = (void *)MEMORY[0x230FBD990]();
      id v28 = self;
      long long v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        id v30 = HMFGetLogIdentifier();
        unint64_t v31 = [(HMDHome *)v28 reachabilityNotificationTimer];
        int v32 = 138543874;
        id v33 = v30;
        __int16 v34 = 2048;
        id v35 = v31;
        __int16 v36 = 2048;
        uint64_t v37 = remoteReachabilityNotificationsDeferPeriod;
        _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Started reachability notification defer timer %p for %f sec", (uint8_t *)&v32, 0x20u);
      }
    }
    goto LABEL_16;
  }
  [v7 setCurrentReachability:v8];
  int v12 = [v7 previouslySentReachability];
  if (v12 == [v7 currentReachability])
  {
    uint64_t v13 = [v7 previouslySentSuspendedState];
    if (v13 == [v7 currentSuspendedState])
    {
      uint64_t v14 = (void *)MEMORY[0x230FBD990]();
      uint64_t v15 = self;
      long long v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = HMFGetLogIdentifier();
        long long v18 = HMFBooleanToString();
        int v32 = 138543874;
        id v33 = v17;
        __int16 v34 = 2112;
        id v35 = v9;
        __int16 v36 = 2112;
        uint64_t v37 = (uint64_t)v18;
        _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ toggled reachability back to %@ ignoring", (uint8_t *)&v32, 0x20u);
      }
      id v19 = [(HMDHome *)v15 remoteReachabilityNotificationPendingAccessories];
      [v19 removeObject:v7];
LABEL_16:
    }
  }
}

- (id)getReachabilityTupleForAccessoryUUID:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = [(HMDHome *)self remoteReachabilityNotificationPendingAccessories];
  id v6 = (id)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v10 = [v9 accessoryUUID];
        char v11 = [v10 isEqual:v4];

        if (v11)
        {
          id v6 = v9;
          goto LABEL_11;
        }
      }
      id v6 = (id)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v6;
}

- (void)_deregisterDeviceForReachabilityNotification:(id)a3
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v25 = v8;
    __int16 v26 = 2112;
    id v27 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@De-registering device %@ for reachability notification", buf, 0x16u);
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v9 = [(HMDHome *)v6 reachabilityRegisteredDevices];
  uint64_t v10 = (void *)[v9 copy];

  uint64_t v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        long long v15 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        long long v16 = [v15 device];
        int v17 = [v16 isEqual:v4];

        if (v17)
        {
          uint64_t v18 = [(HMDHome *)v6 reachabilityRegisteredDevices];
          [v18 removeObject:v15];
        }
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v12);
  }
}

- (void)_registerDeviceForReachabilityNotification:(id)a3 accessoryList:(id)a4
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)MEMORY[0x230FBD990]([(HMDHome *)self _deregisterDeviceForReachabilityNotification:v6]);
  id v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    int v14 = 138543618;
    long long v15 = v11;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Registering device %@ for reachability notification", (uint8_t *)&v14, 0x16u);
  }
  uint64_t v12 = [[HMDDeviceRegistrationEntry alloc] initWithDevice:v6 accessoryList:v7];
  if (v12)
  {
    uint64_t v13 = [(HMDHome *)v9 reachabilityRegisteredDevices];
    [v13 addObject:v12];
  }
}

- (void)_handleAccessoryReachabilityRegistration:(id)a3
{
}

- (void)_handleAccessoryReachabilityRegistrationAndEnable:(id)a3
{
}

- (void)resetAccessoryHashedRouteIdentifiers
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v2 = [(HMDHome *)self accessories];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * v6++) resetHashedRoute];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

- (void)btleAccessoryReachabilityProbeTimer:(BOOL)a3
{
  uint64_t v5 = [(HMDHome *)self workQueue];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __47__HMDHome_btleAccessoryReachabilityProbeTimer___block_invoke;
  v6[3] = &unk_264A2B870;
  void v6[4] = self;
  BOOL v7 = a3;
  dispatch_async(v5, v6);
}

void __47__HMDHome_btleAccessoryReachabilityProbeTimer___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) accessoryBrowser];
  [v2 btleAccessoryReachabilityProbeTimer:*(unsigned __int8 *)(a1 + 40)];
}

- (BOOL)evaluatePredicate:(id)a3
{
  v26[1] = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self predicateUtility];
  uint64_t v6 = [v5 rewritePredicate:v4 currentCharacteristicInPredicate:0 characteristicsToRead:0 homePresence:0];

  id v25 = @"THIS_OBJECT";
  BOOL v7 = [(HMDHome *)self predicateUtility];
  v26[0] = v7;
  long long v8 = [NSDictionary dictionaryWithObjects:v26 forKeys:&v25 count:1];

  [v6 allowEvaluation];
  long long v9 = [(HMDHome *)self predicateUtility];
  char v10 = [v6 evaluateWithObject:v9 substitutionVariables:v8];

  uint64_t v11 = (void *)MEMORY[0x230FBD990]();
  uint64_t v12 = self;
  uint64_t v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v14 = HMFGetLogIdentifier();
    long long v15 = HMFBooleanToString();
    int v17 = 138544130;
    uint64_t v18 = v14;
    __int16 v19 = 2112;
    id v20 = v4;
    __int16 v21 = 2112;
    long long v22 = v6;
    __int16 v23 = 2112;
    char v24 = v15;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Evaluating predicate %@ (rewritten %@) with result %@", (uint8_t *)&v17, 0x2Au);
  }

  return v10;
}

- (void)handleEvaluatePredicateMessage:(id)a3
{
  v36[1] = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 predicateForKey:@"kPredicateEvaluatePredicateDataKey"];
  uint64_t v6 = [v4 stringForKey:@"serviceUUID"];
  BOOL v7 = (void *)v6;
  if (v5 && v6)
  {
    BOOL v8 = [(HMDHome *)self evaluatePredicate:v5];
    long long v9 = [v4 responseHandler];

    if (v9)
    {
      char v10 = [v4 responseHandler];
      id v35 = @"kPredicateEvaluateResultKey";
      uint64_t v11 = [NSNumber numberWithBool:v8];
      v36[0] = v11;
      uint64_t v12 = [NSDictionary dictionaryWithObjects:v36 forKeys:&v35 count:1];
      ((void (**)(void, void, void *))v10)[2](v10, 0, v12);
    }
    long long v29 = v7;
    uint64_t v13 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v7];
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    int v14 = [(HMDHome *)self accessories];
    uint64_t v15 = [v14 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v31;
      while (2)
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v31 != v17) {
            objc_enumerationMutation(v14);
          }
          id v19 = *(id *)(*((void *)&v30 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v20 = v19;
          }
          else {
            id v20 = 0;
          }
          id v21 = v20;

          uint64_t v22 = [v21 serviceWithUUID:v13];
          if (v22)
          {
            __int16 v26 = (void *)v22;
            id v27 = [v4 remoteSourceDevice];
            uint64_t v28 = [v27 remoteDestinationString];
            [v26 updatePresenceRequestTimeForDeviceWithDestination:v28];

            goto LABEL_20;
          }
        }
        uint64_t v16 = [v14 countByEnumeratingWithState:&v30 objects:v34 count:16];
        if (v16) {
          continue;
        }
        break;
      }
    }
LABEL_20:

    BOOL v7 = v29;
  }
  else
  {
    __int16 v23 = [v4 responseHandler];

    if (v23)
    {
      char v24 = [v4 responseHandler];
      id v25 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      ((void (**)(void, void *, void))v24)[2](v24, v25, 0);
    }
  }
}

- (void)dispatchRequestToEvaluateCondition:(id)a3 forCharacteristics:(id)a4 completion:(id)a5
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  char v10 = (void (**)(id, void, id))a5;
  if (v10 && [v9 count])
  {
    uint64_t v11 = [(HMDHome *)self primaryResident];
    int v12 = [v11 isCurrentDevice];

    if (v12)
    {
      uint64_t v13 = (void *)MEMORY[0x230FBD990]();
      int v14 = self;
      uint64_t v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v59 = v16;
        _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Current device is the resident device itself, evaluating locally.", buf, 0xCu);
      }
      if ([(HMDHome *)v14 evaluatePredicate:v8]) {
        v10[2](v10, 0, v9);
      }
    }
    else
    {
      uint64_t v17 = [(HMDHome *)self primaryResident];
      uint64_t v48 = [v17 device];

      uint64_t v18 = [(HMDHome *)self primaryResident];
      int v19 = [v18 supportsSharedEventTriggerActivation];

      if (v19)
      {
        id v20 = NSString;
        id v21 = [(HMDHome *)self logIdentifier];
        id v47 = [v20 stringWithFormat:@"Bulletin-%@", v21];

        uint64_t v43 = [[HMDPredicateUtilities alloc] initWithHome:self logIdentifier:v47];
        BOOL v46 = [(HMDPredicateUtilities *)v43 rewritePredicateForDaemon:v8 message:0];
        v56[0] = @"kPredicateEvaluatePredicateDataKey";
        uint64_t v22 = encodeRootObject();
        v57[0] = v22;
        v56[1] = @"serviceUUID";
        __int16 v23 = [v9 firstObject];
        char v24 = [v23 service];
        id v25 = [v24 uuid];
        __int16 v26 = [v25 UUIDString];
        v57[1] = v26;
        id v45 = [NSDictionary dictionaryWithObjects:v57 forKeys:v56 count:2];

        id v27 = [HMDRemoteDeviceMessageDestination alloc];
        uint64_t v28 = [(HMDHome *)self uuid];
        id v44 = [(HMDRemoteDeviceMessageDestination *)v27 initWithTarget:v28 device:v48];

        long long v29 = +[HMDRemoteMessage secureMessageWithName:@"kPredicateEvaluatePredicateRequestKey" destination:v44 messagePayload:v45];
        long long v30 = [v29 identifier];
        objc_initWeak(&location, self);
        v49[0] = MEMORY[0x263EF8330];
        v49[1] = 3221225472;
        void v49[2] = __76__HMDHome_dispatchRequestToEvaluateCondition_forCharacteristics_completion___block_invoke;
        v49[3] = &unk_264A17798;
        objc_copyWeak(&v54, &location);
        id v31 = v30;
        id v50 = v31;
        id v51 = v8;
        id v52 = v9;
        uint64_t v53 = v10;
        long long v32 = (void *)MEMORY[0x230FBD990]([v29 setResponseHandler:v49]);
        long long v33 = self;
        HMFGetOSLogHandle();
        __int16 v34 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          id v35 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          uint64_t v59 = v35;
          __int16 v60 = 2114;
          id v61 = v31;
          _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_INFO, "%{public}@Sending message with identifier %{public}@ to evaluate bulletin condition to resident", buf, 0x16u);
        }
        __int16 v36 = [(HMDHome *)v33 homeManager];
        uint64_t v37 = [v36 messageDispatcher];

        [v37 sendMessage:v29 completionHandler:0];
        objc_destroyWeak(&v54);
        objc_destroyWeak(&location);
      }
      else
      {
        uint64_t v38 = (void *)MEMORY[0x230FBD990]();
        id v39 = self;
        uint64_t v40 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          id v41 = HMFGetLogIdentifier();
          char v42 = [(HMDHome *)v39 primaryResident];
          *(_DWORD *)buf = 138543618;
          uint64_t v59 = v41;
          __int16 v60 = 2112;
          id v61 = v42;
          _os_log_impl(&dword_22F52A000, v40, OS_LOG_TYPE_INFO, "%{public}@Remote access device %@ is not capable of presence status. Directly send the notification.", buf, 0x16u);
        }
        v10[2](v10, 0, v9);
      }
    }
  }
}

void __76__HMDHome_dispatchRequestToEvaluateCondition_forCharacteristics_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = WeakRetained;
  char v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void **)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138544386;
    char v24 = v11;
    __int16 v25 = 2112;
    uint64_t v26 = v12;
    __int16 v27 = 2112;
    uint64_t v28 = v13;
    __int16 v29 = 2112;
    uint64_t v30 = v14;
    __int16 v31 = 2112;
    id v32 = v5;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Message with identifier %@ to evaluate condition %@ for characteristics %@ has been sent with error %@", buf, 0x34u);
  }
  if (v5) {
    goto LABEL_7;
  }
  int v15 = objc_msgSend(v6, "hmf_BOOLForKey:", @"kPredicateEvaluateResultKey");
  uint64_t v16 = (void *)MEMORY[0x230FBD990]();
  id v17 = v9;
  uint64_t v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    int v19 = HMFGetLogIdentifier();
    uint64_t v20 = *(void *)(a1 + 40);
    HMFBooleanToString();
    v21 = int v22 = v15;
    *(_DWORD *)buf = 138543874;
    char v24 = v19;
    __int16 v25 = 2112;
    uint64_t v26 = v20;
    __int16 v27 = 2112;
    uint64_t v28 = v21;
    _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Resident evaluate predicate %@ to %@.", buf, 0x20u);

    int v15 = v22;
  }

  if (v15) {
LABEL_7:
  }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

- (void)evaluateNotificationConditionForCharacteristics:(id)a3 homePresence:(id)a4 completion:(id)a5
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (v10)
  {
    if ([(HMDHome *)self bulletinNotificationsSupported])
    {
      id v61 = v10;
      long long v63 = objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(v8, "count"));
      long long v65 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v8, "count"));
      long long v75 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      id v62 = v8;
      obuint64_t j = v8;
      uint64_t v11 = [obj countByEnumeratingWithState:&v75 objects:v88 count:16];
      id v64 = v9;
      uint64_t v70 = self;
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)v76;
        uint64_t v67 = *(void *)v76;
        do
        {
          uint64_t v14 = 0;
          uint64_t v68 = v12;
          do
          {
            if (*(void *)v76 != v13) {
              objc_enumerationMutation(obj);
            }
            int v15 = *(void **)(*((void *)&v75 + 1) + 8 * v14);
            uint64_t v16 = [v15 service];
            id v17 = [v16 bulletinBoardNotification];
            int v18 = [v17 isEnabled];

            if (v18)
            {
              int v19 = (void *)MEMORY[0x230FBD990]();
              uint64_t v20 = self;
              id v21 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
              {
                int v22 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                long long v81 = v22;
                __int16 v82 = 2112;
                id v83 = v15;
                _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Notification is enabled for characteristic %@.", buf, 0x16u);
              }
              __int16 v23 = [v16 bulletinBoardNotification];
              char v24 = [v23 condition];

              if (v24)
              {
                __int16 v25 = [(HMDHome *)v20 predicateUtility];
                char v26 = [v25 containsPresenceEvents:v24];
                if (v9 || (v26 & 1) == 0)
                {
                  id v32 = [v25 rewritePredicate:v24 currentCharacteristicInPredicate:0 characteristicsToRead:0 homePresence:v9];
                  long long v86 = @"THIS_OBJECT";
                  id v87 = v25;
                  uint64_t v38 = [NSDictionary dictionaryWithObjects:&v87 forKeys:&v86 count:1];
                  [v32 allowEvaluation];
                  int v39 = [v32 evaluateWithObject:v25 substitutionVariables:v38];
                  context = (void *)MEMORY[0x230FBD990]();
                  uint64_t v40 = v20;
                  id v41 = HMFGetOSLogHandle();
                  BOOL v42 = os_log_type_enabled(v41, OS_LOG_TYPE_INFO);
                  if (v39)
                  {
                    if (v42)
                    {
                      uint64_t v43 = HMFGetLogIdentifier();
                      *(_DWORD *)buf = 138543874;
                      long long v81 = v43;
                      __int16 v82 = 2112;
                      id v83 = v24;
                      __int16 v84 = 2112;
                      id v85 = v15;
                      _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_INFO, "%{public}@Condition %@ for characteristic (%@) evaluates to true, posting bulletin for it.", buf, 0x20u);
                    }
                    [v65 addObject:v15];
                  }
                  else
                  {
                    if (v42)
                    {
                      id v44 = HMFGetLogIdentifier();
                      *(_DWORD *)buf = 138543874;
                      long long v81 = v44;
                      __int16 v82 = 2112;
                      id v83 = v24;
                      __int16 v84 = 2112;
                      id v85 = v15;
                      _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_INFO, "%{public}@Condition %@ for characteristic (%@) evaluates to false, not posting bulletin for it.", buf, 0x20u);
                    }
                  }

                  id v9 = v64;
                }
                else
                {
                  __int16 v27 = (void *)MEMORY[0x230FBD990]();
                  uint64_t v28 = v20;
                  __int16 v29 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v30 = HMFGetLogIdentifier();
                    *(_DWORD *)buf = 138543874;
                    long long v81 = v30;
                    __int16 v82 = 2112;
                    id v83 = v24;
                    __int16 v84 = 2112;
                    id v85 = v15;
                    _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Condition %@ contains presence and no homePresence presents, delaying bulletin for characteristic %@", buf, 0x20u);

                    id v9 = v64;
                  }

                  __int16 v31 = [v16 uuid];
                  id v32 = [v63 objectForKeyedSubscript:v31];

                  if (!v32)
                  {
                    id v32 = [MEMORY[0x263EFF980] array];
                    uint64_t v33 = [v16 uuid];
                    [v63 setObject:v32 forKeyedSubscript:v33];
                  }
                  [v32 addObject:v15];
                }
                uint64_t v12 = v68;

                self = v70;
                uint64_t v13 = v67;
              }
              else
              {
                __int16 v34 = (void *)MEMORY[0x230FBD990]();
                id v35 = v20;
                __int16 v36 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
                {
                  uint64_t v37 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138543618;
                  long long v81 = v37;
                  __int16 v82 = 2112;
                  id v83 = v15;
                  _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_INFO, "%{public}@No condition is present in chr (%@)", buf, 0x16u);

                  uint64_t v13 = v67;
                }

                [v65 addObject:v15];
                uint64_t v12 = v68;
              }
            }
            ++v14;
          }
          while (v12 != v14);
          uint64_t v12 = [obj countByEnumeratingWithState:&v75 objects:v88 count:16];
        }
        while (v12);
      }

      id v45 = v65;
      id v10 = v61;
      if ([v65 count]) {
        (*((void (**)(id, void, void *))v61 + 2))(v61, 0, v65);
      }
      BOOL v46 = v63;
      if ([v63 count])
      {
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        id v47 = [v63 allValues];
        uint64_t v48 = [v47 countByEnumeratingWithState:&v71 objects:v79 count:16];
        if (v48)
        {
          uint64_t v49 = v48;
          uint64_t v50 = *(void *)v72;
          do
          {
            for (uint64_t i = 0; i != v49; ++i)
            {
              if (*(void *)v72 != v50) {
                objc_enumerationMutation(v47);
              }
              id v52 = *(void **)(*((void *)&v71 + 1) + 8 * i);
              uint64_t v53 = [v52 firstObject];
              id v54 = [v53 service];
              uint64_t v55 = [v54 bulletinBoardNotification];
              uint64_t v56 = [v55 condition];
              [(HMDHome *)v70 dispatchRequestToEvaluateCondition:v56 forCharacteristics:v52 completion:v61];
            }
            uint64_t v49 = [v47 countByEnumeratingWithState:&v71 objects:v79 count:16];
          }
          while (v49);
        }

        BOOL v46 = v63;
        id v9 = v64;
        id v45 = v65;
      }

      id v8 = v62;
    }
    else
    {
      id v57 = (void *)MEMORY[0x230FBD990]();
      __int16 v58 = self;
      uint64_t v59 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        __int16 v60 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v81 = v60;
        __int16 v82 = 2112;
        id v83 = v8;
        _os_log_impl(&dword_22F52A000, v59, OS_LOG_TYPE_DEBUG, "%{public}@Bulletin notifications are not supported, skipping evaluating bulletin for characteristics: %@", buf, 0x16u);
      }
      (*((void (**)(id, void, void))v10 + 2))(v10, 0, MEMORY[0x263EFFA68]);
    }
  }
}

- (void)reevaluateAccessoryInfo
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v10 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Re-evaluating accessory info", buf, 0xCu);
  }
  BOOL v7 = [(HMDHome *)v4 workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __34__HMDHome_reevaluateAccessoryInfo__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = v4;
  dispatch_async(v7, block);
}

uint64_t __34__HMDHome_reevaluateAccessoryInfo__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reevaluateAccessoryInfoWithBadgeRefresh:1];
}

- (void)_reevaluateAccessoryInfoWithBadgeRefresh:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v26 = *MEMORY[0x263EF8340];
  BOOL v5 = [(HMDHome *)self isOwnerUser];
  BOOL v6 = [(HMDHome *)self isSharedAdmin];
  BOOL v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = self;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    uint64_t v11 = HMFBooleanToString();
    uint64_t v12 = HMFBooleanToString();
    uint64_t v13 = HMFBooleanToString();
    int v18 = 138544130;
    int v19 = v10;
    __int16 v20 = 2112;
    id v21 = v11;
    __int16 v22 = 2112;
    __int16 v23 = v12;
    __int16 v24 = 2112;
    __int16 v25 = v13;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Re-evaluating accessory info with shouldRefreshBadge: %@, isOwnerUser: %@, isSharedAdminUser:%@ ", (uint8_t *)&v18, 0x2Au);
  }
  if (v5)
  {
    uint64_t v14 = +[HMDBulletinBoard sharedBulletinBoard];
    id v15 = (id)[v14 updateBulletinForFirmwareUpdateInHome:v8];
  }
  else if (!v6)
  {
    goto LABEL_7;
  }
  uint64_t v16 = +[HMDBulletinBoard sharedBulletinBoard];
  [v16 insertBulletinsForMatterFirmwareUpdateInstalledInHome:v8];

LABEL_7:
  if (v3)
  {
    id v17 = +[HMDBulletinBoard sharedBulletinBoard];
    [v17 refreshHomeBadgeNumber];
  }
}

- (void)_notifyClientsOfAccessoryInfoUpdatedForAccessories:(id)a3 shouldRefreshBadge:(BOOL)a4 withCompletion:(id)a5
{
  BOOL v6 = a4;
  uint64_t v80 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = (void (**)(id, void))a5;
  if ([v8 count])
  {
    __int16 v60 = self;
    BOOL v61 = v6;
    id v62 = v9;
    long long v65 = [MEMORY[0x263EFF9A0] dictionary];
    long long v66 = [MEMORY[0x263EFF9A0] dictionary];
    long long v69 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    id v63 = v8;
    obuint64_t j = v8;
    uint64_t v10 = [obj countByEnumeratingWithState:&v69 objects:v79 count:16];
    uint64_t v58 = v10;
    char v11 = 0;
    if (!v10) {
      goto LABEL_36;
    }
    uint64_t v67 = *(void *)v70;
    uint64_t v68 = v10;
    while (1)
    {
      for (uint64_t i = 0; i != v68; ++i)
      {
        if (*(void *)v70 != v67) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void **)(*((void *)&v69 + 1) + 8 * i);
        uint64_t v14 = objc_msgSend(v13, "vendorInfo", v58);
        id v15 = [v13 firmwareVersion];
        if (v15)
        {
          uint64_t v16 = [v14 firmwareVersion];
          id v17 = [v13 firmwareVersion];
          uint64_t v18 = [v16 isGreaterThanVersion:v17];
        }
        else
        {
          uint64_t v18 = 0;
        }

        int v19 = [MEMORY[0x263EFF9A0] dictionary];
        __int16 v20 = [MEMORY[0x263EFF9A0] dictionary];
        id v21 = [v14 appBundleID];

        if (v21)
        {
          __int16 v22 = [v14 appBundleID];
          [v20 setObject:v22 forKeyedSubscript:@"kAccessoryVendorInfoBundleIDKey"];

          char v11 = 1;
        }
        __int16 v23 = [v14 appStoreID];

        if (v23)
        {
          __int16 v24 = [v14 appStoreID];
          [v20 setObject:v24 forKeyedSubscript:@"kAccessoryVendorInfoStoreIDKey"];

          char v11 = 1;
        }
        __int16 v25 = [NSNumber numberWithBool:v18];
        [v20 setObject:v25 forKeyedSubscript:@"kAccessoryVendorInfoFirmwareUpdateAvailableKey"];

        uint64_t v26 = [v13 serialNumber];

        if (v26)
        {
          __int16 v27 = [v13 serialNumber];
          [v20 setObject:v27 forKeyedSubscript:@"kAccessoryInfoSerialNumberKey"];

          char v11 = 1;
        }
        uint64_t v28 = [v13 manufacturer];

        if (v28)
        {
          __int16 v29 = [v13 manufacturer];
          [v19 setObject:v29 forKeyedSubscript:@"kAccessoryInfoManufacturerKey"];

          uint64_t v30 = [v13 manufacturer];
          [v20 setObject:v30 forKeyedSubscript:@"kAccessoryInfoManufacturerKey"];
        }
        __int16 v31 = [v13 model];

        if (v31)
        {
          id v32 = [v13 model];
          [v19 setObject:v32 forKeyedSubscript:@"kAccessoryInfoModelKey"];

          uint64_t v33 = [v13 model];
          [v20 setObject:v33 forKeyedSubscript:@"kAccessoryInfoModelKey"];
        }
        id v34 = v13;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v35 = v34;
        }
        else {
          id v35 = 0;
        }
        id v36 = v35;

        if (v36 && [v36 supportsCHIP])
        {
          uint64_t v37 = [v34 displayableFirmwareVersion];

          if (!v37) {
            goto LABEL_30;
          }
          uint64_t v38 = [v34 displayableFirmwareVersion];
          [v19 setObject:v38 forKeyedSubscript:@"kAccessoryInfoFirmwareVersionKey"];

          int v39 = [v34 displayableFirmwareVersion];
          [v20 setObject:v39 forKeyedSubscript:@"kAccessoryInfoFirmwareVersionKey"];
        }
        else
        {
          uint64_t v40 = [v34 firmwareVersion];

          if (!v40) {
            goto LABEL_30;
          }
          id v41 = [v34 firmwareVersion];
          BOOL v42 = [v41 shortVersionString];
          [v19 setObject:v42 forKeyedSubscript:@"kAccessoryInfoFirmwareVersionKey"];

          int v39 = [v34 firmwareVersion];
          uint64_t v43 = [v39 shortVersionString];
          [v20 setObject:v43 forKeyedSubscript:@"kAccessoryInfoFirmwareVersionKey"];
        }
LABEL_30:
        if ([v20 count])
        {
          id v44 = [v34 uuid];
          id v45 = [v44 UUIDString];
          [v66 setObject:v20 forKeyedSubscript:v45];
        }
        if ([v19 count])
        {
          BOOL v46 = [v34 uuid];
          id v47 = [v46 UUIDString];
          [v65 setObject:v19 forKeyedSubscript:v47];
        }
      }
      uint64_t v68 = [obj countByEnumeratingWithState:&v69 objects:v79 count:16];
      if (!v68)
      {
LABEL_36:

        uint64_t v48 = (void *)MEMORY[0x230FBD990]();
        uint64_t v49 = v60;
        uint64_t v50 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
        {
          id v51 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          long long v74 = v51;
          __int16 v75 = 2112;
          long long v76 = v65;
          __int16 v77 = 2112;
          long long v78 = v66;
          _os_log_impl(&dword_22F52A000, v50, OS_LOG_TYPE_INFO, "%{public}@Notify clients that vendor info has updated: %@  entitledInfo %@", buf, 0x20u);
        }
        if ([v65 count])
        {
          id v52 = [MEMORY[0x263F42568] messageWithName:@"kAccessoryInfoUpdatedNotificationKey" messagePayload:v65];
          uint64_t v53 = [(HMDHome *)v49 msgDispatcher];
          id v54 = [(HMDHome *)v49 messageTargetUUID];
          [v53 sendMessage:v52 target:v54];
        }
        if (v11)
        {
          uint64_t v55 = [MEMORY[0x263F42568] entitledMessageWithName:@"kAccessoryInfoUpdatedNotificationKey" messagePayload:v66];
          uint64_t v56 = [(HMDHome *)v49 msgDispatcher];
          id v57 = [(HMDHome *)v49 messageTargetUUID];
          [v56 sendMessage:v55 target:v57];
        }
        -[HMDHome _reevaluateAccessoryInfoWithBadgeRefresh:](v49, "_reevaluateAccessoryInfoWithBadgeRefresh:", v61, v58);
        id v9 = v62;
        if (v62) {
          ((void (**)(id, BOOL))v62)[2](v62, v59 != 0);
        }

        id v8 = v63;
        goto LABEL_47;
      }
    }
  }
  if (v9) {
    v9[2](v9, 0);
  }
LABEL_47:
}

- (void)notifyClientsOfAccessoryInfoUpdatedForAccessories:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __61__HMDHome_notifyClientsOfAccessoryInfoUpdatedForAccessories___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __61__HMDHome_notifyClientsOfAccessoryInfoUpdatedForAccessories___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyClientsOfAccessoryInfoUpdatedForAccessories:*(void *)(a1 + 40) shouldRefreshBadge:1 withCompletion:0];
}

- (void)_removeCloudData
{
  BOOL v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  id v4 = [(HMDHome *)self hindsightCloudShareManager];
  [v4 removeZones];

  BOOL v5 = [(HMDHome *)self userActionPredictionManager];
  [v5 removeZones];

  id v6 = [(HMDHome *)self personDataManager];
  [v6 removeCloudDataDueToHomeRemoval];
}

- (void)handleHomeWasRemoved
{
  id v2 = [(HMDHome *)self walletKeyManager];
  [v2 handleHomeWasRemoved];
}

- (void)_removeAllHomeContentsAndAccessoryPairings:(BOOL)a3 queue:(id)a4 completionHandler:(id)a5
{
  BOOL v46 = a3;
  uint64_t v77 = *MEMORY[0x263EF8340];
  id v44 = a4;
  id v45 = a5;
  BOOL v7 = (void *)MEMORY[0x230FBD990]();
  id val = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v70 = v9;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Removing all home contents and accessory pairings", buf, 0xCu);
  }
  uint64_t v10 = [(HMDHome *)val walletKeyManager];
  [v10 handleHomeWillBeRemoved];

  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  char v11 = [(HMDHome *)val triggers];
  uint64_t v12 = [v11 countByEnumeratingWithState:&v65 objects:v76 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v66;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v66 != v13) {
          objc_enumerationMutation(v11);
        }
        objc_msgSend(*(id *)(*((void *)&v65 + 1) + 8 * i), "invalidate", v44);
      }
      uint64_t v12 = [v11 countByEnumeratingWithState:&v65 objects:v76 count:16];
    }
    while (v12);
  }

  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id v15 = (void *)[(NSMutableArray *)val->_actionSets copy];
  uint64_t v16 = [v15 countByEnumeratingWithState:&v61 objects:v75 count:16];
  if (v16)
  {
    uint64_t v17 = *(void *)v62;
    do
    {
      for (uint64_t j = 0; j != v16; ++j)
      {
        if (*(void *)v62 != v17) {
          objc_enumerationMutation(v15);
        }
        objc_msgSend(*(id *)(*((void *)&v61 + 1) + 8 * j), "invalidate", v44);
      }
      uint64_t v16 = [v15 countByEnumeratingWithState:&v61 objects:v75 count:16];
    }
    while (v16);
  }

  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  int v19 = [(HMDHome *)val users];
  __int16 v20 = (void *)[v19 copy];

  uint64_t v21 = [v20 countByEnumeratingWithState:&v57 objects:v74 count:16];
  if (v21)
  {
    uint64_t v22 = *(void *)v58;
    do
    {
      for (uint64_t k = 0; k != v21; ++k)
      {
        if (*(void *)v58 != v22) {
          objc_enumerationMutation(v20);
        }
        __int16 v24 = *(void **)(*((void *)&v57 + 1) + 8 * k);
        objc_msgSend(v24, "removeCloudData", v44);
        [v24 unconfigure];
      }
      uint64_t v21 = [v20 countByEnumeratingWithState:&v57 objects:v74 count:16];
    }
    while (v21);
  }

  __int16 v25 = [(HMDHome *)val residentSyncManager];
  [v25 stop];

  [(HMDHome *)val setResidentSyncManager:0];
  objc_initWeak(&location, val);
  group = dispatch_group_create();
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v26 = [(HMDHome *)val accessories];
  uint64_t v27 = [v26 countByEnumeratingWithState:&v52 objects:v73 count:16];
  if (v27)
  {
    uint64_t v28 = *(void *)v53;
    do
    {
      for (uint64_t m = 0; m != v27; ++m)
      {
        if (*(void *)v53 != v28) {
          objc_enumerationMutation(v26);
        }
        uint64_t v30 = *(void **)(*((void *)&v52 + 1) + 8 * m);
        if (objc_msgSend(v30, "isPrimary", v44))
        {
          __int16 v31 = (void *)MEMORY[0x230FBD990]();
          id v32 = val;
          HMFGetOSLogHandle();
          uint64_t v33 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            id v34 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            long long v70 = v34;
            __int16 v71 = 2112;
            long long v72 = v30;
            _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@Removing primary accessory %@", buf, 0x16u);
          }
          dispatch_group_enter(group);
          aBlock[0] = MEMORY[0x263EF8330];
          aBlock[1] = 3221225472;
          aBlock[2] = __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke;
          aBlock[3] = &unk_264A2B5D8;
          objc_copyWeak(&v51, &location);
          void aBlock[4] = v30;
          uint64_t v50 = group;
          id v35 = _Block_copy(aBlock);
          id v36 = v35;
          if (v46) {
            [(HMDHome *)v32 removeAllUsersAndCloudDataFromAccessory:v30 completionHandler:v35];
          }
          else {
            (*((void (**)(void *))v35 + 2))(v35);
          }

          objc_destroyWeak(&v51);
        }
      }
      uint64_t v27 = [v26 countByEnumeratingWithState:&v52 objects:v73 count:16];
    }
    while (v27);
  }

  [(HMDHome *)val _removeCloudData];
  dispatch_group_notify(group, v44, v45);
  uint64_t v37 = (void *)MEMORY[0x230FBD990]();
  uint64_t v38 = val;
  HMFGetOSLogHandle();
  int v39 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
  {
    uint64_t v40 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v70 = v40;
    _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_INFO, "%{public}@Removed all accessories", buf, 0xCu);
  }
  id v41 = +[HMDHomeLocalOperationalCertificateDataStore localOperationalCertDataStore];
  BOOL v42 = [(HMDHome *)v38 fabric];
  uint64_t v43 = [v42 fabricID];
  [v41 removeOperationalCertDataForFabricID:v43];

  objc_destroyWeak(&location);
}

void __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke(uint64_t a1)
{
  id v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_2;
    v6[3] = &unk_264A2E930;
    objc_copyWeak(&v8, v2);
    BOOL v5 = *(void **)(a1 + 40);
    void v6[4] = *(void *)(a1 + 32);
    id v7 = v5;
    [WeakRetained _removeAccessory:v4 completionHandler:v6];

    objc_destroyWeak(&v8);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
}

void __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = WeakRetained;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    char v11 = HMFGetLogIdentifier();
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543874;
    __int16 v24 = v11;
    __int16 v25 = 2112;
    uint64_t v26 = v12;
    __int16 v27 = 2112;
    id v28 = v6;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Removed primary accessory, %@, with error: %@", buf, 0x20u);
  }
  if (v9)
  {
    uint64_t v13 = [v9 workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_1382;
    block[3] = &unk_264A2E908;
    id v18 = v6;
    id v19 = v9;
    id v14 = v5;
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void **)(a1 + 40);
    id v20 = v14;
    uint64_t v21 = v15;
    id v22 = v16;
    dispatch_async(v13, block);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
}

void __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_1382(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 32))
  {
    id v2 = (void *)MEMORY[0x230FBD990]();
    id v3 = *(id *)(a1 + 40);
    uint64_t v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = HMFGetLogIdentifier();
      uint64_t v6 = *(void *)(a1 + 56);
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138543874;
      id v9 = v5;
      __int16 v10 = 2112;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove accessory %@ with error: %@", (uint8_t *)&v8, 0x20u);
    }
  }
  else
  {
    [*(id *)(a1 + 40) _removeAccessories:*(void *)(a1 + 48) message:0];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

- (void)_removeAccessories:(id)a3 message:(id)a4
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v45 = self;
  uint64_t v8 = [(HMDHome *)self _removeAccessoriesCommon:v6];
  id v9 = [v7 name];
  int v10 = [v9 isEqualToString:@"kRemoveAccessoryRequestKey"];

  BOOL v42 = (void *)v8;
  uint64_t v43 = v7;
  if (v10)
  {
    uint64_t v11 = [MEMORY[0x263EFF9A0] dictionary];
    [v11 setObject:v8 forKeyedSubscript:@"kAccessoriesListKey"];
    __int16 v12 = (void *)[v11 copy];
    [v7 respondWithPayload:v12];
  }
  else
  {
    [v7 respondWithSuccess];
  }
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  obuint64_t j = v6;
  uint64_t v13 = [obj countByEnumeratingWithState:&v46 objects:v56 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v47;
    do
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (*(void *)v47 != v15) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void **)(*((void *)&v46 + 1) + 8 * i);
        id v18 = (void *)MEMORY[0x230FBD990]();
        id v19 = v45;
        id v20 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v21 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          long long v53 = v21;
          __int16 v54 = 2112;
          id v55 = v17;
          _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Removing accessory %@", buf, 0x16u);
        }
        id v22 = v17;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          __int16 v23 = v22;
        }
        else {
          __int16 v23 = 0;
        }
        id v24 = v23;

        if (v24)
        {
          if ([v24 isCurrentAccessory])
          {
            __int16 v25 = (void *)MEMORY[0x230FBD990]();
            uint64_t v26 = v19;
            __int16 v27 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              id v28 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              long long v53 = v28;
              __int16 v54 = 2112;
              id v55 = v22;
              _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Posting notification about current accessory removal %@", buf, 0x16u);
            }
            uint64_t v29 = [(HMDHome *)v26 notificationCenter];
            uint64_t v50 = @"HMDLastRemovedCurrentAccessoryUUIDKey";
            uint64_t v30 = [v24 uuid];
            id v51 = v30;
            __int16 v31 = [NSDictionary dictionaryWithObjects:&v51 forKeys:&v50 count:1];
            [v29 postNotificationName:@"HMDHomeManagerDidRemoveCurrentAccessoryNotification" object:v26 userInfo:v31];
          }
          id v32 = [(HMDHome *)v19 homeManager];
          uint64_t v33 = [(HMDHome *)v19 capabilitiesAggregator];
          id v34 = [v24 uuid];
          [v33 didRemoveAccessory:v34];

          id v35 = [v24 uuid];
          id v36 = [v32 accessorySetupMetricDispatcherForAccessoryUUID:v35];

          [v36 markAccessoryRemoved];
          uint64_t v37 = [(HMDHome *)v19 fetchedAccessorySettingsSubscriber];
          uint64_t v38 = [v24 uuid];
          [v37 unsubscribeForAccessory:v38];

          int v39 = [v32 legacyAccessoryPairingController];

          if (v39)
          {
            uint64_t v40 = [v32 legacyAccessoryPairingController];
            [v40 handleMessage:v43 from:v19];
          }
        }
        if ([v22 isPrimary])
        {
          id v41 = [v22 identifier];
          [(HMDHome *)v19 _deregisterPairedAccessory:v41];
        }
        [v22 setHome:0];
        [v22 unconfigure];
      }
      uint64_t v14 = [obj countByEnumeratingWithState:&v46 objects:v56 count:16];
    }
    while (v14);
  }
}

- (id)_removeAccessoriesCommon:(id)a3
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v4 = a3;
  objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v4, "count"));
  id v28 = (id)objc_claimAutoreleasedReturnValue();
  [(HMDHome *)self _removeAccessoriesFromContainers:v4];
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  obuint64_t j = v4;
  uint64_t v29 = [obj countByEnumeratingWithState:&v34 objects:v41 count:16];
  if (v29)
  {
    uint64_t v27 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v29; ++i)
      {
        if (*(void *)v35 != v27) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        [(HMDHome *)self removeAccessory:v6];
        id v7 = [v6 getConfiguredName];

        if (v7)
        {
          uint64_t v8 = [v6 getConfiguredName];
          id v9 = [(HMDHome *)self removeName:v8];
        }
        id v10 = v6;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        id v12 = v11;

        if (v12)
        {
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          uint64_t v13 = [v12 services];
          uint64_t v14 = [v13 countByEnumeratingWithState:&v30 objects:v40 count:16];
          if (v14)
          {
            uint64_t v15 = v14;
            uint64_t v16 = *(void *)v31;
            do
            {
              for (uint64_t j = 0; j != v15; ++j)
              {
                if (*(void *)v31 != v16) {
                  objc_enumerationMutation(v13);
                }
                id v18 = *(void **)(*((void *)&v30 + 1) + 8 * j);
                id v19 = [v18 getConfiguredName];

                if (v19)
                {
                  id v20 = [v18 getConfiguredName];
                  id v21 = [(HMDHome *)self removeName:v20];
                }
              }
              uint64_t v15 = [v13 countByEnumeratingWithState:&v30 objects:v40 count:16];
            }
            while (v15);
          }
        }
        uint64_t v38 = @"kAccessoryUUID";
        id v22 = [v10 uuid];
        __int16 v23 = [v22 UUIDString];
        int v39 = v23;
        id v24 = [NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];
        [v28 addObject:v24];
      }
      uint64_t v29 = [obj countByEnumeratingWithState:&v34 objects:v41 count:16];
    }
    while (v29);
  }

  return v28;
}

- (void)_removeAccessoriesFromContainers:(id)a3
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([v4 count])
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v73 = v8;
      __int16 v74 = 2112;
      id v75 = v4;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Removing accessories from containers : [%@]", buf, 0x16u);
    }
    id v9 = [(HMDHome *)v6 backingStore];
    id v10 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v11 = [v9 transaction:@"kRemoveAccessoryFromContainersRequestKey" options:v10];

    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    id v42 = v4;
    obuint64_t j = v4;
    uint64_t v12 = [obj countByEnumeratingWithState:&v63 objects:v71 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v44 = *(void *)v64;
      do
      {
        uint64_t v14 = 0;
        do
        {
          if (*(void *)v64 != v44) {
            objc_enumerationMutation(obj);
          }
          id v15 = *(id *)(*((void *)&v63 + 1) + 8 * v14);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          id v17 = v16;

          if (v17)
          {
            long long v61 = 0u;
            long long v62 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            id v18 = [(HMDHome *)v6 serviceGroups];
            id v19 = (void *)[v18 copy];

            uint64_t v20 = [v19 countByEnumeratingWithState:&v59 objects:v70 count:16];
            if (v20)
            {
              uint64_t v21 = v20;
              uint64_t v22 = *(void *)v60;
              do
              {
                uint64_t v23 = 0;
                do
                {
                  if (*(void *)v60 != v22) {
                    objc_enumerationMutation(v19);
                  }
                  objc_msgSend(*(id *)(*((void *)&v59 + 1) + 8 * v23++), "removeServicesForAccessory:", v17, v42);
                }
                while (v21 != v23);
                uint64_t v21 = [v19 countByEnumeratingWithState:&v59 objects:v70 count:16];
              }
              while (v21);
            }
          }
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          id v24 = [(HMDHome *)v6 actionSets];
          __int16 v25 = (void *)[v24 copy];

          uint64_t v26 = [v25 countByEnumeratingWithState:&v55 objects:v69 count:16];
          if (v26)
          {
            uint64_t v27 = v26;
            uint64_t v28 = *(void *)v56;
            do
            {
              uint64_t v29 = 0;
              do
              {
                if (*(void *)v56 != v28) {
                  objc_enumerationMutation(v25);
                }
                [*(id *)(*((void *)&v55 + 1) + 8 * v29++) handleRemovalOfAccessory:v15 transaction:v11];
              }
              while (v27 != v29);
              uint64_t v27 = [v25 countByEnumeratingWithState:&v55 objects:v69 count:16];
            }
            while (v27);
          }

          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v30 = [(HMDHome *)v6 triggerOwnedActionSets];
          long long v31 = (void *)[v30 copy];

          uint64_t v32 = [v31 countByEnumeratingWithState:&v51 objects:v68 count:16];
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = *(void *)v52;
            do
            {
              uint64_t v35 = 0;
              do
              {
                if (*(void *)v52 != v34) {
                  objc_enumerationMutation(v31);
                }
                [*(id *)(*((void *)&v51 + 1) + 8 * v35++) handleRemovalOfAccessory:v15 transaction:v11];
              }
              while (v33 != v35);
              uint64_t v33 = [v31 countByEnumeratingWithState:&v51 objects:v68 count:16];
            }
            while (v33);
          }

          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v36 = [(HMDHome *)v6 triggers];
          uint64_t v37 = [v36 countByEnumeratingWithState:&v47 objects:v67 count:16];
          if (v37)
          {
            uint64_t v38 = v37;
            uint64_t v39 = *(void *)v48;
            do
            {
              uint64_t v40 = 0;
              do
              {
                if (*(void *)v48 != v39) {
                  objc_enumerationMutation(v36);
                }
                [*(id *)(*((void *)&v47 + 1) + 8 * v40++) handleRemovalOfAccessory:v15 transaction:v11];
              }
              while (v38 != v40);
              uint64_t v38 = [v36 countByEnumeratingWithState:&v47 objects:v67 count:16];
            }
            while (v38);
          }

          v45[0] = MEMORY[0x263EF8330];
          v45[1] = 3221225472;
          v45[2] = __44__HMDHome__removeAccessoriesFromContainers___block_invoke;
          v45[3] = &unk_264A2F370;
          v45[4] = v6;
          id v46 = v17;
          id v41 = v17;
          [v11 run:v45];

          ++v14;
        }
        while (v14 != v13);
        uint64_t v13 = [obj countByEnumeratingWithState:&v63 objects:v71 count:16];
      }
      while (v13);
    }

    [(HMDHome *)v6 _evaluateShouldRelaunchAndSetRelaunch];
    id v4 = v42;
  }
}

void __44__HMDHome__removeAccessoriesFromContainers___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      uint64_t v9 = *(void *)(a1 + 40);
      int v15 = 138543874;
      uint64_t v16 = v8;
      __int16 v17 = 2112;
      uint64_t v18 = v9;
      __int16 v19 = 2112;
      id v20 = v3;
      id v10 = "%{public}@Failed to commit removeAccessoriesFromContainersTransaction [%@] with error: %@";
      uint64_t v11 = v7;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 32;
LABEL_6:
      _os_log_impl(&dword_22F52A000, v11, v12, v10, (uint8_t *)&v15, v13);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    uint64_t v14 = *(void *)(a1 + 40);
    int v15 = 138543618;
    uint64_t v16 = v8;
    __int16 v17 = 2112;
    uint64_t v18 = v14;
    id v10 = "%{public}@Successfully finished running removeAccessoriesFromContainersTransaction : %@";
    uint64_t v11 = v7;
    os_log_type_t v12 = OS_LOG_TYPE_INFO;
    uint32_t v13 = 22;
    goto LABEL_6;
  }
}

- (void)_removeService:(id)a3
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self backingStore];
  uint64_t v6 = *MEMORY[0x263F0EAD0];
  id v7 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  uint64_t v8 = [v5 transaction:v6 options:v7];

  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v9 = [(HMDHome *)self serviceGroups];
  id v10 = (void *)[v9 copy];

  uint64_t v11 = [v10 countByEnumeratingWithState:&v56 objects:v65 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v57;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v57 != v13) {
          objc_enumerationMutation(v10);
        }
        [*(id *)(*((void *)&v56 + 1) + 8 * v14++) removeService:v4];
      }
      while (v12 != v14);
      uint64_t v12 = [v10 countByEnumeratingWithState:&v56 objects:v65 count:16];
    }
    while (v12);
  }

  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  int v15 = [(HMDHome *)self actionSets];
  uint64_t v16 = (void *)[v15 copy];

  uint64_t v17 = [v16 countByEnumeratingWithState:&v52 objects:v64 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v53;
    do
    {
      uint64_t v20 = 0;
      do
      {
        if (*(void *)v53 != v19) {
          objc_enumerationMutation(v16);
        }
        [*(id *)(*((void *)&v52 + 1) + 8 * v20++) handleRemovalOfService:v4 transaction:v8];
      }
      while (v18 != v20);
      uint64_t v18 = [v16 countByEnumeratingWithState:&v52 objects:v64 count:16];
    }
    while (v18);
  }

  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v21 = [(HMDHome *)self triggerOwnedActionSets];
  uint64_t v22 = (void *)[v21 copy];

  uint64_t v23 = [v22 countByEnumeratingWithState:&v48 objects:v63 count:16];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)v49;
    do
    {
      uint64_t v26 = 0;
      do
      {
        if (*(void *)v49 != v25) {
          objc_enumerationMutation(v22);
        }
        [*(id *)(*((void *)&v48 + 1) + 8 * v26++) handleRemovalOfService:v4 transaction:v8];
      }
      while (v24 != v26);
      uint64_t v24 = [v22 countByEnumeratingWithState:&v48 objects:v63 count:16];
    }
    while (v24);
  }

  uint64_t v27 = [v4 getConfiguredName];

  if (v27)
  {
    uint64_t v28 = [v4 getConfiguredName];
    id v29 = [(HMDHome *)self removeName:v28];
  }
  long long v47 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v44 = 0u;
  long long v30 = [(HMDHome *)self triggers];
  uint64_t v31 = [v30 countByEnumeratingWithState:&v44 objects:v62 count:16];
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = *(void *)v45;
    do
    {
      uint64_t v34 = 0;
      do
      {
        if (*(void *)v45 != v33) {
          objc_enumerationMutation(v30);
        }
        [*(id *)(*((void *)&v44 + 1) + 8 * v34++) handleRemovalOfService:v4 transaction:v8];
      }
      while (v32 != v34);
      uint64_t v32 = [v30 countByEnumeratingWithState:&v44 objects:v62 count:16];
    }
    while (v32);
  }

  v43[0] = MEMORY[0x263EF8330];
  v43[1] = 3221225472;
  v43[2] = __26__HMDHome__removeService___block_invoke;
  v43[3] = &unk_264A2F3E8;
  void v43[4] = self;
  [v8 run:v43];
  uint64_t v35 = [(HMDHome *)self notificationCenter];
  long long v60 = @"HMDServiceNotificationKey";
  id v61 = v4;
  long long v36 = [NSDictionary dictionaryWithObjects:&v61 forKeys:&v60 count:1];
  [v35 postNotificationName:@"HMDHomeServiceRemovedNotification" object:self userInfo:v36];

  uint64_t v37 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __26__HMDHome__removeService___block_invoke_1381;
  block[3] = &unk_264A2F820;
  void block[4] = self;
  id v38 = v4;
  id v42 = v38;
  dispatch_async(v37, block);

  uint64_t v39 = [v38 bulletinBoardNotification];

  if (v39)
  {
    uint64_t v40 = [(HMDHome *)self accessoryBulletinNotificationManager];
    [v40 handleRemovedService:v38];
  }
}

void __26__HMDHome__removeService___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to commit removeServiceTransaction with error: %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

void __26__HMDHome__removeService___block_invoke_1381(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) notificationRegistry];
  id v2 = [*(id *)(a1 + 40) characteristics];
  [v3 removeRegistrationsForCharacteristics:v2];
}

- (void)handleMobileAssetsUpdatedNotification:(id)a3
{
  id v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __49__HMDHome_handleMobileAssetsUpdatedNotification___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v4, block);
}

void __49__HMDHome_handleMobileAssetsUpdatedNotification___block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v21 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Handling mobile assets updated notification", buf, 0xCu);
  }
  uint64_t v6 = [*(id *)(a1 + 32) accessories];
  id v7 = objc_msgSend(v6, "na_map:", &__block_literal_global_1374);

  if (objc_msgSend(v7, "hmf_isEmpty"))
  {
    int v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = *(id *)(a1 + 32);
    __int16 v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v21 = v11;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@No lock accessories", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v12 = [*(id *)(a1 + 32) matterCapabilitiesFactory];
    uint64_t v13 = v12[2](v12, 0);

    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 3221225472;
    void v17[2] = __49__HMDHome_handleMobileAssetsUpdatedNotification___block_invoke_1375;
    v17[3] = &unk_264A1BDD8;
    id v14 = v7;
    uint64_t v15 = *(void *)(a1 + 32);
    id v18 = v14;
    uint64_t v19 = v15;
    id v16 = (id)[v13 then:v17];
  }
}

uint64_t __49__HMDHome_handleMobileAssetsUpdatedNotification___block_invoke_1375(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v16 = MEMORY[0x263EF8330];
  uint64_t v17 = 3221225472;
  id v18 = __49__HMDHome_handleMobileAssetsUpdatedNotification___block_invoke_2;
  uint64_t v19 = &unk_264A166B8;
  id v5 = v3;
  uint64_t v6 = *(void *)(a1 + 40);
  id v20 = v5;
  uint64_t v21 = v6;
  id v7 = objc_msgSend(v4, "na_map:", &v16);
  if (objc_msgSend(v7, "hmf_isEmpty", v16, v17, v18, v19))
  {
    int v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = *(id *)(a1 + 40);
    __int16 v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v23 = v11;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@No accessories needed updating", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v12 = [*(id *)(a1 + 40) backingStore];
    uint64_t v13 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v14 = [v12 transaction:@"UpdateACWGCertified" options:v13];

    [v14 addObjects:v7];
    [v14 run];
  }
  return 1;
}

id __49__HMDHome_handleMobileAssetsUpdatedNotification___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v3 = a2;
  int v4 = [v3 mfiCertifiedACWG];
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = [v3 matterVendorID];
  uint64_t v7 = (int)[v6 intValue];
  int v8 = [v3 matterProductID];
  uint64_t v9 = objc_msgSend(v5, "isCapabilityAllowed:vendorID:productID:", 0, v7, (int)objc_msgSend(v8, "intValue"));

  __int16 v10 = 0;
  if (v4 != v9)
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = *(id *)(a1 + 40);
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      uint64_t v15 = [v3 shortDescription];
      uint64_t v16 = [v3 matterVendorID];
      int v17 = [v16 intValue];
      [v3 matterProductID];
      id v18 = v21 = v11;
      *(_DWORD *)buf = 138544642;
      uint64_t v23 = v14;
      __int16 v24 = 2114;
      uint64_t v25 = v15;
      __int16 v26 = 1024;
      int v27 = v17;
      __int16 v28 = 1024;
      int v29 = [v18 intValue];
      __int16 v30 = 1024;
      int v31 = v4;
      __int16 v32 = 1024;
      int v33 = v9;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@ECB lock %{public}@ with VID %d, PID %d certified changed, old: %{BOOL}d, new: %{BOOL}d", buf, 0x2Eu);

      id v11 = v21;
    }

    __int16 v10 = [v3 transactionWithObjectChangeType:2];
    uint64_t v19 = [NSNumber numberWithBool:v9];
    [v10 setMfiCertifiedACWG:v19];
  }
  return v10;
}

id __49__HMDHome_handleMobileAssetsUpdatedNotification___block_invoke_1371(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  id v5 = 0;
  if ([v4 supportsACWGProvisioning]) {
    id v5 = v4;
  }

  return v5;
}

- (void)_auditActionSetsAndTriggersForAccessory:(id)a3
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  if ([(HMDHome *)self isCurrentDevicePrimaryResident]
    || ![(HMDHome *)self isResidentSupported])
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      uint64_t v15 = [v4 shortDescription];
      *(_DWORD *)buf = 138543618;
      long long v56 = v14;
      __int16 v57 = 2112;
      long long v58 = v15;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Auditing actions/events for ActionSets and Triggers for accessory %@", buf, 0x16u);
    }
    uint64_t v16 = [(HMDHome *)v12 backingStore];
    int v17 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v18 = [v16 transaction:@"kAuditActionSetsAndTriggersRequestKey" options:v17];

    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    uint64_t v19 = [(HMDHome *)v12 actionSets];
    id v20 = (void *)[v19 copy];

    uint64_t v21 = [v20 countByEnumeratingWithState:&v48 objects:v54 count:16];
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = *(void *)v49;
      do
      {
        uint64_t v24 = 0;
        do
        {
          if (*(void *)v49 != v23) {
            objc_enumerationMutation(v20);
          }
          [*(id *)(*((void *)&v48 + 1) + 8 * v24++) auditActionsForAccessory:v4 transaction:v18];
        }
        while (v22 != v24);
        uint64_t v22 = [v20 countByEnumeratingWithState:&v48 objects:v54 count:16];
      }
      while (v22);
    }

    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    uint64_t v25 = [(HMDHome *)v12 triggerOwnedActionSets];
    __int16 v26 = (void *)[v25 copy];

    uint64_t v27 = [v26 countByEnumeratingWithState:&v44 objects:v53 count:16];
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = *(void *)v45;
      do
      {
        uint64_t v30 = 0;
        do
        {
          if (*(void *)v45 != v29) {
            objc_enumerationMutation(v26);
          }
          [*(id *)(*((void *)&v44 + 1) + 8 * v30++) auditActionsForAccessory:v4 transaction:v18];
        }
        while (v28 != v30);
        uint64_t v28 = [v26 countByEnumeratingWithState:&v44 objects:v53 count:16];
      }
      while (v28);
    }

    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    int v31 = [(HMDHome *)v12 triggers];
    uint64_t v32 = [v31 countByEnumeratingWithState:&v40 objects:v52 count:16];
    if (v32)
    {
      uint64_t v33 = v32;
      uint64_t v34 = *(void *)v41;
      do
      {
        uint64_t v35 = 0;
        do
        {
          if (*(void *)v41 != v34) {
            objc_enumerationMutation(v31);
          }
          id v36 = *(id *)(*((void *)&v40 + 1) + 8 * v35);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v37 = v36;
          }
          else {
            uint64_t v37 = 0;
          }
          id v38 = v37;

          if ([v38 isConfigured]) {
            [v38 auditForStaleEventsWithAccessory:v4 transaction:v18];
          }

          ++v35;
        }
        while (v33 != v35);
        uint64_t v33 = [v31 countByEnumeratingWithState:&v40 objects:v52 count:16];
      }
      while (v33);
    }

    v39[0] = MEMORY[0x263EF8330];
    v39[1] = 3221225472;
    void v39[2] = __51__HMDHome__auditActionSetsAndTriggersForAccessory___block_invoke;
    void v39[3] = &unk_264A2F3E8;
    void v39[4] = v12;
    [v18 run:v39];
  }
  else
  {
    uint64_t v6 = (void *)MEMORY[0x230FBD990]();
    uint64_t v7 = self;
    int v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      __int16 v10 = [v4 shortDescription];
      *(_DWORD *)buf = 138543618;
      long long v56 = v9;
      __int16 v57 = 2112;
      long long v58 = v10;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Skipping audit of actions/events for ActionSets and Triggers for accessory %@ on non-primary resident", buf, 0x16u);
    }
  }
}

void __51__HMDHome__auditActionSetsAndTriggersForAccessory___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to commit auditActionSetsAndTriggersTransaction with error: %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

- (void)checkForCATIDUpdate:(id)a3
{
  id v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __31__HMDHome_checkForCATIDUpdate___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __31__HMDHome_checkForCATIDUpdate___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateCATIDForUsersIfNeeded:0];
}

- (void)handleHomeDataLoaded:(id)a3
{
  id v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __32__HMDHome_handleHomeDataLoaded___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __32__HMDHome_handleHomeDataLoaded___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateCATIDForUsersIfNeeded:0];
}

- (void)_removeAccessoryWithUUID:(id)a3 message:(id)a4
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  objc_initWeak(&location, self);
  int v8 = [(HMDHome *)self accessoryWithUUID:v6];
  if (v8)
  {
    uint64_t v9 = (void *)MEMORY[0x230FBD990]();
    __int16 v10 = self;
    HMFGetOSLogHandle();
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v26 = 2112;
      uint64_t v27 = v8;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Remove accessory name: %@", buf, 0x16u);
    }
    id v13 = v8;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v14 = v13;
    }
    else {
      id v14 = 0;
    }
    id v15 = v14;

    *(void *)buf = 0;
    uint64_t v16 = [v15 preferredHAPAccessoryForOperation:8 linkType:buf];
    int v17 = +[HMDAccessoryPairingEvent removingAccessory:v13 hapAccessory:v16];
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    void v19[2] = __44__HMDHome__removeAccessoryWithUUID_message___block_invoke;
    v19[3] = &unk_264A16690;
    objc_copyWeak(&v23, &location);
    id v20 = v7;
    id v18 = v17;
    id v21 = v18;
    id v22 = v13;
    [(HMDHome *)v10 _removeAccessory:v22 completionHandler:v19];

    objc_destroyWeak(&v23);
  }
  else
  {
    id v15 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v7 respondWithError:v15];
  }

  objc_destroyWeak(&location);
}

void __44__HMDHome__removeAccessoryWithUUID_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  int v8 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v9 = [WeakRetained workQueue];
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    void v12[2] = __44__HMDHome__removeAccessoryWithUUID_message___block_invoke_2;
    v12[3] = &unk_264A28EB0;
    void v12[4] = v8;
    id v13 = a1[5];
    id v14 = v6;
    id v15 = v5;
    id v16 = a1[4];
    id v17 = a1[6];
    dispatch_async(v9, v12);
  }
  else
  {
    id v10 = a1[4];
    id v11 = [MEMORY[0x263F087E8] hmErrorWithCode:52];
    [v10 respondWithError:v11];
  }
}

void __44__HMDHome__removeAccessoryWithUUID_message___block_invoke_2(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) logEventSubmitter];
  [v2 submitLogEvent:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];

  if (*(void *)(a1 + 48))
  {
    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = *(id *)(a1 + 32);
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = HMFGetLogIdentifier();
      id v7 = [*(id *)(a1 + 72) name];
      uint64_t v8 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      uint64_t v12 = v6;
      __int16 v13 = 2112;
      id v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove accessory %@ with error: %@", buf, 0x20u);
    }
    [*(id *)(a1 + 64) respondWithError:*(void *)(a1 + 48)];
  }
  else
  {
    [*(id *)(a1 + 32) _removeAccessories:*(void *)(a1 + 56) message:*(void *)(a1 + 64)];
    [*(id *)(a1 + 32) updateHomeLocation];
    uint64_t v9 = *(void **)(a1 + 32);
    id v10 = [*(id *)(a1 + 64) name];
    objc_msgSend(v9, "saveWithReason:postSyncNotification:");
  }
}

- (void)_removeAccessory:(id)a3 completionHandler:(id)a4
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = (void (**)(id, void, void *))a4;
  if ([v6 isPrimary])
  {
    uint64_t v8 = [(HMDHome *)self removeAccessoryInProgressForHMDAccessories];
    int v9 = [v8 containsObject:v6];

    if (v9)
    {
      id v10 = (void *)MEMORY[0x230FBD990]();
      id v11 = self;
      uint64_t v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        __int16 v13 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v39 = v13;
        __int16 v40 = 2112;
        id v41 = v6;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Already have a remove operation queued for accessory %@", buf, 0x16u);
      }
      v36[0] = *MEMORY[0x263F08320];
      id v14 = NSString;
      __int16 v15 = [v6 name];
      uint64_t v16 = [v6 uuid];
      uint64_t v17 = [v14 stringWithFormat:@"Failed to remove accessory %@(%@)", v15, v16];
      v36[1] = *MEMORY[0x263F08338];
      v37[0] = v17;
      id v18 = NSString;
      uint64_t v19 = [MEMORY[0x263F087E8] hmStringFromErrorCode:15];
      id v20 = [v18 stringWithFormat:@"%ld (%@) This accessory is already being removed from the home.", 15, v19];
      v37[1] = v20;
      id v21 = [NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:2];

      id v22 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:15 userInfo:v21];
      if (v7) {
        v7[2](v7, 0, v22);
      }
    }
    else
    {
      id v27 = v6;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      id v21 = v28;

      uint64_t v29 = [v27 home];
      if ([v29 isAdminUser])
      {
        char v30 = [v21 isPaired];

        if (v30)
        {
          os_unfair_recursive_lock_lock_with_options();
          [(NSHashTable *)self->_removeAccessoryInProgressForHMDAccessories addObject:v21];
          uint64_t v31 = os_unfair_recursive_lock_unlock();
          uint64_t v32 = (void *)MEMORY[0x230FBD990](v31);
          uint64_t v33 = self;
          uint64_t v34 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            uint64_t v35 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            uint64_t v39 = v35;
            __int16 v40 = 2112;
            id v41 = v21;
            _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_INFO, "%{public}@Removing accessory %@. Also added accessory in removal-in-progress array", buf, 0x16u);
          }
          [(HMDHome *)v33 _removeAccessoriesForPrimaryAccessory:v21 error:0 completionHandler:v7];
          goto LABEL_22;
        }
      }
      else
      {
      }
      [(HMDHome *)self _removeAccessoriesForPrimaryAccessory:v27 error:0 completionHandler:v7];
    }
LABEL_22:

    goto LABEL_23;
  }
  id v23 = (void *)MEMORY[0x230FBD990]();
  uint64_t v24 = self;
  uint64_t v25 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    __int16 v26 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v39 = v26;
    __int16 v40 = 2112;
    id v41 = v6;
    _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_ERROR, "%{public}@cannot remove non-primary accessory %@", buf, 0x16u);
  }
  if (v7)
  {
    id v21 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:34 userInfo:0];
    v7[2](v7, 0, v21);
    goto LABEL_22;
  }
LABEL_23:
}

- (void)removeAccessory:(id)a3 completionHandler:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __45__HMDHome_removeAccessory_completionHandler___block_invoke;
  block[3] = &unk_264A2EE80;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t __45__HMDHome_removeAccessory_completionHandler___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeAccessory:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

- (void)_removeAccessoriesForPrimaryAccessory:(id)a3 error:(id)a4 completionHandler:(id)a5
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (!v8)
  {
    long long v54 = (void *)MEMORY[0x230FBD990]();
    long long v55 = self;
    long long v56 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      __int16 v57 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v79 = v57;
      _os_log_impl(&dword_22F52A000, v56, OS_LOG_TYPE_ERROR, "%{public}@Nil accessory was passed to remove it from the home.", buf, 0xCu);
    }
    long long v58 = (void *)MEMORY[0x263F087E8];
    uint64_t v59 = *MEMORY[0x263F0C710];
    uint64_t v60 = 20;
    goto LABEL_50;
  }
  long long v69 = self;
  if (([v8 isPrimary] & 1) == 0)
  {
    id v61 = (void *)MEMORY[0x230FBD990]();
    long long v55 = self;
    long long v62 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      long long v63 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v79 = v63;
      __int16 v80 = 2112;
      id v81 = v8;
      _os_log_impl(&dword_22F52A000, v62, OS_LOG_TYPE_ERROR, "%{public}@Accessory is not primary (Bridged). Not moving further. [%@]", buf, 0x16u);
    }
    long long v58 = (void *)MEMORY[0x263F087E8];
    uint64_t v59 = *MEMORY[0x263F0C710];
    uint64_t v60 = 34;
LABEL_50:
    id v11 = [v58 errorWithDomain:v59 code:v60 userInfo:0];
    [(HMDHome *)v55 _sendRemoveCompletionStatusForHMDAccessories:0 withCompletion:v10 error:v11];
    goto LABEL_51;
  }
  id v11 = [MEMORY[0x263EFF980] array];
  id v12 = self;
  [(HMDHome *)self removeAccessory:v8];
  [v11 addObject:v8];
  id v13 = +[HMDBulletinBoard sharedBulletinBoard];
  [v13 removeBulletinsForAccessory:v8];

  id v14 = v8;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = 0;
  }
  id v70 = v16;

  if (isKindOfClass)
  {
    long long v65 = v14;
    id v66 = v10;
    id v67 = v9;
    long long v68 = v11;
    id v64 = v8;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    uint64_t v17 = [(HMDHome *)v69 accessories];
    uint64_t v18 = [v17 countByEnumeratingWithState:&v74 objects:v84 count:16];
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)v75;
      do
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          if (*(void *)v75 != v20) {
            objc_enumerationMutation(v17);
          }
          id v22 = *(id *)(*((void *)&v74 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v23 = v22;
          }
          else {
            id v23 = 0;
          }
          id v24 = v23;

          uint64_t v25 = [v24 identifier];
          __int16 v26 = [v70 identifier];
          if (([v25 isEqualToString:v26] & 1) == 0)
          {

            goto LABEL_20;
          }
          id v27 = [v24 hostAccessory];
          objc_opt_class();
          char v28 = objc_opt_isKindOfClass();

          if ((v28 & 1) == 0 || !v27)
          {
            [(HMDHome *)v69 removeAccessory:v22];
            [v68 addObject:v22];
            uint64_t v25 = +[HMDBulletinBoard sharedBulletinBoard];
            [v25 removeBulletinsForAccessory:v22];
LABEL_20:
          }
        }
        uint64_t v19 = [v17 countByEnumeratingWithState:&v74 objects:v84 count:16];
      }
      while (v19);
    }

    id v14 = v65;
    int v29 = [v65 isReachable];
    id v8 = v64;
    id v10 = v66;
    id v9 = v67;
    id v11 = v68;
    id v12 = v69;
    if (v67
      || !v29
      || ([v65 home],
          char v30 = objc_claimAutoreleasedReturnValue(),
          char v31 = [v30 isAdminUser],
          v30,
          (v31 & 1) == 0))
    {
      uint64_t v32 = [(HMDHome *)v69 keychainStore];
      uint64_t v33 = [v70 identifier];
      id v73 = 0;
      [v32 removeAccessoryKeyForName:v33 error:&v73];
      id v34 = v73;

      if (v34)
      {
        uint64_t v35 = (void *)MEMORY[0x230FBD990]();
        id v36 = v69;
        uint64_t v37 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          id v38 = HMFGetLogIdentifier();
          uint64_t v39 = [v65 name];
          __int16 v40 = [v70 identifier];
          *(_DWORD *)buf = 138543874;
          long long v79 = v38;
          __int16 v80 = 2112;
          id v81 = v39;
          __int16 v82 = 2112;
          id v83 = v40;
          _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove keychain entry for accessory %@ with identifier: %@", buf, 0x20u);

          id v11 = v68;
          id v14 = v65;
        }
        id v10 = v66;
        id v9 = v67;
      }
    }
    id v41 = [v70 identifier];
    [(HMDHome *)v69 _deregisterPairedAccessory:v41];
  }
  id v42 = v14;
  objc_opt_class();
  char v43 = objc_opt_isKindOfClass();
  if (v43) {
    long long v44 = v42;
  }
  else {
    long long v44 = 0;
  }
  id v45 = v44;

  if (v43)
  {
    long long v46 = [v42 mediaProfile];
    if (v46)
    {
      long long v47 = [(HMDHome *)v12 workQueue];
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = __73__HMDHome__removeAccessoriesForPrimaryAccessory_error_completionHandler___block_invoke;
      block[3] = &unk_264A2F820;
      void block[4] = v12;
      id v72 = v46;
      dispatch_async(v47, block);

      long long v48 = [v42 identifier];
      long long v49 = [(HMDHome *)v12 mediaSessionStateWithIdentifier:v48];

      if (v49) {
        [(HMDHome *)v12 removeMediaSessionState:v49];
      }
    }
  }
  long long v50 = (void *)MEMORY[0x230FBD990]();
  long long v51 = v12;
  long long v52 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
  {
    long long v53 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v79 = v53;
    __int16 v80 = 2112;
    id v81 = v11;
    _os_log_impl(&dword_22F52A000, v52, OS_LOG_TYPE_INFO, "%{public}@removedAccessories %@", buf, 0x16u);
  }
  [(HMDHome *)v51 _sendRemoveCompletionStatusForHMDAccessories:v11 withCompletion:v10 error:0];

LABEL_51:
}

void __73__HMDHome__removeAccessoriesForPrimaryAccessory_error_completionHandler___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) notificationRegistry];
  [v2 removeRegistrationsForMediaProfile:*(void *)(a1 + 40)];
}

- (void)_sendRemoveCompletionStatusForHMDAccessories:(id)a3 withCompletion:(id)a4 error:(id)a5
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v27 = (void (**)(id, id, id))a4;
  id v28 = a5;
  id v9 = (void *)MEMORY[0x230FBD990]();
  id v10 = self;
  id v11 = HMFGetOSLogHandle();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
  if (v27)
  {
    if (v12)
    {
      id v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      id v36 = v13;
      __int16 v37 = 2112;
      id v38 = v28;
      __int16 v39 = 2112;
      id v40 = v8;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending removal completion with error %@, accessories %@", buf, 0x20u);
    }
    v27[2](v27, v8, v28);
  }
  else
  {
    if (v12)
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v36 = v14;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@sending removal completion for accessory removal: no completion found", buf, 0xCu);
    }
  }
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  obuint64_t j = v8;
  uint64_t v15 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v31;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v31 != v16) {
          objc_enumerationMutation(obj);
        }
        uint64_t v18 = *(void **)(*((void *)&v30 + 1) + 8 * v17);
        os_unfair_recursive_lock_lock_with_options();
        [(NSHashTable *)v10->_removeAccessoryInProgressForHMDAccessories removeObject:v18];
        os_unfair_recursive_lock_unlock();
        id v19 = v18;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = 0;
        }
        id v21 = v20;

        if (v21 && [v19 isPrimary])
        {
          id v22 = [v21 getPrimaryHAPAccessories];
          id v23 = [v22 firstObject];
          id v24 = [v23 server];

          uint64_t v25 = [(HMDHome *)v10 accessoryBrowser];
          __int16 v26 = [v21 identifier];
          [v25 addUnpairedAccessoryServer:v24 identifier:v26];
        }
        ++v17;
      }
      while (v15 != v17);
      uint64_t v15 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
    }
    while (v15);
  }

  if ([obj count]) {
    [(HMDHome *)v10 _reevaluateAccessoryInfoWithBadgeRefresh:1];
  }
}

- (void)_notifyClientOfNewlyAddedAccessories:(id)a3 requestMessage:(id)a4
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v57 = a4;
  long long v58 = [MEMORY[0x263EFF980] array];
  uint64_t v59 = [MEMORY[0x263EFF980] array];
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  obuint64_t j = v6;
  uint64_t v7 = [obj countByEnumeratingWithState:&v63 objects:v75 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v64;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v64 != v9) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v63 + 1) + 8 * i);
        BOOL v12 = accessoryToEncodeForXPCTransportForAccessory(v11);
        if (v12 == v11)
        {
          v69[0] = @"kAccessoryUUID";
          uint64_t v17 = [v11 uuid];
          v69[1] = @"kAccessoryDataKey";
          v70[0] = v17;
          uint64_t v18 = encodeRootObjectForSPIClients(v11);
          v70[1] = v18;
          id v19 = [NSDictionary dictionaryWithObjects:v70 forKeys:v69 count:2];

          uint64_t v20 = (void *)[v19 copy];
          [v59 addObject:v20];

          id v21 = v11;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v22 = v21;
          }
          else {
            id v22 = 0;
          }
          id v23 = v22;

          id v24 = v21;
          objc_opt_class();
          unsigned __int8 isKindOfClass = objc_opt_isKindOfClass();

          if (v23 || (isKindOfClass & (v24 != 0)) != 0) {
            [v58 addObject:v19];
          }
        }
        else
        {
          id v13 = (void *)MEMORY[0x230FBD990]();
          id v14 = self;
          uint64_t v15 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            uint64_t v16 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            id v72 = v16;
            __int16 v73 = 2112;
            long long v74 = v11;
            _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Skipping notifying clients of added accessory: %@", buf, 0x16u);
          }
        }
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v63 objects:v75 count:16];
    }
    while (v8);
  }

  id v67 = @"kHomeUUID";
  __int16 v26 = [(HMDHome *)self uuid];
  long long v68 = v26;
  id v27 = [NSDictionary dictionaryWithObjects:&v68 forKeys:&v67 count:1];

  uint64_t v28 = [v58 count];
  int v29 = (uint64_t *)MEMORY[0x263F0C760];
  if (v28)
  {
    long long v30 = (void *)[v27 mutableCopy];
    long long v31 = (void *)[v58 copy];
    [v30 setObject:v31 forKeyedSubscript:@"kAccessoriesListKey"];

    long long v32 = (void *)MEMORY[0x230FBD990]();
    long long v33 = self;
    id v34 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      uint64_t v35 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v72 = v35;
      __int16 v73 = 2112;
      long long v74 = v30;
      _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_INFO, "%{public}@Notifying non-SPI-entitled clients of added accessories using payload: %@", buf, 0x16u);
    }
    id v36 = [MEMORY[0x263F42590] nonSPIEntitledMessageWithName:*v29 messagePayload:v30];
    __int16 v37 = [v57 identifier];
    [v36 setIdentifier:v37];

    id v38 = [(HMDHome *)v33 msgDispatcher];
    __int16 v39 = [(HMDHome *)v33 uuid];
    [v38 sendMessage:v36 target:v39];
  }
  else
  {
    id v40 = (void *)MEMORY[0x230FBD990]();
    uint64_t v41 = self;
    id v42 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      char v43 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v72 = v43;
      _os_log_impl(&dword_22F52A000, v42, OS_LOG_TYPE_INFO, "%{public}@Not notifying non-SPI-entitled clients of empty list of added accessories", buf, 0xCu);
    }
  }
  long long v44 = (void *)[v27 mutableCopy];
  id v45 = (void *)[v59 copy];
  [v44 setObject:v45 forKeyedSubscript:@"kAccessoriesListKey"];

  long long v46 = (void *)MEMORY[0x230FBD990]();
  long long v47 = self;
  long long v48 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
  {
    long long v49 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v72 = v49;
    __int16 v73 = 2112;
    long long v74 = v44;
    _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_INFO, "%{public}@Notifying SPI-entitled clients of added accessories using payload: %@", buf, 0x16u);
  }
  long long v50 = (void *)MEMORY[0x263F42590];
  uint64_t v51 = *v29;
  long long v52 = [v57 identifier];
  long long v53 = [v50 entitledMessageWithName:v51 identifier:v52 messagePayload:v44];

  long long v54 = [(HMDHome *)v47 msgDispatcher];
  long long v55 = [(HMDHome *)v47 uuid];
  v61[0] = MEMORY[0x263EF8330];
  v61[1] = 3221225472;
  void v61[2] = __63__HMDHome__notifyClientOfNewlyAddedAccessories_requestMessage___block_invoke;
  v61[3] = &unk_264A2F7F8;
  id v62 = v57;
  id v56 = v57;
  [v54 sendMessage:v53 target:v55 andInvokeCompletionHandler:v61];
}

uint64_t __63__HMDHome__notifyClientOfNewlyAddedAccessories_requestMessage___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) respondWithPayload:0];
}

- (BOOL)_addOwnerToPrimaryAccessory:(id)a3 error:(id *)a4
{
  return 1;
}

- (void)_deregisterPairedAccessory:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self accessoryBrowser];
  [v5 deregisterPairedAccessory:v4];
}

- (void)_registerPairedAccessory:(id)a3 transports:(unint64_t)a4 setupHash:(id)a5
{
  id v8 = a5;
  id v9 = a3;
  id v10 = [(HMDHome *)self accessoryBrowser];
  [v10 registerPairedAccessory:v9 transports:a4 setupHash:v8 delegate:self];
}

- (id)hapAccessoryUniqueIdentifiers
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v2 = [(HMDHome *)self accessories];
  id v3 = objc_msgSend(MEMORY[0x263EFF9C0], "setWithCapacity:", objc_msgSend(v2, "count"));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = v2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(id *)(*((void *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v10 = v9;
        }
        else {
          id v10 = 0;
        }
        id v11 = v10;

        if (v11)
        {
          BOOL v12 = objc_msgSend(v11, "uniqueIdentifier", (void)v15);
          [v3 addObject:v12];
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  id v13 = (void *)[v3 copy];
  return v13;
}

- (id)hapAccessoryServerIdentifiers
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v2 = [(HMDHome *)self accessories];
  id v3 = objc_msgSend(MEMORY[0x263EFF9C0], "setWithCapacity:", objc_msgSend(v2, "count"));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = v2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(id *)(*((void *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v10 = v9;
        }
        else {
          id v10 = 0;
        }
        id v11 = v10;

        if (v11 && objc_msgSend(v11, "isPrimary", (void)v15))
        {
          BOOL v12 = [v11 identifier];
          [v3 addObject:v12];
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  id v13 = (void *)[v3 copy];
  return v13;
}

- (unint64_t)accessoryCountForRoom:(id)a3
{
  id v4 = [MEMORY[0x263F08A98] predicateWithFormat:@"room == %@", a3];
  uint64_t v5 = [(HMDHome *)self accessories];
  uint64_t v6 = [v5 filteredArrayUsingPredicate:v4];

  unint64_t v7 = [v6 count];
  return v7;
}

- (void)scheduleRemoval
{
  id v4 = [(HMDHome *)self homeManager];
  id v3 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  [v4 scheduleRemovalForHome:self message:0 options:v3];
}

- (id)hmdHAPAccessoryWithHAPAccessory:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v5 = [(HMDHome *)self accessories];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v15;
LABEL_3:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v15 != v8) {
        objc_enumerationMutation(v5);
      }
      id v10 = *(id *)(*((void *)&v14 + 1) + 8 * v9);
      objc_opt_class();
      id v11 = (objc_opt_isKindOfClass() & 1) != 0 ? v10 : 0;
      id v12 = v11;

      if ([v12 matchesHAPAccessory:v4]) {
        break;
      }

      if (v7 == ++v9)
      {
        uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v7) {
          goto LABEL_3;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    id v12 = 0;
  }

  return v12;
}

- (id)hapAccessoryWithIdentifier:(id)a3 instanceID:(id)a4
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v8 = [(HMDHome *)self accessories];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v23 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        long long v14 = [v13 identifier];
        int v15 = [v14 isEqualToString:v6];

        if (v15)
        {
          id v16 = v13;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            long long v17 = v16;
          }
          else {
            long long v17 = 0;
          }
          id v18 = v17;

          if (v18)
          {
            if (!v7) {
              goto LABEL_17;
            }
            uint64_t v19 = [v18 hapInstanceId];
            char v20 = [v19 isEqualToNumber:v7];

            if (v20) {
              goto LABEL_17;
            }
          }
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v10);
  }
  id v16 = 0;
LABEL_17:

  return v16;
}

- (id)hapAccessoryWithIdentifier:(id)a3
{
  id v3 = [(HMDHome *)self accessoryWithIdentifier:a3];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  return v5;
}

- (id)accessoryWithIdentifier:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = [(HMDHome *)self accessories];
  id v6 = (id)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v10 = [v9 identifier];
        if ([v10 isEqualToString:v4])
        {
          char v11 = [v9 isPrimary];

          if (v11)
          {
            id v6 = v9;
            goto LABEL_12;
          }
        }
        else
        {
        }
      }
      id v6 = (id)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }
LABEL_12:

  return v6;
}

- (void)_removeWithMergeSecondaryAccessory:(id)a3 removedFromBridgeAccessory:(id)a4 completionHandler:(id)a5
{
  v12[1] = *MEMORY[0x263EF8340];
  id v8 = a3;
  uint64_t v9 = (void (**)(id, void *, void))a5;
  [a4 removeHostedAccessory:v8];
  [(HMDHome *)self removeAccessory:v8];
  uint64_t v10 = +[HMDBulletinBoard sharedBulletinBoard];
  [v10 removeBulletinsForAccessory:v8];

  [(HMDHome *)self _reevaluateAccessoryInfoWithBadgeRefresh:1];
  if (v9)
  {
    v12[0] = v8;
    char v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:v12 count:1];
    v9[2](v9, v11, 0);
  }
}

- (void)removeWithMergeSecondaryAccessory:(id)a3 removedFromBridgeAccessory:(id)a4 completionHandler:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  char v11 = [(HMDHome *)self workQueue];
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  v15[2] = __90__HMDHome_removeWithMergeSecondaryAccessory_removedFromBridgeAccessory_completionHandler___block_invoke;
  v15[3] = &unk_264A2EE30;
  void v15[4] = self;
  id v16 = v8;
  id v17 = v9;
  id v18 = v10;
  id v12 = v10;
  id v13 = v9;
  id v14 = v8;
  dispatch_async(v11, v15);
}

uint64_t __90__HMDHome_removeWithMergeSecondaryAccessory_removedFromBridgeAccessory_completionHandler___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeWithMergeSecondaryAccessory:*(void *)(a1 + 40) removedFromBridgeAccessory:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

- (void)notifyOfNewlyAddedAccessoryByThisOwnerDevice:(id)a3
{
  v16[1] = *MEMORY[0x263EF8340];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;
  if (v6)
  {
    uint64_t v7 = v6;
    BOOL v8 = [(HMDHome *)self isOwnerUser];

    if (!v8) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  id v9 = v4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v10 = v9;
  }
  else {
    id v10 = 0;
  }
  id v11 = v10;

  if (v11)
  {
    BOOL v12 = [(HMDHome *)self isOwnerUser];

    if (v12)
    {
LABEL_12:
      id v13 = [(HMDHome *)self notificationCenter];
      long long v15 = @"HMDAccessoryNotificationKey";
      v16[0] = v4;
      id v14 = [NSDictionary dictionaryWithObjects:v16 forKeys:&v15 count:1];
      [v13 postNotificationName:@"HMDHomeThisOwnerDeviceAddedAccessoryNotification" object:self userInfo:v14];
    }
  }
LABEL_13:
}

- (void)notifyOfAddedAccessory:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __34__HMDHome_notifyOfAddedAccessory___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __34__HMDHome_notifyOfAddedAccessory___block_invoke(uint64_t a1)
{
  v5[1] = *MEMORY[0x263EF8340];
  id v2 = *(void **)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  id v4 = @"HMDNotificationAddedAccessoryKey";
  v5[0] = v1;
  id v3 = [NSDictionary dictionaryWithObjects:v5 forKeys:&v4 count:1];
  logAndPostNotification(@"HMDNotificationHomeAddedAccessory", v2, v3);
}

- (void)notifyOfRemovedAccessory:(id)a3 source:(unint64_t)a4
{
  id v6 = a3;
  uint64_t v7 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __43__HMDHome_notifyOfRemovedAccessory_source___block_invoke;
  block[3] = &unk_264A2E458;
  void block[4] = self;
  id v10 = v6;
  unint64_t v11 = a4;
  id v8 = v6;
  dispatch_async(v7, block);
}

void __43__HMDHome_notifyOfRemovedAccessory_source___block_invoke(uint64_t a1)
{
  void v8[2] = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) notificationCenter];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v7[1] = @"HMDNotificationSourceKey";
  v8[0] = v3;
  v7[0] = @"HMDAccessoryNotificationKey";
  id v5 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 48)];
  v8[1] = v5;
  id v6 = [NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:2];
  [v2 postNotificationName:@"HMDHomeAccessoryRemovedNotification" object:v4 userInfo:v6];
}

- (void)_handleRemoveAccessoryModel:(id)a3 message:(id)a4
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 uuid];

  if (v8)
  {
    id v9 = [v7 transactionResult];
    id v10 = [v6 uuid];
    unint64_t v11 = [(HMDHome *)self accessoryWithUUID:v10];

    BOOL v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      long long v15 = HMFGetLogIdentifier();
      id v16 = [v6 debugString:1];
      *(_DWORD *)buf = 138543618;
      long long v63 = v15;
      __int16 v64 = 2112;
      long long v65 = v16;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Going to remove accessory : %@", buf, 0x16u);
    }
    id v17 = v11;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v18 = v17;
    }
    else {
      id v18 = 0;
    }
    id v19 = v18;

    if (v17)
    {
      if (isInternalBuild() && ([v17 shouldProcessTransactionRemoval] & 1) == 0)
      {
        long long v50 = (void *)MEMORY[0x230FBD990]();
        uint64_t v51 = v13;
        long long v52 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          long long v54 = v53 = v19;
          *(_DWORD *)buf = 138543362;
          long long v63 = v54;
          _os_log_impl(&dword_22F52A000, v52, OS_LOG_TYPE_ERROR, "%{public}@Failed to process transaction removal due to internal flag set to simulate this failure", buf, 0xCu);

          id v19 = v53;
        }

        [v7 respondWithSuccess];
        goto LABEL_30;
      }
      if ([v17 isPrimary])
      {
        id v57 = v19;
        id v20 = v17;
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();
        if (isKindOfClass) {
          long long v22 = v20;
        }
        else {
          long long v22 = 0;
        }
        id v56 = v22;

        if (isKindOfClass)
        {
          long long v23 = [(HMDHome *)v13 mediaStateSubscriber];
          [v23 unsubscribeForAppleMediaStateForAccessory:v20 subscriptionToken:@"HMDHomeClientMediaStateRegistrationToken"];

          long long v24 = [(HMDHome *)v13 mediaStateSubscriber];
          [v24 localUnsubscribeForAppleMediaStateForAccessory:v20];
        }
        uint64_t v25 = [(HMDHome *)v13 selfRemovalWatchdog];
        if (!v25) {
          goto LABEL_21;
        }
        __int16 v26 = (void *)v25;
        [v20 uuid];
        uint64_t v27 = v55 = v9;
        uint64_t v28 = [(HMDHome *)v13 selfRemovalWatchdog];
        int v29 = [v28 currentAccessoryUUID];
        int v30 = objc_msgSend(v27, "hmf_isEqualToUUID:", v29);

        id v9 = v55;
        if (v30)
        {
          long long v31 = [(HMDHome *)v13 selfRemovalWatchdog];
          v58[0] = MEMORY[0x263EF8330];
          v58[1] = 3221225472;
          v58[2] = __47__HMDHome__handleRemoveAccessoryModel_message___block_invoke;
          void v58[3] = &unk_264A2E210;
          void v58[4] = v13;
          id v59 = v6;
          id v60 = v7;
          [v31 startWithCompletion:v58];
        }
        else
        {
LABEL_21:
          id v36 = [v6 uuid];
          [(HMDHome *)v13 _removeAccessoryWithUUID:v36 message:v7];
        }
        __int16 v37 = [(HMDHome *)v13 networkProtectionGroupRegistry];
        [v37 handleRemovedAccessory:v20];

        id v38 = [v20 uuid];
        __int16 v39 = [(HMDHome *)v13 activeNetworkRouterUUID];
        int v40 = [v38 isEqual:v39];

        id v19 = v57;
        if (v40) {
          [(HMDHome *)v13 _evaluateNetworkRouterManagementForTransaction:v9];
        }
        id v34 = v56;
      }
      else
      {
        id v34 = [v19 bridge];
        [v34 removeHostedAccessory:v17];
        [(HMDHome *)v13 removeAccessory:v17];
        id v61 = v17;
        uint64_t v35 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v61 count:1];
        [(HMDHome *)v13 _removeAccessories:v35 message:0];
      }
      uint64_t v41 = [v7 transactionResult];
      -[HMDHome notifyOfRemovedAccessory:source:](v13, "notifyOfRemovedAccessory:source:", v17, [v41 source]);
      id v42 = [(HMDHome *)v13 homeManager];
      if ([v19 isPrimary])
      {
        char v43 = [v19 matterNodeID];
        int v44 = [v43 unsignedIntValue];

        if (v44)
        {
          id v45 = [v42 accessoryBrowser];
          long long v46 = [v45 chipAccessoryServerBrowser];
          long long v47 = [v19 matterNodeID];
          [v46 handleHomeRemovedAccessoryWithNodeID:v47];
        }
      }
      long long v48 = [v42 lastEventStoreController];
      long long v49 = [v17 uuid];
      [v48 didRemoveAccessory:v49];
    }
    [v9 markChanged];
    [v9 markSaveToAssistant];
LABEL_30:

    goto LABEL_31;
  }
  long long v32 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:3 userInfo:0];
  long long v33 = [v7 responseHandler];
  ((void (**)(void, void *, void))v33)[2](v33, v32, 0);

LABEL_31:
}

void __47__HMDHome__handleRemoveAccessoryModel_message___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __47__HMDHome__handleRemoveAccessoryModel_message___block_invoke_2;
  block[3] = &unk_264A2F2F8;
  uint64_t v3 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v5 = v3;
  id v6 = *(id *)(a1 + 48);
  dispatch_async(v2, block);
}

void __47__HMDHome__handleRemoveAccessoryModel_message___block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) setSelfRemovalWatchdog:0];
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) uuid];
  [v2 _removeAccessoryWithUUID:v3 message:*(void *)(a1 + 48)];
}

- (void)_submitRemovalLogEventForAccessory:(id)a3 isLocalRemoval:(BOOL)a4 isLocalFallback:(BOOL)a5 isDuplicate:(BOOL)a6 duplicateCount:(int64_t)a7 error:(id)a8
{
  BOOL v10 = a6;
  BOOL v11 = a5;
  BOOL v12 = a4;
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a8;
  id v16 = v14;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v17 = v16;
  }
  else {
    id v17 = 0;
  }
  id v18 = v17;

  if (v18 && [v18 isHomePod])
  {
    id v19 = [[HMDAppleMediaAccessoryRemovalLogEvent alloc] initWithIsLocalRemoval:v12 isLocalFallback:v11 isDuplicate:v10 duplicateCount:a7];
    id v20 = (void *)MEMORY[0x230FBD990]();
    id v21 = self;
    long long v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      long long v23 = HMFGetLogIdentifier();
      long long v24 = [(HMDAppleMediaAccessoryRemovalLogEvent *)v19 coreAnalyticsEventDictionary];
      int v26 = 138543874;
      uint64_t v27 = v23;
      __int16 v28 = 2112;
      int v29 = v24;
      __int16 v30 = 2112;
      id v31 = v15;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Submitting apple media accessory removal log event: %@ error: %@", (uint8_t *)&v26, 0x20u);
    }
    uint64_t v25 = [(HMDHome *)v21 logEventSubmitter];
    [v25 submitLogEvent:v19 error:v15];
  }
}

- (void)_handleRemoveAccessoryAfterUserConsent:(id)a3 message:(id)a4
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  if ([(HMDHome *)self isAdminUser])
  {
    id v8 = [(HMDHome *)self administratorHandler];
    if ([v8 shouldRelayMessages]
      && (!isFeatureMatteriPhoneOnlyPairingControlEnabled()
       || [(HMDHome *)self hasAnyResident]))
    {
      id v9 = (void *)MEMORY[0x230FBD990]();
      BOOL v10 = self;
      BOOL v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        BOOL v12 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v34 = v12;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending remove accessory request to owner / primary resident", buf, 0xCu);
      }
      id v13 = (void *)[v7 mutableCopy];
      v30[0] = MEMORY[0x263EF8330];
      v30[1] = 3221225472;
      void v30[2] = __58__HMDHome__handleRemoveAccessoryAfterUserConsent_message___block_invoke;
      v30[3] = &unk_264A2AEE8;
      void v30[4] = v10;
      id v31 = v6;
      id v32 = v7;
      [v13 setResponseHandler:v30];
      id v7 = (id)[v13 copy];
      id v29 = 0;
      id v14 = [v8 operationForMessage:v7 error:&v29];
      id v15 = v29;
      if (v14)
      {
        [v8 addOperation:v14];
      }
      else
      {
        long long v24 = (void *)MEMORY[0x230FBD990]();
        uint64_t v25 = v10;
        int v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v34 = v27;
          __int16 v35 = 2112;
          id v36 = v15;
          _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_ERROR, "%{public}@Failed to create home administrator configuration operation for accessory removal: %@", buf, 0x16u);
        }
        __int16 v28 = [MEMORY[0x263F087E8] hmErrorWithCode:52];
        [v7 respondWithError:v28];
      }
    }
    else
    {
      id v20 = (void *)MEMORY[0x230FBD990]();
      id v21 = self;
      long long v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        long long v23 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v34 = v23;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Removing accessory locally", buf, 0xCu);
      }
      -[HMDHome __removeAccessory:isBeingReplaced:isForceUpdate:message:](v21, v6, 0, 0, v7);
      [(HMDHome *)v21 _submitRemovalLogEventForAccessory:v6 isLocalRemoval:1 isLocalFallback:0 isDuplicate:0 duplicateCount:0 error:0];
    }
  }
  else
  {
    id v16 = (void *)MEMORY[0x230FBD990]();
    id v17 = self;
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      id v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v34 = v19;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Not removing accessory due to insufficient privileges", buf, 0xCu);
    }
    id v8 = [MEMORY[0x263F087E8] hmErrorWithCode:17];
    [v7 respondWithError:v8];
  }
}

- (void)__removeAccessory:(char)a3 isBeingReplaced:(int)a4 isForceUpdate:(void *)a5 message:
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  id v8 = a2;
  id v9 = a5;
  BOOL v10 = v9;
  int v44 = a1;
  if (a1)
  {
    if (a4)
    {
      BOOL v11 = [v9 untrustedClientIdentifier];
      uint64_t v12 = +[HMDBackingStoreTransactionOptions defaultXPCOptionsWithCDTransactionAuthor:10 clientIdentifier:v11];
    }
    else
    {
      uint64_t v12 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    }
    id v13 = [a1 backingStore];
    id v14 = [v10 name];
    uint64_t v37 = (void *)v12;
    id v45 = [v13 transaction:v14 options:v12];

    id v39 = v8;
    id v15 = [MEMORY[0x263EFF980] arrayWithObject:v8];
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v58 objects:v63 count:16];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = *(void *)v59;
      do
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v59 != v18) {
            objc_enumerationMutation(v15);
          }
          id v20 = [*(id *)(*((void *)&v58 + 1) + 8 * i) transactionWithObjectChangeType:3];
          [v45 add:v20 withMessage:v10];
        }
        uint64_t v17 = [v15 countByEnumeratingWithState:&v58 objects:v63 count:16];
      }
      while (v17);
    }
    id v38 = v10;
    group = dispatch_group_create();
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    obuint64_t j = v15;
    uint64_t v21 = [obj countByEnumeratingWithState:&v54 objects:v62 count:16];
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = *(void *)v55;
      do
      {
        uint64_t v24 = 0;
        uint64_t v40 = v22;
        do
        {
          if (*(void *)v55 != v23) {
            objc_enumerationMutation(obj);
          }
          uint64_t v25 = *(void **)(*((void *)&v54 + 1) + 8 * v24);
          dispatch_group_enter(group);
          v48[0] = MEMORY[0x263EF8330];
          v48[1] = 3221225472;
          int v26 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke;
          long long v49 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke;
          long long v50 = &unk_264A2F2F8;
          uint64_t v51 = v44;
          long long v52 = v25;
          id v53 = group;
          id v27 = v44;
          id v28 = v25;
          id v29 = v45;
          __int16 v30 = v48;
          if ((a3 & 1) == 0)
          {
            uint64_t v31 = v23;
            id v32 = [v28 uuid];
            long long v33 = [v27 activeNetworkRouterUUID];
            char v34 = [v32 isEqual:v33];

            if (v34)
            {
              [v27 _updateActiveNetworkRouterAccessory:0 isReplacement:0 withTransaction:v29];
              [v27 _clearAccessoryNetworkProtectionStateWithTransaction:v29];
              [v27 _reconfigureAccessoriesOnRouterRemovalWithCompletion:v30];
              uint64_t v23 = v31;
              uint64_t v22 = v40;
              goto LABEL_22;
            }
            int v26 = v49;
            uint64_t v23 = v31;
            uint64_t v22 = v40;
          }
          v26((uint64_t)v30);
LABEL_22:

          ++v24;
        }
        while (v22 != v24);
        uint64_t v22 = [obj countByEnumeratingWithState:&v54 objects:v62 count:16];
      }
      while (v22);
    }

    __int16 v35 = [v44 workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_4;
    block[3] = &unk_264A2F7F8;
    id v47 = v45;
    id v36 = v45;
    dispatch_group_notify(group, v35, block);

    BOOL v10 = v38;
    id v8 = v39;
  }
}

void __58__HMDHome__handleRemoveAccessoryAfterUserConsent_message___block_invoke(id *a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (!v5) {
    [a1[4] _submitRemovalLogEventForAccessory:a1[5] isLocalRemoval:0 isLocalFallback:0 isDuplicate:0 duplicateCount:0 error:0];
  }
  if ([a1[4] shouldAccessoryRemovalFallbackToLocalRemovalOnError:v5 accessory:a1[5]])
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = a1[4];
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v10 = HMFGetLogIdentifier();
      int v11 = 138543362;
      uint64_t v12 = v10;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove an apple media accessory via the primary resident. Removing it locally", (uint8_t *)&v11, 0xCu);
    }
    -[HMDHome __removeAccessory:isBeingReplaced:isForceUpdate:message:](a1[4], a1[5], 0, 1, a1[6]);
    [a1[4] _submitRemovalLogEventForAccessory:a1[5] isLocalRemoval:1 isLocalFallback:1 isDuplicate:0 duplicateCount:0 error:v5];
  }
  else
  {
    [a1[6] respondWithPayload:v6 error:v5];
  }
}

void __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  id v7 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_2;
  id v8 = &unk_264A2F2F8;
  id v9 = v1;
  BOOL v10 = v2;
  id v11 = *(id *)(a1 + 48);
  id v3 = v1;
  id v4 = v2;
  id v5 = v6;
  if (([v4 isPrimary] & 1) != 0
    || [v4 conformsToProtocol:&unk_26E4FFFE0]
    && [v4 supportsUserManagement])
  {
    [v3 removeAllUsersAndCloudDataFromAccessory:v4 completionHandler:v5];
  }
  else
  {
    v7((uint64_t)v5);
  }
}

uint64_t __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_4(uint64_t a1)
{
  return [*(id *)(a1 + 32) run];
}

void __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_2(uint64_t a1)
{
  uint64_t v5 = MEMORY[0x263EF8330];
  uint64_t v6 = 3221225472;
  id v7 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_3;
  id v8 = &unk_264A2F7F8;
  uint64_t v1 = *(void **)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v2 = v1;
  id v3 = &v5;
  if (objc_msgSend(v2, "conformsToProtocol:", &unk_26E53C9F8, v5, v6)) {
    id v4 = v2;
  }
  else {
    id v4 = 0;
  }
  if ([v4 supportsDisassociation])
  {
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 3221225472;
    void v10[2] = ____disassociateAccessoryIfSupported_block_invoke;
    void v10[3] = &unk_264A2E288;
    id v11 = v3;
    [v2 disassociateWithCompletionHandler:v10];
  }
  else
  {
    v7((uint64_t)v3);
  }
}

void __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_3(uint64_t a1)
{
}

- (BOOL)shouldAccessoryRemovalFallbackToLocalRemovalOnError:(id)a3 accessory:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if ([v6 isHMError] && objc_msgSend(v6, "code") == 8
    || [v6 isHMFError] && objc_msgSend(v6, "code") == 13
    || [v6 isHMError] && objc_msgSend(v6, "code") == 91)
  {
    id v8 = [(HMDHome *)self homeManager];
    if ([v8 isNetworkConnectionAvailable]
      && ((v9 = v7, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0) ? (BOOL v10 = 0) : (BOOL v10 = v9),
          id v11 = v10,
          v9,
          v11))
    {
      uint64_t v12 = [(HMDHome *)self owner];
      char v13 = [v12 isCurrentUser];
    }
    else
    {
      char v13 = 0;
    }
  }
  else
  {
    char v13 = 0;
  }

  return v13;
}

- (void)_handleRemoveAccessoryMessage:(id)a3
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = [v4 uuidForKey:@"kAccessoryUUID"];
  if (v6)
  {
    id v7 = [(HMDHome *)self accessoryWithUUID:v6];
    if (!v7)
    {
      int v26 = (void *)MEMORY[0x230FBD990]();
      id v27 = self;
      id v28 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        id v29 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v65 = v29;
        __int16 v66 = 2112;
        id v67 = v6;
        _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to find accessory with UUID: %@", buf, 0x16u);
      }
      id v8 = [v4 responseHandler];

      if (v8)
      {
        __int16 v30 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
        uint64_t v31 = [v4 responseHandler];
        ((void (**)(void, void *, void))v31)[2](v31, v30, 0);

        id v8 = 0;
      }
      goto LABEL_30;
    }
    id v8 = v7;
    if ([v8 conformsToProtocol:&unk_26E53C9F8]) {
      id v9 = v8;
    }
    else {
      id v9 = 0;
    }
    id v10 = v9;

    char v11 = [v10 supportsDisassociation];
    if (v11 & 1) != 0 || ([v8 isPrimary])
    {
      int v12 = [v4 isRemote];
      char v13 = (void *)MEMORY[0x230FBD990]();
      id v14 = self;
      id v15 = HMFGetOSLogHandle();
      BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
      if (v12)
      {
        if (v16)
        {
          uint64_t v17 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          long long v65 = v17;
          __int16 v66 = 2112;
          id v67 = v8;
          _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Received remote request to remove accessory: %@", buf, 0x16u);
        }
        uint64_t v18 = [(HMDHome *)v14 residentSyncManager];
        v61[0] = MEMORY[0x263EF8330];
        v61[1] = 3221225472;
        void v61[2] = __41__HMDHome__handleRemoveAccessoryMessage___block_invoke;
        v61[3] = &unk_264A2AFF0;
        id v8 = v8;
        id v62 = v8;
        long long v63 = v14;
        [v18 interceptRemoteResidentRequest:v4 proceed:v61];

        goto LABEL_30;
      }
      if (v16)
      {
        id v32 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        long long v65 = v32;
        __int16 v66 = 2112;
        id v67 = v8;
        _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Received request to remove accessory: %@", buf, 0x16u);
      }
      if ([v4 isRemote] & 1) != 0 || (objc_msgSend(v4, "isEntitledForSPIAccess")) {
        goto LABEL_24;
      }
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 3221225472;
      aBlock[2] = __41__HMDHome__handleRemoveAccessoryMessage___block_invoke_1352;
      aBlock[3] = &unk_264A2B4E8;
      void aBlock[4] = v14;
      id v59 = v4;
      id v39 = v8;
      id v60 = v39;
      uint64_t v40 = _Block_copy(aBlock);
      uint64_t v41 = [v39 uuid];
      id v42 = [(HMDHome *)v14 activeNetworkRouterUUID];
      int v43 = [v41 isEqual:v42];

      if (v43)
      {
        int v44 = [(HMDHome *)v14 accessoriesRequiringManualReconfigurationOnRouterRemoval];
        id v45 = objc_msgSend(v44, "na_map:", &__block_literal_global_1356);

        long long v46 = (void *)MEMORY[0x230FBD990]();
        id v47 = v14;
        long long v48 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
        {
          long long v49 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          long long v65 = v49;
          _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_INFO, "%{public}@Requesting permission to remove active network router accessory", buf, 0xCu);
        }
        long long v50 = +[HMDUIDialogPresenter sharedUIDialogPresenter];
        uint64_t v51 = [v39 name];
        long long v52 = [v39 uuid];
        id v53 = [(HMDHome *)v47 workQueue];
        [v50 requestUserPermissionForRemovalOfRouter:v51 accessoriesRequiringManualReconfiguration:v45 withContext:v52 queue:v53 completionHandler:v40];
      }
      else
      {
        if ([v39 wiFiCredentialType] != 3)
        {

LABEL_24:
          [(HMDHome *)v14 _handleRemoveAccessoryAfterUserConsent:v8 message:v4];
LABEL_30:

          goto LABEL_31;
        }
        long long v54 = (void *)MEMORY[0x230FBD990]();
        long long v55 = v14;
        long long v56 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
        {
          long long v57 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          long long v65 = v57;
          _os_log_impl(&dword_22F52A000, v56, OS_LOG_TYPE_INFO, "%{public}@Requesting permission to remove accessory with specific WiFi credential", buf, 0xCu);
        }
        id v45 = +[HMDUIDialogPresenter sharedUIDialogPresenter];
        long long v50 = [v39 name];
        uint64_t v51 = [v39 uuid];
        long long v52 = [(HMDHome *)v55 workQueue];
        [v45 requestUserPermissionForRemovalOfSpecificWiFiCredentialedAccessory:v50 withContext:v51 queue:v52 completionHandler:v40];
      }

      id v8 = v39;
      goto LABEL_30;
    }
    long long v33 = (void *)MEMORY[0x230FBD990]();
    char v34 = self;
    __int16 v35 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      id v36 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v65 = v36;
      __int16 v66 = 2112;
      id v67 = v8;
      _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_ERROR, "%{public}@cannot remove non-primary accessory %@", buf, 0x16u);
    }
    uint64_t v37 = [v4 responseHandler];

    if (!v37) {
      goto LABEL_30;
    }
    uint64_t v25 = [v4 responseHandler];
    id v38 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:34 userInfo:0];
    ((void (**)(void, void *, void))v25)[2](v25, v38, 0);

LABEL_29:
    goto LABEL_30;
  }
  id v19 = (void *)MEMORY[0x230FBD990]();
  id v20 = self;
  uint64_t v21 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = HMFGetLogIdentifier();
    uint64_t v23 = [v4 messagePayload];
    *(_DWORD *)buf = 138543618;
    long long v65 = v22;
    __int16 v66 = 2112;
    id v67 = v23;
    _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Missing target accessory UUID from message payload: %@", buf, 0x16u);
  }
  uint64_t v24 = [v4 responseHandler];

  if (v24)
  {
    id v8 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    uint64_t v25 = [v4 responseHandler];
    ((void (**)(void, id, void))v25)[2](v25, v8, 0);
    goto LABEL_29;
  }
LABEL_31:
}

void __41__HMDHome__handleRemoveAccessoryMessage___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if ([*(id *)(a1 + 32) isCurrentAccessory]
    && [*(id *)(a1 + 40) isCurrentDevicePrimaryResident])
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 40);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      int v13 = 138543362;
      id v14 = v7;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Processing self removal from home", (uint8_t *)&v13, 0xCu);
    }
    id v8 = [HMDSelfRemovalWatchdog alloc];
    id v9 = [*(id *)(a1 + 32) uuid];
    id v10 = [*(id *)(a1 + 40) workQueue];
    char v11 = [(HMDSelfRemovalWatchdog *)v8 initWithCurrentAccessoryUUID:v9 workQueue:v10];
    [*(id *)(a1 + 40) setSelfRemovalWatchdog:v11];

    int v12 = [*(id *)(a1 + 40) selfRemovalWatchdog];
    [v12 configure];
  }
  -[HMDHome __removeAccessory:isBeingReplaced:isForceUpdate:message:](*(void **)(a1 + 40), *(void **)(a1 + 32), 0, 0, v3);
}

void __41__HMDHome__handleRemoveAccessoryMessage___block_invoke_1352(uint64_t a1, int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v7)
    {
      id v8 = HMFGetLogIdentifier();
      int v12 = 138543362;
      int v13 = v8;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@User canceled consent for removing accessory", (uint8_t *)&v12, 0xCu);
    }
    id v9 = *(void **)(a1 + 40);
    id v10 = [MEMORY[0x263F087E8] hmErrorWithCode:23];
    [v9 respondWithError:v10];
  }
  else
  {
    if (v7)
    {
      char v11 = HMFGetLogIdentifier();
      int v12 = 138543362;
      int v13 = v11;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@User accepted consent for removing accessory", (uint8_t *)&v12, 0xCu);
    }
    [*(id *)(a1 + 32) _handleRemoveAccessoryAfterUserConsent:*(void *)(a1 + 48) message:*(void *)(a1 + 40)];
  }
}

uint64_t __41__HMDHome__handleRemoveAccessoryMessage___block_invoke_1353(uint64_t a1, void *a2)
{
  return [a2 name];
}

- (void)handleRemoveAccessoryMessage:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __40__HMDHome_handleRemoveAccessoryMessage___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __40__HMDHome_handleRemoveAccessoryMessage___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleRemoveAccessoryMessage:*(void *)(a1 + 40)];
}

- (void)handleRemoveAccessory:(id)a3 completion:(id)a4
{
  v25[1] = *MEMORY[0x263EF8340];
  id v6 = a4;
  BOOL v7 = (objc_class *)MEMORY[0x263F42590];
  id v8 = a3;
  id v9 = [v7 alloc];
  id v10 = objc_alloc(MEMORY[0x263F42570]);
  char v11 = [(HMDHome *)self uuid];
  int v12 = (void *)[v10 initWithTarget:v11];
  uint64_t v24 = @"kAccessoryUUID";
  int v13 = [v8 uuid];

  uint64_t v14 = [v13 UUIDString];
  v25[0] = v14;
  uint64_t v15 = [NSDictionary dictionaryWithObjects:v25 forKeys:&v24 count:1];
  BOOL v16 = (void *)[v9 initWithName:@"kRemoveAccessoryRequestKey" destination:v12 payload:v15];

  uint64_t v19 = MEMORY[0x263EF8330];
  uint64_t v20 = 3221225472;
  uint64_t v21 = __44__HMDHome_handleRemoveAccessory_completion___block_invoke;
  uint64_t v22 = &unk_264A273E0;
  id v23 = v6;
  id v17 = v6;
  [v16 setResponseHandler:&v19];
  if ([(HMDHome *)self isCurrentDevicePrimaryResident]
    || isFeatureMatteriPhoneOnlyPairingControlEnabled()
    && ![(HMDHome *)self hasAnyResident])
  {
    [(HMDHome *)self handleRemoveAccessoryMessage:v16];
  }
  else
  {
    uint64_t v18 = [(HMDHome *)self residentSyncManager];
    [v18 performResidentRequest:v16 options:0];
  }
}

void __44__HMDHome_handleRemoveAccessory_completion___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = _Block_copy(*(const void **)(a1 + 32));
  id v4 = v3;
  if (v3) {
    (*((void (**)(void *, id))v3 + 2))(v3, v5);
  }
}

- (void)__handleAddMediaAccessoryModel:(id)a3 message:(id)a4
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = HMFGetOSLogHandle();
  if (os_signpost_enabled(v8))
  {
    id v9 = [v6 uuid];
    id v10 = [v6 parentUUID];
    char v11 = [v6 bsoRecord];
    int v12 = [v11 recordID];
    uint64_t v13 = [v12 recordName];
    uint64_t v14 = (void *)v13;
    uint64_t v15 = &stru_26E2EB898;
    *(_DWORD *)buf = 138412802;
    long long v75 = v9;
    if (v13) {
      uint64_t v15 = (__CFString *)v13;
    }
    __int16 v76 = 2112;
    id v77 = v10;
    __int16 v78 = 2112;
    long long v79 = v15;
    _os_signpost_emit_with_name_impl(&dword_22F52A000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "AddMediaAccessoryModel", "Identifier=%{signpost.description:attribute}@ parentUUID=%{signpost.description:attribute}@ recordName=%{signpost.description:attribute}@ ", buf, 0x20u);
  }
  BOOL v16 = (void *)MEMORY[0x230FBD990]();
  id v17 = self;
  uint64_t v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = HMFGetLogIdentifier();
    uint64_t v20 = [v6 uuid];
    *(_DWORD *)buf = 138543618;
    long long v75 = v19;
    __int16 v76 = 2112;
    id v77 = v20;
    _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Creating new media accessory from model with UUID %@", buf, 0x16u);
  }
  id v21 = v6;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  id v23 = v22;

  id v24 = v21;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  id v26 = v25;

  if (v23)
  {
    id v27 = [[HMDAppleMediaAccessory alloc] initWithTransaction:v23 home:v17];
    BOOL v28 = 0;
    if (!v27) {
      goto LABEL_31;
    }
    goto LABEL_18;
  }
  if (v26)
  {
    id v29 = [[HMDAirPlayAccessory alloc] initWithTransaction:v26 home:v17];
    BOOL v28 = [(HMDHome *)v17 isCurrentDevicePrimaryResident];
    __int16 v30 = [(HMDHome *)v17 workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke;
    block[3] = &unk_264A2F820;
    void block[4] = v17;
    id v27 = v29;
    id v72 = v27;
    dispatch_async(v30, block);

    if (!v27) {
      goto LABEL_31;
    }
LABEL_18:
    BOOL v60 = v28;
    id v61 = v26;
    id v62 = v24;
    uint64_t v31 = v27;
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass) {
      long long v33 = v31;
    }
    else {
      long long v33 = 0;
    }
    char v34 = v33;

    [(HMDAppleMediaAccessory *)v34 setDataSource:v17];
    [(HMDHome *)v17 addAccessory:v31];
    __int16 v35 = [(HMDHome *)v17 homeManager];
    id v36 = [(HMDAccessory *)v31 uuid];
    uint64_t v37 = [v35 accessorySetupMetricDispatcherForAccessoryUUID:v36];

    [v37 markAccessoryAddCompleted];
    id v38 = [(HMDHome *)v17 _hasConfirmedPrimaryResidentDevice];

    if (v38)
    {
      [v37 markPrimaryResidentChanged];
      id v39 = [(HMDHome *)v17 remoteEventRouterClientController];
      int v40 = [v39 isPrimaryResidentClientConnected];

      if (v40) {
        [v37 markEventRouterPrimaryClientConnectStatusChanged:1];
      }
    }
    long long v58 = v37;
    uint64_t v41 = dispatch_group_create();
    id v42 = [(HMDHome *)v17 msgDispatcher];
    [(HMDAppleMediaAccessory *)v31 configureWithHome:v17 msgDispatcher:v42 configurationTracker:v41 initialConfiguration:0];

    int v43 = [(HMDHome *)v17 homeManager];
    if ((isKindOfClass & 1) != 0 && [(HMDAppleMediaAccessory *)v31 isCurrentAccessory])
    {
      int v44 = [v43 currentAccessorySetupMetricDispatcher];
      [v44 markSetupBeginStage:7 error:0];
    }
    __int16 v73 = v31;
    id v45 = objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:count:", &v73, 1, v58);
    long long v46 = [v7 identifier];
    [(HMDHome *)v17 addNewlyConfiguredAccessories:v45 addSessionIdentifier:v46];

    id v47 = [v7 transactionResult];
    [v47 markChanged];
    [v47 markSaveToAssistant];
    long long v48 = [(HMDHome *)v17 workQueue];
    v63[0] = MEMORY[0x263EF8330];
    v63[1] = 3221225472;
    void v63[2] = __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke_1345;
    v63[3] = &unk_264A16668;
    v63[4] = v17;
    uint64_t v64 = v31;
    id v65 = v7;
    id v66 = v23;
    id v67 = v34;
    BOOL v70 = v60;
    id v68 = v43;
    id v69 = v47;
    id v49 = v47;
    id v50 = v43;
    uint64_t v51 = v34;
    long long v52 = v31;
    dispatch_group_notify(v41, v48, v63);

    id v26 = v61;
    id v24 = v62;
    goto LABEL_31;
  }
  id v53 = (void *)MEMORY[0x230FBD990]();
  long long v54 = v17;
  long long v55 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    long long v56 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v75 = v56;
    __int16 v76 = 2112;
    id v77 = v24;
    _os_log_impl(&dword_22F52A000, v55, OS_LOG_TYPE_DEFAULT, "%{public}@Invalid WHA accessory: %@", buf, 0x16u);
  }
LABEL_31:
  long long v57 = HMFGetOSLogHandle();
  if (os_signpost_enabled(v57))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_22F52A000, v57, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "AddMediaAccessoryModel", "", buf, 2u);
  }
}

uint64_t __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    id v6 = [*(id *)(a1 + 40) shortDescription];
    int v10 = 138543618;
    char v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to schedule key roll operation for device if necessary for airplay accessory: %@", (uint8_t *)&v10, 0x16u);
  }
  id v7 = [*(id *)(a1 + 32) homeManager];
  id v8 = [v7 bgOpsManager];
  [v8 scheduleHH2KeyRollForAirPlayAccessory:*(void *)(a1 + 40)];

  return +[HMDBackgroundOperationManagerHelper auditSharedUserEntriesInDatabaseForAccessory:*(void *)(a1 + 40)];
}

void __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke_1345(uint64_t a1)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) accessoryBrowser];
  id v3 = [*(id *)(a1 + 40) identifier];
  objc_msgSend(v2, "registerPairedAccessory:transports:setupHash:delegate:", v3, objc_msgSend(*(id *)(a1 + 40), "supportedTransports"), 0, *(void *)(a1 + 32));

  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  id v4 = objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser", 0);
  id v5 = [v4 mediaBrowser];
  id v6 = [v5 accessoryAdvertisements];

  uint64_t v7 = [v6 countByEnumeratingWithState:&v67 objects:v81 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v68;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v68 != v9) {
          objc_enumerationMutation(v6);
        }
        char v11 = *(void **)(*((void *)&v67 + 1) + 8 * i);
        __int16 v12 = [v11 identifier];
        uint64_t v13 = [*(id *)(a1 + 40) identifier];
        int v14 = [v12 isEqualToString:v13];

        if (v14) {
          [*(id *)(a1 + 40) addAdvertisement:v11];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v67 objects:v81 count:16];
    }
    while (v8);
  }

  objc_msgSend(*(id *)(a1 + 32), "_reachabilityChangedForAccessory:reachable:", *(void *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "isReachable"));
  if ([*(id *)(a1 + 32) remoteAccessIsEnabled])
  {
    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = *(id *)(a1 + 32);
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      uint64_t v19 = [*(id *)(a1 + 40) name];
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v75 = 2112;
      __int16 v76 = v19;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ setting remote access enabled", buf, 0x16u);
    }
    [*(id *)(a1 + 40) remoteAccessEnabled:1];
  }
  uint64_t v20 = [*(id *)(a1 + 48) transactionResult];
  uint64_t v21 = [v20 source];

  uint64_t v22 = (void *)MEMORY[0x230FBD990]();
  id v23 = *(id *)(a1 + 32);
  id v24 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    uint64_t v25 = HMFGetLogIdentifier();
    id v26 = [*(id *)(a1 + 40) shortDescription];
    [*(id *)(a1 + 32) isCurrentDeviceConfirmedPrimaryResident];
    id v27 = HMFBooleanToString();
    *(_DWORD *)buf = 138544130;
    *(void *)&uint8_t buf[4] = v25;
    __int16 v75 = 2112;
    __int16 v76 = v26;
    __int16 v77 = 2048;
    uint64_t v78 = v21;
    __int16 v79 = 2112;
    uint64_t v80 = v27;
    _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Apple media accessory %@ being added to home - source %tu. IsPrimary: %@", buf, 0x2Au);
  }
  if (*(void *)(a1 + 56) && [*(id *)(a1 + 40) isCurrentAccessory])
  {
    BOOL v28 = (void *)MEMORY[0x230FBD990]();
    id v29 = *(id *)(a1 + 32);
    __int16 v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      uint64_t v31 = HMFGetLogIdentifier();
      id v32 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v31;
      __int16 v75 = 2112;
      __int16 v76 = v32;
      _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_INFO, "%{public}@Setting up media session for current accessory during add - %@", buf, 0x16u);
    }
    id v33 = (id)[*(id *)(a1 + 32) _addMediaSessionForCurrentAccessory:*(void *)(a1 + 40)];
  }
  char v34 = *(void **)(a1 + 64);
  if (v34)
  {
    [v34 configureAudioDestinationController];
    if ([*(id *)(a1 + 64) isCurrentAccessory])
    {
      __int16 v35 = [*(id *)(a1 + 32) accessoryBrowser];
      [v35 resetUnassociatedCurrentAccessory];

      [*(id *)(a1 + 32) createRemoteEventRouterServerIfNeeded];
      id v36 = [*(id *)(a1 + 32) notificationCenter];
      uint64_t v37 = *(void *)(a1 + 32);
      uint64_t v38 = *(void *)(a1 + 64);
      id v72 = @"HMDAccessoryNotificationKey";
      uint64_t v73 = v38;
      id v39 = [NSDictionary dictionaryWithObjects:&v73 forKeys:&v72 count:1];
      [v36 postNotificationName:@"HMDHomeManagerDidAddCurrentAccessoryNotification" object:v37 userInfo:v39];

      int v40 = [*(id *)(a1 + 72) currentAccessorySetupMetricDispatcher];
      [v40 markSetupEndStage:7 error:0];
    }
    uint64_t v41 = *(void **)(a1 + 32);
    uint64_t v71 = *(void *)(a1 + 64);
    id v42 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v71 count:1];
    [v41 configureRemoteEventRouterClientControllerForAccessories:v42];

    int v43 = [*(id *)(a1 + 32) capabilitiesAggregator];
    int v44 = [*(id *)(a1 + 64) uuid];
    [v43 didAddAccessory:v44];

    id v45 = *(void **)(a1 + 32);
    id v46 = *(id *)(a1 + 64);
    id v47 = v46;
    if (v45
      && [v46 isHomePod]
      && [v45 isCurrentDevicePrimaryResident])
    {
      long long v48 = [v45 fetchedAccessorySettingsSubscriber];
      id v49 = [v47 uuid];
      *(void *)buf = v49;
      id v50 = [MEMORY[0x263EFF8C0] arrayWithObjects:buf count:1];
      [v48 subscribeToSettingsForAccessoryUUIDs:v50];
    }
    uint64_t v51 = [*(id *)(a1 + 32) notificationRegistrationsForAppleMediaAccessories];
    uint64_t v52 = [v51 count];

    if (v52)
    {
      id v53 = [*(id *)(a1 + 32) mediaStateSubscriber];
      [v53 subscribeForAppleMediaStateForAccessory:*(void *)(a1 + 64) subscriptionToken:@"HMDHomeClientMediaStateRegistrationToken"];
    }
    long long v54 = [*(id *)(a1 + 32) mediaStateSubscriber];
    [v54 localSubscribeForAppleMediaStateForAccessory:*(void *)(a1 + 64)];
  }
  if ([*(id *)(a1 + 40) isCurrentAccessory])
  {
    long long v55 = (void *)MEMORY[0x230FBD990]();
    id v56 = *(id *)(a1 + 32);
    long long v57 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
    {
      long long v58 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v58;
      _os_log_impl(&dword_22F52A000, v57, OS_LOG_TYPE_INFO, "%{public}@Notifying that we are a reachable accessory", buf, 0xCu);
    }
    id v59 = [*(id *)(a1 + 32) notificationCenter];
    [v59 postNotificationName:@"HMDHomeCurrentDeviceHasReachableAccessories" object:*(void *)(a1 + 32)];

    BOOL v60 = *(void **)(a1 + 64);
    if (v60) {
      [v60 configureSensors];
    }
  }
  if (*(unsigned char *)(a1 + 88))
  {
    id v61 = [*(id *)(a1 + 32) residentDeviceManager];
    [v61 confirmWithCompletionHandler:0];
  }
  id v62 = *(void **)(a1 + 32);
  long long v63 = [*(id *)(a1 + 48) identifier];
  uint64_t v64 = [v62 retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:v63];

  if ([*(id *)(a1 + 80) source] == 1)
  {
    [*(id *)(a1 + 32) _notifyClientOfNewlyAddedAccessories:v64 requestMessage:*(void *)(a1 + 48)];
    [*(id *)(a1 + 32) notifyOfNewlyAddedAccessoryByThisOwnerDevice:*(void *)(a1 + 40)];
  }
  else
  {
    [*(id *)(a1 + 48) respondWithPayload:0];
  }
  id v65 = [*(id *)(a1 + 32) accessoryBrowser];
  id v66 = [*(id *)(a1 + 40) identifier];
  [v65 removeUnassociatedAccessoryWithIdentifier:v66];

  [*(id *)(a1 + 32) notifyOfAddedAccessory:*(void *)(a1 + 40)];
}

- (void)__handleAddHAPAccessoryModel:(id)a3 message:(id)a4
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 supportsNativeMatter];

  if (!v8)
  {
    uint64_t v9 = [v6 bridgeUUID];
    if (!v9) {
      goto LABEL_5;
    }
    int v10 = (void *)v9;
    id v11 = objc_alloc(MEMORY[0x263F08C38]);
    __int16 v12 = [v6 bridgeUUID];
    uint64_t v13 = (void *)[v11 initWithUUIDString:v12];
    int v14 = [(HMDHome *)self accessoryWithUUID:v13];

    if (!v14)
    {
      id v61 = (void *)MEMORY[0x230FBD990]();
      id v62 = self;
      long long v63 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        uint64_t v64 = HMFGetLogIdentifier();
        id v65 = [v6 bridgeUUID];
        id v66 = [v6 uuid];
        *(_DWORD *)buf = 138543874;
        id v87 = v64;
        __int16 v88 = 2112;
        uint64_t v89 = v65;
        __int16 v90 = 2112;
        __int16 v91 = v66;
        long long v67 = "%{public}@No bridge accessory %@ for added bridged accessory %@";
LABEL_32:
        _os_log_impl(&dword_22F52A000, v63, OS_LOG_TYPE_ERROR, v67, buf, 0x20u);
      }
    }
    else
    {
LABEL_5:
      uint64_t v15 = [v6 hostAccessoryUUID];
      if (!v15) {
        goto LABEL_7;
      }
      id v16 = (void *)v15;
      id v17 = objc_alloc(MEMORY[0x263F08C38]);
      uint64_t v18 = [v6 hostAccessoryUUID];
      uint64_t v19 = (void *)[v17 initWithUUIDString:v18];
      uint64_t v20 = [(HMDHome *)self accessoryWithUUID:v19];

      if (v20)
      {
LABEL_7:
        uint64_t v21 = (void *)MEMORY[0x230FBD990]();
        uint64_t v22 = self;
        id v23 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          id v24 = HMFGetLogIdentifier();
          uint64_t v25 = [v6 uuid];
          id v26 = [v6 name];
          id v27 = [v6 uniqueIdentifier];
          BOOL v28 = [v7 shortDescription];
          *(_DWORD *)buf = 138544386;
          id v87 = v24;
          __int16 v88 = 2112;
          uint64_t v89 = v25;
          __int16 v90 = 2112;
          __int16 v91 = v26;
          __int16 v92 = 2112;
          __int16 v93 = v27;
          __int16 v94 = 2112;
          id v95 = v28;
          _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Creating new HAP accessory from model with UUID %@/%@/%@ from message: %@", buf, 0x34u);
        }
        id v29 = [[HMDHAPAccessory alloc] initWithTransaction:v6 home:v22];
        if (v29)
        {
          uint64_t v30 = [v6 configurationTracker];
          if (!v30) {
            uint64_t v30 = (uint64_t)dispatch_group_create();
          }
          uint64_t v31 = [(HMDHome *)v22 notificationRegistrations];
          uint64_t v32 = [v31 count];
          BOOL v33 = v32 != 0;

          char v34 = [(HMDHome *)v22 uuidToHAPAccessoryConfigTable];
          __int16 v35 = [v6 uuid];
          uint64_t v36 = [v34 objectForKey:v35];

          if (v36)
          {
            uint64_t v37 = [(HMDHome *)v22 uuidToHAPAccessoryConfigTable];
            uint64_t v38 = [v6 uuid];
            [v37 removeObjectForKey:v38];

            dispatch_group_enter((dispatch_group_t)v30);
            id v39 = [(HMDHome *)v22 workQueue];
            v83[0] = MEMORY[0x263EF8330];
            v83[1] = 3221225472;
            v83[2] = __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke;
            v83[3] = &unk_264A2F7F8;
            id v84 = (id)v30;
            [(HMDHAPAccessory *)v29 configureWithAccessory:v36 homeNotificationsEnabled:v32 != 0 queue:v39 completion:v83];
          }
          if ([(HMDHAPAccessory *)v29 isPrimary])
          {
            int v40 = [v7 name];
            char v41 = [v40 isEqualToString:@"kAddAccessoryRequestKey"];

            if ((v41 & 1) == 0) {
              [(HMDHAPAccessory *)v29 savePublicKeyToKeychain];
            }
            id v42 = [(HMDAccessory *)v29 identifier];
            uint64_t v43 = [(HMDHAPAccessory *)v29 supportedTransports];
            int v44 = [(HMDHAPAccessory *)v29 setupHash];
            [(HMDHome *)v22 _registerPairedAccessory:v42 transports:v43 setupHash:v44];
          }
          __int16 v77 = (void *)v36;
          [(HMDHome *)v22 addAccessory:v29];
          id v45 = [(HMDHome *)v22 msgDispatcher];
          [(HMDHAPAccessory *)v29 configureWithHome:v22 msgDispatcher:v45 configurationTracker:v30 initialConfiguration:0];

          uint64_t v85 = v29;
          id v46 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v85 count:1];
          id v47 = [v7 identifier];
          [(HMDHome *)v22 addNewlyConfiguredAccessories:v46 addSessionIdentifier:v47];

          long long v48 = [(HMDHome *)v22 accessoryBrowser];
          [v48 evaluateAccessoryDiscoveryState];

          uint64_t v49 = [(HMDHAPAccessory *)v29 matterNodeID];
          if (v49)
          {
            id v50 = (void *)v49;
            uint64_t v51 = [(HMDHAPAccessory *)v29 matterNodeID];
            char v52 = [v51 isEqual:&unk_26E470930];

            if ((v52 & 1) == 0)
            {
              __int16 v75 = [(HMDHome *)v22 homeManager];
              id v53 = [v75 accessoryBrowser];
              long long v54 = [v53 chipAccessoryServerBrowser];
              [(HMDHAPAccessory *)v29 matterNodeID];
              long long v55 = v76 = v33;
              id v56 = [(HMDHome *)v22 home];
              long long v57 = [v56 fabric];
              [v54 handleHomeAddedAccessoryWithNodeID:v55 fabric:v57];

              BOOL v33 = v76;
            }
          }
          long long v58 = [v7 transactionResult];
          [v58 markChanged];
          [v58 markSaveToAssistant];
          id v59 = [(HMDHome *)v22 workQueue];
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1340;
          block[3] = &unk_264A25E10;
          void block[4] = v22;
          __int16 v79 = v29;
          id v80 = v7;
          id v81 = v77;
          BOOL v82 = v33;
          id v60 = v77;
          dispatch_group_notify((dispatch_group_t)v30, v59, block);
        }
        else
        {
          long long v68 = (void *)MEMORY[0x230FBD990]();
          long long v69 = v22;
          long long v70 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
          {
            uint64_t v71 = HMFGetLogIdentifier();
            id v72 = [v6 uuid];
            uint64_t v73 = [v72 UUIDString];
            *(_DWORD *)buf = 138543618;
            id v87 = v71;
            __int16 v88 = 2112;
            uint64_t v89 = v73;
            _os_log_impl(&dword_22F52A000, v70, OS_LOG_TYPE_ERROR, "%{public}@Unable to create accessory from object (null accessory) %@", buf, 0x16u);
          }
          long long v74 = [v7 responseHandler];

          if (!v74) {
            goto LABEL_29;
          }
          uint64_t v30 = [v7 responseHandler];
          long long v58 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
          (*(void (**)(uint64_t, void *, void))(v30 + 16))(v30, v58, 0);
        }

LABEL_29:
        goto LABEL_34;
      }
      id v61 = (void *)MEMORY[0x230FBD990]();
      id v62 = self;
      long long v63 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        uint64_t v64 = HMFGetLogIdentifier();
        id v65 = [v6 hostAccessoryUUID];
        id v66 = [v6 uuid];
        *(_DWORD *)buf = 138543874;
        id v87 = v64;
        __int16 v88 = 2112;
        uint64_t v89 = v65;
        __int16 v90 = 2112;
        __int16 v91 = v66;
        long long v67 = "%{public}@No host accessory %@ for added hosted accessory %@";
        goto LABEL_32;
      }
    }

    goto LABEL_34;
  }
  [(HMDHome *)self handleAddMatterAccessoryModel:v6 message:v7];
LABEL_34:
}

void __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke(uint64_t a1)
{
}

void __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1340(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if ([*(id *)(a1 + 32) remoteAccessIsEnabled])
  {
    id v2 = (void *)MEMORY[0x230FBD990]();
    id v3 = *(id *)(a1 + 32);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = HMFGetLogIdentifier();
      id v6 = [*(id *)(a1 + 40) shortDescription];
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v35 = 2112;
      uint64_t v36 = v6;
      _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@accessory %@ setting remote access enabled", buf, 0x16u);
    }
    [*(id *)(a1 + 40) remoteAccessEnabled:1];
  }
  objc_msgSend(*(id *)(a1 + 32), "_reachabilityChangedForAccessory:reachable:", *(void *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "isReachable"));
  id v7 = [*(id *)(a1 + 48) transactionResult];
  uint64_t v8 = [v7 source];

  if ([*(id *)(a1 + 40) isPrimary])
  {
    uint64_t v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = *(id *)(a1 + 32);
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = HMFGetLogIdentifier();
      uint64_t v13 = [*(id *)(a1 + 40) shortDescription];
      uint64_t v14 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v35 = 2112;
      uint64_t v36 = v13;
      __int16 v37 = 2112;
      uint64_t v38 = v14;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@accessory %@ handling added primary HAPAccessory: %@", buf, 0x20u);
    }
    if (!*(void *)(a1 + 56))
    {
      uint64_t v15 = [*(id *)(a1 + 40) identifier];
      *(void *)buf = 0;
      [*(id *)(a1 + 40) matchesHAPAccessoryWithServerIdentifier:v15 linkType:buf];
      id v16 = [*(id *)(a1 + 32) accessoryBrowser];
      [v16 handleNewlyPairedAccessory:v15 linkType:*(void *)buf];

      isWatch();
      objc_msgSend(*(id *)(a1 + 32), "__requestAccessoryBrowsing");
    }
    id v17 = [*(id *)(a1 + 32) accessoryBrowser];
    uint64_t v18 = [*(id *)(a1 + 40) identifier];
    [v17 removeUnassociatedAccessoryWithIdentifier:v18];

    uint64_t v19 = [*(id *)(a1 + 32) networkProtectionGroupRegistry];
    [v19 handleAddedAccessory:*(void *)(a1 + 40)];
  }
  uint64_t v20 = *(void *)(a1 + 56);
  if (v20)
  {
    [*(id *)(a1 + 40) enableNotificationsWithHAPAccessory:v20 homeNotificationsEnabled:*(unsigned __int8 *)(a1 + 64)];
  }
  else if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v21 = *(void **)(a1 + 32);
    uint64_t v33 = *(void *)(a1 + 40);
    uint64_t v22 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v33 count:1];
    [v21 _subscribeForHomeNotificationsFromRemoteGateway:1 accessories:v22];
  }
  if (*(void *)(a1 + 56))
  {
    logAndPostNotification(@"HMDAccessoryConnectedNotification", *(void **)(a1 + 40), 0);
    [*(id *)(a1 + 40) updateLightProfilesSettings];
  }
  id v23 = [*(id *)(a1 + 48) name];
  if ([v23 isEqualToString:@"kAddAccessoryRequestKey"])
  {
  }
  else
  {
    id v24 = [*(id *)(a1 + 48) name];
    char v25 = [v24 isEqualToString:@"HMDRemoteAddHAPAccessoriesMessage"];

    if ((v25 & 1) == 0)
    {
      id v26 = *(void **)(a1 + 32);
      id v27 = [*(id *)(a1 + 48) identifier];
      id v28 = (id)[v26 retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:v27];

      [*(id *)(a1 + 48) respondWithPayload:0];
    }
  }
  if (v8 == 1) {
    [*(id *)(a1 + 32) notifyOfNewlyAddedAccessoryByThisOwnerDevice:*(void *)(a1 + 40)];
  }
  [*(id *)(a1 + 32) notifyOfAddedAccessory:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) reevaluateAccessoryInfo];
  if ([*(id *)(a1 + 40) isPrimary])
  {
    id v29 = [*(id *)(a1 + 32) workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1341;
    block[3] = &unk_264A2F820;
    uint64_t v30 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v32 = v30;
    dispatch_async(v29, block);
  }
}

uint64_t __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1341(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    id v6 = [*(id *)(a1 + 40) shortDescription];
    int v10 = 138543618;
    id v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to schedule key roll operation for device if necessary for accessory: %@", (uint8_t *)&v10, 0x16u);
  }
  id v7 = [*(id *)(a1 + 32) homeManager];
  uint64_t v8 = [v7 bgOpsManager];
  [v8 scheduleHH2KeyRollForAccessory:*(void *)(a1 + 40)];

  return +[HMDBackgroundOperationManagerHelper auditSharedUserEntriesInDatabaseForAccessory:*(void *)(a1 + 40)];
}

- (void)__requestAccessoryBrowsing
{
  id v2 = [(HMDHome *)self homeManager];
  [v2 setAccessoryBrowsingRequested];
  [v2 requestAccessoryBrowsing];
}

- (void)_handleAddAccessoryModel:(id)a3 message:(id)a4
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = v8;
  id v10 = v6;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v11 = v10;
  }
  else {
    id v11 = 0;
  }
  id v12 = v11;

  uint64_t v13 = [v10 identifier];

  if (!v13)
  {
    uint64_t v14 = (void *)MEMORY[0x230FBD990]();
    uint64_t v15 = self;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v17 = HMFGetLogIdentifier();
      uint64_t v18 = [v10 uuid];
      uint64_t v19 = [v18 UUIDString];
      int v27 = 138543618;
      id v28 = v17;
      __int16 v29 = 2112;
      uint64_t v30 = v19;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to create accessory from object (null identifier) %@", (uint8_t *)&v27, 0x16u);
    }
    uint64_t v20 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v7 respondWithError:v20];
    goto LABEL_13;
  }
  if (v9)
  {
    [(HMDHome *)self __handleAddHAPAccessoryModel:v9 message:v7];
    goto LABEL_16;
  }
  if (v12)
  {
    [(HMDHome *)self __handleAddMediaAccessoryModel:v12 message:v7];
    goto LABEL_16;
  }
  uint64_t v21 = (void *)MEMORY[0x230FBD990]();
  uint64_t v22 = self;
  id v23 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    id v24 = HMFGetLogIdentifier();
    int v27 = 138543362;
    id v28 = v24;
    _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@Only HAP accessories can be added to the home currently", (uint8_t *)&v27, 0xCu);
  }
  char v25 = [v7 responseHandler];

  if (v25)
  {
    uint64_t v20 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    id v26 = [v7 responseHandler];
    ((void (**)(void, void *, void))v26)[2](v26, v20, 0);

LABEL_13:
  }
LABEL_16:
}

- (void)_handleUserConsentResponseForAccessory:(id)a3
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([v4 isEntitledForSPIAccess])
  {
    id v5 = [v4 dataForKey:@"kAccessoryDescriptionDataKey"];
    id v29 = 0;
    id v6 = [(HMDHome *)self _setupDescriptionFromData:v5 error:&v29];
    id v7 = v29;
    if (v6)
    {
      uint64_t v8 = [v4 numberForKey:*MEMORY[0x263F0CF28]];
      if (v8)
      {
        id v9 = [(HMDHome *)self addPendingAccessories];
        id v10 = [v9 objectForKey:v6];

        unint64_t v11 = [v8 integerValue];
        if (v11 > 1)
        {
          if ((v11 & 0xFFFFFFFFFFFFFFFELL) == 2)
          {
            [(HMDHome *)self _handleUserConsentForAccessoryReplacement:v6 consent:v11 == 3 message:v10];
          }
          else
          {
            uint64_t v26 = [MEMORY[0x263F087E8] hmErrorWithCode:3];

            id v7 = (id)v26;
          }
        }
        else
        {
          BOOL v12 = v11 == 1;
          uint64_t v13 = [(HMDHome *)self accessoryBrowser];
          [v13 didReceiveUserConsentResponseForSetupAccessoryDetail:v6 consent:v12];
        }
        int v27 = [v4 responseHandler];

        if (v27)
        {
          id v28 = [v4 responseHandler];
          ((void (**)(void, id, void))v28)[2](v28, v7, 0);
        }
      }
      else
      {
        uint64_t v22 = (void *)MEMORY[0x230FBD990]();
        id v23 = self;
        id v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          char v25 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          uint64_t v31 = v25;
          _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@user consent response is absent", buf, 0xCu);
        }
      }
    }
    else
    {
      uint64_t v18 = (void *)MEMORY[0x230FBD990]();
      uint64_t v19 = self;
      uint64_t v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v31 = v21;
        __int16 v32 = 2112;
        id v33 = v7;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive setup accessory description from accessory description data: %@", buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x230FBD990]();
    uint64_t v15 = self;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v31 = v17;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to use SPI for user consent response", buf, 0xCu);
    }
  }
}

- (void)_handleUserConsentForAccessoryReplacement:(id)a3 consent:(BOOL)a4 message:(id)a5
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a5;
  id v10 = (void *)MEMORY[0x230FBD990]();
  unint64_t v11 = self;
  BOOL v12 = HMFGetOSLogHandle();
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
  if (a4)
  {
    if (v13)
    {
      uint64_t v14 = HMFGetLogIdentifier();
      uint64_t v15 = [v9 name];
      id v16 = [v9 identifier];
      id v17 = [v9 messagePayload];
      int v27 = 138544130;
      id v28 = v14;
      __int16 v29 = 2112;
      uint64_t v30 = v15;
      __int16 v31 = 2112;
      __int16 v32 = v16;
      __int16 v33 = 2112;
      uint64_t v34 = v17;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@User consented to Wi-Fi router replacement; continue to adding new Wi-Fi router - message %@/%@/%@",
        (uint8_t *)&v27,
        0x2Au);
    }
    [v8 setUserConsentedForReplace:1];
    uint64_t v18 = [v8 accessoryUUID];

    if (v18)
    {
      uint64_t v19 = [v8 accessoryUUID];
      [(HMDHome *)v11 _continuePairingAfterUserConsentWithAccessoryUUID:v19 orUnassociatedAccessory:0 message:v9];
    }
    else
    {
      [(HMDHome *)v11 _continuePairingAfterUserConsentWithAccessoryDescription:v8 progressHandlerDelegate:0 message:v9];
    }
  }
  else
  {
    if (v13)
    {
      uint64_t v20 = HMFGetLogIdentifier();
      uint64_t v21 = [v9 name];
      uint64_t v22 = [v9 identifier];
      id v23 = [v9 messagePayload];
      int v27 = 138544130;
      id v28 = v20;
      __int16 v29 = 2112;
      uint64_t v30 = v21;
      __int16 v31 = 2112;
      __int16 v32 = v22;
      __int16 v33 = 2112;
      uint64_t v34 = v23;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@User did not consent to Wi-Fi router replacement; cancelling adding new Wi-Fi router - message %@/%@/%@",
        (uint8_t *)&v27,
        0x2Au);
    }
    id v24 = [MEMORY[0x263F087E8] hmInternalErrorWithCode:1091];
    char v25 = +[HMDMatterAccessoryPairingEndContext hmContextWithCancelledError:v24];
    [(HMDHome *)v11 _cancelPairingWithAccessoryDescription:v8 context:v25];

    uint64_t v26 = [MEMORY[0x263F087E8] hmErrorWithCode:23];
    [v9 respondWithError:v26];
  }
}

- (void)_performRemoteAddHAPAccessories:(id)a3
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    id v9 = [v4 shortDescription];
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v41 = 2112;
    id v42 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@performRemoteAddHAPAccessories: %@", buf, 0x16u);
  }
  id v10 = [v4 messagePayload];
  unint64_t v11 = [v10 objectForKey:@"HMDSerializedAccessoriesMessageKey"];

  if (v11)
  {
    BOOL v12 = +[HMDStructuredReader readerFromObjectWithExtendedTypes:v11];
    BOOL v13 = HMDRemoteAddCodingModel();
    uint64_t v14 = [v13 decodeRootObjectFromReader:v12];

    if (v14)
    {
      uint64_t v15 = [v4 dictionaryForKey:@"HMDUpdatedHomeInfoMessageKey"];
      id v16 = objc_alloc(MEMORY[0x263F42520]);
      id v17 = [(HMDHome *)v6 workQueue];
      uint64_t v18 = (void *)[v16 initWithQueue:v17];

      uint64_t v19 = [(HMDHome *)v6 wiFiRouterAccessories];
      *(void *)buf = _HMFThreadLocalAsyncContextPush();
      uint64_t v20 = -[HMDHome _addAccessoriesUsingPrimaryAccessoryModel:updatedHomeInfo:message:](v6, v14, v15, v4);
      v36[0] = MEMORY[0x263EF8330];
      v36[1] = 3221225472;
      void v36[2] = __43__HMDHome__performRemoteAddHAPAccessories___block_invoke;
      void v36[3] = &unk_264A16640;
      v36[4] = v6;
      id v21 = v4;
      id v37 = v21;
      id v22 = v19;
      id v38 = v22;
      id v39 = v14;
      id v23 = [v20 then:v36];
      v34[0] = MEMORY[0x263EF8330];
      v34[1] = 3221225472;
      v34[2] = __43__HMDHome__performRemoteAddHAPAccessories___block_invoke_2;
      v34[3] = &unk_264A2C4C8;
      id v35 = v21;
      id v24 = (id)[v23 recover:v34];

      _HMFThreadLocalAsyncContextPop();
    }
    else
    {
      __int16 v29 = (void *)MEMORY[0x230FBD990]();
      uint64_t v30 = v6;
      __int16 v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        __int16 v32 = HMFGetLogIdentifier();
        __int16 v33 = [v12 error];
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v32;
        __int16 v41 = 2112;
        id v42 = v33;
        _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_ERROR, "%{public}@Failed to deserialize accessories in remote add request: %@", buf, 0x16u);
      }
      uint64_t v15 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      [v4 respondWithError:v15];
    }
  }
  else
  {
    char v25 = (void *)MEMORY[0x230FBD990]();
    uint64_t v26 = v6;
    int v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      id v28 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v28;
      _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@Received a nil serialized accessories value in remote add message payload", buf, 0xCu);
    }
    BOOL v12 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
    [v4 respondWithError:v12];
  }
}

uint64_t __43__HMDHome__performRemoteAddHAPAccessories___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) identifier];
  id v6 = [v4 retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:v5];

  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v10 = HMFGetLogIdentifier();
    unint64_t v11 = [*(id *)(a1 + 40) shortDescription];
    *(_DWORD *)buf = 138543874;
    uint64_t v34 = v10;
    __int16 v35 = 2112;
    uint64_t v36 = v6;
    __int16 v37 = 2112;
    id v38 = v11;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Retrieved and reset newly configured accessories: %@. Message: %@", buf, 0x20u);
  }
  [*(id *)(a1 + 32) _setupActiveNetworkRouterAccessory:v6 existingRouterAccessories:*(void *)(a1 + 48)];
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v12 = v6;
  uint64_t v13 = [v12 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v29;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v29 != v15) {
          objc_enumerationMutation(v12);
        }
        id v17 = *(id *)(*((void *)&v28 + 1) + 8 * v16);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        id v19 = v18;

        [v19 autoConfigureTargetController];
        ++v16;
      }
      while (v14 != v16);
      uint64_t v14 = [v12 countByEnumeratingWithState:&v28 objects:v32 count:16];
    }
    while (v14);
  }

  v26[0] = MEMORY[0x263EF8330];
  v26[1] = 3221225472;
  void v26[2] = __43__HMDHome__performRemoteAddHAPAccessories___block_invoke_1331;
  v26[3] = &unk_264A1D878;
  id v27 = *(id *)(a1 + 56);
  uint64_t v20 = objc_msgSend(v12, "hmf_objectPassingTest:", v26);
  if ([v20 requiresWaitingToBecomeReachableAfterRemoteAdd])
  {
    id v21 = [HMDRemotelyAddedAccessoryReachabilityObserver alloc];
    uint64_t v22 = *(void *)(a1 + 40);
    id v23 = [*(id *)(a1 + 32) workQueue];
    id v24 = [(HMDRemotelyAddedAccessoryReachabilityObserver *)v21 initWithAccessory:v20 message:v22 workQueue:v23];

    [(HMDRemotelyAddedAccessoryReachabilityObserver *)v24 start];
  }
  else
  {
    [*(id *)(a1 + 40) respondWithSuccess];
  }

  return 1;
}

uint64_t __43__HMDHome__performRemoteAddHAPAccessories___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t __43__HMDHome__performRemoteAddHAPAccessories___block_invoke_1331(uint64_t a1, void *a2)
{
  id v3 = [a2 uuid];
  id v4 = [*(id *)(a1 + 32) modelID];
  uint64_t v5 = [v3 isEqual:v4];

  return v5;
}

- (void)_handleRemoteAddHAPAccessories:(id)a3
{
  id v4 = a3;
  [(HMDHome *)self updateCATIDForUsersIfNeeded:1];
  uint64_t v5 = [(HMDHome *)self residentSyncManager];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  void v6[2] = __42__HMDHome__handleRemoteAddHAPAccessories___block_invoke;
  v6[3] = &unk_264A2F558;
  void v6[4] = self;
  [v5 interceptRemoteResidentRequest:v4 proceed:v6];
}

uint64_t __42__HMDHome__handleRemoteAddHAPAccessories___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _performRemoteAddHAPAccessories:a2];
}

- (void)_pairAccessoryWithAccessoryDescription:(id)a3 configuration:(id)a4 pairingEvent:(id)a5 progressHandler:(id)a6 requestMessage:(id)a7
{
  id v12 = a6;
  id v13 = a4;
  id v14 = a3;
  __createAccessoryBrowserAddAccessoryCompletionHandler(self, v14, v13, a5, a7);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v15 = [(HMDHome *)self accessoryBrowser];
  [v15 pairAccessoryWithDescription:v14 configuration:v13 progressHandler:v12 completionHandler:v16];
}

- (void)_continuePairingAfterUserConsentWithAccessoryDescription:(id)a3 progressHandlerDelegate:(id)a4 message:(id)a5
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  id v9 = a3;
  id v41 = a4;
  id v42 = a5;
  id v10 = (void *)MEMORY[0x230FBD990]();
  unint64_t v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v9;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Continue pairing after user consent with accessoryDescription %@", buf, 0x16u);
  }
  id v14 = objc_alloc_init(HMDUnpairedHAPAccessoryConfiguration);
  [(HMDUnpairedHAPAccessoryConfiguration *)v14 setRequiresUserConsent:1];
  uint64_t v15 = [(HMDHome *)v11 homeLocationHandler];
  id v16 = [v15 isoCountryCode];
  [(HMDUnpairedHAPAccessoryConfiguration *)v14 setIsoCountryCode:v16];

  id v17 = [(HMDHome *)v11 matterFabricID];
  [(HMDUnpairedHAPAccessoryConfiguration *)v14 setChipFabricID:v17];

  uint64_t v18 = [(HMDHome *)v11 uuid];
  [(HMDUnpairedHAPAccessoryConfiguration *)v14 setHomeUUID:v18];

  id v19 = +[HMDAccessoryPairingEvent pairingAccessoryWithDescription:v9 home:v11];
  if ([v19 isMatterAccessory]) {
    notifyMatterMetricPairingStep(v11, 2uLL);
  }
  uint64_t v43 = [v9 setupAccessoryPayload];
  id v20 = objc_alloc(MEMORY[0x263F424F0]);
  id v21 = NSString;
  uint64_t v22 = MEMORY[0x230FBBCF0](v11, a2);
  id v23 = [v21 stringWithFormat:@"%@, %s:%ld", v22, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 12018];
  id v24 = (void *)[v20 initWithName:v23];

  id v44 = v24;
  [v9 accessoryUUID];

  [v43 categoryNumber];
  [v19 linkType];
  id v25 = (id)HAPLinkTypeDescription();
  [v19 communicationProtocol];
  id v26 = (id)HAPCommunicationProtocolDescription();
  [v43 supportsWAC];
  id v27 = (id)HMFBooleanToString();
  [(HMDUnpairedHAPAccessoryConfiguration *)v14 requiresUserConsent];
  id v28 = (id)HMFBooleanToString();
  id v29 = HMDNetworkRouterSupportAsString([(HMDHome *)v11 networkRouterSupport]);
  id v30 = (id)objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[HMDHome networkRouterSupportDisableReason](v11, "networkRouterSupportDisableReason"));
  [v9 appIdentifier];

  [v19 isThreadAccessory];
  id v31 = (id)HMFBooleanToString();

  if (v41)
  {
    id v32 = v41;
    if (v11)
    {
      objc_initWeak(&location, v11);
      *(void *)buf = MEMORY[0x263EF8330];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __74__HMDHome_createLocalAddAccessoryProgressHandler_progressHandlerDelegate___block_invoke;
      long long v54 = &unk_264A16528;
      objc_copyWeak((id *)&v55[8], &location);
      *(void *)long long v55 = v32;
      int v40 = _Block_copy(buf);

      objc_destroyWeak((id *)&v55[8]);
      objc_destroyWeak(&location);
    }
    else
    {
      int v40 = 0;
    }
  }
  else
  {
    int v40 = HMDHomeCreateAddAccessoryProgressHandler(v11, v9, v42);
  }
  __int16 v33 = (void *)MEMORY[0x230FBD990]();
  uint64_t v34 = v11;
  __int16 v35 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    uint64_t v36 = HMFGetLogIdentifier();
    [v9 supportsWAC];
    __int16 v37 = HMFBooleanToString();
    id v38 = HMDNetworkRouterSupportAsString([(HMDHome *)v34 networkRouterSupport]);
    [(HMDHome *)v34 networkRouterSupportDisableReason];
    uint64_t v39 = HMNetworkRouterSupportDisableReasonAsString();
    *(_DWORD *)buf = 138544386;
    *(void *)&uint8_t buf[4] = v36;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2112;
    long long v54 = v37;
    *(_WORD *)long long v55 = 2112;
    *(void *)&v55[2] = v38;
    __int16 v56 = 2112;
    long long v57 = v39;
    _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_INFO, "%{public}@Adding unpaired accessory with description: %@, supports WAC: %@, network router support: %@ (Reason: %@)", buf, 0x34u);
  }
  if ([v9 supportsWAC]
    && ([(HMDHome *)v34 networkRouterSupport] & 8) != 0)
  {
    v45[0] = MEMORY[0x263EF8330];
    v45[1] = 3221225472;
    v45[2] = __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke;
    v45[3] = &unk_264A16618;
    v45[4] = v34;
    id v46 = v44;
    id v47 = v9;
    id v48 = v19;
    id v49 = v42;
    id v50 = v14;
    id v51 = v40;
    [(HMDHome *)v34 _createUniquePSKClientConfigurationWithRequestMessage:v49 pairingEvent:v48 completion:v45];
  }
  else
  {
    [v44 begin];
    *(void *)buf = v44;
    [(HMDHome *)v34 _pairAccessoryWithAccessoryDescription:v9 configuration:v14 pairingEvent:v19 progressHandler:v40 requestMessage:v42];
    __HMFActivityScopeLeave();
  }
}

void __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [a1[4] workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke_2;
  block[3] = &unk_264A27038;
  id v11 = a1[5];
  id v12 = a1[6];
  id v13 = v6;
  id v14 = a1[4];
  id v15 = a1[7];
  id v16 = a1[8];
  id v17 = a1[9];
  id v18 = v5;
  id v19 = a1[10];
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, block);
}

void __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke_2(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v2 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  [v2 accessoryUUID];

  [*(id *)(a1 + 48) domain];
  [*(id *)(a1 + 48) code];

  BOOL v4 = *(void *)(a1 + 48) == 0;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = *(id *)(a1 + 56);
  id v7 = HMFGetOSLogHandle();
  id v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      *(_DWORD *)id v14 = 138543362;
      *(void *)&void v14[4] = v13;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Client configuration with WiFi unique PSK created successfully", v14, 0xCu);
    }
    [*(id *)(a1 + 80) setNetworkCredential:*(void *)(a1 + 88)];
    [*(id *)(a1 + 64) setUsedWiFiPPSK:1];
    [*(id *)(a1 + 32) begin];
    *(void *)id v14 = *(id *)(a1 + 32);
    [*(id *)(a1 + 56) _pairAccessoryWithAccessoryDescription:*(void *)(a1 + 40) configuration:*(void *)(a1 + 80) pairingEvent:*(void *)(a1 + 64) progressHandler:*(void *)(a1 + 96) requestMessage:*(void *)(a1 + 72)];
    __HMFActivityScopeLeave();
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      *(_DWORD *)id v14 = 138543874;
      *(void *)&void v14[4] = v9;
      __int16 v15 = 2112;
      uint64_t v16 = v10;
      __int16 v17 = 2112;
      uint64_t v18 = v11;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate WiFi credential for accessory %@ with error: %@", v14, 0x20u);
    }
    id v12 = [*(id *)(a1 + 56) logEventSubmitter];
    [v12 submitLogEvent:*(void *)(a1 + 64) error:*(void *)(a1 + 48)];

    [*(id *)(a1 + 72) respondWithError:*(void *)(a1 + 48)];
    [*(id *)(a1 + 56) _removePendingAccessoryAdd:*(void *)(a1 + 40)];
  }
}

void __74__HMDHome_createLocalAddAccessoryProgressHandler_progressHandlerDelegate___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = WeakRetained;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    uint64_t v11 = HMSetupAccessoryProgressAsString();
    int v15 = 138543618;
    uint64_t v16 = v10;
    __int16 v17 = 2112;
    uint64_t v18 = v11;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Local add accessory progress handler called with progress: %@", (uint8_t *)&v15, 0x16u);
  }
  if (v8)
  {
    if (*(void *)(a1 + 32))
    {
      id v12 = [v5 accessoryUUID];

      if (a2 == 6)
      {
        if (v12)
        {
          id v13 = *(void **)(a1 + 32);
          id v14 = [v5 accessoryUUID];
          [v13 localAccessoryAddRequiresConsent:v14];
        }
      }
    }
  }
}

- (void)_handleAddAccessoryWithDescription:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 dataForKey:@"kAccessoryDescriptionDataKey"];
  id v13 = 0;
  id v6 = [(HMDHome *)self _setupDescriptionFromData:v5 error:&v13];
  id v7 = v13;
  if (v6)
  {
    -[HMDHome _handleAddAccessoryWithDescription:progressHandlerDelegate:message:]((id *)&self->super.super.isa, v6, 0, v4);
  }
  else
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = self;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      int v15 = v11;
      __int16 v16 = 2112;
      id v17 = v7;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive setup accessory description from accessory description data: %@", buf, 0x16u);
    }
    id v12 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v4 respondWithError:v12];
  }
}

- (void)_handleAddAccessoryWithDescription:(void *)a3 progressHandlerDelegate:(void *)a4 message:
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v53 = a3;
  id v8 = a4;
  id v9 = v8;
  if (a1)
  {
    if (([v8 isEntitledForSPIAccess] & 1) == 0)
    {
      uint64_t v36 = (void *)MEMORY[0x230FBD990]();
      __int16 v37 = a1;
      id v38 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        uint64_t v39 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        __int16 v56 = v39;
        _os_log_impl(&dword_22F52A000, v38, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to use SPI", buf, 0xCu);
      }
      id v14 = [MEMORY[0x263F087E8] hmErrorWithCode:17];
      [v9 respondWithError:v14];
      goto LABEL_31;
    }
    uint64_t v10 = [a1 accessories];
    unint64_t v11 = [v10 count];
    unint64_t v12 = maximumAccessoriesPerHome;

    if (v11 >= v12)
    {
      int v40 = (void *)MEMORY[0x230FBD990]();
      id v41 = a1;
      id v42 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        uint64_t v43 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        __int16 v56 = v43;
        _os_log_impl(&dword_22F52A000, v42, OS_LOG_TYPE_INFO, "%{public}@Can't add additional accessories; already at maximum accessories for home",
          buf,
          0xCu);
      }
      id v14 = [MEMORY[0x263F087E8] hmErrorWithCode:49];
      [v9 respondWithError:v14];
      goto LABEL_31;
    }
    id v54 = 0;
    int v52 = [a1 _shouldAllowAddingAccessoryWithDescription:v7 requestMessage:v9 error:&v54];
    id v13 = v54;
    id v14 = v13;
    if (v52) {
      goto LABEL_5;
    }
    id v44 = [v13 domain];
    if ([v44 isEqualToString:*MEMORY[0x263F0C710]])
    {
      BOOL v45 = [v14 code] == 97;

      if (v45)
      {
LABEL_5:
        int v15 = [v7 appIdentifier];
        BOOL v16 = v15 == 0;

        if (v16)
        {
          uint64_t v17 = [v9 clientIdentifier];
          uint64_t v18 = (void *)v17;
          if (v17) {
            uint64_t v19 = (__CFString *)v17;
          }
          else {
            uint64_t v19 = &stru_26E2EB898;
          }
          [v7 updateAppIdentifier:v19];
        }
        os_unfair_recursive_lock_lock_with_options();
        [a1[107] setObject:v9 forKey:v7];
        os_unfair_recursive_lock_unlock();
        id v20 = [a1 accessoryBrowser];
        id v21 = [v20 unpairedHAPAccessoryWithAccessoryDescription:v7];

        uint64_t v22 = [v21 category];
        if (!v22)
        {
          id v23 = (void *)MEMORY[0x263F0DF40];
          id v24 = [v7 setupAccessoryPayload];
          id v25 = [v24 categoryNumber];
          uint64_t v22 = [v23 categoryWithCategoryIdentifier:v25];
        }
        id v26 = [v21 uuid];
        HMDHomeCreateAddAccessoryProgressHandler(a1, v7, v9);
        id v27 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();

        id v28 = [HMDAddAccessoryProgressState alloc];
        id v29 = [v21 uuid];
        id v30 = [v21 name];
        id v31 = [(HMDAddAccessoryProgressState *)v28 initWithUUID:v29 accessoryName:v30 manufacturerName:0 category:v22 certificationStatus:0 productData:0];

        id v32 = [a1 accessoryBrowser];
        __int16 v33 = [v21 uuid];
        [v32 registerProgressHandler:v27 unpairedAccessoryUUID:v33];

        if (v52)
        {
          uint64_t v34 = [v7 accessoryUUID];

          if (v34)
          {
            __int16 v35 = [v7 accessoryUUID];
            [a1 _continuePairingAfterUserConsentWithAccessoryUUID:v35 orUnassociatedAccessory:0 message:v9];
          }
          else
          {
            [a1 _continuePairingAfterUserConsentWithAccessoryDescription:v7 progressHandlerDelegate:v53 message:v9];
          }
        }
        else
        {
          ((void (**)(void, uint64_t, HMDAddAccessoryProgressState *))v27)[2](v27, 9, v31);
        }

LABEL_31:
        goto LABEL_32;
      }
    }
    else
    {
    }
    id v46 = (void *)MEMORY[0x230FBD990]();
    id v47 = a1;
    id v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      id v49 = HMFGetLogIdentifier();
      id v50 = [v7 category];
      id v51 = [v50 localizedDescription];
      *(_DWORD *)buf = 138543874;
      __int16 v56 = v49;
      __int16 v57 = 2112;
      uint64_t v58 = v51;
      __int16 v59 = 2112;
      id v60 = v14;
      _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_INFO, "%{public}@Cannot add an accessory of category '%@', error %@", buf, 0x20u);
    }
    [v9 respondWithError:v14];
    goto LABEL_31;
  }
LABEL_32:
}

- (void)_testOnlyAddMediaAccessory:(id)a3 message:(id)a4
{
}

- (void)_addMediaAccessory:(void *)a3 message:
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = [v5 identifier];
    int v8 = [v7 isEqualToString:@"00000000-0000-0000-0000-C2EE6102B308"];

    if (v8)
    {
      id v9 = (void *)MEMORY[0x230FBD990]();
      id v10 = a1;
      unint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        unint64_t v12 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v5;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@The accessory %@ has an unknown media route identifier", buf, 0x16u);
      }
      id v13 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:9001];
      [v6 respondWithError:v13];
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v34 = &v33;
      uint64_t v35 = 0x2020000000;
      uint64_t v36 = 0;
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      int v40 = __Block_byref_object_copy__14257;
      id v41 = __Block_byref_object_dispose__14258;
      id v42 = 0;
      id v14 = [a1 appleMediaAccessories];
      v29[0] = MEMORY[0x263EF8330];
      v29[1] = 3221225472;
      v29[2] = __38__HMDHome__addMediaAccessory_message___block_invoke;
      void v29[3] = &unk_264A165F0;
      id v15 = v5;
      id v30 = v15;
      id v31 = &v33;
      id v32 = buf;
      objc_msgSend(v14, "na_each:", v29);

      if (v34[3] >= 1)
      {
        uint64_t v16 = *(void *)(*(void *)&buf[8] + 40);
        if (v16) {
          objc_msgSend(a1, "_submitRemovalLogEventForAccessory:isLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:error:", v16, 0, 0, 1);
        }
      }
      uint64_t v17 = [a1 homeManager];
      uint64_t v18 = [v15 uuid];
      uint64_t v19 = [v17 accessorySetupMetricDispatcherForAccessoryUUID:v18];

      id v20 = [v15 serialNumber];
      [v19 markRemoteAccessoryAddWillStart:v20];

      id v21 = [a1 administratorHandler];
      LODWORD(v18) = [v21 shouldRelayMessages];

      if (v18)
      {
        uint64_t v22 = (void *)MEMORY[0x230FBD990]();
        id v23 = a1;
        HMFGetOSLogHandle();
        id v24 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          id v25 = HMFGetLogIdentifier();
          *(_DWORD *)__int16 v37 = 138543362;
          id v38 = v25;
          _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@This is not the primary resident, so sending the add media accessory request to primary", v37, 0xCu);
        }
        v26[0] = MEMORY[0x263EF8330];
        v26[1] = 3221225472;
        void v26[2] = __38__HMDHome__addMediaAccessory_message___block_invoke_1314;
        v26[3] = &unk_264A2F2F8;
        void v26[4] = v23;
        id v27 = v15;
        id v28 = v6;
        -[HMDHome _remotelyAddMediaAccessory:usingRemoteMessageName:message:fallbackBlock:](v23, v27, @"HMDRemoteAddMediaAccessoryRequestMessage", v28, v26);
      }
      else
      {
        -[HMDHome _locallyAddMediaAccessory:message:](a1, v15, v6);
      }

      _Block_object_dispose(buf, 8);
      _Block_object_dispose(&v33, 8);
    }
  }
}

void __38__HMDHome__addMediaAccessory_message___block_invoke(uint64_t a1, void *a2)
{
  id v7 = a2;
  if ([v7 isHomePod])
  {
    id v4 = [*(id *)(a1 + 32) serialNumber];
    id v5 = [v7 serialNumber];
    int v6 = [v4 isEqualToString:v5];

    if (v6)
    {
      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
    }
  }
}

void __38__HMDHome__addMediaAccessory_message___block_invoke_1314(void **a1)
{
}

- (void)_remotelyAddMediaAccessory:(void *)a3 usingRemoteMessageName:(void *)a4 message:(void *)a5 fallbackBlock:
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    id v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = a1;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v73 = v16;
      __int16 v74 = 2112;
      id v75 = v9;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Remotely adding unassociated media accessory: %@", buf, 0x16u);
    }
    id v69 = 0;
    uint64_t v17 = [MEMORY[0x263F08910] archivedDataWithRootObject:v9 requiringSecureCoding:1 error:&v69];
    id v18 = v69;
    if (v17)
    {
      uint64_t v19 = (void *)MEMORY[0x263F08910];
      id v20 = [MEMORY[0x263F08C38] UUID];
      id v68 = v18;
      id v21 = [v19 archivedDataWithRootObject:v20 requiringSecureCoding:1 error:&v68];
      id v61 = v68;

      if (v21)
      {
        id v60 = v10;
        uint64_t v22 = v14[18];
        if (os_signpost_enabled(v22))
        {
          id v23 = v22;
          id v24 = [v9 uuid];
          *(_DWORD *)buf = 138412290;
          uint64_t v73 = v24;
          _os_signpost_emit_with_name_impl(&dword_22F52A000, v23, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "RemotelyAddAccessory", "accessoryUUID=%{signpost.description:attribute}@ ", buf, 0xCu);
        }
        id v25 = [v14 homeManager];
        uint64_t v58 = v9;
        id v26 = [v9 uuid];
        id v27 = [v25 accessorySetupMetricDispatcherForAccessoryUUID:v26];

        __int16 v56 = v27;
        [v27 markRemoteAccessoryAddStarted];
        id v28 = (void *)[v11 mutableCopy];
        [v28 setName:v10];
        id v29 = [v11 identifier];
        [v28 setIdentifier:v29];

        id v30 = [v11 untrustedClientIdentifier];

        __int16 v59 = v12;
        id v31 = v17;
        if (v30)
        {
          uint64_t v70 = *MEMORY[0x263F42008];
          id v32 = [v11 untrustedClientIdentifier];
          uint64_t v71 = v32;
          uint64_t v33 = [NSDictionary dictionaryWithObjects:&v71 forKeys:&v70 count:1];
          [v28 setHeaders:v33];
        }
        else
        {
          [v28 setHeaders:MEMORY[0x263EFFA78]];
        }
        id v44 = [HMDRemoteHomeMessageDestination alloc];
        BOOL v45 = [v11 destination];
        id v46 = [v45 target];
        id v47 = [v14 uuid];
        id v48 = [(HMDRemoteHomeMessageDestination *)v44 initWithTarget:v46 homeUUID:v47 queueTimeout:&unk_26E4746A8];
        [v28 setDestination:v48];

        id v49 = [v11 messagePayload];
        id v50 = (void *)[v49 mutableCopy];

        id v51 = v11;
        int v52 = v31;
        [v50 setObject:v31 forKey:@"kAccessoryEncodedMediaAccessoryKey"];
        [v50 setObject:v21 forKey:@"HMDEncodedResidentUUIDKey"];
        id v53 = (void *)[v50 copy];
        [v28 setMessagePayload:v53];

        v62[0] = MEMORY[0x263EF8330];
        v62[1] = 3221225472;
        void v62[2] = __83__HMDHome__remotelyAddMediaAccessory_usingRemoteMessageName_message_fallbackBlock___block_invoke;
        v62[3] = &unk_264A27430;
        id v9 = v58;
        void v62[4] = v14;
        id v63 = v56;
        id v64 = v58;
        id v65 = v51;
        id v66 = v59;
        unint64_t v67 = 0xEEEEB0B5B2B2EEEELL;
        id v57 = v56;
        [v28 setResponseHandler:v62];
        id v54 = [v14 residentSyncManager];
        long long v55 = (void *)[v28 copy];
        [v54 performResidentRequest:v55 options:0];

        id v12 = v59;
        uint64_t v17 = v52;
        id v11 = v51;

        id v10 = v60;
      }
      else
      {
        uint64_t v39 = (void *)MEMORY[0x230FBD990]();
        int v40 = v14;
        id v41 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v43 = id v42 = v10;
          *(_DWORD *)buf = 138543618;
          uint64_t v73 = v43;
          __int16 v74 = 2112;
          id v75 = v61;
          _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_ERROR, "%{public}@Failed to encode uuid for remotely add accessory %@", buf, 0x16u);

          id v10 = v42;
        }

        id v28 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
        [v11 respondWithError:v28];
      }

      id v18 = v61;
    }
    else
    {
      uint64_t v34 = (void *)MEMORY[0x230FBD990]();
      uint64_t v35 = v14;
      uint64_t v36 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v38 = id v37 = v10;
        *(_DWORD *)buf = 138543618;
        uint64_t v73 = v38;
        __int16 v74 = 2112;
        id v75 = v18;
        _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode media accessory %@", buf, 0x16u);

        id v10 = v37;
      }

      id v21 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      [v11 respondWithError:v21];
    }
  }
}

- (void)_locallyAddMediaAccessory:(void *)a3 message:
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  id v40 = a2;
  id v5 = a3;
  if (a1)
  {
    int v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = a1;
    int v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      id v10 = [v5 shortDescription];
      [v7 isCurrentDevicePrimaryResident];
      id v11 = HMFBooleanToString();
      *(_DWORD *)buf = 138544130;
      id v50 = v9;
      __int16 v51 = 2112;
      id v52 = v40;
      __int16 v53 = 2112;
      id v54 = v10;
      __int16 v55 = 2112;
      __int16 v56 = v11;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Performing local add of media accessory: %@. Message: %@ - isPrimaryResident: %@", buf, 0x2Au);
    }
    HMFGetOSLogHandle();
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v12))
    {
      id v13 = [v40 uuid];
      *(_DWORD *)buf = 138412290;
      id v50 = v13;
      _os_signpost_emit_with_name_impl(&dword_22F52A000, v12, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "AddAccessory", "accessoryUUID=%{signpost.description:attribute}@ ", buf, 0xCu);
    }
    id v14 = [v7 homeManager];
    id v15 = [v40 uuid];
    id v38 = [v14 accessorySetupMetricDispatcherForAccessoryUUID:v15];

    [v38 markLocalAccessoryAddStarted];
    uint64_t v39 = [v40 addTransactionForHome:v7];
    uint64_t v16 = [v7 roomForEntireHome];
    uint64_t v17 = [v16 uuid];
    id v18 = [v17 UUIDString];
    [v39 setRoomUUID:v18];

    uint64_t v19 = [v5 untrustedClientIdentifier];
    id v37 = +[HMDBackingStoreTransactionOptions defaultXPCOptionsWithClientIdentifier:v19];

    id v20 = [v7 backingStore];
    id v21 = [v5 name];
    uint64_t v22 = [v20 transaction:v21 options:v37];

    objc_initWeak(&location, v7);
    id v23 = (void *)[v5 mutableCopy];
    id v24 = (void *)MEMORY[0x263F08910];
    id v25 = [MEMORY[0x263F08C38] UUID];
    id v47 = 0;
    id v26 = [v24 archivedDataWithRootObject:v25 requiringSecureCoding:1 error:&v47];
    id v36 = v47;

    if (v26)
    {
      id v27 = [v5 messagePayload];
      id v28 = (void *)[v27 mutableCopy];

      [v28 setObject:v26 forKey:@"HMDEncodedResidentUUIDKey"];
      id v29 = (void *)[v28 copy];
      [v23 setMessagePayload:v29];

      v43[0] = MEMORY[0x263EF8330];
      v43[1] = 3221225472;
      v43[2] = __45__HMDHome__locallyAddMediaAccessory_message___block_invoke;
      v43[3] = &unk_264A2E890;
      id v44 = v5;
      objc_copyWeak(&v46, &location);
      id v30 = v40;
      id v45 = v30;
      [v23 setResponseHandler:v43];
      id v31 = (void *)[v23 copy];
      [v22 add:v39 withMessage:v31];

      v41[0] = MEMORY[0x263EF8330];
      v41[1] = 3221225472;
      v41[2] = __45__HMDHome__locallyAddMediaAccessory_message___block_invoke_2;
      v41[3] = &unk_264A2F370;
      v41[4] = v7;
      id v42 = v30;
      [v22 run:v41];
      if (os_signpost_enabled(v12))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_22F52A000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "AddAccessory", "", buf, 2u);
      }

      objc_destroyWeak(&v46);
    }
    else
    {
      id v32 = (void *)MEMORY[0x230FBD990]();
      id v33 = v7;
      HMFGetOSLogHandle();
      uint64_t v34 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v35 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v50 = v35;
        __int16 v51 = 2112;
        id v52 = v36;
        _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_ERROR, "%{public}@Failed to encode uuid for locally add accessory %@", buf, 0x16u);
      }
      id v28 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
      [v5 respondWithError:v28];
    }

    objc_destroyWeak(&location);
  }
}

void __45__HMDHome__locallyAddMediaAccessory_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    [a1[4] respondWithError:v5];
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained(a1 + 6);
    id v8 = a1[4];
    if (WeakRetained)
    {
      id v9 = [a1[4] dataForKey:@"HMDEncodedResidentUUIDKey"];
      id v26 = v9;
      if (v9)
      {
        id v27 = 0;
        id v9 = [MEMORY[0x263F08928] unarchivedObjectOfClass:objc_opt_class() fromData:v9 error:&v27];
        id v5 = v27;
      }
      else
      {
        id v5 = 0;
      }
      id v11 = a1[5];
      id v24 = v9;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v12 = v11;
      }
      else {
        id v12 = 0;
      }
      id v13 = v12;
      id v14 = [v13 device];
      if (v14)
      {
        id v15 = +[HMDCoreData sharedInstance];
        uint64_t v16 = [v15 contextWithRootPartition];

        v33[0] = MEMORY[0x263EF8330];
        v33[1] = 3221225472;
        void v33[2] = __75__HMDHome__associateResidentAndDeviceWithAddedMediaAccessory_residentUUID___block_invoke;
        v33[3] = &unk_264A2F2F8;
        v33[4] = WeakRetained;
        id v34 = v14;
        id v35 = v16;
        id v17 = v16;
        [v17 unsafeSynchronousBlock:v33];
      }
      id v18 = objc_msgSend(WeakRetained, "backingStore", v24);
      uint64_t v19 = [v18 context];
      v28[0] = MEMORY[0x263EF8330];
      v28[1] = 3221225472;
      void v28[2] = __75__HMDHome__associateResidentAndDeviceWithAddedMediaAccessory_residentUUID___block_invoke_2;
      void v28[3] = &unk_264A2E908;
      void v28[4] = WeakRetained;
      id v20 = v11;
      id v29 = v20;
      id v21 = v25;
      id v30 = v21;
      id v31 = v13;
      id v32 = v14;
      id v22 = v14;
      id v23 = v13;
      [v19 unsafeSynchronousBlock:v28];

      [a1[4] respondWithPayload:v6];
    }
    else
    {
      id v10 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2018];
      [v8 respondWithError:v10];

      id v5 = 0;
    }
  }
}

void __45__HMDHome__locallyAddMediaAccessory_message___block_invoke_2(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  id v3 = v2;
  if (v1)
  {
    id v4 = [v2 uuid];
    id v5 = [v1 accessoryWithUUID:v4];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v6 = v5;
    }
    else {
      id v6 = 0;
    }
    id v7 = v6;

    if ([v7 supportsTargetControl])
    {
      int v8 = 1;
    }
    else
    {
      id v9 = v3;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v10 = v9;
      }
      else {
        id v10 = 0;
      }
      id v11 = v10;

      id v12 = [v11 device];

      id v13 = [v12 capabilities];
      int v8 = [v13 supportsTargetControl];
    }
    id v14 = (void *)MEMORY[0x230FBD990]();
    id v15 = v1;
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      id v17 = HMFGetLogIdentifier();
      id v18 = [v7 shortDescription];
      [v7 supportsTargetControl];
      uint64_t v19 = HMFBooleanToString();
      id v20 = HMFBooleanToString();
      int v24 = 138544130;
      id v25 = v17;
      __int16 v26 = 2112;
      id v27 = v18;
      __int16 v28 = 2112;
      id v29 = v19;
      __int16 v30 = 2112;
      id v31 = v20;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Checking for auto-Configuring current target controllers with the newly added media accessory: %@ (%@/%@)", (uint8_t *)&v24, 0x2Au);
    }
    if (v8)
    {
      id v21 = [MEMORY[0x263F42608] sharedPreferences];
      id v22 = [v21 preferenceForKey:@"autoConfigureNewTargets"];
      int v23 = [v22 BOOLValue];

      if (v23) {
        [v7 autoConfigureTargetControllers];
      }
    }
  }
}

void __75__HMDHome__associateResidentAndDeviceWithAddedMediaAccessory_residentUUID___block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  if (v2)
  {
    id v25 = v3;
    id v4 = [v3 identifier];
    id v5 = +[HMCContext findDeviceWithDeviceIdentifier:v4];

    if (v5)
    {
LABEL_3:
      [v25 updateBackingModel:v5 error:0];

      id v6 = *(void **)(a1 + 48);
      [v6 save];
      return;
    }
    id v7 = +[HMDAppleAccountManager sharedManager];
    int v8 = [v7 account];

    if (v8)
    {
      id v9 = [v8 modelIdentifier];
      id v10 = +[HMCContext findAccountWithModelID:v9];

      if (v10)
      {
        id v11 = (void *)MEMORY[0x230FBD990]([v25 setAccount:v8]);
        id v12 = v2;
        id v13 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          id v14 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v27 = v14;
          __int16 v28 = 2112;
          id v29 = v25;
          _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Creating MKFDevice for incoming accessory %@", buf, 0x16u);
        }
        id v15 = [v25 modelIdentifier];
        id v5 = [v10 materializeOrCreateDevicesRelationWithModelID:v15 createdNew:0];

        goto LABEL_3;
      }
      id v21 = (void *)MEMORY[0x230FBD990]();
      id v22 = v2;
      int v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        int v24 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v27 = v24;
        __int16 v28 = 2112;
        id v29 = v8;
        _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@MKFAccount not found for account %@", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v16 = (void *)MEMORY[0x230FBD990]();
      id v17 = v2;
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = HMFGetLogIdentifier();
        id v20 = [v25 identifier];
        *(_DWORD *)buf = 138543618;
        id v27 = v19;
        __int16 v28 = 2112;
        id v29 = v20;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@No MKFDevice found with identifier %@ and no HMDAccount available to create one", buf, 0x16u);
      }
    }

    return;
  }
}

void __75__HMDHome__associateResidentAndDeviceWithAddedMediaAccessory_residentUUID___block_invoke_2(uint64_t a1)
{
  v82[1] = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) uuid];
  id v3 = +[HMCContext findHomeWithModelID:v2];

  id v4 = [*(id *)(a1 + 40) uuid];
  id v5 = +[HMCContext findAppleMediaAccessoryWithModelID:v4];
  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = *(id *)(a1 + 32);
  int v8 = HMFGetOSLogHandle();
  id v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v75 = v10;
      __int16 v76 = 2112;
      uint64_t v77 = (uint64_t)v5;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Creating resident object for newly added accessory: %@", buf, 0x16u);
    }
    char v73 = 0;
    id v11 = (void *)MEMORY[0x263F08C38];
    id v12 = [*(id *)(a1 + 32) uuid];
    id v13 = [v4 UUIDString];
    v82[0] = v13;
    id v14 = [MEMORY[0x263EFF8C0] arrayWithObjects:v82 count:1];
    id v15 = objc_msgSend(v11, "hm_deriveUUIDFromBaseUUID:withSalts:", v12, v14);

    uint64_t v16 = (void *)MEMORY[0x230FBD990]();
    id v17 = *(id *)(a1 + 32);
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      id v20 = *(void **)(a1 + 48);
      id v21 = @"random";
      *(_DWORD *)buf = 138543874;
      id v75 = v19;
      if (!v20) {
        id v21 = @"derived";
      }
      __int16 v76 = 2112;
      if (!v20) {
        id v20 = v15;
      }
      uint64_t v77 = (uint64_t)v21;
      __int16 v78 = 2112;
      __int16 v79 = v20;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Create resident with %@ UUID: %@", buf, 0x20u);
    }
    if (*(void *)(a1 + 48)) {
      id v22 = *(void **)(a1 + 48);
    }
    else {
      id v22 = v15;
    }
    int v23 = [v3 materializeOrCreateResidentsRelationWithModelID:v22 createdNew:&v73];
    [v23 setAppleMediaAccessory:v5];
    int v24 = [*(id *)(a1 + 56) rawResidentCapabilities];
    [v23 setResidentCapabilities:v24];

    id v25 = [*(id *)(a1 + 32) accessoryWithUUID:v4];
    __int16 v26 = [v25 name];
    [v23 setName:v26];

    uint64_t v27 = [v5 idsIdentifier];
    id v72 = v3;
    if (v27)
    {
      __int16 v28 = (void *)v27;
      id v29 = [v23 idsIdentifier];

      if (!v29)
      {
        uint64_t v30 = (void *)MEMORY[0x230FBD990]();
        id v31 = *(id *)(a1 + 32);
        uint64_t v32 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          id v33 = HMFGetLogIdentifier();
          id v34 = [v5 idsIdentifier];
          *(_DWORD *)buf = 138544130;
          id v75 = v33;
          __int16 v76 = 2160;
          uint64_t v77 = 1752392040;
          __int16 v78 = 2112;
          __int16 v79 = v34;
          __int16 v80 = 2112;
          id v81 = v5;
          _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_DEFAULT, "%{public}@Setting IDS identifier=%{mask.hash}@ from accessory: %@", buf, 0x2Au);

          id v3 = v72;
        }

        id v35 = [v5 idsIdentifier];
        [v23 setIdsIdentifier:v35];
      }
    }
    id v36 = [v5 pairingIdentity];

    if (v36)
    {
      id v37 = (void *)MEMORY[0x230FBD990]();
      id v38 = *(id *)(a1 + 32);
      uint64_t v39 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        id v40 = HMFGetLogIdentifier();
        id v41 = [v5 pairingIdentity];
        *(_DWORD *)buf = 138543874;
        id v75 = v40;
        __int16 v76 = 2112;
        uint64_t v77 = (uint64_t)v41;
        __int16 v78 = 2112;
        __int16 v79 = v5;
        _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@Setting pairingIdentity=%@ from accessory: %@", buf, 0x20u);

        id v3 = v72;
      }

      id v42 = [v5 pairingIdentity];
      [v23 setPairingIdentity:v42];
    }
    uint64_t v43 = [v5 deviceIRKData];

    if (v43)
    {
      id v44 = (void *)MEMORY[0x230FBD990]();
      id v45 = *(id *)(a1 + 32);
      id v46 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        id v47 = HMFGetLogIdentifier();
        id v48 = [v5 deviceIRKData];
        *(_DWORD *)buf = 138543874;
        id v75 = v47;
        __int16 v76 = 2112;
        uint64_t v77 = (uint64_t)v48;
        __int16 v78 = 2112;
        __int16 v79 = v5;
        _os_log_impl(&dword_22F52A000, v46, OS_LOG_TYPE_DEFAULT, "%{public}@Setting deviceIRKData=%@ from accessory: %@", buf, 0x20u);

        id v3 = v72;
      }

      id v49 = [v5 deviceIRKData];
      [v23 setDeviceIRKData:v49];
    }
    id v50 = *(void **)(a1 + 64);
    if (v50)
    {
      __int16 v51 = [v50 identifier];
      id v52 = +[HMCContext findDeviceWithDeviceIdentifier:v51];

      if (v52)
      {
        __int16 v53 = (void *)MEMORY[0x230FBD990]();
        id v54 = *(id *)(a1 + 32);
        __int16 v55 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
        {
          __int16 v56 = HMFGetLogIdentifier();
          uint64_t v57 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 138544130;
          id v75 = v56;
          __int16 v76 = 2112;
          uint64_t v77 = v57;
          __int16 v78 = 2112;
          __int16 v79 = v5;
          __int16 v80 = 2112;
          id v81 = v23;
          _os_log_impl(&dword_22F52A000, v55, OS_LOG_TYPE_INFO, "%{public}@Setting device %@ on accessory model: %@, resident model: %@", buf, 0x2Au);

          id v3 = v72;
        }

        [v5 setDevice:v52];
        [v23 setDevice:v52];
      }
      uint64_t v58 = [*(id *)(a1 + 64) idsIdentifier];
      if (v58)
      {
        __int16 v59 = (void *)MEMORY[0x230FBD990]();
        id v60 = *(id *)(a1 + 32);
        id v61 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          id v62 = v70 = v15;
          *(_DWORD *)buf = 138544130;
          id v75 = v62;
          __int16 v76 = 2160;
          uint64_t v77 = 1752392040;
          __int16 v78 = 2112;
          __int16 v79 = v58;
          __int16 v80 = 2112;
          id v81 = v5;
          _os_log_impl(&dword_22F52A000, v61, OS_LOG_TYPE_DEFAULT, "%{public}@Setting IDS identifier=%{mask.hash}@ for newly added accessory: %@", buf, 0x2Au);

          id v15 = v70;
        }

        [v5 setIdsIdentifier:v58];
        [v23 setIdsIdentifier:v58];
        id v3 = v72;
      }
      id v63 = [*(id *)(a1 + 64) globalDestination];
      if (v63)
      {
        id v64 = (void *)MEMORY[0x230FBD990]();
        id v65 = *(id *)(a1 + 32);
        id v66 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          unint64_t v67 = v71 = v15;
          *(_DWORD *)buf = 138544130;
          id v75 = v67;
          __int16 v76 = 2160;
          uint64_t v77 = 1752392040;
          __int16 v78 = 2112;
          __int16 v79 = v63;
          __int16 v80 = 2112;
          id v81 = v5;
          _os_log_impl(&dword_22F52A000, v66, OS_LOG_TYPE_DEFAULT, "%{public}@Setting IDS destination=%{mask.hash}@ for newly added accessory: %@", buf, 0x2Au);

          id v15 = v71;
        }

        [v5 setIdsDestination:v63];
        [v23 setIdsDestination:v63];
        id v3 = v72;
      }
    }
    id v68 = +[HMCContext currentContext];
    [v68 save];
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v69 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v75 = v69;
      __int16 v76 = 2112;
      uint64_t v77 = (uint64_t)v4;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Unable to find newly added accessory with UUID %@", buf, 0x16u);
    }
  }
}

void __83__HMDHome__remotelyAddMediaAccessory_usingRemoteMessageName_message_fallbackBlock___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    id v34 = v10;
    __int16 v35 = 2112;
    id v36 = v6;
    __int16 v37 = 2112;
    id v38 = v5;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Resident responded with : %@, %@", buf, 0x20u);
  }
  uint64_t v11 = [*(id *)(a1 + 40) markRemoteAccessoryAddEndedWithError:v5];
  if (v5)
  {
    id v12 = (void *)MEMORY[0x230FBD990](v11);
    id v13 = *(id *)(a1 + 32);
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = HMFGetLogIdentifier();
      uint64_t v16 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      id v34 = v15;
      __int16 v35 = 2112;
      id v36 = v16;
      __int16 v37 = 2112;
      id v38 = v5;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while adding accessory [%@] on resident : %@", buf, 0x20u);
    }
    if (HMDIsAllowedFallbackRemoteError(v5)
      && ([*(id *)(a1 + 32) administratorHandler],
          id v17 = objc_claimAutoreleasedReturnValue(),
          int v18 = [v17 allowLocalFallbackForMessage:*(void *)(a1 + 56)],
          v17,
          v18))
    {
      uint64_t v19 = [*(id *)(a1 + 32) deviceHomeKitSetupSession];
      [v19 markHasFailedRelayAttempt];

      id v20 = (void *)MEMORY[0x230FBD990]();
      id v21 = *(id *)(a1 + 32);
      id v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        int v23 = HMFGetLogIdentifier();
        int v24 = [*(id *)(a1 + 56) shortDescription];
        *(_DWORD *)buf = 138543874;
        id v34 = v23;
        __int16 v35 = 2114;
        id v36 = v24;
        __int16 v37 = 2112;
        id v38 = v5;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Allowing local fallback processing of message %{public}@ due to error: %@", buf, 0x20u);
      }
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
    else
    {
      [*(id *)(a1 + 56) respondWithError:v5];
    }
  }
  else
  {
    id v25 = [*(id *)(a1 + 32) backingStore];
    __int16 v26 = [v25 context];
    v29[0] = MEMORY[0x263EF8330];
    v29[1] = 3221225472;
    v29[2] = __83__HMDHome__remotelyAddMediaAccessory_usingRemoteMessageName_message_fallbackBlock___block_invoke_1316;
    void v29[3] = &unk_264A2AA20;
    void v29[4] = *(void *)(a1 + 32);
    id v30 = *(id *)(a1 + 48);
    id v27 = *(id *)(a1 + 56);
    uint64_t v28 = *(void *)(a1 + 72);
    id v31 = v27;
    uint64_t v32 = v28;
    [v26 performBlock:v29];
  }
}

void __83__HMDHome__remotelyAddMediaAccessory_usingRemoteMessageName_message_fallbackBlock___block_invoke_1316(uint64_t a1)
{
  v18[1] = *MEMORY[0x263EF8340];
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) uuid];
  id v4 = [v2 accessoryWithUUID:v3];

  if (v4)
  {
    id v5 = *(void **)(a1 + 32);
    v18[0] = v4;
    id v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:v18 count:1];
    [v5 _notifyClientOfNewlyAddedAccessories:v6 requestMessage:*(void *)(a1 + 48)];
  }
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    int v14 = 138543618;
    id v15 = v10;
    __int16 v16 = 2112;
    id v17 = v4;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Successfully remote added accessory : %@", (uint8_t *)&v14, 0x16u);
  }
  uint64_t v11 = *(id *)(*(void *)(a1 + 32) + 144);
  id v12 = v11;
  os_signpost_id_t v13 = *(void *)(a1 + 56);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(v14) = 0;
    _os_signpost_emit_with_name_impl(&dword_22F52A000, v12, OS_SIGNPOST_INTERVAL_END, v13, "RemotelyAddAccessory", "", (uint8_t *)&v14, 2u);
  }

  [*(id *)(a1 + 48) respondWithSuccess];
}

- (void)_removePendingAccessoryAdd:(id)a3
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 accessoryUUID];
  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    id v10 = [v5 UUIDString];
    int v11 = 138543618;
    id v12 = v9;
    __int16 v13 = 2112;
    int v14 = v10;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Removing accessoryDescription, setupCode and handlers for accessory %@", (uint8_t *)&v11, 0x16u);
  }
  os_unfair_recursive_lock_lock_with_options();
  [(NSMapTable *)v7->_addPendingAccessories removeObjectForKey:v4];
  if (v5)
  {
    [(NSMutableDictionary *)v7->_addPendingAccessorySetupCodeHandlers removeObjectForKey:v5];
    [(NSMutableDictionary *)v7->_addPendingAccessorySetupCodes removeObjectForKey:v5];
    [(NSMutableDictionary *)v7->_addPendingAccessoryOnboardingSetupPayloadStrings removeObjectForKey:v5];
  }
  os_unfair_recursive_lock_unlock();
}

- (void)_accessoryPairingDidComplete:(id)a3 configuration:(id)a4 pairingEvent:(id)a5 accessoryServer:(id)a6 certificationStatus:(int64_t)a7 requestMessage:(id)a8
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v32 = a4;
  id v15 = a5;
  id v16 = a6;
  id v33 = a8;
  [(HMDHome *)self _removePendingAccessoryAdd:v14];
  id v17 = v16;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  id v19 = v18;

  id v31 = v19;
  id v20 = 0;
  if ([v19 isWacComplete])
  {
    id v21 = (void *)MEMORY[0x230FBD990]();
    id v22 = self;
    int v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      int v24 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v41 = v24;
      _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@WAC was completed as part of accessory pairing.", buf, 0xCu);
    }
    id v20 = [v32 networkCredential];
  }
  if ([v15 isMatterAccessory]) {
    notifyMatterMetricPairingStep(self, 0x18uLL);
  }
  id v25 = [MEMORY[0x263F424F0] currentActivity];
  objc_initWeak((id *)buf, self);
  __int16 v26 = [v14 accessoryUUID];
  v34[0] = MEMORY[0x263EF8330];
  v34[1] = 3221225472;
  v34[2] = __118__HMDHome__accessoryPairingDidComplete_configuration_pairingEvent_accessoryServer_certificationStatus_requestMessage___block_invoke;
  v34[3] = &unk_264A165A0;
  objc_copyWeak(v39, (id *)buf);
  id v27 = v17;
  id v35 = v27;
  id v28 = v15;
  id v36 = v28;
  id v29 = v14;
  id v37 = v29;
  id v30 = v25;
  id v38 = v30;
  v39[1] = (id)a7;
  [(HMDHome *)self _processAccessoriesToAddForUnpairedAccessory:v26 certificationStatus:a7 accessoryServer:v27 networkCredential:v20 pairingEvent:v28 message:v33 completionHandler:v34];

  objc_destroyWeak(v39);
  objc_destroyWeak((id *)buf);
}

void __118__HMDHome__accessoryPairingDidComplete_configuration_pairingEvent_accessoryServer_certificationStatus_requestMessage___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v5 = [WeakRetained _primaryAccessoryForServer:*(void *)(a1 + 32)];
  uint64_t v27 = 0;
  id v6 = [v5 preferredHAPAccessoryForOperation:1 linkType:&v27];
  id v7 = [*(id *)(a1 + 32) pairingMetricDictionary];
  id v8 = (void *)[v7 copy];
  [*(id *)(a1 + 40) setMatterMetrics:v8];

  [*(id *)(a1 + 32) clearPairingMetrics];
  [*(id *)(a1 + 40) updateEventPropertiesWithPairedAccessory:v5];
  if ([*(id *)(a1 + 40) isMatterAccessory]
    && [*(id *)(a1 + 40) isAddOperation])
  {
    if (v3) {
      +[HMDMatterAccessoryPairingEndContext hmdContextWithStep:24 error:v3];
    }
    else {
    id v9 = +[HMDMatterAccessoryPairingEndContext pairingCompletedContext];
    }
    notifyMatterMetricPairingEnded(WeakRetained, v9);
  }
  else
  {
    id v9 = [WeakRetained logEventSubmitter];
    [v9 submitLogEvent:*(void *)(a1 + 40) error:v3];
  }

  id v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = WeakRetained;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    __int16 v13 = HMFGetLogIdentifier();
    id v14 = [*(id *)(a1 + 48) accessoryName];
    *(_DWORD *)buf = 138543618;
    id v29 = v13;
    __int16 v30 = 2112;
    id v31 = v14;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@_handleAddAccessory: added accessories for accessory %@", buf, 0x16u);
  }
  id v15 = [v5 metricLoggingVendorDetails];
  id v16 = [v6 server];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v17 = v16;
  }
  else {
    id v17 = 0;
  }
  id v18 = v17;

  id v19 = *(void **)(a1 + 48);
  id v20 = *(id *)(a1 + 56);
  [v19 accessoryUUID];

  [*(id *)(a1 + 32) category];
  [v15 model];

  [v15 manufacturer];
  [v15 firmwareVersion];

  id v21 = (id)HAPLinkTypeDescription();
  [v18 isWacAccessory];

  id v22 = (id)HMFBooleanToString();
  id v23 = (id)[NSNumber numberWithInteger:*(void *)(a1 + 72)];
  [*(id *)(a1 + 40) isThreadAccessory];
  id v24 = (id)HMFBooleanToString();
  [*(id *)(a1 + 40) accessorySupportsWoL];

  id v25 = (id)HMFBooleanToString();
  __int16 v26 = [v11 homeLocationHandler];
  [v26 updateHomeLocation];

  [v11 _evaluateShouldRelaunchAndSetRelaunch];
}

- (void)_pairAccessoryWithAccessoryDescription:(id)a3 unpairedAccessory:(id)a4 configuration:(id)a5 pairingEvent:(id)a6 requestMessage:(id)a7
{
  id v12 = a7;
  id v13 = a6;
  id v14 = a5;
  id v15 = a4;
  id v16 = a3;
  id v18 = [(HMDHome *)self accessoryBrowser];
  id v17 = __createAccessoryBrowserAddAccessoryCompletionHandler(self, v16, v14, v13, v12);

  [v18 pairAccessory:v15 configuration:v14 completionHandler:v17];
}

- (void)_continuePairingAfterUserConsentWithAccessoryUUID:(id)a3 orUnassociatedAccessory:(id)a4 message:(id)a5
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v93 = a5;
  id v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v8;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Continue pairing after user consent with accessoryUUID %@", buf, 0x16u);
  }
  if (v9) {
    goto LABEL_5;
  }
  id v14 = [(HMDHome *)v11 accessoryBrowser];
  id v15 = [v14 unassociatedAccessories];
  objc_msgSend(v15, "hmf_firstObjectWithUUID:", v8);
  id v9 = (id)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
LABEL_5:
    id v92 = v9;
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass) {
      id v17 = v92;
    }
    else {
      id v17 = 0;
    }
    id v91 = v17;

    if (isKindOfClass)
    {
      long long v104 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v101 = 0u;
      id v18 = [(HMDHome *)v11 addPendingAccessories];
      id v19 = objc_msgSend(v18, "hm_allKeys");

      uint64_t v20 = [v19 countByEnumeratingWithState:&v101 objects:v106 count:16];
      if (v20)
      {
        uint64_t v21 = *(void *)v102;
        while (2)
        {
          for (uint64_t i = 0; i != v20; ++i)
          {
            if (*(void *)v102 != v21) {
              objc_enumerationMutation(v19);
            }
            id v23 = *(void **)(*((void *)&v101 + 1) + 8 * i);
            id v24 = [v23 accessoryUUID];
            int v25 = [v24 isEqual:v8];

            if (v25)
            {
              id v90 = v23;
              id v33 = [(HMDHome *)v11 addPendingAccessories];
              uint64_t v34 = [v33 objectForKey:v90];

              id v93 = (id)v34;
              goto LABEL_27;
            }
          }
          uint64_t v20 = [v19 countByEnumeratingWithState:&v101 objects:v106 count:16];
          if (v20) {
            continue;
          }
          break;
        }
      }
      id v90 = 0;
LABEL_27:

      __int16 v88 = [v93 stringForKey:@"kAccessoryPairingPasswordKey"];
      if (v88)
      {
        id v35 = (void *)MEMORY[0x230FBD990]();
        id v36 = v11;
        id v37 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          id v38 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          *(void *)&uint8_t buf[4] = v38;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v91;
          _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@Storing setupCode accessory %@", buf, 0x16u);
        }
        uint64_t v39 = [(HMDHome *)v36 addPendingAccessorySetupCodes];
        [v39 setObject:v88 forKey:v8];
      }
      else
      {
        __int16 v88 = [v90 setupCode];
      }
      uint64_t v43 = [v90 appIdentifier];
      uint64_t v89 = +[HMDAccessoryPairingEvent pairingAccessory:home:appIdentifier:retry:](HMDAccessoryPairingEvent, "pairingAccessory:home:appIdentifier:retry:", v91, v11, v43, [v90 retry]);

      if ([v89 isMatterAccessory]) {
        notifyMatterMetricPairingStep(v11, 2uLL);
      }
      id v44 = objc_alloc_init(HMDUnpairedHAPAccessoryConfiguration);
      [(HMDUnpairedHAPAccessoryConfiguration *)v44 setSetupCode:v88];
      id v45 = [(HMDHome *)v11 _setupCodeProviderForMessage:v93];
      [(HMDUnpairedHAPAccessoryConfiguration *)v44 setSetupCodeProvider:v45];

      id v46 = [(HMDHome *)v11 homeLocationHandler];
      id v47 = [v46 isoCountryCode];
      [(HMDUnpairedHAPAccessoryConfiguration *)v44 setIsoCountryCode:v47];

      id v48 = [(HMDHome *)v11 matterFabricID];
      [(HMDUnpairedHAPAccessoryConfiguration *)v44 setChipFabricID:v48];

      id v49 = [(HMDHome *)v11 uuid];
      [(HMDUnpairedHAPAccessoryConfiguration *)v44 setHomeUUID:v49];

      id v50 = [v91 preferredAccessoryServer];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        __int16 v51 = v50;
      }
      else {
        __int16 v51 = 0;
      }
      id v87 = v51;

      id v52 = (void *)MEMORY[0x230FBD990]();
      __int16 v53 = v11;
      id v54 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
      {
        __int16 v55 = HMFGetLogIdentifier();
        __int16 v56 = [v8 UUIDString];
        [v87 isWacNeeded];
        uint64_t v57 = HMFBooleanToString();
        uint64_t v58 = HMDNetworkRouterSupportAsString([(HMDHome *)v53 networkRouterSupport]);
        [(HMDHome *)v53 networkRouterSupportDisableReason];
        __int16 v59 = HMNetworkRouterSupportDisableReasonAsString();
        *(_DWORD *)buf = 138544386;
        *(void *)&uint8_t buf[4] = v55;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v56;
        *(_WORD *)&buf[22] = 2112;
        uint64_t v108 = v57;
        *(_WORD *)uint64_t v109 = 2112;
        *(void *)&v109[2] = v58;
        *(_WORD *)&v109[10] = 2112;
        *(void *)&v109[12] = v59;
        _os_log_impl(&dword_22F52A000, v54, OS_LOG_TYPE_INFO, "%{public}@Adding unpaired accessory with uuid: %@, WAC needed: %@, network router support: %@ (Reason %@)", buf, 0x34u);
      }
      id v60 = [MEMORY[0x263F424F0] currentActivity];
      [v90 accessoryUUID];

      id v61 = [v91 preferredAccessoryServer];
      [v61 category];

      id v62 = HMDNetworkRouterSupportAsString([(HMDHome *)v53 networkRouterSupport]);
      id v63 = (id)objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[HMDHome networkRouterSupportDisableReason](v53, "networkRouterSupportDisableReason"));
      [v89 linkType];
      id v64 = (id)HAPLinkTypeDescription();
      [v89 communicationProtocol];
      id v65 = (id)HAPCommunicationProtocolDescription();
      [v87 isWacNeeded];
      id v66 = (id)HMFBooleanToString();
      [(HMDUnpairedHAPAccessoryConfiguration *)v44 requiresUserConsent];
      id v67 = (id)HMFBooleanToString();
      [v90 appIdentifier];

      [v89 isThreadAccessory];
      id v68 = (id)HMFBooleanToString();
      if ([v87 isWacNeeded]
        && ([(HMDHome *)v53 networkRouterSupport] & 8) != 0)
      {
        v94[0] = MEMORY[0x263EF8330];
        v94[1] = 3221225472;
        v94[2] = __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke;
        v94[3] = &unk_264A16578;
        void v94[4] = v53;
        id v95 = v60;
        id v96 = v90;
        id v97 = v89;
        id v98 = v93;
        id v99 = v44;
        id v100 = v91;
        [(HMDHome *)v53 _createUniquePSKClientConfigurationWithRequestMessage:v98 pairingEvent:v97 completion:v94];
      }
      else
      {
        objc_msgSend(v60, "begin", v87);
        *(void *)buf = v60;
        [(HMDHome *)v53 _pairAccessoryWithAccessoryDescription:v90 unpairedAccessory:v91 configuration:v44 pairingEvent:v89 requestMessage:v93];
        __HMFActivityScopeLeave();
      }
    }
    else
    {
      id v92 = v92;
      id v93 = v93;
      if (v11)
      {
        objc_initWeak(&location, v11);
        id v26 = v92;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v27 = v26;
        }
        else {
          uint64_t v27 = 0;
        }
        id v28 = v27;

        if (v28)
        {
          id v29 = (void *)MEMORY[0x230FBD990]();
          __int16 v30 = v11;
          HMFGetOSLogHandle();
          id v31 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v32 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            *(void *)&uint8_t buf[4] = v32;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v28;
            _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Starting WAC for %@", buf, 0x16u);
          }
          *(void *)buf = MEMORY[0x263EF8330];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke;
          uint64_t v108 = &unk_264A165C8;
          objc_copyWeak((id *)&v109[16], &location);
          *(void *)uint64_t v109 = v93;
          *(void *)&v109[8] = v28;
          [*(id *)&v109[8] startConfigurationWithCompletionHandler:buf];

          objc_destroyWeak((id *)&v109[16]);
        }
        else
        {
          id v40 = v26;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v41 = v40;
          }
          else {
            id v41 = 0;
          }
          id v42 = v41;

          if (v42)
          {
            -[HMDHome _addAndMaybeAssociateMediaAccessory:message:](v11, v42, v93);
          }
          else
          {
            BOOL v82 = (void *)MEMORY[0x230FBD990]();
            id v83 = v11;
            HMFGetOSLogHandle();
            id v84 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v85 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              *(void *)&uint8_t buf[4] = v85;
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&buf[14] = v40;
              _os_log_impl(&dword_22F52A000, v84, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to add unknown unassociated accessory: %@", buf, 0x16u);
            }
            long long v86 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
            [v93 respondWithError:v86];
          }
        }

        objc_destroyWeak(&location);
      }
    }
    goto LABEL_61;
  }
  id v69 = (void *)MEMORY[0x230FBD990]();
  uint64_t v70 = v11;
  uint64_t v71 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
  {
    id v72 = HMFGetLogIdentifier();
    char v73 = [v8 UUIDString];
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v72;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v73;
    _os_log_impl(&dword_22F52A000, v71, OS_LOG_TYPE_DEFAULT, "%{public}@Unknown accessory with identifier: %@", buf, 0x16u);
  }
  __int16 v74 = (void *)MEMORY[0x230FBD990]();
  id v75 = v70;
  __int16 v76 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v77 = HMFGetLogIdentifier();
    __int16 v78 = [(HMDHome *)v75 accessoryBrowser];
    __int16 v79 = [(HMDHome *)v75 accessoryBrowser];
    __int16 v80 = [v79 unassociatedAccessories];
    *(_DWORD *)buf = 138543874;
    *(void *)&uint8_t buf[4] = v77;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v78;
    *(_WORD *)&buf[22] = 2112;
    uint64_t v108 = v80;
    _os_log_impl(&dword_22F52A000, v76, OS_LOG_TYPE_DEFAULT, "%{public}@AccessoryBrowser %@, Unassociated accessories: %@", buf, 0x20u);
  }
  id v81 = [v93 responseHandler];

  if (v81)
  {
    id v92 = [v93 responseHandler];
    id v91 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    (*((void (**)(id, id, void))v92 + 2))(v92, v91, 0);
LABEL_61:
  }
}

void __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [a1[4] workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke_2;
  block[3] = &unk_264A16550;
  id v11 = a1[5];
  id v12 = a1[6];
  id v13 = v6;
  id v14 = a1[4];
  id v15 = a1[7];
  id v16 = a1[8];
  id v17 = a1[9];
  id v18 = v5;
  id v19 = a1[10];
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, block);
}

void __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
    id v13 = *(void **)(a1 + 32);
    id v14 = (void *)MEMORY[0x263F087E8];
    uint64_t v15 = 2;
LABEL_7:
    id v16 = [v14 hmErrorWithCode:v15];
    [v13 respondWithError:v16];
    goto LABEL_8;
  }
  if (v5)
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = WeakRetained;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = HMFGetLogIdentifier();
      id v12 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      id v31 = v11;
      __int16 v32 = 2112;
      id v33 = v12;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@WAC failed for %@", buf, 0x16u);
    }
    id v13 = *(void **)(a1 + 32);
    id v14 = (void *)MEMORY[0x263F087E8];
    uint64_t v15 = 48;
    goto LABEL_7;
  }
  id v17 = v6;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v18 = v17;
  }
  else {
    id v18 = 0;
  }
  id v16 = v18;

  if (v16)
  {
    id v19 = [WeakRetained workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke_1268;
    block[3] = &unk_264A2F2F8;
    void block[4] = WeakRetained;
    id v28 = v16;
    id v29 = *(id *)(a1 + 32);
    dispatch_async(v19, block);
  }
  else
  {
    uint64_t v20 = (void *)MEMORY[0x230FBD990]();
    id v21 = WeakRetained;
    id v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      id v23 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v31 = v23;
      __int16 v32 = 2112;
      id v33 = (id)objc_opt_class();
      id v24 = v33;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Post-WAC not supported for type %@", buf, 0x16u);
    }
    int v25 = *(void **)(a1 + 32);
    id v26 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    [v25 respondWithError:v26];
  }
LABEL_8:
}

- (void)_addAndMaybeAssociateMediaAccessory:(void *)a3 message:
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    if ([a1 isOwnerUser])
    {
      id v7 = [a1 homeManager];
      id v8 = [v5 uuid];
      id v9 = [v7 accessorySetupMetricDispatcherForAccessoryUUID:v8];

      [v9 addHome:a1];
      if ([v5 conformsToProtocol:&unk_26E4E74F8]
        && [v5 supportsAssociation])
      {
        id inited = objc_initWeak(&location, a1);
        id v11 = (void *)MEMORY[0x230FBD990](inited);
        id v12 = a1;
        HMFGetOSLogHandle();
        id v13 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          id v14 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          int v25 = v14;
          __int16 v26 = 2112;
          id v27 = v5;
          _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Starting association for media accessory: %@", buf, 0x16u);
        }
        v19[0] = MEMORY[0x263EF8330];
        v19[1] = 3221225472;
        void v19[2] = __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke;
        v19[3] = &unk_264A2B420;
        objc_copyWeak(&v22, &location);
        id v20 = v5;
        id v21 = v6;
        [v20 associateToHome:v12 completionHandler:v19];

        objc_destroyWeak(&v22);
        objc_destroyWeak(&location);
      }
      else
      {
        -[HMDHome _addMediaAccessory:message:](a1, v5, v6);
      }
    }
    else
    {
      uint64_t v15 = (void *)MEMORY[0x230FBD990]();
      id v16 = a1;
      id v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        int v25 = v18;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Must be owner to add WHA accessory", buf, 0xCu);
      }
      id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:17];
      [v6 respondWithError:v9];
    }
  }
}

void __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke(id *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (v3)
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = v5;
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = HMFGetLogIdentifier();
      id v10 = a1[4];
      *(_DWORD *)buf = 138543874;
      id v19 = v9;
      __int16 v20 = 2112;
      id v21 = v10;
      __int16 v22 = 2112;
      id v23 = v3;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to add accessory, %@, with error: %@", buf, 0x20u);
    }
    [a1[5] respondWithError:v3];
  }
  else if (WeakRetained)
  {
    id v11 = [WeakRetained workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke_1313;
    block[3] = &unk_264A2B5D8;
    objc_copyWeak(&v17, a1 + 6);
    id v15 = a1[5];
    id v16 = a1[4];
    dispatch_async(v11, block);

    objc_destroyWeak(&v17);
  }
  else
  {
    id v12 = a1[5];
    id v13 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v12 respondWithError:v13];
  }
}

void __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke_1313(void **a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    -[HMDHome _addMediaAccessory:message:](WeakRetained, a1[5], a1[4]);
  }
  else
  {
    id v3 = a1[4];
    id v4 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v3 respondWithError:v4];
  }
}

void __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke_1268(id *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = a1[4];
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = HMFGetLogIdentifier();
    int v6 = 138543362;
    id v7 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Continuing to add accessory post-WAC", (uint8_t *)&v6, 0xCu);
  }
  -[HMDHome _addAndMaybeAssociateMediaAccessory:message:](a1[4], a1[5], a1[6]);
}

void __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke_2(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v2 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  [v2 accessoryUUID];

  [*(id *)(a1 + 48) domain];
  [*(id *)(a1 + 48) code];

  BOOL v4 = *(void *)(a1 + 48) == 0;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = *(id *)(a1 + 56);
  id v7 = HMFGetOSLogHandle();
  uint64_t v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      *(_DWORD *)id v14 = 138543362;
      *(void *)&void v14[4] = v13;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Client configuration with WiFi unique PSK created successfully", v14, 0xCu);
    }
    [*(id *)(a1 + 80) setNetworkCredential:*(void *)(a1 + 88)];
    [*(id *)(a1 + 64) setUsedWiFiPPSK:1];
    [*(id *)(a1 + 32) begin];
    *(void *)id v14 = *(id *)(a1 + 32);
    [*(id *)(a1 + 56) _pairAccessoryWithAccessoryDescription:*(void *)(a1 + 40) unpairedAccessory:*(void *)(a1 + 96) configuration:*(void *)(a1 + 80) pairingEvent:*(void *)(a1 + 64) requestMessage:*(void *)(a1 + 72)];
    __HMFActivityScopeLeave();
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      *(_DWORD *)id v14 = 138543874;
      *(void *)&void v14[4] = v9;
      __int16 v15 = 2112;
      uint64_t v16 = v10;
      __int16 v17 = 2112;
      uint64_t v18 = v11;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate WiFi credential for accessory %@ with error: %@", v14, 0x20u);
    }
    id v12 = [*(id *)(a1 + 56) logEventSubmitter];
    [v12 submitLogEvent:*(void *)(a1 + 64) error:*(void *)(a1 + 48)];

    [*(id *)(a1 + 72) respondWithError:*(void *)(a1 + 48)];
    [*(id *)(a1 + 56) _removePendingAccessoryAdd:*(void *)(a1 + 40)];
  }
}

- (void)_continueLegacyAddAccessoryWithUUID:(id)a3 unassociatedAccessory:(id)a4 setupCode:(id)a5 appID:(id)a6 message:(id)a7
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v82 = a4;
  id v80 = a5;
  id v81 = a6;
  id v13 = a7;
  id v14 = [(HMDHome *)self accessoryWithUUID:v12];
  if (v14)
  {
    __int16 v15 = (void *)MEMORY[0x230FBD990]();
    uint64_t v16 = self;
    __int16 v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      uint64_t v85 = v18;
      __int16 v86 = 2112;
      id v87 = v12;
      __int16 v88 = 2112;
      id v89 = v14;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Can't add unassociated accessory: this home already has an accessory with UUID %@: %@", buf, 0x20u);
    }
    if (_os_feature_enabled_impl()
      && [v13 isEntitledForSPIAccess]
      && [v13 isEntitledToProvideAccessorySetupPayload])
    {
      uint64_t v19 = (void *)MEMORY[0x230FBD990]();
      __int16 v20 = v16;
      id v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v22 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v85 = v22;
        _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Creating temporary progress handler to invoke with already-associated error", buf, 0xCu);
      }
      id v23 = objc_alloc(MEMORY[0x263F0E768]);
      uint64_t v24 = [(HMDHome *)v20 uuid];
      __int16 v78 = (void *)[v23 initWithAccessoryUUID:v12 accessoryName:0 appID:v81 homeUUID:v24];

      HMDHomeCreateAddAccessoryProgressHandler(v20, v78, v13);
      int v25 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
      __int16 v26 = [HMDAddAccessoryProgressState alloc];
      id v27 = [v14 uuid];
      uint64_t v28 = [v14 name];
      id v29 = [v14 manufacturer];
      __int16 v30 = [v14 category];
      id v31 = [v14 productData];
      __int16 v32 = [(HMDAddAccessoryProgressState *)v26 initWithUUID:v27 accessoryName:v28 manufacturerName:v29 category:v30 certificationStatus:0 productData:v31];

      ((void (**)(void, uint64_t, HMDAddAccessoryProgressState *))v25)[2](v25, 47, v32);
    }
    id v33 = [MEMORY[0x263F087E8] hmErrorWithCode:13];
    [v13 respondWithError:v33];
    goto LABEL_47;
  }
  uint64_t v34 = [(HMDHome *)self accessories];
  unint64_t v35 = [v34 count];
  unint64_t v36 = maximumAccessoriesPerHome;

  if (v35 >= v36)
  {
    uint64_t v43 = (void *)MEMORY[0x230FBD990]();
    id v44 = self;
    id v45 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      id v46 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v85 = v46;
      _os_log_impl(&dword_22F52A000, v45, OS_LOG_TYPE_ERROR, "%{public}@Can't add unassociated accessory: already at maximum accessories for home", buf, 0xCu);
    }
    id v33 = [MEMORY[0x263F087E8] hmErrorWithCode:49];
    [v13 respondWithError:v33];
  }
  else if (([v82 associationOptions] & 2) != 0)
  {
    id v47 = (void *)MEMORY[0x230FBD990]();
    id v48 = self;
    id v49 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      id v50 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v85 = v50;
      _os_log_impl(&dword_22F52A000, v49, OS_LOG_TYPE_INFO, "%{public}@Can't add unassociated accessory: software update needed on the accessory", buf, 0xCu);
    }
    id v33 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    [v13 respondWithError:v33];
  }
  else
  {
    id v37 = [v82 category];
    id v83 = 0;
    BOOL v38 = [(HMDHome *)self _shouldAllowAddingAccessoryOfCategory:v37 requestMessage:v13 error:&v83];
    id v33 = v83;

    if (v38)
    {
LABEL_14:
      id v39 = v82;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v40 = v39;
      }
      else {
        id v40 = 0;
      }
      id v79 = v40;

      if (v79)
      {
        id v41 = objc_alloc(MEMORY[0x263F0E768]);
        id v42 = [(HMDHome *)self uuid];
        uint64_t v77 = (void *)[v41 initWithAccessoryUUID:v12 accessoryName:0 appID:v81 homeUUID:v42];

        [v77 setSetupCode:v80];
        os_unfair_recursive_lock_lock_with_options();
        [(NSMapTable *)self->_addPendingAccessories setObject:v13 forKey:v77];
        os_unfair_recursive_lock_unlock();
      }
      else
      {
        uint64_t v77 = 0;
      }
      if ([v13 isEntitledForSPIAccess]
        && [v13 isEntitledToProvideAccessorySetupPayload])
      {
        context = (void *)MEMORY[0x230FBD990]();
        __int16 v59 = self;
        id v60 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
        {
          id v61 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          uint64_t v85 = v61;
          _os_log_impl(&dword_22F52A000, v60, OS_LOG_TYPE_DEBUG, "%{public}@Registering Progress Handler", buf, 0xCu);
        }
        uint64_t v62 = HMDHomeCreateAddAccessoryProgressHandler(v59, v77, v13);
        id v63 = v59;
        id v64 = (void (**)(void, void, void))v62;
        id v65 = [(HMDHome *)v63 accessoryBrowser];
        [v65 registerProgressHandler:v64 unpairedAccessoryUUID:v12];
      }
      else
      {
        id v64 = 0;
      }
      if (v38)
      {
        [(HMDHome *)self _continuePairingAfterUserConsentWithAccessoryUUID:v12 orUnassociatedAccessory:v39 message:v13];
      }
      else if (v64)
      {
        id v66 = [HMDAddAccessoryProgressState alloc];
        id v67 = [v79 uuid];
        id v68 = [v79 name];
        id v69 = [v79 category];
        uint64_t v70 = [(HMDAddAccessoryProgressState *)v66 initWithUUID:v67 accessoryName:v68 manufacturerName:0 category:v69 certificationStatus:0 productData:0];

        ((void (**)(void, uint64_t, HMDAddAccessoryProgressState *))v64)[2](v64, 9, v70);
      }
      else
      {
        uint64_t v71 = (void *)MEMORY[0x230FBD990]();
        id v72 = self;
        char v73 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
        {
          __int16 v74 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          uint64_t v85 = v74;
          _os_log_impl(&dword_22F52A000, v73, OS_LOG_TYPE_INFO, "%{public}@No progress handler but need to request user consent to replace accessory in home", buf, 0xCu);
        }
        id v75 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
        [v13 respondWithError:v75];
      }
      goto LABEL_47;
    }
    __int16 v51 = [v33 domain];
    if ([v51 isEqualToString:*MEMORY[0x263F0C710]])
    {
      BOOL v52 = [v33 code] == 97;

      if (v52) {
        goto LABEL_14;
      }
    }
    else
    {
    }
    __int16 v53 = (void *)MEMORY[0x230FBD990]();
    id v54 = self;
    __int16 v55 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      __int16 v56 = HMFGetLogIdentifier();
      uint64_t v57 = [v82 category];
      uint64_t v58 = [v57 localizedDescription];
      *(_DWORD *)buf = 138543874;
      uint64_t v85 = v56;
      __int16 v86 = 2112;
      id v87 = v58;
      __int16 v88 = 2112;
      id v89 = v33;
      _os_log_impl(&dword_22F52A000, v55, OS_LOG_TYPE_ERROR, "%{public}@Can't add an accessory of category %@: %@", buf, 0x20u);
    }
    [v13 respondWithError:v33];
  }
LABEL_47:
}

- (void)_handleRemoteAddMediaAccessoryRequest:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self residentSyncManager];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  void v6[2] = __49__HMDHome__handleRemoteAddMediaAccessoryRequest___block_invoke;
  v6[3] = &unk_264A2F558;
  void v6[4] = self;
  [v5 interceptRemoteResidentRequest:v4 proceed:v6];
}

void __49__HMDHome__handleRemoteAddMediaAccessoryRequest___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [v3 dataForKey:@"kAccessoryEncodedMediaAccessoryKey"];
  if (v4)
  {
    id v15 = 0;
    id v5 = [MEMORY[0x263F08928] unarchivedObjectOfClass:objc_opt_class() fromData:v4 error:&v15];
    id v6 = v15;
    id v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = *(id *)(a1 + 32);
    id v9 = HMFGetOSLogHandle();
    uint64_t v10 = v9;
    if (v5)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        __int16 v17 = v11;
        __int16 v18 = 2112;
        id v19 = v5;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Proceeding to add media accessory: %@", buf, 0x16u);
      }
      -[HMDHome _locallyAddMediaAccessory:message:](*(void **)(a1 + 32), v5, v3);
    }
    else
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        id v13 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        __int16 v17 = v13;
        __int16 v18 = 2112;
        id v19 = v6;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to decode unassociated media accessory: %@", buf, 0x16u);
      }
      id v14 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      [v3 respondWithError:v14];
    }
  }
  else
  {
    id v12 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
    [v3 respondWithError:v12];
  }
}

- (void)_handleRemoteAddMediaAccessory:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self residentSyncManager];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  void v6[2] = __42__HMDHome__handleRemoteAddMediaAccessory___block_invoke;
  v6[3] = &unk_264A2F558;
  void v6[4] = self;
  [v5 interceptRemoteResidentRequest:v4 proceed:v6];
}

void __42__HMDHome__handleRemoteAddMediaAccessory___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [v3 uuidForKey:@"kAccessoryUUID"];
  if (v4)
  {
    id v5 = [v3 dataForKey:@"kAccessoryEncodedMediaAccessoryKey"];
    if (v5)
    {
      id v20 = 0;
      id v6 = [MEMORY[0x263F08928] unarchivedObjectOfClass:objc_opt_class() fromData:v5 error:&v20];
      id v7 = v20;
      if (v6)
      {
        id v8 = [v3 stringForKey:@"kAccessoryPairingPasswordKey"];
        id v9 = [v3 clientIdentifier];
        context = (void *)MEMORY[0x230FBD990]();
        id v10 = *(id *)(a1 + 32);
        uint64_t v11 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v12 = id v18 = v7;
          *(_DWORD *)buf = 138543618;
          __int16 v22 = v12;
          __int16 v23 = 2112;
          id v24 = v6;
          _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Proceeding to add unassociated media accessory: %@", buf, 0x16u);

          id v7 = v18;
        }

        [*(id *)(a1 + 32) _continueLegacyAddAccessoryWithUUID:v4 unassociatedAccessory:v6 setupCode:v8 appID:v9 message:v3];
      }
      else
      {
        id v14 = (void *)MEMORY[0x230FBD990]();
        id v15 = *(id *)(a1 + 32);
        uint64_t v16 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          __int16 v17 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          __int16 v22 = v17;
          __int16 v23 = 2112;
          id v24 = v7;
          _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to decode unassociated media accessory: %@", buf, 0x16u);
        }
        id v8 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
        [v3 respondWithError:v8];
      }
    }
    else
    {
      id v13 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
      [v3 respondWithError:v13];
    }
  }
  else
  {
    id v5 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
    [v3 respondWithError:v5];
  }
}

- (BOOL)_shouldUseDeprecatedAddAccessoryMessage:(id)a3 minimumVersion:(id)a4 primaryResident:(id)a5 shouldRelayMessages:(BOOL)a6
{
  id v9 = a4;
  id v10 = [a5 device];
  uint64_t v11 = [v10 version];

  LOBYTE(v12) = 0;
  if (v9 && a5) {
    int v12 = [v11 isAtLeastVersion:v9] ^ 1;
  }
  BOOL v13 = v12 & a6;
  if (a3) {
    BOOL v14 = v13;
  }
  else {
    BOOL v14 = 0;
  }

  return v14;
}

- (void)_handleLegacyAddAccessory:(id)a3
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v70 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling legacy add accessory", buf, 0xCu);
  }
  id v9 = [v4 uuidForKey:@"kAccessoryUUID"];
  if (v9)
  {
    id v10 = [v4 stringForKey:@"kAccessoryPairingPasswordKey"];
    if (!v10 || ([v4 isEntitledForSPIAccess] & 1) != 0)
    {
      uint64_t v11 = [(HMDHome *)v6 accessoryBrowser];
      int v12 = [v11 unassociatedAccessories];
      BOOL v13 = objc_msgSend(v12, "hmf_firstObjectWithUUID:", v9);

      BOOL v14 = (void *)MEMORY[0x230FBD990]();
      id v15 = v6;
      uint64_t v16 = HMFGetOSLogHandle();
      __int16 v17 = v16;
      id v61 = v13;
      if (!v13)
      {
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          id v50 = HMFGetLogIdentifier();
          __int16 v51 = [(HMDHome *)v15 accessoryBrowser];
          BOOL v52 = [v51 unassociatedAccessories];
          *(_DWORD *)buf = 138543874;
          uint64_t v70 = v50;
          __int16 v71 = 2112;
          id v72 = v9;
          __int16 v73 = 2112;
          __int16 v74 = v52;
          _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Could not find unassociated accessory with UUID %@ for legacy add accessory flow. All unassociated accessories: %@", buf, 0x20u);
        }
        __int16 v53 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
        [v4 respondWithError:v53];
        goto LABEL_37;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        id v18 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v70 = v18;
        __int16 v71 = 2112;
        id v72 = v13;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Found matching unassociated accessory: %@", buf, 0x16u);
      }
      id v19 = v13;
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      if (isKindOfClass) {
        id v21 = v19;
      }
      else {
        id v21 = 0;
      }
      id v60 = v21;

      if (isKindOfClass)
      {
        __int16 v22 = (void *)MEMORY[0x230FBD990]();
        __int16 v23 = v15;
        id v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          uint64_t v25 = HMFGetLogIdentifier();
          uint64_t v58 = [v4 proxyConnection];
          __int16 v26 = [v58 shortDescription];
          [(HMDHome *)v23 hasAnyResident];
          HMFBooleanToString();
          id v27 = v59 = v22;
          *(_DWORD *)buf = 138543874;
          uint64_t v70 = v25;
          __int16 v71 = 2112;
          id v72 = v26;
          __int16 v73 = 2112;
          __int16 v74 = v27;
          _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Creating a device HomeKit setup session for connection %@, home.hasAnyResident = %@", buf, 0x20u);

          __int16 v22 = v59;
        }

        uint64_t v28 = [HMDDeviceHomeKitSetupSession alloc];
        uint64_t v29 = [(HMDHome *)v23 hasAnyResident] ^ 1;
        __int16 v30 = [v4 proxyConnection];
        id v31 = [(HMDDeviceHomeKitSetupSession *)v28 initWithFirstResidentForHome:v29 clientConnection:v30];
        [(HMDHome *)v23 setDeviceHomeKitSetupSession:v31];
      }
      id v32 = v19;
      objc_opt_class();
      char v33 = objc_opt_isKindOfClass();
      if (v33) {
        uint64_t v34 = v32;
      }
      else {
        uint64_t v34 = 0;
      }
      id v35 = v34;

      uint64_t v36 = [(HMDHome *)v15 primaryResident];
      id v37 = (void *)v36;
      if ((v33 & 1) != 0 && v36)
      {
        BOOL v38 = [[HMDHomeKitVersion alloc] initWithVersionString:@"10.1"];
        id v39 = [(HMDHome *)v15 administratorHandler];
        BOOL v40 = -[HMDHome _shouldUseDeprecatedAddAccessoryMessage:minimumVersion:primaryResident:shouldRelayMessages:](v15, "_shouldUseDeprecatedAddAccessoryMessage:minimumVersion:primaryResident:shouldRelayMessages:", v35, v38, v37, [v39 shouldRelayMessages]);

        if (v40)
        {
          v63[0] = MEMORY[0x263EF8330];
          v63[1] = 3221225472;
          void v63[2] = __37__HMDHome__handleLegacyAddAccessory___block_invoke;
          v63[3] = &unk_264A2E908;
          id v64 = v4;
          id v65 = v15;
          id v66 = v9;
          id v67 = v35;
          id v68 = v10;
          -[HMDHome _remotelyAddMediaAccessory:usingRemoteMessageName:message:fallbackBlock:](v15, v67, @"HMDRemoteAddMediaAccessoryMessage", v64, v63);

LABEL_36:
          __int16 v53 = v60;
LABEL_37:

          goto LABEL_39;
        }
      }
      id v54 = (void *)MEMORY[0x230FBD990]();
      __int16 v55 = v15;
      __int16 v56 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
      {
        uint64_t v57 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v70 = v57;
        __int16 v71 = 2112;
        id v72 = v32;
        _os_log_impl(&dword_22F52A000, v56, OS_LOG_TYPE_INFO, "%{public}@Continuing legacy add for unassociated accessory: %@", buf, 0x16u);
      }
      BOOL v38 = [v4 clientIdentifier];
      [(HMDHome *)v55 _continueLegacyAddAccessoryWithUUID:v9 unassociatedAccessory:v32 setupCode:v10 appID:v38 message:v4];
      goto LABEL_36;
    }
    id v46 = (void *)MEMORY[0x230FBD990]();
    id v47 = v6;
    id v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      id v49 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v70 = v49;
      _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_ERROR, "%{public}@Client provided a setup code but does not have entitlement to use SPI", buf, 0xCu);
    }
    uint64_t v62 = [MEMORY[0x263F087E8] hmErrorWithCode:17];
    objc_msgSend(v4, "respondWithError:");
  }
  else
  {
    id v41 = (void *)MEMORY[0x230FBD990]();
    id v42 = v6;
    uint64_t v43 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      id v44 = HMFGetLogIdentifier();
      id v45 = [v4 shortDescription];
      *(_DWORD *)buf = 138543618;
      uint64_t v70 = v44;
      __int16 v71 = 2112;
      id v72 = v45;
      _os_log_impl(&dword_22F52A000, v43, OS_LOG_TYPE_ERROR, "%{public}@Legacy add accessory message is missing accessory uuid: %@", buf, 0x16u);
    }
    id v10 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v4 respondWithError:v10];
  }
LABEL_39:
}

void __37__HMDHome__handleLegacyAddAccessory___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientIdentifier];
  [*(id *)(a1 + 40) _continueLegacyAddAccessoryWithUUID:*(void *)(a1 + 48) unassociatedAccessory:*(void *)(a1 + 56) setupCode:*(void *)(a1 + 64) appID:v2 message:*(void *)(a1 + 32)];
}

- (BOOL)_shouldAllowAddingAccessoryWithDescription:(id)a3 requestMessage:(id)a4 error:(id *)a5
{
  id v8 = a4;
  id v9 = (void *)MEMORY[0x263F0DF40];
  id v10 = a3;
  uint64_t v11 = [v10 setupAccessoryPayload];
  int v12 = [v11 categoryNumber];
  BOOL v13 = [v9 categoryWithCategoryIdentifier:v12];

  BOOL v14 = [v10 category];

  if ([v14 isWiFiRouterAccessoryCategory])
  {
  }
  else
  {
    char v15 = [v13 isWiFiRouterAccessoryCategory];

    if ((v15 & 1) == 0)
    {
      BOOL v16 = 1;
      goto LABEL_6;
    }
  }
  BOOL v16 = [(HMDHome *)self __shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:v8 error:a5];
LABEL_6:

  return v16;
}

- (BOOL)_shouldAllowAddingAccessoryOfCategory:(id)a3 requestMessage:(id)a4 error:(id *)a5
{
  id v8 = a4;
  if ([a3 isWiFiRouterAccessoryCategory]) {
    BOOL v9 = [(HMDHome *)self __shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:v8 error:a5];
  }
  else {
    BOOL v9 = 1;
  }

  return v9;
}

- (id)_setupDescriptionFromData:(id)a3 error:(id *)a4
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = [MEMORY[0x263F08928] unarchivedObjectOfClass:objc_opt_class() fromData:v6 error:a4];
  id v8 = v7;
  if (v7)
  {
    id v27 = [v7 addRequestIdentifier];
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    BOOL v9 = [(HMDHome *)self addPendingAccessories];
    id v10 = objc_msgSend(v9, "hm_allKeys");

    obuint64_t j = v10;
    uint64_t v25 = [v10 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v25)
    {
      uint64_t v26 = *(void *)v30;
      id v23 = v6;
      while (2)
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          if (*(void *)v30 != v26) {
            objc_enumerationMutation(obj);
          }
          int v12 = *(void **)(*((void *)&v29 + 1) + 8 * i);
          BOOL v13 = objc_msgSend(v12, "setupAccessoryPayload", v23);
          BOOL v14 = [v13 setupID];
          char v15 = [v8 setupAccessoryPayload];
          BOOL v16 = [v15 setupID];
          if ([v14 isEqual:v16]) {
            goto LABEL_15;
          }
          __int16 v17 = [v12 accessoryUUID];
          id v18 = [v8 accessoryUUID];
          if ([v17 isEqual:v18])
          {

LABEL_15:
LABEL_16:
            id v21 = [v8 cancellationReason];
            [v12 setCancellationReason:v21];

            id v20 = v12;
            id v6 = v23;
            goto LABEL_17;
          }
          id v19 = [v12 addRequestIdentifier];
          char v28 = [v19 isEqual:v27];

          if (v28) {
            goto LABEL_16;
          }
        }
        id v6 = v23;
        uint64_t v25 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
        if (v25) {
          continue;
        }
        break;
      }
    }

    id v20 = v8;
LABEL_17:
  }
  else
  {
    id v20 = 0;
  }

  return v20;
}

- (BOOL)__shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:(id)a3 error:(id *)a4
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v6 = a3;
  if (![(HMDHome *)self checkForNetworkRouterSupport:4 error:a4])
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    uint64_t v11 = self;
    int v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      BOOL v13 = HMFGetLogIdentifier();
      uint64_t v14 = HMDNetworkRouterSupportAsString([(HMDHome *)v11 networkRouterSupport]);
      char v15 = (void *)v14;
      if (a4) {
        id v16 = *a4;
      }
      else {
        id v16 = 0;
      }
      int v18 = 138543874;
      id v19 = v13;
      __int16 v20 = 2112;
      uint64_t v21 = v14;
      __int16 v22 = 2112;
      id v23 = v16;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Cannot add network router to the home - networkRouterSupport %@ error %@", (uint8_t *)&v18, 0x20u);
    }
    goto LABEL_12;
  }
  id v7 = [(HMDHome *)self wiFiRouterAccessories];
  uint64_t v8 = [v7 count];

  if (!v8)
  {
    BOOL v9 = 1;
    goto LABEL_13;
  }
  if (!a4)
  {
LABEL_12:
    BOOL v9 = 0;
    goto LABEL_13;
  }
  [MEMORY[0x263F087E8] hmErrorWithCode:97];
  BOOL v9 = 0;
  *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_13:

  return v9;
}

- (void)performLocalAddAccessoryWithDescription:(id)a3 progressHandlerDelegate:(id)a4 completion:(id)a5
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = (void (**)(id, void *))a5;
  uint64_t v11 = [(HMDHome *)self localCapabilitiesDataSource];
  char v12 = [v11 supportsAddingAccessory];

  if (v12)
  {
    BOOL v13 = [(HMDHome *)self currentAccessory];
    if (v13)
    {
      uint64_t v14 = [(HMDHome *)self selfRemovalWatchdog];
      char v15 = [v14 currentAccessoryUUID];

      if (v15
        && ([v13 uuid],
            id v16 = objc_claimAutoreleasedReturnValue(),
            int v17 = objc_msgSend(v15, "hmf_isEqualToUUID:", v16),
            v16,
            v17))
      {
        int v18 = (void *)MEMORY[0x230FBD990]();
        id v19 = self;
        __int16 v20 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          uint64_t v36 = v21;
          __int16 v37 = 2112;
          id v38 = v8;
          __int16 v39 = 2112;
          BOOL v40 = v13;
          _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@Will not perform local add accessory with setup description %@ when current accessory (%@) self removal is pending", buf, 0x20u);
        }
        if (!v10) {
          goto LABEL_19;
        }
        __int16 v22 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2505];
        v10[2](v10, v22);
      }
      else
      {
        uint64_t v24 = (void *)MEMORY[0x230FBD990]();
        uint64_t v25 = self;
        uint64_t v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          id v27 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          uint64_t v36 = v27;
          __int16 v37 = 2112;
          id v38 = v8;
          _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Performing local add accessory with setup description %@", buf, 0x16u);
        }
        __int16 v22 = [MEMORY[0x263F42590] internalMessageWithName:@"kAddAccessoryRequestKey" messagePayload:0];
        objc_initWeak((id *)buf, v25);
        v32[0] = MEMORY[0x263EF8330];
        v32[1] = 3221225472;
        void v32[2] = __86__HMDHome_performLocalAddAccessoryWithDescription_progressHandlerDelegate_completion___block_invoke;
        v32[3] = &unk_264A2EAE0;
        objc_copyWeak(&v34, (id *)buf);
        char v33 = v10;
        [v22 setResponseHandler:v32];
        -[HMDHome _handleAddAccessoryWithDescription:progressHandlerDelegate:message:]((id *)&v25->super.super.isa, v8, v9, v22);

        objc_destroyWeak(&v34);
        objc_destroyWeak((id *)buf);
      }
    }
    else
    {
      char v28 = (void *)MEMORY[0x230FBD990]();
      long long v29 = self;
      long long v30 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        long long v31 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v36 = v31;
        __int16 v37 = 2112;
        id v38 = v8;
        _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Will not perform local add accessory with setup description %@ without current accessory present", buf, 0x16u);
      }
      if (!v10) {
        goto LABEL_20;
      }
      char v15 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2020];
      v10[2](v10, v15);
    }
LABEL_19:

LABEL_20:
    goto LABEL_21;
  }
  if (v10)
  {
    id v23 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    v10[2](v10, v23);
  }
LABEL_21:
}

void __86__HMDHome_performLocalAddAccessoryWithDescription_progressHandlerDelegate_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = WeakRetained;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      char v12 = [NSString stringWithFormat:@"failed with error: %@", v5];
    }
    else
    {
      char v12 = @"completed";
    }
    *(_DWORD *)buf = 138543618;
    id v15 = v11;
    __int16 v16 = 2112;
    int v17 = v12;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Perform local add accessory %@", buf, 0x16u);
    if (v5) {
  }
    }
  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    (*(void (**)(uint64_t, id))(v13 + 16))(v13, v5);
  }
}

- (void)_handleAddAccessory:(id)a3
{
  id v16 = a3;
  id v4 = [(HMDHome *)self localCapabilitiesDataSource];
  char v5 = [v4 supportsAddingAccessory];

  if ((v5 & 1) == 0)
  {
    char v12 = [v16 responseHandler];

    id v11 = v16;
    if (!v12) {
      goto LABEL_12;
    }
    uint64_t v13 = [v16 responseHandler];
    uint64_t v14 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    ((void (**)(void, void *, void))v13)[2](v13, v14, 0);

    goto LABEL_11;
  }
  id v6 = [(HMDHome *)self homeManager];
  uint64_t v7 = [v6 legacyAccessoryPairingController];
  if (!v7)
  {

    id v11 = v16;
LABEL_8:
    id v15 = [v11 dataForKey:@"kAccessoryDescriptionDataKey"];

    if (v15) {
      [(HMDHome *)self _handleAddAccessoryWithDescription:v16];
    }
    else {
      [(HMDHome *)self _handleLegacyAddAccessory:v16];
    }
LABEL_11:
    id v11 = v16;
    goto LABEL_12;
  }
  id v8 = (void *)v7;
  id v9 = [v6 legacyAccessoryPairingController];
  char v10 = [v9 handleMessage:v16 from:self];

  id v11 = v16;
  if ((v10 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_12:
}

- (BOOL)_removeAccessory:(id)a3
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  accessories = self->_accessories;
  id v6 = [v4 uuid];
  uint64_t v7 = [(NSMutableDictionary *)accessories objectForKey:v6];

  if (v7)
  {
    id v8 = self->_accessories;
    id v9 = [v4 uuid];
    [(NSMutableDictionary *)v8 removeObjectForKey:v9];

    char v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = self;
    HMFGetOSLogHandle();
    char v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v13 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v14 = [v4 uuid];
      int v19 = 138543618;
      id v20 = v13;
      __int16 v21 = 2112;
      __int16 v22 = v14;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Successfully removed accessory from home's list: %@", (uint8_t *)&v19, 0x16u);
    }
  }
  else
  {
    char v10 = (void *)MEMORY[0x230FBD990]();
    id v15 = self;
    HMFGetOSLogHandle();
    char v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      id v16 = (id)objc_claimAutoreleasedReturnValue();
      int v17 = [v4 uuid];
      int v19 = 138543618;
      id v20 = v16;
      __int16 v21 = 2112;
      __int16 v22 = v17;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Unable to remove accessory from home's list: %@", (uint8_t *)&v19, 0x16u);
    }
  }

  os_unfair_recursive_lock_unlock();

  return v7 != 0;
}

- (void)removeAccessory:(id)a3
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (v4 && [(HMDHome *)self _removeAccessory:v4])
  {
    char v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = self;
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v25 = v8;
      __int16 v26 = 2112;
      id v27 = v4;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Removed accessory: %@", buf, 0x16u);
    }
    if ([v4 isPrimary])
    {
      id v9 = v4;
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      if (isKindOfClass) {
        id v11 = v9;
      }
      else {
        id v11 = 0;
      }
      id v12 = v11;

      id v13 = v9;
      objc_opt_class();
      char v14 = objc_opt_isKindOfClass();
      if (v14) {
        id v15 = v13;
      }
      else {
        id v15 = 0;
      }
      id v16 = v15;

      if (isKindOfClass)
      {
        workQueue = v6->_workQueue;
        v22[0] = MEMORY[0x263EF8330];
        v22[1] = 3221225472;
        v22[2] = __27__HMDHome_removeAccessory___block_invoke;
        void v22[3] = &unk_264A2F820;
        void v22[4] = v6;
        uint64_t v18 = &v23;
        id v23 = v13;
        int v19 = v22;
      }
      else
      {
        if ((v14 & 1) == 0)
        {
LABEL_17:

          goto LABEL_18;
        }
        workQueue = v6->_workQueue;
        v20[0] = MEMORY[0x263EF8330];
        v20[1] = 3221225472;
        id v20[2] = __27__HMDHome_removeAccessory___block_invoke_2;
        v20[3] = &unk_264A2F820;
        void v20[4] = v6;
        uint64_t v18 = &v21;
        id v21 = v13;
        int v19 = v20;
      }
      dispatch_async(workQueue, v19);

      goto LABEL_17;
    }
  }
LABEL_18:
}

void __27__HMDHome_removeAccessory___block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v2 = [MEMORY[0x263F087E8] hmErrorWithCode:23, @"Retrieval cancelled, accessory removed", 0, 0 description reason suggestion];
  id v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) identifier];
  [v3 _notifyRetrievalError:v2 accessoryServer:v4 linkType:0 accessoryOperationBlock:0];

  char v5 = [*(id *)(a1 + 32) accessoryBulletinNotificationManager];
  [v5 handleRemovedAccessory:*(void *)(a1 + 40)];

  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v6 = objc_msgSend(*(id *)(a1 + 40), "services", 0);
  uint64_t v7 = (void *)[v6 copy];

  uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v16;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v16 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(a1 + 32) _removeService:*(void *)(*((void *)&v15 + 1) + 8 * v11++)];
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v9);
  }

  id v12 = [*(id *)(a1 + 40) cameraProfiles];
  uint64_t v13 = [v12 count];

  if (v13)
  {
    char v14 = [*(id *)(a1 + 32) cameraBulletinNotificationManager];
    [v14 handleRemovedCameraAccessory:*(void *)(a1 + 40)];
  }
}

void __27__HMDHome_removeAccessory___block_invoke_2(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) remoteEventRouterClientController];
  id v2 = [*(id *)(a1 + 40) uuid];
  [v3 removeResidentRouterForAccessoryUUID:v2];
}

- (void)_addAccessories:(id)a3
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __27__HMDHome__addAccessories___block_invoke;
  v3[3] = &unk_264A164D8;
  void v3[4] = self;
  objc_msgSend(a3, "na_each:", v3);
}

uint64_t __27__HMDHome__addAccessories___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addAccessory:a2];
}

- (BOOL)_addAccessory:(id)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  accessories = self->_accessories;
  id v6 = [v4 uuid];
  uint64_t v7 = [(NSMutableDictionary *)accessories objectForKey:v6];

  if (!v7)
  {
    uint64_t v8 = (void *)MEMORY[0x230FBD990]();
    uint64_t v9 = self;
    HMFGetOSLogHandle();
    uint64_t v10 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      id v12 = [v4 uuid];
      int v16 = 138543618;
      id v17 = v11;
      __int16 v18 = 2112;
      int v19 = v12;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Added accessory to the home's list: %@", (uint8_t *)&v16, 0x16u);
    }
    uint64_t v13 = self->_accessories;
    char v14 = [v4 uuid];
    [(NSMutableDictionary *)v13 setObject:v4 forKey:v14];
  }
  os_unfair_recursive_lock_unlock();

  return v7 == 0;
}

- (void)addAccessory:(id)a3
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v4 = a3;
  char v5 = v4;
  if (!v4)
  {
    uint64_t v7 = (void *)MEMORY[0x230FBD990]();
    uint64_t v8 = self;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v25 = v10;
      id v11 = "%{public}@Attempting to add a nil accessory";
      id v12 = v9;
      uint32_t v13 = 12;
      goto LABEL_8;
    }
LABEL_9:

    goto LABEL_11;
  }
  id v6 = [v4 uuid];

  if (v6)
  {
    if (![(HMDHome *)self _addAccessory:v5])
    {
      uint64_t v7 = (void *)MEMORY[0x230FBD990]();
      uint64_t v8 = self;
      uint64_t v9 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v25 = v10;
        __int16 v26 = 2112;
        id v27 = v5;
        id v11 = "%{public}@Attempted to add an accessory that is already present: %@";
        id v12 = v9;
        uint32_t v13 = 22;
LABEL_8:
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);

        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else
  {
    char v14 = [v5 uuid];

    if (!v14)
    {
      long long v15 = (void *)MEMORY[0x230FBD990]();
      int v16 = self;
      id v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      {
        __int16 v18 = HMFGetLogIdentifier();
        int v19 = [v5 shortDescription];
        *(_DWORD *)buf = 138543618;
        uint64_t v25 = v18;
        __int16 v26 = 2112;
        id v27 = v19;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_FAULT, "%{public}@Submitting ABC event for failure: Attempted to add an accessory that does not have an uuid: %@", buf, 0x16u);
      }
      uint64_t v20 = [HMDAssertionLogEvent alloc];
      id v21 = [v5 shortDescription];
      __int16 v22 = [(HMDAssertionLogEvent *)v20 initWithReason:@"Attempted to add an accessory that does not have an uuid: %@", v21];

      id v23 = +[HMDMetricsManager sharedLogEventSubmitter];
      [v23 submitLogEvent:v22];
    }
  }
LABEL_11:
}

- (unint64_t)assistantAccessCapableAccessoryCount
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = [(HMDHome *)self accessories];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    unint64_t v5 = 0;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v2);
        }
        v5 += +[HMDAssistantAccessControl isAccessorySupported:*(void *)(*((void *)&v9 + 1) + 8 * i)];
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  else
  {
    unint64_t v5 = 0;
  }

  return v5;
}

- (BOOL)shouldEncodeLegacyLocationServiceSettingForSettingsParentUUID:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v4 = a3;
  unint64_t v5 = [(HMDHome *)self mediaSystemWithUUID:v4];
  uint64_t v6 = v5;
  if (v5)
  {
    LODWORD(v7) = [v5 componentsSupportsHomeLevelLocationServiceSetting] ^ 1;
  }
  else
  {
    uint64_t v8 = [(HMDHome *)self accessoryWithUUID:v4];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      long long v9 = v8;
    }
    else {
      long long v9 = 0;
    }
    id v10 = v9;

    if (v10)
    {
      LODWORD(v7) = [v10 supportsHomeLevelLocationServiceSetting] ^ 1;
    }
    else
    {
      uint64_t v7 = (void *)MEMORY[0x230FBD990]();
      long long v11 = self;
      long long v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint32_t v13 = HMFGetLogIdentifier();
        int v15 = 138543618;
        int v16 = v13;
        __int16 v17 = 2112;
        id v18 = v4;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to filter legacy location service setting due to no parent found with uuid: %@", (uint8_t *)&v15, 0x16u);
      }
      LOBYTE(v7) = 0;
    }
  }
  return (char)v7;
}

- (id)destinationControllerWithCommittedDestinationIdentifier:(id)a3
{
  id v4 = a3;
  unint64_t v5 = [(HMDHome *)self destinationControllers];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = __67__HMDHome_destinationControllerWithCommittedDestinationIdentifier___block_invoke;
  void v9[3] = &unk_264A164B0;
  id v10 = v4;
  id v6 = v4;
  uint64_t v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v9);

  return v7;
}

uint64_t __67__HMDHome_destinationControllerWithCommittedDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 committedData];
  id v4 = [v3 destinationIdentifier];
  uint64_t v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v5;
}

- (id)destinationControllerWithDestinationIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self destinationControllers];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = __58__HMDHome_destinationControllerWithDestinationIdentifier___block_invoke;
  void v9[3] = &unk_264A164B0;
  id v10 = v4;
  id v6 = v4;
  uint64_t v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v9);

  return v7;
}

uint64_t __58__HMDHome_destinationControllerWithDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 data];
  id v4 = [v3 destinationIdentifier];
  uint64_t v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v5;
}

- (id)destinationControllerWithIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self destinationControllers];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = __47__HMDHome_destinationControllerWithIdentifier___block_invoke;
  void v9[3] = &unk_264A164B0;
  id v10 = v4;
  id v6 = v4;
  uint64_t v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v9);

  return v7;
}

uint64_t __47__HMDHome_destinationControllerWithIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 identifier];
  uint64_t v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v4;
}

- (id)destinationControllers
{
  id v2 = [(HMDHome *)self appleMediaAccessories];
  uint64_t v3 = objc_msgSend(v2, "na_map:", &__block_literal_global_1222);

  return v3;
}

uint64_t __33__HMDHome_destinationControllers__block_invoke(uint64_t a1, void *a2)
{
  return [a2 audioDestinationController];
}

- (int64_t)destinationTypeForDestinationWithIdentifier:(id)a3
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v4 = a3;
  [(HMDHome *)self appleMediaAccessories];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = [v5 countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v34;
    int64_t v9 = 3;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v34 != v8) {
          objc_enumerationMutation(v5);
        }
        long long v11 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        long long v12 = [v11 uuid];
        char v13 = objc_msgSend(v12, "hmf_isEqualToUUID:", v4);

        if (v13)
        {
          id v17 = v5;
          goto LABEL_26;
        }
        uint64_t v14 = [v11 audioDestination];
        int v15 = [v14 uniqueIdentifier];
        char v16 = objc_msgSend(v15, "hmf_isEqualToUUID:", v4);

        if (v16)
        {
          id v17 = v5;
          int64_t v9 = 1;
          goto LABEL_26;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v33 objects:v38 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

  [(HMDHome *)self mediaSystems];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v17 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v18 = [v17 countByEnumeratingWithState:&v29 objects:v37 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v30;
    while (2)
    {
      for (uint64_t j = 0; j != v19; ++j)
      {
        if (*(void *)v30 != v20) {
          objc_enumerationMutation(v17);
        }
        __int16 v22 = *(void **)(*((void *)&v29 + 1) + 8 * j);
        id v23 = objc_msgSend(v22, "uuid", (void)v29);
        char v24 = objc_msgSend(v23, "hmf_isEqualToUUID:", v4);

        if (v24)
        {
          int64_t v9 = 4;
          goto LABEL_25;
        }
        uint64_t v25 = [v22 audioDestination];
        __int16 v26 = [v25 uniqueIdentifier];
        char v27 = objc_msgSend(v26, "hmf_isEqualToUUID:", v4);

        if (v27)
        {
          int64_t v9 = 2;
          goto LABEL_25;
        }
      }
      uint64_t v19 = [v17 countByEnumeratingWithState:&v29 objects:v37 count:16];
      int64_t v9 = 0;
      if (v19) {
        continue;
      }
      break;
    }
  }
  else
  {
    int64_t v9 = 0;
  }
LABEL_25:

LABEL_26:
  return v9;
}

- (id)mediaDestinationsInRoom:(id)a3
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self appleMediaAccessories];
  uint64_t v6 = [(HMDHome *)self mediaSystems];
  long long v31 = v5;
  long long v33 = objc_msgSend(objc_alloc(MEMORY[0x263EFF980]), "initWithCapacity:", objc_msgSend(v6, "count") + objc_msgSend(v5, "count"));
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v7 = v6;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v38 objects:v43 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v39;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v39 != v10) {
          objc_enumerationMutation(v7);
        }
        long long v12 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        char v13 = [v12 audioDestination];
        if (v13)
        {
          if (!v4) {
            goto LABEL_9;
          }
          uint64_t v14 = [v12 room];
          int v15 = [v14 uuid];
          char v16 = [v4 uuid];
          int v17 = objc_msgSend(v15, "hmf_isEqualToUUID:", v16);

          if (v17) {
LABEL_9:
          }
            [v33 addObject:v13];
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v38 objects:v43 count:16];
    }
    while (v9);
  }
  long long v32 = v7;

  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v18 = v31;
  uint64_t v19 = [v18 countByEnumeratingWithState:&v34 objects:v42 count:16];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)v35;
    do
    {
      for (uint64_t j = 0; j != v20; ++j)
      {
        if (*(void *)v35 != v21) {
          objc_enumerationMutation(v18);
        }
        id v23 = *(void **)(*((void *)&v34 + 1) + 8 * j);
        char v24 = [v23 audioDestination];
        if (v24)
        {
          if (!v4)
          {
            if (_mediaSystemsContainsAccessory(v32, v23)) {
              goto LABEL_25;
            }
LABEL_23:
            [v33 addObject:v24];
            goto LABEL_25;
          }
          uint64_t v25 = [v23 room];
          __int16 v26 = [v25 uuid];
          char v27 = [v4 uuid];
          if (objc_msgSend(v26, "hmf_isEqualToUUID:", v27))
          {
            char v28 = _mediaSystemsContainsAccessory(v32, v23);

            if ((v28 & 1) == 0) {
              goto LABEL_23;
            }
          }
          else
          {
          }
        }
LABEL_25:
      }
      uint64_t v20 = [v18 countByEnumeratingWithState:&v34 objects:v42 count:16];
    }
    while (v20);
  }

  long long v29 = (void *)[v33 copy];
  return v29;
}

- (NSArray)mediaDestinations
{
  return (NSArray *)[(HMDHome *)self mediaDestinationsInRoom:0];
}

- (id)mediaDestinationManagersWithSupportedOptions:(unint64_t)a3
{
  id v5 = [(HMDHome *)self appleMediaAccessories];
  uint64_t v6 = [(HMDHome *)self mediaSystems];
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  v15[2] = __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke;
  v15[3] = &__block_descriptor_40_e54____HMDMediaDestinationManager__16__0__HMDMediaSystem_8l;
  void v15[4] = a3;
  id v7 = objc_msgSend(v6, "na_map:", v15);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  void v12[2] = __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke_2;
  v12[3] = &unk_264A16468;
  id v13 = v6;
  unint64_t v14 = a3;
  id v8 = v6;
  uint64_t v9 = objc_msgSend(v5, "na_map:", v12);
  uint64_t v10 = [v9 arrayByAddingObjectsFromArray:v7];

  return v10;
}

id __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 audioDestinationManager];
  id v4 = [v3 destination];
  LODWORD(a1) = [v4 containsSupportedOptions:*(void *)(a1 + 32)];

  if (a1) {
    id v5 = v3;
  }
  else {
    id v5 = 0;
  }

  return v5;
}

id __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 audioDestinationManager];
  id v5 = [v4 destination];
  if ([v5 containsSupportedOptions:*(void *)(a1 + 40)])
  {
    char v6 = _mediaSystemsContainsAccessory(*(void **)(a1 + 32), v3);

    if ((v6 & 1) == 0)
    {
      id v7 = v4;
      goto LABEL_6;
    }
  }
  else
  {
  }
  id v7 = 0;
LABEL_6:

  return v7;
}

- (id)mediaDestinationManagersWithHomeTheaterSupportedOptions
{
  id v3 = [(HMDHome *)self appleMediaAccessories];
  id v4 = [(HMDHome *)self mediaSystems];
  id v5 = objc_msgSend(v4, "na_map:", &__block_literal_global_1217);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  void v10[2] = __66__HMDHome_mediaDestinationManagersWithHomeTheaterSupportedOptions__block_invoke_2;
  void v10[3] = &unk_264A16420;
  id v11 = v4;
  id v6 = v4;
  id v7 = objc_msgSend(v3, "na_map:", v10);
  id v8 = [v7 arrayByAddingObjectsFromArray:v5];

  return v8;
}

id __66__HMDHome_mediaDestinationManagersWithHomeTheaterSupportedOptions__block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 audioDestinationManager];
  id v5 = [v4 destination];
  if ([v5 containsHomeTheaterSupportedOptions])
  {
    char v6 = _mediaSystemsContainsAccessory(*(void **)(a1 + 32), v3);

    if ((v6 & 1) == 0)
    {
      id v7 = v4;
      goto LABEL_6;
    }
  }
  else
  {
  }
  id v7 = 0;
LABEL_6:

  return v7;
}

id __66__HMDHome_mediaDestinationManagersWithHomeTheaterSupportedOptions__block_invoke(uint64_t a1, void *a2)
{
  id v2 = [a2 audioDestinationManager];
  id v3 = [v2 destination];
  int v4 = [v3 containsHomeTheaterSupportedOptions];

  if (v4) {
    id v5 = v2;
  }
  else {
    id v5 = 0;
  }

  return v5;
}

- (id)destinationManagerPassingTest:(id)a3
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  int v4 = (uint64_t (**)(id, void *))a3;
  [(HMDHome *)self appleMediaAccessories];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = [v5 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v22;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v22 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = [*(id *)(*((void *)&v21 + 1) + 8 * i) audioDestinationManager];
        if (v10 && (v4[2](v4, v10) & 1) != 0)
        {
          id v11 = v5;
          goto LABEL_22;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v21 objects:v26 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

  [(HMDHome *)self mediaSystems];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = [v11 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v18;
LABEL_12:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(void *)v18 != v14) {
        objc_enumerationMutation(v11);
      }
      uint64_t v10 = objc_msgSend(*(id *)(*((void *)&v17 + 1) + 8 * v15), "audioDestinationManager", (void)v17);
      if (v10)
      {
        if (v4[2](v4, v10)) {
          break;
        }
      }

      if (v13 == ++v15)
      {
        uint64_t v13 = [v11 countByEnumeratingWithState:&v17 objects:v25 count:16];
        if (v13) {
          goto LABEL_12;
        }
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    uint64_t v10 = 0;
  }

LABEL_22:
  return v10;
}

- (id)destinationManagerWithDestinationIdentifier:(id)a3
{
  id v4 = a3;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __55__HMDHome_destinationManagerWithDestinationIdentifier___block_invoke;
  void v8[3] = &unk_264A20FB0;
  id v9 = v4;
  id v5 = v4;
  uint64_t v6 = [(HMDHome *)self destinationManagerPassingTest:v8];

  return v6;
}

uint64_t __55__HMDHome_destinationManagerWithDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 destination];
  id v4 = [v3 uniqueIdentifier];
  uint64_t v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v5;
}

- (id)destinationManagerWithParentIdentifier:(id)a3
{
  id v4 = a3;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __50__HMDHome_destinationManagerWithParentIdentifier___block_invoke;
  void v8[3] = &unk_264A20FB0;
  id v9 = v4;
  id v5 = v4;
  uint64_t v6 = [(HMDHome *)self destinationManagerPassingTest:v8];

  return v6;
}

uint64_t __50__HMDHome_destinationManagerWithParentIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 destination];
  id v4 = [v3 parentIdentifier];
  uint64_t v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v5;
}

- (id)rootDestinationManagerWithDescendantDestinationIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self mediaSystems];
  uint64_t v10 = MEMORY[0x263EF8330];
  uint64_t v11 = 3221225472;
  uint64_t v12 = __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke;
  uint64_t v13 = &unk_264A2E688;
  uint64_t v14 = self;
  id v15 = v4;
  id v6 = v4;
  uint64_t v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", &v10);
  uint64_t v8 = objc_msgSend(v7, "audioDestinationManager", v10, v11, v12, v13, v14);

  return v8;
}

uint64_t __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 components];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke_2;
  v7[3] = &unk_264A163D8;
  id v4 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v5 = objc_msgSend(v3, "na_any:", v7);

  return v5;
}

uint64_t __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [v3 accessory];
  uint64_t v5 = [v3 accessory];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  if (v7)
  {
    id v8 = *(void **)(a1 + 40);
    id v9 = [v7 audioDestination];
    uint64_t v10 = [v9 uniqueIdentifier];
    uint64_t v11 = objc_msgSend(v8, "hmf_isEqualToUUID:", v10);
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = *(id *)(a1 + 32);
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = HMFGetLogIdentifier();
      int v17 = 138543874;
      long long v18 = v15;
      __int16 v19 = 2112;
      id v20 = v3;
      __int16 v21 = 2112;
      long long v22 = v4;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to apple media accessory from component: %@ accessory: %@", (uint8_t *)&v17, 0x20u);
    }
    uint64_t v11 = 0;
  }

  return v11;
}

- (id)destinationManagersWithDestinationIdentifiers:(id)a3 supportedOptions:(unint64_t)a4
{
  id v6 = a3;
  id v7 = [(HMDHome *)self mediaDestinationManagersWithSupportedOptions:a4];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = __74__HMDHome_destinationManagersWithDestinationIdentifiers_supportedOptions___block_invoke;
  void v11[3] = &unk_264A20FB0;
  id v12 = v6;
  id v8 = v6;
  id v9 = objc_msgSend(v7, "na_filter:", v11);

  return v9;
}

uint64_t __74__HMDHome_destinationManagersWithDestinationIdentifiers_supportedOptions___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 identifier];
  uint64_t v4 = [v2 containsObject:v3];

  return v4;
}

- (id)targetAccessoriesWithDestinationIdentifiers:(id)a3
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self appleMediaAccessories];
  id v6 = [(HMDHome *)self mediaSystems];
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  void v23[2] = __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke;
  void v23[3] = &unk_264A16388;
  id v7 = v4;
  id v24 = v7;
  id v8 = objc_msgSend(v6, "na_map:", v23);
  uint64_t v18 = MEMORY[0x263EF8330];
  uint64_t v19 = 3221225472;
  id v20 = __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke_2;
  __int16 v21 = &unk_264A163B0;
  id v9 = v7;
  id v22 = v9;
  uint64_t v10 = objc_msgSend(v5, "na_map:", &v18);
  uint64_t v11 = objc_msgSend(v8, "arrayByAddingObjectsFromArray:", v10, v18, v19, v20, v21);
  uint64_t v12 = [v11 count];
  if (v12 != [v9 count])
  {
    id v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      char v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      __int16 v26 = v16;
      __int16 v27 = 2112;
      id v28 = v9;
      __int16 v29 = 2112;
      long long v30 = v11;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to get target accessories for destination identifiers: %@ targets: %@", buf, 0x20u);
    }

    uint64_t v11 = (void *)MEMORY[0x263EFFA68];
  }

  return v11;
}

id __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 audioDestinationManager];
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = [v4 identifier];
  LODWORD(v5) = [v5 containsObject:v6];

  if (v5)
  {
    id v7 = [v3 targetAccessory];
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

id __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 audioDestinationManager];
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = [v4 identifier];
  LODWORD(v5) = [v5 containsObject:v6];

  if (v5) {
    id v7 = v3;
  }
  else {
    id v7 = 0;
  }

  return v7;
}

- (id)audioDestinationControllerDataForDestination:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self appleMediaAccessories];
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  void v10[2] = __56__HMDHome_audioDestinationControllerDataForDestination___block_invoke;
  void v10[3] = &unk_264A2E3A0;
  id v11 = v4;
  id v6 = v4;
  id v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v10);

  id v8 = [v7 audioDestinationControllerData];

  return v8;
}

uint64_t __56__HMDHome_audioDestinationControllerDataForDestination___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 audioDestinationControllerData];
  id v4 = [v3 destinationIdentifier];
  uint64_t v5 = [*(id *)(a1 + 32) uniqueIdentifier];
  uint64_t v6 = objc_msgSend(v4, "hmf_isEqualToUUID:", v5);

  return v6;
}

- (id)mediaSystemForAppleMediaAccessory:(id)a3
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v5 = [(HMDHome *)self mediaSystems];
  id v6 = (id)[v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if (_mediaSystemContainsAccessory(v9, v4))
        {
          id v6 = v9;
          goto LABEL_11;
        }
      }
      id v6 = (id)[v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v6;
}

- (NSArray)appleMediaAccessories
{
  id v2 = [(HMDHome *)self accessories];
  id v3 = objc_msgSend(v2, "na_map:", &__block_literal_global_1210);

  return (NSArray *)v3;
}

id __32__HMDHome_appleMediaAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  return v4;
}

- (void)_setAccessories:(id)a3
{
  id v7 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (v7)
  {
    id v4 = objc_msgSend(v7, "na_dictionaryWithKeyGenerator:", &__block_literal_global_1208);
    uint64_t v5 = (NSMutableDictionary *)[v4 mutableCopy];
    accessories = self->_accessories;
    self->_accessories = v5;
  }
  else
  {
    [(NSMutableDictionary *)self->_accessories removeAllObjects];
  }
  os_unfair_recursive_lock_unlock();
}

uint64_t __27__HMDHome__setAccessories___block_invoke(uint64_t a1, void *a2)
{
  return [a2 uuid];
}

- (void)setAccessories:(id)a3
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v4 = a3;
  [(HMDHome *)self _setAccessories:v4];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v5 = v4;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v23;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(id *)(*((void *)&v22 + 1) + 8 * v9);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v11 = v10;
        }
        else {
          long long v11 = 0;
        }
        id v12 = v11;

        if (v12)
        {
          long long v20 = 0u;
          long long v21 = 0u;
          long long v18 = 0u;
          long long v19 = 0u;
          long long v13 = [(HMDHome *)self serviceGroups];
          uint64_t v14 = [v13 countByEnumeratingWithState:&v18 objects:v26 count:16];
          if (v14)
          {
            uint64_t v15 = v14;
            uint64_t v16 = *(void *)v19;
            do
            {
              uint64_t v17 = 0;
              do
              {
                if (*(void *)v19 != v16) {
                  objc_enumerationMutation(v13);
                }
                [*(id *)(*((void *)&v18 + 1) + 8 * v17++) fixupServicesForReplacementAccessory:v12];
              }
              while (v15 != v17);
              uint64_t v15 = [v13 countByEnumeratingWithState:&v18 objects:v26 count:16];
            }
            while (v15);
          }
        }
        ++v9;
      }
      while (v9 != v7);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v22 objects:v27 count:16];
    }
    while (v7);
  }
}

- (NSArray)accessories
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = [(NSMutableDictionary *)self->_accessories allValues];
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (HMDAccessory)currentAccessory
{
  id v2 = [(HMDHome *)self accessories];
  id v3 = objc_msgSend(v2, "na_firstObjectPassingTest:", &__block_literal_global_1205);

  return (HMDAccessory *)v3;
}

uint64_t __27__HMDHome_currentAccessory__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  id v5 = v4;
  if (v4) {
    uint64_t v6 = [v4 isCurrentAccessory];
  }
  else {
    uint64_t v6 = 0;
  }

  return v6;
}

- (void)_handleRemoveZoneModel:(id)a3 message:(id)a4
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 uuid];
  uint64_t v9 = [(HMDHome *)self zoneWithUUID:v8];
  id v10 = v9;
  if (v9)
  {
    long long v11 = [v9 name];
    id v12 = [(HMDHome *)self removeName:v11];

    long long v13 = [(HMDHome *)self zones];
    [v13 removeObject:v10];

    uint64_t v14 = [v7 transactionResult];
    [v14 markChanged];
    uint64_t v15 = (void *)MEMORY[0x230FBD990]([v14 markSaveToAssistant]);
    uint64_t v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      long long v18 = HMFGetLogIdentifier();
      long long v19 = [v10 name];
      int v20 = 138543618;
      long long v21 = v18;
      __int16 v22 = 2112;
      long long v23 = v19;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Remove zone: %@", (uint8_t *)&v20, 0x16u);
    }
  }
  else
  {
    uint64_t v14 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v7 respondWithError:v14];
  }
}

- (void)_handleRemoveZone:(id)a3
{
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kZoneUUID"];
  id v6 = [(HMDHome *)self zoneWithUUID:v5];
  if (v6)
  {
    id v7 = [HMDZoneModel alloc];
    uint64_t v8 = [(HMDHome *)self uuid];
    uint64_t v9 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:3 uuid:v5 parentUUID:v8];

    id v10 = [(HMDHome *)self backingStore];
    long long v11 = [v4 name];
    id v12 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    long long v13 = [v10 transaction:v11 options:v12];

    [v13 add:v9];
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 3221225472;
    void v14[2] = __29__HMDHome__handleRemoveZone___block_invoke;
    v14[3] = &unk_264A2F3E8;
    id v15 = v4;
    [v13 run:v14];
  }
  else
  {
    uint64_t v9 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v4 respondWithError:v9];
  }
}

uint64_t __29__HMDHome__handleRemoveZone___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)_handleAddZoneModel:(id)a3 message:(id)a4
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 name];
  uint64_t v9 = objc_msgSend(v8, "hm_truncatedNameString");

  uint64_t v10 = [v6 uuid];
  long long v11 = (void *)v10;
  if (v9 && v10)
  {
    id v12 = [[HMDZone alloc] initWithName:v9 uuid:v10 home:self];
    long long v13 = [(HMDHome *)self zones];
    [v13 addObject:v12];

    uint64_t v14 = [(HMDHome *)self msgDispatcher];
    id v15 = [(HMDHome *)self workQueue];
    [(HMDZone *)v12 configure:v14 queue:v15];

    [(HMDZone *)v12 updateZoneWithModel:v6 message:v7 error:0];
    uint64_t v16 = [v7 transactionResult];
    [v16 markChanged];
    uint64_t v17 = [(HMDZone *)v12 roomUUIDs];
    uint64_t v18 = [v17 count];

    if (v18) {
      [v16 markSaveToAssistant];
    }
    [v7 respondWithPayload:0];
  }
  else
  {
    long long v19 = (void *)MEMORY[0x230FBD990]();
    int v20 = self;
    long long v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      __int16 v22 = HMFGetLogIdentifier();
      int v23 = 138543618;
      uint64_t v24 = v22;
      __int16 v25 = 2112;
      __int16 v26 = v9;
      _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@Can't add zone %@; invalid parameter",
        (uint8_t *)&v23,
        0x16u);
    }
    id v12 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v7 respondWithError:v12];
  }
}

- (void)_handleAddZone:(id)a3
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kZoneName"];
  uint64_t v6 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
  id v7 = (void *)v6;
  if (v5 && v6)
  {
    unint64_t v8 = HMMaxLengthForNaming();
    if ([v5 length] > v8)
    {
      uint64_t v9 = (void *)MEMORY[0x230FBD990]();
      uint64_t v10 = self;
      long long v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        id v12 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v42 = v12;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);
      }
      long long v13 = (void *)MEMORY[0x263F087E8];
      uint64_t v14 = 46;
      goto LABEL_8;
    }
    id v15 = [(HMDHome *)self zoneWithName:v5];
    if (v15)
    {
      uint64_t v16 = (void *)MEMORY[0x263F087E8];
      uint64_t v17 = 1;
    }
    else
    {
      uint64_t v18 = [(HMDHome *)self zones];
      unint64_t v19 = [v18 count];
      unint64_t v20 = maximumZonesPerHome;

      if (v19 < v20)
      {
        long long v21 = [(HMDHome *)self addName:v5];
        if (!v21)
        {
          long long v30 = [HMDZoneModel alloc];
          uint64_t v31 = [(HMDHome *)self uuid];
          long long v32 = [(HMDBackingStoreModelObject *)v30 initWithObjectChangeType:1 uuid:v7 parentUUID:v31];

          [(HMDZoneModel *)v32 setName:v5];
          long long v33 = [(HMDHome *)self backingStore];
          long long v34 = [v4 name];
          long long v35 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
          long long v36 = [v33 transaction:v34 options:v35];

          [v36 add:v32];
          v37[0] = MEMORY[0x263EF8330];
          v37[1] = 3221225472;
          void v37[2] = __26__HMDHome__handleAddZone___block_invoke;
          v37[3] = &unk_264A2E210;
          id v38 = v4;
          id v39 = v7;
          id v40 = v5;
          [v36 run:v37];

          goto LABEL_21;
        }
        __int16 v22 = (void *)MEMORY[0x230FBD990]();
        int v23 = self;
        uint64_t v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          __int16 v25 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v42 = v25;
          __int16 v43 = 2112;
          uint64_t v44 = v5;
          _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Can't add zone %@; invalid parameter",
            buf,
            0x16u);
        }
LABEL_20:
        [v4 respondWithError:v21];
LABEL_21:

        goto LABEL_22;
      }
      __int16 v26 = (void *)MEMORY[0x230FBD990]();
      uint64_t v27 = self;
      uint64_t v28 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        __int16 v29 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v42 = v29;
        __int16 v43 = 2112;
        uint64_t v44 = v5;
        _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_ERROR, "%{public}@Can't add zone %@; already at maximum zones for home",
          buf,
          0x16u);
      }
      uint64_t v16 = (void *)MEMORY[0x263F087E8];
      uint64_t v17 = 49;
    }
    long long v21 = [v16 hmErrorWithCode:v17];
    goto LABEL_20;
  }
  long long v13 = (void *)MEMORY[0x263F087E8];
  uint64_t v14 = 20;
LABEL_8:
  id v15 = [v13 hmErrorWithCode:v14];
  [v4 respondWithError:v15];
LABEL_22:
}

void __26__HMDHome__handleAddZone___block_invoke(uint64_t a1, uint64_t a2)
{
  void v8[2] = *MEMORY[0x263EF8340];
  id v2 = *(void **)(a1 + 32);
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    v7[0] = @"kZoneUUID";
    id v5 = [*(id *)(a1 + 40) UUIDString];
    v7[1] = @"kZoneName";
    v8[0] = v5;
    v8[1] = *(void *)(a1 + 48);
    uint64_t v6 = [NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:2];
    [v2 respondWithPayload:v6];
  }
}

- (void)_handleRemoveRoomModel:(id)a3 message:(id)a4
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  unint64_t v8 = [v6 uuid];
  uint64_t v9 = [(HMDHome *)self roomWithUUID:v8];
  uint64_t v10 = v9;
  if (v9)
  {
    __int16 v51 = v8;
    long long v11 = [v9 uuid];
    id v12 = [(HMDHome *)self roomForEntireHome];
    long long v13 = [v12 uuid];
    int v14 = [v11 isEqual:v13];

    if (v14)
    {
      id v15 = [v7 responseHandler];

      unint64_t v8 = v51;
      if (v15)
      {
        uint64_t v16 = [MEMORY[0x263F087E8] hmErrorWithCode:29];
        uint64_t v17 = [v7 responseHandler];
        ((void (**)(void, void *, void))v17)[2](v17, v16, 0);
      }
    }
    else
    {
      __int16 v53 = v7;
      unint64_t v19 = (void *)MEMORY[0x230FBD990]();
      unint64_t v20 = self;
      long long v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        __int16 v22 = HMFGetLogIdentifier();
        int v23 = [v10 name];
        *(_DWORD *)buf = 138543618;
        id v67 = v22;
        __int16 v68 = 2112;
        id v69 = v23;
        _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Remove room: %@", buf, 0x16u);
      }
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      uint64_t v24 = [(HMDHome *)v20 zones];
      uint64_t v25 = [v24 countByEnumeratingWithState:&v58 objects:v65 count:16];
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = *(void *)v59;
        do
        {
          for (uint64_t i = 0; i != v26; ++i)
          {
            if (*(void *)v59 != v27) {
              objc_enumerationMutation(v24);
            }
            [*(id *)(*((void *)&v58 + 1) + 8 * i) removeRoom:v10];
          }
          uint64_t v26 = [v24 countByEnumeratingWithState:&v58 objects:v65 count:16];
        }
        while (v26);
      }
      id v50 = v6;

      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      BOOL v52 = v20;
      __int16 v29 = [(HMDHome *)v20 accessories];
      uint64_t v30 = [v29 countByEnumeratingWithState:&v54 objects:v64 count:16];
      if (v30)
      {
        uint64_t v31 = v30;
        uint64_t v32 = *(void *)v55;
        do
        {
          for (uint64_t j = 0; j != v31; ++j)
          {
            if (*(void *)v55 != v32) {
              objc_enumerationMutation(v29);
            }
            long long v34 = *(void **)(*((void *)&v54 + 1) + 8 * j);
            long long v35 = objc_msgSend(v10, "uuid", v50);
            long long v36 = [v34 room];
            long long v37 = [v36 uuid];
            int v38 = [v35 isEqual:v37];

            if (v38)
            {
              id v39 = [v53 transactionResult];
              id v40 = [(HMDHome *)v52 roomForEntireHome];
              objc_msgSend(v34, "updateRoom:source:", v40, objc_msgSend(v39, "source"));
            }
          }
          uint64_t v31 = [v29 countByEnumeratingWithState:&v54 objects:v64 count:16];
        }
        while (v31);
      }

      long long v41 = [v10 name];
      id v42 = [(HMDHome *)v52 removeName:v41];

      __int16 v43 = [(HMDHome *)v52 rooms];
      [v43 removeObject:v10];

      id v7 = v53;
      uint64_t v44 = [v53 transactionResult];
      [v44 markChanged];
      [v44 markSaveToAssistant];
      v62[0] = @"kHomeUUID";
      uint64_t v45 = [(HMDHome *)v52 uuid];
      id v46 = [v45 UUIDString];
      v63[0] = v46;
      v62[1] = @"kRoomName";
      id v47 = [v10 name];
      v63[1] = v47;
      void v62[2] = @"kRoomUUID";
      unint64_t v8 = v51;
      id v48 = [v51 UUIDString];
      void v63[2] = v48;
      id v49 = [NSDictionary dictionaryWithObjects:v63 forKeys:v62 count:3];

      [v53 respondWithPayload:v49];
      id v6 = v50;
    }
  }
  else
  {
    uint64_t v18 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v7 respondWithError:v18];
  }
}

- (void)_handleRemoveRoom:(id)a3
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kRoomUUID"];
  if (!v5)
  {
    uint64_t v16 = (void *)MEMORY[0x230FBD990]();
    uint64_t v17 = self;
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      unint64_t v19 = HMFGetLogIdentifier();
      unint64_t v20 = [v4 messagePayload];
      *(_DWORD *)buf = 138543618;
      long long v57 = v19;
      __int16 v58 = 2112;
      long long v59 = v20;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Cannot find room UUID in remove room message payload: %@", buf, 0x16u);
    }
    int v14 = (void *)MEMORY[0x263F087E8];
    uint64_t v15 = 2;
    goto LABEL_9;
  }
  id v6 = [(HMDHome *)self roomForEntireHome];
  id v7 = [v6 uuid];
  int v8 = [v5 isEqual:v7];

  if (v8)
  {
    uint64_t v9 = (void *)MEMORY[0x230FBD990]();
    uint64_t v10 = self;
    long long v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v12 = HMFGetLogIdentifier();
      long long v13 = [(HMDHome *)v10 roomForEntireHome];
      *(_DWORD *)buf = 138543618;
      long long v57 = v12;
      __int16 v58 = 2112;
      long long v59 = v13;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle request to remove roomForEntireHome: %@", buf, 0x16u);
    }
    int v14 = (void *)MEMORY[0x263F087E8];
    uint64_t v15 = 29;
LABEL_9:
    long long v21 = [v14 hmErrorWithCode:v15];
    [v4 respondWithError:v21];
    goto LABEL_29;
  }
  long long v21 = [(HMDHome *)self roomWithUUID:v5];
  __int16 v22 = (void *)MEMORY[0x230FBD990]();
  id v50 = self;
  int v23 = HMFGetOSLogHandle();
  uint64_t v24 = v23;
  if (v21)
  {
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v57 = v25;
      __int16 v58 = 2112;
      long long v59 = v21;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Removing room: %@", buf, 0x16u);
    }
    id v48 = v21;

    uint64_t v26 = [HMDRoomModel alloc];
    uint64_t v27 = [(HMDHome *)v50 uuid];
    uint64_t v28 = [(HMDBackingStoreModelObject *)v26 initWithObjectChangeType:3 uuid:v5 parentUUID:v27];

    __int16 v29 = [(HMDHome *)v50 backingStore];
    [v4 name];
    v31 = id v30 = v4;
    uint64_t v32 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    long long v33 = [v29 transaction:v31 options:v32];

    id v47 = (void *)v28;
    id v49 = v30;
    [v33 add:v28 withMessage:v30];
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v34 = [(HMDHome *)v50 accessories];
    uint64_t v35 = [v34 countByEnumeratingWithState:&v51 objects:v55 count:16];
    if (v35)
    {
      uint64_t v36 = v35;
      uint64_t v37 = *(void *)v52;
      do
      {
        for (uint64_t i = 0; i != v36; ++i)
        {
          if (*(void *)v52 != v37) {
            objc_enumerationMutation(v34);
          }
          id v39 = *(void **)(*((void *)&v51 + 1) + 8 * i);
          id v40 = [v39 room];
          long long v41 = [v40 uuid];
          int v42 = [v5 isEqual:v41];

          if (v42)
          {
            __int16 v43 = [(HMDHome *)v50 roomForEntireHome];
            uint64_t v44 = [v39 modelWithUpdatedRoom:v43];

            if (v44) {
              [v33 add:v44];
            }
          }
        }
        uint64_t v36 = [v34 countByEnumeratingWithState:&v51 objects:v55 count:16];
      }
      while (v36);
    }

    [v33 run];
    long long v21 = v48;
    id v4 = v49;
    uint64_t v45 = v47;
  }
  else
  {
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      id v46 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v57 = v46;
      __int16 v58 = 2112;
      long long v59 = v5;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Could not find room to remove with UUID: %@", buf, 0x16u);
    }
    uint64_t v45 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v4 respondWithError:v45];
  }

LABEL_29:
}

- (void)_handleAddRoomModel:(id)a3 message:(id)a4
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  int v8 = [v6 name];
  uint64_t v9 = [v6 uuid];
  uint64_t v10 = (void *)v9;
  if (v8 && v9)
  {
    id v33 = v6;
    uint64_t v11 = objc_msgSend(v8, "hm_truncatedNameString");

    id v12 = (void *)MEMORY[0x230FBD990]();
    long long v13 = self;
    int v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v37 = v15;
      __int16 v38 = 2112;
      uint64_t v39 = v11;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Add room: %@", buf, 0x16u);
    }
    uint64_t v16 = [[HMDRoom alloc] initWithName:v11 uuid:v10 home:v13];
    uint64_t v17 = [(HMDHome *)v13 rooms];
    [v17 addObject:v16];

    uint64_t v18 = [(HMDHome *)v13 msgDispatcher];
    unint64_t v19 = [(HMDHome *)v13 workQueue];
    [(HMDRoom *)v16 configure:v18 queue:v19];

    unint64_t v20 = [v7 transactionResult];
    [v20 markChanged];
    [v20 markSaveToAssistant];
    v34[0] = @"kHomeUUID";
    long long v21 = [(HMDHome *)v13 uuid];
    __int16 v22 = [v21 UUIDString];
    v35[0] = v22;
    v35[1] = v11;
    v34[1] = @"kRoomName";
    v34[2] = @"kRoomUUID";
    [(HMDRoom *)v16 uuid];
    uint64_t v24 = v23 = v7;
    uint64_t v25 = [v24 UUIDString];
    v35[2] = v25;
    [NSDictionary dictionaryWithObjects:v35 forKeys:v34 count:3];
    v27 = uint64_t v26 = v10;

    id v7 = v23;
    [v23 respondWithPayload:v27];

    uint64_t v10 = v26;
    int v8 = (void *)v11;
    id v6 = v33;
    goto LABEL_10;
  }
  uint64_t v28 = (void *)MEMORY[0x230FBD990]();
  __int16 v29 = self;
  id v30 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    uint64_t v31 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v37 = v31;
    __int16 v38 = 2112;
    uint64_t v39 = (uint64_t)v8;
    _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Can't add room %@; invalid parameter", buf, 0x16u);
  }
  uint64_t v32 = [v7 responseHandler];

  if (v32)
  {
    uint64_t v16 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    unint64_t v20 = [v7 responseHandler];
    ((void (**)(void, HMDRoom *, void))v20)[2](v20, v16, 0);
LABEL_10:
  }
}

- (void)_handleAddRoom:(id)a3
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kRoomName"];
  unint64_t v6 = HMMaxLengthForNaming();
  if ([v5 length] <= v6)
  {
    uint64_t v12 = [(HMDHome *)self roomWithName:v5];
    if (v12)
    {
      uint64_t v11 = (void *)v12;
      long long v13 = [MEMORY[0x263F087E8] hmErrorWithCode:1];
      [v4 respondWithError:v13];

      goto LABEL_17;
    }
    int v14 = [(HMDHome *)self rooms];
    unint64_t v15 = [v14 count];
    unint64_t v16 = maximumRoomsPerHome;

    if (v15 >= v16)
    {
      __int16 v22 = (void *)MEMORY[0x230FBD990]();
      int v23 = self;
      uint64_t v24 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = HMFGetLogIdentifier();
        int v34 = 138543618;
        uint64_t v35 = v25;
        __int16 v36 = 2112;
        uint64_t v37 = v5;
        _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Can't add room %@ to home; already at maximum rooms for home",
          (uint8_t *)&v34,
          0x16u);
      }
      uint64_t v17 = [MEMORY[0x263F087E8] hmErrorWithCode:49];
    }
    else
    {
      uint64_t v17 = [(HMDHome *)self addName:v5];
      if (!v17)
      {
        uint64_t v26 = [HMDRoomModel alloc];
        uint64_t v27 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
        uint64_t v28 = [(HMDHome *)self uuid];
        __int16 v29 = [(HMDBackingStoreModelObject *)v26 initWithObjectChangeType:1 uuid:v27 parentUUID:v28];

        [(HMDRoomModel *)v29 setName:v5];
        id v30 = [(HMDHome *)self backingStore];
        uint64_t v31 = [v4 name];
        uint64_t v32 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        id v33 = [v30 transaction:v31 options:v32];

        [v33 add:v29 withMessage:v4];
        [v33 run];

        goto LABEL_16;
      }
      uint64_t v18 = (void *)MEMORY[0x230FBD990]();
      unint64_t v19 = self;
      unint64_t v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        long long v21 = HMFGetLogIdentifier();
        int v34 = 138543874;
        uint64_t v35 = v21;
        __int16 v36 = 2112;
        uint64_t v37 = v5;
        __int16 v38 = 2112;
        uint64_t v39 = v17;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@Can't add room %@ to home; namespace error %@",
          (uint8_t *)&v34,
          0x20u);
      }
    }
    [v4 respondWithError:v17];
LABEL_16:

    uint64_t v11 = 0;
    goto LABEL_17;
  }
  id v7 = (void *)MEMORY[0x230FBD990]();
  int v8 = self;
  uint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    int v34 = 138543362;
    uint64_t v35 = v10;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v34, 0xCu);
  }
  uint64_t v11 = [MEMORY[0x263F087E8] hmErrorWithCode:46];
  [v4 respondWithError:v11];
LABEL_17:
}

- (void)_handleHomeDataRequest:(id)a3
{
  id v5 = a3;
  id v4 = [(HMDHome *)self residentSyncManager];
  [v4 performSync];

  [v5 respondWithSuccess];
}

- (id)_handleRenameHomeModel:(id)a3 message:(id)a4
{
  void v23[2] = *MEMORY[0x263EF8340];
  id v6 = a4;
  id v7 = [a3 name];
  int v8 = objc_msgSend(v7, "hm_truncatedNameString");

  if (v8 && [v8 length])
  {
    uint64_t v9 = [v6 transactionResult];
    uint64_t v10 = [v9 label];
    char v11 = [v10 isEqualToString:@"kRenameHomeRequestKey"];

    if ((v11 & 1) == 0)
    {
      uint64_t v12 = [(HMDHome *)self homeManager];
      long long v13 = [(HMDHome *)self name];
      int v14 = [v12 uuid];
      v23[0] = v14;
      unint64_t v15 = [(HMDHome *)self uuid];
      v23[1] = v15;
      unint64_t v16 = [MEMORY[0x263EFF8C0] arrayWithObjects:v23 count:2];
      id v17 = (id)[v12 replaceName:v13 withNewName:v8 inNamespaces:v16];
    }
    [(HMDHome *)self setName:v8];
    long long v21 = @"HMDHomeNameNotificationKey";
    __int16 v22 = v8;
    uint64_t v18 = [NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    logAndPostNotification(@"HMDHomeNameChangedNotification", self, v18);

    unint64_t v19 = 0;
  }
  else
  {
    unint64_t v19 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:20 userInfo:0];
  }

  return v19;
}

- (void)_handleRename:(id)a3
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kHomeName"];
  unint64_t v6 = HMMaxLengthForNaming();
  if ([v5 length] <= v6)
  {
    char v11 = [(HMDHome *)self homeManager];
    uint64_t v12 = [(HMDHome *)self name];
    long long v13 = [v11 uuid];
    v31[0] = v13;
    int v14 = [(HMDHome *)self uuid];
    v31[1] = v14;
    unint64_t v15 = [MEMORY[0x263EFF8C0] arrayWithObjects:v31 count:2];
    unint64_t v16 = [v11 replaceName:v12 withNewName:v5 inNamespaces:v15];

    if (v16)
    {
      if ([(HMDHomeModel *)v16 code] == 31)
      {
        id v17 = (void *)MEMORY[0x263F087E8];
        uint64_t v18 = *MEMORY[0x263F0C710];
        unint64_t v19 = [(HMDHomeModel *)v16 userInfo];
        uint64_t v20 = [v17 errorWithDomain:v18 code:32 userInfo:v19];

        unint64_t v16 = (HMDHomeModel *)v20;
      }
      [v4 respondWithError:v16];
    }
    else
    {
      long long v21 = [HMDHomeModel alloc];
      __int16 v22 = [(HMDHome *)self uuid];
      int v23 = [v11 uuid];
      unint64_t v16 = [(HMDBackingStoreModelObject *)v21 initWithObjectChangeType:2 uuid:v22 parentUUID:v23];

      [(HMDHomeModel *)v16 setName:v5];
      uint64_t v24 = [(HMDHome *)self backingStore];
      uint64_t v25 = [v4 name];
      uint64_t v26 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      uint64_t v27 = [v24 transaction:v25 options:v26];

      [v27 add:v16];
      v28[0] = MEMORY[0x263EF8330];
      v28[1] = 3221225472;
      void v28[2] = __25__HMDHome__handleRename___block_invoke;
      void v28[3] = &unk_264A2F370;
      id v29 = v4;
      id v30 = v5;
      [v27 run:v28];
    }
  }
  else
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    int v8 = self;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v33 = v10;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);
    }
    char v11 = [MEMORY[0x263F087E8] hmErrorWithCode:46];
    [v4 respondWithError:v11];
  }
}

void __25__HMDHome__handleRename___block_invoke(uint64_t a1, uint64_t a2)
{
  v7[1] = *MEMORY[0x263EF8340];
  id v2 = *(void **)(a1 + 32);
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    unint64_t v6 = @"kHomeName";
    v7[0] = v4;
    id v5 = [NSDictionary dictionaryWithObjects:v7 forKeys:&v6 count:1];
    [v2 respondWithPayload:v5];
  }
}

- (id)_unexpectedCharacteristicsFromCharacteristicNotifications:(id)a3
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self notificationRegistrations];
  uint64_t v6 = [v5 count];

  if (v6)
  {
    id v7 = (void *)MEMORY[0x263EFFA68];
    goto LABEL_42;
  }
  __int16 v58 = [MEMORY[0x263EFF980] array];
  context = (void *)MEMORY[0x230FBD990]();
  int v8 = [v4 allKeys];
  v80[0] = MEMORY[0x263EF8330];
  v80[1] = 3221225472;
  v80[2] = __69__HMDHome__unexpectedCharacteristicsFromCharacteristicNotifications___block_invoke;
  v80[3] = &unk_264A16360;
  id v44 = v4;
  id v47 = v4;
  id v81 = v47;
  id v82 = self;
  int v42 = v8;
  uint64_t v9 = objc_msgSend(v8, "na_map:", v80);
  id v78 = 0;
  id v79 = 0;
  -[HMDHome _notificationPayloadsForRemoteGateway:accessories:enableCharacteristicNotificationPayload:characteristicNotificationThresholdsPayload:disableCharacteristicNotificationPayload:enableMediaNotificationPayload:disableMediaNotificationPayload:](self, 0, v9, &v79, 0, &v78, 0, 0);
  id v49 = v79;
  id v48 = v78;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  obuint64_t j = v9;
  uint64_t v50 = [obj countByEnumeratingWithState:&v74 objects:v91 count:16];
  if (!v50) {
    goto LABEL_41;
  }
  uint64_t v46 = *(void *)v75;
  uint64_t v60 = self;
  do
  {
    uint64_t v10 = 0;
    do
    {
      if (*(void *)v75 != v46) {
        objc_enumerationMutation(obj);
      }
      uint64_t v51 = v10;
      char v11 = *(void **)(*((void *)&v74 + 1) + 8 * v10);
      uint64_t v12 = [v11 uuid];
      uint64_t v13 = [v12 UUIDString];

      long long v54 = objc_msgSend(v47, "hmf_dictionaryForKey:", v13);
      objc_msgSend(v49, "hmf_arrayForKey:", v13);
      uint64_t v62 = v61 = (void *)v13;
      long long v59 = objc_msgSend(v48, "hmf_arrayForKey:", v13);
      long long v70 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      id v52 = [v11 services];
      uint64_t v55 = [v52 countByEnumeratingWithState:&v70 objects:v90 count:16];
      if (v55)
      {
        uint64_t v53 = *(void *)v71;
        do
        {
          for (uint64_t i = 0; i != v55; ++i)
          {
            if (*(void *)v71 != v53) {
              objc_enumerationMutation(v52);
            }
            unint64_t v15 = *(void **)(*((void *)&v70 + 1) + 8 * i);
            unint64_t v16 = [v15 instanceID];
            id v17 = [v16 stringValue];
            uint64_t v18 = objc_msgSend(v54, "hmf_dictionaryForKey:", v17);

            if (v18)
            {
              uint64_t v56 = i;
              long long v68 = 0u;
              long long v69 = 0u;
              long long v66 = 0u;
              long long v67 = 0u;
              id v63 = [v15 characteristics];
              uint64_t v65 = [v63 countByEnumeratingWithState:&v66 objects:v89 count:16];
              if (!v65) {
                goto LABEL_36;
              }
              uint64_t v64 = *(void *)v67;
              while (1)
              {
                for (uint64_t j = 0; j != v65; ++j)
                {
                  if (*(void *)v67 != v64) {
                    objc_enumerationMutation(v63);
                  }
                  uint64_t v20 = *(void **)(*((void *)&v66 + 1) + 8 * j);
                  long long v21 = [v20 instanceID];
                  __int16 v22 = [v21 stringValue];
                  int v23 = [v18 objectForKey:v22];

                  if (v23)
                  {
                    uint64_t v24 = [v21 stringValueSafe];
                    uint64_t v25 = objc_msgSend(v18, "hmf_dictionaryForKey:", v24);

                    uint64_t v26 = objc_msgSend(v25, "hmf_numberForKey:", @"kCharacteristicValueUpdateReasonKey");
                    uint64_t v27 = v26;
                    if (v26 && ([v26 unsignedIntegerValue] & 1) != 0)
                    {
                      uint64_t v28 = (void *)MEMORY[0x230FBD990]();
                      id v29 = self;
                      id v30 = HMFGetOSLogHandle();
                      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
                      {
                        uint64_t v31 = HMFGetLogIdentifier();
                        uint64_t v32 = [v20 shortDescription];
                        *(_DWORD *)buf = 138543874;
                        id v84 = v31;
                        __int16 v85 = 2112;
                        __int16 v86 = v32;
                        __int16 v87 = 2112;
                        __int16 v88 = v61;
                        id v33 = v30;
                        os_log_type_t v34 = OS_LOG_TYPE_INFO;
                        uint64_t v35 = "%{public}@Received persistent characteristic changed notification for bulletin characteris"
                              "tic (%@), accessoryUUID %@";
LABEL_31:
                        _os_log_impl(&dword_22F52A000, v33, v34, v35, buf, 0x20u);

                        self = v60;
                      }
LABEL_32:
                    }
                    else
                    {
                      if ([v62 containsObject:v21])
                      {
                        uint64_t v28 = (void *)MEMORY[0x230FBD990]();
                        id v29 = self;
                        id v30 = HMFGetOSLogHandle();
                        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v31 = HMFGetLogIdentifier();
                          uint64_t v32 = [v20 shortDescription];
                          *(_DWORD *)buf = 138543874;
                          id v84 = v31;
                          __int16 v85 = 2112;
                          __int16 v86 = v32;
                          __int16 v87 = 2112;
                          __int16 v88 = v61;
                          id v33 = v30;
                          os_log_type_t v34 = OS_LOG_TYPE_DEBUG;
                          uint64_t v35 = "%{public}@Received persistent characteristic changed notification for characteristic (%@"
                                "), accessoryUUID %@";
                          goto LABEL_31;
                        }
                        goto LABEL_32;
                      }
                      if ([v59 containsObject:v21])
                      {
                        __int16 v36 = (void *)MEMORY[0x230FBD990]();
                        uint64_t v37 = self;
                        __int16 v38 = HMFGetOSLogHandle();
                        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
                        {
                          uint64_t v39 = HMFGetLogIdentifier();
                          [v20 shortDescription];
                          uint64_t v40 = v57 = v36;
                          *(_DWORD *)buf = 138543874;
                          id v84 = v39;
                          __int16 v85 = 2112;
                          __int16 v86 = v40;
                          __int16 v87 = 2112;
                          __int16 v88 = v61;
                          _os_log_impl(&dword_22F52A000, v38, OS_LOG_TYPE_ERROR, "%{public}@Received unexpected characteristic changed notification for characteristic (%@), accessoryUUID %@", buf, 0x20u);

                          __int16 v36 = v57;
                          self = v60;
                        }

                        [v58 addObject:v20];
                      }
                    }
                  }
                }
                uint64_t v65 = [v63 countByEnumeratingWithState:&v66 objects:v89 count:16];
                if (!v65)
                {
LABEL_36:

                  uint64_t i = v56;
                  break;
                }
              }
            }
          }
          uint64_t v55 = [v52 countByEnumeratingWithState:&v70 objects:v90 count:16];
        }
        while (v55);
      }

      uint64_t v10 = v51 + 1;
    }
    while (v51 + 1 != v50);
    uint64_t v50 = [obj countByEnumeratingWithState:&v74 objects:v91 count:16];
  }
  while (v50);
LABEL_41:

  id v7 = (void *)[v58 copy];

  id v4 = v44;
LABEL_42:

  return v7;
}

id __69__HMDHome__unexpectedCharacteristicsFromCharacteristicNotifications___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  id v6 = 0;
  if ((isKindOfClass & 1) != 0 && v4)
  {
    id v7 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v3];
    int v8 = [*(id *)(a1 + 40) accessoryWithUUID:v7];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    id v6 = v9;
  }
  return v6;
}

- (void)_notificationPayloadsForRemoteGateway:(void *)a3 accessories:(void *)a4 enableCharacteristicNotificationPayload:(void *)a5 characteristicNotificationThresholdsPayload:(void *)a6 disableCharacteristicNotificationPayload:(void *)a7 enableMediaNotificationPayload:(void *)a8 disableMediaNotificationPayload:
{
  uint64_t v163 = *MEMORY[0x263EF8340];
  id v100 = a3;
  if (a1)
  {
    id v129 = [MEMORY[0x263EFF980] array];
    long long v146 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    obuint64_t j = [a1 triggers];
    uint64_t v9 = [obj countByEnumeratingWithState:&v146 objects:v162 count:16];
    id v118 = a1;
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v147;
      uint64_t v116 = *(void *)v147;
      do
      {
        uint64_t v12 = 0;
        uint64_t v119 = v10;
        do
        {
          if (*(void *)v147 != v11) {
            objc_enumerationMutation(obj);
          }
          id v13 = *(id *)(*((void *)&v146 + 1) + 8 * v12);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            int v14 = v13;
          }
          else {
            int v14 = 0;
          }
          id v15 = v14;

          if ([v15 shouldActivateOnLocalDevice])
          {
            id v124 = v15;
            uint64_t v126 = v12;
            long long v144 = 0u;
            long long v145 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            unint64_t v16 = [v15 characteristicEvents];
            uint64_t v17 = [v16 countByEnumeratingWithState:&v142 objects:v161 count:16];
            if (v17)
            {
              uint64_t v18 = v17;
              uint64_t v19 = *(void *)v143;
              do
              {
                for (uint64_t i = 0; i != v18; ++i)
                {
                  if (*(void *)v143 != v19) {
                    objc_enumerationMutation(v16);
                  }
                  long long v21 = *(void **)(*((void *)&v142 + 1) + 8 * i);
                  __int16 v22 = [v21 characteristic];

                  if (v22)
                  {
                    int v23 = [v21 characteristic];
                    [v129 addObject:v23];
                  }
                  else
                  {
                    uint64_t v24 = (void *)MEMORY[0x230FBD990]();
                    id v25 = v118;
                    uint64_t v26 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v27 = HMFGetLogIdentifier();
                      *(_DWORD *)buf = 138543618;
                      *(void *)&uint8_t buf[4] = v27;
                      *(_WORD *)&unsigned char buf[12] = 2112;
                      *(void *)&buf[14] = v21;
                      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_ERROR, "%{public}@Characteristic of HMDCharacteristicEvent %@ is nil!", buf, 0x16u);
                    }
                  }
                  a1 = v118;
                }
                uint64_t v18 = [v16 countByEnumeratingWithState:&v142 objects:v161 count:16];
              }
              while (v18);
            }

            uint64_t v11 = v116;
            uint64_t v10 = v119;
            id v15 = v124;
            uint64_t v12 = v126;
          }

          ++v12;
        }
        while (v12 != v10);
        uint64_t v10 = [obj countByEnumeratingWithState:&v146 objects:v162 count:16];
      }
      while (v10);
    }

    unint64_t v28 = 0x263EFF000uLL;
    long long v103 = [MEMORY[0x263EFF9A0] dictionary];
    long long v101 = [MEMORY[0x263EFF9A0] dictionary];
    long long v102 = [MEMORY[0x263EFF9A0] dictionary];
    if (a7)
    {
      uint64_t v29 = [MEMORY[0x263EFF9A0] dictionary];
    }
    else
    {
      uint64_t v29 = 0;
    }
    __int16 v94 = (void *)v29;
    if (a8)
    {
      id v93 = [MEMORY[0x263EFF9A0] dictionary];
    }
    else
    {
      id v93 = 0;
    }
    unint64_t v30 = 0x263EFF000uLL;
    long long v140 = 0u;
    long long v141 = 0u;
    long long v138 = 0u;
    long long v139 = 0u;
    id v105 = v100;
    uint64_t v31 = [v105 countByEnumeratingWithState:&v138 objects:v160 count:16];
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v107 = *(void *)v139;
      uint64_t v125 = *MEMORY[0x263F356A0];
      do
      {
        uint64_t v33 = 0;
        uint64_t v104 = v32;
        do
        {
          if (*(void *)v139 != v107) {
            objc_enumerationMutation(v105);
          }
          os_log_type_t v34 = *(void **)(*((void *)&v138 + 1) + 8 * v33);
          __int16 v120 = [*(id *)(v30 + 2432) array];
          uint64_t v35 = [*(id *)(v30 + 2432) array];
          __int16 v36 = [*(id *)(v28 + 2464) dictionary];
          id v37 = v34;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            __int16 v38 = v37;
          }
          else {
            __int16 v38 = 0;
          }
          id v39 = v38;
          uint64_t v109 = v37;

          if (v39)
          {
            id v114 = v35;
            uint64_t v108 = v33;
            long long v115 = v36;
            if (shouldSkipRemoteAccessoryNotificationRegistration(a1, v39))
            {
              uint64_t v40 = (void *)MEMORY[0x230FBD990]();
              id v41 = a1;
              int v42 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                __int16 v43 = HMFGetLogIdentifier();
                *(void *)&buf[8] = 0;
                *(void *)buf = 0;
                id v44 = [v39 uuid];

                if (v44)
                {
                  uint64_t v45 = [v39 uuid];
                  [v45 getUUIDBytes:buf];
                }
                else
                {
                  *(_OWORD *)buf = *MEMORY[0x263F42690];
                }
                long long v159 = *(_OWORD *)buf;
                *(_DWORD *)buf = 138543874;
                *(void *)&uint8_t buf[4] = v43;
                *(_WORD *)&unsigned char buf[12] = 1040;
                *(_DWORD *)&buf[14] = 16;
                *(_WORD *)&unsigned char buf[18] = 2096;
                *(void *)&buf[20] = &v159;
                _os_log_impl(&dword_22F52A000, v42, OS_LOG_TYPE_INFO, "%{public}@Dropping all characteristics for %{uuid_t}.16P from remote notification as partitioned network is no longer supported by residents", buf, 0x1Cu);

                unint64_t v30 = 0x263EFF000;
                __int16 v36 = v115;
              }

              uint64_t v33 = v108;
              uint64_t v35 = v114;
              goto LABEL_94;
            }
            long long v136 = 0u;
            long long v137 = 0u;
            long long v134 = 0u;
            long long v135 = 0u;
            id v106 = v39;
            id v110 = [v39 services];
            uint64_t v46 = v120;
            uint64_t v112 = [v110 countByEnumeratingWithState:&v134 objects:v158 count:16];
            if (!v112) {
              goto LABEL_84;
            }
            uint64_t v111 = *(void *)v135;
            while (1)
            {
              uint64_t v47 = 0;
              do
              {
                if (*(void *)v135 != v111) {
                  objc_enumerationMutation(v110);
                }
                uint64_t v113 = v47;
                id v48 = *(void **)(*((void *)&v134 + 1) + 8 * v47);
                id v49 = [v48 type];
                long long v130 = 0u;
                long long v131 = 0u;
                long long v132 = 0u;
                long long v133 = 0u;
                uint64_t v50 = [v48 characteristics];
                uint64_t v51 = [v50 countByEnumeratingWithState:&v130 objects:v157 count:16];
                if (v51)
                {
                  uint64_t v52 = v51;
                  uint64_t v53 = *(void *)v131;
                  uint64_t v127 = *(void *)v131;
                  id v128 = v50;
                  do
                  {
                    uint64_t v54 = 0;
                    uint64_t v117 = v52;
                    do
                    {
                      if (*(void *)v131 != v53) {
                        objc_enumerationMutation(v50);
                      }
                      uint64_t v55 = *(void **)(*((void *)&v130 + 1) + 8 * v54);
                      if ([v55 supportsNotification])
                      {
                        uint64_t v56 = [a1 hapMetadata];
                        char v57 = [v56 shouldFilterEnableNotificationsForCharacteristicType:0 serviceType:v49];

                        if ((v57 & 1) == 0)
                        {
                          __int16 v58 = v49;
                          if ([v49 isEqualToString:v125])
                          {
                            long long v59 = [v55 type];
                            int v60 = [v59 isEqualToString:@"000000A6-0000-1000-8000-0026BB765291"];
                          }
                          else
                          {
                            int v60 = 0;
                          }
                          long long v61 = [a1 hapMetadata];
                          uint64_t v62 = [v55 type];
                          char v63 = [v61 shouldAutoEnableNotificationForCharacteristic:v62 ofService:v58];

                          char v64 = [v55 isNonHomeNotificationsEnabled];
                          if (([v129 containsObject:v55] & 1) != 0
                            || (v64 & 1) != 0
                            || (v63 & 1) != 0
                            || v60)
                          {
                            id obja = (id)MEMORY[0x230FBD990]();
                            id v69 = a1;
                            long long v70 = HMFGetOSLogHandle();
                            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
                            {
                              long long v71 = HMFGetLogIdentifier();
                              long long v72 = HMFBooleanToString();
                              long long v73 = HMFBooleanToString();
                              long long v74 = HMFBooleanToString();
                              long long v75 = HMFBooleanToString();
                              *(_DWORD *)buf = 138544642;
                              *(void *)&uint8_t buf[4] = v71;
                              *(_WORD *)&unsigned char buf[12] = 2112;
                              *(void *)&buf[14] = v55;
                              *(_WORD *)&buf[22] = 2112;
                              *(void *)&unsigned char buf[24] = v72;
                              __int16 v151 = 2112;
                              uint64_t v152 = v73;
                              __int16 v153 = 2112;
                              long long v154 = v74;
                              __int16 v155 = 2112;
                              uint64_t v156 = v75;
                              _os_log_impl(&dword_22F52A000, v70, OS_LOG_TYPE_DEBUG, "%{public}@Enabling characteristic %@ because characteristicInEvent: %@ nonHomeNotificationsEnabled: %@ autoEnableNotification: %@ accessoryFlags: %@", buf, 0x3Eu);

                              uint64_t v52 = v117;
                            }

                            long long v76 = [v55 changeThresholdForNonHomeClientEnabledNotifications];
                            long long v77 = [v69 hapMetadata];
                            id v78 = [v55 type];
                            id v49 = v58;
                            int v79 = [v77 shouldEnableHomeNotificationForCharacteristicType:v78 serviceType:v58];

                            if (v76 && (v79 & a2 & 1) == 0)
                            {
                              id v80 = [v55 instanceID];
                              id v81 = [v80 stringValue];
                              [v115 setObject:v76 forKeyedSubscript:v81];
                            }
                            id v82 = [v55 instanceID];
                            uint64_t v46 = v120;
                            [v120 addObject:v82];

                            a1 = v118;
                          }
                          else if (a2)
                          {
                            uint64_t v65 = [v55 type];
                            long long v66 = [a1 hapMetadata];
                            id v49 = v58;
                            int v67 = [v66 shouldEnableHomeNotificationForCharacteristicType:v65 serviceType:v58];

                            if (v67)
                            {
                              long long v68 = [v55 instanceID];
                              [v46 addObject:v68];
                            }
LABEL_78:
                          }
                          else
                          {
                            id v49 = v58;
                            if (![v55 isClientNotificationEnabled])
                            {
                              uint64_t v65 = [v55 instanceID];
                              [v114 addObject:v65];
                              goto LABEL_78;
                            }
                            id v83 = (void *)MEMORY[0x230FBD990]();
                            id v84 = a1;
                            __int16 v85 = HMFGetOSLogHandle();
                            if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
                            {
                              __int16 v86 = HMFGetLogIdentifier();
                              __int16 v87 = [v55 notificationRegistrations];
                              *(_DWORD *)buf = 138543874;
                              *(void *)&uint8_t buf[4] = v86;
                              *(_WORD *)&unsigned char buf[12] = 2112;
                              *(void *)&buf[14] = v55;
                              *(_WORD *)&buf[22] = 2112;
                              *(void *)&unsigned char buf[24] = v87;
                              _os_log_impl(&dword_22F52A000, v85, OS_LOG_TYPE_DEFAULT, "%{public}@Not disabling characteristic %@ because client(s) are registered: %@", buf, 0x20u);

                              id v49 = v58;
                              uint64_t v46 = v120;
                            }
                          }
                          uint64_t v53 = v127;
                          uint64_t v50 = v128;
                        }
                      }
                      ++v54;
                    }
                    while (v52 != v54);
                    uint64_t v52 = [v50 countByEnumeratingWithState:&v130 objects:v157 count:16];
                  }
                  while (v52);
                }

                uint64_t v47 = v113 + 1;
              }
              while (v113 + 1 != v112);
              uint64_t v112 = [v110 countByEnumeratingWithState:&v134 objects:v158 count:16];
              if (!v112)
              {
LABEL_84:

                __int16 v88 = [v109 uuid];
                id v89 = [v88 UUIDString];

                if ([v46 count])
                {
                  uint64_t v90 = (void *)[v46 copy];
                  [v103 setObject:v90 forKeyedSubscript:v89];
                }
                __int16 v36 = v115;
                unint64_t v30 = 0x263EFF000;
                unint64_t v28 = 0x263EFF000;
                uint64_t v32 = v104;
                uint64_t v33 = v108;
                uint64_t v35 = v114;
                if ([v115 count])
                {
                  id v91 = (void *)[v115 copy];
                  [v101 setObject:v91 forKeyedSubscript:v89];

                  __int16 v36 = v115;
                }
                id v39 = v106;
                if ([v114 count])
                {
                  uint64_t v92 = (void *)[v114 copy];
                  [v102 setObject:v92 forKeyedSubscript:v89];

                  __int16 v36 = v115;
                }

                break;
              }
            }
          }
LABEL_94:

          ++v33;
        }
        while (v33 != v32);
        uint64_t v32 = [v105 countByEnumeratingWithState:&v138 objects:v160 count:16];
      }
      while (v32);
    }

    *a4 = (id)[v103 copy];
    if (a5) {
      *a5 = (id)[v101 copy];
    }
    *a6 = (id)[v102 copy];
    if (a7) {
      *a7 = (id)[v94 copy];
    }
    if (a8) {
      *a8 = (id)[v93 copy];
    }
  }
}

- (void)_updateWoWState:(id)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v10 = [v9 identifier];
        uint64_t v11 = [v9 matchingHAPAccessoryWithServerIdentifier:v10 linkType:1];

        if ([v9 isReachable]) {
          BOOL v12 = v11 == 0;
        }
        else {
          BOOL v12 = 1;
        }
        if (v12 || ![v9 isNonClientNotificationEnabled])
        {
          id v13 = [(HMDHome *)self netManagerFactory];
          int v14 = v13[2]();
          [v14 deregisterWoWAssertionForObject:v9];
        }
        else
        {
          id v13 = [(HMDHome *)self netManagerFactory];
          int v14 = v13[2]();
          [v14 registerWoWAssertionForObject:v9];
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }
}

- (void)_handleFetchPresenceMapMessage:(id)a3
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
  {
    uint64_t v40 = v4;
    uint64_t v5 = [v4 messagePayload];
    uint64_t v6 = objc_msgSend(v5, "hmf_setForKey:", *MEMORY[0x263F0CF38]);

    id v41 = [MEMORY[0x263EFF9A0] dictionary];
    id v39 = (void *)v6;
    uint64_t v7 = [MEMORY[0x263EFF9C0] setWithSet:v6];
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    int v8 = [(HMDHome *)self home];
    uint64_t v9 = [v8 usersSupportingPresence];

    obuint64_t j = v9;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v47 objects:v54 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v48;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v48 != v12) {
            objc_enumerationMutation(obj);
          }
          int v14 = *(void **)(*((void *)&v47 + 1) + 8 * i);
          long long v15 = [v14 uuid];
          int v16 = [v7 containsObject:v15];

          if (v16)
          {
            long long v17 = [(HMDHome *)self presenceMonitor];
            long long v18 = [v17 presenceMap];
            [v14 uuid];
            uint64_t v19 = v7;
            v21 = uint64_t v20 = self;
            __int16 v22 = [v18 objectForKeyedSubscript:v21];

            int v23 = NSNumber;
            uint64_t v24 = [v22 presenceRegionStatus];
            id v25 = objc_msgSend(v23, "numberWithUnsignedInteger:", objc_msgSend(v24, "value"));
            uint64_t v26 = [v14 uuid];
            [v41 setObject:v25 forKeyedSubscript:v26];

            self = v20;
            uint64_t v7 = v19;
          }
        }
        uint64_t v11 = [obj countByEnumeratingWithState:&v47 objects:v54 count:16];
      }
      while (v11);
    }

    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v27 = v39;
    uint64_t v28 = [v27 countByEnumeratingWithState:&v43 objects:v53 count:16];
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = *(void *)v44;
      do
      {
        for (uint64_t j = 0; j != v29; ++j)
        {
          if (*(void *)v44 != v30) {
            objc_enumerationMutation(v27);
          }
          uint64_t v32 = *(void *)(*((void *)&v43 + 1) + 8 * j);
          uint64_t v33 = [v41 objectForKeyedSubscript:v32];

          if (!v33) {
            [v41 setObject:&unk_26E470918 forKeyedSubscript:v32];
          }
        }
        uint64_t v29 = [v27 countByEnumeratingWithState:&v43 objects:v53 count:16];
      }
      while (v29);
    }

    uint64_t v51 = *MEMORY[0x263F0DCF8];
    uint64_t v52 = v41;
    os_log_type_t v34 = [NSDictionary dictionaryWithObjects:&v52 forKeys:&v51 count:1];
    id v4 = v40;
    [v40 respondWithPayload:v34];
  }
  else
  {
    uint64_t v35 = (void *)MEMORY[0x230FBD990]();
    __int16 v36 = self;
    id v37 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      __int16 v38 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v56 = v38;
      _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_ERROR, "%{public}@presence map fetch error: not primary resident", buf, 0xCu);
    }
    id v27 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2708];
    [v4 respondWithError:v27];
  }
}

- (HMDUserPresenceFeeder)presenceFeeder
{
  return self->_presenceFeeder;
}

- (void)configureUserActivityStateDetectorManager
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHome *)self featureDataSource];
  int v4 = [v3 isUserActivityStateDetectionFeatureEnabled];

  if (v4)
  {
    if (+[HMDUserActivityStateDetectorManager shouldRunManagerForHome:self])
    {
      uint64_t v5 = [(HMDHome *)self userActivityStateDetectorManager];

      uint64_t v6 = (void *)MEMORY[0x230FBD990]();
      uint64_t v7 = self;
      int v8 = HMFGetOSLogHandle();
      uint64_t v9 = v8;
      if (v5)
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          uint64_t v10 = HMFGetLogIdentifier();
          int v19 = 138543362;
          uint64_t v20 = v10;
          _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@HMDUserActivityStateDetectorManager is already configured", (uint8_t *)&v19, 0xCu);
        }
      }
      else
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          long long v15 = HMFGetLogIdentifier();
          int v19 = 138543362;
          uint64_t v20 = v15;
          _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Creating and configuring HMDUserActivityStateDetectorManager", (uint8_t *)&v19, 0xCu);
        }
        int v16 = [[HMDUserActivityStateDetectorManager alloc] initWithHome:v7];
        userActivityStateDetectorManager = v7->_userActivityStateDetectorManager;
        v7->_userActivityStateDetectorManager = v16;

        long long v18 = [(HMDHome *)v7 userActivityStateDetectorManager];
        [v18 configure];
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x230FBD990]();
      uint64_t v12 = self;
      id v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        int v14 = HMFGetLogIdentifier();
        int v19 = 138543362;
        uint64_t v20 = v14;
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@HMDUserActivityStateDetectorManager is not allowed due to user or device policy", (uint8_t *)&v19, 0xCu);
      }
      [(HMDHome *)v12 setUserActivityStateDetectorManager:0];
    }
  }
}

- (void)handleFMFDeviceChangedNotification:(id)a3
{
  int v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __46__HMDHome_handleFMFDeviceChangedNotification___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __46__HMDHome_handleFMFDeviceChangedNotification___block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  int v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = HMFGetLogIdentifier();
    int v7 = 138543362;
    int v8 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Configuring HMDUserActivityStateDetectorManager - handleFMFDeviceChangedNotification", (uint8_t *)&v7, 0xCu);
  }
  return [*(id *)(a1 + 32) configureUserActivityStateDetectorManager];
}

- (void)_registerForNotifications
{
  id v10 = [(HMDHome *)self notificationCenter];
  id v3 = [(HMDHome *)self homeManager];
  [v10 addObserver:self selector:sel_handleFirstProcessDidBecomeActiveNotification_ name:@"HMDHomeManagerFirstProcessDidBecomeActiveNotification" object:v3];
  [v10 addObserver:self selector:sel_handleLastProcessDidBecomeInactiveNotification_ name:@"HMDHomeManagerLastProcessDidBecomeInactiveNotification" object:v3];
  [v10 addObserver:self selector:sel_handleClientProcessDisconnectedNotification_ name:@"HMDHomeManagerClientProcessDisconnectedNotification" object:0];
  [v10 addObserver:self selector:sel_handleAccessoryDidAddNetworkRouterControllerNotification_ name:@"HMDAccessoryDidAddNetworkRouterControllerNotification" object:self];
  [v10 addObserver:self selector:sel_handleAccessoryDidRemoveNetworkRouterControllerNotification_ name:@"HMDAccessoryDidRemoveNetworkRouterControllerNotification" object:self];
  int v4 = [(HMDHome *)self currentUser];
  [v10 addObserver:self selector:sel_handleCurrentUserPrivilegeChanged_ name:@"HMDUserPrivilegeDidChangeNotification" object:v4];

  uint64_t v5 = +[HMDAppleAccountManager sharedManager];
  [v10 addObserver:self selector:sel_handleActiveAccountChanged_ name:@"HMDAppleAccountManagerAccountUpdatedNotification" object:v5];

  [v10 addObserver:self selector:sel_handleAccountHandlesUpdated_ name:@"HMDAccountHandlesUpdatedNotification" object:0];
  [v10 addObserver:self selector:sel_handleCurrentAccountMergeIdentifierUpdated_ name:@"HMDAppleAccountMergeIdentifierUpdatedNotification" object:0];
  [v10 addObserver:self selector:sel___handleProcessStateChange_ name:HMDProcessMonitorProcessStateDidChangeNotification object:0];
  [v10 addObserver:self selector:sel_handleAccessoryReachabilityChangeNotification_ name:@"HMDAccessoryIsReachableNotification" object:0];
  [v10 addObserver:self selector:sel_handleAccessoryReachabilityChangeNotification_ name:@"HMDAccessoryIsNotReachableNotification" object:0];
  [v10 addObserver:self selector:sel_handleRemovedMediaSessions_ name:@"HMDMediaSessionsRemovedNotification" object:0];
  [v10 addObserver:self selector:sel_handleXPCConnectionInvalidated_ name:@"HMDXPCClientConnectionDidInvalidateNotification" object:0];
  [v10 addObserver:self selector:sel_handlePrimaryResidentChangeNotification_ name:@"HMDResidentDeviceConfirmedStateChangedNotification" object:0];
  if (isiOSDevice()) {
    [v10 addObserver:self selector:sel_handleDidReceiveIDSMessageWithNoListener_ name:@"HMDDidReceiveRemoteMessageWithNoListenerNotification" object:0];
  }
  [v10 addObserver:self selector:sel_handleSiriEndPointAddedNotification_ name:@"HMDSiriEndpointProfileAddedNotification" object:0];
  [v10 addObserver:self selector:sel_handleFindResidentsNotification_ name:@"HMDPrimaryResidentDiscoveryFindResidentsNotification" object:0];
  [v10 addObserver:self selector:sel_handleHomeDataLoaded_ name:@"HMDHomeManagerHomeDataLoadedNotification" object:0];
  uint64_t v6 = [v3 mobileAssetManager];
  [v10 addObserver:self selector:sel_handleMobileAssetsUpdatedNotification_ name:@"HMDMobileAssetManagerFoundUpdateNotification" object:v6];

  int v7 = [MEMORY[0x263F08A00] defaultCenter];
  [v7 addObserver:self selector:sel_checkForCATIDUpdate_ name:@"HMDFMFStatusUpdateNotification" object:0];

  int v8 = [(HMDHome *)self featureDataSource];
  LODWORD(v6) = [v8 isUserActivityStateDetectionFeatureEnabled];

  if (v6)
  {
    uint64_t v9 = [MEMORY[0x263F08A00] defaultCenter];
    [v9 addObserver:self selector:sel_handleFMFDeviceChangedNotification_ name:@"HMDFMFStatusUpdateNotification" object:0];
  }
}

- (void)_registerForMessages
{
  v576[2] = *MEMORY[0x263EF8340];
  uint64_t v464 = +[HMDUserMessagePolicy userMessagePolicyWithHome:self userPrivilege:3 remoteAccessRequired:0];
  v466 = +[HMDUserMessagePolicy userMessagePolicyWithHome:self userPrivilege:0 remoteAccessRequired:0];
  v465 = +[HMDUserMessagePolicy userMessagePolicyWithHome:self userPrivilege:0 remoteAccessRequired:1];
  v463 = +[HMDUserMessagePolicy userMessagePolicyWithHome:self userPrivilege:5 remoteAccessRequired:0];
  v459 = +[HMDUserMessagePolicy userMessagePolicyUsingProofOfLocalityForHome:self userPrivilege:5];
  id v3 = [(HMDHome *)self administratorHandler];
  int v4 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v576[0] = v4;
  uint64_t v5 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v576[1] = v5;
  uint64_t v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:v576 count:2];
  [v3 registerForMessage:@"kRenameHomeRequestKey" receiver:self policies:v6 selector:sel__handleRename_];

  int v7 = [(HMDHome *)self msgDispatcher];
  uint64_t v8 = *MEMORY[0x263F0DB28];
  uint64_t v9 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v575 = v9;
  id v10 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v575 count:1];
  [v7 registerForMessage:v8 receiver:self policies:v10 selector:sel__handleHomeDataRequest_];

  uint64_t v11 = [(HMDHome *)self administratorHandler];
  uint64_t v12 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v574[0] = v12;
  id v13 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v574[1] = v13;
  int v14 = [MEMORY[0x263EFF8C0] arrayWithObjects:v574 count:2];
  [v11 registerForMessage:@"kAddRoomRequestKey" receiver:self policies:v14 selector:sel__handleAddRoom_];

  long long v15 = [(HMDHome *)self administratorHandler];
  int v16 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v573[0] = v16;
  long long v17 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v573[1] = v17;
  long long v18 = [MEMORY[0x263EFF8C0] arrayWithObjects:v573 count:2];
  [v15 registerForMessage:@"kRemoveRoomRequestKey" receiver:self policies:v18 selector:sel__handleRemoveRoom_];

  int v19 = [(HMDHome *)self administratorHandler];
  uint64_t v20 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v572[0] = v20;
  uint64_t v21 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v572[1] = v21;
  __int16 v22 = [MEMORY[0x263EFF8C0] arrayWithObjects:v572 count:2];
  [v19 registerForMessage:@"kAddZoneRequestKey" receiver:self policies:v22 selector:sel__handleAddZone_];

  int v23 = [(HMDHome *)self administratorHandler];
  uint64_t v24 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v571[0] = v24;
  id v25 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v571[1] = v25;
  uint64_t v26 = [MEMORY[0x263EFF8C0] arrayWithObjects:v571 count:2];
  [v23 registerForMessage:@"kRemoveZoneRequestKey" receiver:self policies:v26 selector:sel__handleRemoveZone_];

  id v27 = [(HMDHome *)self administratorHandler];
  uint64_t v28 = *MEMORY[0x263F0E978];
  uint64_t v29 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v570[0] = v29;
  uint64_t v30 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v570[1] = v30;
  uint64_t v31 = [MEMORY[0x263EFF8C0] arrayWithObjects:v570 count:2];
  [v27 registerForMessage:v28 receiver:self policies:v31 selector:sel__handleAddServiceGroup_];

  uint64_t v32 = [(HMDHome *)self administratorHandler];
  uint64_t v33 = *MEMORY[0x263F0EAC8];
  os_log_type_t v34 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v569[0] = v34;
  uint64_t v35 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v569[1] = v35;
  __int16 v36 = [MEMORY[0x263EFF8C0] arrayWithObjects:v569 count:2];
  [v32 registerForMessage:v33 receiver:self policies:v36 selector:sel__handleRemoveServiceGroup_];

  id v37 = [(HMDHome *)self administratorHandler];
  __int16 v38 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v568[0] = v38;
  id v39 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v568[1] = v39;
  uint64_t v40 = [MEMORY[0x263EFF8C0] arrayWithObjects:v568 count:2];
  [v37 registerForMessage:@"kAddActionSetRequestKey" receiver:self policies:v40 selector:sel__handleAddActionSet_];

  id v41 = [(HMDHome *)self administratorHandler];
  uint64_t v42 = *MEMORY[0x263F0B990];
  long long v43 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v567[0] = v43;
  long long v44 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v567[1] = v44;
  long long v45 = [MEMORY[0x263EFF8C0] arrayWithObjects:v567 count:2];
  [v41 registerForMessage:v42 receiver:self policies:v45 selector:sel__handleAddActionSet_];

  long long v46 = [(HMDHome *)self administratorHandler];
  long long v47 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v566[0] = v47;
  long long v48 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v566[1] = v48;
  long long v49 = [MEMORY[0x263EFF8C0] arrayWithObjects:v566 count:2];
  [v46 registerForMessage:@"kRemoveActionSetRequestKey" receiver:self policies:v49 selector:sel__handleRemoveActionSet_];

  long long v50 = [(HMDHome *)self administratorHandler];
  uint64_t v51 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v565[0] = v51;
  uint64_t v52 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v565[1] = v52;
  uint64_t v53 = [MEMORY[0x263EFF8C0] arrayWithObjects:v565 count:2];
  [v50 registerForMessage:@"kRemoveTriggerRequestKey" receiver:self policies:v53 selector:sel__handleRemoveTrigger_];

  uint64_t v54 = [(HMDHome *)self administratorHandler];
  uint64_t v55 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v564[0] = v55;
  uint64_t v56 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v564[1] = v56;
  uint64_t v57 = [MEMORY[0x263EFF8C0] arrayWithObjects:v564 count:2];
  [v54 registerForMessage:@"kUpdateUserAccessRequestKey" receiver:self policies:v57 selector:sel__handleUpdateUserAccess_];

  __int16 v58 = [(HMDHome *)self administratorHandler];
  uint64_t v59 = *MEMORY[0x263F0EBC8];
  int v60 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v563[0] = v60;
  long long v61 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v563[1] = v61;
  v563[2] = v464;
  uint64_t v62 = [MEMORY[0x263EFF8C0] arrayWithObjects:v563 count:3];
  [v58 registerForMessage:v59 receiver:self policies:v62 selector:sel__handleUpdateUserCamerasAccessLevel_];

  char v63 = [(HMDHome *)self administratorHandler];
  char v64 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v562[0] = v64;
  uint64_t v65 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v562[1] = v65;
  long long v66 = [MEMORY[0x263EFF8C0] arrayWithObjects:v562 count:2];
  [v63 registerForMessage:@"kRemoveUserRequestKey" receiver:self policies:v66 selector:sel__handleRemoveUser_];

  int v67 = [(HMDHome *)self administratorHandler];
  long long v68 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v561[0] = v68;
  id v69 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:7];
  v561[1] = v69;
  long long v70 = [MEMORY[0x263EFF8C0] arrayWithObjects:v561 count:2];
  [v67 registerForMessage:@"kSetAppDataRequestKey" receiver:self policies:v70 selector:sel__handleSetAppData_];

  long long v71 = [(HMDHome *)self administratorHandler];
  uint64_t v72 = *MEMORY[0x263F0CEF0];
  long long v73 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v560[0] = v73;
  long long v74 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v560[1] = v74;
  long long v75 = [MEMORY[0x263EFF8C0] arrayWithObjects:v560 count:2];
  [v71 registerForMessage:v72 receiver:self policies:v75 selector:sel__handleUpdateMinimumMediaUserPrivilege_];

  long long v76 = [(HMDHome *)self administratorHandler];
  uint64_t v77 = *MEMORY[0x263F0CEE8];
  id v78 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v559[0] = v78;
  int v79 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v559[1] = v79;
  id v80 = [MEMORY[0x263EFF8C0] arrayWithObjects:v559 count:2];
  [v76 registerForMessage:v77 receiver:self policies:v80 selector:sel__handleUpdateMediaPeerToPeerEnabled_];

  id v81 = [(HMDHome *)self administratorHandler];
  uint64_t v82 = *MEMORY[0x263F0CEE0];
  id v83 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v558[0] = v83;
  id v84 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v558[1] = v84;
  __int16 v85 = [MEMORY[0x263EFF8C0] arrayWithObjects:v558 count:2];
  [v81 registerForMessage:v82 receiver:self policies:v85 selector:sel__handleUpdateMediaPassword_];

  __int16 v86 = [(HMDHome *)self administratorHandler];
  uint64_t v87 = *MEMORY[0x263F0CE00];
  __int16 v88 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v557[0] = v88;
  id v89 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v557[1] = v89;
  uint64_t v90 = [MEMORY[0x263EFF8C0] arrayWithObjects:v557 count:2];
  [v86 registerForMessage:v87 receiver:self policies:v90 selector:sel__handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest_];

  id v91 = [(HMDHome *)self administratorHandler];
  uint64_t v92 = *MEMORY[0x263F0CE08];
  id v93 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v556[0] = v93;
  __int16 v94 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v556[1] = v94;
  id v95 = [MEMORY[0x263EFF8C0] arrayWithObjects:v556 count:2];
  [v91 registerForMessage:v92 receiver:self policies:v95 selector:sel__handleSetHasOnboardedForAccessCodeMessage_];

  id v96 = [(HMDHome *)self administratorHandler];
  uint64_t v97 = *MEMORY[0x263F0CE10];
  id v98 = +[HMDXPCMessagePolicy policyWithEntitlements:131077];
  v555[0] = v98;
  id v99 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v555[1] = v99;
  id v100 = [MEMORY[0x263EFF8C0] arrayWithObjects:v555 count:2];
  [v96 registerForMessage:v97 receiver:self policies:v100 selector:sel__handleSetHasOnboardedForWalletKeyMessage_];

  long long v101 = [(HMDHome *)self administratorHandler];
  uint64_t v102 = *MEMORY[0x263F0CEF8];
  long long v103 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v554[0] = v103;
  uint64_t v104 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v554[1] = v104;
  id v105 = [MEMORY[0x263EFF8C0] arrayWithObjects:v554 count:2];
  [v101 registerForMessage:v102 receiver:self policies:v105 selector:sel__handleUpdateNetworkProtection_];

  id v106 = [(HMDHome *)self administratorHandler];
  uint64_t v107 = *MEMORY[0x263F0CF08];
  uint64_t v108 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v553[0] = v108;
  uint64_t v109 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v553[1] = v109;
  id v110 = [MEMORY[0x263EFF8C0] arrayWithObjects:v553 count:2];
  [v106 registerForMessage:v107 receiver:self policies:v110 selector:sel__handleUpdateUserAnnounceAccess_];

  uint64_t v111 = [(HMDHome *)self administratorHandler];
  uint64_t v112 = *MEMORY[0x263F0C7C8];
  uint64_t v113 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v552[0] = v113;
  id v114 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v552[1] = v114;
  long long v115 = [MEMORY[0x263EFF8C0] arrayWithObjects:v552 count:2];
  [v111 registerForMessage:v112 receiver:self policies:v115 selector:sel__handleUpdateAudioAnalysisAccess_];

  uint64_t v116 = [(HMDHome *)self administratorHandler];
  uint64_t v117 = *MEMORY[0x263F0CDE0];
  id v118 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v551[0] = v118;
  uint64_t v119 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v551[1] = v119;
  __int16 v120 = [MEMORY[0x263EFF8C0] arrayWithObjects:v551 count:2];
  [v116 registerForMessage:v117 receiver:self policies:v120 selector:sel__handleResolveThreadNetworkRequest_];

  if ([(HMDHome *)self isOwnerUser])
  {
    uint64_t v121 = [(HMDHome *)self administratorHandler];
    uint64_t v122 = *MEMORY[0x263F0D8F0];
    id v123 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v550[0] = v123;
    id v124 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v550[1] = v124;
    v550[2] = v464;
    uint64_t v125 = [MEMORY[0x263EFF8C0] arrayWithObjects:v550 count:3];
    uint64_t v126 = sel__handleOwnerSettingsUpdate_;
  }
  else
  {
    uint64_t v121 = [(HMDHome *)self msgDispatcher];
    uint64_t v122 = *MEMORY[0x263F0D8F0];
    id v123 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v549[0] = v123;
    id v124 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v549[1] = v124;
    v549[2] = v463;
    uint64_t v125 = [MEMORY[0x263EFF8C0] arrayWithObjects:v549 count:3];
    uint64_t v126 = sel__handleSharedUserSettingsUpdate_;
  }
  [v121 registerForMessage:v122 receiver:self policies:v125 selector:v126];

  uint64_t v127 = [(HMDHome *)self administratorHandler];
  uint64_t v128 = *MEMORY[0x263F0C7B8];
  id v129 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v548[0] = v129;
  long long v130 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v548[1] = v130;
  long long v131 = [MEMORY[0x263EFF8C0] arrayWithObjects:v548 count:2];
  [v127 registerForMessage:v128 receiver:self policies:v131 selector:sel__handleAudioAnalysisClassifierOptionsUpdateRequest_];

  long long v132 = [(HMDHome *)self administratorHandler];
  uint64_t v133 = *MEMORY[0x263F0C7D8];
  long long v134 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v547[0] = v134;
  long long v135 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v547[1] = v135;
  long long v136 = [MEMORY[0x263EFF8C0] arrayWithObjects:v547 count:2];
  [v132 registerForMessage:v133 receiver:self policies:v136 selector:sel__handleAudioAnalysisOnboardingUpdateRequest_];

  long long v137 = [(HMDHome *)self administratorHandler];
  uint64_t v138 = *MEMORY[0x263F0CE68];
  long long v139 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v546[0] = v139;
  long long v140 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v546[1] = v140;
  long long v141 = [MEMORY[0x263EFF8C0] arrayWithObjects:v546 count:2];
  [v137 registerForMessage:v138 receiver:self policies:v141 selector:sel__handleSiriPhraseOptionsUpdateRequest_];

  long long v142 = [(HMDHome *)self administratorHandler];
  uint64_t v143 = *MEMORY[0x263F0CE50];
  long long v144 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v545[0] = v144;
  long long v145 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v545[1] = v145;
  long long v146 = [MEMORY[0x263EFF8C0] arrayWithObjects:v545 count:2];
  [v142 registerForMessage:v143 receiver:self policies:v146 selector:sel__handleSoundCheckUpdateRequest_];

  long long v147 = [(HMDHome *)self administratorHandler];
  uint64_t v148 = *MEMORY[0x263F0CED8];
  long long v149 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v544[0] = v149;
  uint64_t v150 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v544[1] = v150;
  __int16 v151 = [MEMORY[0x263EFF8C0] arrayWithObjects:v544 count:2];
  [v147 registerForMessage:v148 receiver:self policies:v151 selector:sel__handleHomeUpdateLocationServicesEnabledRequest_];

  if (isInternalBuild())
  {
    uint64_t v152 = [(HMDHome *)self administratorHandler];
    uint64_t v153 = *MEMORY[0x263F0CED0];
    long long v154 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v543[0] = v154;
    __int16 v155 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v543[1] = v155;
    uint64_t v156 = [MEMORY[0x263EFF8C0] arrayWithObjects:v543 count:2];
    [v152 registerForMessage:v153 receiver:self policies:v156 selector:sel__handleHomeUpdateDidOnboardLocationServicesRequest_];
  }
  if (!isWatch())
  {
    __int16 v157 = [(HMDHome *)self administratorHandler];
    long long v158 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v542[0] = v158;
    long long v159 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:6];
    v542[1] = v159;
    long long v160 = [MEMORY[0x263EFF8C0] arrayWithObjects:v542 count:2];
    [v157 registerForMessage:@"kUpdateInvitationStateRequestKey" receiver:self policies:v160 selector:sel__handleUpdateOutgoingInvitationState_];
  }
  long long v161 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  objc_msgSend(v161, "setRoles:", objc_msgSend(v161, "roles") | 4);
  v458 = v161;
  v461 = (void *)[v161 copy];
  uint64_t v162 = +[HMDUserMessagePolicy userMessagePolicyWithHome:self userPrivilege:4 remoteAccessRequired:0];
  uint64_t v163 = [(HMDHome *)self administratorHandler];
  id v164 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v541[0] = v164;
  v541[1] = v162;
  uint64_t v165 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v541[2] = v165;
  id v166 = [MEMORY[0x263EFF8C0] arrayWithObjects:v541 count:3];
  [v163 registerForMessage:@"kAddEventTriggerRequestKey" receiver:self policies:v166 selector:sel__handleAddEventTrigger_];

  uint64_t v167 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v540[0] = v167;
  v540[1] = v162;
  long long v168 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v540[2] = v168;
  id v169 = [MEMORY[0x263EFF8C0] arrayWithObjects:v540 count:3];
  v456 = v163;
  [v163 registerForMessage:@"kAddTimerTriggerRequestKey" receiver:self policies:v169 selector:sel__handleAddTimerTrigger_];

  id v170 = [(HMDHome *)self administratorHandler];
  uint64_t v171 = *MEMORY[0x263F0B998];
  __int16 v172 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v539[0] = v172;
  id v173 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v539[1] = v173;
  id v174 = [MEMORY[0x263EFF8C0] arrayWithObjects:v539 count:2];
  [v170 registerForMessage:v171 receiver:self policies:v174 selector:sel__handleAddEventTrigger_];

  id v175 = [(HMDHome *)self administratorHandler];
  uint64_t v176 = *MEMORY[0x263F0B9A0];
  int v177 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v538[0] = v177;
  uint64_t v178 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v538[1] = v178;
  id v179 = [MEMORY[0x263EFF8C0] arrayWithObjects:v538 count:2];
  [v175 registerForMessage:v176 receiver:self policies:v179 selector:sel__handleAddTimerTrigger_];

  uint64_t v180 = [MEMORY[0x263F42620] productInfo];
  uint64_t v181 = [v180 productPlatform];

  if (v181 == 1) {
    uint64_t v182 = 5;
  }
  else {
    uint64_t v182 = 1;
  }
  uint64_t v183 = [(HMDHome *)self msgDispatcher];
  id v184 = +[HMDXPCMessagePolicy policyWithEntitlements:v182];
  v537[0] = v184;
  long long v185 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v537[1] = v185;
  long long v186 = [MEMORY[0x263EFF8C0] arrayWithObjects:v537 count:2];
  [v183 registerForMessage:@"kAddAccessoryRequestKey" receiver:self policies:v186 selector:sel__handleAddAccessory_];

  id v187 = [(HMDHome *)self msgDispatcher];
  v536[0] = v461;
  v536[1] = v162;
  uint64_t v188 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v536[2] = v188;
  uint64_t v189 = [MEMORY[0x263EFF8C0] arrayWithObjects:v536 count:3];
  [v187 registerForMessage:@"HMDRemoteAddHAPAccessoriesMessage" receiver:self policies:v189 selector:sel__handleRemoteAddHAPAccessories_];

  long long v190 = [(HMDHome *)self msgDispatcher];
  v535[0] = v461;
  v535[1] = v162;
  long long v191 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v535[2] = v191;
  long long v192 = [MEMORY[0x263EFF8C0] arrayWithObjects:v535 count:3];
  [v190 registerForMessage:@"HMDRemoteAddMediaAccessoryMessage" receiver:self policies:v192 selector:sel__handleRemoteAddMediaAccessory_];

  uint64_t v193 = [(HMDHome *)self msgDispatcher];
  v534[0] = v461;
  v534[1] = v162;
  uint64_t v194 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v534[2] = v194;
  uint64_t v195 = [MEMORY[0x263EFF8C0] arrayWithObjects:v534 count:3];
  [v193 registerForMessage:@"HMDRemoteAddMediaAccessoryRequestMessage" receiver:self policies:v195 selector:sel__handleRemoteAddMediaAccessoryRequest_];

  uint64_t v196 = [(HMDHome *)self administratorHandler];
  uint64_t v197 = *MEMORY[0x263F0DBB0];
  id v198 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v533[0] = v198;
  v533[1] = v461;
  v533[2] = v162;
  id v199 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v533[3] = v199;
  int v200 = [MEMORY[0x263EFF8C0] arrayWithObjects:v533 count:4];
  [v196 registerForMessage:v197 receiver:self policies:v200 selector:sel__handleUpdateRestrictedGuestSettings_];

  char v201 = [(HMDHome *)self msgDispatcher];
  uint64_t v202 = *MEMORY[0x263F0CDF8];
  id v203 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v532 = v203;
  uint64_t v204 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v532 count:1];
  [v201 registerForMessage:v202 receiver:self policies:v204 selector:sel__handleSetDismissedUWBOnboarding_];

  uint64_t v205 = [(HMDHome *)self msgDispatcher];
  uint64_t v206 = *MEMORY[0x263F0CF20];
  uint64_t v207 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v531[0] = v207;
  v531[1] = v162;
  uint64_t v208 = [MEMORY[0x263EFF8C0] arrayWithObjects:v531 count:2];
  [v205 registerForMessage:v206 receiver:self policies:v208 selector:sel__handleUserConsentResponseForAccessory_];

  uint64_t v209 = [(HMDHome *)self msgDispatcher];
  uint64_t v210 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v530[0] = v210;
  v530[1] = v162;
  uint64_t v211 = [MEMORY[0x263EFF8C0] arrayWithObjects:v530 count:2];
  [v209 registerForMessage:@"kContinuePairingAccessoryRequestKey" receiver:self policies:v211 selector:sel__handleContinuePairingAccessory_];

  unint64_t v212 = [(HMDHome *)self msgDispatcher];
  uint64_t v213 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v529[0] = v213;
  v529[1] = v162;
  int v214 = [MEMORY[0x263EFF8C0] arrayWithObjects:v529 count:2];
  [v212 registerForMessage:@"kCancelPairingAccessoryRequestKey" receiver:self policies:v214 selector:sel__handleCancelPairingAccessory_];

  id v215 = [(HMDHome *)self msgDispatcher];
  long long v216 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v528[0] = v216;
  v528[1] = v461;
  v528[2] = v162;
  id v217 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v528[3] = v217;
  uint64_t v218 = [MEMORY[0x263EFF8C0] arrayWithObjects:v528 count:4];
  [v215 registerForMessage:@"kRemoveAccessoryRequestKey" receiver:self policies:v218 selector:sel__handleRemoveAccessoryMessage_];

  id v219 = [(HMDHome *)self administratorHandler];
  uint64_t v220 = *MEMORY[0x263F0CDB0];
  id v221 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v527[0] = v221;
  v527[1] = v461;
  v527[2] = v162;
  uint64_t v222 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v527[3] = v222;
  id v223 = [MEMORY[0x263EFF8C0] arrayWithObjects:v527 count:4];
  [v219 registerForMessage:v220 receiver:self policies:v223 selector:sel_handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage_];

  uint64_t v224 = [(HMDHome *)self administratorHandler];
  id v225 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v526[0] = v225;
  v526[1] = v461;
  v526[2] = v162;
  id v226 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v526[3] = v226;
  id v227 = [MEMORY[0x263EFF8C0] arrayWithObjects:v526 count:4];
  [v224 registerForMessage:@"HMDHomeRemoteUpdateCHIPKeyValueStoreMessage" receiver:self policies:v227 selector:sel_handleRemoteUpdateCHIPKeyValueStoreMessage_];

  id v228 = [(HMDHome *)self msgDispatcher];
  v525[0] = v461;
  v525[1] = v465;
  v229 = [MEMORY[0x263EFF8C0] arrayWithObjects:v525 count:2];
  [v228 registerForMessage:@"HMDHomeRequestCommissioningCertificatesMessage" receiver:self policies:v229 selector:sel_handleCommissioningCertificateRequest_];

  v230 = [(HMDHome *)self msgDispatcher];
  v524[0] = v461;
  v524[1] = v162;
  v231 = [MEMORY[0x263EFF8C0] arrayWithObjects:v524 count:2];
  [v230 registerForMessage:@"HMDHomeNotificationPairingCompletionMessage" receiver:self policies:v231 selector:sel_handleMatterPairingCompletionNotification_];

  id v232 = [(HMDHome *)self msgDispatcher];
  uint64_t v233 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v523[0] = v233;
  v523[1] = v162;
  uint64_t v234 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v523[2] = v234;
  uint64_t v235 = [MEMORY[0x263EFF8C0] arrayWithObjects:v523 count:3];
  [v232 registerForMessage:@"kInviteUsersRequestKey" receiver:self policies:v235 selector:sel__handleUserInvitations_];

  uint64_t v236 = [(HMDHome *)self administratorHandler];
  uint64_t v237 = *MEMORY[0x263F0C830];
  v238 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v522[0] = v238;
  v239 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v522[1] = v239;
  v522[2] = v465;
  v522[3] = v461;
  char v240 = [MEMORY[0x263EFF8C0] arrayWithObjects:v522 count:4];
  [v236 registerForMessage:v237 receiver:self policies:v240 selector:sel__handleEnableMultiUserRequest_];

  id v241 = [(HMDHome *)self localCapabilitiesDataSource];
  LODWORD(v238) = [v241 isResidentCapable];

  if (v238)
  {
    v242 = [(HMDHome *)self msgDispatcher];
    v521[0] = v461;
    v521[1] = v162;
    id v243 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
    v521[2] = v243;
    id v244 = [MEMORY[0x263EFF8C0] arrayWithObjects:v521 count:3];
    [v242 registerForMessage:@"kAddHomeInvitesInternalRequestKey" receiver:self policies:v244 selector:sel__handleOutgoingInvitations_];

    id v245 = [(HMDHome *)self msgDispatcher];
    v520[0] = v461;
    v520[1] = v162;
    uint64_t v246 = [MEMORY[0x263EFF8C0] arrayWithObjects:v520 count:2];
    [v245 registerForMessage:@"HMDHomeCreateUniquePSKClientConfigurationRequestKey" receiver:self policies:v246 selector:sel__handleCreateUniquePSKClientConfiguration_];

    id v247 = [(HMDHome *)self msgDispatcher];
    v519[0] = v461;
    v519[1] = v162;
    uint64_t v248 = [MEMORY[0x263EFF8C0] arrayWithObjects:v519 count:2];
    [v247 registerForMessage:@"HMDHomeRemoveClientConfigurationRequestKey" receiver:self policies:v248 selector:sel__handleRemoveClientConfiguration_];
  }
  isWatch();
  uint64_t v249 = [(HMDHome *)self msgDispatcher];
  uint64_t v250 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v518[0] = v250;
  v518[1] = v162;
  uint64_t v251 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v518[2] = v251;
  uint64_t v252 = [MEMORY[0x263EFF8C0] arrayWithObjects:v518 count:3];
  [v249 registerForMessage:@"kHomeLocationUpdatedNotificationKey" receiver:self policies:v252 selector:sel__handleHomeLocationUpdateFromSharedAdmin_];

  if (isInternalBuild())
  {
    uint64_t v253 = [(HMDHome *)self msgDispatcher];
    uint64_t v254 = *MEMORY[0x263F0C920];
    uint64_t v255 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v517[0] = v255;
    id v256 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v517[1] = v256;
    id v257 = [MEMORY[0x263EFF8C0] arrayWithObjects:v517 count:2];
    [v253 registerForMessage:v254 receiver:self policies:v257 selector:sel__handleSetMinimumNetworkRouterHomeKitVersion_];

    long long v258 = [(HMDHome *)self msgDispatcher];
    uint64_t v259 = *MEMORY[0x263F0C918];
    uint64_t v260 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v516[0] = v260;
    uint64_t v261 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v516[1] = v261;
    long long v262 = [MEMORY[0x263EFF8C0] arrayWithObjects:v516 count:2];
    [v258 registerForMessage:v259 receiver:self policies:v262 selector:sel__handleSetMinHomeKitVersionForAccessoryNetworkProtectionChange_];
  }
  if (isInternalBuild() && isiOSDevice())
  {
    long long v263 = [(HMDHome *)self msgDispatcher];
    uint64_t v264 = *MEMORY[0x263F0CDF0];
    long long v265 = +[HMDXPCMessagePolicy policyWithEntitlements:1049605];
    v515[0] = v265;
    long long v266 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v515[1] = v266;
    id v267 = [MEMORY[0x263EFF8C0] arrayWithObjects:v515 count:2];
    [v263 registerForMessage:v264 receiver:self policies:v267 selector:sel__handleRetrieveHomeLocationForFeedback_];
  }
  uint64_t v268 = [(HMDHome *)self administratorHandler];
  uint64_t v269 = *MEMORY[0x263F0C860];
  uint64_t v270 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v514[0] = v270;
  id v271 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v514[1] = v271;
  v514[2] = v162;
  long long v272 = [MEMORY[0x263EFF8C0] arrayWithObjects:v514 count:3];
  [v268 registerForMessage:v269 receiver:self policies:v272 selector:sel__handleEventLogSetDidOnboard_];

  long long v273 = [(HMDHome *)self administratorHandler];
  uint64_t v274 = *MEMORY[0x263F0C870];
  uint64_t v275 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v513[0] = v275;
  long long v276 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v513[1] = v276;
  v513[2] = v162;
  long long v277 = [MEMORY[0x263EFF8C0] arrayWithObjects:v513 count:3];
  [v273 registerForMessage:v274 receiver:self policies:v277 selector:sel__handleEventLogSetEnabledMessage_];

  uint64_t v278 = [(HMDHome *)self administratorHandler];
  uint64_t v279 = *MEMORY[0x263F0C868];
  long long v280 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v512[0] = v280;
  long long v281 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v512[1] = v281;
  v512[2] = v162;
  long long v282 = [MEMORY[0x263EFF8C0] arrayWithObjects:v512 count:3];
  [v278 registerForMessage:v279 receiver:self policies:v282 selector:sel__handleEventLogSetDurationMessage_];

  long long v283 = [(HMDHome *)self administratorHandler];
  uint64_t v284 = *MEMORY[0x263F0C840];
  uint64_t v285 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v511[0] = v285;
  id v286 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v511[1] = v286;
  v511[2] = v162;
  uint64_t v287 = [MEMORY[0x263EFF8C0] arrayWithObjects:v511 count:3];
  [v283 registerForMessage:v284 receiver:self policies:v287 selector:sel__handleEventLogClearMessage_];

  id v288 = [(HMDHome *)self msgDispatcher];
  uint64_t v289 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v510[0] = v289;
  v510[1] = v466;
  id v290 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v510[2] = v290;
  uint64_t v291 = [MEMORY[0x263EFF8C0] arrayWithObjects:v510 count:3];
  [v288 registerForMessage:@"kUpdateUserPresenceStatusConsentRequestKey" receiver:self policies:v291 selector:sel__handleUpdatePresenceConsent_];

  id v292 = [(HMDHome *)self msgDispatcher];
  uint64_t v293 = *MEMORY[0x263F0CDE8];
  long long v294 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v509[0] = v294;
  long long v295 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v509[1] = v295;
  v296 = [MEMORY[0x263EFF8C0] arrayWithObjects:v509 count:2];
  [v292 registerForMessage:v293 receiver:self policies:v296 selector:sel__handleRetrieveAsyncResults_];

  uint64_t v297 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  objc_msgSend(v297, "setRoles:", objc_msgSend(v297, "roles") | 6);
  id v298 = (void *)[v297 copy];
  __int16 v299 = [(HMDHome *)self msgDispatcher];
  id v300 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v508[0] = v300;
  v508[1] = v298;
  v508[2] = v465;
  __int16 v301 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:1];
  v508[3] = v301;
  v302 = [MEMORY[0x263EFF8C0] arrayWithObjects:v508 count:4];
  [v299 registerForMessage:@"kExecuteActionSetRequestKey" receiver:self policies:v302 selector:sel__handleExecuteActionSet_];

  uint64_t v303 = [(HMDHome *)self msgDispatcher];
  id v304 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v507[0] = v304;
  v507[1] = v298;
  v507[2] = v459;
  uint64_t v305 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:1];
  v507[3] = v305;
  id v306 = [MEMORY[0x263EFF8C0] arrayWithObjects:v507 count:4];
  [v303 registerForMessage:@"kMultipleCharacteristicWriteRequestKey" receiver:self policies:v306 selector:sel__handleMultipleCharacteristicWrite_];

  __int16 v307 = [(HMDHome *)self msgDispatcher];
  id v308 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v506[0] = v308;
  v506[1] = v298;
  v506[2] = v459;
  __int16 v309 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:1];
  v506[3] = v309;
  v310 = [MEMORY[0x263EFF8C0] arrayWithObjects:v506 count:4];
  [v307 registerForMessage:@"kMultipleCharacteristicReadRequestKey" receiver:self policies:v310 selector:sel__handleMultipleCharacteristicRead_];

  __int16 v311 = [(HMDHome *)self msgDispatcher];
  v505[0] = v298;
  v505[1] = v459;
  v312 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v505[2] = v312;
  uint64_t v313 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:1];
  v505[3] = v313;
  v314 = [MEMORY[0x263EFF8C0] arrayWithObjects:v505 count:4];
  [v311 registerForMessage:@"kCharacteristicWriteRequestKey" receiver:self policies:v314 selector:sel__handleCharacteristicWrite_];

  uint64_t v315 = [(HMDHome *)self msgDispatcher];
  v504[0] = v298;
  v504[1] = v459;
  int v316 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v504[2] = v316;
  v317 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:1];
  v504[3] = v317;
  v318 = [MEMORY[0x263EFF8C0] arrayWithObjects:v504 count:4];
  [v315 registerForMessage:@"kCharacteristicReadRequestKey" receiver:self policies:v318 selector:sel__handleCharacteristicRead_];

  v319 = [(HMDHome *)self msgDispatcher];
  v320 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v503[0] = v320;
  v503[1] = v298;
  v503[2] = v463;
  v321 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:1];
  v503[3] = v321;
  v322 = [MEMORY[0x263EFF8C0] arrayWithObjects:v503 count:4];
  [v319 registerForMessage:@"kCharacteristicEnableNotificationRequestKey" receiver:self policies:v322 selector:sel__handleCharacteristicEnableNotification_];

  isWatch();
  id v323 = [(HMDHome *)self msgDispatcher];
  v502[0] = v298;
  v502[1] = v459;
  v324 = [MEMORY[0x263EFF8C0] arrayWithObjects:v502 count:2];
  [v323 registerForMessage:@"kModifyCharacterisiticNotificationsRequestKey" receiver:self policies:v324 selector:sel__handleModifyCharacteristicNotifications_];

  v325 = [(HMDHome *)self msgDispatcher];
  v501[0] = v298;
  v501[1] = v459;
  v326 = [MEMORY[0x263EFF8C0] arrayWithObjects:v501 count:2];
  [v325 registerForMessage:@"kEnableAccessoryReachabilityNotificationRequestKey" receiver:self policies:v326 selector:sel__handleAccessoryReachabilityRegistrationAndEnable_];

  v327 = [(HMDHome *)self msgDispatcher];
  v500[0] = v298;
  v500[1] = v459;
  v328 = [MEMORY[0x263EFF8C0] arrayWithObjects:v500 count:2];
  [v327 registerForMessage:@"kDisableAccessoryReachabilityNotificationRequestKey" receiver:self policies:v328 selector:sel__handleAccessoryReachabilityRegistration_];

  v329 = [(HMDHome *)self msgDispatcher];
  v330 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v499[0] = v330;
  v499[1] = v463;
  v331 = [MEMORY[0x263EFF8C0] arrayWithObjects:v499 count:2];
  [v329 registerForMessage:@"kCharacterisiticsChangedInternalNotificationKey" receiver:self policies:v331 selector:sel__handleCharacteristicsChangedNotification_];

  v332 = [(HMDHome *)self msgDispatcher];
  v333 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v498[0] = v333;
  v498[1] = v466;
  v334 = [MEMORY[0x263EFF8C0] arrayWithObjects:v498 count:2];
  [v332 registerForMessage:@"HMHomeAllowUserManagementMessage" receiver:self policies:v334 selector:sel__handleAllowUserManagementMessage_];

  v335 = [(HMDHome *)self msgDispatcher];
  id v336 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v497[0] = v336;
  v497[1] = v466;
  v337 = [MEMORY[0x263EFF8C0] arrayWithObjects:v497 count:2];
  [v335 registerForMessage:@"kRemoteReachabilityChangedNotificationKey" receiver:self policies:v337 selector:sel__handleAccessoryReachabilityChange_];

  v338 = +[HMDRemoteMessagePolicy defaultPolicy];
  [v338 setRequiresSecureMessage:1];
  [v338 setRoles:3];
  v462 = v338;
  uint64_t v339 = [v338 copy];
  v340 = [(HMDHome *)self msgDispatcher];
  v341 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v496[0] = v341;
  v460 = (void *)v339;
  v496[1] = v339;
  v496[2] = v459;
  v342 = [MEMORY[0x263EFF8C0] arrayWithObjects:v496 count:3];
  [v340 registerForMessage:@"kConfirmExecuteTriggerRequestKey" receiver:self policies:v342 selector:sel__handleExecuteConfirmationOfTrigger_];

  long long v343 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  [v343 setRoles:4];
  long long v344 = (void *)[v343 copy];
  long long v345 = [(HMDHome *)self msgDispatcher];
  v495[0] = v344;
  v495[1] = v466;
  long long v346 = [MEMORY[0x263EFF8C0] arrayWithObjects:v495 count:2];
  [v345 registerForMessage:@"kPredicateEvaluatePredicateRequestKey" receiver:self policies:v346 selector:sel_handleEvaluatePredicateMessage_];

  long long v347 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  objc_msgSend(v347, "setRoles:", objc_msgSend(v347, "roles") | 8);
  long long v348 = (void *)[v347 copy];
  v494[0] = v348;
  v494[1] = v463;
  long long v349 = [MEMORY[0x263EFF8C0] arrayWithObjects:v494 count:2];
  [(HMDHome *)self registerForBulletinNotificationRegistrationHandlersUsingPolicies:v349];

  long long v350 = [(HMDHome *)self msgDispatcher];
  long long v351 = [(HMDHome *)self administratorHandler];

  uint64_t v352 = *MEMORY[0x263F0CEC0];
  long long v353 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v493[0] = v353;
  v493[1] = v464;
  long long v354 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v493[2] = v354;
  long long v355 = [MEMORY[0x263EFF8C0] arrayWithObjects:v493 count:3];
  [v351 registerForMessage:v352 receiver:self policies:v355 selector:sel__handleUpdateAutomaticSoftwareUpdate_];

  uint64_t v356 = *MEMORY[0x263F0CEC8];
  long long v357 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v492[0] = v357;
  v492[1] = v464;
  long long v358 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v492[2] = v358;
  long long v359 = [MEMORY[0x263EFF8C0] arrayWithObjects:v492 count:3];
  [v351 registerForMessage:v356 receiver:self policies:v359 selector:sel__handleUpdateAutomaticThirdPartyAccessorySoftwareUpdate_];

  long long v360 = [(HMDHome *)self msgDispatcher];
  long long v361 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v491[0] = v361;
  v491[1] = v465;
  long long v362 = [MEMORY[0x263EFF8C0] arrayWithObjects:v491 count:2];
  [v360 registerForMessage:@"HMDHomeQueryResidentReachabilityForAccessoriesMessageKey" receiver:self policies:v362 selector:sel__handleQueryResidentReachabilityForAccessories_];

  v363 = [(HMDHome *)self msgDispatcher];
  uint64_t v364 = *MEMORY[0x263F0C888];
  v365 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v490[0] = v365;
  v490[1] = v466;
  v366 = [MEMORY[0x263EFF8C0] arrayWithObjects:v490 count:2];
  [v363 registerForMessage:v364 receiver:self policies:v366 selector:sel_executeActionsFromMessage_];

  v367 = [(HMDHome *)self localCapabilitiesDataSource];
  LODWORD(v364) = [v367 supportsHomeNotificationEnablement];

  if (v364)
  {
    v368 = [(HMDHome *)self msgDispatcher];
    uint64_t v369 = *MEMORY[0x263F0E9C8];
    v370 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v489[0] = v370;
    v489[1] = v463;
    v371 = [MEMORY[0x263EFF8C0] arrayWithObjects:v489 count:2];
    [v368 registerForMessage:v369 receiver:self policies:v371 selector:sel__handleEnableNotifications_];
  }
  v372 = [(HMDHome *)self msgDispatcher];
  v373 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v488[0] = v373;
  v488[1] = v465;
  v374 = [MEMORY[0x263EFF8C0] arrayWithObjects:v488 count:2];
  [v372 registerForMessage:@"kMediaPropertiesWriteRequestKey" receiver:self policies:v374 selector:sel__handleMediaPropertiesWrite_];

  v375 = [(HMDHome *)self msgDispatcher];
  v376 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v487[0] = v376;
  v487[1] = v465;
  v377 = [MEMORY[0x263EFF8C0] arrayWithObjects:v487 count:2];
  [v375 registerForMessage:@"kMediaPropertiesReadRequestKey" receiver:self policies:v377 selector:sel__handleMediaPropertiesRead_];

  v378 = [(HMDHome *)self msgDispatcher];
  v379 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v380 = (void *)v464;
  v486[0] = v379;
  v486[1] = v464;
  v381 = [MEMORY[0x263EFF8C0] arrayWithObjects:v486 count:2];
  [v378 registerForMessage:@"kStartDiscoveringSymptomsForNearbyDevicesRequestKey" receiver:self policies:v381 selector:sel__handleStartDiscoveringSymptomsForNearbyDevicesMessage_];

  v382 = [(HMDHome *)self msgDispatcher];
  v383 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v485[0] = v383;
  v485[1] = v464;
  v384 = [MEMORY[0x263EFF8C0] arrayWithObjects:v485 count:2];
  [v382 registerForMessage:@"kStopDiscoveringSymptomsForNearbyDevicesRequestKey" receiver:self policies:v384 selector:sel__handleStopDiscoveringSymptomsForNearbyDevicesMessage_];

  if ([(HMDHome *)self isOwnerUser])
  {
    id v385 = [(HMDHome *)self administratorHandler];
    __int16 v386 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v484[0] = v386;
    uint64_t v387 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v484[1] = v387;
    __int16 v388 = v484;
    uint64_t v389 = v464;
  }
  else
  {
    id v385 = [(HMDHome *)self msgDispatcher];
    __int16 v386 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v483[0] = v386;
    uint64_t v387 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v483[1] = v387;
    __int16 v388 = v483;
    uint64_t v389 = (uint64_t)v466;
  }
  v388[2] = v389;
  uint64_t v390 = objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:count:");

  [v385 registerForMessage:*MEMORY[0x263F0DBF0] receiver:self policies:v390 selector:sel__handleAssistantAccessControlUpdate_];
  [v385 registerForMessage:*MEMORY[0x263F0DCA8] receiver:self policies:v390 selector:sel__handleMediaContentProfileAccessControlUpdate_];
  v455 = (void *)v390;
  v457 = v385;
  [v385 registerForMessage:*MEMORY[0x263F0DC90] receiver:self policies:v390 selector:sel__handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs_];
  v391 = [(HMDHome *)self msgDispatcher];
  v392 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v482[0] = v392;
  v482[1] = v466;
  v393 = [MEMORY[0x263EFF8C0] arrayWithObjects:v482 count:2];
  [v391 registerForMessage:@"HMDUCM.rsr" receiver:self policies:v393 selector:sel__handleRemoteUserClientCloudShareRequest_];

  v394 = [(HMDHome *)self msgDispatcher];
  v395 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v481[0] = v395;
  v481[1] = v466;
  v396 = [MEMORY[0x263EFF8C0] arrayWithObjects:v481 count:2];
  [v394 registerForMessage:@"HMDUCM.rRepr" receiver:self policies:v396 selector:sel__handleRemoteUserClientCloudShareRepairRequest_];

  v397 = [(HMDHome *)self msgDispatcher];
  v398 = +[HMDRemoteMessagePolicy defaultSecurePrimaryResidentPolicy];
  v480[0] = v398;
  v480[1] = v464;
  v399 = [MEMORY[0x263EFF8C0] arrayWithObjects:v480 count:2];
  [v397 registerForMessage:@"HMDHomeSetHomeManagerAppData" receiver:self policies:v399 selector:sel__handleSetHomeManagerAppData_];

  if (isInternalBuild())
  {
    v400 = [(HMDHome *)self msgDispatcher];
    uint64_t v401 = *MEMORY[0x263F0C7F8];
    v402 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v479[0] = v402;
    v479[1] = v464;
    v403 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v479[2] = v403;
    v404 = [MEMORY[0x263EFF8C0] arrayWithObjects:v479 count:3];
    [v400 registerForMessage:v401 receiver:self policies:v404 selector:sel__handleConfirmResidentRequest_];

    v405 = [(HMDHome *)self msgDispatcher];
    uint64_t v406 = *MEMORY[0x263F0CE48];
    v407 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v478[0] = v407;
    v478[1] = v464;
    v408 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v478[2] = v408;
    v409 = [MEMORY[0x263EFF8C0] arrayWithObjects:v478 count:3];
    [v405 registerForMessage:v406 receiver:self policies:v409 selector:sel__handleSetResidentElectionVersion_];
  }
  [(HMDHome *)self _registerThreadResidentCommissioningMessageHandlers];
  v410 = [(HMDHome *)self msgDispatcher];
  uint64_t v411 = *MEMORY[0x263F0C8A0];
  v412 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v477 = v412;
  v413 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v477 count:1];
  [v410 registerForMessage:v411 receiver:self policies:v413 selector:sel__handleFetchLastModifiedServiceOfType_];

  if (isInternalBuild())
  {
    v414 = [(HMDHome *)self msgDispatcher];
    uint64_t v415 = *MEMORY[0x263F0CE90];
    v416 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v476 = v416;
    v417 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v476 count:1];
    [v414 registerForMessage:v415 receiver:self policies:v417 selector:sel__handleTestUpgradeToROAR_];
  }
  v418 = [(HMDHome *)self msgDispatcher];
  v419 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v475[0] = v419;
  v475[1] = v466;
  v420 = [MEMORY[0x263EFF8C0] arrayWithObjects:v475 count:2];
  [v418 registerForMessage:@"HMDHomeSetNaturalLightingEnabledForLightProfilesMessage" receiver:self policies:v420 selector:sel_handleSetNaturalLightingEnabledForLightProfilesMessage_];

  v421 = [(HMDHome *)self msgDispatcher];
  uint64_t v422 = *MEMORY[0x263F0C8A8];
  v423 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v474 = v423;
  v424 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v474 count:1];
  [v421 registerForMessage:v422 receiver:self policies:v424 selector:sel_handleFetchLightProfileSettingsMessage_];

  v425 = [(HMDHome *)self msgDispatcher];
  v426 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v473[0] = v426;
  v473[1] = v466;
  v427 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v473[2] = v427;
  v428 = [MEMORY[0x263EFF8C0] arrayWithObjects:v473 count:3];
  [v425 registerForMessage:@"HMDHomeCHIPSendRemoteRequestMessage" receiver:self policies:v428 selector:sel_handleCHIPSendRemoteRequestMessage_];

  if (isInternalBuild())
  {
    v429 = +[HMDUserMessagePolicy userMessagePolicyWithHome:self userPrivilege:4 remoteAccessRequired:0];
    v430 = [(HMDHome *)self msgDispatcher];
    uint64_t v431 = *MEMORY[0x263F0CDD0];
    v432 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
    v472[0] = v432;
    v472[1] = v429;
    v433 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v472[2] = v433;
    v434 = [MEMORY[0x263EFF8C0] arrayWithObjects:v472 count:3];
    [v430 registerForMessage:v431 receiver:self policies:v434 selector:sel_handleResetMatterStorageRequest_];

    v380 = (void *)v464;
  }
  v435 = [(HMDHome *)self msgDispatcher];
  v436 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v471[0] = v436;
  v471[1] = v466;
  v437 = [MEMORY[0x263EFF8C0] arrayWithObjects:v471 count:2];
  [v435 registerForMessage:@"HMDHomeCHIPSendReportMessage" receiver:self policies:v437 selector:sel_handleCHIPSendReportMessage_];

  if (isInternalBuild())
  {
    v438 = [(HMDHome *)self msgDispatcher];
    uint64_t v439 = *MEMORY[0x263F0CE20];
    v440 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
    v470[0] = v440;
    v441 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:1];
    v470[1] = v441;
    v442 = [MEMORY[0x263EFF8C0] arrayWithObjects:v470 count:2];
    [v438 registerForMessage:v439 receiver:self policies:v442 selector:sel_handleSetPreferredPrimaryMessage_];

    v443 = [(HMDHome *)self msgDispatcher];
    uint64_t v444 = *MEMORY[0x263F0CE80];
    v445 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v469[0] = v445;
    v469[1] = v380;
    v446 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
    v469[2] = v446;
    v447 = [MEMORY[0x263EFF8C0] arrayWithObjects:v469 count:3];
    [v443 registerForMessage:v444 receiver:self policies:v447 selector:sel_handleSwitchFromResidentSelectionToREV2_];
  }
  v448 = [(HMDHome *)self msgDispatcher];
  uint64_t v449 = *MEMORY[0x263F0C8B0];
  v450 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v468 = v450;
  v451 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v468 count:1];
  [v448 registerForMessage:v449 receiver:self policies:v451 selector:sel__handleFetchTriggerNameRequest_];

  [(HMDHome *)self registerWiFiInfoFetchMessage];
  if (isInternalBuild())
  {
    v452 = [(HMDHome *)self msgDispatcher];
    v453 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v467 = v453;
    v454 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v467 count:1];
    [v452 registerForMessage:@"HomeUtil.Command.Wallet.RollReaderKey" receiver:self policies:v454 selector:sel__handleRollReaderKey_];
  }
  [(HMDHome *)self _registerForMatterRequests];
  [(HMDHome *)self _registerPerformMediaGroupReadinessCheckMessage];
}

- (id)resolveReceiverForMessageTargetUUID:(id)a3
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self uuid];
  int v6 = [v5 isEqual:v4];

  if (v6)
  {
    int v7 = self;
  }
  else
  {
    uint64_t v8 = [(HMDHome *)self roomWithUUID:v4];
    if (v8)
    {
      uint64_t v9 = v8;
      int v7 = v9;
    }
    else
    {
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      id v10 = [(HMDHome *)self appleMediaAccessories];
      uint64_t v11 = [v10 countByEnumeratingWithState:&v37 objects:v42 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v9 = 0;
        uint64_t v13 = *(void *)v38;
        while (2)
        {
          uint64_t v14 = 0;
          long long v15 = v9;
          do
          {
            if (*(void *)v38 != v13) {
              objc_enumerationMutation(v10);
            }
            int v16 = *(void **)(*((void *)&v37 + 1) + 8 * v14);
            long long v17 = [v16 settingsController];
            uint64_t v9 = [v17 messageHandler];

            long long v18 = [(HMDHome *)v9 messageTargetUUID];
            if ([v18 isEqual:v4])
            {

LABEL_27:
              uint64_t v9 = v9;

LABEL_30:
              int v7 = v9;
              goto LABEL_31;
            }
            int v19 = [v16 settingsController];
            uint64_t v20 = [v19 settingForUUID:v4];

            if (v20) {
              goto LABEL_27;
            }
            ++v14;
            long long v15 = v9;
          }
          while (v12 != v14);
          uint64_t v12 = [v10 countByEnumeratingWithState:&v37 objects:v42 count:16];
          if (v12) {
            continue;
          }
          break;
        }
      }
      else
      {
        uint64_t v9 = 0;
      }

      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t v21 = [(HMDHome *)self mediaSystems];
      uint64_t v22 = [v21 countByEnumeratingWithState:&v33 objects:v41 count:16];
      if (v22)
      {
        uint64_t v23 = v22;
        uint64_t v24 = *(void *)v34;
        while (2)
        {
          uint64_t v25 = 0;
          uint64_t v26 = v9;
          do
          {
            if (*(void *)v34 != v24) {
              objc_enumerationMutation(v21);
            }
            id v27 = *(void **)(*((void *)&v33 + 1) + 8 * v25);
            uint64_t v28 = [v27 settingsController];
            uint64_t v9 = [v28 messageHandler];

            uint64_t v29 = [(HMDHome *)v9 messageTargetUUID];
            if ([v29 isEqual:v4])
            {

LABEL_29:
              uint64_t v9 = v9;

              goto LABEL_30;
            }
            uint64_t v30 = [v27 settingsController];
            uint64_t v31 = [v30 settingForUUID:v4];

            if (v31) {
              goto LABEL_29;
            }
            ++v25;
            uint64_t v26 = v9;
          }
          while (v23 != v25);
          uint64_t v23 = [v21 countByEnumeratingWithState:&v33 objects:v41 count:16];
          if (v23) {
            continue;
          }
          break;
        }
      }

      int v7 = 0;
    }
LABEL_31:
  }
  return v7;
}

- (void)notifyClientOfVendorInfoUpdatedForManufacturers:(id)a3 withCompletion:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __74__HMDHome_notifyClientOfVendorInfoUpdatedForManufacturers_withCompletion___block_invoke;
  block[3] = &unk_264A2EE80;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

void __74__HMDHome_notifyClientOfVendorInfoUpdatedForManufacturers_withCompletion___block_invoke(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) accessories];
  long long v17 = (void *)[v2 copy];

  id v3 = [MEMORY[0x263EFF980] array];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v14 = a1;
  obuint64_t j = *(id *)(a1 + 40);
  uint64_t v18 = [obj countByEnumeratingWithState:&v23 objects:v28 count:16];
  if (v18)
  {
    uint64_t v16 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v24 != v16) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void *)(*((void *)&v23 + 1) + 8 * i);
        long long v19 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        id v6 = v17;
        uint64_t v7 = [v6 countByEnumeratingWithState:&v19 objects:v27 count:16];
        if (v7)
        {
          uint64_t v8 = v7;
          uint64_t v9 = *(void *)v20;
          do
          {
            for (uint64_t j = 0; j != v8; ++j)
            {
              if (*(void *)v20 != v9) {
                objc_enumerationMutation(v6);
              }
              uint64_t v11 = *(void **)(*((void *)&v19 + 1) + 8 * j);
              id v12 = [v11 manufacturer];
              uint64_t v13 = [v12 caseInsensitiveCompare:v5];

              if (!v13) {
                [v3 addObject:v11];
              }
            }
            uint64_t v8 = [v6 countByEnumeratingWithState:&v19 objects:v27 count:16];
          }
          while (v8);
        }
      }
      uint64_t v18 = [obj countByEnumeratingWithState:&v23 objects:v28 count:16];
    }
    while (v18);
  }

  [*(id *)(v14 + 32) _notifyClientsOfAccessoryInfoUpdatedForAccessories:v3 shouldRefreshBadge:0 withCompletion:*(void *)(v14 + 48)];
}

- (void)resetConfiguration
{
  [(HMDHome *)self unconfigure];
  id v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __29__HMDHome_resetConfiguration__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

void __29__HMDHome_resetConfiguration__block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) accessories];
  id v3 = (void *)MEMORY[0x230FBD990]();
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v19 = v6;
    __int16 v20 = 2112;
    long long v21 = v2;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@resetConfiguration - removing accessories %@", buf, 0x16u);
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v7 = v2;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 32), "removeAccessory:", v12, (void)v13);
        [v12 unconfigure];
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v9);
  }
}

- (void)_evaluateShouldRelaunchAndSetRelaunch
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (![(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v3 = [(HMDHome *)self accessories];
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      int v6 = 0;
      uint64_t v7 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v3);
          }
          v6 |= [*(id *)(*((void *)&v11 + 1) + 8 * i) shouldEnableDaemonRelaunch];
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);

      if (v6) {
        goto LABEL_10;
      }
    }
    else
    {
    }
    uint64_t v9 = [(HMDHome *)self launchHandler];
    uint64_t v10 = [(HMDHome *)self uuid];
    [v9 deregisterRelaunchClientWithUUID:v10];
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v9 = [(HMDHome *)self launchHandler];
  uint64_t v10 = [(HMDHome *)self uuid];
  [v9 registerRelaunchClientWithUUID:v10];
LABEL_13:
}

- (void)evaluateShouldRelaunchAndSetRelaunch
{
  id v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __47__HMDHome_evaluateShouldRelaunchAndSetRelaunch__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __47__HMDHome_evaluateShouldRelaunchAndSetRelaunch__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _evaluateShouldRelaunchAndSetRelaunch];
}

- (id)getTransactionFromHAPAccessory:(id)a3 hmdAccessory:(id)a4 uuid:(id)a5 hostAccessoryUUID:(id)a6 objectChangeType:(unint64_t)a7
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  uint64_t v16 = [(HMDHome *)self currentAccessory];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    long long v17 = v16;
  }
  else {
    long long v17 = 0;
  }
  id v72 = v17;

  id v18 = v14;
  if (v13)
  {
    long long v19 = [v13 transactionWithObjectChangeType:a7];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      __int16 v20 = v19;
    }
    else {
      __int16 v20 = 0;
    }
    long long v21 = v20;
  }
  else
  {
    uint64_t v22 = [HMDHAPAccessoryTransaction alloc];
    long long v19 = [(HMDHome *)self uuid];
    long long v21 = [(HMDBackingStoreModelObject *)v22 initWithObjectChangeType:a7 uuid:v18 parentUUID:v19];
  }
  long long v23 = v21;

  [(HMDHAPAccessoryTransaction *)v23 setHapAccessoryLocal:v12];
  long long v24 = [v13 providedName];
  if (v24) {
    goto LABEL_13;
  }
  if ([v12 linkType] != 2)
  {
    long long v24 = [v12 name];
    long long v25 = (void *)[v24 copy];
    [(HMDHAPAccessoryTransaction *)v23 setProvidedName:v25];

LABEL_13:
  }
  long long v26 = [v12 uniqueIdentifier];
  [(HMDHAPAccessoryTransaction *)v23 setUniqueIdentifier:v26];

  id v27 = [v12 identifier];
  [(HMDHAPAccessoryTransaction *)v23 setIdentifier:v27];

  uint64_t v28 = [v12 identifier];
  unsigned __int8 v80 = 0;
  uint64_t v29 = [(HMDHome *)self keychainStore];
  id v79 = 0;
  long long v73 = [v29 readPublicKeyForAccessoryName:v28 registeredWithHomeKit:&v80 error:&v79];
  id v70 = v79;

  int v30 = v80;
  uint64_t v31 = (void *)MEMORY[0x230FBD990]();
  uint64_t v32 = self;
  long long v33 = HMFGetOSLogHandle();
  long long v34 = v33;
  long long v71 = v15;
  if (v28 && v73 && v30)
  {
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      long long v35 = HMFGetLogIdentifier();
      [v12 name];
      long long v36 = v69 = v18;
      long long v37 = [v12 uniqueIdentifier];
      *(_DWORD *)buf = 138544386;
      uint64_t v82 = v35;
      __int16 v83 = 2112;
      id v84 = v36;
      __int16 v85 = 2112;
      __int16 v86 = v37;
      __int16 v87 = 2112;
      id v88 = v28;
      __int16 v89 = 2112;
      uint64_t v90 = v73;
      _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ setting pairing username and pubkey to ('%@', '%@')", buf, 0x34u);

      id v15 = v71;
      id v18 = v69;
    }
    [(HMDHAPAccessoryTransaction *)v23 setPairingUsername:v28];
    [(HMDHAPAccessoryTransaction *)v23 setPublicKey:v73];
  }
  else
  {
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      long long v38 = HMFGetLogIdentifier();
      [(HMDHAPAccessoryTransaction *)v23 providedName];
      id v39 = v13;
      v41 = id v40 = v18;
      *(_DWORD *)buf = 138544130;
      uint64_t v82 = v38;
      __int16 v83 = 2112;
      id v84 = v41;
      __int16 v85 = 2112;
      __int16 v86 = v28;
      __int16 v87 = 2112;
      id v88 = v70;
      _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_ERROR, "%{public}@Failed to read public key for accessory %@ with pairing username %@: %@", buf, 0x2Au);

      id v18 = v40;
      id v13 = v39;
      id v15 = v71;
    }
  }
  uint64_t v42 = [v15 UUIDString];
  [(HMDHAPAccessoryTransaction *)v23 setHostAccessoryUUID:v42];

  uint64_t v43 = [(HMDHAPAccessoryTransaction *)v23 hostAccessoryUUID];
  long long v44 = (void *)v43;
  if (v18 && !v43 && v72)
  {
    long long v45 = [v72 sensorAccessoryUUID];
    int v46 = objc_msgSend(v45, "hmf_isEqualToUUID:", v18);

    if (!v46) {
      goto LABEL_29;
    }
    long long v44 = [v72 uuid];
    long long v47 = [v44 UUIDString];
    [(HMDHAPAccessoryTransaction *)v23 setHostAccessoryUUID:v47];
  }
LABEL_29:
  long long v48 = [v13 category];

  if (!v48)
  {
    long long v49 = [v12 category];

    if (v49)
    {
      long long v50 = [v12 category];
      [(HMDHAPAccessoryTransaction *)v23 setAccessoryCategory:v50];
    }
    else
    {
      long long v50 = [(HMDHome *)v32 hapMetadata];
      uint64_t v51 = [v50 categoryForOther];
      [v51 identifier];
      id v52 = v13;
      uint64_t v54 = v53 = v18;
      [(HMDHAPAccessoryTransaction *)v23 setAccessoryCategory:v54];

      id v18 = v53;
      id v13 = v52;
    }
  }
  uint64_t v55 = v18;
  uint64_t v56 = [MEMORY[0x263EFF9C0] set];
  uint64_t v57 = (void *)MEMORY[0x263EFF9C0];
  __int16 v58 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v12, "linkType"));
  uint64_t v59 = [v57 setWithObject:v58];

  int v60 = [v12 servicesOfType:@"00000701-0000-1000-8000-0026BB765291"];
  uint64_t v61 = [v60 count];

  if (v61) {
    [v59 addObject:&unk_26E470900];
  }
  v76[0] = MEMORY[0x263EF8330];
  v76[1] = 3221225472;
  v76[2] = __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke;
  v76[3] = &unk_264A16310;
  id v62 = v56;
  id v77 = v62;
  id v78 = v12;
  id v63 = v12;
  objc_msgSend(v59, "na_each:", v76);
  char v64 = [v13 transportInformationInstances];
  v74[0] = MEMORY[0x263EF8330];
  v74[1] = 3221225472;
  v74[2] = __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke_2;
  v74[3] = &unk_264A16338;
  id v75 = v62;
  id v65 = v62;
  objc_msgSend(v64, "na_each:", v74);

  long long v66 = [v65 allObjects];
  [(HMDHAPAccessoryTransaction *)v23 setTransportInformation:v66];

  int v67 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v63, "communicationProtocol"));
  [(HMDHAPAccessoryTransaction *)v23 setCommunicationProtocol:v67];

  return v23;
}

void __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke(uint64_t a1, void *a2)
{
  void v10[3] = *MEMORY[0x263EF8340];
  v9[0] = @"HM.serverIdentifier";
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = a2;
  int v6 = [v4 serverIdentifier];
  v10[0] = v6;
  v9[1] = @"HM.instanceID";
  uint64_t v7 = [*(id *)(a1 + 40) instanceID];
  void v9[2] = @"linkType";
  v10[1] = v7;
  void v10[2] = v5;
  uint64_t v8 = [NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:3];
  [v3 addObject:v8];
}

void __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 transportInfoDictionary];
  [v2 addObject:v3];
}

- (id)getServiceTransaction:(id)a3 parentUUID:(id)a4 changeType:(unint64_t)a5
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = [v7 instanceID];
  uint64_t v10 = +[HMDService generateUUIDWithAccessoryUUID:v8 serviceID:v9];

  long long v11 = [(HMDBackingStoreModelObject *)[HMDServiceTransaction alloc] initWithObjectChangeType:a5 uuid:v10 parentUUID:v8];
  if (v7)
  {
    id v12 = [v7 instanceID];
    [(HMDServiceTransaction *)v11 setInstanceID:v12];

    id v13 = [v7 type];
    [(HMDServiceTransaction *)v11 setServiceType:v13];

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v14 = v7;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v15 = v14;
      }
      else {
        id v15 = 0;
      }
      id v16 = v15;

      long long v17 = [v16 endpoint];

      [(HMDServiceTransaction *)v11 setMatterEndpointID:v17];
    }
    id v18 = [v7 linkedServices];

    if (v18)
    {
      long long v19 = [v7 linkedServices];
      __int16 v20 = (void *)[v19 copy];
      [(HMDServiceTransaction *)v11 setLinkedServices:v20];
    }
    long long v21 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v7, "serviceProperties"));
    [(HMDServiceTransaction *)v11 setServiceProperties:v21];
  }
  return v11;
}

- (void)evaluateBulletinNotificationsSupported
{
  id v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __49__HMDHome_evaluateBulletinNotificationsSupported__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

void __49__HMDHome_evaluateBulletinNotificationsSupported__block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) residentDeviceManager];
  id v3 = [v2 availableResidentDevices];
  uint64_t v4 = [v3 count];

  if ((v4 != 0) != [*(id *)(a1 + 32) bulletinNotificationsSupported])
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = *(id *)(a1 + 32);
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      [*(id *)(a1 + 32) bulletinNotificationsSupported];
      uint64_t v9 = HMFBooleanToString();
      uint64_t v10 = HMFBooleanToString();
      int v13 = 138543874;
      id v14 = v8;
      __int16 v15 = 2112;
      id v16 = v9;
      __int16 v17 = 2112;
      id v18 = v10;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Bulletin notifications supported has changed from: %@ to: %@", (uint8_t *)&v13, 0x20u);
    }
    [*(id *)(a1 + 32) setBulletinNotificationsSupported:v4 != 0];
    long long v11 = [*(id *)(a1 + 32) homeManager];
    id v12 = [*(id *)(a1 + 32) uuid];
    [v11 updateGenerationCounterWithReason:@"Bulletin Notifications Supported Updated" sourceUUID:v12 shouldNotifyClients:1];
  }
}

- (void)evaluateResidentUpdate
{
  id v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __33__HMDHome_evaluateResidentUpdate__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __33__HMDHome_evaluateResidentUpdate__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _evaluateNetworkProtectionAndRouterManagement];
}

- (void)reEvaluateHomeHubState
{
  id v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __33__HMDHome_reEvaluateHomeHubState__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

void __33__HMDHome_reEvaluateHomeHubState__block_invoke(uint64_t a1)
{
  v16[1] = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) residentDeviceManager];
  id v3 = [v2 residentDevices];

  uint64_t v4 = 2 * ([v3 count] != 0);
  id v5 = [*(id *)(a1 + 32) residentDeviceManager];
  id v6 = [v5 primaryResidentDevice];

  if ([v6 isEnabled] && objc_msgSend(v6, "isReachable")) {
    uint64_t v4 = 1;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (*(void *)(v7 + 816) != v4)
  {
    *(void *)(v7 + 816) = v4;
    id v8 = (void *)MEMORY[0x263F42568];
    uint64_t v9 = *MEMORY[0x263F0C910];
    uint64_t v15 = *MEMORY[0x263F0C908];
    uint64_t v10 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "homeHubState"));
    v16[0] = v10;
    long long v11 = [NSDictionary dictionaryWithObjects:v16 forKeys:&v15 count:1];
    id v12 = [v8 messageWithName:v9 messagePayload:v11];

    int v13 = [*(id *)(a1 + 32) msgDispatcher];
    id v14 = [*(id *)(a1 + 32) uuid];
    [v13 sendMessage:v12 target:v14];
  }
}

- (id)matterAccessoriesWithNewFirmwareInstalledInHome
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v23 = [MEMORY[0x263EFF980] array];
  if (([(HMDHome *)self isOwnerUser] || [(HMDHome *)self isSharedAdmin])
    && ![(HMDHome *)self isAutomaticThirdPartyAccessorySoftwareUpdateEnabled])
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v3 = [(HMDHome *)self accessories];
    uint64_t v4 = (void *)[v3 copy];

    uint64_t v5 = [v4 countByEnumeratingWithState:&v25 objects:v35 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v26;
      uint64_t v19 = self;
      uint64_t v22 = v4;
      do
      {
        uint64_t v8 = 0;
        uint64_t v20 = v6;
        do
        {
          if (*(void *)v26 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(id *)(*((void *)&v25 + 1) + 8 * v8);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v10 = v9;
          }
          else {
            uint64_t v10 = 0;
          }
          id v11 = v10;

          if ([v11 supportsCHIP])
          {
            id v12 = [v9 softwareUpdate];
            int v13 = v12;
            if (v12 && [v12 state] == 4)
            {
              context = (void *)MEMORY[0x230FBD990]();
              id v14 = self;
              uint64_t v15 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                id v16 = HMFGetLogIdentifier();
                long long v21 = [v9 uuid];
                __int16 v17 = [v21 UUIDString];
                *(_DWORD *)buf = 138543874;
                int v30 = v16;
                __int16 v31 = 2114;
                uint64_t v32 = v17;
                __int16 v33 = 2112;
                long long v34 = v13;
                _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory %{public}@ has a firmware recently installed, softwareUpdate %@", buf, 0x20u);

                self = v19;
                uint64_t v6 = v20;
              }

              [v23 addObject:v9];
              uint64_t v4 = v22;
            }
          }
          ++v8;
        }
        while (v6 != v8);
        uint64_t v6 = [v4 countByEnumeratingWithState:&v25 objects:v35 count:16];
      }
      while (v6);
    }
  }
  return v23;
}

- (void)_handleConfirmResidentRequest:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self residentDeviceManager];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __41__HMDHome__handleConfirmResidentRequest___block_invoke;
  v7[3] = &unk_264A2F3E8;
  id v8 = v4;
  id v6 = v4;
  [v5 confirmWithCompletionHandler:v7];
}

uint64_t __41__HMDHome__handleConfirmResidentRequest___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (id)namesOfServicesWithNewFirmwareAvailableInHome
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  id v67 = [MEMORY[0x263EFF980] array];
  if ([(HMDHome *)self isOwnerUser])
  {
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    id v3 = [(HMDHome *)self accessories];
    id v4 = (void *)[v3 copy];

    obuint64_t j = v4;
    uint64_t v5 = [v4 countByEnumeratingWithState:&v71 objects:v83 count:16];
    if (!v5) {
      goto LABEL_56;
    }
    uint64_t v7 = v5;
    uint64_t v8 = *(void *)v72;
    *(void *)&long long v6 = 138544130;
    long long v59 = v6;
    uint64_t v68 = *(void *)v72;
    while (1)
    {
      uint64_t v9 = 0;
      uint64_t v69 = v7;
      do
      {
        if (*(void *)v72 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(id *)(*((void *)&v71 + 1) + 8 * v9);
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0 && v10)
        {
          if (![(HMDHome *)self isAutomaticThirdPartyAccessorySoftwareUpdateEnabled])goto LABEL_11; {
          id v12 = [(HMDHome *)self residentDeviceManager];
          }
          int v13 = [v12 availableResidentDevices];
          uint64_t v14 = [v13 count];

          uint64_t v7 = v69;
          if (!v14)
          {
LABEL_11:
            uint64_t v15 = self;
            id v16 = v10;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              __int16 v17 = v16;
            }
            else {
              __int16 v17 = 0;
            }
            id v18 = v17;

            if ([v18 supportsCHIP])
            {
              uint64_t v19 = [v16 softwareUpdate];
              uint64_t v20 = v19;
              if (v19 && [v19 state] == 2)
              {
                long long v21 = (void *)MEMORY[0x230FBD990]();
                uint64_t v22 = v15;
                id v23 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                {
                  long long v24 = HMFGetLogIdentifier();
                  [v16 uuid];
                  long long v25 = v64 = v21;
                  long long v26 = [v25 UUIDString];
                  *(_DWORD *)buf = 138543618;
                  long long v76 = v24;
                  __int16 v77 = 2114;
                  id v78 = v26;
                  _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Matter accessory %{public}@ has a firmware update", buf, 0x16u);

                  uint64_t v7 = v69;
                  long long v21 = v64;
                }
                long long v27 = [v16 name];
                [v67 addObject:v27];
LABEL_48:
              }
              self = v15;
              uint64_t v8 = v68;
LABEL_50:

              goto LABEL_51;
            }
            uint64_t v20 = [v16 vendorInfo];
            uint64_t v36 = [v16 firmwareVersion];
            if (v36 && [v16 isPrimary])
            {
              long long v37 = [v20 firmwareVersion];
              long long v38 = [v16 firmwareVersion];
              int v39 = [v37 isGreaterThanVersion:v38];
            }
            else
            {
              int v39 = 0;
            }

            if (v20
              && ([v20 firmwareVersion], (uint64_t v40 = objc_claimAutoreleasedReturnValue()) != 0)
              && (v41 = (void *)v40, char v42 = [v16 isPrimary], v41, (v42 & 1) != 0))
            {
              if (!v39)
              {
                self = v15;
                uint64_t v8 = v68;
                uint64_t v7 = v69;
                goto LABEL_50;
              }
              uint64_t v43 = (void *)MEMORY[0x230FBD990]();
              long long v44 = v15;
              long long v45 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
              {
                int v46 = HMFGetLogIdentifier();
                id v62 = [v16 uuid];
                long long v47 = [v62 UUIDString];
                [v20 firmwareVersion];
                long long v48 = v65 = v43;
                [v20 productData];
                long long v49 = v60 = v44;
                *(_DWORD *)buf = v59;
                long long v76 = v46;
                __int16 v77 = 2114;
                id v78 = v47;
                __int16 v79 = 2114;
                unsigned __int8 v80 = v48;
                __int16 v81 = 2112;
                uint64_t v82 = v49;
                _os_log_impl(&dword_22F52A000, v45, OS_LOG_TYPE_INFO, "%{public}@Accessory %{public}@ has a firmware update, vendor database indicates available firmware version %{public}@ for product data %@", buf, 0x2Au);

                long long v44 = v60;
                uint64_t v43 = v65;
              }
              long long v27 = [v16 namesOfServicesShowingTilesInHomeApp];
              [v67 addObjectsFromArray:v27];
            }
            else
            {
              long long v50 = objc_msgSend(v16, "softwareUpdate", v59);
              long long v27 = v50;
              if (v50 && [v50 state] == 2)
              {
                uint64_t v51 = (void *)MEMORY[0x230FBD990]();
                id v52 = v15;
                id v53 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
                {
                  long long v66 = HMFGetLogIdentifier();
                  uint64_t v61 = [v16 uuid];
                  [v61 UUIDString];
                  uint64_t v54 = v63 = v51;
                  uint64_t v55 = [v16 firmwareVersion];
                  *(_DWORD *)buf = 138543874;
                  long long v76 = v66;
                  __int16 v77 = 2114;
                  id v78 = v54;
                  __int16 v79 = 2114;
                  unsigned __int8 v80 = v55;
                  _os_log_impl(&dword_22F52A000, v53, OS_LOG_TYPE_INFO, "%{public}@Accessory %{public}@ currentFirmwareVersion %{public}@ has a firmware update", buf, 0x20u);

                  uint64_t v51 = v63;
                }

                uint64_t v56 = [v16 name];
                [v67 addObject:v56];
              }
            }
            uint64_t v7 = v69;
            goto LABEL_48;
          }
        }
        else
        {
          id v28 = v10;
          objc_opt_class();
          char v29 = objc_opt_isKindOfClass();

          if ((v29 & 1) != 0
            && v10
            && ![(HMDHome *)self isAutomaticSoftwareUpdateEnabled])
          {
            id v30 = v28;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              __int16 v31 = v30;
            }
            else {
              __int16 v31 = 0;
            }
            id v18 = v31;

            if ([v18 supportsTVOSUpdateManualUpdateAvailableNotification])
            {
              uint64_t v32 = [v18 softwareUpdateListener];
              char v33 = [v32 isSoftwareUpdateAvailable];

              if (v33) {
                goto LABEL_30;
              }
            }
            if ((objc_msgSend(v18, "supportsTVOSUpdateManualUpdateAvailableNotification", v59) & 1) == 0)
            {
              long long v34 = [v18 softwareUpdateListener];
              int v35 = [v34 isSoftwareUpdateDownloadedAndReadyForInstallation];

              if (v35)
              {
LABEL_30:
                uint64_t v20 = objc_msgSend(v18, "name", v59);
                [v67 addObject:v20];
                goto LABEL_50;
              }
            }
LABEL_51:
          }
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t v57 = [obj countByEnumeratingWithState:&v71 objects:v83 count:16];
      uint64_t v7 = v57;
      if (!v57)
      {
LABEL_56:

        break;
      }
    }
  }
  return v67;
}

- (BOOL)_hasPairedReachableBTLEAccessories
{
  id v2 = [(HMDHome *)self hapAccessories];
  char v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_918);

  return v3;
}

unint64_t __45__HMDHome__hasPairedReachableBTLEAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 hasBTLELink]) {
    unint64_t v3 = ((unint64_t)[v2 reachableTransports] >> 1) & 1;
  }
  else {
    unint64_t v3 = 0;
  }

  return v3;
}

- (void)_registerForReachabilityChangeNotificationsEnabled:(BOOL)a3 completionHandler:(id)a4
{
  BOOL v4 = a3;
  uint64_t v32 = *MEMORY[0x263EF8340];
  long long v6 = (void (**)(id, uint64_t))a4;
  BOOL v7 = [(HMDHome *)self isCurrentDevicePrimaryResident];
  uint64_t v8 = (void *)MEMORY[0x230FBD990]();
  uint64_t v9 = self;
  id v10 = HMFGetOSLogHandle();
  id v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      id v12 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      char v29 = v12;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_DEBUG, "%{public}@Not updating remote accessory reachability notifications because we are the primary resident", buf, 0xCu);
    }
    v6[2](v6, 1);
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v13 = HMFGetLogIdentifier();
      uint64_t v14 = HMFBooleanToString();
      *(_DWORD *)buf = 138543618;
      char v29 = v13;
      __int16 v30 = 2112;
      __int16 v31 = v14;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Setting remote accessory reachability notifications enabled to %@", buf, 0x16u);
    }
    uint64_t v15 = [(HMDHome *)v9 uuid];
    id v16 = [v15 UUIDString];

    long long v26 = @"kHomeUUID";
    long long v27 = v16;
    __int16 v17 = [NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    objc_initWeak((id *)buf, v9);
    if (v4) {
      id v18 = @"kEnableAccessoryReachabilityNotificationRequestKey";
    }
    else {
      id v18 = @"kDisableAccessoryReachabilityNotificationRequestKey";
    }
    v22[0] = MEMORY[0x263EF8330];
    v22[1] = 3221225472;
    v22[2] = __80__HMDHome__registerForReachabilityChangeNotificationsEnabled_completionHandler___block_invoke;
    void v22[3] = &unk_264A162E8;
    objc_copyWeak(&v24, (id *)buf);
    BOOL v25 = v4;
    id v23 = v6;
    uint64_t v19 = +[HMDRemoteMessage messageWithName:v18 messagePayload:v17 responseHandler:v22];
    uint64_t v20 = [(HMDHome *)v9 uuid];
    long long v21 = [(HMDHome *)v9 workQueue];
    [(HMDHome *)v9 redispatchToResidentMessage:v19 target:v20 responseQueue:v21];

    objc_destroyWeak(&v24);
    objc_destroyWeak((id *)buf);
  }
}

void __80__HMDHome__registerForReachabilityChangeNotificationsEnabled_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!WeakRetained) {
    goto LABEL_15;
  }
  uint64_t v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = WeakRetained;
  id v10 = HMFGetOSLogHandle();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (!v11) {
      goto LABEL_13;
    }
    id v12 = HMFGetLogIdentifier();
    int v13 = *(unsigned __int8 *)(a1 + 48);
    int v21 = 138543874;
    uint64_t v22 = (uint64_t)v12;
    if (v13) {
      uint64_t v14 = "register";
    }
    else {
      uint64_t v14 = "de-register";
    }
    __int16 v23 = 2080;
    id v24 = v14;
    __int16 v25 = 2112;
    id v26 = v5;
    uint64_t v15 = "%{public}@Failed to %s remote accessory reachability notification with error: %@";
    id v16 = v10;
    uint32_t v17 = 32;
  }
  else
  {
    if (!v11) {
      goto LABEL_13;
    }
    uint64_t v18 = HMFGetLogIdentifier();
    id v12 = (void *)v18;
    uint64_t v19 = "registered";
    if (!*(unsigned char *)(a1 + 48)) {
      uint64_t v19 = "de-registered";
    }
    int v21 = 138543618;
    uint64_t v22 = v18;
    __int16 v23 = 2080;
    id v24 = v19;
    uint64_t v15 = "%{public}@Successfully %s remote accessory reachability notification";
    id v16 = v10;
    uint32_t v17 = 22;
  }
  _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v21, v17);

LABEL_13:
  uint64_t v20 = *(void *)(a1 + 32);
  if (v20) {
    (*(void (**)(uint64_t, BOOL))(v20 + 16))(v20, v5 == 0);
  }
LABEL_15:
}

- (void)__registerForRemoteAccessoryReachabilityNotifications:(BOOL)a3 clientIdentifier:(id)a4
{
  BOOL v4 = a3;
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v6 = a4;
  BOOL v7 = [(HMDHome *)self primaryResident];

  if (!v7)
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    BOOL v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v13 = HMFGetLogIdentifier();
      uint64_t v14 = [(HMDHome *)v11 name];
      int v24 = 138543618;
      __int16 v25 = v13;
      __int16 v26 = 2112;
      uint64_t v27 = v14;
      uint64_t v15 = "%{public}@No resident for home: %@, skipping remote reachability";
      goto LABEL_11;
    }
LABEL_12:

    goto LABEL_13;
  }
  if (v4)
  {
    uint64_t v8 = [(HMDHome *)self accessories];
    int v9 = objc_msgSend(v8, "hmf_isEmpty");

    if (v9)
    {
      id v10 = (void *)MEMORY[0x230FBD990]();
      BOOL v11 = self;
      id v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        int v13 = HMFGetLogIdentifier();
        uint64_t v14 = [(HMDHome *)v11 name];
        int v24 = 138543618;
        __int16 v25 = v13;
        __int16 v26 = 2112;
        uint64_t v27 = v14;
        uint64_t v15 = "%{public}@No accessories in home: %@";
LABEL_11:
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v24, 0x16u);

        goto LABEL_12;
      }
      goto LABEL_12;
    }
  }
  id v16 = (void *)MEMORY[0x230FBD990]();
  uint32_t v17 = self;
  uint64_t v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = HMFGetLogIdentifier();
    uint64_t v20 = HMFEnabledStatusToString();
    int v24 = 138543874;
    __int16 v25 = v19;
    __int16 v26 = 2112;
    uint64_t v27 = v20;
    __int16 v28 = 2112;
    id v29 = v6;
    _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Remote accessory reachability notification: %@ clientIdentifier: %@", (uint8_t *)&v24, 0x20u);
  }
  int v21 = [(HMDHome *)v17 stagedRemoteReachabilityRegistration];
  uint64_t v22 = [MEMORY[0x263F42508] BOOLeanWithBool:v4];
  [v21 stageValue:v22];

  __int16 v23 = [MEMORY[0x263F425F8] sharedPowerLogger];
  [v23 reportRemoteReachabilityRegistrationEvent:v4 clientIdentifier:v6];

LABEL_13:
}

- (BOOL)currentRemoteReachabilityRegistration
{
  id v2 = [(HMDHome *)self stagedRemoteReachabilityRegistration];
  unint64_t v3 = [v2 value];

  LOBYTE(v2) = [v3 BOOLValue];
  return (char)v2;
}

- (id)_discoveredAccessoriesForServer:(id)a3
{
  id v4 = a3;
  id v5 = [v4 identifier];
  uint64_t v6 = [v4 linkType];

  BOOL v7 = [(HMDHome *)self _discoveredAccessoriesForServer:v5 linkType:v6];

  return v7;
}

- (id)_discoveredAccessoriesForServer:(id)a3 linkType:(int64_t)a4
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v6 = a3;
  BOOL v7 = [MEMORY[0x263EFF980] array];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v8 = [(HMDHome *)self discoveredAccessories];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v8);
        }
        int v13 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        int64_t v15 = a4;
        if ([v13 matchesHAPAccessoryWithServerIdentifier:v6 linkType:&v15]) {
          [v7 addObject:v13];
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v10);
  }

  return v7;
}

- (id)_primaryAccessoryForServer:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v4 = a3;
  [(HMDHome *)self hapAccessoriesForServer:v4];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v6 = (id)[v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if ([v9 isPrimary])
        {
          uint64_t v13 = 0;
          uint64_t v10 = [v4 identifier];
          char v11 = [v9 matchesHAPAccessoryWithServerIdentifier:v10 linkType:&v13];

          if (v11)
          {
            id v6 = v9;
            goto LABEL_12;
          }
        }
      }
      id v6 = (id)[v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  return v6;
}

- (id)hapAccessoriesForServer:(id)a3
{
  id v4 = a3;
  id v5 = [v4 identifier];
  uint64_t v6 = [v4 linkType];

  uint64_t v7 = [(HMDHome *)self hapAccessoriesForServer:v5 linkType:v6];

  return v7;
}

- (id)hapAccessoriesForServer:(id)a3 linkType:(int64_t)a4
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v6 = a3;
  uint64_t v7 = [(HMDHome *)self accessories];
  uint64_t v8 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v7, "count"));
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v9 = v7;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v20 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(id *)(*((void *)&v19 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v15 = v14;
        }
        else {
          long long v15 = 0;
        }
        id v16 = v15;

        if (v16)
        {
          int64_t v18 = a4;
          if ([v16 matchesHAPAccessoryWithServerIdentifier:v6 linkType:&v18]) {
            [v8 addObject:v16];
          }
        }
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v11);
  }

  return v8;
}

- (void)readProfileState:(id)a3 viaDevice:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __38__HMDHome_readProfileState_viaDevice___block_invoke;
  block[3] = &unk_264A2F2F8;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

void __38__HMDHome_readProfileState_viaDevice___block_invoke(void **a1)
{
}

- (void)_readProfileState:(void *)a3 viaDevice:
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v17 = a2;
  id v16 = a3;
  if (a1)
  {
    id v5 = (void *)MEMORY[0x263EFF980];
    uint64_t v6 = [v17 count];
    id v7 = +[HMDMediaSession mediaPropertyMessageKeys];
    uint64_t v8 = objc_msgSend(v5, "arrayWithCapacity:", objc_msgSend(v7, "count") * v6);

    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    obuint64_t j = v17;
    uint64_t v9 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v24;
      uint64_t v11 = MEMORY[0x263EF8330];
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v24 != v10) {
            objc_enumerationMutation(obj);
          }
          uint64_t v13 = *(void *)(*((void *)&v23 + 1) + 8 * i);
          id v14 = +[HMDMediaSession mediaPropertyMessageKeys];
          v22[0] = v11;
          v22[1] = 3221225472;
          v22[2] = __39__HMDHome__readProfileState_viaDevice___block_invoke;
          void v22[3] = &unk_264A2C320;
          void v22[4] = v13;
          long long v15 = objc_msgSend(v14, "na_map:", v22);

          [v8 addObjectsFromArray:v15];
        }
        uint64_t v9 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v9);
    }

    objc_initWeak(&location, a1);
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    void v19[2] = __39__HMDHome__readProfileState_viaDevice___block_invoke_2;
    v19[3] = &unk_264A2E9A8;
    objc_copyWeak(&v20, &location);
    [a1 redispatchMediaReadRequests:v8 viaDevice:v16 completion:v19];
    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);
  }
}

HMDMediaPropertyRequest *__39__HMDHome__readProfileState_viaDevice___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[HMDMediaPropertyRequest requestWithProperty:a2 mediaProfile:*(void *)(a1 + 32)];
}

void __39__HMDHome__readProfileState_viaDevice___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = [WeakRetained workQueue];
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    void v7[2] = __39__HMDHome__readProfileState_viaDevice___block_invoke_3;
    v7[3] = &unk_264A2F820;
    id v8 = v3;
    uint64_t v9 = v5;
    dispatch_async(v6, v7);
  }
}

void __39__HMDHome__readProfileState_viaDevice___block_invoke_3(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v162 = *MEMORY[0x263EF8340];
  id v2 = objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  long long v132 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v135 = 0u;
  obuint64_t j = *(id *)(v1 + 32);
  uint64_t v105 = v1;
  uint64_t v109 = [obj countByEnumeratingWithState:&v132 objects:v161 count:16];
  id v110 = v2;
  if (v109)
  {
    uint64_t v108 = *(void *)v133;
    uint64_t v127 = *MEMORY[0x263F0D180];
    uint64_t v124 = *MEMORY[0x263F0D1A8];
    uint64_t v122 = *MEMORY[0x263F0D200];
    uint64_t v120 = *MEMORY[0x263F0D1D0];
    uint64_t v118 = *MEMORY[0x263F0D220];
    uint64_t v116 = *MEMORY[0x263F0D190];
    uint64_t v114 = *MEMORY[0x263F0D210];
    *(void *)&long long v3 = 138544130;
    long long v103 = v3;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v133 != v108) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v132 + 1) + 8 * v4);
        long long v128 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        long long v131 = 0u;
        id v6 = v5;
        id v7 = (void *)[v6 countByEnumeratingWithState:&v128 objects:v160 count:16];
        uint64_t v111 = v4;
        if (!v7)
        {

          uint64_t v9 = 0;
          id v123 = 0;
          uint64_t v121 = 0;
          uint64_t v119 = 0;
          uint64_t v117 = 0;
          long long v115 = 0;
LABEL_61:
          long long v34 = objc_msgSend(v9, "mediaSession", v103);
          uint64_t v40 = [v34 state];
          id v8 = 0;
          goto LABEL_62;
        }
        long long v115 = 0;
        uint64_t v117 = 0;
        uint64_t v119 = 0;
        uint64_t v121 = 0;
        id v123 = 0;
        uint64_t v125 = 0;
        id v8 = 0;
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)v129;
        do
        {
          for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v129 != v10) {
              objc_enumerationMutation(v6);
            }
            id v12 = *(void **)(*((void *)&v128 + 1) + 8 * i);
            uint64_t v13 = objc_msgSend(v12, "error", v103);

            if (!v13)
            {
              id v14 = [v12 request];
              uint64_t v15 = [v14 mediaProfile];

              id v16 = [v14 property];
              int v17 = [v16 isEqual:v127];

              if (v17)
              {
                int64_t v18 = [v12 value];
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  long long v19 = v18;
                }
                else {
                  long long v19 = 0;
                }
                id v20 = v8;
                id v8 = v19;
                goto LABEL_47;
              }
              long long v21 = [v14 property];
              int v22 = [v21 isEqual:v124];

              if (v22)
              {
                int64_t v18 = [v12 value];
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  long long v19 = v18;
                }
                else {
                  long long v19 = 0;
                }
                id v20 = v125;
                uint64_t v125 = v19;
                goto LABEL_47;
              }
              long long v23 = [v14 property];
              int v24 = [v23 isEqual:v122];

              if (v24)
              {
                int64_t v18 = [v12 value];
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  long long v19 = v18;
                }
                else {
                  long long v19 = 0;
                }
                id v20 = v123;
                id v123 = v19;
                goto LABEL_47;
              }
              long long v25 = [v14 property];
              int v26 = [v25 isEqual:v120];

              if (v26)
              {
                int64_t v18 = [v12 value];
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  long long v19 = v18;
                }
                else {
                  long long v19 = 0;
                }
                id v20 = v121;
                uint64_t v121 = v19;
                goto LABEL_47;
              }
              uint64_t v27 = [v14 property];
              int v28 = [v27 isEqual:v118];

              if (v28)
              {
                int64_t v18 = [v12 value];
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  long long v19 = v18;
                }
                else {
                  long long v19 = 0;
                }
                id v20 = v119;
                uint64_t v119 = v19;
                goto LABEL_47;
              }
              id v29 = [v14 property];
              int v30 = [v29 isEqual:v116];

              if (v30)
              {
                int64_t v18 = [v12 value];
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  long long v19 = v18;
                }
                else {
                  long long v19 = 0;
                }
                id v20 = v117;
                uint64_t v117 = v19;
                goto LABEL_47;
              }
              __int16 v31 = [v14 property];
              int v32 = [v31 isEqual:v114];

              if (v32)
              {
                int64_t v18 = [v12 value];
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  long long v19 = v18;
                }
                else {
                  long long v19 = 0;
                }
                id v20 = v115;
                long long v115 = v19;
LABEL_47:
                id v33 = v19;
              }
              uint64_t v9 = (void *)v15;
              continue;
            }
          }
          id v7 = (void *)[v6 countByEnumeratingWithState:&v128 objects:v160 count:16];
        }
        while (v7);

        id v2 = v110;
        if (!v8)
        {
          uint64_t v1 = v105;
          id v7 = v125;
          goto LABEL_61;
        }
        long long v34 = [v9 accessory];
        int v35 = [v9 uniqueIdentifier];
        uint64_t v36 = [v35 UUIDString];
        int v37 = [v8 isEqualToString:v36];

        uint64_t v1 = v105;
        id v7 = v125;
        if (v37)
        {
          uint64_t v38 = [v34 identifier];

          id v8 = (void *)v38;
        }
        int v39 = [v34 home];
        uint64_t v40 = [v39 mediaSessionStateWithIdentifier:v8];
        if (!v40)
        {
          id v41 = (void *)MEMORY[0x230FBD990]();
          id v42 = *(id *)(v105 + 40);
          uint64_t v43 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            long long v44 = v112 = v41;
            long long v45 = [v34 identifier];
            uint64_t v46 = *(void *)(v105 + 32);
            *(_DWORD *)buf = v103;
            uint64_t v153 = v44;
            __int16 v154 = 2112;
            uint64_t v155 = (uint64_t)v8;
            __int16 v156 = 2112;
            __int16 v157 = v45;
            __int16 v158 = 2112;
            uint64_t v159 = v46;
            _os_log_impl(&dword_22F52A000, v43, OS_LOG_TYPE_INFO, "%{public}@Creating a media session state for a remote session (sessionIdentifier %@; accessoryIdentifier %"
              "@) update - responses %@",
              buf,
              0x2Au);

            id v41 = v112;
          }

          uint64_t v40 = [[HMDMediaSessionState alloc] initWithSessionIdentifier:v8];
          [v39 addMediaSessionState:v40];
          id v7 = v125;
        }

LABEL_62:
        long long v47 = [v9 accessory];
        long long v48 = [v47 uuid];
        long long v49 = [v48 UUIDString];

        if (v49 && v40)
        {
          id v106 = v47;
          long long v50 = (void *)MEMORY[0x263EFF9A0];
          uint64_t v51 = objc_msgSend(v2, "hmf_dictionaryForKey:", v49);
          id v52 = [v50 dictionaryWithDictionary:v51];

          BOOL v53 = v7 != 0;
          uint64_t v126 = v7;
          uint64_t v113 = v52;
          uint64_t v107 = v49;
          if (v7)
          {
            uint64_t v54 = [v7 unsignedIntegerValue];
            uint64_t v55 = (void *)MEMORY[0x230FBD990]([(HMDMediaSessionState *)v40 setPlaybackState:v54]);
            id v56 = *(id *)(v1 + 40);
            uint64_t v57 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              uint64_t v58 = v1;
              int v60 = v59 = v40;
              *(_DWORD *)buf = 138543618;
              uint64_t v153 = v60;
              __int16 v154 = 2048;
              uint64_t v155 = v54;
              _os_log_impl(&dword_22F52A000, v57, OS_LOG_TYPE_INFO, "%{public}@Read the profile playback state as %tu", buf, 0x16u);

              uint64_t v40 = v59;
              uint64_t v1 = v58;
            }

            id v7 = v126;
            uint64_t v150 = v124;
            __int16 v151 = v126;
            uint64_t v61 = [NSDictionary dictionaryWithObjects:&v151 forKeys:&v150 count:1];
            id v52 = v113;
            [v113 addEntriesFromDictionary:v61];
          }
          if (v123)
          {
            uint64_t v62 = [v123 unsignedIntegerValue];
            id v63 = v40;
            char v64 = (void *)MEMORY[0x230FBD990]([(HMDMediaSessionState *)v40 setShuffleState:v62]);
            id v65 = *(id *)(v1 + 40);
            long long v66 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
            {
              id v67 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              uint64_t v153 = v67;
              __int16 v154 = 2048;
              uint64_t v155 = v62;
              _os_log_impl(&dword_22F52A000, v66, OS_LOG_TYPE_INFO, "%{public}@Read the profile shuffle state as %tu", buf, 0x16u);
            }
            uint64_t v148 = v122;
            long long v149 = v123;
            BOOL v53 = 1;
            uint64_t v68 = [NSDictionary dictionaryWithObjects:&v149 forKeys:&v148 count:1];
            id v52 = v113;
            [v113 addEntriesFromDictionary:v68];

            id v7 = v126;
          }
          else
          {
            id v63 = v40;
          }
          if (v121)
          {
            uint64_t v69 = [v121 unsignedIntegerValue];
            id v70 = (void *)MEMORY[0x230FBD990]([(HMDMediaSessionState *)v63 setRepeatState:v69]);
            id v71 = *(id *)(v1 + 40);
            long long v72 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
            {
              long long v73 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              uint64_t v153 = v73;
              __int16 v154 = 2048;
              uint64_t v155 = v69;
              _os_log_impl(&dword_22F52A000, v72, OS_LOG_TYPE_INFO, "%{public}@Read the profile repeat state as %tu", buf, 0x16u);
            }
            uint64_t v146 = v120;
            long long v147 = v121;
            BOOL v53 = 1;
            long long v74 = [NSDictionary dictionaryWithObjects:&v147 forKeys:&v146 count:1];
            id v52 = v113;
            [v113 addEntriesFromDictionary:v74];

            id v7 = v126;
          }
          if (v119)
          {
            id v75 = (void *)MEMORY[0x230FBD990]([(HMDMediaSessionState *)v63 setVolume:v119]);
            id v76 = *(id *)(v1 + 40);
            __int16 v77 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
            {
              id v78 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              uint64_t v153 = v78;
              __int16 v154 = 2112;
              uint64_t v155 = (uint64_t)v119;
              _os_log_impl(&dword_22F52A000, v77, OS_LOG_TYPE_INFO, "%{public}@Read the profile volume as %@", buf, 0x16u);
            }
            uint64_t v144 = v118;
            long long v145 = v119;
            BOOL v53 = 1;
            __int16 v79 = [NSDictionary dictionaryWithObjects:&v145 forKeys:&v144 count:1];
            id v52 = v113;
            [v113 addEntriesFromDictionary:v79];
          }
          if (v117)
          {
            unsigned __int8 v80 = (void *)MEMORY[0x230FBD990]([(HMDMediaSessionState *)v63 setMediaUniqueIdentifier:v117]);
            id v81 = *(id *)(v1 + 40);
            uint64_t v82 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
            {
              __int16 v83 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              uint64_t v153 = v83;
              __int16 v154 = 2112;
              uint64_t v155 = (uint64_t)v117;
              _os_log_impl(&dword_22F52A000, v82, OS_LOG_TYPE_INFO, "%{public}@Read the profile mediaUniqueIdentifier state as %@", buf, 0x16u);
            }
            uint64_t v142 = v116;
            uint64_t v143 = v117;
            uint64_t v84 = [NSDictionary dictionaryWithObjects:&v143 forKeys:&v142 count:1];
            id v52 = v113;
            [v113 addEntriesFromDictionary:v84];

            uint64_t v40 = v63;
            long long v49 = v107;
            if (!v115)
            {
LABEL_90:
              [v110 setObject:v52 forKey:v49];
              goto LABEL_91;
            }
LABEL_87:
            uint64_t v85 = [v115 unsignedIntegerValue];
            __int16 v86 = (void *)MEMORY[0x230FBD990]([(HMDMediaSessionState *)v40 setSleepWakeState:v85]);
            id v87 = *(id *)(v1 + 40);
            id v88 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v90 = __int16 v89 = v40;
              *(_DWORD *)buf = 138543618;
              uint64_t v153 = v90;
              __int16 v154 = 2048;
              uint64_t v155 = v85;
              _os_log_impl(&dword_22F52A000, v88, OS_LOG_TYPE_INFO, "%{public}@Read the profile sleepWakeState as %tu", buf, 0x16u);

              uint64_t v40 = v89;
            }

            uint64_t v140 = v114;
            long long v141 = v115;
            uint64_t v91 = [NSDictionary dictionaryWithObjects:&v141 forKeys:&v140 count:1];
            id v52 = v113;
            [v113 addEntriesFromDictionary:v91];

            id v7 = v126;
            goto LABEL_90;
          }
          uint64_t v40 = v63;
          long long v49 = v107;
          if (v115) {
            goto LABEL_87;
          }
          if (v53) {
            goto LABEL_90;
          }
LABEL_91:

          id v2 = v110;
          long long v47 = v106;
        }

        uint64_t v4 = v111 + 1;
      }
      while (v111 + 1 != v109);
      uint64_t v92 = [obj countByEnumeratingWithState:&v132 objects:v161 count:16];
      uint64_t v109 = v92;
    }
    while (v92);
  }

  if ([v2 count])
  {
    id v93 = [*(id *)(v1 + 40) uuid];
    __int16 v94 = [v93 UUIDString];
    uint64_t v138 = v94;
    long long v136 = @"kAccessoriesListKey";
    id v95 = (void *)[v110 copy];
    long long v137 = v95;
    id v96 = [NSDictionary dictionaryWithObjects:&v137 forKeys:&v136 count:1];
    long long v139 = v96;
    uint64_t v97 = [NSDictionary dictionaryWithObjects:&v139 forKeys:&v138 count:1];

    id v98 = [MEMORY[0x263F42590] entitledMessageWithName:*MEMORY[0x263F0CC08] messagePayload:v97];
    id v99 = [[HMDHomeManagerXPCMessageSendPolicy alloc] initWithEntitlements:0 options:-1 active:1];
    [v98 setSendPolicy:v99];

    id v100 = [*(id *)(v105 + 40) msgDispatcher];
    long long v101 = [*(id *)(v105 + 40) homeManager];
    uint64_t v102 = [v101 uuid];
    [v100 sendMessage:v98 target:v102];

    uint64_t v1 = v105;
    id v2 = v110;
  }
  -[HMDHome updateMediaStateWithResponses:requestMessageInformation:](*(void *)(v1 + 40), *(void **)(v1 + 32), 0);
}

- (void)_getRunTimeStateUpdateWithOptions:(unint64_t)a3 includeMediaAccessorySessionState:(BOOL)a4 includeResidentDeviceState:(BOOL)a5 completion:(id)a6
{
  BOOL v6 = a5;
  BOOL v88 = a4;
  unsigned int v7 = a3;
  uint64_t v106 = *MEMORY[0x263EF8340];
  id v9 = a6;
  uint64_t v10 = v9;
  if (v9)
  {
    BOOL v69 = v6;
    id v71 = (void (**)(void, void *))v9;
    uint64_t v11 = [(HMDHome *)self accessories];
    __int16 v83 = objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(v11, "count"));
    id v70 = [MEMORY[0x263F08968] strongToStrongObjectsMapTable];
    long long v72 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v11, "count"));
    long long v97 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    obuint64_t j = v11;
    __int16 v79 = self;
    uint64_t v87 = [obj countByEnumeratingWithState:&v97 objects:v105 count:16];
    if (v87)
    {
      uint64_t v86 = v7 & 0x201;
      uint64_t v85 = v7 & 0x50;
      uint64_t v84 = *(void *)v98;
      uint64_t v78 = *MEMORY[0x263F0D1A8];
      uint64_t v77 = *MEMORY[0x263F0D200];
      uint64_t v76 = *MEMORY[0x263F0D1D0];
      uint64_t v75 = *MEMORY[0x263F0D220];
      uint64_t v74 = *MEMORY[0x263F0D190];
      uint64_t v73 = *MEMORY[0x263F0D210];
      unsigned int v82 = v7;
      do
      {
        for (uint64_t i = 0; i != v87; ++i)
        {
          if (*(void *)v98 != v84) {
            objc_enumerationMutation(obj);
          }
          id v13 = *(id *)(*((void *)&v97 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v14 = v13;
          }
          else {
            id v14 = 0;
          }
          id v15 = v14;

          id v16 = v15;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            int v17 = v16;
          }
          else {
            int v17 = 0;
          }
          id v18 = v17;

          id v19 = v16;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v20 = v19;
          }
          else {
            id v20 = 0;
          }
          id v21 = v20;

          id v22 = v13;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            long long v23 = v22;
          }
          else {
            long long v23 = 0;
          }
          id v24 = v23;

          if (v19) {
            BOOL v25 = v88;
          }
          else {
            BOOL v25 = 0;
          }
          if (v85) {
            BOOL v26 = v21 == 0;
          }
          else {
            BOOL v26 = 1;
          }
          char v27 = !v26;
          if (v86) {
            BOOL v28 = v24 == 0;
          }
          else {
            BOOL v28 = 1;
          }
          char v29 = !v28;
          if (v25
            || (v27 & 1) != 0
            || ((v18 != 0) & (v7 >> 8)) != 0
            || (v29 & 1) != 0
            || (v7 & 0x400) != 0 && [v24 hasTelevisionService])
          {
            int v30 = [v22 runtimeState];
            __int16 v31 = (void *)[v30 mutableCopy];

            if (v19 && v88)
            {
              int v32 = [v19 mediaProfile];
              id v33 = v32;
              if (v32)
              {
                unsigned __int8 v80 = [v32 mediaSession];
                long long v34 = [v80 state];
                if (v34
                  || ([v19 identifier],
                      int v35 = objc_claimAutoreleasedReturnValue(),
                      [(HMDHome *)v79 mediaSessionStateWithIdentifier:v35],
                      long long v34 = objc_claimAutoreleasedReturnValue(),
                      v35,
                      v34))
                {
                  uint64_t v36 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v34, "playbackState"));
                  [v31 setObject:v36 forKeyedSubscript:v78];

                  int v37 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v34, "shuffleState"));
                  [v31 setObject:v37 forKeyedSubscript:v77];

                  uint64_t v38 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v34, "repeatState"));
                  [v31 setObject:v38 forKeyedSubscript:v76];

                  int v39 = [v34 volume];
                  [v31 setObject:v39 forKeyedSubscript:v75];

                  uint64_t v40 = [v34 mediaUniqueIdentifier];
                  [v31 setObject:v40 forKeyedSubscript:v74];

                  id v41 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v34, "sleepWakeState"));
                  [v31 setObject:v41 forKeyedSubscript:v73];
                }
                self = v79;
              }
            }
            id v42 = (void *)[v31 copy];
            uint64_t v43 = [v22 uuid];
            long long v44 = [v43 UUIDString];
            [v83 setObject:v42 forKeyedSubscript:v44];

            unsigned int v7 = v82;
          }
        }
        uint64_t v87 = [obj countByEnumeratingWithState:&v97 objects:v105 count:16];
      }
      while (v87);
    }

    long long v103 = @"kAccessoriesListKey";
    long long v45 = (void *)[v83 copy];
    uint64_t v104 = v45;
    uint64_t v46 = [NSDictionary dictionaryWithObjects:&v104 forKeys:&v103 count:1];
    long long v47 = (void *)[v46 mutableCopy];

    uint64_t v10 = v71;
    if (v69)
    {
      long long v48 = [(HMDHome *)self residentDeviceManager];
      long long v49 = [v48 residentDevices];

      long long v50 = objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(v49, "count"));
      long long v93 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      id v51 = v49;
      uint64_t v52 = [v51 countByEnumeratingWithState:&v93 objects:v102 count:16];
      if (v52)
      {
        uint64_t v53 = v52;
        uint64_t v54 = *(void *)v94;
        do
        {
          for (uint64_t j = 0; j != v53; ++j)
          {
            if (*(void *)v94 != v54) {
              objc_enumerationMutation(v51);
            }
            id v56 = *(void **)(*((void *)&v93 + 1) + 8 * j);
            uint64_t v57 = [v56 identifier];
            uint64_t v58 = [v57 UUIDString];

            long long v59 = [v56 runtimeState];
            [v50 setObject:v59 forKey:v58];
          }
          uint64_t v53 = [v51 countByEnumeratingWithState:&v93 objects:v102 count:16];
        }
        while (v53);
      }

      int v60 = (void *)[v50 copy];
      [v47 setObject:v60 forKey:*MEMORY[0x263F0CDD8]];

      self = v79;
    }
    uint64_t v61 = (void *)[v47 copy];
    v71[2](v71, v61);

    if ([v72 count]) {
      -[HMDHome _readProfileState:viaDevice:](self, v72, 0);
    }
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    id v62 = v70;
    uint64_t v63 = [v62 countByEnumeratingWithState:&v89 objects:v101 count:16];
    if (v63)
    {
      uint64_t v64 = v63;
      uint64_t v65 = *(void *)v90;
      do
      {
        for (uint64_t k = 0; k != v64; ++k)
        {
          if (*(void *)v90 != v65) {
            objc_enumerationMutation(v62);
          }
          id v67 = *(void **)(*((void *)&v89 + 1) + 8 * k);
          uint64_t v68 = [v62 objectForKey:v67];
          if ([v68 count]) {
            -[HMDHome _readProfileState:viaDevice:](self, v68, v67);
          }
        }
        uint64_t v64 = [v62 countByEnumeratingWithState:&v89 objects:v101 count:16];
      }
      while (v64);
    }
  }
}

- (void)getRunTimeStateUpdateWithOptions:(unint64_t)a3 includeMediaAccessorySessionState:(BOOL)a4 includeResidentDeviceState:(BOOL)a5 completion:(id)a6
{
  id v10 = a6;
  uint64_t v11 = [(HMDHome *)self workQueue];
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  void v13[2] = __116__HMDHome_getRunTimeStateUpdateWithOptions_includeMediaAccessorySessionState_includeResidentDeviceState_completion___block_invoke;
  v13[3] = &unk_264A162C0;
  id v14 = v10;
  unint64_t v15 = a3;
  BOOL v16 = a4;
  BOOL v17 = a5;
  void v13[4] = self;
  id v12 = v10;
  dispatch_async(v11, v13);
}

uint64_t __116__HMDHome_getRunTimeStateUpdateWithOptions_includeMediaAccessorySessionState_includeResidentDeviceState_completion___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _getRunTimeStateUpdateWithOptions:*(void *)(a1 + 48) includeMediaAccessorySessionState:*(unsigned __int8 *)(a1 + 56) includeResidentDeviceState:*(unsigned __int8 *)(a1 + 57) completion:*(void *)(a1 + 40)];
}

- (id)performReadRequests:(id)a3 withRetries:(int64_t)a4 timeInterval:(double)a5 loggingObject:(id)a6
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v33 = a6;
  id v9 = [MEMORY[0x263EFF9A0] dictionary];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v10 = v8;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v42 objects:v46 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v43;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v43 != v13) {
          objc_enumerationMutation(v10);
        }
        unint64_t v15 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        BOOL v16 = [v15 characteristic];
        BOOL v17 = [v16 service];
        id v18 = [v17 accessory];
        id v19 = [v18 uuid];

        id v20 = [v9 objectForKeyedSubscript:v19];

        if (v20)
        {
          id v21 = [v9 objectForKeyedSubscript:v19];
          [v21 addObject:v15];
        }
        else
        {
          id v21 = [MEMORY[0x263EFF980] arrayWithObject:v15];
          [v9 setObject:v21 forKeyedSubscript:v19];
        }
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v42 objects:v46 count:16];
    }
    while (v12);
  }

  id v22 = [v9 allValues];
  v38[0] = MEMORY[0x263EF8330];
  v38[1] = 3221225472;
  void v38[2] = __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke;
  void v38[3] = &unk_264A16278;
  double v41 = a5;
  int64_t v40 = a4;
  void v38[4] = self;
  id v23 = v33;
  id v39 = v23;
  id v24 = objc_msgSend(v22, "na_map:", v38);

  BOOL v25 = (void *)MEMORY[0x263F58190];
  BOOL v26 = (void *)MEMORY[0x263F581B8];
  char v27 = [(HMDHome *)self workQueue];
  BOOL v28 = [v26 schedulerWithDispatchQueue:v27];
  char v29 = [v25 combineAllFutures:v24 ignoringErrors:1 scheduler:v28];
  v36[0] = MEMORY[0x263EF8330];
  v36[1] = 3221225472;
  void v36[2] = __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_903;
  void v36[3] = &unk_264A2D8B8;
  id v37 = v23;
  id v30 = v23;
  __int16 v31 = [v29 flatMap:v36];

  return v31;
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x263F58190];
  uint64_t v5 = *(void *)(a1 + 48);
  double v6 = *(double *)(a1 + 56);
  unsigned int v7 = [*(id *)(a1 + 32) workQueue];
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  void v13[2] = __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_2;
  v13[3] = &unk_264A16250;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v14 = v8;
  uint64_t v15 = v9;
  id v16 = v3;
  id v10 = v3;
  uint64_t v11 = [v4 futureWithRetries:v5 timeInterval:v7 workQueue:v13 block:v6];

  return v11;
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_903(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = objc_msgSend(v3, "na_map:", &__block_literal_global_906);
  if (objc_msgSend(v4, "hmf_isEmpty"))
  {
    uint64_t v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = *(id *)(a1 + 32);
    unsigned int v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      int v15 = 138543362;
      id v16 = v8;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@All read request retries failed.", (uint8_t *)&v15, 0xCu);
    }
    uint64_t v9 = (void *)MEMORY[0x263F58190];
    id v10 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    uint64_t v11 = [v9 futureWithError:v10];
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x263F58190];
    id v10 = [NSDictionary dictionaryByCombiningNonOverlappingDictionaries:v4];
    uint64_t v11 = [v12 futureWithResult:v10];
  }
  uint64_t v13 = (void *)v11;

  return v13;
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_2_904(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  return v4;
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    unsigned int v7 = HMFGetLogIdentifier();
    int v10 = 138543618;
    uint64_t v11 = v7;
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Performing characteristic read requests with remaining retries: %ld", (uint8_t *)&v10, 0x16u);
  }
  id v8 = [*(id *)(a1 + 40) performReadRequests:*(void *)(a1 + 48) loggingObject:*(void *)(a1 + 32)];
  return v8;
}

- (id)performWriteRequests:(id)a3 withRetries:(int64_t)a4 timeInterval:(double)a5 loggingObject:(id)a6
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v33 = a6;
  uint64_t v9 = [MEMORY[0x263EFF9A0] dictionary];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v10 = v8;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v42 objects:v46 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v43;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v43 != v13) {
          objc_enumerationMutation(v10);
        }
        int v15 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        id v16 = [v15 characteristic];
        uint64_t v17 = [v16 service];
        id v18 = [v17 accessory];
        id v19 = [v18 uuid];

        id v20 = [v9 objectForKeyedSubscript:v19];

        if (v20)
        {
          id v21 = [v9 objectForKeyedSubscript:v19];
          [v21 addObject:v15];
        }
        else
        {
          id v21 = [MEMORY[0x263EFF980] arrayWithObject:v15];
          [v9 setObject:v21 forKeyedSubscript:v19];
        }
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v42 objects:v46 count:16];
    }
    while (v12);
  }

  id v22 = [v9 allValues];
  v38[0] = MEMORY[0x263EF8330];
  v38[1] = 3221225472;
  void v38[2] = __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke;
  void v38[3] = &unk_264A16278;
  double v41 = a5;
  int64_t v40 = a4;
  void v38[4] = self;
  id v23 = v33;
  id v39 = v23;
  id v24 = objc_msgSend(v22, "na_map:", v38);

  BOOL v25 = (void *)MEMORY[0x263F58190];
  BOOL v26 = (void *)MEMORY[0x263F581B8];
  char v27 = [(HMDHome *)self workQueue];
  BOOL v28 = [v26 schedulerWithDispatchQueue:v27];
  char v29 = [v25 combineAllFutures:v24 ignoringErrors:1 scheduler:v28];
  v36[0] = MEMORY[0x263EF8330];
  v36[1] = 3221225472;
  void v36[2] = __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_897;
  void v36[3] = &unk_264A2D8B8;
  id v37 = v23;
  id v30 = v23;
  __int16 v31 = [v29 flatMap:v36];

  return v31;
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)MEMORY[0x263F58190];
  uint64_t v5 = *(void *)(a1 + 48);
  double v6 = *(double *)(a1 + 56);
  unsigned int v7 = [*(id *)(a1 + 32) workQueue];
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  void v13[2] = __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_2;
  v13[3] = &unk_264A16250;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v14 = v8;
  uint64_t v15 = v9;
  id v16 = v3;
  id v10 = v3;
  uint64_t v11 = [v4 futureWithRetries:v5 timeInterval:v7 workQueue:v13 block:v6];

  return v11;
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_897(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = objc_msgSend(v3, "na_map:", &__block_literal_global_901);
  if (objc_msgSend(v4, "hmf_isEmpty"))
  {
    uint64_t v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = *(id *)(a1 + 32);
    unsigned int v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      int v15 = 138543362;
      id v16 = v8;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@All write request retries failed.", (uint8_t *)&v15, 0xCu);
    }
    uint64_t v9 = (void *)MEMORY[0x263F58190];
    id v10 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    uint64_t v11 = [v9 futureWithError:v10];
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x263F58190];
    id v10 = [NSDictionary dictionaryByCombiningNonOverlappingDictionaries:v4];
    uint64_t v11 = [v12 futureWithResult:v10];
  }
  uint64_t v13 = (void *)v11;

  return v13;
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_2_898(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  return v4;
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    unsigned int v7 = HMFGetLogIdentifier();
    int v10 = 138543618;
    uint64_t v11 = v7;
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Performing characteristic write requests with remaining retries: %ld", (uint8_t *)&v10, 0x16u);
  }
  id v8 = [*(id *)(a1 + 40) performWriteRequests:*(void *)(a1 + 48) loggingObject:*(void *)(a1 + 32)];
  return v8;
}

- (id)performReadRequests:(id)a3 loggingObject:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc_init(MEMORY[0x263F58190]);
  uint64_t v9 = [(HMDHome *)self description];
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 3221225472;
  void v16[2] = __45__HMDHome_performReadRequests_loggingObject___block_invoke;
  v16[3] = &unk_264A2AEE8;
  id v17 = v7;
  id v10 = v8;
  id v18 = v10;
  id v19 = v6;
  id v11 = v6;
  id v12 = v7;
  [(HMDHome *)self readCharacteristicValues:v11 source:7 sourceForLogging:v9 qualityOfService:-1 withCompletionHandler:v16];

  uint64_t v13 = v19;
  id v14 = v10;

  return v14;
}

void __45__HMDHome_performReadRequests_loggingObject___block_invoke(id *a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = [a1[6] firstObject];
    id v8 = [v7 characteristic];

    id v20 = 0;
    uint64_t v9 = objc_msgSend(v6, "hmd_valueOfCharacteristic:error:", v8, &v20);
    id v10 = v20;
    if (v9)
    {
      [a1[5] finishWithResult:v6];
    }
    else
    {
      id v16 = (void *)MEMORY[0x230FBD990]();
      id v17 = a1[4];
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        id v19 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v22 = v19;
        __int16 v23 = 2112;
        id v24 = v10;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Failed to perform read requests with error: %@", buf, 0x16u);
      }
      [a1[5] finishWithError:v10];
    }
  }
  else
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = a1[4];
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v22 = v14;
      __int16 v23 = 2112;
      id v24 = v5;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to perform read requests (no response payload) with error: %@", buf, 0x16u);
    }
    id v15 = a1[5];
    id v8 = [MEMORY[0x263EFF9D0] null];
    [v15 finishWithResult:v8];
  }
}

- (id)performWriteRequests:(id)a3 loggingObject:(id)a4
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc_init(MEMORY[0x263F58190]);
  uint64_t v9 = [MEMORY[0x263F08C38] UUID];
  id v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = HMFGetLogIdentifier();
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    if (v9) {
      [v9 getUUIDBytes:buf];
    }
    else {
      *(_OWORD *)buf = *MEMORY[0x263F42690];
    }
    long long v25 = *(_OWORD *)buf;
    uint64_t v14 = [v6 count];
    *(_DWORD *)buf = 138544386;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 1042;
    *(_DWORD *)&buf[14] = 16;
    __int16 v27 = 2098;
    BOOL v28 = &v25;
    __int16 v29 = 2114;
    id v30 = v11;
    __int16 v31 = 2048;
    uint64_t v32 = v14;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Executing write requests for request identifier: %{public,uuid_t}.16P from home: %{public}@ count: %lu for perform write requests", buf, 0x30u);
  }
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 3221225472;
  v21[2] = __46__HMDHome_performWriteRequests_loggingObject___block_invoke;
  v21[3] = &unk_264A2AEE8;
  id v22 = v7;
  id v15 = v8;
  id v23 = v15;
  id v24 = v6;
  id v16 = v6;
  id v17 = v7;
  [(HMDHome *)v11 writeCharacteristicValues:v16 source:7 identifier:v9 transport:0 qualityOfService:-1 withCompletionHandler:v21];
  id v18 = v24;
  id v19 = v15;

  return v19;
}

void __46__HMDHome_performWriteRequests_loggingObject___block_invoke(id *a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = [a1[6] firstObject];
    id v8 = [v7 characteristic];

    id v20 = 0;
    uint64_t v9 = objc_msgSend(v6, "hmd_valueOfCharacteristic:error:", v8, &v20);
    id v10 = v20;
    if (v9)
    {
      [a1[5] finishWithResult:v6];
    }
    else
    {
      id v16 = (void *)MEMORY[0x230FBD990]();
      id v17 = a1[4];
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        id v19 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v22 = v19;
        __int16 v23 = 2112;
        id v24 = v10;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Failed to perform write requests with error: %@", buf, 0x16u);
      }
      [a1[5] finishWithError:v10];
    }
  }
  else
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = a1[4];
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v22 = v14;
      __int16 v23 = 2112;
      id v24 = v5;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to perform write requests (no response payload) with error: %@", buf, 0x16u);
    }
    id v15 = a1[5];
    id v8 = [MEMORY[0x263EFF9D0] null];
    [v15 finishWithResult:v8];
  }
}

- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 identifier:(id)a5 transport:(id)a6 qualityOfService:(int64_t)a7 withCompletionHandler:(id)a8
{
  id v15 = a3;
  id v16 = a5;
  id v17 = a6;
  id v18 = a8;
  id v19 = objc_alloc(MEMORY[0x263F424F0]);
  id v20 = NSString;
  id v21 = MEMORY[0x230FBBCF0](self, a2);
  id v22 = [v20 stringWithFormat:@"%@, %s:%ld", v21, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 7208];
  id v37 = (id)[v19 initWithName:v22];

  __int16 v23 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __104__HMDHome_writeCharacteristicValues_source_identifier_transport_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_264A16228;
  unint64_t v35 = a4;
  int64_t v36 = a7;
  id v29 = v37;
  id v30 = v16;
  id v31 = v17;
  uint64_t v32 = self;
  id v33 = v15;
  id v34 = v18;
  id v24 = v18;
  id v25 = v15;
  id v26 = v17;
  id v27 = v16;
  dispatch_async(v23, block);

  __HMFActivityScopeLeave();
}

void __104__HMDHome_writeCharacteristicValues_source_identifier_transport_qualityOfService_withCompletionHandler___block_invoke(uint64_t a1)
{
  void v24[2] = *MEMORY[0x263EF8340];
  v23[0] = @"sourceType";
  id v2 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 80)];
  v23[1] = @"kMultiPartResponseKey";
  v24[0] = v2;
  v24[1] = MEMORY[0x263EFFA80];
  id v3 = [NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:2];

  id v4 = objc_alloc(MEMORY[0x263F42590]);
  uint64_t v5 = *(void *)(a1 + 88);
  id v6 = [MEMORY[0x263F42570] allMessageDestinations];
  id v7 = (void *)[v4 initWithName:@"kMultipleCharacteristicWriteRequestKey" qualityOfService:v5 destination:v6 payload:v3];

  [v7 setIdentifier:*(void *)(a1 + 40)];
  id v8 = (void *)MEMORY[0x230FBD990]([v7 setTransport:*(void *)(a1 + 48)]);
  id v9 = *(id *)(a1 + 56);
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    id v12 = [v7 identifier];

    if (v12)
    {
      uint64_t v13 = [v7 identifier];
      [v13 getUUIDBytes:buf];
    }
    else
    {
      *(_OWORD *)buf = *MEMORY[0x263F42690];
    }
    long long v17 = *(_OWORD *)buf;
    unint64_t v14 = *(void *)(a1 + 80);
    if (v14 > 9) {
      id v15 = @"Unknown";
    }
    else {
      id v15 = off_264A1BC48[v14];
    }
    id v16 = v15;
    *(_DWORD *)buf = 138544130;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&unsigned char buf[12] = 1042;
    *(_DWORD *)&buf[14] = 16;
    __int16 v19 = 2098;
    id v20 = &v17;
    __int16 v21 = 2114;
    id v22 = v16;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Issuing write requests with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);
  }
  [*(id *)(a1 + 56) _writeCharacteristicValues:*(void *)(a1 + 64) requestMessage:v7 source:*(void *)(a1 + 80) withCompletionHandler:*(void *)(a1 + 72)];
}

- (void)regionStateUpdated
{
  id v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __29__HMDHome_regionStateUpdated__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __29__HMDHome_regionStateUpdated__block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) homeLocationHandler];
  uint64_t v3 = [v2 regionStateAtHome];

  if (v3 == 1)
  {
    id v4 = [*(id *)(a1 + 32) presenceFeeder];
    [v4 notifyDidEnterHomeRegion];
  }
  else
  {
    if (v3 != 2) {
      goto LABEL_6;
    }
    id v4 = [*(id *)(a1 + 32) presenceFeeder];
    [v4 notifyDidLeaveHomeRegion];
  }

LABEL_6:
  uint64_t v5 = *(void **)(a1 + 32);
  return [v5 _updateHomeLocation];
}

- (void)suspendedStateChangedForAccessory:(id)a3 suspendedState:(unint64_t)a4
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v6 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }
  id v8 = v7;

  if (v8)
  {
    if (a4 == 2)
    {
      id v9 = (void *)MEMORY[0x230FBD990]();
      id v10 = self;
      id v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        id v12 = HMFGetLogIdentifier();
        uint64_t v13 = HAPAccessorySuspendedStateDescription();
        *(_DWORD *)buf = 138543874;
        id v20 = v12;
        __int16 v21 = 2112;
        id v22 = v13;
        __int16 v23 = 2112;
        id v24 = v6;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_DEBUG, "%{public}@Skipping suspended state update: '%@' for accessory %@", buf, 0x20u);
      }
    }
    else
    {
      unint64_t v14 = [(HMDHome *)self workQueue];
      v15[0] = MEMORY[0x263EF8330];
      v15[1] = 3221225472;
      v15[2] = __60__HMDHome_suspendedStateChangedForAccessory_suspendedState___block_invoke;
      v15[3] = &unk_264A2AA20;
      void v15[4] = self;
      unint64_t v18 = a4;
      id v16 = v8;
      id v17 = v6;
      dispatch_async(v14, v15);
    }
  }
}

uint64_t __60__HMDHome_suspendedStateChangedForAccessory_suspendedState___block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) reachabilityRegisteredDevices];
  uint64_t v3 = [v2 count];

  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      id v9 = HAPAccessorySuspendedStateDescription();
      uint64_t v10 = *(void *)(a1 + 40);
      int v15 = 138543874;
      id v16 = v8;
      __int16 v17 = 2112;
      unint64_t v18 = v9;
      __int16 v19 = 2112;
      uint64_t v20 = v10;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Notify registered devices of suspended state change to '%@' for accessory: %@", (uint8_t *)&v15, 0x20u);
    }
    [*(id *)(a1 + 32) _updateReachabilityChangeToRegisteredDevices:*(void *)(a1 + 48)];
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id v11 = HMFGetLogIdentifier();
      id v12 = HAPAccessorySuspendedStateDescription();
      uint64_t v13 = *(void *)(a1 + 48);
      int v15 = 138543874;
      id v16 = v11;
      __int16 v17 = 2112;
      unint64_t v18 = v12;
      __int16 v19 = 2112;
      uint64_t v20 = v13;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEBUG, "%{public}@No registered devices to send the suspended state change '%@' for accessory %@", (uint8_t *)&v15, 0x20u);
    }
  }
  return [*(id *)(a1 + 32) notifyClientsOfReachabilityUpdateForAccessory:*(void *)(a1 + 48)];
}

- (void)reachabilityChangedForAccessory:(id)a3 reachable:(BOOL)a4
{
  id v6 = a3;
  if (v6)
  {
    id v7 = [(HMDHome *)self workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __53__HMDHome_reachabilityChangedForAccessory_reachable___block_invoke;
    block[3] = &unk_264A2DFC8;
    id v9 = v6;
    uint64_t v10 = self;
    BOOL v11 = a4;
    dispatch_async(v7, block);
  }
}

void __53__HMDHome_reachabilityChangedForAccessory_reachable___block_invoke(uint64_t a1)
{
  v21[1] = *MEMORY[0x263EF8340];
  id v2 = *(id *)(a1 + 32);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = v3;

  if (v4)
  {
    id v5 = *(void **)(a1 + 40);
    v21[0] = v4;
    id v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:v21 count:1];
    [v5 _updateWoWState:v6];
  }
  [*(id *)(a1 + 40) _reachabilityChangedForAccessory:*(void *)(a1 + 32) reachable:*(unsigned __int8 *)(a1 + 48)];
  id v7 = [*(id *)(a1 + 40) reachabilityRegisteredDevices];
  uint64_t v8 = [v7 count];

  id v9 = (void *)MEMORY[0x230FBD990]();
  id v10 = *(id *)(a1 + 40);
  BOOL v11 = HMFGetOSLogHandle();
  id v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      uint64_t v14 = *(void *)(a1 + 32);
      int v17 = 138543618;
      unint64_t v18 = v13;
      __int16 v19 = 2112;
      uint64_t v20 = v14;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Notify registered devices of reachability change for accessory: %@", (uint8_t *)&v17, 0x16u);
    }
    [*(id *)(a1 + 40) _updateReachabilityChangeToRegisteredDevices:*(void *)(a1 + 32)];
  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v15 = HMFGetLogIdentifier();
      uint64_t v16 = *(void *)(a1 + 32);
      int v17 = 138543618;
      unint64_t v18 = v15;
      __int16 v19 = 2112;
      uint64_t v20 = v16;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_DEBUG, "%{public}@No registered devices available to notify reachability change update for accessory: %@", (uint8_t *)&v17, 0x16u);
    }
  }
}

- (id)replaceActionSetName:(id)a3 withNewName:(id)a4
{
  v14[1] = *MEMORY[0x263EF8340];
  id v6 = a4;
  id v7 = a3;
  uint64_t v8 = [(HMDHome *)self homeManager];
  id v9 = [v8 nameValidator];
  id v10 = [(HMDHome *)self uuid];
  v14[0] = v10;
  BOOL v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:v14 count:1];
  id v12 = [v9 replaceActionSetName:v7 withNewName:v6 inNamespaces:v11];

  return v12;
}

- (id)replaceName:(id)a3 withNewName:(id)a4
{
  v14[1] = *MEMORY[0x263EF8340];
  id v6 = a4;
  id v7 = a3;
  uint64_t v8 = [(HMDHome *)self homeManager];
  id v9 = [v8 nameValidator];
  id v10 = [(HMDHome *)self uuid];
  v14[0] = v10;
  BOOL v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:v14 count:1];
  id v12 = [v9 replaceName:v7 withNewName:v6 inNamespaces:v11];

  return v12;
}

- (id)removeName:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  id v6 = [v5 nameValidator];
  id v7 = [(HMDHome *)self uuid];
  uint64_t v8 = [v6 removeName:v4 namespace:v7];

  return v8;
}

- (id)addActionSetName:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  id v6 = [v5 nameValidator];
  id v7 = [(HMDHome *)self uuid];
  uint64_t v8 = [v6 addActionSetName:v4 namespace:v7];

  return v8;
}

- (id)addName:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  id v6 = [v5 nameValidator];
  id v7 = [(HMDHome *)self uuid];
  uint64_t v8 = [v6 addName:v4 namespace:v7];

  return v8;
}

- (id)validateName:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self homeManager];
  id v6 = [v5 nameValidator];
  id v7 = [v6 validateName:v4];

  return v7;
}

- (void)removeAllHomeContentsAndAccessoryPairings:(BOOL)a3 queue:(id)a4 completionHandler:(id)a5
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v8 = a4;
  id v9 = a5;
  id v10 = (void *)MEMORY[0x230FBD990]();
  BOOL v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v22 = v13;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Removed all home content and accessory pairings", buf, 0xCu);
  }
  uint64_t v14 = [(HMDHome *)v11 workQueue];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  void v17[2] = __77__HMDHome_removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke;
  v17[3] = &unk_264A2B340;
  BOOL v20 = a3;
  void v17[4] = v11;
  id v18 = v8;
  id v19 = v9;
  id v15 = v9;
  id v16 = v8;
  dispatch_async(v14, v17);
}

uint64_t __77__HMDHome_removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeAllHomeContentsAndAccessoryPairings:*(unsigned __int8 *)(a1 + 56) queue:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

- (void)removeService:(id)a3
{
  id v5 = a3;
  objc_initWeak(&location, self);
  id v6 = [(HMDHome *)self workQueue];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __25__HMDHome_removeService___block_invoke;
  void v8[3] = &unk_264A23DD0;
  objc_copyWeak(v10, &location);
  id v9 = v5;
  v10[1] = (id)a2;
  id v7 = v5;
  dispatch_async(v6, v8);

  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
}

void __25__HMDHome_removeService___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *(void *)(a1 + 32))
  {
    id v4 = WeakRetained;
    objc_msgSend(WeakRetained, "_removeService:");
    uint64_t v3 = NSStringFromSelector(*(SEL *)(a1 + 48));
    [v4 saveWithReason:v3 postSyncNotification:1];

    id WeakRetained = v4;
  }
}

- (void)handleSignificantTimeChange
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v18 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Going to re-evaluate all the triggers as time has changed significantly", buf, 0xCu);
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v7 = [(HMDHome *)v4 triggers];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v13;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v12 + 1) + 8 * v11++) reEvaluate:1];
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v9);
  }
}

- (void)reEvaluateTriggers
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = [(HMDHome *)self triggers];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * v6++) reEvaluate:0];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

- (id)mediaSystemWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self mediaSystems];
  uint64_t v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)mediaSystemsWithUUIDs:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self mediaSystems];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = __33__HMDHome_mediaSystemsWithUUIDs___block_invoke;
  void v9[3] = &unk_264A1BB98;
  id v10 = v4;
  id v6 = v4;
  long long v7 = objc_msgSend(v5, "na_filter:", v9);

  return v7;
}

uint64_t __33__HMDHome_mediaSystemsWithUUIDs___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [a2 uuid];
  uint64_t v4 = [v2 containsObject:v3];

  return v4;
}

- (void)removeOutgoingInvitation:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  [(NSMutableArray *)self->_outgoingInvitations removeObject:v4];
  os_unfair_recursive_lock_unlock();
}

- (void)addOutgoingInvitation:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  [(NSMutableArray *)self->_outgoingInvitations addObject:v4];
  os_unfair_recursive_lock_unlock();
}

- (void)setOutgoingInvitations:(id)a3
{
  id v4 = (NSMutableArray *)a3;
  os_unfair_recursive_lock_lock_with_options();
  outgoingInvitations = self->_outgoingInvitations;
  self->_outgoingInvitations = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSMutableArray)outgoingInvitations
{
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v3 = (void *)[(NSMutableArray *)self->_outgoingInvitations mutableCopy];
  os_unfair_recursive_lock_unlock();
  return (NSMutableArray *)v3;
}

- (id)outgoingInvitationWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self outgoingInvitations];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithValue:forKeyPath:", v4, @"identifier");

  return v6;
}

- (id)userWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self users];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)serviceGroupWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self serviceGroups];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)serviceGroupWithName:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self serviceGroups];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithName:", v4);

  return v6;
}

- (id)triggerWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self triggers];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)triggerWithName:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self triggers];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithName:", v4);

  return v6;
}

- (id)triggerOwnedActionSetWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self triggerOwnedActionSets];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)actionSetWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self actionSets];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)actionSetWithName:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self actionSets];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithName:", v4);

  return v6;
}

- (void)_evaluateOwnerTrustZoneCapabilityAndNotify
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (![(HMDHome *)self isOwnerTrustZoneCapable])
  {
    if ([(HMDHome *)self _isSharedHomeVersionTrustZoneCapable]
      || ([(HMDHome *)self residentDeviceManager],
          uint64_t v3 = objc_claimAutoreleasedReturnValue(),
          int v4 = [v3 hasTrustZoneCapableResident],
          v3,
          v4))
    {
      uint64_t v5 = (void *)MEMORY[0x230FBD990]();
      id v6 = self;
      long long v7 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        long long v8 = HMFGetLogIdentifier();
        int v10 = 138543362;
        uint64_t v11 = v8;
        _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Owner became trust zone capable after evaluating owner trust zone capability", (uint8_t *)&v10, 0xCu);
      }
      [(HMDHome *)v6 setOwnerTrustZoneCapable:1];
      long long v9 = [(HMDHome *)v6 notificationCenter];
      [v9 postNotificationName:@"HMDHomeOwnerBecameTrustZoneCapableNotification" object:v6];
    }
  }
}

- (void)_handleReceivedNonCloudSourcedSharedHomeModel
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ([(HMDHome *)self _isSharedHomeVersionTrustZoneCapable]
    || ([(HMDHome *)self residentDeviceManager],
        uint64_t v3 = objc_claimAutoreleasedReturnValue(),
        int v4 = [v3 hasTrustZoneCapableResident],
        v3,
        v4))
  {
    uint64_t v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = self;
    long long v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      long long v8 = HMFGetLogIdentifier();
      int v10 = 138543362;
      uint64_t v11 = v8;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Owner became trust zone capable after receiving shared home model", (uint8_t *)&v10, 0xCu);
    }
    [(HMDHome *)v6 setOwnerTrustZoneCapable:1];
    long long v9 = [(HMDHome *)v6 notificationCenter];
    [v9 postNotificationName:@"HMDHomeOwnerBecameTrustZoneCapableNotification" object:v6];
  }
}

- (BOOL)_isSharedHomeVersionTrustZoneCapable
{
  id v2 = [(HMDHome *)self sharedHomeSourceVersion];
  uint64_t v3 = [[HMDHomeKitVersion alloc] initWithVersionString:@"6.1"];
  char v4 = [v2 isAtLeastVersion:v3];

  return v4;
}

- (void)setOwnerTrustZoneCapable:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_ownerTrustZoneCapable = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)ownerTrustZoneCapable
{
  LOBYTE(self) = self->_ownerTrustZoneCapable;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (id)zoneWithUUID:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self zones];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)zoneWithName:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self zones];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithName:", v4);

  return v6;
}

- (id)mediaProfileWithUUID:(id)a3
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v5 = [(HMDHome *)self accessories];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v21;
LABEL_3:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v21 != v8) {
        objc_enumerationMutation(v5);
      }
      id v10 = *(id *)(*((void *)&v20 + 1) + 8 * v9);
      objc_opt_class();
      id v11 = (objc_opt_isKindOfClass() & 1) != 0 ? v10 : 0;
      id v12 = v11;

      if (v12)
      {
        long long v13 = [v12 mediaProfile];
      }
      else
      {
        id v14 = v10;
        objc_opt_class();
        id v15 = (objc_opt_isKindOfClass() & 1) != 0 ? v14 : 0;
        id v16 = v15;

        long long v13 = [v16 mediaProfile];
      }
      int v17 = [v13 uniqueIdentifier];
      char v18 = [v17 isEqual:v4];

      if (v18) {
        break;
      }

      if (v7 == ++v9)
      {
        uint64_t v7 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
        if (v7) {
          goto LABEL_3;
        }
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    long long v13 = 0;
  }

  return v13;
}

- (id)accessoryWithSPIClientIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self accessories];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = __44__HMDHome_accessoryWithSPIClientIdentifier___block_invoke;
  void v9[3] = &unk_264A27218;
  id v10 = v4;
  id v6 = v4;
  uint64_t v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v9);

  return v7;
}

uint64_t __44__HMDHome_accessoryWithSPIClientIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 spiClientIdentifier];
  uint64_t v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v4;
}

- (id)accessoryWithDeviceIdentifier:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self accessories];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = __41__HMDHome_accessoryWithDeviceIdentifier___block_invoke;
  void v11[3] = &unk_264A27218;
  id v12 = v4;
  id v6 = v4;
  uint64_t v7 = objc_msgSend(v5, "na_firstObjectPassingTest:", v11);

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = v8;

  return v9;
}

uint64_t __41__HMDHome_accessoryWithDeviceIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  id v6 = [v5 deviceForDirectMessaging];

  uint64_t v7 = [v6 identifier];
  uint64_t v8 = objc_msgSend(v7, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v8;
}

- (id)accessoryWithEndpointIdentifier:(id)a3
{
  id v3 = [(HMDHome *)self accessoryWithSPIClientIdentifier:a3];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  return v5;
}

- (id)accessoryWithUUID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self accessories];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)roomWithUniqueIdentifier:(id)a3 forClientIdentifierSalt:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self rooms];
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  void v13[2] = __60__HMDHome_roomWithUniqueIdentifier_forClientIdentifierSalt___block_invoke;
  v13[3] = &unk_264A16200;
  id v14 = v7;
  id v15 = v6;
  id v9 = v6;
  id v10 = v7;
  id v11 = objc_msgSend(v8, "na_firstObjectPassingTest:", v13);

  return v11;
}

uint64_t __60__HMDHome_roomWithUniqueIdentifier_forClientIdentifierSalt___block_invoke(uint64_t a1, void *a2)
{
  id v3 = (void *)MEMORY[0x263F08C38];
  id v4 = [a2 uuid];
  id v5 = objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v4, *(void *)(a1 + 32));

  uint64_t v6 = [v5 isEqual:*(void *)(a1 + 40)];
  return v6;
}

- (id)roomWithUUID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self roomForEntireHome];
  uint64_t v6 = [v5 uuid];
  int v7 = [v6 isEqual:v4];

  if (v7)
  {
    uint64_t v8 = [(HMDHome *)self roomForEntireHome];
  }
  else
  {
    id v9 = [(HMDHome *)self rooms];
    uint64_t v8 = objc_msgSend(v9, "hmf_firstObjectWithUUID:", v4);
  }
  return v8;
}

- (id)roomWithName:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self rooms];
  uint64_t v6 = objc_msgSend(v5, "hmf_firstObjectWithName:", v4);

  return v6;
}

- (void)_configureBulletinNotification
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = [(HMDHome *)self accessories];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(id *)(*((void *)&v10 + 1) + 8 * v6);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = 0;
        }
        id v9 = v8;

        if (v9) {
          [v9 configureBulletinNotification];
        }

        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

- (void)configureBulletinNotification
{
  uint64_t v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __40__HMDHome_configureBulletinNotification__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __40__HMDHome_configureBulletinNotification__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _configureBulletinNotification];
}

- (void)saveToCurrentAccountWithReason:(id)a3
{
  uint64_t v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __42__HMDHome_saveToCurrentAccountWithReason___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __42__HMDHome_saveToCurrentAccountWithReason___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) configureBulletinNotification];
}

- (void)_updateExpectConfigurationVersion
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int64_t v3 = [(HMDHome *)self expectedConfigurationVersion];
  if (v3 < [(HMDHome *)self configurationVersion]) {
    [(HMDHome *)self setExpectedConfigurationVersion:[(HMDHome *)self configurationVersion]];
  }
  uint64_t v4 = (void *)MEMORY[0x230FBD990]([(HMDHome *)self setExpectedConfigurationVersion:[(HMDHome *)self expectedConfigurationVersion] + 1]);
  uint64_t v5 = self;
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = HMFGetLogIdentifier();
    int v8 = 138543874;
    id v9 = v7;
    __int16 v10 = 2048;
    uint64_t v11 = [(HMDHome *)v5 expectedConfigurationVersion];
    __int16 v12 = 2048;
    uint64_t v13 = [(HMDHome *)v5 configurationVersion];
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Increased expected configuration counter to %lu (current configurationVersion: %lu).", (uint8_t *)&v8, 0x20u);
  }
}

- (void)_updateConfigurationVersion
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int64_t v3 = (void *)MEMORY[0x230FBD990]([(HMDHome *)self setConfigurationVersion:[(HMDHome *)self configurationVersion] + 1]);
  uint64_t v4 = self;
  uint64_t v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = HMFGetLogIdentifier();
    int v7 = 138543618;
    int v8 = v6;
    __int16 v9 = 2048;
    uint64_t v10 = [(HMDHome *)v4 configurationVersion];
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Incrementing configuration version to %lu", (uint8_t *)&v7, 0x16u);
  }
  [(HMDHome *)v4 __saveConfigurationVersionTransaction];
}

- (void)_handleModifyCharacteristicNotifications:(id)a3
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (![v4 isRemote] || (objc_msgSend(v4, "isSecureRemote") & 1) != 0)
  {
    uint64_t v5 = [v4 dictionaryForKey:@"kCharacteristicNotificationsKey"];
    uint64_t v6 = [v4 dictionaryForKey:@"kMediaNotificationsKey"];
    [v4 arrayForKey:@"HMDDeviceNotificationActionSetsKey"];
    long long v96 = (void *)v5;
    v93 = long long v92 = (void *)v6;
    BOOL v7 = (v93 | v5 | v6) != 0;
    if ([v4 isRemote])
    {
      int v8 = [(HMDHome *)self primaryResident];
      __int16 v9 = [v8 device];
      char v10 = [v9 isCurrentDevice];

      if ((v10 & 1) == 0 && ([v96 count] || objc_msgSend((id)v93, "count")))
      {
        id v24 = (void *)MEMORY[0x230FBD990]();
        uint64_t v25 = self;
        id v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          id v27 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          uint64_t v114 = v27;
          _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Received modify characteristic notification message from remote device, and this device is not the primary resident. Discarding.", buf, 0xCu);
        }
        long long v94 = [MEMORY[0x263F087E8] hmInternalErrorWithCode:3202];
        objc_msgSend(v4, "respondWithError:");
LABEL_69:

        goto LABEL_70;
      }
    }
    uint64_t v11 = [v4 dataForKey:@"kMatterNotificationsKey"];
    __int16 v12 = (void *)v11;
    if (!v11)
    {
      long long v94 = 0;
      goto LABEL_28;
    }
    int v110 = 0;
    uint64_t v13 = (void *)v11;
    uint64_t v14 = (void *)OPACKDecodeData();
    uint64_t v15 = v14;
    if (v14)
    {
      id v16 = v14;
      objc_opt_class();
      int v17 = objc_opt_isKindOfClass() & 1;
      if (v17) {
        char v18 = v16;
      }
      else {
        char v18 = 0;
      }
      id v19 = v18;
      long long v94 = v16;

      if (v17)
      {
        BOOL v7 = 1;
LABEL_27:

        __int16 v12 = v13;
LABEL_28:
        LOBYTE(v110) = 0;
        int v36 = [v4 BOOLForKey:@"kCharacteristicNotificationEnableKey" keyPresent:&v110];
        id v37 = [v4 remoteSourceDevice];
        uint64_t v38 = [v37 remoteDestinationString];

        long long v95 = [v4 userForHome:self];
        if (v7 && v38 && v95 && (_BYTE)v110)
        {
          long long v90 = (void *)v38;
          uint64_t v91 = [v4 dictionaryForKey:@"CharacteristicNotificationThreshold"];
          id v39 = (void *)MEMORY[0x230FBD990]();
          int64_t v40 = self;
          double v41 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            long long v42 = HMFGetLogIdentifier();
            long long v43 = HMFBooleanToString();
            long long v44 = [v95 shortDescription];
            *(_DWORD *)buf = 138545410;
            uint64_t v114 = v42;
            __int16 v115 = 2112;
            id v116 = v43;
            __int16 v117 = 2112;
            id v118 = v44;
            __int16 v119 = 2112;
            uint64_t v120 = v90;
            __int16 v121 = 2112;
            uint64_t v122 = v96;
            __int16 v123 = 2112;
            uint64_t v124 = v92;
            __int16 v125 = 2112;
            uint64_t v126 = v93;
            __int16 v127 = 2112;
            uint64_t v128 = v91;
            __int16 v129 = 2112;
            long long v130 = v94;
            _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_INFO, "%{public}@Received modify characteristic notification message with enable: %@ user: %@ deviceIdsDestination: %@ characteristicsPayload: %@ mediaPropertiesPayload: %@ actionSetsPayload: %@characteristicChangeThresholds: %@matterNotificationPayload: %@", buf, 0x5Cu);
          }
          if (v36)
          {
            long long v45 = [(HMDHome *)v40 notificationRegistry];
            uint64_t v46 = v90;
            uint64_t v47 = (void *)v91;
            [v45 setNotificationsEnabled:1 user:v95 deviceIdsDestination:v90 characteristicsPayload:v96 characteristicChangeThresholdsPayload:v91 mediaPropertiesPayload:v92 actionSetsPayload:v93 matterNotificationPayload:v94];

            if ([(id)v93 count])
            {
              v108[0] = MEMORY[0x263EF8330];
              v108[1] = 3221225472;
              v108[2] = __52__HMDHome__handleModifyCharacteristicNotifications___block_invoke;
              v108[3] = &unk_264A2B368;
              id v109 = v4;
              [(HMDHome *)v40 actionSetResponsePayloadForActionSetsPayload:v93 completion:v108];
            }
            else
            {
LABEL_67:
              [v4 respondWithSuccess];
            }
          }
          else
          {
            BOOL v88 = v12;
            id v54 = objc_alloc_init(MEMORY[0x263EFF980]);
            uint64_t v55 = [v4 remoteSourceDevice];
            id v56 = [v55 remoteDestinationString];
            long long v99 = v54;
            [v54 addObject:v56];

            long long v89 = v55;
            uint64_t v57 = [v55 globalHandles];
            uint64_t v58 = [v57 firstObject];

            long long v97 = v58;
            if (v58)
            {
              id v87 = v4;
              long long v106 = 0u;
              long long v107 = 0u;
              long long v104 = 0u;
              long long v105 = 0u;
              long long v59 = [v55 account];
              int v60 = [v59 handles];

              obuint64_t j = v60;
              uint64_t v61 = [v60 countByEnumeratingWithState:&v104 objects:v112 count:16];
              if (v61)
              {
                uint64_t v62 = v61;
                uint64_t v63 = *(void *)v105;
                do
                {
                  for (uint64_t i = 0; i != v62; ++i)
                  {
                    if (*(void *)v105 != v63) {
                      objc_enumerationMutation(obj);
                    }
                    uint64_t v65 = *(void **)(*((void *)&v104 + 1) + 8 * i);
                    long long v66 = [v58 pushToken];
                    id v67 = [v65 URI];
                    uint64_t v68 = [v67 prefixedURI];
                    BOOL v69 = (void *)MEMORY[0x230FBC270](v66, v68);

                    if (v69)
                    {
                      if (([v99 containsObject:v69] & 1) == 0) {
                        [v99 addObject:v69];
                      }
                    }
                    else
                    {
                      id v70 = (void *)MEMORY[0x230FBD990]();
                      id v71 = v40;
                      long long v72 = HMFGetOSLogHandle();
                      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
                      {
                        HMFGetLogIdentifier();
                        v74 = uint64_t v73 = v40;
                        *(_DWORD *)buf = 138543874;
                        uint64_t v114 = v74;
                        __int16 v115 = 2112;
                        id v116 = v97;
                        __int16 v117 = 2112;
                        id v118 = v65;
                        _os_log_impl(&dword_22F52A000, v72, OS_LOG_TYPE_ERROR, "%{public}@Failed to create destination with globalHandle: %@, accountHandle: %@", buf, 0x20u);

                        int64_t v40 = v73;
                        uint64_t v58 = v97;
                      }
                    }
                  }
                  uint64_t v62 = [obj countByEnumeratingWithState:&v104 objects:v112 count:16];
                }
                while (v62);
              }

              id v4 = v87;
            }
            long long v102 = 0u;
            long long v103 = 0u;
            long long v100 = 0u;
            long long v101 = 0u;
            id v75 = v99;
            uint64_t v76 = [v75 countByEnumeratingWithState:&v100 objects:v111 count:16];
            if (v76)
            {
              uint64_t v77 = v76;
              uint64_t v78 = *(void *)v101;
              while (2)
              {
                for (uint64_t j = 0; j != v77; ++j)
                {
                  if (*(void *)v101 != v78) {
                    objc_enumerationMutation(v75);
                  }
                  uint64_t v80 = *(void *)(*((void *)&v100 + 1) + 8 * j);
                  id v81 = [(HMDHome *)v40 notificationRegistry];
                  LOBYTE(v80) = [v81 setNotificationsEnabled:0 user:v95 deviceIdsDestination:v80 characteristicsPayload:v96 characteristicChangeThresholdsPayload:v91 mediaPropertiesPayload:v92 actionSetsPayload:v93 matterNotificationPayload:v94];

                  if (v80)
                  {

                    __int16 v12 = v88;
                    uint64_t v46 = v90;
                    uint64_t v47 = (void *)v91;
                    goto LABEL_67;
                  }
                }
                uint64_t v77 = [v75 countByEnumeratingWithState:&v100 objects:v111 count:16];
                if (v77) {
                  continue;
                }
                break;
              }
            }

            unsigned int v82 = (void *)MEMORY[0x230FBD990]();
            __int16 v83 = v40;
            uint64_t v84 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
            {
              uint64_t v85 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543874;
              uint64_t v114 = v85;
              __int16 v115 = 2112;
              id v116 = v95;
              __int16 v117 = 2112;
              id v118 = v75;
              _os_log_impl(&dword_22F52A000, v84, OS_LOG_TYPE_ERROR, "%{public}@Failed to disable notification for user: %@ with destinations: %@", buf, 0x20u);
            }
            uint64_t v86 = [MEMORY[0x263F087E8] hmErrorWithCode:2 description:@"Failed to disable notification because registration was not found" reason:@"Could not find matching registration" suggestion:0];
            [v4 respondWithError:v86];

            __int16 v12 = v88;
            uint64_t v46 = v90;
            uint64_t v47 = (void *)v91;
          }
        }
        else
        {
          long long v48 = (void *)v38;
          long long v49 = (void *)MEMORY[0x230FBD990]();
          long long v50 = self;
          id v51 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            uint64_t v52 = HMFGetLogIdentifier();
            uint64_t v53 = [v4 messagePayload];
            *(_DWORD *)buf = 138543618;
            uint64_t v114 = v52;
            __int16 v115 = 2112;
            id v116 = v53;
            _os_log_impl(&dword_22F52A000, v51, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle modify characteristic notifications message payload: %@", buf, 0x16u);
          }
          uint64_t v47 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
          [v4 respondWithError:v47];
          uint64_t v46 = v48;
        }

        goto LABEL_69;
      }
      BOOL v28 = (void *)MEMORY[0x230FBD990]();
      unint64_t v35 = self;
      id v30 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        id v31 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v114 = v31;
        __int16 v115 = 2112;
        id v116 = v94;
        uint64_t v32 = "%{public}@Error casting decodedMatterNotificationData to NSDictionary. decodedMatterNotificationData=%@";
        id v33 = v30;
        uint32_t v34 = 22;
        goto LABEL_25;
      }
    }
    else
    {
      BOOL v28 = (void *)MEMORY[0x230FBD990]();
      id v29 = self;
      id v30 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        id v31 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138544130;
        uint64_t v114 = v31;
        __int16 v115 = 2048;
        id v116 = (id)v110;
        __int16 v117 = 2112;
        id v118 = v13;
        __int16 v119 = 2112;
        uint64_t v120 = 0;
        uint64_t v32 = "%{public}@Error decoding Matter notification payload. status=%ld encodedMatterNotificationData=%@ decodedM"
              "atterNotificationData=%@";
        id v33 = v30;
        uint32_t v34 = 42;
LABEL_25:
        _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_ERROR, v32, buf, v34);
      }
    }

    long long v94 = 0;
    goto LABEL_27;
  }
  long long v20 = (void *)MEMORY[0x230FBD990]();
  long long v21 = self;
  long long v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    long long v23 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v114 = v23;
    __int16 v115 = 2112;
    id v116 = v4;
    _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Message not supported: %@", buf, 0x16u);
  }
  long long v96 = [MEMORY[0x263F087E8] hmErrorWithCode:17];
  objc_msgSend(v4, "respondWithError:");
LABEL_70:
}

void __52__HMDHome__handleModifyCharacteristicNotifications___block_invoke(uint64_t a1, void *a2)
{
  v7[1] = *MEMORY[0x263EF8340];
  id v2 = *(void **)(a1 + 32);
  uint64_t v6 = @"HMDDeviceNotificationActionSetsKey";
  v7[0] = a2;
  int64_t v3 = NSDictionary;
  id v4 = a2;
  uint64_t v5 = [v3 dictionaryWithObjects:v7 forKeys:&v6 count:1];
  [v2 respondWithPayload:v5];
}

- (void)actionSetResponsePayloadForActionSetsPayload:(id)a3 completion:(id)a4
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  if ([v6 count]
    && ([(HMDHome *)self actionSetStateObserver],
        int v8 = objc_claimAutoreleasedReturnValue(),
        v8,
        v8))
  {
    id v30 = (void (**)(void, void))v7;
    __int16 v9 = [MEMORY[0x263EFF9C0] set];
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v31 = v6;
    id v10 = v6;
    uint64_t v33 = [v10 countByEnumeratingWithState:&v36 objects:v44 count:16];
    if (v33)
    {
      uint64_t v11 = *(void *)v37;
      uint64_t v32 = *(void *)v37;
      do
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (*(void *)v37 != v11) {
            objc_enumerationMutation(v10);
          }
          id v13 = *(id *)(*((void *)&v36 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v14 = v13;
          }
          else {
            uint64_t v14 = 0;
          }
          id v15 = v14;

          if (v15)
          {
            id v16 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v15];
            if (v16)
            {
              [v9 addObject:v16];
            }
            else
            {
              long long v21 = (void *)MEMORY[0x230FBD990]();
              long long v22 = self;
              long long v23 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
              {
                HMFGetLogIdentifier();
                id v24 = v10;
                uint64_t v25 = self;
                v27 = id v26 = v9;
                *(_DWORD *)buf = 138543618;
                double v41 = v27;
                __int16 v42 = 2112;
                id v43 = v15;
                _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@Action set uuid string (%@) could not be converted to a uuid", buf, 0x16u);

                __int16 v9 = v26;
                self = v25;
                id v10 = v24;
                uint64_t v11 = v32;
              }
            }
          }
          else
          {
            int v17 = (void *)MEMORY[0x230FBD990]();
            char v18 = self;
            id v19 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              long long v20 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543362;
              double v41 = v20;
              _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Action set element was not a string", buf, 0xCu);
            }
          }
        }
        uint64_t v33 = [v10 countByEnumeratingWithState:&v36 objects:v44 count:16];
      }
      while (v33);
    }

    if ([v9 count])
    {
      BOOL v28 = [(HMDHome *)self actionSetStateObserver];
      id v29 = [v9 allObjects];
      v34[0] = MEMORY[0x263EF8330];
      v34[1] = 3221225472;
      v34[2] = __67__HMDHome_actionSetResponsePayloadForActionSetsPayload_completion___block_invoke;
      void v34[3] = &unk_264A28FD0;
      id v7 = v30;
      unint64_t v35 = v30;
      [v28 currentStateForActionSetUUIDs:v29 completionHandler:v34];
    }
    else
    {
      id v7 = v30;
      v30[2](v30, MEMORY[0x263EFFA78]);
    }

    id v6 = v31;
  }
  else
  {
    (*((void (**)(id, void))v7 + 2))(v7, MEMORY[0x263EFFA78]);
  }
}

void __67__HMDHome_actionSetResponsePayloadForActionSetsPayload_completion___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = +[HMDActionSetResponse serializeWithResponses:a2];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

- (void)auditDestinationsForNotifications:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __45__HMDHome_auditDestinationsForNotifications___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __45__HMDHome_auditDestinationsForNotifications___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) notificationRegistry];
  [v2 auditNotificationDestinations:*(void *)(a1 + 40) home:*(void *)(a1 + 32)];
}

- (void)_modifyCharacteristicNotifications:(id)a3 characteristicChangeThresholds:(id)a4 mediaNotifications:(id)a5 actionSetNotificationPayload:(id)a6 matterAttributeNotifications:(id)a7 enableNotification:(BOOL)a8 withDevice:(id)a9 completion:(id)a10
{
  BOOL v10 = a8;
  v70[1] = *MEMORY[0x263EF8340];
  id v55 = a3;
  id v53 = a4;
  id v52 = a5;
  id v51 = a6;
  id v54 = a7;
  id v16 = a9;
  id v17 = a10;
  char v18 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v18);

  uint64_t v19 = [v16 isCurrentDevice];
  if (!v19)
  {
    BOOL v69 = @"kCharacteristicNotificationEnableKey";
    uint64_t v25 = [NSNumber numberWithBool:v10];
    v70[0] = v25;
    id v26 = [NSDictionary dictionaryWithObjects:v70 forKeys:&v69 count:1];
    id v24 = (void *)[v26 mutableCopy];

    uint64_t v27 = [v55 count];
    BOOL v28 = v27 == 0;
    if (v27) {
      [v24 setObject:v55 forKeyedSubscript:@"kCharacteristicNotificationsKey"];
    }
    if (objc_msgSend(v53, "count", v51)) {
      [v24 setObject:v53 forKeyedSubscript:@"CharacteristicNotificationThreshold"];
    }
    if ([v52 count])
    {
      [v24 setObject:v52 forKeyedSubscript:@"kMediaNotificationsKey"];
      BOOL v28 = 0;
    }
    if ([v51 count])
    {
      [v24 setObject:v51 forKeyedSubscript:@"HMDDeviceNotificationActionSetsKey"];
      if (![v54 count])
      {
LABEL_26:
        long long v38 = [(HMDHome *)self currentUser];
        BOOL v39 = [(HMDHome *)self shouldRestrictAllMessagingToLocalTransportsForUser:v38];

        if (v39) {
          uint64_t v40 = 14;
        }
        else {
          uint64_t v40 = -1;
        }
        double v41 = [HMDRemoteDeviceMessageDestination alloc];
        __int16 v42 = [(HMDHome *)self uuid];
        id v43 = [(HMDRemoteDeviceMessageDestination *)v41 initWithTarget:v42 device:v16];

        if (v10 && [v55 count])
        {
          long long v44 = [HMDRemoteHomeMessageDestination alloc];
          uint64_t v45 = [(HMDHome *)self uuid];
          uint64_t v46 = [(HMDHome *)self uuid];
          uint64_t v47 = [(HMDRemoteHomeMessageDestination *)v44 initWithTarget:v45 homeUUID:v46];

          id v43 = (HMDRemoteDeviceMessageDestination *)v47;
        }
        long long v48 = +[HMDRemoteMessage secureMessageWithName:@"kModifyCharacterisiticNotificationsRequestKey" qualityOfService:17 destination:v43 messagePayload:v24 restriction:v40];
        objc_initWeak((id *)buf, self);
        v56[0] = MEMORY[0x263EF8330];
        v56[1] = 3221225472;
        void v56[2] = __195__HMDHome__modifyCharacteristicNotifications_characteristicChangeThresholds_mediaNotifications_actionSetNotificationPayload_matterAttributeNotifications_enableNotification_withDevice_completion___block_invoke;
        void v56[3] = &unk_264A161D8;
        objc_copyWeak(&v60, (id *)buf);
        id v59 = v17;
        id v57 = v16;
        id v58 = v55;
        BOOL v61 = v10;
        [v48 setResponseHandler:v56];
        long long v49 = [(HMDHome *)self homeManager];
        long long v50 = [v49 messageDispatcher];
        [v50 sendMessage:v48 completionHandler:0];

        objc_destroyWeak(&v60);
        objc_destroyWeak((id *)buf);

        goto LABEL_33;
      }
      LOBYTE(v28) = 0;
    }
    else if (![v54 count])
    {
      if (!v28) {
        goto LABEL_26;
      }
      goto LABEL_21;
    }
    int v62 = 0;
    id v29 = (void *)MEMORY[0x230FBC730](v54, 8, &v62);
    if (v29)
    {
      [v24 setObject:v29 forKeyedSubscript:@"kMatterNotificationsKey"];

      goto LABEL_26;
    }
    id v30 = (void *)MEMORY[0x230FBD990]();
    id v31 = self;
    uint64_t v32 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      uint64_t v64 = v33;
      __int16 v65 = 2112;
      id v66 = v54;
      __int16 v67 = 2048;
      uint64_t v68 = v62;
      _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode Matter attribute notification registration payload=%@ (status %ld)", buf, 0x20u);
    }
    if (!v28) {
      goto LABEL_26;
    }
LABEL_21:
    uint32_t v34 = (void *)MEMORY[0x230FBD990]();
    unint64_t v35 = self;
    long long v36 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      long long v37 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v64 = v37;
      __int16 v65 = 2112;
      id v66 = v16;
      _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_INFO, "%{public}@Skipping modifying notifications with remote gateway %@ as there is nothing to modify", buf, 0x16u);
    }
    if (v17) {
      (*((void (**)(id, void))v17 + 2))(v17, 0);
    }
    goto LABEL_33;
  }
  long long v20 = (void *)MEMORY[0x230FBD990](v19);
  long long v21 = self;
  long long v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    long long v23 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    uint64_t v64 = v23;
    _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Cannot modify notifications with current device", buf, 0xCu);
  }
  if (v17)
  {
    id v24 = objc_msgSend(MEMORY[0x263F087E8], "hmfErrorWithCode:", 3, v51);
    (*((void (**)(id, void *))v17 + 2))(v17, v24);
LABEL_33:
  }
}

void __195__HMDHome__modifyCharacteristicNotifications_characteristicChangeThresholds_mediaNotifications_actionSetNotificationPayload_matterAttributeNotifications_enableNotification_withDevice_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v8 = WeakRetained;
  if (WeakRetained)
  {
    if (v5)
    {
      __int16 v9 = (void *)MEMORY[0x230FBD990]();
      id v10 = v8;
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        __int16 v12 = HMFGetLogIdentifier();
        uint64_t v13 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543874;
        id v26 = v12;
        __int16 v27 = 2112;
        uint64_t v28 = v13;
        __int16 v29 = 2112;
        id v30 = v5;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Failed to modify notifications with remote gateway %@ due to error %@", buf, 0x20u);
      }
      uint64_t v14 = *(void *)(a1 + 48);
      if (v14) {
        (*(void (**)(uint64_t, id))(v14 + 16))(v14, v5);
      }
    }
    else
    {
      id v17 = [WeakRetained workQueue];
      v18[0] = MEMORY[0x263EF8330];
      v18[1] = 3221225472;
      void v18[2] = __195__HMDHome__modifyCharacteristicNotifications_characteristicChangeThresholds_mediaNotifications_actionSetNotificationPayload_matterAttributeNotifications_enableNotification_withDevice_completion___block_invoke_875;
      v18[3] = &unk_264A2B200;
      objc_copyWeak(&v23, (id *)(a1 + 56));
      id v19 = *(id *)(a1 + 32);
      id v20 = *(id *)(a1 + 40);
      char v24 = *(unsigned char *)(a1 + 64);
      id v21 = v6;
      id v22 = *(id *)(a1 + 48);
      dispatch_async(v17, v18);

      objc_destroyWeak(&v23);
    }
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 48);
    if (v15)
    {
      id v16 = [MEMORY[0x263F087E8] hmfErrorWithCode:8];
      (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);
    }
  }
}

void __195__HMDHome__modifyCharacteristicNotifications_characteristicChangeThresholds_mediaNotifications_actionSetNotificationPayload_matterAttributeNotifications_enableNotification_withDevice_completion___block_invoke_875(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v3 = (void *)MEMORY[0x230FBD990]();
  id v4 = WeakRetained;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    id v7 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    long long v38 = v6;
    __int16 v39 = 2112;
    uint64_t v40 = v7;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Modified notifications with remote gateway %@", buf, 0x16u);
  }
  [v4 _handleRemoteGatewayNotificationRegistration:*(void *)(a1 + 40) enable:*(unsigned __int8 *)(a1 + 72)];
  uint64_t v30 = a1;
  __int16 v29 = objc_msgSend(*(id *)(a1 + 48), "hmf_dictionaryForKey:", @"HMDDeviceNotificationActionSetsKey");
  +[HMDActionSetResponse responsesFromSerializedResponses:](HMDActionSetResponse, "responsesFromSerializedResponses:");
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v33;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v33 != v10) {
          objc_enumerationMutation(obj);
        }
        __int16 v12 = *(void **)(*((void *)&v32 + 1) + 8 * i);
        uint64_t v13 = [v12 actionSetUUID];
        uint64_t v14 = [v4 actionSetWithUUID:v13];

        if (v14)
        {
          uint64_t v15 = [v4 actionSetStateSubscriptionManager];
          id v16 = [v14 uuid];
          char v17 = [v15 isMonitoringActionSet:v16];

          if (v17)
          {
            char v18 = [v4 actionSetStateSubscriptionManager];
            id v19 = [v12 actionSetUUID];
            objc_msgSend(v18, "actionSetStateDidChange:state:", v19, objc_msgSend(v12, "state"));

            goto LABEL_17;
          }
          id v20 = (void *)MEMORY[0x230FBD990]();
          id v21 = v4;
          id v22 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            id v23 = HMFGetLogIdentifier();
            char v24 = [v12 actionSetUUID];
            *(_DWORD *)buf = 138543618;
            long long v38 = v23;
            __int16 v39 = 2112;
            uint64_t v40 = v24;
            uint64_t v25 = v22;
            os_log_type_t v26 = OS_LOG_TYPE_DEFAULT;
            __int16 v27 = "%{public}@Got action set enable response for unregistered action set %@";
            goto LABEL_15;
          }
        }
        else
        {
          id v20 = (void *)MEMORY[0x230FBD990]();
          id v21 = v4;
          id v22 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            id v23 = HMFGetLogIdentifier();
            char v24 = [v12 actionSetUUID];
            *(_DWORD *)buf = 138543618;
            long long v38 = v23;
            __int16 v39 = 2112;
            uint64_t v40 = v24;
            uint64_t v25 = v22;
            os_log_type_t v26 = OS_LOG_TYPE_ERROR;
            __int16 v27 = "%{public}@Got action set enable response for unknown action set %@";
LABEL_15:
            _os_log_impl(&dword_22F52A000, v25, v26, v27, buf, 0x16u);
          }
        }

LABEL_17:
      }
      uint64_t v9 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
    }
    while (v9);
  }

  uint64_t v28 = *(void *)(v30 + 56);
  if (v28) {
    (*(void (**)(uint64_t, void))(v28 + 16))(v28, 0);
  }
}

- (void)_modifyCharacteristicNotifications:(id)a3 characteristicChangeThresholds:(id)a4 mediaNotifications:(id)a5 actionSetNotificationPayload:(id)a6 enableNotification:(BOOL)a7 withDevice:(id)a8
{
}

- (void)modifyCharacteristicNotifications:(id)a3 characteristicChangeThresholds:(id)a4 mediaNotifications:(id)a5 actionSetNotificationPayload:(id)a6 enableNotification:(BOOL)a7 withDevice:(id)a8
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a8;
  id v19 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __154__HMDHome_modifyCharacteristicNotifications_characteristicChangeThresholds_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice___block_invoke;
  block[3] = &unk_264A161B0;
  void block[4] = self;
  id v26 = v14;
  id v27 = v15;
  id v28 = v16;
  BOOL v31 = a7;
  id v29 = v17;
  id v30 = v18;
  id v20 = v18;
  id v21 = v17;
  id v22 = v16;
  id v23 = v15;
  id v24 = v14;
  dispatch_async(v19, block);
}

uint64_t __154__HMDHome_modifyCharacteristicNotifications_characteristicChangeThresholds_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _modifyCharacteristicNotifications:*(void *)(a1 + 40) characteristicChangeThresholds:*(void *)(a1 + 48) mediaNotifications:*(void *)(a1 + 56) actionSetNotificationPayload:*(void *)(a1 + 64) enableNotification:*(unsigned __int8 *)(a1 + 80) withDevice:*(void *)(a1 + 72)];
}

- (BOOL)shouldRestrictAllMessagingToLocalTransportsForUser:(id)a3
{
  id v3 = a3;
  BOOL v4 = isiOSDevice();
  LOBYTE(v5) = 0;
  if (v3 && v4) {
    int v5 = [v3 isRemoteAccessAllowed] ^ 1;
  }

  return v5;
}

- (void)_resubscribeForNotificationsOnResident:(id)a3
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = [(HMDHome *)self primaryResident];
  id v7 = [v6 device];

  uint64_t v8 = (void *)MEMORY[0x230FBD990]();
  uint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    __int16 v42 = v11;
    __int16 v43 = 2112;
    id v44 = v4;
    __int16 v45 = 2112;
    uint64_t v46 = v7;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Resubscribing for notifications - previousResidentDevice: %@, current primaryResident: %@", buf, 0x20u);
  }
  id v35 = v4;

  isWatch();
  long long v34 = [(HMDHome *)v9 residentEnabledDevices];
  __int16 v12 = [MEMORY[0x263EFF980] array];
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v13 = [(HMDHome *)v9 _residentUsers];
  uint64_t v14 = [v13 countByEnumeratingWithState:&v36 objects:v40 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v37;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v37 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = *(void **)(*((void *)&v36 + 1) + 8 * i);
        if ([v18 configurationState] == 2)
        {
          id v19 = [v18 userID];
          id v20 = +[HMDDevice deviceWithDestination:v19];

          if (v20 && ([v20 isCurrentDevice] & 1) == 0) {
            [v12 addObject:v20];
          }
        }
      }
      uint64_t v15 = [v13 countByEnumeratingWithState:&v36 objects:v40 count:16];
    }
    while (v15);
  }

  if ([v34 count] || objc_msgSend(v12, "count"))
  {
    id v21 = objc_msgSend(MEMORY[0x263EFF9C0], "setWithCapacity:", objc_msgSend(v12, "count") + objc_msgSend(v34, "count"));
    id v22 = objc_msgSend(MEMORY[0x263EFF9C0], "setWithCapacity:", objc_msgSend(v12, "count") + objc_msgSend(v34, "count"));
    if ([v7 isCurrentDevice])
    {
      [v21 addObjectsFromArray:v34];
      [v21 addObjectsFromArray:v12];
      id v23 = v35;
    }
    else
    {
      id v23 = v35;
      if (v35) {
        [v22 addObject:v35];
      }
      else {
        [v22 addObjectsFromArray:v12];
      }
      if (v7) {
        [v21 addObject:v7];
      }
      else {
        [v21 addObjectsFromArray:v12];
      }
    }
    id v24 = (void *)MEMORY[0x230FBD990]([v22 minusSet:v21]);
    uint64_t v25 = v9;
    id v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      id v27 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v42 = v27;
      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to initial home launch or change in primary resident.", buf, 0xCu);
    }
    if ([v22 count])
    {
      id v28 = [v22 allObjects];
      [(HMDHome *)v25 _disableNotificationsForDevices:v28];
    }
    if ([v21 count])
    {
      id v29 = [v21 allObjects];
      [(HMDHome *)v25 _enableNotificationsForDevices:v29];
    }
  }
  else
  {
    id v30 = (void *)MEMORY[0x230FBD990]();
    BOOL v31 = v9;
    long long v32 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      long long v33 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v42 = v33;
      _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_INFO, "%{public}@There are no resident devices or remote gateways to register with", buf, 0xCu);
    }
    id v23 = v35;
  }
}

- (void)resubscribeForNotificationsOnResident:(id)a3
{
  id v4 = a3;
  int v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __49__HMDHome_resubscribeForNotificationsOnResident___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __49__HMDHome_resubscribeForNotificationsOnResident___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resubscribeForNotificationsOnResident:*(void *)(a1 + 40)];
}

- (void)_disableNotificationsForDevices:(id)a3
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  if ([v4 count])
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = self;
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v89 = v9;
      __int16 v90 = 2112;
      id v91 = v4;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Disabling Notifications on %@", buf, 0x16u);
    }
    id v54 = v4;

    int v62 = [MEMORY[0x263EFF9A0] dictionary];
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    id v56 = v7;
    obuint64_t j = [(HMDHome *)v7 accessories];
    uint64_t v58 = [obj countByEnumeratingWithState:&v79 objects:v87 count:16];
    if (v58)
    {
      uint64_t v57 = *(void *)v80;
      do
      {
        for (uint64_t i = 0; i != v58; ++i)
        {
          if (*(void *)v80 != v57) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void **)(*((void *)&v79 + 1) + 8 * i);
          __int16 v12 = [MEMORY[0x263EFF980] array];
          id v13 = v11;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v14 = v13;
          }
          else {
            uint64_t v14 = 0;
          }
          id v15 = v14;

          if (v15)
          {
            id v59 = v13;
            id v60 = v15;
            uint64_t v61 = i;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v75 = 0u;
            long long v76 = 0u;
            uint64_t v16 = [v15 services];
            uint64_t v17 = [v16 countByEnumeratingWithState:&v75 objects:v86 count:16];
            if (v17)
            {
              uint64_t v18 = v17;
              uint64_t v19 = *(void *)v76;
              do
              {
                for (uint64_t j = 0; j != v18; ++j)
                {
                  if (*(void *)v76 != v19) {
                    objc_enumerationMutation(v16);
                  }
                  id v21 = *(void **)(*((void *)&v75 + 1) + 8 * j);
                  long long v71 = 0u;
                  long long v72 = 0u;
                  long long v73 = 0u;
                  long long v74 = 0u;
                  id v22 = [v21 characteristics];
                  uint64_t v23 = [v22 countByEnumeratingWithState:&v71 objects:v85 count:16];
                  if (v23)
                  {
                    uint64_t v24 = v23;
                    uint64_t v25 = *(void *)v72;
                    do
                    {
                      for (uint64_t k = 0; k != v24; ++k)
                      {
                        if (*(void *)v72 != v25) {
                          objc_enumerationMutation(v22);
                        }
                        id v27 = *(void **)(*((void *)&v71 + 1) + 8 * k);
                        if ([v27 supportsNotification])
                        {
                          id v28 = [v27 instanceID];
                          [v12 addObject:v28];
                        }
                      }
                      uint64_t v24 = [v22 countByEnumeratingWithState:&v71 objects:v85 count:16];
                    }
                    while (v24);
                  }
                }
                uint64_t v18 = [v16 countByEnumeratingWithState:&v75 objects:v86 count:16];
              }
              while (v18);
            }

            id v29 = [v59 uuid];
            id v30 = [v29 UUIDString];

            if ([v12 count])
            {
              BOOL v31 = (void *)[v12 copy];
              [v62 setObject:v31 forKeyedSubscript:v30];
            }
            id v15 = v60;
            uint64_t i = v61;
          }
        }
        uint64_t v58 = [obj countByEnumeratingWithState:&v79 objects:v87 count:16];
      }
      while (v58);
    }

    long long v32 = [MEMORY[0x263EFF980] array];
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v33 = [(HMDHome *)v56 actionSets];
    uint64_t v34 = [v33 countByEnumeratingWithState:&v67 objects:v84 count:16];
    if (v34)
    {
      uint64_t v35 = v34;
      uint64_t v36 = *(void *)v68;
      do
      {
        for (uint64_t m = 0; m != v35; ++m)
        {
          if (*(void *)v68 != v36) {
            objc_enumerationMutation(v33);
          }
          long long v38 = [*(id *)(*((void *)&v67 + 1) + 8 * m) uuid];
          long long v39 = [v38 UUIDString];
          [v32 addObject:v39];
        }
        uint64_t v35 = [v33 countByEnumeratingWithState:&v67 objects:v84 count:16];
      }
      while (v35);
    }

    if ([v62 count] || objc_msgSend(v32, "count"))
    {
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      id v40 = v54;
      uint64_t v41 = [v40 countByEnumeratingWithState:&v63 objects:v83 count:16];
      if (v41)
      {
        uint64_t v42 = v41;
        uint64_t v43 = *(void *)v64;
        uint64_t v44 = MEMORY[0x263EFFA78];
        do
        {
          for (uint64_t n = 0; n != v42; ++n)
          {
            if (*(void *)v64 != v43) {
              objc_enumerationMutation(v40);
            }
            uint64_t v46 = *(void *)(*((void *)&v63 + 1) + 8 * n);
            uint64_t v47 = (void *)[v62 copy];
            long long v48 = (void *)[0 copy];
            long long v49 = (void *)[v32 copy];
            [(HMDHome *)v56 _modifyCharacteristicNotifications:v47 characteristicChangeThresholds:v44 mediaNotifications:v48 actionSetNotificationPayload:v49 enableNotification:0 withDevice:v46];
          }
          uint64_t v42 = [v40 countByEnumeratingWithState:&v63 objects:v83 count:16];
        }
        while (v42);
      }
    }
    else
    {
      long long v50 = (void *)MEMORY[0x230FBD990]();
      id v51 = v56;
      id v52 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        id v53 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v89 = v53;
        _os_log_impl(&dword_22F52A000, v52, OS_LOG_TYPE_INFO, "%{public}@There are no characteristics requiring deregistration", buf, 0xCu);
      }
    }
    id v4 = v54;
  }
}

- (void)disableNotificationsForDevices:(id)a3
{
  id v4 = a3;
  int v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __42__HMDHome_disableNotificationsForDevices___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __42__HMDHome_disableNotificationsForDevices___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _disableNotificationsForDevices:*(void *)(a1 + 40)];
}

- (void)_enableNotificationsForDevices:(id)a3
{
  uint64_t v193 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  if ([v4 count])
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = self;
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v190 = v9;
      __int16 v191 = 2112;
      id v192 = v4;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Enabling Notifications on %@", buf, 0x16u);
    }
    uint64_t v10 = [(HMDHome *)v7 notificationRegistrations];
    uint64_t v133 = [v10 count];

    uint64_t v11 = [(HMDHome *)v7 primaryResident];
    long long v137 = [v11 device];

    uint64_t v113 = v4;
    if ([(HMDHome *)v7 isCurrentDeviceAvailableResident]
      && ![(HMDHome *)v7 isCurrentDevicePrimaryResident])
    {
      long long v177 = 0u;
      long long v178 = 0u;
      long long v175 = 0u;
      long long v176 = 0u;
      id v12 = v4;
      uint64_t v13 = [v12 countByEnumeratingWithState:&v175 objects:v188 count:16];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = *(void *)v176;
        while (2)
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            if (*(void *)v176 != v15) {
              objc_enumerationMutation(v12);
            }
            if ([*(id *)(*((void *)&v175 + 1) + 8 * i) isEqual:v137])
            {
              int v136 = 1;
              goto LABEL_17;
            }
          }
          uint64_t v14 = [v12 countByEnumeratingWithState:&v175 objects:v188 count:16];
          if (v14) {
            continue;
          }
          break;
        }
      }
      int v136 = 0;
LABEL_17:
    }
    else
    {
      int v136 = 0;
    }
    uint64_t v140 = [MEMORY[0x263EFF980] array];
    long long v171 = 0u;
    long long v172 = 0u;
    long long v173 = 0u;
    long long v174 = 0u;
    obuint64_t j = [(HMDHome *)v7 triggers];
    long long v141 = v7;
    uint64_t v134 = [obj countByEnumeratingWithState:&v171 objects:v187 count:16];
    if (v134)
    {
      uint64_t v131 = *(void *)v172;
      do
      {
        uint64_t v17 = 0;
        do
        {
          if (*(void *)v172 != v131) {
            objc_enumerationMutation(obj);
          }
          uint64_t v142 = v17;
          id v18 = *(id *)(*((void *)&v171 + 1) + 8 * (void)v17);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v19 = v18;
          }
          else {
            uint64_t v19 = 0;
          }
          id v20 = v19;

          long long v169 = 0u;
          long long v170 = 0u;
          long long v167 = 0u;
          long long v168 = 0u;
          uint64_t v138 = v20;
          id v21 = [v20 characteristicEvents];
          uint64_t v22 = [v21 countByEnumeratingWithState:&v167 objects:v186 count:16];
          if (v22)
          {
            uint64_t v23 = v22;
            uint64_t v24 = *(void *)v168;
            do
            {
              for (uint64_t j = 0; j != v23; ++j)
              {
                if (*(void *)v168 != v24) {
                  objc_enumerationMutation(v21);
                }
                id v26 = *(void **)(*((void *)&v167 + 1) + 8 * j);
                id v27 = [v26 characteristic];

                if (v27)
                {
                  id v28 = [v26 characteristic];
                  [v140 addObject:v28];
                }
                else
                {
                  id v29 = (void *)MEMORY[0x230FBD990]();
                  id v30 = v7;
                  BOOL v31 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                  {
                    long long v32 = HMFGetLogIdentifier();
                    *(_DWORD *)buf = 138543618;
                    long long v190 = v32;
                    __int16 v191 = 2112;
                    id v192 = v26;
                    _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_ERROR, "%{public}@Characteristic of HMDCharacteristicEvent %@ is nil!", buf, 0x16u);
                  }
                  id v7 = v141;
                }
              }
              uint64_t v23 = [v21 countByEnumeratingWithState:&v167 objects:v186 count:16];
            }
            while (v23);
          }

          uint64_t v17 = v142 + 1;
        }
        while (v142 + 1 != (char *)v134);
        uint64_t v134 = [obj countByEnumeratingWithState:&v171 objects:v187 count:16];
      }
      while (v134);
    }

    __int16 v121 = [MEMORY[0x263EFF9A0] dictionary];
    uint64_t v120 = [MEMORY[0x263EFF9A0] dictionary];
    long long v163 = 0u;
    long long v164 = 0u;
    long long v165 = 0u;
    long long v166 = 0u;
    id v116 = [(HMDHome *)v7 accessories];
    uint64_t v33 = [v116 countByEnumeratingWithState:&v163 objects:v185 count:16];
    if (v33)
    {
      uint64_t v34 = v33;
      uint64_t v35 = *(void *)v164;
      uint64_t v126 = *MEMORY[0x263F356A0];
      uint64_t v114 = *(void *)v164;
      do
      {
        uint64_t v36 = 0;
        uint64_t v115 = v34;
        do
        {
          if (*(void *)v164 != v35) {
            objc_enumerationMutation(v116);
          }
          id v37 = *(id *)(*((void *)&v163 + 1) + 8 * v36);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            long long v38 = v37;
          }
          else {
            long long v38 = 0;
          }
          id v39 = v38;

          if (v39)
          {
            if (shouldSkipRemoteAccessoryNotificationRegistration(v7, v39))
            {
              id v40 = v39;
              uint64_t v41 = (void *)MEMORY[0x230FBD990]();
              uint64_t v42 = v7;
              uint64_t v43 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
              {
                uint64_t v44 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                long long v190 = v44;
                __int16 v191 = 2112;
                id v192 = v40;
                _os_log_impl(&dword_22F52A000, v43, OS_LOG_TYPE_INFO, "%{public}@Dropping all characteristics for %@ from remote notification as partitioned network is no longer supported by residents", buf, 0x16u);
              }
              id v39 = v40;
              goto LABEL_101;
            }
            __int16 v117 = v37;
            uint64_t v119 = v36;
            long long v135 = [MEMORY[0x263EFF980] array];
            long long v132 = [MEMORY[0x263EFF9A0] dictionary];
            long long v159 = 0u;
            long long v160 = 0u;
            long long v161 = 0u;
            long long v162 = 0u;
            id v118 = v39;
            id v122 = [v39 services];
            uint64_t v124 = [v122 countByEnumeratingWithState:&v159 objects:v184 count:16];
            if (!v124) {
              goto LABEL_96;
            }
            uint64_t v123 = *(void *)v160;
            while (1)
            {
              uint64_t v45 = 0;
              do
              {
                if (*(void *)v160 != v123) {
                  objc_enumerationMutation(v122);
                }
                uint64_t v125 = v45;
                uint64_t v46 = *(void **)(*((void *)&v159 + 1) + 8 * v45);
                long long v155 = 0u;
                long long v156 = 0u;
                long long v157 = 0u;
                long long v158 = 0u;
                id v143 = [v46 characteristics];
                uint64_t v47 = [v143 countByEnumeratingWithState:&v155 objects:v183 count:16];
                if (v47)
                {
                  uint64_t v48 = v47;
                  uint64_t v49 = *(void *)v156;
                  long long v139 = v46;
                  do
                  {
                    uint64_t v50 = 0;
                    do
                    {
                      if (*(void *)v156 != v49) {
                        objc_enumerationMutation(v143);
                      }
                      id v51 = *(void **)(*((void *)&v155 + 1) + 8 * v50);
                      if ([v51 supportsNotification])
                      {
                        id v52 = [(HMDHome *)v7 hapMetadata];
                        id v53 = [v51 type];
                        id v54 = [v46 type];
                        char v55 = [v52 shouldFilterEnableNotificationsForCharacteristicType:v53 serviceType:v54];

                        if ((v55 & 1) == 0)
                        {
                          long long v145 = [v51 type];
                          id v56 = [v46 type];
                          uint64_t v57 = [(HMDHome *)v7 notificationRegistry];
                          uint64_t v182 = v51;
                          uint64_t v58 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v182 count:1];
                          id v59 = [v57 destinationsRegisteredForNotificationsForCharacteristics:v58];
                          id v60 = (void *)[v59 mutableCopy];

                          uint64_t v61 = [v137 remoteDestinationString];
                          if (v61) {
                            [v60 removeObject:v61];
                          }
                          uint64_t v62 = [v60 count];
                          if (([v140 containsObject:v51] & 1) != 0
                            || ([v51 isNonHomeNotificationsEnabled] & 1) != 0)
                          {
                            goto LABEL_73;
                          }
                          long long v63 = [(HMDHome *)v141 hapMetadata];
                          if (([v63 requiresDeviceUnlock:v145 forService:v56] & 1) == 0)
                          {
                            long long v64 = [(HMDHome *)v141 hapMetadata];
                            if (([v64 shouldAutoEnableNotificationForCharacteristic:v145 ofService:v56] & 1) == 0&& (!objc_msgSend(v145, "isEqualToString:", @"000000A6-0000-1000-8000-0026BB765291")|| (objc_msgSend(v56, "isEqualToString:", v126) & 1) == 0))
                            {
                              if (v133)
                              {
                                __int16 v127 = [(HMDHome *)v141 hapMetadata];
                                char objb = [v127 shouldEnableHomeNotificationForCharacteristicType:v145 serviceType:v56];

                                if (objb) {
                                  goto LABEL_73;
                                }
                              }
                              else
                              {
                              }
                              if (v62)
                              {
LABEL_73:
                                if (v136
                                  && [v51 isNotificationEnabledForClientIdentifierPrefix:@"com.apple.HomeKitDaemon.Local"])
                                {
                                  long long v65 = (void *)MEMORY[0x230FBD990]();
                                  long long v66 = v141;
                                  long long v67 = HMFGetOSLogHandle();
                                  if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
                                  {
                                    HMFGetLogIdentifier();
                                    long long v68 = obja = v65;
                                    *(_DWORD *)buf = 138543618;
                                    long long v190 = v68;
                                    __int16 v191 = 2112;
                                    id v192 = v51;
                                    _os_log_impl(&dword_22F52A000, v67, OS_LOG_TYPE_INFO, "%{public}@Dropping characteristic for remote notifications from primary resident because it should be local only: %@", buf, 0x16u);

                                    long long v65 = obja;
                                  }
                                }
                                else
                                {
                                  long long v69 = [v51 instanceID];
                                  [v135 addObject:v69];

                                  long long v70 = [v51 changeThresholdForEnabledNotifications];
                                  if (v70 && !v133)
                                  {
                                    long long v71 = [v51 instanceID];
                                    long long v72 = [v71 stringValue];
                                    [v132 setObject:v70 forKeyedSubscript:v72];
                                  }
                                }
                              }

                              id v7 = v141;
                              uint64_t v46 = v139;
                              goto LABEL_83;
                            }
                          }
                          goto LABEL_73;
                        }
                      }
LABEL_83:
                      ++v50;
                    }
                    while (v48 != v50);
                    uint64_t v73 = [v143 countByEnumeratingWithState:&v155 objects:v183 count:16];
                    uint64_t v48 = v73;
                  }
                  while (v73);
                }

                uint64_t v45 = v125 + 1;
              }
              while (v125 + 1 != v124);
              uint64_t v124 = [v122 countByEnumeratingWithState:&v159 objects:v184 count:16];
              if (!v124)
              {
LABEL_96:

                long long v74 = [v117 uuid];
                long long v75 = [v74 UUIDString];

                if ([v135 count])
                {
                  long long v76 = (void *)[v135 copy];
                  [v121 setObject:v76 forKeyedSubscript:v75];
                }
                uint64_t v35 = v114;
                uint64_t v34 = v115;
                uint64_t v36 = v119;
                if ([v132 count])
                {
                  long long v77 = (void *)[v132 copy];
                  [v120 setObject:v77 forKeyedSubscript:v75];
                }
                id v39 = v118;
                break;
              }
            }
          }
LABEL_101:

          ++v36;
        }
        while (v36 != v34);
        uint64_t v34 = [v116 countByEnumeratingWithState:&v163 objects:v185 count:16];
      }
      while (v34);
    }

    id v144 = [MEMORY[0x263EFF980] array];
    [v121 count];
    long long v151 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    uint64_t v146 = [(HMDHome *)v7 actionSets];
    uint64_t v78 = [v146 countByEnumeratingWithState:&v151 objects:v181 count:16];
    if (v78)
    {
      uint64_t v79 = v78;
      uint64_t v80 = *(void *)v152;
      do
      {
        for (uint64_t k = 0; k != v79; ++k)
        {
          if (*(void *)v152 != v80) {
            objc_enumerationMutation(v146);
          }
          long long v82 = *(void **)(*((void *)&v151 + 1) + 8 * k);
          __int16 v83 = [(HMDHome *)v7 notificationRegistry];
          uint64_t v84 = [HMDActionSetResponse alloc];
          uint64_t v85 = [v82 uuid];
          uint64_t v86 = [(HMDActionSetResponse *)v84 initWithActionSetUUID:v85 state:0];
          uint64_t v180 = v86;
          id v87 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v180 count:1];
          BOOL v88 = [v83 destinationsRegisteredForNotificationsForActionSetResponses:v87];
          long long v89 = (void *)[v88 mutableCopy];

          __int16 v90 = [v137 remoteDestinationString];
          if (v90) {
            [v89 removeObject:v90];
          }
          id v7 = v141;
          if ([v89 count]
            || ([(HMDHome *)v141 actionSetStateSubscriptionManager],
                id v91 = objc_claimAutoreleasedReturnValue(),
                [v82 uuid],
                uint64_t v92 = objc_claimAutoreleasedReturnValue(),
                int v93 = [v91 isMonitoringActionSet:v92],
                v92,
                v91,
                v93))
          {
            if (v136)
            {
              long long v94 = (void *)MEMORY[0x230FBD990]();
              long long v95 = v141;
              long long v96 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
              {
                long long v97 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                long long v190 = v97;
                __int16 v191 = 2112;
                id v192 = v82;
                _os_log_impl(&dword_22F52A000, v96, OS_LOG_TYPE_INFO, "%{public}@Dropping action set for remote notifications from primary resident because it should be local only: %@", buf, 0x16u);
              }
              id v7 = v141;
            }
            else
            {
              long long v98 = [v82 uuid];
              long long v99 = [v98 UUIDString];
              [v144 addObject:v99];
            }
          }
        }
        uint64_t v79 = [v146 countByEnumeratingWithState:&v151 objects:v181 count:16];
      }
      while (v79);
    }

    if ([v121 count] || objc_msgSend(v144, "count"))
    {
      long long v149 = 0u;
      long long v150 = 0u;
      long long v147 = 0u;
      long long v148 = 0u;
      id v100 = v113;
      uint64_t v101 = [v100 countByEnumeratingWithState:&v147 objects:v179 count:16];
      if (v101)
      {
        uint64_t v102 = v101;
        uint64_t v103 = *(void *)v148;
        do
        {
          for (uint64_t m = 0; m != v102; ++m)
          {
            if (*(void *)v148 != v103) {
              objc_enumerationMutation(v100);
            }
            uint64_t v105 = *(void *)(*((void *)&v147 + 1) + 8 * m);
            long long v106 = (void *)[v121 copy];
            long long v107 = (void *)[0 copy];
            uint64_t v108 = (void *)[v144 copy];
            [(HMDHome *)v7 _modifyCharacteristicNotifications:v106 characteristicChangeThresholds:v120 mediaNotifications:v107 actionSetNotificationPayload:v108 enableNotification:1 withDevice:v105];
          }
          uint64_t v102 = [v100 countByEnumeratingWithState:&v147 objects:v179 count:16];
        }
        while (v102);
      }
    }
    else
    {
      id v109 = (void *)MEMORY[0x230FBD990]();
      int v110 = v7;
      uint64_t v111 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
      {
        uint64_t v112 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v190 = v112;
        _os_log_impl(&dword_22F52A000, v111, OS_LOG_TYPE_INFO, "%{public}@There are no characteristics/media properties requiring registration", buf, 0xCu);
      }
    }

    id v4 = v113;
  }
}

- (void)enableNotificationsForDevices:(id)a3
{
  id v4 = a3;
  int v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __41__HMDHome_enableNotificationsForDevices___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __41__HMDHome_enableNotificationsForDevices___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _enableNotificationsForDevices:*(void *)(a1 + 40)];
}

- (void)_modifyCharacteristicNotificationsOnResident:(id)a3 characteristicChangeThresholds:(id)a4 mediaNotifications:(id)a5 actionSetNotificationPayload:(id)a6 matterAttributeNotifications:(id)a7 enableNotification:(BOOL)a8
{
  uint64_t v8 = a8;
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  uint64_t v19 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v19);

  id v20 = [(HMDHome *)self primaryResident];
  isWatch();
  if (v20)
  {
    id v21 = [v20 device];
    char v22 = [v21 isCurrentDevice];

    if ((v22 & 1) == 0)
    {
      uint64_t v23 = [v20 device];
      context = (void *)MEMORY[0x230FBD990]();
      uint64_t v24 = self;
      uint64_t v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v26 = v28 = v8;
        id v27 = "Disabling";
        *(_DWORD *)buf = 138543874;
        BOOL v31 = v26;
        if (v28) {
          id v27 = "Enabling";
        }
        __int16 v32 = 2080;
        uint64_t v33 = v27;
        __int16 v34 = 2112;
        uint64_t v35 = v23;
        _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_INFO, "%{public}@%s notifications with resident %@", buf, 0x20u);

        uint64_t v8 = v28;
      }

      [(HMDHome *)v24 _modifyCharacteristicNotifications:v14 characteristicChangeThresholds:v15 mediaNotifications:v16 actionSetNotificationPayload:v17 matterAttributeNotifications:v18 enableNotification:v8 withDevice:v23 completion:0];
    }
  }
}

- (void)_subscribeForHomeNotificationsFromRemoteGateway:(BOOL)a3 accessories:(id)a4
{
  BOOL v4 = a3;
  uint64_t v56 = *MEMORY[0x263EF8340];
  id v6 = a4;
  id v7 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v7);

  id v46 = 0;
  id v47 = 0;
  id v44 = 0;
  id v45 = 0;
  id v43 = 0;
  -[HMDHome _notificationPayloadsForRemoteGateway:accessories:enableCharacteristicNotificationPayload:characteristicNotificationThresholdsPayload:disableCharacteristicNotificationPayload:enableMediaNotificationPayload:disableMediaNotificationPayload:](self, v4, v6, &v47, &v46, &v45, &v44, &v43);
  id v42 = v47;
  id v8 = v46;
  id v9 = v45;
  id v10 = v44;
  id v11 = v43;
  if ([v9 count]
    || [v42 count]
    || [v11 count]
    || [v10 count])
  {
    if ([v42 count] || objc_msgSend(v10, "count"))
    {
      id v12 = (void *)MEMORY[0x230FBD990]();
      uint64_t v13 = self;
      id v14 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        uint64_t v36 = v12;
        id v16 = v15 = v10;
        HMFBooleanToString();
        id v17 = v37 = v11;
        [v42 shortDescription];
        id v38 = v9;
        id v18 = v40 = v6;
        [v15 shortDescription];
        v20 = id v19 = v8;
        *(_DWORD *)buf = 138544130;
        uint64_t v49 = v16;
        __int16 v50 = 2112;
        id v51 = v17;
        __int16 v52 = 2112;
        id v53 = v18;
        __int16 v54 = 2112;
        char v55 = v20;
        _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Registering notifications with remote gateway when notificationEnabled: %@, characteristics: %@, properties: %@", buf, 0x2Au);

        id v8 = v19;
        id v9 = v38;
        id v6 = v40;

        id v11 = v37;
        id v10 = v15;
      }

      [(HMDHome *)v13 _modifyCharacteristicNotificationsOnResident:v42 characteristicChangeThresholds:v8 mediaNotifications:v10 actionSetNotificationPayload:MEMORY[0x263EFFA68] matterAttributeNotifications:0 enableNotification:1];
    }
    if (objc_msgSend(v9, "count", v36) || objc_msgSend(v11, "count"))
    {
      id v21 = (void *)MEMORY[0x230FBD990]();
      char v22 = self;
      uint64_t v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        uint64_t v24 = v39 = v10;
        HMFBooleanToString();
        uint64_t v25 = v41 = v6;
        [v9 shortDescription];
        v27 = id v26 = v8;
        [v11 shortDescription];
        v29 = id v28 = v11;
        *(_DWORD *)buf = 138544130;
        uint64_t v49 = v24;
        __int16 v50 = 2112;
        id v51 = v25;
        __int16 v52 = 2112;
        id v53 = v27;
        __int16 v54 = 2112;
        char v55 = v29;
        _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@De-registering notifications with remote gateway when notificationEnabled: %@, characteristics: %@, properties: %@", buf, 0x2Au);

        id v11 = v28;
        id v8 = v26;

        id v6 = v41;
        id v10 = v39;
      }

      [(HMDHome *)v22 _modifyCharacteristicNotificationsOnResident:v9 characteristicChangeThresholds:0 mediaNotifications:v11 actionSetNotificationPayload:MEMORY[0x263EFFA68] matterAttributeNotifications:0 enableNotification:0];
    }
  }
  else
  {
    id v30 = v11;
    id v31 = v10;
    __int16 v32 = (void *)MEMORY[0x230FBD990]();
    uint64_t v33 = self;
    __int16 v34 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      uint64_t v35 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v49 = v35;
      _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_INFO, "%{public}@Not registering notifications with remote gateway since we have no modifications", buf, 0xCu);
    }
    id v10 = v31;
    id v11 = v30;
  }
}

- (void)_subscribeForHomeNotificationsFromRemoteGateway:(BOOL)a3
{
  BOOL v3 = a3;
  id v5 = [(HMDHome *)self accessories];
  [(HMDHome *)self _subscribeForHomeNotificationsFromRemoteGateway:v3 accessories:v5];
}

- (void)subscribeForNotificationsFromRemoteGateway
{
  BOOL v3 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __53__HMDHome_subscribeForNotificationsFromRemoteGateway__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

void __53__HMDHome_subscribeForNotificationsFromRemoteGateway__block_invoke(uint64_t a1)
{
}

- (void)_remotelySetNotificationsEnabled:(BOOL)a3 forMatterAttributes:(id)a4
{
  BOOL v4 = a3;
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v6 = a4;
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = self;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    id v17 = v10;
    __int16 v18 = 1024;
    BOOL v19 = v4;
    __int16 v20 = 2112;
    id v21 = v6;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Setting remote notifications enabled=%{BOOL}d and adding matter attributes to registration payload. Attributes=%@", buf, 0x1Cu);
  }
  if (v4)
  {
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    v15[2] = __64__HMDHome__remotelySetNotificationsEnabled_forMatterAttributes___block_invoke;
    v15[3] = &unk_264A2B368;
    void v15[4] = v8;
    objc_msgSend(v6, "na_each:", v15);
    [(HMDHome *)v8 _createModifyNotificationsCoalesceTimerIfNeeded];
  }
  else
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = v8;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v17 = v14;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Currently unsubscribing from Matter attributes is not supported. rdar://121935520 (Provide API for unsubscribing to attribute notifications)", buf, 0xCu);
    }
  }
}

void __64__HMDHome__remotelySetNotificationsEnabled_forMatterAttributes___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend(v3, "hmf_numberForKey:", @"HMDHomeCHIPNodeIDMessageKey");
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  BOOL v4 = objc_msgSend(v3, "hmf_numberForKey:", @"HMDHomeCHIPEndpointIDMessageKey");
  id v5 = objc_msgSend(v3, "hmf_numberForKey:", @"HMDHomeCHIPClusterIDMessageKey");
  id v6 = objc_msgSend(v3, "hmf_numberForKey:", @"HMDHomeCHIPAttributeIDMessageKey");

  id v7 = [*(id *)(a1 + 32) matterAttributesEnableNotificationPayload];
  id v8 = [v7 objectForKeyedSubscript:v18];

  if (!v8)
  {
    id v8 = [MEMORY[0x263EFF9A0] dictionary];
    id v9 = [*(id *)(a1 + 32) matterAttributesEnableNotificationPayload];
    [v9 setObject:v8 forKeyedSubscript:v18];

    id v10 = [MEMORY[0x263EFF9A0] dictionary];
    [v8 setObject:v10 forKeyedSubscript:@"HMDHomeCHIPEndpointsMessageKey"];

    [v8 setObject:MEMORY[0x263EFFA80] forKeyedSubscript:@"HMDHomeCHIPWildcardMessageKey"];
  }
  if ((objc_msgSend(v8, "hmf_BOOLForKey:", @"HMDHomeCHIPWildcardMessageKey") & 1) == 0)
  {
    if (v4)
    {
      id v11 = [v8 objectForKeyedSubscript:@"HMDHomeCHIPEndpointsMessageKey"];
      id v12 = [v11 objectForKeyedSubscript:v4];
      if (!v12)
      {
        id v12 = [MEMORY[0x263EFF9A0] dictionary];
        [v11 setObject:v12 forKeyedSubscript:v4];
        uint64_t v13 = [MEMORY[0x263EFF9A0] dictionary];
        [v12 setObject:v13 forKeyedSubscript:@"HMDHomeCHIPClustersMessageKey"];

        [v12 setObject:MEMORY[0x263EFFA80] forKeyedSubscript:@"HMDHomeCHIPWildcardMessageKey"];
      }
      if ((objc_msgSend(v12, "hmf_BOOLForKey:", @"HMDHomeCHIPWildcardMessageKey") & 1) == 0)
      {
        if (v5)
        {
          id v14 = [v12 objectForKeyedSubscript:@"HMDHomeCHIPClustersMessageKey"];
          id v15 = [v14 objectForKeyedSubscript:v5];
          if (!v15)
          {
            id v15 = [MEMORY[0x263EFF9A0] dictionary];
            [v14 setObject:v15 forKeyedSubscript:v5];
            id v16 = [MEMORY[0x263EFF980] array];
            [v15 setObject:v16 forKeyedSubscript:@"HMDHomeCHIPAttributesMessageKey"];

            [v15 setObject:MEMORY[0x263EFFA80] forKeyedSubscript:@"HMDHomeCHIPWildcardMessageKey"];
          }
          if ((objc_msgSend(v15, "hmf_BOOLForKey:", @"HMDHomeCHIPWildcardMessageKey") & 1) == 0)
          {
            if (v6)
            {
              id v17 = [v15 objectForKeyedSubscript:@"HMDHomeCHIPAttributesMessageKey"];
              if (([v17 containsObject:v6] & 1) == 0) {
                [v17 addObject:v6];
              }
            }
            else
            {
              [v15 setObject:MEMORY[0x263EFFA88] forKeyedSubscript:@"HMDHomeCHIPWildcardMessageKey"];
              [v15 setObject:MEMORY[0x263EFFA68] forKeyedSubscript:@"HMDHomeCHIPAttributesMessageKey"];
            }
          }
        }
        else
        {
          [v12 setObject:MEMORY[0x263EFFA88] forKeyedSubscript:@"HMDHomeCHIPWildcardMessageKey"];
          [v12 setObject:MEMORY[0x263EFFA78] forKeyedSubscript:@"HMDHomeCHIPClustersMessageKey"];
        }
      }
    }
    else
    {
      [v8 setObject:MEMORY[0x263EFFA88] forKeyedSubscript:@"HMDHomeCHIPWildcardMessageKey"];
      [v8 setObject:MEMORY[0x263EFFA78] forKeyedSubscript:@"HMDHomeCHIPEndpointsMessageKey"];
    }
  }
}

- (void)remotelySetNotificationsEnabled:(BOOL)a3 forMatterAttributes:(id)a4
{
  id v6 = a4;
  id v7 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __63__HMDHome_remotelySetNotificationsEnabled_forMatterAttributes___block_invoke;
  block[3] = &unk_264A2DFC8;
  BOOL v11 = a3;
  void block[4] = self;
  id v10 = v6;
  id v8 = v6;
  dispatch_async(v7, block);
}

uint64_t __63__HMDHome_remotelySetNotificationsEnabled_forMatterAttributes___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _remotelySetNotificationsEnabled:*(unsigned __int8 *)(a1 + 48) forMatterAttributes:*(void *)(a1 + 40)];
}

- (void)_createModifyNotificationsCoalesceTimerIfNeeded
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  BOOL v4 = [(HMDHome *)self modifyNotificationsCoalesceTimer];

  if (!v4)
  {
    id v5 = (void *)[objc_alloc(MEMORY[0x263F42658]) initWithTimeInterval:0 options:0.5];
    [(HMDHome *)self setModifyNotificationsCoalesceTimer:v5];

    id v6 = [(HMDHome *)self workQueue];
    id v7 = [(HMDHome *)self modifyNotificationsCoalesceTimer];
    [v7 setDelegateQueue:v6];

    id v8 = [(HMDHome *)self modifyNotificationsCoalesceTimer];
    [v8 setDelegate:self];

    id v9 = [(HMDHome *)self modifyNotificationsCoalesceTimer];
    [v9 resume];

    id v10 = (void *)MEMORY[0x230FBD990]();
    BOOL v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v14 = 138543618;
      id v15 = v13;
      __int16 v16 = 2112;
      id v17 = v11;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@%@ Kicked off the modify notifications on resident request timer", (uint8_t *)&v14, 0x16u);
    }
  }
}

- (void)_remotelySetNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 characteristicChangeThresholds:(id)a5
{
  BOOL v6 = a3;
  uint64_t v65 = *MEMORY[0x263EF8340];
  id v8 = a4;
  id v47 = a5;
  id v9 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v9);

  BOOL v52 = v6;
  if (v6)
  {
    uint64_t v49 = [(HMDHome *)self enableNotificationPayload];
    [(HMDHome *)self disableNotificationPayload];
  }
  else
  {
    uint64_t v49 = [(HMDHome *)self disableNotificationPayload];
    [(HMDHome *)self enableNotificationPayload];
  uint64_t v48 = };
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  obuint64_t j = v8;
  uint64_t v51 = [obj countByEnumeratingWithState:&v54 objects:v64 count:16];
  if (v51)
  {
    uint64_t v50 = *(void *)v55;
    *(void *)&long long v10 = 138543874;
    long long v44 = v10;
    id v45 = self;
    do
    {
      for (uint64_t i = 0; i != v51; ++i)
      {
        if (*(void *)v55 != v50) {
          objc_enumerationMutation(obj);
        }
        id v12 = *(void **)(*((void *)&v54 + 1) + 8 * i);
        uint64_t v13 = objc_msgSend(v12, "accessory", v44);
        int v14 = [v13 uuid];
        id v15 = [v14 UUIDString];

        if (v15)
        {
          __int16 v16 = [v49 objectForKeyedSubscript:v15];
          if (!v16)
          {
            __int16 v16 = [MEMORY[0x263EFF980] array];
            [v49 setObject:v16 forKeyedSubscript:v15];
          }
          id v17 = [v12 instanceID];
          char v18 = [v16 containsObject:v17];

          if ((v18 & 1) == 0)
          {
            BOOL v19 = [v12 instanceID];
            [v16 addObject:v19];
          }
          __int16 v20 = [v48 objectForKeyedSubscript:v15];

          id v21 = [v12 instanceID];
          int v22 = [v20 containsObject:v21];

          if (v22)
          {
            uint64_t v23 = [v12 instanceID];
            [v20 removeObject:v23];

            uint64_t v24 = (void *)MEMORY[0x230FBD990]();
            uint64_t v25 = self;
            id v26 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              id v27 = HMFGetLogIdentifier();
              id v28 = HMFBooleanToString();
              *(_DWORD *)buf = v44;
              id v59 = v27;
              __int16 v60 = 2112;
              uint64_t v61 = v28;
              __int16 v62 = 2112;
              long long v63 = v12;
              _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Function call to set notification to %@, removing the entry %@ from the other payload", buf, 0x20u);

              self = v45;
            }

            if (![v20 count]) {
              [v48 removeObjectForKey:v15];
            }
          }
          v53[0] = MEMORY[0x263EF8330];
          v53[1] = 3221225472;
          v53[2] = __94__HMDHome__remotelySetNotificationsEnabled_forCharacteristics_characteristicChangeThresholds___block_invoke;
          v53[3] = &unk_264A1C7F8;
          void v53[4] = v12;
          id v29 = objc_msgSend(v47, "na_firstObjectPassingTest:", v53);
          id v30 = [v29 threshold];

          if (v52 && v30)
          {
            id v31 = [(HMDHome *)self pendingCharacteristicThresholdPayload];
            __int16 v32 = [v31 objectForKeyedSubscript:v15];

            if (!v32)
            {
              __int16 v32 = [MEMORY[0x263EFF9A0] dictionary];
              uint64_t v33 = [(HMDHome *)self pendingCharacteristicThresholdPayload];
              [v33 setObject:v32 forKeyedSubscript:v15];
            }
            __int16 v34 = [v12 instanceID];
            uint64_t v35 = [v34 stringValue];
            [v32 setObject:v30 forKeyedSubscript:v35];
          }
          if (!v52)
          {
            uint64_t v36 = [(HMDHome *)self pendingCharacteristicThresholdPayload];
            id v37 = [v36 objectForKeyedSubscript:v15];
            id v38 = [v12 instanceID];
            id v39 = [v38 stringValue];
            [v37 setObject:0 forKeyedSubscript:v39];

            self = v45;
            id v40 = [(HMDHome *)v45 pendingCharacteristicThresholdPayload];
            id v41 = [v40 objectForKeyedSubscript:v15];
            uint64_t v42 = [v41 count];

            if (!v42)
            {
              id v43 = [(HMDHome *)v45 pendingCharacteristicThresholdPayload];
              [v43 setObject:0 forKeyedSubscript:v15];
            }
          }
        }
      }
      uint64_t v51 = [obj countByEnumeratingWithState:&v54 objects:v64 count:16];
    }
    while (v51);
  }

  if ([v49 count] || objc_msgSend(v48, "count")) {
    [(HMDHome *)self _createModifyNotificationsCoalesceTimerIfNeeded];
  }
}

BOOL __94__HMDHome__remotelySetNotificationsEnabled_forCharacteristics_characteristicChangeThresholds___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 characteristic];
  BOOL v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

- (void)remotelySetNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 characteristicChangeThresholds:(id)a5
{
  id v8 = a4;
  id v9 = a5;
  long long v10 = [(HMDHome *)self workQueue];
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  void v13[2] = __93__HMDHome_remotelySetNotificationsEnabled_forCharacteristics_characteristicChangeThresholds___block_invoke;
  v13[3] = &unk_264A2B1D8;
  BOOL v16 = a3;
  void v13[4] = self;
  id v14 = v8;
  id v15 = v9;
  id v11 = v9;
  id v12 = v8;
  dispatch_async(v10, v13);
}

uint64_t __93__HMDHome_remotelySetNotificationsEnabled_forCharacteristics_characteristicChangeThresholds___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _remotelySetNotificationsEnabled:*(unsigned __int8 *)(a1 + 56) forCharacteristics:*(void *)(a1 + 40) characteristicChangeThresholds:*(void *)(a1 + 48)];
}

- (void)redispatchToResidentMessage:(id)a3 target:(id)a4 responseQueue:(id)a5 viaDevice:(id)a6
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  id v88 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = a6;
  id v87 = v12;
  if (v10)
  {
    id v13 = v88;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v14 = v13;
    }
    else {
      id v14 = 0;
    }
    id v15 = v14;

    if (v15) {
      BOOL v16 = (HMDAssertionLogEvent *)v13;
    }
    else {
      BOOL v16 = (HMDAssertionLogEvent *)[v13 mutableCopy];
    }
    id v17 = v16;

    char v18 = [(HMDAssertionLogEvent *)v17 responseHandler];
    if (v18)
    {
      v89[0] = MEMORY[0x263EF8330];
      v89[1] = 3221225472;
      v89[2] = __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke;
      v89[3] = &unk_264A2B228;
      id v90 = v11;
      id v91 = v18;
      [(HMDAssertionLogEvent *)v17 setResponseHandler:v89];
    }
    BOOL v19 = [(HMDAssertionLogEvent *)v17 name];
    int v20 = [v19 isEqualToString:@"kMultipleCharacteristicWriteRequestKey"];

    if (!isiOSDevice()) {
      goto LABEL_15;
    }
    if (redispatchToResidentMessage_target_responseQueue_viaDevice__pred != -1) {
      dispatch_once(&redispatchToResidentMessage_target_responseQueue_viaDevice__pred, &__block_literal_global_855);
    }
    id v21 = (void *)redispatchToResidentMessage_target_responseQueue_viaDevice___restrictedToLocalMessages;
    int v22 = [(HMDAssertionLogEvent *)v17 name];
    LODWORD(v21) = [v21 containsObject:v22];

    if (!v21) {
      goto LABEL_15;
    }
    uint64_t v23 = [(HMDHome *)self currentUser];
    char v24 = [v23 isRemoteAccessAllowed];

    if ((v24 & 1) == 0)
    {
      long long v68 = (void *)MEMORY[0x230FBD990]();
      long long v69 = self;
      long long v70 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
      {
        long long v71 = HMFGetLogIdentifier();
        [(HMDHome *)v69 currentUser];
        v72 = uint64_t v86 = v68;
        [v72 displayName];
        uint64_t v73 = v81 = v10;
        *(_DWORD *)buf = 138543618;
        int v93 = v71;
        __int16 v94 = 2112;
        long long v95 = v73;
        _os_log_impl(&dword_22F52A000, v70, OS_LOG_TYPE_INFO, "%{public}@Remote access is disabled for the user %@, restricting to local transports...", buf, 0x16u);

        long long v68 = v86;
        id v10 = v81;
      }
      int v25 = 1;
    }
    else
    {
LABEL_15:
      int v25 = 0;
    }
    id v26 = [(HMDAssertionLogEvent *)v17 messagePayload];
    id v27 = (void *)[v26 mutableCopy];

    if (v25) {
      [(HMDAssertionLogEvent *)v17 setRemoteDisallowsIDSRacing:1];
    }
    uint64_t v28 = [MEMORY[0x263F424F0] currentActivity];
    id v29 = (void *)v28;
    id v30 = v87;
    uint64_t v85 = v27;
    if (v87)
    {
      long long v82 = (void *)v28;
      id v31 = v18;
      id v32 = v11;
      [(HMDAssertionLogEvent *)v17 setSecureRemote:1];
      id v33 = v10;
      __int16 v34 = [[HMDRemoteDeviceMessageDestination alloc] initWithTarget:v10 device:v87];
      [(HMDAssertionLogEvent *)v17 setDestination:v34];

      [v27 setObject:0 forKeyedSubscript:@"kIDSMessageSourceIDKey"];
      uint64_t v35 = (void *)MEMORY[0x230FBD990]([(HMDAssertionLogEvent *)v17 setMessagePayload:v27]);
      uint64_t v36 = self;
      id v37 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        id v38 = HMFGetLogIdentifier();
        id v39 = [(HMDAssertionLogEvent *)v17 shortDescription];
        id v40 = [v87 shortDescription];
        *(_DWORD *)buf = 138543874;
        int v93 = v38;
        __int16 v94 = 2112;
        long long v95 = v39;
        __int16 v96 = 2112;
        long long v97 = v40;
        _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@Redispatching message %@ to device: %@", buf, 0x20u);

        id v30 = v87;
      }

      [(HMDAssertionLogEvent *)v17 name];

      [(HMDAssertionLogEvent *)v17 identifier];
      [v30 identifier];

      id v41 = +[HMDSecureRemoteMessageTransport defaultTransport];
      uint64_t v42 = (void *)[(HMDAssertionLogEvent *)v17 copy];
      [v41 sendMessage:v42 completionHandler:0];
      id v10 = v33;
      id v11 = v32;
      char v18 = v31;
      id v29 = v82;
    }
    else
    {
      id v80 = v10;
      id v43 = (void *)MEMORY[0x230FBD990]();
      long long v44 = self;
      id v45 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        id v46 = HMFGetLogIdentifier();
        id v47 = [(HMDAssertionLogEvent *)v17 shortDescription];
        *(_DWORD *)buf = 138543618;
        int v93 = v46;
        __int16 v94 = 2112;
        long long v95 = v47;
        _os_log_impl(&dword_22F52A000, v45, OS_LOG_TYPE_INFO, "%{public}@Redispatching message %@ to resident", buf, 0x16u);
      }
      uint64_t v48 = [(HMDHome *)v44 homeManager];
      uint64_t v49 = [v48 messageDispatcher];
      id v41 = [v49 residentCommunicationHandlerForHome:v44];

      uint64_t v50 = [v41 preferredDevice];
      if (v50)
      {
        uint64_t v42 = (void *)v50;
        if (v20) {
          [v85 setObject:0 forKeyedSubscript:@"kMultiPartResponseKey"];
        }
        uint64_t v51 = (void *)MEMORY[0x230FBD990]([(HMDAssertionLogEvent *)v17 setMessagePayload:v85]);
        BOOL v52 = v44;
        id v53 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          long long v54 = v79 = v51;
          [(HMDAssertionLogEvent *)v17 shortDescription];
          __int16 v83 = v29;
          long long v55 = v18;
          v57 = id v56 = v11;
          uint64_t v58 = [v42 shortDescription];
          *(_DWORD *)buf = 138543874;
          int v93 = v54;
          __int16 v94 = 2112;
          long long v95 = v57;
          __int16 v96 = 2112;
          long long v97 = v58;
          _os_log_impl(&dword_22F52A000, v53, OS_LOG_TYPE_INFO, "%{public}@Redispatching message %@ to remote device: %@", buf, 0x20u);

          id v11 = v56;
          char v18 = v55;
          id v29 = v83;

          uint64_t v51 = v79;
        }

        id v10 = v80;
        [v41 redispatchMessage:v17 target:v80 responseQueue:v11];
      }
      else
      {
        id v59 = (void *)MEMORY[0x230FBD990]();
        __int16 v60 = v44;
        uint64_t v61 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          __int16 v62 = HMFGetLogIdentifier();
          [(HMDAssertionLogEvent *)v17 shortDescription];
          uint64_t v84 = v29;
          long long v63 = v18;
          v65 = id v64 = v11;
          long long v66 = [(HMDHome *)v60 shortDescription];
          *(_DWORD *)buf = 138543874;
          int v93 = v62;
          __int16 v94 = 2112;
          long long v95 = v65;
          __int16 v96 = 2112;
          long long v97 = v66;
          _os_log_impl(&dword_22F52A000, v61, OS_LOG_TYPE_INFO, "%{public}@Cannot redispatch message %@ because there is no resident configured for home: %@", buf, 0x20u);

          id v11 = v64;
          char v18 = v63;
          id v29 = v84;
        }
        [(HMDHome *)v60 uuid];

        long long v67 = [MEMORY[0x263F087E8] hmErrorWithCode:4];
        [(HMDAssertionLogEvent *)v17 respondWithError:v67];

        uint64_t v42 = 0;
        id v10 = v80;
      }
      id v30 = 0;
    }
  }
  else
  {
    id v30 = v12;
    long long v74 = (void *)MEMORY[0x230FBD990]();
    long long v75 = self;
    long long v76 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      v78 = id v77 = v11;
      *(_DWORD *)buf = 138543362;
      int v93 = v78;
      _os_log_impl(&dword_22F52A000, v76, OS_LOG_TYPE_FAULT, "%{public}@Submitting ABC event for failure: TargetUUID cannot be nil", buf, 0xCu);

      id v11 = v77;
      id v30 = v87;
    }

    id v17 = [[HMDAssertionLogEvent alloc] initWithReason:@"TargetUUID cannot be nil"];
    char v18 = +[HMDMetricsManager sharedLogEventSubmitter];
    [v18 submitLogEvent:v17];
  }
}

void __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke_2;
  block[3] = &unk_264A2EE80;
  id v7 = *(NSObject **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

void __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke_3()
{
  v2[8] = *MEMORY[0x263EF8340];
  v2[0] = @"kCharacteristicWriteRequestKey";
  v2[1] = @"kCharacteristicReadRequestKey";
  v2[2] = @"kMultipleCharacteristicWriteRequestKey";
  v2[3] = @"kMultipleCharacteristicReadRequestKey";
  v2[4] = @"kIdentifyAccessoryRequestKey";
  v2[5] = @"kMediaPropertiesWriteRequestKey";
  v2[6] = @"kMediaPropertiesReadRequestKey";
  v2[7] = @"HMDHomeSetNaturalLightingEnabledForLightProfilesMessage";
  uint64_t v0 = [MEMORY[0x263EFF8C0] arrayWithObjects:v2 count:8];
  uint64_t v1 = (void *)redispatchToResidentMessage_target_responseQueue_viaDevice___restrictedToLocalMessages;
  redispatchToResidentMessage_target_responseQueue_viaDevice___restrictedToLocalMessages = v0;
}

uint64_t __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke_2(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

- (void)redispatchToResidentMessage:(id)a3 target:(id)a4 responseQueue:(id)a5
{
}

- (void)addCompanionAsResidentUser:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __38__HMDHome_addCompanionAsResidentUser___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __38__HMDHome_addCompanionAsResidentUser___block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) users];
  id v3 = [*(id *)(a1 + 40) userID];
  id v4 = objc_msgSend(v2, "hmf_firstObjectWithValue:forKeyPath:", v3, @"userID");

  if (!v4)
  {
    id v5 = (void *)MEMORY[0x230FBD990]([*(id *)(a1 + 32) _addUserToContainer:*(void *)(a1 + 40)]);
    id v6 = *(id *)(a1 + 32);
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      int v9 = 138543362;
      id v10 = v8;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Added a new resident user", (uint8_t *)&v9, 0xCu);
    }
  }
  -[HMDHome _subscribeForNotificationFromRemoteGateway:](*(void **)(a1 + 32), 0);
}

- (id)_characteristicNotificationPayloadsOnDirectTransports:(BOOL)a3
{
  BOOL v65 = a3;
  uint64_t v98 = *MEMORY[0x263EF8340];
  long long v66 = [MEMORY[0x263EFF980] array];
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  obuint64_t j = [(HMDHome *)self triggers];
  uint64_t v4 = [obj countByEnumeratingWithState:&v88 objects:v97 count:16];
  long long v71 = self;
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v89;
    do
    {
      uint64_t v7 = 0;
      uint64_t v67 = v5;
      do
      {
        if (*(void *)v89 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(id *)(*((void *)&v88 + 1) + 8 * v7);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          int v9 = v8;
        }
        else {
          int v9 = 0;
        }
        id v10 = v9;

        if ([v10 shouldActivateOnLocalDevice])
        {
          long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          uint64_t v11 = [v10 characteristicEvents];
          uint64_t v12 = [v11 countByEnumeratingWithState:&v84 objects:v96 count:16];
          if (v12)
          {
            uint64_t v13 = v12;
            uint64_t v14 = *(void *)v85;
            do
            {
              for (uint64_t i = 0; i != v13; ++i)
              {
                if (*(void *)v85 != v14) {
                  objc_enumerationMutation(v11);
                }
                BOOL v16 = *(void **)(*((void *)&v84 + 1) + 8 * i);
                id v17 = [v16 characteristic];

                if (v17)
                {
                  char v18 = [v16 characteristic];
                  [v66 addObject:v18];
                }
              }
              uint64_t v13 = [v11 countByEnumeratingWithState:&v84 objects:v96 count:16];
            }
            while (v13);
          }

          self = v71;
          uint64_t v5 = v67;
        }

        ++v7;
      }
      while (v7 != v5);
      uint64_t v5 = [obj countByEnumeratingWithState:&v88 objects:v97 count:16];
    }
    while (v5);
  }

  long long v54 = [MEMORY[0x263EFF9A0] dictionary];
  id v53 = [MEMORY[0x263EFF9A0] dictionary];
  [(HMDHome *)self accessories];
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  id v52 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v56 = [v52 countByEnumeratingWithState:&v80 objects:v95 count:16];
  if (v56)
  {
    uint64_t v55 = *(void *)v81;
    id obja = (id)*MEMORY[0x263F356A0];
    do
    {
      for (uint64_t j = 0; j != v56; ++j)
      {
        if (*(void *)v81 != v55) {
          objc_enumerationMutation(v52);
        }
        int v20 = *(void **)(*((void *)&v80 + 1) + 8 * j);
        id v21 = [MEMORY[0x263EFF980] array];
        int v22 = [MEMORY[0x263EFF980] array];
        id v23 = v20;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          char v24 = v23;
        }
        else {
          char v24 = 0;
        }
        id v25 = v24;

        if (v25)
        {
          id v57 = v23;
          id v58 = v25;
          id v64 = v22;
          long long v68 = v21;
          uint64_t v59 = j;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          id v60 = [v25 services];
          uint64_t v62 = [v60 countByEnumeratingWithState:&v76 objects:v94 count:16];
          if (!v62) {
            goto LABEL_62;
          }
          uint64_t v61 = *(void *)v77;
          while (1)
          {
            uint64_t v26 = 0;
            do
            {
              if (*(void *)v77 != v61) {
                objc_enumerationMutation(v60);
              }
              uint64_t v63 = v26;
              id v27 = *(void **)(*((void *)&v76 + 1) + 8 * v26);
              uint64_t v28 = [v27 type];
              long long v72 = 0u;
              long long v73 = 0u;
              long long v74 = 0u;
              long long v75 = 0u;
              id v29 = [v27 characteristics];
              uint64_t v30 = [v29 countByEnumeratingWithState:&v72 objects:v93 count:16];
              if (v30)
              {
                uint64_t v31 = v30;
                uint64_t v32 = *(void *)v73;
                do
                {
                  uint64_t v33 = 0;
                  do
                  {
                    if (*(void *)v73 != v32) {
                      objc_enumerationMutation(v29);
                    }
                    __int16 v34 = *(void **)(*((void *)&v72 + 1) + 8 * v33);
                    if ([v34 supportsNotification])
                    {
                      uint64_t v35 = [(HMDHome *)self hapMetadata];
                      uint64_t v36 = [v34 type];
                      char v37 = [v35 shouldFilterEnableNotificationsForCharacteristicType:v36 serviceType:v28];

                      if ((v37 & 1) == 0)
                      {
                        if ([v28 isEqualToString:obja])
                        {
                          id v38 = [v34 type];
                          int v39 = [v38 isEqualToString:@"000000A6-0000-1000-8000-0026BB765291"];
                        }
                        else
                        {
                          int v39 = 0;
                        }
                        id v40 = [(HMDHome *)self hapMetadata];
                        id v41 = [v34 type];
                        int v42 = [v40 shouldAutoEnableNotificationForCharacteristic:v41 ofService:v28];

                        if (([v34 isClientNotificationEnabled] & 1) != 0
                          || ([v66 containsObject:v34] & 1) != 0
                          || ([v34 isNonHomeNotificationsEnabled] | v39 | v42) == 1)
                        {
                          id v43 = v68;
                          goto LABEL_50;
                        }
                        if (v65)
                        {
                          long long v44 = [v34 type];
                          id v45 = [(HMDHome *)v71 hapMetadata];
                          int v46 = [v45 shouldEnableHomeNotificationForCharacteristicType:v44 serviceType:v28];

                          if (v46) {
                            [v68 addObject:v34];
                          }
                        }
                        else
                        {
                          id v43 = v64;
LABEL_50:
                          [v43 addObject:v34];
                        }
                        self = v71;
                      }
                    }
                    ++v33;
                  }
                  while (v31 != v33);
                  uint64_t v47 = [v29 countByEnumeratingWithState:&v72 objects:v93 count:16];
                  uint64_t v31 = v47;
                }
                while (v47);
              }

              uint64_t v26 = v63 + 1;
            }
            while (v63 + 1 != v62);
            uint64_t v62 = [v60 countByEnumeratingWithState:&v76 objects:v94 count:16];
            if (!v62)
            {
LABEL_62:

              id v25 = v58;
              uint64_t j = v59;
              id v21 = v68;
              int v22 = v64;
              id v23 = v57;
              break;
            }
          }
        }
        uint64_t v48 = [v23 uuid];
        uint64_t v49 = [v48 UUIDString];

        if ([v21 count]) {
          [v54 setObject:v21 forKeyedSubscript:v49];
        }
        if ([v22 count]) {
          [v53 setObject:v22 forKeyedSubscript:v49];
        }
      }
      uint64_t v56 = [v52 countByEnumeratingWithState:&v80 objects:v95 count:16];
    }
    while (v56);
  }
  v92[0] = v53;
  v92[1] = v54;
  uint64_t v50 = [MEMORY[0x263EFF8C0] arrayWithObjects:v92 count:2];

  return v50;
}

- (void)_handleRemoteGatewayNotificationRegistration:(id)a3 enable:(BOOL)a4
{
  BOOL v17 = a4;
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v5 = a3;
  char v18 = [MEMORY[0x263EFF910] date];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v6 = v5;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v20;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v19 + 1) + 8 * v10);
        uint64_t v12 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v11];
        uint64_t v13 = [(HMDHome *)self accessoryWithUUID:v12];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        id v15 = v14;

        if (v15)
        {
          BOOL v16 = objc_msgSend(v6, "hmf_arrayForKey:", v11);
          if ([v16 count]) {
            [v15 handleRemoteGatewayNotificationRegistration:v16 enable:v17 enableTime:v18];
          }
        }
        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v8);
  }
}

- (BOOL)applyDeviceLockStatus:(id)a3
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([v4 isRemote])
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = self;
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      uint64_t v9 = [v4 shortDescription];
      int v17 = 138543618;
      char v18 = v8;
      __int16 v19 = 2112;
      long long v20 = v9;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@%@ is from remote source; ignoring this device's lock status",
        (uint8_t *)&v17,
        0x16u);
    }
    char v10 = 0;
  }
  else if ([v4 BOOLForKey:@"kApplyDeviceUnlockKey"])
  {
    uint64_t v11 = (void *)MEMORY[0x230FBD990]();
    uint64_t v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v17 = 138543362;
      char v18 = v14;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Treating device as always locked.", (uint8_t *)&v17, 0xCu);
    }
    char v10 = 1;
  }
  else
  {
    id v15 = [(HMDHome *)self deviceLockStateDataSource];
    char v10 = [v15 isLocked];
  }
  return v10;
}

- (id)mediaProfileForAppleMediaAccessoryUUID:(id)a3 mediaStateSubscriber:(id)a4
{
  id v5 = a3;
  id v6 = [(HMDHome *)self appleMediaAccessories];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = __71__HMDHome_mediaProfileForAppleMediaAccessoryUUID_mediaStateSubscriber___block_invoke;
  void v11[3] = &unk_264A2E3A0;
  id v12 = v5;
  id v7 = v5;
  uint64_t v8 = objc_msgSend(v6, "na_firstObjectPassingTest:", v11);
  uint64_t v9 = [v8 mediaProfile];

  return v9;
}

uint64_t __71__HMDHome_mediaProfileForAppleMediaAccessoryUUID_mediaStateSubscriber___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 uuid];
  uint64_t v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v4;
}

- (id)currentAccessoryUUIDsForMediaStateSubscriber:(id)a3
{
  id v3 = [(HMDHome *)self currentAccessory];
  uint64_t v4 = [v3 uuid];

  return v4;
}

- (id)appleMediaAccessoryUUIDsForMediaStateSubscriber:(id)a3
{
  id v3 = [(HMDHome *)self appleMediaAccessories];
  uint64_t v4 = objc_msgSend(v3, "na_map:", &__block_literal_global_842);

  return v4;
}

uint64_t __59__HMDHome_appleMediaAccessoryUUIDsForMediaStateSubscriber___block_invoke(uint64_t a1, void *a2)
{
  return [a2 uuid];
}

- (void)configureMediaGroupsAggregateConsumer
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && ([(id)isFeatureHomeTheaterQFAEnabledForTests BOOLValue] & 1) == 0)
  {
    BOOL v16 = (void *)MEMORY[0x230FBD990]();
    int v17 = self;
    char v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      __int16 v19 = HMFGetLogIdentifier();
      int v20 = 138543362;
      uint64_t v21 = v19;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is disabled", (uint8_t *)&v20, 0xCu);
    }
  }
  else
  {
    id v3 = [(HMDHome *)self homeManager];
    uint64_t v4 = [(HMDHome *)self uuid];
    id v5 = [(HMDHome *)self notificationCenter];
    id v6 = [v3 localAndRemoteSubscriptionProvider];
    uint64_t v7 = [v3 userDefaults];
    uint64_t v8 = (void *)v7;
    if (v6 && v4 && v5 && v7)
    {
      uint64_t v9 = [[HMDMediaGroupsStageManager alloc] initWithIdentifier:v4 userDefaults:v7];
      char v10 = [[HMDMediaGroupsAggregateConsumer alloc] initWithIdentifier:v4 subscriptionProvider:v6 notificationCenter:v5 stageManager:v9];
      mediaGroupsAggregateConsumer = self->_mediaGroupsAggregateConsumer;
      self->_mediaGroupsAggregateConsumer = v10;

      [(HMDMediaGroupsStageManager *)v9 setDelegate:self->_mediaGroupsAggregateConsumer];
      [(HMDMediaGroupsAggregateConsumer *)self->_mediaGroupsAggregateConsumer setDelegate:self];
      [(HMDMediaGroupsAggregateConsumer *)self->_mediaGroupsAggregateConsumer configureWithHome:self];
    }
    else
    {
      id v12 = (void *)MEMORY[0x230FBD990]();
      uint64_t v13 = self;
      uint64_t v14 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        id v15 = HMFGetLogIdentifier();
        int v20 = 138544642;
        uint64_t v21 = v15;
        __int16 v22 = 2112;
        id v23 = v4;
        __int16 v24 = 2112;
        id v25 = v6;
        __int16 v26 = 2112;
        id v27 = v5;
        __int16 v28 = 2112;
        id v29 = v8;
        __int16 v30 = 2112;
        uint64_t v31 = v3;
        _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media groups aggregate consumer with dependencies homeUUID: %@ subscriptionProvider: %@ notificationCenter: %@ userDefaults: %@ homeManager: %@", (uint8_t *)&v20, 0x3Eu);
      }
    }
  }
}

- (id)roomForAllDestinationParentIdentifiers:(id)a3
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([v4 count])
  {
    id v5 = [(HMDHome *)self accessoriesWithUUIDs:v4];
    id v6 = [(HMDHome *)self mediaSystemsWithUUIDs:v4];
    uint64_t v7 = [v4 count];
    uint64_t v8 = [v5 count];
    if (v7 == [v6 count] + v8)
    {
      uint64_t v9 = [v5 firstObject];
      char v10 = [v9 room];
      uint64_t v11 = v10;
      if (v10)
      {
        id v12 = v10;
      }
      else
      {
        char v18 = [v6 firstObject];
        id v12 = [v18 room];
      }
      v25[0] = MEMORY[0x263EF8330];
      v25[1] = 3221225472;
      void v25[2] = __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke;
      v25[3] = &unk_264A27218;
      id v19 = v12;
      id v26 = v19;
      if (objc_msgSend(v5, "na_allObjectsPassTest:", v25))
      {
        v23[0] = MEMORY[0x263EF8330];
        v23[1] = 3221225472;
        void v23[2] = __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke_2;
        void v23[3] = &unk_264A1BB98;
        id v20 = v19;
        id v24 = v20;
        if (objc_msgSend(v6, "na_allObjectsPassTest:", v23)) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        id v13 = v21;
      }
      else
      {
        id v13 = 0;
      }
    }
    else
    {
      uint64_t v14 = (void *)MEMORY[0x230FBD990]();
      id v15 = self;
      BOOL v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        int v17 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138544130;
        __int16 v28 = v17;
        __int16 v29 = 2112;
        id v30 = v4;
        __int16 v31 = 2112;
        uint64_t v32 = v5;
        __int16 v33 = 2112;
        __int16 v34 = v6;
        _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to find room due to missing destination parent identifiers: %@ found accessories: %@ found media systems: %@", buf, 0x2Au);
      }
      id v13 = 0;
    }
  }
  else
  {
    id v13 = 0;
  }

  return v13;
}

uint64_t __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 room];
  id v4 = [v3 uuid];
  id v5 = [*(id *)(a1 + 32) uuid];
  uint64_t v6 = objc_msgSend(v4, "hmf_isEqualToUUID:", v5);

  return v6;
}

uint64_t __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = [a2 room];
  id v4 = [v3 uuid];
  id v5 = [*(id *)(a1 + 32) uuid];
  uint64_t v6 = objc_msgSend(v4, "hmf_isEqualToUUID:", v5);

  return v6;
}

- (id)roomsForMediaGroupsAggregator:(id)a3
{
  id v3 = [(HMDHome *)self rooms];
  id v4 = (void *)[v3 copy];

  return v4;
}

- (id)eventSourceForMediaGroupsAggregator:(id)a3
{
  id v3 = [(HMDHome *)self homeManager];
  id v4 = [v3 currentEventSource];

  return v4;
}

- (id)participantDataTopicForAccessory:(id)a3 mediaGroupsAggregator:(id)a4
{
  id v5 = (void *)MEMORY[0x263F0DFA8];
  uint64_t v6 = *MEMORY[0x263F0B2F0];
  id v7 = a3;
  uint64_t v8 = [(HMDHome *)self uuid];
  uint64_t v9 = [v7 uuid];

  char v10 = [v5 topicFromSuffixID:v6 homeUUID:v8 accessoryUUID:v9];

  return v10;
}

- (void)configureMediaGroupsAggregator
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && ([(id)isFeatureHomeTheaterQFAEnabledForTests BOOLValue] & 1) == 0)
  {
    id v20 = (void *)MEMORY[0x230FBD990]();
    uint64_t v21 = self;
    __int16 v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      id v23 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v31 = v23;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is not enabled", buf, 0xCu);
    }
  }
  else
  {
    id v3 = [(HMDHome *)self uuid];
    id v4 = [(HMDHome *)self homeManager];
    id v5 = [v4 uuid];
    __int16 v29 = [(HMDHome *)self notificationCenter];
    __int16 v28 = [(HMDHome *)self primaryResidentChangeMonitor];
    uint64_t v6 = [v4 eventForwarder];
    id v7 = [v4 localAndRemoteSubscriptionProvider];
    uint64_t v8 = [v4 eventStoreReadHandle];
    uint64_t v9 = [(HMDHome *)self msgDispatcher];
    id v27 = (void *)v9;
    if (v3 && v29 && v28 && v6 && v7 && v8 && v9)
    {
      char v10 = [[HMDMediaGroupsAggregatorBackupSender alloc] initWithIdentifier:v3];
      id v24 = [[HMDMediaGroupsLocalDataStorage alloc] initWithIdentifier:v3 backupSender:v10];
      uint64_t v11 = objc_alloc_init(HMDMediaGroupsAggregatorMessenger);
      id v25 = v5;
      id v12 = [[HMDMediaGroupsAggregator alloc] initWithIdentifier:v3 messenger:v11 eventForwarder:v6 subscriptionProvider:v7 eventStoreReadHandle:v8 groupsLocalDataStorage:v24];
      [(HMDMediaGroupsAggregatorBackupSender *)v10 setDataSource:v24];
      [(HMDMediaGroupsLocalDataStorage *)v24 setDataSource:self];
      [(HMDMediaGroupsAggregatorMessenger *)v11 setDataSource:self];
      [(HMDMediaGroupsAggregatorMessenger *)v11 setDelegate:v12];
      [(HMDMediaGroupsAggregator *)v12 setDataSource:self];
      [(HMDHome *)self setMediaGroupsAggregator:v12];
      id v13 = [(HMDHome *)self mediaGroupsAggregator];
      uint64_t v14 = self;
      id v15 = v27;
      [v13 configureWithHome:v14 messageDispatcher:v27 notificationCenter:v29 primaryResidentChangeMonitor:v28];

      id v5 = v25;
    }
    else
    {
      id v26 = v8;
      BOOL v16 = (void *)MEMORY[0x230FBD990]();
      int v17 = self;
      char v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        id v19 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138545666;
        __int16 v31 = v19;
        __int16 v32 = 2112;
        __int16 v33 = v3;
        __int16 v34 = 2112;
        uint64_t v35 = v5;
        __int16 v36 = 2112;
        char v37 = v29;
        __int16 v38 = 2112;
        int v39 = v28;
        __int16 v40 = 2112;
        id v41 = v6;
        __int16 v42 = 2112;
        id v43 = v7;
        __int16 v44 = 2112;
        id v45 = v26;
        __int16 v46 = 2112;
        uint64_t v47 = v4;
        __int16 v48 = 2112;
        uint64_t v49 = v27;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media groups aggregator with dependencies homeUUID: %@ homeManagerUUID: %@ notificationCenter: %@ primaryChangeMonitor: %@ eventForwarder: %@ subscriptionProvider: %@ eventStoreReadHandle: %@ homeManager: %@ message dispatcher: %@", buf, 0x66u);
      }
      uint64_t v8 = v26;
      id v15 = v27;
    }
  }
}

- (void)configureMediaGroupsUnconfiguredParticipantOnboardingManager
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && ([(id)isFeatureHomeTheaterQFAEnabledForTests BOOLValue] & 1) == 0)
  {
    id v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = self;
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = HMFGetLogIdentifier();
      int v16 = 138543362;
      int v17 = v15;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is not enabled", (uint8_t *)&v16, 0xCu);
    }
  }
  else
  {
    id v3 = [(HMDHome *)self uuid];
    uint64_t v4 = [(HMDHome *)self notificationCenter];
    id v5 = (void *)v4;
    if (v3 && v4)
    {
      uint64_t v6 = [[HMDMediaGroupsUnconfiguredParticipantOnboardingManager alloc] initWithIdentifier:v3];
      [(HMDMediaGroupsUnconfiguredParticipantOnboardingManager *)v6 setDataSource:self];
      [(HMDHome *)self setMediaGroupsUnconfiguredParticipantOnboardingManager:v6];
      id v7 = [(HMDHome *)self mediaGroupsUnconfiguredParticipantOnboardingManager];
      [v7 configureWithNotificationCenter:v5];
    }
    else
    {
      uint64_t v8 = (void *)MEMORY[0x230FBD990]();
      uint64_t v9 = self;
      char v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        int v16 = 138543874;
        int v17 = v11;
        __int16 v18 = 2112;
        id v19 = v3;
        __int16 v20 = 2112;
        uint64_t v21 = v5;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media groups unconfigured participant onboarding manager with dependencies homeUUID: %@ notificationCenter: %@", (uint8_t *)&v16, 0x20u);
      }
    }
  }
}

- (id)receiverForParticipantAccessoryUUID:(id)a3 mediaGroupsLocalDataStorage:(id)a4
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self homeManager];
  uint64_t v9 = [v8 mediaGroupParticipantDataLocalStorage];
  char v10 = [v9 groupsBackupReceiver];
  uint64_t v11 = v10;
  if (v10)
  {
    id v12 = v10;
  }
  else
  {
    id v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v16 = HMFGetLogIdentifier();
      int v18 = 138543874;
      id v19 = v16;
      __int16 v20 = 2112;
      uint64_t v21 = v8;
      __int16 v22 = 2112;
      id v23 = v9;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to get groups backup receiver with homeManager: %@ participantStorage: %@", (uint8_t *)&v18, 0x20u);
    }
  }

  return v11;
}

- (id)routerForParticipantAccessoryUUID:(id)a3 mediaGroupsLocalDataStorage:(id)a4
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self accessoryWithUUID:v6];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  id v10 = v9;

  if (v10)
  {
    uint64_t v11 = [v10 messageRouter];
  }
  else
  {
    id v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = self;
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = HMFGetLogIdentifier();
      int v17 = 138543618;
      int v18 = v15;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to get router for unknown accessory uuid: %@", (uint8_t *)&v17, 0x16u);
    }
    uint64_t v11 = 0;
  }

  return v11;
}

- (void)mergeMediaDestinationsWithConsumer:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self appleMediaAccessories];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke;
  void v11[3] = &unk_264A21C00;
  id v6 = v4;
  id v12 = v6;
  objc_msgSend(v5, "na_each:", v11);

  id v7 = [(HMDHome *)self mediaSystems];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke_2;
  void v9[3] = &unk_264A16188;
  id v10 = v6;
  id v8 = v6;
  objc_msgSend(v7, "na_each:", v9);
}

void __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v7 = v3;
  id v5 = [v3 uuid];
  id v6 = [v4 destinationWithParentIdentifier:v5];

  if (v6) {
    [v7 mergeAudioDestination:v6];
  }
}

void __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v7 = v3;
  id v5 = [v3 uuid];
  id v6 = [v4 destinationWithParentIdentifier:v5];

  if (v6) {
    [v7 mergeAudioDestination:v6];
  }
}

- (void)mergeMediaDestinationControllerDataWithConsumer:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self appleMediaAccessories];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __59__HMDHome_mergeMediaDestinationControllerDataWithConsumer___block_invoke;
  v7[3] = &unk_264A21C00;
  id v8 = v4;
  id v6 = v4;
  objc_msgSend(v5, "na_each:", v7);
}

void __59__HMDHome_mergeMediaDestinationControllerDataWithConsumer___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v7 = v3;
  id v5 = [v3 uuid];
  id v6 = [v4 destinationControllerDataWithParentIdentifier:v5];

  if (v6) {
    [v7 mergeAudioDestinationControllerData:v6];
  }
}

- (void)mergeMediaGroupsAggregateDataWithConsumer:(id)a3
{
  id v4 = a3;
  [(HMDHome *)self mergeMediaDestinationsWithConsumer:v4];
  [(HMDHome *)self mergeMediaDestinationControllerDataWithConsumer:v4];
  id v6 = [(HMDHome *)self mediaSystemController];
  id v5 = [v4 allMediaSystemData];

  [v6 mergeMediaSystemData:v5];
}

- (void)didUpdateAggregateDataForMediaGroupsAggregateConsumer:(id)a3
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    int v15 = 138543362;
    int v16 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating home graph due to updated media groups aggregate data", (uint8_t *)&v15, 0xCu);
  }
  [(HMDHome *)v6 mergeMediaGroupsAggregateDataWithConsumer:v4];
  uint64_t v9 = [(HMDHome *)v6 homeManager];
  if (v9)
  {
    id v10 = [(HMDHome *)v6 uuid];
    [v9 updateGenerationCounterWithReason:@"HMDMediaGroupsAggregateConsumerDelegateUpdatedAggregateData" sourceUUID:v10 shouldNotifyClients:1];

    [v9 assistantSyncDataChanged:@"HMDMediaGroupsAggregateConsumerDelegateUpdatedAggregateData"];
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = v6;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v15 = 138543362;
      int v16 = v14;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to update home graph for media groups due to no home manager", (uint8_t *)&v15, 0xCu);
    }
  }
}

- (HMDDevice)currentDevice
{
  id v2 = +[HMDAppleAccountManager sharedManager];
  id v3 = [v2 device];

  return (HMDDevice *)v3;
}

- (HMFWiFiManager)wifiManager
{
  id v2 = [(HMDHome *)self wifiManagerFactory];
  id v3 = v2[2]();

  return (HMFWiFiManager *)v3;
}

- (void)configureMediaGroupObjects
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && ([(id)isFeatureHomeTheaterQFAEnabledForTests BOOLValue] & 1) == 0)
  {
    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = self;
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = HMFGetLogIdentifier();
      int v7 = 138543362;
      id v8 = v6;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is not enabled", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    [(HMDHome *)self configureMediaGroupsUnconfiguredParticipantOnboardingManager];
    [(HMDHome *)self configureMediaGroupsAggregator];
    [(HMDHome *)self configureMediaGroupsAggregateConsumer];
  }
}

- (id)accessoriesWithUUIDs:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self accessories];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = __32__HMDHome_accessoriesWithUUIDs___block_invoke;
  void v9[3] = &unk_264A27218;
  id v10 = v4;
  id v6 = v4;
  int v7 = objc_msgSend(v5, "na_filter:", v9);

  return v7;
}

uint64_t __32__HMDHome_accessoriesWithUUIDs___block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 uuid];
  uint64_t v4 = [v2 containsObject:v3];

  return v4;
}

- (void)configureNaturalLightingWithDemoModeEnabled:(BOOL)a3
{
  id v5 = [(HMDHome *)self workQueue];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  void v6[2] = __55__HMDHome_configureNaturalLightingWithDemoModeEnabled___block_invoke;
  v6[3] = &unk_264A2B870;
  void v6[4] = self;
  BOOL v7 = a3;
  dispatch_async(v5, v6);
}

void __55__HMDHome_configureNaturalLightingWithDemoModeEnabled___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) localCapabilitiesDataSource];
  if ([v2 isResidentCapable])
  {
  }
  else
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);

    if (!v3) {
      return;
    }
  }
  uint64_t v4 = [[HMDHomeNaturalLightingContextUpdater alloc] initWithHome:*(void *)(a1 + 32) demoModeEnabled:*(unsigned __int8 *)(a1 + 40)];
  [*(id *)(a1 + 32) setNaturalLightingContextUpdater:v4];

  id v5 = [*(id *)(a1 + 32) naturalLightingContextUpdater];
  [v5 configure];
}

- (void)configureMediaDestinationControllersForAccessories:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  objc_msgSend(v4, "na_map:", &__block_literal_global_822);
  id v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "na_each:", &__block_literal_global_825);
}

uint64_t __62__HMDHome_configureMediaDestinationControllersForAccessories___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 configureAudioDestinationController];
}

id __62__HMDHome_configureMediaDestinationControllersForAccessories___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  id v4 = v3;

  return v4;
}

- (void)configureMediaSystems
{
  id v6 = [(HMDHome *)self mediaSystemController];
  int v3 = [(HMDHome *)self workQueue];
  id v4 = [(HMDHome *)self msgDispatcher];
  id v5 = [(HMDHome *)self notificationCenter];
  [v6 configure:self delegate:self dataSource:self queue:v3 messageDispatcher:v4 notificationCenter:v5];
}

- (BOOL)hasSiriEndpointAccessory
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = [(HMDHome *)self accessories];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v12 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = *(id *)(*((void *)&v11 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          BOOL v7 = v6;
        }
        else {
          BOOL v7 = 0;
        }
        id v8 = v7;

        if (v8)
        {
          uint64_t v9 = [v8 siriEndpointProfile];

          if (v9)
          {
            LOBYTE(v3) = 1;
            goto LABEL_15;
          }
        }
      }
      uint64_t v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  return v3;
}

- (BOOL)supportsDeviceWithCapabilities:(id)a3
{
  id v4 = a3;
  if ([(HMDHome *)self hasSiriEndpointAccessory]
    && ![v4 supportsSiriEndpointSetup])
  {
    char v5 = 0;
  }
  else
  {
    char v5 = [v4 supportsResidentFirstAccessoryCommunication];
  }

  return v5;
}

- (void)registerForDeviceWithCapabilities
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = self;
  char v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    int v9 = 138543362;
    id v10 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for device with capabilities and confirming resident device", (uint8_t *)&v9, 0xCu);
  }
  BOOL v7 = [(HMDHome *)v4 residentDeviceManager];
  [v7 addDataSource:v4];

  id v8 = [(HMDHome *)v4 residentDeviceManager];
  [v8 confirmWithCompletionHandler:0];
}

- (id)eventRouterServerDiagnosticInfo
{
  id v2 = [(HMDHome *)self remoteEventRouterServer];
  uint64_t v3 = [v2 diagnosticInfo];

  return v3;
}

- (void)createRemoteEventRouterServerIfNeeded
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v3 = [(HMDHome *)self homeManager];
  id v4 = [(HMDHome *)self currentAccessory];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v5 = v4;
  }
  else {
    char v5 = 0;
  }
  id v6 = v5;

  BOOL v7 = [(HMDHome *)self remoteEventRouterServer];
  id v8 = [v7 residentModeUUID];

  if (v6)
  {
    int v9 = [(HMDHome *)self localCapabilitiesDataSource];
    if ([v9 isResidentCapable])
    {
      if (!v8)
      {

LABEL_14:
        int v18 = [v6 uuid];
        char v19 = [v8 isEqual:v18];

        if ((v19 & 1) == 0)
        {
          id v20 = (void *)MEMORY[0x230FBD990]();
          uint64_t v21 = self;
          __int16 v22 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            id v23 = HMFGetLogIdentifier();
            uint64_t v24 = [v6 uuid];
            *(_DWORD *)buf = 138543874;
            id v57 = v23;
            __int16 v58 = 2112;
            id v59 = v8;
            __int16 v60 = 2112;
            uint64_t v61 = v24;
            _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Overwriting stale remote event router server with uuid: %@ to current accessory uuid: %@", buf, 0x20u);
          }
        }
        id v25 = (void *)MEMORY[0x230FBD990]();
        id v26 = self;
        id v27 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          __int16 v28 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v57 = v28;
          __int16 v58 = 2112;
          id v59 = v6;
          _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_INFO, "%{public}@Creating remote event router server with current accessory: %@", buf, 0x16u);
        }
        __int16 v29 = [v3 localOnlySubscriptionProvider];
        if (objc_opt_respondsToSelector())
        {
          id v30 = [(HMDHome *)v26 serverDelegatingEventRouter];
          __int16 v31 = [v29 synchronousSubscriptionProvider];
          [v30 registerSubRouter:v31];

          uint64_t v32 = [(HMDHome *)v26 serverDelegatingEventRouter];

          __int16 v29 = (void *)v32;
        }
        id v52 = v29;
        id v53 = v8;
        __int16 v33 = [(HMDHome *)v26 remoteEventRouterClientController];
        uint64_t v34 = [v33 residentDelegatingEventRouter];

        if (v34)
        {
          uint64_t v35 = [(HMDHome *)v26 serverDelegatingEventRouter];
          [v35 registerSubRouter:v34];
        }
        uint64_t v50 = [HMDRemoteEventRouterServer alloc];
        uint64_t v49 = [(HMDHome *)v26 uuid];
        __int16 v36 = [v6 uuid];
        char v37 = [v3 workQueue];
        __int16 v38 = [(HMDHome *)v26 msgDispatcher];
        int v39 = [(HMDHome *)v26 notificationCenter];
        [(HMDHome *)v26 serverDelegatingEventRouter];
        __int16 v40 = v54 = v3;
        [v54 eventForwarder];
        id v41 = v51 = (void *)v34;
        __int16 v42 = [v54 eventStoreReadHandle];
        id v43 = [(HMDRemoteEventRouterServer *)v50 initWithPrimaryModeUUID:v49 residentModeUUID:v36 queue:v37 messageDispatcher:v38 dataSource:v26 notificationCenter:v39 requestMessageName:@"RemoteEventRouterRequestMessage" updateMessageName:@"RemoteEventRouterUpdateMessageName" multiHopFetchResponseMessageName:@"RER.MHF.ResponseMessageName" subscriptionProvider:v40 registrationEventRouter:v41 storeReadHandle:v42];
        [(HMDHome *)v26 setRemoteEventRouterServer:v43];

        __int16 v44 = +[HMDUserMessagePolicy userMessagePolicyWithHome:v26 userPrivilege:0 remoteAccessRequired:0];
        BOOL v45 = isTVOSDevice();
        __int16 v46 = [(HMDHome *)v26 remoteEventRouterServer];
        uint64_t v47 = [(HMDHome *)v26 isCurrentDevicePrimaryResident];
        uint64_t v55 = v44;
        __int16 v48 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v55 count:1];
        [v46 configureWithHome:v26 isPrimaryResident:v47 isResidentEventProviding:v45 additionalPolicies:v48];

        uint64_t v3 = v54;
        id v8 = v53;
        goto LABEL_25;
      }
      id v10 = [v6 uuid];
      char v11 = [v8 isEqual:v10];

      if ((v11 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
    }
  }
  long long v12 = (void *)MEMORY[0x230FBD990]();
  long long v13 = self;
  long long v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    int v15 = HMFGetLogIdentifier();
    uint64_t v16 = [(HMDHome *)v13 localCapabilitiesDataSource];
    [v16 isResidentCapable];
    uint64_t v17 = HMFBooleanToString();
    *(_DWORD *)buf = 138544130;
    id v57 = v15;
    __int16 v58 = 2112;
    id v59 = v6;
    __int16 v60 = 2112;
    uint64_t v61 = v17;
    __int16 v62 = 2112;
    uint64_t v63 = v8;
    _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Cannot create remote event router server with currentAccessory: %@ isResidentCapable: %@ serverAccessoryUUID: %@", buf, 0x2Au);
  }
LABEL_25:
}

- (void)configureRemoteEventRouterClientControllerForAccessories:(id)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(id *)(*((void *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v10 = v9;
        }
        else {
          id v10 = 0;
        }
        id v11 = v10;

        if (v11)
        {
          int v12 = [v9 isCurrentAccessory];
          long long v13 = [(HMDHome *)self remoteEventRouterClientController];
          long long v14 = [v9 uuid];
          if (v12) {
            [v13 updateCurrentAccessoryUUID:v14];
          }
          else {
            [v13 createResidentRouterForAccessoryUUID:v14];
          }
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }
}

- (void)handlePrimaryResidentChangeMonitorConfirmedDeviceIdentifierChangeNotification:(id)a3
{
  id v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __89__HMDHome_handlePrimaryResidentChangeMonitorConfirmedDeviceIdentifierChangeNotification___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v4, block);
}

void __89__HMDHome_handlePrimaryResidentChangeMonitorConfirmedDeviceIdentifierChangeNotification___block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) homeManager];
  uint64_t v3 = [*(id *)(a1 + 32) currentDevice];

  if (v3)
  {
    id v4 = [v2 currentAccessorySetupMetricDispatcher];
    [v4 markSetupEndStage:14 error:0];
    uint64_t v5 = [*(id *)(a1 + 32) remoteEventRouterServer];

    if (v5)
    {
      [v4 markSetupBeginStage:15 error:0];
    }
    else
    {
      uint64_t v6 = (void *)MEMORY[0x230FBD990]();
      id v7 = *(id *)(a1 + 32);
      id v8 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id v9 = HMFGetLogIdentifier();
        int v11 = 138543362;
        int v12 = v9;
        _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Remote event router server does not exist.", (uint8_t *)&v11, 0xCu);
      }
    }
  }
  id v10 = [v2 accessorySetupMetricDispatchersForHome:*(void *)(a1 + 32)];
  objc_msgSend(v10, "na_each:", &__block_literal_global_813);
}

uint64_t __89__HMDHome_handlePrimaryResidentChangeMonitorConfirmedDeviceIdentifierChangeNotification___block_invoke_810(uint64_t a1, void *a2)
{
  return [a2 markPrimaryResidentChanged];
}

- (void)_handlePrimaryResidentDidBecomeOtherDevice
{
  uint64_t v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  id v4 = [(HMDHome *)self fetchedAccessorySettingsSubscriber];
  [v4 unsubscribeToAllAccessories];
}

- (void)_handlePrimaryResidentDidBecomeCurrentDevice
{
  uint64_t v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  -[HMDHome subscribeToAccessoryLanguageSettingsIfNeeded](self);
}

- (void)subscribeToAccessoryLanguageSettingsIfNeeded
{
  if (a1 && [a1 isCurrentDevicePrimaryResident])
  {
    id v4 = [a1 fetchedAccessorySettingsSubscriber];
    id v2 = [a1 appleMediaAccessories];
    uint64_t v3 = objc_msgSend(v2, "na_map:", &__block_literal_global_816);
    [v4 subscribeToSettingsForAccessoryUUIDs:v3];
  }
}

id __55__HMDHome_subscribeToAccessoryLanguageSettingsIfNeeded__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 isHomePod])
  {
    uint64_t v3 = [v2 uuid];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

- (void)handlePrimaryResidentIsCurrentDeviceChangeNotification:(id)a3
{
  id v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __66__HMDHome_handlePrimaryResidentIsCurrentDeviceChangeNotification___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __66__HMDHome_handlePrimaryResidentIsCurrentDeviceChangeNotification___block_invoke(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) isCurrentDevicePrimaryResident];
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    return [v3 _handlePrimaryResidentDidBecomeCurrentDevice];
  }
  else
  {
    return [v3 _handlePrimaryResidentDidBecomeOtherDevice];
  }
}

- (void)createAndConfigureBulletinManagers
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v3 = [(HMDHome *)self residentDeviceManager];
  id v4 = [v3 availableResidentDevices];
  -[HMDHome setBulletinNotificationsSupported:](self, "setBulletinNotificationsSupported:", [v4 count] != 0);

  if (+[HMDDeviceCapabilities supportsBulletinBoard]
    || (+[HMDDeviceCapabilities deviceCapabilities],
        uint64_t v5 = objc_claimAutoreleasedReturnValue(),
        char v6 = [v5 isResidentCapable],
        v5,
        (v6 & 1) != 0))
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v58 = v10;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Creating and Configuring Bulletin Notification Managers...", buf, 0xCu);
    }
    long long v54 = [[HMDPresenceNotificationConditionHandler alloc] initWithHome:v8];
    id v53 = [[HMDTimePeriodNotificationConditionHandler alloc] initWithHome:v8];
    int v11 = [HMDNotificationConditionEvaluator alloc];
    int v12 = (void *)MEMORY[0x263EFFA08];
    v56[0] = v54;
    v56[1] = v53;
    uint64_t v13 = [MEMORY[0x263EFF8C0] arrayWithObjects:v56 count:2];
    long long v14 = [v12 setWithArray:v13];
    uint64_t v15 = [(HMDNotificationConditionEvaluator *)v11 initWithConditionHandlers:v14];

    long long v16 = [HMDAccessoryBulletinNotificationManager alloc];
    long long v17 = [(HMDHome *)v8 workQueue];
    long long v18 = +[HMDAppleAccountManager sharedManager];
    char v19 = [MEMORY[0x263F08A00] defaultCenter];
    id v52 = (void *)v15;
    uint64_t v20 = [(HMDAccessoryBulletinNotificationManager *)v16 initWithHome:v8 workQueue:v17 accountManager:v18 evaluator:v15 notificationCenter:v19];
    [(HMDHome *)v8 setAccessoryBulletinNotificationManager:v20];

    uint64_t v21 = [(HMDHome *)v8 accessoryBulletinNotificationManager];
    __int16 v22 = +[HMDDeviceCapabilities deviceCapabilities];
    objc_msgSend(v21, "configureWithDeviceIsResidentCapable:", objc_msgSend(v22, "isResidentCapable"));

    uint64_t v51 = [[HMDCameraSignificantEventFaceClassificationResolver alloc] initWithHome:v8];
    id v23 = [HMDDoorbellPressTracker alloc];
    uint64_t v24 = [(HMDHome *)v8 workQueue];
    id v25 = [(HMDHome *)v8 notificationCenter];
    uint64_t v50 = [(HMDDoorbellPressTracker *)v23 initWithWorkQueue:v24 notificationCenter:v25];

    id v26 = [HMDCameraBulletinNotificationManager alloc];
    id v27 = [(HMDHome *)v8 workQueue];
    __int16 v28 = [(HMDHome *)v8 msgDispatcher];
    __int16 v29 = +[HMDAppleAccountManager sharedManager];
    id v30 = [MEMORY[0x263F08A00] defaultCenter];
    __int16 v31 = [(HMDCameraBulletinNotificationManager *)v26 initWithHome:v8 workQueue:v27 messageDispatcher:v28 accountManager:v29 faceClassificationResolver:v51 doorbellPressTracker:v50 evaluator:v15 notificationCenter:v30];
    [(HMDHome *)v8 setCameraBulletinNotificationManager:v31];

    uint64_t v32 = [(HMDHome *)v8 cameraBulletinNotificationManager];
    __int16 v33 = +[HMDDeviceCapabilities deviceCapabilities];
    objc_msgSend(v32, "configureWithDeviceIsResidentCapable:", objc_msgSend(v33, "isResidentCapable"));

    uint64_t v34 = [HMDAudioAnalysisBulletinNotificationManager alloc];
    uint64_t v35 = [(HMDHome *)v8 workQueue];
    __int16 v36 = [(HMDHome *)v8 msgDispatcher];
    char v37 = +[HMDAppleAccountManager sharedManager];
    __int16 v38 = [HMDNotificationConditionEvaluator alloc];
    int v39 = (void *)MEMORY[0x263EFFA08];
    v55[0] = v54;
    v55[1] = v53;
    __int16 v40 = [MEMORY[0x263EFF8C0] arrayWithObjects:v55 count:2];
    id v41 = [v39 setWithArray:v40];
    __int16 v42 = [(HMDNotificationConditionEvaluator *)v38 initWithConditionHandlers:v41];
    id v43 = [MEMORY[0x263F08A00] defaultCenter];
    __int16 v44 = [(HMDAudioAnalysisBulletinNotificationManager *)v34 initWithHome:v8 workQueue:v35 messageDispatcher:v36 accountManager:v37 evaluator:v42 notificationCenter:v43];
    [(HMDHome *)v8 setAudioAnalysisBulletinNotificationManager:v44];

    BOOL v45 = [(HMDHome *)v8 audioAnalysisBulletinNotificationManager];
    [v45 configure];
  }
  else
  {
    __int16 v46 = (void *)MEMORY[0x230FBD990]();
    uint64_t v47 = self;
    __int16 v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      uint64_t v49 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v58 = v49;
      _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_INFO, "%{public}@Not creating bulletin notification managers as bulletins are not supported on this non-resident capable device", buf, 0xCu);
    }
  }
}

- (void)configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory:(id)a3 accessories:(id)a4 uncommittedTransactions:(id)a5
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  int v11 = (void *)MEMORY[0x230FBD990]();
  int v12 = self;
  uint64_t v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    long long v14 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    long long v54 = v14;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Configuring after accessories configuration tracker notifications", buf, 0xCu);
  }
  uint64_t v15 = [(HMDHome *)v12 workQueue];
  dispatch_assert_queue_V2(v15);

  [(HMDHome *)v12 configureBulletinNotification];
  uint64_t v16 = [(HMDHome *)v12 _evaluateNetworkProtectionAndRouterManagement];
  if (v8)
  {
    long long v17 = (void *)MEMORY[0x230FBD990](v16);
    long long v18 = v12;
    char v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v54 = v20;
      __int16 v55 = 2112;
      id v56 = v8;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Setting up media session for current accessory during configure - %@", buf, 0x16u);
    }
    id v21 = [(HMDHome *)v18 _addMediaSessionForCurrentAccessory:v8];
    id v22 = v8;
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass) {
      uint64_t v24 = v22;
    }
    else {
      uint64_t v24 = 0;
    }
    id v25 = v24;

    if (isKindOfClass) {
      [v22 configureSensors];
    }
  }
  id v26 = [(HMDHome *)v12 homeManager];
  id v27 = [(HMDHome *)v12 localCapabilitiesDataSource];
  int v28 = [v27 isResidentCapable];

  if (v28)
  {
    __int16 v29 = [HMDFetchedAccessorySettingsSubscriber alloc];
    id v30 = [(HMDHome *)v12 workQueue];
    __int16 v31 = [v26 localAndRemoteSubscriptionProvider];
    id v52 = @"root.siri.availableLanguages";
    uint64_t v32 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v52 count:1];
    __int16 v33 = [(HMDHome *)v12 uuid];
    uint64_t v34 = [(HMDFetchedAccessorySettingsSubscriber *)v29 initWithWorkQueue:v30 subscriptionProvider:v31 keyPaths:v32 homeUUID:v33];
    [(HMDHome *)v12 setFetchedAccessorySettingsSubscriber:v34];

    uint64_t v35 = [(HMDHome *)v12 fetchedAccessorySettingsSubscriber];
    [v35 setDelegate:v12];

    __int16 v36 = [(HMDHome *)v12 notificationCenter];
    char v37 = [(HMDHome *)v12 primaryResidentChangeMonitor];
    [v36 addObserver:v12 selector:sel_handlePrimaryResidentIsCurrentDeviceChangeNotification_ name:@"HMDPrimaryResidentChangeMonitorIsCurrentDeviceChangeNotification" object:v37];

    __int16 v38 = [(HMDHome *)v12 notificationCenter];
    int v39 = [(HMDHome *)v12 primaryResidentChangeMonitor];
    [v38 addObserver:v12 selector:sel_handlePrimaryResidentChangeMonitorConfirmedDeviceIdentifierChangeNotification_ name:@"HMDPrimaryResidentChangeMonitorConfirmedDeviceIdentifierChangeNotification" object:v39];

    -[HMDHome subscribeToAccessoryLanguageSettingsIfNeeded](v12);
  }
  __int16 v40 = [HMDHomeMediaStateSubscriber alloc];
  id v41 = [(HMDHome *)v12 uuid];
  __int16 v42 = [(HMDHome *)v12 workQueue];
  id v43 = [v26 localAndRemoteSubscriptionProvider];
  __int16 v44 = [v26 localOnlySubscriptionProvider];
  BOOL v45 = [(HMDHomeMediaStateSubscriber *)v40 initWithHomeUUID:v41 workQueue:v42 dataSource:v12 remoteSubscriptionProvider:v43 localSubscriptionProvider:v44];
  [(HMDHome *)v12 setMediaStateSubscriber:v45];

  __int16 v46 = [(HMDHome *)v12 notificationRegistrationsForAppleMediaAccessories];
  uint64_t v47 = [v46 count];

  if (v47)
  {
    __int16 v48 = [(HMDHome *)v12 mediaStateSubscriber];
    [v48 subscribeForAppleMediaStateWithSubscriptionToken:@"HMDHomeClientMediaStateRegistrationToken"];
  }
  uint64_t v49 = [(HMDHome *)v12 mediaStateSubscriber];
  [v49 localSubscribeForAppleMediaState];

  [(HMDHome *)v12 configureMediaSystems];
  [(HMDHome *)v12 configureMediaDestinationControllersForAccessories:v9];
  if (isInternalBuild()
    && ((_os_feature_enabled_impl() & 1) != 0 || _os_feature_enabled_impl()))
  {
    uint64_t v50 = [(HMDHome *)v12 homeIntelligenceActivityLogger];
    [v50 configure];
  }
  [(HMDHome *)v12 registerForDeviceWithCapabilities];
  [(HMDHome *)v12 configureMediaGroupObjects];
  uint64_t v51 = [(HMDHome *)v12 accessories];
  [(HMDHome *)v12 configureRemoteEventRouterClientControllerForAccessories:v51];
}

- (BOOL)configureWithHomeManager:(id)a3 accessoriesPresent:(id)a4 uncommittedTransactions:(id)a5 source:(unint64_t)a6
{
  uint64_t v545 = *MEMORY[0x263EF8340];
  id v441 = a3;
  id v453 = a4;
  id v437 = a5;
  uint64_t v9 = HMFUptime();
  double v11 = v10;
  int v12 = (void *)MEMORY[0x230FBD990](v9);
  uint64_t v13 = self;
  HMFGetOSLogHandle();
  long long v14 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = [(HMDHome *)v13 uuid];
    [(HMDHome *)v13 locationServicesEnabled];
    HMFBooleanToString();
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545410;
    id v505 = v15;
    __int16 v506 = 2114;
    v507 = @"homeConfigureStart";
    __int16 v508 = 2112;
    v509 = @"Configuring home with location service enabled";
    __int16 v510 = 2114;
    v511 = @"state";
    __int16 v512 = 2112;
    v513 = @"start";
    __int16 v514 = 2114;
    v515 = @"homeUUID";
    __int16 v516 = 2112;
    id v517 = v16;
    __int16 v518 = 2114;
    v519 = @"status";
    __int16 v520 = 2112;
    id v521 = v17;
    _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x5Cu);
  }
  long long v18 = [MEMORY[0x263F499E0] sharedInstance];
  id v19 = objc_alloc(MEMORY[0x263F499F0]);
  uint64_t v20 = [(HMDHome *)v13 uuid];
  [(HMDHome *)v13 locationServicesEnabled];
  id v21 = HMFBooleanToString();
  id v22 = HMDTaggedLoggingCreateDictionary();
  id v23 = objc_msgSend(v19, "initWithTag:data:", @"homeConfigureStart", v22, @"state", @"start", @"homeUUID", v20, @"status", v21);
  uint64_t v24 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v18 submitTaggedEvent:v23 processorList:v24];

  [(HMDHome *)v13 setHomeManager:v441];
  id v25 = [v441 messageDispatcher];
  [(HMDHome *)v13 setMsgDispatcher:v25];

  id v26 = [v441 accessoryBrowser];
  [(HMDHome *)v13 setAccessoryBrowser:v26];

  id v27 = [v441 metricsManager];
  uint64_t v28 = [v27 logEventSubmitter];
  logEventSubmitter = v13->_logEventSubmitter;
  v13->_logEventSubmitter = (HMMLogEventSubmitting *)v28;

  id v30 = [v441 metricsManager];
  uint64_t v31 = [v30 dailyScheduler];
  dailyScheduler = v13->_dailyScheduler;
  v13->_dailyScheduler = (HMDLogEventDailyScheduler *)v31;

  if (!v13->_metricsDispatcher)
  {
    __int16 v33 = objc_alloc_init(HMDHomeMetricsDispatcherFactory);
    uuid = v13->_uuid;
    uint64_t v35 = [(HMDHome *)v13 logEventSubmitter];
    uint64_t v36 = [(HMDHomeMetricsDispatcherFactory *)v33 createHomeMetricsDispatcherWithIdentifier:uuid logEventSubmitter:v35];
    metricsDispatcher = v13->_metricsDispatcher;
    v13->_metricsDispatcher = (HMDHomeMetricsDispatcher *)v36;
  }
  __int16 v38 = [HMDHomePrimaryResidentMessagingHandler alloc];
  int v39 = [(HMDHome *)v13 msgDispatcher];
  __int16 v40 = [(HMDHome *)v13 uuid];
  id v41 = [(HMDHome *)v13 residentDeviceManager];
  uint64_t v42 = [(HMDHomePrimaryResidentMessagingHandler *)v38 initWithMessageDispatcher:v39 homeUUID:v40 residentDeviceManager:v41];
  primaryResidentMessagingHandler = v13->_primaryResidentMessagingHandler;
  v13->_primaryResidentMessagingHandler = (HMDHomePrimaryResidentMessagingHandler *)v42;

  __int16 v44 = [v441 messageDispatcher];
  BOOL v45 = [v44 secureRemoteTransport];
  __int16 v46 = [(HMDHome *)v13 primaryResidentMessagingHandler];
  [v45 registerHomeMessageDestinationHandler:v46];

  if ([(HMDHome *)v13 isOwnerUser]) {
    v13->_isUpdatedToHH2 = [(HMDHome *)v13 isThisHomeMigratedToHH2];
  }
  uint64_t v47 = [MEMORY[0x263F0E8C8] authWithValue:1];
  presenceAuthStatus = v13->_presenceAuthStatus;
  v13->_presenceAuthStatus = (HMUserPresenceAuthorization *)v47;

  uint64_t v49 = (void *)MEMORY[0x230FBD990]();
  uint64_t v50 = v13;
  HMFGetOSLogHandle();
  uint64_t v51 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v52 = (id)objc_claimAutoreleasedReturnValue();
    id v53 = (__CFString *)v13->_presenceAuthStatus;
    *(_DWORD *)buf = 138543618;
    id v505 = v52;
    __int16 v506 = 2112;
    v507 = v53;
    _os_log_impl(&dword_22F52A000, v51, OS_LOG_TYPE_INFO, "%{public}@Home Presence Auth Status : [%@]", buf, 0x16u);
  }
  if (_os_feature_enabled_impl()
    && ((isInternalBuild() & 1) != 0
     || CFPreferencesGetAppBooleanValue(@"UWBUnlock", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0)))
  {
    [(HMDHome *)v50 _readLocalHomeKeyMiscInfo];
  }
  uint64_t v54 = [objc_alloc(MEMORY[0x263F42658]) initWithTimeInterval:8 options:7.0];
  homeLocationTimer = v50->_homeLocationTimer;
  v50->_homeLocationTimer = (HMFTimer *)v54;

  [(HMFTimer *)v50->_homeLocationTimer setDelegateQueue:v50->_workQueue];
  [(HMFTimer *)v50->_homeLocationTimer setDelegate:v50];
  id v56 = [MEMORY[0x263F42608] sharedPreferences];
  uint64_t v57 = [v56 preferenceForKey:@"accessoryReachabilityCoalescePeriod"];
  v440 = [v57 numberValue];

  LODWORD(v56) = [v440 unsignedIntValue];
  uint64_t v58 = [objc_alloc(MEMORY[0x263F42658]) initWithTimeInterval:0 options:(double)v56];
  accessoryReachabilityUpdatesTimer = v50->_accessoryReachabilityUpdatesTimer;
  v50->_accessoryReachabilityUpdatesTimer = (HMFTimer *)v58;

  [(HMFTimer *)v50->_accessoryReachabilityUpdatesTimer setDelegate:v50];
  [(HMFTimer *)v50->_accessoryReachabilityUpdatesTimer setDelegateQueue:v50->_workQueue];
  __int16 v60 = [(HMDHome *)v50 roomForEntireHome];
  uint64_t v61 = [(HMDHome *)v50 msgDispatcher];
  __int16 v62 = [(HMDHome *)v50 workQueue];
  [v60 configure:v61 queue:v62];

  uint64_t v63 = [(HMDHome *)v50 periodicReader];
  [v63 configure:v50];

  uint64_t v64 = [(HMDHome *)v50 presenceMonitor];
  BOOL v65 = [(HMDHome *)v50 msgDispatcher];
  [v64 configure:v50 messageDispatcher:v65];

  long long v66 = [(HMDHome *)v50 presenceFeeder];
  uint64_t v67 = [(HMDHome *)v50 msgDispatcher];
  [v66 configure:v50 messageDispatcher:v67];

  long long v68 = (void *)MEMORY[0x230FBD990]();
  long long v69 = v50;
  HMFGetOSLogHandle();
  long long v70 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v71 = (id)objc_claimAutoreleasedReturnValue();
    long long v72 = [(HMDHome *)v69 presenceFeeder];
    *(_DWORD *)buf = 138543618;
    id v505 = v71;
    __int16 v506 = 2112;
    v507 = v72;
    _os_log_impl(&dword_22F52A000, v70, OS_LOG_TYPE_INFO, "%{public}@Configured presenceFeeder: %@", buf, 0x16u);
  }
  long long v73 = [(HMDHome *)v69 homeLocationHandler];
  long long v74 = [(HMDHome *)v69 workQueue];
  long long v75 = [(HMDHome *)v69 msgDispatcher];
  [v73 configure:v69 queue:v74 messageDispatcher:v75];

  long long v76 = [(HMDHome *)v69 homeReprovisionHandler];
  long long v77 = [(HMDHome *)v69 workQueue];
  long long v78 = [(HMDHome *)v69 msgDispatcher];
  [v76 configure:v69 queue:v77 messageDispatcher:v78];

  long long v79 = [(HMDHome *)v69 sharedHomeUpdateHandler];
  [v79 registerForMessages];

  long long v80 = [(HMDHome *)v69 reachabilityChangedLogEventManager];
  [v80 configure];

  [(HMDHome *)v69 updateHomeLocation];
  long long v81 = [(HMDHome *)v69 residentDeviceManager];
  long long v82 = +[HMDMessageDispatcher defaultDispatcher];
  [v81 configureWithHome:v69 messageDispatcher:v82];

  long long v83 = [(HMDHome *)v69 residentDeviceManager];
  [v83 setDelegate:v69];

  long long v84 = [(HMDHome *)v69 primaryResidentChangeMonitor];
  [v84 configureWithHome:v69];

  [(HMDHome *)v69 _purgeResidentUsers];
  if ([(HMDHome *)v69 isOwnerUser])
  {
    long long v85 = [(HMDHome *)v69 primaryResident];
    long long v86 = [v85 device];
    unsigned int v87 = [v86 isCurrentDevice];

    long long v88 = [(HMDHome *)v69 accessoryBrowser];
    [v88 setQOS:v87];
  }
  long long v89 = [(HMDHome *)v69 name];
  id v90 = [(HMDHome *)v69 addName:v89];

  long long v91 = [(HMDHome *)v69 roomForEntireHome];
  uint64_t v92 = [v91 name];
  id v93 = [(HMDHome *)v69 addName:v92];

  __int16 v94 = [(HMDHome *)v69 notificationRegistrations];
  LOBYTE(v92) = [v94 count] == 0;

  if ((v92 & 1) == 0)
  {
    long long v502 = 0u;
    long long v503 = 0u;
    long long v500 = 0u;
    long long v501 = 0u;
    long long v95 = [(HMDHome *)v69 mediaSessions];
    uint64_t v96 = [v95 countByEnumeratingWithState:&v500 objects:v544 count:16];
    if (v96)
    {
      uint64_t v97 = *(void *)v501;
      do
      {
        for (uint64_t i = 0; i != v96; ++i)
        {
          if (*(void *)v501 != v97) {
            objc_enumerationMutation(v95);
          }
          [*(id *)(*((void *)&v500 + 1) + 8 * i) registerForSessionUpdates:1];
        }
        uint64_t v96 = [v95 countByEnumeratingWithState:&v500 objects:v544 count:16];
      }
      while (v96);
    }
  }
  group = dispatch_group_create();
  [(HMDHome *)v69 createAndConfigureBulletinManagers];
  long long v99 = [(HMDHome *)v69 accessories];
  v450 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v99, "count"));
  uint64_t v100 = HMFUptime();
  double v102 = v101;
  uint64_t v103 = (void *)MEMORY[0x230FBD990](v100);
  long long v104 = v69;
  HMFGetOSLogHandle();
  uint64_t v105 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    id v106 = (id)objc_claimAutoreleasedReturnValue();
    long long v107 = [(HMDHome *)v104 uuid];
    *(_DWORD *)buf = 138544898;
    id v505 = v106;
    __int16 v506 = 2114;
    v507 = @"homeConfigureStart";
    __int16 v508 = 2112;
    v509 = @"Configuring accessories";
    __int16 v510 = 2114;
    v511 = @"state";
    __int16 v512 = 2112;
    v513 = @"homeConfigureAccessories";
    __int16 v514 = 2114;
    v515 = @"homeUUID";
    __int16 v516 = 2112;
    id v517 = v107;
    _os_log_impl(&dword_22F52A000, v105, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
  }
  uint64_t v108 = [MEMORY[0x263F499E0] sharedInstance];
  id v109 = objc_alloc(MEMORY[0x263F499F0]);
  int v110 = [(HMDHome *)v104 uuid];
  uint64_t v111 = HMDTaggedLoggingCreateDictionary();
  uint64_t v112 = objc_msgSend(v109, "initWithTag:data:", @"homeConfigureStart", v111, @"state", @"homeConfigureAccessories", @"homeUUID", v110);
  uint64_t v113 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v108 submitTaggedEvent:v112 processorList:v113];

  long long v498 = 0u;
  long long v499 = 0u;
  long long v496 = 0u;
  long long v497 = 0u;
  obuint64_t j = v99;
  uint64_t v114 = [obj countByEnumeratingWithState:&v496 objects:v543 count:16];
  if (v114)
  {
    v447 = 0;
    uint64_t v455 = *(void *)v497;
    do
    {
      for (uint64_t j = 0; j != v114; ++j)
      {
        if (*(void *)v497 != v455) {
          objc_enumerationMutation(obj);
        }
        id v116 = *(void **)(*((void *)&v496 + 1) + 8 * j);
        __int16 v117 = (void *)MEMORY[0x230FBD990]();
        id v118 = v116;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v119 = v118;
        }
        else {
          uint64_t v119 = 0;
        }
        id v120 = v119;

        [v120 setDataSource:v104];
        id v121 = v118;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v122 = v121;
        }
        else {
          id v122 = 0;
        }
        id v123 = v122;

        if (v123)
        {
          if ([v123 isPrimary])
          {
            uint64_t v124 = [v123 identifier];
            uint64_t v125 = [v123 supportedTransports];
            uint64_t v126 = [v123 setupHash];
            [(HMDHome *)v104 _registerPairedAccessory:v124 transports:v125 setupHash:v126];
          }
          [v450 addObject:v123];
        }
        id v127 = v121;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v128 = v127;
        }
        else {
          uint64_t v128 = 0;
        }
        id v129 = v128;

        if (v129)
        {
          if (v120)
          {
            long long v130 = [(HMDHome *)v104 capabilitiesAggregator];
            uint64_t v131 = [v120 uuid];
            [v130 didAddAccessory:v131];
          }
          if ([v120 isCurrentAccessory])
          {
            id v132 = v120;

            v447 = v132;
          }
          uint64_t v133 = [v129 identifier];
          -[HMDHome _registerPairedAccessory:transports:setupHash:](v104, "_registerPairedAccessory:transports:setupHash:", v133, [v129 supportedTransports], 0);
        }
        uint64_t v134 = [(HMDHome *)v104 msgDispatcher];
        [v127 configureWithHome:v104 msgDispatcher:v134 configurationTracker:group initialConfiguration:1];

        long long v135 = [v127 uuid];
        int v136 = [v135 UUIDString];
        [v453 addObject:v136];
      }
      uint64_t v114 = [obj countByEnumeratingWithState:&v496 objects:v543 count:16];
    }
    while (v114);
  }
  else
  {
    v447 = 0;
  }

  long long v137 = (void *)MEMORY[0x230FBD990]();
  uint64_t v138 = v104;
  HMFGetOSLogHandle();
  long long v139 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v139, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v140 = (id)objc_claimAutoreleasedReturnValue();
    long long v141 = NSString;
    HMFUptime();
    objc_msgSend(v141, "stringWithFormat:", @"%.3f", v142 - v102);
    id v143 = (id)objc_claimAutoreleasedReturnValue();
    id v144 = [(HMDHome *)v138 uuid];
    long long v145 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(obj, "count"));
    *(_DWORD *)buf = 138545922;
    id v505 = v140;
    __int16 v506 = 2114;
    v507 = @"homeConfigureStart";
    __int16 v508 = 2112;
    v509 = @"Configured accessories";
    __int16 v510 = 2114;
    v511 = @"state";
    __int16 v512 = 2112;
    v513 = @"homeConfiguredAccessories";
    __int16 v514 = 2114;
    v515 = @"duration";
    __int16 v516 = 2112;
    id v517 = v143;
    __int16 v518 = 2114;
    v519 = @"homeUUID";
    __int16 v520 = 2112;
    id v521 = v144;
    __int16 v522 = 2114;
    v523 = @"accessoriesCount";
    __int16 v524 = 2112;
    id v525 = v145;
    _os_log_impl(&dword_22F52A000, v139, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x70u);
  }
  uint64_t v146 = [MEMORY[0x263F499E0] sharedInstance];
  id v147 = objc_alloc(MEMORY[0x263F499F0]);
  long long v148 = NSString;
  HMFUptime();
  long long v150 = objc_msgSend(v148, "stringWithFormat:", @"%.3f", v149 - v102);
  long long v151 = [(HMDHome *)v138 uuid];
  long long v152 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(obj, "count"));
  long long v153 = HMDTaggedLoggingCreateDictionary();
  long long v154 = objc_msgSend(v147, "initWithTag:data:", @"homeConfigureStart", v153, @"state", @"homeConfiguredAccessories", @"duration", v150, @"homeUUID", v151, @"accessoriesCount", v152);
  long long v155 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v146 submitTaggedEvent:v154 processorList:v155];

  uint64_t v156 = HMFUptime();
  double v158 = v157;
  long long v159 = (void *)MEMORY[0x230FBD990](v156);
  long long v160 = v138;
  HMFGetOSLogHandle();
  long long v161 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v161, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    id v162 = (id)objc_claimAutoreleasedReturnValue();
    long long v163 = [(HMDHome *)v160 uuid];
    *(_DWORD *)buf = 138544898;
    id v505 = v162;
    __int16 v506 = 2114;
    v507 = @"homeConfigureStart";
    __int16 v508 = 2112;
    v509 = @"Configuring rooms, zones, groups, etc";
    __int16 v510 = 2114;
    v511 = @"state";
    __int16 v512 = 2112;
    v513 = @"homeConfigureProperties";
    __int16 v514 = 2114;
    v515 = @"homeUUID";
    __int16 v516 = 2112;
    id v517 = v163;
    _os_log_impl(&dword_22F52A000, v161, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
  }
  long long v164 = [MEMORY[0x263F499E0] sharedInstance];
  id v165 = objc_alloc(MEMORY[0x263F499F0]);
  long long v166 = [(HMDHome *)v160 uuid];
  long long v167 = HMDTaggedLoggingCreateDictionary();
  long long v168 = objc_msgSend(v165, "initWithTag:data:", @"homeConfigureStart", v167, @"state", @"homeConfigureProperties", @"homeUUID", v166);
  long long v169 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v164 submitTaggedEvent:v168 processorList:v169];

  long long v494 = 0u;
  long long v495 = 0u;
  long long v492 = 0u;
  long long v493 = 0u;
  long long v170 = [(HMDHome *)v160 rooms];
  uint64_t v171 = [v170 countByEnumeratingWithState:&v492 objects:v542 count:16];
  if (v171)
  {
    uint64_t v172 = *(void *)v493;
    do
    {
      for (uint64_t k = 0; k != v171; ++k)
      {
        if (*(void *)v493 != v172) {
          objc_enumerationMutation(v170);
        }
        long long v174 = *(void **)(*((void *)&v492 + 1) + 8 * k);
        long long v175 = [(HMDHome *)v160 msgDispatcher];
        long long v176 = [(HMDHome *)v160 workQueue];
        [v174 configure:v175 queue:v176];

        long long v177 = [v174 name];
        id v178 = [(HMDHome *)v160 addName:v177];
      }
      uint64_t v171 = [v170 countByEnumeratingWithState:&v492 objects:v542 count:16];
    }
    while (v171);
  }

  long long v490 = 0u;
  long long v491 = 0u;
  long long v488 = 0u;
  long long v489 = 0u;
  id v179 = [(HMDHome *)v160 zones];
  uint64_t v180 = [v179 countByEnumeratingWithState:&v488 objects:v541 count:16];
  if (v180)
  {
    uint64_t v181 = *(void *)v489;
    do
    {
      for (uint64_t m = 0; m != v180; ++m)
      {
        if (*(void *)v489 != v181) {
          objc_enumerationMutation(v179);
        }
        uint64_t v183 = *(void **)(*((void *)&v488 + 1) + 8 * m);
        id v184 = [(HMDHome *)v160 msgDispatcher];
        long long v185 = [(HMDHome *)v160 workQueue];
        [v183 configure:v184 queue:v185];

        long long v186 = [v183 name];
        id v187 = [(HMDHome *)v160 addName:v186];
      }
      uint64_t v180 = [v179 countByEnumeratingWithState:&v488 objects:v541 count:16];
    }
    while (v180);
  }

  long long v486 = 0u;
  long long v487 = 0u;
  long long v484 = 0u;
  long long v485 = 0u;
  uint64_t v188 = [(HMDHome *)v160 serviceGroups];
  uint64_t v189 = [v188 countByEnumeratingWithState:&v484 objects:v540 count:16];
  if (v189)
  {
    uint64_t v190 = *(void *)v485;
    do
    {
      for (uint64_t n = 0; n != v189; ++n)
      {
        if (*(void *)v485 != v190) {
          objc_enumerationMutation(v188);
        }
        id v192 = *(void **)(*((void *)&v484 + 1) + 8 * n);
        uint64_t v193 = [(HMDHome *)v160 msgDispatcher];
        uint64_t v194 = [(HMDHome *)v160 workQueue];
        [v192 configure:v193 queue:v194];

        uint64_t v195 = [v192 name];
        id v196 = [(HMDHome *)v160 addName:v195];
      }
      uint64_t v189 = [v188 countByEnumeratingWithState:&v484 objects:v540 count:16];
    }
    while (v189);
  }

  long long v482 = 0u;
  long long v483 = 0u;
  long long v480 = 0u;
  long long v481 = 0u;
  uint64_t v197 = [(HMDHome *)v160 actionSets];
  uint64_t v198 = [v197 countByEnumeratingWithState:&v480 objects:v539 count:16];
  if (v198)
  {
    char v456 = 0;
    uint64_t v199 = *(void *)v481;
    do
    {
      for (iuint64_t i = 0; ii != v198; ++ii)
      {
        if (*(void *)v481 != v199) {
          objc_enumerationMutation(v197);
        }
        char v201 = *(void **)(*((void *)&v480 + 1) + 8 * ii);
        uint64_t v202 = (void *)MEMORY[0x230FBD990]();
        id v203 = [(HMDHome *)v160 msgDispatcher];
        uint64_t v204 = [(HMDHome *)v160 workQueue];
        char v205 = [v201 configure:v160 messageDispatcher:v203 queue:v204];

        uint64_t v206 = [v201 name];
        id v207 = [(HMDHome *)v160 addName:v206];

        v456 |= v205;
      }
      uint64_t v198 = [v197 countByEnumeratingWithState:&v480 objects:v539 count:16];
    }
    while (v198);
  }
  else
  {
    char v456 = 0;
  }

  long long v478 = 0u;
  long long v479 = 0u;
  long long v476 = 0u;
  long long v477 = 0u;
  uint64_t v208 = [(HMDHome *)v160 triggerOwnedActionSets];
  uint64_t v209 = [v208 countByEnumeratingWithState:&v476 objects:v538 count:16];
  if (v209)
  {
    uint64_t v210 = *(void *)v477;
    do
    {
      for (juint64_t j = 0; jj != v209; ++jj)
      {
        if (*(void *)v477 != v210) {
          objc_enumerationMutation(v208);
        }
        unint64_t v212 = *(void **)(*((void *)&v476 + 1) + 8 * jj);
        uint64_t v213 = (void *)MEMORY[0x230FBD990]();
        int v214 = [(HMDHome *)v160 msgDispatcher];
        id v215 = [(HMDHome *)v160 workQueue];
        LOBYTE(v212) = [v212 configure:v160 messageDispatcher:v214 queue:v215];

        v456 |= v212;
      }
      uint64_t v209 = [v208 countByEnumeratingWithState:&v476 objects:v538 count:16];
    }
    while (v209);
  }

  long long v474 = 0u;
  long long v475 = 0u;
  long long v472 = 0u;
  long long v473 = 0u;
  long long v216 = [(HMDHome *)v160 triggers];
  uint64_t v217 = [v216 countByEnumeratingWithState:&v472 objects:v537 count:16];
  if (v217)
  {
    uint64_t v218 = *(void *)v473;
    do
    {
      for (kuint64_t k = 0; kk != v217; ++kk)
      {
        if (*(void *)v473 != v218) {
          objc_enumerationMutation(v216);
        }
        uint64_t v220 = *(void **)(*((void *)&v472 + 1) + 8 * kk);
        id v221 = [(HMDHome *)v160 msgDispatcher];
        uint64_t v222 = [(HMDHome *)v160 workQueue];
        [v220 configure:v160 messageDispatcher:v221 queue:v222];

        id v223 = [v220 owner];
        LODWORD(v221) = v223 == 0;

        if (v221)
        {
          uint64_t v224 = [(HMDHome *)v160 currentUser];
          [v220 setOwner:v224];
        }
        id v225 = (void *)MEMORY[0x230FBD990]();
        id v226 = v160;
        HMFGetOSLogHandle();
        id v227 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v227, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          id v228 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          id v505 = v228;
          _os_log_impl(&dword_22F52A000, v227, OS_LOG_TYPE_INFO, "%{public}@Not updating trigger owning device in HH2", buf, 0xCu);
        }
      }
      uint64_t v217 = [v216 countByEnumeratingWithState:&v472 objects:v537 count:16];
    }
    while (v217);
  }

  v229 = (void *)MEMORY[0x230FBD990]();
  v230 = v160;
  HMFGetOSLogHandle();
  v231 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v231, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v232 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v233 = NSString;
    HMFUptime();
    objc_msgSend(v233, "stringWithFormat:", @"%.3f", v234 - v158);
    id v235 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v236 = [(HMDHome *)v230 uuid];
    *(_DWORD *)buf = 138545410;
    id v505 = v232;
    __int16 v506 = 2114;
    v507 = @"homeConfigureStart";
    __int16 v508 = 2112;
    v509 = @"Configured rooms, zones, triggers, etc.";
    __int16 v510 = 2114;
    v511 = @"state";
    __int16 v512 = 2112;
    v513 = @"homeConfiguredProperties";
    __int16 v514 = 2114;
    v515 = @"duration";
    __int16 v516 = 2112;
    id v517 = v235;
    __int16 v518 = 2114;
    v519 = @"homeUUID";
    __int16 v520 = 2112;
    id v521 = v236;
    _os_log_impl(&dword_22F52A000, v231, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x5Cu);
  }
  uint64_t v237 = [MEMORY[0x263F499E0] sharedInstance];
  id v238 = objc_alloc(MEMORY[0x263F499F0]);
  v239 = NSString;
  HMFUptime();
  id v241 = objc_msgSend(v239, "stringWithFormat:", @"%.3f", v240 - v158);
  v242 = [(HMDHome *)v230 uuid];
  id v243 = HMDTaggedLoggingCreateDictionary();
  id v244 = objc_msgSend(v238, "initWithTag:data:", @"homeConfigureStart", v243, @"state", @"homeConfiguredProperties", @"duration", v241, @"homeUUID", v242);
  id v245 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v237 submitTaggedEvent:v244 processorList:v245];

  uint64_t v246 = HMFUptime();
  double v248 = v247;
  uint64_t v249 = (void *)MEMORY[0x230FBD990](v246);
  uint64_t v250 = v230;
  HMFGetOSLogHandle();
  uint64_t v251 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v251, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    id v252 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v253 = [(HMDHome *)v250 uuid];
    *(_DWORD *)buf = 138544898;
    id v505 = v252;
    __int16 v506 = 2114;
    v507 = @"homeConfigureStart";
    __int16 v508 = 2112;
    v509 = @"Configuring users";
    __int16 v510 = 2114;
    v511 = @"state";
    __int16 v512 = 2112;
    v513 = @"homeConfigureUsers";
    __int16 v514 = 2114;
    v515 = @"homeUUID";
    __int16 v516 = 2112;
    id v517 = v253;
    _os_log_impl(&dword_22F52A000, v251, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
  }
  uint64_t v254 = [MEMORY[0x263F499E0] sharedInstance];
  id v255 = objc_alloc(MEMORY[0x263F499F0]);
  id v256 = [(HMDHome *)v250 uuid];
  id v257 = HMDTaggedLoggingCreateDictionary();
  long long v258 = objc_msgSend(v255, "initWithTag:data:", @"homeConfigureStart", v257, @"state", @"homeConfigureUsers", @"homeUUID", v256);
  uint64_t v259 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v254 submitTaggedEvent:v258 processorList:v259];

  long long v470 = 0u;
  long long v471 = 0u;
  long long v468 = 0u;
  long long v469 = 0u;
  uint64_t v260 = [(HMDHome *)v250 removedUsers];
  uint64_t v261 = [v260 countByEnumeratingWithState:&v468 objects:v536 count:16];
  if (v261)
  {
    uint64_t v262 = *(void *)v469;
    do
    {
      for (muint64_t m = 0; mm != v261; ++mm)
      {
        if (*(void *)v469 != v262) {
          objc_enumerationMutation(v260);
        }
        uint64_t v264 = [*(id *)(*((void *)&v468 + 1) + 8 * mm) user];
        [(HMDHome *)v250 _addUserToIdentityRegistry:v264];
      }
      uint64_t v261 = [v260 countByEnumeratingWithState:&v468 objects:v536 count:16];
    }
    while (v261);
  }

  long long v466 = 0u;
  long long v467 = 0u;
  long long v464 = 0u;
  long long v465 = 0u;
  id v443 = [(HMDHome *)v250 users];
  uint64_t v265 = [v443 countByEnumeratingWithState:&v464 objects:v535 count:16];
  if (v265)
  {
    uint64_t v451 = *(void *)v465;
    do
    {
      for (nuint64_t n = 0; nn != v265; ++nn)
      {
        if (*(void *)v465 != v451) {
          objc_enumerationMutation(v443);
        }
        id v267 = *(__CFString **)(*((void *)&v464 + 1) + 8 * nn);
        uint64_t v268 = [(__CFString *)v267 userID];
        char v269 = [(__CFString *)v267 isRemoteGateway];
        if (v268) {
          char v270 = v269;
        }
        else {
          char v270 = 1;
        }
        if ((v270 & 1) == 0)
        {
          id v271 = +[HMDDeviceHandle deviceHandleForDestination:v268];
          if (v271)
          {
            long long v272 = (void *)MEMORY[0x230FBD990]();
            long long v273 = v250;
            HMFGetOSLogHandle();
            uint64_t v274 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v274, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              id v275 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              id v505 = v275;
              __int16 v506 = 2112;
              v507 = v267;
              _os_log_impl(&dword_22F52A000, v274, OS_LOG_TYPE_DEFAULT, "%{public}@Migrating invalid resident user: %@", buf, 0x16u);
            }
            [(HMDHome *)v273 _removeUser:v267];
            long long v276 = +[HMDAccountRegistry sharedRegistry];
            long long v277 = [v276 deviceForHandle:v271];

            uint64_t v278 = [HMDResidentUser alloc];
            uint64_t v279 = [(__CFString *)v267 pairingIdentity];
            long long v280 = [(HMDResidentUser *)v278 initWithDevice:v277 home:v273 pairingIdentity:v279 configurationState:0];

            long long v281 = [(__CFString *)v267 uuid];
            [(HMDUser *)v280 setUUID:v281];

            [(HMDHome *)v273 addUser:v280];
          }
        }
        [(HMDHome *)v250 _addUserToIdentityRegistry:v267];
        [(__CFString *)v267 configureWithHome:v250];
      }
      uint64_t v265 = [v443 countByEnumeratingWithState:&v464 objects:v535 count:16];
    }
    while (v265);
  }

  long long v282 = (void *)MEMORY[0x230FBD990]();
  long long v283 = v250;
  HMFGetOSLogHandle();
  uint64_t v284 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v284, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v285 = (id)objc_claimAutoreleasedReturnValue();
    id v286 = NSString;
    HMFUptime();
    objc_msgSend(v286, "stringWithFormat:", @"%.3f", v287 - v248);
    id v288 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v289 = NSNumber;
    id v290 = [(HMDHome *)v283 users];
    uint64_t v291 = objc_msgSend(v289, "numberWithUnsignedInteger:", objc_msgSend(v290, "count"));
    *(_DWORD *)buf = 138545410;
    id v505 = v285;
    __int16 v506 = 2114;
    v507 = @"homeConfigureStart";
    __int16 v508 = 2112;
    v509 = @"Configured users";
    __int16 v510 = 2114;
    v511 = @"state";
    __int16 v512 = 2112;
    v513 = @"homeConfiguredUsers";
    __int16 v514 = 2114;
    v515 = @"duration";
    __int16 v516 = 2112;
    id v517 = v288;
    __int16 v518 = 2114;
    v519 = @"usersCount";
    __int16 v520 = 2112;
    id v521 = v291;
    _os_log_impl(&dword_22F52A000, v284, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x5Cu);
  }
  id v292 = [MEMORY[0x263F499E0] sharedInstance];
  id v293 = objc_alloc(MEMORY[0x263F499F0]);
  long long v294 = NSString;
  HMFUptime();
  v296 = objc_msgSend(v294, "stringWithFormat:", @"%.3f", v295 - v248);
  uint64_t v297 = NSNumber;
  id v298 = [(HMDHome *)v283 users];
  __int16 v299 = objc_msgSend(v297, "numberWithUnsignedInteger:", objc_msgSend(v298, "count"));
  id v300 = HMDTaggedLoggingCreateDictionary();
  __int16 v301 = objc_msgSend(v293, "initWithTag:data:", @"homeConfigureStart", v300, @"state", @"homeConfiguredUsers", @"duration", v296, @"usersCount", v299);
  v302 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v292 submitTaggedEvent:v301 processorList:v302];

  uint64_t v303 = [(HMDHome *)v283 networkProtectionGroupRegistry];
  [v303 configure];

  id v304 = [(HMDHome *)v283 localCapabilitiesDataSource];
  LODWORD(v296) = [v304 isResidentCapable];

  if (v296)
  {
    uint64_t v305 = [(HMDHome *)v283 uuid];
    id v306 = [v305 UUIDString];
    __int16 v307 = [@"Home.EventRouter.Server.Delegating." stringByAppendingString:v306];

    id v308 = objc_alloc(MEMORY[0x263F49378]);
    __int16 v309 = [v441 workQueue];
    id v310 = v307;
    uint64_t v311 = [v310 UTF8String];
    v312 = [(HMDHome *)v283 uuid];
    uint64_t v313 = [v308 initWithQueue:v309 dataSource:v283 storeReadHandle:0 logCategory:v311 identifier:v312];
    serverDelegatingEventRouter = v283->_serverDelegatingEventRouter;
    v283->_serverDelegatingEventRouter = (HMEDelegatingEventRouter *)v313;

    [(HMDHome *)v283 createRemoteEventRouterServerIfNeeded];
  }
  id v444 = +[HMDUserMessagePolicy userMessagePolicyWithHome:v283 userPrivilege:3 remoteAccessRequired:0];
  v442 = [v441 eventRouterAssertionController];
  uint64_t v315 = [HMDHomeRemoteEventRouterClientController alloc];
  int v316 = [(HMDHome *)v283 messageTargetUUID];
  v317 = [v441 workQueue];
  v318 = [v447 uuid];
  v319 = [(HMDHomeRemoteEventRouterClientController *)v315 initWithMessageTargetUUID:v316 workQueue:v317 dataSource:v283 requestMessageName:@"RemoteEventRouterRequestMessage" updateMessageName:@"RemoteEventRouterUpdateMessageName" multiHopFetchResponseMessageName:@"RER.MHF.ResponseMessageName" clientUserMessagePolicy:v444 currentAccessoryUUID:v318 assertionController:v442];
  [(HMDHome *)v283 setRemoteEventRouterClientController:v319];

  v320 = [v441 localAndRemoteSubscriptionProvider];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    v321 = v320;
  }
  else {
    v321 = 0;
  }
  id v439 = v321;

  v322 = [(HMDHome *)v283 remoteEventRouterClientController];
  v452 = [v322 residentDelegatingEventRouter];

  if (v452) {
    [v439 registerSubRouter:v452];
  }
  id v323 = [(HMDHome *)v283 accessoryInfoFetchController];
  v324 = [(HMDHome *)v283 msgDispatcher];
  v325 = [(HMDHome *)v283 remoteEventRouterClientController];
  [v323 configureWithMessageDispatcher:v324 remoteEventRouterClientController:v325];

  objc_initWeak(&location, v283);
  v326 = [(HMDHome *)v283 workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke;
  block[3] = &unk_264A2CB98;
  objc_copyWeak(&v462, &location);
  id v436 = v447;
  id v459 = v436;
  id obja = obj;
  id v460 = obja;
  id v438 = v437;
  id v461 = v438;
  dispatch_group_notify(group, v326, block);

  v327 = [(HMDHome *)v283 uuid];
  [v441 removeHomeFromAwaitingAutoAcceptHomes:v327];

  uint64_t v328 = HMFUptime();
  double v330 = v329;
  v331 = (void *)MEMORY[0x230FBD990](v328);
  v332 = v283;
  HMFGetOSLogHandle();
  v333 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v333, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    id v334 = (id)objc_claimAutoreleasedReturnValue();
    v335 = [v332 uuid];
    *(_DWORD *)buf = 138544898;
    id v505 = v334;
    __int16 v506 = 2114;
    v507 = @"homeConfigureStart";
    __int16 v508 = 2112;
    v509 = @"Configuring profiles and settings";
    __int16 v510 = 2114;
    v511 = @"state";
    __int16 v512 = 2112;
    v513 = @"homeConfigureProfiles";
    __int16 v514 = 2114;
    v515 = @"homeUUID";
    __int16 v516 = 2112;
    id v517 = v335;
    _os_log_impl(&dword_22F52A000, v333, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
  }
  id v336 = [MEMORY[0x263F499E0] sharedInstance];
  id v337 = objc_alloc(MEMORY[0x263F499F0]);
  v338 = [v332 uuid];
  uint64_t v339 = HMDTaggedLoggingCreateDictionary();
  v340 = objc_msgSend(v337, "initWithTag:data:", @"homeConfigureStart", v339, @"state", @"homeConfigureProfiles", @"homeUUID", v338);
  v341 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v336 submitTaggedEvent:v340 processorList:v341];

  v342 = (void *)MEMORY[0x230FBD990]();
  [v332 _registerForMessages];
  [v332 _registerForNotifications];
  [v332 resubscribeForNotificationsOnResident:0];
  [v332 configureMultiuserSettingsMessengerWithMessengerFactory:v332];
  [v332 _evaluateShouldRelaunchAndSetRelaunch];
  long long v343 = (void *)MEMORY[0x230FBD990]([v332 reEvaluateHomeHubState]);
  long long v344 = v332;
  HMFGetOSLogHandle();
  long long v345 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v345, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v346 = (id)objc_claimAutoreleasedReturnValue();
    long long v347 = [v344 triggers];
    *(_DWORD *)buf = 138543618;
    id v505 = v346;
    __int16 v506 = 2112;
    v507 = v347;
    _os_log_impl(&dword_22F52A000, v345, OS_LOG_TYPE_INFO, "%{public}@Triggers: %@", buf, 0x16u);
  }
  [v344 migrateAfterResidentChange];
  [v344 _updateWoWState:v450];
  if ((v456 & 1) != 0 && [v344 isOwnerUser]) {
    [v344 _updateConfigurationVersion];
  }
  long long v348 = [[HMDMediaActionRouter alloc] initWithDataSource:v344];
  [v344 setMediaActionRouter:v348];

  long long v349 = [v344 personDataManager];
  [v349 configure];

  long long v350 = [[HMDUserActionPredictionManager alloc] initWithHome:v344];
  [v344 setUserActionPredictionManager:v350];

  long long v351 = [v344 userActionPredictionManager];
  [v351 configure];

  uint64_t v352 = [v344 reachabilityNotificationManager];
  long long v353 = [v441 messageDispatcher];
  long long v354 = [v353 secureRemoteTransport];
  long long v355 = [v354 deviceMonitor];
  [v352 configureWithHome:v344 deviceMonitor:v355];

  [v344 configureNaturalLightingWithDemoModeEnabled:0];
  uint64_t v356 = [v344 walletKeyManager];
  [v356 configureWithHome:v344];

  long long v357 = [v344 nfcReaderKeyManager];
  [v357 configureWithHome:v344];

  long long v358 = [v344 lockNotificationManager];
  [v358 configureWithHome:v344];

  long long v359 = [v344 analysisStatePublisher];
  [v359 configureWithHome:v344];

  [v344 configurePrimaryResidentMessageRouterWithFactory:v344 metricsDispatcherFactory:v344];
  long long v360 = [HMDAppleMediaAccessoryMessageRouter alloc];
  long long v361 = [v344 uuid];
  long long v362 = [v344 msgDispatcher];
  v363 = [(HMDAppleMediaAccessoryMessageRouter *)v360 initWithIdentifier:v361 messageDispatcher:v362];
  [v344 setAppleDeviceRouter:v363];

  uint64_t v364 = [v344 appleDeviceRouter];
  [v364 setDataSource:v344];

  v365 = [HMDDelegatingMessageRouter alloc];
  v366 = [v344 msgDispatcher];
  v367 = [v344 appleDeviceRouter];
  v534[0] = v367;
  v368 = [v344 primaryResidentMessageRouter];
  v534[1] = v368;
  uint64_t v369 = [MEMORY[0x263EFF8C0] arrayWithObjects:v534 count:2];
  v370 = [(HMDDelegatingMessageRouter *)v365 initWithMessageDispatcher:v366 routers:v369];
  [v344 setAccessoryMessageRouterViaPrimary:v370];

  v371 = [v344 accessoryMessageRouterViaPrimary];
  [v371 setDataSource:v344];

  [v344 configureUnifiedLanguageValueListSettingDataProviderWithFactory:v344];
  [v344 configureAccessorySettingsMessengerWithMessengerFactory:v344 messageHandlerFactory:v344];
  [v344 configureSiriEndpointProfilesMessengerWithMessengerFactory:v344 messageHandlerFactory:v344];
  v372 = [v344 accessoryConnectionCoordinator];
  v373 = [v344 localCapabilitiesDataSource];
  objc_msgSend(v372, "configureWithIsResidentCapable:", objc_msgSend(v373, "isResidentCapable"));

  v374 = [v344 workQueue];
  v457[0] = MEMORY[0x263EF8330];
  v457[1] = 3221225472;
  v457[2] = __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_784;
  v457[3] = &unk_264A2F7F8;
  v457[4] = v344;
  dispatch_async(v374, v457);

  v375 = (void *)MEMORY[0x230FBD990]();
  v376 = v344;
  HMFGetOSLogHandle();
  v377 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v377, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v378 = (id)objc_claimAutoreleasedReturnValue();
    v379 = NSString;
    HMFUptime();
    objc_msgSend(v379, "stringWithFormat:", @"%.3f", v380 - v330);
    id v381 = (id)objc_claimAutoreleasedReturnValue();
    v382 = [v376 uuid];
    *(_DWORD *)buf = 138545410;
    id v505 = v378;
    __int16 v506 = 2114;
    v507 = @"homeConfigureStart";
    __int16 v508 = 2112;
    v509 = @"Configured profiles and settings";
    __int16 v510 = 2114;
    v511 = @"state";
    __int16 v512 = 2112;
    v513 = @"homeConfiguredProfiles";
    __int16 v514 = 2114;
    v515 = @"duration";
    __int16 v516 = 2112;
    id v517 = v381;
    __int16 v518 = 2114;
    v519 = @"homeUUID";
    __int16 v520 = 2112;
    id v521 = v382;
    _os_log_impl(&dword_22F52A000, v377, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x5Cu);
  }
  v383 = [MEMORY[0x263F499E0] sharedInstance];
  id v384 = objc_alloc(MEMORY[0x263F499F0]);
  id v385 = NSString;
  HMFUptime();
  uint64_t v387 = objc_msgSend(v385, "stringWithFormat:", @"%.3f", v386 - v330);
  __int16 v388 = [v376 uuid];
  uint64_t v389 = HMDTaggedLoggingCreateDictionary();
  uint64_t v390 = objc_msgSend(v384, "initWithTag:data:", @"homeConfigureStart", v389, @"state", @"homeConfiguredProfiles", @"duration", v387, @"homeUUID", v388);
  v391 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v383 submitTaggedEvent:v390 processorList:v391];

  v392 = [HMDResidentSyncManager alloc];
  v393 = [MEMORY[0x263F08A00] defaultCenter];
  v394 = +[HMDMainDriver driver];
  v395 = [v394 coreData];
  v396 = [v376 logEventSubmitter];
  v397 = [(HMDResidentSyncManager *)v392 initWithHome:v376 notificationCenter:v393 persistence:v395 logEventSubmitter:v396];
  [v376 setResidentSyncManager:v397];

  v398 = [v376 residentSyncManager];
  id v399 = (id)[v398 start];

  v400 = [v376 dailyScheduler];
  [v400 registerDailyTaskRunner:v376];

  uint64_t v401 = (void *)MEMORY[0x230FBD990]([v376 updateAccessoryBrowsing]);
  v402 = v376;
  HMFGetOSLogHandle();
  v403 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v403, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v404 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    id v505 = v404;
    _os_log_impl(&dword_22F52A000, v403, OS_LOG_TYPE_INFO, "%{public}@Configuring HMDUserActivityStateDetectorManager - configureWithHomeManager", buf, 0xCu);
  }
  [v402 configureUserActivityStateDetectorManager];
  v405 = (void *)MEMORY[0x230FBD990]([v402[130] configureWithHome:v402]);
  uint64_t v406 = v402;
  HMFGetOSLogHandle();
  v407 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v407, OS_LOG_TYPE_INFO))
  {
    v448 = v405;
    HMFGetLogIdentifier();
    id v408 = (id)objc_claimAutoreleasedReturnValue();
    v409 = NSString;
    HMFUptime();
    objc_msgSend(v409, "stringWithFormat:", @"%.3f", v410 - v11);
    id v411 = (id)objc_claimAutoreleasedReturnValue();
    v412 = [v406 uuid];
    HMFBooleanToString();
    id v413 = (id)objc_claimAutoreleasedReturnValue();
    v414 = NSNumber;
    uint64_t v415 = [v406 accessories];
    v416 = objc_msgSend(v414, "numberWithUnsignedInteger:", objc_msgSend(v415, "count"));
    v417 = NSNumber;
    v418 = [v406 users];
    v419 = objc_msgSend(v417, "numberWithUnsignedInteger:", objc_msgSend(v418, "count"));
    *(_DWORD *)buf = 138546946;
    id v505 = v408;
    __int16 v506 = 2114;
    v507 = @"homeConfigureDone";
    __int16 v508 = 2112;
    v509 = @"Configured home";
    __int16 v510 = 2114;
    v511 = @"state";
    __int16 v512 = 2112;
    v513 = @"end";
    __int16 v514 = 2114;
    v515 = @"duration";
    __int16 v516 = 2112;
    id v517 = v411;
    __int16 v518 = 2114;
    v519 = @"homeUUID";
    __int16 v520 = 2112;
    id v521 = v412;
    __int16 v522 = 2114;
    v523 = @"configChanged";
    __int16 v524 = 2112;
    id v525 = v413;
    __int16 v526 = 2114;
    v527 = @"accessoriesCount";
    __int16 v528 = 2112;
    v529 = v416;
    __int16 v530 = 2114;
    v531 = @"usersCount";
    __int16 v532 = 2112;
    v533 = v419;
    _os_log_impl(&dword_22F52A000, v407, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x98u);

    v405 = v448;
  }

  uint64_t v449 = [MEMORY[0x263F499E0] sharedInstance];
  id v420 = objc_alloc(MEMORY[0x263F499F0]);
  v421 = NSString;
  HMFUptime();
  v423 = objc_msgSend(v421, "stringWithFormat:", @"%.3f", v422 - v11);
  v424 = [v406 uuid];
  v425 = HMFBooleanToString();
  v426 = NSNumber;
  v427 = [v406 accessories];
  v428 = objc_msgSend(v426, "numberWithUnsignedInteger:", objc_msgSend(v427, "count"));
  v429 = NSNumber;
  v430 = [v406 users];
  uint64_t v431 = objc_msgSend(v429, "numberWithUnsignedInteger:", objc_msgSend(v430, "count"));
  v432 = HMDTaggedLoggingCreateDictionary();
  v433 = objc_msgSend(v420, "initWithTag:data:", @"homeConfigureDone", v432, @"state", @"end", @"duration", v423, @"homeUUID", v424, @"configChanged", v425, @"accessoriesCount", v428, @"usersCount", v431);
  v434 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v449 submitTaggedEvent:v433 processorList:v434];

  objc_destroyWeak(&v462);
  objc_destroyWeak(&location);

  return v456 & 1;
}

void __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory:*(void *)(a1 + 32) accessories:*(void *)(a1 + 40) uncommittedTransactions:*(void *)(a1 + 48)];
}

void __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_784(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) accessCodeManager];
  uint64_t v3 = [*(id *)(a1 + 32) msgDispatcher];
  [v2 configureWithMessageDispatcher:v3];

  id v4 = [HMDHomeHindsightCloudShareManager alloc];
  uint64_t v5 = *(void **)(a1 + 32);
  char v6 = [v5 workQueue];
  id v7 = [(HMDHomeHindsightCloudShareManager *)v4 initWithHome:v5 workQueue:v6];
  [*(id *)(a1 + 32) setHindsightCloudShareManager:v7];

  id v8 = [*(id *)(a1 + 32) hindsightCloudShareManager];
  [v8 configure];
}

- (void)_setupActiveNetworkRouterAccessory:(id)a3 existingRouterAccessories:(id)a4
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id v8 = v6;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v50 objects:v61 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v51;
    while (2)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v51 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(id *)(*((void *)&v50 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v14 = v13;
        }
        else {
          long long v14 = 0;
        }
        id v15 = v14;

        if ([v15 isPrimary])
        {
          uint64_t v16 = [v15 networkRouterController];

          if (v16)
          {
            id v41 = v8;
            id v42 = v7;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            id v17 = v7;
            uint64_t v18 = [v17 countByEnumeratingWithState:&v46 objects:v60 count:16];
            id v19 = v15;
            BOOL v45 = v15;
            if (v18)
            {
              uint64_t v20 = v18;
              uint64_t v21 = *(void *)v47;
              id v43 = v17;
              uint64_t v44 = *(void *)v47;
              do
              {
                for (uint64_t j = 0; j != v20; ++j)
                {
                  if (*(void *)v47 != v21) {
                    objc_enumerationMutation(v17);
                  }
                  id v23 = *(void **)(*((void *)&v46 + 1) + 8 * j);
                  if ((objc_msgSend(v23, "isEqual:", v19, v41, v42) & 1) == 0)
                  {
                    uint64_t v24 = (void *)MEMORY[0x230FBD990]();
                    id v25 = self;
                    id v26 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v28 = id v27 = self;
                      [v23 shortDescription];
                      v30 = uint64_t v29 = v20;
                      uint64_t v31 = [v19 shortDescription];
                      *(_DWORD *)buf = 138543874;
                      __int16 v55 = v28;
                      __int16 v56 = 2112;
                      uint64_t v57 = v30;
                      __int16 v58 = 2112;
                      uint64_t v59 = v31;
                      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Removing existing Wi-Fi router accessory '%@' while adding a new Wi-Fi router accessory '%@'", buf, 0x20u);

                      id v19 = v45;
                      uint64_t v20 = v29;

                      self = v27;
                      id v17 = v43;
                      uint64_t v21 = v44;
                    }

                    -[HMDHome __removeAccessory:isBeingReplaced:isForceUpdate:message:](v25, v23, 1, 0, 0);
                  }
                }
                uint64_t v20 = [v17 countByEnumeratingWithState:&v46 objects:v60 count:16];
              }
              while (v20);
            }

            uint64_t v32 = [v19 uuid];
            __int16 v33 = [(HMDHome *)self activeNetworkRouterUUID];
            char v34 = [v32 isEqual:v33];

            if (v34)
            {
              [(HMDHome *)self _evaluateNetworkProtectionAndRouterManagement];
              id v8 = v41;
              id v7 = v42;
              uint64_t v35 = v45;
            }
            else
            {
              uint64_t v36 = (void *)MEMORY[0x230FBD990]();
              char v37 = self;
              __int16 v38 = HMFGetOSLogHandle();
              id v8 = v41;
              id v7 = v42;
              if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
              {
                int v39 = HMFGetLogIdentifier();
                __int16 v40 = [v45 shortDescription];
                *(_DWORD *)buf = 138543618;
                __int16 v55 = v39;
                __int16 v56 = 2112;
                uint64_t v57 = v40;
                _os_log_impl(&dword_22F52A000, v38, OS_LOG_TYPE_INFO, "%{public}@Adding transaction to set %@ as active network router accessory", buf, 0x16u);
              }
              uint64_t v35 = v45;
              -[HMDHome _addTransactionForActiveNetworkRouterAccessory:isReplacement:](v37, "_addTransactionForActiveNetworkRouterAccessory:isReplacement:", v45, [v17 count] != 0);
            }

            goto LABEL_31;
          }
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v50 objects:v61 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }
LABEL_31:
}

- (HMDLaunchHandler)launchHandler
{
  return +[HMDLaunchHandler sharedHandler];
}

- (void)setBackingStore:(id)a3
{
  id v4 = (HMDBackingStore *)a3;
  os_unfair_recursive_lock_lock_with_options();
  backingStore = self->_backingStore;
  self->_backingStore = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDBackingStore)backingStore
{
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v3 = self->_backingStore;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setWatchSkipVersionCheck:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_watchSkipVersionChecuint64_t k = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)watchSkipVersionCheck
{
  LOBYTE(self) = self->_watchSkipVersionCheck;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)_addUserToIdentityRegistry:(id)a3
{
  id v12 = a3;
  uint64_t v3 = [v12 userID];
  id v4 = v12;
  if (v3)
  {
    uint64_t v5 = [v12 pairingIdentity];

    id v4 = v12;
    if (v5)
    {
      id v6 = v12;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v7 = v6;
      }
      else {
        id v7 = 0;
      }
      id v8 = v7;

      if (v8)
      {
        uint64_t v9 = [v8 device];
        if (v9)
        {
          uint64_t v10 = +[HMDIdentityRegistry sharedRegistry];
          uint64_t v11 = [v6 pairingIdentity];
          [v10 registerIdentity:v11 device:v9 object:v6];
LABEL_11:
        }
      }
      else
      {
        uint64_t v9 = [v6 account];
        if (v9)
        {
          uint64_t v10 = +[HMDIdentityRegistry sharedRegistry];
          uint64_t v11 = [v6 pairingIdentity];
          [v10 registerIdentity:v11 account:v9 object:v6];
          goto LABEL_11;
        }
      }

      id v4 = v12;
    }
  }
}

- (void)_removeMediaSessionWithIdentifier:(id)a3
{
  id v4 = [(HMDHome *)self mediaSessionWithIdentifier:a3];
  if (v4)
  {
    id v5 = v4;
    [v4 registerForSessionUpdates:0];
    [(HMDHome *)self removeMediaSession:v5];
    id v4 = v5;
  }
}

- (id)_createMediaSessionWithEndpoint:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 sessionIdentifier];
  if (v5)
  {
    id v6 = [(HMDHome *)self mediaSessionStateWithIdentifier:v5];
    if (!v6)
    {
      id v6 = [[HMDMediaSessionState alloc] initWithSessionIdentifier:v5];
      [(HMDHome *)self addMediaSessionState:v6];
    }
    id v7 = [HMDMediaSession alloc];
    id v8 = [MEMORY[0x263EFF8C0] array];
    uint64_t v9 = [(HMDMediaSession *)v7 initWithEndpoint:v4 mediaProfiles:v8 state:v6];

    [(HMDHome *)self __addMediaSession:v9];
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x230FBD990]();
    uint64_t v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int v15 = 138543618;
      uint64_t v16 = v13;
      __int16 v17 = 2112;
      id v18 = v4;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Cannot create a mediaSession with nil sessionIdentifier for endpoint %@", (uint8_t *)&v15, 0x16u);
    }
    uint64_t v9 = 0;
  }

  return v9;
}

- (id)_addMediaSessionForCurrentAccessory:(id)a3
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  id v7 = [v6 mediaProfile];
  if (v7)
  {
    id v8 = [v4 identifier];
    uint64_t v9 = +[HMDMediaSession sessionForCurrentAccessoryWithSessionIdentifier:v8 mediaProfile:v7];

    if (v9)
    {
      uint64_t v10 = [v9 state];
      [(HMDHome *)self addMediaSessionState:v10];

      [(HMDHome *)self __addMediaSession:v9];
      [v4 updateMediaSession:v9];
    }
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = self;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      long long v14 = HMFGetLogIdentifier();
      int v15 = [v4 name];
      int v17 = 138543618;
      id v18 = v14;
      __int16 v19 = 2112;
      uint64_t v20 = v15;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Current accessory '%@' not an Apple media accessory or no media profile", (uint8_t *)&v17, 0x16u);
    }
    uint64_t v9 = 0;
  }

  return v9;
}

- (void)__addMediaSession:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v7 = v4;
    id v5 = [(HMDHome *)self notificationRegistrations];
    uint64_t v6 = [v5 count];

    if (v6) {
      [v7 registerForSessionUpdates:1];
    }
    [(HMDHome *)self addMediaSession:v7];
    id v4 = v7;
  }
}

- (id)_createBuiltinActionSets
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v3 = [MEMORY[0x263EFF980] array];
  +[HMDHome getBuiltinActionSets];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v24 = [v4 countByEnumeratingWithState:&v25 objects:v35 count:16];
  if (v24)
  {
    uint64_t v23 = *(void *)v26;
    *(void *)&long long v5 = 138543874;
    long long v20 = v5;
    id v21 = v4;
    do
    {
      for (uint64_t i = 0; i != v24; ++i)
      {
        if (*(void *)v26 != v23) {
          objc_enumerationMutation(v4);
        }
        uint64_t v7 = *(void *)(*((void *)&v25 + 1) + 8 * i);
        id v8 = objc_msgSend(v4, "objectForKeyedSubscript:", v7, v20);
        uint64_t v9 = HMDLocalizedStringForKey(v8);

        uint64_t v10 = [(HMDHome *)self addName:v9];
        if (v10)
        {
          uint64_t v11 = (void *)MEMORY[0x230FBD990]();
          id v12 = self;
          id v13 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v14 = id v22 = v11;
            [(HMDHome *)v12 name];
            int v15 = self;
            int v17 = v16 = v3;
            *(_DWORD *)buf = v20;
            id v30 = v14;
            __int16 v31 = 2112;
            uint64_t v32 = v9;
            __int16 v33 = 2112;
            char v34 = v17;
            _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Could not add builtin actionSet '%@' to home '%@' namespace", buf, 0x20u);

            uint64_t v3 = v16;
            self = v15;
            id v4 = v21;

            uint64_t v11 = v22;
          }
        }
        id v18 = [(HMDHome *)self createActionSetWithName:v9 uuid:0 type:v7];
        [v3 addObject:v18];
      }
      uint64_t v24 = [v4 countByEnumeratingWithState:&v25 objects:v35 count:16];
    }
    while (v24);
  }

  return v3;
}

- (id)createActionSetWithName:(id)a3 uuid:(id)a4 type:(id)a5
{
  id v8 = a5;
  id v9 = a4;
  id v10 = a3;
  uint64_t v11 = [HMDActionSet alloc];
  id v12 = [(HMDHome *)self workQueue];
  id v13 = [(HMDActionSet *)v11 initWithName:v10 uuid:v9 type:v8 home:self queue:v12];

  long long v14 = [(HMDHome *)self msgDispatcher];
  int v15 = [(HMDHome *)self workQueue];
  [(HMDActionSet *)v13 configure:self messageDispatcher:v14 queue:v15];

  return v13;
}

- (void)updateActionSetExecutionDates:(id)a3
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v5 = [(HMDHome *)self actionSets];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v28 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        uint64_t v11 = [v10 uuid];
        id v12 = [v4 actionSetWithUUID:v11];

        id v13 = [v12 lastExecutionDate];
        [v10 setLastExecutionDate:v13];
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v27 objects:v32 count:16];
    }
    while (v7);
  }

  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v14 = [(HMDHome *)self triggerOwnedActionSets];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v24;
    do
    {
      for (uint64_t j = 0; j != v16; ++j)
      {
        if (*(void *)v24 != v17) {
          objc_enumerationMutation(v14);
        }
        __int16 v19 = *(void **)(*((void *)&v23 + 1) + 8 * j);
        long long v20 = [v19 uuid];
        id v21 = [v4 triggerOwnedActionSetWithUUID:v20];

        id v22 = [v21 lastExecutionDate];
        [v19 setLastExecutionDate:v22];
      }
      uint64_t v16 = [v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v16);
  }
}

- (id)filterBuiltinActionSets:(id)a3
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = a3;
  id v4 = +[HMDHome getBuiltinActionSets];
  long long v5 = [v4 allKeys];

  uint64_t v6 = [MEMORY[0x263EFF980] array];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v7 = v3;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        id v13 = objc_msgSend(v12, "type", (void)v16);
        int v14 = [v5 containsObject:v13];

        if (v14) {
          [v6 addObject:v12];
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v9);
  }

  return v6;
}

- (void)computeBridgedAccessoriesForAllBridges
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v3 = [MEMORY[0x263EFF9A0] dictionary];
  id v4 = [(HMDHome *)self accessories];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v34 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(id *)(*((void *)&v33 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        id v11 = v10;

        id v12 = [v11 bridge];
        id v13 = v12;
        if (v12)
        {
          int v14 = [v12 uuid];
          uint64_t v15 = objc_msgSend(v3, "hmf_mutableSetForKey:", v14);

          if (!v15)
          {
            uint64_t v15 = [MEMORY[0x263EFF9C0] set];
            long long v16 = [v13 uuid];
            [v3 setObject:v15 forKey:v16];
          }
          long long v17 = [v9 uuid];
          [v15 addObject:v17];
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v33 objects:v38 count:16];
    }
    while (v6);
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v18 = v3;
  uint64_t v19 = [v18 countByEnumeratingWithState:&v29 objects:v37 count:16];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)v30;
    do
    {
      for (uint64_t j = 0; j != v20; ++j)
      {
        if (*(void *)v30 != v21) {
          objc_enumerationMutation(v18);
        }
        uint64_t v23 = *(void *)(*((void *)&v29 + 1) + 8 * j);
        long long v24 = objc_msgSend(v18, "hmf_mutableSetForKey:", v23, (void)v29);
        long long v25 = objc_msgSend(v4, "hmf_firstObjectWithUUID:", v23);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v26 = v25;
        }
        else {
          long long v26 = 0;
        }
        id v27 = v26;

        if (v27) {
          BOOL v28 = v24 == 0;
        }
        else {
          BOOL v28 = 1;
        }
        if (!v28) {
          [v27 setIdentifiersForBridgedAccessories:v24];
        }
      }
      uint64_t v20 = [v18 countByEnumeratingWithState:&v29 objects:v37 count:16];
    }
    while (v20);
  }
}

- (void)__handleProcessStateChange:(id)a3
{
  id v4 = [a3 userInfo];
  uint64_t v5 = [v4 objectForKeyedSubscript:@"processInfo"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = v6;

  if (v7)
  {
    uint64_t v8 = [v7 bundleIdentifier];
    unint64_t v9 = [v7 state];
    if (v8) {
      BOOL v10 = v9 > 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10 && ((1 << v9) & 0x1A) != 0)
    {
      id v12 = [(HMDHome *)self workQueue];
      uint64_t v14 = MEMORY[0x263EF8330];
      uint64_t v15 = 3221225472;
      long long v16 = __38__HMDHome___handleProcessStateChange___block_invoke;
      long long v17 = &unk_264A2F820;
      id v18 = v8;
      uint64_t v19 = self;
      dispatch_async(v12, &v14);
    }
    id v13 = [(HMDHome *)self hapAccessories];
    objc_msgSend(v13, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &__block_literal_global_720);
  }
}

uint64_t __38__HMDHome___handleProcessStateChange___block_invoke(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = +[HMDAccessorySetupManager accessorySetupHostBundleIdentifier];
  LODWORD(v2) = [v2 isEqualToString:v3];

  if (v2) {
    [*(id *)(a1 + 40) _cleanAddAccessoryOperations];
  }
  uint64_t v5 = *(void *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  return [v4 _disableNotificationsForClient:v5];
}

uint64_t __38__HMDHome___handleProcessStateChange___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 checkHAPSessionRestore];
}

- (void)_startHomeNotificationDeregistrationTimer
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHome *)self disableNotificationTimer];

  if (v3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    uint64_t v5 = self;
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      uint64_t v8 = [(HMDHome *)v5 disableNotificationTimer];
      int v21 = 138543618;
      id v22 = v7;
      __int16 v23 = 2112;
      long long v24 = v8;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Kicking notification disable timer: %@", (uint8_t *)&v21, 0x16u);
    }
    unint64_t v9 = [(HMDHome *)v5 disableNotificationTimer];
    [v9 kick];
  }
  else
  {
    id v10 = objc_alloc(MEMORY[0x263F42658]);
    id v11 = (void *)[v10 initWithTimeInterval:1 options:*(double *)&disableNotificationsDeferPeriod];
    [(HMDHome *)self setDisableNotificationTimer:v11];

    id v12 = [(HMDHome *)self workQueue];
    id v13 = [(HMDHome *)self disableNotificationTimer];
    [v13 setDelegateQueue:v12];

    uint64_t v14 = [(HMDHome *)self disableNotificationTimer];
    [v14 setDelegate:self];

    uint64_t v15 = [(HMDHome *)self disableNotificationTimer];
    [v15 resume];

    long long v16 = (void *)MEMORY[0x230FBD990]();
    long long v17 = self;
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      uint64_t v20 = [(HMDHome *)v17 disableNotificationTimer];
      int v21 = 138543618;
      id v22 = v19;
      __int16 v23 = 2112;
      long long v24 = v20;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Started notification disable timer: %@", (uint8_t *)&v21, 0x16u);
    }
  }
}

- (void)_disableDirectCharacteristicNotificationsForClient:(id)a3
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v4 = a3;
  v24[0] = 0;
  v24[1] = v24;
  void v24[2] = 0x2020000000;
  char v25 = 0;
  uint64_t v5 = dispatch_group_create();
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v6 = [(HMDHome *)self accessories];
  id v7 = (void *)[v6 copy];

  uint64_t v8 = [v7 countByEnumeratingWithState:&v20 objects:v26 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(v7);
        }
        id v11 = *(id *)(*((void *)&v20 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v12 = v11;
        }
        else {
          id v12 = 0;
        }
        id v13 = v12;

        if (v13)
        {
          dispatch_group_enter(v5);
          aBlock[0] = MEMORY[0x263EF8330];
          aBlock[1] = 3221225472;
          aBlock[2] = __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke;
          aBlock[3] = &unk_264A2B4C0;
          uint64_t v19 = v24;
          id v18 = v5;
          uint64_t v14 = _Block_copy(aBlock);
          [v13 disableNotificationsForBundleID:v4 completionHandler:v14];
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v20 objects:v26 count:16];
    }
    while (v8);
  }

  uint64_t v15 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke_2;
  block[3] = &unk_264A2F0A0;
  void block[4] = self;
  void block[5] = v24;
  dispatch_group_notify(v5, v15, block);

  _Block_object_dispose(v24, 8);
}

void __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke(uint64_t a1, int a2)
{
  if (a2) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke_2(uint64_t result)
{
  if (*(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24)) {
    return [*(id *)(result + 32) saveToCurrentAccountWithReason:@"HMDApplicationTerminatedSaveReason"];
  }
  return result;
}

- (void)_disableNotificationsForClient:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  uint64_t v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    int v14 = 138543618;
    uint64_t v15 = v9;
    __int16 v16 = 2112;
    id v17 = v4;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Disabling notification for client %@", (uint8_t *)&v14, 0x16u);
  }
  id v10 = [(HMDHome *)v7 notificationRegistrations];
  if ([v10 containsObject:v4])
  {
    id v11 = [(HMDHome *)v7 notificationDeregistrations];
    char v12 = [v11 containsObject:v4];

    if ((v12 & 1) == 0)
    {
      [(HMDHome *)v7 addNotificationDeregistrationForClientIdentifier:v4];
      [(HMDHome *)v7 _startHomeNotificationDeregistrationTimer];
    }
  }
  else
  {
  }
  id v13 = [@"com.apple.HomeKit.client." stringByAppendingString:v4];
  [(HMDHome *)v7 _disableDirectCharacteristicNotificationsForClient:v13];
}

- (void)_cleanAddAccessoryOperations
{
  os_unfair_recursive_lock_lock_with_options();
  [(NSMapTable *)self->_addPendingAccessories removeAllObjects];
  [(NSMutableDictionary *)self->_addPendingAccessorySetupCodeHandlers removeAllObjects];
  [(NSMutableDictionary *)self->_addPendingAccessorySetupCodes removeAllObjects];
  [(NSMutableDictionary *)self->_addPendingAccessoryOnboardingSetupPayloadStrings removeAllObjects];
  os_unfair_recursive_lock_unlock();
}

- (void)handleAccessoryReachabilityChangeNotification:(id)a3
{
  id v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __57__HMDHome_handleAccessoryReachabilityChangeNotification___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __57__HMDHome_handleAccessoryReachabilityChangeNotification___block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _hasPairedReachableBTLEAccessories];
  id v3 = *(void **)(a1 + 32);
  return [v3 setAnyBTLEAccessoryReachable:v2];
}

- (void)handleClientProcessDisconnectedNotification:(id)a3
{
  id v4 = [a3 object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = v5;

  if (v6)
  {
    id v7 = [v6 bundleIdentifier];
    if (v7)
    {
      uint64_t v8 = [(HMDHome *)self workQueue];
      v9[0] = MEMORY[0x263EF8330];
      v9[1] = 3221225472;
      void v9[2] = __55__HMDHome_handleClientProcessDisconnectedNotification___block_invoke;
      void v9[3] = &unk_264A2F820;
      void v9[4] = self;
      id v10 = v7;
      dispatch_async(v8, v9);
    }
  }
}

uint64_t __55__HMDHome_handleClientProcessDisconnectedNotification___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _disableNotificationsForClient:*(void *)(a1 + 40)];
}

- (void)_registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientIdentifier:(id)a5
{
  BOOL v6 = a3;
  uint64_t v48 = *MEMORY[0x263EF8340];
  id v8 = a4;
  id v9 = a5;
  id v10 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v10);

  if ([(HMDHome *)self isFeatureMatteriPhoneOnlyPairingControlEnabled])
  {
    if (v9) {
      id v11 = v9;
    }
    else {
      id v11 = v8;
    }
    id v12 = v11;
    if (([v12 isEqualToString:*MEMORY[0x263F0C7A8]] & 1) != 0
      || ([v12 isEqualToString:*MEMORY[0x263F0D238]] & 1) != 0
      || ([v12 isEqualToString:*MEMORY[0x263F0DAE8]] & 1) != 0
      || ([v12 isEqualToString:*MEMORY[0x263F0CF40]] & 1) != 0
      || [v12 isEqualToString:*MEMORY[0x263F0CEB8]])
    {
      id v13 = (void *)MEMORY[0x230FBD990]();
      int v14 = self;
      uint64_t v15 = HMFGetOSLogHandle();
      BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
      if (v6)
      {
        if (v16)
        {
          id v17 = HMFGetLogIdentifier();
          int v42 = 138543874;
          id v43 = v17;
          __int16 v44 = 2112;
          id v45 = v9;
          __int16 v46 = 2112;
          id v47 = v8;
          _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_DEBUG, "%{public}@registerForMatterFabricNotifications:YES - skip registering client %@, registrationIdentifier = %@", (uint8_t *)&v42, 0x20u);
        }
        goto LABEL_35;
      }
      if (v16)
      {
        uint64_t v18 = HMFGetLogIdentifier();
        int v42 = 138543874;
        id v43 = v18;
        __int16 v44 = 2112;
        id v45 = v9;
        __int16 v46 = 2112;
        id v47 = v8;
        _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_DEBUG, "%{public}@registerForMatterFabricNotifications:NO - allow deregistration for client %@, registrationIdentifier = %@", (uint8_t *)&v42, 0x20u);
      }
    }
    else if (v6)
    {
      __int16 v40 = [(HMDHome *)self matterFabricEnabledClients];
      char v41 = [v40 containsObject:v8];

      if (v41)
      {
LABEL_19:
        long long v20 = [(HMDHome *)self homeManager];
        long long v21 = [(HMDHome *)self matterFabricEnabledClients];
        uint64_t v22 = [v21 count];

        if (v22)
        {
          BOOL v23 = [(HMDHome *)self currentMatterClientRegistration];
          long long v24 = (void *)MEMORY[0x230FBD990]();
          char v25 = self;
          long long v26 = HMFGetOSLogHandle();
          uint64_t v27 = v26;
          if (v23)
          {
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            {
LABEL_24:

LABEL_34:

LABEL_35:
              goto LABEL_36;
            }
            BOOL v28 = HMFGetLogIdentifier();
            long long v29 = [(HMDHome *)v25 matterFabricEnabledClients];
            int v42 = 138543618;
            id v43 = v28;
            __int16 v44 = 2112;
            id v45 = v29;
            _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_DEBUG, "%{public}@Not updating matter fabric registration as we are registered and have the clients %@", (uint8_t *)&v42, 0x16u);

LABEL_23:
            goto LABEL_24;
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v38 = HMFGetLogIdentifier();
            int v42 = 138543362;
            id v43 = v38;
            _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Updating matter fabric registration as we are not registered but have clients", (uint8_t *)&v42, 0xCu);
          }
          uint64_t v39 = [v20 chipDataSource];
          [v39 updateNotificationsEnabled:1 forHome:v25 keepAliveOnly:1];

          long long v36 = v25;
          uint64_t v37 = 1;
        }
        else
        {
          long long v30 = [(HMDHome *)self matterFabricEnabledClients];
          uint64_t v31 = [v30 count];

          if (v31) {
            goto LABEL_34;
          }
          BOOL v32 = [(HMDHome *)self currentMatterClientRegistration];
          long long v24 = (void *)MEMORY[0x230FBD990]();
          char v25 = self;
          long long v33 = HMFGetOSLogHandle();
          uint64_t v27 = v33;
          if (!v32)
          {
            if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_24;
            }
            BOOL v28 = HMFGetLogIdentifier();
            int v42 = 138543362;
            id v43 = v28;
            _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_DEBUG, "%{public}@Not updating matter fabric registration as we are not registered and have no clients", (uint8_t *)&v42, 0xCu);
            goto LABEL_23;
          }
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            long long v34 = HMFGetLogIdentifier();
            int v42 = 138543362;
            id v43 = v34;
            _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Updating matter fabric registration as we are registered but have no clients", (uint8_t *)&v42, 0xCu);
          }
          long long v35 = [v20 chipDataSource];
          [v35 updateNotificationsEnabled:0 forHome:v25 keepAliveOnly:1];

          long long v36 = v25;
          uint64_t v37 = 0;
        }
        [(HMDHome *)v36 setCurrentMatterClientRegistration:v37];
        goto LABEL_34;
      }
      uint64_t v19 = [(HMDHome *)self matterFabricEnabledClients];
      [v19 addObject:v8];
LABEL_18:

      goto LABEL_19;
    }
    uint64_t v19 = [(HMDHome *)self matterFabricEnabledClients];
    [v19 removeObject:v8];
    goto LABEL_18;
  }
LABEL_36:
}

- (void)registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientIdentifier:(id)a5
{
  id v8 = a5;
  id v9 = a4;
  id v10 = [(HMDHome *)self workQueue];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = __88__HMDHome_registerForMatterFabricNotifications_registrationIdentifier_clientIdentifier___block_invoke;
  void v11[3] = &unk_264A2B1D8;
  BOOL v12 = a3;
  void v11[4] = self;
  void v11[5] = v9;
  void v11[6] = v8;
  dispatch_async(v10, v11);
}

uint64_t __88__HMDHome_registerForMatterFabricNotifications_registrationIdentifier_clientIdentifier___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _registerForMatterFabricNotifications:*(unsigned __int8 *)(a1 + 56) registrationIdentifier:*(void *)(a1 + 40) clientIdentifier:*(void *)(a1 + 48)];
}

- (void)registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4
{
  id v6 = a4;
  id v7 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __71__HMDHome_registerForMatterFabricNotifications_registrationIdentifier___block_invoke;
  block[3] = &unk_264A2DFC8;
  BOOL v9 = a3;
  void block[4] = self;
  void block[5] = v6;
  dispatch_async(v7, block);
}

uint64_t __71__HMDHome_registerForMatterFabricNotifications_registrationIdentifier___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _registerForMatterFabricNotifications:*(unsigned __int8 *)(a1 + 48) registrationIdentifier:*(void *)(a1 + 40) clientIdentifier:0];
}

- (void)_registerForAccessoryReachabilityNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientIdentifier:(id)a5
{
  BOOL v6 = a3;
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v8 = a4;
  id v9 = a5;
  id v10 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v10);

  id v11 = [(HMDHome *)self accessoryRemoteReachabilityEnabledClients];
  BOOL v12 = v11;
  if (v6)
  {
    char v13 = [v11 containsObject:v8];

    if (v13) {
      goto LABEL_6;
    }
    BOOL v12 = [(HMDHome *)self accessoryRemoteReachabilityEnabledClients];
    [v12 addObject:v8];
  }
  else
  {
    [v11 removeObject:v8];
  }

LABEL_6:
  int v14 = [(HMDHome *)self accessoryRemoteReachabilityEnabledClients];
  uint64_t v15 = [v14 count];

  if (v15)
  {
    BOOL v16 = [(HMDHome *)self currentRemoteReachabilityRegistration];
    id v17 = (void *)MEMORY[0x230FBD990]();
    uint64_t v18 = self;
    uint64_t v19 = HMFGetOSLogHandle();
    long long v20 = v19;
    if (v16)
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        long long v21 = HMFGetLogIdentifier();
        uint64_t v22 = [(HMDHome *)v18 accessoryRemoteReachabilityEnabledClients];
        int v35 = 138543618;
        long long v36 = v21;
        __int16 v37 = 2112;
        __int16 v38 = v22;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Not updating remote accessory reachability registration as we are registered and have the clients %@", (uint8_t *)&v35, 0x16u);
      }
    }
    else
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v23 = HMFGetLogIdentifier();
        int v35 = 138543362;
        long long v36 = v23;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@Updating remote accessory reachability registration as we are not registered but have clients", (uint8_t *)&v35, 0xCu);
      }
      if (v9) {
        id v24 = v9;
      }
      else {
        id v24 = v8;
      }
      [(HMDHome *)v18 __registerForRemoteAccessoryReachabilityNotifications:1 clientIdentifier:v24];
    }
  }
  char v25 = [(HMDHome *)self accessoryRemoteReachabilityEnabledClients];
  uint64_t v26 = [v25 count];

  if (!v26)
  {
    BOOL v27 = [(HMDHome *)self currentRemoteReachabilityRegistration];
    BOOL v28 = (void *)MEMORY[0x230FBD990]();
    long long v29 = self;
    long long v30 = HMFGetOSLogHandle();
    uint64_t v31 = v30;
    if (v27)
    {
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v32 = HMFGetLogIdentifier();
        int v35 = 138543362;
        long long v36 = v32;
        _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Updating remote accessory reachability registration as we are registered but have no clients", (uint8_t *)&v35, 0xCu);
      }
      if (v9) {
        id v33 = v9;
      }
      else {
        id v33 = v8;
      }
      [(HMDHome *)v29 __registerForRemoteAccessoryReachabilityNotifications:0 clientIdentifier:v33];
    }
    else
    {
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        long long v34 = HMFGetLogIdentifier();
        int v35 = 138543362;
        long long v36 = v34;
        _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_DEBUG, "%{public}@Not updating remote accessory reachability registration as we are not registered and have no clients", (uint8_t *)&v35, 0xCu);
      }
    }
  }
}

- (void)registerForAccessoryReachabilityNotifications:(BOOL)a3 registrationIdentifier:(id)a4
{
  id v6 = a4;
  id v7 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __80__HMDHome_registerForAccessoryReachabilityNotifications_registrationIdentifier___block_invoke;
  block[3] = &unk_264A2DFC8;
  BOOL v9 = a3;
  void block[4] = self;
  void block[5] = v6;
  dispatch_async(v7, block);
}

uint64_t __80__HMDHome_registerForAccessoryReachabilityNotifications_registrationIdentifier___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _registerForAccessoryReachabilityNotifications:*(unsigned __int8 *)(a1 + 48) registrationIdentifier:*(void *)(a1 + 40) clientIdentifier:0];
}

- (void)handleLastProcessDidBecomeInactiveNotification:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __58__HMDHome_handleLastProcessDidBecomeInactiveNotification___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  BOOL v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __58__HMDHome_handleLastProcessDidBecomeInactiveNotification___block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = objc_msgSend(v2, "hmf_stringForKey:", @"HMDXPCConnectionClientIdentifierKey");

  [*(id *)(a1 + 40) _registerForAccessoryReachabilityNotifications:0 registrationIdentifier:@"HMDAccessoryActiveClientRemoteRegistrationIdentifierKey" clientIdentifier:v3];
  [*(id *)(a1 + 40) _registerForMatterFabricNotifications:0 registrationIdentifier:@"HMDAccessoryActiveClientRemoteRegistrationIdentifierKey" clientIdentifier:v3];
  id v4 = [*(id *)(a1 + 40) WiFiAssertion];

  if (v4)
  {
    uint64_t v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = *(id *)(a1 + 40);
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = HMFGetLogIdentifier();
      int v12 = 138543362;
      char v13 = v8;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Releasing WiFi assertion", (uint8_t *)&v12, 0xCu);
    }
    BOOL v9 = [*(id *)(a1 + 40) wifiManager];
    id v10 = [*(id *)(a1 + 40) WiFiAssertion];
    [v9 endActiveAssertion:v10];

    id v11 = [*(id *)(a1 + 40) wifiManager];
    [v11 releaseWoWAssertion];

    [*(id *)(a1 + 40) setWiFiAssertion:0];
  }
}

- (void)handleFirstProcessDidBecomeActiveNotification:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __57__HMDHome_handleFirstProcessDidBecomeActiveNotification___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __57__HMDHome_handleFirstProcessDidBecomeActiveNotification___block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (isWatch())
  {
    if ([*(id *)(a1 + 32) remoteAccessIsEnabled])
    {
      uint64_t v2 = [*(id *)(a1 + 32) WiFiAssertion];

      if (!v2)
      {
        id v3 = (void *)MEMORY[0x230FBD990]();
        id v4 = *(id *)(a1 + 32);
        uint64_t v5 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          id v6 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          BOOL v16 = v6;
          _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Taking WiFi assertion", buf, 0xCu);
        }
        id v7 = [*(id *)(a1 + 32) wifiManager];
        id v8 = NSString;
        BOOL v9 = [*(id *)(a1 + 32) shortDescription];
        id v10 = [v8 stringWithFormat:@"Remote Access for %@", v9];
        id v11 = [v7 beginActiveAssertionWithOptions:0 reason:v10];
        [*(id *)(a1 + 32) setWiFiAssertion:v11];

        int v12 = [*(id *)(a1 + 32) wifiManager];
        [v12 takeWoWAssertion];
      }
    }
  }
  char v13 = [*(id *)(a1 + 40) userInfo];
  uint64_t v14 = objc_msgSend(v13, "hmf_stringForKey:", @"HMDXPCConnectionClientIdentifierKey");

  [*(id *)(a1 + 32) _registerForAccessoryReachabilityNotifications:1 registrationIdentifier:@"HMDAccessoryActiveClientRemoteRegistrationIdentifierKey" clientIdentifier:v14];
  [*(id *)(a1 + 32) _registerForMatterFabricNotifications:1 registrationIdentifier:@"HMDAccessoryActiveClientRemoteRegistrationIdentifierKey" clientIdentifier:v14];
}

- (void)setPrimaryNetworkRouterManagingDeviceUUID:(id)a3
{
  id v4 = (NSUUID *)a3;
  os_unfair_recursive_lock_lock_with_options();
  primaryNetworkRouterManagingDeviceUUID = self->_primaryNetworkRouterManagingDeviceUUID;
  self->_primaryNetworkRouterManagingDeviceUUID = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSUUID)primaryNetworkRouterManagingDeviceUUID
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_primaryNetworkRouterManagingDeviceUUID;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setActiveNetworkRouterInitialSetupNeeded:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_activeNetworkRouterInitialSetupNeeded = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)isActiveNetworkRouterInitialSetupNeeded
{
  LOBYTE(self) = self->_activeNetworkRouterInitialSetupNeeded;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setActiveNetworkRouterUUID:(id)a3
{
  id v4 = (NSUUID *)a3;
  os_unfair_recursive_lock_lock_with_options();
  activeNetworkRouterUUID = self->_activeNetworkRouterUUID;
  self->_activeNetworkRouterUUID = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSUUID)activeNetworkRouterUUID
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_activeNetworkRouterUUID;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setRouterClientManager:(id)a3
{
  id v4 = (HMDNetworkRouterClientManager *)a3;
  os_unfair_recursive_lock_lock_with_options();
  routerClientManager = self->_routerClientManager;
  self->_routerClientManager = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDNetworkRouterClientManager)routerClientManager
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_routerClientManager;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setMinHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3
{
  id v4 = (HMDHomeKitVersion *)a3;
  os_unfair_recursive_lock_lock_with_options();
  minHomeKitVersionForAccessoryNetworkProtectionChange = self->_minHomeKitVersionForAccessoryNetworkProtectionChange;
  self->_minHomeKitVersionForAccessoryNetworkProtectionChange = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDHomeKitVersion)minHomeKitVersionForAccessoryNetworkProtectionChange
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_minHomeKitVersionForAccessoryNetworkProtectionChange;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setMinimumNetworkRouterSupportHomeKitVersion:(id)a3
{
  id v4 = (HMDHomeKitVersion *)a3;
  os_unfair_recursive_lock_lock_with_options();
  minimumNetworkRouterSupportHomeKitVersiouint64_t n = self->_minimumNetworkRouterSupportHomeKitVersion;
  self->_minimumNetworkRouterSupportHomeKitVersiouint64_t n = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDHomeKitVersion)minimumNetworkRouterSupportHomeKitVersion
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_minimumNetworkRouterSupportHomeKitVersion;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setNetworkRouterSupport:(unint64_t)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_networkRouterSupport = a3;
  os_unfair_recursive_lock_unlock();
}

- (unint64_t)networkRouterSupport
{
  os_unfair_recursive_lock_lock_with_options();
  unint64_t networkRouterSupport = self->_networkRouterSupport;
  os_unfair_recursive_lock_unlock();
  return networkRouterSupport;
}

- (void)setNetworkRouterSupportDisableReason:(unint64_t)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_networkRouterSupportDisableReasouint64_t n = a3;
  os_unfair_recursive_lock_unlock();
}

- (unint64_t)networkRouterSupportDisableReason
{
  os_unfair_recursive_lock_lock_with_options();
  networkRouterSupportDisableReasouint64_t n = self->_networkRouterSupportDisableReason;
  os_unfair_recursive_lock_unlock();
  return networkRouterSupportDisableReason;
}

- (void)setProtectionMode:(int64_t)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_protectionMode = a3;
  os_unfair_recursive_lock_unlock();
}

- (int64_t)protectionMode
{
  os_unfair_recursive_lock_lock_with_options();
  int64_t protectionMode = self->_protectionMode;
  os_unfair_recursive_lock_unlock();
  return protectionMode;
}

- (id)retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v5 = [(NSMutableDictionary *)self->_newlyConfiguredAccessories objectForKeyedSubscript:v4];
  id v6 = (void *)[v5 copy];

  if (v6)
  {
    [(NSMutableDictionary *)self->_newlyConfiguredAccessories removeObjectForKey:v4];
    id v7 = v6;
  }
  else
  {
    id v7 = (void *)MEMORY[0x263EFFA68];
  }
  id v8 = v7;

  os_unfair_recursive_lock_unlock();
  return v8;
}

- (NSMapTable)addPendingAccessories
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = (void *)[(NSMapTable *)self->_addPendingAccessories copy];
  os_unfair_recursive_lock_unlock();
  return (NSMapTable *)v3;
}

- (NSMutableDictionary)addPendingAccessorySetupCodeHandlers
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = (void *)[(NSMutableDictionary *)self->_addPendingAccessorySetupCodeHandlers copy];
  os_unfair_recursive_lock_unlock();
  return (NSMutableDictionary *)v3;
}

- (NSHashTable)removeAccessoryInProgressForHMDAccessories
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = (void *)[(NSHashTable *)self->_removeAccessoryInProgressForHMDAccessories copy];
  os_unfair_recursive_lock_unlock();
  return (NSHashTable *)v3;
}

- (void)removeFromCurrentTriggers:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ([(NSMutableArray *)self->_currentTriggers containsObject:v4]) {
    [(NSMutableArray *)self->_currentTriggers removeObject:v4];
  }
  os_unfair_recursive_lock_unlock();
}

- (void)addToCurrentTriggers:(id)a3
{
  id v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (([(NSMutableArray *)self->_currentTriggers containsObject:v4] & 1) == 0) {
    [(NSMutableArray *)self->_currentTriggers addObject:v4];
  }
  os_unfair_recursive_lock_unlock();
}

- (NSArray)triggers
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = (void *)[(NSMutableArray *)self->_currentTriggers copy];
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (void)addNewlyConfiguredAccessories:(id)a3 addSessionIdentifier:(id)a4
{
  id v8 = a3;
  id v6 = a4;
  os_unfair_recursive_lock_lock_with_options();
  id v7 = [(NSMutableDictionary *)self->_newlyConfiguredAccessories objectForKeyedSubscript:v6];
  if (!v7)
  {
    id v7 = [MEMORY[0x263EFF980] arrayWithCapacity:1];
    [(NSMutableDictionary *)self->_newlyConfiguredAccessories setObject:v7 forKeyedSubscript:v6];
  }
  [v7 addObjectsFromArray:v8];

  os_unfair_recursive_lock_unlock();
}

- (id)allNewlyConfiguredAccessories
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  os_unfair_recursive_lock_lock_with_options();
  id v3 = [MEMORY[0x263EFF980] array];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v4 = [(NSMutableDictionary *)self->_newlyConfiguredAccessories allValues];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v4);
        }
        [v3 addObjectsFromArray:*(void *)(*((void *)&v10 + 1) + 8 * i)];
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  id v8 = (void *)[v3 copy];
  os_unfair_recursive_lock_unlock();
  return v8;
}

- (void)setAnyBTLEAccessoryReachable:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_anyBTLEAccessoryReachable = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)isAnyBTLEAccessoryReachable
{
  LOBYTE(self) = self->_anyBTLEAccessoryReachable;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setName:(id)a3
{
  id v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  objc_msgSend(v6, "hm_truncatedNameString");
  id v4 = (NSString *)objc_claimAutoreleasedReturnValue();
  name = self->_name;
  self->_name = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSString)name
{
  os_unfair_recursive_lock_lock_with_options();
  id v3 = self->_name;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (id)dumpState
{
  uint64_t v197 = *MEMORY[0x263EF8340];
  long long v155 = [MEMORY[0x263EFF9A0] dictionaryWithCapacity:12];
  double v149 = NSString;
  id v3 = [(HMDHome *)self name];
  uint64_t v156 = [(HMDHome *)self uuid];
  id v4 = [v156 UUIDString];
  long long v152 = [(HMDHome *)self spiClientIdentifier];
  uint64_t v5 = [v152 UUIDString];
  id v6 = [(HMDHome *)self zoneID];
  id v7 = [v6 UUIDString];
  [(HMDHome *)self isMultiUserEnabled];
  id v8 = HMFBooleanToString();
  [(HMDHome *)self hasAnyUserAcknowledgedCameraRecordingOnboarding];
  BOOL v9 = HMFBooleanToString();
  long long v10 = [(HMDHome *)self urlString];
  uint64_t v11 = [v149 stringWithFormat:@"name: %@, uuid: %@, spiClientIdentifier: %@, zoneID: %@, multiUserEnabled: %@, acknowledgedCameraOnboarding: %@, assistantIdentifier: %@", v3, v4, v5, v7, v8, v9, v10];

  id v144 = (void *)v11;
  [v155 setObject:v11 forKeyedSubscript:*MEMORY[0x263F41FA8]];
  long long v12 = [(HMDHome *)self appData];
  long long v13 = [v12 dumpState];
  [v155 setObject:v13 forKeyedSubscript:*MEMORY[0x263F41E98]];

  long long v150 = NSString;
  long long v153 = [(HMDHome *)self homeLocationHandler];
  uint64_t v14 = [v153 location];
  if (v14)
  {
    id v147 = [(HMDHome *)self homeLocationHandler];
    uint64_t v15 = [v147 location];
  }
  else
  {
    uint64_t v15 = @"Unknown";
  }
  [(HMDHome *)self homeLocationHandler];
  uint64_t v17 = v16 = self;
  [v17 regionStateAtHome];
  uint64_t v18 = HMDRegionStateString();
  uint64_t v19 = [(HMDHome *)v16 homeLocationHandler];
  [v19 regionStateNearbyHome];
  long long v20 = HMDRegionStateString();
  double v157 = v16;
  unint64_t v21 = [(HMDHome *)v16 atHomeLevel];
  if (v21 > 3) {
    uint64_t v22 = @"HMDAtHomeLevelNotAtHome";
  }
  else {
    uint64_t v22 = off_264A172C0[v21];
  }
  [(HMDHome *)v16 homeLocation];
  BOOL v23 = HMStringFromHomeLocation();
  id v24 = [(HMDHome *)v157 homeLocationHandler];
  char v25 = HMDHomeLocationSourceToString([v24 locationSource]);
  uint64_t v26 = [v150 stringWithFormat:@"Location: %@, At Home Region State: %@, Nearby Home Region State: %@, At Home Level: %@, State: %@, Source: %@", v15, v18, v20, v22, v23, v25];

  if (v14)
  {
  }
  BOOL v27 = v155;
  id v143 = (void *)v26;
  [v155 setObject:v26 forKeyedSubscript:*MEMORY[0x263F41F38]];
  BOOL v28 = NSString;
  long long v29 = v157;
  [(HMDHome *)v157 minimumMediaUserPrivilege];
  long long v30 = HMUserPrivilegeToString();
  [(HMDHome *)v157 isMediaPeerToPeerEnabled];
  uint64_t v31 = HMFBooleanToString();
  BOOL v32 = [(HMDHome *)v157 mediaPassword];
  id v33 = @"<set>";
  if (!v32) {
    id v33 = @"<null>";
  }
  uint64_t v34 = [v28 stringWithFormat:@"Minimum Media User Privilege: %@, Media Peer to Peer Enabled: %@, has Media Password: %@", v30, v31, v33];

  double v142 = (void *)v34;
  [v155 setObject:v34 forKeyedSubscript:@"User Privilege"];
  int v35 = [(HMDHome *)v157 rooms];
  long long v36 = (void *)[v35 copy];

  __int16 v37 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v36, "count") + 1);
  __int16 v38 = [(HMDHome *)v157 roomForEntireHome];

  if (v38)
  {
    uint64_t v39 = [(HMDHome *)v157 roomForEntireHome];
    __int16 v40 = [v39 dumpState];
    [v37 addObject:v40];
  }
  long long v184 = 0u;
  long long v185 = 0u;
  long long v182 = 0u;
  long long v183 = 0u;
  id v41 = v36;
  uint64_t v42 = [v41 countByEnumeratingWithState:&v182 objects:v196 count:16];
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v44 = *(void *)v183;
    do
    {
      for (uint64_t i = 0; i != v43; ++i)
      {
        if (*(void *)v183 != v44) {
          objc_enumerationMutation(v41);
        }
        __int16 v46 = [*(id *)(*((void *)&v182 + 1) + 8 * i) dumpState];
        [v37 addObject:v46];
      }
      uint64_t v43 = [v41 countByEnumeratingWithState:&v182 objects:v196 count:16];
    }
    while (v43);
  }

  if ([v37 count]) {
    [v155 setObject:v37 forKeyedSubscript:*MEMORY[0x263F41F78]];
  }
  id v47 = [(HMDHome *)v157 zones];
  uint64_t v48 = (void *)[v47 copy];

  long long v154 = v48;
  if ([v48 count])
  {
    long long v49 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v48, "count"));
    long long v178 = 0u;
    long long v179 = 0u;
    long long v180 = 0u;
    long long v181 = 0u;
    id v50 = v154;
    uint64_t v51 = [v50 countByEnumeratingWithState:&v178 objects:v195 count:16];
    if (v51)
    {
      uint64_t v52 = v51;
      uint64_t v53 = *(void *)v179;
      do
      {
        for (uint64_t j = 0; j != v52; ++j)
        {
          if (*(void *)v179 != v53) {
            objc_enumerationMutation(v50);
          }
          __int16 v55 = [*(id *)(*((void *)&v178 + 1) + 8 * j) dumpState];
          [v49 addObject:v55];
        }
        uint64_t v52 = [v50 countByEnumeratingWithState:&v178 objects:v195 count:16];
      }
      while (v52);
    }

    [v155 setObject:v49 forKeyedSubscript:*MEMORY[0x263F41FD0]];
    long long v29 = v157;
  }
  __int16 v56 = [(HMDHome *)v29 accessories];
  uint64_t v57 = (void *)[v56 copy];

  long long v151 = v57;
  if ([v57 count])
  {
    __int16 v58 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v57, "count"));
    long long v174 = 0u;
    long long v175 = 0u;
    long long v176 = 0u;
    long long v177 = 0u;
    id v59 = v151;
    uint64_t v60 = [v59 countByEnumeratingWithState:&v174 objects:v194 count:16];
    if (v60)
    {
      uint64_t v61 = v60;
      uint64_t v62 = *(void *)v175;
      do
      {
        for (uint64_t k = 0; k != v61; ++k)
        {
          if (*(void *)v175 != v62) {
            objc_enumerationMutation(v59);
          }
          uint64_t v64 = *(void **)(*((void *)&v174 + 1) + 8 * k);
          BOOL v65 = (void *)MEMORY[0x230FBD990]();
          long long v66 = [v64 dumpState];
          [v58 addObject:v66];
        }
        uint64_t v61 = [v59 countByEnumeratingWithState:&v174 objects:v194 count:16];
      }
      while (v61);
    }

    BOOL v27 = v155;
    [v155 setObject:v58 forKeyedSubscript:*MEMORY[0x263F41E70]];

    long long v29 = v157;
  }
  uint64_t v67 = [(HMDHome *)v29 serviceGroups];
  long long v68 = (void *)[v67 copy];

  long long v148 = v68;
  if ([v68 count])
  {
    long long v69 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v68, "count"));
    long long v170 = 0u;
    long long v171 = 0u;
    long long v172 = 0u;
    long long v173 = 0u;
    id v70 = v148;
    uint64_t v71 = [v70 countByEnumeratingWithState:&v170 objects:v193 count:16];
    if (v71)
    {
      uint64_t v72 = v71;
      uint64_t v73 = *(void *)v171;
      do
      {
        for (uint64_t m = 0; m != v72; ++m)
        {
          if (*(void *)v171 != v73) {
            objc_enumerationMutation(v70);
          }
          long long v75 = [*(id *)(*((void *)&v170 + 1) + 8 * m) dumpState];
          [v69 addObject:v75];
        }
        uint64_t v72 = [v70 countByEnumeratingWithState:&v170 objects:v193 count:16];
      }
      while (v72);
    }

    [v27 setObject:v69 forKeyedSubscript:*MEMORY[0x263F41F80]];
    long long v29 = v157;
  }
  uint64_t v146 = [(HMDHome *)v29 triggers];
  if ([v146 count])
  {
    long long v76 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v146, "count"));
    long long v166 = 0u;
    long long v167 = 0u;
    long long v168 = 0u;
    long long v169 = 0u;
    id v77 = v146;
    uint64_t v78 = [v77 countByEnumeratingWithState:&v166 objects:v192 count:16];
    if (v78)
    {
      uint64_t v79 = v78;
      uint64_t v80 = *(void *)v167;
      do
      {
        for (uint64_t n = 0; n != v79; ++n)
        {
          if (*(void *)v167 != v80) {
            objc_enumerationMutation(v77);
          }
          long long v82 = [*(id *)(*((void *)&v166 + 1) + 8 * n) dumpState];
          [v76 addObject:v82];
        }
        uint64_t v79 = [v77 countByEnumeratingWithState:&v166 objects:v192 count:16];
      }
      while (v79);
    }

    [v27 setObject:v76 forKeyedSubscript:*MEMORY[0x263F41FC0]];
    long long v29 = v157;
  }
  long long v83 = [(HMDHome *)v29 currentUser];
  long long v84 = [v83 dumpState];
  [v27 setObject:v84 forKeyedSubscript:*MEMORY[0x263F41ED8]];

  long long v145 = [(HMDHome *)v29 usersIncludingPendingUsers:1];
  if ([v145 count])
  {
    long long v85 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v145, "count"));
    long long v162 = 0u;
    long long v163 = 0u;
    long long v164 = 0u;
    long long v165 = 0u;
    id v86 = v145;
    uint64_t v87 = [v86 countByEnumeratingWithState:&v162 objects:v191 count:16];
    if (v87)
    {
      uint64_t v88 = v87;
      uint64_t v89 = *(void *)v163;
      do
      {
        for (iuint64_t i = 0; ii != v88; ++ii)
        {
          if (*(void *)v163 != v89) {
            objc_enumerationMutation(v86);
          }
          long long v91 = [*(id *)(*((void *)&v162 + 1) + 8 * ii) dumpState];
          [v85 addObject:v91];
        }
        uint64_t v88 = [v86 countByEnumeratingWithState:&v162 objects:v191 count:16];
      }
      while (v88);
    }

    [v27 setObject:v85 forKeyedSubscript:*MEMORY[0x263F41FC8]];
    long long v29 = v157;
  }
  uint64_t v92 = [(HMDHome *)v29 removedUsers];
  id v93 = (void *)[v92 copy];

  if ([v93 count])
  {
    __int16 v94 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v93, "count"));
    long long v158 = 0u;
    long long v159 = 0u;
    long long v160 = 0u;
    long long v161 = 0u;
    id v95 = v93;
    uint64_t v96 = [v95 countByEnumeratingWithState:&v158 objects:v190 count:16];
    if (v96)
    {
      uint64_t v97 = v96;
      uint64_t v98 = *(void *)v159;
      do
      {
        for (juint64_t j = 0; jj != v97; ++jj)
        {
          if (*(void *)v159 != v98) {
            objc_enumerationMutation(v95);
          }
          uint64_t v100 = [*(id *)(*((void *)&v158 + 1) + 8 * jj) user];
          double v101 = [v100 dumpState];
          [v94 addObject:v101];
        }
        uint64_t v97 = [v95 countByEnumeratingWithState:&v158 objects:v190 count:16];
      }
      while (v97);
    }

    BOOL v27 = v155;
    [v155 setObject:v94 forKeyedSubscript:*MEMORY[0x263F41F68]];

    long long v29 = v157;
  }
  long long v141 = v93;
  double v102 = [(HMDHome *)v29 residentDeviceManager];

  if (v102)
  {
    uint64_t v103 = [(HMDHome *)v29 residentDeviceManager];
    long long v104 = [v103 dumpState];
    [v27 setObject:v104 forKeyedSubscript:*MEMORY[0x263F41F70]];
  }
  uint64_t v105 = (void *)MEMORY[0x263EFF9A0];
  v188[0] = @"Registered";
  id v106 = [(HMDHome *)v29 notificationRegistrations];
  long long v107 = [v106 allObjects];
  v189[0] = v107;
  v188[1] = @"Apple Media Registered";
  uint64_t v108 = [(HMDHome *)v29 notificationRegistrationsForAppleMediaAccessories];
  id v109 = [v108 allObjects];
  v189[1] = v109;
  v188[2] = @"Deregistered";
  int v110 = [(HMDHome *)v29 notificationDeregistrations];
  uint64_t v111 = [v110 allObjects];
  v189[2] = v111;
  uint64_t v112 = [NSDictionary dictionaryWithObjects:v189 forKeys:v188 count:3];
  uint64_t v113 = [v105 dictionaryWithDictionary:v112];

  uint64_t v114 = [(HMDHome *)v157 notificationsUpdatedTime];

  if (v114)
  {
    uint64_t v115 = [(HMDHome *)v157 notificationsUpdatedTime];
    id v116 = [v115 shortDescription];
    [v113 setObject:v116 forKey:@"UpdateTime"];
  }
  [v155 setObject:v113 forKeyedSubscript:*MEMORY[0x263F41F10]];
  __int16 v117 = [(HMDHome *)v157 pendingResponses];
  id v118 = [v117 description];
  [v155 setObject:v118 forKeyedSubscript:*MEMORY[0x263F41F50]];

  uint64_t v119 = [(HMDHome *)v157 sharedHomeUpdateHandler];
  id v120 = [v119 dumpState];
  [v155 setObject:v120 forKeyedSubscript:*MEMORY[0x263F41F98]];

  id v121 = [(HMDHome *)v157 sharedHomeSourceVersion];
  id v122 = [v121 versionString];
  [v155 setObject:v122 forKeyedSubscript:*MEMORY[0x263F41F90]];

  id v123 = NSString;
  uint64_t v124 = [(HMDHome *)v157 unfilteredThreadNetworkID];
  uint64_t v125 = [v123 stringWithFormat:@"threadNetworkID=%@", v124];
  [v155 setObject:v125 forKeyedSubscript:@"ThreadNetwork"];

  uint64_t v126 = [(HMDHome *)v157 personManagerSettings];
  id v127 = [v126 description];
  [v155 setObject:v127 forKeyedSubscript:@"Person Manager Settings"];

  uint64_t v128 = [(HMDHome *)v157 labelsByAccessCode];
  id v129 = [v128 description];
  [v155 setObject:v129 forKeyedSubscript:@"Simple Label Access Codes"];

  long long v130 = [(HMDHome *)v157 labelIdentifiersByAccessCode];
  uint64_t v131 = [v130 description];
  [v155 setObject:v131 forKeyedSubscript:@"Simple Label Access Code Identifiers"];

  id v132 = [(HMDHome *)v157 chipStorage];
  uint64_t v133 = [v132 debugDictionaryRepresentation];
  [v155 setObject:v133 forKeyedSubscript:@"CHIP Home Storage"];

  uint64_t v134 = [(HMDHome *)v157 controllerPrivateStorage];
  long long v135 = [v134 debugDictionaryRepresentation];
  [v155 setObject:v135 forKeyedSubscript:@"CHIP Controller Private Storage"];

  v186[0] = @"HomeSettingEnabled";
  [(HMDHome *)v157 isEventLogHomeSettingEnabled];
  int v136 = HMFBooleanToString();
  v187[0] = v136;
  v186[1] = @"DidOnboard";
  [(HMDHome *)v157 didOnboardEventLog];
  long long v137 = HMFBooleanToString();
  v187[1] = v137;
  v186[2] = @"Duration";
  uint64_t v138 = objc_msgSend(NSString, "stringWithFormat:", @"%lu", -[HMDHome eventLogDuration](v157, "eventLogDuration"));
  v187[2] = v138;
  long long v139 = [NSDictionary dictionaryWithObjects:v187 forKeys:v186 count:3];
  [v155 setObject:v139 forKeyedSubscript:@"Activity History"];

  return v155;
}

- (NSString)description
{
  return (NSString *)[(HMDHome *)self descriptionWithPointer:0];
}

- (NSString)debugDescription
{
  return (NSString *)[(HMDHome *)self descriptionWithPointer:1];
}

- (id)descriptionWithPointer:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v5 = NSString;
  id v6 = [(id)objc_opt_class() shortDescription];
  if (v3)
  {
    objc_msgSend(NSString, "stringWithFormat:", @" %p", self);
    id v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v7 = &stru_26E2EB898;
  }
  id v8 = [(HMDHome *)self uuid];
  BOOL v9 = [v8 UUIDString];
  long long v10 = [(HMDHome *)self spiClientIdentifier];
  uint64_t v11 = [v10 UUIDString];
  long long v12 = [(HMDHome *)self name];
  long long v13 = [v5 stringWithFormat:@"<%@%@, ID = %@, spiID = %@, NM = %@>", v6, v7, v9, v11, v12];

  if (v3) {
  return v13;
  }
}

- (id)shortDescription
{
  if (isInternalBuild())
  {
    BOOL v3 = NSString;
    id v4 = [(HMDHome *)self name];
    uint64_t v5 = [(HMDHome *)self uuid];
    id v6 = [v3 stringWithFormat:@"%@/%@", v4, v5];
  }
  else
  {
    id v4 = [(HMDHome *)self uuid];
    id v6 = [v4 UUIDString];
  }

  return v6;
}

- (void)dealloc
{
  [(HMDHome *)self unconfigure];
  v3.receiver = self;
  v3.super_class = (Class)HMDHome;
  [(HMDHome *)&v3 dealloc];
}

- (void)unconfigure
{
  objc_super v3 = [(HMDHome *)self notificationCenter];
  [v3 removeObserver:self];

  id v4 = [(HMDHome *)self msgDispatcher];
  [v4 deregisterReceiver:self];

  uint64_t v5 = [(HMDHome *)self mediaGroupsAggregateConsumer];
  [v5 unconfigure];

  id v6 = [(HMDHome *)self accessCodeManager];
  [v6 unconfigure];

  id v7 = [(HMDHome *)self nfcReaderKeyManager];
  [v7 unconfigure];

  id v8 = [(HMDHome *)self walletKeyManager];
  [v8 unconfigure];

  id v10 = [MEMORY[0x263F08A00] defaultCenter];
  BOOL v9 = [(HMDHome *)self backingStore];
  [v10 removeObserver:v9];
}

- (HMDHome)initWithName:(id)a3 uuid:(id)a4 defaultRoomUUID:(id)a5 owner:(id)a6 homeManager:(id)a7 presenceAuth:(id)a8 metricsDispatcherFactory:(id)a9 logEventSubmitter:(id)a10 dailyScheduler:(id)a11 currentUserFactory:(id)a12 residentDeviceManagerFactory:(id)a13 locationHandlerFactory:(id)a14 hapMetadata:(id)a15 siriSecureAccessoryAccessController:(id)a16 carPlayDataSource:(id)a17 deviceLockStateDataSource:(id)a18 notificationRegistry:(id)a19 administratorHandlerFactory:(id)a20 netManagerFactory:(id)a21 wifiManagerFactory:(id)a22 matterCapabilitiesFactory:(id)a23 xpcMessageTransportFactory:(id)a24 localCapabilitiesDataSource:(id)a25 notificationCenter:(id)a26 keychainStore:(id)a27 reportingSessionManager:(id)a28
{
  v333 = (id *)a16;
  uint64_t v354 = *MEMORY[0x263EF8340];
  id v328 = a3;
  id v336 = a4;
  id v327 = a5;
  id v340 = a6;
  id v339 = a7;
  id v334 = a8;
  id v32 = a9;
  id v337 = a10;
  id v312 = a11;
  aBlocuint64_t k = a12;
  v324 = (void (**)(id, id))a13;
  v326 = (void (**)(void))a14;
  id v33 = a15;
  id v313 = a16;
  id v314 = a17;
  id v315 = a18;
  id v316 = a19;
  v325 = (void (**)(id, id))a20;
  id v330 = a21;
  id v329 = a22;
  v335 = a23;
  id v317 = a24;
  id v318 = a25;
  id v332 = a26;
  id v319 = a27;
  id v34 = a28;
  id v323 = v32;
  if (!v32) {
    _HMFPreconditionFailure();
  }
  id v310 = v33;
  uint64_t v311 = v34;
  v349.receiver = self;
  v349.super_class = (Class)HMDHome;
  int v35 = [(HMDHome *)&v349 init];
  if (v35)
  {
    +[HMDHome _initialize];
    __int16 v309 = [v339 sharedUserAcceptEventBuilderForHomeUuid:v336];
    [v309 markCreatedHome];
    uint64_t v36 = +[HMDFeaturesDataSource defaultDataSource];
    featureDataSource = v35->_featureDataSource;
    v35->_featureDataSource = (HMDFeaturesDataSource *)v36;

    p_localCapabilitiesDataSource = (id *)&v35->_localCapabilitiesDataSource;
    objc_storeStrong((id *)&v35->_localCapabilitiesDataSource, a25);
    __int16 v38 = _Block_copy(aBlock);
    id currentUserFactory = v35->_currentUserFactory;
    v35->_id currentUserFactory = v38;

    objc_storeStrong((id *)&v35->_xpcMessageTransportFactory, a24);
    uint64_t v40 = HMFGetOSLogHandle();
    logger = v35->_logger;
    v35->_logger = (OS_os_log *)v40;

    if (v336)
    {
      v320 = objc_msgSend(v336, "copy", a8, a15, a6, a11, a10);
    }
    else
    {
      v320 = objc_msgSend(MEMORY[0x263F08C38], "UUID", a8, a15, a6, a11, a10);
    }
    uint64_t v42 = objc_msgSend(MEMORY[0x263F425D0], "hmf_cachedInstanceForNSUUID:", v320);
    uuid = v35->_uuid;
    v35->_uuid = (NSUUID *)v42;

    id v308 = spiClientIdentifierForUUID(v35->_uuid);
    uint64_t v44 = objc_msgSend(MEMORY[0x263F425D0], "hmf_cachedInstanceForNSUUID:", v308);
    spiClientIdentifier = v35->_spiClientIdentifier;
    v35->_spiClientIdentifier = (NSUUID *)v44;

    __int16 v46 = [(NSUUID *)v35->_uuid UUIDString];
    id v47 = [@"com.apple.hmd.home" stringByAppendingString:v46];

    id v307 = v47;
    uint64_t v48 = (const char *)[v307 UTF8String];
    long long v49 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v50 = dispatch_queue_create(v48, v49);
    workQueue = v35->_workQueue;
    v35->_workQueue = (OS_dispatch_queue *)v50;

    [MEMORY[0x263F42520] blessWithImplicitContext:v35->_workQueue];
    objc_storeStrong((id *)&v35->_notificationCenter, a26);
    uint64_t v52 = [[HMDPrimaryResidentChangeMonitor alloc] initWithIdentifier:v35->_uuid notificationCenter:v332];
    primaryResidentChangeMonitor = v35->_primaryResidentChangeMonitor;
    v35->_primaryResidentChangeMonitor = v52;

    [(HMDPrimaryResidentChangeMonitor *)v35->_primaryResidentChangeMonitor setDataSource:v35];
    objc_storeStrong((id *)&v35->_logEventSubmitter, obj);
    objc_storeStrong((id *)&v35->_dailyScheduler, v305);
    uint64_t v54 = _Block_copy(v330);
    id netManagerFactory = v35->_netManagerFactory;
    v35->_id netManagerFactory = v54;

    __int16 v56 = _Block_copy(v329);
    id wifiManagerFactory = v35->_wifiManagerFactory;
    v35->_id wifiManagerFactory = v56;

    objc_storeStrong((id *)&v35->_keychainStore, a27);
    objc_storeStrong((id *)&v35->_reportingSessionManager, a28);
    __int16 v58 = [[HMDAccessoryInfoFetchController alloc] initWithHomeUUID:v35->_uuid workQueue:v35->_workQueue];
    accessoryInfoFetchController = v35->_accessoryInfoFetchController;
    v35->_accessoryInfoFetchController = v58;

    if (v337)
    {
      uint64_t v60 = [v32 createHomeMetricsDispatcherWithIdentifier:v35->_uuid logEventSubmitter:v337];
      metricsDispatcher = v35->_metricsDispatcher;
      v35->_metricsDispatcher = (HMDHomeMetricsDispatcher *)v60;
    }
    uint64_t v62 = objc_msgSend(v328, "hm_truncatedNameString");
    uint64_t v63 = [v62 copy];
    name = v35->_name;
    v35->_name = (NSString *)v63;

    uint64_t v65 = +[HMDHome zoneIDFromHomeUUID:v35->_uuid];
    zoneID = v35->_zoneID;
    v35->_zoneID = (NSUUID *)v65;

    objc_storeWeak((id *)&v35->_homeManager, v339);
    uint64_t v67 = [v339 messageDispatcher];
    msgDispatcher = v35->_msgDispatcher;
    v35->_msgDispatcher = (HMFMessageDispatcher *)v67;

    objc_storeStrong((id *)&v35->_owner, v304);
    v35->_ownerTrustZoneCapable = [v340 isCurrentUser];
    uint64_t v69 = [v340 pairingUsername];
    ownerName = v35->_ownerName;
    v35->_ownerName = (NSString *)v69;

    v35->_allowsRemoteAccess = 1;
    uint64_t v71 = +[HMDHomeKitVersion currentVersion];
    currentHomeKitVersiouint64_t n = v35->_currentHomeKitVersion;
    v35->_currentHomeKitVersiouint64_t n = (HMDHomeKitVersion *)v71;

    uint64_t v73 = (void *)MEMORY[0x230FBD990]();
    long long v74 = v35;
    long long v75 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
    {
      long long v76 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v351 = v76;
      __int16 v352 = 2112;
      id v353 = v334;
      _os_log_impl(&dword_22F52A000, v75, OS_LOG_TYPE_INFO, "%{public}@Home Presence auth : %@", buf, 0x16u);
    }
    if (v334) {
      objc_storeStrong((id *)&v74->_presenceAuthStatus, v302);
    }
    presenceComputeStatus = v74->_presenceComputeStatus;
    v74->_presenceComputeStatus = 0;

    v74->_homeLocatiouint64_t n = 0;
    uint64_t v78 = [MEMORY[0x263EFF9C0] set];
    reachabilityUpdatedAccessories = v74->_reachabilityUpdatedAccessories;
    v74->_reachabilityUpdatedAccessories = (NSMutableSet *)v78;

    uint64_t v80 = [[HMDHomeObjectChangeHandler alloc] initWithHome:v74];
    homeObjectChangeHandler = v74->_homeObjectChangeHandler;
    v74->_homeObjectChangeHandler = v80;

    uint64_t v82 = [v339 accessoryBrowser];
    accessoryBrowser = v74->_accessoryBrowser;
    v74->_accessoryBrowser = (HMDAccessoryBrowserProtocol *)v82;

    uint64_t v84 = [MEMORY[0x263EFF980] array];
    rooms = v74->_rooms;
    v74->_rooms = (NSMutableArray *)v84;

    uint64_t v86 = [MEMORY[0x263EFF980] array];
    zones = v74->_zones;
    v74->_zones = (NSMutableArray *)v86;

    uint64_t v88 = [MEMORY[0x263EFF9A0] dictionary];
    accessories = v74->_accessories;
    v74->_accessories = (NSMutableDictionary *)v88;

    uint64_t v90 = [MEMORY[0x263EFF980] array];
    discoveredAccessories = v74->_discoveredAccessories;
    v74->_discoveredAccessories = (NSMutableArray *)v90;

    uint64_t v92 = [MEMORY[0x263EFF980] array];
    serviceGroups = v74->_serviceGroups;
    v74->_serviceGroups = (NSMutableArray *)v92;

    uint64_t v94 = [MEMORY[0x263EFF980] array];
    actionSets = v74->_actionSets;
    v74->_actionSets = (NSMutableArray *)v94;

    uint64_t v96 = [MEMORY[0x263EFF980] array];
    currentTriggers = v74->_currentTriggers;
    v74->_currentTriggers = (NSMutableArray *)v96;

    uint64_t v98 = [MEMORY[0x263EFF980] array];
    triggerOwnedActionSets = v74->_triggerOwnedActionSets;
    v74->_triggerOwnedActionSets = (NSMutableArray *)v98;

    uint64_t v100 = [MEMORY[0x263EFF980] array];
    users = v74->_users;
    v74->_users = (NSMutableArray *)v100;

    uint64_t v102 = [MEMORY[0x263EFF980] array];
    usersPendingUserManagementOperations = v74->_usersPendingUserManagementOperations;
    v74->_usersPendingUserManagementOperations = (NSMutableArray *)v102;

    uint64_t v104 = [MEMORY[0x263EFF980] array];
    removedUsers = v74->_removedUsers;
    v74->_removedUsers = (NSMutableArray *)v104;

    uint64_t v106 = [MEMORY[0x263EFF980] array];
    outgoingInvitations = v74->_outgoingInvitations;
    v74->_outgoingInvitations = (NSMutableArray *)v106;

    uint64_t v108 = [MEMORY[0x263EFF980] array];
    ownedTriggers = v74->_ownedTriggers;
    v74->_ownedTriggers = (NSMutableArray *)v108;

    uint64_t v110 = [MEMORY[0x263EFF9C0] set];
    pendingResponsesForRemoteAccessSetup = v74->_pendingResponsesForRemoteAccessSetup;
    v74->_pendingResponsesForRemoteAccessSetup = (NSMutableSet *)v110;

    uint64_t v112 = [MEMORY[0x263EFF9A0] dictionary];
    enableNotificationPayload = v74->_enableNotificationPayload;
    v74->_enableNotificationPayload = (NSMutableDictionary *)v112;

    uint64_t v114 = [MEMORY[0x263EFF9A0] dictionary];
    disableNotificationPayload = v74->_disableNotificationPayload;
    v74->_disableNotificationPayload = (NSMutableDictionary *)v114;

    uint64_t v116 = [MEMORY[0x263EFF9A0] dictionary];
    pendingCharacteristicThresholdPayload = v74->_pendingCharacteristicThresholdPayload;
    v74->_pendingCharacteristicThresholdPayload = (NSMutableDictionary *)v116;

    uint64_t v118 = [MEMORY[0x263EFF980] array];
    actionSetsEnableNotificationPayload = v74->_actionSetsEnableNotificationPayload;
    v74->_actionSetsEnableNotificationPayload = (NSMutableArray *)v118;

    uint64_t v120 = [MEMORY[0x263EFF980] array];
    actionSetsDisableNotificationPayload = v74->_actionSetsDisableNotificationPayload;
    v74->_actionSetsDisableNotificationPayload = (NSMutableArray *)v120;

    uint64_t v122 = [MEMORY[0x263EFF9A0] dictionary];
    matterAttributesEnableNotificationPayload = v74->_matterAttributesEnableNotificationPayload;
    v74->_matterAttributesEnableNotificationPayload = (NSMutableDictionary *)v122;

    uint64_t v124 = [MEMORY[0x263EFF9A0] dictionary];
    notificationHandlerMap = v74->_notificationHandlerMap;
    v74->_notificationHandlerMap = (NSMutableDictionary *)v124;

    uint64_t v126 = [MEMORY[0x263EFF9C0] set];
    notificationRegistrations = v74->_notificationRegistrations;
    v74->_notificationRegistrations = (NSMutableSet *)v126;

    uint64_t v128 = [MEMORY[0x263EFF9C0] set];
    notificationRegistrationsForAppleMediaAccessories = v74->_notificationRegistrationsForAppleMediaAccessories;
    v74->_notificationRegistrationsForAppleMediaAccessories = (NSMutableSet *)v128;

    uint64_t v130 = [MEMORY[0x263EFF9C0] set];
    notificationDeregistrations = v74->_notificationDeregistrations;
    v74->_notificationDeregistrations = (NSMutableSet *)v130;

    uint64_t v132 = [MEMORY[0x263EFF910] distantFuture];
    notificationsUpdatedTime = v74->_notificationsUpdatedTime;
    v74->_notificationsUpdatedTime = (NSDate *)v132;

    uint64_t v134 = [MEMORY[0x263F08968] strongToStrongObjectsMapTable];
    uuidToHAPAccessoryConfigTable = v74->_uuidToHAPAccessoryConfigTable;
    v74->_uuidToHAPAccessoryConfigTable = (NSMapTable *)v134;

    uint64_t v136 = +[HMDAppleAccountSettings sharedSettings];
    accountSettings = v74->_accountSettings;
    v74->_accountSettings = (HMDAppleAccountSettings *)v136;

    objc_storeStrong((id *)&v74->_hapMetadata, v303);
    objc_storeStrong((id *)&v74->_deviceLockStateDataSource, a18);
    objc_storeStrong((id *)&v74->_siriSecureAccessoryAccessController, a16);
    objc_storeStrong((id *)&v74->_carPlayDataSource, a17);
    if (isiOSDevice())
    {
      uint64_t v138 = [MEMORY[0x263EFF9C0] set];
      heartbeatPingMessagesQueuedWithServer = v74->_heartbeatPingMessagesQueuedWithServer;
      v74->_heartbeatPingMessagesQueuedWithServer = (NSMutableSet *)v138;
    }
    if (v340)
    {
      [(NSMutableArray *)v74->_users addObject:v340];
      [v340 setHome:v74];
    }
    id v140 = [HMDRoom alloc];
    long long v141 = HMDDefaultRoomName();
    uint64_t v142 = [(HMDRoom *)v140 initWithName:v141 uuid:v327 home:v74];
    roomForEntireHome = v74->_roomForEntireHome;
    v74->_roomForEntireHome = (HMDRoom *)v142;

    v74->_configurationVersiouint64_t n = 0;
    v74->_previousReachableAccessoriesCount = 0;
    v74->_previousReachableAppleMediaAccessoriesCount = 0;
    uint64_t v144 = [MEMORY[0x263EFF980] array];
    unconfiguredResidentDevices = v74->_unconfiguredResidentDevices;
    v74->_unconfiguredResidentDevices = (NSMutableArray *)v144;

    uint64_t v146 = [MEMORY[0x263F088B0] weakObjectsHashTable];
    removeAccessoryInProgressForHMDAccessories = v74->_removeAccessoryInProgressForHMDAccessories;
    v74->_removeAccessoryInProgressForHMDAccessories = (NSHashTable *)v146;

    uint64_t v148 = [MEMORY[0x263EFF980] array];
    retrievalAccessoryCompletionTuples = v74->_retrievalAccessoryCompletionTuples;
    v74->_retrievalAccessoryCompletionTuples = (NSMutableArray *)v148;

    uint64_t v150 = [MEMORY[0x263EFF980] array];
    accessoryRemoteReachabilityEnabledClients = v74->_accessoryRemoteReachabilityEnabledClients;
    v74->_accessoryRemoteReachabilityEnabledClients = (NSMutableArray *)v150;

    objc_initWeak(&location, v74);
    long long v152 = [HMDManagedStagedValue alloc];
    long long v153 = [MEMORY[0x263F42508] BOOLeanWithBool:0];
    v346[0] = MEMORY[0x263EF8330];
    v346[1] = 3221225472;
    v346[2] = __521__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_matterCapabilitiesFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke;
    v346[3] = &unk_264A160B0;
    objc_copyWeak(&v347, &location);
    uint64_t v154 = [(HMDManagedStagedValue *)v152 initWithValue:v153 commitBlock:v346];
    stagedRemoteReachabilityRegistratiouint64_t n = v74->_stagedRemoteReachabilityRegistration;
    v74->_stagedRemoteReachabilityRegistratiouint64_t n = (HMDManagedStagedValue *)v154;

    uint64_t v156 = [MEMORY[0x263EFF980] array];
    reachabilityRegisteredDevices = v74->_reachabilityRegisteredDevices;
    v74->_reachabilityRegisteredDevices = (NSMutableArray *)v156;

    uint64_t v158 = [MEMORY[0x263EFF980] array];
    remoteReachabilityNotificationPendingAccessories = v74->_remoteReachabilityNotificationPendingAccessories;
    v74->_remoteReachabilityNotificationPendingAccessories = (NSMutableArray *)v158;

    uint64_t v160 = [MEMORY[0x263EFF9A0] dictionary];
    pendingResponses = v74->_pendingResponses;
    v74->_pendingResponses = (NSMutableDictionary *)v160;

    long long v162 = v335;
    if (!v335)
    {
      v344[0] = MEMORY[0x263EF8330];
      v344[1] = 3221225472;
      v344[2] = __521__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_matterCapabilitiesFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke_2;
      v344[3] = &unk_264A160D8;
      v333 = &v345;
      objc_copyWeak(&v345, &location);
      long long v162 = v344;
    }
    long long v163 = _Block_copy(v162);
    id matterCapabilitiesFactory = v74->_matterCapabilitiesFactory;
    v74->_id matterCapabilitiesFactory = v163;

    isWatch();
    uint64_t v165 = v326[2]();
    homeLocationHandler = v74->_homeLocationHandler;
    v74->_homeLocationHandler = (HMDHomeLocationHandler *)v165;

    isWatch();
    long long v167 = objc_alloc_init(HMDHomeReprovisionHandler);
    homeReprovisionHandler = v74->_homeReprovisionHandler;
    v74->_homeReprovisionHandler = v167;

    uint64_t v169 = [MEMORY[0x263EFF9A0] dictionary];
    newlyConfiguredAccessories = v74->_newlyConfiguredAccessories;
    v74->_newlyConfiguredAccessories = (NSMutableDictionary *)v169;

    uint64_t v171 = [MEMORY[0x263F08968] mapTableWithStrongToStrongObjects];
    addPendingAccessories = v74->_addPendingAccessories;
    v74->_addPendingAccessories = (NSMapTable *)v171;

    uint64_t v173 = [MEMORY[0x263EFF9A0] dictionary];
    addPendingAccessorySetupCodes = v74->_addPendingAccessorySetupCodes;
    v74->_addPendingAccessorySetupCodes = (NSMutableDictionary *)v173;

    uint64_t v175 = [MEMORY[0x263EFF9A0] dictionary];
    addPendingAccessoryOnboardingSetupPayloadStrings = v74->_addPendingAccessoryOnboardingSetupPayloadStrings;
    v74->_addPendingAccessoryOnboardingSetupPayloadStrings = (NSMutableDictionary *)v175;

    uint64_t v177 = [MEMORY[0x263EFF9A0] dictionary];
    addPendingAccessorySetupCodeHandlers = v74->_addPendingAccessorySetupCodeHandlers;
    v74->_addPendingAccessorySetupCodeHandlers = (NSMutableDictionary *)v177;

    v74->_anyBTLEAccessoryReachable = 0;
    uint64_t v179 = v324[2](v324, v74);
    residentDeviceManager = v74->_residentDeviceManager;
    v74->_residentDeviceManager = (HMDResidentDeviceManager *)v179;

    [(HMDResidentDeviceManager *)v74->_residentDeviceManager setDelegate:v74];
    id v343 = 0;
    uint64_t v181 = [MEMORY[0x263F42538] futureWithPromise:&v343];
    residentSyncClientDidSyncFuture = v74->_residentSyncClientDidSyncFuture;
    v74->_residentSyncClientDidSyncFuture = (HMFFuture *)v181;

    objc_storeStrong((id *)&v74->_residentSyncClientDidSyncPromise, v343);
    uint64_t v183 = v325[2](v325, v74);
    administratorHandler = v74->_administratorHandler;
    v74->_administratorHandler = (HMDHomeAdministratorHandler *)v183;

    long long v185 = [HMDHomeMediaSystemHandler alloc];
    uint64_t v186 = [(HMDHomeMediaSystemHandler *)v185 initWithMediaSystems:MEMORY[0x263EFFA68]];
    mediaSystemController = v74->_mediaSystemController;
    v74->_mediaSystemController = (HMDHomeMediaSystemHandler *)v186;

    v74->_automaticSoftwareUpdateEnabled = 1;
    v74->_automaticThirdPartyAccessorySoftwareUpdateEnabled = 0;
    v74->_int64_t protectionMode = 0;
    v74->_networkRouterSupportDisableReasouint64_t n = 0;
    v74->_unint64_t networkRouterSupport = [(HMDHome *)v74 deriveNetworkRouterSupport:0];
    v74->_mediaPeerToPeerEnabled = 0;
    v74->_soundCheckEnabled = 1;
    objc_storeStrong((id *)&v74->_notificationRegistry, a19);
    [(HMDNotificationRegistry *)v74->_notificationRegistry configureWithHome:v74];
    if ([*p_localCapabilitiesDataSource isResidentCapable])
    {
      uint64_t v188 = [(HMDHome *)v74 createActionSetStateObserver];
      actionSetStateObserver = v74->_actionSetStateObserver;
      v74->_actionSetStateObserver = (HMDActionSetStateObserver *)v188;
    }
    uint64_t v190 = [(HMDHome *)v74 createActionSetStateManager];
    actionSetStateSubscriptionManager = v74->_actionSetStateSubscriptionManager;
    v74->_actionSetStateSubscriptionManager = (HMDActionSetStateSubscriptionManager *)v190;

    uint64_t v192 = [MEMORY[0x263EFF980] array];
    mediaSessions = v74->_mediaSessions;
    v74->_mediaSessions = (NSMutableArray *)v192;

    uint64_t v194 = [MEMORY[0x263EFF980] array];
    mediaSessionStates = v74->_mediaSessionStates;
    v74->_mediaSessionStates = (NSMutableArray *)v194;

    uint64_t v196 = [MEMORY[0x263F088B0] weakObjectsHashTable];
    connectionsDiscoveringSymptomsForNearbyDevices = v74->_connectionsDiscoveringSymptomsForNearbyDevices;
    v74->_connectionsDiscoveringSymptomsForNearbyDevices = (NSHashTable *)v196;

    isWatch();
    if (v340 && [*p_localCapabilitiesDataSource isResidentCapable])
    {
      uint64_t v198 = objc_alloc_init(HMDHomePresenceMonitor);
      presenceMonitor = v74->_presenceMonitor;
      v74->_presenceMonitor = v198;

      int v200 = objc_alloc_init(HMDHomePeriodicReader);
      periodicReader = v74->_periodicReader;
      v74->_periodicReader = v200;
    }
    uint64_t v202 = objc_alloc_init(HMDUserPresenceFeeder);
    presenceFeeder = v74->_presenceFeeder;
    v74->_presenceFeeder = v202;

    uint64_t v204 = (void *)MEMORY[0x230FBD990]();
    char v205 = v74;
    HMFGetOSLogHandle();
    uint64_t v206 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v206, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v207 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v208 = [(HMDHome *)v205 presenceFeeder];
      *(_DWORD *)buf = 138543618;
      id v351 = v207;
      __int16 v352 = 2112;
      id v353 = v208;
      _os_log_impl(&dword_22F52A000, v206, OS_LOG_TYPE_INFO, "%{public}@Allocated presenceFeeder on HMDHome: %@", buf, 0x16u);
    }
    uint64_t v209 = [HMDPredicateUtilities alloc];
    uint64_t v210 = [(HMDHome *)v205 name];
    uint64_t v211 = [(HMDPredicateUtilities *)v209 initWithHome:v205 logIdentifier:v210];
    predicateUtility = v205->_predicateUtility;
    v205->_predicateUtility = (HMDPredicateUtilities *)v211;

    uint64_t v213 = [[HMDMediaActionRouter alloc] initWithDataSource:v205];
    mediaActionRouter = v205->_mediaActionRouter;
    v205->_mediaActionRouter = v213;

    v205->_multiUserEnabled = 1;
    v205->_hasAnyUserAcknowledgedCameraRecordingOnboarding = 0;
    id v215 = [HMDAccessoryNetworkProtectionGroupRegistry alloc];
    long long v216 = [(HMDHome *)v205 notificationCenter];
    uint64_t v217 = [(HMDAccessoryNetworkProtectionGroupRegistry *)v215 initWithHome:v205 notificationCenter:v216];
    networkProtectionGroupRegistry = v205->_networkProtectionGroupRegistry;
    v205->_networkProtectionGroupRegistry = (HMDAccessoryNetworkProtectionGroupRegistry *)v217;

    id v219 = [HMDResidentReachabilityNotificationManager alloc];
    uint64_t v220 = objc_alloc_init(HMDResidentReachabilityContext);
    uint64_t v221 = [(HMDResidentReachabilityNotificationManager *)v219 initWithResidentReachabilityContext:v220 workQueue:v35->_workQueue];
    reachabilityNotificationManager = v205->_reachabilityNotificationManager;
    v205->_reachabilityNotificationManager = (HMDResidentReachabilityNotificationManager *)v221;

    id v223 = [[HMDAccessoryReachabilityChangedLogEventManager alloc] initWithHome:v205];
    reachabilityChangedLogEventManager = v205->_reachabilityChangedLogEventManager;
    v205->_reachabilityChangedLogEventManager = v223;

    id v225 = [[HMDHomeNaturalLightingCurveWriter alloc] initWithHome:v205];
    naturalLightingCurveWriter = v205->_naturalLightingCurveWriter;
    v205->_naturalLightingCurveWriter = v225;

    if (isInternalBuild()
      && ((_os_feature_enabled_impl() & 1) != 0 || _os_feature_enabled_impl()))
    {
      id v227 = (void *)MEMORY[0x230FBD990]();
      id v228 = v205;
      HMFGetOSLogHandle();
      v229 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v229, OS_LOG_TYPE_INFO))
      {
        v230 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v351 = v230;
        _os_log_impl(&dword_22F52A000, v229, OS_LOG_TYPE_INFO, "%{public}@Initialized HomeIntelligenceActivityLogger", buf, 0xCu);
      }
      v231 = [[HomeIntelligenceActivityLogger alloc] initWithHome:v228];
      homeIntelligenceActivityLogger = v228->_homeIntelligenceActivityLogger;
      v228->_homeIntelligenceActivityLogger = v231;
    }
    uint64_t v233 = [HMDHAPAccessoryConnectionCoordinator alloc];
    double v234 = [(HMDHome *)v205 notificationCenter];
    uint64_t v235 = [(HMDHAPAccessoryConnectionCoordinator *)v233 initWithHome:v205 notificationCenter:v234];
    accessoryConnectionCoordinator = v205->_accessoryConnectionCoordinator;
    v205->_accessoryConnectionCoordinator = (HMDHAPAccessoryConnectionCoordinator *)v235;

    uint64_t v237 = [[HMDHAPAccessoryReaderWriter alloc] initWithHome:v205];
    accessoryReaderWriter = v205->_accessoryReaderWriter;
    v205->_accessoryReaderWriter = v237;

    v239 = [[HMDHomePersonDataManager alloc] initWithHome:v205 workQueue:v35->_workQueue];
    personDataManager = v205->_personDataManager;
    v205->_personDataManager = v239;

    id v241 = [[HMDHomeWalletKeyManager alloc] initWithUUID:v35->_uuid workQueue:v35->_workQueue];
    walletKeyManager = v205->_walletKeyManager;
    v205->_walletKeyManager = v241;

    id v243 = (void *)MEMORY[0x230FBD990]();
    id v244 = v205;
    HMFGetOSLogHandle();
    id v245 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v245, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v246 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v351 = v246;
      _os_log_impl(&dword_22F52A000, v245, OS_LOG_TYPE_DEFAULT, "%{public}@Created wallet key manager", buf, 0xCu);
    }
    double v247 = [[HMDHomeNFCReaderKeyManager alloc] initWithUUID:v35->_uuid workQueue:v35->_workQueue];
    nfcReaderKeyManager = v244->_nfcReaderKeyManager;
    v244->_nfcReaderKeyManager = v247;

    uint64_t v249 = (void *)MEMORY[0x230FBD990]();
    uint64_t v250 = v244;
    HMFGetOSLogHandle();
    uint64_t v251 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v251, OS_LOG_TYPE_DEFAULT))
    {
      id v252 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v351 = v252;
      _os_log_impl(&dword_22F52A000, v251, OS_LOG_TYPE_DEFAULT, "%{public}@Created nfc reader key manager", buf, 0xCu);
    }
    v250->_shouldEncodeHasOnboardedForWalletKey = 1;
    v250->_shouldEncodeNFCReaderKey = 1;
    uint64_t v253 = [MEMORY[0x263EFF9A0] dictionary];
    labelsByAccessCode = v250->_labelsByAccessCode;
    v250->_labelsByAccessCode = (NSMutableDictionary *)v253;

    uint64_t v255 = [MEMORY[0x263EFF9A0] dictionary];
    labelIdentifiersByAccessCode = v250->_labelIdentifiersByAccessCode;
    v250->_labelIdentifiersByAccessCode = (NSMutableDictionary *)v255;

    uint64_t v257 = [MEMORY[0x263EFF9A0] dictionary];
    removedUserInfoByAccessCode = v250->_removedUserInfoByAccessCode;
    v250->_removedUserInfoByAccessCode = (NSMutableDictionary *)v257;

    uint64_t v259 = [HMDAccessCodeManagerContext alloc];
    uint64_t v260 = [(HMDHome *)v250 workQueue];
    uint64_t v261 = [(HMDAccessCodeManagerContext *)v259 initWithHome:v250 workQueue:v260];

    uint64_t v262 = [[HMDAccessCodeManager alloc] initWithContext:v261];
    accessCodeManager = v250->_accessCodeManager;
    v250->_accessCodeManager = v262;

    uint64_t v264 = [[HMDHomeLockNotificationManager alloc] initWithUUID:v35->_uuid workQueue:v35->_workQueue];
    lockNotificationManager = v250->_lockNotificationManager;
    v250->_lockNotificationManager = v264;

    long long v266 = [[HMDCameraAnalysisStatePublisher alloc] initWithHome:v250];
    analysisStatePublisher = v250->_analysisStatePublisher;
    v250->_analysisStatePublisher = v266;

    if ([*p_localCapabilitiesDataSource isResidentCapable])
    {
      uint64_t v268 = [[HMDHomeRemoteEventAccessController alloc] initWithDataSource:v250];
      homeRemoteEventAccessController = v250->_homeRemoteEventAccessController;
      v250->_homeRemoteEventAccessController = v268;
    }
    char v270 = objc_alloc_init(HMDHomeAudioAnalysisStereoPairController);
    audioAnalysisStereoPairController = v250->_audioAnalysisStereoPairController;
    v250->_audioAnalysisStereoPairController = v270;

    long long v272 = (void *)MEMORY[0x230FBD990]();
    long long v273 = v250;
    HMFGetOSLogHandle();
    uint64_t v274 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v274, OS_LOG_TYPE_DEFAULT))
    {
      id v275 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v351 = v275;
      _os_log_impl(&dword_22F52A000, v274, OS_LOG_TYPE_DEFAULT, "%{public}@Creating setup metric dispatchers for media system and home theater", buf, 0xCu);
    }
    long long v276 = [[HMDMediaGroupSetupMetricDispatcher alloc] initWithDataSource:v273 logEventSubmitter:v337];
    id v277 = v273[213];
    v273[213] = v276;

    uint64_t v278 = [[HMDMediaGroupSetupMetricDispatcher alloc] initWithDataSource:v273 logEventSubmitter:v337];
    id v279 = v273[214];
    v273[214] = v278;

    long long v280 = objc_alloc_init(HMDCHIPHomeStorage);
    id v281 = v273[204];
    v273[204] = v280;

    if ([v273 isFeatureMatterLocalFabricConfigEnabled])
    {
      uint64_t v282 = [MEMORY[0x263EFF980] array];
      id v283 = v273[138];
      v273[138] = (id)v282;

      uint64_t v284 = [[HMDCHIPControllerPrivateStorage alloc] initWithHome:v273];
      id v285 = v273[205];
      v273[205] = v284;

      id v286 = objc_alloc(MEMORY[0x263F497F0]);
      double v287 = [v273 workQueue];
      uint64_t v288 = [v286 initWithDelegate:v273 queue:v287];
      id v289 = v273[206];
      v273[206] = (id)v288;

      [v273[206] setControllerEntityIdentifier:v35->_uuid];
      id v290 = [v273 homeManager];
      uint64_t v291 = [v290 accessoryBrowser];
      id v292 = [v291 chipAccessoryServerBrowser];
      id v293 = [v292 storage];
      [v273[206] setStorage:v293];

      LODWORD(v291) = [v340 isCurrentUser];
      long long v294 = [v273[206] accessControl];
      [v294 setCurrentUserPrivilege:v291];

      double v295 = [v273[206] accessControl];
      LODWORD(v291) = [v295 currentUserPrivilege] == 0;

      if (v291)
      {
        objc_initWeak((id *)buf, v273);
        v341[0] = MEMORY[0x263EF8330];
        v341[1] = 3221225472;
        v341[2] = __521__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_matterCapabilitiesFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke_636;
        v341[3] = &unk_264A16100;
        objc_copyWeak(&v342, (id *)buf);
        v296 = [v273[206] accessControl];
        [v296 setPrivilegeGetter:v341];

        objc_destroyWeak(&v342);
        objc_destroyWeak((id *)buf);
      }
    }
    v273[223] = 0;
    v273[224] = 0;
    uint64_t v297 = [MEMORY[0x263F08C38] UUID];
    id v298 = v273[210];
    v273[210] = (id)v297;

    __int16 v299 = objc_alloc_init(HMDModernMessagingHandler);
    id v300 = v273[130];
    v273[130] = v299;

    if (!v335) {
      objc_destroyWeak(v333);
    }
    objc_destroyWeak(&v347);
    objc_destroyWeak(&location);
  }
  return v35;
}

void __521__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_matterCapabilitiesFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v7) {
    objc_msgSend(WeakRetained, "_registerForReachabilityChangeNotificationsEnabled:completionHandler:", objc_msgSend(v7, "BOOLValue"), v5);
  }
}

id __521__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_matterCapabilitiesFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = +[HMDMatterCapabilitiesFactory makeInstanceForAssetFilename:a2];

  return v4;
}

unint64_t __521__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_matterCapabilitiesFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke_636(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_super v3 = [WeakRetained currentUser];
    unint64_t v4 = +[HMDUser hmmtrUserPrivilegeFromHMDUserPrivilege:](HMDUser, "hmmtrUserPrivilegeFromHMDUserPrivilege:", [v3 privilege]);
  }
  else
  {
    unint64_t v4 = 0;
  }

  return v4;
}

- (HMDHome)initWithName:(id)a3 uuid:(id)a4 defaultRoomUUID:(id)a5 owner:(id)a6 homeManager:(id)a7 presenceAuth:(id)a8
{
  id v32 = a8;
  id v14 = a7;
  id v31 = a6;
  id v30 = a5;
  id v29 = a4;
  id v28 = a3;
  isWatch();
  __int16 v37 = objc_alloc_init(HMDNotificationRegistry);
  BOOL v27 = objc_alloc_init(HMDHomeMetricsDispatcherFactory);
  id v34 = [v14 metricsManager];
  uint64_t v36 = [v34 logEventSubmitter];
  id v33 = [v14 metricsManager];
  int v35 = [v33 dailyScheduler];
  id v24 = +[HMDHAPMetadata getSharedInstance];
  BOOL v23 = [[HMDSiriSecureAccessoryAccessController alloc] initWithDataSource:self];
  uint64_t v22 = objc_alloc_init(HMDCarPlayDataSource);
  uint64_t v19 = objc_alloc_init(HMDDeviceLockStateDataSource);
  long long v20 = objc_alloc_init(HMDXPCMessageTransportFactory);
  unint64_t v21 = objc_alloc_init(HMDHomeLocalDeviceCapabilitiesDataSource);
  uint64_t v15 = [MEMORY[0x263F08A00] defaultCenter];
  BOOL v16 = [MEMORY[0x263F35AD0] systemStore];
  uint64_t v17 = objc_alloc_init(HMDXPCMessageReportingSessionManager);
  uint64_t v26 = -[HMDHome initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:metricsDispatcherFactory:logEventSubmitter:dailyScheduler:currentUserFactory:residentDeviceManagerFactory:locationHandlerFactory:hapMetadata:siriSecureAccessoryAccessController:carPlayDataSource:deviceLockStateDataSource:notificationRegistry:administratorHandlerFactory:netManagerFactory:wifiManagerFactory:matterCapabilitiesFactory:xpcMessageTransportFactory:localCapabilitiesDataSource:notificationCenter:keychainStore:reportingSessionManager:](self, "initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:metricsDispatcherFactory:logEventSubmitter:dailyScheduler:currentUserFactory:residentDeviceManagerFactory:locationHandlerFactory:hapMetadata:siriSecureAccessoryAccessController:carPlayDataSource:deviceLockStateDataSource:notificationRegistry:administratorHandlerFactory:netManagerFactory:wifiManagerFactory:matterCapabilitiesFactory:xpcMessageTransportFactory:localCapabilitiesDataSource:notificationCenter:keychainStore:reportingSessionManager:", v28, v29, v30, v31, v14, v32, v27, v36, v35, &__block_literal_global_547, &__block_literal_global_550, &__block_literal_global_558, v24,
          v23,
          v22,
          v19,
          v37,
          &__block_literal_global_554,
          &__block_literal_global_562,
          &__block_literal_global_566,
          0,
          v20,
          v21,
          v15,
          v16,
          v17);

  return v26;
}

uint64_t __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_6()
{
  return [MEMORY[0x263F42680] sharedManager];
}

uint64_t __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_5()
{
  return [MEMORY[0x263F425A8] sharedManager];
}

HMDHomeLocationHandler *__76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_4()
{
  uint64_t v0 = objc_alloc_init(HMDHomeLocationHandler);
  return v0;
}

HMDHomeAdministratorHandler *__76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_3(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_super v3 = [[HMDHomeAdministratorHandler alloc] initWithHome:v2];

  return v3;
}

id __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = [a2 uuid];
  objc_super v3 = +[HMDResidentDeviceManagerFactory createManagerForHomeUUID:v2];

  return v3;
}

uint64_t __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke()
{
  return 0;
}

+ (id)filterAllowedToPostBulletinFromCharacteristics:(id)a3
{
  return (id)objc_msgSend(a3, "na_filter:", &__block_literal_global_2601);
}

uint64_t __58__HMDHome_filterAllowedToPostBulletinFromCharacteristics___block_invoke(uint64_t a1, void *a2)
{
  id v2 = [a2 service];
  objc_super v3 = [v2 accessory];
  unint64_t v4 = [v3 home];
  uint64_t v5 = [v4 shouldPostBulletin];

  return v5;
}

+ (void)dumpAccessories:(id)a3 usingTag:(id)a4 flow:(id)a5
{
  id v8 = a4;
  id v9 = a5;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  void v12[2] = __41__HMDHome_dumpAccessories_usingTag_flow___block_invoke;
  v12[3] = &unk_264A171E0;
  id v14 = v8;
  id v15 = a1;
  id v13 = v9;
  id v10 = v8;
  id v11 = v9;
  objc_msgSend(a3, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v12);
}

void __41__HMDHome_dumpAccessories_usingTag_flow___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = a2;
  unint64_t v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 48);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    id v8 = [*(id *)(a1 + 32) UUID];
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = [v3 modelID];
    id v11 = [v3 castIfHAPAccessory];
    int v13 = 138544386;
    long long v12 = @"YES";
    id v14 = v7;
    if (!v11) {
      long long v12 = @"NO";
    }
    __int16 v15 = 2112;
    BOOL v16 = v8;
    __int16 v17 = 2112;
    uint64_t v18 = v9;
    __int16 v19 = 2112;
    long long v20 = v10;
    __int16 v21 = 2112;
    uint64_t v22 = v12;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] %@ : %@ (isHAPAccessory : %@)", (uint8_t *)&v13, 0x34u);
  }
}

+ (id)logCategory
{
  if (logCategory__hmf_once_t1456 != -1) {
    dispatch_once(&logCategory__hmf_once_t1456, &__block_literal_global_1933);
  }
  id v2 = (void *)logCategory__hmf_once_v1457;
  return v2;
}

void __22__HMDHome_logCategory__block_invoke()
{
  uint64_t v0 = HMFCreateOSLogHandle();
  uint64_t v1 = (void *)logCategory__hmf_once_v1457;
  logCategory__hmf_once_v1457 = v0;
}

+ (BOOL)supportsSecureCoding
{
  return 1;
}

+ (id)supportedAccessoryClasses
{
  if (supportedAccessoryClasses_onceToken != -1) {
    dispatch_once(&supportedAccessoryClasses_onceToken, &__block_literal_global_1848);
  }
  id v2 = (void *)supportedAccessoryClasses_supportedAccessoryClasses;
  return v2;
}

void __36__HMDHome_supportedAccessoryClasses__block_invoke()
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v0 = (void *)MEMORY[0x263EFFA08];
  v4[0] = objc_opt_class();
  v4[1] = objc_opt_class();
  uint64_t v1 = [MEMORY[0x263EFF8C0] arrayWithObjects:v4 count:2];
  uint64_t v2 = [v0 setWithArray:v1];
  id v3 = (void *)supportedAccessoryClasses_supportedAccessoryClasses;
  supportedAccessoryClasses_supportedAccessoryClasses = v2;
}

+ (void)appendCharacteristicsToAccessoryList:(id)a3 responseTuples:(id)a4 forMultipleCharacteristicsRemoteRead:(id)a5
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v32 = a3;
  id v29 = a4;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  obuint64_t j = a5;
  uint64_t v7 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v34;
    uint64_t v28 = *MEMORY[0x263F0C710];
    do
    {
      uint64_t v10 = 0;
      uint64_t v30 = v8;
      do
      {
        if (*(void *)v34 != v9) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v33 + 1) + 8 * v10);
        long long v12 = [v11 characteristic];
        int v13 = [v12 service];
        id v14 = [v13 accessory];
        __int16 v15 = v14;
        if (v12) {
          BOOL v16 = v13 == 0;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16 || v14 == 0)
        {
          long long v20 = [MEMORY[0x263F087E8] errorWithDomain:v28 code:4 userInfo:0];
          uint64_t v18 = +[HMDCharacteristicResponse responseWithRequest:v11 error:v20];
          [v29 addObject:v18];
        }
        else
        {
          __int16 v19 = [v14 uuid];
          long long v20 = [v19 UUIDString];

          uint64_t v21 = objc_msgSend(v32, "hmf_mutableDictionaryForKey:", v20);
          uint64_t v18 = (void *)v21;
          if (!v21)
          {
            uint64_t v18 = [MEMORY[0x263EFF9A0] dictionary];
            [v32 setObject:v18 forKey:v20];
          }
          uint64_t v22 = [v13 instanceID];
          uint64_t v23 = [v22 stringValue];
          id v24 = objc_msgSend(v18, "hmf_mutableArrayForKey:", v23);

          if (!v24)
          {
            id v24 = [MEMORY[0x263EFF980] array];
            char v25 = [v13 instanceID];
            uint64_t v26 = [v25 stringValue];
            [v18 setObject:v24 forKey:v26];
          }
          BOOL v27 = [v12 instanceID];
          [v24 addObject:v27];

          uint64_t v8 = v30;
        }

        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
    }
    while (v8);
  }
}

+ (void)appendCharacteristicsToAccessoryList:(id)a3 responseTuples:(id)a4 forMultipleCharacteristicsRemoteWrite:(id)a5 message:(id)a6
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  id v48 = a3;
  id v45 = a4;
  id v9 = a5;
  id v44 = a6;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  obuint64_t j = v9;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v54 objects:v58 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v55;
    uint64_t v42 = *MEMORY[0x263F0C710];
    uint64_t v43 = *(void *)v55;
    do
    {
      uint64_t v13 = 0;
      uint64_t v46 = v11;
      do
      {
        if (*(void *)v55 != v12) {
          objc_enumerationMutation(obj);
        }
        id v14 = *(void **)(*((void *)&v54 + 1) + 8 * v13);
        __int16 v15 = [v14 characteristic];
        BOOL v16 = [v15 service];
        __int16 v17 = [v16 accessory];
        uint64_t v18 = v17;
        if (v15) {
          BOOL v19 = v16 == 0;
        }
        else {
          BOOL v19 = 1;
        }
        if (v19 || v17 == 0)
        {
          uint64_t v21 = [MEMORY[0x263F087E8] errorWithDomain:v42 code:4 userInfo:0];
          uint64_t v22 = +[HMDCharacteristicResponse responseWithRequest:v14 error:v21];
          [v45 addObject:v22];
        }
        else
        {
          uint64_t v23 = [v17 uuid];
          uint64_t v24 = [v23 UUIDString];

          char v25 = [v16 instanceID];
          uint64_t v26 = [v25 stringValue];

          BOOL v27 = [v15 instanceID];
          uint64_t v53 = [v27 stringValue];

          uint64_t v28 = objc_msgSend(v48, "hmf_mutableDictionaryForKey:", v24);
          id v29 = (void *)v28;
          if (!v28)
          {
            id v29 = [MEMORY[0x263EFF9A0] dictionary];
            [v48 setObject:v29 forKeyedSubscript:v24];
          }
          uint64_t v52 = (void *)v24;
          uint64_t v30 = objc_msgSend(v29, "hmf_mutableDictionaryForKey:", v26);
          if (!v30)
          {
            uint64_t v30 = [MEMORY[0x263EFF9A0] dictionary];
            [v29 setObject:v30 forKeyedSubscript:v26];
          }
          dispatch_queue_t v50 = v29;
          uint64_t v51 = (void *)v26;
          uint64_t v31 = [v15 authorizationData];
          if (v31)
          {
            id v32 = [NSString stringWithFormat:@"%@-%@", v53, @"kAuthorizationDataKey"];
            [v30 setObject:v31 forKeyedSubscript:v32];
          }
          long long v49 = (void *)v31;
          long long v33 = [v18 home];
          long long v34 = [v33 currentUser];
          long long v35 = [v34 notificationContextHAPIdentifier];
          long long v36 = [v15 contextDataForWriteRequestWithIdentifier:v35];

          if (v36)
          {
            __int16 v37 = [NSString stringWithFormat:@"%@-%@", v53, @"kCharacteristicContextDataForWriteKey"];
            [v30 setObject:v36 forKeyedSubscript:v37];
          }
          uint64_t v38 = [v44 uuidForKey:@"kActionSetUUID"];
          int v39 = [v44 BOOLForKey:@"kShortActionKey"];
          uint64_t v22 = v51;
          if (v38 || v39) {
            [v48 setObject:MEMORY[0x263EFFA88] forKeyedSubscript:@"kShortActionKey"];
          }
          uint64_t v40 = [v14 value];
          [v30 setObject:v40 forKeyedSubscript:v53];

          id v41 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v14, "includeResponseValue"));
          [v30 setObject:v41 forKeyedSubscript:@"HMDCharacteristicWriteRequestIncludeResponseValueKey"];

          uint64_t v12 = v43;
          uint64_t v11 = v46;
          uint64_t v21 = v52;
        }

        ++v13;
      }
      while (v11 != v13);
      uint64_t v11 = [obj countByEnumeratingWithState:&v54 objects:v58 count:16];
    }
    while (v11);
  }
}

+ (id)notificationPayloadForChangedCharacteristics:(id)a3 destination:(id)a4 destinationIsXPCTransport:(BOOL)a5
{
  BOOL v81 = a5;
  uint64_t v100 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v68 = a4;
  id v67 = [MEMORY[0x263EFF9A0] dictionary];
  uint64_t v7 = +[HMDHAPMetadata getSharedInstance];
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  obuint64_t j = v6;
  uint64_t v8 = [obj countByEnumeratingWithState:&v85 objects:v99 count:16];
  if (v8)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void *)v86;
    *(void *)&long long v9 = 138544130;
    long long v63 = v9;
    uint64_t v79 = v7;
    uint64_t v76 = *(void *)v86;
    do
    {
      uint64_t v12 = 0;
      uint64_t v77 = v10;
      do
      {
        if (*(void *)v86 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void **)(*((void *)&v85 + 1) + 8 * v12);
        id v14 = objc_msgSend(v13, "characteristic", v63);
        __int16 v15 = [v14 service];
        BOOL v16 = [v15 accessory];
        uint64_t v17 = [v16 home];
        uint64_t v18 = (void *)v17;
        if (v14) {
          BOOL v19 = v15 == 0;
        }
        else {
          BOOL v19 = 1;
        }
        if (!v19 && v16 != 0 && v17 != 0)
        {
          uint64_t v22 = [v13 updatedValue];
          uint64_t v23 = v22;
          if (v22) {
            BOOL v24 = !v81;
          }
          else {
            BOOL v24 = 1;
          }
          if (v24)
          {
            if (v22) {
              goto LABEL_24;
            }
          }
          else
          {
            id v25 = v22;
            objc_opt_class();
            char isKindOfClass = objc_opt_isKindOfClass();

            if ((isKindOfClass & 1) == 0)
            {
LABEL_24:
              if (!v81) {
                goto LABEL_27;
              }
              BOOL v27 = [v14 type];
              if ([v79 shouldFilterCharacteristicOfTypeFromApp:v27])
              {
LABEL_52:
              }
              else
              {
                uint64_t v28 = [v15 type];
                char v29 = [v79 shouldFilterServiceOfTypeFromApp:v28];

                if ((v29 & 1) == 0)
                {
LABEL_27:
                  uint64_t v30 = [v16 uuid];
                  uint64_t v31 = [v30 UUIDString];

                  uint64_t v32 = v31;
                  uint64_t v33 = objc_msgSend(v67, "hmf_mutableDictionaryForKey:", v31);
                  if (!v33)
                  {
                    uint64_t v33 = [MEMORY[0x263EFF9A0] dictionary];
                    [v67 setObject:v33 forKey:v32];
                  }
                  uint64_t v73 = (void *)v32;
                  long long v34 = [v15 instanceID];
                  uint64_t v35 = [v34 stringValue];
                  long long v36 = (void *)v33;
                  __int16 v37 = (void *)v35;
                  long long v75 = v36;
                  uint64_t v38 = objc_msgSend(v36, "hmf_mutableDictionaryForKey:", v35);

                  long long v74 = (void *)v38;
                  if (!v38)
                  {
                    uint64_t v39 = [MEMORY[0x263EFF9A0] dictionary];
                    uint64_t v40 = [v15 instanceID];
                    id v41 = [v40 stringValue];
                    long long v74 = (void *)v39;
                    [v75 setObject:v39 forKey:v41];
                  }
                  uint64_t v97 = @"kCharacteristicValue";
                  uint64_t v98 = v23;
                  uint64_t v42 = [NSDictionary dictionaryWithObjects:&v98 forKeys:&v97 count:1];
                  uint64_t v43 = (void *)[v42 mutableCopy];

                  id v83 = 0;
                  id v84 = 0;
                  id v82 = 0;
                  [v14 getLastKnownValueUpdateTime:&v84 stateNumber:&v83 notificationContext:&v82];
                  id v44 = v84;
                  id v45 = v83;
                  id v80 = v82;
                  if (v44) {
                    [v43 setObject:v44 forKey:@"kCharacteristicValueUpdateTime"];
                  }
                  if (v45) {
                    [v43 setObject:v45 forKey:@"kCharacteristicValueUpdateStateNumberKey"];
                  }
                  uint64_t v71 = v45;
                  uint64_t v72 = v44;
                  if (v80)
                  {
                    uint64_t v69 = v43;
                    context = (void *)MEMORY[0x230FBD990]();
                    id v46 = a1;
                    id v47 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
                    {
                      id v48 = HMFGetLogIdentifier();
                      *(_DWORD *)buf = 138543618;
                      uint64_t v90 = v48;
                      __int16 v91 = 2112;
                      id v92 = v80;
                      _os_log_impl(&dword_22F52A000, v47, OS_LOG_TYPE_INFO, "%{public}@Setting notification context in notification payload to %@ ", buf, 0x16u);
                    }
                    uint64_t v43 = v69;
                    [v69 setObject:v80 forKey:@"kCharacteristicNotificationContextKey"];
                  }
                  char v49 = [v13 isBroadcast];
                  uint64_t v50 = MEMORY[0x263EFFA88];
                  if ((v49 & 1) != 0
                    || (int v51 = objc_msgSend(v16, "isBLELinkConnected", MEMORY[0x263EFFA88]),
                        uint64_t v50 = MEMORY[0x263EFFA80],
                        v51))
                  {
                    [v43 setObject:v50 forKey:@"kCharacteristicBroadcastValueUpdateKey"];
                  }
                  if (!v81)
                  {
                    uint64_t v52 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v13, "reasons", v50));
                    [v43 setObject:v52 forKey:@"kCharacteristicValueUpdateReasonKey"];
                  }
                  if (v68
                    && +[HMDBulletinUserAttributionManager currentStateCharacteristicSupportsUserAttribution:v14])
                  {
                    uint64_t v53 = [v18 bulletinUserAttributionManager];
                    long long v54 = [v53 attributedUserUUIDForCurrentStateCharacteristic:v14 destination:v68];

                    if (v54)
                    {
                      id v70 = v43;
                      long long v55 = (void *)MEMORY[0x230FBD990]();
                      id v56 = a1;
                      long long v57 = HMFGetOSLogHandle();
                      if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
                      {
                        HMFGetLogIdentifier();
                        __int16 v58 = contexta = v55;
                        *(_DWORD *)buf = v63;
                        uint64_t v90 = v58;
                        __int16 v91 = 2112;
                        id v92 = v54;
                        __int16 v93 = 2112;
                        uint64_t v94 = v14;
                        __int16 v95 = 2112;
                        id v96 = v68;
                        _os_log_impl(&dword_22F52A000, v57, OS_LOG_TYPE_INFO, "%{public}@Including attributedUserUUID=%@ in chracteristic=%@ update message to destination=%@", buf, 0x2Au);

                        long long v55 = contexta;
                      }

                      uint64_t v59 = [v54 UUIDString];
                      uint64_t v43 = v70;
                      [v70 setObject:v59 forKey:@"kCharacteristicAttributedUserUUIDKey"];
                    }
                  }
                  uint64_t v60 = objc_msgSend(v14, "instanceID", v50);
                  uint64_t v61 = [v60 stringValue];
                  [v74 setObject:v43 forKey:v61];

                  BOOL v27 = v73;
                  goto LABEL_52;
                }
              }
            }
          }

          uint64_t v7 = v79;
          uint64_t v11 = v76;
          uint64_t v10 = v77;
        }

        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = [obj countByEnumeratingWithState:&v85 objects:v99 count:16];
    }
    while (v10);
  }

  return v67;
}

+ (id)notificationPayloadForChangedCharacteristics:(id)a3 destinationIsXPCTransport:(BOOL)a4
{
  return (id)[a1 notificationPayloadForChangedCharacteristics:a3 destination:0 destinationIsXPCTransport:a4];
}

+ (unint64_t)privilegeFromUserInviteInformation:(id)a3
{
  id v3 = a3;
  if ([v3 isRestrictedGuest])
  {
    unint64_t v4 = 5;
  }
  else if ([v3 isAdministrator])
  {
    unint64_t v4 = 4;
  }
  else
  {
    unint64_t v4 = 0;
  }

  return v4;
}

+ (id)filterUsersSupportingPresence:(id)a3
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = a3;
  unint64_t v4 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v3, "count"));
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          objc_msgSend(v4, "addObject:", v10, (void)v12);
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  return v4;
}

+ (id)shortDescription
{
  uint64_t v2 = (objc_class *)objc_opt_class();
  return NSStringFromClass(v2);
}

+ (id)zoneIDFromHomeUUID:(id)a3
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x263F08C38];
  long long v9 = @"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938";
  unint64_t v4 = (void *)MEMORY[0x263EFF8C0];
  id v5 = a3;
  uint64_t v6 = [v4 arrayWithObjects:&v9 count:1];
  uint64_t v7 = objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v5, 0, v6, v9, v10);

  return v7;
}

+ (BOOL)isObjectContainedInHome:(id)a3
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v3 = a3;
  +[HMDHome _initialize];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v4 = (id)allowedClasses;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v4);
        }
        if (objc_opt_isKindOfClass())
        {
          LOBYTE(v5) = 1;
          goto LABEL_11;
        }
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v5;
}

+ (id)getBuiltinActionSets
{
  if (getBuiltinActionSets_onceToken != -1) {
    dispatch_once(&getBuiltinActionSets_onceToken, &__block_literal_global_541);
  }
  uint64_t v2 = (void *)getBuiltinActionSets_builtinActionSets;
  return v2;
}

void __31__HMDHome_getBuiltinActionSets__block_invoke()
{
  void v8[4] = *MEMORY[0x263EF8340];
  uint64_t v0 = *MEMORY[0x263F0B8D8];
  uint64_t v1 = *MEMORY[0x263F0B938];
  v7[0] = *MEMORY[0x263F0B960];
  v7[1] = v1;
  uint64_t v2 = *MEMORY[0x263F0B8D0];
  v8[0] = v0;
  v8[1] = v2;
  uint64_t v3 = *MEMORY[0x263F0B918];
  void v7[2] = *MEMORY[0x263F0B908];
  v7[3] = v3;
  uint64_t v4 = *MEMORY[0x263F0B8C8];
  void v8[2] = *MEMORY[0x263F0B8C0];
  void v8[3] = v4;
  uint64_t v5 = [NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:4];
  uint64_t v6 = (void *)getBuiltinActionSets_builtinActionSets;
  getBuiltinActionSets_builtinActionSets = v5;
}

+ (void)_initialize
{
  if (_initialize_onceToken != -1) {
    dispatch_once(&_initialize_onceToken, &__block_literal_global_14625);
  }
}

void __22__HMDHome__initialize__block_invoke()
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v0 = (void *)MEMORY[0x263EFFA08];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_opt_class();
  uint64_t v13 = objc_opt_class();
  uint64_t v14 = objc_opt_class();
  uint64_t v1 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v4 count:11];
  uint64_t v2 = objc_msgSend(v0, "setWithArray:", v1, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v3 = (void *)allowedClasses;
  allowedClasses = v2;
}

- (void)setMediaSettingsValue:(int64_t)a3 mediaPassword:(id)a4 enabled:(BOOL)a5
{
  BOOL v5 = a5;
  id v8 = a4;
  [(HMDHome *)self setMinimumMediaUserPrivilege:a3];
  [(HMDHome *)self setMediaPassword:v8];

  [(HMDHome *)self setMediaPeerToPeerEnabled:v5];
}

- (void)_notifyThreadLayerOfResidentChange
{
  uint64_t v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  uint64_t v4 = [(HMDHome *)self home];
  BOOL v5 = v4;
  if (v4)
  {
    uint64_t v12 = v4;
    int v6 = [v4 isCurrentDeviceAvailableResident];
    BOOL v5 = v12;
    if (v6)
    {
      uint64_t v7 = +[HMDThreadResidentCommissioner sharedCommissioner];
      id v8 = [v12 primaryResident];
      uint64_t v9 = [v8 isCurrentDevice];
      uint64_t v10 = [v12 primaryResident];
      uint64_t v11 = [v10 capabilities];
      objc_msgSend(v7, "informThreadLayerOfResidentChange:primaryResidentIsThreadCapable:", v9, objc_msgSend(v11, "supportsThreadBorderRouter"));

      BOOL v5 = v12;
    }
  }
}

- (void)_updateThreadNetworkWithModel:(id)a3 message:(id)a4
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 setProperties];
  int v9 = [v8 containsObject:@"threadNetworkID"];

  if (!v9)
  {
LABEL_13:
    [v7 respondWithPayload:0];
    goto LABEL_14;
  }
  uint64_t v10 = [(HMDHome *)self unfilteredThreadNetworkID];
  uint64_t v11 = [v6 threadNetworkID];
  uint64_t v12 = [(HMDHome *)self threadNetworkID];

  if (!v12)
  {
    uint64_t v18 = [v7 transactionResult];
    uint64_t v19 = [v18 source];

    if (v19 == 2 && v11 && [(HMDHome *)self attemptToUpdateThreadNetworkID:v11])
    {
      long long v20 = (void *)MEMORY[0x230FBD990]();
      uint64_t v21 = self;
      uint64_t v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = HMFGetLogIdentifier();
        int v25 = 138543874;
        uint64_t v26 = v23;
        __int16 v27 = 2112;
        uint64_t v28 = v10;
        __int16 v29 = 2112;
        uint64_t v30 = v11;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@threadNetworkID updated from cloud: %@ -> %@", (uint8_t *)&v25, 0x20u);
      }
      [(HMDHome *)v21 startThreadNetwork:0];
    }
    BOOL v24 = [v7 transactionResult];
    [v24 markChanged];

    goto LABEL_13;
  }
  uint64_t v13 = (void *)MEMORY[0x230FBD990]();
  uint64_t v14 = self;
  uint64_t v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v16 = HMFGetLogIdentifier();
    int v25 = 138543874;
    uint64_t v26 = v16;
    __int16 v27 = 2112;
    uint64_t v28 = v10;
    __int16 v29 = 2112;
    uint64_t v30 = v11;
    _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Ignoring threadNetworkID update from cloud: %@ -> %@", (uint8_t *)&v25, 0x20u);
  }
  uint64_t v17 = [v7 transactionResult];
  [v17 markChanged];

  [v7 respondWithPayload:0];
LABEL_14:
}

- (void)saveAndSyncWithThreadOperationalDataset:(id)a3
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = [(HMDHome *)self home];
  id v6 = v5;
  if (v4)
  {
    id v7 = [v5 residentDeviceManager];
    id v8 = [v7 residentDevices];
    if ([v8 count]
      && ![(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
    {
      uint64_t v11 = (void *)MEMORY[0x230FBD990]();
      uint64_t v12 = self;
      uint64_t v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v28 = v14;
        __int16 v29 = 2112;
        uint64_t v30 = v6;
        uint64_t v15 = "%{public}@There are residents for home: %@, but we are not the primary. Not saving ThreadOperationalDataset.";
        BOOL v16 = v13;
        uint32_t v17 = 22;
        goto LABEL_13;
      }
    }
    else
    {
      int v9 = [(HMDHome *)self threadOperationalDataset];
      int v10 = HMFEqualObjects();

      if (!v10)
      {
        uint64_t v22 = [(HMDHome *)self emptyModelObjectWithChangeType:2];
        [v22 setThreadOperationalDataset:v4];
        [(HMDHome *)self setThreadOperationalDataset:v4];
        uint64_t v23 = [(HMDHome *)self backingStore];
        BOOL v24 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        int v25 = [v23 transaction:@"Update thread operational dataset" options:v24];

        [v25 add:v22];
        v26[0] = MEMORY[0x263EF8330];
        v26[1] = 3221225472;
        void v26[2] = __80__HMDHome_ThreadResidentCommissioning__saveAndSyncWithThreadOperationalDataset___block_invoke;
        v26[3] = &unk_264A2F3E8;
        void v26[4] = self;
        [v25 run:v26];
        [(HMDHome *)self setThreadOperationalDataset:v4];

LABEL_15:
        goto LABEL_16;
      }
      uint64_t v11 = (void *)MEMORY[0x230FBD990]();
      uint64_t v12 = self;
      uint64_t v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v28 = v14;
        uint64_t v15 = "%{public}@Thread operational dataset has not changed, ignoring request to save and sync";
        BOOL v16 = v13;
        uint32_t v17 = 12;
LABEL_13:
        _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, v15, buf, v17);
      }
    }

    goto LABEL_15;
  }
  uint64_t v18 = (void *)MEMORY[0x230FBD990]();
  uint64_t v19 = self;
  long long v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v28 = v21;
    __int16 v29 = 2112;
    uint64_t v30 = v6;
    _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@threadOperationalDataset is null for home %@, not saving...", buf, 0x16u);
  }
LABEL_16:
}

void __80__HMDHome_ThreadResidentCommissioning__saveAndSyncWithThreadOperationalDataset___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      int v11 = 138543618;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = (uint64_t)v3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to sync thread operational dataset, error: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v9 = HMFGetLogIdentifier();
    int v10 = [*(id *)(a1 + 32) threadOperationalDataset];
    int v11 = 138543618;
    uint64_t v12 = v9;
    __int16 v13 = 2048;
    uint64_t v14 = [v10 length];
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully sync'ed thread operational dataset, Length: %lu", (uint8_t *)&v11, 0x16u);
  }
}

- (void)updateThreadOperationalDatasetWithHomeModel:(id)a3 message:(id)a4
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    id v8 = [v6 threadOperationalDataset];
    [(HMDHome *)self setThreadOperationalDataset:v8];

    int v9 = (void *)MEMORY[0x230FBD990]();
    int v10 = self;
    int v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      __int16 v13 = [(HMDHome *)v10 threadOperationalDataset];
      int v14 = 138543618;
      uint64_t v15 = v12;
      __int16 v16 = 2048;
      uint64_t v17 = [v13 length];
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Updated thread operational dataset, Length: %lu", (uint8_t *)&v14, 0x16u);
    }
  }
}

- (void)stopThreadAccessoryFirmwareUpdateWithCompletion:(id)a3
{
  id v3 = a3;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities],
        id v4 = objc_claimAutoreleasedReturnValue(),
        char v5 = [v4 supportsThreadService],
        v4,
        (v5 & 1) != 0))
  {
    id v6 = +[HMDThreadResidentCommissioner sharedCommissioner];
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    void v7[2] = __88__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryFirmwareUpdateWithCompletion___block_invoke;
    v7[3] = &unk_264A2E288;
    id v8 = v3;
    [v6 stopThreadAccessoryFirmwareUpdateWithCompletion:v7];
  }
  else
  {
    id v6 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    (*((void (**)(id, void *))v3 + 2))(v3, v6);
  }
}

uint64_t __88__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryFirmwareUpdateWithCompletion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)startThreadAccessoryFirmwareUpdateWithExtendedMACAddress:(id)a3 isWedDevice:(BOOL)a4 completion:(id)a5
{
  BOOL v6 = a4;
  id v7 = a3;
  id v8 = a5;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities],
        int v9 = objc_claimAutoreleasedReturnValue(),
        char v10 = [v9 supportsThreadService],
        v9,
        (v10 & 1) != 0))
  {
    int v11 = +[HMDThreadResidentCommissioner sharedCommissioner];
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 3221225472;
    void v13[2] = __120__HMDHome_ThreadResidentCommissioning__startThreadAccessoryFirmwareUpdateWithExtendedMACAddress_isWedDevice_completion___block_invoke;
    v13[3] = &unk_264A2E288;
    id v14 = v8;
    [v11 startThreadAccessoryFirmwareUpdateWithExtendedMACAddress:v7 isWedDevice:v6 completion:v13];
  }
  else
  {
    uint64_t v12 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    (*((void (**)(id, void *))v8 + 2))(v8, v12);
  }
}

uint64_t __120__HMDHome_ThreadResidentCommissioning__startThreadAccessoryFirmwareUpdateWithExtendedMACAddress_isWedDevice_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)stopThreadAccessoryPairingWithCompletion:(id)a3
{
  id v3 = a3;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities],
        id v4 = objc_claimAutoreleasedReturnValue(),
        char v5 = [v4 supportsThreadService],
        v4,
        (v5 & 1) != 0))
  {
    BOOL v6 = +[HMDThreadResidentCommissioner sharedCommissioner];
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    void v7[2] = __81__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryPairingWithCompletion___block_invoke;
    v7[3] = &unk_264A2E288;
    id v8 = v3;
    [v6 stopThreadAccessoryPairingWithCompletion:v7];
  }
  else
  {
    BOOL v6 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    (*((void (**)(id, void *))v3 + 2))(v3, v6);
  }
}

uint64_t __81__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryPairingWithCompletion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)startThreadAccessoryPairingWithExtendedMACAddress:(id)a3 isWedDevice:(BOOL)a4 completion:(id)a5
{
  BOOL v6 = a4;
  id v7 = a3;
  id v8 = a5;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities],
        int v9 = objc_claimAutoreleasedReturnValue(),
        char v10 = [v9 supportsThreadService],
        v9,
        (v10 & 1) != 0))
  {
    int v11 = +[HMDThreadResidentCommissioner sharedCommissioner];
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 3221225472;
    void v13[2] = __113__HMDHome_ThreadResidentCommissioning__startThreadAccessoryPairingWithExtendedMACAddress_isWedDevice_completion___block_invoke;
    v13[3] = &unk_264A2E288;
    id v14 = v8;
    [v11 startThreadAccessoryPairingWithExtendedMACAddress:v7 isWedDevice:v6 completion:v13];
  }
  else
  {
    uint64_t v12 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    (*((void (**)(id, void *))v8 + 2))(v8, v12);
  }
}

uint64_t __113__HMDHome_ThreadResidentCommissioning__startThreadAccessoryPairingWithExtendedMACAddress_isWedDevice_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)onThreadNetworkCallStateChange:(BOOL)a3
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!a3 && [(HMDHome *)self threadNetworkShouldRestartOnNetworkChange])
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    char v5 = self;
    BOOL v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = HMFGetLogIdentifier();
      int v8 = 138543362;
      int v9 = v7;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Restarting thread network after call end", (uint8_t *)&v8, 0xCu);
    }
    [(HMDHome *)v5 startThreadNetwork:1];
  }
}

- (void)onThreadNetworkPeripheralDeviceNodeTypeChange:(id)a3
{
  id v3 = (void *)MEMORY[0x263F08A00];
  id v4 = a3;
  id v5 = [v3 defaultCenter];
  [v5 postNotificationName:@"HMDHomeThreadNetworkPeripheralDeviceNodeTypeChangedNotification" object:v4];
}

- (void)onThreadNetworkWakeOnDeviceConnectionStateChange:(id)a3
{
  id v3 = (void *)MEMORY[0x263F08A00];
  id v4 = a3;
  id v5 = [v3 defaultCenter];
  [v5 postNotificationName:@"HMDHomeThreadNetworkWakeOnConnectionStateChangeNotification" object:v4];
}

- (void)onThreadNetworkNodeTypeStateChange:(int64_t)a3
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ([(HMDHome *)self threadNetworkNodeType] != a3)
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    BOOL v6 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = HMFGetLogIdentifier();
      int v10 = 138543618;
      int v11 = v8;
      __int16 v12 = 2048;
      int64_t v13 = a3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Thread network node type changed to %ld", (uint8_t *)&v10, 0x16u);
    }
    [(HMDHome *)v6 setThreadNetworkNodeType:a3];
    int v9 = [MEMORY[0x263F08A00] defaultCenter];
    [v9 postNotificationName:@"HMDHomeThreadNetworkNodeTypeChangeNotification" object:v6];
  }
}

- (void)onThreadNetworkConnectionStateChange:(int64_t)a3
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ([(HMDHome *)self threadNetworkConnectionState] != a3)
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    BOOL v6 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = HMFGetLogIdentifier();
      int v10 = 138543618;
      int v11 = v8;
      __int16 v12 = 2048;
      int64_t v13 = a3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Thread network connection state changed to %ld", (uint8_t *)&v10, 0x16u);
    }
    [(HMDHome *)v6 setThreadNetworkConnectionState:a3];
    int v9 = [MEMORY[0x263F08A00] defaultCenter];
    [v9 postNotificationName:@"HMDHomeThreadNetworkConnectionStateChangeNotification" object:v6];
  }
}

- (void)connectToThreadAccessoryWithExtendedMACAddress:(id)a3 completion:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities],
        id v7 = objc_claimAutoreleasedReturnValue(),
        char v8 = [v7 supportsThreadService],
        v7,
        (v8 & 1) != 0))
  {
    int v9 = +[HMDThreadResidentCommissioner sharedCommissioner];
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 3221225472;
    id v10[2] = __98__HMDHome_ThreadResidentCommissioning__connectToThreadAccessoryWithExtendedMACAddress_completion___block_invoke;
    void v10[3] = &unk_264A2E288;
    id v11 = v6;
    [v9 connectToThreadAccessoryWithExtendedMACAddress:v5 completion:v10];
  }
  else
  {
    int v9 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    (*((void (**)(id, void *))v6 + 2))(v6, v9);
  }
}

uint64_t __98__HMDHome_ThreadResidentCommissioning__connectToThreadAccessoryWithExtendedMACAddress_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)_unjoinThreadNetworkWithCompletion:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  char v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = HMFGetLogIdentifier();
    int v10 = [(HMDHome *)v7 threadNetworkID];
    *(_DWORD *)buf = 138543618;
    uint64_t v15 = v9;
    __int16 v16 = 2112;
    uint64_t v17 = v10;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Request to unjoin previous thread network: %@", buf, 0x16u);
  }
  [(HMDHome *)v7 setThreadNetworkID:@"770E5B2E-0BAD-0BAD-0BAD-EE86505EFF8F"];
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  void v12[2] = __75__HMDHome_ThreadResidentCommissioning___unjoinThreadNetworkWithCompletion___block_invoke;
  v12[3] = &unk_264A2EDE0;
  void v12[4] = v7;
  id v13 = v4;
  id v11 = v4;
  [(HMDHome *)v7 _stopThreadNetworkWithCompletion:v12];
}

void __75__HMDHome_ThreadResidentCommissioning___unjoinThreadNetworkWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      char v8 = HMFGetLogIdentifier();
      int v15 = 138543618;
      __int16 v16 = v8;
      __int16 v17 = 2112;
      id v18 = v3;
      int v9 = "%{public}@Failed to leave previous thread network: %@";
      int v10 = v7;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
      uint32_t v12 = 22;
LABEL_6:
      _os_log_impl(&dword_22F52A000, v10, v11, v9, (uint8_t *)&v15, v12);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    char v8 = HMFGetLogIdentifier();
    int v15 = 138543362;
    __int16 v16 = v8;
    int v9 = "%{public}@Successfully left previous thread network";
    int v10 = v7;
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    uint32_t v12 = 12;
    goto LABEL_6;
  }

  (*(void (**)(void, id, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v3, v13, v14);
}

- (void)_stopThreadNetworkWithCompletion:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  [(HMDHome *)self setThreadNetworkShouldRestartOnNetworkChange:0];
  [(HMDHome *)self _incrementCurrentSequenceNumber];
  id v6 = +[HMDThreadResidentCommissioner sharedCommissioner];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __73__HMDHome_ThreadResidentCommissioning___stopThreadNetworkWithCompletion___block_invoke;
  void v8[3] = &unk_264A2EDE0;
  void v8[4] = self;
  id v9 = v4;
  id v7 = v4;
  [v6 stopThreadNetworkWithCompletion:v8];
}

void __73__HMDHome_ThreadResidentCommissioning___stopThreadNetworkWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _unregisterForThreadNetworkEvents];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

- (void)stopThreadNetworkWithCompletion:(BOOL)a3 completion:(id)a4
{
  id v5 = a4;
  id v6 = [(HMDHome *)self workQueue];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke;
  void v8[3] = &unk_264A2F870;
  void v8[4] = self;
  id v9 = v5;
  id v7 = v5;
  dispatch_async(v6, v8);
}

void __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x230FBD990]([*(id *)(a1 + 32) setStartThreadNetworkInProgress:0]);
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = HMFGetLogIdentifier();
    id v6 = [*(id *)(a1 + 32) threadNetworkID];
    *(_DWORD *)buf = 138543618;
    os_log_type_t v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Stop thread network: %@", buf, 0x16u);
  }
  id v7 = *(void **)(a1 + 32);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke_57;
  void v8[3] = &unk_264A2EDE0;
  void v8[4] = v7;
  id v9 = *(id *)(a1 + 40);
  [v7 _stopThreadNetworkWithCompletion:v8];
}

void __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke_57(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    char v8 = HMFGetLogIdentifier();
    int v15 = 138543618;
    __int16 v16 = v8;
    __int16 v17 = 2112;
    id v18 = v3;
    id v9 = "%{public}@Failed to stop thread network: %@";
    int v10 = v7;
    os_log_type_t v11 = OS_LOG_TYPE_ERROR;
    uint32_t v12 = 22;
  }
  else
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    char v8 = HMFGetLogIdentifier();
    int v15 = 138543362;
    __int16 v16 = v8;
    id v9 = "%{public}@Successfully stopped thread network";
    int v10 = v7;
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    uint32_t v12 = 12;
  }
  _os_log_impl(&dword_22F52A000, v10, v11, v9, (uint8_t *)&v15, v12);

LABEL_7:
  uint64_t v13 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v14 = v13;
  if (v13) {
    (*((void (**)(void *))v13 + 2))(v13);
  }
}

- (void)stopThreadNetwork:(BOOL)a3
{
}

- (void)_startThreadNetworkWithCompletion:(id)a3
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v4 = (void (**)(id, void *))a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled())
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = self;
    char v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      int v11 = 138543618;
      uint32_t v12 = v9;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Thread start starting for home %@", (uint8_t *)&v11, 0x16u);
    }
    [(HMDHome *)v7 setStartThreadNetworkInProgress:1];
    [(HMDHome *)v7 setThreadNetworkShouldRestartOnNetworkChange:1];
    [(HMDHome *)v7 _startThreadNetworkOnIOSWithCompletion:v4];
  }
  else
  {
    int v10 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    v4[2](v4, v10);
  }
}

- (void)_startThreadNetworkOnIOSWithCompletion:(id)a3
{
  id v4 = a3;
  v20[0] = 0;
  v20[1] = v20;
  id v20[2] = 0x2020000000;
  char v21 = 0;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke;
  aBlock[3] = &unk_264A17CB8;
  objc_copyWeak(&v18, &location);
  __int16 v17 = v20;
  id v5 = v4;
  id v16 = v5;
  id v6 = _Block_copy(aBlock);
  if (![(HMDHome *)self _overrideStartThreadTimeout])
  {
    dispatch_time_t v7 = dispatch_time(0, 20000000000);
    char v8 = [(HMDHome *)self workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_2;
    block[3] = &unk_264A2DFA0;
    id v14 = v6;
    dispatch_after(v7, v8, block);
  }
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  id v10[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_3;
  void v10[3] = &unk_264A2C348;
  objc_copyWeak(&v12, &location);
  id v9 = v6;
  id v11 = v9;
  [(HMDHome *)self _retrievePreferredNetworkWithCompletion:v10];

  objc_destroyWeak(&v12);
  objc_destroyWeak(&v18);
  objc_destroyWeak(&location);
  _Block_object_dispose(v20, 8);
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (v3)
  {
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      id v5 = (void *)MEMORY[0x230FBD990]();
      id v6 = WeakRetained;
      dispatch_time_t v7 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        char v8 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        long long v36 = v8;
        __int16 v37 = 2112;
        id v38 = v6;
        __int16 v39 = 2112;
        id v40 = v3;
        _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@Error starting thread for home %@, resetting state: %@", buf, 0x20u);
      }
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
      {
        id v9 = (void *)MEMORY[0x230FBD990]();
        id v10 = v6;
        id v11 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          id v12 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          long long v36 = v12;
          __int16 v37 = 2112;
          id v38 = v10;
          __int16 v39 = 2112;
          id v40 = v3;
          _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Thread start completed for home %@, error = %@", buf, 0x20u);
        }
        [v10 setStartThreadNetworkInProgress:0];
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
        __int16 v13 = [v10 workQueue];
        block[0] = MEMORY[0x263EF8330];
        block[1] = 3221225472;
        block[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_55;
        block[3] = &unk_264A2F870;
        id v30 = *(id *)(a1 + 32);
        id v29 = v3;
        dispatch_async(v13, block);

        id v14 = v30;
LABEL_18:
      }
    }
  }
  else
  {
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
      goto LABEL_13;
    }
    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = WeakRetained;
    __int16 v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v36 = v18;
      __int16 v37 = 2112;
      id v38 = v16;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Starting thread took longer than expected for home %@", buf, 0x16u);
    }
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
LABEL_13:
      uint64_t v19 = [WeakRetained threadOperationalDataset];

      if (v19)
      {
        long long v20 = [WeakRetained threadOperationalDataset];
        v33[0] = MEMORY[0x263EF8330];
        v33[1] = 3221225472;
        void v33[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_52;
        v33[3] = &unk_264A25810;
        v33[4] = WeakRetained;
        long long v27 = *(_OWORD *)(a1 + 32);
        id v21 = (id)v27;
        long long v34 = v27;
        [WeakRetained _startThreadNetworkOnCommissionerForIOSWithOperationalDataset:v20 completion:v33];

        id v14 = (void *)v34;
      }
      else
      {
        uint64_t v22 = (void *)MEMORY[0x230FBD990]();
        id v23 = WeakRetained;
        BOOL v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          int v25 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          long long v36 = v25;
          __int16 v37 = 2112;
          id v38 = v23;
          _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Thread operational dataset not available. Cancelling thread start for home %@", buf, 0x16u);
        }
        [v23 setStartThreadNetworkInProgress:0];
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
        uint64_t v26 = [v23 workQueue];
        v31[0] = MEMORY[0x263EF8330];
        v31[1] = 3221225472;
        void v31[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_54;
        void v31[3] = &unk_264A2DFA0;
        id v32 = *(id *)(a1 + 32);
        dispatch_async(v26, v31);

        id v14 = v32;
      }
      goto LABEL_18;
    }
  }
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x263F087E8] hmErrorWithCode:8];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = WeakRetained;
  if (v3 || !WeakRetained)
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = v5;
    char v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v28 = v9;
      __int16 v29 = 2112;
      id v30 = v3;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve preferred thread network: %@", buf, 0x16u);
    }
    id v10 = [v7 threadOperationalDataset];

    if (!v10)
    {
      uint64_t v23 = *(void *)(a1 + 32);
      BOOL v24 = [MEMORY[0x263F087E8] hmErrorWithCode:23];
      (*(void (**)(uint64_t, void *))(v23 + 16))(v23, v24);

      goto LABEL_12;
    }
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = v7;
    __int16 v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = HMFGetLogIdentifier();
      uint64_t v15 = [v12 threadOperationalDataset];
      id v16 = [v12 threadNetworkID];
      __int16 v17 = [v12 home];
      *(_DWORD *)buf = 138544130;
      uint64_t v28 = v14;
      __int16 v29 = 2112;
      id v30 = v15;
      __int16 v31 = 2112;
      id v32 = v16;
      __int16 v33 = 2112;
      long long v34 = v17;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Using cached threadOperationalDataset %@ and uuid %@ from home %@", buf, 0x2Au);
    }
  }
  id v18 = (void *)MEMORY[0x230FBD990]();
  id v19 = v5;
  long long v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    id v21 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v28 = v21;
    __int16 v29 = 2112;
    id v30 = v19;
    _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Successfully fetched preferred network, scheduling startThread for home %@", buf, 0x16u);
  }
  uint64_t v22 = [v19 workQueue];
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 3221225472;
  void v25[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_56;
  v25[3] = &unk_264A2F870;
  void v25[4] = v19;
  id v26 = *(id *)(a1 + 32);
  dispatch_async(v22, v25);

LABEL_12:
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_56(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ([*(id *)(a1 + 32) startThreadNetworkInProgress])
  {
    id v2 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v2();
  }
  else
  {
    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = *(id *)(a1 + 32);
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      uint64_t v7 = *(void *)(a1 + 32);
      int v10 = 138543618;
      id v11 = v6;
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Thread network stop was requested by the time preferred network was fetched to start Thread for home %@", (uint8_t *)&v10, 0x16u);
    }
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:23];
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_52(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v20 = v7;
      __int16 v21 = 2112;
      id v22 = v3;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Unable to start thread with operational dataset: %@", buf, 0x16u);
    }
  }
  uint64_t v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = *(id *)(a1 + 32);
  int v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    __int16 v12 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138543874;
    long long v20 = v11;
    __int16 v21 = 2112;
    id v22 = v12;
    __int16 v23 = 2112;
    id v24 = v3;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Thread start completed for home %@, error = %@", buf, 0x20u);
  }
  [*(id *)(a1 + 32) setStartThreadNetworkInProgress:0];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  uint64_t v13 = [*(id *)(a1 + 32) workQueue];
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 3221225472;
  void v16[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_53;
  v16[3] = &unk_264A2F870;
  id v14 = *(id *)(a1 + 40);
  id v17 = v3;
  id v18 = v14;
  id v15 = v3;
  dispatch_async(v13, v16);
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_55(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_53(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

- (BOOL)_overrideStartThreadTimeout
{
  return 0;
}

- (void)_retrievePreferredNetworkWithCompletion:(id)a3
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v26 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to resolve request for Thread Network Credentials", buf, 0xCu);
  }
  id v9 = +[HMDThreadNetworkMetadataStore defaultStore];
  if (v9)
  {
    if ([(HMDHome *)v6 isOwnerUser])
    {
      objc_initWeak((id *)buf, v6);
      int v10 = [(HMDHome *)v6 threadOperationalDataset];
      v22[0] = MEMORY[0x263EF8330];
      v22[1] = 3221225472;
      v22[2] = __80__HMDHome_ThreadResidentCommissioning___retrievePreferredNetworkWithCompletion___block_invoke;
      void v22[3] = &unk_264A21820;
      objc_copyWeak(&v24, (id *)buf);
      id v23 = v4;
      [v9 retrievePreferredNetwork:v10 completion:v22];

      objc_destroyWeak(&v24);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      id v16 = (void *)MEMORY[0x230FBD990]();
      id v17 = v6;
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        id v19 = HMFGetLogIdentifier();
        long long v20 = [(HMDHome *)v17 threadOperationalDataset];
        __int16 v21 = [(HMDHome *)v17 home];
        *(_DWORD *)buf = 138543874;
        id v26 = v19;
        __int16 v27 = 2112;
        uint64_t v28 = v20;
        __int16 v29 = 2112;
        id v30 = v21;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Shared user -  always use cached threadOperationalDataset %@ for home %@", buf, 0x20u);
      }
      (*((void (**)(id, void))v4 + 2))(v4, 0);
    }
  }
  else
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    __int16 v12 = v6;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v26 = v14;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@No thread network metadata store", buf, 0xCu);
    }
    id v15 = [MEMORY[0x263F087E8] hmErrorWithCode:58];
    (*((void (**)(id, void *))v4 + 2))(v4, v15);
  }
}

void __80__HMDHome_ThreadResidentCommissioning___retrievePreferredNetworkWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v14 = (void *)MEMORY[0x230FBD990]();
  id v15 = WeakRetained;
  if (!v12 && v9 && WeakRetained)
  {
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      id v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138544130;
      __int16 v33 = v17;
      __int16 v34 = 2112;
      id v35 = v9;
      __int16 v36 = 2112;
      id v37 = v10;
      __int16 v38 = 2112;
      id v39 = v11;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Successfully retrieved preferred thread credentials %@ with UUID %@ and operationalDataset %@ from network metadata store", buf, 0x2Au);
    }
    if (v11)
    {
      id v18 = (void *)[v11 copy];
      [v15 saveAndSyncWithThreadOperationalDataset:v18];

      id v19 = (void *)MEMORY[0x230FBD990]();
      id v20 = v15;
      __int16 v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v22 = v30 = v9;
        [v20 threadOperationalDataset];
        v23 = id v29 = v10;
        [v20 home];
        id v24 = v31 = v19;
        *(_DWORD *)buf = 138543874;
        __int16 v33 = v22;
        __int16 v34 = 2112;
        id v35 = v23;
        __int16 v36 = 2112;
        id v37 = v24;
        _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@threadOperationalDataset set to %@ for home %@", buf, 0x20u);

        id v19 = v31;
        id v10 = v29;

        id v9 = v30;
      }
    }
    if (v10)
    {
      uint64_t v25 = (void *)[v10 copy];
      [v15 setThreadNetworkID:v25];
    }
    id v26 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    __int16 v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v33 = v28;
      __int16 v34 = 2112;
      id v35 = v12;
      _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve metadata for thread network: %@", buf, 0x16u);
    }
    id v26 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v26();
}

- (void)_startThreadNetworkOnCommissionerForIOSWithOperationalDataset:(id)a3 completion:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v8);

  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke;
  aBlock[3] = &unk_264A27A68;
  void aBlock[4] = self;
  id v9 = v6;
  id v19 = v9;
  id v10 = v7;
  id v20 = v10;
  id v11 = _Block_copy(aBlock);
  id v12 = [(HMDHome *)self homeManager];
  uint64_t v13 = [v12 chipDataSource];

  if (v13)
  {
    id v14 = [(HMDHome *)self home];
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 3221225472;
    void v16[2] = __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_2;
    v16[3] = &unk_264A17C90;
    id v17 = v11;
    [v13 hasValidGeoOrPreferredNetworkForHome:v14 completion:v16];

    id v15 = v17;
  }
  else
  {
    id v15 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    (*((void (**)(void *, void, void *))v11 + 2))(v11, 0, v15);
  }
}

void __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    id v10 = [*(id *)(a1 + 32) threadNetworkID];
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = HMFBooleanToString();
    *(_DWORD *)buf = 138544386;
    id v22 = v9;
    __int16 v23 = 2112;
    id v24 = v10;
    __int16 v25 = 2112;
    uint64_t v26 = v11;
    __int16 v27 = 2112;
    uint64_t v28 = v12;
    __int16 v29 = 2112;
    id v30 = v5;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Start thread network with uuid: %@, credentials: %@, geoAvailable: %@, error %@", buf, 0x34u);
  }
  uint64_t v13 = +[HMDThreadResidentCommissioner sharedCommissioner];
  [v13 setGeoAvailable:a2];
  [*(id *)(a1 + 32) _registerForThreadNetworkEvents];
  uint64_t v14 = *(void *)(a1 + 40);
  id v15 = [*(id *)(a1 + 32) threadNetworkID];
  uint64_t v16 = [*(id *)(a1 + 32) isOwnerUser];
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  void v18[2] = __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_48;
  v18[3] = &unk_264A2E788;
  id v17 = *(void **)(a1 + 40);
  void v18[4] = *(void *)(a1 + 32);
  id v19 = v17;
  id v20 = *(id *)(a1 + 48);
  [v13 startThreadNetworkWithOperationalDataset:v14 threadNetworkID:v15 isOwnerUser:v16 completion:v18];
}

uint64_t __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_48(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = HMFGetLogIdentifier();
      uint64_t v8 = [*(id *)(a1 + 32) threadNetworkID];
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138544130;
      id v17 = v7;
      __int16 v18 = 2112;
      id v19 = v8;
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      __int16 v22 = 2112;
      id v23 = v3;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to attach to thread network %@ with operational data set%@: %@", buf, 0x2Au);
    }
  }
  id v10 = [*(id *)(a1 + 32) workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_49;
  block[3] = &unk_264A2EE80;
  void block[4] = *(void *)(a1 + 32);
  id v11 = *(id *)(a1 + 48);
  id v14 = v3;
  id v15 = v11;
  id v12 = v3;
  dispatch_async(v10, block);
}

uint64_t __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_49(uint64_t a1)
{
  [*(id *)(a1 + 32) setStartThreadNetworkInProgress:0];
  [*(id *)(a1 + 32) _scheduleThreadNetworkUpdate];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

- (void)_startThreadNetworkOnCommissionerWithCompletion:(id)a3
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  uint64_t v17 = 0;
  __int16 v18 = &v17;
  uint64_t v19 = 0x3032000000;
  __int16 v20 = __Block_byref_object_copy__21247;
  uint64_t v21 = __Block_byref_object_dispose__21248;
  id v22 = [(HMDHome *)self threadNetworkID];
  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  HMFGetOSLogHandle();
  uint64_t v8 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    uint64_t v10 = v18[5];
    *(_DWORD *)buf = 138543618;
    uint64_t v24 = v9;
    __int16 v25 = 2112;
    uint64_t v26 = v10;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Start thread network: %@", buf, 0x16u);
  }
  id v11 = +[HMDThreadResidentCommissioner sharedCommissioner];
  uint64_t v12 = v18[5];
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  void v14[2] = __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke;
  v14[3] = &unk_264A17C68;
  void v14[4] = v7;
  id v13 = v4;
  id v15 = v13;
  uint64_t v16 = &v17;
  [v11 startThreadNetworkWithID:v12 completion:v14];

  _Block_object_dispose(&v17, 8);
}

void __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    if (v7 && ![v7 isEqualToString:v5])
    {
      uint64_t v8 = (void *)MEMORY[0x230FBD990]();
      id v9 = *(id *)(a1 + 32);
      uint64_t v10 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_12;
      }
      id v11 = HMFGetLogIdentifier();
      uint64_t v24 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138543874;
      id v32 = v11;
      __int16 v33 = 2112;
      id v34 = v5;
      __int16 v35 = 2112;
      id v36 = v24;
      uint64_t v12 = "%{public}@Attached to thread network %@, but expected to attach to %@";
      id v13 = v10;
      os_log_type_t v14 = OS_LOG_TYPE_ERROR;
      uint32_t v15 = 32;
    }
    else
    {
      uint64_t v8 = (void *)MEMORY[0x230FBD990]();
      id v9 = *(id *)(a1 + 32);
      uint64_t v10 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_12;
      }
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v32 = v11;
      __int16 v33 = 2112;
      id v34 = v5;
      uint64_t v12 = "%{public}@Attached to thread network %@";
      id v13 = v10;
      os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
      uint32_t v15 = 22;
    }
    _os_log_impl(&dword_22F52A000, v13, v14, v12, buf, v15);

LABEL_12:
    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) || (objc_msgSend(v5, "isEqualToString:") & 1) == 0) {
      [*(id *)(a1 + 32) setThreadNetworkID:v5];
    }
    id v23 = [*(id *)(a1 + 32) workQueue];
    v26[0] = MEMORY[0x263EF8330];
    v26[1] = 3221225472;
    void v26[2] = __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_46;
    v26[3] = &unk_264A2F870;
    __int16 v25 = *(void **)(a1 + 40);
    void v26[4] = *(void *)(a1 + 32);
    id v22 = &v27;
    id v27 = v25;
    dispatch_async(v23, v26);
    goto LABEL_16;
  }
  uint64_t v16 = (void *)MEMORY[0x230FBD990]();
  id v17 = *(id *)(a1 + 32);
  __int16 v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    uint64_t v19 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    id v32 = v19;
    __int16 v33 = 2112;
    id v34 = 0;
    __int16 v35 = 2112;
    id v36 = v6;
    _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to attach to thread network %@: %@", buf, 0x20u);
  }
  __int16 v20 = [*(id *)(a1 + 32) workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_45;
  block[3] = &unk_264A2EE80;
  uint64_t v21 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v22 = &v30;
  id v30 = v21;
  __int16 v29 = v6;
  dispatch_async(v20, block);

  id v23 = v29;
LABEL_16:
}

uint64_t __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_45(uint64_t a1)
{
  [*(id *)(a1 + 32) setStartThreadNetworkInProgress:0];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

uint64_t __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_46(uint64_t a1)
{
  [*(id *)(a1 + 32) setStartThreadNetworkInProgress:0];
  [*(id *)(a1 + 32) _scheduleThreadNetworkUpdate];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

- (void)_retryStartThreadNetwork:(double)a3
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  double v6 = fabs(a3);
  double v7 = 30.0;
  if (a3 > 0.0)
  {
    double v8 = fmin(a3 + a3, 1800.0);
    if (v6 < 2.22044605e-16) {
      double v7 = 30.0;
    }
    else {
      double v7 = v8;
    }
  }
  id v9 = [(HMDHome *)self threadNetworkSequenceNumber];
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke;
  aBlock[3] = &unk_264A17C40;
  objc_copyWeak(v20, &location);
  v20[1] = *(id *)&a3;
  id v20[2] = v9;
  void v20[3] = *(id *)&v7;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = v10;
  if (v6 < 2.22044605e-16 || a3 <= 0.0)
  {
    (*((void (**)(void *))v10 + 2))(v10);
  }
  else
  {
    id v13 = (void *)MEMORY[0x230FBD990]();
    os_log_type_t v14 = self;
    HMFGetOSLogHandle();
    uint32_t v15 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v23 = v16;
      __int16 v24 = 2048;
      unint64_t v25 = (unint64_t)a3;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Next resident commissioning attempt will happen in %lu seconds", buf, 0x16u);
    }
    dispatch_time_t v17 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
    __int16 v18 = [(HMDHome *)v14 workQueue];
    dispatch_after(v17, v18, v11);
  }
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
}

void __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
  {
    uint64_t v14 = MEMORY[0x230FBD990]();
    uint32_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      unint64_t v25 = v16;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Home has died, resident commissioning canceled", buf, 0xCu);
    }
    dispatch_time_t v17 = (void *)v14;
    goto LABEL_17;
  }
  double v5 = *(double *)(a1 + 40);
  v4.n128_f64[0] = fabs(v5);
  BOOL v6 = v5 <= 0.0;
  v3.n128_u64[0] = 0x3CB0000000000000;
  if (!v6 && v4.n128_f64[0] >= 2.22044605e-16)
  {
    double v8 = (void *)MEMORY[0x230FBD990](v3, v4);
    id v9 = WeakRetained;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      unint64_t v25 = v11;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Resident commissioning timer expired", buf, 0xCu);
    }
  }
  uint64_t v12 = [WeakRetained threadNetworkSequenceNumber];
  uint64_t v13 = v12;
  if (v12 != *(void *)(a1 + 48))
  {
    uint64_t v18 = MEMORY[0x230FBD990]();
    id v19 = WeakRetained;
    __int16 v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = HMFGetLogIdentifier();
      uint64_t v22 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      unint64_t v25 = v21;
      __int16 v26 = 2048;
      uint64_t v27 = v22;
      __int16 v28 = 2048;
      uint64_t v29 = v13;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Resident commissioning sequence number no longer matches: %lu != %lu", buf, 0x20u);
    }
    dispatch_time_t v17 = (void *)v18;
LABEL_17:
    goto LABEL_18;
  }
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  void v23[2] = __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke_43;
  void v23[3] = &unk_264A17C18;
  void v23[4] = WeakRetained;
  void v23[5] = v12;
  v23[6] = *(void *)(a1 + 56);
  [WeakRetained _startThreadNetworkWithCompletion:v23];
LABEL_18:
}

void __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke_43(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = a2;
  __n128 v4 = v3;
  if (v3)
  {
    double v5 = [v3 domain];
    if ([v5 isEqualToString:*MEMORY[0x263F0C710]])
    {
      if ([v4 code] == 48)
      {

        goto LABEL_12;
      }
      uint64_t v13 = [v4 code];

      if (v13 == 23) {
        goto LABEL_12;
      }
    }
    else
    {
    }
    uint64_t v6 = [*(id *)(a1 + 32) threadNetworkSequenceNumber];
    if (v6 == *(void *)(a1 + 40))
    {
      [*(id *)(a1 + 32) _retryStartThreadNetwork:*(double *)(a1 + 48)];
    }
    else
    {
      uint64_t v7 = v6;
      double v8 = (void *)MEMORY[0x230FBD990]();
      id v9 = *(id *)(a1 + 32);
      uint64_t v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        uint64_t v12 = *(void *)(a1 + 40);
        int v14 = 138543874;
        uint32_t v15 = v11;
        __int16 v16 = 2048;
        uint64_t v17 = v12;
        __int16 v18 = 2048;
        uint64_t v19 = v7;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Resident commissioning sequence number no longer matches: %lu != %lu", (uint8_t *)&v14, 0x20u);
      }
    }
  }
LABEL_12:
}

- (void)_incrementCurrentSequenceNumber
{
  id v3 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v3);

  unint64_t v4 = [(HMDHome *)self threadNetworkSequenceNumber];
  [(HMDHome *)self setThreadNetworkSequenceNumber:v4 + 1];
  if (v4 == -1)
  {
    unint64_t v5 = [(HMDHome *)self threadNetworkSequenceNumber] + 1;
    [(HMDHome *)self setThreadNetworkSequenceNumber:v5];
  }
}

- (void)startThreadNetwork:(BOOL)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities],
        unint64_t v5 = objc_claimAutoreleasedReturnValue(),
        char v6 = [v5 supportsThreadService],
        v5,
        (v6 & 1) != 0))
  {
    uint64_t v7 = (void *)MEMORY[0x230FBD990]();
    double v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v19 = v10;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Starting resident commissioning timer", buf, 0xCu);
    }
    id v11 = [(HMDHome *)v8 workQueue];
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 3221225472;
    void v16[2] = __59__HMDHome_ThreadResidentCommissioning__startThreadNetwork___block_invoke;
    v16[3] = &unk_264A2B870;
    void v16[4] = v8;
    BOOL v17 = a3;
    dispatch_async(v11, v16);
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x230FBD990]();
    uint64_t v13 = self;
    int v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint32_t v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v19 = v15;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Thread commissioning is not supported on this platform", buf, 0xCu);
    }
  }
}

void __59__HMDHome_ThreadResidentCommissioning__startThreadNetwork___block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) homeManager];
  if ([v2 isStartThreadNetworkInProgress])
  {
    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = *(id *)(a1 + 32);
    unint64_t v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      char v6 = HMFGetLogIdentifier();
      int v10 = 138543362;
      id v11 = v6;
      uint64_t v7 = "%{public}@Not starting thread network, start already in progress for another network";
LABEL_4:
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v10, 0xCu);
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 40)
      || ([*(id *)(a1 + 32) threadNetworkID],
          double v8 = objc_claimAutoreleasedReturnValue(),
          char v9 = [v2 isCurrentResidentDeviceRunningThreadNetwork:v8],
          v8,
          (v9 & 1) != 0))
    {
      [*(id *)(a1 + 32) _incrementCurrentSequenceNumber];
      [*(id *)(a1 + 32) _retryStartThreadNetwork:0.0];
      goto LABEL_9;
    }
    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = *(id *)(a1 + 32);
    unint64_t v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      char v6 = HMFGetLogIdentifier();
      int v10 = 138543362;
      id v11 = v6;
      uint64_t v7 = "%{public}@Not starting thread network, not associated with thread network homes";
      goto LABEL_4;
    }
  }

LABEL_9:
}

- (void)_handleUnjoinThreadNetworkMessage:(id)a3
{
  id v4 = a3;
  unint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke(uint64_t a1)
{
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 3221225472;
  v2[2] = __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke_2;
  v2[3] = &unk_264A2F3E8;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 _unjoinThreadNetworkWithCompletion:v2];
}

uint64_t __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)_handleJoinOrFormThreadNetworkMessage:(id)a3
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = _os_feature_enabled_impl();
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled())
  {
    id v6 = +[HMDDeviceCapabilities deviceCapabilities];
    int v7 = [v6 supportsThreadService];

    if (((v7 | v5) & 1) == 0)
    {
LABEL_3:
      id v8 = (void *)MEMORY[0x230FBD990]();
      char v9 = self;
      int v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v23 = v11;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Resident commissioning is disabled", buf, 0xCu);
      }
      id v12 = [MEMORY[0x263F087E8] hmfErrorWithCode:5];
      [v4 respondWithPayload:0 error:v12];
      goto LABEL_13;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  id v13 = [v4 messagePayload];

  if (v13)
  {
    int v14 = [v4 messagePayload];
    uint32_t v15 = [v14 objectForKey:*MEMORY[0x263F0CEA8]];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      __int16 v16 = v15;
    }
    else {
      __int16 v16 = 0;
    }
    id v13 = v16;
  }
  BOOL v17 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke;
  block[3] = &unk_264A2F2F8;
  id v19 = v13;
  uint64_t v20 = self;
  id v21 = v4;
  id v12 = v13;
  dispatch_async(v17, block);

LABEL_13:
}

void __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 32))
  {
    id v2 = (void *)MEMORY[0x230FBD990]();
    id v3 = *(id *)(a1 + 40);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = HMFGetLogIdentifier();
      id v6 = [*(id *)(a1 + 40) threadNetworkID];
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      id v12 = v5;
      __int16 v13 = 2112;
      int v14 = v6;
      __int16 v15 = 2112;
      uint64_t v16 = v7;
      _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Updating thread network %@ -> %@ and starting", buf, 0x20u);
    }
    [*(id *)(a1 + 40) setThreadNetworkID:*(void *)(a1 + 32)];
  }
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke_41;
  void v9[3] = &unk_264A2F3E8;
  id v8 = *(void **)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  [v8 _startThreadNetworkWithCompletion:v9];
}

uint64_t __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke_41(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)_handleThreadNetworkCredentialsRequest:(id)a3
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    unint64_t v25 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to resolve request for Thread Network Credentials", buf, 0xCu);
  }
  char v9 = +[HMDThreadNetworkMetadataStore defaultStore];
  if (v9)
  {
    objc_initWeak((id *)buf, v6);
    uint64_t v18 = MEMORY[0x263EF8330];
    uint64_t v19 = 3221225472;
    uint64_t v20 = __79__HMDHome_ThreadResidentCommissioning___handleThreadNetworkCredentialsRequest___block_invoke;
    id v21 = &unk_264A19A18;
    objc_copyWeak(&v23, (id *)buf);
    id v22 = v4;
    id v10 = _Block_copy(&v18);
    id v11 = [(HMDHome *)v6 threadOperationalDataset];
    id v12 = [(HMDHome *)v6 home];
    objc_msgSend(v9, "retrieveMetadata:homeHasResident:completion:", v11, objc_msgSend(v12, "doesHomeContainResident"), v10);

    objc_destroyWeak(&v23);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    __int16 v13 = (void *)MEMORY[0x230FBD990]();
    int v14 = v6;
    __int16 v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      unint64_t v25 = v16;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@No thread network metadata store", buf, 0xCu);
    }
    uint64_t v17 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
    [v4 respondWithError:v17];
  }
}

void __79__HMDHome_ThreadResidentCommissioning___handleThreadNetworkCredentialsRequest___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = WeakRetained;
  if (v5 && WeakRetained)
  {
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v27 = v11;
      __int16 v28 = 2112;
      id v29 = v5;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Successfully retrieved thread credentials %@ from network metadata store", buf, 0x16u);
    }
    id v25 = 0;
    id v12 = [MEMORY[0x263F08910] archivedDataWithRootObject:v5 requiringSecureCoding:1 error:&v25];
    id v13 = v25;
    if (v12)
    {
      int v14 = [MEMORY[0x263EFF9A0] dictionary];
      [v14 setObject:v12 forKeyedSubscript:*MEMORY[0x263F0CEA0]];
      __int16 v15 = [v5 masterKey];
      [v14 setObject:v15 forKeyedSubscript:@"HMHomeThreadNetworkCredentialsMasterKeyMessageKey"];

      [*(id *)(a1 + 32) respondWithPayload:v14];
    }
    else
    {
      uint64_t v20 = (void *)MEMORY[0x230FBD990]();
      id v21 = v9;
      id v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        id v23 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v27 = v23;
        __int16 v28 = 2112;
        id v29 = v13;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode credentials: %@", buf, 0x16u);
      }
      uint64_t v24 = *(void **)(a1 + 32);
      int v14 = [MEMORY[0x263F087E8] hmfErrorWithCode:15];
      [v24 respondWithError:v14];
    }
  }
  else
  {
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      uint64_t v18 = [v9 threadNetworkID];
      *(_DWORD *)buf = 138543874;
      uint64_t v27 = v17;
      __int16 v28 = 2112;
      id v29 = v18;
      __int16 v30 = 2112;
      id v31 = v6;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve metadata for thread network '%@': %@", buf, 0x20u);
    }
    uint64_t v19 = *(void **)(a1 + 32);
    id v13 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
    [v19 respondWithError:v13];
  }
}

- (void)handleCurrentWiFiNetworkChangedNotification:(id)a3
{
  id v4 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __84__HMDHome_ThreadResidentCommissioning__handleCurrentWiFiNetworkChangedNotification___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v4, block);
}

void __84__HMDHome_ThreadResidentCommissioning__handleCurrentWiFiNetworkChangedNotification___block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = [*(id *)(a1 + 32) threadNetworkShouldRestartOnNetworkChange];
  id v3 = (void *)MEMORY[0x230FBD990]();
  id v4 = *(id *)(a1 + 32);
  id v5 = HMFGetOSLogHandle();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v6)
    {
      uint64_t v7 = HMFGetLogIdentifier();
      int v9 = 138543362;
      id v10 = v7;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Restarting Thread network upon WiFi network changed notification", (uint8_t *)&v9, 0xCu);
    }
    [*(id *)(a1 + 32) startThreadNetwork:1];
  }
  else
  {
    if (v6)
    {
      id v8 = HMFGetLogIdentifier();
      int v9 = 138543362;
      id v10 = v8;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Ignoring WiFi network changed notification when Thread is not up", (uint8_t *)&v9, 0xCu);
    }
  }
}

- (void)_registerThreadResidentCommissioningMessageHandlers
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = self;
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      BOOL v6 = HMFGetLogIdentifier();
      int v8 = 138543362;
      int v9 = v6;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for HMFWiFiManagerCurrentNetworkDidChangeNotification", (uint8_t *)&v8, 0xCu);
    }
    uint64_t v7 = [MEMORY[0x263F08A00] defaultCenter];
    [v7 addObserver:v4 selector:sel_handleCurrentWiFiNetworkChangedNotification_ name:*MEMORY[0x263F424E8] object:0];
  }
}

- (BOOL)isCurrentDeviceThreadPreferredPrimaryResident
{
  int v2 = +[HMDDeviceCapabilities deviceCapabilities];
  char v3 = [v2 supportsThreadBorderRouter];

  return v3;
}

- (void)setThreadNetworkID:(id)a3
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v5 = a3;
  uint64_t v6 = [(HMDHome *)self threadNetworkID];
  if (v6
    && (uint64_t v7 = (void *)v6,
        char v8 = [v5 isEqualToString:@"770E5B2E-0BAD-0BAD-0BAD-EE86505EFF8F"],
        v7,
        (v8 & 1) == 0))
  {
    int v14 = (void *)MEMORY[0x230FBD990]();
    __int16 v15 = self;
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      uint64_t v18 = [(HMDHome *)v15 unfilteredThreadNetworkID];
      int v19 = 138543874;
      uint64_t v20 = v17;
      __int16 v21 = 2112;
      id v22 = v5;
      __int16 v23 = 2112;
      uint64_t v24 = v18;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to set threadNetworkID to %@. (current value=%@)", (uint8_t *)&v19, 0x20u);
    }
  }
  else if ([(HMDHome *)self attemptToUpdateThreadNetworkID:v5])
  {
    int v9 = +[HMDHomeThreadNetworkModel defaultModelForHome:self];
    [v9 setThreadNetworkID:v5];
    uint64_t v10 = [(HMDHome *)self backingStore];
    uint64_t v11 = NSStringFromSelector(a2);
    id v12 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v13 = [v10 transaction:v11 options:v12];

    [v13 add:v9 withMessage:0];
    [v13 run];
  }
}

- (NSString)threadNetworkID
{
  int v2 = [(HMDHome *)self unfilteredThreadNetworkID];
  if ([v2 isEqualToString:@"770E5B2E-0BAD-0BAD-0BAD-EE86505EFF8F"]) {
    id v3 = 0;
  }
  else {
    id v3 = v2;
  }

  return (NSString *)v3;
}

- (void)_unregisterForThreadNetworkEvents
{
  objc_initWeak(&location, self);
  id v3 = [(HMDHome *)self workQueue];
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  v4[2] = __73__HMDHome_ThreadResidentCommissioning___unregisterForThreadNetworkEvents__block_invoke;
  void v4[3] = &unk_264A2C170;
  objc_copyWeak(&v5, &location);
  dispatch_async(v3, v4);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void __73__HMDHome_ThreadResidentCommissioning___unregisterForThreadNetworkEvents__block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v2 = WeakRetained;
  if (WeakRetained
    && ([WeakRetained threadNetworkPeriodicStatusReporter],
        id v3 = objc_claimAutoreleasedReturnValue(),
        v3,
        v3))
  {
    id v4 = [v2 threadNetworkPeriodicStatusReporter];
    [v4 unregisterForThreadNetworkEvents];

    [v2 setThreadNetworkPeriodicStatusReporter:0];
  }
  else
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = v2;
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      char v8 = HMFGetLogIdentifier();
      int v9 = 138543362;
      uint64_t v10 = v8;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@_unregisterForThreadNetworkEvents already unregistered", (uint8_t *)&v9, 0xCu);
    }
  }
}

- (void)_registerForThreadNetworkEvents
{
  objc_initWeak(&location, self);
  id v3 = [(HMDHome *)self workQueue];
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  v4[2] = __71__HMDHome_ThreadResidentCommissioning___registerForThreadNetworkEvents__block_invoke;
  void v4[3] = &unk_264A2C170;
  objc_copyWeak(&v5, &location);
  dispatch_async(v3, v4);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void __71__HMDHome_ThreadResidentCommissioning___registerForThreadNetworkEvents__block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = [WeakRetained threadNetworkPeriodicStatusReporter];

    if (!v3)
    {
      id v4 = [[HMDThreadNetworkStatusReporter alloc] initWithHome:v2];
      [v2 setThreadNetworkPeriodicStatusReporter:v4];
    }
    id v5 = [v2 threadNetworkPeriodicStatusReporter];
    [v5 registerForThreadNetworkEvents];
  }
  else
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      char v8 = HMFGetLogIdentifier();
      int v9 = 138543362;
      uint64_t v10 = v8;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@_registerForThreadNetworkEvents could not get a strong reference to self", (uint8_t *)&v9, 0xCu);
    }
  }
}

- (BOOL)isCurrentDeviceThreadBorderRouterCapable
{
  int v2 = +[HMDDeviceCapabilities deviceCapabilities];
  char v3 = [v2 supportsThreadBorderRouter];

  return v3;
}

- (BOOL)isThreadNetworkUp
{
  [(HMDHome *)self _scheduleThreadNetworkUpdate];
  return [(HMDHome *)self threadNetworkIsUp];
}

- (BOOL)isThreadCapable
{
  char v3 = [(HMDHome *)self threadNetworkID];

  if (v3) {
    return 1;
  }
  [(HMDHome *)self _scheduleThreadNetworkUpdate];
  return [(HMDHome *)self threadPreferredNetworkExists];
}

- (id)dumpBulletinNotificationRegistrationsState
{
  char v3 = [MEMORY[0x263EFF9A0] dictionary];
  id v4 = [(HMDHome *)self accessoryBulletinNotificationManager];
  id v5 = [v4 serviceRegistrationsForCurrentDevice];

  if (v5)
  {
    id v6 = [v5 description];
    [v3 setObject:v6 forKeyedSubscript:@"Service Registrations (Local)"];
  }
  uint64_t v7 = [(HMDHome *)self accessoryBulletinNotificationManager];
  char v8 = [v7 accessoryRegistrationsForCurrentDevice];

  if (v8)
  {
    int v9 = [v8 description];
    [v3 setObject:v9 forKeyedSubscript:@"Accessory Characteristic Registrations (Local)"];
  }
  uint64_t v10 = [(HMDHome *)self accessoryBulletinNotificationManager];
  uint64_t v11 = [v10 accessoryRegistrations];

  if (v11)
  {
    id v12 = [v11 description];
    [v3 setObject:v12 forKeyedSubscript:@"Accessory Characteristic Registrations"];
  }
  id v13 = [(HMDHome *)self cameraBulletinNotificationManager];
  int v14 = [v13 cameraSignificantEventRegistrationsForCurrentDevice];

  if (v14)
  {
    __int16 v15 = [v14 description];
    [v3 setObject:v15 forKeyedSubscript:@"Camera Significant Event Registrations (Local)"];
  }
  uint64_t v16 = [(HMDHome *)self cameraBulletinNotificationManager];
  uint64_t v17 = [v16 cameraSignificantEventRegistrations];

  if (v17)
  {
    uint64_t v18 = [v17 description];
    [v3 setObject:v18 forKeyedSubscript:@"Camera Significant Event Registrations"];
  }
  int v19 = [(HMDHome *)self cameraBulletinNotificationManager];
  uint64_t v20 = [v19 cameraReachabilityRegistrationsForCurrentDevice];

  if (v20)
  {
    __int16 v21 = [v20 description];
    [v3 setObject:v21 forKeyedSubscript:@"Camera Reachability Registrations (Local)"];
  }
  __int16 v38 = v8;
  id v22 = [(HMDHome *)self cameraBulletinNotificationManager];
  __int16 v23 = [v22 cameraReachabilityRegistrations];

  if (v23)
  {
    uint64_t v24 = [v23 description];
    [v3 setObject:v24 forKeyedSubscript:@"Camera Reachability Registrations"];
  }
  uint64_t v25 = v5;
  uint64_t v26 = [(HMDHome *)self cameraBulletinNotificationManager];
  uint64_t v27 = [v26 cameraAccessModeRegistrationsForCurrentDevice];

  if (v27)
  {
    __int16 v28 = [v27 description];
    [v3 setObject:v28 forKeyedSubscript:@"Camera Access Mode Registrations (Local)"];
  }
  id v29 = [(HMDHome *)self cameraBulletinNotificationManager];
  __int16 v30 = [v29 cameraAccessModeRegistrations];

  if (v30)
  {
    id v31 = [v30 description];
    [v3 setObject:v31 forKeyedSubscript:@"Camera Access Mode Registrations"];
  }
  uint64_t v32 = [(HMDHome *)self audioAnalysisBulletinNotificationManager];
  __int16 v33 = [v32 registrations];

  if (v33)
  {
    id v34 = [v33 description];
    [v3 setObject:v34 forKeyedSubscript:@"Audio Analysis Registrations"];
  }
  __int16 v35 = (void *)[v3 copy];

  return v35;
}

- (BOOL)insertOrUpdateCameraAccessModeBulletinRegistration:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 user:(id)a7 context:(id)a8
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  if (v16
    || (char v32 = 0,
        [MEMORY[0x263F08C38] UUID],
        uint64_t v20 = objc_claimAutoreleasedReturnValue(),
        [v18 materializeOrCreateBulletinRegistrationsRelationOfTypeCameraAccessModeBulletinRegistrationWithModelID:v20 createdNew:&v32], id v16 = (id)objc_claimAutoreleasedReturnValue(), v20, v32))
  {
    __int16 v21 = [v15 deviceAddress];
    id v22 = [v21 idsIdentifier];
    [v16 setDeviceIdsIdentifier:v22];

    __int16 v23 = [v15 deviceAddress];
    uint64_t v24 = [v23 idsDestination];
    [v16 setDeviceIdsDestination:v24];

    [v16 setAccessory:v17];
    uint64_t v25 = [v14 conditions];
    BOOL v26 = [(HMDHome *)self addBulletinConditions:v25 on:v16 context:v19];
  }
  else
  {
    __int16 v28 = (void *)MEMORY[0x230FBD990]();
    id v29 = self;
    __int16 v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      id v31 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      id v34 = v31;
      __int16 v35 = 2112;
      id v36 = v18;
      __int16 v37 = 2112;
      id v38 = v14;
      _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Unable to create or materialize camera reachability bulletin registration on user: %@, registration: %@", buf, 0x20u);
    }
    BOOL v26 = 0;
  }

  return v26;
}

- (BOOL)insertOrUpdateAudioAnalysisEventBulletinRegistrations:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 user:(id)a7 context:(id)a8
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  if (v16
    || (char v33 = 0,
        [MEMORY[0x263F08C38] UUID],
        uint64_t v20 = objc_claimAutoreleasedReturnValue(),
        [v18 materializeOrCreateBulletinRegistrationsRelationOfTypeAnalysisEventBulletinRegistrationWithModelID:v20 createdNew:&v33], id v16 = (id)objc_claimAutoreleasedReturnValue(), v20, v33))
  {
    __int16 v21 = [v15 deviceAddress];
    id v22 = [v21 idsIdentifier];
    [v16 setDeviceIdsIdentifier:v22];

    __int16 v23 = [v15 deviceAddress];
    uint64_t v24 = [v23 idsDestination];
    [v16 setDeviceIdsDestination:v24];

    [v16 setAccessory:v17];
    uint64_t v25 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v14, "audioAnalysisClassifierOptions"));
    [v16 setClassifierOptions:v25];

    BOOL v26 = [v14 conditions];
    BOOL v27 = [(HMDHome *)self addBulletinConditions:v26 on:v16 context:v19];
  }
  else
  {
    id v29 = (void *)MEMORY[0x230FBD990]();
    __int16 v30 = self;
    id v31 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      char v32 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      __int16 v35 = v32;
      __int16 v36 = 2112;
      id v37 = v18;
      __int16 v38 = 2112;
      id v39 = v14;
      _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_ERROR, "%{public}@Unable to create or materialize audio analysis reachability bulletin registration on user: %@, registration: %@", buf, 0x20u);
    }
    BOOL v27 = 0;
  }

  return v27;
}

- (BOOL)insertOrUpdateCameraReachabilityBulletinRegistration:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 user:(id)a7 context:(id)a8
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  if (v16
    || (char v32 = 0,
        [MEMORY[0x263F08C38] UUID],
        uint64_t v20 = objc_claimAutoreleasedReturnValue(),
        [v18 materializeOrCreateBulletinRegistrationsRelationOfTypeCameraReachabilityBulletinRegistrationWithModelID:v20 createdNew:&v32], id v16 = (id)objc_claimAutoreleasedReturnValue(), v20, v32))
  {
    __int16 v21 = [v15 deviceAddress];
    id v22 = [v21 idsIdentifier];
    [v16 setDeviceIdsIdentifier:v22];

    __int16 v23 = [v15 deviceAddress];
    uint64_t v24 = [v23 idsDestination];
    [v16 setDeviceIdsDestination:v24];

    [v16 setAccessory:v17];
    uint64_t v25 = [v14 conditions];
    BOOL v26 = [(HMDHome *)self addBulletinConditions:v25 on:v16 context:v19];
  }
  else
  {
    __int16 v28 = (void *)MEMORY[0x230FBD990]();
    id v29 = self;
    __int16 v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      id v31 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      id v34 = v31;
      __int16 v35 = 2112;
      id v36 = v18;
      __int16 v37 = 2112;
      id v38 = v14;
      _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Unable to create or materialize camera reachability bulletin registration on user: %@, registration: %@", buf, 0x20u);
    }
    BOOL v26 = 0;
  }

  return v26;
}

- (BOOL)insertOrUpdateCameraSignificantEventBulletinRegistration:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 user:(id)a7 context:(id)a8
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  if (v16
    || (char v35 = 0,
        [MEMORY[0x263F08C38] UUID],
        uint64_t v20 = objc_claimAutoreleasedReturnValue(),
        [v18 materializeOrCreateBulletinRegistrationsRelationOfTypeCameraSignificantEventBulletinRegistrationWithModelID:v20 createdNew:&v35], id v16 = (id)objc_claimAutoreleasedReturnValue(), v20, v35))
  {
    __int16 v21 = [v15 deviceAddress];
    id v22 = [v21 idsIdentifier];
    [v16 setDeviceIdsIdentifier:v22];

    __int16 v23 = [v15 deviceAddress];
    uint64_t v24 = [v23 idsDestination];
    [v16 setDeviceIdsDestination:v24];

    [v16 setAccessory:v17];
    uint64_t v25 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v14, "notificationModes"));
    [v16 setNotificationModes:v25];

    BOOL v26 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v14, "significantEventTypes"));
    [v16 setSignificantEventTypes:v26];

    BOOL v27 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v14, "personFamiliarityOptions"));
    [v16 setPersonFamiliarityOptions:v27];

    __int16 v28 = [v14 conditions];
    BOOL v29 = [(HMDHome *)self addBulletinConditions:v28 on:v16 context:v19];
  }
  else
  {
    id v31 = (void *)MEMORY[0x230FBD990]();
    char v32 = self;
    char v33 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      id v34 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      __int16 v37 = v34;
      __int16 v38 = 2112;
      id v39 = v18;
      __int16 v40 = 2112;
      id v41 = v14;
      _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_ERROR, "%{public}@Unable to create or materialize camera significant event bulletin registration on user: %@, registration: %@", buf, 0x20u);
    }
    BOOL v29 = 0;
  }

  return v29;
}

- (BOOL)addPresenceBulletinCondition:(id)a3 on:(id)a4 context:(id)a5
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  char v27 = 0;
  uint64_t v11 = [MEMORY[0x263F08C38] UUID];
  id v12 = [v9 materializeOrCreateConditionsRelationOfTypePresenceBulletinConditionWithModelID:v11 createdNew:&v27];

  if (v27)
  {
    id v13 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v8, "presenceEventType"));
    [v12 setPresenceEventType:v13];

    id v14 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v8, "presenceEventUserType"));
    [v12 setPresenceEventUserType:v14];

    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v29 = 1;
    id v15 = [v8 userUUIDs];
    v22[0] = MEMORY[0x263EF8330];
    v22[1] = 3221225472;
    v22[2] = __74__HMDHome_BulletinNotifications__addPresenceBulletinCondition_on_context___block_invoke;
    void v22[3] = &unk_264A18750;
    id v23 = v10;
    uint64_t v24 = self;
    BOOL v26 = buf;
    id v25 = v12;
    objc_msgSend(v15, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v22);

    BOOL v16 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
  }
  else
  {
    id v17 = (void *)MEMORY[0x230FBD990]();
    id v18 = self;
    id v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v8;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Unable to create the presence condition from %@", buf, 0x16u);
    }
    BOOL v16 = 0;
  }

  return v16;
}

void __74__HMDHome_BulletinNotifications__addPresenceBulletinCondition_on_context___block_invoke(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = [*(id *)(a1 + 32) managedObjectContext];
  uint64_t v7 = +[_MKFHome findHomeMemberWithUUID:v5 context:v6];

  if (v7)
  {
    int v8 = [v7 isRestrictedGuest];
    id v9 = *(void **)(a1 + 48);
    if (v8)
    {
      id v10 = [v7 castIfGuest];
      [v9 addGuestsObject:v10];
    }
    else
    {
      id v10 = [v7 castIfUser];
      [v9 addUsersObject:v10];
    }
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = *(id *)(a1 + 40);
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = HMFGetLogIdentifier();
      int v15 = 138543618;
      BOOL v16 = v14;
      __int16 v17 = 2112;
      id v18 = v5;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the user: %@", (uint8_t *)&v15, 0x16u);
    }
    *a3 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  }
}

- (BOOL)addSunriseSunSetTimePeriodElement:(id)a3 toCondition:(id)a4 isStartElement:(BOOL)a5
{
  BOOL v5 = a5;
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  char v22 = 0;
  id v10 = [MEMORY[0x263F08C38] UUID];
  if (v5) {
    [v9 materializeOrCreateStartElementRelationOfTypeSunriseSunsetTimeSpecificationWithModelID:v10 createdNew:&v22];
  }
  else {
  uint64_t v11 = [v9 materializeOrCreateEndElementRelationOfTypeSunriseSunsetTimeSpecificationWithModelID:v10 createdNew:&v22];
  }

  if (!v22)
  {
    id v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v15 = HMFGetLogIdentifier();
      BOOL v16 = HMFBooleanToString();
      *(_DWORD *)buf = 138543874;
      uint64_t v24 = v15;
      __int16 v25 = 2112;
      BOOL v26 = v16;
      __int16 v27 = 2112;
      id v28 = v8;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Unable to create sunrise sunset time period element: (start = %@) (element = %@)", buf, 0x20u);
    }
  }
  __int16 v17 = [v8 significantEvent];
  [v11 setSignificantEvent:v17];

  id v18 = NSNumber;
  uint64_t v19 = [v8 offset];
  uint64_t v20 = objc_msgSend(v18, "numberWithInteger:", HMDTimeOffsetFromDateComponents(v19, 0));
  [v11 setOffsetSeconds:v20];

  return 1;
}

- (BOOL)addTimeOfDayTimePeriodElement:(id)a3 toCondition:(id)a4 isStartElement:(BOOL)a5
{
  BOOL v5 = a5;
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  unsigned __int8 v21 = 0;
  id v10 = [MEMORY[0x263F08C38] UUID];
  if (v5) {
    [v9 materializeOrCreateStartElementRelationOfTypeTimeOfDayTimeSpecificationWithModelID:v10 createdNew:&v21];
  }
  else {
  uint64_t v11 = [v9 materializeOrCreateEndElementRelationOfTypeTimeOfDayTimeSpecificationWithModelID:v10 createdNew:&v21];
  }

  int v12 = v21;
  if (v21)
  {
    id v13 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v8, "hour"));
    [v11 setHour:v13];

    id v14 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v8, "minute"));
    [v11 setMinute:v14];
  }
  else
  {
    int v15 = (void *)MEMORY[0x230FBD990]();
    BOOL v16 = self;
    __int16 v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = HMFGetLogIdentifier();
      uint64_t v19 = HMFBooleanToString();
      *(_DWORD *)buf = 138543874;
      id v23 = v18;
      __int16 v24 = 2112;
      __int16 v25 = v19;
      __int16 v26 = 2112;
      id v27 = v8;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Unable to create time of day time period element: (start = %@) (element = %@)", buf, 0x20u);
    }
  }

  return v12 != 0;
}

- (BOOL)addElement:(id)a3 toCondition:(id)a4 isStartElement:(BOOL)a5
{
  BOOL v5 = a5;
  id v8 = a3;
  id v9 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = v8;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    id v12 = v11;

    BOOL v13 = [(HMDHome *)self addTimeOfDayTimePeriodElement:v12 toCondition:v9 isStartElement:v5];
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      BOOL v16 = 0;
      goto LABEL_13;
    }
    id v14 = v8;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    id v12 = v15;

    BOOL v13 = [(HMDHome *)self addSunriseSunSetTimePeriodElement:v12 toCondition:v9 isStartElement:v5];
  }
  BOOL v16 = v13;

LABEL_13:
  return v16;
}

- (BOOL)addTimePeriodBulletinCondition:(id)a3 on:(id)a4
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  char v24 = 0;
  id v8 = [MEMORY[0x263F08C38] UUID];
  id v9 = [v7 materializeOrCreateConditionsRelationOfTypeTimePeriodBulletinConditionWithModelID:v8 createdNew:&v24];

  if (!v24)
  {
    int v15 = (void *)MEMORY[0x230FBD990]();
    BOOL v16 = self;
    __int16 v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v26 = v18;
      __int16 v27 = 2112;
      id v28 = v6;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Unable to create the time period condition from %@", buf, 0x16u);
LABEL_12:

      goto LABEL_13;
    }
    goto LABEL_13;
  }
  id v10 = [v6 startElement];
  BOOL v11 = [(HMDHome *)self addElement:v10 toCondition:v9 isStartElement:1];

  if (!v11)
  {
    int v15 = (void *)MEMORY[0x230FBD990]();
    uint64_t v19 = self;
    __int16 v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = HMFGetLogIdentifier();
      uint64_t v20 = [v6 startElement];
      *(_DWORD *)buf = 138543618;
      __int16 v26 = v18;
      __int16 v27 = 2112;
      id v28 = v20;
      unsigned __int8 v21 = "%{public}@Unable to add start element to the condition: %@";
LABEL_11:
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, v21, buf, 0x16u);

      goto LABEL_12;
    }
LABEL_13:

    BOOL v14 = 0;
    goto LABEL_14;
  }
  id v12 = [v6 endElement];
  BOOL v13 = [(HMDHome *)self addElement:v12 toCondition:v9 isStartElement:0];

  if (!v13)
  {
    int v15 = (void *)MEMORY[0x230FBD990]();
    char v22 = self;
    __int16 v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = HMFGetLogIdentifier();
      uint64_t v20 = [v6 startElement];
      *(_DWORD *)buf = 138543618;
      __int16 v26 = v18;
      __int16 v27 = 2112;
      id v28 = v20;
      unsigned __int8 v21 = "%{public}@Unable to add end element to the condition: %@";
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  BOOL v14 = 1;
LABEL_14:

  return v14;
}

- (BOOL)addBulletinConditions:(id)a3 on:(id)a4 context:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  BOOL v11 = [v10 managedObjectContext];
  objc_msgSend(v11, "hmd_assertIsExecuting");

  id v12 = [v9 conditions];
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 3221225472;
  void v25[2] = __67__HMDHome_BulletinNotifications__addBulletinConditions_on_context___block_invoke;
  v25[3] = &unk_264A18700;
  id v13 = v10;
  id v26 = v13;
  objc_msgSend(v12, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v25);

  uint64_t v21 = 0;
  char v22 = &v21;
  uint64_t v23 = 0x2020000000;
  char v24 = 1;
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  void v17[2] = __67__HMDHome_BulletinNotifications__addBulletinConditions_on_context___block_invoke_2;
  v17[3] = &unk_264A18728;
  uint64_t v20 = &v21;
  void v17[4] = self;
  id v14 = v9;
  id v18 = v14;
  id v15 = v13;
  id v19 = v15;
  objc_msgSend(v8, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v17);
  LOBYTE(v13) = *((unsigned char *)v22 + 24);

  _Block_object_dispose(&v21, 8);
  return (char)v13;
}

uint64_t __67__HMDHome_BulletinNotifications__addBulletinConditions_on_context___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) deleteObject:a2];
}

void __67__HMDHome_BulletinNotifications__addBulletinConditions_on_context___block_invoke_2(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v5 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v6 = v5;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v7 = v6;
    }
    else {
      id v7 = 0;
    }
    id v8 = v7;

    char v9 = [*(id *)(a1 + 32) addPresenceBulletinCondition:v8 on:*(void *)(a1 + 40) context:*(void *)(a1 + 48)];
LABEL_11:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v9;

    goto LABEL_15;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = v5;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      BOOL v11 = v10;
    }
    else {
      BOOL v11 = 0;
    }
    id v8 = v11;

    char v9 = [*(id *)(a1 + 32) addTimePeriodBulletinCondition:v8 on:*(void *)(a1 + 40)];
    goto LABEL_11;
  }
  id v12 = (void *)MEMORY[0x230FBD990]();
  id v13 = *(id *)(a1 + 32);
  id v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    id v15 = HMFGetLogIdentifier();
    int v16 = 138543618;
    __int16 v17 = v15;
    __int16 v18 = 2112;
    id v19 = v5;
    _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Unknown bulletin condition found on the bulletin registration : %@", (uint8_t *)&v16, 0x16u);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
LABEL_15:
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
    *a3 = 1;
  }
}

- (BOOL)insertOrUpdateMatterBulletinRegistration:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 homeMember:(id)a7 context:(id)a8
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  uint64_t v20 = [v19 managedObjectContext];
  objc_msgSend(v20, "hmd_assertIsExecuting");

  uint64_t v21 = +[HMDCoreData featuresDataSource];
  int v22 = [v21 isRVCEnabled];

  if (!v22)
  {
LABEL_8:
    BOOL v31 = 0;
    goto LABEL_9;
  }
  if (!v16)
  {
    char v41 = 0;
    uint64_t v23 = [MEMORY[0x263F08C38] UUID];
    id v16 = [v18 materializeOrCreateBulletinRegistrationsRelationOfTypeMatterBulletinRegistrationWithModelID:v23 createdNew:&v41];

    if (!v41)
    {
      char v32 = (void *)MEMORY[0x230FBD990]();
      char v33 = self;
      id v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        char v35 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        uint64_t v43 = v35;
        __int16 v44 = 2112;
        id v45 = v18;
        __int16 v46 = 2112;
        id v47 = v14;
        _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_ERROR, "%{public}@Unable to create or materialize Matter bulletin registration on home member: %@, registration: %@", buf, 0x20u);
      }
      goto LABEL_8;
    }
  }
  char v24 = [v15 deviceAddress];
  __int16 v25 = [v24 idsIdentifier];
  [v16 setDeviceIdsIdentifier:v25];

  id v26 = [v15 deviceAddress];
  __int16 v27 = [v26 idsDestination];
  [v16 setDeviceIdsDestination:v27];

  id v28 = [v14 matterPaths];
  v37[0] = MEMORY[0x263EF8330];
  v37[1] = 3221225472;
  void v37[2] = __139__HMDHome_BulletinNotifications__insertOrUpdateMatterBulletinRegistration_source_managedBulletinRegistration_accessory_homeMember_context___block_invoke;
  v37[3] = &unk_264A186D8;
  void v37[4] = self;
  id v29 = v14;
  id v38 = v29;
  id v16 = v16;
  id v39 = v16;
  id v40 = v18;
  objc_msgSend(v28, "na_each:", v37);
  uint64_t v30 = [v29 conditions];
  BOOL v31 = [(HMDHome *)self addBulletinConditions:v30 on:v16 context:v19];

LABEL_9:
  return v31;
}

void __139__HMDHome_BulletinNotifications__insertOrUpdateMatterBulletinRegistration_source_managedBulletinRegistration_accessory_homeMember_context___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [v3 uuid];
  id v5 = +[HMCContext findMatterPathWithModelID:v4];
  if (v5)
  {
LABEL_2:
    id v6 = [*(id *)(a1 + 48) matterPaths];
    char v7 = [v6 containsObject:v5];

    if ((v7 & 1) == 0)
    {
      [*(id *)(a1 + 48) addMatterPathsObject:v5];
      id v8 = (void *)MEMORY[0x230FBD990]([v5 addMatterBulletinRegistrationsObject:*(void *)(a1 + 48)]);
      id v9 = *(id *)(a1 + 32);
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        BOOL v11 = v42 = v4;
        char v41 = [v3 accessory];
        id v12 = [v41 uuid];
        id v13 = [v3 endpointID];
        [v3 clusterID];
        id v14 = v43 = v8;
        id v15 = [v3 attributeID];
        [v3 eventID];
        id v16 = v40 = v3;
        id v17 = [*(id *)(a1 + 56) uniqueIDForAccessories];
        *(_DWORD *)buf = 138544898;
        __int16 v46 = v11;
        __int16 v47 = 2112;
        uint64_t v48 = v12;
        __int16 v49 = 2112;
        uint64_t v50 = v13;
        __int16 v51 = 2112;
        uint64_t v52 = v14;
        __int16 v53 = 2112;
        long long v54 = v15;
        __int16 v55 = 2112;
        id v56 = v16;
        __int16 v57 = 2112;
        __int16 v58 = v17;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Inserted Matter bulletin registration with accessoryModelID=%@ endpointID=%@ clusterID=%@ attributeID=%@ eventID=%@ for home member uniqueID=%@", buf, 0x48u);

        id v3 = v40;
        id v8 = v43;

        id v4 = v42;
      }
    }
    goto LABEL_17;
  }
  id v18 = (void *)MEMORY[0x230FBD990]();
  id v19 = *(id *)(a1 + 32);
  uint64_t v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    uint64_t v21 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    __int16 v46 = v21;
    __int16 v47 = 2112;
    uint64_t v48 = v4;
    _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Could not locate the MKFMatterPath with UUID: %@, creating one", buf, 0x16u);
  }
  int v22 = [v3 accessory];
  uint64_t v23 = [v22 uuid];
  char v24 = +[HMCContext findHAPAccessoryWithModelID:v23];

  if (v24)
  {
    char v44 = 0;
    id v5 = [v24 materializeOrCreateMatterPathsRelationWithModelID:v4 createdNew:&v44];
    if (v44)
    {
      __int16 v25 = [v3 endpointID];
      [v5 setEndpointID:v25];

      id v26 = [v3 clusterID];
      [v5 setClusterID:v26];

      __int16 v27 = [v3 attributeID];
      [v5 setAttributeID:v27];

      id v28 = [v3 eventID];
      [v5 setEventID:v28];

      [v24 addMatterPathsObject:v5];
      goto LABEL_2;
    }
    char v35 = (void *)MEMORY[0x230FBD990]();
    id v36 = *(id *)(a1 + 32);
    __int16 v37 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      id v38 = HMFGetLogIdentifier();
      id v39 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543874;
      __int16 v46 = v38;
      __int16 v47 = 2112;
      uint64_t v48 = v24;
      __int16 v49 = 2112;
      uint64_t v50 = v39;
      _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_ERROR, "%{public}@Unable to create or materialize Matter Path on accessory: %@ for registration: %@", buf, 0x20u);
    }
  }
  else
  {
    id v29 = (void *)MEMORY[0x230FBD990]();
    id v30 = *(id *)(a1 + 32);
    BOOL v31 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      char v32 = HMFGetLogIdentifier();
      char v33 = [v3 accessory];
      id v34 = [v33 uuid];
      *(_DWORD *)buf = 138543618;
      __int16 v46 = v32;
      __int16 v47 = 2112;
      uint64_t v48 = v34;
      _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_ERROR, "%{public}@ERROR - no MKFHAPAccessory found with uuid = %@", buf, 0x16u);
    }
    id v5 = 0;
  }
LABEL_17:
}

- (BOOL)insertOrUpdateCharacteristicBulletinRegistration:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 homeMember:(id)a7 context:(id)a8
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  uint64_t v20 = [v19 managedObjectContext];
  objc_msgSend(v20, "hmd_assertIsExecuting");

  if (v16
    || (char v44 = 0,
        [MEMORY[0x263F08C38] UUID],
        uint64_t v21 = objc_claimAutoreleasedReturnValue(),
        [v18 materializeOrCreateBulletinRegistrationsRelationOfTypeCharacteristicBulletinRegistrationWithModelID:v21 createdNew:&v44], id v16 = (id)objc_claimAutoreleasedReturnValue(), v21, v44))
  {
    int v22 = [v15 deviceAddress];
    uint64_t v23 = [v22 idsIdentifier];
    [v16 setDeviceIdsIdentifier:v23];

    char v24 = [v15 deviceAddress];
    __int16 v25 = [v24 idsDestination];
    [v16 setDeviceIdsDestination:v25];

    id v26 = [v14 characteristicInstanceID];
    __int16 v27 = [v19 managedObjectContext];
    id v28 = [v17 characteristicFromInstanceID:v26 context:v27];

    if (v28)
    {
      [v16 setCharacteristic:v28];
      [v14 conditions];
      v30 = id v29 = v18;
      BOOL v31 = [(HMDHome *)self addBulletinConditions:v30 on:v16 context:v19];

      id v18 = v29;
    }
    else
    {
      char v32 = (void *)MEMORY[0x230FBD990]();
      char v33 = self;
      id v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        char v35 = v42 = v32;
        [v14 characteristicInstanceID];
        id v36 = v43 = v18;
        *(_DWORD *)buf = 138543618;
        __int16 v46 = v35;
        __int16 v47 = 2112;
        id v48 = v36;
        _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_ERROR, "%{public}@Could not locate the characteristic with instance ID: %@", buf, 0x16u);

        id v18 = v43;
        char v32 = v42;
      }

      BOOL v31 = 0;
    }
  }
  else
  {
    id v38 = (void *)MEMORY[0x230FBD990]();
    id v39 = self;
    id v40 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      char v41 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      __int16 v46 = v41;
      __int16 v47 = 2112;
      id v48 = v18;
      __int16 v49 = 2112;
      id v50 = v14;
      _os_log_impl(&dword_22F52A000, v40, OS_LOG_TYPE_ERROR, "%{public}@Unable to create or materialize characteristic bulletin registration on home member: %@, registration: %@", buf, 0x20u);
    }
    BOOL v31 = 0;
  }

  return v31;
}

- (id)findBulletinRegistration:(id)a3 source:(id)a4 homeMember:(id)a5 context:(id)a6
{
  uint64_t v135 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  id v14 = [v13 managedObjectContext];
  objc_msgSend(v14, "hmd_assertIsExecuting");

  id v15 = [MEMORY[0x263EFF9A0] dictionary];
  objc_opt_class();
  uint64_t v130 = v10;
  id v129 = v13;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v32 = v10;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        char v33 = v32;
      }
      else {
        char v33 = 0;
      }
      id v34 = v33;

      id v35 = v12;
      if ([v35 conformsToProtocol:&unk_26E4F4038]) {
        id v36 = v35;
      }
      else {
        id v36 = 0;
      }
      id v37 = v36;

      if (v37)
      {
        id v38 = v15;
        id v39 = [v37 home];
        id v40 = [v34 cameraIdentifier];
        char v41 = [v39 findAccessoriesRelationOfTypeHAPAccessoryWithModelID:v40];

        if (v41)
        {
          [v38 setObject:v41 forKeyedSubscript:@"HMD.BU.TUP.acc"];
          uint64_t v42 = [v11 deviceAddress];
          id v43 = [v42 idsIdentifier];
          id v13 = v129;
          [v129 managedObjectContext];
          id v44 = v11;
          __int16 v46 = v45 = v12;
          uint64_t v47 = [v41 cameraSignificantEventBulletinRegistrationWithDeviceIdsIdentifier:v43 user:v37 context:v46];
          uint64_t v125 = v34;
LABEL_53:
          BOOL v31 = (void *)v47;

          id v12 = v45;
          id v11 = v44;

          id v15 = v38;
          goto LABEL_54;
        }
        id v121 = v37;
        id v127 = v11;
        uint64_t v77 = (void *)MEMORY[0x230FBD990]();
        uint64_t v78 = self;
        uint64_t v79 = HMFGetOSLogHandle();
        id v15 = v38;
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          id v80 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          uint64_t v132 = v80;
          __int16 v133 = 2112;
          id v134 = v32;
          _os_log_impl(&dword_22F52A000, v79, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the accessory : %@", buf, 0x16u);
        }

LABEL_85:
        BOOL v31 = 0;
        id v60 = (id)MEMORY[0x263EFFA78];
        id v11 = v127;
        id v13 = v129;
        goto LABEL_86;
      }
      uint64_t v126 = v34;
      long long v66 = (void *)MEMORY[0x230FBD990]();
      id v67 = self;
      id v68 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        uint64_t v69 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v132 = v69;
        __int16 v133 = 2112;
        id v134 = v35;
        id v70 = "%{public}@Camera significant event bulletin notification registrations are not supported for guests : %@";
LABEL_78:
        _os_log_impl(&dword_22F52A000, v68, OS_LOG_TYPE_ERROR, v70, buf, 0x16u);

        goto LABEL_79;
      }
      goto LABEL_79;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v48 = v10;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        __int16 v49 = v48;
      }
      else {
        __int16 v49 = 0;
      }
      id v50 = v49;

      id v51 = v12;
      if ([v51 conformsToProtocol:&unk_26E4F4038]) {
        uint64_t v52 = v51;
      }
      else {
        uint64_t v52 = 0;
      }
      id v53 = v52;

      if (!v53)
      {
        uint64_t v126 = v50;
        long long v66 = (void *)MEMORY[0x230FBD990]();
        id v67 = self;
        id v68 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          uint64_t v69 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          uint64_t v132 = v69;
          __int16 v133 = 2112;
          id v134 = v51;
          id v70 = "%{public}@Camera access bulletin notification registrations are not supported for guests : %@";
          goto LABEL_78;
        }
LABEL_79:

        BOOL v31 = 0;
        id v60 = (id)MEMORY[0x263EFFA78];
        id v13 = v129;
        goto LABEL_86;
      }
      id v38 = v15;
      long long v54 = [v53 home];
      __int16 v55 = [v50 accessoryUUID];
      char v41 = [v54 findAccessoriesRelationOfTypeHAPAccessoryWithModelID:v55];

      if (v41)
      {
        [v38 setObject:v41 forKeyedSubscript:@"HMD.BU.TUP.acc"];
        uint64_t v42 = [v11 deviceAddress];
        id v43 = [v42 idsIdentifier];
        id v13 = v129;
        [v129 managedObjectContext];
        id v44 = v11;
        __int16 v46 = v45 = v12;
        uint64_t v47 = [v41 cameraAccessModeBulletinRegistrationWithDeviceIdsIdentifier:v43 user:v53 context:v46];
LABEL_52:
        uint64_t v125 = v50;
        id v37 = v53;
        goto LABEL_53;
      }
      id v123 = v53;
      id v127 = v11;
      uint64_t v97 = (void *)MEMORY[0x230FBD990]();
      uint64_t v98 = self;
      long long v99 = HMFGetOSLogHandle();
      id v15 = v38;
      if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
      {
LABEL_68:
        uint64_t v100 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v132 = v100;
        __int16 v133 = 2112;
        id v134 = v48;
        double v101 = "%{public}@Unable to find the accessory : %@";
LABEL_83:
        _os_log_impl(&dword_22F52A000, v99, OS_LOG_TYPE_ERROR, v101, buf, 0x16u);
      }
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v48 = v10;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v61 = v48;
        }
        else {
          uint64_t v61 = 0;
        }
        id v50 = v61;

        id v62 = v12;
        if ([v62 conformsToProtocol:&unk_26E4F4038]) {
          long long v63 = v62;
        }
        else {
          long long v63 = 0;
        }
        id v53 = v63;

        if (!v53)
        {
          uint64_t v126 = v50;
          long long v66 = (void *)MEMORY[0x230FBD990]();
          id v67 = self;
          id v68 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            uint64_t v69 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            uint64_t v132 = v69;
            __int16 v133 = 2112;
            id v134 = v62;
            id v70 = "%{public}@Camera reachability bulletin notification registrations are not supported for guests : %@";
            goto LABEL_78;
          }
          goto LABEL_79;
        }
        id v38 = v15;
        uint64_t v64 = [v53 home];
        uint64_t v65 = [v50 accessoryUUID];
        char v41 = [v64 findAccessoriesRelationOfTypeHAPAccessoryWithModelID:v65];

        if (v41)
        {
          [v38 setObject:v41 forKeyedSubscript:@"HMD.BU.TUP.acc"];
          uint64_t v42 = [v11 deviceAddress];
          id v43 = [v42 idsIdentifier];
          id v13 = v129;
          [v129 managedObjectContext];
          id v44 = v11;
          __int16 v46 = v45 = v12;
          uint64_t v47 = [v41 cameraReachabilityBulletinRegistrationWithDeviceIdsIdentifier:v43 user:v53 context:v46];
          goto LABEL_52;
        }
        id v123 = v53;
        id v127 = v11;
        uint64_t v97 = (void *)MEMORY[0x230FBD990]();
        uint64_t v98 = self;
        long long v99 = HMFGetOSLogHandle();
        id v15 = v38;
        if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR)) {
          goto LABEL_68;
        }
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          BOOL v81 = v12;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            uint64_t v102 = self;
            id v103 = v13;
            uint64_t v104 = (void *)MEMORY[0x230FBD990]();
            uint64_t v105 = v102;
            uint64_t v106 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v108 = long long v107 = v15;
              *(_DWORD *)buf = 138543618;
              uint64_t v132 = v108;
              __int16 v133 = 2112;
              id v134 = v130;
              _os_log_impl(&dword_22F52A000, v106, OS_LOG_TYPE_INFO, "%{public}@(b) Unknown bulletin registration type found. Ignoring it : %@", buf, 0x16u);

              id v15 = v107;
            }

            BOOL v31 = 0;
            id v12 = v81;
            id v13 = v103;
            goto LABEL_54;
          }
          uint64_t v122 = v15;
          uint64_t v128 = v11;
          id v82 = +[HMDCoreData featuresDataSource];
          int v83 = [v82 isRVCEnabled];

          if (!v83)
          {
            BOOL v31 = 0;
            id v15 = v122;
            goto LABEL_54;
          }
          uint64_t v119 = self;
          id v84 = v10;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            long long v85 = v84;
          }
          else {
            long long v85 = 0;
          }
          id v86 = v85;

          uint64_t v116 = v86;
          long long v87 = [v86 matterPaths];
          long long v88 = [v87 firstObject];

          uint64_t v89 = [v88 endpointID];
          uint64_t v115 = v88;
          uint64_t v90 = [v88 accessory];
          __int16 v91 = [v90 uuid];

          id v92 = [v128 deviceAddress];
          __int16 v93 = [v92 idsIdentifier];
          uint64_t v94 = [v13 managedObjectContext];
          uint64_t v114 = (void *)v89;
          uint64_t v117 = [v81 matterBulletinRegistrationForEndpointID:v89 accessoryUUID:v91 deviceIdsIdentifier:v93 context:v94];

          id v12 = v81;
          __int16 v95 = [v81 home];
          id v96 = [v95 findAccessoriesRelationOfTypeHAPAccessoryWithModelID:v91];

          if (v96)
          {
            id v15 = v122;
            [v122 setObject:v96 forKeyedSubscript:@"HMD.BU.TUP.acc"];
          }
          else
          {
            uint64_t v110 = (void *)MEMORY[0x230FBD990]();
            uint64_t v111 = v119;
            uint64_t v112 = HMFGetOSLogHandle();
            id v15 = v122;
            if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
            {
              uint64_t v113 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              uint64_t v132 = v113;
              __int16 v133 = 2112;
              id v134 = v84;
              _os_log_impl(&dword_22F52A000, v112, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the accessory : %@", buf, 0x16u);
            }
          }
          id v11 = v128;
          BOOL v31 = (void *)v117;

          if (v96) {
            goto LABEL_54;
          }
          id v60 = (id)MEMORY[0x263EFFA78];
          goto LABEL_86;
        }
        id v71 = v10;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v72 = v71;
        }
        else {
          uint64_t v72 = 0;
        }
        id v50 = v72;

        id v73 = v12;
        if ([v73 conformsToProtocol:&unk_26E4F4038]) {
          long long v74 = v73;
        }
        else {
          long long v74 = 0;
        }
        id v53 = v74;

        if (!v53)
        {
          uint64_t v126 = v50;
          long long v66 = (void *)MEMORY[0x230FBD990]();
          id v67 = self;
          id v68 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            uint64_t v69 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            uint64_t v132 = v69;
            __int16 v133 = 2112;
            id v134 = v73;
            id v70 = "%{public}@Audio analysis event bulletin notification registrations are not supported for guests : %@";
            goto LABEL_78;
          }
          goto LABEL_79;
        }
        id v38 = v15;
        long long v75 = [v53 home];
        uint64_t v76 = [v50 accessoryUUID];
        char v41 = [v75 findAccessoriesRelationOfTypeAppleMediaAccessoryWithModelID:v76];

        if (v41)
        {
          [v38 setObject:v41 forKeyedSubscript:@"HMD.BU.TUP.acc"];
          uint64_t v42 = [v11 deviceAddress];
          id v43 = [v42 idsIdentifier];
          id v13 = v129;
          [v129 managedObjectContext];
          id v44 = v11;
          __int16 v46 = v45 = v12;
          uint64_t v47 = [v41 analysisBulletinRegistrationWithDeviceIdsIdentifier:v43 user:v53 context:v46];
          goto LABEL_52;
        }
        id v123 = v53;
        id v127 = v11;
        uint64_t v97 = (void *)MEMORY[0x230FBD990]();
        uint64_t v98 = self;
        long long v99 = HMFGetOSLogHandle();
        id v15 = v38;
        if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
        {
          uint64_t v100 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          uint64_t v132 = v100;
          __int16 v133 = 2112;
          id v134 = v71;
          double v101 = "%{public}@Unable to find the accessory for audio analysis registration registration :%@";
          goto LABEL_83;
        }
      }
    }

    goto LABEL_85;
  }
  uint64_t v118 = self;
  uint64_t v120 = v15;
  id v16 = v10;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v17 = v16;
  }
  else {
    id v17 = 0;
  }
  id v18 = v17;

  id v19 = [v18 accessoryUUID];
  uint64_t v20 = [v18 serviceInstanceID];
  uint64_t v21 = [v18 characteristicInstanceID];
  id v124 = v11;
  int v22 = [v11 deviceAddress];
  uint64_t v23 = [v22 idsIdentifier];
  [v13 managedObjectContext];
  v25 = char v24 = v12;
  uint64_t v26 = [v24 characteristicBulletinRegistrationForAccessory:v19 serviceInstanceID:v20 characteristicInstanceID:v21 deviceIdsIdentifier:v23 context:v25];

  __int16 v27 = v24;
  id v28 = [v24 home];
  id v29 = [v18 accessoryUUID];
  id v30 = [v28 findAccessoriesRelationOfTypeHAPAccessoryWithModelID:v29];

  if (v30)
  {
    id v15 = v120;
    [v120 setObject:v30 forKeyedSubscript:@"HMD.BU.TUP.acc"];

    id v13 = v129;
    id v12 = v27;
    id v11 = v124;
    BOOL v31 = (void *)v26;
LABEL_54:
    [v15 setObject:v31 forKeyedSubscript:@"HMD.BU.TUP.bulletin"];
    id v60 = v15;
    goto LABEL_86;
  }
  id v56 = (void *)MEMORY[0x230FBD990]();
  __int16 v57 = v118;
  __int16 v58 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
  {
    uint64_t v59 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v132 = v59;
    __int16 v133 = 2112;
    id v134 = v16;
    _os_log_impl(&dword_22F52A000, v58, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the accessory : %@", buf, 0x16u);
  }

  id v60 = (id)MEMORY[0x263EFFA78];
  id v13 = v129;
  id v12 = v27;
  id v11 = v124;
  id v15 = v120;
  BOOL v31 = (void *)v26;
LABEL_86:

  return v60;
}

- (void)maybeRemoveStaleRegistrationsFromPreviousUserForSource:(id)a3 homeMember:(id)a4 context:(id)a5
{
  v42[2] = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = [v10 managedObjectContext];
  objc_msgSend(v11, "hmd_assertIsExecuting");

  id v12 = [v8 deviceAddress];
  id v13 = [v12 idsIdentifier];

  id v14 = +[_MKFBulletinRegistration fetchRequest];
  id v15 = [MEMORY[0x263F08A98] predicateWithFormat:@"(%K == %@) && (%K != %@)", @"deviceIdsIdentifier", v13, @"user", v9];
  [v14 setPredicate:v15];
  id v16 = [MEMORY[0x263F08A98] predicateWithFormat:@"(%K == %@) && (%K != %@)", @"deviceIdsIdentifier", v13, @"guest", v9];
  id v17 = (void *)MEMORY[0x263F08730];
  v42[0] = v15;
  v42[1] = v16;
  id v18 = [MEMORY[0x263EFF8C0] arrayWithObjects:v42 count:2];
  id v19 = [v17 orPredicateWithSubpredicates:v18];
  [v14 setPredicate:v19];

  uint64_t v20 = [v10 managedObjectContext];
  id v35 = 0;
  uint64_t v21 = [v20 executeFetchRequest:v14 error:&v35];
  id v32 = v35;

  if (v21)
  {
    if ([v21 count])
    {
      context = (void *)MEMORY[0x230FBD990]();
      int v22 = self;
      uint64_t v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        char v24 = v28 = v8;
        *(_DWORD *)buf = 138543874;
        id v37 = v24;
        __int16 v38 = 2112;
        id v39 = v21;
        __int16 v40 = 2112;
        char v41 = v13;
        _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Deleting stale registrations: %@ for idsIdentifier: %@", buf, 0x20u);

        id v8 = v28;
      }

      v33[0] = MEMORY[0x263EF8330];
      v33[1] = 3221225472;
      void v33[2] = __108__HMDHome_BulletinNotifications__maybeRemoveStaleRegistrationsFromPreviousUserForSource_homeMember_context___block_invoke;
      v33[3] = &unk_264A24B08;
      id v34 = v10;
      objc_msgSend(v21, "na_each:", v33);
    }
  }
  else
  {
    contexta = (void *)MEMORY[0x230FBD990]();
    __int16 v25 = self;
    uint64_t v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      __int16 v27 = v29 = v8;
      *(_DWORD *)buf = 138543618;
      id v37 = v27;
      __int16 v38 = 2112;
      id v39 = v13;
      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch bulletin registrations for idsIdentifier: %@", buf, 0x16u);

      id v8 = v29;
    }
  }
}

uint64_t __108__HMDHome_BulletinNotifications__maybeRemoveStaleRegistrationsFromPreviousUserForSource_homeMember_context___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) deleteObject:a2];
}

- (void)disableBulletinRegistrations:(id)a3 source:(id)a4 homeMember:(id)a5 context:(id)a6
{
  id v10 = a4;
  id v11 = a5;
  id v12 = a6;
  id v13 = a3;
  id v14 = [v12 managedObjectContext];
  objc_msgSend(v14, "hmd_assertIsExecuting");

  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  void v18[2] = __89__HMDHome_BulletinNotifications__disableBulletinRegistrations_source_homeMember_context___block_invoke;
  v18[3] = &unk_264A186B0;
  void v18[4] = self;
  id v19 = v10;
  id v20 = v11;
  id v21 = v12;
  id v15 = v12;
  id v16 = v11;
  id v17 = v10;
  objc_msgSend(v13, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v18);
}

void __89__HMDHome_BulletinNotifications__disableBulletinRegistrations_source_homeMember_context___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) findBulletinRegistration:a2 source:*(void *)(a1 + 40) homeMember:*(void *)(a1 + 48) context:*(void *)(a1 + 56)];
  id v3 = [v4 objectForKeyedSubscript:@"HMD.BU.TUP.bulletin"];
  if (v3) {
    [*(id *)(a1 + 56) deleteObject:v3];
  }
}

- (BOOL)enableBulletinRegistrations:(id)a3 source:(id)a4 homeMember:(id)a5 context:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  id v14 = [v13 managedObjectContext];
  objc_msgSend(v14, "hmd_assertIsExecuting");

  uint64_t v24 = 0;
  __int16 v25 = &v24;
  uint64_t v26 = 0x2020000000;
  char v27 = 1;
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 3221225472;
  void v19[2] = __88__HMDHome_BulletinNotifications__enableBulletinRegistrations_source_homeMember_context___block_invoke;
  v19[3] = &unk_264A18688;
  void v19[4] = self;
  id v15 = v11;
  id v20 = v15;
  id v16 = v12;
  id v21 = v16;
  id v17 = v13;
  id v22 = v17;
  uint64_t v23 = &v24;
  objc_msgSend(v10, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v19);
  LOBYTE(self) = *((unsigned char *)v25 + 24);

  _Block_object_dispose(&v24, 8);
  return (char)self;
}

void __88__HMDHome_BulletinNotifications__enableBulletinRegistrations_source_homeMember_context___block_invoke(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v143 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = [*(id *)(a1 + 32) findBulletinRegistration:v5 source:*(void *)(a1 + 40) homeMember:*(void *)(a1 + 48) context:*(void *)(a1 + 56)];
  char v7 = [v6 objectForKeyedSubscript:@"HMD.BU.TUP.bulletin"];
  id v8 = [v6 objectForKeyedSubscript:@"HMD.BU.TUP.acc"];
  if (!v8)
  {
    *a3 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
    char v27 = (void *)MEMORY[0x230FBD990]();
    id v28 = *(id *)(a1 + 32);
    id v29 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      id v30 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v140 = v30;
      __int16 v141 = 2112;
      id v142 = v5;
      _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, "%{public}@Did not find the accessory on which this bulletin needs to be applied upon. %@", buf, 0x16u);
    }
    goto LABEL_143;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    LOBYTE(v9) = 1;
    goto LABEL_38;
  }
  uint64_t v131 = a3;
  long long v137 = v8;
  uint64_t v9 = v8;
  int v10 = [(id)v9 conformsToProtocol:&unk_26E51D040];
  char v11 = v10;
  if (v10) {
    id v12 = (void *)v9;
  }
  else {
    id v12 = 0;
  }
  id v126 = v12;

  id v13 = v5;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v14 = v13;
  }
  else {
    id v14 = 0;
  }
  id v15 = v14;

  uint64_t v128 = v7;
  id v16 = [v7 castIfAnalysisEventBulletinRegistration];
  if (v11)
  {
    id v17 = v13;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v18 = v17;
    }
    else {
      id v18 = 0;
    }
    id v19 = v18;

    if (v16)
    {
      id v125 = v15;
      id v20 = +[HMDBulletinNotificationRegistrationUtilities audioAnalysisNotificationRegistrationFromRemoteRegistration:v16];
      id v21 = [v20 registration];
      if ([v21 isEqual:v19])
      {
        id v22 = [v20 source];
        int v23 = [v22 isEqual:*(void *)(a1 + 40)];

        if (v23)
        {
          uint64_t v24 = (void *)MEMORY[0x230FBD990]();
          id v25 = *(id *)(a1 + 32);
          uint64_t v9 = HMFGetOSLogHandle();
          if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_INFO))
          {
            uint64_t v26 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            id v140 = v26;
            __int16 v141 = 2112;
            id v142 = v19;
            _os_log_impl(&dword_22F52A000, (os_log_t)v9, OS_LOG_TYPE_INFO, "%{public}@Audio Analysis bulletin registration: %@ matches existing registration, skipping", buf, 0x16u);
          }
          LODWORD(v9) = 1;
          id v15 = v125;
LABEL_36:

          a3 = v131;
          goto LABEL_37;
        }
      }
      else
      {
      }
      id v15 = v125;
    }
    id v34 = *(id *)(a1 + 48);
    if ([v34 conformsToProtocol:&unk_26E4F4038]) {
      id v35 = v34;
    }
    else {
      id v35 = 0;
    }
    id v20 = v35;

    if (v20)
    {
      LODWORD(v9) = [*(id *)(a1 + 32) insertOrUpdateAudioAnalysisEventBulletinRegistrations:v19 source:*(void *)(a1 + 40) managedBulletinRegistration:v16 accessory:v9 user:v20 context:*(void *)(a1 + 56)];
    }
    else
    {
      id v36 = (void *)MEMORY[0x230FBD990]();
      id v37 = *(id *)(a1 + 32);
      uint64_t v9 = HMFGetOSLogHandle();
      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
      {
        __int16 v38 = HMFGetLogIdentifier();
        id v39 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        id v140 = v38;
        __int16 v141 = 2112;
        id v142 = v39;
        _os_log_impl(&dword_22F52A000, (os_log_t)v9, OS_LOG_TYPE_ERROR, "%{public}@Audio analysis bulletin notification registrations are not supported for guests : %@", buf, 0x16u);
      }
      id v20 = 0;
      LODWORD(v9) = 1;
    }
    goto LABEL_36;
  }
  uint64_t v9 = MEMORY[0x230FBD990]();
  id v31 = *(id *)(a1 + 32);
  id v32 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    char v33 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v140 = v33;
    __int16 v141 = 2112;
    id v142 = v15;
    _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the accessory : %@", buf, 0x16u);
  }
  LODWORD(v9) = 1;
  a3 = v131;
  unsigned char *v131 = 1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
LABEL_37:

  char v7 = v128;
  id v8 = v137;
  if (!v9)
  {
LABEL_38:
    id v40 = v8;
    int v41 = [v40 conformsToProtocol:&unk_26E55CBD8];
    char v42 = v41;
    if (v41) {
      id v43 = v40;
    }
    else {
      id v43 = 0;
    }
    id v44 = v43;

    if ((v42 & 1) == 0)
    {
      *a3 = 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
      __int16 v57 = (void *)MEMORY[0x230FBD990]();
      id v58 = *(id *)(a1 + 32);
      uint64_t v59 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        id v60 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v140 = v60;
        __int16 v141 = 2112;
        id v142 = v5;
        _os_log_impl(&dword_22F52A000, v59, OS_LOG_TYPE_ERROR, "%{public}@Did not find the accessory on which this bulletin needs to be applied upon. %@", buf, 0x16u);
      }
      goto LABEL_142;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v132 = a3;
      id v45 = v5;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        __int16 v46 = v45;
      }
      else {
        __int16 v46 = 0;
      }
      id v47 = v46;

      id v48 = [v7 castIfCharacteristicBulletinRegistration];
      if (v48)
      {
        id v127 = v44;
        id v129 = v7;
        uint64_t v138 = v8;
        __int16 v49 = +[HMDBulletinNotificationRegistrationUtilities accessoryRegistrationFromMKFRegistration:v48];
        id v50 = [v49 registration];
        if ([v50 isEqual:v47])
        {
          id v51 = [v49 source];
          int v52 = [v51 isEqual:*(void *)(a1 + 40)];

          if (v52)
          {
            id v53 = (void *)MEMORY[0x230FBD990]();
            id v54 = *(id *)(a1 + 32);
            __int16 v55 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
            {
              id v56 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              id v140 = v56;
              __int16 v141 = 2112;
              id v142 = v47;
              _os_log_impl(&dword_22F52A000, v55, OS_LOG_TYPE_INFO, "%{public}@Characteristic bulletin registration: %@ matches existing registration, skipping", buf, 0x16u);
            }

            goto LABEL_88;
          }
        }
        else
        {
        }
        id v44 = v127;
        char v7 = v129;
        id v8 = v138;
      }
      char v79 = [*(id *)(a1 + 32) insertOrUpdateCharacteristicBulletinRegistration:v47 source:*(void *)(a1 + 40) managedBulletinRegistration:v48 accessory:v40 homeMember:*(void *)(a1 + 48) context:*(void *)(a1 + 56)];

      a3 = v132;
      if (v79) {
        goto LABEL_142;
      }
LABEL_141:
      *a3 = 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
      goto LABEL_142;
    }
    objc_opt_class();
    uint64_t v138 = v8;
    if (objc_opt_isKindOfClass())
    {
      id v61 = v5;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v62 = v61;
      }
      else {
        id v62 = 0;
      }
      id v63 = v62;

      id v129 = v7;
      uint64_t v64 = [v7 castIfCameraSignificantEventBulletinRegistration];
      if (v64)
      {
        __int16 v133 = a3;
        id v127 = v44;
        uint64_t v65 = +[HMDBulletinNotificationRegistrationUtilities cameraSignificantEventRegistrationFromMKFRegistration:v64];
        long long v66 = [v65 registration];
        if ([v66 isEqual:v63])
        {
          id v67 = [v65 source];
          int v68 = [v67 isEqual:*(void *)(a1 + 40)];

          if (v68)
          {
            uint64_t v69 = (void *)MEMORY[0x230FBD990]();
            id v70 = *(id *)(a1 + 32);
            id v71 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
            {
              uint64_t v72 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              id v140 = v72;
              __int16 v141 = 2112;
              id v142 = v63;
              id v73 = "%{public}@Camera Significant Event bulletin registration: %@ matches existing registration, skipping";
LABEL_86:
              _os_log_impl(&dword_22F52A000, v71, OS_LOG_TYPE_INFO, v73, buf, 0x16u);

              goto LABEL_87;
            }
            goto LABEL_87;
          }
        }
        else
        {
        }
        id v44 = v127;
        a3 = v133;
      }
      id v85 = *(id *)(a1 + 48);
      if ([v85 conformsToProtocol:&unk_26E4F4038]) {
        id v86 = v85;
      }
      else {
        id v86 = 0;
      }
      id v87 = v86;

      if (v87)
      {
        char v88 = [*(id *)(a1 + 32) insertOrUpdateCameraSignificantEventBulletinRegistration:v63 source:*(void *)(a1 + 40) managedBulletinRegistration:v64 accessory:v40 user:v87 context:*(void *)(a1 + 56)];
        goto LABEL_129;
      }
      uint64_t v89 = (void *)MEMORY[0x230FBD990]();
      id v90 = *(id *)(a1 + 32);
      __int16 v91 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
      {
        id v92 = HMFGetLogIdentifier();
        __int16 v93 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        id v140 = v92;
        __int16 v141 = 2112;
        id v142 = v93;
        uint64_t v94 = "%{public}@Camera significant event bulletin notification registrations are not supported for guests : %@";
LABEL_133:
        _os_log_impl(&dword_22F52A000, v91, OS_LOG_TYPE_ERROR, v94, buf, 0x16u);

        goto LABEL_134;
      }
      goto LABEL_134;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v74 = v5;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        long long v75 = v74;
      }
      else {
        long long v75 = 0;
      }
      id v63 = v75;

      id v129 = v7;
      uint64_t v64 = [v7 castIfCameraAccessModeBulletinRegistration];
      if (v64)
      {
        id v134 = a3;
        id v127 = v44;
        uint64_t v65 = +[HMDBulletinNotificationRegistrationUtilities cameraAccessModeRegistrationFromMKFRegistration:v64];
        uint64_t v76 = [v65 registration];
        if ([v76 isEqual:v63])
        {
          uint64_t v77 = [v65 source];
          int v78 = [v77 isEqual:*(void *)(a1 + 40)];

          if (v78)
          {
            uint64_t v69 = (void *)MEMORY[0x230FBD990]();
            id v70 = *(id *)(a1 + 32);
            id v71 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
            {
              uint64_t v72 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              id v140 = v72;
              __int16 v141 = 2112;
              id v142 = v63;
              id v73 = "%{public}@Camera Access Mode bulletin registration: %@ matches existing registration, skipping";
              goto LABEL_86;
            }
LABEL_87:

LABEL_88:
            char v7 = v129;
LABEL_89:
            id v8 = v138;
            id v44 = v127;
LABEL_142:

            goto LABEL_143;
          }
        }
        else
        {
        }
        id v44 = v127;
        a3 = v134;
      }
      id v109 = *(id *)(a1 + 48);
      if ([v109 conformsToProtocol:&unk_26E4F4038]) {
        uint64_t v110 = v109;
      }
      else {
        uint64_t v110 = 0;
      }
      id v87 = v110;

      if (!v87)
      {
        uint64_t v89 = (void *)MEMORY[0x230FBD990]();
        id v90 = *(id *)(a1 + 32);
        __int16 v91 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          id v92 = HMFGetLogIdentifier();
          uint64_t v111 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138543618;
          id v140 = v92;
          __int16 v141 = 2112;
          id v142 = v111;
          uint64_t v94 = "%{public}@Camera access mode bulletin notification registrations are not supported for guests : %@";
          goto LABEL_133;
        }
LABEL_134:

        char v7 = v129;
        id v8 = v138;
        goto LABEL_142;
      }
      char v88 = [*(id *)(a1 + 32) insertOrUpdateCameraAccessModeBulletinRegistration:v63 source:*(void *)(a1 + 40) managedBulletinRegistration:v64 accessory:v40 user:v87 context:*(void *)(a1 + 56)];
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v136 = a3;
        id v127 = v44;
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          __int16 v95 = +[HMDCoreData featuresDataSource];
          int v96 = [v95 isRVCEnabled];

          if (v96)
          {
            id v97 = v5;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              uint64_t v98 = v97;
            }
            else {
              uint64_t v98 = 0;
            }
            id v130 = v98;

            long long v99 = [v7 castIfMatterBulletinRegistration];
            if (v99)
            {
              uint64_t v100 = +[HMDBulletinNotificationRegistrationUtilities matterRegistrationFromMKFRegistration:v99 home:*(void *)(a1 + 32)];
              double v101 = [v100 registration];
              if ([v101 isEqual:v130])
              {
                uint64_t v102 = [v100 source];
                int v103 = [v102 isEqual:*(void *)(a1 + 40)];

                if (v103)
                {
                  uint64_t v104 = v7;
                  uint64_t v105 = (void *)MEMORY[0x230FBD990]();
                  id v106 = *(id *)(a1 + 32);
                  long long v107 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v107, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v108 = HMFGetLogIdentifier();
                    *(_DWORD *)buf = 138543618;
                    id v140 = v108;
                    __int16 v141 = 2112;
                    id v142 = v130;
                    _os_log_impl(&dword_22F52A000, v107, OS_LOG_TYPE_INFO, "%{public}@Matter bulletin registration: %@ matches existing registration, skipping", buf, 0x16u);
                  }

                  char v7 = v104;
                  goto LABEL_89;
                }
              }
              else
              {
              }
            }
            id v121 = v7;
            uint64_t v122 = (void *)MEMORY[0x230FBD990]();
            id v123 = *(id *)(a1 + 32);
            uint64_t v9 = HMFGetOSLogHandle();
            if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_INFO))
            {
              id v124 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543362;
              id v140 = v124;
              _os_log_impl(&dword_22F52A000, (os_log_t)v9, OS_LOG_TYPE_INFO, "%{public}@Inserting Matter bulletin registration", buf, 0xCu);
            }
            LOBYTE(v9) = [*(id *)(a1 + 32) insertOrUpdateMatterBulletinRegistration:v130 source:*(void *)(a1 + 40) managedBulletinRegistration:v99 accessory:v40 homeMember:*(void *)(a1 + 48) context:*(void *)(a1 + 56)];

            char v7 = v121;
            id v8 = v138;
          }
        }
        else
        {
          uint64_t v112 = v8;
          uint64_t v113 = (void *)MEMORY[0x230FBD990]();
          id v114 = *(id *)(a1 + 32);
          uint64_t v115 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
          {
            uint64_t v116 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            id v140 = v116;
            __int16 v141 = 2112;
            id v142 = v5;
            _os_log_impl(&dword_22F52A000, v115, OS_LOG_TYPE_ERROR, "%{public}@(a) Unknown bulletin registration type found. Ignoring it : %@", buf, 0x16u);
          }
          id v8 = v112;
        }
        id v44 = v127;
        a3 = v136;
        if (v9) {
          goto LABEL_142;
        }
        goto LABEL_141;
      }
      id v80 = v5;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        BOOL v81 = v80;
      }
      else {
        BOOL v81 = 0;
      }
      id v63 = v81;

      id v129 = v7;
      uint64_t v64 = [v7 castIfCameraReachabilityBulletinRegistration];
      if (v64)
      {
        uint64_t v135 = a3;
        id v127 = v44;
        uint64_t v65 = +[HMDBulletinNotificationRegistrationUtilities cameraReachabilityRegistrationFromMKFRegistration:v64];
        id v82 = [v65 registration];
        if ([v82 isEqual:v63])
        {
          int v83 = [v65 source];
          int v84 = [v83 isEqual:*(void *)(a1 + 40)];

          if (v84)
          {
            uint64_t v69 = (void *)MEMORY[0x230FBD990]();
            id v70 = *(id *)(a1 + 32);
            id v71 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
            {
              uint64_t v72 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              id v140 = v72;
              __int16 v141 = 2112;
              id v142 = v63;
              id v73 = "%{public}@Camera Reachability bulletin registration: %@ matches existing registration, skipping";
              goto LABEL_86;
            }
            goto LABEL_87;
          }
        }
        else
        {
        }
        id v44 = v127;
        a3 = v135;
      }
      id v117 = *(id *)(a1 + 48);
      if ([v117 conformsToProtocol:&unk_26E4F4038]) {
        uint64_t v118 = v117;
      }
      else {
        uint64_t v118 = 0;
      }
      id v87 = v118;

      if (!v87)
      {
        uint64_t v89 = (void *)MEMORY[0x230FBD990]();
        id v90 = *(id *)(a1 + 32);
        __int16 v91 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          id v92 = HMFGetLogIdentifier();
          uint64_t v120 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138543618;
          id v140 = v92;
          __int16 v141 = 2112;
          id v142 = v120;
          uint64_t v94 = "%{public}@Camera reachability bulletin notification registrations are not supported for guests : %@";
          goto LABEL_133;
        }
        goto LABEL_134;
      }
      char v88 = [*(id *)(a1 + 32) insertOrUpdateCameraReachabilityBulletinRegistration:v63 source:*(void *)(a1 + 40) managedBulletinRegistration:v64 accessory:v40 user:v87 context:*(void *)(a1 + 56)];
    }
LABEL_129:
    char v119 = v88;

    char v7 = v129;
    id v8 = v138;
    if (v119) {
      goto LABEL_142;
    }
    goto LABEL_141;
  }
LABEL_143:
}

- (void)updateEnabledBulletinRegistrations:(id)a3 disabledBulletinRegistrations:(id)a4 source:(id)a5 context:(id)a6 completionHandler:(id)a7
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  id v17 = (void *)MEMORY[0x230FBD990]();
  id v18 = self;
  id v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    id v20 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138544130;
    id v37 = v20;
    __int16 v38 = 2112;
    id v39 = v14;
    __int16 v40 = 2112;
    id v41 = v12;
    __int16 v42 = 2112;
    id v43 = v13;
    _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Updating bulletin registrations for source: %@ enabled: %@ disabled: %@", buf, 0x2Au);
  }
  id v21 = [v14 userUUID];
  v28[0] = MEMORY[0x263EF8330];
  v28[1] = 3221225472;
  void v28[2] = __132__HMDHome_BulletinNotifications__updateEnabledBulletinRegistrations_disabledBulletinRegistrations_source_context_completionHandler___block_invoke;
  void v28[3] = &unk_264A2C9E0;
  id v29 = v21;
  id v30 = v15;
  id v34 = v12;
  id v35 = v16;
  id v31 = v18;
  id v32 = v14;
  id v33 = v13;
  id v22 = v12;
  id v23 = v13;
  id v24 = v14;
  id v25 = v16;
  id v26 = v15;
  id v27 = v21;
  [v26 unsafeSynchronousBlock:v28];
}

void __132__HMDHome_BulletinNotifications__updateEnabledBulletinRegistrations_disabledBulletinRegistrations_source_context_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) managedObjectContext];
  id v4 = +[_MKFHome findHomeMemberWithUUID:v2 context:v3];

  if (!v4)
  {
    id v20 = (void *)MEMORY[0x230FBD990]();
    id v21 = *(id *)(a1 + 48);
    id v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      id v23 = HMFGetLogIdentifier();
      id v24 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      id v45 = v23;
      __int16 v46 = 2112;
      id v47 = v24;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the home member with UUID: %@", buf, 0x16u);
LABEL_13:
    }
LABEL_14:

    uint64_t v27 = *(void *)(a1 + 80);
    id v28 = (void *)MEMORY[0x263F087E8];
    uint64_t v29 = 2;
    goto LABEL_15;
  }
  id v5 = [v4 home];
  id v6 = [v5 modelID];
  char v7 = [*(id *)(a1 + 48) uuid];
  char v8 = [v6 isEqual:v7];

  if ((v8 & 1) == 0)
  {
    id v20 = (void *)MEMORY[0x230FBD990]();
    id v21 = *(id *)(a1 + 48);
    id v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      id v23 = HMFGetLogIdentifier();
      id v25 = *(void **)(a1 + 32);
      id v26 = [*(id *)(a1 + 48) uuid];
      *(_DWORD *)buf = 138543874;
      id v45 = v23;
      __int16 v46 = 2112;
      id v47 = v25;
      __int16 v48 = 2112;
      __int16 v49 = v26;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Home member with UUID: %@ is not part of current home: %@", buf, 0x20u);

      goto LABEL_13;
    }
    goto LABEL_14;
  }
  [*(id *)(a1 + 48) maybeRemoveStaleRegistrationsFromPreviousUserForSource:*(void *)(a1 + 56) homeMember:v4 context:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) disableBulletinRegistrations:*(void *)(a1 + 64) source:*(void *)(a1 + 56) homeMember:v4 context:*(void *)(a1 + 40)];
  if ([*(id *)(a1 + 48) enableBulletinRegistrations:*(void *)(a1 + 72) source:*(void *)(a1 + 56) homeMember:v4 context:*(void *)(a1 + 40)])
  {
    uint64_t v9 = *(void **)(a1 + 40);
    id v43 = 0;
    int v10 = [v9 save:&v43];
    id v11 = v43;
    id v12 = v11;
    if (!v10 || v11)
    {
      id v34 = (void *)MEMORY[0x230FBD990]();
      id v35 = *(id *)(a1 + 48);
      id v36 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        id v37 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v45 = v37;
        __int16 v46 = 2112;
        id v47 = v12;
        _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_ERROR, "%{public}@Unable to save the bulletin registration changes requested, error: %@", buf, 0x16u);
      }
      uint64_t v38 = *(void *)(a1 + 80);
      if (v38) {
        (*(void (**)(uint64_t, void *))(v38 + 16))(v38, v12);
      }
    }
    else
    {
      v41[0] = MEMORY[0x263EF8330];
      v41[1] = 3221225472;
      v41[2] = __132__HMDHome_BulletinNotifications__updateEnabledBulletinRegistrations_disabledBulletinRegistrations_source_context_completionHandler___block_invoke_108;
      v41[3] = &unk_264A18660;
      id v13 = *(void **)(a1 + 64);
      id v42 = *(id *)(a1 + 56);
      id v14 = objc_msgSend(v13, "na_map:", v41);
      id v15 = *(void **)(a1 + 72);
      v39[0] = MEMORY[0x263EF8330];
      v39[1] = 3221225472;
      id v39[2] = __132__HMDHome_BulletinNotifications__updateEnabledBulletinRegistrations_disabledBulletinRegistrations_source_context_completionHandler___block_invoke_2;
      void v39[3] = &unk_264A18660;
      id v40 = *(id *)(a1 + 56);
      id v16 = objc_msgSend(v15, "na_map:", v39);
      id v17 = [*(id *)(a1 + 48) accessoryBulletinNotificationManager];
      [v17 handleDisabledRegistrations:v14];

      id v18 = [*(id *)(a1 + 48) accessoryBulletinNotificationManager];
      [v18 handleEnabledRegistrations:v16];

      uint64_t v19 = *(void *)(a1 + 80);
      if (v19) {
        (*(void (**)(uint64_t, void))(v19 + 16))(v19, 0);
      }

      id v12 = 0;
    }
    goto LABEL_17;
  }
  id v30 = (void *)MEMORY[0x230FBD990]();
  id v31 = *(id *)(a1 + 48);
  id v32 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    id v33 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v45 = v33;
    _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_ERROR, "%{public}@Unable to insert or update bulletin registrations", buf, 0xCu);
  }
  [*(id *)(a1 + 40) reset];
  uint64_t v27 = *(void *)(a1 + 80);
  id v28 = (void *)MEMORY[0x263F087E8];
  uint64_t v29 = 43;
LABEL_15:
  id v12 = [v28 hmErrorWithCode:v29];
  if (v27) {
    (*(void (**)(uint64_t, void *))(v27 + 16))(v27, v12);
  }
LABEL_17:
}

HMDAccessoryBulletinNotificationRegistrationRemote *__132__HMDHome_BulletinNotifications__updateEnabledBulletinRegistrations_disabledBulletinRegistrations_source_context_completionHandler___block_invoke_108(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  if (v5) {
    id v6 = [[HMDAccessoryBulletinNotificationRegistrationRemote alloc] initWithAccessoryBulletinNotificationRegistration:v5 source:*(void *)(a1 + 32)];
  }
  else {
    id v6 = 0;
  }

  return v6;
}

HMDAccessoryBulletinNotificationRegistrationRemote *__132__HMDHome_BulletinNotifications__updateEnabledBulletinRegistrations_disabledBulletinRegistrations_source_context_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  if (v5) {
    id v6 = [[HMDAccessoryBulletinNotificationRegistrationRemote alloc] initWithAccessoryBulletinNotificationRegistration:v5 source:*(void *)(a1 + 32)];
  }
  else {
    id v6 = 0;
  }

  return v6;
}

- (void)_performUpdateBulletinRegistrations:(id)a3
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  char v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    char v8 = HMFGetLogIdentifier();
    uint64_t v9 = [v4 messagePayload];
    *(_DWORD *)buf = 138543618;
    id v24 = v8;
    __int16 v25 = 2112;
    id v26 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Received message to update bulletin notifications : [%@]", buf, 0x16u);
  }
  int v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = [v4 messagePayload];
  id v12 = [(HMDHome *)v6 registrationSourceFromPayload:v11];
  if (v12)
  {
    id v13 = [(HMDHome *)v6 registrationsFromPayload:v11 enabled:1];
    id v14 = [(HMDHome *)v6 registrationsFromPayload:v11 enabled:0];
    id v15 = [(HMDHome *)v6 backingStore];
    id v16 = [v15 context];

    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 3221225472;
    void v21[2] = __70__HMDHome_BulletinNotifications___performUpdateBulletinRegistrations___block_invoke;
    v21[3] = &unk_264A2F3E8;
    id v22 = v4;
    [(HMDHome *)v6 updateEnabledBulletinRegistrations:v13 disabledBulletinRegistrations:v14 source:v12 context:v16 completionHandler:v21];
  }
  else
  {
    id v17 = (void *)MEMORY[0x230FBD990]();
    id v18 = v6;
    uint64_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      id v20 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v24 = v20;
      __int16 v25 = 2112;
      id v26 = v11;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Unable to decode registration source from payload: %@", buf, 0x16u);
    }
    id v13 = [MEMORY[0x263F087E8] hmfUnspecifiedError];
    [v4 respondWithError:v13];
  }
}

uint64_t __70__HMDHome_BulletinNotifications___performUpdateBulletinRegistrations___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 respondWithError:a2];
  }
  else {
    return [v2 respondWithSuccess];
  }
}

- (void)handleUpdateBulletinRegistrations:(id)a3
{
  id v4 = a3;
  id v5 = [v4 dictionaryForKey:@"$HMDRS$"];
  if (v5)
  {
    id v6 = [(HMDHome *)self residentSyncManager];
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    void v7[2] = __68__HMDHome_BulletinNotifications__handleUpdateBulletinRegistrations___block_invoke;
    v7[3] = &unk_264A2F558;
    void v7[4] = self;
    [v6 interceptRemoteResidentRequest:v4 proceed:v7];
  }
  else
  {
    [(HMDHome *)self _performUpdateBulletinRegistrations:v4];
  }
}

uint64_t __68__HMDHome_BulletinNotifications__handleUpdateBulletinRegistrations___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _performUpdateBulletinRegistrations:a2];
}

- (void)registerForBulletinNotificationRegistrationHandlersUsingPolicies:(id)a3
{
  id v5 = a3;
  if (isTVOSDevice())
  {
    id v4 = [(HMDHome *)self msgDispatcher];
    [v4 registerForMessage:@"HMD.UP.BU.RoR" receiver:self policies:v5 selector:sel_handleUpdateBulletinRegistrations_];
  }
}

- (id)registrationSourceFromPayload:(id)a3
{
  id v3 = [a3 objectForKeyedSubscript:@"HMD.S.BU"];
  if (v3) {
    id v4 = [[HMDBulletinNotificationRegistrationSource alloc] initWithDictionary:v3];
  }
  else {
    id v4 = 0;
  }

  return v4;
}

- (id)registrationsFromPayload:(id)a3 enabled:(BOOL)a4
{
  if (a4) {
    id v6 = @"HMD.EN.BU";
  }
  else {
    id v6 = @"HMD.DIS.BU";
  }
  char v7 = [a3 objectForKeyedSubscript:v6];
  char v8 = [MEMORY[0x263EFF9C0] set];
  uint64_t v12 = MEMORY[0x263EF8330];
  uint64_t v13 = 3221225472;
  id v14 = __67__HMDHome_BulletinNotifications__registrationsFromPayload_enabled___block_invoke;
  id v15 = &unk_264A2F140;
  id v16 = self;
  id v17 = v8;
  id v9 = v8;
  objc_msgSend(v7, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &v12);
  int v10 = objc_msgSend(v9, "copy", v12, v13, v14, v15, v16);

  return v10;
}

void __67__HMDHome_BulletinNotifications__registrationsFromPayload_enabled___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = objc_opt_class();
  id v5 = [(id)objc_opt_class() type];
  LODWORD(v4) = [v4 doesTypeMatch:v3 against:v5];

  if (v4)
  {
    id v6 = HMDAccessoryBulletinNotificationRegistration;
LABEL_11:
    id v15 = (HMDMatterBulletinNotificationRegistration *)[[v6 alloc] initWithDictionary:v3];
LABEL_12:
    id v16 = v15;
    if (v15)
    {
      [*(id *)(a1 + 40) addObject:v15];
    }
    goto LABEL_14;
  }
  char v7 = objc_opt_class();
  char v8 = [(id)objc_opt_class() type];
  LODWORD(v7) = [v7 doesTypeMatch:v3 against:v8];

  if (v7)
  {
    id v6 = HMDCameraSignificantEventBulletinNotificationRegistration;
    goto LABEL_11;
  }
  id v9 = objc_opt_class();
  int v10 = [(id)objc_opt_class() type];
  LODWORD(v9) = [v9 doesTypeMatch:v3 against:v10];

  if (v9)
  {
    id v6 = HMDCameraAccessModeBulletinNotificationRegistration;
    goto LABEL_11;
  }
  id v11 = objc_opt_class();
  uint64_t v12 = [(id)objc_opt_class() type];
  LODWORD(v11) = [v11 doesTypeMatch:v3 against:v12];

  if (v11)
  {
    id v6 = HMDCameraReachabilityBulletinNotificationRegistration;
    goto LABEL_11;
  }
  uint64_t v13 = objc_opt_class();
  id v14 = [(id)objc_opt_class() type];
  LODWORD(v13) = [v13 doesTypeMatch:v3 against:v14];

  if (v13)
  {
    id v6 = HMDAudioAnalysisEventBulletinNotificationRegistration;
    goto LABEL_11;
  }
  id v17 = objc_opt_class();
  id v18 = [(id)objc_opt_class() type];
  LODWORD(v17) = [v17 doesTypeMatch:v3 against:v18];

  if (v17)
  {
    uint64_t v19 = +[HMDCoreData featuresDataSource];
    int v20 = [v19 isRVCEnabled];

    if (!v20) {
      goto LABEL_14;
    }
    id v15 = [[HMDMatterBulletinNotificationRegistration alloc] initWithDictionary:v3 withHome:*(void *)(a1 + 32)];
    goto LABEL_12;
  }
  id v21 = (void *)MEMORY[0x230FBD990]();
  id v22 = *(id *)(a1 + 32);
  id v23 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    id v24 = HMFGetLogIdentifier();
    int v25 = 138543618;
    id v26 = v24;
    __int16 v27 = 2112;
    id v28 = v3;
    _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Unknown bulletin registration type found. Ignoring it : %@", (uint8_t *)&v25, 0x16u);
  }
LABEL_14:
}

- (id)payloadFromRegistrations:(id)a3
{
  id v4 = (void *)MEMORY[0x263EFF980];
  id v5 = a3;
  id v6 = objc_msgSend(v4, "arrayWithCapacity:", objc_msgSend(v5, "count"));
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = __59__HMDHome_BulletinNotifications__payloadFromRegistrations___block_invoke;
  void v11[3] = &unk_264A18638;
  void v11[4] = self;
  id v7 = v6;
  id v12 = v7;
  objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v11);

  char v8 = v12;
  id v9 = v7;

  return v9;
}

void __59__HMDHome_BulletinNotifications__payloadFromRegistrations___block_invoke(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = [v5 serializedRegistrationForRemoteMessage];
  if (v6)
  {
    [*(id *)(a1 + 40) addObject:v6];
  }
  else
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = *(id *)(a1 + 32);
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = HMFGetLogIdentifier();
      int v11 = 138543618;
      id v12 = v10;
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Unable to serialize bulletin registration. %@", (uint8_t *)&v11, 0x16u);
    }
    *a3 = 1;
  }
}

- (id)payloadFromEnableRegistrations:(id)a3 disableRegistration:(id)a4 source:(id)a5
{
  void v20[3] = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  int v11 = [(HMDHome *)self payloadFromRegistrations:v8];
  uint64_t v12 = [v11 count];
  if (v12 != [v8 count])
  {
    _HMFPreconditionFailure();
    goto LABEL_8;
  }
  __int16 v13 = [(HMDHome *)self payloadFromRegistrations:v9];
  uint64_t v14 = [v13 count];
  if (v14 != [v9 count])
  {
LABEL_8:
    _HMFPreconditionFailure();
LABEL_9:
    _HMFPreconditionFailure();
  }
  uint64_t v15 = [v10 serializedRegistrationForRemoteMessage];
  if (!v15) {
    goto LABEL_9;
  }
  id v16 = (void *)v15;
  v19[0] = @"HMD.S.BU";
  v19[1] = @"HMD.EN.BU";
  v20[0] = v15;
  v20[1] = v11;
  void v19[2] = @"HMD.DIS.BU";
  id v20[2] = v13;
  id v17 = [NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:3];

  return v17;
}

- (void)updateBulletinRegistrationOnPrimaryResidentWithSource:(id)a3 enableRegistrations:(id)a4 disableRegistration:(id)a5 completionHandler:(id)a6
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = [(HMDHome *)self residentDeviceManager];
  uint64_t v15 = [v14 primaryResidentDevice];

  id v16 = (void *)MEMORY[0x230FBD990]();
  if (v15)
  {
    if ([(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
    {
      id v17 = [(HMDHome *)self backingStore];
      id v18 = [v17 context];

      [(HMDHome *)self updateEnabledBulletinRegistrations:v11 disabledBulletinRegistrations:v12 source:v10 context:v18 completionHandler:v13];
    }
    else
    {
      id v38 = v10;
      uint64_t v23 = [(HMDHome *)self payloadFromEnableRegistrations:v11 disableRegistration:v12 source:v10];
      id v24 = [HMDRemoteDeviceMessageDestination alloc];
      int v25 = [(HMDHome *)self messageTargetUUID];
      id v26 = [v15 device];
      uint64_t v27 = [(HMDRemoteDeviceMessageDestination *)v24 initWithTarget:v25 device:v26];

      id v36 = (void *)v27;
      id v37 = (void *)v23;
      id v28 = [[HMDRemoteMessage alloc] initWithName:@"HMD.UP.BU.RoR" destination:v27 payload:v23 type:0 timeout:1 secure:0.0];
      v39[0] = MEMORY[0x263EF8330];
      v39[1] = 3221225472;
      id v39[2] = __146__HMDHome_BulletinNotifications__updateBulletinRegistrationOnPrimaryResidentWithSource_enableRegistrations_disableRegistration_completionHandler___block_invoke;
      void v39[3] = &unk_264A2B228;
      void v39[4] = self;
      id v40 = v13;
      uint64_t v29 = (void *)MEMORY[0x230FBD990]([(HMDRemoteMessage *)v28 setResponseHandler:v39]);
      id v30 = self;
      id v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v32 = id v35 = v16;
        id v33 = [(HMFObject *)v28 shortDescription];
        *(_DWORD *)buf = 138543874;
        id v42 = v32;
        __int16 v43 = 2112;
        uint64_t v44 = v33;
        __int16 v45 = 2112;
        __int16 v46 = v15;
        _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_INFO, "%{public}@Sending bulletin notification registration message %@ to primary resident: %@", buf, 0x20u);

        id v16 = v35;
      }

      id v34 = [(HMDHome *)v30 residentSyncManager];
      [v34 performResidentRequest:v28 options:0];

      id v10 = v38;
    }
  }
  else
  {
    uint64_t v19 = self;
    int v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      id v21 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v42 = v21;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident to send bulletin registration request", buf, 0xCu);
    }
    id v22 = [MEMORY[0x263F087E8] hmErrorWithCode:91];
    if (v13) {
      (*((void (**)(id, void *))v13 + 2))(v13, v22);
    }
  }
}

void __146__HMDHome_BulletinNotifications__updateBulletinRegistrationOnPrimaryResidentWithSource_enableRegistrations_disableRegistration_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    int v12 = 138543618;
    id v13 = v10;
    __int16 v14 = 2112;
    id v15 = v5;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Sending remote bulletin notification finished with error: %@", (uint8_t *)&v12, 0x16u);
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v5);
  }
}

- (void)removeCameraNotificationSettingsMigrationFileFromDisk
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = objc_alloc(NSURL);
  id v4 = [(HMDHome *)self getCameraNotificationSettingsSerializedFileName];
  id v5 = (void *)[v3 initFileURLWithPath:v4];

  id v6 = [MEMORY[0x263F08850] defaultManager];
  id v12 = 0;
  [v6 removeItemAtURL:v5 error:&v12];
  id v7 = v12;

  if (v7)
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v14 = v11;
      __int16 v15 = 2112;
      id v16 = v7;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while removing camera notification settings migration file from disk : %@", buf, 0x16u);
    }
  }
}

- (void)removeBulletinBoardNotificationsMigrationFileFromDisk
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = objc_alloc(NSURL);
  id v4 = [(HMDHome *)self getBulletinBoardNotificationSerializedFileName];
  id v5 = (void *)[v3 initFileURLWithPath:v4];

  id v6 = [MEMORY[0x263F08850] defaultManager];
  id v12 = 0;
  [v6 removeItemAtURL:v5 error:&v12];
  id v7 = v12;

  if (v7)
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v14 = v11;
      __int16 v15 = 2112;
      id v16 = v7;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while removing bulletin board notification migration file from disk : %@", buf, 0x16u);
    }
  }
}

- (id)loadMigrationCameraNotificationSettingsFromDisk
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHome *)self getCameraNotificationSettingsSerializedFileName];
  id v16 = 0;
  id v4 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v3 options:2 error:&v16];
  id v5 = v16;
  id v6 = v5;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    id v12 = +[HMDHome decodedMigrationCameraNotificationSettings:v4];
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v13 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      __int16 v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v18 = v14;
      __int16 v19 = 2112;
      int v20 = v12;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Camera notification settings for migration: [%@]", buf, 0x16u);
    }
  }
  else
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      id v18 = v11;
      __int16 v19 = 2112;
      int v20 = v3;
      __int16 v21 = 2112;
      id v22 = v6;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to read data from file : %@ / %@", buf, 0x20u);
    }
    id v12 = 0;
  }

  return v12;
}

- (id)loadMigrationBulletinBoardNotificationsFromDisk
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHome *)self getBulletinBoardNotificationSerializedFileName];
  id v16 = 0;
  id v4 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v3 options:2 error:&v16];
  id v5 = v16;
  id v6 = v5;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    id v12 = +[HMDHome decodedMigrationBulletinBoardNotifications:v4];
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v13 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      __int16 v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v18 = v14;
      __int16 v19 = 2112;
      int v20 = v12;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Bulletin board notifications for migration: [%@]", buf, 0x16u);
    }
  }
  else
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      id v18 = v11;
      __int16 v19 = 2112;
      int v20 = v3;
      __int16 v21 = 2112;
      id v22 = v6;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to read data from file : %@ / %@", buf, 0x20u);
    }
    id v12 = 0;
  }

  return v12;
}

- (void)storeMigrationCameraNotificationSettingsToDisk
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = +[HMDHome migrationCameraNotificationSettingsForHome:self];
  uint64_t v5 = [v4 count];
  id v6 = (void *)MEMORY[0x230FBD990]();
  BOOL v7 = self;
  id v8 = HMFGetOSLogHandle();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v9)
    {
      id v10 = HMFGetLogIdentifier();
      uint64_t v11 = [(HMDHome *)v7 name];
      int v25 = 138543874;
      id v26 = v10;
      __int16 v27 = 2112;
      id v28 = v11;
      __int16 v29 = 2112;
      id v30 = v4;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Archiving camera notification settings for migration for home: %@, [%@]", (uint8_t *)&v25, 0x20u);
    }
    id v12 = +[HMDHome encodedMigrationCameraNotificationSettings:v4];
    if (v12)
    {
      id v13 = [(HMDHome *)v7 getCameraNotificationSettingsSerializedFileName];
      __int16 v14 = +[HMDPersistentStore writeData:v12 toStorePath:v13 dataLabel:@"CameraNotificationSettings"];
      __int16 v15 = (void *)MEMORY[0x230FBD990]();
      id v16 = v7;
      uint64_t v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        id v18 = HMFGetLogIdentifier();
        int v25 = 138543874;
        id v26 = v18;
        __int16 v27 = 2112;
        id v28 = v14;
        __int16 v29 = 2112;
        id v30 = v13;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Stored camera notification settings ([%@] bytes) to [%@]", (uint8_t *)&v25, 0x20u);
      }
    }
    else
    {
      __int16 v21 = (void *)MEMORY[0x230FBD990]();
      id v22 = v7;
      uint64_t v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        id v24 = HMFGetLogIdentifier();
        int v25 = 138543362;
        id v26 = v24;
        _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unable to store camera notification settings during migration, archived data is nil", (uint8_t *)&v25, 0xCu);
      }
    }
  }
  else
  {
    if (v9)
    {
      __int16 v19 = HMFGetLogIdentifier();
      int v20 = [(HMDHome *)v7 name];
      int v25 = 138543618;
      id v26 = v19;
      __int16 v27 = 2112;
      id v28 = v20;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@No camera notification settings to migrate for home: %@", (uint8_t *)&v25, 0x16u);
    }
  }
}

- (void)storeMigrationBulletinBoardNotificationsToDisk
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = +[HMDHome migrationBulletinBoardNotificationsForHome:self];
  uint64_t v5 = [v4 count];
  id v6 = (void *)MEMORY[0x230FBD990]();
  BOOL v7 = self;
  id v8 = HMFGetOSLogHandle();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v9)
    {
      id v10 = HMFGetLogIdentifier();
      uint64_t v11 = [(HMDHome *)v7 name];
      int v25 = 138543874;
      id v26 = v10;
      __int16 v27 = 2112;
      id v28 = v11;
      __int16 v29 = 2112;
      id v30 = v4;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Archiving bulletin board notifications for migration for home: %@, [%@]", (uint8_t *)&v25, 0x20u);
    }
    id v12 = +[HMDHome encodedMigrationBulletinBoardNotifications:v4];
    if (v12)
    {
      id v13 = [(HMDHome *)v7 getBulletinBoardNotificationSerializedFileName];
      __int16 v14 = +[HMDPersistentStore writeData:v12 toStorePath:v13 dataLabel:@"BulletinBoardNotifications"];
      __int16 v15 = (void *)MEMORY[0x230FBD990]();
      id v16 = v7;
      uint64_t v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        id v18 = HMFGetLogIdentifier();
        int v25 = 138543874;
        id v26 = v18;
        __int16 v27 = 2112;
        id v28 = v14;
        __int16 v29 = 2112;
        id v30 = v13;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Stored bulletin board notifications ([%@] bytes) to [%@]", (uint8_t *)&v25, 0x20u);
      }
    }
    else
    {
      __int16 v21 = (void *)MEMORY[0x230FBD990]();
      id v22 = v7;
      uint64_t v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        id v24 = HMFGetLogIdentifier();
        int v25 = 138543362;
        id v26 = v24;
        _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unable to store bulletin board notifications during migration, archived data is nil", (uint8_t *)&v25, 0xCu);
      }
    }
  }
  else
  {
    if (v9)
    {
      __int16 v19 = HMFGetLogIdentifier();
      int v20 = [(HMDHome *)v7 name];
      int v25 = 138543618;
      id v26 = v19;
      __int16 v27 = 2112;
      id v28 = v20;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@No bulletin board notifications to migrate for home: %@", (uint8_t *)&v25, 0x16u);
    }
  }
}

- (id)getCameraNotificationSettingsSerializedFileName
{
  id v3 = NSString;
  id v4 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
  uint64_t v5 = [(HMDHome *)self uuid];
  id v6 = [v3 stringWithFormat:@"%@/HMDHome-Camera-Notification-Settings-%@.plist", v4, v5];

  return v6;
}

- (id)getBulletinBoardNotificationSerializedFileName
{
  id v3 = NSString;
  id v4 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
  uint64_t v5 = [(HMDHome *)self uuid];
  id v6 = [v3 stringWithFormat:@"%@/HMDHome-Bulletin-Board-Notifications-%@.plist", v4, v5];

  return v6;
}

- (BOOL)cameraNotificationSettingsMigrationFileExistsOnDisk
{
  id v3 = [MEMORY[0x263F08850] defaultManager];
  id v4 = [(HMDHome *)self getCameraNotificationSettingsSerializedFileName];
  char v5 = [v3 fileExistsAtPath:v4];

  return v5;
}

- (BOOL)bulletinBoardNotificationsMigrationFileExistsOnDisk
{
  id v3 = [MEMORY[0x263F08850] defaultManager];
  id v4 = [(HMDHome *)self getBulletinBoardNotificationSerializedFileName];
  char v5 = [v3 fileExistsAtPath:v4];

  return v5;
}

+ (id)decodedMigrationCameraNotificationSettings:(id)a3
{
  v30[10] = *MEMORY[0x263EF8340];
  id v4 = a3;
  char v5 = (void *)MEMORY[0x263EFFA08];
  v30[0] = objc_opt_class();
  v30[1] = objc_opt_class();
  void v30[2] = objc_opt_class();
  v30[3] = objc_opt_class();
  void v30[4] = objc_opt_class();
  void v30[5] = objc_opt_class();
  void v30[6] = objc_opt_class();
  v30[7] = objc_opt_class();
  v30[8] = objc_opt_class();
  v30[9] = objc_opt_class();
  id v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:v30 count:10];
  BOOL v7 = [v5 setWithArray:v6];

  id v25 = 0;
  id v8 = [MEMORY[0x263F08928] unarchivedObjectOfClasses:v7 fromData:v4 error:&v25];
  id v9 = v25;
  id v10 = v9;
  if (!v8 || v9)
  {
    id v16 = (void *)MEMORY[0x230FBD990]();
    id v17 = a1;
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      __int16 v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v27 = v19;
      __int16 v28 = 2112;
      id v29 = v10;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Unable to unarchive camera notification settings: %@", buf, 0x16u);
    }
    id v15 = 0;
  }
  else
  {
    id v11 = v8;
    objc_opt_class();
    int v12 = objc_opt_isKindOfClass() & 1;
    if (v12) {
      id v13 = v11;
    }
    else {
      id v13 = 0;
    }
    id v14 = v13;

    if (v12)
    {
      id v15 = v11;
    }
    else
    {
      int v20 = (void *)MEMORY[0x230FBD990]();
      id v21 = a1;
      id v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        __int16 v27 = v23;
        __int16 v28 = 2112;
        id v29 = v11;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unarchived data is the wrong type : %@", buf, 0x16u);
      }
      id v15 = 0;
    }
  }
  return v15;
}

+ (id)decodedMigrationBulletinBoardNotifications:(id)a3
{
  v30[9] = *MEMORY[0x263EF8340];
  id v4 = a3;
  char v5 = (void *)MEMORY[0x263EFFA08];
  v30[0] = objc_opt_class();
  v30[1] = objc_opt_class();
  void v30[2] = objc_opt_class();
  v30[3] = objc_opt_class();
  void v30[4] = objc_opt_class();
  void v30[5] = objc_opt_class();
  void v30[6] = objc_opt_class();
  v30[7] = objc_opt_class();
  v30[8] = objc_opt_class();
  id v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:v30 count:9];
  BOOL v7 = [v5 setWithArray:v6];

  id v25 = 0;
  id v8 = [MEMORY[0x263F08928] unarchivedObjectOfClasses:v7 fromData:v4 error:&v25];
  id v9 = v25;
  id v10 = v9;
  if (!v8 || v9)
  {
    id v16 = (void *)MEMORY[0x230FBD990]();
    id v17 = a1;
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      __int16 v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v27 = v19;
      __int16 v28 = 2112;
      id v29 = v10;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Unable to unarchive bulletin board notifications: %@", buf, 0x16u);
    }
    id v15 = 0;
  }
  else
  {
    id v11 = v8;
    objc_opt_class();
    int v12 = objc_opt_isKindOfClass() & 1;
    if (v12) {
      id v13 = v11;
    }
    else {
      id v13 = 0;
    }
    id v14 = v13;

    if (v12)
    {
      id v15 = v11;
    }
    else
    {
      int v20 = (void *)MEMORY[0x230FBD990]();
      id v21 = a1;
      id v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        __int16 v27 = v23;
        __int16 v28 = 2112;
        id v29 = v11;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unarchived data is the wrong type : %@", buf, 0x16u);
      }
      id v15 = 0;
    }
  }
  return v15;
}

+ (id)encodedMigrationCameraNotificationSettings:(id)a3
{
  id v3 = (objc_class *)MEMORY[0x263F08910];
  id v4 = a3;
  char v5 = (void *)[[v3 alloc] initRequiringSecureCoding:1];
  [v5 encodeObject:v4 forKey:*MEMORY[0x263F081D0]];

  [v5 finishEncoding];
  id v6 = [v5 encodedData];

  return v6;
}

+ (id)encodedMigrationBulletinBoardNotifications:(id)a3
{
  id v3 = (objc_class *)MEMORY[0x263F08910];
  id v4 = a3;
  char v5 = (void *)[[v3 alloc] initRequiringSecureCoding:1];
  [v5 encodeObject:v4 forKey:*MEMORY[0x263F081D0]];

  [v5 finishEncoding];
  id v6 = [v5 encodedData];

  return v6;
}

+ (id)migrationCameraNotificationSettingsForHome:(id)a3
{
  id v4 = (void *)MEMORY[0x263EFF980];
  id v5 = a3;
  id v6 = [v4 array];
  BOOL v7 = [v5 cameraAccessories];

  uint64_t v11 = MEMORY[0x263EF8330];
  uint64_t v12 = 3221225472;
  id v13 = __77__HMDHome_BulletinNotifications__migrationCameraNotificationSettingsForHome___block_invoke;
  id v14 = &unk_264A18610;
  id v15 = v6;
  id v16 = a1;
  id v8 = v6;
  objc_msgSend(v7, "na_each:", &v11);

  id v9 = objc_msgSend(v8, "copy", v11, v12, v13, v14);
  return v9;
}

void __77__HMDHome_BulletinNotifications__migrationCameraNotificationSettingsForHome___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [v3 cameraProfileNotificationSettings];
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = *(id *)(a1 + 40);
  BOOL v7 = HMFGetOSLogHandle();
  id v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      id v10 = [v3 uuid];
      *(_DWORD *)buf = 138543874;
      id v18 = v9;
      __int16 v19 = 2112;
      id v20 = v10;
      __int16 v21 = 2112;
      id v22 = v4;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Adding camera notification settings entry for migration: accessoryUUID: %@ cameraProfileNotificationSettings: %@", buf, 0x20u);
    }
    uint64_t v11 = *(void **)(a1 + 32);
    uint64_t v12 = objc_msgSend(v3, "uuid", @"HMD.CNS.A");
    v15[1] = @"HMD.CNS";
    v16[0] = v12;
    v16[1] = v4;
    id v13 = [NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:2];
    [v11 addObject:v13];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v18 = v14;
      __int16 v19 = 2112;
      id v20 = v3;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Camera accessory: %@ missing camera profile notification settings during migration", buf, 0x16u);
    }
  }
}

+ (id)migrationBulletinBoardNotificationsForHome:(id)a3
{
  id v4 = (void *)MEMORY[0x263EFF980];
  id v5 = a3;
  id v6 = [v4 array];
  BOOL v7 = [v5 hapAccessories];

  uint64_t v11 = MEMORY[0x263EF8330];
  uint64_t v12 = 3221225472;
  id v13 = __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke;
  id v14 = &unk_264A18610;
  id v15 = v6;
  id v16 = a1;
  id v8 = v6;
  objc_msgSend(v7, "na_each:", &v11);

  id v9 = objc_msgSend(v8, "copy", v11, v12, v13, v14);
  return v9;
}

void __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 services];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke_2;
  void v8[3] = &unk_264A185E8;
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 32);
  id v5 = (id)v7;
  long long v10 = v7;
  id v6 = v3;
  objc_msgSend(v4, "na_each:", v8);
}

void __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [v3 bulletinBoardNotification];
  if (v4)
  {
    id v5 = [MEMORY[0x263EFF9D0] null];
    id v6 = [v4 condition];

    if (v6)
    {
      long long v7 = (void *)[objc_alloc(MEMORY[0x263F08910]) initRequiringSecureCoding:1];
      id v8 = [v4 condition];
      [v7 encodeObject:v8 forKey:*MEMORY[0x263F081D0]];

      [v7 finishEncoding];
      uint64_t v9 = [v7 encodedData];

      id v5 = (void *)v9;
    }
    long long v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = *(id *)(a1 + 48);
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      id v14 = [*(id *)(a1 + 32) uuid];
      id v15 = [v3 instanceID];
      [v4 isEnabled];
      HMFBooleanToString();
      v16 = id v22 = v10;
      *(_DWORD *)buf = 138544386;
      id v26 = v13;
      __int16 v27 = 2112;
      __int16 v28 = v14;
      __int16 v29 = 2112;
      id v30 = v15;
      __int16 v31 = 2112;
      id v32 = v5;
      __int16 v33 = 2112;
      id v34 = v16;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Adding bulletin board notification entry for migration: accessoryUUID: %@ serviceInstanceID: %@ predicate: %@ enabled: %@", buf, 0x34u);

      long long v10 = v22;
    }

    v23[0] = @"HMD.BBN.A";
    id v17 = *(void **)(a1 + 40);
    id v18 = [*(id *)(a1 + 32) uuid];
    v24[0] = v18;
    v23[1] = @"HMD.BBN.S";
    __int16 v19 = [v3 instanceID];
    v24[1] = v19;
    void v24[2] = v5;
    void v23[2] = @"HMD.BBN.P";
    void v23[3] = @"HMD.BBN.E";
    id v20 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v4, "isEnabled"));
    void v24[3] = v20;
    __int16 v21 = [NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:4];
    [v17 addObject:v21];
  }
}

- (id)actionWithDictionaryRepresentation:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = v4;
  if (!v4)
  {
    uint64_t v9 = 0;
    goto LABEL_14;
  }
  id v6 = objc_msgSend(v4, "hmf_numberForKey:", @"kActionType");
  long long v7 = v6;
  if (!v6)
  {
    long long v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = self;
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = HMFGetLogIdentifier();
      int v18 = 138543362;
      __int16 v19 = v13;
      id v14 = "%{public}@Unable to determine the action type";
      id v15 = v12;
      uint32_t v16 = 12;
      goto LABEL_11;
    }
LABEL_12:

    uint64_t v9 = 0;
    goto LABEL_13;
  }
  if ((unint64_t)[v6 integerValue] > 5
    || (objc_opt_class(), (id v8 = (id)objc_claimAutoreleasedReturnValue()) == 0))
  {
    long long v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = self;
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = HMFGetLogIdentifier();
      int v18 = 138543618;
      __int16 v19 = v13;
      __int16 v20 = 2112;
      __int16 v21 = v7;
      id v14 = "%{public}@Unknown action type: %@";
      id v15 = v12;
      uint32_t v16 = 22;
LABEL_11:
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v18, v16);

      goto LABEL_12;
    }
    goto LABEL_12;
  }
  uint64_t v9 = [v8 actionWithDictionaryRepresentation:v5 home:self];
LABEL_13:

LABEL_14:
  return v9;
}

- (void)_auditChangedCharactersitics:(id)a3
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v3 = a3;
  id v4 = objc_msgSend(MEMORY[0x263EFF9C0], "setWithCapacity:", objc_msgSend(v3, "count"));
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v34 != v8) {
          objc_enumerationMutation(v5);
        }
        long long v10 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        id v11 = [v10 notificationRegistrations];
        uint64_t v12 = [v11 count];

        if (!v12)
        {
          id v13 = [v10 accessory];
          id v14 = [v13 uuid];
          [v4 addObject:v14];

          if (([v13 isPrimary] & 1) == 0)
          {
            id v15 = [v13 bridge];
            uint32_t v16 = [v15 identifiersForBridgedAccessories];
            [v4 unionSet:v16];
          }
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v33 objects:v38 count:16];
    }
    while (v7);
  }

  if ([v4 count] == 1)
  {
    id v17 = [v5 firstObject];
    int v18 = [v17 accessory];
    [(HMDHome *)self _auditAndDeregisterCharacteristicsForHAPAccessory:v18];
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v17 = [(HMDHome *)self accessories];
    uint64_t v19 = [v17 countByEnumeratingWithState:&v29 objects:v37 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v30;
      do
      {
        for (uint64_t j = 0; j != v20; ++j)
        {
          if (*(void *)v30 != v21) {
            objc_enumerationMutation(v17);
          }
          id v23 = *(id *)(*((void *)&v29 + 1) + 8 * j);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v24 = v23;
          }
          else {
            id v24 = 0;
          }
          id v25 = v24;

          if (v25)
          {
            id v26 = [v25 uuid];
            int v27 = [v4 containsObject:v26];

            if (v27) {
              [(HMDHome *)self _auditAndDeregisterCharacteristicsForHAPAccessory:v25];
            }
          }
        }
        uint64_t v20 = [v17 countByEnumeratingWithState:&v29 objects:v37 count:16];
      }
      while (v20);
    }
  }
}

- (void)_auditAndDeregisterCharacteristicsForHAPAccessory:(id)a3
{
  id v23 = self;
  uint64_t v45 = *MEMORY[0x263EF8340];
  id v3 = a3;
  id v4 = [MEMORY[0x263EFF980] array];
  id v5 = [MEMORY[0x263F089D8] string];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v24 = v3;
  obuint64_t j = [v3 services];
  uint64_t v27 = [obj countByEnumeratingWithState:&v33 objects:v44 count:16];
  if (v27)
  {
    uint64_t v26 = *(void *)v34;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v34 != v26) {
          objc_enumerationMutation(obj);
        }
        uint64_t v28 = v6;
        uint64_t v7 = *(void **)(*((void *)&v33 + 1) + 8 * v6);
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        uint64_t v8 = objc_msgSend(v7, "characteristics", v23);
        uint64_t v9 = [v8 countByEnumeratingWithState:&v29 objects:v43 count:16];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = *(void *)v30;
          do
          {
            for (uint64_t i = 0; i != v10; ++i)
            {
              if (*(void *)v30 != v11) {
                objc_enumerationMutation(v8);
              }
              id v13 = *(void **)(*((void *)&v29 + 1) + 8 * i);
              id v14 = [v13 notificationRegistrations];
              uint64_t v15 = [v14 count];

              if (!v15)
              {
                [v4 addObject:v13];
                uint32_t v16 = [v13 shortDescription];
                [v5 appendString:v16];

                [v5 appendString:@"\n"];
              }
            }
            uint64_t v10 = [v8 countByEnumeratingWithState:&v29 objects:v43 count:16];
          }
          while (v10);
        }

        uint64_t v6 = v28 + 1;
      }
      while (v28 + 1 != v27);
      uint64_t v27 = [obj countByEnumeratingWithState:&v33 objects:v44 count:16];
    }
    while (v27);
  }

  id v17 = (void *)MEMORY[0x230FBD990]();
  int v18 = v23;
  uint64_t v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    uint64_t v20 = HMFGetLogIdentifier();
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    uint64_t v21 = [v24 uuid];

    if (v21)
    {
      uint64_t v22 = [v24 uuid];
      [v22 getUUIDBytes:buf];
    }
    else
    {
      *(_OWORD *)buf = *MEMORY[0x263F42690];
    }
    long long v37 = *(_OWORD *)buf;
    *(_DWORD *)buf = 138544130;
    *(void *)&uint8_t buf[4] = v20;
    *(_WORD *)&unsigned char buf[12] = 1040;
    *(_DWORD *)&buf[14] = 16;
    __int16 v39 = 2096;
    id v40 = &v37;
    __int16 v41 = 2112;
    id v42 = v5;
    _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Audit de-registering notifications accessory %{uuid_t}.16P characteristics %@", buf, 0x26u);
  }
  [v24 enableNotification:0 forCharacteristics:v4 message:0 clientIdentifier:0];
}

- (void)_registerForMatterRequests
{
  void v8[2] = *MEMORY[0x263EF8340];
  id v3 = +[HMDUserMessagePolicy userMessagePolicyWithHome:self userPrivilege:0 remoteAccessRequired:0];
  id v4 = [(HMDHome *)self msgDispatcher];
  uint64_t v5 = *MEMORY[0x263F54008];
  uint64_t v6 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  v8[0] = v6;
  v8[1] = v3;
  uint64_t v7 = [MEMORY[0x263EFF8C0] arrayWithObjects:v8 count:2];
  [v4 registerForMessage:v5 receiver:self policies:v7 selector:sel__handleIncomingMTRPluginMatterRequest_];
}

- (void)_handleIncomingMTRPluginMatterRequest:(id)a3
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = [MEMORY[0x263F54028] sharedInstance];
    [v5 handleIncomingMessage:v4];

    uint64_t v6 = (void *)MEMORY[0x230FBD990]();
    uint64_t v7 = self;
    uint64_t v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      uint64_t v10 = HMFBooleanToString();
      int v13 = 138543618;
      id v14 = v9;
      __int16 v15 = 2112;
      uint32_t v16 = v10;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_DEBUG, "%{public}@[[MTRPluginServer sharedInstance] handleIncomingMessage:]: %@", (uint8_t *)&v13, 0x16u);
    }
  }
  else
  {
    uint64_t v6 = (void *)MEMORY[0x230FBD990]();
    uint64_t v11 = self;
    uint64_t v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      int v13 = 138543362;
      id v14 = v12;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Empty message for _handleIncomingMTRPluginMatterRequest", (uint8_t *)&v13, 0xCu);
    }
  }
}

- (id)_checkResidentCapabilitiesForNativeMatter:(id)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = v4;
  if (v4 && ([v4 device], uint64_t v6 = objc_claimAutoreleasedReturnValue(), v6, v6))
  {
    uint64_t v7 = [v5 capabilities];
    char v8 = [v7 supportsNativeMatter];

    if (v8)
    {
      uint64_t v9 = 0;
      goto LABEL_12;
    }
    uint64_t v10 = (void *)MEMORY[0x230FBD990]();
    __int16 v15 = self;
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint32_t v16 = HMFGetLogIdentifier();
      int v18 = 138543362;
      uint64_t v19 = v16;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Primary resident doesn't support native matter", (uint8_t *)&v18, 0xCu);
    }
    uint64_t v14 = 92;
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x230FBD990]();
    uint64_t v11 = self;
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = HMFGetLogIdentifier();
      int v18 = 138543362;
      uint64_t v19 = v13;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@No primary resident device to send native matter requests", (uint8_t *)&v18, 0xCu);
    }
    uint64_t v14 = 91;
  }

  uint64_t v9 = [MEMORY[0x263F087E8] hmErrorWithCode:v14];
LABEL_12:

  return v9;
}

- (BOOL)_sendMatterMessagePayloadToPrimaryResident:(id)a3 responseHandler:(id)a4
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  char v8 = [(HMDHome *)self primaryResident];
  uint64_t v9 = [(HMDHome *)self _checkResidentCapabilitiesForNativeMatter:v8];
  if (v9)
  {
    uint64_t v10 = (void *)MEMORY[0x230FBD990]();
    uint64_t v11 = self;
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = HMFGetLogIdentifier();
      int v26 = 138543362;
      uint64_t v27 = v13;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find compatible resident to send Matter request", (uint8_t *)&v26, 0xCu);
    }
  }
  else
  {
    uint64_t v14 = [HMDRemoteHomeMessageDestination alloc];
    __int16 v15 = [(HMDHome *)self uuid];
    uint32_t v16 = [(HMDHome *)self uuid];
    uint64_t v17 = [(HMDRemoteHomeMessageDestination *)v14 initWithTarget:v15 homeUUID:v16];

    id v18 = objc_alloc(MEMORY[0x263F42590]);
    uint64_t v19 = (void *)[v18 initWithName:*MEMORY[0x263F54008] destination:v17 payload:v6];
    [v19 setRemote:1];
    [v19 setSecureRemote:1];
    uint64_t v20 = (void *)MEMORY[0x230FBD990]([v19 setResponseHandler:v7]);
    uint64_t v21 = self;
    uint64_t v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      id v23 = HMFGetLogIdentifier();
      int v26 = 138543874;
      uint64_t v27 = v23;
      __int16 v28 = 2112;
      long long v29 = v19;
      __int16 v30 = 2112;
      long long v31 = v17;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_DEBUG, "%{public}@Sending MatterRequest message: %@  to resident: %@", (uint8_t *)&v26, 0x20u);
    }
    id v24 = [(HMDHome *)v21 msgDispatcher];
    [v24 sendMessage:v19];
  }
  return v9 == 0;
}

- (BOOL)_sendMatterHMFMessageRequest:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    char v8 = HMFGetLogIdentifier();
    uint64_t v9 = [v4 destination];
    int v12 = 138543874;
    int v13 = v8;
    __int16 v14 = 2112;
    id v15 = v4;
    __int16 v16 = 2112;
    uint64_t v17 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Sending MatterRequest message: %@ to destination: %@", (uint8_t *)&v12, 0x20u);
  }
  uint64_t v10 = [(HMDHome *)v6 msgDispatcher];
  [v10 sendMessage:v4];

  return 1;
}

+ (id)matterDeviceControllerWithUUID:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x263F11008]) initWithXPConnectionBlock:&__block_literal_global_59112 uniqueIdentifier:v4];
  id v15 = 0;
  id v6 = (void *)[objc_alloc(MEMORY[0x263F10DB0]) initWithParameters:v5 error:&v15];
  id v7 = v15;
  char v8 = v7;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9)
  {
    uint64_t v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = a1;
    int v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      uint64_t v17 = v13;
      __int16 v18 = 2112;
      id v19 = v4;
      __int16 v20 = 2112;
      uint64_t v21 = v8;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to create a matter controller with UUID: %@. Error: %@", buf, 0x20u);
    }
  }

  return v6;
}

id __60__HMDHome_MatterExtensions__matterDeviceControllerWithUUID___block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x263F08D68]);
  uint64_t v1 = (void *)[v0 initWithMachServiceName:*MEMORY[0x263F0DE98] options:0];
  return v1;
}

- (Class)lightLogCategory
{
  return (Class)objc_opt_class();
}

- (id)isAccessoryCertifiedForNaturalLighting:(id)a3
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (CFPreferencesGetAppBooleanValue(@"MatterAdaptiveLighting", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0))
  {
    uint64_t v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      char v8 = HMFGetLogIdentifier();
      BOOL v9 = [v4 uuid];
      *(_DWORD *)buf = 138543618;
      __int16 v57 = v8;
      __int16 v58 = 2112;
      uint64_t v59 = v9;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Natural lighting is allowed because of profile present for accessory: %@", buf, 0x16u);
    }
    uint64_t v10 = [MEMORY[0x263F42538] futureWithValue:MEMORY[0x263EFFA88]];
  }
  else
  {
    id v55 = 0;
    uint64_t v10 = [MEMORY[0x263F42538] futureWithPromise:&v55];
    id v11 = [v4 bridge];

    if (v11)
    {
      int v12 = (void *)MEMORY[0x230FBD990]();
      int v13 = self;
      __int16 v14 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        __int16 v48 = HMFGetLogIdentifier();
        uint64_t v47 = [v4 uuid];
        __int16 v46 = [v4 matterVendorID];
        uint64_t v45 = [v4 matterProductID];
        id v40 = [v4 firmwareVersion];
        __int16 v43 = [v40 rawVersionString];
        id v38 = [v4 bridge];
        [v38 uuid];
        id v42 = v44 = v14;
        long long v37 = [v4 bridge];
        id v15 = [v37 matterVendorID];
        long long v36 = [v4 bridge];
        __int16 v16 = [v36 matterProductID];
        long long v35 = [v4 bridge];
        uint64_t v17 = [v35 firmwareVersion];
        [v4 bridge];
        __int16 v18 = v41 = v12;
        id v19 = [v18 firmwareVersion];
        [v19 rawVersionString];
        __int16 v20 = v39 = v13;
        *(_DWORD *)buf = 138545666;
        __int16 v57 = v48;
        __int16 v58 = 2112;
        uint64_t v59 = v47;
        __int16 v60 = 2112;
        id v61 = v46;
        __int16 v62 = 2112;
        id v63 = v45;
        __int16 v64 = 2112;
        uint64_t v65 = v43;
        __int16 v66 = 2112;
        id v67 = v42;
        __int16 v68 = 2112;
        uint64_t v69 = v15;
        __int16 v70 = 2112;
        id v71 = v16;
        __int16 v72 = 2112;
        id v73 = v17;
        __int16 v74 = 2112;
        long long v75 = v20;
        _os_log_impl(&dword_22F52A000, v44, OS_LOG_TYPE_DEBUG, "%{public}@Bridged accessory UUID: %@ identifiers: [%@ : %@ : %@] Bridge UUID: %@ identifiers: [%@ : %@ : %@: %@]", buf, 0x66u);

        int v13 = v39;
        int v12 = v41;

        __int16 v14 = v44;
      }

      uint64_t v21 = [v4 bridge];

      id v4 = (id)v21;
    }
    uint64_t v22 = (void *)MEMORY[0x230FBD990]();
    id v23 = self;
    id v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      id v25 = HMFGetLogIdentifier();
      int v26 = [v4 matterVendorID];
      uint64_t v27 = [v4 matterProductID];
      __int16 v28 = [v4 firmwareVersion];
      [v28 rawVersionString];
      __int16 v49 = v22;
      v30 = long long v29 = v10;
      long long v31 = HMFBooleanToString();
      *(_DWORD *)buf = 138544386;
      __int16 v57 = v25;
      __int16 v58 = 2112;
      uint64_t v59 = v26;
      __int16 v60 = 2112;
      id v61 = v27;
      __int16 v62 = 2112;
      id v63 = v30;
      __int16 v64 = 2112;
      uint64_t v65 = v31;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Checking if natural lighting is allowed based on allow list for accessory: [%@ : %@ : %@] isBridged: %@", buf, 0x34u);

      uint64_t v10 = v29;
      uint64_t v22 = v49;
    }
    uint64_t v32 = +[HMDMatterCapabilitiesFactory makeInstanceForAssetFilename:1];
    v52[0] = MEMORY[0x263EF8330];
    v52[1] = 3221225472;
    v52[2] = __57__HMDHome_Light__isAccessoryCertifiedForNaturalLighting___block_invoke;
    v52[3] = &unk_264A1BDD8;
    id v4 = v4;
    id v53 = v4;
    id v54 = v55;
    v50[0] = MEMORY[0x263EF8330];
    v50[1] = 3221225472;
    v50[2] = __57__HMDHome_Light__isAccessoryCertifiedForNaturalLighting___block_invoke_2;
    v50[3] = &unk_264A2EC50;
    void v50[4] = v23;
    id v51 = v54;
    id v33 = (id)[v32 then:v52 orRecover:v50];
  }
  return v10;
}

uint64_t __57__HMDHome_Light__isAccessoryCertifiedForNaturalLighting___block_invoke(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 matterVendorID];
  uint64_t v6 = (int)[v5 intValue];
  id v7 = [*(id *)(a1 + 32) matterProductID];
  uint64_t v8 = (int)[v7 intValue];
  BOOL v9 = [*(id *)(a1 + 32) firmwareVersion];
  uint64_t v10 = [v9 rawVersionString];
  uint64_t v11 = objc_msgSend(v4, "isCapabilityAllowed:vendorID:productID:firmwareVersion:", 1, v6, v8, (int)objc_msgSend(v10, "intValue"));

  int v12 = *(void **)(a1 + 40);
  int v13 = [NSNumber numberWithBool:v11];
  [v12 fulfillWithValue:v13];

  return 1;
}

uint64_t __57__HMDHome_Light__isAccessoryCertifiedForNaturalLighting___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    int v9 = 138543618;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Natural lighting is not allowed because allow list check failed with error: %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 40) fulfillWithValue:MEMORY[0x263EFFA80]];

  return 1;
}

- (id)executeMatterNaturalLightingActions:(id)a3
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  id v3 = a3;
  long long v36 = [MEMORY[0x263EFF9A0] dictionary];
  long long v35 = [MEMORY[0x263EFF9C0] set];
  long long v34 = [MEMORY[0x263EFF9C0] set];
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  obuint64_t j = v3;
  uint64_t v4 = [obj countByEnumeratingWithState:&v51 objects:v59 count:16];
  if (v4)
  {
    uint64_t v6 = v4;
    uint64_t v7 = *(void *)v52;
    *(void *)&long long v5 = 138543618;
    long long v33 = v5;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v52 != v7) {
          objc_enumerationMutation(obj);
        }
        int v9 = *(void **)(*((void *)&v51 + 1) + 8 * i);
        uint64_t v10 = objc_msgSend(v9, "lightProfile", v33);
        __int16 v11 = [v9 uuid];
        id v12 = [v11 UUIDString];

        if ([v10 isNaturalLightingSupported])
        {
          if ([v9 isNaturalLightingEnabled]) {
            uint64_t v13 = v35;
          }
          else {
            uint64_t v13 = v34;
          }
          [v13 addObject:v10];
        }
        else
        {
          __int16 v14 = (void *)MEMORY[0x230FBD990]();
          id v15 = [(HMDHome *)self lightLogCategory];
          __int16 v16 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            uint64_t v17 = HMFGetLogIdentifier();
            *(_DWORD *)buf = v33;
            id v56 = v17;
            __int16 v57 = 2112;
            __int16 v58 = v9;
            _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Skipping executing natural lighting action for matter, light profile doesn't support matter NL: %@", buf, 0x16u);
          }
          __int16 v18 = NSDictionary;
          id v19 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
          __int16 v20 = objc_msgSend(v18, "hmd_dictionaryWithActionExecutionError:", v19);
          [v36 setObject:v20 forKeyedSubscript:v12];
        }
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v51 objects:v59 count:16];
    }
    while (v6);
  }

  if (objc_msgSend(v35, "hmf_isEmpty") && objc_msgSend(v34, "hmf_isEmpty"))
  {
    uint64_t v21 = [MEMORY[0x263F42538] futureWithValue:MEMORY[0x263EFFA78]];
    uint64_t v22 = v36;
  }
  else
  {
    id v23 = objc_alloc(MEMORY[0x263F42520]);
    id v24 = [(HMDHome *)self workQueue];
    id v25 = (void *)[v23 initWithQueue:v24];

    int v26 = [MEMORY[0x263EFF980] array];
    uint64_t v22 = v36;
    if ((objc_msgSend(v35, "hmf_isEmpty") & 1) == 0)
    {
      uint64_t v27 = [(HMDHome *)self handleSetNaturalLightingEnabled:1 forMatterLightProfiles:v35];
      [v26 addObject:v27];
      v47[0] = MEMORY[0x263EF8330];
      v47[1] = 3221225472;
      v47[2] = __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke;
      id v47[3] = &unk_264A1BDB0;
      void v47[4] = self;
      id v48 = v35;
      id v49 = obj;
      id v50 = v36;
      v46[0] = MEMORY[0x263EF8330];
      v46[1] = 3221225472;
      v46[2] = __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_45;
      void v46[3] = &unk_264A2C4C8;
      void v46[4] = self;
      id v28 = (id)[v27 inContext:v25 then:v47 orRecover:v46];
    }
    if ((objc_msgSend(v34, "hmf_isEmpty") & 1) == 0)
    {
      long long v29 = [(HMDHome *)self handleSetNaturalLightingEnabled:0 forMatterLightProfiles:v34];
      [v26 addObject:v29];
      v42[0] = MEMORY[0x263EF8330];
      v42[1] = 3221225472;
      v42[2] = __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_47;
      v42[3] = &unk_264A1BDB0;
      void v42[4] = self;
      id v43 = v34;
      id v44 = obj;
      id v45 = v36;
      v41[0] = MEMORY[0x263EF8330];
      v41[1] = 3221225472;
      v41[2] = __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_49;
      v41[3] = &unk_264A2C4C8;
      void v41[4] = self;
      id v30 = (id)[v29 inContext:v25 then:v42 orRecover:v41];
    }
    long long v31 = [MEMORY[0x263F42538] allSettled:v26];
    v39[0] = MEMORY[0x263EF8330];
    v39[1] = 3221225472;
    id v39[2] = __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_50;
    void v39[3] = &unk_264A2BEF0;
    id v40 = v36;
    uint64_t v21 = [v31 inContext:v25 then:v39];
  }
  return v21;
}

uint64_t __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v33 = a2;
  id v3 = (void *)MEMORY[0x230FBD990]();
  uint64_t v4 = [*(id *)(a1 + 32) lightLogCategory];
  long long v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    __int16 v41 = v6;
    __int16 v42 = 2112;
    id v43 = v33;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEBUG, "%{public}@_executeNaturalLightingActionsForMatter returned result: %@", buf, 0x16u);
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  obuint64_t j = *(id *)(a1 + 40);
  uint64_t v7 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
  if (v7)
  {
    uint64_t v9 = v7;
    uint64_t v32 = *(void *)v36;
    *(void *)&long long v8 = 138543618;
    long long v30 = v8;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v36 != v32) {
          objc_enumerationMutation(obj);
        }
        __int16 v11 = *(void **)(*((void *)&v35 + 1) + 8 * v10);
        id v12 = *(void **)(a1 + 48);
        v34[0] = MEMORY[0x263EF8330];
        v34[1] = 3221225472;
        v34[2] = __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_42;
        void v34[3] = &unk_264A1BD88;
        void v34[4] = v11;
        uint64_t v13 = objc_msgSend(v12, "na_firstObjectPassingTest:", v34, v30);
        __int16 v14 = [v33 objectForKey:v11];
        char v15 = [v14 BOOLValue];
        __int16 v16 = (void *)MEMORY[0x230FBD990]();
        uint64_t v17 = [*(id *)(a1 + 32) lightLogCategory];
        __int16 v18 = HMFGetOSLogHandle();
        id v19 = v18;
        if (v15)
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            __int16 v20 = HMFGetLogIdentifier();
            *(_DWORD *)buf = v30;
            __int16 v41 = v20;
            __int16 v42 = 2112;
            id v43 = v11;
            _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Successfully set natural lighting for matter light profile %@", buf, 0x16u);
          }
          uint64_t v21 = objc_msgSend(NSDictionary, "hmd_dictionaryWithActionExecutionError:", 0);
          uint64_t v22 = *(void **)(a1 + 56);
          id v23 = [v13 uuid];
          id v24 = [v23 UUIDString];
          [v22 setObject:v21 forKeyedSubscript:v24];
        }
        else
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            id v25 = HMFGetLogIdentifier();
            *(_DWORD *)buf = v30;
            __int16 v41 = v25;
            __int16 v42 = 2112;
            id v43 = v11;
            _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to set natural lighting for matter light profile %@", buf, 0x16u);
          }
          int v26 = NSDictionary;
          uint64_t v21 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
          id v23 = objc_msgSend(v26, "hmd_dictionaryWithActionExecutionError:", v21);
          uint64_t v27 = *(void **)(a1 + 56);
          id v24 = [v13 uuid];
          id v28 = [v24 UUIDString];
          [v27 setObject:v23 forKeyedSubscript:v28];
        }
        ++v10;
      }
      while (v9 != v10);
      uint64_t v9 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
    }
    while (v9);
  }

  return 1;
}

uint64_t __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_45(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    int v9 = 138543618;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to set natural lighting for all matter light profiles with error: %@", (uint8_t *)&v9, 0x16u);
  }

  return 1;
}

uint64_t __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_47(uint64_t a1, void *a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v33 = a2;
  id v3 = (void *)MEMORY[0x230FBD990]();
  uint64_t v4 = [*(id *)(a1 + 32) lightLogCategory];
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    __int16 v41 = v6;
    __int16 v42 = 2112;
    id v43 = v33;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEBUG, "%{public}@_executeNaturalLightingActionsForMatter returned result: %@", buf, 0x16u);
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  obuint64_t j = *(id *)(a1 + 40);
  uint64_t v7 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
  if (v7)
  {
    uint64_t v9 = v7;
    uint64_t v32 = *(void *)v36;
    *(void *)&long long v8 = 138543618;
    long long v30 = v8;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v36 != v32) {
          objc_enumerationMutation(obj);
        }
        __int16 v11 = *(void **)(*((void *)&v35 + 1) + 8 * v10);
        id v12 = *(void **)(a1 + 48);
        v34[0] = MEMORY[0x263EF8330];
        v34[1] = 3221225472;
        v34[2] = __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_48;
        void v34[3] = &unk_264A1BD88;
        void v34[4] = v11;
        uint64_t v13 = objc_msgSend(v12, "na_firstObjectPassingTest:", v34, v30);
        __int16 v14 = [v33 objectForKey:v11];
        char v15 = [v14 BOOLValue];
        __int16 v16 = (void *)MEMORY[0x230FBD990]();
        uint64_t v17 = [*(id *)(a1 + 32) lightLogCategory];
        __int16 v18 = HMFGetOSLogHandle();
        id v19 = v18;
        if (v15)
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            __int16 v20 = HMFGetLogIdentifier();
            *(_DWORD *)buf = v30;
            __int16 v41 = v20;
            __int16 v42 = 2112;
            id v43 = v11;
            _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Successfully set natural lighting for matter light profile %@", buf, 0x16u);
          }
          uint64_t v21 = objc_msgSend(NSDictionary, "hmd_dictionaryWithActionExecutionError:", 0);
          uint64_t v22 = *(void **)(a1 + 56);
          id v23 = [v13 uuid];
          id v24 = [v23 UUIDString];
          [v22 setObject:v21 forKeyedSubscript:v24];
        }
        else
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            id v25 = HMFGetLogIdentifier();
            *(_DWORD *)buf = v30;
            __int16 v41 = v25;
            __int16 v42 = 2112;
            id v43 = v11;
            _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to set natural lighting for matter light profile %@", buf, 0x16u);
          }
          int v26 = NSDictionary;
          uint64_t v21 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
          id v23 = objc_msgSend(v26, "hmd_dictionaryWithActionExecutionError:", v21);
          uint64_t v27 = *(void **)(a1 + 56);
          id v24 = [v13 uuid];
          id v28 = [v24 UUIDString];
          [v27 setObject:v23 forKeyedSubscript:v28];
        }
        ++v10;
      }
      while (v9 != v10);
      uint64_t v9 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
    }
    while (v9);
  }

  return 1;
}

uint64_t __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_49(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = [*(id *)(a1 + 32) lightLogCategory];
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    int v9 = 138543618;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to set natural lighting for all matter light profiles with error: %@", (uint8_t *)&v9, 0x16u);
  }

  return 1;
}

uint64_t __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_50(uint64_t a1)
{
  return 1;
}

uint64_t __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_48(uint64_t a1, void *a2)
{
  id v3 = [a2 lightProfileUUID];
  uint64_t v4 = [*(id *)(a1 + 32) uniqueIdentifier];
  uint64_t v5 = objc_msgSend(v3, "hmf_isEqualToUUID:", v4);

  return v5;
}

uint64_t __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_42(uint64_t a1, void *a2)
{
  id v3 = [a2 lightProfileUUID];
  uint64_t v4 = [*(id *)(a1 + 32) uniqueIdentifier];
  uint64_t v5 = objc_msgSend(v3, "hmf_isEqualToUUID:", v4);

  return v5;
}

- (id)_handleSetNaturalLightingEnabled:(BOOL)a3 forLightProfiles:(id)a4
{
  BOOL v4 = a3;
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v6 = a4;
  uint64_t v7 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  long long v8 = [MEMORY[0x263EFF9A0] dictionary];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v9 = v6;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v26 != v12) {
          objc_enumerationMutation(v9);
        }
        __int16 v14 = [*(id *)(*((void *)&v25 + 1) + 8 * i) setNaturalLightingEnabledForMatterLightProfile:v4];
        [v7 addObject:v14];
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v11);
  }

  id v15 = objc_alloc(MEMORY[0x263F42520]);
  __int16 v16 = [(HMDHome *)self workQueue];
  uint64_t v17 = (void *)[v15 initWithQueue:v16];

  __int16 v18 = [MEMORY[0x263F42538] allSettled:v7];
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 3221225472;
  v22[2] = __68__HMDHome_Light___handleSetNaturalLightingEnabled_forLightProfiles___block_invoke;
  void v22[3] = &unk_264A1EF80;
  id v23 = v8;
  id v24 = self;
  id v19 = v8;
  __int16 v20 = [v18 inContext:v17 then:v22];

  return v20;
}

uint64_t __68__HMDHome_Light___handleSetNaturalLightingEnabled_forLightProfiles___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v3 = a2;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  id v10[2] = __68__HMDHome_Light___handleSetNaturalLightingEnabled_forLightProfiles___block_invoke_2;
  void v10[3] = &unk_264A1BD60;
  id v11 = *(id *)(a1 + 32);
  BOOL v4 = (void *)MEMORY[0x230FBD990](objc_msgSend(v3, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v10));
  uint64_t v5 = [*(id *)(a1 + 40) lightLogCategory];
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    uint64_t v13 = v7;
    __int16 v14 = 2112;
    uint64_t v15 = v8;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_DEBUG, "%{public}@_handleSetNaturalLightingEnabledresponses: %@", buf, 0x16u);
  }
  [*(id *)(a1 + 32) copy];

  return 1;
}

void __68__HMDHome_Light___handleSetNaturalLightingEnabled_forLightProfiles___block_invoke_2(uint64_t a1, void *a2)
{
  id v5 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v5;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  if (v4) {
    [*(id *)(a1 + 32) addEntriesFromDictionary:v4];
  }
}

- (void)handleSetNaturalLightingEnabledForLightProfilesMessage:(id)a3
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  if ([(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
  {
    id v6 = [v4 arrayForKey:*MEMORY[0x263F0CCD0]];
    unsigned int v20 = [v4 BOOLForKey:@"HMDLightProfileEnableNaturalLightingCodingKey"];
    uint64_t v7 = objc_msgSend(MEMORY[0x263EFF9C0], "setWithCapacity:", objc_msgSend(v6, "count"));
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v8 = v6;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v24;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v24 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:*(void *)(*((void *)&v23 + 1) + 8 * v12)];
          __int16 v14 = [(HMDHome *)self lightProfileWithUUID:v13];
          [v7 addObject:v14];

          ++v12;
        }
        while (v10 != v12);
        uint64_t v10 = [v8 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v10);
    }

    uint64_t v15 = [(HMDHome *)self _handleSetNaturalLightingEnabled:v20 forLightProfiles:v7];
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 3221225472;
    void v21[2] = __73__HMDHome_Light__handleSetNaturalLightingEnabledForLightProfilesMessage___block_invoke;
    v21[3] = &unk_264A23A78;
    void v21[4] = self;
    id v22 = v4;
    [v15 getResultWithCompletion:v21];
  }
  else
  {
    uint64_t v16 = (void *)MEMORY[0x230FBD990]();
    uint64_t v17 = [(HMDHome *)self lightLogCategory];
    __int16 v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      id v19 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v29 = v19;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Not handling remote message to set natural lighting enabled for light profiles on non-primary resident", buf, 0xCu);
    }
    id v8 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    [v4 respondWithError:v8];
  }
}

void __73__HMDHome_Light__handleSetNaturalLightingEnabledForLightProfilesMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = [*(id *)(a1 + 32) lightLogCategory];
  uint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    uint64_t v16 = v10;
    __int16 v17 = 2112;
    id v18 = v6;
    __int16 v19 = 2112;
    id v20 = v5;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Responding to message with error: %@ responses: %@", buf, 0x20u);
  }
  uint64_t v11 = *(void **)(a1 + 40);
  uint64_t v13 = @"HMDHomeSetNaturalLightingEnabledByLightProfileUUIDsCodingKey";
  id v14 = v5;
  uint64_t v12 = [NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
  [v11 respondWithPayload:v12];
}

- (id)handleSetNaturalLightingEnabled:(BOOL)a3 forMatterLightProfiles:(id)a4
{
  BOOL v4 = a3;
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v6 = a4;
  if (objc_msgSend(v6, "hmf_isEmpty"))
  {
    uint64_t v7 = (void *)MEMORY[0x263F42538];
    id v8 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    uint64_t v9 = [v7 futureWithError:v8];
  }
  else
  {
    id v32 = 0;
    uint64_t v9 = [MEMORY[0x263F42538] futureWithPromise:&v32];
    if ([(HMDHome *)self isCurrentDeviceConfirmedPrimaryResident])
    {
      uint64_t v10 = (void *)MEMORY[0x230FBD990]();
      uint64_t v11 = [(HMDHome *)self lightLogCategory];
      uint64_t v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v36 = v13;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Setting natural lighting enabled locally for light profiles on primary resident", buf, 0xCu);
      }
      id v14 = [(HMDHome *)self _handleSetNaturalLightingEnabled:v4 forLightProfiles:v6];
      v29[0] = MEMORY[0x263EF8330];
      v29[1] = 3221225472;
      v29[2] = __73__HMDHome_Light__handleSetNaturalLightingEnabled_forMatterLightProfiles___block_invoke;
      void v29[3] = &unk_264A1BD18;
      void v29[4] = self;
      id v30 = v6;
      id v31 = v32;
      [v14 getResultWithCompletion:v29];
    }
    else
    {
      id v14 = objc_msgSend(v6, "na_map:", &__block_literal_global_33_66542);
      v33[0] = *MEMORY[0x263F0CCD0];
      uint64_t v15 = [v14 allObjects];
      v34[0] = v15;
      v33[1] = @"HMDLightProfileEnableNaturalLightingCodingKey";
      uint64_t v16 = [NSNumber numberWithBool:v4];
      v34[1] = v16;
      __int16 v17 = [NSDictionary dictionaryWithObjects:v34 forKeys:v33 count:2];

      id v18 = objc_alloc(MEMORY[0x263F42570]);
      __int16 v19 = [(HMDHome *)self uuid];
      id v20 = (void *)[v18 initWithTarget:v19];

      uint64_t v21 = [MEMORY[0x263F42590] messageWithName:@"HMDHomeSetNaturalLightingEnabledForLightProfilesMessage" destination:v20 payload:v17];
      objc_initWeak((id *)buf, self);
      v25[0] = MEMORY[0x263EF8330];
      v25[1] = 3221225472;
      void v25[2] = __73__HMDHome_Light__handleSetNaturalLightingEnabled_forMatterLightProfiles___block_invoke_3;
      v25[3] = &unk_264A2E890;
      objc_copyWeak(&v28, (id *)buf);
      id v26 = v32;
      id v27 = v6;
      [v21 setResponseHandler:v25];
      id v22 = [(HMDHome *)self uuid];
      long long v23 = [(HMDHome *)self workQueue];
      [(HMDHome *)self redispatchToResidentMessage:v21 target:v22 responseQueue:v23];

      objc_destroyWeak(&v28);
      objc_destroyWeak((id *)buf);
    }
  }

  return v9;
}

void __73__HMDHome_Light__handleSetNaturalLightingEnabled_forMatterLightProfiles___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    id v30 = v10;
    __int16 v31 = 2112;
    id v32 = v6;
    __int16 v33 = 2112;
    id v34 = v5;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Completed setting natural lighitng with error: %@ responses: %@", buf, 0x20u);
  }
  id v20 = v6;

  uint64_t v21 = [MEMORY[0x263F08968] strongToStrongObjectsMapTable];
  id v22 = v5;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v11 = [v5 allKeys];
  uint64_t v12 = [v11 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v25 != v14) {
          objc_enumerationMutation(v11);
        }
        uint64_t v16 = *(void *)(*((void *)&v24 + 1) + 8 * i);
        __int16 v17 = *(void **)(a1 + 40);
        v23[0] = MEMORY[0x263EF8330];
        v23[1] = 3221225472;
        void v23[2] = __73__HMDHome_Light__handleSetNaturalLightingEnabled_forMatterLightProfiles___block_invoke_29;
        void v23[3] = &unk_264A1E6A8;
        void v23[4] = v16;
        id v18 = objc_msgSend(v17, "na_firstObjectPassingTest:", v23, v20);
        if (v18)
        {
          __int16 v19 = [v22 objectForKeyedSubscript:v16];
          [v21 setObject:v19 forKey:v18];
        }
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v24 objects:v28 count:16];
    }
    while (v13);
  }

  [*(id *)(a1 + 48) fulfillWithValue:v21];
}

void __73__HMDHome_Light__handleSetNaturalLightingEnabled_forMatterLightProfiles___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
    long long v23 = *(void **)(a1 + 32);
    id v8 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    long long v24 = v23;
    id v25 = v8;
LABEL_15:
    [v24 rejectWithError:v25];
    goto LABEL_16;
  }
  id v8 = [MEMORY[0x263F08968] strongToStrongObjectsMapTable];
  if (!v6)
  {
    long long v24 = *(void **)(a1 + 32);
    id v25 = v5;
    goto LABEL_15;
  }
  id v29 = v5;
  uint64_t v9 = (void *)MEMORY[0x230FBD990]();
  id v27 = WeakRetained;
  uint64_t v10 = [WeakRetained lightLogCategory];
  uint64_t v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v36 = v12;
    __int16 v37 = 2112;
    id v38 = v6;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@setNaturalLightingEnabledForLightProfiles responsePayload: %@", buf, 0x16u);
  }
  id v28 = v6;
  uint64_t v13 = objc_msgSend(v6, "hmf_dictionaryForKey:", @"HMDHomeSetNaturalLightingEnabledByLightProfileUUIDsCodingKey");
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v26 = a1;
  id v14 = *(id *)(a1 + 40);
  uint64_t v15 = [v14 countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v31;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v31 != v17) {
          objc_enumerationMutation(v14);
        }
        __int16 v19 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        id v20 = objc_msgSend(v19, "uniqueIdentifier", v26);
        uint64_t v21 = [v20 UUIDString];
        id v22 = objc_msgSend(v13, "hmf_numberForKey:", v21);

        [v8 setObject:v22 forKey:v19];
      }
      uint64_t v16 = [v14 countByEnumeratingWithState:&v30 objects:v34 count:16];
    }
    while (v16);
  }

  [*(id *)(v26 + 32) fulfillWithValue:v8];
  id v6 = v28;
  id v5 = v29;
  id WeakRetained = v27;
LABEL_16:
}

id __73__HMDHome_Light__handleSetNaturalLightingEnabled_forMatterLightProfiles___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 uniqueIdentifier];
  id v3 = [v2 UUIDString];

  return v3;
}

uint64_t __73__HMDHome_Light__handleSetNaturalLightingEnabled_forMatterLightProfiles___block_invoke_29(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueIdentifier];
  BOOL v4 = [v3 UUIDString];
  uint64_t v5 = [v4 isEqual:*(void *)(a1 + 32)];

  return v5;
}

- (void)updateLightProfilesSettings:(id)a3
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [MEMORY[0x263EFF9C0] set];
  id v6 = [MEMORY[0x263EFF9C0] set];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v7 = v4;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v23 objects:v28 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v24 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        uint64_t v12 = [v11 readCharacteristicRequests];
        if ([v12 count])
        {
          uint64_t v13 = [v12 allObjects];
          [v5 addObjectsFromArray:v13];

          [v6 addObject:v11];
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v23 objects:v28 count:16];
    }
    while (v8);
  }

  if ([v5 count])
  {
    objc_initWeak(location, self);
    id v14 = [v5 allObjects];
    uint64_t v15 = [(HMDHome *)self description];
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 3221225472;
    id v20[2] = __46__HMDHome_Light__updateLightProfilesSettings___block_invoke;
    void v20[3] = &unk_264A2D420;
    objc_copyWeak(&v22, location);
    id v21 = v6;
    [(HMDHome *)self readCharacteristicValues:v14 source:7 sourceForLogging:v15 qualityOfService:-1 withCompletionHandler:v20];

    objc_destroyWeak(&v22);
    objc_destroyWeak(location);
  }
  else
  {
    uint64_t v16 = (void *)MEMORY[0x230FBD990]();
    uint64_t v17 = [(HMDHome *)self lightLogCategory];
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      __int16 v19 = HMFGetLogIdentifier();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v19;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_DEBUG, "%{public}@No characteristic read requests for light profiles", (uint8_t *)location, 0xCu);
    }
  }
}

void __46__HMDHome_Light__updateLightProfilesSettings___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v19 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v7 = v5;
    if ([v5 count])
    {
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      obuint64_t j = *(id *)(a1 + 32);
      uint64_t v8 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)v25;
        do
        {
          for (uint64_t i = 0; i != v9; ++i)
          {
            if (*(void *)v25 != v10) {
              objc_enumerationMutation(obj);
            }
            uint64_t v12 = *(void **)(*((void *)&v24 + 1) + 8 * i);
            uint64_t v13 = [v12 workQueue];
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = __46__HMDHome_Light__updateLightProfilesSettings___block_invoke_24;
            block[3] = &unk_264A2E610;
            void block[4] = v12;
            id v5 = v7;
            id v21 = v7;
            id v22 = WeakRetained;
            id v23 = v19;
            dispatch_async(v13, block);
          }
          uint64_t v9 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
        }
        while (v9);
      }
    }
    else
    {
      id v14 = (void *)MEMORY[0x230FBD990]();
      uint64_t v15 = [WeakRetained lightLogCategory];
      uint64_t v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        long long v30 = v17;
        __int16 v31 = 2112;
        long long v32 = v7;
        __int16 v33 = 2112;
        id v34 = v19;
        _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Received empty response payload for light profile charactersitic read requests %@:%@", buf, 0x20u);
      }
      id v5 = v7;
    }
  }
}

void __46__HMDHome_Light__updateLightProfilesSettings___block_invoke_24(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v17 = 0;
  id v4 = [v2 updateSettingsWithReadCharacteristicResponsePayload:v3 error:&v17];
  id v5 = v17;
  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = [*(id *)(a1 + 48) lightLogCategory];
  uint64_t v8 = HMFGetOSLogHandle();
  uint64_t v9 = v8;
  if (v4)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      id v19 = v10;
      __int16 v20 = 2112;
      uint64_t v21 = v11;
      __int16 v22 = 2112;
      id v23 = v4;
      uint64_t v12 = "%{public}@Successfully updated light profile settings %@:%@";
      uint64_t v13 = v9;
      os_log_type_t v14 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl(&dword_22F52A000, v13, v14, v12, buf, 0x20u);
    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 138543874;
    id v19 = v10;
    __int16 v20 = 2112;
    uint64_t v21 = v15;
    __int16 v22 = 2112;
    id v23 = v16;
    uint64_t v12 = "%{public}@Failed to update light profile settings %@:%@";
    uint64_t v13 = v9;
    os_log_type_t v14 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }
}

- (void)updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v5 = [MEMORY[0x263EFF9C0] set];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v6 = [(HMDHome *)self accessories];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v19 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(id *)(*((void *)&v18 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        id v13 = v12;

        if (v13)
        {
          os_log_type_t v14 = [v13 lightProfiles];
          uint64_t v15 = v14;
          if (v3)
          {
            uint64_t v16 = objc_msgSend(v14, "na_filter:", &__block_literal_global_66551);

            uint64_t v15 = (void *)v16;
          }
          id v17 = [v15 allObjects];
          [v5 addObjectsFromArray:v17];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v8);
  }

  [(HMDHome *)self updateLightProfilesSettings:v5];
}

BOOL __82__HMDHome_Light__updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 notificationEnabledCharacteristics];
  BOOL v3 = [v2 count] != 0;

  return v3;
}

- (void)respondMessage:(id)a3 withSettingResults:(id)a4
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v17 = 0;
  uint64_t v8 = [MEMORY[0x263F08910] archivedDataWithRootObject:v7 requiringSecureCoding:1 error:&v17];
  id v9 = v17;
  uint64_t v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = [(HMDHome *)self lightLogCategory];
  uint64_t v12 = HMFGetOSLogHandle();
  id v13 = v12;
  if (v8)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      long long v21 = v14;
      __int16 v22 = 2112;
      id v23 = v7;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Responding with light profile settings: %@", buf, 0x16u);
    }
    uint64_t v18 = *MEMORY[0x263F0CCD8];
    long long v19 = v8;
    uint64_t v15 = [NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
    [v6 respondWithPayload:v15];
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      long long v21 = v16;
      __int16 v22 = 2112;
      id v23 = v7;
      __int16 v24 = 2112;
      id v25 = v9;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to encode profile setting results: %@ with error: %@", buf, 0x20u);
    }
    uint64_t v15 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
    [v6 respondWithError:v15];
  }
}

- (void)handleFetchLightProfileSettingsMessage:(id)a3 withLightProfileUUIDs:(id)a4
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  id v35 = a3;
  id v6 = a4;
  id v7 = (void *)MEMORY[0x230FBD990]();
  long long v36 = self;
  uint64_t v8 = [(HMDHome *)self lightLogCategory];
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    long long v51 = v10;
    __int16 v52 = 2112;
    id v53 = v6;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Handling fetch light profiles settings for profiles: %@", buf, 0x16u);
  }
  id v11 = [MEMORY[0x263EFF9A0] dictionary];
  uint64_t v39 = [MEMORY[0x263EFF9C0] set];
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  obuint64_t j = v6;
  uint64_t v12 = [obj countByEnumeratingWithState:&v44 objects:v49 count:16];
  id v13 = self;
  if (v12)
  {
    uint64_t v14 = v12;
    uint64_t v15 = *(void *)v45;
    do
    {
      uint64_t v16 = 0;
      uint64_t v37 = v14;
      do
      {
        if (*(void *)v45 != v15) {
          objc_enumerationMutation(obj);
        }
        id v17 = *(void **)(*((void *)&v44 + 1) + 8 * v16);
        uint64_t v18 = [(HMDHome *)v13 lightProfileWithUUID:v17];
        if (v18)
        {
          [v39 addObject:v18];
        }
        else
        {
          long long v19 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
          long long v20 = (void *)[objc_alloc(MEMORY[0x263F0E3A8]) initWithError:v19];
          long long v21 = v11;
          [v11 setObject:v20 forKeyedSubscript:v17];

          __int16 v22 = (void *)MEMORY[0x230FBD990]();
          id v23 = [(HMDHome *)v13 lightLogCategory];
          __int16 v24 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            id v25 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            long long v51 = v25;
            __int16 v52 = 2112;
            id v53 = v17;
            _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Could not find light profile with uuid: %@", buf, 0x16u);

            id v13 = v36;
          }

          id v11 = v21;
          uint64_t v14 = v37;
        }

        ++v16;
      }
      while (v14 != v16);
      uint64_t v14 = [obj countByEnumeratingWithState:&v44 objects:v49 count:16];
    }
    while (v14);
  }

  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v26 = v39;
  uint64_t v27 = [v26 countByEnumeratingWithState:&v40 objects:v48 count:16];
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = *(void *)v41;
    do
    {
      for (uint64_t i = 0; i != v28; ++i)
      {
        if (*(void *)v41 != v29) {
          objc_enumerationMutation(v26);
        }
        __int16 v31 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        long long v32 = [v31 settings];
        __int16 v33 = (void *)[objc_alloc(MEMORY[0x263F0E3A8]) initWithSettings:v32];
        id v34 = [v31 uniqueIdentifier];
        [v11 setObject:v33 forKeyedSubscript:v34];
      }
      uint64_t v28 = [v26 countByEnumeratingWithState:&v40 objects:v48 count:16];
    }
    while (v28);
  }

  [(HMDHome *)v36 respondMessage:v35 withSettingResults:v11];
}

- (void)handleFetchLightProfileSettingsMessage:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = [v4 setForKey:*MEMORY[0x263F0CCD0]];
  [(HMDHome *)self handleFetchLightProfileSettingsMessage:v4 withLightProfileUUIDs:v6];
}

- (id)lightProfileWithUUID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self accessories];
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  id v10[2] = __39__HMDHome_Light__lightProfileWithUUID___block_invoke;
  void v10[3] = &unk_264A1BCF0;
  id v11 = v4;
  id v6 = v4;
  id v7 = objc_msgSend(v5, "na_map:", v10);

  uint64_t v8 = [v7 firstObject];

  return v8;
}

id __39__HMDHome_Light__lightProfileWithUUID___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  id v6 = v5;
  if (v5)
  {
    id v7 = [v5 lightProfiles];
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 3221225472;
    id v10[2] = __39__HMDHome_Light__lightProfileWithUUID___block_invoke_2;
    void v10[3] = &unk_264A1E6A8;
    id v11 = *(id *)(a1 + 32);
    uint64_t v8 = objc_msgSend(v7, "na_firstObjectPassingTest:", v10);
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t __39__HMDHome_Light__lightProfileWithUUID___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueIdentifier];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

- (id)createPrimaryResidentMessageRouterWithHomeUUID:(id)a3 messageDispatcher:(id)a4 metricsDispatcher:(id)a5
{
  id v7 = a5;
  id v8 = a4;
  id v9 = a3;
  uint64_t v10 = [[HMDPrimaryResidentMessageRouter alloc] initWithHomeUUID:v9 messageDispatcher:v8 metricsDispatcher:v7];

  return v10;
}

- (void)configurePrimaryResidentMessageRouterWithFactory:(id)a3 metricsDispatcherFactory:(id)a4
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    int v18 = 138543362;
    long long v19 = v11;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Configuring primary resident message router", (uint8_t *)&v18, 0xCu);
  }
  uint64_t v12 = [(HMDHome *)v9 msgDispatcher];
  id v13 = [(HMDHome *)v9 msgDispatcher];

  if (!v13) {
    _HMFPreconditionFailure();
  }
  uint64_t v14 = +[HMDMetricsManager sharedLogEventSubmitter];
  uint64_t v15 = [v7 createPrimaryResidentMessageRouterMetricsDispatcherWithLogEventSubmitter:v14];
  uint64_t v16 = [(HMDHome *)v9 uuid];
  id v17 = [v6 createPrimaryResidentMessageRouterWithHomeUUID:v16 messageDispatcher:v12 metricsDispatcher:v15];

  [v17 setDataSource:v9];
  [(HMDHome *)v9 setPrimaryResidentMessageRouter:v17];
}

- (id)createAccessorySettingsLocalMessageHandlerWithHomeUUID:(id)a3 languageValuesDataProvider:(id)a4
{
  id v5 = a4;
  id v6 = a3;
  id v7 = [[HMDAccessorySettingsLocalMessageHandler alloc] initWithHomeUUID:v6 languageValuesDataProvider:v5];

  return v7;
}

- (id)languageValueList
{
  id v3 = [(HMDHome *)self appleMediaAccessories];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  void v6[2] = __83__HMDHome_UnifiedLanguageValueListSettingDataProviderDataSource__languageValueList__block_invoke;
  v6[3] = &unk_264A1D4E0;
  void v6[4] = self;
  uint64_t v4 = objc_msgSend(v3, "na_flatMap:", v6);

  return v4;
}

id __83__HMDHome_UnifiedLanguageValueListSettingDataProviderDataSource__languageValueList__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v2 fetchedAccessorySettingsSubscriber];
  id v5 = [v3 uuid];

  id v6 = [v4 cachedSettingForAccessory:v5 keyPath:@"root.siri.availableLanguages"];

  id v7 = v6;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v8 = v7;
  }
  else {
    id v8 = 0;
  }
  id v9 = v8;

  uint64_t v10 = [v9 languageValues];

  return v10;
}

- (id)dataProvidersForUnifiedLanguageValueListSettingDataProvider:(id)a3
{
  v5[1] = *MEMORY[0x263EF8340];
  v5[0] = self;
  id v3 = [MEMORY[0x263EFF8C0] arrayWithObjects:v5 count:1];
  return v3;
}

- (Class)walletLogCategory
{
  return (Class)objc_opt_class();
}

- (id)handleRemoveUserUniqueIdentifier:(id)a3 fromAccessory:(id)a4
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = [(HMDHome *)self walletLogCategory];
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    uint64_t v12 = [v7 uuid];
    *(_DWORD *)buf = 138543874;
    __int16 v33 = v11;
    __int16 v34 = 2112;
    id v35 = v6;
    __int16 v36 = 2112;
    uint64_t v37 = v12;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@handleRemoveUserUniqueIdentifier: %@, fromAccessory: %@", buf, 0x20u);
  }
  id v13 = objc_alloc(MEMORY[0x263F42520]);
  uint64_t v14 = [(HMDHome *)self workQueue];
  uint64_t v15 = (void *)[v13 initWithQueue:v14];

  uint64_t v16 = [MEMORY[0x263F42530] untrackedPlaceholderFlow];
  id v17 = [v7 waitForDoorLockClusterObjectWithFlow:v16];
  v30[0] = MEMORY[0x263EF8330];
  v30[1] = 3221225472;
  void v30[2] = __83__HMDHome_AccessoryUserIdentifier__handleRemoveUserUniqueIdentifier_fromAccessory___block_invoke;
  v30[3] = &unk_264A29108;
  id v18 = v6;
  id v31 = v18;
  long long v19 = [v17 inContext:v15 then:v30];
  v27[0] = MEMORY[0x263EF8330];
  v27[1] = 3221225472;
  void v27[2] = __83__HMDHome_AccessoryUserIdentifier__handleRemoveUserUniqueIdentifier_fromAccessory___block_invoke_2;
  void v27[3] = &unk_264A1FE70;
  void v27[4] = self;
  id v28 = v18;
  id v29 = v7;
  v24[0] = MEMORY[0x263EF8330];
  v24[1] = 3221225472;
  void v24[2] = __83__HMDHome_AccessoryUserIdentifier__handleRemoveUserUniqueIdentifier_fromAccessory___block_invoke_135;
  void v24[3] = &unk_264A2BBB8;
  void v24[4] = self;
  id v25 = v28;
  id v26 = v29;
  id v20 = v28;
  id v21 = v29;
  __int16 v22 = [v19 inContext:v15 then:v27 orRecover:v24];

  return v22;
}

uint64_t __83__HMDHome_AccessoryUserIdentifier__handleRemoveUserUniqueIdentifier_fromAccessory___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 removeUserWithUniqueID:*(void *)(a1 + 32)];
  if (v4)
  {
    id v5 = v4;

    return 3;
  }
  else
  {
    uint64_t v7 = _HMFPreconditionFailure();
    return __83__HMDHome_AccessoryUserIdentifier__handleRemoveUserUniqueIdentifier_fromAccessory___block_invoke_2(v7);
  }
}

uint64_t __83__HMDHome_AccessoryUserIdentifier__handleRemoveUserUniqueIdentifier_fromAccessory___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = [*(id *)(a1 + 32) walletLogCategory];
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = [*(id *)(a1 + 48) uuid];
    int v11 = 138543874;
    uint64_t v12 = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    __int16 v15 = 2112;
    uint64_t v16 = v9;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Successfully removed user with userUniqueID: %@, fromAccessory: %@", (uint8_t *)&v11, 0x20u);
  }

  return 1;
}

uint64_t __83__HMDHome_AccessoryUserIdentifier__handleRemoveUserUniqueIdentifier_fromAccessory___block_invoke_135(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = [*(id *)(a1 + 32) walletLogCategory];
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = [*(id *)(a1 + 48) uuid];
    int v14 = 138543874;
    __int16 v15 = v7;
    __int16 v16 = 2112;
    uint64_t v17 = v8;
    __int16 v18 = 2112;
    long long v19 = v9;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to remove user with userUniqueID: %@, fromAccessory: %@", (uint8_t *)&v14, 0x20u);
  }
  id v10 = v3;
  int v11 = v10;
  if (v10)
  {
    id v12 = v10;
  }
  else
  {
    [MEMORY[0x263F087E8] hmfUnspecifiedError];
    objc_claimAutoreleasedReturnValue();
  }

  return 2;
}

- (id)findOrAddRestrictedGuestUserUniqueIdentifier:(id)a3 onAccessory:(id)a4 user:(id)a5 flow:(id)a6
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  int v14 = (void *)MEMORY[0x230FBD990]();
  __int16 v15 = self;
  __int16 v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = HMFGetLogIdentifier();
    __int16 v18 = [v13 UUID];
    long long v19 = [v11 uuid];
    *(_DWORD *)buf = 138544130;
    uint64_t v37 = v17;
    __int16 v38 = 2112;
    uint64_t v39 = v18;
    __int16 v40 = 2112;
    id v41 = v10;
    __int16 v42 = 2112;
    long long v43 = v19;
    _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] findOrAddRestrictedGuestUserUniqueIdentifier: %@ onAccessory: %@", buf, 0x2Au);
  }
  uint64_t v20 = [v11 weekDayScheduleCapacity];
  if ([v20 BOOLValue])
  {
    id v21 = [v11 yearDayScheduleCapacity];
    char v22 = [v21 BOOLValue];
  }
  else
  {
    char v22 = 0;
  }

  id v23 = [v12 restrictedGuestAccessSettings];
  __int16 v24 = [v23 schedule];
  char v25 = [v11 supportsConfiguredSchedule:v24];

  if (v25)
  {
    id v26 = [v11 waitForDoorLockClusterObjectWithFlow:v13];
    v30[0] = MEMORY[0x263EF8330];
    v30[1] = 3221225472;
    void v30[2] = __103__HMDHome_AccessoryUserIdentifier__findOrAddRestrictedGuestUserUniqueIdentifier_onAccessory_user_flow___block_invoke;
    v30[3] = &unk_264A1DA98;
    char v35 = v22;
    void v30[4] = v15;
    id v31 = v13;
    id v32 = v11;
    id v33 = v10;
    id v34 = v12;
    uint64_t v27 = [v26 then:v30];
  }
  else
  {
    id v28 = (void *)MEMORY[0x263F42538];
    id v26 = [MEMORY[0x263F087E8] hmfErrorWithCode:5];
    uint64_t v27 = [v28 futureWithError:v26];
  }

  return v27;
}

uint64_t __103__HMDHome_AccessoryUserIdentifier__findOrAddRestrictedGuestUserUniqueIdentifier_onAccessory_user_flow___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = v3;
  if (*(unsigned char *)(a1 + 72))
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = *(id *)(a1 + 32);
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      id v9 = [*(id *)(a1 + 40) UUID];
      id v10 = [*(id *)(a1 + 48) uuid];
      uint64_t v11 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138544130;
      id v26 = v8;
      __int16 v27 = 2112;
      id v28 = v9;
      __int16 v29 = 2112;
      long long v30 = v10;
      __int16 v31 = 2112;
      uint64_t v32 = v11;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Accessory[%@] supports schedules, auditing schedules for userUniqueID[%@]", buf, 0x2Au);
    }
    uint64_t v12 = *(void *)(a1 + 56);
    id v13 = [*(id *)(a1 + 64) restrictedGuestAccessSettings];
    int v14 = [v13 matterWeekDaySchedules];
    __int16 v15 = [*(id *)(a1 + 64) restrictedGuestAccessSettings];
    __int16 v16 = [v15 matterYearDaySchedules];
    uint64_t v17 = [v4 findOrAddUserWithUniqueID:v12 withWeekDaySchedules:v14 andYearDaySchedules:v16 flow:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v17 = [v3 findOrAddUserWithUniqueID:*(void *)(a1 + 56) flow:*(void *)(a1 + 40)];
  }
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 3221225472;
  v22[2] = __103__HMDHome_AccessoryUserIdentifier__findOrAddRestrictedGuestUserUniqueIdentifier_onAccessory_user_flow___block_invoke_133;
  void v22[3] = &unk_264A1DA70;
  __int16 v18 = *(void **)(a1 + 40);
  void v22[4] = *(void *)(a1 + 32);
  id v23 = v18;
  id v24 = *(id *)(a1 + 56);
  id v19 = [v17 then:v22];
  if (!v19) {
    _HMFPreconditionFailure();
  }
  uint64_t v20 = v19;

  return 3;
}

uint64_t __103__HMDHome_AccessoryUserIdentifier__findOrAddRestrictedGuestUserUniqueIdentifier_onAccessory_user_flow___block_invoke_133(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [v3 existingUser];

  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = HMFGetOSLogHandle();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v8)
    {
      id v9 = HMFGetLogIdentifier();
      id v10 = [*(id *)(a1 + 40) UUID];
      uint64_t v11 = [v3 existingUser];
      uint64_t v12 = [v11 userIndex];
      uint64_t v13 = *(void *)(a1 + 48);
      int v20 = 138544130;
      id v21 = v9;
      __int16 v22 = 2112;
      id v23 = v10;
      __int16 v24 = 2112;
      char v25 = v12;
      __int16 v26 = 2112;
      uint64_t v27 = v13;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Found userIndex: %@ for userUniqueID: %@", (uint8_t *)&v20, 0x2Au);
    }
    int v14 = [v3 existingUser];
    [v14 userIndex];
    objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v8)
    {
      __int16 v15 = HMFGetLogIdentifier();
      __int16 v16 = [*(id *)(a1 + 40) UUID];
      uint64_t v17 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v3, "newUserSlot"));
      uint64_t v18 = *(void *)(a1 + 48);
      int v20 = 138544130;
      id v21 = v15;
      __int16 v22 = 2112;
      id v23 = v16;
      __int16 v24 = 2112;
      char v25 = v17;
      __int16 v26 = 2112;
      uint64_t v27 = v18;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Created new user with userIndex: %@ for userUniqueID: %@", (uint8_t *)&v20, 0x2Au);
    }
    objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v3, "newUserSlot"));
    objc_claimAutoreleasedReturnValue();
  }

  return 1;
}

- (id)handleFindOrAddUserUniqueIdentifier:(id)a3 onAccessory:(id)a4 flow:(id)a5
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = (void *)MEMORY[0x230FBD990]();
  uint64_t v12 = self;
  uint64_t v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v14 = HMFGetLogIdentifier();
    __int16 v15 = [v10 UUID];
    __int16 v16 = [v9 uuid];
    *(_DWORD *)buf = 138544130;
    uint64_t v32 = v14;
    __int16 v33 = 2112;
    id v34 = v15;
    __int16 v35 = 2112;
    id v36 = v8;
    __int16 v37 = 2112;
    __int16 v38 = v16;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] handleFindOrAddUserUniqueIdentifier: %@ onAccessory: %@", buf, 0x2Au);
  }
  uint64_t v17 = [v9 waitForDoorLockClusterObjectWithFlow:v10];
  v28[0] = MEMORY[0x263EF8330];
  v28[1] = 3221225472;
  void v28[2] = __89__HMDHome_AccessoryUserIdentifier__handleFindOrAddUserUniqueIdentifier_onAccessory_flow___block_invoke;
  void v28[3] = &unk_264A28E38;
  id v18 = v8;
  id v29 = v18;
  id v19 = v10;
  id v30 = v19;
  int v20 = [v17 then:v28];
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 3221225472;
  void v25[2] = __89__HMDHome_AccessoryUserIdentifier__handleFindOrAddUserUniqueIdentifier_onAccessory_flow___block_invoke_2;
  v25[3] = &unk_264A1DA70;
  void v25[4] = v12;
  id v26 = v19;
  id v27 = v18;
  id v21 = v18;
  id v22 = v19;
  id v23 = [v20 then:v25];

  return v23;
}

uint64_t __89__HMDHome_AccessoryUserIdentifier__handleFindOrAddUserUniqueIdentifier_onAccessory_flow___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 findOrAddUserWithUniqueID:*(void *)(a1 + 32) flow:*(void *)(a1 + 40)];
  if (v4)
  {
    id v5 = v4;

    return 3;
  }
  else
  {
    uint64_t v7 = _HMFPreconditionFailure();
    return __89__HMDHome_AccessoryUserIdentifier__handleFindOrAddUserUniqueIdentifier_onAccessory_flow___block_invoke_2(v7);
  }
}

uint64_t __89__HMDHome_AccessoryUserIdentifier__handleFindOrAddUserUniqueIdentifier_onAccessory_flow___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [v3 existingUser];

  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = HMFGetOSLogHandle();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v8)
    {
      id v9 = HMFGetLogIdentifier();
      id v10 = [*(id *)(a1 + 40) UUID];
      uint64_t v11 = [v3 existingUser];
      uint64_t v12 = [v11 userIndex];
      uint64_t v13 = *(void *)(a1 + 48);
      int v20 = 138544130;
      id v21 = v9;
      __int16 v22 = 2112;
      id v23 = v10;
      __int16 v24 = 2112;
      char v25 = v12;
      __int16 v26 = 2112;
      uint64_t v27 = v13;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Found userIndex: %@ for userUniqueID: %@", (uint8_t *)&v20, 0x2Au);
    }
    int v14 = [v3 existingUser];
    [v14 userIndex];
    objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v8)
    {
      __int16 v15 = HMFGetLogIdentifier();
      __int16 v16 = [*(id *)(a1 + 40) UUID];
      uint64_t v17 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v3, "newUserSlot"));
      uint64_t v18 = *(void *)(a1 + 48);
      int v20 = 138544130;
      id v21 = v15;
      __int16 v22 = 2112;
      id v23 = v16;
      __int16 v24 = 2112;
      char v25 = v17;
      __int16 v26 = 2112;
      uint64_t v27 = v18;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Found userIndex: %@ for userUniqueID: %@", (uint8_t *)&v20, 0x2Au);
    }
    objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v3, "newUserSlot"));
    objc_claimAutoreleasedReturnValue();
  }

  return 1;
}

- (id)findUserSlotForUserUniqueIdentifier:(id)a3 onAccessory:(id)a4
{
  id v5 = a3;
  id v6 = (void *)MEMORY[0x263F42530];
  id v7 = a4;
  BOOL v8 = [v6 untrackedPlaceholderFlow];
  id v9 = [v7 waitForDoorLockClusterObjectWithFlow:v8];

  id v10 = [v9 naFuture];
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  void v14[2] = __84__HMDHome_AccessoryUserIdentifier__findUserSlotForUserUniqueIdentifier_onAccessory___block_invoke;
  v14[3] = &unk_264A2D928;
  id v15 = v5;
  id v11 = v5;
  uint64_t v12 = [v10 flatMap:v14];

  return v12;
}

id __84__HMDHome_AccessoryUserIdentifier__findUserSlotForUserUniqueIdentifier_onAccessory___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)MEMORY[0x263F42530];
  id v4 = a2;
  id v5 = [v3 untrackedPlaceholderFlow];
  id v6 = [v4 findUserOrAvailableSlotWithUserUniqueID:v2 flow:v5];

  id v7 = [v6 naFuture];
  BOOL v8 = [v7 flatMap:&__block_literal_global_129];

  return v8;
}

id __84__HMDHome_AccessoryUserIdentifier__findUserSlotForUserUniqueIdentifier_onAccessory___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 user];

  id v4 = (void *)MEMORY[0x263F58190];
  if (v3)
  {
    id v5 = [v2 user];
    id v6 = [v5 userIndex];
    id v7 = [v4 futureWithResult:v6];
  }
  else
  {
    id v5 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    id v7 = [v4 futureWithError:v5];
  }

  return v7;
}

- (id)createUserUniqueIDForAccessories
{
  id v2 = [(HMDHome *)self uniqueIDsOfAllUsers];
  id v3 = [(id)objc_opt_class() createUserUniqueIDForAccessoriesWithoutDuplicatingExistingIDs:v2];

  return v3;
}

- (id)saveUserUniqueID:(id)a3 ForGuestAccessCode:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v26 = 0;
  BOOL v8 = [MEMORY[0x263F42538] futureWithPromise:&v26];
  id v9 = [(HMDHome *)self backingStore];
  id v10 = [v9 context];

  id v11 = [HMDHomeAccessCodeModel alloc];
  uint64_t v12 = [(HMDHome *)self uuid];
  uint64_t v13 = [(HMDHomeAccessCodeModel *)v11 initWithHomeUUID:v12 value:v7 label:&stru_26E2EB898];

  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 3221225472;
  void v19[2] = __72__HMDHome_AccessoryUserIdentifier__saveUserUniqueID_ForGuestAccessCode___block_invoke;
  void v19[3] = &unk_264A28EB0;
  int v20 = v13;
  id v21 = self;
  id v22 = v7;
  id v23 = v26;
  id v24 = v6;
  id v25 = v10;
  id v14 = v10;
  id v15 = v6;
  id v16 = v7;
  uint64_t v17 = v13;
  [v14 performBlock:v19];

  return v8;
}

void __72__HMDHome_AccessoryUserIdentifier__saveUserUniqueID_ForGuestAccessCode___block_invoke(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) uuid];
  id v3 = +[HMCContext findGuestAccessCodeWithModelID:v2];

  if (!v3)
  {
    int v20 = (void *)MEMORY[0x230FBD990]();
    id v21 = [*(id *)(a1 + 40) walletLogCategory];
    id v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      id v23 = HMFGetLogIdentifier();
      id v24 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      __int16 v31 = v23;
      __int16 v32 = 2112;
      __int16 v33 = v24;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@MKFGuestAccessCode model not found, failed to save unique ID for accessCode: %@", buf, 0x16u);
    }
    id v25 = *(void **)(a1 + 56);
    id v12 = [MEMORY[0x263F087E8] hmfErrorWithCode:15];
    id v26 = v25;
    goto LABEL_14;
  }
  id v4 = (void *)MEMORY[0x230FBD990]([v3 setUserUniqueIDForAccessories:*(void *)(a1 + 64)]);
  id v5 = [*(id *)(a1 + 40) walletLogCategory];
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    BOOL v8 = [*(id *)(a1 + 72) managedObjectContext];
    [v8 hasChanges];
    id v9 = HMFBooleanToString();
    *(_DWORD *)buf = 138543618;
    __int16 v31 = v7;
    __int16 v32 = 2112;
    __int16 v33 = v9;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@moc has changes %@", buf, 0x16u);
  }
  id v10 = *(void **)(a1 + 72);
  id v29 = 0;
  char v11 = [v10 save:&v29];
  id v12 = v29;
  uint64_t v13 = (void *)MEMORY[0x230FBD990]();
  id v14 = [*(id *)(a1 + 40) walletLogCategory];
  id v15 = HMFGetOSLogHandle();
  BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
  if ((v11 & 1) == 0)
  {
    if (v16)
    {
      uint64_t v27 = HMFGetLogIdentifier();
      uint64_t v28 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      __int16 v31 = v27;
      __int16 v32 = 2112;
      __int16 v33 = v28;
      __int16 v34 = 2112;
      id v35 = v12;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Failed to save userUniqueID for guest access code: %@ with error: %@", buf, 0x20u);
    }
    id v26 = *(void **)(a1 + 56);
LABEL_14:
    [v26 rejectWithError:v12];
    goto LABEL_15;
  }
  if (v16)
  {
    uint64_t v17 = HMFGetLogIdentifier();
    uint64_t v18 = *(void **)(a1 + 48);
    id v19 = *(void **)(a1 + 64);
    *(_DWORD *)buf = 138543874;
    __int16 v31 = v17;
    __int16 v32 = 2112;
    __int16 v33 = v18;
    __int16 v34 = 2112;
    id v35 = v19;
    _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Successfully saved userUniqueID for guest access code: %@ userUniqueID: %@", buf, 0x20u);
  }
  [*(id *)(a1 + 56) fulfillWithNoValue];
LABEL_15:
}

- (void)getOrCreateUniqueIDForAccessoriesForUser:(id)a3 flow:(id)a4 completionHandler:(id)a5
{
  id v8 = a5;
  id v9 = [(HMDHome *)self getOrCreateUniqueIDForAccessoriesForUser:a3 flow:a4];
  [v9 getResultWithCompletion:v8];
}

- (id)getOrCreateUniqueIDForAccessoriesForUser:(id)a3 flow:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v21 = 0;
  id v8 = [MEMORY[0x263F42538] futureWithPromise:&v21];
  id v9 = [(HMDHome *)self backingStore];
  id v10 = [v9 context];

  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  void v15[2] = __82__HMDHome_AccessoryUserIdentifier__getOrCreateUniqueIDForAccessoriesForUser_flow___block_invoke;
  v15[3] = &unk_264A2E908;
  id v16 = v6;
  id v17 = v10;
  uint64_t v18 = self;
  id v19 = v7;
  id v20 = v21;
  id v11 = v7;
  id v12 = v10;
  id v13 = v6;
  [v12 performBlock:v15];

  return v8;
}

void __82__HMDHome_AccessoryUserIdentifier__getOrCreateUniqueIDForAccessoriesForUser_flow___block_invoke(id *a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  id v2 = [a1[4] uuid];
  id v3 = [a1[5] managedObjectContext];
  id v4 = +[_MKFHome findHomeMemberWithUUID:v2 context:v3];

  if (!v4)
  {
    uint64_t v24 = MEMORY[0x230FBD990]();
    id v25 = a1[6];
    id v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = HMFGetLogIdentifier();
      uint64_t v28 = [a1[7] UUID];
      id v29 = [a1[4] uuid];
      *(_DWORD *)buf = 138543874;
      long long v45 = v27;
      __int16 v46 = 2112;
      long long v47 = v28;
      __int16 v48 = 2112;
      uint64_t v49 = (uint64_t)v29;
      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to find home member with UUID: %@", buf, 0x20u);
    }
    id v30 = (void *)v24;
    goto LABEL_20;
  }
  id v5 = [v4 uniqueIDForAccessories];
  id v6 = v5;
  if (!v5 || ([v5 isEqualToNumber:&unk_26E4715C0] & 1) != 0)
  {
    uint64_t v7 = [a1[6] createUserUniqueIDForAccessories];

    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = a1[6];
    id v10 = HMFGetOSLogHandle();
    id v11 = v10;
    if (v7)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v12 = HMFGetLogIdentifier();
        id v13 = [a1[7] UUID];
        id v14 = [a1[4] uuid];
        *(_DWORD *)buf = 138544130;
        long long v45 = v12;
        __int16 v46 = 2112;
        long long v47 = v13;
        __int16 v48 = 2112;
        uint64_t v49 = v7;
        __int16 v50 = 2112;
        uint64_t v51 = (uint64_t)v14;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Created uniqueIDForAccessories:%@ for user:%@", buf, 0x2Au);
      }
      [v4 setUniqueIDForAccessories:v7];
      id v15 = a1[5];
      id v43 = 0;
      [v15 save:&v43];
      id v16 = v43;
      id v17 = (void *)MEMORY[0x230FBD990]();
      id v18 = a1[6];
      id v19 = HMFGetOSLogHandle();
      id v20 = v19;
      if (v16)
      {
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          id v21 = HMFGetLogIdentifier();
          id v22 = [a1[7] UUID];
          id v23 = [a1[4] uuid];
          *(_DWORD *)buf = 138544130;
          long long v45 = v21;
          __int16 v46 = 2112;
          long long v47 = v22;
          __int16 v48 = 2112;
          uint64_t v49 = (uint64_t)v23;
          __int16 v50 = 2112;
          uint64_t v51 = (uint64_t)v16;
          _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to save userUniqueID for user: %@ with error: %@", buf, 0x2Au);
        }
        [a1[8] rejectWithError:v16];
      }
      else
      {
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          __int16 v40 = HMFGetLogIdentifier();
          id v41 = [a1[7] UUID];
          __int16 v42 = [a1[4] uuid];
          *(_DWORD *)buf = 138544130;
          long long v45 = v40;
          __int16 v46 = 2112;
          long long v47 = v41;
          __int16 v48 = 2112;
          uint64_t v49 = (uint64_t)v42;
          __int16 v50 = 2112;
          uint64_t v51 = v7;
          _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Successfully saved userUniqueID for user: %@ userUniqueID: %@", buf, 0x2Au);
        }
        [a1[8] fulfillWithValue:v7];
      }

      id v6 = (void *)v7;
      goto LABEL_25;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = HMFGetLogIdentifier();
      __int16 v37 = [a1[7] UUID];
      __int16 v38 = [a1[4] uuid];
      *(_DWORD *)buf = 138543874;
      long long v45 = v36;
      __int16 v46 = 2112;
      long long v47 = v37;
      __int16 v48 = 2112;
      uint64_t v49 = (uint64_t)v38;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to create uniqueID for user: %@", buf, 0x20u);
    }
    id v30 = v8;
LABEL_20:
    id v39 = a1[8];
    id v6 = [MEMORY[0x263F087E8] hmfErrorWithCode:15];
    [v39 rejectWithError:v6];
    goto LABEL_25;
  }
  __int16 v31 = (void *)MEMORY[0x230FBD990]();
  id v32 = a1[6];
  __int16 v33 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    __int16 v34 = HMFGetLogIdentifier();
    id v35 = [a1[7] UUID];
    *(_DWORD *)buf = 138543874;
    long long v45 = v34;
    __int16 v46 = 2112;
    long long v47 = v35;
    __int16 v48 = 2112;
    uint64_t v49 = (uint64_t)v6;
    _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Found existing userUniqueID: %@", buf, 0x20u);
  }
  [a1[8] fulfillWithValue:v6];
LABEL_25:
}

- (id)uniqueIDsOfAllUsers
{
  id v3 = [MEMORY[0x263EFF980] array];
  id v4 = [(HMDHome *)self backingStore];
  id v5 = [v4 context];
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  id v10[2] = __55__HMDHome_AccessoryUserIdentifier__uniqueIDsOfAllUsers__block_invoke;
  void v10[3] = &unk_264A2F820;
  void v10[4] = self;
  id v6 = v3;
  id v11 = v6;
  [v5 unsafeSynchronousBlock:v10];

  uint64_t v7 = v11;
  id v8 = v6;

  return v8;
}

void __55__HMDHome_AccessoryUserIdentifier__uniqueIDsOfAllUsers__block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) uuid];
  id v3 = +[HMCContext findHomeWithModelID:v2];

  if (v3)
  {
    id v4 = [v3 homeMembers];
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    void v15[2] = __55__HMDHome_AccessoryUserIdentifier__uniqueIDsOfAllUsers__block_invoke_118;
    v15[3] = &unk_264A1D9E0;
    id v5 = *(void **)(a1 + 40);
    void v15[4] = *(void *)(a1 + 32);
    id v16 = v5;
    objc_msgSend(v4, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v15);

    id v6 = [v3 guestAccessCodes];
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 3221225472;
    void v13[2] = __55__HMDHome_AccessoryUserIdentifier__uniqueIDsOfAllUsers__block_invoke_120;
    v13[3] = &unk_264A1DA08;
    uint64_t v7 = *(void **)(a1 + 40);
    void v13[4] = *(void *)(a1 + 32);
    id v14 = v7;
    objc_msgSend(v6, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v13);
  }
  else
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = [*(id *)(a1 + 32) walletLogCategory];
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = HMFGetLogIdentifier();
      id v12 = [*(id *)(a1 + 32) uuid];
      *(_DWORD *)buf = 138543618;
      id v18 = v11;
      __int16 v19 = 2112;
      id v20 = v12;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the mkfHome with UUID: %@", buf, 0x16u);
    }
  }
}

void __55__HMDHome_AccessoryUserIdentifier__uniqueIDsOfAllUsers__block_invoke_118(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = [*(id *)(a1 + 32) walletLogCategory];
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    id v8 = [v3 modelID];
    id v9 = [v3 uniqueIDForAccessories];
    int v13 = 138543874;
    id v14 = v7;
    __int16 v15 = 2112;
    id v16 = v8;
    __int16 v17 = 2112;
    id v18 = v9;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@HomeMember: %@, uniqueID: %@", (uint8_t *)&v13, 0x20u);
  }
  id v10 = [v3 uniqueIDForAccessories];

  if (v10)
  {
    id v11 = *(void **)(a1 + 40);
    id v12 = [v3 uniqueIDForAccessories];
    [v11 addObject:v12];
  }
}

void __55__HMDHome_AccessoryUserIdentifier__uniqueIDsOfAllUsers__block_invoke_120(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = [*(id *)(a1 + 32) walletLogCategory];
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    id v8 = [v3 label];
    id v9 = [v3 accessCode];
    id v10 = [v3 userUniqueIDForAccessories];
    int v14 = 138544130;
    __int16 v15 = v7;
    __int16 v16 = 2112;
    __int16 v17 = v8;
    __int16 v18 = 2112;
    uint64_t v19 = v9;
    __int16 v20 = 2112;
    uint64_t v21 = v10;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Guest: %@: %@, uniqueID: %@", (uint8_t *)&v14, 0x2Au);
  }
  id v11 = [v3 userUniqueIDForAccessories];

  if (v11)
  {
    id v12 = *(void **)(a1 + 40);
    int v13 = [v3 userUniqueIDForAccessories];
    [v12 addObject:v13];
  }
}

- (id)removeGuestAccessCode:(id)a3 fromAccessory:(id)a4
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  if ([v7 supportsCHIP])
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = [(HMDHome *)self walletLogCategory];
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = HMFGetLogIdentifier();
      id v12 = [v7 uuid];
      int v16 = 138543618;
      __int16 v17 = v11;
      __int16 v18 = 2112;
      uint64_t v19 = v12;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Not a matter accessory, cannot remove user from accessory: %@", (uint8_t *)&v16, 0x16u);
    }
    int v13 = [MEMORY[0x263F42538] futureWithNoValue];
  }
  else
  {
    int v14 = [(HMDHome *)self userUniqueIDForGuestAccessCode:v6];
    if (v14) {
      [(HMDHome *)self handleRemoveUserUniqueIdentifier:v14 fromAccessory:v7];
    }
    else {
    int v13 = [MEMORY[0x263F42538] futureWithNoValue];
    }
  }
  return v13;
}

- (id)userUniqueIDForGuestAccessCode:(id)a3
{
  id v4 = a3;
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x3032000000;
  int v16 = __Block_byref_object_copy__88870;
  __int16 v17 = __Block_byref_object_dispose__88871;
  id v18 = 0;
  id v5 = [(HMDHome *)self backingStore];
  id v6 = [v5 context];
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  id v10[2] = __67__HMDHome_AccessoryUserIdentifier__userUniqueIDForGuestAccessCode___block_invoke;
  void v10[3] = &unk_264A2F698;
  void v10[4] = self;
  id v7 = v4;
  id v11 = v7;
  id v12 = &v13;
  [v6 unsafeSynchronousBlock:v10];

  id v8 = (id)v14[5];
  _Block_object_dispose(&v13, 8);

  return v8;
}

void __67__HMDHome_AccessoryUserIdentifier__userUniqueIDForGuestAccessCode___block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v2 = [HMDHomeAccessCodeModel alloc];
  id v3 = [*(id *)(a1 + 32) uuid];
  id v4 = [(HMDHomeAccessCodeModel *)v2 initWithHomeUUID:v3 value:*(void *)(a1 + 40) label:&stru_26E2EB898];

  id v5 = [(HMDBackingStoreModelObject *)v4 uuid];
  id v6 = +[HMCContext findGuestAccessCodeWithModelID:v5];

  if (v6)
  {
    uint64_t v7 = [v6 userUniqueIDForAccessories];
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
  else
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = [*(id *)(a1 + 32) walletLogCategory];
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 138543618;
      int v16 = v13;
      __int16 v17 = 2112;
      uint64_t v18 = v14;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@MKFGuestAccessCode model not found, returning nil unique ID for accessCode: %@", (uint8_t *)&v15, 0x16u);
    }
  }
}

- (id)findOrAddUserUniqueIDForGuestAccessCode:(id)a3 onAccessory:(id)a4
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = [(HMDHome *)self walletLogCategory];
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    id v12 = [v7 uuid];
    *(_DWORD *)buf = 138543874;
    __int16 v40 = v11;
    __int16 v41 = 2112;
    id v42 = v6;
    __int16 v43 = 2112;
    id v44 = v12;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@findOrAddUserUniqueIDForGuestAccessCode: %@ onAccessory: %@", buf, 0x20u);
  }
  if (([v7 supportsCHIP] & 1) == 0)
  {
    __int16 v17 = (void *)MEMORY[0x230FBD990]();
    uint64_t v18 = [(HMDHome *)self walletLogCategory];
    uint64_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = HMFGetLogIdentifier();
      uint64_t v21 = [v7 uuid];
      *(_DWORD *)buf = 138543618;
      __int16 v40 = v20;
      __int16 v41 = 2112;
      id v42 = v21;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Not a matter accessory, cannot find or add homeAccessCode on accessory: %@", buf, 0x16u);
    }
    uint64_t v22 = (void *)MEMORY[0x263F42538];
    id v23 = (void *)MEMORY[0x263F087E8];
    uint64_t v24 = 5;
    goto LABEL_9;
  }
  uint64_t v13 = [(HMDHome *)self userUniqueIDForGuestAccessCode:v6];
  if (!v13)
  {
    id v25 = [(HMDHome *)self createUserUniqueIDForAccessories];
    id v26 = (void *)MEMORY[0x230FBD990]();
    uint64_t v27 = [(HMDHome *)self walletLogCategory];
    uint64_t v28 = HMFGetOSLogHandle();
    id v29 = v28;
    if (v25)
    {
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        id v30 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        __int16 v40 = v30;
        __int16 v41 = 2112;
        id v42 = v25;
        __int16 v43 = 2112;
        id v44 = v6;
        _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Created uniqueIDForAccessories:%@ for guest access code: %@", buf, 0x20u);
      }
      id v31 = objc_alloc(MEMORY[0x263F42520]);
      id v32 = [(HMDHome *)self workQueue];
      int v15 = (void *)[v31 initWithQueue:v32];

      __int16 v33 = [(HMDHome *)self saveUserUniqueID:v25 ForGuestAccessCode:v6];
      v36[0] = MEMORY[0x263EF8330];
      v36[1] = 3221225472;
      void v36[2] = __88__HMDHome_AccessoryUserIdentifier__findOrAddUserUniqueIDForGuestAccessCode_onAccessory___block_invoke;
      void v36[3] = &unk_264A2A738;
      void v36[4] = self;
      id v37 = v25;
      id v38 = v7;
      id v14 = v25;
      int v16 = [v33 inContext:v15 then:v36 orRecover:&__block_literal_global_114_88877];

      goto LABEL_14;
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      id v35 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v40 = v35;
      __int16 v41 = 2112;
      id v42 = v6;
      _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, "%{public}@Failed to create uniqueID for guest access code: %@", buf, 0x16u);
    }
    uint64_t v22 = (void *)MEMORY[0x263F42538];
    id v23 = (void *)MEMORY[0x263F087E8];
    uint64_t v24 = 15;
LABEL_9:
    id v14 = [v23 hmfErrorWithCode:v24];
    int v16 = [v22 futureWithError:v14];
    goto LABEL_15;
  }
  id v14 = (id)v13;
  int v15 = [MEMORY[0x263F42530] untrackedPlaceholderFlow];
  int v16 = [(HMDHome *)self handleFindOrAddUserUniqueIdentifier:v14 onAccessory:v7 flow:v15];
LABEL_14:

LABEL_15:
  return v16;
}

uint64_t __88__HMDHome_AccessoryUserIdentifier__findOrAddUserUniqueIDForGuestAccessCode_onAccessory___block_invoke(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  id v7 = [MEMORY[0x263F42530] untrackedPlaceholderFlow];
  id v8 = [v4 handleFindOrAddUserUniqueIdentifier:v5 onAccessory:v6 flow:v7];
  if (v8)
  {
    id v9 = v8;

    return 3;
  }
  else
  {
    uint64_t v11 = _HMFPreconditionFailure();
    return __88__HMDHome_AccessoryUserIdentifier__findOrAddUserUniqueIDForGuestAccessCode_onAccessory___block_invoke_2(v11);
  }
}

uint64_t __88__HMDHome_AccessoryUserIdentifier__findOrAddUserUniqueIDForGuestAccessCode_onAccessory___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x263F42538] futureWithError:v2];
  if (v3)
  {
    id v4 = v3;

    return 3;
  }
  else
  {
    uint64_t v6 = (HMDHome *)_HMFPreconditionFailure();
    return (uint64_t)[(HMDHome *)v6 removeUser:v8 fromAccessory:v9];
  }
}

- (id)removeUser:(id)a3 fromAccessory:(id)a4
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = [(HMDHome *)self walletLogCategory];
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    id v12 = [v6 uuid];
    uint64_t v13 = [v7 uuid];
    int v27 = 138543874;
    uint64_t v28 = v11;
    __int16 v29 = 2112;
    id v30 = v12;
    __int16 v31 = 2112;
    id v32 = v13;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Removing user from matter accessory. user: %@, accessory: %@", (uint8_t *)&v27, 0x20u);
  }
  if ([v7 supportsCHIP])
  {
    id v14 = [v6 uniqueIDForAccessories];
    if (v14)
    {
      uint64_t v15 = [(HMDHome *)self handleRemoveUserUniqueIdentifier:v14 fromAccessory:v7];
    }
    else
    {
      uint64_t v22 = (void *)MEMORY[0x230FBD990]();
      id v23 = [(HMDHome *)self walletLogCategory];
      uint64_t v24 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        id v25 = HMFGetLogIdentifier();
        int v27 = 138543362;
        uint64_t v28 = v25;
        _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@User does not have uniqueIDForAccessories, so nothing to do", (uint8_t *)&v27, 0xCu);
      }
      uint64_t v15 = [MEMORY[0x263F42538] futureWithNoValue];
    }
    uint64_t v21 = (void *)v15;
  }
  else
  {
    int v16 = (void *)MEMORY[0x230FBD990]();
    __int16 v17 = [(HMDHome *)self walletLogCategory];
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      uint64_t v20 = [v7 uuid];
      int v27 = 138543618;
      uint64_t v28 = v19;
      __int16 v29 = 2112;
      id v30 = v20;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Not a matter accessory, cannot remove user from accessory: %@", (uint8_t *)&v27, 0x16u);
    }
    uint64_t v21 = [MEMORY[0x263F42538] futureWithNoValue];
  }

  return v21;
}

- (id)removeUserFromMatterAccessories:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x263F42538];
  id v6 = [(HMDHome *)self matterAccessories];
  uint64_t v11 = MEMORY[0x263EF8330];
  uint64_t v12 = 3221225472;
  uint64_t v13 = __68__HMDHome_AccessoryUserIdentifier__removeUserFromMatterAccessories___block_invoke;
  id v14 = &unk_264A1D9B8;
  uint64_t v15 = self;
  id v16 = v4;
  id v7 = v4;
  id v8 = objc_msgSend(v6, "na_map:", &v11);
  id v9 = objc_msgSend(v5, "allSettled:", v8, v11, v12, v13, v14, v15);

  return v9;
}

id __68__HMDHome_AccessoryUserIdentifier__removeUserFromMatterAccessories___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) removeUser:*(void *)(a1 + 40) fromAccessory:v5];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

- (id)removeUsersFromAccessory:(id)a3
{
  id v4 = a3;
  id v5 = (void *)MEMORY[0x263F42538];
  id v6 = [(HMDHome *)self users];
  uint64_t v11 = MEMORY[0x263EF8330];
  uint64_t v12 = 3221225472;
  uint64_t v13 = __61__HMDHome_AccessoryUserIdentifier__removeUsersFromAccessory___block_invoke;
  id v14 = &unk_264A1D990;
  uint64_t v15 = self;
  id v16 = v4;
  id v7 = v4;
  id v8 = objc_msgSend(v6, "na_map:", &v11);
  id v9 = objc_msgSend(v5, "allSettled:", v8, v11, v12, v13, v14, v15);

  return v9;
}

uint64_t __61__HMDHome_AccessoryUserIdentifier__removeUsersFromAccessory___block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) removeUser:a2 fromAccessory:*(void *)(a1 + 40)];
}

- (id)findOrAddUser:(id)a3 onAccessory:(id)a4 didRedispatch:(BOOL)a5 flow:(id)a6
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  id v9 = a3;
  id v10 = a4;
  id v11 = a6;
  uint64_t v12 = (void *)MEMORY[0x230FBD990]();
  uint64_t v13 = self;
  id v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = HMFGetLogIdentifier();
    id v16 = [v11 UUID];
    [v9 uuid];
    id v35 = v11;
    v18 = id v17 = v9;
    uint64_t v19 = [v10 uuid];
    uint64_t v20 = HMFBooleanToString();
    *(_DWORD *)buf = 138544386;
    id v42 = v15;
    __int16 v43 = 2112;
    id v44 = v16;
    __int16 v45 = 2112;
    __int16 v46 = v18;
    __int16 v47 = 2112;
    __int16 v48 = v19;
    __int16 v49 = 2112;
    __int16 v50 = v20;
    _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] findOrAddUser: %@ onAccessory: %@, didRedispatch: %@", buf, 0x34u);

    id v9 = v17;
    id v11 = v35;
  }
  if ([v10 supportsCHIP])
  {
    id v21 = objc_alloc(MEMORY[0x263F42520]);
    uint64_t v22 = [(HMDHome *)v13 workQueue];
    id v23 = (void *)[v21 initWithQueue:v22];

    uint64_t v24 = [(HMDHome *)v13 getOrCreateUniqueIDForAccessoriesForUser:v9 flow:v11];
    v36[0] = MEMORY[0x263EF8330];
    v36[1] = 3221225472;
    void v36[2] = __81__HMDHome_AccessoryUserIdentifier__findOrAddUser_onAccessory_didRedispatch_flow___block_invoke;
    void v36[3] = &unk_264A222A0;
    id v37 = v9;
    id v38 = v13;
    id v39 = v10;
    id v40 = v11;
    id v25 = [v24 inContext:v23 then:v36 orRecover:&__block_literal_global_107_88888];
  }
  else
  {
    id v26 = (void *)MEMORY[0x230FBD990]();
    int v27 = v13;
    uint64_t v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      __int16 v29 = HMFGetLogIdentifier();
      id v30 = [v11 UUID];
      __int16 v31 = [v10 uuid];
      [v10 supportsCHIP];
      id v32 = HMFBooleanToString();
      *(_DWORD *)buf = 138544130;
      id v42 = v29;
      __int16 v43 = 2112;
      id v44 = v30;
      __int16 v45 = 2112;
      __int16 v46 = v31;
      __int16 v47 = 2112;
      __int16 v48 = v32;
      _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Not a matter accessory, cannot find or add user on accessory: %@, supportsCHIP: %@", buf, 0x2Au);
    }
    uint64_t v33 = (void *)MEMORY[0x263F42538];
    id v23 = [MEMORY[0x263F087E8] hmfErrorWithCode:5];
    id v25 = [v33 futureWithError:v23];
  }

  return v25;
}

uint64_t __81__HMDHome_AccessoryUserIdentifier__findOrAddUser_onAccessory_didRedispatch_flow___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [*(id *)(a1 + 32) isRestrictedGuest];
  id v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  if (v4) {
    [v5 findOrAddRestrictedGuestUserUniqueIdentifier:v3 onAccessory:v6 user:*(void *)(a1 + 32) flow:*(void *)(a1 + 56)];
  }
  else {
  id v7 = [v5 handleFindOrAddUserUniqueIdentifier:v3 onAccessory:v6 flow:*(void *)(a1 + 56)];
  }
  id v8 = v7;
  if (v7)
  {

    return 3;
  }
  else
  {
    uint64_t v10 = _HMFPreconditionFailure();
    return __81__HMDHome_AccessoryUserIdentifier__findOrAddUser_onAccessory_didRedispatch_flow___block_invoke_2(v10);
  }
}

uint64_t __81__HMDHome_AccessoryUserIdentifier__findOrAddUser_onAccessory_didRedispatch_flow___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x263F42538] futureWithError:v2];
  if (v3)
  {
    int v4 = v3;

    return 3;
  }
  else
  {
    uint64_t v6 = (HMDHome *)_HMFPreconditionFailure();
    return (uint64_t)[(HMDHome *)v6 findOrAddUser:v8 onAccessory:v9 flow:v10];
  }
}

- (id)findOrAddUser:(id)a3 onAccessory:(id)a4 flow:(id)a5
{
  return [(HMDHome *)self findOrAddUser:a3 onAccessory:a4 didRedispatch:0 flow:a5];
}

- (id)findOrAddUserIndexForUserUUID:(id)a3 guestName:(id)a4 accessory:(id)a5 flow:(id)a6
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  unint64_t v10 = (unint64_t)a3;
  unint64_t v11 = (unint64_t)a4;
  id v12 = a5;
  id v13 = a6;
  id v14 = (void *)MEMORY[0x230FBD990]();
  uint64_t v15 = self;
  id v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    id v17 = HMFGetLogIdentifier();
    uint64_t v18 = [v13 UUID];
    uint64_t v19 = [v12 uuid];
    *(_DWORD *)buf = 138544386;
    __int16 v48 = v17;
    __int16 v49 = 2112;
    unint64_t v50 = (unint64_t)v18;
    __int16 v51 = 2112;
    unint64_t v52 = v10;
    __int16 v53 = 2112;
    unint64_t v54 = v11;
    __int16 v55 = 2112;
    id v56 = v19;
    _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] findOrAddUserIndexForUserUUID: %@ guestName: %@, accessory: %@", buf, 0x34u);
  }
  if (v10 | v11)
  {
    if (v10)
    {
      uint64_t v20 = [(HMDHome *)v15 userWithUUID:v10];
      if (!v20)
      {
        uint64_t v33 = (void *)MEMORY[0x230FBD990]();
        __int16 v34 = v15;
        id v35 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          uint64_t v36 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          __int16 v48 = v36;
          __int16 v49 = 2112;
          unint64_t v50 = v10;
          _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_ERROR, "%{public}@Failed to findOrAddUserIndexForUserUUID because could not find user in home with UUID: %@", buf, 0x16u);
        }
        id v37 = (void *)MEMORY[0x263F58190];
        id v21 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
        id v23 = [v37 futureWithError:v21];
        goto LABEL_15;
      }
      id v21 = [(HMDHome *)v15 findOrAddUser:v20 onAccessory:v12 flow:v13];
      id v22 = [v21 naFuture];
      v43[0] = MEMORY[0x263EF8330];
      v43[1] = 3221225472;
      v43[2] = __91__HMDHome_AccessoryUserIdentifier__findOrAddUserIndexForUserUUID_guestName_accessory_flow___block_invoke;
      v43[3] = &unk_264A28C88;
      void v43[4] = v15;
      id v44 = v13;
      id v45 = v20;
      id v46 = v12;
      id v23 = [v22 addFailureBlock:v43];

      uint64_t v24 = v44;
    }
    else
    {
      __int16 v31 = [(HMDHome *)v15 labelsByAccessCode];
      id v32 = [v31 firstKeyWithValue:v11];

      uint64_t v20 = [(HMDHome *)v15 findOrAddUserUniqueIDForGuestAccessCode:v32 onAccessory:v12];
      id v21 = [v20 naFuture];
      v39[0] = MEMORY[0x263EF8330];
      v39[1] = 3221225472;
      id v39[2] = __91__HMDHome_AccessoryUserIdentifier__findOrAddUserIndexForUserUUID_guestName_accessory_flow___block_invoke_101;
      void v39[3] = &unk_264A28C88;
      void v39[4] = v15;
      id v40 = v13;
      id v41 = v32;
      id v42 = v12;
      id v22 = v32;
      id v23 = [v21 addFailureBlock:v39];

      uint64_t v24 = v40;
    }

LABEL_15:
    goto LABEL_16;
  }
  id v25 = (void *)MEMORY[0x230FBD990]();
  id v26 = v15;
  int v27 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    uint64_t v28 = HMFGetLogIdentifier();
    __int16 v29 = [v13 UUID];
    *(_DWORD *)buf = 138543618;
    __int16 v48 = v28;
    __int16 v49 = 2112;
    unint64_t v50 = (unint64_t)v29;
    _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Both userUUID and guestName are nil, this is a bug", buf, 0x16u);
  }
  id v30 = (void *)MEMORY[0x263F58190];
  uint64_t v20 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
  id v23 = [v30 futureWithError:v20];
LABEL_16:

  return v23;
}

void __91__HMDHome_AccessoryUserIdentifier__findOrAddUserIndexForUserUUID_guestName_accessory_flow___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v3 = a2;
  int v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    SEL v7 = HMFGetLogIdentifier();
    id v8 = [*(id *)(a1 + 40) UUID];
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    int v11 = 138544130;
    id v12 = v7;
    __int16 v13 = 2112;
    id v14 = v8;
    __int16 v15 = 2112;
    uint64_t v16 = v9;
    __int16 v17 = 2112;
    uint64_t v18 = v10;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to find or add userIndex for user: %@, on accessory: %@", (uint8_t *)&v11, 0x2Au);
  }
}

void __91__HMDHome_AccessoryUserIdentifier__findOrAddUserIndexForUserUUID_guestName_accessory_flow___block_invoke_101(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v3 = a2;
  int v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    SEL v7 = HMFGetLogIdentifier();
    id v8 = [*(id *)(a1 + 40) UUID];
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    int v11 = 138544130;
    id v12 = v7;
    __int16 v13 = 2112;
    id v14 = v8;
    __int16 v15 = 2112;
    uint64_t v16 = v9;
    __int16 v17 = 2112;
    uint64_t v18 = v10;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to find or add userIndex for guest access code: %@, on accessory: %@", (uint8_t *)&v11, 0x2Au);
  }
}

- (id)findUserIndexForUserUUID:(id)a3 guestName:(id)a4 accessory:(id)a5
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  int v11 = (void *)MEMORY[0x230FBD990]();
  id v12 = [(HMDHome *)self walletLogCategory];
  __int16 v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    id v14 = HMFGetLogIdentifier();
    __int16 v15 = [v10 uuid];
    int v28 = 138544130;
    __int16 v29 = v14;
    __int16 v30 = 2112;
    id v31 = v8;
    __int16 v32 = 2112;
    id v33 = v9;
    __int16 v34 = 2112;
    id v35 = v15;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@findUserIndexForUserUUID: %@ guestName: %@, accessory: %@", (uint8_t *)&v28, 0x2Au);
  }
  if (v9)
  {
    uint64_t v16 = [(HMDHome *)self labelsByAccessCode];
    __int16 v17 = [v16 firstKeyWithValue:v9];

    [(HMDHome *)self userUniqueIDForGuestAccessCode:v17];
  }
  else
  {
    __int16 v17 = [(HMDHome *)self userWithUUID:v8];
    [v17 uniqueIDForAccessories];
  uint64_t v18 = };

  if (v18)
  {
    uint64_t v19 = [(HMDHome *)self findUserSlotForUserUniqueIdentifier:v18 onAccessory:v10];
  }
  else
  {
    uint64_t v20 = (void *)MEMORY[0x230FBD990]();
    id v21 = [(HMDHome *)self walletLogCategory];
    id v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      id v23 = HMFGetLogIdentifier();
      uint64_t v24 = [v10 uuid];
      int v28 = 138544130;
      __int16 v29 = v23;
      __int16 v30 = 2112;
      id v31 = v8;
      __int16 v32 = 2112;
      id v33 = v9;
      __int16 v34 = 2112;
      id v35 = v24;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Failed to find userUniqueID for user: %@, guest: %@, accessory: %@", (uint8_t *)&v28, 0x2Au);
    }
    id v25 = (void *)MEMORY[0x263F58190];
    id v26 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    uint64_t v19 = [v25 futureWithError:v26];
  }
  return v19;
}

- (id)accessCodeForMatterUserWithUserUniqueID:(id)a3
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  uint64_t v6 = [(HMDHome *)self walletLogCategory];
  SEL v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    id v9 = [(HMDHome *)self uniqueIDsOfAllUsers];
    *(_DWORD *)buf = 138543618;
    uint64_t v24 = v8;
    __int16 v25 = 2112;
    id v26 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@uniqueIDsOfAllUsers: %@", buf, 0x16u);
  }
  id v10 = &stru_26E2EB898;
  if (v4)
  {
    int v11 = [(HMDHome *)self users];
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 3221225472;
    void v21[2] = __76__HMDHome_AccessoryUserIdentifier__accessCodeForMatterUserWithUserUniqueID___block_invoke;
    v21[3] = &unk_264A2DB60;
    id v12 = v4;
    id v22 = v12;
    __int16 v13 = objc_msgSend(v11, "na_firstObjectPassingTest:", v21);

    if (v13)
    {
      id v10 = [v13 accessCode];
    }
    else
    {
      id v14 = [(HMDHome *)self labelsByAccessCode];
      v18[0] = MEMORY[0x263EF8330];
      v18[1] = 3221225472;
      void v18[2] = __76__HMDHome_AccessoryUserIdentifier__accessCodeForMatterUserWithUserUniqueID___block_invoke_2;
      v18[3] = &unk_264A1D968;
      id v19 = v12;
      uint64_t v20 = self;
      objc_msgSend(v14, "na_firstKeyPassingTest:", v18);
      __int16 v15 = (__CFString *)objc_claimAutoreleasedReturnValue();

      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = &stru_26E2EB898;
      }
      id v10 = v16;
    }
  }

  return v10;
}

uint64_t __76__HMDHome_AccessoryUserIdentifier__accessCodeForMatterUserWithUserUniqueID___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueIDForAccessories];
  uint64_t v4 = [v3 isEqualToNumber:*(void *)(a1 + 32)];

  return v4;
}

uint64_t __76__HMDHome_AccessoryUserIdentifier__accessCodeForMatterUserWithUserUniqueID___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v2 = [*(id *)(a1 + 40) userUniqueIDForGuestAccessCode:a2];
  uint64_t v3 = HMFEqualObjects();

  return v3;
}

+ (id)createUserUniqueIDForAccessoriesWithoutDuplicatingExistingIDs:(id)a3
{
  id v3 = a3;
  unint64_t v4 = 0;
  do
  {
    uint32_t v5 = arc4random_uniform(0xFFFFFFFF);
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    void v11[2] = __98__HMDHome_AccessoryUserIdentifier__createUserUniqueIDForAccessoriesWithoutDuplicatingExistingIDs___block_invoke;
    void v11[3] = &__block_descriptor_36_e18_B16__0__NSNumber_8l;
    uint32_t v12 = v5;
    int v6 = objc_msgSend(v3, "na_any:", v11);
    if (v5) {
      int v7 = v6;
    }
    else {
      int v7 = 1;
    }
  }
  while (v7 == 1 && v4++ < 9);
  if (v7)
  {
    id v9 = 0;
  }
  else
  {
    id v9 = [NSNumber numberWithUnsignedLong:v5];
  }

  return v9;
}

BOOL __98__HMDHome_AccessoryUserIdentifier__createUserUniqueIDForAccessoriesWithoutDuplicatingExistingIDs___block_invoke(uint64_t a1, void *a2)
{
  return [a2 unsignedLongValue] == *(unsigned int *)(a1 + 32);
}

- (HMDAccessoryCount)accessoryCount
{
  id v2 = [[HMDAccessoryCount alloc] initWithHome:self];
  return v2;
}

- (id)createSiriEndpointProfileMessageHandlerWithHomeUUID:(id)a3
{
  id v3 = a3;
  unint64_t v4 = [[HMDSiriEndpointProfileMessageHandler alloc] initWithHomeUUID:v3];

  return v4;
}

- (id)createPrimaryResidentMessageRouterMetricsDispatcherWithLogEventSubmitter:(id)a3
{
  id v3 = a3;
  unint64_t v4 = [[HMDPrimaryResidentMessageRouterMetricsDispatcher alloc] initWithLogEventSubmitter:v3];

  return v4;
}

- (void)_reconfigureAccessoriesOnRouterRemovalWithCompletion:(id)a3
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  unint64_t v4 = (void (**)(void))a3;
  uint32_t v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  int v6 = [(HMDHome *)self accessories];
  int v7 = objc_msgSend(v6, "hmf_objectsPassingTest:", &__block_literal_global_2);

  if ([v7 count])
  {
    id v8 = [(HMDHome *)self activeNetworkRouterAccessory];
    id v9 = [v8 networkRouterController];
    uint64_t v10 = [v9 wiFiSSID];

    uint64_t v11 = +[HMDWiFiManagementController sharedPSKForNetworkWithSSID:v10];
    uint32_t v12 = (void *)v11;
    id v31 = (void *)v10;
    if (v10 && v11)
    {
      blocuint64_t k = v4;
      __int16 v30 = (void *)v11;
      __int16 v13 = (void *)MEMORY[0x230FBD990]();
      id v14 = self;
      __int16 v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        id v40 = v16;
        __int16 v41 = 2048;
        uint64_t v42 = [v7 count];
        __int16 v43 = 2112;
        id v44 = v31;
        _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Reconfiguring %ld accessories on '%@' due to router removal", buf, 0x20u);
      }
      __int16 v17 = dispatch_group_create();
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      id v18 = v7;
      uint64_t v19 = [v18 countByEnumeratingWithState:&v34 objects:v38 count:16];
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(void *)v35;
        do
        {
          for (uint64_t i = 0; i != v20; ++i)
          {
            if (*(void *)v35 != v21) {
              objc_enumerationMutation(v18);
            }
            id v23 = *(id *)(*((void *)&v34 + 1) + 8 * i);
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              uint64_t v24 = v23;
            }
            else {
              uint64_t v24 = 0;
            }
            id v25 = v24;

            id v26 = [v25 wiFiManagementController];

            if (v26)
            {
              dispatch_group_enter(v17);
              uint64_t v27 = objc_alloc_init(HMDWiFiReconfigurationLogEvent);
              [(HMDWiFiReconfigurationLogEvent *)v27 setCredentialType:2];
              v32[0] = MEMORY[0x263EF8330];
              v32[1] = 3221225472;
              void v32[2] = __80__HMDHome_WiFiManagement___reconfigureAccessoriesOnRouterRemovalWithCompletion___block_invoke_5;
              v32[3] = &unk_264A2F370;
              void v32[4] = v23;
              id v33 = v17;
              [v26 reconfigureWithSSID:v31 PSK:v30 logEvent:v27 completion:v32];
            }
          }
          uint64_t v20 = [v18 countByEnumeratingWithState:&v34 objects:v38 count:16];
        }
        while (v20);
      }

      int v28 = [(HMDHome *)v14 workQueue];
      unint64_t v4 = block;
      dispatch_group_notify(v17, v28, block);

      uint32_t v12 = v30;
    }
    else
    {
      v4[2](v4);
    }
  }
  else
  {
    v4[2](v4);
  }
}

void __80__HMDHome_WiFiManagement___reconfigureAccessoriesOnRouterRemovalWithCompletion___block_invoke_5(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) saveWiFiUniquePreSharedKey:0 credentialType:2 * (a2 == 0)];
  id v3 = *(NSObject **)(a1 + 40);
  dispatch_group_leave(v3);
}

uint64_t __80__HMDHome_WiFiManagement___reconfigureAccessoriesOnRouterRemovalWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 wiFiCredentialType] == 3) {
    uint64_t v3 = isReconfigurationPossible(v2);
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

- (NSArray)accessoriesRequiringManualReconfigurationOnRouterRemoval
{
  id v2 = [(HMDHome *)self accessories];
  uint64_t v3 = objc_msgSend(v2, "hmf_objectsPassingTest:", &__block_literal_global_110152);

  return (NSArray *)v3;
}

uint64_t __83__HMDHome_WiFiManagement__accessoriesRequiringManualReconfigurationOnRouterRemoval__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 wiFiCredentialType] == 3) {
    uint64_t v3 = isReconfigurationPossible(v2) ^ 1;
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

- (id)playbackArchiveWithSessionIdentifier:(id)a3
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint32_t v5 = [(HMDHome *)self actionSets];
  int v6 = [(HMDHome *)self triggerOwnedActionSets];
  int v7 = [v5 arrayByAddingObjectsFromArray:v6];

  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v8 = v7;
  uint64_t v25 = [v8 countByEnumeratingWithState:&v32 objects:v37 count:16];
  if (v25)
  {
    uint64_t v9 = *(void *)v33;
    uint64_t v27 = v8;
    uint64_t v24 = *(void *)v33;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v33 != v9) {
          objc_enumerationMutation(v8);
        }
        uint64_t v26 = v10;
        uint64_t v11 = *(void **)(*((void *)&v32 + 1) + 8 * v10);
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        uint32_t v12 = objc_msgSend(v11, "actions", v24);
        uint64_t v13 = [v12 countByEnumeratingWithState:&v28 objects:v36 count:16];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)v29;
          while (2)
          {
            for (uint64_t i = 0; i != v14; ++i)
            {
              if (*(void *)v29 != v15) {
                objc_enumerationMutation(v12);
              }
              id v17 = *(id *)(*((void *)&v28 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                id v18 = v17;
              }
              else {
                id v18 = 0;
              }
              id v19 = v18;

              uint64_t v20 = [v19 playbackArchive];
              uint64_t v21 = [v20 playbackSessionIdentifier];
              char v22 = [v21 isEqualToString:v4];

              if (v22)
              {

                id v8 = v27;
                goto LABEL_22;
              }
            }
            uint64_t v14 = [v12 countByEnumeratingWithState:&v28 objects:v36 count:16];
            if (v14) {
              continue;
            }
            break;
          }
        }

        uint64_t v10 = v26 + 1;
        id v8 = v27;
        uint64_t v9 = v24;
      }
      while (v26 + 1 != v25);
      uint64_t v20 = 0;
      uint64_t v25 = [v27 countByEnumeratingWithState:&v32 objects:v37 count:16];
    }
    while (v25);
  }
  else
  {
    uint64_t v20 = 0;
  }
LABEL_22:

  return v20;
}

- (id)createAccessorySettingsMessengerWithMessageTargetUUID:(id)a3 messageDispatcher:(id)a4 messageRouter:(id)a5 messageHandler:(id)a6 logEventSubmitter:(id)a7
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  id v17 = (void *)MEMORY[0x230FBD990]();
  id v18 = self;
  id v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    uint64_t v20 = HMFGetLogIdentifier();
    int v23 = 138544386;
    uint64_t v24 = v20;
    __int16 v25 = 2112;
    id v26 = v12;
    __int16 v27 = 2112;
    id v28 = v13;
    __int16 v29 = 2112;
    id v30 = v14;
    __int16 v31 = 2112;
    id v32 = v15;
    _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Creating accessory settings messenger with message target UUID: %@ message dispatcher: %@ message router: %@ message handler: %@", (uint8_t *)&v23, 0x34u);
  }
  uint64_t v21 = [[HMDAccessorySettingsMessenger alloc] initWithMessageTargetUUID:v12 messageDispatcher:v13 messageRouter:v14 messageHandler:v15 logEventSubmitter:v16];

  return v21;
}

- (void)configureAccessorySettingsMessengerWithMessengerFactory:(id)a3 messageHandlerFactory:(id)a4
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x230FBD990]();
  uint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    int v23 = 138543362;
    uint64_t v24 = v11;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Configuring accessory settings messenger", (uint8_t *)&v23, 0xCu);
  }
  id v12 = [(HMDHome *)v9 msgDispatcher];
  id v13 = [(HMDHome *)v9 accessoryMessageRouterViaPrimary];
  uint64_t v14 = [(HMDHome *)v9 unifiedLanguageValueListSettingDataProvider];
  if (!v12)
  {
    _HMFPreconditionFailure();
    goto LABEL_8;
  }
  if (!v13)
  {
LABEL_8:
    _HMFPreconditionFailure();
LABEL_9:
    _HMFPreconditionFailure();
  }
  id v15 = (void *)v14;
  if (!v14) {
    goto LABEL_9;
  }
  id v16 = [(HMDHome *)v9 uuid];
  id v17 = [v7 createAccessorySettingsLocalMessageHandlerWithHomeUUID:v16 languageValuesDataProvider:v15];

  [v17 setDataSource:v9];
  id v18 = [(HMDHome *)v9 homeManager];
  id v19 = [v18 compositeSettingsControllerManager];
  [v17 setDelegate:v19];

  uint64_t v20 = [(HMDHome *)v9 accessorySettingsMessengerMessageTargetUUID];
  uint64_t v21 = [(HMDHome *)v9 logEventSubmitter];
  char v22 = [v6 createAccessorySettingsMessengerWithMessageTargetUUID:v20 messageDispatcher:v12 messageRouter:v13 messageHandler:v17 logEventSubmitter:v21];

  [v22 registerForMessagesWithHome:v9];
  [(HMDHome *)v9 setAccessorySettingsMessenger:v22];
}

- (id)accessorySettingsMessengerMessageTargetUUID
{
  id v2 = (void *)MEMORY[0x263F0E068];
  uint64_t v3 = [(HMDHome *)self uuid];
  id v4 = [v2 messageTargetUUIDWithHomeUUID:v3];

  return v4;
}

- (id)hubAccessories
{
  id v2 = [(HMDHome *)self appleMediaAccessories];
  uint64_t v3 = objc_msgSend(v2, "na_filter:", &__block_literal_global_150143);

  return v3;
}

uint64_t __51__HMDHome_SiriEndpointHubProviding__hubAccessories__block_invoke(uint64_t a1, void *a2)
{
  return [a2 supportsHomeHub];
}

- (id)createAppleMediaAccessoriesStateMessengerWithIdentifier:(id)a3 messageDispatcher:(id)a4
{
  id v5 = a4;
  id v6 = a3;
  id v7 = [[HMDAppleMediaAccessoriesStateMessenger alloc] initWithIdentifier:v6 messageDispatcher:v5];

  return v7;
}

- (BOOL)isCarPlayAccessAllowedForActionSet:(id)a3 withMessage:(id)a4 fromSource:(unint64_t)a5
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  if ((-[HMDHome isMessageEntitledForCarPlayAccess:source:]((uint64_t)self, v9, a5) & 1) == 0)
  {
    id v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = self;
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      *(_DWORD *)id v17 = 138543874;
      *(void *)&void v17[4] = v15;
      *(_WORD *)&v17[12] = 2112;
      *(void *)&v17[14] = v8;
      *(_WORD *)&v17[22] = 2048;
      id v18 = (void *)a5;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@CarPlay access is not allowed for action set: %@ because message from source: %lu does not have sufficient entitlements", v17, 0x20u);
    }
    goto LABEL_9;
  }
  if (self)
  {
    if ([(HMDHome *)self homeLocation] == 1 || [(HMDHome *)self homeLocation] == 3)
    {
      uint64_t v10 = [v8 actions];
      uint64_t v11 = objc_msgSend(v10, "na_filter:", &__block_literal_global_153142);

      *(void *)id v17 = MEMORY[0x263EF8330];
      *(void *)&v17[8] = 3221225472;
      *(void *)&v17[16] = __55__HMDHome_CarPlay__isActionSetAllowedForCarPlayAccess___block_invoke_2;
      id v18 = &unk_264A22050;
      id v19 = self;
      LOBYTE(self) = objc_msgSend(v11, "na_all:", v17);

      goto LABEL_10;
    }
LABEL_9:
    LOBYTE(self) = 0;
  }
LABEL_10:

  return (char)self;
}

- (uint64_t)isMessageEntitledForCarPlayAccess:(uint64_t)a3 source:
{
  id v5 = a2;
  id v6 = v5;
  if (!a1) {
    goto LABEL_5;
  }
  if (a3 != 1)
  {
    if ([v5 isEntitledForSecureAccess])
    {
      a3 = [v6 isEntitledForSPIAccess];
      goto LABEL_6;
    }
LABEL_5:
    a3 = 0;
  }
LABEL_6:

  return a3;
}

uint64_t __55__HMDHome_CarPlay__isActionSetAllowedForCarPlayAccess___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = v3;
  if (v2 && ![v3 type])
  {
    id v6 = v4;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v7 = v6;
    }
    else {
      id v7 = 0;
    }
    id v8 = v7;

    if (v8)
    {
      id v9 = [v8 characteristic];
      uint64_t v5 = -[HMDHome isCharacteristicAllowedForCarPlayAccess:](v9);
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

- (uint64_t)isCharacteristicAllowedForCarPlayAccess:(void *)a1
{
  uint64_t v1 = [a1 service];
  uint64_t v2 = [v1 serviceType];

  if ([v2 isEqualToString:*MEMORY[0x263F0D6F8]]) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = [v2 isEqualToString:*MEMORY[0x263F0D798]];
  }

  return v3;
}

uint64_t __55__HMDHome_CarPlay__isActionSetAllowedForCarPlayAccess___block_invoke(uint64_t a1, void *a2)
{
  return [a2 isUnsecuringAction];
}

- (BOOL)isCarPlayAccessAllowedForCharacteristic:(id)a3 withMessage:(id)a4 fromSource:(unint64_t)a5
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  if ((-[HMDHome isMessageEntitledForCarPlayAccess:source:]((uint64_t)self, v9, a5) & 1) == 0)
  {
    uint64_t v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = self;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v16 = 138543874;
      id v17 = v14;
      __int16 v18 = 2112;
      id v19 = v8;
      __int16 v20 = 2048;
      unint64_t v21 = a5;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@CarPlay access is not allowed for characteristic: %@ because message from source: %lu does not have sufficient entitlements", (uint8_t *)&v16, 0x20u);
    }
    goto LABEL_9;
  }
  if (!self || [(HMDHome *)self homeLocation] != 1 && [(HMDHome *)self homeLocation] != 3)
  {
LABEL_9:
    char v10 = 0;
    goto LABEL_10;
  }
  char v10 = -[HMDHome isCharacteristicAllowedForCarPlayAccess:](v8);
LABEL_10:

  return v10;
}

- (BOOL)synchronouslyFetchIsConnectedToCarPlayNetwork
{
  uint64_t v2 = [(HMDHome *)self carPlayDataSource];
  char v3 = [v2 synchronouslyFetchIsConnectedToCarPlayNetwork];

  return v3;
}

- (BOOL)synchronouslyFetchIsCarPlayConnectedStatus
{
  uint64_t v2 = [(HMDHome *)self carPlayDataSource];
  char v3 = [v2 synchronouslyFetchIsCarPlayConnectedStatus];

  return v3;
}

- (void)_didOnboardHindsightChanged
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if ([(HMDHome *)self didOnboardEventLog])
  {
    char v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = self;
    uint64_t v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      int v8 = 138543362;
      id v9 = v6;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Clearing notification observer because we onboarded", (uint8_t *)&v8, 0xCu);
    }
    id v7 = [(HMDHome *)v4 notificationCenter];
    [v7 removeObserver:v4 name:@"HMDHomeManagerDidUpdateApplicationData" object:0];
  }
}

- (void)_fixupHindsightOnboarding
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ([(HMDHome *)self didOnboardEventLog])
  {
    char v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = self;
    uint64_t v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      id v6 = HMFGetLogIdentifier();
      int v13 = 138543362;
      uint64_t v14 = v6;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEBUG, "%{public}@[Hindsight] Skipping hindsight fixup, we're already onboarded", (uint8_t *)&v13, 0xCu);
    }
  }
  else
  {
    id v7 = [(HMDHome *)self homeManager];
    if (v7)
    {
      int v8 = [(HMDHome *)self notificationCenter];
      [v8 addObserver:self selector:sel__homeManagerAppDataChanged_ name:@"HMDHomeManagerDidUpdateApplicationData" object:0];

      -[HMDHome _checkHomeManagerAppData:](self, v7);
    }
    else
    {
      id v9 = (void *)MEMORY[0x230FBD990]();
      uint64_t v10 = self;
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        id v12 = HMFGetLogIdentifier();
        int v13 = 138543362;
        uint64_t v14 = v12;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] No home manager?", (uint8_t *)&v13, 0xCu);
      }
    }
  }
}

- (void)_checkHomeManagerAppData:(void *)a1
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = [v3 appData];
    id v6 = objc_opt_class();
    id v7 = [v5 applicationDataForIdentifier:@"com.apple.homekit-entitledclient.identifer"];
    int v8 = [v6 didHomeAppOnboardHindsightWithAppData:v7];

    id v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = a1;
    uint64_t v11 = HMFGetOSLogHandle();
    id v12 = v11;
    if (v8)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = HMFGetLogIdentifier();
        int v15 = 138543362;
        int v16 = v13;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@[Hindsight] Home app showed Hindsight onboarded, updating didOnboard", (uint8_t *)&v15, 0xCu);
      }
      -[HMDHome _setDidOnboardEventLog:message:](v10, 1, 0);
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = HMFGetLogIdentifier();
        int v15 = 138543362;
        int v16 = v14;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_DEBUG, "%{public}@[Hindsight] We haven't yet onboarded", (uint8_t *)&v15, 0xCu);
      }
    }
  }
}

- (void)_setDidOnboardEventLog:(void *)a3 message:
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    uint64_t v7 = [v5 name];
    int v8 = (void *)v7;
    id v9 = @"Hindsight.didOnboardFixup";
    if (v7) {
      id v9 = (__CFString *)v7;
    }
    id v10 = v9;

    uint64_t v11 = [HMDHomeModel alloc];
    id v12 = [a1 uuid];
    int v13 = [a1 homeManager];
    uint64_t v14 = [v13 uuid];
    int v15 = [(HMDBackingStoreModelObject *)v11 initWithObjectChangeType:2 uuid:v12 parentUUID:v14];

    int v16 = [NSNumber numberWithBool:a2];
    [(HMDHomeModel *)v15 setDidOnboardEventLog:v16];

    uint64_t v17 = (void *)MEMORY[0x230FBD990]();
    id v18 = a1;
    id v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      __int16 v20 = HMFGetLogIdentifier();
      unint64_t v21 = HMFBooleanToString();
      *(_DWORD *)buf = 138543618;
      __int16 v29 = v20;
      __int16 v30 = 2114;
      __int16 v31 = v21;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Setting activity history did onboard to %{public}@", buf, 0x16u);
    }
    uint64_t v22 = [v18 backingStore];
    int v23 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v24 = [v22 transaction:v10 options:v23];

    [v24 add:v15];
    v25[0] = MEMORY[0x263EF8330];
    v25[1] = 3221225472;
    void v25[2] = __53__HMDHome_Hindsight___setDidOnboardEventLog_message___block_invoke;
    v25[3] = &unk_264A225B8;
    void v25[4] = v18;
    char v27 = a2;
    id v26 = v6;
    [v24 run:v25];
  }
}

void __53__HMDHome_Hindsight___setDidOnboardEventLog_message___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      int v8 = HMFBooleanToString();
      *(_DWORD *)buf = 138544130;
      uint64_t v24 = v7;
      __int16 v25 = 2114;
      id v26 = @"Failed to set activity history did onboard";
      __int16 v27 = 2114;
      id v28 = v8;
      __int16 v29 = 2114;
      id v30 = v3;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] %{public}@ to %{public}@: %{public}@", buf, 0x2Au);
    }
    id v9 = *(void **)(a1 + 40);
    id v10 = (void *)MEMORY[0x263F087E8];
    uint64_t v11 = [v3 localizedFailureReason];
    id v12 = [v10 hmErrorWithCode:-1 description:@"Failed to set activity history did onboard" reason:v11 suggestion:0 underlyingError:v3];
    [v9 respondWithError:v12];
  }
  else
  {
    uint64_t v13 = [*(id *)(a1 + 32) isEventLogEnabled];
    uint64_t v14 = (void *)MEMORY[0x230FBD990]();
    id v15 = *(id *)(a1 + 32);
    int v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      HMFBooleanToString();
      id v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
      id v19 = HMFBooleanToString();
      *(_DWORD *)buf = 138543874;
      uint64_t v24 = v17;
      __int16 v25 = 2114;
      id v26 = v18;
      __int16 v27 = 2114;
      id v28 = v19;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Finished running transaction to set activity history did onboard to %{public}@, isEventLogEnabled is now %{public}@", buf, 0x20u);
    }
    __int16 v20 = *(void **)(a1 + 40);
    uint64_t v11 = objc_msgSend(NSNumber, "numberWithBool:", v13, *MEMORY[0x263F0C850]);
    uint64_t v22 = v11;
    id v12 = [NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    [v20 respondWithPayload:v12];
  }
}

- (void)_homeManagerAppDataChanged:(id)a3
{
  id v4 = a3;
  id v5 = [v4 object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  if (v7)
  {
    int v8 = [(HMDHome *)self workQueue];
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 3221225472;
    id v10[2] = __49__HMDHome_Hindsight___homeManagerAppDataChanged___block_invoke;
    void v10[3] = &unk_264A2F820;
    void v10[4] = self;
    void v10[5] = v7;
    dispatch_async(v8, v10);
  }
  else
  {
    uint64_t v9 = _HMFPreconditionFailure();
    __49__HMDHome_Hindsight___homeManagerAppDataChanged___block_invoke(v9);
  }
}

void __49__HMDHome_Hindsight___homeManagerAppDataChanged___block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    int v6 = 138543362;
    id v7 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@[Hindsight]Checking if new HomeManager appData onboarded Hindsight", (uint8_t *)&v6, 0xCu);
  }
  -[HMDHome _checkHomeManagerAppData:](*(void **)(a1 + 32), *(void **)(a1 + 40));
}

- (void)_handleEventLogClearMessage:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  int v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v18 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@[Hindsight] Clearing activity history", buf, 0xCu);
  }
  uint64_t v11 = MEMORY[0x263EF8330];
  uint64_t v12 = 3221225472;
  uint64_t v13 = __50__HMDHome_Hindsight___handleEventLogClearMessage___block_invoke;
  uint64_t v14 = &unk_264A2F370;
  id v15 = v6;
  id v16 = v4;
  id v9 = v4;
  id v10 = _Block_copy(&v11);
  -[HMDHome clearEventsWithCompletion:](v6, "clearEventsWithCompletion:", v10, v11, v12, v13, v14, v15);
}

void __50__HMDHome_Hindsight___handleEventLogClearMessage___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  int v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      int v15 = 138543874;
      id v16 = v8;
      __int16 v17 = 2114;
      id v18 = @"Failed to clear events";
      __int16 v19 = 2114;
      id v20 = v3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] %{public}@: %{public}@", (uint8_t *)&v15, 0x20u);
    }
    id v9 = *(void **)(a1 + 40);
    id v10 = (void *)MEMORY[0x263F087E8];
    uint64_t v11 = [v3 localizedFailureReason];
    uint64_t v12 = [v10 hmErrorWithCode:-1 description:@"Failed to clear events" reason:v11 suggestion:0 underlyingError:v3];
    [v9 respondWithError:v12];
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v15 = 138543362;
      id v16 = v13;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@[Hindsight] Activity history cleared", (uint8_t *)&v15, 0xCu);
    }
    uint64_t v14 = [*(id *)(a1 + 32) hindsightCloudShareManager];
    [v14 synchronize];

    [*(id *)(a1 + 40) respondWithSuccess];
  }
}

- (void)_handleEventLogSetDurationMessage:(id)a3
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 messagePayload];
  uint64_t v6 = *MEMORY[0x263F0C848];
  id v7 = [v5 objectForKeyedSubscript:*MEMORY[0x263F0C848]];

  if (v7)
  {
    id v8 = v7;
    objc_opt_class();
    int v9 = objc_opt_isKindOfClass() & 1;
    if (v9) {
      id v10 = v8;
    }
    else {
      id v10 = 0;
    }
    id v11 = v10;

    if (v9)
    {
      uint64_t v12 = [v8 unsignedIntegerValue];
      if (v12 == [(HMDHome *)self eventLogDuration])
      {
        uint64_t v13 = (void *)MEMORY[0x230FBD990]();
        uint64_t v14 = self;
        int v15 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          id v16 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v46 = v16;
          __int16 v47 = 2048;
          uint64_t v48 = v12;
          _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Activity history duration is already %lu", buf, 0x16u);
        }
        [v4 respondWithSuccess];
      }
      else
      {
        id v28 = [HMDHomeModel alloc];
        __int16 v29 = [(HMDHome *)self uuid];
        id v30 = [(HMDHome *)self homeManager];
        uint64_t v31 = [v30 uuid];
        uint64_t v32 = [(HMDBackingStoreModelObject *)v28 initWithObjectChangeType:2 uuid:v29 parentUUID:v31];

        uint64_t v33 = [NSNumber numberWithUnsignedInteger:v12];
        [(HMDHomeModel *)v32 setEventLogDuration:v33];

        long long v34 = (void *)MEMORY[0x230FBD990]();
        long long v35 = self;
        long long v36 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          long long v37 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v46 = v37;
          __int16 v47 = 2048;
          uint64_t v48 = v12;
          _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_DEFAULT, "%{public}@[Hindsight] Setting activity history duration to %lu", buf, 0x16u);
        }
        uint64_t v38 = [(HMDHome *)v35 backingStore];
        id v39 = [v4 name];
        id v40 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        __int16 v41 = [v38 transaction:v39 options:v40];

        [v41 add:v32];
        v42[0] = MEMORY[0x263EF8330];
        v42[1] = 3221225472;
        v42[2] = __56__HMDHome_Hindsight___handleEventLogSetDurationMessage___block_invoke;
        v42[3] = &unk_264A27DA0;
        uint64_t v44 = v12;
        void v42[4] = v35;
        id v43 = v4;
        [v41 run:v42];
      }
    }
    else
    {
      uint64_t v22 = (void *)MEMORY[0x230FBD990]();
      int v23 = self;
      uint64_t v24 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        __int16 v25 = HMFGetLogIdentifier();
        id v26 = [v4 name];
        *(_DWORD *)buf = 138544130;
        id v46 = v25;
        __int16 v47 = 2114;
        uint64_t v48 = (uint64_t)v26;
        __int16 v49 = 2114;
        uint64_t v50 = v6;
        __int16 v51 = 2112;
        id v52 = v8;
        _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] '%{public}@.%{public}@' is invalid: %@", buf, 0x2Au);
      }
      __int16 v27 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      [v4 respondWithError:v27];
    }
  }
  else
  {
    __int16 v17 = (void *)MEMORY[0x230FBD990]();
    id v18 = self;
    __int16 v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      id v20 = HMFGetLogIdentifier();
      uint64_t v21 = [v4 name];
      *(_DWORD *)buf = 138543874;
      id v46 = v20;
      __int16 v47 = 2114;
      uint64_t v48 = (uint64_t)v21;
      __int16 v49 = 2114;
      uint64_t v50 = v6;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] '%{public}@.%{public}@' is a required parameter", buf, 0x20u);
    }
    id v11 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v4 respondWithError:v11];
  }
}

void __56__HMDHome_Hindsight___handleEventLogSetDurationMessage___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    id v4 = objc_msgSend(NSString, "stringWithFormat:", @"Failed to set activity history to %lu", *(void *)(a1 + 48));
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = *(id *)(a1 + 32);
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      __int16 v19 = v8;
      __int16 v20 = 2114;
      uint64_t v21 = v4;
      __int16 v22 = 2114;
      id v23 = v3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] %{public}@: %{public}@", buf, 0x20u);
    }
    int v9 = *(void **)(a1 + 40);
    id v10 = (void *)MEMORY[0x263F087E8];
    id v11 = [v3 localizedFailureReason];
    uint64_t v12 = [v10 hmErrorWithCode:-1 description:v4 reason:v11 suggestion:0 underlyingError:v3];
    [v9 respondWithError:v12];
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = *(id *)(a1 + 32);
    int v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = HMFGetLogIdentifier();
      __int16 v17 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      __int16 v19 = v16;
      __int16 v20 = 2048;
      uint64_t v21 = v17;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Finished running transaction to set activity history duration to %lu", buf, 0x16u);
    }
    [*(id *)(a1 + 40) respondWithSuccess];
  }
}

- (void)_handleEventLogSetEnabledMessage:(id)a3
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = [(HMDHome *)self isEventLogHomeSettingEnabled];
  BOOL v6 = [(HMDHome *)self didOnboardEventLog];
  id v7 = [v4 messagePayload];
  uint64_t v8 = *MEMORY[0x263F0C850];
  int v9 = [v7 objectForKeyedSubscript:*MEMORY[0x263F0C850]];

  if (v9)
  {
    id v10 = v9;
    objc_opt_class();
    int v11 = objc_opt_isKindOfClass() & 1;
    if (v11) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 0;
    }
    id v13 = v12;

    if (v11)
    {
      unsigned int v14 = [v10 BOOLValue];
      int v15 = v5 ^ v14;
      int v16 = v14 ^ 1 | v6;
      if ((v5 ^ v14) == 1 || v16 == 0)
      {
        unsigned int v55 = v14;
        id v18 = [HMDHomeModel alloc];
        __int16 v19 = [(HMDHome *)self uuid];
        __int16 v20 = [(HMDHome *)self homeManager];
        uint64_t v21 = [v20 uuid];
        __int16 v22 = [(HMDBackingStoreModelObject *)v18 initWithObjectChangeType:2 uuid:v19 parentUUID:v21];

        if (v15)
        {
          id v23 = (void *)MEMORY[0x230FBD990]();
          uint64_t v24 = self;
          __int16 v25 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            id v26 = v54 = v23;
            __int16 v27 = HMFEnabledStatusToString();
            *(_DWORD *)buf = 138543618;
            uint64_t v60 = v26;
            __int16 v61 = 2114;
            __int16 v62 = v27;
            _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@[Hindsight] Setting activity history enabled to %{public}@", buf, 0x16u);

            id v23 = v54;
          }

          id v28 = [NSNumber numberWithBool:v55];
          [(HMDHomeModel *)v22 setEventLogHomeSettingEnabled:v28];
        }
        if ((v16 & 1) == 0)
        {
          __int16 v29 = (void *)MEMORY[0x230FBD990]();
          id v30 = self;
          uint64_t v31 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            uint64_t v32 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543362;
            uint64_t v60 = v32;
            _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Finished running transaction to set activity history did onboard to YES", buf, 0xCu);
          }
          [(HMDHomeModel *)v22 setDidOnboardEventLog:MEMORY[0x263EFFA88]];
        }
        uint64_t v33 = [(HMDHome *)self backingStore];
        long long v34 = [v4 name];
        long long v35 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        long long v36 = [v33 transaction:v34 options:v35];

        [v36 add:v22];
        v56[0] = MEMORY[0x263EF8330];
        v56[1] = 3221225472;
        void v56[2] = __55__HMDHome_Hindsight___handleEventLogSetEnabledMessage___block_invoke;
        void v56[3] = &unk_264A225B8;
        char v58 = v55;
        void v56[4] = self;
        id v57 = v4;
        [v36 run:v56];
      }
      else
      {
        uint64_t v48 = (void *)MEMORY[0x230FBD990]();
        __int16 v49 = self;
        uint64_t v50 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
        {
          id v52 = HMFGetLogIdentifier();
          uint64_t v53 = HMFEnabledStatusToString();
          *(_DWORD *)buf = 138543618;
          uint64_t v60 = v52;
          __int16 v61 = 2114;
          __int16 v62 = v53;
          _os_log_impl(&dword_22F52A000, v50, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Activity history is already %{public}@", buf, 0x16u);
        }
        [v4 respondWithSuccess];
      }
    }
    else
    {
      uint64_t v42 = (void *)MEMORY[0x230FBD990]();
      id v43 = self;
      uint64_t v44 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        uint64_t v45 = HMFGetLogIdentifier();
        id v46 = [v4 name];
        *(_DWORD *)buf = 138544130;
        uint64_t v60 = v45;
        __int16 v61 = 2114;
        __int16 v62 = v46;
        __int16 v63 = 2114;
        uint64_t v64 = v8;
        __int16 v65 = 2112;
        id v66 = v10;
        _os_log_impl(&dword_22F52A000, v44, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] '%{public}@.%{public}@' is invalid: %@", buf, 0x2Au);
      }
      __int16 v47 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      [v4 respondWithError:v47];
    }
  }
  else
  {
    long long v37 = (void *)MEMORY[0x230FBD990]();
    uint64_t v38 = self;
    id v39 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      id v40 = HMFGetLogIdentifier();
      __int16 v41 = [v4 name];
      *(_DWORD *)buf = 138543874;
      uint64_t v60 = v40;
      __int16 v61 = 2114;
      __int16 v62 = v41;
      __int16 v63 = 2114;
      uint64_t v64 = v8;
      _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] '%{public}@.%{public}@' is a required parameter", buf, 0x20u);
    }
    id v13 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v4 respondWithError:v13];
  }
}

void __55__HMDHome_Hindsight___handleEventLogSetEnabledMessage___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    id v4 = NSString;
    BOOL v5 = HMFEnabledStatusToString();
    BOOL v6 = [v4 stringWithFormat:@"Failed to run transaction to set activity history to %@", v5];

    id v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = *(id *)(a1 + 32);
    int v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      uint64_t v21 = v10;
      __int16 v22 = 2114;
      id v23 = v6;
      __int16 v24 = 2114;
      id v25 = v3;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] %{public}@: %{public}@", buf, 0x20u);
    }
    int v11 = *(void **)(a1 + 40);
    uint64_t v12 = (void *)MEMORY[0x263F087E8];
    id v13 = [v3 localizedFailureReason];
    unsigned int v14 = [v12 hmErrorWithCode:-1 description:v6 reason:v13 suggestion:0 underlyingError:v3];
    [v11 respondWithError:v14];
  }
  else
  {
    int v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = *(id *)(a1 + 32);
    __int16 v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      id v18 = HMFGetLogIdentifier();
      __int16 v19 = HMFEnabledStatusToString();
      *(_DWORD *)buf = 138543618;
      uint64_t v21 = v18;
      __int16 v22 = 2114;
      id v23 = v19;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Finished running transaction to set activity history to %{public}@", buf, 0x16u);
    }
    [*(id *)(a1 + 40) respondWithSuccess];
  }
}

- (void)_handleEventLogSetDidOnboard:(id)a3
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = [v4 messagePayload];
  uint64_t v6 = *MEMORY[0x263F0C858];
  id v7 = [v5 objectForKeyedSubscript:*MEMORY[0x263F0C858]];

  if (v7)
  {
    id v8 = v7;
    objc_opt_class();
    int v9 = objc_opt_isKindOfClass() & 1;
    if (v9) {
      id v10 = v8;
    }
    else {
      id v10 = 0;
    }
    id v11 = v10;

    if (v9)
    {
      uint64_t v12 = [v8 BOOLValue];
      if (v12 & 1) != 0 || (isInternalBuild())
      {
        if (v12 == [(HMDHome *)self didOnboardEventLog])
        {
          __int16 v24 = (void *)MEMORY[0x230FBD990]();
          id v25 = self;
          uint64_t v26 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            __int16 v27 = HMFGetLogIdentifier();
            id v28 = HMFBooleanToString();
            int v29 = 138543618;
            id v30 = v27;
            __int16 v31 = 2114;
            uint64_t v32 = v28;
            _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Activity history onboarding is already %{public}@", (uint8_t *)&v29, 0x16u);
          }
          [v4 respondWithSuccess];
        }
        else
        {
          -[HMDHome _setDidOnboardEventLog:message:](self, v12, v4);
        }
        goto LABEL_19;
      }
      id v18 = (void *)MEMORY[0x230FBD990]();
      __int16 v19 = self;
      __int16 v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        goto LABEL_14;
      }
    }
    else
    {
      id v18 = (void *)MEMORY[0x230FBD990]();
      __int16 v19 = self;
      __int16 v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
LABEL_14:
        uint64_t v21 = HMFGetLogIdentifier();
        __int16 v22 = [v4 name];
        int v29 = 138544130;
        id v30 = v21;
        __int16 v31 = 2114;
        uint64_t v32 = v22;
        __int16 v33 = 2114;
        uint64_t v34 = v6;
        __int16 v35 = 2112;
        id v36 = v8;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] '%{public}@.%{public}@' is invalid: %@", (uint8_t *)&v29, 0x2Au);
      }
    }

    id v23 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v4 respondWithError:v23];

    goto LABEL_19;
  }
  id v13 = (void *)MEMORY[0x230FBD990]();
  unsigned int v14 = self;
  int v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    id v16 = HMFGetLogIdentifier();
    __int16 v17 = [v4 name];
    int v29 = 138543874;
    id v30 = v16;
    __int16 v31 = 2114;
    uint64_t v32 = v17;
    __int16 v33 = 2114;
    uint64_t v34 = v6;
    _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] '%{public}@.%{public}@' is a required parameter", (uint8_t *)&v29, 0x20u);
  }
  id v11 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
  [v4 respondWithError:v11];
LABEL_19:
}

- (BOOL)isEventLogEnabled
{
  BOOL v3 = [(HMDHome *)self isEventLogHomeSettingEnabled];
  if (v3)
  {
    LOBYTE(v3) = [(HMDHome *)self didOnboardEventLog];
  }
  return v3;
}

+ (BOOL)didHomeAppOnboardHindsightWithAppData:(id)a3
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = [v4 objectForKeyedSubscript:@"lastOnboardingNewFeaturesVersionSeen"];
  uint64_t v6 = v5;
  if (v5)
  {
    id v7 = v5;
    objc_opt_class();
    int v8 = objc_opt_isKindOfClass() & 1;
    if (v8) {
      int v9 = v7;
    }
    else {
      int v9 = 0;
    }
    id v10 = v9;

    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = a1;
    id v13 = HMFGetOSLogHandle();
    unsigned int v14 = v13;
    if (v8)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        int v15 = HMFGetLogIdentifier();
        int v23 = 138543874;
        __int16 v24 = v15;
        __int16 v25 = 2112;
        uint64_t v26 = @"lastOnboardingNewFeaturesVersionSeen";
        __int16 v27 = 2112;
        id v28 = v7;
        _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_DEBUG, "%{public}@[Hindsight] Home manager has application data '%@' = %@", (uint8_t *)&v23, 0x20u);
      }
      BOOL v16 = [v7 integerValue] > 3;
    }
    else
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = HMFGetLogIdentifier();
        int v23 = 138543874;
        __int16 v24 = v21;
        __int16 v25 = 2112;
        uint64_t v26 = @"lastOnboardingNewFeaturesVersionSeen";
        __int16 v27 = 2112;
        id v28 = v4;
        _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] Application data dictionary exists but has invalid value for '%@': %@", (uint8_t *)&v23, 0x20u);
      }
      BOOL v16 = 0;
    }
  }
  else
  {
    __int16 v17 = (void *)MEMORY[0x230FBD990]();
    id v18 = a1;
    __int16 v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      __int16 v20 = HMFGetLogIdentifier();
      int v23 = 138543874;
      __int16 v24 = v20;
      __int16 v25 = 2112;
      uint64_t v26 = @"lastOnboardingNewFeaturesVersionSeen";
      __int16 v27 = 2112;
      id v28 = v4;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_DEBUG, "%{public}@[Hindsight] Application data dictionary exists but has no value for '%@': %@", (uint8_t *)&v23, 0x20u);
    }
    BOOL v16 = 0;
  }

  return v16;
}

- (NSDictionary)assistantObject
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  BOOL v3 = [(HMDHome *)self name];

  if (v3)
  {
    v15[0] = *MEMORY[0x263F655D0];
    id v4 = [(HMDHome *)self name];
    v15[1] = v4;
    void v14[2] = @"objectIdentifier";
    BOOL v5 = [(HMDHome *)self urlString];
    void v15[2] = v5;
    v14[3] = @"objectHomeIdentifier";
    uint64_t v6 = [(HMDHome *)self urlString];
    void v14[4] = @"objectReference";
    v15[3] = v6;
    void v15[4] = self;
    id v7 = [NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:5];
  }
  else
  {
    int v8 = (void *)MEMORY[0x230FBD990]();
    int v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = HMFGetLogIdentifier();
      id v11 = [(HMDHome *)self uuid];
      id v12 = [v11 UUIDString];
      *(_DWORD *)buf = 138543618;
      __int16 v17 = v10;
      __int16 v18 = 2112;
      __int16 v19 = v12;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Skipping because home.name is nil for %@", buf, 0x16u);
    }
    id v7 = 0;
  }
  return (NSDictionary *)v7;
}

- (NSString)urlString
{
  uint64_t v2 = [(HMDHome *)self uuid];
  BOOL v3 = hm_assistantIdentifier();

  return (NSString *)v3;
}

- (id)multiUserSettings
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v34 = 0;
  __int16 v35 = &v34;
  uint64_t v36 = 0x2020000000;
  uint64_t v37 = 0;
  uint64_t v30 = 0;
  __int16 v31 = &v30;
  uint64_t v32 = 0x2020000000;
  uint64_t v33 = 0;
  uint64_t v2 = [(HMDHome *)self users];
  uint64_t v3 = [v2 count];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v4 = v2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v26 objects:v38 count:16];
  uint64_t v19 = v3;
  if (v5)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)v27;
    uint64_t v24 = 0;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v27 != v8) {
          objc_enumerationMutation(v4);
        }
        id v10 = *(void **)(*((void *)&v26 + 1) + 8 * v9);
        if (([v10 isOwner] & 1) == 0)
        {
          id v11 = [v10 sharedSettingValuesByKeyPath];
          id v12 = (void *)[v11 mutableCopy];

          if ([v12 count])
          {
            v25[0] = MEMORY[0x263EF8330];
            v25[1] = 3221225472;
            void v25[2] = __54__HMDHome_MultiUserSettingsMetrics__multiUserSettings__block_invoke;
            v25[3] = &unk_264A23140;
            void v25[4] = &v34;
            void v25[5] = &v30;
            [v12 enumerateKeysAndObjectsUsingBlock:v25];
            ++v7;
          }
          else
          {
            id v13 = [v10 cloudShareTrustManager];
            int v14 = [v13 isTrustConfigured];

            v6 += v14 ^ 1u;
            switch([v10 sharedUserSettingsLogEventBackingStoreControllerRunState])
            {
              case 0:
              case 1:
                ++v24;
                break;
              case 2:
                ++v21;
                break;
              case 3:
                ++v23;
                break;
              case 4:
                ++v22;
                break;
              case 5:
                ++v20;
                break;
              default:
                break;
            }
          }
        }
        ++v9;
      }
      while (v5 != v9);
      uint64_t v15 = [v4 countByEnumeratingWithState:&v26 objects:v38 count:16];
      uint64_t v5 = v15;
    }
    while (v15);
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v24 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }

  id v16 = objc_alloc(MEMORY[0x263F0E570]);
  __int16 v17 = (void *)[v16 initWithNumSharedUsers:(v19 - 1) & ~((v19 - 1) >> 63) numUsersWithSettings:v7 numUsersWithIdentifyVoiceOff:v35[3] numUsersWithPlayBackInfluencesForYouOff:v31[3] numUsersCloudShareTrustNotConfigured:v6 numUsersSharedBackingStoreNotStarted:v24 numUsersSharedBackingStoreRunning:v21 numUsersSharedBackingStoreNotRunningDueToError:v23 numUsersSharedBackingStoreNotRunningDueToStopped:v22 numUsersSharedBackingStoreSharedZoneWaitingForShareInvitation:v20];

  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v34, 8);
  return v17;
}

void __54__HMDHome_MultiUserSettingsMetrics__multiUserSettings__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  if ([v14 isEqualToString:@"shared.root.siri.identifyVoice"])
  {
    id v6 = v5;
    objc_opt_class();
    id v7 = (objc_opt_isKindOfClass() & 1) != 0 ? v6 : 0;
    id v8 = v7;

    int v9 = [v8 intValue];
    if (!v9) {
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
  }
  if ([v14 isEqualToString:@"shared.root.music.playbackInfluencesForYou"])
  {
    id v10 = v5;
    objc_opt_class();
    id v11 = (objc_opt_isKindOfClass() & 1) != 0 ? v10 : 0;
    id v12 = v11;

    int v13 = [v12 intValue];
    if (!v13) {
      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    }
  }
}

+ (HMDHome)homeWithHomeManager:(id)a3 backingStore:(id)a4 model:(id)a5 error:(id *)a6
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v70 = 0;
  if (a6) {
    int v13 = a6;
  }
  else {
    int v13 = (id *)&v70;
  }
  unint64_t v14 = 0x263F08000uLL;
  id v15 = objc_alloc(MEMORY[0x263F08C38]);
  __int16 v65 = v12;
  id v16 = [v12 ownerUUID];
  __int16 v17 = (void *)[v15 initWithUUIDString:v16];

  __int16 v18 = [v11 cdlsFetchObjectWithUUID:v17 ofModelType:objc_opt_class() error:v13];
  uint64_t v19 = v18;
  if (!v18)
  {
    if (!*v13)
    {
      id *v13 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
    }
    uint64_t v21 = (void *)MEMORY[0x230FBD990]();
    id v22 = a1;
    uint64_t v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      uint64_t v24 = v17;
      __int16 v25 = v11;
      v27 = id v26 = v10;
      long long v28 = [v25 uuid];
      id v29 = *v13;
      *(_DWORD *)buf = 138543874;
      __int16 v72 = v27;
      __int16 v73 = 2112;
      __int16 v74 = v28;
      __int16 v75 = 2112;
      id v76 = v29;
      _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unable to fetch owner model from backing store %@: %@", buf, 0x20u);

      id v10 = v26;
      id v11 = v25;
      __int16 v17 = v24;
      uint64_t v19 = 0;
    }

    goto LABEL_12;
  }
  uint64_t v20 = [v18 accountHandle];
  if (!v20)
  {
    if (+[HMDHomeManager areWeAllowingHomeKitToRunWithoutCloudKitForHH2])
    {
      goto LABEL_15;
    }
    __int16 v51 = +[HMDAppleAccountManager sharedManager];
    uint64_t v20 = [v51 account];

    if (v20)
    {
      id v52 = [v20 handles];
      uint64_t v53 = [v52 firstObject];

      if (v53)
      {
        unint64_t v54 = [v11 context];
        v66[0] = MEMORY[0x263EF8330];
        v66[1] = 3221225472;
        void v66[2] = __67__HMDHome_DataModel__homeWithHomeManager_backingStore_model_error___block_invoke;
        v66[3] = &unk_264A2F2F8;
        id v67 = v17;
        id v68 = v53;
        id v69 = v11;
        id v55 = v53;
        [v54 performBlock:v66];

        [v19 setAccountHandle:v55];
        unint64_t v14 = 0x263F08000;
        goto LABEL_6;
      }
      if (!*v13)
      {
        id *v13 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
      }
      char v58 = (void *)MEMORY[0x230FBD990]();
      id v59 = a1;
      uint64_t v60 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        __int16 v61 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        __int16 v72 = v61;
        _os_log_impl(&dword_22F52A000, v60, OS_LOG_TYPE_ERROR, "%{public}@Unable to load home (user has no account handle and we do not appear to be logged in (no handles).", buf, 0xCu);
      }

LABEL_13:
      uint64_t v30 = 0;
      goto LABEL_21;
    }
    if (!*v13)
    {
      id *v13 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
    }
    uint64_t v21 = (void *)MEMORY[0x230FBD990]();
    id v22 = a1;
    id v56 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      id v57 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v72 = v57;
      _os_log_impl(&dword_22F52A000, v56, OS_LOG_TYPE_ERROR, "%{public}@Unable to load home (user has no account handle and we do not appear to be logged in (no account).", buf, 0xCu);
    }
LABEL_12:

    goto LABEL_13;
  }
LABEL_6:

LABEL_15:
  __int16 v31 = [[HMDUser alloc] initWithModelObject:v19];
  if (v31)
  {
    uint64_t v32 = (void *)MEMORY[0x263F0E8C8];
    uint64_t v33 = [v65 presenceComputeStatus];
    __int16 v63 = [v32 authWithNumber:v33];

    __int16 v62 = [HMDHome alloc];
    [v65 name];
    v35 = unint64_t v34 = v14;
    [v65 uuid];
    uint64_t v64 = v11;
    v37 = id v36 = v10;
    id v38 = objc_alloc(*(Class *)(v34 + 3128));
    [v65 defaultRoomUUID];
    v40 = uint64_t v39 = v17;
    __int16 v41 = v19;
    uint64_t v42 = (void *)[v38 initWithUUIDString:v40];
    uint64_t v30 = [(HMDHome *)v62 initWithName:v35 uuid:v37 defaultRoomUUID:v42 owner:v31 homeManager:v36 presenceAuth:v63];

    uint64_t v19 = v41;
    __int16 v17 = v39;

    id v10 = v36;
    id v11 = v64;

    id v43 = [v65 owned];
    -[HMDHome setOwnerUser:](v30, "setOwnerUser:", [v43 BOOLValue]);

    uint64_t v44 = [v65 residentSelectionVersion];
    [(HMDHome *)v30 setResidentSelectionVersion:v44];

    [(HMDHome *)v30 setBackingStore:v64];
    [v64 setDelegate:v30];
    uint64_t v45 = [[HMDHomeObjectLookup alloc] initWithHome:v30];
    [v64 setLookup:v45];

    [v64 setHome:v30];
  }
  else
  {
    id v46 = (void *)MEMORY[0x230FBD990]();
    id v47 = a1;
    uint64_t v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      __int16 v49 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v72 = v49;
      _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_ERROR, "%{public}@Unable to create owner from model.", buf, 0xCu);
    }
    uint64_t v30 = 0;
  }

LABEL_21:
  return v30;
}

void __67__HMDHome_DataModel__homeWithHomeManager_backingStore_model_error___block_invoke(uint64_t a1)
{
  uint64_t v2 = +[HMCContext findUserWithModelID:*(void *)(a1 + 32)];
  if (v2)
  {
    id v4 = v2;
    [v2 setAccountHandle:*(void *)(a1 + 40)];
    uint64_t v3 = [*(id *)(a1 + 48) context];
    [v3 save];

    uint64_t v2 = v4;
  }
}

+ (id)createNewHomeModelsWithModelID:(id)a3 parentModelID:(id)a4 name:(id)a5 acwgGroupResolvingKey:(id)a6 acwgIssuerPublicKeyExternalRepresentation:(id)a7 userUniqueIDForAccessories:(id)a8 ownedBy:(id)a9
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = a9;
  if (!v14)
  {
    _HMFPreconditionFailure();
    goto LABEL_7;
  }
  if (!v15)
  {
LABEL_7:
    _HMFPreconditionFailure();
    goto LABEL_8;
  }
  if (!v16)
  {
LABEL_8:
    _HMFPreconditionFailure();
    goto LABEL_9;
  }
  uint64_t v21 = v20;
  if (v20)
  {
    id v22 = [MEMORY[0x263EFF980] array];
    uint64_t v23 = [(HMDBackingStoreModelObject *)[HMDHomeModel alloc] initWithUUID:v14 parentUUID:v15];
    [(HMDHomeModel *)v23 setName:v16];
    uint64_t v24 = [v21 pairingUsername];
    [(HMDHomeModel *)v23 setOwnerName:v24];

    __int16 v25 = [v21 uuid];
    [v25 UUIDString];
    uint64_t v48 = v15;
    v27 = id v26 = v17;
    [(HMDHomeModel *)v23 setOwnerUUID:v27];

    long long v28 = [v21 userID];
    [(HMDHomeModel *)v23 setOwnerUserID:v28];

    id v29 = [v21 publicKey];
    [(HMDHomeModel *)v23 setOwnerPublicKey:v29];

    uint64_t v30 = [MEMORY[0x263F08C38] UUID];
    __int16 v31 = [v30 UUIDString];
    [(HMDHomeModel *)v23 setDefaultRoomUUID:v31];

    [(HMDHomeModel *)v23 setMatCredGRK:v26];
    [(HMDHomeModel *)v23 setOwned:MEMORY[0x263EFFA88]];
    [v22 addObject:v23];
    uint64_t v32 = [v21 backingStoreObjects:4];
    v52[0] = MEMORY[0x263EF8330];
    v52[1] = 3221225472;
    v52[2] = __171__HMDHome_DataModel__createNewHomeModelsWithModelID_parentModelID_name_acwgGroupResolvingKey_acwgIssuerPublicKeyExternalRepresentation_userUniqueIDForAccessories_ownedBy___block_invoke;
    v52[3] = &unk_264A23360;
    id v33 = v14;
    id v53 = v33;
    id v54 = v18;
    id v55 = v19;
    id v34 = v22;
    id v56 = v34;
    id v35 = v19;
    id v36 = v18;
    objc_msgSend(v32, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v52);

    uint64_t v37 = +[HMDHome getBuiltinActionSets];
    v49[0] = MEMORY[0x263EF8330];
    v49[1] = 3221225472;
    void v49[2] = __171__HMDHome_DataModel__createNewHomeModelsWithModelID_parentModelID_name_acwgGroupResolvingKey_acwgIssuerPublicKeyExternalRepresentation_userUniqueIDForAccessories_ownedBy___block_invoke_2;
    v49[3] = &unk_264A27A18;
    id v50 = v33;
    id v38 = v34;
    id v51 = v38;
    id v39 = v33;
    [v37 enumerateKeysAndObjectsUsingBlock:v49];

    id v40 = +[HMDHomeMediaSettingsModel defaultModelForHomeUUID:v39];
    [v38 addObject:v40];

    __int16 v41 = +[HMDHomePersonManagerSettingsModel defaultModelForHomeUUID:v39];
    [v38 addObject:v41];

    uint64_t v42 = +[HMDHomeThreadNetworkModel defaultModelForHomeUUID:v39];
    [v38 addObject:v42];

    id v43 = v51;
    id v44 = v38;

    return v44;
  }
LABEL_9:
  uint64_t v46 = _HMFPreconditionFailure();
  __171__HMDHome_DataModel__createNewHomeModelsWithModelID_parentModelID_name_acwgGroupResolvingKey_acwgIssuerPublicKeyExternalRepresentation_userUniqueIDForAccessories_ownedBy___block_invoke(v46, v47);
  return result;
}

void __171__HMDHome_DataModel__createNewHomeModelsWithModelID_parentModelID_name_acwgGroupResolvingKey_acwgIssuerPublicKeyExternalRepresentation_userUniqueIDForAccessories_ownedBy___block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v3 = v6;
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = v3;
  id v5 = v4;
  if (v4)
  {
    [v4 setParentUUID:*(void *)(a1 + 32)];
    [v5 setMatCredIPKExternalRepresentation:*(void *)(a1 + 40)];
    [v5 setUniqueIDForAccessories:*(void *)(a1 + 48)];
  }
  [*(id *)(a1 + 56) addObject:v6];
}

void __171__HMDHome_DataModel__createNewHomeModelsWithModelID_parentModelID_name_acwgGroupResolvingKey_acwgIssuerPublicKeyExternalRepresentation_userUniqueIDForAccessories_ownedBy___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v5 = (void *)MEMORY[0x263F08C38];
  uint64_t v6 = *(void *)(a1 + 32);
  id v14 = a2;
  id v7 = (void *)MEMORY[0x263EFF8C0];
  id v8 = a3;
  id v9 = a2;
  id v10 = [v7 arrayWithObjects:&v14 count:1];
  id v11 = objc_msgSend(v5, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v6, 0, v10, v14, v15);

  id v12 = [(HMDBackingStoreModelObject *)[HMDActionSetModel alloc] initWithUUID:v11 parentUUID:*(void *)(a1 + 32)];
  int v13 = HMDLocalizedStringForKey(v8);

  [(HMDActionSetModel *)v12 setName:v13];
  [(HMDActionSetModel *)v12 setType:v9];
  [*(id *)(a1 + 40) addObject:v12];
}

- (void)_evaluateNetworkProtectionSupport
{
  uint64_t v2 = self;
  uint64_t v83 = *MEMORY[0x263EF8340];
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  uint64_t v3 = [(HMDHome *)self residentDeviceManager];
  id v4 = [v3 residentDevices];

  uint64_t v5 = [v4 countByEnumeratingWithState:&v63 objects:v82 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v64;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v64 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v63 + 1) + 8 * i);
        id v10 = [v9 device];
        if ([v9 isEnabled])
        {
          id v11 = [v9 capabilities];
          int v12 = [v11 supportsRouterManagement];

          if (v12)
          {
            uint64_t v13 = [(HMDHome *)v2 minimumNetworkRouterSupportHomeKitVersion];
            if (!v13) {
              goto LABEL_13;
            }
            id v14 = (void *)v13;
            uint64_t v15 = [v10 version];
            [(HMDHome *)v2 minimumNetworkRouterSupportHomeKitVersion];
            uint64_t v16 = v7;
            id v17 = v4;
            v19 = id v18 = v2;
            int v61 = [v15 isAtLeastVersion:v19];

            uint64_t v2 = v18;
            id v4 = v17;
            uint64_t v7 = v16;

            if (v61)
            {
LABEL_13:
              uint64_t v21 = (void *)MEMORY[0x230FBD990]();
              id v22 = v2;
              uint64_t v23 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v25 = uint64_t v24 = v2;
                *(_DWORD *)buf = 138543618;
                __int16 v73 = v25;
                __int16 v74 = 2112;
                __int16 v75 = v9;
                _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Found resident with router management support: %@", buf, 0x16u);

                uint64_t v2 = v24;
              }

              int v20 = 1;
              goto LABEL_16;
            }
          }
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v63 objects:v82 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
  int v20 = 0;
LABEL_16:

  id v26 = [(HMDHome *)v2 activeNetworkRouterAccessory];

  BOOL v27 = [(HMDHome *)v2 _isNetworkRouterSupportEnabledForCurrentDevice];
  long long v28 = (void *)MEMORY[0x230FBD990]();
  id v29 = v2;
  uint64_t v30 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    BOOL v31 = v27;
    uint64_t v32 = HMFGetLogIdentifier();
    id v33 = [(HMDHome *)v29 name];
    id v34 = HMFBooleanToString();
    id v35 = HMFBooleanToString();
    HMFBooleanToString();
    id v36 = v62 = v28;
    *(_DWORD *)buf = 138544386;
    __int16 v73 = v32;
    __int16 v74 = 2112;
    __int16 v75 = v33;
    __int16 v76 = 2112;
    uint64_t v77 = v34;
    __int16 v78 = 2112;
    char v79 = v35;
    __int16 v80 = 2112;
    BOOL v81 = v36;
    _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_INFO, "%{public}@Evaluating network protection support for home %@, Router Managing Device: %@, Active Network Router Accessory: %@, Router support enabled: %@", buf, 0x34u);

    long long v28 = v62;
    BOOL v27 = v31;
  }
  uint64_t v37 = [(HMDHome *)v29 minHomeKitVersionForAccessoryNetworkProtectionChange];
  if (v37)
  {
    id v38 = [(HMDHome *)v29 minHomeKitVersionForAccessoryNetworkProtectionChange];
    id v39 = +[HMDHomeKitVersion currentVersion];
    int v40 = [v38 isGreaterThanVersion:v39];
  }
  else
  {
    int v40 = 0;
  }

  BOOL v41 = [(HMDHome *)v29 isAdminUser];
  uint64_t v42 = 4;
  if (v41) {
    uint64_t v42 = 0;
  }
  if (!v26) {
    v42 |= 8uLL;
  }
  uint64_t v43 = v42 | v20 ^ 1u;
  if (!v27) {
    v43 |= 2uLL;
  }
  if (v40) {
    uint64_t v44 = v43 | 0x10;
  }
  else {
    uint64_t v44 = v43;
  }
  if ([(HMDHome *)v29 networkRouterSupportDisableReason] != v44)
  {
    [(HMDHome *)v29 setNetworkRouterSupportDisableReason:v44];
    [(HMDHome *)v29 setNetworkRouterSupport:[(HMDHome *)v29 deriveNetworkRouterSupport:v44]];
    unint64_t v45 = ([(HMDHome *)v29 networkRouterSupport] >> 2) & 1;
    uint64_t v46 = (void *)MEMORY[0x263F42590];
    uint64_t v47 = *MEMORY[0x263F0CD10];
    uint64_t v48 = [(HMDHome *)v29 messageDestination];
    uint64_t v69 = *MEMORY[0x263F0CD08];
    __int16 v49 = [NSNumber numberWithUnsignedInteger:v44];
    v71[0] = v49;
    uint64_t v70 = *MEMORY[0x263F0C788];
    uint64_t v50 = v70;
    id v51 = [NSNumber numberWithBool:v45];
    v71[1] = v51;
    id v52 = [NSDictionary dictionaryWithObjects:v71 forKeys:&v69 count:2];
    id v53 = [v46 messageWithName:v47 destination:v48 payload:v52];

    [v53 setRequiresSPIEntitlement];
    id v54 = [(HMDHome *)v29 msgDispatcher];
    [v54 sendMessage:v53 completionHandler:0];

    id v55 = (void *)MEMORY[0x263F42590];
    id v56 = [(HMDHome *)v29 messageDestination];
    uint64_t v67 = v50;
    id v57 = [NSNumber numberWithBool:v45];
    id v68 = v57;
    char v58 = [NSDictionary dictionaryWithObjects:&v68 forKeys:&v67 count:1];
    id v59 = [v55 messageWithName:v47 destination:v56 payload:v58];

    [v59 setRequiresNoSPIEntitlement];
    uint64_t v60 = [(HMDHome *)v29 msgDispatcher];
    [v60 sendMessage:v59 completionHandler:0];
  }
}

- (void)_requestRemoveClientConfigurationWithIdentifier:(id)a3
{
  location[3] = *(id *)MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self residentDeviceManager];
  uint64_t v6 = [v5 primaryResidentDevice];
  uint64_t v7 = [v6 device];

  if (v7)
  {
    id v8 = [HMDRemoteDeviceMessageDestination alloc];
    id v9 = [(HMDHome *)self uuid];
    id v10 = [(HMDRemoteDeviceMessageDestination *)v8 initWithTarget:v9 device:v7];

    id v11 = objc_alloc(MEMORY[0x263F42590]);
    __int16 v25 = @"HMDH.NetworkClientIdentifierMessageKey";
    id v26 = v4;
    int v12 = [NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    uint64_t v13 = (void *)[v11 initWithName:@"HMDHomeRemoveClientConfigurationRequestKey" destination:v10 payload:v12];

    [v13 setSecureRemote:1];
    objc_initWeak(location, self);
    uint64_t v19 = MEMORY[0x263EF8330];
    uint64_t v20 = 3221225472;
    uint64_t v21 = __82__HMDHome_NetworkRouterInternal___requestRemoveClientConfigurationWithIdentifier___block_invoke;
    id v22 = &unk_264A2D420;
    objc_copyWeak(&v24, location);
    id v23 = v4;
    [v13 setResponseHandler:&v19];
    id v14 = [(HMDHome *)self msgDispatcher];
    [v14 sendMessage:v13 completionHandler:0];

    objc_destroyWeak(&v24);
    objc_destroyWeak(location);
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    uint64_t v16 = self;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = HMFGetLogIdentifier();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v18;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@No primary resident device to request to remove client configuration", (uint8_t *)location, 0xCu);
    }
  }
}

void __82__HMDHome_NetworkRouterInternal___requestRemoveClientConfigurationWithIdentifier___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = WeakRetained;
    id v10 = HMFGetOSLogHandle();
    id v11 = v10;
    if (v5)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v12 = HMFGetLogIdentifier();
        uint64_t v13 = *(void *)(a1 + 32);
        int v19 = 138543874;
        uint64_t v20 = v12;
        __int16 v21 = 2112;
        uint64_t v22 = v13;
        __int16 v23 = 2112;
        id v24 = v5;
        id v14 = "%{public}@Request to remove client configuration %@ failed with error: %@";
        uint64_t v15 = v11;
        os_log_type_t v16 = OS_LOG_TYPE_ERROR;
        uint32_t v17 = 32;
LABEL_7:
        _os_log_impl(&dword_22F52A000, v15, v16, v14, (uint8_t *)&v19, v17);
      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v12 = HMFGetLogIdentifier();
      uint64_t v18 = *(void *)(a1 + 32);
      int v19 = 138543618;
      uint64_t v20 = v12;
      __int16 v21 = 2112;
      uint64_t v22 = v18;
      id v14 = "%{public}@Request remove client configuration %@ successful";
      uint64_t v15 = v11;
      os_log_type_t v16 = OS_LOG_TYPE_INFO;
      uint32_t v17 = 22;
      goto LABEL_7;
    }
  }
}

- (void)_removeClientConfigurationWithIdentifier:(id)a3 completion:(id)a4
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHome *)self activeNetworkRouterAccessory];
  id v9 = [v8 networkRouterController];

  if (v9)
  {
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 3221225472;
    void v18[2] = __86__HMDHome_NetworkRouterInternal___removeClientConfigurationWithIdentifier_completion___block_invoke;
    v18[3] = &unk_264A2E788;
    void v18[4] = self;
    id v19 = v6;
    id v20 = v7;
    [v9 removeClientConfigurationWithClientIdentifier:v19 completion:v18];
  }
  else
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = self;
    int v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      id v14 = [(HMDHome *)v11 activeNetworkRouterAccessory];
      uint64_t v15 = [v14 uuid];
      os_log_type_t v16 = [v15 UUIDString];
      *(_DWORD *)buf = 138543874;
      uint64_t v22 = v13;
      __int16 v23 = 2112;
      id v24 = v6;
      __int16 v25 = 2112;
      id v26 = v16;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove client configuration %@ due to no router controller found on the active network router %@", buf, 0x20u);
    }
    if (v7)
    {
      uint32_t v17 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      (*((void (**)(id, void *))v7 + 2))(v7, v17);
    }
  }
}

void __86__HMDHome_NetworkRouterInternal___removeClientConfigurationWithIdentifier_completion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      uint64_t v9 = *(void *)(a1 + 40);
      int v15 = 138543874;
      os_log_type_t v16 = v8;
      __int16 v17 = 2112;
      uint64_t v18 = v9;
      __int16 v19 = 2112;
      id v20 = v3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove client configuration %@ due to error %@", (uint8_t *)&v15, 0x20u);
    }
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10)
    {
      id v11 = *(void (**)(void))(v10 + 16);
LABEL_10:
      v11();
    }
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v12 = HMFGetLogIdentifier();
      uint64_t v13 = *(void *)(a1 + 40);
      int v15 = 138543618;
      os_log_type_t v16 = v12;
      __int16 v17 = 2112;
      uint64_t v18 = v13;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Removed client configuration %@ successfully", (uint8_t *)&v15, 0x16u);
    }
    uint64_t v14 = *(void *)(a1 + 48);
    if (v14)
    {
      id v11 = *(void (**)(void))(v14 + 16);
      goto LABEL_10;
    }
  }
}

- (void)_removeClientConfigurationWithIdentifier:(id)a3
{
  id v4 = a3;
  if ([(HMDHome *)self isOwnerUser]) {
    [(HMDHome *)self _removeClientConfigurationWithIdentifier:v4 completion:0];
  }
  else {
    [(HMDHome *)self _requestRemoveClientConfigurationWithIdentifier:v4];
  }
}

- (void)_requestUniquePSKClientConfigurationWithCompletion:(id)a3
{
  location[3] = *(id *)MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHome *)self residentDeviceManager];
  id v6 = [v5 primaryResidentDevice];
  id v7 = [v6 device];

  if (v7)
  {
    id v8 = [HMDRemoteDeviceMessageDestination alloc];
    uint64_t v9 = [(HMDHome *)self uuid];
    uint64_t v10 = [(HMDRemoteDeviceMessageDestination *)v8 initWithTarget:v9 device:v7];

    id v11 = (void *)[objc_alloc(MEMORY[0x263F42590]) initWithName:@"HMDHomeCreateUniquePSKClientConfigurationRequestKey" destination:v10 payload:0];
    [v11 setSecureRemote:1];
    objc_initWeak(location, self);
    uint64_t v17 = MEMORY[0x263EF8330];
    uint64_t v18 = 3221225472;
    __int16 v19 = __85__HMDHome_NetworkRouterInternal___requestUniquePSKClientConfigurationWithCompletion___block_invoke;
    id v20 = &unk_264A2EAE0;
    objc_copyWeak(&v22, location);
    id v21 = v4;
    [v11 setResponseHandler:&v17];
    int v12 = [(HMDHome *)self msgDispatcher];
    [v12 sendMessage:v11 completionHandler:0];

    objc_destroyWeak(&v22);
    objc_destroyWeak(location);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = self;
    int v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v16 = HMFGetLogIdentifier();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v16;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@No primary resident device to request unique PSK from", (uint8_t *)location, 0xCu);
    }
    uint64_t v10 = [MEMORY[0x263F087E8] hmErrorWithCode:91];
    (*((void (**)(id, void, HMDRemoteDeviceMessageDestination *))v4 + 2))(v4, 0, v10);
  }
}

void __85__HMDHome_NetworkRouterInternal___requestUniquePSKClientConfigurationWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      id v8 = (void *)MEMORY[0x230FBD990]();
      id v9 = WeakRetained;
      uint64_t v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        uint64_t v37 = v11;
        __int16 v38 = 2112;
        id v39 = v5;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Request for unique PSK failed with error: %@", buf, 0x16u);
      }
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else
    {
      int v12 = objc_msgSend(v6, "hmf_dataForKey:", @"HMDH.UniquePSKMessageKey");
      uint64_t v13 = objc_msgSend(v6, "hmf_numberForKey:", @"HMDH.NetworkClientIdentifierMessageKey");
      id v14 = objc_alloc(MEMORY[0x263F08C38]);
      int v15 = objc_msgSend(v6, "hmf_stringForKey:", @"HMDH.NetworkRouterUUIDMessageKey");
      os_log_type_t v16 = (void *)[v14 initWithUUIDString:v15];

      uint64_t v17 = (void *)MEMORY[0x230FBD990]();
      id v18 = WeakRetained;
      __int16 v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        uint64_t v32 = v17;
        v21 = id v20 = v13;
        HMFBooleanToString();
        id v22 = v33 = v12;
        [v16 UUIDString];
        v23 = id v34 = v16;
        *(_DWORD *)buf = 138544130;
        uint64_t v37 = v21;
        __int16 v38 = 2112;
        id v39 = v22;
        __int16 v40 = 2112;
        BOOL v41 = v20;
        __int16 v42 = 2112;
        uint64_t v43 = v23;
        _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Request for unique PSK results successful. PSK: %@, Client Identifier: %@, Network Router UUID: %@", buf, 0x2Au);

        os_log_type_t v16 = v34;
        int v12 = v33;

        uint64_t v13 = v20;
        uint64_t v17 = v32;
      }

      if (v12 && v13 && v16)
      {
        id v24 = [[HMDAccessoryNetworkCredential alloc] initWithNetworkRouterUUID:v16 clientIdentifier:v13 wiFiPSK:v12];
        __int16 v25 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      }
      else
      {
        id v26 = (void *)MEMORY[0x230FBD990]();
        id v27 = v18;
        long long v28 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          id v35 = v16;
          v30 = id v29 = v13;
          *(_DWORD *)buf = 138543362;
          uint64_t v37 = v30;
          _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_ERROR, "%{public}@Missing info in response", buf, 0xCu);

          uint64_t v13 = v29;
          os_log_type_t v16 = v35;
        }

        uint64_t v31 = *(void *)(a1 + 32);
        id v24 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
        __int16 v25 = *(void (**)(void))(v31 + 16);
      }
      v25();
    }
  }
}

- (void)_createUniquePSKClientConfigurationWithRequestMessage:(id)a3 pairingEvent:(id)a4 completion:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __112__HMDHome_NetworkRouterInternal___createUniquePSKClientConfigurationWithRequestMessage_pairingEvent_completion___block_invoke;
  aBlock[3] = &unk_264A24370;
  objc_copyWeak(&v19, &location);
  id v11 = v9;
  id v16 = v11;
  id v12 = v8;
  id v17 = v12;
  id v13 = v10;
  id v18 = v13;
  id v14 = _Block_copy(aBlock);
  [(HMDHome *)self _requestUniquePSKClientConfigurationWithCompletion:v14];

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
}

void __112__HMDHome_NetworkRouterInternal___createUniquePSKClientConfigurationWithRequestMessage_pairingEvent_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v5)
    {
      id v8 = [MEMORY[0x263F087E8] hmErrorWithCode:98 description:0 reason:0 suggestion:0 underlyingError:v5];
      (*(void (**)(uint64_t, id, void *))(v7 + 16))(v7, v11, v8);
    }
    else
    {
      (*(void (**)(uint64_t, id, void))(v7 + 16))(v7, v11, 0);
    }
  }
  else
  {
    id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:2];

    if (*(void *)(a1 + 32))
    {
      id v10 = +[HMDMetricsManager sharedLogEventSubmitter];
      [v10 submitLogEvent:*(void *)(a1 + 32) error:v9];
    }
    [*(id *)(a1 + 40) respondWithError:v9];
  }
}

- (void)_evaluateNetworkProtectionAndRouterManagement
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  [(HMDHome *)self _evaluateNetworkProtectionSupport];
  id v3 = [(HMDHome *)self activeNetworkRouterAccessory];
  id v4 = [v3 networkRouterController];

  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v8)
    {
      id v9 = HMFGetLogIdentifier();
      id v10 = [v3 uuid];
      id v11 = [v10 UUIDString];
      id v12 = [v3 name];
      int v16 = 138543874;
      id v17 = v9;
      __int16 v18 = 2112;
      id v19 = v11;
      __int16 v20 = 2112;
      id v21 = v12;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Found active network router accessory %@/%@", (uint8_t *)&v16, 0x20u);
    }
    [(HMDHome *)v6 _configureNetworkRouterClientManager:v3];
  }
  else
  {
    if (v8)
    {
      id v13 = HMFGetLogIdentifier();
      id v14 = [(HMDHome *)v6 activeNetworkRouterUUID];
      int v15 = [v3 name];
      int v16 = 138543874;
      id v17 = v13;
      __int16 v18 = 2112;
      id v19 = v14;
      __int16 v20 = 2112;
      id v21 = v15;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@No active network router accessory with router info %@/%@", (uint8_t *)&v16, 0x20u);
    }
    [(HMDHome *)v6 _unconfigureNetworkRouterClientManager];
  }
}

- (void)_handleNetworkProtectionModeChangeForTransaction:(id)a3
{
  id v5 = a3;
  id v4 = [v5 userInfo];
  [v4 setObject:MEMORY[0x263EFFA88] forKeyedSubscript:@"NetworkProtectionModeChanged"];

  [(HMDHome *)self _scheduleApplyNetworkRouterSettingsAction:v5];
}

- (void)_evaluateNetworkRouterManagementForTransaction:(id)a3
{
  id v5 = a3;
  id v4 = [v5 userInfo];
  [v4 setObject:MEMORY[0x263EFFA88] forKeyedSubscript:@"EvaluateRouterManagement"];

  [(HMDHome *)self _scheduleApplyNetworkRouterSettingsAction:v5];
}

- (void)_scheduleApplyNetworkRouterSettingsAction:(id)a3
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke;
  v3[3] = &unk_264A24348;
  void v3[4] = self;
  [a3 addPostApplyActionIfNotPresent:@"HMDNetworkRouterApplySettingsAction" usingBlock:v3];
}

void __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke_2;
  v7[3] = &unk_264A2F820;
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

void __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke_2(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:@"EvaluateRouterManagement"];

  if (v3) {
    [*(id *)(a1 + 40) _evaluateNetworkProtectionAndRouterManagement];
  }
  id v4 = [*(id *)(a1 + 32) userInfo];
  uint64_t v5 = [v4 objectForKeyedSubscript:@"NetworkProtectionModeChanged"];

  if (v5)
  {
    id v6 = [MEMORY[0x263F08A00] defaultCenter];
    [v6 postNotificationName:@"HMDHomeNetworkProtectionUpdatedNotificationKey" object:*(void *)(a1 + 40)];
  }
}

- (void)handleAccessoryDidRemoveNetworkRouterControllerNotification:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __94__HMDHome_NetworkRouterInternal__handleAccessoryDidRemoveNetworkRouterControllerNotification___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  uint64_t v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __94__HMDHome_NetworkRouterInternal__handleAccessoryDidRemoveNetworkRouterControllerNotification___block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:@"HMDNetworkRouterAccessoryNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  if (!v5) {
    _HMFPreconditionFailure();
  }
  id v6 = [*(id *)(a1 + 40) activeNetworkRouterAccessory];
  char v7 = [v6 isEqual:v5];
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = *(id *)(a1 + 40);
  id v10 = HMFGetOSLogHandle();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (v7)
  {
    if (v11)
    {
      id v12 = HMFGetLogIdentifier();
      int v14 = 138543362;
      int v15 = v12;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Removed network router profile for active network router accessory", (uint8_t *)&v14, 0xCu);
    }
    [*(id *)(a1 + 40) _addTransactionForActiveNetworkRouterAccessory:0 isReplacement:0];
  }
  else
  {
    if (v11)
    {
      id v13 = HMFGetLogIdentifier();
      int v14 = 138543362;
      int v15 = v13;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Removed network router profile for non-active network router accessory", (uint8_t *)&v14, 0xCu);
    }
  }
}

- (void)handleAccessoryDidAddNetworkRouterControllerNotification:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHome *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  void v7[2] = __91__HMDHome_NetworkRouterInternal__handleAccessoryDidAddNetworkRouterControllerNotification___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __91__HMDHome_NetworkRouterInternal__handleAccessoryDidAddNetworkRouterControllerNotification___block_invoke(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:@"HMDNetworkRouterAccessoryNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  if (!v5) {
    _HMFPreconditionFailure();
  }
  id v6 = [v5 uuid];
  char v7 = [*(id *)(a1 + 40) activeNetworkRouterUUID];
  char v8 = [v6 isEqual:v7];

  id v9 = (void *)MEMORY[0x230FBD990]();
  id v10 = *(id *)(a1 + 40);
  BOOL v11 = HMFGetOSLogHandle();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
  if (v8)
  {
    if (v12)
    {
      id v13 = HMFGetLogIdentifier();
      int v14 = [v5 uuid];
      int v18 = 138543618;
      id v19 = v13;
      __int16 v20 = 2112;
      id v21 = v14;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Added network router controller is for active network router accessory %@", (uint8_t *)&v18, 0x16u);
    }
    [*(id *)(a1 + 40) _evaluateNetworkProtectionAndRouterManagement];
  }
  else
  {
    if (v12)
    {
      int v15 = HMFGetLogIdentifier();
      uint64_t v16 = [v5 uuid];
      id v17 = [*(id *)(a1 + 40) activeNetworkRouterUUID];
      int v18 = 138543874;
      id v19 = v15;
      __int16 v20 = 2112;
      id v21 = v16;
      __int16 v22 = 2112;
      __int16 v23 = v17;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Ignoring added network router controller for accessory %@ since it is not for the active network router accessory %@", (uint8_t *)&v18, 0x20u);
    }
  }
}

- (void)_unconfigureNetworkRouterClientManager
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHome *)self routerClientManager];
  if (v3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = self;
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      char v7 = HMFGetLogIdentifier();
      int v9 = 138543362;
      id v10 = v7;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Shutting down firewall rule manager and network router client manager", (uint8_t *)&v9, 0xCu);
    }
    [v3 stop];
    [(HMDHome *)v5 setRouterClientManager:0];
    char v8 = +[HMDNetworkRouterFirewallRuleManager sharedInstance];
    [v8 shutdownForClient:v3];
  }
}

- (void)_configureNetworkRouterClientManager:(id)a3
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([(HMDHome *)self supportsRouterManagement])
  {
    id v5 = [(HMDHome *)self routerClientManager];

    if (v5)
    {
      id v6 = [(HMDHome *)self routerClientManager];
      [v6 replaceActiveNetworkRouterAccessory:v4];
    }
    else
    {
      char v7 = (void *)MEMORY[0x230FBD990]();
      char v8 = self;
      int v9 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        id v10 = HMFGetLogIdentifier();
        uint64_t v11 = [v4 name];
        BOOL v12 = [v4 uuid];
        id v13 = [v12 UUIDString];
        *(_DWORD *)buf = 138543874;
        id v26 = v10;
        __int16 v27 = 2112;
        long long v28 = v11;
        __int16 v29 = 2112;
        uint64_t v30 = v13;
        _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Creating network router client manager with accessory %@/%@", buf, 0x20u);
      }
      int v14 = +[HMDNetworkRouterFirewallRuleManager sharedInstance];
      int v15 = [HMDNetworkRouterClientManager alloc];
      uint64_t v16 = [(HMDHome *)v8 workQueue];
      id v17 = [MEMORY[0x263F08A00] defaultCenter];
      int v18 = [(HMDNetworkRouterClientManager *)v15 initWithNetworkRouterAccessory:v4 workQueue:v16 firewallRuleManager:v14 notificationCenter:v17];
      [(HMDHome *)v8 setRouterClientManager:v18];

      id v19 = [(HMDHome *)v8 routerClientManager];
      v24[0] = MEMORY[0x263EF8330];
      v24[1] = 3221225472;
      void v24[2] = __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke;
      void v24[3] = &unk_264A2F3E8;
      void v24[4] = v8;
      [v14 startupForClient:v19 completion:v24];

      __int16 v20 = [(HMDHome *)v8 residentDeviceManager];
      id v21 = [(HMDHome *)v8 routerClientManager];
      [v20 addDataSource:v21];

      __int16 v22 = [(HMDHome *)v8 residentDeviceManager];
      v23[0] = MEMORY[0x263EF8330];
      v23[1] = 3221225472;
      void v23[2] = __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke_84;
      void v23[3] = &unk_264A2F3E8;
      void v23[4] = v8;
      [v22 confirmWithCompletionHandler:v23];
    }
  }
}

void __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      char v7 = HMFGetLogIdentifier();
      int v9 = 138543618;
      id v10 = v7;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Firewall rule manager failed to start with error %@", (uint8_t *)&v9, 0x16u);
    }
  }
  else
  {
    char v8 = [*(id *)(a1 + 32) routerClientManager];
    [v8 evaluateManagement];
  }
}

void __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke_84(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    char v7 = HMFGetLogIdentifier();
    int v8 = 138543618;
    int v9 = v7;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Confirming primary resident with active network router in the home completed with %@", (uint8_t *)&v8, 0x16u);
  }
}

- (void)_handleRemoveClientConfiguration:(id)a3
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  char v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    int v14 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Received request to remove a client configuration", buf, 0xCu);
  }
  int v9 = [v4 numberForKey:@"HMDH.NetworkClientIdentifierMessageKey"];
  if (v9)
  {
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    void v11[2] = __67__HMDHome_NetworkRouterInternal___handleRemoveClientConfiguration___block_invoke;
    void v11[3] = &unk_264A2F3E8;
    id v12 = v4;
    [(HMDHome *)v6 _removeClientConfigurationWithIdentifier:v9 completion:v11];
    __int16 v10 = v12;
  }
  else
  {
    __int16 v10 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
    [v4 respondWithError:v10];
  }
}

uint64_t __67__HMDHome_NetworkRouterInternal___handleRemoveClientConfiguration___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 respondWithError:a2];
  }
  else {
    return [v2 respondWithPayload:0];
  }
}

- (void)_handleCreateUniquePSKClientConfiguration:(id)a3
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  char v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Received request to create a unique PSK client configuration", buf, 0xCu);
  }
  int v9 = [(HMDHome *)v6 activeNetworkRouterAccessory];
  uint64_t v27 = MEMORY[0x263EF8330];
  uint64_t v28 = 3221225472;
  __int16 v29 = __76__HMDHome_NetworkRouterInternal___handleCreateUniquePSKClientConfiguration___block_invoke;
  uint64_t v30 = &unk_264A24320;
  uint64_t v31 = v6;
  id v32 = v4;
  id v10 = v4;
  id v11 = v9;
  id v12 = &v27;
  uint64_t v13 = generateWiFiUniquePreSharedKey();
  int v14 = objc_msgSend(v13, "dataUsingEncoding:", 1, v27, v28);

  uint64_t v15 = [v11 networkRouterController];
  uint64_t v16 = (void *)v15;
  if (v14 && v15)
  {
    id v17 = +[HMDNetworkRouterClientConfiguration configurationForOpenProtectionWithClientIdentifier:0];
    int v18 = objc_alloc_init(HMDNetworkRouterCredential);
    [v17 setCredential:v18];

    id v19 = [v17 credential];
    [v19 setPsk:v14];

    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __HMDCreateUniquePSKClientConfiguration_block_invoke;
    id v34 = &unk_264A2B938;
    id v39 = v12;
    id v20 = v16;
    id v35 = v20;
    id v36 = v17;
    id v37 = v11;
    id v38 = v14;
    id v21 = v17;
    [v20 writeManagedNetworkEnable:1 completion:buf];
  }
  else
  {
    __int16 v22 = (void *)MEMORY[0x230FBD990]();
    __int16 v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      __int16 v25 = (void *)v24;
      id v26 = @"no router controller found";
      if (v16) {
        id v26 = @"PSK generation";
      }
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v24;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v26;
      _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to create unique PSK client configuration due to %@", buf, 0x16u);
    }
    id v21 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
    v29((uint64_t)v12, 0, v21);
  }
}

void __76__HMDHome_NetworkRouterInternal___handleCreateUniquePSKClientConfiguration___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  char v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  int v9 = HMFGetOSLogHandle();
  id v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v25 = v11;
      __int16 v26 = 2112;
      id v27 = v6;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to create a unique PSK client configuration with error: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 40) respondWithError:v6];
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      uint64_t v13 = [v5 clientIdentifier];
      int v14 = [v5 networkRouterUUID];
      uint64_t v15 = [v14 UUIDString];
      *(_DWORD *)buf = 138543874;
      __int16 v25 = v12;
      __int16 v26 = 2112;
      id v27 = v13;
      __int16 v28 = 2112;
      __int16 v29 = v15;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Created unique PSK client configuration with client identifier %@ on network router %@ for remote request", buf, 0x20u);
    }
    uint64_t v16 = *(void **)(a1 + 40);
    id v17 = objc_msgSend(v5, "clientIdentifier", @"HMDH.NetworkClientIdentifierMessageKey");
    v23[0] = v17;
    v22[1] = @"HMDH.UniquePSKMessageKey";
    int v18 = [v5 wiFiPSK];
    v23[1] = v18;
    v22[2] = @"HMDH.NetworkRouterUUIDMessageKey";
    id v19 = [v5 networkRouterUUID];
    id v20 = [v19 UUIDString];
    void v23[2] = v20;
    id v21 = [NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:3];
    [v16 respondWithPayload:v21];
  }
}

- (void)_handleSetMinHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3
{
  id v7 = a3;
  id v4 = [v7 stringForKey:@"kHomedVersionKey"];
  if (v4)
  {
    id v5 = [[HMDHomeKitVersion alloc] initWithVersionString:v4];
    if (v5)
    {
      [(HMDHome *)self _addTransactionForMinimumHomeKitVersionForAccessoryNetworkProtectionChange:v5 message:v7];
    }
    else
    {
      id v6 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      [v7 respondWithError:v6];
    }
  }
  else
  {
    id v5 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v7 respondWithError:v5];
  }
}

- (void)_handleSetMinimumNetworkRouterHomeKitVersion:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kHomedVersionKey"];
  id v6 = [[HMDHomeKitVersion alloc] initWithVersionString:v5];
  if (v6)
  {
    id v7 = +[HMDHomeKitVersion currentVersion];
    if ([v7 isGreaterThanVersion:v6])
    {
      id v8 = (void *)MEMORY[0x230FBD990]();
      int v9 = self;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        id v12 = [(HMDHomeKitVersion *)v6 versionString];
        [v7 versionString];
        uint64_t v13 = v15 = v8;
        *(_DWORD *)buf = 138543874;
        id v17 = v11;
        __int16 v18 = 2112;
        id v19 = v12;
        __int16 v20 = 2112;
        id v21 = v13;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Attempting to set the network router support HomeKit version to %@ - lower than version of HomeKit on this device - %@", buf, 0x20u);

        id v8 = v15;
      }
    }
    [(HMDHome *)self _addTransactionForMinimumNetworkRouterHomeKitVersion:v6 message:v4];
  }
  else
  {
    int v14 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v4 respondWithError:v14];
  }
}

- (void)_handleUpdateNetworkProtection:(id)a3
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 numberForKey:*MEMORY[0x263F0EA30]];
  if (!v5)
  {
    id v7 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
LABEL_9:
    [v4 respondWithError:v7];
    goto LABEL_10;
  }
  id v14 = 0;
  BOOL v6 = [(HMDHome *)self checkForNetworkRouterSupport:1 error:&v14];
  id v7 = v14;
  if (!v6)
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    int v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      id v12 = HMDNetworkRouterSupportAsString([(HMDHome *)v9 networkRouterSupport]);
      *(_DWORD *)buf = 138543874;
      uint64_t v16 = v11;
      __int16 v17 = 2112;
      __int16 v18 = v12;
      __int16 v19 = 2112;
      id v20 = v7;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Cannot update home network protection mode - networkRouterSupport %@ error %@", buf, 0x20u);
    }
    goto LABEL_9;
  }
  if ((unint64_t)[v5 integerValue] > 1)
  {
    uint64_t v13 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v4 respondWithError:v13];
  }
  else
  {
    [(HMDHome *)self _addTransactionWithProtectionMode:v5 message:v4];
  }
LABEL_10:
}

- (void)_addTransactionForMinimumHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3 message:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = [HMDHomeNetworkRouterSettingsModel alloc];
  int v9 = [(HMDHome *)self uuid];
  id v10 = +[HMDHomeNetworkRouterSettingsModel modelIDForHomeUUID:v9];
  id v11 = [(HMDHome *)self uuid];
  uint64_t v16 = [(HMDBackingStoreModelObject *)v8 initWithObjectChangeType:2 uuid:v10 parentUUID:v11];

  id v12 = [v7 versionString];

  [(HMDHomeNetworkRouterSettingsModel *)v16 setMinHomeKitVersionForAccessoryNetworkProtectionChange:v12];
  uint64_t v13 = [(HMDHome *)self backingStore];
  id v14 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  uint64_t v15 = [v13 transaction:@"Update Minimum HomeKit Version For Accessory Network Protection Change" options:v14];

  [v15 add:v16 withMessage:v6];
  [v15 run];
}

- (void)_addTransactionForMinimumNetworkRouterHomeKitVersion:(id)a3 message:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = [HMDHomeNetworkRouterSettingsModel alloc];
  int v9 = [(HMDHome *)self uuid];
  id v10 = +[HMDHomeNetworkRouterSettingsModel modelIDForHomeUUID:v9];
  id v11 = [(HMDHome *)self uuid];
  uint64_t v16 = [(HMDBackingStoreModelObject *)v8 initWithObjectChangeType:2 uuid:v10 parentUUID:v11];

  id v12 = [v7 versionString];

  [(HMDHomeNetworkRouterSettingsModel *)v16 setMinimumNetworkRouterSupportHomeKitVersion:v12];
  uint64_t v13 = [(HMDHome *)self backingStore];
  id v14 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  uint64_t v15 = [v13 transaction:@"Update Minimum Network Router Support HomeKit Version" options:v14];

  [v15 add:v16 withMessage:v6];
  [v15 run];
}

- (void)_clearAccessoryNetworkProtectionStateWithTransaction:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v5 = [(HMDHome *)self accessories];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v11 = [v10 networkRouterUUID];
        if (v11)
        {
        }
        else
        {
          id v12 = [v10 networkClientIdentifier];

          if (!v12) {
            continue;
          }
        }
        uint64_t v13 = [v10 transactionWithObjectChangeType:2];
        [v13 setNetworkRouterUUID:0];
        [v13 setNetworkClientIdentifier:0];
        [v13 setNetworkClientProfileFingerprint:0];
        [v13 setAppliedFirewallWANRules:0];
        [v13 setNetworkClientLAN:&unk_26E472628];
        [v13 setCurrentNetworkProtectionMode:&unk_26E472640];
        [v4 add:v13];
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v7);
  }
}

- (void)_updateActiveNetworkRouterAccessory:(id)a3 isReplacement:(BOOL)a4 withTransaction:(id)a5
{
  BOOL v5 = a4;
  id v22 = a5;
  id v8 = a3;
  int v9 = [HMDHomeNetworkRouterSettingsModel alloc];
  id v10 = [(HMDHome *)self uuid];
  id v11 = +[HMDHomeNetworkRouterSettingsModel modelIDForHomeUUID:v10];
  id v12 = [(HMDHome *)self uuid];
  uint64_t v13 = [(HMDBackingStoreModelObject *)v9 initWithObjectChangeType:2 uuid:v11 parentUUID:v12];

  long long v14 = [v8 uuid];

  long long v15 = [v14 UUIDString];

  [(HMDHomeNetworkRouterSettingsModel *)v13 setActiveNetworkRouterAccessoryUUID:v15];
  if (v5) {
    long long v16 = 0;
  }
  else {
    long long v16 = v15;
  }
  [(HMDHomeNetworkRouterSettingsModel *)v13 setActiveNetworkRouterInitialSetupNeededUUID:v16];
  [v22 add:v13];
  if (!v5)
  {
    long long v17 = [HMDHomeModel alloc];
    __int16 v18 = [(HMDHome *)self uuid];
    uint64_t v19 = [(HMDHome *)self homeManager];
    id v20 = [v19 uuid];
    uint64_t v21 = [(HMDBackingStoreModelObject *)v17 initWithObjectChangeType:2 uuid:v18 parentUUID:v20];

    [(HMDHomeModel *)v21 setNetworkProtectionMode:&unk_26E472610];
    [v22 add:v21];
  }
}

- (void)_addTransactionForActiveNetworkRouterAccessory:(id)a3 isReplacement:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  uint64_t v7 = [(HMDHome *)self backingStore];
  id v8 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  id v9 = [v7 transaction:@"Update Active Network Router Accessory" options:v8];

  [(HMDHome *)self _updateActiveNetworkRouterAccessory:v6 isReplacement:v4 withTransaction:v9];
  [v9 run];
}

- (void)_addTransactionWithProtectionMode:(id)a3 message:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = [HMDHomeModel alloc];
  id v9 = [(HMDHome *)self uuid];
  id v10 = [(HMDHome *)self homeManager];
  id v11 = [v10 uuid];
  id v12 = [(HMDBackingStoreModelObject *)v8 initWithObjectChangeType:2 uuid:v9 parentUUID:v11];

  [(HMDHomeModel *)v12 setNetworkProtectionMode:v7];
  uint64_t v13 = [(HMDHome *)self backingStore];
  long long v14 = [v6 name];
  long long v15 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  long long v16 = [v13 transaction:v14 options:v15];

  [v16 add:v12 withMessage:v6];
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  void v18[2] = __76__HMDHome_NetworkRouterInternal___addTransactionWithProtectionMode_message___block_invoke;
  v18[3] = &unk_264A2F370;
  id v19 = v6;
  id v20 = self;
  id v17 = v6;
  [v16 run:v18];
}

void __76__HMDHome_NetworkRouterInternal___addTransactionWithProtectionMode_message___block_invoke(uint64_t a1, uint64_t a2)
{
  v7[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 respondWithError:a2];
  }
  else
  {
    uint64_t v6 = *MEMORY[0x263F0EA30];
    BOOL v4 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 40), "protectionMode"));
    v7[0] = v4;
    BOOL v5 = [NSDictionary dictionaryWithObjects:v7 forKeys:&v6 count:1];
    [v2 respondWithPayload:v5];
  }
}

- (unint64_t)deriveNetworkRouterSupport:(unint64_t)a3
{
  char v3 = a3;
  unint64_t v4 = 4;
  if ((a3 & 8) == 0) {
    unint64_t v4 = 15;
  }
  if (a3)
  {
    unint64_t v5 = v4 & 8;
    if ([(HMDHome *)self isOwnerUser]) {
      unint64_t v4 = v5;
    }
    else {
      unint64_t v4 = 0;
    }
  }
  if ((v3 & 2) != 0) {
    unint64_t v4 = 0;
  }
  if ((v3 & 4) != 0) {
    v4 &= 9u;
  }
  if ((v3 & 0x10) != 0) {
    return v4 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else {
    return v4;
  }
}

- (BOOL)checkForNetworkRouterSupport:(unint64_t)a3 error:(id *)a4
{
  char v5 = a3;
  char v6 = [(HMDHome *)self networkRouterSupportDisableReason];
  if ((v5 & 4) != 0)
  {
    if ((v6 & 4) != 0) {
      goto LABEL_16;
    }
    if ((v6 & 2) != 0) {
      goto LABEL_22;
    }
    if (v6) {
      goto LABEL_14;
    }
  }
  if ((v5 & 3) == 0) {
    goto LABEL_7;
  }
  if ((v6 & 4) == 0)
  {
    if ((v6 & 8) != 0 || (v6 & 2) != 0) {
      goto LABEL_22;
    }
    if (v6) {
      goto LABEL_14;
    }
LABEL_7:
    if ((v5 & 2) == 0 || (v6 & 0x10) == 0)
    {
      if ((v5 & 8) == 0) {
        return 1;
      }
      if ((v6 & 8) == 0 && (v6 & 2) == 0)
      {
        if ((v6 & 1) == 0) {
          return 1;
        }
LABEL_14:
        if (a4)
        {
          uint64_t v8 = 92;
LABEL_24:
          id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:v8];
          BOOL result = 0;
          *a4 = v9;
          return result;
        }
        return 0;
      }
    }
LABEL_22:
    if (a4)
    {
      uint64_t v8 = 48;
      goto LABEL_24;
    }
    return 0;
  }
LABEL_16:
  if (a4)
  {
    uint64_t v8 = 17;
    goto LABEL_24;
  }
  return 0;
}

- (HMDHAPAccessory)activeNetworkRouterAccessory
{
  char v3 = [(HMDHome *)self activeNetworkRouterUUID];
  unint64_t v4 = [(HMDHome *)self accessoryWithUUID:v3];

  id v5 = v4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v6 = v5;
  }
  else {
    char v6 = 0;
  }
  id v7 = v6;

  return v7;
}

- (NSArray)wiFiRouterAccessories
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  char v3 = [MEMORY[0x263EFF980] arrayWithCapacity:1];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  unint64_t v4 = [(HMDHome *)self accessories];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(id *)(*((void *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v10 = v9;
        }
        else {
          id v10 = 0;
        }
        id v11 = v10;

        id v12 = [v11 networkRouterController];

        if (v12) {
          [v3 addObject:v11];
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  uint64_t v13 = (void *)[v3 copy];
  return (NSArray *)v13;
}

- (BOOL)supportsRouterManagement
{
  if (![(HMDHome *)self _isNetworkRouterSupportEnabledForCurrentDevice]|| ![(HMDHome *)self isOwnerUser])
  {
    return 0;
  }
  char v3 = [(HMDHome *)self _currentDeviceCapabilities];
  char v4 = [v3 supportsRouterManagement];

  return v4;
}

- (BOOL)_isNetworkRouterSupportEnabledForCurrentDevice
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  char v3 = +[HMDHomeKitVersion currentVersion];
  uint64_t v4 = [(HMDHome *)self minimumNetworkRouterSupportHomeKitVersion];
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = [(HMDHome *)self minimumNetworkRouterSupportHomeKitVersion];
    int v7 = [v6 isGreaterThanVersion:v3];

    if (v7)
    {
      uint64_t v8 = (void *)MEMORY[0x230FBD990]();
      id v9 = self;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        id v12 = [(HMDHome *)v9 minimumNetworkRouterSupportHomeKitVersion];
        uint64_t v13 = [v12 versionString];
        long long v14 = [v3 versionString];
        int v29 = 138543874;
        uint64_t v30 = v11;
        __int16 v31 = 2112;
        id v32 = v13;
        __int16 v33 = 2112;
        id v34 = v14;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Network router support requires minimum HomeKit version of %@ - current %@; disabling",
          (uint8_t *)&v29,
          0x20u);

LABEL_9:
        goto LABEL_10;
      }
      goto LABEL_10;
    }
  }
  long long v15 = [(HMDHome *)self activeNetworkRouterAccessory];
  uint64_t v16 = [v15 primaryProfileVersion];
  if (v16)
  {
    long long v17 = (void *)v16;
    long long v18 = [(HMDHome *)self activeNetworkRouterAccessory];
    id v19 = [v18 primaryProfileVersion];
    unint64_t v20 = [v19 majorVersion];

    if (v20 >= 2)
    {
      uint64_t v8 = (void *)MEMORY[0x230FBD990]();
      id v9 = self;
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        uint64_t v21 = NSNumber;
        id v22 = [(HMDHome *)v9 activeNetworkRouterAccessory];
        __int16 v23 = [v22 primaryProfileVersion];
        uint64_t v24 = objc_msgSend(v21, "numberWithUnsignedInteger:", objc_msgSend(v23, "majorVersion"));
        int v29 = 138543874;
        uint64_t v30 = v11;
        __int16 v31 = 2112;
        id v32 = v24;
        __int16 v33 = 2112;
        id v34 = &unk_26E4725F8;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Network router major version %@ not supported on this device - only supports up to major version %@; disabling",
          (uint8_t *)&v29,
          0x20u);

        goto LABEL_9;
      }
LABEL_10:

      BOOL v25 = 0;
      goto LABEL_17;
    }
  }
  else
  {
  }
  __int16 v26 = [MEMORY[0x263F42608] sharedPreferences];
  id v27 = [v26 preferenceForKey:@"enableNetworkRouterSupport"];

  BOOL v25 = !v27 || [v27 BOOLValue];
LABEL_17:

  return v25;
}

- (id)_currentDeviceCapabilities
{
  return +[HMDDeviceCapabilities deviceCapabilities];
}

- (id)deviceControllerWithUniqueIdentifier:(id)a3 stateObserver:(id)a4
{
  return +[HMDHome matterDeviceControllerWithUUID:](HMDHome, "matterDeviceControllerWithUUID:", a3, a4);
}

- (void)stopMonitoringWithCharacteristics:(id)a3 stateObserver:(id)a4
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [MEMORY[0x263EFF9A0] dictionary];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v6 = v4;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v34 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        id v12 = [v11 accessory];
        uint64_t v13 = v12;
        if (v12)
        {
          long long v14 = [v12 uuid];
          long long v15 = [v5 objectForKeyedSubscript:v14];

          if (!v15)
          {
            uint64_t v16 = [MEMORY[0x263EFF9C0] set];
            long long v17 = [v13 uuid];
            [v5 setObject:v16 forKeyedSubscript:v17];
          }
          long long v18 = [v13 uuid];
          id v19 = [v5 objectForKeyedSubscript:v18];
          [v19 addObject:v11];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v33 objects:v38 count:16];
    }
    while (v8);
  }

  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v20 = v5;
  uint64_t v21 = [v20 countByEnumeratingWithState:&v29 objects:v37 count:16];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)v30;
    do
    {
      for (uint64_t j = 0; j != v22; ++j)
      {
        if (*(void *)v30 != v23) {
          objc_enumerationMutation(v20);
        }
        BOOL v25 = objc_msgSend(v20, "objectForKeyedSubscript:", *(void *)(*((void *)&v29 + 1) + 8 * j), (void)v29);
        __int16 v26 = [v25 anyObject];
        id v27 = [v26 accessory];

        if (v27)
        {
          __int16 v28 = [v25 allObjects];
          [v27 setNotificationsEnabled:0 forCharacteristics:v28 clientIdentifier:@"com.apple.HomeKitDaemon.ActionSetStateObserver"];
        }
      }
      uint64_t v22 = [v20 countByEnumeratingWithState:&v29 objects:v37 count:16];
    }
    while (v22);
  }
}

- (void)startMonitoringWithCharacteristics:(id)a3 stateObserver:(id)a4 completionHandler:(id)a5
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  id v7 = a3;
  id v43 = a4;
  id v42 = a5;
  uint64_t v8 = [MEMORY[0x263EFF9A0] dictionary];
  uint64_t v9 = [MEMORY[0x263EFF980] array];
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  obuint64_t j = v7;
  uint64_t v10 = [obj countByEnumeratingWithState:&v53 objects:v62 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v54;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v54 != v12) {
          objc_enumerationMutation(obj);
        }
        long long v14 = *(void **)(*((void *)&v53 + 1) + 8 * i);
        long long v15 = [v14 accessory];
        uint64_t v16 = v15;
        if (v15)
        {
          long long v17 = [v15 uuid];
          long long v18 = [v8 objectForKeyedSubscript:v17];

          if (!v18)
          {
            id v19 = [MEMORY[0x263EFF9C0] set];
            id v20 = [v16 uuid];
            [v8 setObject:v19 forKeyedSubscript:v20];
          }
          uint64_t v21 = [v16 uuid];
          uint64_t v22 = [v8 objectForKeyedSubscript:v21];
          [v22 addObject:v14];

          uint64_t v23 = +[HMDCharacteristicRequest requestWithCharacteristic:v14];
          [v9 addObject:v23];
        }
      }
      uint64_t v11 = [obj countByEnumeratingWithState:&v53 objects:v62 count:16];
    }
    while (v11);
  }

  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id v24 = v8;
  uint64_t v25 = [v24 countByEnumeratingWithState:&v49 objects:v61 count:16];
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)v50;
    do
    {
      for (uint64_t j = 0; j != v26; ++j)
      {
        if (*(void *)v50 != v27) {
          objc_enumerationMutation(v24);
        }
        long long v29 = [v24 objectForKeyedSubscript:*(void *)(*((void *)&v49 + 1) + 8 * j)];
        long long v30 = [v29 anyObject];
        long long v31 = [v30 accessory];

        if (v31)
        {
          long long v32 = [v29 allObjects];
          [v31 setNotificationsEnabled:1 forCharacteristics:v32 clientIdentifier:@"com.apple.HomeKitDaemon.ActionSetStateObserver"];
        }
      }
      uint64_t v26 = [v24 countByEnumeratingWithState:&v49 objects:v61 count:16];
    }
    while (v26);
  }

  long long v33 = (void *)MEMORY[0x230FBD990]();
  long long v34 = self;
  long long v35 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    long long v36 = HMFGetLogIdentifier();
    uint64_t v37 = [v9 count];
    *(_DWORD *)buf = 138543618;
    char v58 = v36;
    __int16 v59 = 2048;
    uint64_t v60 = v37;
    _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_INFO, "%{public}@Issuing %ld read requests for ActionSetStateObserver", buf, 0x16u);
  }
  id v38 = (void *)[v9 copy];
  v45[0] = MEMORY[0x263EF8330];
  v45[1] = 3221225472;
  v45[2] = __115__HMDHome_HMDActionSetStateObserverDataSource__startMonitoringWithCharacteristics_stateObserver_completionHandler___block_invoke;
  v45[3] = &unk_264A2B910;
  id v46 = v9;
  uint64_t v47 = v34;
  id v48 = v42;
  id v39 = v42;
  id v40 = v9;
  [(HMDHome *)v34 readCharacteristicValues:v38 source:7 qualityOfService:-1 withCompletionHandler:v45];
}

void __115__HMDHome_HMDActionSetStateObserverDataSource__startMonitoringWithCharacteristics_stateObserver_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v23 = a2;
  id v27 = a3;
  uint64_t v25 = [MEMORY[0x263EFF980] array];
  uint64_t v26 = a1;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  uint64_t v5 = [obj countByEnumeratingWithState:&v29 objects:v39 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v30;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v30 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        uint64_t v10 = [v9 characteristic];
        id v28 = 0;
        uint64_t v11 = objc_msgSend(v27, "hmd_valueOfCharacteristic:error:", v10, &v28);
        id v12 = v28;

        uint64_t v13 = (void *)MEMORY[0x230FBD990]();
        id v14 = *(id *)(v26 + 40);
        long long v15 = HMFGetOSLogHandle();
        uint64_t v16 = v15;
        if (v11)
        {
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            long long v17 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543874;
            long long v34 = v17;
            __int16 v35 = 2112;
            long long v36 = v9;
            __int16 v37 = 2112;
            id v38 = v11;
            _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Characteristic read request succeeded when ActionSetStateObserver enabled notifications %@:%@", buf, 0x20u);
          }
          long long v18 = +[HMDCharacteristicResponse responseWithRequest:v9 error:0];
          [v18 setValue:v11];
        }
        else
        {
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            id v19 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543874;
            long long v34 = v19;
            __int16 v35 = 2112;
            long long v36 = v9;
            __int16 v37 = 2112;
            id v38 = v12;
            _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Characteristic read request when ActionSetStateObserver enabled notification failed %@:%@", buf, 0x20u);
          }
          if (v23)
          {
            long long v18 = +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v9);
          }
          else
          {
            id v20 = [MEMORY[0x263F087E8] hmErrorWithCode:74];
            long long v18 = +[HMDCharacteristicResponse responseWithRequest:v9 error:v20];
          }
        }
        [v25 addObject:v18];
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v29 objects:v39 count:16];
    }
    while (v6);
  }

  uint64_t v21 = *(void *)(v26 + 48);
  uint64_t v22 = (void *)[v25 copy];
  (*(void (**)(uint64_t, void *))(v21 + 16))(v21, v22);
}

- (void)stopMonitoringMediaStateForAppleMediaAccessoryUUID:(id)a3 stateObserver:(id)a4
{
  uint64_t v5 = -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", a3, a4);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  id v8 = v6;

  if (v8)
  {
    uint64_t v7 = [(HMDHome *)self mediaStateSubscriber];
    [v7 unsubscribeForAppleMediaStateForAccessory:v8 subscriptionToken:@"com.apple.HomeKitDaemon.ActionSetStateObserver"];
  }
}

- (void)startMonitoringMediaStateForAppleMediaAccessoryUUID:(id)a3 stateObserver:(id)a4
{
  uint64_t v5 = -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", a3, a4);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  id v8 = v6;

  if (v8)
  {
    uint64_t v7 = [(HMDHome *)self mediaStateSubscriber];
    [v7 subscribeForAppleMediaStateForAccessory:v8 subscriptionToken:@"com.apple.HomeKitDaemon.ActionSetStateObserver"];
  }
}

- (id)actionSetsUUIDsForStateObserver:(id)a3
{
  char v3 = [(HMDHome *)self actionSets];
  id v4 = objc_msgSend(v3, "na_map:", &__block_literal_global_192938);

  return v4;
}

uint64_t __80__HMDHome_HMDActionSetStateObserverDataSource__actionSetsUUIDsForStateObserver___block_invoke(uint64_t a1, void *a2)
{
  return [a2 uuid];
}

- (id)mediaProfileForAccessoryUUID:(id)a3 stateObserver:(id)a4
{
  id v4 = -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", a3, a4);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = v5;
  uint64_t v7 = [v6 mediaProfile];

  return v7;
}

- (void)actionSetStateDidChangeForActionSet:(id)a3 currentActiveState:(BOOL)a4 stateObserver:(id)a5
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a5;
  uint64_t v10 = (void *)MEMORY[0x230FBD990]();
  uint64_t v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v20 = v13;
    __int16 v21 = 2112;
    id v22 = v8;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Detected Action Set State Change %@", buf, 0x16u);
  }
  id v14 = [(HMDHome *)v11 workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __117__HMDHome_HMDActionSetStateObserverDataSource__actionSetStateDidChangeForActionSet_currentActiveState_stateObserver___block_invoke;
  block[3] = &unk_264A2DFC8;
  void block[4] = v11;
  id v17 = v8;
  BOOL v18 = a4;
  id v15 = v8;
  dispatch_async(v14, block);
}

void __117__HMDHome_HMDActionSetStateObserverDataSource__actionSetStateDidChangeForActionSet_currentActiveState_stateObserver___block_invoke(uint64_t a1)
{
  v7[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  char v3 = [HMDActionSetResponse alloc];
  id v4 = [*(id *)(a1 + 40) uuid];
  uint64_t v5 = [(HMDActionSetResponse *)v3 initWithActionSetUUID:v4 state:*(unsigned __int8 *)(a1 + 48)];
  v7[0] = v5;
  id v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:v7 count:1];
  [v2 _notifyRemoteUsersOfChangedActionSetResponses:v6];
}

- (void)_notifyChangedActionSetResponses:(id)a3 notificationUpdateIdentifier:(id)a4 toUserDeviceAddress:(id)a5
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v11);

  if (v10)
  {
    id v12 = [(HMDHome *)self notificationHandlerMap];
    uint64_t v13 = [v12 objectForKey:v10];

    if (!v13)
    {
      id v14 = [(HMDHome *)self homeManager];
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      id v15 = [v14 watchManager];
      uint64_t v16 = [v15 connectedWatches];

      uint64_t v17 = [v16 countByEnumeratingWithState:&v26 objects:v30 count:16];
      if (v17)
      {
        uint64_t v25 = v14;
        uint64_t v18 = *(void *)v27;
        while (2)
        {
          for (uint64_t i = 0; i != v17; ++i)
          {
            if (*(void *)v27 != v18) {
              objc_enumerationMutation(v16);
            }
            id v20 = [*(id *)(*((void *)&v26 + 1) + 8 * i) remoteDestinationString];
            char v21 = [v20 isEqual:v10];

            if (v21)
            {
              uint64_t v17 = 1;
              goto LABEL_13;
            }
          }
          uint64_t v17 = [v16 countByEnumeratingWithState:&v26 objects:v30 count:16];
          if (v17) {
            continue;
          }
          break;
        }
LABEL_13:
        id v14 = v25;
      }

      id v22 = [HMDDeviceNotificationHandler alloc];
      uint64_t v23 = [(HMDHome *)self msgDispatcher];
      uint64_t v13 = [(HMDDeviceNotificationHandler *)v22 initWithDestination:v10 watchDevice:v17 withRequestIdentifier:0 messageDispatcher:v23 home:self];

      id v24 = [(HMDHome *)self notificationHandlerMap];
      [v24 setObject:v13 forKey:v10];
    }
    [(HMDDeviceNotificationHandler *)v13 sendNotificationForActionSetResponses:v8 notificationUpdateIdentifier:v9];
  }
}

- (void)_notifyRemoteUsersOfChangedActionSetResponses:(id)a3
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x230FBD990]();
  uint64_t v7 = self;
  id v8 = HMFGetOSLogHandle();
  long long v32 = v7;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    BOOL v41 = v9;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Notifying users registered with resident of changes in action sets", buf, 0xCu);
  }
  id v10 = [(HMDHome *)v7 notificationRegistry];
  uint64_t v11 = [v10 destinationsRegisteredForNotificationsForActionSetResponses:v4];

  id v12 = [MEMORY[0x263EFF9C0] set];
  uint64_t v13 = [MEMORY[0x263F08C38] UUID];
  long long v33 = [v13 UUIDString];

  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v14 = v11;
  id v15 = v7;
  obuint64_t j = v14;
  uint64_t v16 = [v14 countByEnumeratingWithState:&v36 objects:v46 count:16];
  if (v16)
  {
    uint64_t v18 = v16;
    uint64_t v19 = *(void *)v37;
    *(void *)&long long v17 = 138543874;
    long long v29 = v17;
    id v30 = v4;
    uint64_t v31 = v12;
    uint64_t v34 = *(void *)v37;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v37 != v19) {
          objc_enumerationMutation(obj);
        }
        uint64_t v21 = *(void *)(*((void *)&v36 + 1) + 8 * i);
        id v22 = +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v21, v29);
        if (v22)
        {
          [v12 addObject:v22];
          if ([(HMDHome *)v15 _shouldSendToDestination:v21 device:v22 remoteSourceDevice:0])
          {
            uint64_t v23 = [(HMDHome *)v15 notificationRegistry];
            id v24 = [v23 filterActionSetResponses:v4 deviceIdsDestination:v21];

            if ([v24 count])
            {
              uint64_t v25 = (void *)MEMORY[0x230FBD990]();
              long long v26 = v15;
              long long v27 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
              {
                long long v28 = HMFGetLogIdentifier();
                *(_DWORD *)buf = v29;
                BOOL v41 = v28;
                __int16 v42 = 2112;
                uint64_t v43 = v21;
                __int16 v44 = 2112;
                unint64_t v45 = v33;
                _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_INFO, "%{public}@Fanning out to device %@ with the action sets that changed with notificationUpdateIdentifier: %@", buf, 0x20u);

                id v4 = v30;
              }

              [(HMDHome *)v26 _notifyChangedActionSetResponses:v24 notificationUpdateIdentifier:v33 toUserDeviceAddress:v21];
              id v12 = v31;
              id v15 = v32;
            }

            uint64_t v19 = v34;
          }
        }
      }
      uint64_t v18 = [obj countByEnumeratingWithState:&v36 objects:v46 count:16];
    }
    while (v18);
  }
}

- (void)didUpdateSubscriptionForActionSetStateWithActionSetUUID:(id)a3 isSubscribed:(BOOL)a4
{
  id v6 = a3;
  uint64_t v7 = [(HMDHome *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __99__HMDHome_HMDActionSetState__didUpdateSubscriptionForActionSetStateWithActionSetUUID_isSubscribed___block_invoke;
  block[3] = &unk_264A2DFC8;
  BOOL v11 = a4;
  void block[4] = self;
  id v10 = v6;
  id v8 = v6;
  dispatch_sync(v7, block);
}

void __99__HMDHome_HMDActionSetState__didUpdateSubscriptionForActionSetStateWithActionSetUUID_isSubscribed___block_invoke(uint64_t a1)
{
  v4[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = *(void *)(a1 + 40);
  char v3 = [MEMORY[0x263EFF8C0] arrayWithObjects:v4 count:1];
  [v2 _remotelySetNotificationsEnabled:v1 forActionSetUUIDs:v3];
}

- (void)_remotelySetNotificationsEnabled:(BOOL)a3 forActionSetUUIDs:(id)a4
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  id v6 = a4;
  long long v29 = self;
  uint64_t v7 = [(HMDHome *)self primaryResident];
  id v8 = [v7 capabilities];
  int v9 = [v8 supportsResidentActionSetStateEvaluation];

  if (v9)
  {
    id v10 = [(HMDHome *)v29 workQueue];
    dispatch_assert_queue_V2(v10);

    if (a3)
    {
      BOOL v11 = [(HMDHome *)v29 actionSetsEnableNotificationPayload];
      [(HMDHome *)v29 actionSetsDisableNotificationPayload];
    }
    else
    {
      BOOL v11 = [(HMDHome *)v29 actionSetsDisableNotificationPayload];
      [(HMDHome *)v29 actionSetsEnableNotificationPayload];
    id v12 = };
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v26 = v6;
    id v13 = v6;
    uint64_t v14 = [v13 countByEnumeratingWithState:&v30 objects:v40 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v31;
      long long v27 = v11;
      long long v28 = v12;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v31 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = [*(id *)(*((void *)&v30 + 1) + 8 * i) UUIDString];
          if (([v11 containsObject:v18] & 1) == 0) {
            [v11 addObject:v18];
          }
          if ([v12 containsObject:v18])
          {
            uint64_t v19 = (void *)MEMORY[0x230FBD990]([v12 removeObject:v18]);
            id v20 = v29;
            uint64_t v21 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              id v22 = HMFGetLogIdentifier();
              HMFBooleanToString();
              uint64_t v23 = v16;
              v25 = id v24 = v13;
              *(_DWORD *)buf = 138543874;
              __int16 v35 = v22;
              __int16 v36 = 2112;
              long long v37 = v25;
              __int16 v38 = 2112;
              long long v39 = v18;
              _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Function call to set notification to %@, removing the entry %@ from the other action set payload", buf, 0x20u);

              id v13 = v24;
              uint64_t v16 = v23;

              BOOL v11 = v27;
              id v12 = v28;
            }
          }
        }
        uint64_t v15 = [v13 countByEnumeratingWithState:&v30 objects:v40 count:16];
      }
      while (v15);
    }

    if ([v11 count] || objc_msgSend(v12, "count")) {
      [(HMDHome *)v29 _createModifyNotificationsCoalesceTimerIfNeeded];
    }

    id v6 = v26;
  }
}

- (id)createActionSetStateManager
{
  uint64_t v2 = [[HMDActionSetStateSubscriptionManager alloc] initWithDelegate:self];
  return v2;
}

- (id)createActionSetStateObserver
{
  char v3 = [HMDActionSetStateObserver alloc];
  id v4 = [(HMDHome *)self notificationRegistry];
  uint64_t v5 = [(HMDActionSetStateObserver *)v3 initWithDataSource:self notificationRegistry:v4];

  return v5;
}

- (id)createMultiuserSettingsMessenger:(id)a3 messageDispatcher:(id)a4
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x230FBD990]();
  int v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    BOOL v11 = HMFGetLogIdentifier();
    id v12 = [v6 uuid];
    int v15 = 138543874;
    uint64_t v16 = v11;
    __int16 v17 = 2112;
    uint64_t v18 = v12;
    __int16 v19 = 2112;
    id v20 = v7;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Creating Multiuser settings messenger with current home UUID: %@ message dispatcher: %@", (uint8_t *)&v15, 0x20u);
  }
  id v13 = [[HMDMultiuserSettingsMessenger alloc] initWithHome:v6 messageDispatcher:v7];

  return v13;
}

- (void)configureMultiuserSettingsMessengerWithMessengerFactory:(id)a3
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    int v9 = [(HMDHome *)v6 home];
    int v13 = 138543618;
    uint64_t v14 = v8;
    __int16 v15 = 2112;
    uint64_t v16 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Configuring Multiuser settings messenger %@", (uint8_t *)&v13, 0x16u);
  }
  id v10 = [(HMDHome *)v6 home];
  BOOL v11 = [(HMDHome *)v6 msgDispatcher];
  id v12 = [v4 createMultiuserSettingsMessenger:v10 messageDispatcher:v11];

  [v12 registerForMessages];
  [(HMDHome *)v6 setMultiuserSettingsMessenger:v12];
}

- (id)_processTestModeSkipHH2MigrationOverride:(id)a3
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x230FBD990](-[HMDHome setOverrideSentinelZoneForConvergencePeriod:](self, "setOverrideSentinelZoneForConvergencePeriod:", objc_msgSend(v4, "hmf_BOOLForKey:", @"kConfigTestingSkipMigrationCheckOverrideKey")));
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    [(HMDHome *)v6 overrideSentinelZoneForConvergencePeriod];
    int v9 = HMFBooleanToString();
    int v11 = 138543618;
    id v12 = v8;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Override for HH2 Migration Skip is set to : %@", (uint8_t *)&v11, 0x16u);
  }

  return 0;
}

- (BOOL)isThisHomeMigratedToHH2
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  char v3 = [(HMDHome *)self homeManager];
  id v4 = v3;
  if (v3
    && ([v3 hh2FrameworkSwitch], uint64_t v5 = objc_claimAutoreleasedReturnValue(), v5, v5))
  {
    id v6 = [(HMDHome *)self owner];
    int v7 = [v6 isCurrentUser];

    id v8 = [v4 hh2FrameworkSwitch];
    char v9 = [v8 checkExistenceOfHH2SentinelZone];

    id v10 = (void *)MEMORY[0x230FBD990]();
    int v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      __int16 v13 = HMFGetLogIdentifier();
      uint64_t v14 = HMFBooleanToString();
      HMFBooleanToString();
      v15 = int v27 = v7;
      [(HMDHome *)v11 isUpdatedToHH2];
      uint64_t v16 = HMFBooleanToString();
      uint64_t v17 = HMFBooleanToString();
      *(_DWORD *)buf = 138544386;
      long long v29 = v13;
      __int16 v30 = 2112;
      long long v31 = v14;
      __int16 v32 = 2112;
      long long v33 = v15;
      __int16 v34 = 2112;
      __int16 v35 = v16;
      __int16 v36 = 2112;
      long long v37 = v17;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_DEBUG, "%{public}@[HH2 Sentinel zone exist : %@], [isOwner: %@], [Is Shared Home Updated to HH2: %@], [Running in HH2 daemon: %@]", buf, 0x34u);

      int v7 = v27;
    }

    if (v9)
    {
      LOBYTE(v18) = 1;
    }
    else
    {
      uint64_t v23 = (void *)MEMORY[0x230FBD990]();
      id v24 = v11;
      uint64_t v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        uint64_t v25 = HMFGetLogIdentifier();
        [(HMDHome *)v24 overrideSentinelZoneForConvergencePeriod];
        id v26 = HMFBooleanToString();
        *(_DWORD *)buf = 138543618;
        long long v29 = v25;
        __int16 v30 = 2112;
        long long v31 = v26;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@This is an invalid configuration but allowed during development & convergence period. If that is the case please ignore this message.[Override = %@]", buf, 0x16u);
      }
      LODWORD(v18) = [(HMDHome *)v24 overrideSentinelZoneForConvergencePeriod];
      if (((v18 ^ 1 | v7) & 1) == 0) {
        LOBYTE(v18) = [(HMDHome *)v24 isUpdatedToHH2];
      }
    }
  }
  else
  {
    __int16 v19 = (void *)MEMORY[0x230FBD990]();
    id v20 = self;
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v29 = v21;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_DEBUG, "%{public}@Unable to find a valid instance of homeManager or this OS is not capable of running ROAR. Marking this home as not migrated to ROAR", buf, 0xCu);
    }
    LOBYTE(v18) = 0;
  }

  return (char)v18;
}

- (unint64_t)accessNotAllowedReasonCode
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  char v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = self;
  uint64_t v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id v6 = HMFGetLogIdentifier();
    int v8 = 138543618;
    char v9 = v6;
    __int16 v10 = 2048;
    uint64_t v11 = 1;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Home access is not allowed with reason code : %lu", (uint8_t *)&v8, 0x16u);
  }
  return 1;
}

- (void)storeMigrationCharacteristicsAuthorizationData
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  char v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = [(HMDHome *)self currentUser];
  int v5 = [v4 isOwner];

  if (v5)
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    int v7 = self;
    int v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      char v9 = HMFGetLogIdentifier();
      __int16 v10 = [(HMDHome *)v7 name];
      *(_DWORD *)buf = 138543618;
      long long v39 = v9;
      __int16 v40 = 2112;
      uint64_t v41 = v10;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Skipping characteristic authorization archiving for home: %@", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v11 = [MEMORY[0x263EFF9A0] dictionary];
    uint64_t v12 = [(HMDHome *)self hapAccessories];
    v36[0] = MEMORY[0x263EF8330];
    v36[1] = 3221225472;
    void v36[2] = __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke;
    void v36[3] = &unk_264A28370;
    id v13 = v11;
    id v37 = v13;
    objc_msgSend(v12, "na_each:", v36);

    uint64_t v14 = [v13 count];
    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    uint64_t v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    uint64_t v18 = v17;
    if (v14)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        __int16 v19 = HMFGetLogIdentifier();
        id v20 = [(HMDHome *)v16 name];
        *(_DWORD *)buf = 138543874;
        long long v39 = v19;
        __int16 v40 = 2112;
        uint64_t v41 = v20;
        __int16 v42 = 2112;
        id v43 = v13;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Archiving characteristic authorization data for migration for home: %@, [%@]", buf, 0x20u);
      }
      uint64_t v21 = (void *)[objc_alloc(MEMORY[0x263F08910]) initRequiringSecureCoding:1];
      [v21 encodeObject:v13 forKey:*MEMORY[0x263F081D0]];
      [v21 finishEncoding];
      id v22 = [v21 encodedData];
      if (v22)
      {
        uint64_t v23 = [(HMDHome *)v16 uuid];
        id v24 = getAccessoryAuthorizationsSettingsSerializedFilePath(v23);

        uint64_t v25 = +[HMDPersistentStore writeData:v22 toStorePath:v24 dataLabel:@"CharacteristicAuthorizationData"];
        id v26 = (void *)MEMORY[0x230FBD990]();
        int v27 = v16;
        long long v28 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          long long v29 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          long long v39 = v29;
          __int16 v40 = 2112;
          uint64_t v41 = v25;
          __int16 v42 = 2112;
          id v43 = v24;
          _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_DEBUG, "%{public}@Stored characteristic authorization data ([%@] bytes) to [%@]", buf, 0x20u);
        }
      }
      else
      {
        __int16 v32 = (void *)MEMORY[0x230FBD990]();
        long long v33 = v16;
        __int16 v34 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          __int16 v35 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          long long v39 = v35;
          _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_ERROR, "%{public}@Unable to store characteristic authorization data during migration, archived data is nil", buf, 0xCu);
        }
      }
    }
    else
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        __int16 v30 = HMFGetLogIdentifier();
        long long v31 = [(HMDHome *)v16 name];
        *(_DWORD *)buf = 138543618;
        long long v39 = v30;
        __int16 v40 = 2112;
        uint64_t v41 = v31;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_DEBUG, "%{public}@No characteristic authorization data to migrate for home: %@", buf, 0x16u);
      }
    }
  }
}

void __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 services];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  void v6[2] = __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_2;
  v6[3] = &unk_264A28348;
  id v7 = *(id *)(a1 + 32);
  id v8 = v3;
  id v5 = v3;
  objc_msgSend(v4, "na_each:", v6);
}

void __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = [a2 characteristics];
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  void v4[2] = __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_3;
  void v4[3] = &unk_264A28320;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  objc_msgSend(v3, "na_each:", v4);
}

void __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_3(uint64_t a1, void *a2)
{
  id v15 = a2;
  id v3 = [v15 getCharacteristicDictionary];
  id v4 = [v3 objectForKeyedSubscript:@"kCharacteristicAuthorizationDataCodingKey"];

  if (v4)
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = [*(id *)(a1 + 40) uuid];
    id v7 = [v5 objectForKeyedSubscript:v6];

    if (!v7)
    {
      id v8 = [MEMORY[0x263EFF9A0] dictionary];
      char v9 = *(void **)(a1 + 32);
      __int16 v10 = [*(id *)(a1 + 40) uuid];
      [v9 setObject:v8 forKeyedSubscript:v10];
    }
    uint64_t v11 = *(void **)(a1 + 32);
    uint64_t v12 = [*(id *)(a1 + 40) uuid];
    id v13 = [v11 objectForKeyedSubscript:v12];
    uint64_t v14 = [v15 instanceID];
    [v13 setObject:v4 forKeyedSubscript:v14];
  }
}

+ (id)loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID:(id)a3
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID__onceToken != -1) {
    dispatch_once(&loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID__onceToken, &__block_literal_global_210826);
  }
  id v5 = getAccessoryAuthorizationsSettingsSerializedFilePath(v4);
  id v6 = [MEMORY[0x263F08850] defaultManager];
  char v7 = [v6 fileExistsAtPath:v5];

  if (v7)
  {
    id v32 = 0;
    id v8 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v5 options:2 error:&v32];
    id v9 = v32;
    __int16 v10 = v9;
    if (!v8 || v9)
    {
      id v24 = (void *)MEMORY[0x230FBD990]();
      id v25 = a1;
      id v26 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        int v27 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        __int16 v34 = v27;
        __int16 v35 = 2112;
        id v36 = v5;
        __int16 v37 = 2112;
        id v38 = v10;
        _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_ERROR, "%{public}@Unable to read data from file : %@ / %@", buf, 0x20u);
      }
      id v15 = 0;
    }
    else
    {
      id v31 = 0;
      uint64_t v11 = [MEMORY[0x263F08928] unarchivedObjectOfClasses:loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID__allowedClasses fromData:v8 error:&v31];
      id v12 = v31;
      __int16 v10 = v12;
      if (!v11 || v12)
      {
        uint64_t v16 = (void *)MEMORY[0x230FBD990]();
        id v28 = a1;
        uint64_t v18 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          long long v29 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          __int16 v34 = v29;
          __int16 v35 = 2112;
          id v36 = v10;
          _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Unable to unarchive characteristic authorization data: %@", buf, 0x16u);
        }
        id v15 = 0;
      }
      else
      {
        id v13 = v11;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        id v15 = v14;

        uint64_t v16 = (void *)MEMORY[0x230FBD990]();
        id v17 = a1;
        uint64_t v18 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          __int16 v19 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          __int16 v34 = v19;
          __int16 v35 = 2112;
          id v36 = v4;
          __int16 v37 = 2112;
          id v38 = v15;
          _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_DEBUG, "%{public}@Found characteristic authorization data for migration of home: %@: [%@]", buf, 0x20u);
        }
      }
    }
  }
  else
  {
    id v20 = (void *)MEMORY[0x230FBD990]();
    id v21 = a1;
    id v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v23 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v34 = v23;
      __int16 v35 = 2112;
      id v36 = v5;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_DEBUG, "%{public}@No characteristic authorization file found at %@", buf, 0x16u);
    }
    id v15 = 0;
  }

  return v15;
}

void __110__HMDHome_CharacteristicAuthorizationData__loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID___block_invoke()
{
  v4[6] = *MEMORY[0x263EF8340];
  id v0 = (void *)MEMORY[0x263EFFA08];
  v4[0] = objc_opt_class();
  v4[1] = objc_opt_class();
  void v4[2] = objc_opt_class();
  void v4[3] = objc_opt_class();
  void v4[4] = objc_opt_class();
  v4[5] = objc_opt_class();
  uint64_t v1 = [MEMORY[0x263EFF8C0] arrayWithObjects:v4 count:6];
  uint64_t v2 = [v0 setWithArray:v1];
  id v3 = (void *)loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID__allowedClasses;
  loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID__allowedClasses = v2;
}

+ (void)removeCharacteristicAuthorizationDataMigrationFileFromDiskWithhHomeUUID:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = objc_alloc(NSURL);
  id v6 = getAccessoryAuthorizationsSettingsSerializedFilePath(v4);
  char v7 = (void *)[v5 initFileURLWithPath:v6];

  id v8 = [MEMORY[0x263F08850] defaultManager];
  id v14 = 0;
  [v8 removeItemAtURL:v7 error:&v14];
  id v9 = v14;

  if (v9)
  {
    __int16 v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = a1;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v16 = v13;
      __int16 v17 = 2112;
      id v18 = v9;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while removing accessory authorization migration file from disk : %@", buf, 0x16u);
    }
  }
}

- (void)_unitTest_setRetrievalCompletionsTimeout:(double)a3
{
  id v5 = [(HMDHome *)self retrievalAccessoryCompletionTuples];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  void v6[2] = __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke;
  v6[3] = &unk_264A27830;
  void v6[4] = self;
  *(double *)&void v6[5] = a3;
  objc_msgSend(v5, "na_each:", v6);
}

void __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) workQueue];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  void v6[2] = __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke_2;
  v6[3] = &unk_264A2C6A0;
  id v7 = v3;
  uint64_t v8 = *(void *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, v6);
}

uint64_t __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) stop];
  [*(id *)(a1 + 32) setRetrievalTimeout:*(double *)(a1 + 40)];
  uint64_t v2 = *(void **)(a1 + 32);
  return [v2 start];
}

- (void)_notifyRetrievalError:(id)a3 accessoryServer:(id)a4 linkType:(int64_t)a5 accessoryOperationBlock:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a6;
  id v13 = [(HMDHome *)self hapAccessories];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  void v17[2] = __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke;
  v17[3] = &unk_264A27808;
  id v18 = v11;
  uint64_t v19 = self;
  id v21 = v12;
  int64_t v22 = a5;
  id v20 = v10;
  id v14 = v10;
  id v15 = v12;
  id v16 = v11;
  objc_msgSend(v13, "na_each:", v17);
}

void __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 matchesHAPAccessoryWithServerIdentifier:*(void *)(a1 + 32) linkType:0])
  {
    id v4 = _Block_copy(*(const void **)(a1 + 56));
    id v5 = v4;
    if (v4) {
      (*((void (**)(void *, id))v4 + 2))(v4, v3);
    }

    id v6 = [*(id *)(a1 + 40) workQueue];
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    void v9[2] = __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke_2;
    void v9[3] = &unk_264A2AA20;
    void v9[4] = *(void *)(a1 + 40);
    id v7 = v3;
    uint64_t v8 = *(void *)(a1 + 64);
    id v10 = v7;
    uint64_t v12 = v8;
    id v11 = *(id *)(a1 + 48);
    dispatch_async(v6, v9);
  }
}

uint64_t __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dequeueRetrievalForAccessory:*(void *)(a1 + 40) linkType:*(void *)(a1 + 56) error:*(void *)(a1 + 48)];
}

- (void)_retrieveHAPAccessoryForHMDHAPAccessory:(id)a3 linkType:(int64_t)a4 forceRetrieve:(BOOL)a5 completion:(id)a6
{
  BOOL v7 = a5;
  uint64_t v73 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a6;
  uint64_t v12 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v12);

  uint64_t v13 = [v10 bridge];
  id v14 = (void *)v13;
  if (v13) {
    id v15 = (void *)v13;
  }
  else {
    id v15 = v10;
  }
  id v16 = v15;

  __int16 v17 = [(HMDHome *)self accessoryBrowser];
  char v18 = [v17 isBrowsingAllowed];

  if (v18)
  {
    uint64_t v19 = [(HMDHome *)self accessories];
    char v20 = [v19 containsObject:v10];

    if (v20)
    {
      id v21 = [v16 matchingHAPAccessoryServerIdentifierWithLinkType:a4];
      int64_t v22 = (void *)MEMORY[0x230FBD990]();
      uint64_t v23 = self;
      id v24 = HMFGetOSLogHandle();
      id v58 = v11;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        long long v54 = HMFGetLogIdentifier();
        long long v52 = [v16 shortDescription];
        long long v56 = v22;
        if ((unint64_t)a4 > 2) {
          id v25 = @"Undefined";
        }
        else {
          id v25 = off_264A1CE08[a4];
        }
        uint64_t v39 = v25;
        __int16 v40 = HMFBooleanToString();
        *(_DWORD *)buf = 138544386;
        long long v64 = v54;
        __int16 v65 = 2112;
        long long v66 = v52;
        __int16 v67 = 2112;
        id v68 = v21;
        __int16 v69 = 2112;
        uint64_t v70 = v39;
        __int16 v71 = 2112;
        __int16 v72 = v40;
        _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Retrieving accessory (%@) with server %@/%@. Force retrieve: %@", buf, 0x34u);

        int64_t v22 = v56;
        id v11 = v58;
      }

      char v62 = 0;
      uint64_t v41 = [(HMDHome *)v23 _enqueueRetrievalTupleForAccessory:v16 linkType:a4 inProgress:&v62 completion:v11];
      __int16 v42 = v41;
      if (v62 && !v7) {
        goto LABEL_23;
      }
      [v41 start];
      id v43 = [(HMDHome *)v23 accessoryBrowser];
      v59[0] = MEMORY[0x263EF8330];
      v59[1] = 3221225472;
      v59[2] = __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke;
      void v59[3] = &unk_264A27DA0;
      v59[4] = v23;
      id v60 = v16;
      int64_t v61 = a4;
      [v43 discoverAccessoryServer:v21 linkType:a4 errorHandler:v59];

      if (v62)
      {
LABEL_23:
        uint64_t v44 = (void *)MEMORY[0x230FBD990]();
        unint64_t v45 = v23;
        id v46 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          long long v55 = HMFGetLogIdentifier();
          [v16 shortDescription];
          v53 = id v57 = v44;
          if ((unint64_t)a4 > 2) {
            uint64_t v47 = @"Undefined";
          }
          else {
            uint64_t v47 = off_264A1CE08[a4];
          }
          id v48 = v47;
          long long v49 = NSNumber;
          long long v50 = [v42 completions];
          long long v51 = objc_msgSend(v49, "numberWithUnsignedInteger:", objc_msgSend(v50, "count"));
          *(_DWORD *)buf = 138544386;
          long long v64 = v55;
          __int16 v65 = 2112;
          long long v66 = v53;
          __int16 v67 = 2112;
          id v68 = v21;
          __int16 v69 = 2112;
          uint64_t v70 = v48;
          __int16 v71 = 2112;
          __int16 v72 = v51;
          _os_log_impl(&dword_22F52A000, v46, OS_LOG_TYPE_INFO, "%{public}@Retrieval already in progress for accessory (%@) with server %@/%@ and %@ completions.", buf, 0x34u);

          uint64_t v44 = v57;
          id v11 = v58;
        }
      }

      goto LABEL_30;
    }
    long long v33 = (void *)MEMORY[0x230FBD990]();
    __int16 v34 = self;
    __int16 v35 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      id v36 = HMFGetLogIdentifier();
      __int16 v37 = [v10 shortDescription];
      *(_DWORD *)buf = 138543618;
      long long v64 = v36;
      __int16 v65 = 2112;
      long long v66 = v37;
      _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_ERROR, "%{public}@Cannot retrieve HAP accessory: %@. Requested accessory not part of this home", buf, 0x16u);
    }
    id v21 = (void (**)(void, void))_Block_copy(v11);
    if (v21)
    {
      id v31 = (void *)MEMORY[0x263F087E8];
      uint64_t v32 = 3;
      goto LABEL_17;
    }
  }
  else
  {
    id v26 = (void *)MEMORY[0x230FBD990]();
    int v27 = self;
    id v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      long long v29 = HMFGetLogIdentifier();
      __int16 v30 = [v16 shortDescription];
      *(_DWORD *)buf = 138543618;
      long long v64 = v29;
      __int16 v65 = 2112;
      long long v66 = v30;
      _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_ERROR, "%{public}@Ignoring request to retrieve HAP accessory: %@. Browsing not allowed (companion is connected or no app)", buf, 0x16u);
    }
    id v21 = (void (**)(void, void))_Block_copy(v11);
    if (v21)
    {
      id v31 = (void *)MEMORY[0x263F087E8];
      uint64_t v32 = 48;
LABEL_17:
      id v38 = [v31 hmErrorWithCode:v32];
      ((void (**)(void, void *))v21)[2](v21, v38);
    }
  }
LABEL_30:
}

void __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) workQueue];
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3221225472;
    void v8[2] = __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke_2;
    void v8[3] = &unk_264A2AA20;
    id v5 = *(void **)(a1 + 40);
    void v8[4] = *(void *)(a1 + 32);
    id v6 = v5;
    uint64_t v7 = *(void *)(a1 + 48);
    id v9 = v6;
    uint64_t v11 = v7;
    id v10 = v3;
    dispatch_async(v4, v8);
  }
}

uint64_t __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dequeueRetrievalForAccessory:*(void *)(a1 + 40) linkType:*(void *)(a1 + 56) error:*(void *)(a1 + 48)];
}

- (void)_dequeueRetrievalForAccessory:(id)a3 linkType:(int64_t)a4 error:(id)a5
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a5;
  id v10 = [(HMDHome *)self workQueue];
  dispatch_assert_queue_V2(v10);

  uint64_t v11 = [v8 bridge];
  uint64_t v12 = (void *)v11;
  if (v11) {
    uint64_t v13 = (void *)v11;
  }
  else {
    uint64_t v13 = v8;
  }
  id v14 = v13;

  id v15 = [(HMDHome *)self _retrieveTupleForPrimaryAccessory:v14 linkType:a4];
  if (v15)
  {
    [(HMDHome *)self _removeRetrievalCompletionTuple:v15];
    uint64_t v16 = [v15 stop];
    if (v9)
    {
      __int16 v17 = (void *)MEMORY[0x230FBD990](v16);
      char v18 = self;
      uint64_t v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        __int16 v30 = HMFGetLogIdentifier();
        id v28 = [v14 shortDescription];
        long long v29 = v17;
        if ((unint64_t)a4 > 2) {
          char v20 = @"Undefined";
        }
        else {
          char v20 = off_264A1CE08[a4];
        }
        id v21 = v20;
        int64_t v22 = objc_msgSend(MEMORY[0x263F087E8], "hmStringFromErrorCode:", objc_msgSend(v9, "code"));
        uint64_t v23 = NSNumber;
        int v27 = [v15 completions];
        id v24 = objc_msgSend(v23, "numberWithUnsignedInteger:", objc_msgSend(v27, "count"));
        *(_DWORD *)buf = 138544386;
        __int16 v34 = v30;
        __int16 v35 = 2112;
        id v36 = v28;
        __int16 v37 = 2112;
        id v38 = v21;
        __int16 v39 = 2112;
        __int16 v40 = v22;
        __int16 v41 = 2112;
        __int16 v42 = v24;
        _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Calling accessory retrieval for %@/%@ with error: %@ and %@ completions.", buf, 0x34u);

        __int16 v17 = v29;
      }
    }
    id v25 = [v15 completions];
    v31[0] = MEMORY[0x263EF8330];
    v31[1] = 3221225472;
    void v31[2] = __76__HMDHome_AccessoryRetrieval___dequeueRetrievalForAccessory_linkType_error___block_invoke;
    void v31[3] = &unk_264A2D0E0;
    id v32 = v9;
    objc_msgSend(v25, "na_each:", v31);

    id v26 = [v15 completions];
    [v26 removeAllObjects];
  }
}

uint64_t __76__HMDHome_AccessoryRetrieval___dequeueRetrievalForAccessory_linkType_error___block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, *(void *)(a1 + 32));
}

- (id)_enqueueRetrievalTupleForAccessory:(id)a3 linkType:(int64_t)a4 inProgress:(BOOL *)a5 completion:(id)a6
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a6;
  uint64_t v12 = [v10 bridge];
  uint64_t v13 = (void *)v12;
  if (v12) {
    id v14 = (void *)v12;
  }
  else {
    id v14 = v10;
  }
  id v15 = v14;

  uint64_t v16 = (void *)MEMORY[0x230FBD990]();
  __int16 v17 = self;
  char v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    int v27 = v16;
    uint64_t v19 = HMFGetLogIdentifier();
    if (v11) {
      char v20 = @" with completion";
    }
    else {
      char v20 = &stru_26E2EB898;
    }
    id v21 = objc_msgSend(v15, "shortDescription", v27);
    long long v29 = a5;
    if ((unint64_t)a4 > 2) {
      int64_t v22 = @"Undefined";
    }
    else {
      int64_t v22 = off_264A1CE08[a4];
    }
    uint64_t v23 = v22;
    *(_DWORD *)buf = 138544130;
    id v31 = v19;
    __int16 v32 = 2112;
    long long v33 = v20;
    __int16 v34 = 2112;
    __int16 v35 = v21;
    __int16 v36 = 2112;
    __int16 v37 = v23;
    _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Enqueueing retrieval tuple%@ for %@/%@.", buf, 0x2Au);

    uint64_t v16 = v28;
    a5 = v29;
  }

  uint64_t v24 = [(HMDHome *)v17 _retrieveTupleForPrimaryAccessory:v15 linkType:a4];
  if (v24)
  {
    id v25 = (HMDAccessoryRetrievalCompletionTuple *)v24;
    if (a5) {
      *a5 = 1;
    }
    if (v11) {
      goto LABEL_16;
    }
  }
  else
  {
    id v25 = [[HMDAccessoryRetrievalCompletionTuple alloc] initWithHome:v17 accessory:v15 linkType:a4];
    [(HMDHome *)v17 _addRetrievalCompletionTuple:v25];
    if (v11) {
LABEL_16:
    }
      [(HMDAccessoryRetrievalCompletionTuple *)v25 addCompletion:v11];
  }

  return v25;
}

- (BOOL)_isRetrievalInProgressForPrimaryAccessory:(id)a3 linkType:(int64_t)a4
{
  id v4 = [(HMDHome *)self _retrieveTupleForPrimaryAccessory:a3 linkType:a4];
  BOOL v5 = v4 != 0;

  return v5;
}

- (void)_removeRetrievalCompletionTuple:(id)a3
{
  id v5 = a3;
  os_unfair_recursive_lock_lock_with_options();
  id v4 = [(HMDHome *)self retrievalAccessoryCompletionTuples];
  [v4 removeObject:v5];

  os_unfair_recursive_lock_unlock();
}

- (void)_addRetrievalCompletionTuple:(id)a3
{
  id v5 = a3;
  os_unfair_recursive_lock_lock_with_options();
  id v4 = [(HMDHome *)self retrievalAccessoryCompletionTuples];
  [v4 addObject:v5];

  os_unfair_recursive_lock_unlock();
}

- (id)_retrieveTupleForPrimaryAccessory:(id)a3 linkType:(int64_t)a4
{
  id v6 = a3;
  uint64_t v7 = [v6 bridge];
  id v8 = (void *)v7;
  if (v7) {
    id v9 = (void *)v7;
  }
  else {
    id v9 = v6;
  }
  id v10 = v9;

  os_unfair_recursive_lock_lock_with_options();
  id v11 = [(HMDHome *)self retrievalAccessoryCompletionTuples];
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  void v15[2] = __74__HMDHome_AccessoryRetrieval___retrieveTupleForPrimaryAccessory_linkType___block_invoke;
  v15[3] = &unk_264A277E0;
  id v12 = v10;
  id v16 = v12;
  int64_t v17 = a4;
  uint64_t v13 = objc_msgSend(v11, "na_firstObjectPassingTest:", v15);

  os_unfair_recursive_lock_unlock();
  return v13;
}

BOOL __74__HMDHome_AccessoryRetrieval___retrieveTupleForPrimaryAccessory_linkType___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 accessory];
  id v5 = [v4 uuid];
  id v6 = [*(id *)(a1 + 32) uuid];
  if ([v5 isEqual:v6]) {
    BOOL v7 = [v3 linkType] == *(void *)(a1 + 40);
  }
  else {
    BOOL v7 = 0;
  }

  return v7;
}

- (id)createSiriEndpointProfilesMessengerWithMessageTargetUUID:(id)a3 messageDispatcher:(id)a4 messageRouter:(id)a5 messageHandler:(id)a6
{
  id v9 = a6;
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  uint64_t v13 = [[HMDSiriEndpointProfilesMessenger alloc] initWithMessageTargetUUID:v12 messageDispatcher:v11 messageRouter:v10 messageHandler:v9];

  return v13;
}

- (void)configureSiriEndpointProfilesMessengerWithMessengerFactory:(id)a3 messageHandlerFactory:(id)a4
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    int v22 = 138543362;
    uint64_t v23 = v11;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Configuring siri endpoint profiles messenger", (uint8_t *)&v22, 0xCu);
  }
  id v12 = [(HMDHome *)v9 msgDispatcher];
  uint64_t v13 = [(HMDHome *)v9 primaryResidentMessageRouter];
  if (!v12)
  {
    _HMFPreconditionFailure();
LABEL_7:
    _HMFPreconditionFailure();
  }
  id v14 = (void *)v13;
  if (!v13) {
    goto LABEL_7;
  }
  id v15 = (void *)MEMORY[0x263F0E7C0];
  id v16 = [(HMDHome *)v9 uuid];
  int64_t v17 = [v15 messageTargetUUIDWithHomeUUID:v16];

  char v18 = [(HMDHome *)v9 uuid];
  uint64_t v19 = [v7 createSiriEndpointProfileMessageHandlerWithHomeUUID:v18];

  char v20 = [(HMDHome *)v9 homeManager];
  [v19 setDataSource:v20];

  id v21 = [v6 createSiriEndpointProfilesMessengerWithMessageTargetUUID:v17 messageDispatcher:v12 messageRouter:v14 messageHandler:v19];
  [v21 registerForMessagesWithHome:v9];
  [(HMDHome *)v9 setSiriEndpointProfilesMessenger:v21];
}

- (unint64_t)accessorySettingsLocalMessageHandler:(id)a3 callerPrivilegeWithMessage:(id)a4
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v7 userForHome:self];
  id v9 = v8;
  if (v8)
  {
    unint64_t v10 = [v8 privilege];
  }
  else
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = HMFGetLogIdentifier();
      int v16 = 138543618;
      int64_t v17 = v14;
      __int16 v18 = 2112;
      id v19 = v7;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to get accessory settings local message handler caller privilege from message: %@", (uint8_t *)&v16, 0x16u);
    }
    unint64_t v10 = 2;
  }

  return v10;
}

- (id)createUnifiedLanguageValueListSettingDataProvider
{
  uint64_t v2 = objc_alloc_init(HMDUnifiedLanguageValueListSettingDataProvider);
  return v2;
}

- (void)configureUnifiedLanguageValueListSettingDataProviderWithFactory:(id)a3
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    int v10 = 138543362;
    id v11 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Configuring unified language value list setting data provider", (uint8_t *)&v10, 0xCu);
  }
  id v9 = [v4 createUnifiedLanguageValueListSettingDataProvider];
  [v9 setDataSource:v6];
  [(HMDHome *)v6 setUnifiedLanguageValueListSettingDataProvider:v9];
}

- (void)_performMediaGroupReadinessCheckAndSubmitMetricEventWithTimeout:(double)a3 accessoryUUID:(id)a4 setupSessionIdentifier:(id)a5
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v8 = a4;
  id v9 = a5;
  if (v9)
  {
    int v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = self;
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v37 = v13;
      __int16 v38 = 2112;
      id v39 = v9;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Perform media group readiness check for setup session: %@", buf, 0x16u);
    }
  }
  BOOL v14 = fabs(a3) >= 2.22044605e-16 && a3 > 0.0;
  id v15 = [(HMDHome *)self accessoryWithUUID:v8];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  id v17 = v16;

  __int16 v18 = [(HMDHome *)self homeManager];
  id v19 = (void *)MEMORY[0x230FBD990]();
  uint64_t v20 = self;
  id v21 = HMFGetOSLogHandle();
  int v22 = v21;
  if (!v14 || (v17 ? (BOOL v23 = v18 == 0) : (BOOL v23 = 1), v23))
  {
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      __int16 v30 = HMFGetLogIdentifier();
      id v31 = [NSNumber numberWithBool:v14];
      *(_DWORD *)buf = 138544130;
      __int16 v37 = v30;
      __int16 v38 = 2112;
      id v39 = v31;
      __int16 v40 = 2112;
      id v41 = v17;
      __int16 v42 = 2112;
      uint64_t v43 = v18;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Invalid parameters: timeout %@ accessory: %@ homeManager: %@", buf, 0x2Au);
    }
  }
  else
  {
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v37 = v24;
      __int16 v38 = 2112;
      id v39 = v17;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Performing media group preflight check fetch for accessory: %@", buf, 0x16u);
    }
    HMFUptime();
    uint64_t v26 = v25;
    int v27 = [v17 category];
    id v28 = [v27 categoryType];

    v32[0] = MEMORY[0x263EF8330];
    v32[1] = 3221225472;
    void v32[2] = __138__HMDHome_MediaGroupReadinessCheck___performMediaGroupReadinessCheckAndSubmitMetricEventWithTimeout_accessoryUUID_setupSessionIdentifier___block_invoke;
    v32[3] = &unk_264A2F430;
    uint64_t v35 = v26;
    void v32[4] = v20;
    id v33 = v9;
    id v34 = v28;
    id v29 = v28;
    [v18 fetchSetupDiagnosticStateWithOptions:1 accessoryUUID:v8 remoteMessageTimeout:9 remoteMessageRestriction:v32 completion:30.0];
  }
}

void __138__HMDHome_MediaGroupReadinessCheck___performMediaGroupReadinessCheckAndSubmitMetricEventWithTimeout_accessoryUUID_setupSessionIdentifier___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = HMFUptime();
  double v9 = v8 - *(double *)(a1 + 56);
  int v10 = (void *)MEMORY[0x230FBD990](v7);
  id v11 = *(id *)(a1 + 32);
  uint64_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = HMFGetLogIdentifier();
    BOOL v14 = [NSNumber numberWithDouble:v9];
    *(_DWORD *)buf = 138543874;
    id v46 = v13;
    __int16 v47 = 2112;
    id v48 = v14;
    __int16 v49 = 2112;
    id v50 = v6;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Performing media group preflight check fetch completed with duration %@ error: %@", buf, 0x20u);
  }
  id v15 = (void *)MEMORY[0x230FBD990]();
  id v16 = *(id *)(a1 + 32);
  id v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    __int16 v18 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v46 = v18;
    __int16 v47 = 2112;
    id v48 = v5;
    _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Fetched diagnostic info: %@", buf, 0x16u);
  }
  id v19 = [v5 appleMediaAccessoryDiagnosticInfo];
  uint64_t v20 = [v19 cloudInfo];
  id v21 = [v19 idsInfo];
  int v22 = [v19 currentAccessoryInfo];
  BOOL v23 = [v19 eventRouterServerInfo];
  id v39 = *(void **)(a1 + 32);
  __int16 v40 = [*(id *)(a1 + 40) UUIDString];
  uint64_t v38 = *(void *)(a1 + 48);
  if (v20) {
    unsigned int v37 = [v20 firstCloudImportComplete];
  }
  else {
    unsigned int v37 = 0;
  }
  uint64_t v24 = [v19 mediaRouteIdString];
  uint64_t v25 = [v22 publicPairingIdentity];
  if (v23) {
    BOOL v36 = [v23 connectionState] == 1;
  }
  else {
    BOOL v36 = 0;
  }
  __int16 v42 = v22;
  uint64_t v43 = v6;
  if (v20)
  {
    BOOL v34 = [v20 cloudState] == 1;
    BOOL v26 = [v20 octagonState] == 1;
  }
  else
  {
    BOOL v34 = 0;
    BOOL v26 = 0;
  }
  uint64_t v44 = v5;
  id v41 = v23;
  uint64_t v35 = v21;
  if (v21) {
    LOBYTE(v21) = [v21 idsState] == 1;
  }
  BOOL v27 = v24 != 0;
  char v28 = [*(id *)(a1 + 32) isOwnerUser];
  [*(id *)(a1 + 32) uuid];
  v30 = id v29 = (void *)v24;
  BYTE3(v33) = v28;
  BYTE2(v33) = (_BYTE)v21;
  BYTE1(v33) = v26;
  LOBYTE(v33) = v34;
  id v31 = objc_msgSend(v39, "preflightCheckLogEventWithSessionIdentifier:accessoryCategory:fetchDuration:firstImportCompleted:hasMediaRouteIdentifier:hasPairingIdentity:hasConnectedEventRouterClient:isCloudSignedIn:hasManatee:isIdsReady:isOwnerUser:homeUUID:", v40, v38, v37, v27, v25 != 0, v36, v9, v33, v30);

  __int16 v32 = [*(id *)(a1 + 32) logEventSubmitter];
  [v32 submitLogEvent:v31 error:v43];
}

- (void)_handlePerformMediaGroupReadinessCheck:(id)a3
{
  v16[1] = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 messagePayload];
  id v6 = [v5 objectForKeyedSubscript:*MEMORY[0x263F0CD38]];

  uint64_t v7 = [v4 messagePayload];
  double v8 = [v7 objectForKeyedSubscript:@"kAccessoryUUID"];

  double v9 = [v4 messagePayload];
  int v10 = [v9 objectForKeyedSubscript:*MEMORY[0x263F0CD30]];

  [v6 doubleValue];
  double v12 = v11;
  uint64_t v15 = *MEMORY[0x263F0CD28];
  uint64_t v13 = [NSNumber numberWithBool:1];
  v16[0] = v13;
  BOOL v14 = [NSDictionary dictionaryWithObjects:v16 forKeys:&v15 count:1];
  [v4 respondWithPayload:v14 error:0];

  [(HMDHome *)self _performMediaGroupReadinessCheckAndSubmitMetricEventWithTimeout:v8 accessoryUUID:v10 setupSessionIdentifier:v12];
}

- (void)_registerPerformMediaGroupReadinessCheckMessage
{
  v7[1] = *MEMORY[0x263EF8340];
  id v3 = [(HMDHome *)self msgDispatcher];
  uint64_t v4 = *MEMORY[0x263F0CD20];
  id v5 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v7[0] = v5;
  id v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:v7 count:1];
  [v3 registerForMessage:v4 receiver:self policies:v6 selector:sel__handlePerformMediaGroupReadinessCheck_];
}

- (BOOL)validateActionsDoNotConflict:(id)a3
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (![v4 count])
  {
    BOOL v38 = 1;
    goto LABEL_55;
  }
  long long v53 = self;
  id v56 = v4;
  __int16 v59 = [MEMORY[0x263EFF9C0] set];
  id v5 = [MEMORY[0x263EFF9C0] set];
  long long v55 = [MEMORY[0x263EFF9C0] set];
  long long v54 = [MEMORY[0x263EFF9A0] dictionary];
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  obuint64_t j = v4;
  uint64_t v6 = [obj countByEnumeratingWithState:&v72 objects:v79 count:16];
  if (!v6)
  {
    BOOL v38 = 1;
    goto LABEL_54;
  }
  uint64_t v58 = *(void *)v73;
  long long v52 = v61;
  while (2)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if (*(void *)v73 != v58) {
        objc_enumerationMutation(obj);
      }
      id v8 = *(id *)(*((void *)&v72 + 1) + 8 * i);
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        double v9 = v8;
      }
      else {
        double v9 = 0;
      }
      id v10 = v9;

      if (!v10)
      {
        id v12 = v8;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        id v11 = v13;

        if (v11)
        {
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          BOOL v14 = [v11 mediaProfiles];
          uint64_t v15 = [v14 countByEnumeratingWithState:&v68 objects:v78 count:16];
          if (v15)
          {
            uint64_t v16 = *(void *)v69;
            while (2)
            {
              for (uint64_t j = 0; j != v15; ++j)
              {
                if (*(void *)v69 != v16) {
                  objc_enumerationMutation(v14);
                }
                uint64_t v18 = *(void *)(*((void *)&v68 + 1) + 8 * j);
                if (objc_msgSend(v5, "containsObject:", v18, v52))
                {
                  id v39 = (void *)MEMORY[0x230FBD990]();
                  __int16 v40 = v53;
                  id v41 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
                  {
                    __int16 v42 = HMFGetLogIdentifier();
                    *(_DWORD *)buf = 138543618;
                    *(void *)&uint8_t buf[4] = v42;
                    *(_WORD *)&unsigned char buf[12] = 2112;
                    *(void *)&buf[14] = v12;
                    _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_ERROR, "%{public}@Conflicting action detected: %@", buf, 0x16u);
                  }
                  id v36 = v11;
                  unsigned int v37 = v14;
                  goto LABEL_51;
                }
                [v5 addObject:v18];
              }
              uint64_t v15 = [v14 countByEnumeratingWithState:&v68 objects:v78 count:16];
              if (v15) {
                continue;
              }
              break;
            }
          }
        }
        else
        {
          id v19 = v12;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = 0;
          }
          id v21 = v20;

          if (v21)
          {
            int v22 = [v21 accessory];
            if ([v55 containsObject:v22])
            {
              id v48 = (void *)MEMORY[0x230FBD990]();
              __int16 v49 = v53;
              id v50 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
              {
                uint64_t v51 = HMFGetLogIdentifier();
                *(_DWORD *)buf = 138543618;
                *(void *)&uint8_t buf[4] = v51;
                *(_WORD *)&unsigned char buf[12] = 2112;
                *(void *)&buf[14] = v19;
                _os_log_impl(&dword_22F52A000, v50, OS_LOG_TYPE_ERROR, "%{public}@Conflicting action detected: %@", buf, 0x16u);
              }

              id v11 = 0;
              id v10 = 0;
              goto LABEL_52;
            }
            [v55 addObject:v22];

            id v11 = 0;
            goto LABEL_43;
          }
          BOOL v23 = +[HMDCoreData featuresDataSource];
          int v24 = [v23 isRVCEnabled];

          if (v24
            && ((id v25 = v19, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
              ? (BOOL v26 = 0)
              : (BOOL v26 = v25),
                id v27 = v26,
                v25,
                v27))
          {
            char v28 = [v27 accessory];
            id v29 = [v28 uuid];
            __int16 v30 = [v54 objectForKeyedSubscript:v29];

            if (!v30)
            {
              __int16 v30 = [MEMORY[0x263EFF9C0] set];
              id v31 = [v28 uuid];
              [v54 setObject:v30 forKeyedSubscript:v31];
            }
            *(void *)buf = 0;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x2020000000;
            char v77 = 0;
            __int16 v32 = [v27 commands];
            v60[0] = MEMORY[0x263EF8330];
            v60[1] = 3221225472;
            v61[0] = __59__HMDHome_HMActionExecution__validateActionsDoNotConflict___block_invoke;
            v61[1] = &unk_264A2F6C0;
            id v33 = v30;
            id v62 = v33;
            uint64_t v63 = v53;
            id v64 = v25;
            __int16 v67 = buf;
            id v65 = v54;
            id v34 = v28;
            id v66 = v34;
            [v32 enumerateObjectsUsingBlock:v60];

            BOOL v35 = *(unsigned char *)(*(void *)&buf[8] + 24) == 0;
            _Block_object_dispose(buf, 8);

            BOOL v14 = 0;
            id v36 = 0;
            unsigned int v37 = 0;
            if (!v35)
            {
LABEL_51:

              id v10 = 0;
              id v11 = v36;
LABEL_52:

              BOOL v38 = 0;
              goto LABEL_54;
            }
          }
          else
          {
            BOOL v14 = 0;
          }
        }

LABEL_43:
        id v10 = 0;
        goto LABEL_44;
      }
      id v11 = [v10 characteristic];
      if ([v59 containsObject:v11])
      {
        uint64_t v44 = (void *)MEMORY[0x230FBD990]();
        unint64_t v45 = v53;
        id v46 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          __int16 v47 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          *(void *)&uint8_t buf[4] = v47;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v8;
          _os_log_impl(&dword_22F52A000, v46, OS_LOG_TYPE_ERROR, "%{public}@Conflicting action detected: %@", buf, 0x16u);
        }
        goto LABEL_52;
      }
      [v59 addObject:v11];
LABEL_44:
    }
    uint64_t v6 = [obj countByEnumeratingWithState:&v72 objects:v79 count:16];
    BOOL v38 = 1;
    if (v6) {
      continue;
    }
    break;
  }
LABEL_54:

  id v4 = v56;
LABEL_55:

  return v38;
}

void __59__HMDHome_HMActionExecution__validateActionsDoNotConflict___block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v6 = a2;
  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = [v6 matterPath];
  LODWORD(v7) = [v7 containsObject:v8];

  if (v7)
  {
    double v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = *(id *)(a1 + 40);
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v12 = HMFGetLogIdentifier();
      uint64_t v13 = *(void *)(a1 + 48);
      int v18 = 138543618;
      id v19 = v12;
      __int16 v20 = 2112;
      uint64_t v21 = v13;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@Conflicting action detected: %@", (uint8_t *)&v18, 0x16u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
    *a4 = 1;
  }
  BOOL v14 = *(void **)(a1 + 56);
  uint64_t v15 = [*(id *)(a1 + 64) uuid];
  uint64_t v16 = [v14 objectForKeyedSubscript:v15];
  id v17 = [v6 matterPath];
  [v16 addObject:v17];
}

- (void)executeActionsFromMessage:(id)a3
{
  uint64_t v172 = *MEMORY[0x263EF8340];
  id v114 = a3;
  uint64_t v104 = [v114 arrayForKey:*MEMORY[0x263F0C880]];
  if ([v104 count])
  {
    if (objc_msgSend(v104, "hmf_objectsAreKindOfClass:", objc_opt_class()))
    {
      uint64_t v112 = [MEMORY[0x263EFF910] date];
      uint64_t v103 = [v114 source];
      uint64_t v102 = [v114 transport];
      id v106 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v104, "count"));
      long long v153 = 0u;
      long long v154 = 0u;
      long long v151 = 0u;
      long long v152 = 0u;
      id v4 = v104;
      uint64_t v5 = [v4 countByEnumeratingWithState:&v151 objects:v171 count:16];
      if (!v5) {
        goto LABEL_17;
      }
      uint64_t v6 = *(void *)v152;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v152 != v6) {
            objc_enumerationMutation(v4);
          }
          uint64_t v8 = *(void *)(*((void *)&v151 + 1) + 8 * i);
          double v9 = [(HMDHome *)self actionWithDictionaryRepresentation:v8];
          if (!v9)
          {
            BOOL v81 = (void *)MEMORY[0x230FBD990]();
            id v82 = self;
            uint64_t v83 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
            {
              int v84 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              *(void *)&uint8_t buf[4] = v84;
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&buf[14] = v8;
              _os_log_impl(&dword_22F52A000, v83, OS_LOG_TYPE_ERROR, "%{public}@Failed to deserialize action: %@", buf, 0x16u);
            }
            id v10 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
            [v114 respondWithError:v10];
LABEL_91:

            goto LABEL_100;
          }
          id v10 = v9;
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass) {
            id v12 = v10;
          }
          else {
            id v12 = 0;
          }
          id v13 = v12;

          if (isKindOfClass)
          {
            BOOL v14 = [v114 proxyConnection];
            if (v14)
            {
              char v15 = [v114 isEntitledForShortcutsAutomationAccess];

              if ((v15 & 1) == 0)
              {
                id v87 = (void *)MEMORY[0x230FBD990]();
                char v88 = self;
                uint64_t v89 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
                {
                  id v90 = HMFGetLogIdentifier();
                  *(_DWORD *)buf = 138543362;
                  *(void *)&uint8_t buf[4] = v90;
                  _os_log_impl(&dword_22F52A000, v89, OS_LOG_TYPE_ERROR, "%{public}@Missing ShortcutsAutomationAccess Entitlement for Execute", buf, 0xCu);
                }
                __int16 v91 = [MEMORY[0x263F087E8] hmErrorWithCode:80 description:@"Missing Entitlement" reason:0 suggestion:0];
                [v114 respondWithError:v91];

                goto LABEL_91;
              }
            }
          }
          [v106 addObject:v10];
        }
        uint64_t v5 = [v4 countByEnumeratingWithState:&v151 objects:v171 count:16];
        if (v5) {
          continue;
        }
        break;
      }
LABEL_17:

      BOOL v16 = [(HMDHome *)self validateActionsDoNotConflict:v106];
      id v17 = (void *)MEMORY[0x230FBD990]();
      id val = self;
      int v18 = HMFGetOSLogHandle();
      id v19 = v18;
      if (v16)
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v20 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          *(void *)&uint8_t buf[4] = v20;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v106;
          _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Executing actions: %@", buf, 0x16u);
        }
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000;
        long long v168 = __Block_byref_object_copy__273357;
        uint64_t v169 = __Block_byref_object_dispose__273358;
        id v170 = 0;
        long long v107 = [(HMDHome *)val workQueue];
        dispatch_group_t v21 = dispatch_group_create();
        uint64_t v116 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v106, "count"));
        uint64_t v113 = [MEMORY[0x263F08968] strongToStrongObjectsMapTable];
        uint64_t v108 = [MEMORY[0x263F08968] strongToStrongObjectsMapTable];
        uint64_t v105 = [MEMORY[0x263EFF980] array];
        long long v149 = 0u;
        long long v150 = 0u;
        long long v147 = 0u;
        long long v148 = 0u;
        obuint64_t j = v106;
        uint64_t v22 = [obj countByEnumeratingWithState:&v147 objects:v166 count:16];
        group = v21;
        if (!v22)
        {
LABEL_72:

          id v66 = group;
          if ([v116 count])
          {
            objc_initWeak(&location, val);
            dispatch_group_enter(group);
            __int16 v67 = (void *)MEMORY[0x230FBD990]();
            long long v68 = val;
            HMFGetOSLogHandle();
            long long v69 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v70 = (id)objc_claimAutoreleasedReturnValue();
              long long v156 = 0uLL;
              long long v71 = [v114 identifier];

              if (v71)
              {
                long long v72 = [v114 identifier];
                [v72 getUUIDBytes:&v156];
              }
              else
              {
                long long v156 = *MEMORY[0x263F42690];
              }
              long long v155 = v156;
              uint64_t v92 = [v116 count];
              *(_DWORD *)uint64_t v158 = 138544386;
              id v159 = v70;
              __int16 v160 = 1042;
              *(_DWORD *)long long v161 = 16;
              *(_WORD *)&v161[4] = 2098;
              *(void *)&v161[6] = &v155;
              __int16 v162 = 2114;
              long long v163 = v68;
              __int16 v164 = 2048;
              uint64_t v165 = v92;
              _os_log_impl(&dword_22F52A000, v69, OS_LOG_TYPE_INFO, "%{public}@Executing write requests for request identifier %{public,uuid_t}.16P from home: %{public}@ count: %lu for characteristic write actions", v158, 0x30u);
            }
            __int16 v93 = [v114 identifier];
            uint64_t v94 = [v114 qualityOfService];
            v127[0] = MEMORY[0x263EF8330];
            v127[1] = 3221225472;
            v127[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_28;
            v127[3] = &unk_264A2F648;
            id v128 = v107;
            objc_copyWeak(&v134, &location);
            id v129 = v116;
            id v130 = v108;
            id v131 = v113;
            __int16 v133 = buf;
            uint64_t v132 = group;
            [(HMDHome *)v68 writeCharacteristicValues:v129 source:v103 identifier:v93 transport:v102 qualityOfService:v94 withCompletionHandler:v127];

            objc_destroyWeak(&v134);
            objc_destroyWeak(&location);
            id v66 = group;
          }
          if ((objc_msgSend(v105, "hmf_isEmpty") & 1) == 0)
          {
            __int16 v95 = (void *)MEMORY[0x230FBD990]();
            int v96 = val;
            HMFGetOSLogHandle();
            id v97 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v98 = HMFGetLogIdentifier();
              *(_DWORD *)uint64_t v158 = 138543618;
              id v159 = v98;
              __int16 v160 = 2112;
              *(void *)long long v161 = v105;
              _os_log_impl(&dword_22F52A000, v97, OS_LOG_TYPE_DEBUG, "%{public}@Executing matter natural lighting actions: %@", v158, 0x16u);
            }
            dispatch_group_enter(group);
            long long v99 = [(HMDHome *)v96 executeMatterNaturalLightingActions:v105];
            v124[0] = MEMORY[0x263EF8330];
            v124[1] = 3221225472;
            v124[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_30;
            v124[3] = &unk_264A2F670;
            void v124[4] = v96;
            id v126 = buf;
            id v125 = group;
            [v99 getResultWithCompletion:v124];

            id v66 = group;
          }
          uint64_t v100 = [(HMDHome *)val workQueue];
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_32;
          block[3] = &unk_264A2F698;
          id v121 = v114;
          id v123 = buf;
          id v122 = obj;
          dispatch_group_notify(v66, v100, block);

          _Block_object_dispose(buf, 8);
          goto LABEL_100;
        }
        uint64_t v117 = *(void *)v148;
        *(void *)&long long v23 = 138544386;
        long long v101 = v23;
        while (2)
        {
          uint64_t v118 = v22;
          uint64_t v24 = 0;
LABEL_23:
          if (*(void *)v148 != v117) {
            objc_enumerationMutation(obj);
          }
          id v25 = *(void **)(*((void *)&v147 + 1) + 8 * v24);
          objc_msgSend(v25, "configureWithHome:", val, v101);
          id v26 = v25;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v27 = v26;
          }
          else {
            id v27 = 0;
          }
          id v28 = v27;

          if (v28)
          {
            id v29 = [v28 characteristic];
            __int16 v30 = [v28 targetValue];
            id v31 = [v29 authorizationData];
            __int16 v32 = +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:v29 value:v30 authorizationData:v31 type:1];

            if (v32)
            {
              [v116 addObject:v32];
              [v113 setObject:v28 forKey:v32];
              goto LABEL_70;
            }
          }
          id v33 = v26;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v34 = v33;
          }
          else {
            id v34 = 0;
          }
          id v29 = v34;

          BOOL v35 = [v29 lightProfile];
          __int16 v32 = v35;
          if (v35)
          {
            if ([v35 supportsCHIP]
              && [v32 isNaturalLightingSupported])
            {
              [v105 addObject:v29];
              goto LABEL_70;
            }
            id v36 = [v29 writeRequestForTransitionStartWithLightProfile:v32 startDate:v112 type:1];
            if (v36)
            {
              [v108 setObject:v29 forKey:v36];
              [v116 addObject:v36];
            }
            else
            {
              __int16 v42 = (void *)MEMORY[0x230FBD990]();
              uint64_t v43 = val;
              HMFGetOSLogHandle();
              uint64_t v44 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                unint64_t v45 = HMFGetLogIdentifier();
                *(_DWORD *)uint64_t v158 = 138543618;
                id v159 = v45;
                __int16 v160 = 2112;
                *(void *)long long v161 = v29;
                _os_log_impl(&dword_22F52A000, v44, OS_LOG_TYPE_ERROR, "%{public}@Failed to create characteristic write request for natural lighting action: %@", v158, 0x16u);
              }
              id v36 = 0;
            }
LABEL_69:

LABEL_70:
            if (v118 == ++v24)
            {
              uint64_t v22 = [obj countByEnumeratingWithState:&v147 objects:v166 count:16];
              if (!v22) {
                goto LABEL_72;
              }
              continue;
            }
            goto LABEL_23;
          }
          break;
        }
        if (v29)
        {
          unsigned int v37 = (void *)MEMORY[0x230FBD990]();
          BOOL v38 = val;
          HMFGetOSLogHandle();
          id v39 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            __int16 v40 = HMFGetLogIdentifier();
            *(_DWORD *)uint64_t v158 = 138543618;
            id v159 = v40;
            __int16 v160 = 2112;
            *(void *)long long v161 = v29;
            _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_ERROR, "%{public}@Skipping executing natural lighting action, missing light profile: %@", v158, 0x16u);
          }
          uint64_t v41 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
          id v36 = *(void **)(*(void *)&buf[8] + 40);
          *(void *)(*(void *)&buf[8] + 40) = v41;
          goto LABEL_69;
        }
        id v46 = v33;
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          __int16 v47 = v46;
        }
        else {
          __int16 v47 = 0;
        }
        id v48 = v47;
        id v109 = v46;

        if (v48)
        {
          __int16 v49 = [v48 convertedCharacteristicWriteRequests];
          id v50 = v49;
          if (v49)
          {
            id v36 = [v49 residualAction];

            uint64_t v111 = [v50 characteristicWriteRequests];
            if (!v36)
            {
LABEL_58:

              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v111 = 0;
            id v36 = v46;
          }
          [v36 setEncodePlaybackArchiveForExecution:1];
          goto LABEL_58;
        }
        uint64_t v111 = 0;
        id v36 = 0;
LABEL_59:
        objc_initWeak(&location, val);
        if ([v111 count])
        {
          dispatch_group_enter(group);
          uint64_t v51 = (void *)MEMORY[0x230FBD990]();
          long long v52 = val;
          HMFGetOSLogHandle();
          long long v53 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            id v54 = (id)objc_claimAutoreleasedReturnValue();
            long long v156 = 0uLL;
            long long v55 = [v114 identifier];

            if (v55)
            {
              id v56 = [v114 identifier];
              [v56 getUUIDBytes:&v156];
            }
            else
            {
              long long v156 = *MEMORY[0x263F42690];
            }
            long long v157 = v156;
            uint64_t v57 = [v111 count];
            *(_DWORD *)uint64_t v158 = v101;
            id v159 = v54;
            __int16 v160 = 1042;
            *(_DWORD *)long long v161 = 16;
            *(_WORD *)&v161[4] = 2098;
            *(void *)&v161[6] = &v157;
            __int16 v162 = 2114;
            long long v163 = val;
            __int16 v164 = 2048;
            uint64_t v165 = v57;
            _os_log_impl(&dword_22F52A000, v53, OS_LOG_TYPE_INFO, "%{public}@Executing write requests for request identifier %{public,uuid_t}.16P from home: %{public}@ count: %lu for media actions", v158, 0x30u);
          }
          uint64_t v58 = [v114 source];
          __int16 v59 = [v114 identifier];
          uint64_t v60 = [v114 qualityOfService];
          v140[0] = MEMORY[0x263EF8330];
          v140[1] = 3221225472;
          v140[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke;
          v140[3] = &unk_264A2F5A8;
          id v141 = v107;
          objc_copyWeak(&v145, &location);
          id v61 = v111;
          id v142 = v61;
          uint64_t v144 = buf;
          uint64_t v143 = group;
          [(HMDHome *)v52 writeCharacteristicValues:v61 source:v58 identifier:v59 transport:v102 qualityOfService:v60 withCompletionHandler:v140];

          objc_destroyWeak(&v145);
        }
        uint64_t v62 = [v114 clientName];
        uint64_t v63 = (void *)v62;
        id v64 = @"Unknown";
        if (v62) {
          id v64 = (__CFString *)v62;
        }
        id v65 = v64;

        dispatch_group_enter(group);
        v135[0] = MEMORY[0x263EF8330];
        v135[1] = 3221225472;
        v135[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_25;
        v135[3] = &unk_264A2F5F8;
        id v136 = v107;
        objc_copyWeak(&v139, &location);
        uint64_t v138 = buf;
        long long v137 = group;
        [v109 executeWithSource:v103 clientName:v65 completionHandler:v135];

        objc_destroyWeak(&v139);
        objc_destroyWeak(&location);

        goto LABEL_69;
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        id v85 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v85;
        _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to validate actions", buf, 0xCu);
      }
      id v86 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      [v114 respondWithError:v86];

LABEL_100:
    }
    else
    {
      char v77 = (void *)MEMORY[0x230FBD990]();
      __int16 v78 = self;
      char v79 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        uint64_t v80 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v80;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v114;
        _os_log_impl(&dword_22F52A000, v79, OS_LOG_TYPE_ERROR, "%{public}@Invalid actions payload: %@", buf, 0x16u);
      }
      uint64_t v112 = [MEMORY[0x263F087E8] hmErrorWithCode:22];
      [v114 respondWithError:v112];
    }
  }
  else
  {
    long long v73 = (void *)MEMORY[0x230FBD990]();
    long long v74 = self;
    long long v75 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      __int16 v76 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v76;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v114;
      _os_log_impl(&dword_22F52A000, v75, OS_LOG_TYPE_ERROR, "%{public}@No Actions in message:(%@)", buf, 0x16u);
    }
    uint64_t v112 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v114 respondWithError:v112];
  }
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2;
  block[3] = &unk_264A2F580;
  objc_copyWeak(&v17, (id *)(a1 + 64));
  id v13 = v5;
  id v14 = *(id *)(a1 + 40);
  id v15 = v6;
  long long v11 = *(_OWORD *)(a1 + 48);
  id v8 = (id)v11;
  long long v16 = v11;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);

  objc_destroyWeak(&v17);
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_25(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_26;
  block[3] = &unk_264A2F5D0;
  objc_copyWeak(&v11, (id *)(a1 + 56));
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v7;
  long long v10 = v7;
  id v6 = v3;
  dispatch_async(v4, block);

  objc_destroyWeak(&v11);
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_28(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v7 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_29;
  block[3] = &unk_264A2F620;
  objc_copyWeak(&v19, (id *)(a1 + 80));
  id v13 = v5;
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 48);
  id v16 = v6;
  id v17 = *(id *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  id v8 = (id)v11;
  long long v18 = v11;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);

  objc_destroyWeak(&v19);
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_30(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  long long v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v10 = HMFGetLogIdentifier();
    int v14 = 138543874;
    id v15 = v10;
    __int16 v16 = 2112;
    id v17 = v5;
    __int16 v18 = 2112;
    id v19 = v6;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Finished execution of all matter natural lighting actions with response: %@ error: %@", (uint8_t *)&v14, 0x20u);
  }
  if (v6)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v13 = *(void *)(v11 + 40);
    id v12 = (id *)(v11 + 40);
    if (!v13) {
      objc_storeStrong(v12, a3);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_32(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) responseHandler];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) responseHandler];
    (*((void (**)(id, void, void))v3 + 2))(v3, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), 0);
  }
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_29(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  id v3 = *(id *)(a1 + 32);
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  obuint64_t j = *(id *)(a1 + 40);
  uint64_t v41 = [obj countByEnumeratingWithState:&v44 objects:v54 count:16];
  if (v41)
  {
    uint64_t v40 = *(void *)v45;
    id v37 = WeakRetained;
    do
    {
      for (uint64_t i = 0; i != v41; ++i)
      {
        if (*(void *)v45 != v40) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v44 + 1) + 8 * i);
        id v6 = [*(id *)(a1 + 48) objectForKey:v5];
        long long v7 = v6;
        if (v6)
        {
          id v8 = *(void **)(a1 + 56);
          uint64_t v9 = [v6 isNaturalLightingEnabled];
          id v43 = 0;
          char v10 = objc_msgSend(v8, "hmd_isValidResponseForWriteRequest:naturalLightingEnabled:error:", v5, v9, &v43);
          id v11 = v43;
          id v12 = (void *)MEMORY[0x230FBD990]();
          id v13 = WeakRetained;
          int v14 = HMFGetOSLogHandle();
          id v15 = v14;
          if (v10)
          {
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              __int16 v16 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543618;
              __int16 v49 = v16;
              __int16 v50 = 2112;
              uint64_t v51 = v7;
              id v17 = v15;
              os_log_type_t v18 = OS_LOG_TYPE_INFO;
              id v19 = "%{public}@Successfully executed natural lighting action: %@";
              uint32_t v20 = 22;
              goto LABEL_15;
            }
          }
          else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            __int16 v16 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543874;
            __int16 v49 = v16;
            __int16 v50 = 2112;
            uint64_t v51 = v7;
            __int16 v52 = 2112;
            id v53 = v11;
            id v17 = v15;
            os_log_type_t v18 = OS_LOG_TYPE_ERROR;
            id v19 = "%{public}@Failed to execute natural lighting action %@:%@";
            uint32_t v20 = 32;
LABEL_15:
            _os_log_impl(&dword_22F52A000, v17, v18, v19, buf, v20);
          }
          if (v3) {
            goto LABEL_24;
          }
          goto LABEL_22;
        }
        id v39 = v3;
        dispatch_group_t v21 = [*(id *)(a1 + 64) objectForKey:v5];
        uint64_t v22 = *(void **)(a1 + 56);
        long long v23 = [v5 characteristic];
        id v42 = 0;
        uint64_t v24 = objc_msgSend(v22, "hmd_valueOfCharacteristic:error:", v23, &v42);
        id v11 = v42;

        id v25 = (void *)MEMORY[0x230FBD990]();
        id v26 = WeakRetained;
        id v27 = HMFGetOSLogHandle();
        id v28 = v27;
        if (v24)
        {
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_INFO)) {
            goto LABEL_21;
          }
          id v29 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          __int16 v49 = v29;
          __int16 v50 = 2112;
          uint64_t v51 = v21;
          __int16 v30 = v28;
          os_log_type_t v31 = OS_LOG_TYPE_INFO;
          __int16 v32 = "%{public}@Successfully executed characteristic write action: %@";
          uint32_t v33 = 22;
        }
        else
        {
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
            goto LABEL_21;
          }
          id v29 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543874;
          __int16 v49 = v29;
          __int16 v50 = 2112;
          uint64_t v51 = v21;
          __int16 v52 = 2112;
          id v53 = v11;
          __int16 v30 = v28;
          os_log_type_t v31 = OS_LOG_TYPE_ERROR;
          __int16 v32 = "%{public}@Failed to execute characteristic write action %@:%@";
          uint32_t v33 = 32;
        }
        _os_log_impl(&dword_22F52A000, v30, v31, v32, buf, v33);

        id WeakRetained = v37;
LABEL_21:

        id v3 = v39;
        if (v39) {
          goto LABEL_24;
        }
LABEL_22:
        if (v11) {
          id v3 = v11;
        }
LABEL_24:
      }
      uint64_t v41 = [obj countByEnumeratingWithState:&v44 objects:v54 count:16];
    }
    while (v41);
  }

  if (v3)
  {
    uint64_t v34 = *(void *)(*(void *)(a1 + 80) + 8);
    uint64_t v36 = *(void *)(v34 + 40);
    BOOL v35 = (id *)(v34 + 40);
    if (!v36) {
      objc_storeStrong(v35, v3);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_26(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (*(void *)(a1 + 32))
  {
    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = WeakRetained;
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = HMFGetLogIdentifier();
      uint64_t v7 = *(void *)(a1 + 32);
      int v11 = 138543618;
      id v12 = v6;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute action with error: %@", (uint8_t *)&v11, 0x16u);
    }
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v10 = *(void *)(v8 + 40);
    uint64_t v9 = (id *)(v8 + 40);
    if (!v10) {
      objc_storeStrong(v9, *(id *)(a1 + 32));
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v69 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  id v3 = *(id *)(v1 + 32);
  id v38 = WeakRetained;
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = MEMORY[0x230FBD990]();
    id v6 = WeakRetained;
    uint64_t v7 = (void *)v5;
    id v8 = v6;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v57 = v10;
      __int16 v58 = 2112;
      __int16 v59 = v4;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute write requests for converted media action with error: %@", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v28 = [*(id *)(v1 + 40) count];
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    id v12 = *(id *)(v1 + 48);
    uint64_t v32 = [v12 countByEnumeratingWithState:&v52 objects:v68 count:16];
    if (!v32)
    {

      id v4 = 0;
      id v27 = 0;
      goto LABEL_38;
    }
    uint64_t v43 = 0;
    id v4 = 0;
    obuint64_t j = v12;
    uint64_t v30 = *(void *)v53;
    uint64_t v31 = v1;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v53 != v30) {
          objc_enumerationMutation(obj);
        }
        uint64_t v33 = v13;
        id v39 = *(void **)(*((void *)&v52 + 1) + 8 * v13);
        uint64_t v14 = objc_msgSend(*(id *)(v1 + 48), "hmf_dictionaryForKey:", v28);
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        id v36 = v14;
        uint64_t v35 = [v36 countByEnumeratingWithState:&v48 objects:v67 count:16];
        if (v35)
        {
          uint64_t v34 = *(void *)v49;
          do
          {
            uint64_t v15 = 0;
            do
            {
              if (*(void *)v49 != v34) {
                objc_enumerationMutation(v36);
              }
              uint64_t v37 = v15;
              uint64_t v40 = *(void *)(*((void *)&v48 + 1) + 8 * v15);
              __int16 v16 = objc_msgSend(v36, "hmf_dictionaryForKey:");
              long long v44 = 0u;
              long long v45 = 0u;
              long long v46 = 0u;
              long long v47 = 0u;
              id v17 = v16;
              uint64_t v42 = [v17 countByEnumeratingWithState:&v44 objects:v66 count:16];
              if (v42)
              {
                uint64_t v41 = *(void *)v45;
                do
                {
                  for (uint64_t i = 0; i != v42; ++i)
                  {
                    if (*(void *)v45 != v41) {
                      objc_enumerationMutation(v17);
                    }
                    uint64_t v19 = *(void *)(*((void *)&v44 + 1) + 8 * i);
                    uint32_t v20 = objc_msgSend(v17, "hmf_dictionaryForKey:", v19);
                    dispatch_group_t v21 = objc_msgSend(v20, "hmf_dataForKey:", @"kCharacteristicErrorDataKey");
                    if (v21)
                    {
                      uint64_t v22 = [MEMORY[0x263F08928] unarchivedObjectOfClass:objc_opt_class() fromData:v21 error:0];

                      long long v23 = (void *)MEMORY[0x230FBD990]();
                      id v24 = WeakRetained;
                      id v25 = HMFGetOSLogHandle();
                      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                      {
                        id v26 = HMFGetLogIdentifier();
                        *(_DWORD *)buf = 138544386;
                        uint64_t v57 = v26;
                        __int16 v58 = 2112;
                        __int16 v59 = v39;
                        __int16 v60 = 2112;
                        uint64_t v61 = v40;
                        __int16 v62 = 2112;
                        uint64_t v63 = v19;
                        __int16 v64 = 2112;
                        uint64_t v65 = v22;
                        _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute write requests for %@/%@/%@ with error: %@", buf, 0x34u);

                        id WeakRetained = v38;
                      }
                      ++v43;

                      id v4 = (void *)v22;
                    }
                  }
                  uint64_t v42 = [v17 countByEnumeratingWithState:&v44 objects:v66 count:16];
                }
                while (v42);
              }

              uint64_t v15 = v37 + 1;
            }
            while (v37 + 1 != v35);
            uint64_t v35 = [v36 countByEnumeratingWithState:&v48 objects:v67 count:16];
          }
          while (v35);
        }

        uint64_t v13 = v33 + 1;
        uint64_t v1 = v31;
      }
      while (v33 + 1 != v32);
      uint64_t v32 = [obj countByEnumeratingWithState:&v52 objects:v68 count:16];
    }
    while (v32);

    id v27 = 0;
    if (!v28 || v28 != v43) {
      goto LABEL_38;
    }
    if (!v4) {
      goto LABEL_6;
    }
  }
  uint64_t v11 = *(void *)(*(void *)(v1 + 64) + 8);
  if (!*(void *)(v11 + 40))
  {
    id v27 = v4;
    id v4 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v27;
    id WeakRetained = v38;
LABEL_38:

    id v4 = v27;
    goto LABEL_39;
  }
LABEL_6:
  id WeakRetained = v38;
LABEL_39:
  dispatch_group_leave(*(dispatch_group_t *)(v1 + 56));
}

@end