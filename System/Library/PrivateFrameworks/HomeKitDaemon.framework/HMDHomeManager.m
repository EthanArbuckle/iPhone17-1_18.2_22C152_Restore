@interface HMDHomeManager
+ (BOOL)areWeAllowingHomeKitToRunWithoutCloudKitForHH2;
+ (BOOL)doesSaveReasonAffectHomeManager:(id)a3;
+ (BOOL)doesSaveReasonAffectOnlyLocalData:(id)a3;
+ (BOOL)doesSaveReasonNotAffectLocalData:(id)a3;
+ (BOOL)doesSaveReasonRequireForceSyncToWatch:(id)a3;
+ (BOOL)shouldIgnoreExpectedConfigurationVersionUpdateForReason:(id)a3;
+ (BOOL)shouldIncrementGenerationCounterForReason:(id)a3;
+ (id)_findDuplicateUserModelsWithContext:(id)a3;
+ (id)_getIntentGroupClientIdentifierSalt;
+ (id)accountHandleForOwner;
+ (id)allowedClassesForAccessAllowedWhenLockedArchive;
+ (id)convertSaveReasonToTransationReason:(id)a3;
+ (id)createIdentifierSalt:(id)a3 deviceSpecific:(BOOL)a4;
+ (id)deriveIntentGroupIdentifierFromBaseUUID:(id)a3;
+ (id)emptyModelObjectWithChangeType:(unint64_t)a3 homeManagerUUID:(id)a4;
+ (id)getAccessoryCacheForIdentifier:(id)a3;
+ (id)getAllBackingStoreObjects:(int64_t)a3 primaryHomeUUID:(id)a4 cloudZone:(id)a5 appData:(id)a6;
+ (id)getContainersToCleanUp;
+ (id)getUniqueDeviceIdSalt;
+ (id)logCategory;
+ (id)remotePeerDeviceAddress:(id)a3;
+ (id)saltForDeviceSpecificIdentifier;
+ (id)setupCoreDataUsingBackingStore:(id)a3;
+ (void)_eraseAllAccessoryKeysAndIdentifiers;
+ (void)makeSureHomeManagerExistInWorkingStore:(id)a3;
+ (void)relaunchHomedDueToResetConfigurationWithDelay:(double)a3;
+ (void)removeAccessoryCacheForIdentifier:(id)a3;
+ (void)saveAccessoryCache:(id)a3 forIdentifier:(id)a4;
- (BOOL)_associateAccessories:(id)a3 withHomes:(id)a4;
- (BOOL)_capabilitiesAreSupported:(id)a3;
- (BOOL)_configureHomes:(id)a3 uncommittedTransactions:(id)a4;
- (BOOL)_configureHomesImpl:(id)a3 uncommittedTransactions:(id)a4;
- (BOOL)_findAnyAccessoryWithIdentities:(id)a3 inAccessoryServers:(id)a4;
- (BOOL)_handleAccessoryDiagnosticStateQueryWithResponse:(id)a3 hasAdditionalRequest:(BOOL)a4 error:(id)a5 completion:(id)a6;
- (BOOL)_isAutoAcceptMetadataPresentForHome:(id)a3 owner:(id)a4;
- (BOOL)_isMetadataExpiredForHomeAwaitingAutoAccept:(id)a3;
- (BOOL)_redirectAppDataRequestToResidentWithMessage:(id)a3;
- (BOOL)_removeAndAddKeyPair:(id)a3 userName:(id)a4 eraseReason:(unint64_t)a5;
- (BOOL)_removeLegacyHomeArchive:(id *)a3;
- (BOOL)_setPrimaryHome:(id)a3 idsDataSync:(BOOL)a4;
- (BOOL)_shouldDecodeMessage:(id)a3 error:(id *)a4;
- (BOOL)_shouldHandleHomeDataSync:(id)a3 remoteHome:(id)a4 sourceDeviceVersion:(id)a5;
- (BOOL)_shouldNotifyClientsAboutGenerationCounterUpdate;
- (BOOL)_submitSpamReportToIDS:(id)a3;
- (BOOL)_updateAccessAllowedWhenLockedToLocalStore:(BOOL)a3 managedObjectContext:(id)a4;
- (BOOL)_updateAccessoriesConfigured;
- (BOOL)_updateIncomingInvitesPresent;
- (BOOL)_updatePreferencesForConfiguredHomes;
- (BOOL)_updatePreferencesForCurrentHome;
- (BOOL)_zonesFetched;
- (BOOL)accountActive;
- (BOOL)accountStatusFailedDueToNetworkFailure;
- (BOOL)accountStatusIsAuthenticated;
- (BOOL)addHH2KeyInResponsePayload:(id)a3 invitation:(id)a4;
- (BOOL)areThereAnyTTSUSessionsOngoing;
- (BOOL)assistantIdentifierChanged;
- (BOOL)backOffOperationInProgress;
- (BOOL)badCDPState;
- (BOOL)cacheUseAllowed;
- (BOOL)checkConflictInHomeNamespaceWithName:(id)a3 options:(unint64_t)a4 namespaceUUID:(id)a5 error:(id *)a6;
- (BOOL)cloudkitAccountStatusDetermined;
- (BOOL)companionReachable;
- (BOOL)daemonHasLoadedSceneGraph;
- (BOOL)dataSyncInProgressWithState:(unint64_t *)a3 withMessage:(id)a4;
- (BOOL)demoFinalized;
- (BOOL)deviceAccountHasSettled;
- (BOOL)deviceAddressBelongsToResidentOfCurrentHome:(id)a3;
- (BOOL)didCreateAddACWGKeysOperation;
- (BOOL)expectingInvitationResponseForIdentifier:(id)a3;
- (BOOL)fetchAndRemoveNextBatchOfZonesFromDatabase:(id)a3;
- (BOOL)firstCloudKitImportComplete;
- (BOOL)forceFetchHomeManagerZone;
- (BOOL)getOrCreateControllerPublicKey:(id *)a3 controllerUsername:(id *)a4 error:(id *)a5;
- (BOOL)hasAccessoryBrowsingBeenRequested;
- (BOOL)hasClientRequestedMediaAccessoryControl:(id)a3;
- (BOOL)hasFinishedStartingUp;
- (BOOL)hasHAPAccessoryInAnyHome;
- (BOOL)hasLoadedData;
- (BOOL)haveQueuedUpdateAccessories;
- (BOOL)homeDataLoadedFromArchive;
- (BOOL)ignoreFirstTimeReachabilityChanged;
- (BOOL)initialPCSStatusFetchCompleted;
- (BOOL)isAccessAllowedWhenLocked;
- (BOOL)isActive;
- (BOOL)isCloudAccountActive;
- (BOOL)isCurrentDeviceResident;
- (BOOL)isCurrentResidentDeviceRunningThreadNetwork:(id)a3;
- (BOOL)isDataSyncInProgress;
- (BOOL)isDataSyncInProgressWithMessage:(id)a3;
- (BOOL)isHH2MigrationInProgress;
- (BOOL)isHomeManagerZoneFirstFetch;
- (BOOL)isInitialReplay:(id)a3;
- (BOOL)isNetworkConnectionAvailable;
- (BOOL)isOwnerPingPending;
- (BOOL)isPairedWithWatch;
- (BOOL)isResidentCapable;
- (BOOL)isResidentEnabled;
- (BOOL)isSignedIntoiCloud;
- (BOOL)isStartThreadNetworkInProgress;
- (BOOL)lastAnswerForShouldCloudSyncData;
- (BOOL)legacyZoneHasRecordsAvailable;
- (BOOL)missingHomeDataRecord;
- (BOOL)needToCleanUpKeys;
- (BOOL)pcsEnabled;
- (BOOL)pendingInviteExistsForSenderOfMessage:(id)a3;
- (BOOL)postSyncDataUpdatedNotification;
- (BOOL)setLocalPairingIdentity:(id)a3 error:(id *)a4;
- (BOOL)shouldAcceptInvitationPayload:(id)a3 error:(id *)a4;
- (BOOL)shouldAcceptInvitationWithHomeName:(id)a3;
- (BOOL)shouldClearDeviceSetupFollowUp;
- (BOOL)shouldDropNotification;
- (BOOL)speakersAreConfigured;
- (BOOL)speakersAreConfiguredInOwnedHomes;
- (BOOL)startupHasCompleted;
- (BOOL)uploadHomeDataToCloud;
- (BOOL)uploadMetadataToCloud;
- (BOOL)uploadToCloudIsPending;
- (BOOL)userWithMergeIdIsMemberOfAHome:(id)a3;
- (BOOL)zoneFetchFailed;
- (HAPKeyStore)hapKeyStore;
- (HMDAccessoryBrowser)accessoryBrowserInternal;
- (HMDAccessoryFirmwareUpdateManager)accessoryFirmwareUpdateManager;
- (HMDAccessorySetupCoordinator)accessorySetupCoordinator;
- (HMDAccessorySetupManager)accessorySetupManager;
- (HMDAccountRegistry)accountRegistry;
- (HMDAppleAccessoryPairingController)legacyAccessoryPairingController;
- (HMDAppleAccountManager)appleAccountManager;
- (HMDAppleMediaAccessoryDiagnosticInfoController)appleMediaAccessoryDiagnosticInfoController;
- (HMDApplicationData)appData;
- (HMDAssistantGather)gatherer;
- (HMDBackgroundOperationManager)bgOpsManager;
- (HMDBackingStore)backingStore;
- (HMDBiomeEventManager)biomeEventManager;
- (HMDBiomeLogEventObserver)biomeLogEventObserver;
- (HMDBonjourBrowserHelper)bonjourBrowser;
- (HMDCHIPDataSource)chipDataSource;
- (HMDCHIPXPCListener)chipXPCListener;
- (HMDCameraClipsQuotaMessenger)cameraClipsQuotaMessenger;
- (HMDCameraRecordingLoadBalancer)cameraLoadBalancer;
- (HMDCapabilitiesController)capabilitiesController;
- (HMDClientConnection)clientConnection;
- (HMDCloudAccount)cloudAccount;
- (HMDCloudDataSyncStateFilter)cloudDataSyncStateFilter;
- (HMDCompanionManager)companionManager;
- (HMDCompositeSettingsControllerManager)compositeSettingsControllerManager;
- (HMDCurrentAccessorySetupMetricDispatcher)currentAccessorySetupMetricDispatcher;
- (HMDDatabase)defaultDatabase;
- (HMDDevice)companionDevice;
- (HMDDeviceSetupConfiguringController)configuringStateController;
- (HMDDuetPredictionSubscriber)duetSubscriber;
- (HMDFMFHandler)fmfHandler;
- (HMDHH2FrameworkSwitch)hh2FrameworkSwitch;
- (HMDHomeManager)init;
- (HMDHomeManager)initWithMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 metricsManager:(id)a10 configuringStateController:(id)a11 diagnosticInfoController:(id)a12 currentAccessorySetupMetricDispatcher:(id)a13 uncommittedTransactions:(id)a14;
- (HMDHomeManager)initWithMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 metricsManager:(id)a10 darwinNotificationProvider:(id)a11 notificationCenter:(id)a12 backingStoreFactory:(id)a13 wifiManagerFactory:(id)a14 appleAccountManager:(id)a15 remoteAccountManager:(id)a16 userDefaults:(id)a17 biomeEventManager:(id)a18 logEventSubmitter:(id)a19 widgetConfigurationReader:(id)a20 configuringStateController:(id)a21 diagnosticInfoController:(id)a22 currentAccessorySetupMetricDispatcher:(id)a23 uncommittedTransactions:(id)a24;
- (HMDHomeManagerHH2SharedUserLastSyncManager)sharedUserLastSyncManager;
- (HMDHomeManagerObjectChangeHandler)homeManagerObjectChangeHandler;
- (HMDHomeManagerObjectLookup)lookup;
- (HMDHomeManagerXPCClientConnectionsManager)connectionsManager;
- (HMDHomeOwnerCloudShareManager)homeOwnerCloudShareManager;
- (HMDHomeSharedUserCloudShareManager)homeSharedUserCloudShareManager;
- (HMDIDSFirewallManager)idsFirewallManager;
- (HMDIDSInvitationManager)idsInvitationManager;
- (HMDIDSServerBag)idsServerBag;
- (HMDIdentityRegistry)identityRegistry;
- (HMDLastEventStoreController)lastEventStoreController;
- (HMDLocation)locationHandler;
- (HMDLoggingEventForwarder)loggingMemoryEventForwarder;
- (HMDMTSXPCServer)mtsXPCServer;
- (HMDMatterSoftwareUpdateProviderDelegate)matterSoftwareUpdateProviderDelegate;
- (HMDMatterXPCListener)matterXPCListener;
- (HMDMediaGroupParticipantLocalDataStorage)mediaGroupParticipantDataLocalStorage;
- (HMDMemoryUtilizationTracker)memoryTracker;
- (HMDMessageDispatcher)messageDispatcher;
- (HMDMessageFilterChain)msgFilterChain;
- (HMDMetricsManager)metricsManager;
- (HMDMicroLocationLogEventObserver)microLocationLogEventObserver;
- (HMDMicroLocationManager)microLocationManager;
- (HMDMobileAssetManager)mobileAssetManager;
- (HMDMultiUserSettingsMetricsEventDispatcher)multiUserSettingsMetricEventDispatcher;
- (HMDMultiUserStatusController)multiUserStatusController;
- (HMDNameValidator)nameValidator;
- (HMDPairedSync)pairedSync;
- (HMDPowerManager)powerManager;
- (HMDRemoteAccountManager)remoteAccountManager;
- (HMDRemoteEventRouterAssertionController)eventRouterAssertionController;
- (HMDResidentMesh)residentMesh;
- (HMDSelfRemovalWatchdog)selfRemovalWatchdog;
- (HMDSharedUserPrivateSettingsManager)sharedUserPrivateSettingsManager;
- (HMDSiriEndpointOnboardingManager)siriEndpointOnboardingManager;
- (HMDSiriEndpointSettingsSyncManager)siriEndPointSettingsSyncManager;
- (HMDSoftwareUpdateManager)softwareUpdateManager;
- (HMDSyncOperationManager)syncManager;
- (HMDUserCloudShareManager)userCloudShareManager;
- (HMDUserDeviceCapabilitiesRequestManager)userDeviceCapabilitiesRequestManager;
- (HMDWatchManager)watchManager;
- (HMDWidgetConfigurationReader)widgetConfigurationReader;
- (HMDWidgetTimelineRefresher)widgetTimelineRefresher;
- (HMDXPCEventRouterServer)eventRouterXPCServer;
- (HMDarwinNotificationProvider)darwinNotificationProvider;
- (HMEDelegatingEventRouter)registrationForwardingEventRouter;
- (HMELastEventStore)lastEventStore;
- (HMEMemoryEventBus)memoryEventRouter;
- (HMFActivity)setupActivity;
- (HMFAsyncContext)workContext;
- (HMFBoolean)overrideCurrentHomeUUIDToNil;
- (HMFFuture)startupCompleted;
- (HMFNetMonitor)cloudReachabilityMonitor;
- (HMFNetMonitor)reachabilityMonitor;
- (HMFPromise)startupPromise;
- (HMFTimer)debounceHomesUpdateTimer;
- (HMFTimer)debounceRegenerateAssistantSyncDataTimer;
- (HMFTimer)memoryMonitorLogEventTimer;
- (HMFTimer)periodicMobileCatalogUpdateTimer;
- (HMFTimer)remoteAccessHealthMonitorTimer;
- (HMFTimer)watchPushDelayTimer;
- (HMMLogEventSubmitting)logEventSubmitter;
- (NSArray)homes;
- (NSDate)bonjourBrowserHelperLastCompletionDate;
- (NSDictionary)demoAccessories;
- (NSMapTable)homeUUIDsByWalletKeyAssertionXPCConnection;
- (NSMapTable)watchSyncRetryContextByRetryTimer;
- (NSMutableArray)accessorySetupMetricDispatchers;
- (NSMutableArray)cloudZones;
- (NSMutableArray)deviceSetupSessions;
- (NSMutableArray)incomingInvitations;
- (NSMutableArray)pendingResponsesForAccessoryFinder;
- (NSMutableArray)uuidsOfRemovedHomes;
- (NSMutableDictionary)associatedRemotePeers;
- (NSMutableDictionary)associatedWatchPeers;
- (NSMutableDictionary)currentHomeConfigurations;
- (NSMutableDictionary)pendingDataSyncAcks;
- (NSMutableDictionary)pendingFragmentationStream;
- (NSMutableDictionary)pendingRemoteSessions;
- (NSMutableDictionary)pendingSharedUserAcceptLogEventBuilders;
- (NSMutableDictionary)userPushCacheMap;
- (NSMutableDictionary)watchSyncRetryContextBySyncIdentifier;
- (NSMutableDictionary)watchSyncStateMap;
- (NSMutableSet)dialogCancelationContexts;
- (NSMutableSet)fullSyncedWatchPeers;
- (NSMutableSet)mergeIDsOfUsersOfRemovedSharedHomes;
- (NSMutableSet)pendingHomesBeingRemoved;
- (NSMutableSet)pendingResidentSetupSessions;
- (NSMutableSet)unassociatedRemotePeers;
- (NSMutableSet)unprocessedOperationModelIdentifiers;
- (NSNotificationCenter)notificationCenter;
- (NSSet)homeUUIDsWithAutoAddWalletKeySuppressed;
- (NSString)currentEventSource;
- (NSUUID)currentHomeUUID;
- (NSUUID)currentHomeUUIDOverride;
- (NSUUID)dataTag;
- (NSUUID)lastRemovedCurrentAccessoryUUID;
- (NSUUID)primaryHomeUUID;
- (NSUUID)uuid;
- (NSUserDefaults)userDefaults;
- (OS_dispatch_queue)clientConnectionQueue;
- (OS_dispatch_queue)workQueue;
- (OS_dispatch_source)accessoryFinderTimer;
- (OS_dispatch_source)cloudOperationRetryTimer;
- (double)setupEndTimestamp;
- (double)setupStartTimestamp;
- (id)__computedCurrentHomeUUID;
- (id)__generateAssistantTeamIdentifier;
- (id)__homeContainingInviteWithIDSInvitationIdentifier:(id)a3;
- (id)__homeContainingInviteWithInvitationIdentifier:(id)a3;
- (id)_accessoryOfCurrentDevice;
- (id)_accountHandleFromMetadataForHomeAwaitingAutoAccept:(id)a3;
- (id)_appleMediaAccessoryOfCurrentDevice;
- (id)_checkActionSetNameConflict:(id)a3 withNamespaceUUIDs:(id)a4;
- (id)_checkNameConflict:(id)a3 withNamespaceUUIDs:(id)a4;
- (id)_compressHomeData:(id)a3;
- (id)_computedCurrentHomeUUID;
- (id)_currentHome;
- (id)_dataForPersistentStoreIncrementingGeneration:(BOOL)a3 reason:(id)a4;
- (id)_decodeDiagnosticInfoFromLocalResponse:(id)a3;
- (id)_destinationFromMessage:(id)a3;
- (id)_deviceForIdentifier:(id)a3;
- (id)_diagnosticInfoFromRemoteResponse:(id)a3;
- (id)_dumpHomeManagerData;
- (id)_filterAccessories:(id)a3 inHome:(id)a4;
- (id)_filterAccessories:(id)a3 withIdentifiers:(id)a4;
- (id)_findHomeModel:(id)a3;
- (id)_getAssistantHashingData;
- (id)_getListOfUsersToPushMetadataChangesTo;
- (id)_getRequestedState:(id)a3 activity:(id)a4;
- (id)_homeFromEventIdentifier:(id)a3;
- (id)_homeFromIncomingInvitationWithIdentifier:(id)a3 homeUUID:(id)a4;
- (id)_homeFromIncomingInvitationWithIdentifier:(id)a3 invitationIdentifier:(id)a4 homeUUID:(id)a5;
- (id)_homeWithAssistantIdentifier:(id)a3;
- (id)_homeWithName:(id)a3;
- (id)_homeWithUUID:(id)a3;
- (id)_homeWithUniqueIdentifier:(id)a3 forClientIdentifierSalt:(id)a4;
- (id)_homeWithZoneID:(id)a3;
- (id)_homesWithName:(id)a3;
- (id)_legacyContainer;
- (id)_legacyHomeAcceptedZoneIDFromHomeUUID:(id)a3;
- (id)_legacyHomeZoneIDFromHomeUUID:(id)a3;
- (id)_loadCloudTransactionForRemoteHome:(id)a3 localHome:(id)a4 cachedHome:(id)a5 version:(int64_t)a6;
- (id)_mediaRouteIdentifierForAccessory:(id)a3;
- (id)_prepareAnswerForRequestedCapabilities:(id)a3;
- (id)_prepareDataForDevicesOnSameAccountForHome:(id)a3 remoteGateway:(BOOL)a4 isAtLeastV4:(BOOL)a5;
- (id)_prepareDataForDevicesOnSameAccountForHome:(id)a3 remoteGateway:(BOOL)a4 isAtLeastV4:(BOOL)a5 migrateToHH2:(BOOL)a6;
- (id)_prepareHomesVersionDict;
- (id)_processTestModeConfiguration:(id)a3;
- (id)_processTestModeCurrentHomeOverride:(id)a3;
- (id)_processTestModeHomeAccessControlOverride:(id)a3;
- (id)_processTestModeHomeLocationStatusOverride:(id)a3;
- (id)_processTestModeSkipHH2MigrationOverride:(id)a3;
- (id)_processTestModeUpdateHomeLocation:(id)a3;
- (id)_remotePeers;
- (id)_remoteUserForMessage:(id)a3;
- (id)_runtimeState;
- (id)_scrubRequestedCapabilities:(id)a3 fromMessage:(id)a4;
- (id)_statusPayloadForMessage:(id)a3;
- (id)_trackIncomingInvitationFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6 invitationState:(int64_t)a7 error:(id *)a8;
- (id)_userPushCachedGetDeviceForUser:(id)a3;
- (id)_zoneInformationWithUUID:(id)a3;
- (id)accessAllowedWhenLockedSettingFileName;
- (id)accessoriesMatchingIdentifier:(id)a3;
- (id)accessorySetupMetricDispatcherForAccessoryUUID:(id)a3;
- (id)accessorySetupMetricDispatchersForHome:(id)a3;
- (id)accessoryWithHomeUUID:(id)a3 accessoryUUID:(id)a4;
- (id)accessoryWithIDSIdentifier:(id)a3;
- (id)accessoryWithUUID:(id)a3;
- (id)addName:(id)a3 namespace:(id)a4;
- (id)backingStoreObjects:(int64_t)a3;
- (id)createCloudDatabaseAndPerformInitialSync:(id)a3;
- (id)createCurrentAccessoryCapabilities;
- (id)createCurrentResidentCapabilities;
- (id)currentAccessory;
- (id)currentAccessoryHome;
- (id)currentAccessoryHomeUUID;
- (id)currentAccessoryUUID;
- (id)currentMediaGroupsAggregateCunsumer;
- (id)delegatingRouter:(id)a3 filteredTopics:(id)a4 forRouter:(id)a5;
- (id)delegatingRouter:(id)a3 upstreamTopicsFor:(id)a4;
- (id)deleteLocalZone:(id)a3 localDatabase:(id)a4 containerID:(id)a5;
- (id)destinationIdentifierForMediaSystem:(id)a3 role:(unint64_t)a4;
- (id)eventRouterServerDiagnosticInfo;
- (id)expandedTopicsForTopics:(id)a3;
- (id)filterHomes:(id)a3 isSPIEntitled:(BOOL)a4;
- (id)firstSetupSessionIdentifierOutputStartTime:(double *)a3;
- (id)generateDataForSharedHomeModel:(id)a3;
- (id)generatePayloadFromHome:(id)a3 forAdmin:(BOOL)a4 user:(id)a5 supportedFeatures:(id)a6;
- (id)getOrCreateLocalPairingIdentity:(id *)a3;
- (id)hapMetadataForBiomeLogEventObserver:(id)a3;
- (id)hapMetadataForMicroLocationLogEventObserver:(id)a3;
- (id)hh1UserIDsForCurrentUserForHomeUUID:(id)a3;
- (id)hh2ControllerKey;
- (id)homeUUIDsWithAutoAddWalletKeySuppressedSync;
- (id)homeUserFromMessage:(id)a3 home:(id)a4;
- (id)homesToSendForNonSPIClients;
- (id)hubAccessoriesWithHomeUUID:(id)a3 forSiriEndpointProfileMessageHandler:(id)a4;
- (id)identifiersOfAccessories:(id)a3;
- (id)identifiersOfAccessoriesForHome:(id)a3;
- (id)languageListProviderForHomeUUID:(id)a3;
- (id)mediaSystemForAppleMediaAccessory:(id)a3;
- (id)messageDestination;
- (id)mkfContext;
- (id)modelObjectWithChangeType:(unint64_t)a3;
- (id)modelObjectWithChangeType:(unint64_t)a3 version:(int64_t)a4;
- (id)multiUserSettingsForMultiUserSettingsMetricsEventDispatcherDataSource;
- (id)needsOnboardingForHomeUUID:(id)a3 accessoryUUID:(id)a4;
- (id)pairedAccessories;
- (id)queryDeviceCapabilities:(id)a3;
- (id)removeName:(id)a3 namespace:(id)a4;
- (id)replaceName:(id)a3 withNewName:(id)a4 inNamespaces:(id)a5;
- (id)settingsControllerForAccessoryUUID:(id)a3 homeUUID:(id)a4;
- (id)sharedUserAcceptEventBuilderForHomeUuid:(id)a3;
- (id)topicNameForMediaGroupParticipantDataLocalStorage:(id)a3;
- (id)updateMediaRouteIDOfDeviceWithIdentifier:(id)a3;
- (id)updatedUUIDForDiscoveredUnpairedAccessory:(id)a3;
- (id)upstreamTopicsForTopic:(id)a3;
- (id)userUUIDForMessage:(id)a3 homeUUID:(id)a4;
- (id)userWithMergeID:(id)a3;
- (id)validateHomeName:(id)a3;
- (id)wifiManagerFactory;
- (id)writeMigrationRecordWithShouldSkipKeyRollOperations:(BOOL)a3 forceMigrationFailureForTesting:(BOOL)a4 migrateFromTestDirectory:(BOOL)a5 dryRun:(BOOL)a6;
- (int)generationCounterToken;
- (int64_t)numberOfAccessoryWithNewFirmwareAvailable;
- (int64_t)numberOfPendingIncomingInvitation;
- (int64_t)recoveryVersion;
- (int64_t)residentEnabledState;
- (uint64_t)__shouldScanAndUpdateDeviceInfoForDevice:(void *)a1;
- (unint64_t)assistantGenerationCounter;
- (unint64_t)cloudOperationRetryCount;
- (unint64_t)generationCounter;
- (unint64_t)homeDatabaseSize;
- (unint64_t)homepodSetupRetryCount;
- (unint64_t)numHomes;
- (unint64_t)siriSyncNotificationTime;
- (unint64_t)status;
- (unint64_t)statusForMessage:(id)a3;
- (unsigned)_nextTransactionIdentifier;
- (unsigned)nextRequestTransactionIdentifier;
- (void)__accountAddedDevice:(id)a3;
- (void)__accountRegistryAddedAccount:(id)a3;
- (void)__accountRegistryRemovedAccount:(id)a3;
- (void)__accountRemovedDevice:(id)a3;
- (void)__checkForBootTimeLogout;
- (void)__handleAppleAccountUpdated:(id)a3;
- (void)__handleAppleAccountUpdated:(id)a3 previousAccount:(id)a4;
- (void)__handleCompanionUpdated:(id)a3;
- (void)__handleDeviceCapabilitiesUpdated:(id)a3;
- (void)__handleDeviceUpdatedNotification:(id)a3;
- (void)__handleProcessMemoryPressureEvent:(id)a3;
- (void)__handleRequestFetchHomeConfiguration:(id)a3;
- (void)__handleUpdatedCurrentDevice:(id)a3;
- (void)__sendUpdateRequestToAdminForInvitation:(id)a3 homeUUID:(id)a4 invitationState:(int64_t)a5 authStatus:(id)a6 reverseShareInvitation:(id)a7 logEventBuilder:(id)a8;
- (void)__setLastSyncedAssistantConfigurationVersion:(unint64_t)a3;
- (void)__startupFirewallRuleManagerForMessage:(id)a3 completion:(id)a4;
- (void)_acceptHomeInviteFromAccount:(id)a3 message:(id)a4 trackInvite:(BOOL)a5;
- (void)_accessoriesAreLocallyReachableOnTransientDevice:(BOOL)a3 forHome:(id)a4;
- (void)_addCloudZone:(id)a3 ownerName:(id)a4;
- (void)_addCurrentResidentDeviceToHomes:(id)a3;
- (void)_addIncomingInvitation:(id)a3;
- (void)_addPendingDataSyncAcksForUser:(id)a3 forHome:(id)a4;
- (void)_assistantSyncDataChanged:(id)a3;
- (void)_auditDuplicatePreviouslyAddedAccessory:(id)a3;
- (void)_auditIDSSentInvitations;
- (void)_auditKeychainEntries;
- (void)_autoAcceptAllPendingReinvitations;
- (void)_autoAcceptInviteIfReinvitation:(id)a3;
- (void)_cancelAccessoryFinderTimer;
- (void)_changePrimaryHome:(id)a3;
- (void)_checkAndInformCompanionDevice;
- (void)_checkForRemotePeers;
- (void)_checkForRemotePeersAndRegisterForRemoteNotifications:(BOOL)a3;
- (void)_checkForSelfRemoval;
- (void)_dumpToLog:(id)a3 withState:(id)a4;
- (void)_electCompanionForRemoteAccess:(id)a3;
- (void)_electRemoteAccessDeviceForHome:(id)a3 retryCount:(unint64_t)a4;
- (void)_electRemoteAccessPeerForHome:(id)a3;
- (void)_electRemoteGatewayForHomesAfterReachabilityChanges;
- (void)_eraseConfiguration:(BOOL)a3 completionHandler:(id)a4;
- (void)_eraseLocalHomeConfiguration;
- (void)_eraseLocalHomeConfigurationAfterSignOut;
- (void)_eraseLocalHomeConfigurationAndDeleteMetadata:(BOOL)a3 completionQueue:(id)a4 completion:(id)a5;
- (void)_eraseLocalHomeConfigurationAndDeleteMetadata:(BOOL)a3 reason:(unint64_t)a4 completionQueue:(id)a5 completion:(id)a6;
- (void)_eraseLocalHomeConfigurationWithReason:(unint64_t)a3;
- (void)_eraseLocalMetadata;
- (void)_findRemotePeerContainingAccessories:(id)a3 forHome:(id)a4;
- (void)_fragmentationStream:(id)a3 didCloseWithError:(id)a4;
- (void)_fragmentationStream:(id)a3 didReceiveData:(id)a4 transactionIdentifier:(unsigned __int16)a5 error:(id)a6;
- (void)_generateAssistantSyncDataAndIncrementVersion:(BOOL)a3 requestSync:(BOOL)a4 urgent:(BOOL)a5 completion:(id)a6;
- (void)_getRuntimeStateUpdateForHomeManager:(BOOL)a3 includeMediaAccessorySessionState:(BOOL)a4 options:(unint64_t)a5 includeResidentDeviceState:(BOOL)a6 completion:(id)a7;
- (void)_handleAccessAllowedWhenLockedRequest:(id)a3;
- (void)_handleAccessHomeInvite:(id)a3;
- (void)_handleAccessHomeInviteFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6 messageResponseHandler:(id)a7;
- (void)_handleAccessoryDiagnosticQueryWithOptions:(unint64_t)a3 accessory:(id)a4 accessoryUUID:(id)a5 mediaRouteID:(id)a6 additionalFetchKeys:(id)a7 remoteMessageTimeout:(double)a8 remoteMessageRestriction:(unint64_t)a9 completion:(id)a10;
- (void)_handleAccessoryDiagnosticStateQuery:(id)a3;
- (void)_handleAddRemoteAccessRequest:(id)a3;
- (void)_handleAddedAccessory:(id)a3;
- (void)_handleAppleMediaAccessoryDeviceInfoRequestMessage:(id)a3;
- (void)_handleAppleMediaResidentCoreDataChanges:(id)a3;
- (void)_handleAreYouAtHome:(id)a3;
- (void)_handleAssistantSyncDataRequest:(id)a3;
- (void)_handleClearMobileAssetsInfoRequest:(id)a3;
- (void)_handleCompanionKeysSync:(id)a3;
- (void)_handleConnectivityInfoRequest:(id)a3;
- (void)_handleContactStoreChanged;
- (void)_handleCurrentAccessoryAddedNotification:(id)a3;
- (void)_handleCurrentAccessoryRemovedNotification:(id)a3;
- (void)_handleCurrentHomeChanged:(id)a3;
- (void)_handleDeviceNotification:(id)a3;
- (void)_handleDeviceSetupConfiguringStateQuery:(id)a3;
- (void)_handleDeviceSetupSessionClose:(id)a3;
- (void)_handleDeviceSetupSessionOpen:(id)a3;
- (void)_handleDiagnosticInfo:(id)a3;
- (void)_handleDismissBulletinRequest:(id)a3;
- (void)_handleDismissDialogRequest:(id)a3;
- (void)_handleDoYouSeeUnpairedAccessories:(id)a3;
- (void)_handleDumpDatabase:(id)a3;
- (void)_handleDumpState:(id)a3;
- (void)_handleElectDeviceForIDSSession:(id)a3;
- (void)_handleEnableResidentForThisDeviceRequest:(id)a3;
- (void)_handleEnableUARPPacketCaptureRequest:(id)a3;
- (void)_handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest:(id)a3;
- (void)_handleFetchDevicesMessage:(id)a3;
- (void)_handleFetchSetupMode:(id)a3;
- (void)_handleForwardedSharedUserInvitationAcceptance:(id)a3;
- (void)_handleGetTLVForJSON:(id)a3;
- (void)_handleHH2SentinelZonePresent:(id)a3;
- (void)_handleHomeDataSync:(id)a3;
- (void)_handleHomeManagerSyncWalletKeysPassSerialNumbersMessage:(id)a3;
- (void)_handleHomeUtilCommandWalletMessage:(id)a3;
- (void)_handleHomeUtilRemoteMessageRequest:(id)a3;
- (void)_handleHomesConfigSync:(id)a3;
- (void)_handleKeyRoll:(id)a3;
- (void)_handleMetadataSync:(id)a3;
- (void)_handleNetworkFirewallAddOverridesRequest:(id)a3;
- (void)_handleNetworkFirewallDumpCloudRecordsRequest:(id)a3;
- (void)_handleNetworkFirewallDumpLocalRulesRequest:(id)a3;
- (void)_handleNetworkFirewallDumpPairedMetadataRequest:(id)a3;
- (void)_handleNetworkFirewallFetchCloudChangesRequest:(id)a3;
- (void)_handleNetworkFirewallRemoveLocalRulesRequest:(id)a3;
- (void)_handleNetworkFirewallRemoveOverridesRequest:(id)a3;
- (void)_handleNetworkMismatchInfo:(id)a3;
- (void)_handlePairingIdentityRequest:(id)a3;
- (void)_handlePing:(id)a3;
- (void)_handlePrepareForDiagnosticExtension:(id)a3;
- (void)_handleQueryHomeNamespace:(id)a3;
- (void)_handleQueryMetadata:(id)a3;
- (void)_handleQueryVersionInformation:(id)a3;
- (void)_handleQueryiCloudSwitchState:(id)a3;
- (void)_handleRemoteSessionTornDownNotification:(id)a3;
- (void)_handleRemoveAccount:(id)a3;
- (void)_handleRemoveAllHomeKitPairingIdentities:(id)a3;
- (void)_handleRemoveAllUsersFromAccessories:(id)a3;
- (void)_handleRemoveHomeOperation:(id)a3 message:(id)a4;
- (void)_handleRequestAddHome:(id)a3;
- (void)_handleRequestFetchHomeConfiguration:(id)a3;
- (void)_handleRequestIsUserUsingHomeKit:(id)a3;
- (void)_handleRequestRemoveHome:(id)a3;
- (void)_handleRequestRuntimeStateUpdate:(id)a3;
- (void)_handleRequestSetPrimaryHome:(id)a3;
- (void)_handleRequestToCancelHomeInvitation:(id)a3 saveReason:(id)a4;
- (void)_handleRequestToUpdateHomeInvitationFromInviter:(id)a3;
- (void)_handleRequestToUpdateHomeInvitationFromLocalUser:(id)a3;
- (void)_handleResetConfiguration:(id)a3;
- (void)_handleResetHome:(id)a3;
- (void)_handleResolveAccount:(id)a3;
- (void)_handleRetrieveVendorIdentifier:(id)a3;
- (void)_handleSetAppData:(id)a3;
- (void)_handleSetMetadata:(id)a3;
- (void)_handleSharedUserMovedToHH2:(id)a3;
- (void)_handleSignificantTimeChange;
- (void)_handleSwitchSetupMode:(id)a3;
- (void)_handleSysdiagnoseRequest:(id)a3;
- (void)_handleTestHH2Migration:(id)a3;
- (void)_handleTestModeConfigRequest:(id)a3;
- (void)_handleUpdateMobileAssetsRequest:(id)a3;
- (void)_handleUpdatedCurrentDevice:(id)a3;
- (void)_handleUpdateiCloudSwitchState:(id)a3;
- (void)_handleUserRemoved:(id)a3;
- (void)_incrementAssistantGenerationCounter;
- (void)_loadMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 uncommittedTransactions:(id)a10 backingStoreFactory:(id)a11 reloadData:(BOOL)a12;
- (void)_logState:(id)a3 key:(id)a4 indent:(id)a5;
- (void)_maybeConfigureDuplicateUserModelChecker;
- (void)_maybeCreateLegacyHomeAcceptedZone:(id)a3;
- (void)_maybeMessageOwnersOfFrameworkSwitch;
- (void)_migrateAccessAllowedWhenLockedSettingIfNeeded;
- (void)_migrateUniqueIdentifierPrefsIfNeeded;
- (void)_monitorMemoryUsage;
- (void)_monitorReachability;
- (void)_notifyClientsOfUpdatedStatus;
- (void)_notifyCurrentHomeUpdated:(id)a3 isLocalUpdate:(BOOL)a4;
- (void)_notifyMetadata:(id)a3 limitToSPIClients:(BOOL)a4 message:(id)a5 invokeResponseHandler:(BOOL)a6;
- (void)_notifyMetricsManagerOfConfigurationChange;
- (void)_notifyXPCClientsOfHomeConfigurationChange;
- (void)_notifyXPCClientsOfUpdatedDevices;
- (void)_postIncomingInvitationStateChangedNotification:(id)a3 newInvitationState:(int64_t)a4;
- (void)_postPreferencesChangedNotification;
- (void)_processAnyPendingRequestsForRemoteAccess:(BOOL)a3;
- (void)_processLocalRequestToUpdateHomeInvitation:(id)a3 newState:(int64_t)a4 authStatus:(id)a5 logEventBuilder:(id)a6;
- (void)_processRequestToUpdateHomeInvitation:(id)a3 invitationState:(int64_t)a4 homeUUID:(id)a5 authStatus:(id)a6 messageName:(id)a7 message:(id)a8;
- (void)_processSharedHomeModel:(id)a3 message:(id)a4;
- (void)_pruneExpiredHomesAwaitingAutoAccept;
- (void)_pruneExpiredHomesNotYetMigrated;
- (void)_pruneExpiredIncomingInvitations;
- (void)_pushChangesForHH2SharedUserLastSync:(id)a3 completion:(id)a4;
- (void)_pushMetadataChangesToUsers;
- (void)_pushUserRemovedForHome:(id)a3;
- (void)_queryLegacyHomeAndAcceptedZoneExists:(id)a3 completion:(id)a4;
- (void)_reachabilityMonitorChanged:(BOOL)a3;
- (void)_readAccessAllowedWhenLockedSettingFromLocalStore;
- (void)_registerForAppleMediaMessages;
- (void)_registerForConfiguringStateMessages;
- (void)_registerForFrameworkSwitch;
- (void)_registerForMessages;
- (void)_remoteAccessHealthMonitorTimerDidFire:(id)a3;
- (void)_removeAccessAllowedWhenLockedFileFromDisk;
- (void)_removeAllUsersOfHome:(id)a3;
- (void)_removeCloudZone:(id)a3 updateHomeManager:(BOOL)a4;
- (void)_removeConfigurationVersionForHome:(id)a3;
- (void)_removeCurrentResidentDeviceFromHomes:(id)a3;
- (void)_removeFromAssociatedPeers:(id)a3 home:(id)a4;
- (void)_removeFromUnassociatedPeers:(id)a3 home:(id)a4;
- (void)_removeHome:(id)a3 withMessage:(id)a4 saveToStore:(BOOL)a5 notifyUsers:(BOOL)a6 shouldRemovePairings:(BOOL)a7;
- (void)_removeIncomingInvitation:(id)a3;
- (void)_removePendingDataSyncAcksForUser:(id)a3 forHome:(id)a4;
- (void)_resetSiriSyncNotification;
- (void)_saveAccessAllowedWhenLockedToLocalStore:(BOOL)a3 message:(id)a4;
- (void)_saveAssistantHashingData:(id)a3;
- (void)_scheduleNextCheck;
- (void)_scheduleSendHomeDataToAllWatches;
- (void)_sendAcceptOrDeclineRequestToAdminForIDSInvitationIdentifier:(id)a3 homeInviteUUID:(id)a4 payload:(id)a5 invitationState:(int64_t)a6 responseHandler:(id)a7;
- (void)_sendCurrentHomeToWatch:(id)a3;
- (void)_sendFragmentedMessage:(id)a3 messageIndex:(unint64_t)a4 messageIdentity:(id)a5 userID:(id)a6 destination:(id)a7 completionHandler:(id)a8;
- (void)_sendHomeDataToAllWatchesMigrateToHH2:(BOOL)a3 completionHandler:(id)a4;
- (void)_sendHomeDataToAllWatchesWithCompletion:(id)a3;
- (void)_sendHomeDataToWatch:(id)a3 completionHandler:(id)a4;
- (void)_sendHomeDataToWatch:(id)a3 migrateToHH2:(BOOL)a4 completionHandler:(id)a5;
- (void)_sendOwnerPingMessageToAccountHandle:(id)a3;
- (void)_sendUserAdded:(id)a3 destination:(id)a4 toHome:(id)a5;
- (void)_sendUserRemoved:(id)a3 fromHome:(id)a4 pairingUsername:(id)a5 pushToCloud:(BOOL)a6 completionHandler:(id)a7;
- (void)_setAppDataWithMessage:(id)a3;
- (void)_setAssistantHashingData:(id)a3;
- (void)_setAssistantSyncRequest:(id)a3;
- (void)_setHomeConfigurationKey:(id)a3 value:(void *)a4;
- (void)_setHomeConfigurationKey:(id)a3 value:(void *)a4 applicationIdentifier:(__CFString *)a5;
- (void)_setHomekitAssistantConfigurationVersion:(unint64_t)a3;
- (void)_setHomekitAssistantNumEntities:(unint64_t)a3;
- (void)_setUniqueDeviceIdSalt:(id)a3;
- (void)_signpostAssistantSyncDataNotification;
- (void)_signpostAssistantSyncDataRequestHandled;
- (void)_startAccessoryFinderTimer;
- (void)_startAccessoryFinderTimerExpired;
- (void)_startScanningForAccessories:(id)a3;
- (void)_stopTrackingRemovedHomeUserMergeId:(id)a3;
- (void)_teardownRemoteAccessForHome:(id)a3;
- (void)_teardownRemoteAccessForHomeCommon:(id)a3 isCompanion:(BOOL)a4;
- (void)_teardownRemoteAccessForHomeThroughCompanion:(id)a3;
- (void)_trackRemovedHomeUserMergeId:(id)a3;
- (void)_updateCurrentHomeIfNecessary;
- (void)_updateGenerationCounterWithReason:(id)a3 sourceUUID:(id)a4 shouldNotifyClients:(BOOL)a5;
- (void)_updateHome:(id)a3 configurationVersion:(int64_t)a4;
- (void)_updateHomesAboutNetworkConnectivity:(BOOL)a3;
- (void)_updateHomesDiscoveredBonjourServicesMetrics;
- (void)_updatePreferencesAndPostNotificationIfNecessary;
- (void)_updateResidentEnabledOnThisDevice:(BOOL)a3 forceNotify:(BOOL)a4 message:(id)a5;
- (void)_updateUserPushCachedForUser:(id)a3 device:(id)a4;
- (void)accessoriesAreLocallyReachableOnTransientDevice:(BOOL)a3 forHome:(id)a4;
- (void)accessoryBrowserDidFindNewAccessory;
- (void)accountAvailabilityChanged:(id)a3;
- (void)addAccessorySetupMetricDispatcher:(id)a3;
- (void)addHome:(id)a3;
- (void)addIssuerKeyToMessagePayload:(id)a3 invitation:(id)a4 completion:(id)a5;
- (void)addSharedUserAcceptEventBuilder:(id)a3 forHomeUuid:(id)a4;
- (void)addTransactionAfterPush:(id)a3;
- (void)addWalletKeyWithHomeUUID:(id)a3 reason:(id)a4;
- (void)applyOnboardingSelections:(id)a3 accessoryUUID:(id)a4 homeUUID:(id)a5 completion:(id)a6;
- (void)archiveServerToken:(id)a3;
- (void)assistantSyncDataChanged:(id)a3;
- (void)atHomeLevelChanged:(int64_t)a3 formerLevel:(int64_t)a4 home:(id)a5;
- (void)auditAccessForUsersForHome:(id)a3;
- (void)auditDuplicatePreviouslyAddedAccessory:(id)a3;
- (void)autoAddWalletKeysOncePerDeviceSetup;
- (void)checkAndPushMetadataToUser:(id)a3 destination:(id)a4 userInfo:(id)a5;
- (void)checkForRemotePeers;
- (void)cleanupLocalConfiguration;
- (void)cloudHomeSettingsUpdated:(id)a3;
- (void)configureForWalletKey;
- (void)configureRetailDemoModeWithKeyPair:(id)a3 controllerName:(id)a4 demoAccessories:(id)a5 completionHandler:(id)a6;
- (void)dataSyncInProgressUpdatedNotification:(id)a3;
- (void)dealloc;
- (void)deleteAllZonesFromContainer:(id)a3;
- (void)deleteZonesFromLegacyAndCameraContainers;
- (void)deregisterForSignificantTimeChangeNotification;
- (void)determineDataSyncSateForHH2:(BOOL *)a3 homeManagerDataSyncState:(unint64_t *)a4 homeManagerStatus:(unint64_t *)a5;
- (void)dismissBulletinOnAllMyTransientDevicesWithContext:(id)a3;
- (void)dismissDialogOnAllMyTransientDevicesWithContext:(id)a3 selection:(BOOL)a4;
- (void)dmHandleRequestAddHome:(id)a3;
- (void)dmHandleRequestRemoveHome:(id)a3;
- (void)dmKickClients;
- (void)dm_transactionObjectRemoved:(id)a3 message:(id)a4;
- (void)dm_transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5;
- (void)electDeviceForHH1User:(id)a3 destination:(id)a4 deviceCapabilities:(id)a5 queue:(id)a6 completionHandler:(id)a7;
- (void)electDeviceForUser:(id)a3 destination:(id)a4 deviceCapabilities:(id)a5 queue:(id)a6 completionHandler:(id)a7;
- (void)electDeviceForUser:(id)a3 destination:(id)a4 deviceCapabilities:(id)a5 responseTimeout:(double)a6 queue:(id)a7 completionHandler:(id)a8;
- (void)enableUserListeningHistoryForHomeUUID:(id)a3 accessoryUUID:(id)a4 userUUID:(id)a5;
- (void)fetchAndRemoveAllZonesFromDatabase:(id)a3;
- (void)fetchAndUpdatePCSStatus;
- (void)fetchSetupDiagnosticStateForAccessoryUUID:(id)a3 completion:(id)a4;
- (void)fetchSetupDiagnosticStateWithOptions:(unint64_t)a3 accessoryUUID:(id)a4 remoteMessageTimeout:(double)a5 remoteMessageRestriction:(unint64_t)a6 completion:(id)a7;
- (void)finalizeRetailDemoModeWithAllowEditing:(BOOL)a3 completionHandler:(id)a4;
- (void)findAccessoriesNotOnWiFiWithCurrentWiFi:(HMFWiFiNetworkInfo *)a3 completionHandler:(id)a4;
- (void)fragmentationStream:(id)a3 didCloseWithError:(id)a4;
- (void)fragmentationStream:(id)a3 didReceiveData:(id)a4 transactionIdentifier:(unsigned __int16)a5 error:(id)a6;
- (void)handleAcceptRequestForIDSInvitationWithIdentifier:(id)a3 homeUUID:(id)a4 payload:(id)a5 fromAddress:(id)a6 fromMergeID:(id)a7;
- (void)handleAutoAddWalletKeySupressionAssertionAcquireMessage:(id)a3;
- (void)handleAutoAddWalletKeySupressionAssertionReleaseMessage:(id)a3;
- (void)handleCancelRequestForIDSInvitationWithIdentifier:(id)a3;
- (void)handleCheckIsUsingProductionObjectModelMessage:(id)a3;
- (void)handleContactStoreChanged:(id)a3;
- (void)handleDeclineRequestForIDSInvitationWithIdentifier:(id)a3 fromAddress:(id)a4 homeUUID:(id)a5;
- (void)handleDeleteModelMessage:(id)a3;
- (void)handleDumpDatabaseMessage:(id)a3;
- (void)handleHomeCurrentDeviceResidentEligibleNotification:(id)a3;
- (void)handleMetadataDictionary:(id)a3 message:(id)a4;
- (void)handleReceivedIDSInviteFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6;
- (void)handleRemoteUserClientCloudShareRepairRequest:(id)a3;
- (void)handleRemoteUserClientCloudShareRequest:(id)a3;
- (void)handleRollPreferredHH2ControllerKeyMessage:(id)a3;
- (void)handleSiriSyncDataRequest:(id)a3;
- (void)handleVendorInfoUpdated:(id)a3;
- (void)handleXPCConnectionDeactivatedNotification:(id)a3;
- (void)hh2FirstCKImportFinished;
- (void)homeModelHomeDelete:(id)a3 message:(id)a4;
- (void)homeModelHomeUpdate:(id)a3 message:(id)a4;
- (void)idsServerBagDidUpdate:(id)a3;
- (void)initHomeManagerFrameworkNotify;
- (void)initHomeManagerStartup;
- (void)initalizeMediaGroupParticipantDataLocalStorage;
- (void)initializeHH2FrameworkSwitch;
- (void)invalidate;
- (void)mediaGroupParticipantLocalDataStorage:(id)a3 didChangeDestinationIdentifier:(id)a4 forDestinationControllerIdentifier:(id)a5;
- (void)migrateLocalHomeTheaterDataForCurrentAccessory:(id)a3 currentMediaSystem:(id)a4;
- (void)migrateLocalMediaGroupParticipantData;
- (void)migrateLocalStereoPairDataForCurrentMediaSystem:(id)a3;
- (void)migrateSharedUserFromIncomingInvitation:(id)a3;
- (void)multiUserStatusController:(id)a3 statusDidChange:(int64_t)a4;
- (void)networkMonitorIsReachable:(id)a3;
- (void)networkMonitorIsUnreachable:(id)a3;
- (void)notifyClientsOfUserSettingsChangeWithReason:(id)a3 sourceUUID:(id)a4;
- (void)notifyClientsResidentCapable:(BOOL)a3;
- (void)notifySPIClientsAboutAccessAllowedWhenLocked:(BOOL)a3;
- (void)performCleanupOnHH2Container;
- (void)performInitialGraphLoad:(id)a3;
- (void)pingDevice:(id)a3 secure:(BOOL)a4 restrictToLocalNetwork:(BOOL)a5 completionHandler:(id)a6;
- (void)postFinishSetupForCurrentAccessoryFollowUpIfNeeded;
- (void)prepareForDiagnosticExtension:(id)a3;
- (void)processAnyPendingRequestsForRemoteAccess;
- (void)processAppDataModelRemove:(id)a3 message:(id)a4;
- (void)processAppDataModelUpdate:(id)a3 message:(id)a4;
- (void)processCloudZoneModelAdd:(id)a3 message:(id)a4;
- (void)processCloudZoneModelRemoved:(id)a3 message:(id)a4;
- (void)processHomeManagerModelUpdate:(id)a3 message:(id)a4;
- (void)processHomeModelAdd:(id)a3 message:(id)a4;
- (void)processHomeModelRemoved:(id)a3 message:(id)a4;
- (void)processMetadataModel:(id)a3 message:(id)a4;
- (void)processRequestToUpdateHomeInvitation:(id)a3 invitationState:(int64_t)a4 homeUUID:(id)a5 authStatus:(id)a6 messageName:(id)a7 message:(id)a8;
- (void)processSharedHomeModelRemoved:(id)a3 message:(id)a4;
- (void)processSharedHomeModelUpdate:(id)a3 message:(id)a4;
- (void)processTransactionsFromHomeDataSync:(id)a3 accessories:(id)a4 version:(int64_t)a5 completion:(id)a6;
- (void)purgeAllRecordZones:(id)a3 fromDatabase:(id)a4 completionHandler:(id)a5;
- (void)purgeAllSharesFromZones:(id)a3 fromDatabase:(id)a4 dispatchGroup:(id)a5;
- (void)purgeShares:(id)a3 fromDatabase:(id)a4 completionHandler:(id)a5;
- (void)pushChangesForHH2SharedUserLastSync:(id)a3 completion:(id)a4;
- (void)pushMetadataToAllWatches;
- (void)receivedRemoteMessageOverTransportType:(int)a3 remoteMessageSenderContext:(id)a4;
- (void)registerForSignificantTimeChangeNotification;
- (void)registerNotificationsForPowerManagement;
- (void)removeAccessorySetupMetricDispatcherForAccessoryUUID:(id)a3;
- (void)removeAllHomeKitPairingIdentitiesAfterSignOut;
- (void)removeFromUnassociatedPeers:(id)a3 home:(id)a4;
- (void)removeHome:(id)a3;
- (void)removeHomeFromAwaitingAutoAcceptHomes:(id)a3;
- (void)removeHomeFromSharedHomesNotYetMigrated:(id)a3;
- (void)removeHomeWalletKeysExcludingSerialNumbers:(id)a3 flow:(id)a4;
- (void)removeSharedUserAcceptEventBuilderForHomeUuid:(id)a3;
- (void)requestAccessoryBrowsing;
- (void)resetHomeConfigForHH2:(BOOL)a3 message:(id)a4;
- (void)resetTTSUHH2SettingsMigrationKey;
- (void)runTransactionForAddHomeMessage:(id)a3 withInitialHomeObjects:(id)a4 homeManagerModel:(id)a5 homeManagerHomeModel:(id)a6 homeBackingStore:(id)a7 homeUUID:(id)a8 makeNewHomePrimaryHome:(BOOL)a9;
- (void)saveAssistantSyncDataPostedToWorkingStore;
- (void)saveAssociatedGroupDataForPostMigrationStagingWithCurrentAccessory:(id)a3;
- (void)scheduleAddACWGKeysOperationIfAllowed;
- (void)scheduleRemovalForHome:(id)a3 message:(id)a4 options:(id)a5;
- (void)sendFragmentedMessageForData:(id)a3 objectUUID:(id)a4 withMessageName:(id)a5 toUser:(id)a6 destination:(id)a7 completionHandler:(id)a8;
- (void)sendHomeDataToAllWatchesWithCompletion:(id)a3;
- (void)sendPairingIdentity:(id)a3 includePrivateKey:(BOOL)a4 requestMessage:(id)a5;
- (void)sendRequestForInvitation:(id)a3 homeUUID:(id)a4 payload:(id)a5 invitationState:(int64_t)a6 responseHandler:(id)a7;
- (void)sendSecureMessage:(id)a3 target:(id)a4 userID:(id)a5 destination:(id)a6 responseQueue:(id)a7 responseHandler:(id)a8;
- (void)sendUnsecureMessage:(id)a3 target:(id)a4 userID:(id)a5 responseQueue:(id)a6 responseHandler:(id)a7;
- (void)sendUserAdded:(id)a3 destination:(id)a4 toHome:(id)a5;
- (void)sendUserRemoved:(id)a3 fromHome:(id)a4 pairingUsername:(id)a5 pushToCloud:(BOOL)a6 completionHandler:(id)a7;
- (void)setAccessAllowedWhenLocked:(BOOL)a3;
- (void)setAccessoryBrowserInternal:(id)a3;
- (void)setAccessoryBrowsingRequested;
- (void)setAccessoryFinderTimer:(id)a3;
- (void)setAccountActive:(BOOL)a3;
- (void)setAccountStatusFailedDueToNetworkFailure:(BOOL)a3;
- (void)setAccountStatusIsAuthenticated:(BOOL)a3;
- (void)setAppData:(id)a3;
- (void)setAppDataWithMessage:(id)a3;
- (void)setAppleAccountManager:(id)a3;
- (void)setAssistantGenerationCounter:(unint64_t)a3;
- (void)setAssistantIdentifierChanged:(BOOL)a3;
- (void)setAssociatedRemotePeers:(id)a3;
- (void)setBackOffOperationInProgress:(BOOL)a3;
- (void)setBackingStore:(id)a3;
- (void)setBiomeEventManager:(id)a3;
- (void)setBiomeLogEventObserver:(id)a3;
- (void)setBonjourBrowser:(id)a3;
- (void)setBonjourBrowserHelperLastCompletionDate:(id)a3;
- (void)setCacheUseAllowed:(BOOL)a3;
- (void)setClientConnection:(id)a3;
- (void)setClientConnectionQueue:(id)a3;
- (void)setCloudDataSyncStateFilter:(id)a3;
- (void)setCloudOperationRetryCount:(unint64_t)a3;
- (void)setCloudOperationRetryTimer:(id)a3;
- (void)setCloudReachabilityMonitor:(id)a3;
- (void)setCloudZones:(id)a3;
- (void)setCloudkitAccountStatusDetermined:(BOOL)a3;
- (void)setCompanionReachable:(BOOL)a3;
- (void)setConfiguringStateController:(id)a3;
- (void)setCurrentAccessorySetupMetricDispatcher:(id)a3;
- (void)setCurrentHomeConfigurations:(id)a3;
- (void)setCurrentHomeUUID:(id)a3;
- (void)setCurrentHomeUUIDOverride:(id)a3;
- (void)setDataTag:(id)a3;
- (void)setDebounceHomesUpdateTimer:(id)a3;
- (void)setDefaultDatabase:(id)a3;
- (void)setDemoAccessories:(id)a3;
- (void)setDeviceAccountHasSettled:(BOOL)a3;
- (void)setDialogCancelationContexts:(id)a3;
- (void)setDidCreateAddACWGKeysOperation:(BOOL)a3;
- (void)setDuetSubscriber:(id)a3;
- (void)setEventRouterAssertionController:(id)a3;
- (void)setEventRouterXPCServer:(id)a3;
- (void)setFirstCloudKitImportComplete:(BOOL)a3;
- (void)setFmfHandler:(id)a3;
- (void)setForceFetchHomeManagerZone:(BOOL)a3;
- (void)setFullSyncedWatchPeers:(id)a3;
- (void)setGatherer:(id)a3;
- (void)setGenerationCounter:(unint64_t)a3;
- (void)setGenerationCounterToken:(int)a3;
- (void)setHapKeyStore:(id)a3;
- (void)setHasAccessoryBrowsingBeenRequested:(BOOL)a3;
- (void)setHasFinishedStartingUp:(BOOL)a3;
- (void)setHasLoadedData:(BOOL)a3;
- (void)setHaveQueuedUpdateAccessories:(BOOL)a3;
- (void)setHh2FrameworkSwitch:(id)a3;
- (void)setHh2MigrationInProgress:(BOOL)a3;
- (void)setHomeDataLoadedFromArchive:(BOOL)a3;
- (void)setHomeManagerZoneFirstFetch:(BOOL)a3;
- (void)setHomeOwnerCloudShareManager:(id)a3;
- (void)setHomePodsPresent:(BOOL)a3 inOwnedHomes:(BOOL)a4;
- (void)setHomeSharedUserCloudShareManager:(id)a3;
- (void)setHomepodSetupRetryCount:(unint64_t)a3;
- (void)setHomes:(id)a3;
- (void)setIdentityRegistry:(id)a3;
- (void)setIdsFirewallManager:(id)a3;
- (void)setIdsInvitationManager:(id)a3;
- (void)setIdsServerBag:(id)a3;
- (void)setIgnoreFirstTimeReachabilityChanged:(BOOL)a3;
- (void)setIncomingInvitations:(id)a3;
- (void)setInitialPCSStatusFetchCompleted:(BOOL)a3;
- (void)setIsOwnerPingPending:(BOOL)a3;
- (void)setLastAnswerForShouldCloudSyncData:(BOOL)a3;
- (void)setLastEventStore:(id)a3;
- (void)setLastEventStoreController:(id)a3;
- (void)setLastRemovedCurrentAccessoryUUID:(id)a3;
- (void)setLocationHandler:(id)a3;
- (void)setLogEventSubmitter:(id)a3;
- (void)setLoggingMemoryEventForwarder:(id)a3;
- (void)setMediaGroupParticipantDataLocalStorage:(id)a3;
- (void)setMemoryEventRouter:(id)a3;
- (void)setMemoryMonitorLogEventTimer:(id)a3;
- (void)setMessageDispatcher:(id)a3;
- (void)setMicroLocationLogEventObserver:(id)a3;
- (void)setMicroLocationManager:(id)a3;
- (void)setMissingHomeDataRecord:(BOOL)a3;
- (void)setMkfContext:(id)a3;
- (void)setMobileAssetManager:(id)a3;
- (void)setMsgFilterChain:(id)a3;
- (void)setNameValidator:(id)a3;
- (void)setNeedToCleanUpKeys:(BOOL)a3;
- (void)setNeedsOnboardingCompleteWitHomeUUID:(id)a3 accessoryUUID:(id)a4 completion:(id)a5;
- (void)setNotificationCenter:(id)a3;
- (void)setOverrideCurrentHomeUUIDToNil:(id)a3;
- (void)setPcsEnabled:(BOOL)a3;
- (void)setPendingDataSyncAcks:(id)a3;
- (void)setPendingFragmentationStream:(id)a3;
- (void)setPendingHomesBeingRemoved:(id)a3;
- (void)setPendingRemoteSessions:(id)a3;
- (void)setPendingResidentSetupSessions:(id)a3;
- (void)setPendingResponsesForAccessoryFinder:(id)a3;
- (void)setPendingSharedUserAcceptLogEventBuilders:(id)a3;
- (void)setPeriodicMobileCatalogUpdateTimer:(id)a3;
- (void)setPostSyncDataUpdatedNotification:(BOOL)a3;
- (void)setPowerManager:(id)a3;
- (void)setPrimaryHomeUUID:(id)a3;
- (void)setReachabilityMonitor:(id)a3;
- (void)setRecoveryVersion:(int64_t)a3;
- (void)setRegistrationForwardingEventRouter:(id)a3;
- (void)setRemoteAccessHealthMonitorTimer:(id)a3;
- (void)setResidentEnabledState:(int64_t)a3;
- (void)setResidentMesh:(id)a3;
- (void)setSelfRemovalWatchdog:(id)a3;
- (void)setSetupActivity:(id)a3;
- (void)setSetupEndTimestamp:(double)a3;
- (void)setSetupStartTimestamp:(double)a3;
- (void)setSharedUserLastSyncManager:(id)a3;
- (void)setSiriEndPointSettingsSyncManager:(id)a3;
- (void)setSiriSyncNotificationTime:(unint64_t)a3;
- (void)setSpeakersAreConfigured:(BOOL)a3;
- (void)setSpeakersAreConfiguredInOwnedHomes:(BOOL)a3;
- (void)setStartupCompleted:(id)a3;
- (void)setStartupHasCompleted:(BOOL)a3;
- (void)setStartupPromise:(id)a3;
- (void)setUnassociatedRemotePeers:(id)a3;
- (void)setUnprocessedOperationModelIdentifiers:(id)a3;
- (void)setUploadHomeDataToCloud:(BOOL)a3;
- (void)setUploadMetadataToCloud:(BOOL)a3;
- (void)setUploadToCloudIsPending:(BOOL)a3;
- (void)setUuidsOfRemovedHomes:(id)a3;
- (void)setWorkQueue:(id)a3;
- (void)setupSession:(id)a3 didCloseWithError:(id)a4;
- (void)setupSession:(id)a3 didReceiveAccessoryWithUUID:(id)a4;
- (void)startWithCompletionHandler:(id)a3;
- (void)syncWalletKeyPassSerialNumbersToWatch:(id)a3 withCompletion:(id)a4;
- (void)teardownRemoteAccessForHome:(id)a3;
- (void)timerDidFire:(id)a3;
- (void)transactionObjectRemoved:(id)a3 message:(id)a4;
- (void)transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5;
- (void)updateAccessoryModelsFromContext:(id)a3;
- (void)updateGenerationCounterWithReason:(id)a3 sourceUUID:(id)a4 shouldNotifyClients:(BOOL)a5;
- (void)updateHomeKitInUsePreferences;
- (void)updatePowerAssertion;
- (void)updateUserPushCachedForUser:(id)a3 device:(id)a4;
- (void)verifyCurrentDeviceResidentStatus;
- (void)waitForHH2SentinelZoneToBeRemoved;
- (void)writeAssistantCurrentHome:(id)a3;
@end

@implementation HMDHomeManager

- (void)findAccessoriesNotOnWiFiWithCurrentWiFi:(HMFWiFiNetworkInfo *)a3 completionHandler:(id)a4
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2686D95D0);
  MEMORY[0x270FA5388](v7 - 8);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _Block_copy(a4);
  v11 = (void *)swift_allocObject();
  v11[2] = a3;
  v11[3] = v10;
  v11[4] = self;
  uint64_t v12 = sub_2302DDE70();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
  v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = &unk_2686D8598;
  v13[5] = v11;
  v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = &unk_2686D8770;
  v14[5] = v13;
  v15 = a3;
  v16 = self;
  sub_22F6C83BC((uint64_t)v9, (uint64_t)&unk_2686D98D0, (uint64_t)v14);
  swift_release();
}

- (void)_handleSignificantTimeChange
{
  v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke;
  block[3] = &unk_264A2F7F8;
  block[4] = self;
  dispatch_async(v3, block);
}

void __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  v1 = [*(id *)(a1 + 32) homes];
  uint64_t v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v1);
        }
        v6 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        uint64_t v7 = [v6 workQueue];
        block[0] = MEMORY[0x263EF8330];
        block[1] = 3221225472;
        block[2] = __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke_2;
        block[3] = &unk_264A2F7F8;
        block[4] = v6;
        dispatch_async(v7, block);
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v3);
  }
}

uint64_t __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleSignificantTimeChange];
}

- (void)deregisterForSignificantTimeChangeNotification
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)MEMORY[0x230FBD990](self, a2);
  uint64_t v4 = self;
  v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = HMFGetLogIdentifier();
    int v8 = 138543362;
    long long v9 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEBUG, "%{public}@De-Registering for Significant time change event.", (uint8_t *)&v8, 0xCu);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, v4, @"SignificantTimeChangeNotification", 0);
}

- (void)registerForSignificantTimeChangeNotification
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)MEMORY[0x230FBD990](self, a2);
  uint64_t v4 = self;
  v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = HMFGetLogIdentifier();
    int v8 = 138543362;
    long long v9 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Registering for Significant time change event.", (uint8_t *)&v8, 0xCu);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, v4, (CFNotificationCallback)significantTimeDidChangeNotification, @"SignificantTimeChangeNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

- (void)_handleAppleMediaResidentCoreDataChanges:(id)a3
{
  id v4 = a3;
  v5 = [v4 object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    v6 = v5;
  }
  else {
    v6 = 0;
  }
  id v7 = v6;

  int v8 = +[HMDCoreData sharedInstance];
  int v9 = [v8 isRelatedContext:v7];

  if (v9)
  {
    uint64_t v10 = (void *)MEMORY[0x230FBD990]();
    long long v11 = [v4 userInfo];
    long long v12 = [v11 objectForKeyedSubscript:*MEMORY[0x263EFF018]];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      v13 = v12;
    }
    else {
      v13 = 0;
    }
    id v14 = v13;

    v15 = [v4 userInfo];
    v16 = [v15 objectForKeyedSubscript:*MEMORY[0x263EFF180]];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    id v18 = v17;

    uint64_t v23 = 0;
    v24 = &v23;
    uint64_t v25 = 0x2020000000;
    char v26 = 0;
    v19 = [v18 setByAddingObjectsFromSet:v14];
    v22[0] = MEMORY[0x263EF8330];
    v22[1] = 3221225472;
    v22[2] = __71__HMDHomeManager_AppleMedia___handleAppleMediaResidentCoreDataChanges___block_invoke;
    v22[3] = &unk_264A17D58;
    v22[4] = self;
    v22[5] = &v23;
    objc_msgSend(v19, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v22);

    if (*((unsigned char *)v24 + 24))
    {
      v20 = [(HMDHomeManager *)self workContext];
      v21[0] = MEMORY[0x263EF8330];
      v21[1] = 3221225472;
      v21[2] = __71__HMDHomeManager_AppleMedia___handleAppleMediaResidentCoreDataChanges___block_invoke_95;
      v21[3] = &unk_264A2F7F8;
      v21[4] = self;
      [v20 performBlock:v21];
    }
    _Block_object_dispose(&v23, 8);
  }
}

void __71__HMDHomeManager_AppleMedia___handleAppleMediaResidentCoreDataChanges___block_invoke(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v5 = a2;
  v6 = *(void **)(a1 + 32);
  id v7 = v5;
  int v8 = v7;
  if (v6)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    id v10 = v9;
    long long v11 = v10;
    if (v10)
    {
      v6 = [v10 castIfResident];
    }
    else
    {
      v6 = 0;
    }

    if (v6)
    {
      long long v12 = [v6 device];

      if (!v12)
      {
        v13 = [v6 appleMediaAccessory];
        id v14 = [v13 device];

        if (v14)
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
          *a3 = 1;
          v15 = (void *)MEMORY[0x230FBD990]();
          id v16 = *(id *)(a1 + 32);
          uint64_t v17 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            id v18 = HMFGetLogIdentifier();
            int v19 = 138543874;
            v20 = v18;
            __int16 v21 = 2112;
            v22 = v6;
            __int16 v23 = 2112;
            v24 = v13;
            _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Scheduling scan due to found resident with no device (%@) belonging to an apple media accessory with a device: %@", (uint8_t *)&v19, 0x20u);
          }
        }
      }
    }
  }
  else
  {
  }
}

void __71__HMDHomeManager_AppleMedia___handleAppleMediaResidentCoreDataChanges___block_invoke_95(uint64_t a1)
{
  v1 = *(void **)(a1 + 32);
  id v2 = [v1 workContext];
  [v1 updateAccessoryModelsFromContext:v2];
}

- (void)updateAccessoryModelsFromContext:(id)a3
{
  id v4 = a3;
  [v4 assertIsExecuting];
  if (![(HMDHomeManager *)self haveQueuedUpdateAccessories])
  {
    [(HMDHomeManager *)self setHaveQueuedUpdateAccessories:1];
    objc_initWeak(&location, self);
    id v5 = [(HMDHomeManager *)self startupCompleted];
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    v7[2] = __63__HMDHomeManager_AppleMedia__updateAccessoryModelsFromContext___block_invoke;
    v7[3] = &unk_264A2B1B0;
    objc_copyWeak(&v8, &location);
    id v6 = (id)[v5 inContext:v4 then:v7];

    objc_destroyWeak(&v8);
    objc_destroyWeak(&location);
  }
}

uint64_t __63__HMDHomeManager_AppleMedia__updateAccessoryModelsFromContext___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = WeakRetained;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    id v8 = HMFGetLogIdentifier();
    LODWORD(v11) = 138543362;
    *(void *)((char *)&v11 + 4) = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Scanning for accessories to update", (uint8_t *)&v11, 0xCu);
  }
  if (v6)
  {
    int v9 = [v6 workContext];
    *(void *)&long long v11 = MEMORY[0x263EF8330];
    *((void *)&v11 + 1) = 3221225472;
    long long v12 = __58__HMDHomeManager_AppleMedia____scanForAccessoriesToUpdate__block_invoke;
    v13 = &unk_264A2F7F8;
    id v14 = v6;
    [v9 performBlock:&v11];
  }
  [v6 setHaveQueuedUpdateAccessories:0];

  return 1;
}

void __58__HMDHomeManager_AppleMedia____scanForAccessoriesToUpdate__block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) homes];
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __58__HMDHomeManager_AppleMedia____scanForAccessoriesToUpdate__block_invoke_2;
  v3[3] = &unk_264A2B2A8;
  v3[4] = *(void *)(a1 + 32);
  objc_msgSend(v2, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v3);
}

void __58__HMDHomeManager_AppleMedia____scanForAccessoriesToUpdate__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [v3 owner];
  id v5 = [v4 account];

  id v6 = [v5 modelIdentifier];

  if (v6)
  {
    id v7 = [v3 accessories];
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 3221225472;
    v13[2] = __58__HMDHomeManager_AppleMedia____scanForAccessoriesToUpdate__block_invoke_77;
    v13[3] = &unk_264A17D08;
    v13[4] = *(void *)(a1 + 32);
    id v14 = v3;
    id v15 = v5;
    objc_msgSend(v7, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v13);
  }
  else
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = *(id *)(a1 + 32);
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      long long v11 = HMFGetLogIdentifier();
      long long v12 = [v3 shortDescription];
      *(_DWORD *)buf = 138543618;
      uint64_t v17 = v11;
      __int16 v18 = 2112;
      int v19 = v12;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Not updating accessories for home %@ – ownerAccount.modelIdentifier is nil", buf, 0x16u);
    }
  }
}

void __58__HMDHomeManager_AppleMedia____scanForAccessoriesToUpdate__block_invoke_77(uint64_t a1, void *a2)
{
  id v13 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v13;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(a1 + 48);
    id v7 = *(id *)(a1 + 40);
    id v8 = v6;
    id v9 = v4;
    if (v5)
    {
      id v10 = [v7 homeManager];
      long long v11 = [v10 backingStore];
      long long v12 = [v11 context];
      v14[0] = MEMORY[0x263EF8330];
      v14[1] = 3221225472;
      v14[2] = __84__HMDHomeManager_AppleMedia____updateAccessoryDeviceForHome_ownerAccount_accessory___block_invoke;
      v14[3] = &unk_264A2E610;
      id v15 = v8;
      id v16 = v9;
      id v17 = v7;
      uint64_t v18 = v5;
      [v12 performBlock:v14];
    }
  }
}

void __84__HMDHomeManager_AppleMedia____updateAccessoryDeviceForHome_ownerAccount_accessory___block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) modelIdentifier];
  id v3 = +[HMCContext findAccountWithModelID:v2];

  if (v3)
  {
    uint64_t v22 = 0;
    __int16 v23 = &v22;
    uint64_t v24 = 0x2020000000;
    char v25 = 0;
    id v4 = [v3 devices];
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 3221225472;
    v17[2] = __84__HMDHomeManager_AppleMedia____updateAccessoryDeviceForHome_ownerAccount_accessory___block_invoke_2;
    v17[3] = &unk_264A17CE0;
    id v18 = *(id *)(a1 + 40);
    __int16 v21 = &v22;
    id v5 = *(id *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    id v19 = v5;
    uint64_t v20 = v6;
    objc_msgSend(v4, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v17);

    if (!*((unsigned char *)v23 + 24))
    {
      long long v12 = (void *)MEMORY[0x230FBD990](v7, v8, v9, v10, v11);
      id v13 = *(id *)(a1 + 48);
      HMFGetOSLogHandle();
      id v14 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        id v15 = HMFGetLogIdentifier();
        uint64_t v16 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138543618;
        v27 = v15;
        __int16 v28 = 2112;
        uint64_t v29 = v16;
        _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Unable to find MKFDevice for accessory %@", buf, 0x16u);
      }
    }

    _Block_object_dispose(&v22, 8);
  }
}

void __84__HMDHomeManager_AppleMedia____updateAccessoryDeviceForHome_ownerAccount_accessory___block_invoke_2(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  uint64_t v7 = [v6 mediaRouteID];
  uint64_t v8 = [v7 UUIDString];
  uint64_t v9 = [*(id *)(a1 + 32) identifier];
  int v10 = [v8 isEqual:v9];

  if (v10)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    *a4 = 1;
    uint64_t v11 = [v6 databaseID];
    long long v12 = [v6 identifier];
    id v13 = [*(id *)(a1 + 40) backingStore];
    id v14 = [v13 context];

    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 3221225472;
    v18[2] = __84__HMDHomeManager_AppleMedia____updateAccessoryDeviceForHome_ownerAccount_accessory___block_invoke_3;
    v18[3] = &unk_264A28EB0;
    id v19 = *(id *)(a1 + 32);
    id v20 = v12;
    id v21 = *(id *)(a1 + 40);
    id v22 = v11;
    uint64_t v23 = *(void *)(a1 + 48);
    id v24 = v14;
    id v15 = v14;
    id v16 = v11;
    id v17 = v12;
    [v15 performBlock:v18];
  }
}

void __84__HMDHomeManager_AppleMedia____updateAccessoryDeviceForHome_ownerAccount_accessory___block_invoke_3(uint64_t a1)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) uuid];
  id v3 = +[HMCContext findAppleMediaAccessoryWithModelID:v2];

  id v4 = [v3 device];

  id v5 = [v3 idsIdentifier];

  id v6 = [v3 resident];
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 device];
    BOOL v9 = v8 != 0;

    int v10 = [v7 idsIdentifier];
    BOOL v11 = v10 != 0;
  }
  else
  {
    BOOL v11 = 1;
    BOOL v9 = 1;
  }
  long long v12 = +[HMDAccountRegistry sharedRegistry];
  uint64_t v13 = a1;
  id v14 = [v12 deviceForIdentifier:*(void *)(a1 + 40)];

  id v15 = v14;
  uint64_t v16 = [v14 globalDestination];
  v69 = v3;
  id v17 = [v3 idsDestination];
  int v18 = HMFEqualObjects();

  v67 = (void *)v16;
  v68 = v7;
  if (v7)
  {
    id v19 = [v7 idsDestination];
    int v20 = HMFEqualObjects();
  }
  else
  {
    int v20 = 1;
  }
  uint64_t v21 = v13;
  if (!v4 || !v5 || ((v18 ^ 1) & 1) != 0 || !v9 || !v11 || !v20)
  {
    uint64_t v30 = +[HMCContext findDeviceWithDatabaseID:*(void *)(v13 + 56)];
    if (v30)
    {
      __int16 v28 = v15;
      char v31 = -[HMDHomeManager __shouldScanAndUpdateDeviceInfoForDevice:](*(void **)(v13 + 64), v15);
      v32 = (void *)MEMORY[0x230FBD990]();
      id v33 = *(id *)(v13 + 48);
      v34 = HMFGetOSLogHandle();
      v35 = v34;
      if (v31)
      {
        uint64_t v29 = v67;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          v36 = HMFGetLogIdentifier();
          uint64_t v37 = *(void *)(v13 + 32);
          *(_DWORD *)buf = 138543874;
          v71 = v36;
          __int16 v72 = 2112;
          uint64_t v73 = v37;
          __int16 v74 = 2112;
          v75 = v30;
          _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_DEFAULT, "%{public}@Updating accessory %@ with device %@", buf, 0x20u);
        }
        char v25 = v69;
        [v69 setDevice:v30];
        v38 = [v69 resident];

        if (v38)
        {
          v39 = [v69 resident];
          [v39 setDevice:v30];

          v40 = (void *)MEMORY[0x230FBD990]();
          id v41 = *(id *)(v21 + 48);
          v42 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            v43 = HMFGetLogIdentifier();
            v44 = [v69 resident];
            *(_DWORD *)buf = 138543874;
            v71 = v43;
            __int16 v72 = 2112;
            uint64_t v73 = (uint64_t)v44;
            __int16 v74 = 2112;
            v75 = v30;
            _os_log_impl(&dword_22F52A000, v42, OS_LOG_TYPE_DEFAULT, "%{public}@Updating accessory's resident %@ with device %@", buf, 0x20u);
          }
          char v25 = v69;
        }
        char v26 = v68;
        if (v28)
        {
          v45 = [v28 idsIdentifier];
          if (v45)
          {
            v46 = (void *)MEMORY[0x230FBD990]();
            id v47 = *(id *)(v21 + 48);
            v48 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
            {
              v49 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138544130;
              v71 = v49;
              __int16 v72 = 2160;
              uint64_t v73 = 1752392040;
              __int16 v74 = 2112;
              v75 = v45;
              __int16 v76 = 2112;
              v77 = v69;
              _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_DEFAULT, "%{public}@Setting IDS identifier=%{mask.hash}@ from apple media scan for accessory: %@", buf, 0x2Au);
            }
            char v25 = v69;
            [v69 setIdsIdentifier:v45];
            v50 = [v69 resident];
            [v50 setIdsIdentifier:v45];
          }
          if (v67)
          {
            v51 = (void *)MEMORY[0x230FBD990]();
            id v52 = *(id *)(v21 + 48);
            v53 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
            {
              v54 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138544130;
              v71 = v54;
              __int16 v72 = 2160;
              uint64_t v73 = 1752392040;
              __int16 v74 = 2112;
              v75 = v67;
              __int16 v76 = 2112;
              v77 = v69;
              _os_log_impl(&dword_22F52A000, v53, OS_LOG_TYPE_DEFAULT, "%{public}@Setting IDS destination=%{mask.hash}@ from apple media scan for accessory: %@", buf, 0x2Au);
            }
            char v25 = v69;
            [v69 setIdsDestination:v67];
            v55 = [v69 resident];
            [v55 setIdsDestination:v67];
          }
        }
        else
        {
          v62 = (void *)MEMORY[0x230FBD990]();
          id v63 = *(id *)(v21 + 48);
          v64 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
          {
            v65 = HMFGetLogIdentifier();
            v66 = [v30 identifier];
            *(_DWORD *)buf = 138543618;
            v71 = v65;
            __int16 v72 = 2112;
            uint64_t v73 = (uint64_t)v66;
            _os_log_impl(&dword_22F52A000, v64, OS_LOG_TYPE_ERROR, "%{public}@Unable to find device to set IDS identifiers: %@", buf, 0x16u);
          }
          char v25 = v69;
        }
        [*(id *)(v21 + 72) save];
      }
      else
      {
        uint64_t v29 = v67;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          v61 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          v71 = v61;
          __int16 v72 = 2112;
          uint64_t v73 = (uint64_t)v28;
          _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_INFO, "%{public}@Do not update IDS tokens for MKF models for device: %@", buf, 0x16u);
        }
        char v26 = v68;
        char v25 = v69;
      }
    }
    else
    {
      v56 = (void *)MEMORY[0x230FBD990]();
      id v57 = *(id *)(v13 + 48);
      v58 = HMFGetOSLogHandle();
      __int16 v28 = v15;
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        v59 = HMFGetLogIdentifier();
        uint64_t v60 = *(void *)(v13 + 56);
        *(_DWORD *)buf = 138543618;
        v71 = v59;
        __int16 v72 = 2112;
        uint64_t v73 = v60;
        _os_log_impl(&dword_22F52A000, v58, OS_LOG_TYPE_ERROR, "%{public}@Lost the device that was here a second ago: %@", buf, 0x16u);
      }
      uint64_t v29 = v67;
      char v26 = v68;
      char v25 = v69;
    }
  }
  else
  {
    id v22 = (void *)MEMORY[0x230FBD990]();
    id v23 = *(id *)(v13 + 48);
    id v24 = HMFGetOSLogHandle();
    char v26 = v68;
    char v25 = v69;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      v27 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      v71 = v27;
      __int16 v72 = 2112;
      uint64_t v73 = (uint64_t)v69;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_DEBUG, "%{public}@Not updating accessory because it and its resident already has a device and ids information set: %@", buf, 0x16u);
    }
    __int16 v28 = v15;
    uint64_t v29 = v67;
  }
}

- (uint64_t)__shouldScanAndUpdateDeviceInfoForDevice:(void *)a1
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = 0;
  if (a1 && v3)
  {
    id v6 = [v3 productInfo];

    if (!v6)
    {
      id v15 = (void *)MEMORY[0x230FBD990]();
      id v16 = a1;
      id v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        int v18 = HMFGetLogIdentifier();
        *(_DWORD *)int v20 = 138543618;
        *(void *)&v20[4] = v18;
        *(_WORD *)&v20[12] = 2112;
        *(void *)&v20[14] = v4;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@ProductInfo is not available for device: %@", v20, 0x16u);
      }
      goto LABEL_13;
    }
    *(_OWORD *)int v20 = *MEMORY[0x263F42318];
    *(void *)&v20[16] = *(void *)(MEMORY[0x263F42318] + 16);
    uint64_t v7 = [MEMORY[0x263F42630] versionFromOperatingSystemVersion:v20];
    *(_OWORD *)int v20 = *MEMORY[0x263F422E0];
    *(void *)&v20[16] = *(void *)(MEMORY[0x263F422E0] + 16);
    uint64_t v8 = [MEMORY[0x263F42630] versionFromOperatingSystemVersion:v20];
    BOOL v9 = [v4 productInfo];
    int v10 = [v9 softwareVersion];

    if ([v10 isAtLeastVersion:v7]
      && [v8 isGreaterThanVersion:v10])
    {
      BOOL v11 = (void *)MEMORY[0x230FBD990]();
      id v12 = a1;
      uint64_t v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        id v14 = HMFGetLogIdentifier();
        *(_DWORD *)int v20 = 138543618;
        *(void *)&v20[4] = v14;
        *(_WORD *)&v20[12] = 2112;
        *(void *)&v20[14] = v10;
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Scan and update device address for software version: %@", v20, 0x16u);
      }

LABEL_13:
      uint64_t v5 = 1;
      goto LABEL_14;
    }

    uint64_t v5 = 0;
  }
LABEL_14:

  return v5;
}

- (id)updateMediaRouteIDOfDeviceWithIdentifier:(id)a3
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    char v26 = v8;
    __int16 v27 = 2112;
    id v28 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating capabilities for device with identifier: %@", buf, 0x16u);
  }
  BOOL v9 = +[HMDAccountRegistry sharedRegistry];
  int v10 = [v9 deviceForIdentifier:v4];

  if (v10)
  {
    if (-[HMDHomeManager __shouldScanAndUpdateDeviceInfoForDevice:](v6, v10))
    {
      BOOL v11 = [(HMDHomeManager *)v6 queryDeviceCapabilities:v10];
      id v12 = +[HMCContext currentContext];
      objc_initWeak((id *)buf, v6);
      v21[0] = MEMORY[0x263EF8330];
      v21[1] = 3221225472;
      v21[2] = __71__HMDHomeManager_AppleMedia__updateMediaRouteIDOfDeviceWithIdentifier___block_invoke;
      v21[3] = &unk_264A17D30;
      objc_copyWeak(&v24, (id *)buf);
      id v22 = v4;
      id v13 = v12;
      id v23 = v13;
      id v14 = [v11 inContext:v13 then:v21];

      objc_destroyWeak(&v24);
      objc_destroyWeak((id *)buf);

      goto LABEL_11;
    }
    uint64_t v19 = [MEMORY[0x263F42538] futureWithNoValue];
  }
  else
  {
    id v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = v6;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      char v26 = v18;
      __int16 v27 = 2112;
      id v28 = v4;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Unable to find device: %@", buf, 0x16u);
    }
    uint64_t v19 = [MEMORY[0x263F42538] futureWithNoValue];
  }
  id v14 = (void *)v19;
LABEL_11:

  return v14;
}

uint64_t __71__HMDHomeManager_AppleMedia__updateMediaRouteIDOfDeviceWithIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = WeakRetained;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    uint64_t v9 = *(void *)(a1 + 32);
    int v21 = 138543874;
    id v22 = v8;
    __int16 v23 = 2112;
    uint64_t v24 = v9;
    __int16 v25 = 2112;
    id v26 = v3;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Resolved capabilities for device %@: %@", (uint8_t *)&v21, 0x20u);
  }
  int v10 = [v3 modelID];
  BOOL v11 = +[HMCContext findDeviceWithModelID:v10];

  if (v11)
  {
    id v12 = [v11 mediaRouteID];

    if (!v12)
    {
      id v13 = [v3 mediaRouteUUID];
      [v11 setMediaRouteID:v13];
    }
    [*(id *)(a1 + 40) save];
    [v6 updateAccessoryModelsFromContext:*(void *)(a1 + 40)];
  }
  else
  {
    id v14 = (void *)MEMORY[0x230FBD990]();
    id v15 = v6;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v17 = HMFGetLogIdentifier();
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = [v3 modelID];
      int v21 = 138543874;
      id v22 = v17;
      __int16 v23 = 2112;
      uint64_t v24 = v18;
      __int16 v25 = 2112;
      id v26 = v19;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to find MKFDevice for device identifier: %@ -- modelID: %@", (uint8_t *)&v21, 0x20u);
    }
  }

  return 1;
}

- (id)queryDeviceCapabilities:(id)a3
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = +[HMDAppleAccountManager sharedManager];
  id v6 = [v5 device];
  int v7 = [v4 isEqual:v6];

  if (v7)
  {
    uint64_t v8 = objc_alloc_init(HMDAppleMediaDeviceInfo);
    uint64_t v9 = [v4 modelIdentifier];
    [(HMDAppleMediaDeviceInfo *)v8 setModelID:v9];

    int v10 = (void *)MEMORY[0x230FBD990]();
    BOOL v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v22 = v13;
      __int16 v23 = 2112;
      uint64_t v24 = v8;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Generating HMDAppleMediaDeviceInfo locally: %@", buf, 0x16u);
    }
    id v14 = [MEMORY[0x263F42538] futureWithValue:v8];
  }
  else
  {
    id v15 = [(HMDHomeManager *)self workContext];
    id v16 = (void *)MEMORY[0x263F42538];
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 3221225472;
    v18[2] = __54__HMDHomeManager_AppleMedia__queryDeviceCapabilities___block_invoke;
    v18[3] = &unk_264A2BEC8;
    void v18[4] = self;
    id v19 = v4;
    id v20 = v15;
    uint64_t v8 = v15;
    id v14 = [v16 inContext:v8 perform:v18];
  }
  return v14;
}

uint64_t __54__HMDHomeManager_AppleMedia__queryDeviceCapabilities___block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v28 = 2112;
    uint64_t v29 = v6;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Querying HMDAppleMediaDeviceInfo remotely to: %@", buf, 0x16u);
  }
  int v7 = [HMDRemoteDeviceMessageDestination alloc];
  uint64_t v8 = [*(id *)(a1 + 32) uuid];
  uint64_t v9 = [(HMDRemoteDeviceMessageDestination *)v7 initWithTarget:v8 device:*(void *)(a1 + 40)];

  int v10 = +[HMDRemoteMessage secureMessageWithName:@"HMDAM.g" qualityOfService:-1 destination:v9 messagePayload:MEMORY[0x263EFFA78] restriction:9];
  *(void *)buf = 0;
  BOOL v11 = [MEMORY[0x263F42538] futureWithPromise:buf];
  uint64_t v19 = MEMORY[0x263EF8330];
  uint64_t v20 = 3221225472;
  int v21 = __54__HMDHomeManager_AppleMedia__queryDeviceCapabilities___block_invoke_84;
  id v22 = &unk_264A245C8;
  id v12 = *(id *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = *(void **)(a1 + 40);
  id v23 = v12;
  uint64_t v24 = v13;
  id v25 = v14;
  id v26 = *(id *)buf;
  [v10 setResponseHandler:&v19];
  id v15 = objc_msgSend(*(id *)(a1 + 32), "messageDispatcher", v19, v20, v21, v22);
  [v15 sendMessage:v10];

  id v16 = v11;
  if (!v16) {
    _HMFPreconditionFailure();
  }
  id v17 = v16;

  return 3;
}

void __54__HMDHomeManager_AppleMedia__queryDeviceCapabilities___block_invoke_84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  v12[2] = __54__HMDHomeManager_AppleMedia__queryDeviceCapabilities___block_invoke_2;
  v12[3] = &unk_264A2E908;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v9 = *(void **)(a1 + 48);
  id v13 = v5;
  uint64_t v14 = v7;
  id v15 = v9;
  id v16 = *(id *)(a1 + 56);
  id v17 = v6;
  id v10 = v6;
  id v11 = v5;
  [v8 performBlock:v12];
}

void __54__HMDHomeManager_AppleMedia__queryDeviceCapabilities___block_invoke_2(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 32))
  {
    id v2 = (void *)MEMORY[0x230FBD990]();
    id v3 = *(id *)(a1 + 40);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v5 = HMFGetLogIdentifier();
      id v6 = [*(id *)(a1 + 48) identifier];
      uint64_t v7 = *(HMDAppleMediaDeviceInfo **)(a1 + 32);
      int v15 = 138543874;
      id v16 = v5;
      __int16 v17 = 2112;
      uint64_t v18 = v6;
      __int16 v19 = 2112;
      uint64_t v20 = v7;
      _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_ERROR, "%{public}@Query of HMDAppleDeviceInfo to %@ failed: %@", (uint8_t *)&v15, 0x20u);
    }
    [*(id *)(a1 + 56) rejectWithError:*(void *)(a1 + 32)];
  }
  else
  {
    uint64_t v8 = [[HMDAppleMediaDeviceInfo alloc] initWithPayload:*(void *)(a1 + 64)];
    uint64_t v9 = [*(id *)(a1 + 48) modelIdentifier];
    [(HMDAppleMediaDeviceInfo *)v8 setModelID:v9];

    id v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = *(id *)(a1 + 40);
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = HMFGetLogIdentifier();
      uint64_t v14 = [*(id *)(a1 + 48) identifier];
      int v15 = 138543874;
      id v16 = v13;
      __int16 v17 = 2112;
      uint64_t v18 = v14;
      __int16 v19 = 2112;
      uint64_t v20 = v8;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Query of HMDAppleDeviceInfo to %@ succeeded: %@", (uint8_t *)&v15, 0x20u);
    }
    [*(id *)(a1 + 56) fulfillWithValue:v8];
  }
}

- (void)_handleAddedAccessory:(id)a3
{
  id v4 = [a3 userInfo];
  id v5 = [v4 objectForKeyedSubscript:@"HMDNotificationAddedAccessoryKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  if (v7)
  {
    uint64_t v8 = [(HMDHomeManager *)self workContext];
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    v9[2] = __52__HMDHomeManager_AppleMedia___handleAddedAccessory___block_invoke;
    v9[3] = &unk_264A2F820;
    v9[4] = self;
    id v10 = v7;
    [v8 performBlock:v9];
  }
}

void __52__HMDHomeManager_AppleMedia___handleAddedAccessory___block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 40);
    int v9 = 138543618;
    id v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling scan due to accessory add: %@", (uint8_t *)&v9, 0x16u);
  }
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = [v7 workContext];
  [v7 updateAccessoryModelsFromContext:v8];
}

- (void)_handleDeviceNotification:(id)a3
{
  id v4 = a3;
  objc_initWeak(&location, self);
  id v5 = [(HMDHomeManager *)self workContext];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __56__HMDHomeManager_AppleMedia___handleDeviceNotification___block_invoke;
  v6[3] = &unk_264A2C170;
  objc_copyWeak(&v7, &location);
  [v5 performBlock:v6];

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

void __56__HMDHomeManager_AppleMedia___handleDeviceNotification___block_invoke(uint64_t a1)
{
  v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = +[HMDAppleAccountManager sharedManager];
  id v4 = [v3 account];
  id v5 = [v4 modelIdentifier];

  if (v5)
  {
    uint64_t v6 = [WeakRetained backingStore];
    id v7 = [v6 context];
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3221225472;
    v8[2] = __56__HMDHomeManager_AppleMedia___handleDeviceNotification___block_invoke_2;
    v8[3] = &unk_264A2C148;
    objc_copyWeak(&v10, v1);
    id v9 = v5;
    [v7 performBlock:v8];

    objc_destroyWeak(&v10);
  }
}

void __56__HMDHomeManager_AppleMedia___handleDeviceNotification___block_invoke_2(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = +[HMCContext findAccountWithModelID:*(void *)(a1 + 32)];
  id v4 = v3;
  if (v3)
  {
    id v5 = [v3 devices];
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = __56__HMDHomeManager_AppleMedia___handleDeviceNotification___block_invoke_3;
    v6[3] = &unk_264A1D8C8;
    void v6[4] = WeakRetained;
    objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v6);
  }
}

void __56__HMDHomeManager_AppleMedia___handleDeviceNotification___block_invoke_3(uint64_t a1, void *a2)
{
  id v10 = a2;
  id v3 = [v10 mediaRouteID];

  if (v3)
  {
    id v4 = [v10 mediaRouteID];
    if ((objc_msgSend(v4, "hmf_isEqualToUUIDString:", @"20BC605A-C33B-4D36-B885-C2EE6102B308") & 1) == 0)
    {
      id v5 = [v10 mediaRouteID];
      if (!objc_msgSend(v5, "hmf_isEqualToUUIDString:", @"00000000-0000-0000-0000-C2EE6102B308"))
      {
        uint64_t v6 = [v10 accessoryAppleMedia];

        if (v6) {
          goto LABEL_9;
        }
        id v7 = *(void **)(a1 + 32);
        id v4 = [v7 backingStore];
        id v5 = [v4 context];
        [v7 updateAccessoryModelsFromContext:v5];
      }
    }
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v4 = [v10 identifier];
    id v9 = (id)[v8 updateMediaRouteIDOfDeviceWithIdentifier:v4];
  }

LABEL_9:
}

- (void)_handleAppleMediaAccessoryDeviceInfoRequestMessage:(id)a3
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = objc_alloc_init(HMDAppleMediaDeviceInfo);
  uint64_t v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    id v10 = [v4 shortDescription];
    int v19 = 138543874;
    uint64_t v20 = v9;
    __int16 v21 = 2114;
    id v22 = v10;
    __int16 v23 = 2112;
    uint64_t v24 = v5;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Handling apple media accessory device info request message: %{public}@ with device info: %@", (uint8_t *)&v19, 0x20u);
  }
  __int16 v11 = [(HMDAppleMediaDeviceInfo *)v5 mediaRouteUUID];
  int v12 = objc_msgSend(v11, "hmf_isEqualToUUIDString:", @"00000000-0000-0000-0000-C2EE6102B308");

  if (v12)
  {
    uint64_t v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = v7;
    int v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      __int16 v17 = [v4 shortDescription];
      int v19 = 138543618;
      uint64_t v20 = v16;
      __int16 v21 = 2114;
      id v22 = v17;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to handle apple media accessory device info request message: %{public}@ due to invalid media remote identifier", (uint8_t *)&v19, 0x16u);
    }
    uint64_t v18 = [MEMORY[0x263F087E8] hmfErrorWithCode:15];
    [v4 respondWithError:v18];
  }
  else
  {
    uint64_t v18 = [(HMDAppleMediaDeviceInfo *)v5 asPayload];
    [v4 respondWithPayload:v18];
  }
}

- (void)_registerForAppleMediaMessages
{
  v8[1] = *MEMORY[0x263EF8340];
  id v3 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  [v3 setRequiresAccountMessage:1];
  id v4 = (void *)[v3 copy];
  id v5 = [(HMDHomeManager *)self messageDispatcher];
  v8[0] = v4;
  uint64_t v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:v8 count:1];
  [v5 registerForMessage:@"HMDAM.g" receiver:self policies:v6 selector:sel__handleAppleMediaAccessoryDeviceInfoRequestMessage_];

  id v7 = [MEMORY[0x263F08A00] defaultCenter];
  [v7 addObserver:self selector:sel__handleDeviceNotification_ name:@"HMDAppleAccountManagerResolved" object:0];
  [v7 addObserver:self selector:sel__handleAddedAccessory_ name:@"HMDNotificationHomeAddedAccessory" object:0];
  [v7 addObserver:self selector:sel__handleAppleMediaResidentCoreDataChanges_ name:*MEMORY[0x263EFF040] object:0];
}

- (void)handleDumpDatabaseMessage:(id)a3
{
  v22[1] = *MEMORY[0x263EF8340];
  id v3 = a3;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = [v3 numberForKey:*MEMORY[0x263F0CA28]];
  uint64_t v6 = [v5 BOOLValue];

  id v7 = [v3 numberForKey:*MEMORY[0x263F0CA38]];
  uint64_t v8 = [v7 BOOLValue];

  id v9 = [v3 numberForKey:*MEMORY[0x263F0CA40]];
  uint64_t v10 = [v9 BOOLValue];

  __int16 v11 = [v3 numberForKey:*MEMORY[0x263F0CA50]];
  uint64_t v12 = [v11 BOOLValue];

  if (v6 & 1) != 0 || (v10 & 1) != 0 || (v12 & 1) != 0 || (v8)
  {
    uint64_t v13 = +[HMDCoreData sharedInstance];
    uint64_t v14 = (void *)[v13 newManagedObjectContext];
    id v20 = 0;
    int v15 = [v13 dumpCloudKitConfiguration:v6 localConfiguration:v10 workingConfiguration:v12 includeFakeModels:v8 context:v14 error:&v20];
    id v16 = v20;
    if (v15)
    {
      __int16 v17 = [v15 dataUsingEncoding:4];
      uint64_t v18 = objc_msgSend(v17, "hmd_compressedData");

      if (v18)
      {
        uint64_t v21 = *MEMORY[0x263F0CA30];
        v22[0] = v18;
        int v19 = [NSDictionary dictionaryWithObjects:v22 forKeys:&v21 count:1];
        [v3 respondWithPayload:v19];
      }
      else
      {
        int v19 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
        [v3 respondWithError:v19];
      }
    }
    else
    {
      [v3 respondWithError:v16];
    }
  }
  else
  {
    uint64_t v13 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v3 respondWithError:v13];
  }
}

- (void)homeModelHomeDelete:(id)a3 message:(id)a4
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 handle];
  id v9 = [v8 homeUUID];

  if (!v9) {
    _HMFPreconditionFailure();
  }
  uint64_t v10 = [(HMDHomeManager *)self _homeWithUUID:v9];
  if (v10)
  {
    __int16 v11 = [v7 transactionResult];
    BOOL v12 = [v11 source] == 1;

    [(HMDHomeManager *)self _removeHome:v10 withMessage:v7 saveToStore:1 notifyUsers:1 shouldRemovePairings:v12];
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = self;
    int v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      int v17 = 138543618;
      uint64_t v18 = v16;
      __int16 v19 = 2112;
      id v20 = v9;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Home with UUID not found: %@", (uint8_t *)&v17, 0x16u);
    }
  }
}

- (void)homeModelHomeUpdate:(id)a3 message:(id)a4
{
  uint64_t v135 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  v113 = v6;
  if (v6)
  {
    id v112 = v7;
    uint64_t v8 = [v6 handle];
    id v9 = [v8 homeUUID];

    uint64_t v10 = HMFUptime();
    double v12 = v11;
    uint64_t v13 = (void *)MEMORY[0x230FBD990](v10);
    uint64_t v14 = self;
    int v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138544898;
      *(void *)&uint8_t buf[4] = v16;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = @"homeManagerInitStart";
      *(_WORD *)&buf[22] = 2112;
      v124 = @"Loading home model from backing store";
      *(_WORD *)v125 = 2114;
      *(void *)&v125[2] = @"state";
      *(_WORD *)&v125[10] = 2112;
      *(void *)&v125[12] = @"homeManagerLoadingHomeModel";
      *(_WORD *)&v125[20] = 2114;
      *(void *)&v125[22] = @"homeUUID";
      *(_WORD *)&v125[30] = 2112;
      id v126 = v9;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
    }
    int v17 = [MEMORY[0x263F499E0] sharedInstance];
    id v18 = objc_alloc(MEMORY[0x263F499F0]);
    __int16 v19 = HMDTaggedLoggingCreateDictionary();
    id v20 = objc_msgSend(v18, "initWithTag:data:", @"homeManagerInitStart", v19, @"state", @"homeManagerLoadingHomeModel", @"homeUUID", v9);
    uint64_t v21 = [MEMORY[0x263F424F0] currentTagProcessorList];
    [v17 submitTaggedEvent:v20 processorList:v21];

    if (v9)
    {
      id v22 = [(HMDHomeManager *)v14 _homeWithUUID:v9];
      BOOL v23 = v22 == 0;

      if (!v23)
      {
        uint64_t v24 = (void *)MEMORY[0x230FBD990]();
        uint64_t v25 = v14;
        id v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          *(void *)&uint8_t buf[4] = v27;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v9;
          _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_ERROR, "%{public}@Not re-adding a home that already exists (%@)", buf, 0x16u);
        }
LABEL_39:

        id v7 = v112;
        goto LABEL_40;
      }
    }
    else
    {
      __int16 v28 = (void *)MEMORY[0x230FBD990]();
      uint64_t v29 = v14;
      uint64_t v30 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        char v31 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v31;
        _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_DEFAULT, "%{public}@model.homeUUID is nil for HMDCloudZoneInformationModel. This may cause extra work.", buf, 0xCu);
      }
    }
    v32 = [v113 handle];
    id v116 = 0;
    v111 = +[HMDBackingStore cdlsBackingStoreWithHandle:v32 error:&v116];
    v110 = (__CFString *)v116;

    id v33 = (void *)MEMORY[0x230FBD990]();
    v34 = v14;
    v35 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      v36 = HMFGetLogIdentifier();
      uint64_t v37 = NSString;
      HMFUptime();
      v39 = objc_msgSend(v37, "stringWithFormat:", @"%.3f", v38 - v12);
      v40 = objc_msgSend(NSNumber, "numberWithInteger:", -[__CFString code](v110, "code"));
      *(_DWORD *)buf = 138545922;
      *(void *)&uint8_t buf[4] = v36;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = @"homeManagerInitStart";
      *(_WORD *)&buf[22] = 2112;
      v124 = @"Loaded home model from backing store";
      *(_WORD *)v125 = 2114;
      *(void *)&v125[2] = @"state";
      *(_WORD *)&v125[10] = 2112;
      *(void *)&v125[12] = @"homeManagerLoadedHomeModel";
      *(_WORD *)&v125[20] = 2114;
      *(void *)&v125[22] = @"duration";
      *(_WORD *)&v125[30] = 2112;
      id v126 = v39;
      __int16 v127 = 2114;
      v128 = @"homeUUID";
      __int16 v129 = 2112;
      id v130 = v9;
      __int16 v131 = 2114;
      v132 = @"error";
      __int16 v133 = 2112;
      v134 = v40;
      _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x70u);
    }
    id v41 = [MEMORY[0x263F499E0] sharedInstance];
    id v42 = objc_alloc(MEMORY[0x263F499F0]);
    v43 = NSString;
    HMFUptime();
    v45 = objc_msgSend(v43, "stringWithFormat:", @"%.3f", v44 - v12);
    v46 = objc_msgSend(NSNumber, "numberWithInteger:", -[__CFString code](v110, "code"));
    id v47 = HMDTaggedLoggingCreateDictionary();
    v48 = objc_msgSend(v42, "initWithTag:data:", @"homeManagerInitStart", v47, @"state", @"homeManagerLoadedHomeModel", @"duration", v45, @"homeUUID", v9, @"error", v46);
    v49 = [MEMORY[0x263F424F0] currentTagProcessorList];
    [v41 submitTaggedEvent:v48 processorList:v49];

    if (v111)
    {
      v50 = [v111 homeManager];
      BOOL v51 = v50 == 0;

      if (v51) {
        [v111 setHomeManager:v34];
      }
      id v52 = v34;
      id v53 = v111;
      id v54 = v9;
      uint64_t v117 = 0;
      v118 = &v117;
      uint64_t v119 = 0x3032000000;
      v120 = __Block_byref_object_copy__54023;
      v121 = __Block_byref_object_dispose__54024;
      id v122 = 0;
      v55 = [v53 context];
      v56 = [v55 managedObjectContext];
      *(void *)buf = MEMORY[0x263EF8330];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ____homeWithHomeManager_block_invoke;
      v124 = (__CFString *)&unk_264A2F000;
      id v57 = v52;
      *(void *)v125 = v57;
      id v58 = v54;
      *(void *)&v125[8] = v58;
      *(void *)&v125[24] = &v117;
      id v59 = v53;
      *(void *)&v125[16] = v59;
      [v56 performBlockAndWait:buf];

      id v109 = (id)v118[5];
      _Block_object_dispose(&v117, 8);

      if (v109)
      {
        uint64_t v60 = HMFUptime();
        double v62 = v61;
        id v63 = (void *)MEMORY[0x230FBD990](v60);
        v64 = v57;
        v65 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
        {
          v66 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138544898;
          *(void *)&uint8_t buf[4] = v66;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = @"homeManagerInitStart";
          *(_WORD *)&buf[22] = 2112;
          v124 = @"Replaying all models for home";
          *(_WORD *)v125 = 2114;
          *(void *)&v125[2] = @"state";
          *(_WORD *)&v125[10] = 2112;
          *(void *)&v125[12] = @"homeManagerReplayHome";
          *(_WORD *)&v125[20] = 2114;
          *(void *)&v125[22] = @"homeUUID";
          *(_WORD *)&v125[30] = 2112;
          id v126 = v58;
          _os_log_impl(&dword_22F52A000, v65, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
        }
        v67 = [MEMORY[0x263F499E0] sharedInstance];
        id v68 = objc_alloc(MEMORY[0x263F499F0]);
        v69 = HMDTaggedLoggingCreateDictionary();
        v70 = objc_msgSend(v68, "initWithTag:data:", @"homeManagerInitStart", v69, @"state", @"homeManagerReplayHome", @"homeUUID", v58);
        v71 = [MEMORY[0x263F424F0] currentTagProcessorList];
        [v67 submitTaggedEvent:v70 processorList:v71];

        objc_msgSend(v59, "cdlsReplayAllModelsStartingAt:isInitialGraphLoad:", v109, -[HMDHomeManager isInitialReplay:](v64, "isInitialReplay:", v112));
        __int16 v72 = (void *)MEMORY[0x230FBD990]([(HMDHomeManager *)v64 updateHomeKitInUsePreferences]);
        uint64_t v73 = v64;
        __int16 v74 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
        {
          v75 = HMFGetLogIdentifier();
          __int16 v76 = NSString;
          HMFUptime();
          uint64_t v78 = objc_msgSend(v76, "stringWithFormat:", @"%.3f", v77 - v62);
          *(_DWORD *)buf = 138545410;
          *(void *)&uint8_t buf[4] = v75;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = @"homeManagerInitStart";
          *(_WORD *)&buf[22] = 2112;
          v124 = @"Replayed all models for home";
          *(_WORD *)v125 = 2114;
          *(void *)&v125[2] = @"state";
          *(_WORD *)&v125[10] = 2112;
          *(void *)&v125[12] = @"homeManagerReplayedHome";
          *(_WORD *)&v125[20] = 2114;
          *(void *)&v125[22] = @"duration";
          *(_WORD *)&v125[30] = 2112;
          id v126 = v78;
          __int16 v127 = 2114;
          v128 = @"homeUUID";
          __int16 v129 = 2112;
          id v130 = v58;
          _os_log_impl(&dword_22F52A000, v74, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x5Cu);
        }
        v79 = [MEMORY[0x263F499E0] sharedInstance];
        id v80 = objc_alloc(MEMORY[0x263F499F0]);
        v81 = NSString;
        HMFUptime();
        v83 = objc_msgSend(v81, "stringWithFormat:", @"%.3f", v82 - v62);
        v84 = HMDTaggedLoggingCreateDictionary();
        v85 = objc_msgSend(v80, "initWithTag:data:", @"homeManagerInitStart", v84, @"state", @"homeManagerReplayedHome", @"duration", v83, @"homeUUID", v58);
        v86 = [MEMORY[0x263F424F0] currentTagProcessorList];
        [v79 submitTaggedEvent:v85 processorList:v86];

        id v87 = objc_alloc(MEMORY[0x263F42520]);
        v88 = [(HMDHomeManager *)v73 workQueue];
        v89 = (void *)[v87 initWithQueue:v88];

        v114[0] = MEMORY[0x263EF8330];
        v114[1] = 3221225472;
        v114[2] = __56__HMDHomeManager_CoreData__homeModelHomeUpdate_message___block_invoke;
        v114[3] = &unk_264A2F820;
        v114[4] = v73;
        id v90 = v89;
        id v115 = v90;
        [v90 performBlock:v114];
        logAndPostNotification(@"HMDHomeAddedNotification", v73, 0);
        v91 = [(HMDHomeManager *)v73 primaryHomeUUID];
        if (!v91
          || ([(HMDHomeManager *)v73 primaryHomeUUID],
              v92 = objc_claimAutoreleasedReturnValue(),
              char v93 = [v92 isEqual:v58],
              v92,
              v91,
              (v93 & 1) == 0))
        {
          v94 = [(HMDHomeManager *)v73 primaryHomeUUID];
          if (v94)
          {
          }
          else
          {
            v99 = [(HMDHomeManager *)v73 homes];
            BOOL v100 = [v99 count] == 1;

            if (v100) {
              [(HMDHomeManager *)v73 _changePrimaryHome:v58];
            }
          }
        }
        v101 = [(HMDHomeManager *)v73 _homeWithUUID:v58];
        v102 = [v101 currentUser];
        BOOL v103 = v102 == 0;

        if (v103)
        {
          v105 = (void *)MEMORY[0x230FBD990]();
          v106 = v73;
          v107 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v107, OS_LOG_TYPE_INFO))
          {
            v108 = HMFGetLogIdentifier();
            *(_DWORD *)buf = 138543618;
            *(void *)&uint8_t buf[4] = v108;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v101;
            _os_log_impl(&dword_22F52A000, v107, OS_LOG_TYPE_INFO, "%{public}@Not sending home added notification to clients as this home does not have current user: %@", buf, 0x16u);
          }
          v104 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2011];
          [v112 respondWithError:v104];
        }
        else
        {
          v104 = [v112 transactionResult];
          [v104 markSaveToAssistant];
        }
      }
    }
    else
    {
      v95 = (void *)MEMORY[0x230FBD990]();
      v96 = v34;
      v97 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
      {
        v98 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        *(void *)&uint8_t buf[4] = v98;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2112;
        v124 = v110;
        _os_log_impl(&dword_22F52A000, v97, OS_LOG_TYPE_ERROR, "%{public}@Unable to open backing store %@: %@", buf, 0x20u);
      }
    }

    goto LABEL_39;
  }
LABEL_40:
}

uint64_t __56__HMDHomeManager_CoreData__homeModelHomeUpdate_message___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateAccessoryModelsFromContext:*(void *)(a1 + 40)];
}

- (BOOL)isInitialReplay:(id)a3
{
  id v3 = a3;
  id v4 = v3;
  if (v3)
  {
    id v5 = [v3 transactionResult];

    if (v5)
    {
      id v6 = [v4 transactionResult];
      id v7 = [v6 label];
      LOBYTE(v5) = HMFEqualObjects();
    }
  }
  else
  {
    LOBYTE(v5) = 0;
  }

  return (char)v5;
}

- (void)dm_transactionObjectRemoved:(id)a3 message:(id)a4
{
  id v9 = a3;
  id v6 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v7 = v9;
  }
  else {
    id v7 = 0;
  }
  id v8 = v7;
  [(HMDHomeManager *)self homeModelHomeDelete:v8 message:v6];
}

- (void)dm_transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5
{
  id v10 = a4;
  id v7 = a5;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v8 = v10;
  }
  else {
    id v8 = 0;
  }
  id v9 = v8;
  [(HMDHomeManager *)self homeModelHomeUpdate:v9 message:v7];
}

- (void)dmKickClients
{
  id v3 = [(HMDHomeManager *)self uuid];
  [(HMDHomeManager *)self updateGenerationCounterWithReason:@"CoreData data changed" sourceUUID:v3 shouldNotifyClients:1];
}

- (void)dmHandleRequestRemoveHome:(id)a3
{
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kHomeUUID"];
  id v6 = [(HMDHomeManager *)self _homeWithUUID:v5];
  id v7 = [v6 deletedBackingStoreObject];
  id v8 = [v4 untrustedClientIdentifier];
  id v9 = +[HMDBackingStoreTransactionOptions defaultXPCOptionsWithCDTransactionAuthor:10 clientIdentifier:v8];

  id v10 = [(HMDHomeManager *)self backingStore];
  double v11 = [v4 name];
  double v12 = [v10 transaction:v11 options:v9];

  [v12 add:v7];
  uint64_t v13 = +[HMDHomeManagerHomeModel modelForHomeUUID:v5];
  [v13 setObjectChangeType:3];
  [v12 add:v13 withMessage:v4];

  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 3221225472;
  v16[2] = __54__HMDHomeManager_CoreData__dmHandleRequestRemoveHome___block_invoke;
  v16[3] = &unk_264A2F3E8;
  v16[4] = self;
  [v12 run:v16];
  if ([v6 isOwnerUser])
  {
    uint64_t v14 = [(HMDHomeManager *)self homeOwnerCloudShareManager];
    id v15 = (id)[v14 removeSharesForHome:v6];
  }
}

void __54__HMDHomeManager_CoreData__dmHandleRequestRemoveHome___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    int v8 = 138543618;
    id v9 = v7;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Transaction to remove the home finished with error: %@", (uint8_t *)&v8, 0x16u);
  }
}

- (id)hh2ControllerKey
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v3 = [MEMORY[0x263F35AD0] systemStore];
  id v16 = 0;
  id v17 = 0;
  char v4 = [v3 getOrCreateHH2ControllerKey:&v17 secretKey:0 keyPair:0 username:&v16];
  id v5 = v17;
  id v6 = v16;

  id v7 = (void *)MEMORY[0x230FBD990]();
  int v8 = self;
  id v9 = HMFGetOSLogHandle();
  __int16 v10 = v9;
  if (v4)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v19 = v11;
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Going to use HH2 controller key : %@", buf, 0x16u);
    }
    uint64_t v12 = (void *)[objc_alloc(MEMORY[0x263F425F0]) initWithPairingKeyData:v5];
    uint64_t v13 = (void *)[objc_alloc(MEMORY[0x263F425E8]) initWithIdentifier:v6 publicKey:v12 privateKey:0];
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v19 = v14;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@FATAL Error : Unable to get or create HH2 Controller key", buf, 0xCu);
    }
    uint64_t v13 = 0;
  }

  return v13;
}

- (void)runTransactionForAddHomeMessage:(id)a3 withInitialHomeObjects:(id)a4 homeManagerModel:(id)a5 homeManagerHomeModel:(id)a6 homeBackingStore:(id)a7 homeUUID:(id)a8 makeNewHomePrimaryHome:(BOOL)a9
{
  id v15 = a3;
  id v16 = a5;
  id v17 = a7;
  id v18 = a8;
  id v19 = a6;
  id v20 = a4;
  id v21 = [(HMDHomeManager *)self backingStore];
  uint64_t v22 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  BOOL v23 = [v21 transaction:@"HomeModelAddition" options:v22];

  v34[0] = MEMORY[0x263EF8330];
  v34[1] = 3221225472;
  v34[2] = __170__HMDHomeManager_CoreData__runTransactionForAddHomeMessage_withInitialHomeObjects_homeManagerModel_homeManagerHomeModel_homeBackingStore_homeUUID_makeNewHomePrimaryHome___block_invoke;
  v34[3] = &unk_264A1AB80;
  id v24 = v23;
  id v35 = v24;
  objc_msgSend(v20, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v34);

  [v24 add:v19 withMessage:v15];
  if (v16) {
    [v24 add:v16];
  }
  v28[0] = MEMORY[0x263EF8330];
  v28[1] = 3221225472;
  v28[2] = __170__HMDHomeManager_CoreData__runTransactionForAddHomeMessage_withInitialHomeObjects_homeManagerModel_homeManagerHomeModel_homeBackingStore_homeUUID_makeNewHomePrimaryHome___block_invoke_2;
  v28[3] = &unk_264A1ABA8;
  id v29 = v17;
  uint64_t v30 = self;
  id v31 = v15;
  id v32 = v18;
  BOOL v33 = a9;
  id v25 = v18;
  id v26 = v15;
  id v27 = v17;
  [v24 run:v28];
}

void __170__HMDHomeManager_CoreData__runTransactionForAddHomeMessage_withInitialHomeObjects_homeManagerModel_homeManagerHomeModel_homeBackingStore_homeUUID_makeNewHomePrimaryHome___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setObjectChangeType:1];
  [*(id *)(a1 + 32) add:v3];
}

void __170__HMDHomeManager_CoreData__runTransactionForAddHomeMessage_withInitialHomeObjects_homeManagerModel_homeManagerHomeModel_homeBackingStore_homeUUID_makeNewHomePrimaryHome___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    char v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 40);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v24 = v7;
      __int16 v25 = 2112;
      id v26 = v3;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to run transaction for adding home: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 48) respondWithError:v3];
  }
  else
  {
    int v8 = [*(id *)(a1 + 40) _homeWithUUID:*(void *)(a1 + 56)];
    id v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = *(id *)(a1 + 40);
    id v11 = HMFGetOSLogHandle();
    uint64_t v12 = v11;
    if (v8)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = HMFGetLogIdentifier();
        uint64_t v14 = [*(id *)(a1 + 48) shortDescription];
        *(_DWORD *)buf = 138543618;
        id v24 = v13;
        __int16 v25 = 2112;
        id v26 = v14;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Replying to message %@ for client which asked to add home", buf, 0x16u);
      }
      id v15 = *(void **)(a1 + 48);
      if (objc_msgSend(v15, "isEntitledForSPIAccess", @"kHomeDataKey")) {
        encodeRootObjectForSPIClients(v8);
      }
      else {
      id v18 = encodeRootObjectForIncomingXPCMessage(v8, 0);
      }
      v21[1] = *MEMORY[0x263F0CB30];
      v22[0] = v18;
      id v19 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 64)];
      v22[1] = v19;
      id v20 = [NSDictionary dictionaryWithObjects:v22 forKeys:v21 count:2];
      [v15 respondWithPayload:v20];
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        id v16 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v24 = v16;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Unable to find added home after running transaction to add home", buf, 0xCu);
      }
      id v17 = *(void **)(a1 + 48);
      id v18 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
      [v17 respondWithError:v18];
    }
  }
}

- (void)dmHandleRequestAddHome:(id)a3
{
  uint64_t v120 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kHomeName"];
  if (v5)
  {
    id v6 = [(HMDHomeManager *)self homes];
    unint64_t v7 = [v6 count];
    unint64_t v8 = maximumHomes;

    if (v7 < v8)
    {
      uint64_t v9 = [(HMDHomeManager *)self validateHomeName:v5];
      if (v9)
      {
        id v10 = (id)v9;
        [v4 respondWithError:v9];
LABEL_54:

        goto LABEL_55;
      }
      id v18 = [v4 uuidForKey:@"kNewObjectUUIDKey"];
      if (v18)
      {
        id v19 = +[HMDAppleAccountSettings sharedSettings];
        char v20 = [v19 isHomeEnabled];

        if (v20)
        {
          id v21 = objc_alloc(MEMORY[0x263F424F0]);
          uint64_t v22 = [NSString stringWithFormat:@"add home %@", v18];
          BOOL v23 = (void *)[v21 initWithName:v22];

          BOOL v100 = [(HMDHomeManager *)self hh2ControllerKey];
          if (!v100)
          {
            id v47 = (void *)MEMORY[0x230FBD990]();
            v48 = self;
            v49 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
            {
              v50 = HMFGetLogIdentifier();
              *(_DWORD *)buf = 138543362;
              id v115 = v50;
              _os_log_impl(&dword_22F52A000, v49, OS_LOG_TYPE_ERROR, "%{public}@Unable to get or create HH2 key.", buf, 0xCu);
            }
            BOOL v51 = [MEMORY[0x263F087E8] hmErrorWithCode:53];
            [v4 respondWithError:v51];
            id v10 = 0;
            goto LABEL_52;
          }
          v98 = v23;
          uint64_t v24 = +[HMDHomeManagerHomeModel deriveUUIDFromHomeUUID:v18];
          uint64_t v25 = [MEMORY[0x263F08C38] UUID];
          id v26 = [HMDHomeManagerHomeModel alloc];
          uint64_t v27 = [(HMDHomeManager *)self uuid];
          v97 = (void *)v24;
          __int16 v28 = [(HMDBackingStoreModelObject *)v26 initWithObjectChangeType:1 uuid:v24 parentUUID:v27];

          v96 = (void *)v25;
          id v29 = [[HMDHomeManagerHomeHandle alloc] initWithBackingStoreUUID:v25 homeUUID:v18];
          [(HMDHomeManagerHomeModel *)v28 setHandle:v29];

          v95 = v28;
          uint64_t v30 = [(HMDHomeManagerHomeModel *)v28 handle];
          id v113 = 0;
          id v31 = +[HMDBackingStore cdlsBackingStoreWithHandle:v30 error:&v113];
          id v10 = v113;

          v99 = v31;
          if (!v31)
          {
            [v4 respondWithError:v10];
            BOOL v51 = v97;
            id v52 = v95;
LABEL_51:

            BOOL v23 = v98;
LABEL_52:

            goto LABEL_53;
          }
          id v32 = [v31 homeManager];

          if (!v32) {
            [v31 setHomeManager:self];
          }
          BOOL v33 = [(HMDHomeManager *)self modelObjectWithChangeType:2];
          uint64_t v34 = [v33 primaryHomeUUID];
          if (!v34) {
            goto LABEL_18;
          }
          id v35 = (void *)v34;
          [(HMDHomeManager *)self homes];
          uint64_t v37 = v36 = v33;
          int v38 = objc_msgSend(v37, "hmf_isEmpty");

          BOOL v33 = v36;
          if (!v38)
          {
            char v40 = 0;
            v39 = v33;
            BOOL v33 = 0;
          }
          else
          {
LABEL_18:
            v39 = [v18 UUIDString];
            [v33 setPrimaryHomeUUID:v39];
            char v40 = 1;
          }

          uint64_t v53 = [(id)objc_opt_class() accountHandleForOwner];
          v94 = (void *)v53;
          if (!v53
            && !+[HMDHomeManager areWeAllowingHomeKitToRunWithoutCloudKitForHH2])
          {
            v71 = (void *)MEMORY[0x230FBD990]();
            __int16 v72 = self;
            uint64_t v73 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v75 = __int16 v74 = v33;
              *(_DWORD *)buf = 138543362;
              id v115 = v75;
              _os_log_impl(&dword_22F52A000, v73, OS_LOG_TYPE_ERROR, "%{public}@Unable to create home (cannot determine account handle for the owner).", buf, 0xCu);

              BOOL v33 = v74;
            }

            v64 = [MEMORY[0x263F087E8] hmErrorWithCode:75];
            [v4 respondWithError:v64];
            BOOL v51 = v97;
            id v52 = v95;
            goto LABEL_50;
          }
          char v93 = v40;
          id v54 = [[HMDUser alloc] initWithAccountHandle:v53 homeUUID:v18 pairingIdentity:v100 privilege:3];
          if (!_os_feature_enabled_impl())
          {
            [(HMDHomeManager *)self uuid];
            v66 = v65 = v33;
            uint64_t v67 = +[HMDHome createNewHomeModelsWithModelID:v18 parentModelID:v66 name:v5 acwgGroupResolvingKey:0 acwgIssuerPublicKeyExternalRepresentation:0 userUniqueIDForAccessories:0 ownedBy:v54];

            BOOL v33 = v65;
            LOBYTE(v87) = v93;
            id v68 = self;
            v69 = (void *)v67;
            v70 = v65;
            id v52 = v95;
            [(HMDHomeManager *)v68 runTransactionForAddHomeMessage:v4 withInitialHomeObjects:v67 homeManagerModel:v70 homeManagerHomeModel:v95 homeBackingStore:v99 homeUUID:v18 makeNewHomePrimaryHome:v87];
            BOOL v51 = v97;
            v64 = v54;
LABEL_49:

LABEL_50:
            goto LABEL_51;
          }
          v91 = v54;
          v92 = [MEMORY[0x263F42530] internalOnlyInitializer];
          v55 = (void *)MEMORY[0x230FBD990]();
          v56 = self;
          id v57 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            id v58 = v89 = v33;
            id v59 = [v92 UUID];
            *(_DWORD *)buf = 138543874;
            id v115 = v58;
            __int16 v116 = 2112;
            uint64_t v117 = v59;
            __int16 v118 = 2112;
            uint64_t v119 = v18;
            _os_log_impl(&dword_22F52A000, v57, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Creating ACWG keys for newly created home: %@", buf, 0x20u);

            BOOL v33 = v89;
          }

          id v90 = +[HMDACWGUtilities createGroupResolvingKey];
          if (v90)
          {
            uint64_t v60 = +[HMDHome createUserUniqueIDForAccessoriesWithoutDuplicatingExistingIDs:MEMORY[0x263EFFA68]];
            if (v60)
            {
              double v61 = (void *)v60;
              v88 = +[HMDACWGKeyManager shared];
              v101[0] = MEMORY[0x263EF8330];
              v101[1] = 3221225472;
              v101[2] = __51__HMDHomeManager_CoreData__dmHandleRequestAddHome___block_invoke;
              v101[3] = &unk_264A1AB58;
              v101[4] = v56;
              id v102 = v10;
              id v103 = v4;
              id v104 = v18;
              id v105 = v5;
              double v62 = v90;
              id v106 = v90;
              id v63 = v61;
              id v107 = v63;
              v64 = v91;
              v108 = v91;
              id v109 = v33;
              id v52 = v95;
              v110 = v95;
              id v111 = v99;
              char v112 = v93;
              [v88 getOrCreateIssuerKeyPairExternalRepresentationWithFlow:v92 completionHandler:v101];

LABEL_48:
              BOOL v51 = v97;
              v69 = v92;
              goto LABEL_49;
            }
            v81 = (void *)MEMORY[0x230FBD990]();
            double v82 = v56;
            v83 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v85 = v84 = v33;
              *(_DWORD *)buf = 138543362;
              id v115 = v85;
              _os_log_impl(&dword_22F52A000, v83, OS_LOG_TYPE_ERROR, "%{public}@Failed to create userUniqueIDForAccessories", buf, 0xCu);

              BOOL v33 = v84;
            }

            v86 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:9010 description:@"Failed to create userUniqueIDForAccessories. Try again." underlyingError:0];
            [v4 respondWithError:v86];

            id v63 = 0;
          }
          else
          {
            __int16 v76 = (void *)MEMORY[0x230FBD990]();
            double v77 = v56;
            uint64_t v78 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              id v80 = v79 = v33;
              *(_DWORD *)buf = 138543362;
              id v115 = v80;
              _os_log_impl(&dword_22F52A000, v78, OS_LOG_TYPE_ERROR, "%{public}@Failed to create ACWG group resolving key", buf, 0xCu);

              BOOL v33 = v79;
            }

            id v63 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:9010 description:@"Failed to create ACWG group resolving key - Security framework probably failed to find sufficient random data. Try again." underlyingError:0];
            [v4 respondWithError:v63];
          }
          id v52 = v95;
          double v62 = v90;
          v64 = v91;
          goto LABEL_48;
        }
        id v42 = (void *)MEMORY[0x230FBD990]();
        v43 = self;
        double v44 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          v45 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          id v115 = v45;
          _os_log_impl(&dword_22F52A000, v44, OS_LOG_TYPE_ERROR, "%{public}@iCloud switch is not enabled. Not allowing to create a new home", buf, 0xCu);
        }
        uint64_t v41 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2013];
      }
      else
      {
        uint64_t v41 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
      }
      v46 = (void *)v41;
      [v4 respondWithError:v41];

      id v10 = 0;
LABEL_53:

      goto LABEL_54;
    }
    uint64_t v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v115 = v16;
      __int16 v116 = 2112;
      uint64_t v117 = v5;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Can't add home %@; already at maximum homes",
        buf,
        0x16u);
    }
    id v11 = (void *)MEMORY[0x263F087E8];
    uint64_t v12 = 49;
  }
  else
  {
    id v11 = (void *)MEMORY[0x263F087E8];
    uint64_t v12 = 20;
  }
  id v17 = [v11 hmErrorWithCode:v12];
  [v4 respondWithError:v17];

LABEL_55:
}

void __51__HMDHomeManager_CoreData__dmHandleRequestAddHome___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    unint64_t v7 = +[HMDNIST256Utilities publicKeyExternalRepresentationFromKeyPairExternalRepresentation:v5];
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = [*(id *)(a1 + 32) uuid];
    id v10 = +[HMDHome createNewHomeModelsWithModelID:v8 parentModelID:v9 name:*(void *)(a1 + 64) acwgGroupResolvingKey:*(void *)(a1 + 72) acwgIssuerPublicKeyExternalRepresentation:v7 userUniqueIDForAccessories:*(void *)(a1 + 80) ownedBy:*(void *)(a1 + 88)];

    LOBYTE(v17) = *(unsigned char *)(a1 + 120);
    [*(id *)(a1 + 32) runTransactionForAddHomeMessage:*(void *)(a1 + 48) withInitialHomeObjects:v10 homeManagerModel:*(void *)(a1 + 96) homeManagerHomeModel:*(void *)(a1 + 104) homeBackingStore:*(void *)(a1 + 112) homeUUID:*(void *)(a1 + 56) makeNewHomePrimaryHome:v17];
  }
  else
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = *(id *)(a1 + 32);
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      uint64_t v15 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      id v19 = v14;
      __int16 v20 = 2112;
      uint64_t v21 = v15;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to create ACWG issuer key with error: %@", buf, 0x16u);
    }
    id v16 = *(void **)(a1 + 48);
    unint64_t v7 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:9010 underlyingError:v6];
    [v16 respondWithError:v7];
  }
}

+ (id)accountHandleForOwner
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (+[HMDHomeManager areWeAllowingHomeKitToRunWithoutCloudKitForHH2])
  {
    id v3 = NSString;
    id v4 = [MEMORY[0x263F08C38] UUID];
    id v5 = [v3 stringWithFormat:@"mailto:hh2_qa_%@_@apple.com", v4];

    id v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = a1;
    uint64_t v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      uint64_t v17 = v9;
      __int16 v18 = 2112;
      id v19 = v5;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Using : %@ for new home creation", buf, 0x16u);
    }
    id v10 = objc_alloc(MEMORY[0x263F4A0E8]);
    id v11 = (void *)MEMORY[0x230FBC250](v5);
    id v12 = (void *)[v10 initWithPrefixedURI:v11];

    uint64_t v13 = [[HMDAccountHandle alloc] initWithURI:v12];
  }
  else
  {
    id v5 = +[HMDAppleAccountManager sharedManager];
    uint64_t v14 = [v5 account];
    uint64_t v13 = [v14 primaryHandle];
  }
  return v13;
}

+ (void)makeSureHomeManagerExistInWorkingStore:(id)a3
{
  id v4 = (void *)[a3 newManagedObjectContext];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __67__HMDHomeManager_CoreData__makeSureHomeManagerExistInWorkingStore___block_invoke;
  v6[3] = &unk_264A2C6A0;
  id v7 = v4;
  id v8 = a1;
  id v5 = v4;
  [v5 performBlockAndWait:v6];
}

void __67__HMDHomeManager_CoreData__makeSureHomeManagerExistInWorkingStore___block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  id v17 = 0;
  id v3 = +[_MKFHomeManager fetchWithContext:v2 error:&v17];
  id v4 = v17;
  id v5 = v4;
  if (v3)
  {
    id v6 = v4;
  }
  else
  {
    id v7 = [[_MKFHomeManager alloc] initWithContext:*(void *)(a1 + 32)];
    id v8 = +[_MKFHomeManager defaultModelID];
    [(_MKFHomeManager *)v7 setModelID:v8];

    uint64_t v9 = *(void **)(a1 + 32);
    id v16 = v5;
    char v10 = [v9 save:&v16];
    id v6 = v16;

    uint64_t v11 = [*(id *)(a1 + 32) reset];
    if ((v10 & 1) == 0)
    {
      id v12 = (void *)MEMORY[0x230FBD990](v11);
      id v13 = *(id *)(a1 + 40);
      uint64_t v14 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v19 = v15;
        __int16 v20 = 2112;
        id v21 = v6;
        _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Unable to insert MKFHomeManager to working store: %@", buf, 0x16u);
      }
    }
  }
}

+ (id)setupCoreDataUsingBackingStore:(id)a3
{
  id v3 = a3;
  id v4 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:@"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"];
  id v15 = 0;
  id v5 = [v3 cdlsFetchObjectWithUUID:v4 ofModelType:objc_opt_class() error:&v15];
  id v6 = v15;
  id v7 = v6;
  if (v5)
  {
    id v8 = v5;
  }
  else
  {
    if (v6 && ![v6 code])
    {
      id v13 = (HMDCameraAudioParameterCombination *)_HMFPreconditionFailure();
      [(HMDCameraAudioParameterCombination *)v13 .cxx_destruct];
      return result;
    }
    uint64_t v9 = [(HMDBackingStoreModelObject *)[HMDHomeManagerModel alloc] initWithUUID:v4];
    [(HMDBackingStoreModelObject *)v9 setObjectChangeType:1];
    char v10 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v11 = [v3 transaction:@"Initial Home Manager Setup" options:v10];

    [v11 add:v9];
    [v11 run];
    id v8 = v9;
  }
  return v8;
}

- (id)userUUIDForMessage:(id)a3 homeUUID:(id)a4
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self _homeWithUUID:v7];
  if (v8)
  {
    uint64_t v9 = [v6 userForHome:v8];
    if (v9)
    {
      char v10 = (void *)MEMORY[0x230FBD990]();
      uint64_t v11 = self;
      id v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        id v13 = HMFGetLogIdentifier();
        int v20 = 138543874;
        id v21 = v13;
        __int16 v22 = 2112;
        id v23 = v9;
        __int16 v24 = 2112;
        id v25 = v6;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Getting user %@ from message %@", (uint8_t *)&v20, 0x20u);
      }
      SEL v14 = [v9 uuid];
    }
    else
    {
      SEL v14 = 0;
    }
  }
  else
  {
    id v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = self;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      __int16 v18 = HMFGetLogIdentifier();
      int v20 = 138543618;
      id v21 = v18;
      __int16 v22 = 2112;
      id v23 = v7;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to get user from message due to no home with uuid: %@", (uint8_t *)&v20, 0x16u);
    }
    SEL v14 = 0;
  }

  return v14;
}

- (void)enableUserListeningHistoryForHomeUUID:(id)a3 accessoryUUID:(id)a4 userUUID:(id)a5
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [(HMDHomeManager *)self _homeWithUUID:v8];
  id v12 = v11;
  if (v11)
  {
    [v11 enableUserListeningHistoryForAccessoryUUID:v9 userUUID:v10];
  }
  else
  {
    id v13 = (void *)MEMORY[0x230FBD990]();
    SEL v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      int v17 = 138543618;
      __int16 v18 = v16;
      __int16 v19 = 2112;
      id v20 = v8;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to enable ULH due to no home with uuid: %@", (uint8_t *)&v17, 0x16u);
    }
  }
}

- (id)hubAccessoriesWithHomeUUID:(id)a3 forSiriEndpointProfileMessageHandler:(id)a4
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self _homeWithUUID:v6];
  id v9 = v8;
  if (v8)
  {
    id v10 = [v8 hubAccessories];
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = self;
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      SEL v14 = HMFGetLogIdentifier();
      int v16 = 138543618;
      int v17 = v14;
      __int16 v18 = 2112;
      id v19 = v6;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to get hub accessories due to no home with uuid: %@", (uint8_t *)&v16, 0x16u);
    }
    id v10 = 0;
  }

  return v10;
}

- (id)accessoryWithHomeUUID:(id)a3 accessoryUUID:(id)a4
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self homes];
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 3221225472;
  void v21[2] = __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke;
  v21[3] = &unk_264A2B2D0;
  id v9 = v6;
  id v22 = v9;
  id v10 = objc_msgSend(v8, "na_firstObjectPassingTest:", v21);

  if (v10)
  {
    uint64_t v11 = [v10 accessories];
    id v12 = (void *)[v11 copy];

    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    v19[2] = __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke_20;
    v19[3] = &unk_264A27218;
    id v20 = v7;
    id v13 = objc_msgSend(v12, "na_firstObjectPassingTest:", v19);
  }
  else
  {
    SEL v14 = (void *)MEMORY[0x230FBD990]();
    id v15 = self;
    int v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v24 = v17;
      __int16 v25 = 2112;
      id v26 = v9;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Home is not found. homeUUID: %@", buf, 0x16u);
    }
    id v13 = 0;
  }

  return v13;
}

uint64_t __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 uuid];
  uint64_t v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v4;
}

uint64_t __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke_20(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = v4;
  if (v5)
  {
    id v6 = [v3 uuid];
    uint64_t v7 = objc_msgSend(v6, "hmf_isEqualToUUID:", *(void *)(a1 + 32));
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

- (void)applyOnboardingSelections:(id)a3 accessoryUUID:(id)a4 homeUUID:(id)a5 completion:(id)a6
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  SEL v14 = (void *)MEMORY[0x230FBD990]();
  id v15 = self;
  int v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    int v17 = HMFGetLogIdentifier();
    int v19 = 138543618;
    id v20 = v17;
    __int16 v21 = 2112;
    id v22 = v10;
    _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Apply onboarding selections to the controller manager: %@", (uint8_t *)&v19, 0x16u);
  }
  __int16 v18 = [(HMDHomeManager *)v15 compositeSettingsControllerManager];
  [v18 applyOnboardingSelections:v10 accessoryUUID:v11 homeUUID:v12 completion:v13];
}

- (void)setNeedsOnboardingCompleteWitHomeUUID:(id)a3 accessoryUUID:(id)a4 completion:(id)a5
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = (void (**)(id, void))a5;
  id v11 = [(HMDHomeManager *)self homes];
  v52[0] = MEMORY[0x263EF8330];
  v52[1] = 3221225472;
  v52[2] = __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke;
  v52[3] = &unk_264A2B2D0;
  id v12 = v8;
  id v53 = v12;
  id v13 = objc_msgSend(v11, "na_firstObjectPassingTest:", v52);

  if (v13)
  {
    SEL v14 = [v13 accessories];
    id v15 = (void *)[v14 copy];

    v50[0] = MEMORY[0x263EF8330];
    v50[1] = 3221225472;
    v50[2] = __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_12;
    v50[3] = &unk_264A27218;
    id v16 = v9;
    id v51 = v16;
    int v17 = objc_msgSend(v15, "na_firstObjectPassingTest:", v50);
    __int16 v18 = v17;
    if (v17)
    {
      id v46 = v9;
      id v19 = v17;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v20 = v19;
      }
      else {
        id v20 = 0;
      }
      id v21 = v20;

      uint64_t v22 = [v21 needsOnboarding];
      if (v22
        && (uint64_t v23 = (void *)v22,
            [v21 needsOnboarding],
            __int16 v24 = objc_claimAutoreleasedReturnValue(),
            uint64_t v25 = [v24 integerValue],
            v24,
            v23,
            v25 == 2))
      {
        id v26 = (void *)MEMORY[0x230FBD990]();
        uint64_t v27 = self;
        __int16 v28 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          id v29 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          v55 = v29;
          _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@Skipping needsOnboarding transaction since there's no change.", buf, 0xCu);
        }
        v10[2](v10, 0);
      }
      else
      {
        uint64_t v34 = (void *)MEMORY[0x230FBD990]();
        id v35 = self;
        v36 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          uint64_t v37 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          v55 = v37;
          _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_INFO, "%{public}@Starting Updating needsOnboarding", buf, 0xCu);
        }
        int v38 = [v13 backingStore];
        v39 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        char v40 = [v38 transaction:@"Updating needsOnboarding" options:v39];

        uint64_t v41 = [v21 transactionWithObjectChangeType:2];
        [v41 setNeedsOnboarding:&unk_26E471140];
        [v40 add:v41];
        v48[0] = MEMORY[0x263EF8330];
        v48[1] = 3221225472;
        v48[2] = __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_18;
        v48[3] = &unk_264A2EDE0;
        v48[4] = v35;
        v49 = v10;
        [v40 run:v48];
      }
      id v9 = v46;
    }
    else
    {
      id v42 = (void *)MEMORY[0x230FBD990]();
      v43 = self;
      double v44 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v45 = id v47 = v9;
        *(_DWORD *)buf = 138543618;
        v55 = v45;
        __int16 v56 = 2112;
        id v57 = v16;
        _os_log_impl(&dword_22F52A000, v44, OS_LOG_TYPE_ERROR, "%{public}@Accessory is not found. accessoryUUID: %@", buf, 0x16u);

        id v9 = v47;
      }

      id v21 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
      ((void (**)(id, id))v10)[2](v10, v21);
    }
  }
  else
  {
    uint64_t v30 = (void *)MEMORY[0x230FBD990]();
    id v31 = self;
    id v32 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      BOOL v33 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      v55 = v33;
      __int16 v56 = 2112;
      id v57 = v12;
      _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_ERROR, "%{public}@Home is not found. homeUUID: %@", buf, 0x16u);
    }
    id v15 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
    ((void (**)(id, void *))v10)[2](v10, v15);
  }
}

uint64_t __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 uuid];
  uint64_t v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v4;
}

uint64_t __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_12(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = v4;
  if (v5)
  {
    id v6 = [v3 uuid];
    uint64_t v7 = objc_msgSend(v6, "hmf_isEqualToUUID:", *(void *)(a1 + 32));
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_18(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  uint64_t v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      int v10 = 138543618;
      id v11 = v8;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@Updating needsOnboarding reported error: %@", (uint8_t *)&v10, 0x16u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    int v10 = 138543362;
    id v11 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating needsOnboarding success", (uint8_t *)&v10, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

- (id)needsOnboardingForHomeUUID:(id)a3 accessoryUUID:(id)a4
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self homes];
  v37[0] = MEMORY[0x263EF8330];
  v37[1] = 3221225472;
  v37[2] = __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke;
  v37[3] = &unk_264A2B2D0;
  id v9 = v6;
  id v38 = v9;
  int v10 = objc_msgSend(v8, "na_firstObjectPassingTest:", v37);

  if (v10)
  {
    id v11 = [v10 accessories];
    __int16 v12 = (void *)[v11 copy];

    uint64_t v32 = MEMORY[0x263EF8330];
    uint64_t v33 = 3221225472;
    uint64_t v34 = __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke_8;
    id v35 = &unk_264A27218;
    id v13 = v7;
    id v36 = v13;
    int v17 = objc_msgSend(v12, "na_firstObjectPassingTest:", &v32);
    if (v17)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        __int16 v18 = v17;
      }
      else {
        __int16 v18 = 0;
      }
      id v19 = v18;
      id v20 = objc_msgSend(v19, "needsOnboarding", v32, v33, v34, v35);

      if (v20) {
        BOOL v21 = [v20 integerValue] == 0;
      }
      else {
        BOOL v21 = 1;
      }
      id v26 = [NSNumber numberWithBool:v21];
    }
    else
    {
      uint64_t v27 = (void *)MEMORY[0x230FBD990](0, v14, v15, v16);
      __int16 v28 = self;
      id v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        uint64_t v30 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        char v40 = v30;
        __int16 v41 = 2112;
        id v42 = v13;
        _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Accessory is not found. accessoryUUID: %@", buf, 0x16u);
      }
      id v26 = (void *)MEMORY[0x263EFFA88];
    }
  }
  else
  {
    uint64_t v22 = (void *)MEMORY[0x230FBD990]();
    uint64_t v23 = self;
    __int16 v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      char v40 = v25;
      __int16 v41 = 2112;
      id v42 = v9;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Home is not found. homeUUID: %@", buf, 0x16u);
    }
    id v26 = 0;
  }

  return v26;
}

uint64_t __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 uuid];
  uint64_t v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v4;
}

uint64_t __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke_8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = v4;
  if (v5)
  {
    id v6 = [v3 uuid];
    uint64_t v7 = objc_msgSend(v6, "hmf_isEqualToUUID:", *(void *)(a1 + 32));
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

- (void)prepareForDiagnosticExtension:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    BOOL v21 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Triggering memory exception.", buf, 0xCu);
  }
  task_read_t v9 = *MEMORY[0x263EF8960];
  mach_port_t corpse_task_port = 0;
  if (task_generate_corpse(v9, &corpse_task_port))
  {
    int v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      __int16 v12 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      BOOL v21 = v12;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Failed to generate a corpse task for memory exception reporting.", buf, 0xCu);
    }
    id v13 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
    [v4 respondWithError:v13];
  }
  else
  {
    uint64_t v14 = [MEMORY[0x263F42618] processInfo];
    uint64_t v15 = [v14 executableURL];
    id v16 = [v15 path];
    [v16 UTF8String];
    int v17 = dispatch_get_global_queue(-32768, 0);
    id v18 = v4;
    ReportMemoryExceptionFromTask();

    id v13 = v18;
  }
}

void __69__HMDHomeManager_DiagnosticExtension__prepareForDiagnosticExtension___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]([*(id *)(a1 + 32) respondWithPayload:0 error:v3]);
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    int v7 = 138543618;
    id v8 = v6;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Memory exception reporting completed with error: %@", (uint8_t *)&v7, 0x16u);
  }
  mach_port_deallocate(*MEMORY[0x263EF8960], *(_DWORD *)(a1 + 40));
}

- (id)_homeFromIncomingInvitationWithIdentifier:(id)a3 invitationIdentifier:(id)a4 homeUUID:(id)a5
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [(HMDHomeManager *)self __homeContainingInviteWithIDSInvitationIdentifier:v8];
  __int16 v12 = (void *)v11;
  if (v9 && !v11)
  {
    __int16 v12 = [(HMDHomeManager *)self __homeContainingInviteWithInvitationIdentifier:v9];
  }
  if (!v12)
  {
    uint64_t v22 = [(HMDHomeManager *)self homes];
    __int16 v12 = objc_msgSend(v22, "hmf_firstObjectWithUUID:", v10);

    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = HMFGetOSLogHandle();
    BOOL v23 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (v12)
    {
      if (!v23) {
        goto LABEL_15;
      }
      int v17 = HMFGetLogIdentifier();
      id v18 = [v8 UUIDString];
      __int16 v24 = [v10 UUIDString];
      *(_DWORD *)buf = 138543874;
      id v29 = v17;
      __int16 v30 = 2112;
      id v31 = v18;
      __int16 v32 = 2112;
      uint64_t v33 = v24;
      uint64_t v25 = "%{public}@Did not find invitation %@ in any homes, cannot handle request. But did find home with corresponding homeUUID %@";
    }
    else
    {
      if (!v23) {
        goto LABEL_15;
      }
      int v17 = HMFGetLogIdentifier();
      id v18 = [v8 UUIDString];
      __int16 v24 = [v10 UUIDString];
      *(_DWORD *)buf = 138543874;
      id v29 = v17;
      __int16 v30 = 2112;
      id v31 = v18;
      __int16 v32 = 2112;
      uint64_t v33 = v24;
      uint64_t v25 = "%{public}@Did not find invitation %@ in any homes (requested: %@), cannot handle request.";
    }
    _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, v25, buf, 0x20u);

    goto LABEL_14;
  }
  id v13 = [v12 uuid];
  char v14 = objc_msgSend(v13, "hmf_isEqualToUUID:", v10);

  if (v14) {
    goto LABEL_16;
  }
  uint64_t v15 = (void *)MEMORY[0x230FBD990]();
  id v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    int v17 = HMFGetLogIdentifier();
    id v18 = [v8 UUIDString];
    id v19 = [v12 uuid];
    id v20 = [v19 UUIDString];
    [v10 UUIDString];
    BOOL v21 = v27 = v15;
    *(_DWORD *)buf = 138544130;
    id v29 = v17;
    __int16 v30 = 2112;
    id v31 = v18;
    __int16 v32 = 2112;
    uint64_t v33 = v20;
    __int16 v34 = 2112;
    id v35 = v21;
    _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Found invitation %@ in home %@ but was supposed to find it in %@. Dropping request.", buf, 0x2Au);

    uint64_t v15 = v27;
LABEL_14:
  }
LABEL_15:

  __int16 v12 = 0;
LABEL_16:

  return v12;
}

- (id)_homeFromIncomingInvitationWithIdentifier:(id)a3 homeUUID:(id)a4
{
  return [(HMDHomeManager *)self _homeFromIncomingInvitationWithIdentifier:a3 invitationIdentifier:0 homeUUID:a4];
}

- (id)__homeContainingInviteWithInvitationIdentifier:(id)a3
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v25 objects:v37 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v26;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v26 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        uint64_t v11 = [v10 invitationWithInvitationIdentifier:v4];
        if (v11)
        {
          id v13 = (void *)v11;
          char v14 = (void *)MEMORY[0x230FBD990]();
          uint64_t v15 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            id v16 = HMFGetLogIdentifier();
            BOOL v23 = [v13 idsInvitationUUID];
            int v17 = [v23 UUIDString];
            uint64_t v22 = [v13 identifier];
            id v18 = [v22 UUIDString];
            [v10 uuid];
            id v19 = v24 = v14;
            id v20 = [v19 UUIDString];
            *(_DWORD *)buf = 138544130;
            __int16 v30 = v16;
            __int16 v31 = 2112;
            __int16 v32 = v17;
            __int16 v33 = 2112;
            __int16 v34 = v18;
            __int16 v35 = 2112;
            uint64_t v36 = v20;
            _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Found matching invitatation with idsInviteID %@ homeInviteID %@ in home %@", buf, 0x2Au);

            char v14 = v24;
          }

          id v12 = v10;

          goto LABEL_13;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v25 objects:v37 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  id v12 = 0;
LABEL_13:

  return v12;
}

- (id)__homeContainingInviteWithIDSInvitationIdentifier:(id)a3
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v24 objects:v36 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v25;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v25 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        uint64_t v11 = [v10 invitationWithIDSInvitationIdentifier:v4];
        if (v11)
        {
          id v13 = (void *)v11;
          char v14 = (void *)MEMORY[0x230FBD990]();
          uint64_t v15 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            id v16 = HMFGetLogIdentifier();
            int v17 = [v4 UUIDString];
            uint64_t v22 = [v13 identifier];
            id v18 = [v22 UUIDString];
            id v19 = [v10 uuid];
            [v19 UUIDString];
            v20 = BOOL v23 = v14;
            *(_DWORD *)buf = 138544130;
            id v29 = v16;
            __int16 v30 = 2112;
            __int16 v31 = v17;
            __int16 v32 = 2112;
            __int16 v33 = v18;
            __int16 v34 = 2112;
            __int16 v35 = v20;
            _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Found matching invitatation with idsInviteID %@ homeInviteID %@ in home %@", buf, 0x2Au);

            char v14 = v23;
          }

          id v12 = v10;

          goto LABEL_13;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v24 objects:v36 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  id v12 = 0;
LABEL_13:

  return v12;
}

- (void)handleCancelRequestForIDSInvitationWithIdentifier:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (v4)
  {
    id v5 = [(HMDHomeManager *)self incomingInvitations];
    uint64_t v6 = objc_msgSend(v5, "hmf_firstObjectWithValue:forKeyPath:", v4, @"idsInvitationUUID");

    if (v6)
    {
      [(HMDHomeManager *)self _handleRequestToCancelHomeInvitation:v6 saveReason:@"cancelIDSReceivedInvite"];
    }
    else
    {
      id v10 = (void *)MEMORY[0x230FBD990]();
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        id v12 = HMFGetLogIdentifier();
        id v13 = [v4 UUIDString];
        int v14 = 138543618;
        uint64_t v15 = v12;
        __int16 v16 = 2112;
        int v17 = v13;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Invalid invite IDS identifier specified %@", (uint8_t *)&v14, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x230FBD990]();
    uint64_t v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = HMFGetLogIdentifier();
      int v14 = 138543362;
      uint64_t v15 = v9;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Cannot cancel invite, not IDS invite identifier specified.", (uint8_t *)&v14, 0xCu);
    }
  }
}

- (void)handleDeclineRequestForIDSInvitationWithIdentifier:(id)a3 fromAddress:(id)a4 homeUUID:(id)a5
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = [(HMDHomeManager *)self _homeFromIncomingInvitationWithIdentifier:v8 homeUUID:v10];
  id v12 = v11;
  if (v11)
  {
    [v11 handleDeclineRequestForIDSInvitationWithIdentifier:v8 fromAddress:v9];
  }
  else
  {
    id v13 = (void *)MEMORY[0x230FBD990]();
    int v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      __int16 v16 = [v8 UUIDString];
      int v17 = 138543618;
      uint64_t v18 = v15;
      __int16 v19 = 2112;
      id v20 = v16;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Did not find invitation %@ in any homes, cannot handle decline request.", (uint8_t *)&v17, 0x16u);
    }
  }
}

- (void)handleAcceptRequestForIDSInvitationWithIdentifier:(id)a3 homeUUID:(id)a4 payload:(id)a5 fromAddress:(id)a6 fromMergeID:(id)a7
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  int v17 = [(HMDHomeManager *)self workQueue];
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  v23[2] = __125__HMDHomeManager_IDSInvitations__handleAcceptRequestForIDSInvitationWithIdentifier_homeUUID_payload_fromAddress_fromMergeID___block_invoke;
  v23[3] = &unk_264A28EB0;
  id v24 = v14;
  long long v25 = self;
  id v26 = v12;
  id v27 = v13;
  id v28 = v15;
  id v29 = v16;
  id v18 = v16;
  id v19 = v15;
  id v20 = v13;
  id v21 = v12;
  id v22 = v14;
  dispatch_async(v17, v23);
}

void __125__HMDHomeManager_IDSInvitations__handleAcceptRequestForIDSInvitationWithIdentifier_homeUUID_payload_fromAddress_fromMergeID___block_invoke(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v2 = objc_alloc(MEMORY[0x263F08C38]);
  id v3 = objc_msgSend(*(id *)(a1 + 32), "hmf_stringForKey:", @"kInvitationIdentifierKey");
  id v4 = (void *)[v2 initWithUUIDString:v3];

  id v5 = [*(id *)(a1 + 40) _homeFromIncomingInvitationWithIdentifier:*(void *)(a1 + 48) invitationIdentifier:v4 homeUUID:*(void *)(a1 + 56)];
  if (v5)
  {
    uint64_t v6 = +[HMDAccountHandle accountHandleForDestination:*(void *)(a1 + 64)];
    uint64_t v7 = +[HMDUser userIDForAccountHandle:v6];
    id v8 = [*(id *)(a1 + 40) idsFirewallManager];
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 3221225472;
    v13[2] = __125__HMDHomeManager_IDSInvitations__handleAcceptRequestForIDSInvitationWithIdentifier_homeUUID_payload_fromAddress_fromMergeID___block_invoke_3;
    v13[3] = &unk_264A1C158;
    v13[4] = *(void *)(a1 + 40);
    id v14 = *(id *)(a1 + 64);
    id v15 = v5;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 32);
    id v18 = *(id *)(a1 + 72);
    [v8 handleDidAddUserWithUserID:v7 completion:v13];
  }
  else
  {
    id v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      id v12 = [*(id *)(a1 + 48) UUIDString];
      *(_DWORD *)buf = 138543618;
      id v20 = v11;
      __int16 v21 = 2112;
      id v22 = v12;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Did not find invitation %@ in any homes, cannot handle accept request.", buf, 0x16u);
    }
  }
}

void __125__HMDHomeManager_IDSInvitations__handleAcceptRequestForIDSInvitationWithIdentifier_homeUUID_payload_fromAddress_fromMergeID___block_invoke_3(id *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = a1[4];
  uint64_t v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    id v8 = a1[5];
    *(_DWORD *)buf = 138543874;
    id v17 = v7;
    __int16 v18 = 2114;
    id v19 = v8;
    __int16 v20 = 2114;
    id v21 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@IDS firewall user donation completed for userID %{public}@ with error %{public}@", buf, 0x20u);
  }
  id v9 = [a1[6] workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __125__HMDHomeManager_IDSInvitations__handleAcceptRequestForIDSInvitationWithIdentifier_homeUUID_payload_fromAddress_fromMergeID___block_invoke_4;
  block[3] = &unk_264A2E908;
  id v11 = a1[6];
  id v12 = a1[7];
  id v13 = a1[8];
  id v14 = a1[5];
  id v15 = a1[9];
  dispatch_async(v9, block);
}

uint64_t __125__HMDHomeManager_IDSInvitations__handleAcceptRequestForIDSInvitationWithIdentifier_homeUUID_payload_fromAddress_fromMergeID___block_invoke_4(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleAcceptRequestForIDSInvitationWithIdentifier:*(void *)(a1 + 40) payload:*(void *)(a1 + 48) fromAddress:*(void *)(a1 + 56) fromMergeID:*(void *)(a1 + 64)];
}

- (void)handleReceivedIDSInviteFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6
{
  id v10 = a5;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  v12[2] = __109__HMDHomeManager_IDSInvitations__handleReceivedIDSInviteFromAccount_mergeID_idsInvitationIdentifier_payload___block_invoke;
  v12[3] = &unk_264A2F0C8;
  id v13 = v10;
  id v11 = v10;
  [(HMDHomeManager *)self _handleAccessHomeInviteFromAccount:a3 mergeID:a4 idsInvitationIdentifier:v11 payload:a6 messageResponseHandler:v12];
}

void __109__HMDHomeManager_IDSInvitations__handleReceivedIDSInviteFromAccount_mergeID_idsInvitationIdentifier_payload___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = HMFGetOSLogHandle();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (v5)
  {
    if (v9)
    {
      id v10 = HMFGetLogIdentifier();
      uint64_t v11 = *(void *)(a1 + 32);
      int v16 = 138543874;
      id v17 = v10;
      __int16 v18 = 2112;
      uint64_t v19 = v11;
      __int16 v20 = 2112;
      id v21 = v5;
      id v12 = "%{public}@Could not process received ids invitation %@ due to error %@";
      id v13 = v8;
      uint32_t v14 = 32;
LABEL_6:
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v16, v14);
    }
  }
  else if (v9)
  {
    id v10 = HMFGetLogIdentifier();
    uint64_t v15 = *(void *)(a1 + 32);
    int v16 = 138543618;
    id v17 = v10;
    __int16 v18 = 2112;
    uint64_t v19 = v15;
    id v12 = "%{public}@Successfully processed received ids invitation %@.";
    id v13 = v8;
    uint32_t v14 = 22;
    goto LABEL_6;
  }
}

- (void)autoAddWalletKeysOncePerDeviceSetup
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v23 = objc_alloc_init(HMDHomeWalletDataSource);
  id v21 = [(HMDHomeWalletDataSource *)v23 numberValueFromNoBackupStoreWithKey:@"HMDHomeManagerRecordInitialWalletKeysOncePerDevice"];
  if (([v21 BOOLValue] & 1) == 0)
  {
    id v3 = [HMDWalletPassLibrary alloc];
    id v4 = [(HMDHomeManager *)self workQueue];
    id v5 = [(HMDWalletPassLibrary *)v3 initWithWorkQueue:v4];

    id v6 = +[HMDHomeKeyDataRecorder sharedRecorder];
    uint64_t v7 = [(HMDWalletPassLibrary *)v5 walletKeys];
    id v8 = [v7 allObjects];
    [v6 recordInitialWalletKeys:v8];

    [(HMDHomeWalletDataSource *)v23 persistNumberValueToNoBackupStore:MEMORY[0x263EFFA88] withKey:@"HMDHomeManagerRecordInitialWalletKeysOncePerDevice"];
  }
  BOOL v9 = [MEMORY[0x263F42530] internalOnlyInitializer];
  id v10 = (void *)MEMORY[0x230FBD990]();
  uint64_t v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    uint32_t v14 = [v9 UUID];
    *(_DWORD *)buf = 138543618;
    __int16 v34 = v13;
    __int16 v35 = 2112;
    uint64_t v36 = v14;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Auto add wallet keys once per device setup", buf, 0x16u);
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id obj = [(HMDHomeManager *)v11 homes];
  uint64_t v15 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v29 != v17) {
          objc_enumerationMutation(obj);
        }
        uint64_t v19 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        __int16 v20 = [v19 workQueue];
        block[0] = MEMORY[0x263EF8330];
        block[1] = 3221225472;
        block[2] = __61__HMDHomeManager_Wallet__autoAddWalletKeysOncePerDeviceSetup__block_invoke;
        block[3] = &unk_264A2E610;
        void block[4] = v19;
        long long v25 = v23;
        id v26 = v11;
        id v27 = v9;
        dispatch_async(v20, block);
      }
      uint64_t v16 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
    }
    while (v16);
  }
}

void __61__HMDHomeManager_Wallet__autoAddWalletKeysOncePerDeviceSetup__block_invoke(id *a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x263F08C38];
  id v3 = [a1[4] uuid];
  id v4 = [@"D4F5EA54-226C-44B6-B7CD-45DA59BE5B1F" dataUsingEncoding:4];
  id v5 = objc_msgSend(v2, "hmf_UUIDWithNamespace:data:", v3, v4);
  id v6 = [v5 UUIDString];

  uint64_t v7 = [a1[5] numberValueFromNoBackupStoreWithKey:v6];
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = a1[6];
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    id v12 = [a1[7] UUID];
    id v13 = a1[4];
    int v26 = 138544130;
    id v27 = v11;
    __int16 v28 = 2112;
    long long v29 = v12;
    __int16 v30 = 2112;
    id v31 = v13;
    __int16 v32 = 2112;
    __int16 v33 = v6;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Auto add wallet key preference key for home %@:%@", (uint8_t *)&v26, 0x2Au);
  }
  int v14 = [v7 BOOLValue];
  uint64_t v15 = (void *)MEMORY[0x230FBD990]();
  id v16 = a1[6];
  uint64_t v17 = HMFGetOSLogHandle();
  BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
  if (v14)
  {
    if (v18)
    {
      uint64_t v19 = HMFGetLogIdentifier();
      __int16 v20 = [a1[7] UUID];
      id v21 = a1[4];
      int v26 = 138543874;
      id v27 = v19;
      __int16 v28 = 2112;
      long long v29 = v20;
      __int16 v30 = 2112;
      id v31 = v21;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Already auto added wallet key once per device setup for home: %@", (uint8_t *)&v26, 0x20u);
    }
  }
  else
  {
    if (v18)
    {
      uint64_t v22 = HMFGetLogIdentifier();
      uint64_t v23 = [a1[7] UUID];
      id v24 = a1[4];
      int v26 = 138543874;
      id v27 = v22;
      __int16 v28 = 2112;
      long long v29 = v23;
      __int16 v30 = 2112;
      id v31 = v24;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Auto adding wallet key once per device setup for home: %@", (uint8_t *)&v26, 0x20u);
    }
    long long v25 = [a1[4] walletKeyManager];
    [v25 autoAddWalletKeyWithFlow:a1[7]];

    [a1[5] persistNumberValueToNoBackupStore:MEMORY[0x263EFFA88] withKey:v6];
  }
}

- (void)removeHomeWalletKeysExcludingSerialNumbers:(id)a3 flow:(id)a4
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  id v40 = a3;
  id v39 = a4;
  id v6 = (void *)MEMORY[0x230FBD990]();
  uint64_t v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    id v10 = [v39 UUID];
    *(_DWORD *)buf = 138543874;
    id v47 = v9;
    __int16 v48 = 2112;
    v49 = v10;
    __int16 v50 = 2112;
    id v51 = v40;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Removing home wallet keys with serial number not in: %@", buf, 0x20u);
  }
  uint64_t v11 = [HMDWalletPassLibrary alloc];
  id v12 = [(HMDHomeManager *)v7 workQueue];
  id v13 = [(HMDWalletPassLibrary *)v11 initWithWorkQueue:v12];

  uint64_t v37 = v13;
  int v14 = [(HMDWalletPassLibrary *)v13 walletKeys];
  uint64_t v15 = (void *)MEMORY[0x230FBD990]();
  id v16 = v7;
  uint64_t v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    BOOL v18 = HMFGetLogIdentifier();
    uint64_t v19 = [v39 UUID];
    *(_DWORD *)buf = 138543874;
    id v47 = v18;
    __int16 v48 = 2112;
    v49 = v19;
    __int16 v50 = 2112;
    id v51 = v14;
    _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Existing home keys in wallet: %@", buf, 0x20u);
  }
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id obj = v14;
  uint64_t v20 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
  if (v20)
  {
    uint64_t v22 = v20;
    uint64_t v23 = *(void *)v42;
    *(void *)&long long v21 = 138543874;
    long long v36 = v21;
    do
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (*(void *)v42 != v23) {
          objc_enumerationMutation(obj);
        }
        long long v25 = *(void **)(*((void *)&v41 + 1) + 8 * i);
        int v26 = objc_msgSend(v25, "serialNumber", v36);
        char v27 = [v40 containsObject:v26];

        if ((v27 & 1) == 0)
        {
          __int16 v28 = (void *)MEMORY[0x230FBD990]();
          long long v29 = v16;
          __int16 v30 = v16;
          id v31 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            __int16 v32 = HMFGetLogIdentifier();
            __int16 v33 = [v39 UUID];
            *(_DWORD *)buf = v36;
            id v47 = v32;
            __int16 v48 = 2112;
            v49 = v33;
            __int16 v50 = 2112;
            id v51 = v25;
            _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Removing wallet key that doesn't belong to any home: %@", buf, 0x20u);
          }
          uint64_t v34 = [v25 typeIdentifier];
          __int16 v35 = [v25 serialNumber];
          [(HMDWalletPassLibrary *)v37 removePassWithTypeIdentifier:v34 serialNumber:v35 flow:v39];

          id v16 = v29;
        }
      }
      uint64_t v22 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
    }
    while (v22);
  }
}

- (NSSet)homeUUIDsWithAutoAddWalletKeySuppressed
{
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  id v4 = [(HMDHomeManager *)self homeUUIDsWithAutoAddWalletKeySuppressedSync];
  os_unfair_lock_unlock(p_lock);
  return (NSSet *)v4;
}

- (void)handleXPCConnectionDeactivatedNotification:(id)a3
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 userInfo];
  id v6 = [v5 objectForKeyedSubscript:@"connection"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = v7;

  if (!v8) {
    _HMFPreconditionFailure();
  }
  id v9 = (void *)MEMORY[0x230FBD990]();
  id v10 = self;
  uint64_t v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    id v12 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v31 = v12;
    __int16 v32 = 2112;
    id v33 = v8;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Handling wallet key assertion when xpc connection was removed: %@", buf, 0x16u);
  }
  os_unfair_lock_lock_with_options();
  id v13 = [(HMDHomeManager *)v10 homeUUIDsWithAutoAddWalletKeySuppressedSync];
  int v14 = (void *)[v13 mutableCopy];

  uint64_t v15 = [(HMDHomeManager *)v10 homeUUIDsByWalletKeyAssertionXPCConnection];
  [v15 removeObjectForKey:v8];

  id v16 = [(HMDHomeManager *)v10 homeUUIDsWithAutoAddWalletKeySuppressedSync];
  [v14 minusSet:v16];

  os_unfair_lock_unlock(&v10->_lock);
  uint64_t v17 = (void *)MEMORY[0x230FBD990]();
  BOOL v18 = v10;
  uint64_t v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    uint64_t v20 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v31 = v20;
    __int16 v32 = 2112;
    id v33 = v14;
    _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Auto adding wallet key for homes with uuids: %@, when xpc connection was removed", buf, 0x16u);
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v21 = v14;
  uint64_t v22 = [v21 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v22)
  {
    uint64_t v23 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (*(void *)v26 != v23) {
          objc_enumerationMutation(v21);
        }
        [(HMDHomeManager *)v18 addWalletKeyWithHomeUUID:*(void *)(*((void *)&v25 + 1) + 8 * i), @"connection removed", (void)v25 reason];
      }
      uint64_t v22 = [v21 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v22);
  }
}

- (id)homeUUIDsWithAutoAddWalletKeySuppressedSync
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  os_unfair_lock_assert_owner(&self->_lock);
  id v3 = [MEMORY[0x263EFF9C0] set];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = [(HMDHomeManager *)self homeUUIDsByWalletKeyAssertionXPCConnection];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        id v10 = [(HMDHomeManager *)self homeUUIDsByWalletKeyAssertionXPCConnection];
        uint64_t v11 = [v10 objectForKey:v9];
        id v12 = [v11 allObjects];
        [v3 addObjectsFromArray:v12];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  id v13 = (void *)[v3 copy];
  return v13;
}

- (void)addWalletKeyWithHomeUUID:(id)a3 reason:(id)a4
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self _homeWithUUID:v6];
  if (v8)
  {
    uint64_t v9 = [MEMORY[0x263F42530] internalOnlyInitializer];
    id v10 = (void *)MEMORY[0x230FBD990]();
    uint64_t v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int v14 = [v9 UUID];
      *(_DWORD *)buf = 138544130;
      long long v25 = v13;
      __int16 v26 = 2112;
      id v27 = v14;
      __int16 v28 = 2112;
      id v29 = v6;
      __int16 v30 = 2112;
      id v31 = v7;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Auto adding for wallet key for home with uuid: %@ reason: %@", buf, 0x2Au);
    }
    long long v15 = [v8 workQueue];
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 3221225472;
    void v21[2] = __58__HMDHomeManager_Wallet__addWalletKeyWithHomeUUID_reason___block_invoke;
    v21[3] = &unk_264A2F820;
    id v22 = v8;
    id v23 = v9;
    id v16 = v9;
    dispatch_async(v15, v21);
  }
  else
  {
    long long v17 = (void *)MEMORY[0x230FBD990]();
    long long v18 = self;
    uint64_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543874;
      long long v25 = v20;
      __int16 v26 = 2112;
      id v27 = v6;
      __int16 v28 = 2112;
      id v29 = v7;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Not auto adding wallet key for home with uuid: %@ reason: %@", buf, 0x20u);
    }
  }
}

void __58__HMDHomeManager_Wallet__addWalletKeyWithHomeUUID_reason___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) walletKeyManager];
  [v2 autoAddWalletKeyWithFlow:*(void *)(a1 + 40)];
}

- (void)handleAutoAddWalletKeySupressionAssertionReleaseMessage:(id)a3
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    id v10 = [v4 messagePayload];
    int v42 = 138543874;
    long long v43 = v9;
    __int16 v44 = 2112;
    id v45 = v4;
    __int16 v46 = 2112;
    id v47 = v10;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Handling auto add wallet key suppression assertion release message: %@, payload: %@", (uint8_t *)&v42, 0x20u);
  }
  uint64_t v11 = [v4 transport];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v12 = v11;
  }
  else {
    id v12 = 0;
  }
  id v13 = v12;

  if (v13)
  {
    int v14 = [v4 uuidForKey:*MEMORY[0x263F0CB68]];
    if (v14)
    {
      os_unfair_lock_lock_with_options();
      long long v15 = [(HMDHomeManager *)v7 homeUUIDsByWalletKeyAssertionXPCConnection];
      id v16 = [v15 objectForKey:v13];

      int v17 = [v16 containsObject:v14];
      char v18 = v17;
      if (v17) {
        [v16 removeObject:v14];
      }
      uint64_t v19 = [(HMDHomeManager *)v7 homeUUIDsWithAutoAddWalletKeySuppressedSync];
      int v20 = [v19 containsObject:v14];

      os_unfair_lock_unlock(&v7->_lock);
      if (v18)
      {
        uint64_t v21 = [v4 respondWithSuccess];
        if (v20)
        {
          id v22 = (void *)MEMORY[0x230FBD990](v21);
          id v23 = v7;
          id v24 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            long long v25 = HMFGetLogIdentifier();
            int v42 = 138543618;
            long long v43 = v25;
            __int16 v44 = 2112;
            id v45 = v14;
            _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Not auto adding wallet key for home with uuid: %@ after assertion was released because of some other pending assertion", (uint8_t *)&v42, 0x16u);
          }
        }
        else
        {
          [(HMDHomeManager *)v7 addWalletKeyWithHomeUUID:v14 reason:@"assertion released"];
        }
      }
      else
      {
        uint64_t v37 = (void *)MEMORY[0x230FBD990]();
        uint64_t v38 = v7;
        id v39 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          id v40 = HMFGetLogIdentifier();
          int v42 = 138543874;
          long long v43 = v40;
          __int16 v44 = 2112;
          id v45 = v14;
          __int16 v46 = 2112;
          id v47 = v13;
          _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_INFO, "%{public}@Could not find any any assertion for home with uuid: %@ for connection: %@", (uint8_t *)&v42, 0x20u);
        }
        long long v41 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
        [v4 respondWithError:v41];
      }
    }
    else
    {
      id v31 = (void *)MEMORY[0x230FBD990]();
      uint64_t v32 = v7;
      id v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = HMFGetLogIdentifier();
        __int16 v35 = [v4 messagePayload];
        int v42 = 138543618;
        long long v43 = v34;
        __int16 v44 = 2112;
        id v45 = v35;
        _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_ERROR, "%{public}@Missing home uuid parameter in message payload: %@", (uint8_t *)&v42, 0x16u);
      }
      long long v36 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      [v4 respondWithError:v36];

      int v14 = 0;
    }
  }
  else
  {
    __int16 v26 = (void *)MEMORY[0x230FBD990]();
    id v27 = v7;
    __int16 v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      id v29 = HMFGetLogIdentifier();
      __int16 v30 = [v4 transport];
      int v42 = 138543618;
      long long v43 = v29;
      __int16 v44 = 2112;
      id v45 = v30;
      _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_ERROR, "%{public}@Received auto add wallet key suppression assertion release message from unknown transport: %@", (uint8_t *)&v42, 0x16u);
    }
    int v14 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
    [v4 respondWithError:v14];
  }
}

- (void)handleAutoAddWalletKeySupressionAssertionAcquireMessage:(id)a3
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    id v10 = [v4 messagePayload];
    int v30 = 138543874;
    id v31 = v9;
    __int16 v32 = 2112;
    id v33 = v4;
    __int16 v34 = 2112;
    __int16 v35 = v10;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Handling auto add wallet key suppression assertion acquire message: %@, payload: %@", (uint8_t *)&v30, 0x20u);
  }
  uint64_t v11 = [v4 transport];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v12 = v11;
  }
  else {
    id v12 = 0;
  }
  id v13 = v12;

  if (v13)
  {
    int v14 = [v4 uuidForKey:*MEMORY[0x263F0CB68]];
    if (v14)
    {
      p_lock = &v7->_lock;
      os_unfair_lock_lock_with_options();
      id v16 = [(HMDHomeManager *)v7 homeUUIDsByWalletKeyAssertionXPCConnection];
      int v17 = [v16 objectForKey:v13];

      if (!v17)
      {
        int v17 = [MEMORY[0x263EFF9C0] set];
        char v18 = [(HMDHomeManager *)v7 homeUUIDsByWalletKeyAssertionXPCConnection];
        [v18 setObject:v17 forKey:v13];
      }
      [v17 addObject:v14];

      os_unfair_lock_unlock(p_lock);
      [v4 respondWithSuccess];
    }
    else
    {
      id v24 = (void *)MEMORY[0x230FBD990]();
      long long v25 = v7;
      __int16 v26 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        id v27 = HMFGetLogIdentifier();
        __int16 v28 = [v4 messagePayload];
        int v30 = 138543618;
        id v31 = v27;
        __int16 v32 = 2112;
        id v33 = v28;
        _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_ERROR, "%{public}@Missing home uuid parameter in message payload: %@", (uint8_t *)&v30, 0x16u);
      }
      id v29 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      [v4 respondWithError:v29];

      int v14 = 0;
    }
  }
  else
  {
    uint64_t v19 = (void *)MEMORY[0x230FBD990]();
    int v20 = v7;
    uint64_t v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      id v22 = HMFGetLogIdentifier();
      id v23 = [v4 transport];
      int v30 = 138543618;
      id v31 = v22;
      __int16 v32 = 2112;
      id v33 = v23;
      _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@Received auto add wallet key suppression assertion acquire message from unknown transport: %@", (uint8_t *)&v30, 0x16u);
    }
    int v14 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
    [v4 respondWithError:v14];
  }
}

- (void)configureForWalletKey
{
  v12[1] = *MEMORY[0x263EF8340];
  id v3 = +[HMDXPCMessagePolicy policyWithEntitlements:131077];
  id v4 = [(HMDHomeManager *)self messageDispatcher];
  uint64_t v5 = *MEMORY[0x263F0C990];
  v12[0] = v3;
  id v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:v12 count:1];
  [v4 registerForMessage:v5 receiver:self policies:v6 selector:sel_handleAutoAddWalletKeySupressionAssertionAcquireMessage_];

  id v7 = [(HMDHomeManager *)self messageDispatcher];
  uint64_t v8 = *MEMORY[0x263F0C998];
  uint64_t v11 = v3;
  uint64_t v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v11 count:1];
  [v7 registerForMessage:v8 receiver:self policies:v9 selector:sel_handleAutoAddWalletKeySupressionAssertionReleaseMessage_];

  id v10 = [(HMDHomeManager *)self notificationCenter];
  [v10 addObserver:self selector:sel_handleXPCConnectionDeactivatedNotification_ name:@"HMDXPCClientConnectionDidDeactivateNotification" object:0];
}

- (void)_maybeCreateLegacyHomeAcceptedZone:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    v9[2] = __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke;
    v9[3] = &unk_264A1DFB0;
    v9[4] = self;
    id v10 = v4;
    id v5 = v4;
    [(HMDHomeManager *)self _queryLegacyHomeAndAcceptedZoneExists:v5 completion:v9];
  }
  else
  {
    uint64_t v6 = _HMFPreconditionFailure();
    __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke(v6, v7, v8);
  }
}

void __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke(uint64_t a1, char a2, int a3)
{
  v47[1] = *MEMORY[0x263EF8340];
  if ((a2 & 1) == 0)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      char v7 = HMFGetLogIdentifier();
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      id v40 = v7;
      __int16 v41 = 2112;
      uint64_t v42 = v10;
      uint64_t v9 = "%{public}@Skip creating home accepted zone since no legacy home %@ was found";
      goto LABEL_7;
    }
LABEL_8:

    return;
  }
  if (a3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      char v7 = HMFGetLogIdentifier();
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      id v40 = v7;
      __int16 v41 = 2112;
      uint64_t v42 = v8;
      uint64_t v9 = "%{public}@Skip creating home accepted zone for home %@ since it already exists";
LABEL_7:
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, v9, buf, 0x16u);

      goto LABEL_8;
    }
    goto LABEL_8;
  }
  uint64_t v11 = [*(id *)(a1 + 32) _legacyContainer];
  id v12 = [v11 privateCloudDatabase];
  id v13 = objc_alloc(MEMORY[0x263EFD7F8]);
  int v14 = [*(id *)(a1 + 32) _legacyHomeAcceptedZoneIDFromHomeUUID:*(void *)(a1 + 40)];
  long long v15 = (void *)[v13 initWithZoneID:v14];

  if (v15)
  {
    id v16 = objc_alloc(MEMORY[0x263EFD740]);
    v47[0] = v15;
    int v17 = [MEMORY[0x263EFF8C0] arrayWithObjects:v47 count:1];
    char v18 = (void *)[v16 initWithRecordZonesToSave:v17 recordZoneIDsToDelete:0];

    [v18 setDatabase:v12];
    uint64_t v19 = [v18 operationID];
    int v20 = (void *)MEMORY[0x230FBD990]();
    id v21 = *(id *)(a1 + 32);
    id v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v23 = v35 = v12;
      uint64_t v24 = *(void *)(a1 + 40);
      [v15 zoneID];
      long long v25 = v34 = v20;
      [v25 zoneName];
      __int16 v26 = v36 = v11;
      *(_DWORD *)buf = 138544130;
      id v40 = v23;
      __int16 v41 = 2112;
      uint64_t v42 = v24;
      __int16 v43 = 2112;
      __int16 v44 = v26;
      __int16 v45 = 2112;
      __int16 v46 = v19;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Saving legacy home accepted zone for home/zoneAccepted (%@/%@) with operation ID %@", buf, 0x2Au);

      uint64_t v11 = v36;
      int v20 = v34;

      id v12 = v35;
    }

    v37[0] = MEMORY[0x263EF8330];
    v37[1] = 3221225472;
    v37[2] = __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke_13;
    v37[3] = &unk_264A1DF88;
    void v37[4] = *(void *)(a1 + 32);
    id v38 = v19;
    id v27 = v19;
    [v18 setModifyRecordZonesCompletionBlock:v37];
    __int16 v28 = [v12 operationQueue];
    [v28 addOperation:v18];
  }
  else
  {
    id v29 = (void *)MEMORY[0x230FBD990]();
    id v30 = *(id *)(a1 + 32);
    id v31 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      __int16 v32 = HMFGetLogIdentifier();
      uint64_t v33 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      id v40 = v32;
      __int16 v41 = 2112;
      uint64_t v42 = v33;
      _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_INFO, "%{public}@Failed to determine legacy accepted zoneID for home %@", buf, 0x16u);
    }
  }
}

void __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke_13(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = *(id *)(a1 + 32);
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    uint64_t v14 = *(void *)(a1 + 40);
    int v15 = 138543874;
    id v16 = v13;
    __int16 v17 = 2112;
    uint64_t v18 = v14;
    __int16 v19 = 2112;
    id v20 = v9;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Completed saving legacy home accepted zone with operation ID %@ and error %@", (uint8_t *)&v15, 0x20u);
  }
}

- (void)_queryLegacyHomeAndAcceptedZoneExists:(id)a3 completion:(id)a4
{
  v45[2] = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  if (!v6) {
    _HMFPreconditionFailure();
  }
  id v8 = (void (**)(void, void, void))v7;
  id v9 = [(HMDHomeManager *)self _legacyContainer];
  uint64_t v10 = [v9 privateCloudDatabase];
  id v11 = [(HMDHomeManager *)self _legacyHomeZoneIDFromHomeUUID:v6];
  uint64_t v12 = [(HMDHomeManager *)self _legacyHomeAcceptedZoneIDFromHomeUUID:v6];
  id v13 = (void *)v12;
  if (v11 && v12)
  {
    id v31 = v9;
    id v14 = objc_alloc(MEMORY[0x263EFD6D0]);
    v45[0] = v11;
    v45[1] = v13;
    int v15 = [MEMORY[0x263EFF8C0] arrayWithObjects:v45 count:2];
    id v16 = (void *)[v14 initWithRecordZoneIDs:v15];

    id v30 = v10;
    [v16 setDatabase:v10];
    __int16 v17 = [v16 operationID];
    uint64_t v18 = (void *)MEMORY[0x230FBD990]();
    __int16 v19 = self;
    id v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      uint64_t v21 = v29 = v8;
      id v22 = [v11 zoneName];
      *(_DWORD *)buf = 138544130;
      id v38 = v21;
      __int16 v39 = 2112;
      id v40 = v6;
      __int16 v41 = 2112;
      uint64_t v42 = v22;
      __int16 v43 = 2112;
      __int16 v44 = v17;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Querying the legacy container for existing home/zone (%@/%@) with operation ID %@", buf, 0x2Au);

      id v8 = v29;
    }

    v32[0] = MEMORY[0x263EF8330];
    v32[1] = 3221225472;
    v32[2] = __83__HMDHomeManager_LegacyHomeZone___queryLegacyHomeAndAcceptedZoneExists_completion___block_invoke;
    v32[3] = &unk_264A1DF60;
    v32[4] = v19;
    id v33 = v17;
    id v34 = v11;
    id v35 = v13;
    uint64_t v36 = v8;
    id v23 = v17;
    [v16 setFetchRecordZonesCompletionBlock:v32];
    uint64_t v10 = v30;
    uint64_t v24 = [v30 operationQueue];
    [v24 addOperation:v16];

    id v9 = v31;
  }
  else
  {
    long long v25 = (void *)MEMORY[0x230FBD990]();
    __int16 v26 = self;
    id v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      __int16 v28 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v38 = v28;
      __int16 v39 = 2112;
      id v40 = v6;
      _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_INFO, "%{public}@Failed to determine legacy zoneID for home %@", buf, 0x16u);
    }
    v8[2](v8, 0, 0);
  }
}

void __83__HMDHomeManager_LegacyHomeZone___queryLegacyHomeAndAcceptedZoneExists_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    id v11 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138543874;
    long long v25 = v10;
    __int16 v26 = 2112;
    id v27 = v11;
    __int16 v28 = 2112;
    id v29 = v6;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Completed fetching record zone with operation ID %@ and error %@", buf, 0x20u);
  }
  if (v5)
  {
    [v5 objectForKeyedSubscript:*(void *)(a1 + 48)];

    [v5 objectForKeyedSubscript:*(void *)(a1 + 56)];
    uint64_t v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = *(id *)(a1 + 32);
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v23 = v6;
      int v15 = HMFGetLogIdentifier();
      id v16 = HMFBooleanToString();
      __int16 v17 = HMFBooleanToString();
      *(_DWORD *)buf = 138543874;
      long long v25 = v15;
      __int16 v26 = 2112;
      id v27 = v16;
      __int16 v28 = 2112;
      id v29 = v17;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Legacy home zone exists = %@ and legacy home accepted zone = %@", buf, 0x20u);

      id v6 = v23;
    }

    uint64_t v18 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
  }
  else
  {
    __int16 v19 = (void *)MEMORY[0x230FBD990]();
    id v20 = *(id *)(a1 + 32);
    uint64_t v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      id v22 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v25 = v22;
      _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@Failed to determine legacy zones returning that neither home zone or home accepted zone exist", buf, 0xCu);
    }
    uint64_t v18 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
  }
  v18();
}

- (id)_legacyHomeAcceptedZoneIDFromHomeUUID:(id)a3
{
  id v3 = a3;
  if (v3)
  {
    id v4 = v3;
    id v5 = +[HMDHome zoneIDFromHomeUUID:v3];
    id v6 = NSString;
    id v7 = [v5 UUIDString];
    id v8 = [v6 stringWithFormat:@"%@_accepted", v7];

    id v9 = objc_alloc(MEMORY[0x263EFD808]);
    uint64_t v10 = (void *)[v9 initWithZoneName:v8 ownerName:*MEMORY[0x263EFD488]];

    return v10;
  }
  else
  {
    uint64_t v12 = (HMDHomeManager *)_HMFPreconditionFailure();
    return [(HMDHomeManager *)v12 _legacyHomeZoneIDFromHomeUUID:v14];
  }
}

- (id)_legacyHomeZoneIDFromHomeUUID:(id)a3
{
  id v3 = a3;
  if (v3)
  {
    id v4 = v3;
    id v5 = +[HMDHome zoneIDFromHomeUUID:v3];
    id v6 = objc_alloc(MEMORY[0x263EFD808]);
    id v7 = [v5 UUIDString];
    id v8 = (void *)[v6 initWithZoneName:v7 ownerName:*MEMORY[0x263EFD488]];

    return v8;
  }
  else
  {
    uint64_t v10 = (HMDHomeManager *)_HMFPreconditionFailure();
    return [(HMDHomeManager *)v10 _legacyContainer];
  }
}

- (id)_legacyContainer
{
  id v2 = objc_alloc(MEMORY[0x263EFD620]);
  id v3 = (void *)[v2 initWithContainerIdentifier:@"com.apple.willow.config" environment:cloudKitContainerEnvironment];
  id v4 = (void *)[objc_alloc(MEMORY[0x263EFD610]) initWithContainerID:v3];

  return v4;
}

- (void)updatePowerAssertion
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self homes];
  uint64_t v4 = [v3 count];
  uint64_t v5 = objc_msgSend(v3, "na_any:", &__block_literal_global_128623);
  if (v4) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (void *)MEMORY[0x230FBD990](v5);
  id v8 = self;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    SEL v11 = HMFBooleanToString();
    int v13 = 138543618;
    id v14 = v10;
    __int16 v15 = 2112;
    id v16 = v11;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Setting network access required (power assertion) to %@", (uint8_t *)&v13, 0x16u);
  }
  uint64_t v12 = [(HMDHomeManager *)v8 powerManager];
  [v12 setNetworkAccessRequired:v6];
}

uint64_t __55__HMDHomeManager_PowerManagement__updatePowerAssertion__block_invoke(uint64_t a1, void *a2)
{
  id v2 = [a2 residentDeviceManager];
  id v3 = [v2 residentDevices];
  uint64_t v4 = objc_msgSend(v3, "na_any:", &__block_literal_global_3_128626);

  return v4;
}

uint64_t __55__HMDHomeManager_PowerManagement__updatePowerAssertion__block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 isCurrentDevice];
}

- (void)registerNotificationsForPowerManagement
{
  id v3 = [(HMDHomeManager *)self notificationCenter];
  [v3 addObserver:self selector:sel__updatePowerAssertion_ name:@"HMDHomeAddedNotification" object:0];

  uint64_t v4 = [(HMDHomeManager *)self notificationCenter];
  [v4 addObserver:self selector:sel__updatePowerAssertion_ name:@"HMDHomeRemovedNotification" object:0];

  uint64_t v5 = [(HMDHomeManager *)self notificationCenter];
  [v5 addObserver:self selector:sel__updatePowerAssertion_ name:@"HMDResidentDeviceManagerAddResidentNotification" object:0];

  id v6 = [(HMDHomeManager *)self notificationCenter];
  [v6 addObserver:self selector:sel__updatePowerAssertion_ name:@"HMDResidentDeviceManagerRemoveResidentNotification" object:0];
}

- (void)_pruneExpiredHomesNotYetMigrated
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self userDefaults];
  uint64_t v4 = [v3 objectForKey:@"HMDHomeManagerSharedHomesNotYetMigratedKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = v5;

  if (!v6)
  {
    id v31 = (void *)MEMORY[0x230FBD990]();
    __int16 v32 = self;
    id v33 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      id v34 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v51 = v34;
      _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_DEBUG, "%{public}@List of not yet migrated homes is empty.", buf, 0xCu);
    }
    goto LABEL_39;
  }
  id v7 = (void *)[v6 mutableCopy];
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id v44 = v6;
  id v8 = v6;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v46 objects:v54 count:16];
  if (!v9) {
    goto LABEL_23;
  }
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)v47;
  __int16 v45 = v7;
  do
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (*(void *)v47 != v11) {
        objc_enumerationMutation(v8);
      }
      uint64_t v13 = *(void *)(*((void *)&v46 + 1) + 8 * i);
      id v14 = [v8 objectForKeyedSubscript:v13];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        __int16 v15 = v14;
      }
      else {
        __int16 v15 = 0;
      }
      id v16 = v15;

      if (v16)
      {
        if (![(HMDHomeManager *)self _isMetadataExpiredForHomeAwaitingAutoAccept:v16])goto LABEL_21; {
        uint64_t v17 = (void *)MEMORY[0x230FBD990]();
        }
        uint64_t v18 = self;
        __int16 v19 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          id v20 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v51 = v20;
          __int16 v52 = 2112;
          uint64_t v53 = v13;
          uint64_t v21 = v19;
          id v22 = "%{public}@Removing %@ from list of not yet migrated homes.";
LABEL_19:
          _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, v22, buf, 0x16u);
        }
      }
      else
      {
        uint64_t v17 = (void *)MEMORY[0x230FBD990]();
        id v23 = self;
        __int16 v19 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          id v20 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v51 = v20;
          __int16 v52 = 2112;
          uint64_t v53 = v13;
          uint64_t v21 = v19;
          id v22 = "%{public}@Failed to parse stashed metadata for not yet migrated home %@, removing it.";
          goto LABEL_19;
        }
      }

      id v7 = v45;
      [v45 removeObjectForKey:v13];
LABEL_21:
    }
    uint64_t v10 = [v8 countByEnumeratingWithState:&v46 objects:v54 count:16];
  }
  while (v10);
LABEL_23:

  if (![v7 count])
  {
    id v35 = (void *)MEMORY[0x230FBD990]();
    uint64_t v36 = self;
    uint64_t v37 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      id v38 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v51 = v38;
      _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@All stashed metadata for homes not yet migrated is expired - purging.", buf, 0xCu);
    }
    __int16 v39 = [(HMDHomeManager *)v36 userDefaults];
    [v39 removeObjectForKey:@"HMDHomeManagerSharedHomesNotYetMigratedKey"];
    goto LABEL_37;
  }
  uint64_t v24 = [v7 count];
  uint64_t v25 = [v8 count];
  __int16 v26 = (void *)MEMORY[0x230FBD990]();
  id v27 = self;
  __int16 v28 = HMFGetOSLogHandle();
  BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
  if (v24 != v25)
  {
    if (v29)
    {
      id v40 = HMFGetLogIdentifier();
      uint64_t v41 = [v8 count];
      uint64_t v42 = [v7 count];
      *(_DWORD *)buf = 138543618;
      id v51 = v40;
      __int16 v52 = 2048;
      uint64_t v53 = v41 - v42;
      _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@Purging %lu expired metadata records for homes not yet migrated.", buf, 0x16u);
    }
    __int16 v39 = [(HMDHomeManager *)v27 userDefaults];
    __int16 v43 = (void *)[v7 copy];
    [v39 setObject:v43 forKey:@"HMDHomeManagerSharedHomesNotYetMigratedKey"];

LABEL_37:
    goto LABEL_38;
  }
  if (v29)
  {
    uint64_t v30 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v51 = v30;
    _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@No homes pending migration were expired, doing nothing.", buf, 0xCu);
  }
LABEL_38:

  id v6 = v44;
LABEL_39:
}

- (void)removeHomeFromSharedHomesNotYetMigrated:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __70__HMDHomeManager_SharedUser__removeHomeFromSharedHomesNotYetMigrated___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __70__HMDHomeManager_SharedUser__removeHomeFromSharedHomesNotYetMigrated___block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v2 = [*(id *)(a1 + 32) userDefaults];
  id v3 = [v2 objectForKey:@"HMDHomeManagerSharedHomesNotYetMigratedKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = *(id *)(a1 + 32);
  id v8 = HMFGetOSLogHandle();
  uint64_t v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = [v5 allKeys];
      int v20 = 138543874;
      uint64_t v21 = v10;
      __int16 v22 = 2112;
      uint64_t v23 = v11;
      __int16 v24 = 2112;
      uint64_t v25 = v12;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Removing %@ from list of homes not yet migrated: %@", (uint8_t *)&v20, 0x20u);
    }
    uint64_t v13 = (void *)[v5 mutableCopy];
    id v14 = [*(id *)(a1 + 40) UUIDString];
    [v13 removeObjectForKey:v14];

    uint64_t v15 = [v13 count];
    id v16 = [*(id *)(a1 + 32) userDefaults];
    uint64_t v17 = v16;
    if (v15)
    {
      uint64_t v18 = (void *)[v13 copy];
      [v17 setObject:v18 forKey:@"HMDHomeManagerSharedHomesNotYetMigratedKey"];
    }
    else
    {
      [v16 removeObjectForKey:@"HMDHomeManagerSharedHomesNotYetMigratedKey"];
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      __int16 v19 = HMFGetLogIdentifier();
      int v20 = 138543362;
      uint64_t v21 = v19;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEBUG, "%{public}@No home to remove from list of homes not yet migrated.", (uint8_t *)&v20, 0xCu);
    }
  }
}

- (void)_autoAcceptInviteIfReinvitation:(id)a3
{
  id v4 = a3;
  if (!isWatch())
  {
    objc_initWeak(&location, self);
    id v5 = [v4 homeUUID];
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = __62__HMDHomeManager_SharedUser___autoAcceptInviteIfReinvitation___block_invoke;
    v6[3] = &unk_264A21F48;
    objc_copyWeak(&v8, &location);
    id v7 = v4;
    [(HMDHomeManager *)self _queryLegacyHomeAndAcceptedZoneExists:v5 completion:v6];

    objc_destroyWeak(&v8);
    objc_destroyWeak(&location);
  }
}

void __62__HMDHomeManager_SharedUser___autoAcceptInviteIfReinvitation___block_invoke(uint64_t a1, int a2, int a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v7 = [*(id *)(a1 + 32) homeUUID];
    id v8 = [*(id *)(a1 + 32) inviterAccount];
    int v9 = [WeakRetained _isAutoAcceptMetadataPresentForHome:v7 owner:v8];

    uint64_t v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = WeakRetained;
    uint64_t v12 = HMFGetOSLogHandle();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
    if (a2 && (a3 & 1) == 0 && v9)
    {
      if (v13)
      {
        id v14 = HMFGetLogIdentifier();
        uint64_t v15 = [*(id *)(a1 + 32) homeUUID];
        id v16 = [v15 UUIDString];
        int v22 = 138543618;
        uint64_t v23 = v14;
        __int16 v24 = 2112;
        uint64_t v25 = v16;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Auto accept because legacy home zone exists for: %@", (uint8_t *)&v22, 0x16u);
      }
      uint64_t v17 = [*(id *)(a1 + 32) identifier];
      uint64_t v18 = [*(id *)(a1 + 32) homeUUID];
      __int16 v19 = [MEMORY[0x263F0E8C8] authWithValue:1];
      [v11 processRequestToUpdateHomeInvitation:v17 invitationState:3 homeUUID:v18 authStatus:v19 messageName:@"kUpdateInvitationStateRequestKey" message:0];
    }
    else
    {
      if (v13)
      {
        int v20 = HMFGetLogIdentifier();
        uint64_t v21 = [*(id *)(a1 + 32) homeUUID];
        int v22 = 138544386;
        uint64_t v23 = v20;
        __int16 v24 = 2112;
        uint64_t v25 = v21;
        __int16 v26 = 1024;
        int v27 = a2;
        __int16 v28 = 1024;
        int v29 = a3;
        __int16 v30 = 1024;
        int v31 = v9;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Not auto accepting invitation for home %@ (home zone exists: %d auto accept zone exists: %d local marker present: %d", (uint8_t *)&v22, 0x28u);
      }
    }
  }
}

- (BOOL)_isAutoAcceptMetadataPresentForHome:(id)a3 owner:(id)a4
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self userDefaults];
  int v9 = [v8 objectForKey:@"HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  id v11 = v10;

  uint64_t v12 = [v6 UUIDString];
  BOOL v13 = objc_msgSend(v11, "hmf_dictionaryForKey:", v12);

  if (v13)
  {
    id v14 = objc_msgSend(v13, "hmf_stringForKey:", @"HMDHomeManagerAutoAcceptOwnerMergeIDKey");
    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      int v26 = 138544130;
      int v27 = v18;
      __int16 v28 = 2112;
      id v29 = v14;
      __int16 v30 = 2112;
      id v31 = v7;
      __int16 v32 = 2112;
      id v33 = v13;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Looking for home metadata for merge id %@ in owner %@: %@", (uint8_t *)&v26, 0x2Au);
    }
    __int16 v19 = [v7 senderCorrelationIdentifier];
    char v20 = [v14 isEqual:v19];
  }
  else
  {
    uint64_t v21 = (void *)MEMORY[0x230FBD990]();
    int v22 = self;
    uint64_t v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      __int16 v24 = HMFGetLogIdentifier();
      int v26 = 138543618;
      int v27 = v24;
      __int16 v28 = 2112;
      id v29 = v6;
      _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@No stashed home metadata so can't auto accept for home %@", (uint8_t *)&v26, 0x16u);
    }
    char v20 = 0;
  }

  return v20;
}

- (void)removeHomeFromAwaitingAutoAcceptHomes:(id)a3
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self userDefaults];
  id v6 = [v5 objectForKey:@"HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }
  id v8 = v7;

  int v9 = (void *)MEMORY[0x230FBD990]();
  uint64_t v10 = self;
  id v11 = HMFGetOSLogHandle();
  uint64_t v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      BOOL v13 = HMFGetLogIdentifier();
      int v21 = 138543618;
      int v22 = v13;
      __int16 v23 = 2112;
      id v24 = v4;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Removing %@ from list of homes to ping about account upgrade.", (uint8_t *)&v21, 0x16u);
    }
    id v14 = (void *)[v8 mutableCopy];
    uint64_t v15 = [v4 UUIDString];
    [v14 removeObjectForKey:v15];

    uint64_t v16 = [v14 count];
    uint64_t v17 = [(HMDHomeManager *)v10 userDefaults];
    uint64_t v18 = v17;
    if (v16)
    {
      __int16 v19 = (void *)[v14 copy];
      [v18 setObject:v19 forKey:@"HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"];
    }
    else
    {
      [v17 removeObjectForKey:@"HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"];
    }
  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      char v20 = HMFGetLogIdentifier();
      int v21 = 138543362;
      int v22 = v20;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_DEBUG, "%{public}@No home owners to ping about upgrade to HH2, so no need to delete anything.", (uint8_t *)&v21, 0xCu);
    }
  }
}

- (BOOL)_isMetadataExpiredForHomeAwaitingAutoAccept:(id)a3
{
  id v3 = objc_msgSend(a3, "hmf_dateForKey:", @"HMDHomeManagerAutoAcceptMigrationDateKey");
  id v4 = v3;
  if (v3)
  {
    [v3 timeIntervalSinceNow];
    BOOL v6 = fabs(v5) > 5184000.0;
  }
  else
  {
    BOOL v6 = 1;
  }

  return v6;
}

- (id)_accountHandleFromMetadataForHomeAwaitingAutoAccept:(id)a3
{
  id v3 = objc_msgSend(a3, "hmf_stringForKey:", @"HMDHomeManagerAutoAcceptOwnerHandleKey");
  if (v3)
  {
    id v4 = +[HMDAccountHandle accountHandleForDestination:v3];
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

- (void)_pruneExpiredHomesAwaitingAutoAccept
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self userDefaults];
  id v4 = [v3 objectForKey:@"HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    double v5 = v4;
  }
  else {
    double v5 = 0;
  }
  id v6 = v5;

  if (!v6)
  {
    id v31 = (void *)MEMORY[0x230FBD990]();
    __int16 v32 = self;
    id v33 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v34 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v51 = v34;
      _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_DEBUG, "%{public}@No homes awaiting hh2 auto accept.", buf, 0xCu);
    }
    goto LABEL_39;
  }
  id v7 = (void *)[v6 mutableCopy];
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id v44 = v6;
  id v8 = v6;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v46 objects:v54 count:16];
  if (!v9) {
    goto LABEL_23;
  }
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)v47;
  __int16 v45 = v7;
  do
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (*(void *)v47 != v11) {
        objc_enumerationMutation(v8);
      }
      uint64_t v13 = *(void *)(*((void *)&v46 + 1) + 8 * i);
      id v14 = [v8 objectForKeyedSubscript:v13];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      id v16 = v15;

      if (v16)
      {
        if (![(HMDHomeManager *)self _isMetadataExpiredForHomeAwaitingAutoAccept:v16])goto LABEL_21; {
        uint64_t v17 = (void *)MEMORY[0x230FBD990]();
        }
        uint64_t v18 = self;
        __int16 v19 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          char v20 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v51 = v20;
          __int16 v52 = 2112;
          uint64_t v53 = v13;
          int v21 = v19;
          int v22 = "%{public}@Removing %@ from list of homes to ping about account upgrade.";
LABEL_19:
          _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, v22, buf, 0x16u);
        }
      }
      else
      {
        uint64_t v17 = (void *)MEMORY[0x230FBD990]();
        __int16 v23 = self;
        __int16 v19 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          char v20 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543618;
          id v51 = v20;
          __int16 v52 = 2112;
          uint64_t v53 = v13;
          int v21 = v19;
          int v22 = "%{public}@Failed to parse stashed metadata for %@, removing it.";
          goto LABEL_19;
        }
      }

      id v7 = v45;
      [v45 removeObjectForKey:v13];
LABEL_21:
    }
    uint64_t v10 = [v8 countByEnumeratingWithState:&v46 objects:v54 count:16];
  }
  while (v10);
LABEL_23:

  if (![v7 count])
  {
    id v35 = (void *)MEMORY[0x230FBD990]();
    uint64_t v36 = self;
    uint64_t v37 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      id v38 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v51 = v38;
      _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@All stashed metadata for homes awaiting auto accept is expired - purging.", buf, 0xCu);
    }
    __int16 v39 = [(HMDHomeManager *)v36 userDefaults];
    [v39 removeObjectForKey:@"HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"];
    goto LABEL_37;
  }
  uint64_t v24 = [v7 count];
  uint64_t v25 = [v8 count];
  int v26 = (void *)MEMORY[0x230FBD990]();
  int v27 = self;
  __int16 v28 = HMFGetOSLogHandle();
  BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
  if (v24 != v25)
  {
    if (v29)
    {
      id v40 = HMFGetLogIdentifier();
      uint64_t v41 = [v8 count];
      uint64_t v42 = [v7 count];
      *(_DWORD *)buf = 138543618;
      id v51 = v40;
      __int16 v52 = 2048;
      uint64_t v53 = v41 - v42;
      _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@Purging %lu expired metadata records for homes awaiting auto accept.", buf, 0x16u);
    }
    __int16 v39 = [(HMDHomeManager *)v27 userDefaults];
    __int16 v43 = (void *)[v7 copy];
    [v39 setObject:v43 forKey:@"HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"];

LABEL_37:
    goto LABEL_38;
  }
  if (v29)
  {
    __int16 v30 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v51 = v30;
    _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@No homes pending auto accept were expired, doing nothing.", buf, 0xCu);
  }
LABEL_38:

  id v6 = v44;
LABEL_39:
}

- (void)_sendOwnerPingMessageToAccountHandle:(id)a3
{
  id v4 = a3;
  double v5 = [HMDRemoteAccountMessageDestination alloc];
  id v6 = [(HMDHomeManager *)self uuid];
  id v7 = [(HMDRemoteAccountMessageDestination *)v5 initWithTarget:v6 handle:v4 multicast:1];

  [(HMDRemoteAccountMessageDestination *)v7 setRestrictToResidentCapable:1];
  id v8 = +[HMDRemoteMessage secureMessageWithName:@"HMDHomeManagerSharedUserMigratedToHH2MessageKey" destination:v7 messagePayload:MEMORY[0x263EFFA78]];
  uint64_t v9 = [(HMDHomeManager *)self messageDispatcher];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  v11[2] = __67__HMDHomeManager_SharedUser___sendOwnerPingMessageToAccountHandle___block_invoke;
  v11[3] = &unk_264A2F370;
  v11[4] = self;
  uint64_t v12 = v7;
  uint64_t v10 = v7;
  [v9 sendMessage:v8 completionHandler:v11];
}

void __67__HMDHomeManager_SharedUser___sendOwnerPingMessageToAccountHandle___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __67__HMDHomeManager_SharedUser___sendOwnerPingMessageToAccountHandle___block_invoke_2;
  block[3] = &unk_264A2F2F8;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v5;
  id v11 = v6;
  id v7 = v3;
  dispatch_async(v4, block);
}

void __67__HMDHomeManager_SharedUser___sendOwnerPingMessageToAccountHandle___block_invoke_2(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)MEMORY[0x230FBD990]();
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = HMFGetOSLogHandle();
  id v6 = v5;
  if (v2)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v7 = HMFGetLogIdentifier();
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 32);
      int v15 = 138543874;
      id v16 = v7;
      __int16 v17 = 2112;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = v9;
      uint64_t v10 = "%{public}@Failed to send account upgrade message to owner account %@ with error %@";
      id v11 = v6;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 32;
LABEL_6:
      _os_log_impl(&dword_22F52A000, v11, v12, v10, (uint8_t *)&v15, v13);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    uint64_t v14 = *(void *)(a1 + 48);
    int v15 = 138543618;
    id v16 = v7;
    __int16 v17 = 2112;
    uint64_t v18 = v14;
    uint64_t v10 = "%{public}@Sent account upgrade message to owner account %@";
    id v11 = v6;
    os_log_type_t v12 = OS_LOG_TYPE_INFO;
    uint32_t v13 = 22;
    goto LABEL_6;
  }
}

- (void)_maybeMessageOwnersOfFrameworkSwitch
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if ([(HMDHomeManager *)self isOwnerPingPending])
  {
    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = self;
    uint64_t v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v31 = v6;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Shared user account upgrade ping is already scheduled - not scheduling again.", buf, 0xCu);
    }
  }
  else
  {
    id v7 = [(HMDHomeManager *)self userDefaults];
    uint64_t v8 = [v7 objectForKey:@"HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    id v10 = v9;

    if (v10)
    {
      [(HMDHomeManager *)self setIsOwnerPingPending:1];
      id v11 = [MEMORY[0x263F42608] sharedPreferences];
      os_log_type_t v12 = [v11 preferenceForKey:@"NotifyOwnersOfFrameworkSwitchDelayInterval"];
      uint32_t v13 = [v12 numberValue];
      [v13 doubleValue];
      double v15 = v14;

      id v16 = (void *)MEMORY[0x230FBD990]();
      __int16 v17 = self;
      uint64_t v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        __int16 v19 = HMFGetLogIdentifier();
        uint64_t v20 = [NSNumber numberWithDouble:v15];
        *(_DWORD *)buf = 138543618;
        id v31 = v19;
        __int16 v32 = 2112;
        id v33 = v20;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Will ping owners in %@ seconds to indicate current account has migrated to HH2", buf, 0x16u);
      }
      dispatch_time_t v21 = dispatch_time(0xFFFFFFFFFFFFFFFELL, (uint64_t)(v15 * 1000000000.0));
      int v22 = [(HMDHomeManager *)v17 workQueue];
      v27[0] = MEMORY[0x263EF8330];
      v27[1] = 3221225472;
      v27[2] = __66__HMDHomeManager_SharedUser___maybeMessageOwnersOfFrameworkSwitch__block_invoke;
      v27[3] = &unk_264A2F820;
      id v28 = v10;
      BOOL v29 = v17;
      dispatch_after(v21, v22, v27);
    }
    else
    {
      __int16 v23 = (void *)MEMORY[0x230FBD990]();
      uint64_t v24 = self;
      uint64_t v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        int v26 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        id v31 = v26;
        _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_DEBUG, "%{public}@No owners to ping about upgrade to HH2.", buf, 0xCu);
      }
    }
  }
}

uint64_t __66__HMDHomeManager_SharedUser___maybeMessageOwnersOfFrameworkSwitch__block_invoke(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id obj = *(id *)(a1 + 32);
  uint64_t v2 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v26 = *(void *)v28;
    *(void *)&long long v3 = 138543618;
    long long v24 = v3;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v28 != v26) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        id v7 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6, v24);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = 0;
        }
        id v9 = v8;

        id v10 = [*(id *)(a1 + 40) _accountHandleFromMetadataForHomeAwaitingAutoAccept:v9];
        if (!v10)
        {
          uint64_t v18 = MEMORY[0x230FBD990]();
          id v19 = *(id *)(a1 + 40);
          uint64_t v20 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            dispatch_time_t v21 = HMFGetLogIdentifier();
            *(_DWORD *)buf = v24;
            __int16 v32 = v21;
            __int16 v33 = 2112;
            uint64_t v34 = v6;
            _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@Invalid owner destination specified for home %@ awaiting auto accept", buf, 0x16u);
          }
          __int16 v17 = (void *)v18;
          goto LABEL_17;
        }
        int v11 = [*(id *)(a1 + 40) _isMetadataExpiredForHomeAwaitingAutoAccept:v9];
        os_log_type_t v12 = (void *)MEMORY[0x230FBD990]();
        id v13 = *(id *)(a1 + 40);
        double v14 = HMFGetOSLogHandle();
        BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
        if (v11)
        {
          if (v15)
          {
            id v16 = HMFGetLogIdentifier();
            *(_DWORD *)buf = v24;
            __int16 v32 = v16;
            __int16 v33 = 2112;
            uint64_t v34 = v6;
            _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Metadata is expired for home %@ awaiting auto accept.", buf, 0x16u);
          }
          __int16 v17 = v12;
LABEL_17:
          goto LABEL_21;
        }
        if (v15)
        {
          int v22 = HMFGetLogIdentifier();
          *(_DWORD *)buf = v24;
          __int16 v32 = v22;
          __int16 v33 = 2112;
          uint64_t v34 = v10;
          _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Pinging owner %@ that the current account has migrated to HH2", buf, 0x16u);
        }
        [*(id *)(a1 + 40) _sendOwnerPingMessageToAccountHandle:v10];
LABEL_21:
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
    }
    while (v4);
  }

  return [*(id *)(a1 + 40) setIsOwnerPingPending:0];
}

- (void)determineDataSyncSateForHH2:(BOOL *)a3 homeManagerDataSyncState:(unint64_t *)a4 homeManagerStatus:(unint64_t *)a5
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!a3) {
    _HMFPreconditionFailure();
  }
  if ([(id)objc_opt_class() areWeAllowingHomeKitToRunWithoutCloudKitForHH2])
  {
    id v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = self;
    int v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      os_log_type_t v12 = HMFGetLogIdentifier();
      int v17 = 138543362;
      uint64_t v18 = v12;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Allowing HomeKit to run without CloudKit for HH2", (uint8_t *)&v17, 0xCu);
    }
    goto LABEL_6;
  }
  double v14 = [(HMDHomeManager *)self appleAccountManager];
  if (([v14 isLoggedInToPrimaryAccount] & 1) == 0)
  {

    goto LABEL_15;
  }
  BOOL v15 = +[HMDAppleAccountSettings sharedSettings];
  char v16 = [v15 isHomeEnabled];

  if ((v16 & 1) == 0)
  {
LABEL_15:
    *a3 = 0;
    if (!a4) {
      return;
    }
    unint64_t v13 = 3;
    goto LABEL_17;
  }
  if (![(HMDHomeManager *)self initialPCSStatusFetchCompleted])
  {
    if (a5) {
      *a5 = 1;
    }
    goto LABEL_21;
  }
  if ([(HMDHomeManager *)self pcsEnabled])
  {
    if ([(HMDHomeManager *)self daemonHasLoadedSceneGraph])
    {
LABEL_6:
      *a3 = 0;
      if (!a4) {
        return;
      }
      unint64_t v13 = 1;
      goto LABEL_17;
    }
LABEL_21:
    *a3 = 1;
    if (a4)
    {
      unint64_t v13 = 4;
LABEL_17:
      *a4 = v13;
      return;
    }
    return;
  }
  if (a5) {
    *a5 = 32;
  }
  *a3 = 1;
  if (a4)
  {
    unint64_t v13 = 6;
    goto LABEL_17;
  }
}

- (BOOL)daemonHasLoadedSceneGraph
{
  if (![(HMDHomeManager *)self startupHasCompleted]
    || ![(HMDHomeManager *)self deviceAccountHasSettled])
  {
    return 0;
  }
  return [(HMDHomeManager *)self firstCloudKitImportComplete];
}

- (void)initHomeManagerFrameworkNotify
{
  v30[2] = *MEMORY[0x263EF8340];
  [(HMDHomeManager *)self setStartupHasCompleted:0];
  [(HMDHomeManager *)self setDeviceAccountHasSettled:0];
  objc_initWeak(&location, self);
  long long v3 = [(HMDHomeManager *)self startupCompleted];
  uint64_t v4 = [(HMDHomeManager *)self workContext];
  v27[0] = MEMORY[0x263EF8330];
  v27[1] = 3221225472;
  v27[2] = __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke;
  v27[3] = &unk_264A2B1B0;
  objc_copyWeak(&v28, &location);
  id v5 = (id)[v3 inContext:v4 then:v27];

  id v6 = [(HMDHomeManager *)self appleAccountManager];
  id v7 = [v6 deviceAccountSettled];

  uint64_t v8 = [(HMDHomeManager *)self workContext];
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 3221225472;
  v25[2] = __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke_2;
  v25[3] = &unk_264A2B1B0;
  objc_copyWeak(&v26, &location);
  id v9 = (id)[v7 inContext:v8 then:v25];

  id v10 = (void *)MEMORY[0x263F42538];
  int v11 = [(HMDHomeManager *)self startupCompleted];
  v30[0] = v11;
  v30[1] = v7;
  os_log_type_t v12 = [MEMORY[0x263EFF8C0] arrayWithObjects:v30 count:2];
  unint64_t v13 = [v10 allSettled:v12];

  double v14 = [(HMDHomeManager *)self workContext];
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  v23[2] = __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke_3;
  v23[3] = &unk_264A2B1B0;
  objc_copyWeak(&v24, &location);
  id v15 = (id)[v13 inContext:v14 then:v23];

  char v16 = +[HMDMainDriver driver];
  int v17 = [v16 coreData];
  uint64_t v18 = [v17 firstCloudKitImportFuture];

  uint64_t v19 = [(HMDHomeManager *)self workContext];
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 3221225472;
  void v21[2] = __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke_11;
  v21[3] = &unk_264A2B1B0;
  objc_copyWeak(&v22, &location);
  id v20 = (id)[v18 inContext:v19 then:v21];

  objc_destroyWeak(&v22);
  objc_destroyWeak(&v24);

  objc_destroyWeak(&v26);
  objc_destroyWeak(&v28);
  objc_destroyWeak(&location);
}

uint64_t __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setStartupHasCompleted:1];

  return 1;
}

uint64_t __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke_2(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setDeviceAccountHasSettled:1];

  return 1;
}

uint64_t __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = WeakRetained;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    int v12 = 138543362;
    unint64_t v13 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Initial scene graph has loaded, allows kFetchConfiguration.", (uint8_t *)&v12, 0xCu);
  }
  id v9 = [MEMORY[0x263F08A00] defaultCenter];
  [v9 postNotificationName:@"kCloudDataSyncInProgressUpdatedNotification" object:0];

  id v10 = [v6 uuid];
  [v6 updateGenerationCounterWithReason:@"Initial Framework Notify Startup" sourceUUID:v10 shouldNotifyClients:0];

  return 1;
}

uint64_t __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke_11(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)MEMORY[0x230FBD990]([WeakRetained setFirstCloudKitImportComplete:1]);
  id v6 = WeakRetained;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v15 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@First CloudKit import complete, update status.", buf, 0xCu);
  }
  id v9 = [MEMORY[0x263F08A00] defaultCenter];
  int v12 = @"HMDHH2FirstCKImportFinished";
  uint64_t v13 = MEMORY[0x263EFFA88];
  id v10 = [NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
  [v9 postNotificationName:@"kCloudDataSyncInProgressUpdatedNotification" object:v6 userInfo:v10];

  return 1;
}

+ (BOOL)areWeAllowingHomeKitToRunWithoutCloudKitForHH2
{
  int v2 = isInternalBuild();
  if (v2)
  {
    if (areWeAllowingHomeKitToRunWithoutCloudKitForHH2__hmf_once_t2 != -1) {
      dispatch_once(&areWeAllowingHomeKitToRunWithoutCloudKitForHH2__hmf_once_t2, &__block_literal_global_165006);
    }
    LOBYTE(v2) = areWeAllowingHomeKitToRunWithoutCloudKitForHH2__hmf_once_v3 != 0;
  }
  return v2;
}

void __81__HMDHomeManager_FrameworkNotify__areWeAllowingHomeKitToRunWithoutCloudKitForHH2__block_invoke()
{
  id v1 = [MEMORY[0x263F42608] sharedPreferences];
  v0 = [v1 preferenceForKey:@"allowAccessWithoutCloudKit"];
  areWeAllowingHomeKitToRunWithoutCloudKitForHH2__hmf_once_id v3 = [v0 BOOLValue];
}

- (id)_mediaRouteIdentifierForAccessory:(id)a3
{
  id v3 = [(HMDHomeManager *)self accessoryWithUUID:a3];
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = [v3 identifier];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

- (id)_decodeDiagnosticInfoFromLocalResponse:(id)a3
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = objc_msgSend(v4, "hmf_dataForKey:", *MEMORY[0x263F0CA18]);
  if (v5)
  {
    id v6 = (void *)[objc_alloc(MEMORY[0x263F0DF70]) initWithData:v5];
  }
  else
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    uint64_t v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      uint64_t v11 = *MEMORY[0x263F0C660];
      int v13 = 138543618;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = v11;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Response does not contain key %@", (uint8_t *)&v13, 0x16u);
    }
    id v6 = 0;
  }

  return v6;
}

- (id)_diagnosticInfoFromRemoteResponse:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = *MEMORY[0x263F0C660];
  id v6 = objc_msgSend(v4, "hmf_dataForKey:", *MEMORY[0x263F0C660]);
  id v7 = v6;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    id v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = self;
    uint64_t v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = HMFGetLogIdentifier();
      int v14 = 138543618;
      __int16 v15 = v12;
      __int16 v16 = 2112;
      uint64_t v17 = v5;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@Response does not contain key %@", (uint8_t *)&v14, 0x16u);
    }
  }

  return v7;
}

- (void)_handleAccessoryDiagnosticQueryWithOptions:(unint64_t)a3 accessory:(id)a4 accessoryUUID:(id)a5 mediaRouteID:(id)a6 additionalFetchKeys:(id)a7 remoteMessageTimeout:(double)a8 remoteMessageRestriction:(unint64_t)a9 completion:(id)a10
{
  char v14 = a3;
  id v16 = a4;
  id v31 = a5;
  id v17 = a6;
  id v30 = a7;
  id v18 = a10;
  uint64_t v19 = [v16 deviceForDirectMessaging];
  id v20 = [v16 home];
  dispatch_time_t v21 = [v20 currentUser];

  id v22 = @"HMD.accessoryDiagnosticInfo.o";
  if (v21 && ![v21 isOwner]) {
    id v22 = @"HMD.accessoryDiagnosticInfo";
  }
  __int16 v23 = dispatch_group_create();
  id v24 = v23;
  v49[0] = 0;
  v49[1] = v49;
  v49[2] = 0x2020000000;
  char v50 = 0;
  unint64_t v25 = v14 & 2;
  if ((v14 & 1) != 0 && v19)
  {
    dispatch_group_enter(v23);
    id v26 = [(HMDHomeManager *)self workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke;
    block[3] = &unk_264A22F90;
    void block[4] = self;
    id v38 = v19;
    __int16 v39 = v22;
    id v40 = v31;
    id v41 = v17;
    double v47 = a8;
    id v42 = v30;
    __int16 v45 = v49;
    unint64_t v46 = a9;
    char v48 = v25 >> 1;
    id v44 = v18;
    __int16 v43 = v24;
    dispatch_async(v26, block);

    if (!v25) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if ((v14 & 2) != 0)
  {
LABEL_10:
    id v28 = [(HMDHomeManager *)self workQueue];
    v32[0] = MEMORY[0x263EF8330];
    v32[1] = 3221225472;
    v32[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_2;
    v32[3] = &unk_264A25348;
    uint64_t v36 = v49;
    v32[4] = self;
    id v33 = v31;
    id v34 = v17;
    id v35 = v18;
    dispatch_group_notify(v24, v28, v32);

    goto LABEL_11;
  }
  long long v27 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
  (*((void (**)(id, void, void *))v18 + 2))(v18, 0, v27);

LABEL_11:
  _Block_object_dispose(v49, 8);
}

void __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke(uint64_t a1)
{
  v30[3] = *MEMORY[0x263EF8340];
  int v2 = [HMDRemoteDeviceMessageDestination alloc];
  id v3 = [*(id *)(a1 + 32) uuid];
  id v4 = [(HMDRemoteDeviceMessageDestination *)v2 initWithTarget:v3 device:*(void *)(a1 + 40)];

  v29[0] = @"uuid";
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = [*(id *)(a1 + 56) UUIDString];
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  v30[0] = v6;
  v30[1] = v7;
  uint64_t v9 = *MEMORY[0x263F0CA08];
  v29[1] = @"identifier";
  v29[2] = v9;
  v30[2] = v8;
  id v10 = [NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:3];
  uint64_t v11 = +[HMDRemoteMessage secureMessageWithName:v5 qualityOfService:-1 destination:v4 messagePayload:v10 restriction:*(void *)(a1 + 104)];
  int v12 = (void *)[v11 mutableCopy];

  int v13 = (void *)MEMORY[0x230FBD990]([v12 setTimeout:*(double *)(a1 + 112)]);
  id v14 = *(id *)(a1 + 32);
  __int16 v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    id v16 = HMFGetLogIdentifier();
    uint64_t v17 = *(void *)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    id v26 = v16;
    __int16 v27 = 2112;
    uint64_t v28 = v17;
    _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Performing accessory diagnostic fetch for accessory %@", buf, 0x16u);
  }
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 3221225472;
  void v21[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_21;
  v21[3] = &unk_264A22F68;
  void v21[4] = *(void *)(a1 + 32);
  char v24 = *(unsigned char *)(a1 + 120);
  long long v20 = *(_OWORD *)(a1 + 88);
  id v18 = (id)v20;
  long long v23 = v20;
  id v22 = *(id *)(a1 + 80);
  [v12 setResponseHandler:v21];
  uint64_t v19 = [*(id *)(a1 + 32) messageDispatcher];
  [v19 sendMessage:v12];
}

void __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_2(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    int v2 = (void *)MEMORY[0x230FBD990]();
    id v3 = *(id *)(a1 + 32);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = HMFGetLogIdentifier();
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      int v12 = v5;
      __int16 v13 = 2112;
      uint64_t v14 = v6;
      _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Performing accessory diagnostic fetch using rapport %@", buf, 0x16u);
    }
    uint64_t v7 = [*(id *)(a1 + 32) configuringStateController];
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    v9[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_23;
    v9[3] = &unk_264A22F40;
    v9[4] = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 48);
    id v10 = *(id *)(a1 + 56);
    [v7 queryConfiguringState:v8 additionalKeys:MEMORY[0x263EFFA68] withCompletion:v9];
  }
}

uint64_t __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_23(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _handleAccessoryDiagnosticStateQueryWithResponse:a2 hasAdditionalRequest:0 error:a3 completion:*(void *)(a1 + 40)];
}

void __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_21(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) _handleAccessoryDiagnosticStateQueryWithResponse:a3 hasAdditionalRequest:*(unsigned __int8 *)(a1 + 64) error:a2 completion:*(void *)(a1 + 48)];
  id v4 = *(NSObject **)(a1 + 40);
  dispatch_group_leave(v4);
}

- (void)_handleAccessoryDiagnosticStateQuery:(id)a3
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 messagePayload];
  uint64_t v6 = objc_msgSend(v5, "hmf_numberForKey:", *MEMORY[0x263F0CA20]);
  uint64_t v7 = [v6 integerValue];

  if (v7)
  {
    uint64_t v8 = [v4 uuidForKey:*MEMORY[0x263F0CA00]];
    if (v8)
    {
      uint64_t v9 = [(HMDHomeManager *)self accessoryWithUUID:v8];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v10 = v9;
      }
      else {
        id v10 = 0;
      }
      id v11 = v10;

      int v12 = [v11 identifier];
      if (v12)
      {
        v26[0] = MEMORY[0x263EF8330];
        v26[1] = 3221225472;
        v26[2] = __73__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticStateQuery___block_invoke;
        v26[3] = &unk_264A2E660;
        id v27 = v4;
        [(HMDHomeManager *)self _handleAccessoryDiagnosticQueryWithOptions:v7 accessory:v11 accessoryUUID:v8 mediaRouteID:v12 additionalFetchKeys:MEMORY[0x263EFFA68] remoteMessageTimeout:9 remoteMessageRestriction:10.0 completion:v26];
        __int16 v13 = v27;
      }
      else
      {
        id v22 = (void *)MEMORY[0x230FBD990]();
        long long v23 = self;
        char v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          unint64_t v25 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          long long v29 = v25;
          _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@mediaRouteIdentifier is nil", buf, 0xCu);
        }
        __int16 v13 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
        [v4 respondWithError:v13];
      }
    }
    else
    {
      id v18 = (void *)MEMORY[0x230FBD990]();
      uint64_t v19 = self;
      long long v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        dispatch_time_t v21 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        long long v29 = v21;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@Could not determine accessory UUID", buf, 0xCu);
      }
      id v11 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      [v4 respondWithError:v11];
    }
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x230FBD990]();
    uint64_t v15 = self;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      long long v29 = v17;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Invalid fetch options", buf, 0xCu);
    }
    uint64_t v8 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v4 respondWithError:v8];
  }
}

uint64_t __73__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticStateQuery___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  if (a3) {
    return objc_msgSend(v3, "respondWithError:");
  }
  else {
    return [v3 respondWithPayload:a2];
  }
}

- (BOOL)_handleAccessoryDiagnosticStateQueryWithResponse:(id)a3 hasAdditionalRequest:(BOOL)a4 error:(id)a5 completion:(id)a6
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a5;
  int v12 = (void (**)(id, void *, void))a6;
  if (!v11)
  {
    id v18 = [(HMDHomeManager *)self _diagnosticInfoFromRemoteResponse:v10];
    BOOL v17 = v18 != 0;
    uint64_t v19 = (void *)MEMORY[0x230FBD990]();
    long long v20 = self;
    dispatch_time_t v21 = HMFGetOSLogHandle();
    id v22 = v21;
    if (v18)
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        long long v23 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v30 = v23;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Responding with diagnostic Info", buf, 0xCu);
      }
      uint64_t v27 = *MEMORY[0x263F0CA18];
      uint64_t v28 = v18;
      char v24 = [NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
      v12[2](v12, v24, 0);
    }
    else
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        unint64_t v25 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        uint64_t v30 = v25;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode the response", buf, 0xCu);
      }
      if (a4) {
        goto LABEL_16;
      }
      char v24 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
      ((void (**)(id, void *, void *))v12)[2](v12, 0, v24);
    }

LABEL_16:
    goto LABEL_17;
  }
  __int16 v13 = (void *)MEMORY[0x230FBD990]();
  uint64_t v14 = self;
  uint64_t v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    id v16 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v30 = v16;
    __int16 v31 = 2112;
    id v32 = v11;
    _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Query message failed, error: (%@): ", buf, 0x16u);
  }
  if (!a4) {
    ((void (**)(id, void *, id))v12)[2](v12, 0, v11);
  }
  BOOL v17 = 0;
LABEL_17:

  return v17;
}

- (void)_handleDeviceSetupConfiguringStateQuery:(id)a3
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 uuidForKey:@"kAccessoryPeerIdentifierKey"];
  uint64_t v6 = (void *)MEMORY[0x230FBD990]();
  uint64_t v7 = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543874;
    id v22 = v9;
    __int16 v23 = 2112;
    id v24 = v4;
    __int16 v25 = 2112;
    id v26 = v5;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Handle query message %@ with mediaRouteID %@", buf, 0x20u);
  }
  if (!v5)
  {
    __int16 v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = v7;
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v22 = v16;
      BOOL v17 = "%{public}@mediaRouteIdentifier is nil";
LABEL_10:
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, v17, buf, 0xCu);
    }
LABEL_11:

    id v18 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
    [v4 respondWithError:v18];

    goto LABEL_12;
  }
  id v10 = [(HMDHomeManager *)v7 configuringStateController];

  if (!v10)
  {
    __int16 v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = v7;
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      id v22 = v16;
      BOOL v17 = "%{public}@Configuring controller is nil";
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  id v11 = [(HMDHomeManager *)v7 configuringStateController];
  int v12 = [v5 UUIDString];
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 3221225472;
  v19[2] = __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke;
  v19[3] = &unk_264A23A78;
  void v19[4] = v7;
  id v20 = v4;
  [v11 queryConfiguringState:v12 additionalKeys:MEMORY[0x263EFFA68] withCompletion:v19];

LABEL_12:
}

void __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) workQueue];
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  void v12[2] = __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke_2;
  v12[3] = &unk_264A2E610;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  id v13 = v6;
  uint64_t v14 = v8;
  id v15 = v9;
  id v16 = v5;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, v12);
}

void __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke_2(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 32))
  {
    int v2 = (void *)MEMORY[0x230FBD990]();
    id v3 = *(id *)(a1 + 40);
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v5 = HMFGetLogIdentifier();
      id v6 = *(void **)(a1 + 32);
      int v17 = 138543618;
      id v18 = v5;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_ERROR, "%{public}@Query message failed, error: (%@): ", (uint8_t *)&v17, 0x16u);
    }
    [*(id *)(a1 + 48) respondWithError:*(void *)(a1 + 32)];
  }
  else
  {
    uint64_t v7 = [*(id *)(a1 + 40) _diagnosticInfoFromRemoteResponse:*(void *)(a1 + 56)];
    uint64_t v8 = +[HMDAppleMediaAccessoryDiagnosticInfoController diagnosticInfoDescriptionWithData:v7];

    uint64_t v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = *(id *)(a1 + 40);
    id v11 = HMFGetOSLogHandle();
    int v12 = v11;
    if (v8)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        id v13 = HMFGetLogIdentifier();
        int v17 = 138543618;
        id v18 = v13;
        __int16 v19 = 2112;
        id v20 = v8;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Query message sent, response: %@", (uint8_t *)&v17, 0x16u);
      }
      [*(id *)(a1 + 48) respondWithPayload:v8];
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = HMFGetLogIdentifier();
        int v17 = 138543362;
        id v18 = v14;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode the response", (uint8_t *)&v17, 0xCu);
      }
      id v15 = *(void **)(a1 + 48);
      id v16 = [MEMORY[0x263F087E8] hmfErrorWithCode:2];
      [v15 respondWithError:v16];
    }
  }
}

- (void)_registerForConfiguringStateMessages
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    uint64_t v7 = *MEMORY[0x263F0C9E8];
    *(_DWORD *)buf = 138543618;
    id v18 = v6;
    __int16 v19 = 2112;
    uint64_t v20 = v7;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for %@ message for device setup configuring state query", buf, 0x16u);
  }
  else
  {
    uint64_t v7 = *MEMORY[0x263F0C9E8];
  }

  uint64_t v8 = [(HMDHomeManager *)v4 messageDispatcher];
  uint64_t v9 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  id v16 = v9;
  id v10 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v16 count:1];
  [v8 registerForMessage:v7 receiver:v4 policies:v10 selector:sel__handleDeviceSetupConfiguringStateQuery_];

  id v11 = [(HMDHomeManager *)v4 messageDispatcher];
  uint64_t v12 = *MEMORY[0x263F0CAA8];
  id v13 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  id v15 = v13;
  uint64_t v14 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v15 count:1];
  [v11 registerForMessage:v12 receiver:v4 policies:v14 selector:sel__handleAccessoryDiagnosticStateQuery_];
}

- (void)fetchSetupDiagnosticStateWithOptions:(unint64_t)a3 accessoryUUID:(id)a4 remoteMessageTimeout:(double)a5 remoteMessageRestriction:(unint64_t)a6 completion:(id)a7
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v12 = a4;
  id v13 = a7;
  if (v12)
  {
    uint64_t v14 = [(HMDHomeManager *)self _mediaRouteIdentifierForAccessory:v12];
    if (v14)
    {
      id v15 = (void *)v14;
      id v16 = [(HMDHomeManager *)self configuringStateController];

      if (v16)
      {
        int v17 = [(HMDHomeManager *)self accessoryWithUUID:v12];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v18 = v17;
        }
        else {
          id v18 = 0;
        }
        id v19 = v18;

        uint64_t v37 = *MEMORY[0x263F0CA10];
        uint64_t v20 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v37 count:1];
        v35[0] = MEMORY[0x263EF8330];
        v35[1] = 3221225472;
        v35[2] = __144__HMDHomeManager_ConfiguringState__fetchSetupDiagnosticStateWithOptions_accessoryUUID_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke;
        v35[3] = &unk_264A22F40;
        v35[4] = self;
        id v36 = v13;
        [(HMDHomeManager *)self _handleAccessoryDiagnosticQueryWithOptions:a3 accessory:v19 accessoryUUID:v12 mediaRouteID:v15 additionalFetchKeys:v20 remoteMessageTimeout:a6 remoteMessageRestriction:a5 completion:v35];
      }
      else
      {
        uint64_t v30 = (void *)MEMORY[0x230FBD990]();
        __int16 v31 = self;
        id v32 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          uint64_t v33 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          __int16 v39 = v33;
          _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_INFO, "%{public}@Cannot query configuring state as the controller is nil", buf, 0xCu);
        }
        id v34 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
        (*((void (**)(id, void, void *))v13 + 2))(v13, 0, v34);
      }
    }
    else
    {
      __int16 v25 = (void *)MEMORY[0x230FBD990]();
      id v26 = self;
      uint64_t v27 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        uint64_t v28 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        __int16 v39 = v28;
        _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_INFO, "%{public}@Cannot query configuring state as peer identifier is nil", buf, 0xCu);
      }
      long long v29 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      (*((void (**)(id, void, void *))v13 + 2))(v13, 0, v29);

      id v15 = 0;
    }
  }
  else
  {
    uint64_t v21 = (void *)MEMORY[0x230FBD990]();
    id v22 = self;
    __int16 v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      id v24 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v39 = v24;
      _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Cannot query configuring state as accessory UUID is nil", buf, 0xCu);
    }
    id v15 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    (*((void (**)(id, void, void *))v13 + 2))(v13, 0, v15);
  }
}

void __144__HMDHomeManager_ConfiguringState__fetchSetupDiagnosticStateWithOptions_accessoryUUID_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      int v17 = 138543618;
      id v18 = v10;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Query configuring state failed with error: (%@): ", (uint8_t *)&v17, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v11 = [*(id *)(a1 + 32) _decodeDiagnosticInfoFromLocalResponse:v5];
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    id v13 = (void *)MEMORY[0x230FBD990](v12);
    id v14 = *(id *)(a1 + 32);
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = HMFGetLogIdentifier();
      int v17 = 138543618;
      id v18 = v16;
      __int16 v19 = 2112;
      id v20 = v11;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Query message sent, response: %@", (uint8_t *)&v17, 0x16u);
    }
  }
}

- (void)fetchSetupDiagnosticStateForAccessoryUUID:(id)a3 completion:(id)a4
{
}

- (void)_handleAssistantSyncDataRequest:(id)a3
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  if ([(HMDHomeManager *)self isDataSyncInProgressWithMessage:v4])
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    uint64_t v7 = self;
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      __int16 v31 = v9;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Data sync in progress - do not sync data to Siri servers", buf, 0xCu);
    }
    [v4 respondWithPayload:0];
  }
  else
  {
    uint64_t v10 = [v4 clientIdentifier];
    if (v10) {
      id v11 = (__CFString *)v10;
    }
    else {
      id v11 = @"com.apple.homeutil";
    }
    if (hasAssistantHashingKeyChanged())
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = [v4 stringForKey:*MEMORY[0x263F0EBA0]];
    }
    objc_initWeak((id *)buf, self);
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke;
    aBlock[3] = &unk_264A2CB98;
    aBlock[4] = self;
    objc_copyWeak(&v28, (id *)buf);
    id v13 = v12;
    id v26 = v13;
    id v27 = v4;
    id v14 = _Block_copy(aBlock);
    id v15 = v14;
    if (v13)
    {
      (*((void (**)(void *))v14 + 2))(v14);
    }
    else
    {
      isWatch();
      id v16 = [(HMDHomeManager *)self __generateAssistantTeamIdentifier];
      [(HMDHomeManager *)self _setAssistantSyncRequest:v11];
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      int v17 = [(HMDHomeManager *)self homes];
      uint64_t v18 = [v17 countByEnumeratingWithState:&v21 objects:v29 count:16];
      if (v18)
      {
        uint64_t v19 = *(void *)v22;
        do
        {
          uint64_t v20 = 0;
          do
          {
            if (*(void *)v22 != v19) {
              objc_enumerationMutation(v17);
            }
            [*(id *)(*((void *)&v21 + 1) + 8 * v20++) resetAccessoryHashedRouteIdentifiers];
          }
          while (v18 != v20);
          uint64_t v18 = [v17 countByEnumeratingWithState:&v21 objects:v29 count:16];
        }
        while (v18);
      }

      [(HMDHomeManager *)self _generateAssistantSyncDataAndIncrementVersion:1 requestSync:0 urgent:0 completion:v15];
    }

    objc_destroyWeak(&v28);
    objc_destroyWeak((id *)buf);
  }
}

void __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke(id *a1)
{
  int v2 = [a1[4] gatherer];
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_2;
  v3[3] = &unk_264A29D20;
  objc_copyWeak(&v6, a1 + 7);
  id v4 = a1[5];
  id v5 = a1[6];
  [v2 getSyncEntityObjectsWithCompletionHandler:v3];

  objc_destroyWeak(&v6);
}

void __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_2(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained workQueue];
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    v7[2] = __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_3;
    v7[3] = &unk_264A2E610;
    void v7[4] = v5;
    id v8 = a1[4];
    id v9 = v3;
    id v10 = a1[5];
    dispatch_async(v6, v7);
  }
}

void __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_3(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) assistantGenerationCounter];
  id v3 = (void *)MEMORY[0x230FBD990](objc_msgSend(*(id *)(a1 + 32), "__setLastSyncedAssistantConfigurationVersion:", v2));
  id v4 = *(id *)(a1 + 32);
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = [*(id *)(a1 + 32) _getAssistantHashingData];
    *(_DWORD *)buf = 138544130;
    long long v23 = v6;
    __int16 v24 = 2112;
    uint64_t v25 = v7;
    __int16 v26 = 2048;
    uint64_t v27 = v2;
    __int16 v28 = 2112;
    long long v29 = v8;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Siri sync validity %@, assistantConfigurationVersion %tu - assistant identifier %@", buf, 0x2Au);
  }
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v20 = @"kSiriSyncDataEntitiesKey";
  uint64_t v21 = v9;
  id v10 = [NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
  [*(id *)(a1 + 56) respondWithPayload:v10];
  id v11 = *(void **)(a1 + 40);
  if (v11)
  {
    uint64_t v12 = [v11 componentsSeparatedByString:@":"];
    id v13 = [v12 firstObject];
    id v14 = v13;
    if (v13) {
      [v13 cStringUsingEncoding:4];
    }
  }
  if ([*(id *)(a1 + 32) siriSyncNotificationTime])
  {
    mach_absolute_time();
    UpTicksToMilliseconds();
    [*(id *)(a1 + 32) siriSyncNotificationTime];
  }
  [*(id *)(a1 + 32) _resetSiriSyncNotification];
  if ([*(id *)(a1 + 32) assistantIdentifierChanged])
  {
    [*(id *)(a1 + 32) setAssistantIdentifierChanged:0];
    id v15 = *(void **)(a1 + 32);
    id v16 = [v15 uuid];
    [v15 updateGenerationCounterWithReason:@"AssistantIdentifierChanged" sourceUUID:v16 shouldNotifyClients:1];
  }
  [*(id *)(a1 + 32) _signpostAssistantSyncDataRequestHandled];
  int v17 = [*(id *)(a1 + 32) currentAccessorySetupMetricDispatcher];
  [v17 markSetupEndStage:8 error:0];

  uint64_t v18 = +[HMDHelper sharedHelper];
  uint64_t v19 = [v18 hashedRouteIDForIdentifier:@"A77C551E-C3FA-414E-ACD8-A7DF3D64E9D6"];

  CFPreferencesSetAppValue(@"HMDAssistantLastHashingKey", v19, @"com.apple.homed");
}

- (void)writeAssistantCurrentHome:(id)a3
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = NSURL;
  id v6 = [v4 urlString];
  uint64_t v7 = [v5 URLWithString:v6];

  id v8 = (void *)MEMORY[0x230FBD990]();
  uint64_t v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = HMFGetLogIdentifier();
    uint64_t v12 = [v4 name];
    id v13 = [(HMDHomeManager *)v9 currentHomeUUID];
    id v14 = [v13 UUIDString];
    int v15 = 138544130;
    id v16 = v11;
    __int16 v17 = 2112;
    uint64_t v18 = v7;
    __int16 v19 = 2112;
    uint64_t v20 = v12;
    __int16 v21 = 2112;
    long long v22 = v14;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Notifying assistant that current home updated to: %@ (%@/%@)", (uint8_t *)&v15, 0x2Au);
  }
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:](v9, "_setHomeConfigurationKey:value:applicationIdentifier:", *MEMORY[0x263F0E988], [v7 absoluteString], @"com.apple.homed.notbackedup");
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:](v9, "_setHomeConfigurationKey:value:applicationIdentifier:", *MEMORY[0x263F0E990], [v4 name], @"com.apple.homed.notbackedup");
  notify_post("com.apple.homed.current-home.changed");
}

- (void)_resetSiriSyncNotification
{
  id v3 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v3);

  [(HMDHomeManager *)self setSiriSyncNotificationTime:0];
}

- (BOOL)shouldDropNotification
{
  uint64_t v10 = 0;
  id v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  id v3 = +[HMDCoreData sharedInstance];
  id v4 = [v3 contextWithRootPartition];

  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __51__HMDHomeManager_Assistant__shouldDropNotification__block_invoke;
  v7[3] = &unk_264A2F698;
  void v7[4] = self;
  id v5 = v4;
  id v8 = v5;
  uint64_t v9 = &v10;
  [v5 unsafeSynchronousBlock:v7];
  LOBYTE(v4) = *((unsigned char *)v11 + 24) == 0;

  _Block_object_dispose(&v10, 8);
  return (char)v4;
}

void __51__HMDHomeManager_Assistant__shouldDropNotification__block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    int v13 = 138543362;
    id v14 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to save first CK import finished to working store.", (uint8_t *)&v13, 0xCu);
  }
  id v6 = [*(id *)(a1 + 40) findHomeManagerWithError:0];
  uint64_t v7 = v6;
  if (v6)
  {
    id v8 = [v6 assistantSyncDataPosted];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v8 BOOLValue];
  }
  else
  {
    uint64_t v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = *(id *)(a1 + 32);
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      int v13 = 138543362;
      id v14 = v12;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@Missing mkfHomeManager", (uint8_t *)&v13, 0xCu);
    }
  }
}

- (void)saveAssistantSyncDataPostedToWorkingStore
{
  id v3 = +[HMDCoreData sharedInstance];
  id v4 = [v3 contextWithRootPartition];

  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __70__HMDHomeManager_Assistant__saveAssistantSyncDataPostedToWorkingStore__block_invoke;
  v6[3] = &unk_264A2F820;
  void v6[4] = self;
  id v7 = v4;
  id v5 = v4;
  [v5 performBlock:v6];
}

void __70__HMDHomeManager_Assistant__saveAssistantSyncDataPostedToWorkingStore__block_invoke(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    __int16 v26 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to save first CK import finished to working store.", buf, 0xCu);
  }
  id v6 = [*(id *)(a1 + 40) findHomeManagerWithError:0];
  id v7 = v6;
  if (v6)
  {
    [v6 setAssistantSyncDataPosted:MEMORY[0x263EFFA88]];
    id v8 = *(void **)(a1 + 40);
    id v24 = 0;
    char v9 = [v8 save:&v24];
    id v10 = v24;
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = *(id *)(a1 + 32);
    int v13 = HMFGetOSLogHandle();
    id v14 = v13;
    if (v9)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543362;
        __int16 v26 = v15;
        id v16 = "%{public}@Successfully saved the assistant sync data posted flag.";
        __int16 v17 = v14;
        os_log_type_t v18 = OS_LOG_TYPE_INFO;
        uint32_t v19 = 12;
LABEL_12:
        _os_log_impl(&dword_22F52A000, v17, v18, v16, buf, v19);
      }
    }
    else if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      __int16 v26 = v15;
      __int16 v27 = 2112;
      id v28 = v10;
      id v16 = "%{public}@Unable to store the assistant sync data posted flag : %@";
      __int16 v17 = v14;
      os_log_type_t v18 = OS_LOG_TYPE_ERROR;
      uint32_t v19 = 22;
      goto LABEL_12;
    }

    goto LABEL_14;
  }
  uint64_t v20 = (void *)MEMORY[0x230FBD990]();
  id v21 = *(id *)(a1 + 32);
  long long v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    uint64_t v23 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    __int16 v26 = v23;
    _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Missing mkfHomeManager", buf, 0xCu);
  }
LABEL_14:
}

- (void)hh2FirstCKImportFinished
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v14 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@HH2 : First CK import finished", buf, 0xCu);
  }
  id v7 = +[HMDCoreData sharedInstance];
  id v8 = [v7 contextWithRootPartition];

  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = __53__HMDHomeManager_Assistant__hh2FirstCKImportFinished__block_invoke;
  v10[3] = &unk_264A2F820;
  id v11 = v8;
  id v12 = v4;
  id v9 = v8;
  [v9 performBlock:v10];
}

void __53__HMDHomeManager_Assistant__hh2FirstCKImportFinished__block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) findHomeManagerWithError:0];
  if (v2)
  {
    id v3 = v2;
    id v4 = [v2 assistantSyncDataPosted];

    if (!v4)
    {
      if (![*(id *)(a1 + 40) siriSyncNotificationTime])
      {
        mach_absolute_time();
        [*(id *)(a1 + 40) setSiriSyncNotificationTime:UpTicksToMilliseconds()];
      }
      id v5 = [*(id *)(a1 + 40) workQueue];
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = __53__HMDHomeManager_Assistant__hh2FirstCKImportFinished__block_invoke_2;
      block[3] = &unk_264A2F7F8;
      void block[4] = *(void *)(a1 + 40);
      dispatch_async(v5, block);
    }
  }
  else
  {
    uint64_t v6 = _HMFPreconditionFailure();
    __53__HMDHomeManager_Assistant__hh2FirstCKImportFinished__block_invoke_2(v6);
  }
}

uint64_t __53__HMDHomeManager_Assistant__hh2FirstCKImportFinished__block_invoke_2(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    id v10 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Posting an urgent sync notification after first HH2 cloudkit import", buf, 0xCu);
  }
  uint64_t v6 = *(void **)(a1 + 32);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __53__HMDHomeManager_Assistant__hh2FirstCKImportFinished__block_invoke_21;
  v8[3] = &unk_264A2F7F8;
  void v8[4] = v6;
  return [v6 _generateAssistantSyncDataAndIncrementVersion:1 requestSync:1 urgent:1 completion:v8];
}

uint64_t __53__HMDHomeManager_Assistant__hh2FirstCKImportFinished__block_invoke_21(uint64_t a1)
{
  return [*(id *)(a1 + 32) saveAssistantSyncDataPostedToWorkingStore];
}

- (void)_setAssistantSyncRequest:(id)a3
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  uint64_t v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    int v15 = 138543618;
    id v16 = v9;
    __int16 v17 = 2112;
    id v18 = v4;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Assistant sync data re-generation requested due to reason: %@", (uint8_t *)&v15, 0x16u);
  }
  if (![(HMDHomeManager *)v7 siriSyncNotificationTime])
  {
    mach_absolute_time();
    [(HMDHomeManager *)v7 setSiriSyncNotificationTime:UpTicksToMilliseconds()];
  }
  if (v4 && [v4 isEqual:@"SyncStateCompleted"])
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    uint64_t v11 = v7;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v13 = HMFGetLogIdentifier();
      uint64_t v14 = [(HMDHomeManager *)v11 assistantGenerationCounter];
      int v15 = 138543874;
      id v16 = v13;
      __int16 v17 = 2112;
      id v18 = v4;
      __int16 v19 = 2048;
      uint64_t v20 = v14;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Posting an urgent sync notification after %@: %tu", (uint8_t *)&v15, 0x20u);
    }
    [(HMDHomeManager *)v11 _generateAssistantSyncDataAndIncrementVersion:1 requestSync:1 urgent:1 completion:0];
  }
}

- (void)_assistantSyncDataChanged:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2((dispatch_queue_t)v5);

  [(HMDHomeManager *)self _setAssistantSyncRequest:v4];
  uint64_t v6 = [(HMDHomeManager *)self debounceRegenerateAssistantSyncDataTimer];
  LOBYTE(v5) = [v6 isRunning];

  if ((v5 & 1) == 0)
  {
    id v7 = [(HMDHomeManager *)self debounceRegenerateAssistantSyncDataTimer];
    [v7 resume];
  }
}

- (void)_generateAssistantSyncDataAndIncrementVersion:(BOOL)a3 requestSync:(BOOL)a4 urgent:(BOOL)a5 completion:(id)a6
{
  BOOL v8 = a3;
  id v10 = a6;
  if (a5 || ![(HMDHomeManager *)self shouldDropNotification])
  {
    int v13 = [(HMDHomeManager *)self workQueue];
    dispatch_assert_queue_V2(v13);

    if (v8) {
      [(HMDHomeManager *)self _incrementAssistantGenerationCounter];
    }
    uint64_t v14 = [(HMDHomeManager *)self currentHomeUUID];
    int v15 = [(HMDHomeManager *)self _homeWithUUID:v14];

    objc_initWeak(&location, self);
    id v16 = [(HMDHomeManager *)self gatherer];
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 3221225472;
    v18[2] = __105__HMDHomeManager_Assistant___generateAssistantSyncDataAndIncrementVersion_requestSync_urgent_completion___block_invoke;
    v18[3] = &unk_264A23A00;
    objc_copyWeak(&v21, &location);
    id v17 = v15;
    id v19 = v17;
    BOOL v22 = a4;
    BOOL v23 = a5;
    id v20 = v10;
    [v16 gatherHomeKitObjectsWithCompletion:v18];

    objc_destroyWeak(&v21);
    objc_destroyWeak(&location);
  }
  else
  {
    uint64_t v11 = _Block_copy(v10);
    id v12 = v11;
    if (v11) {
      (*((void (**)(void *))v11 + 2))(v11);
    }
  }
}

void __105__HMDHomeManager_Assistant___generateAssistantSyncDataAndIncrementVersion_requestSync_urgent_completion___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained writeAssistantCurrentHome:*(void *)(a1 + 32)];
  uint64_t v5 = [WeakRetained _setHomekitAssistantNumEntities:a2];
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v6 = [WeakRetained currentAccessorySetupMetricDispatcher];
    [v6 markSetupBeginStage:8 error:0];

    id v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = WeakRetained;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      int v17 = 138543618;
      id v18 = v10;
      __int16 v19 = 2048;
      uint64_t v20 = [v8 assistantGenerationCounter];
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Generated sync data and posted sync data changed notification with siri generation counter: %tu", (uint8_t *)&v17, 0x16u);
    }
    if (*(unsigned char *)(a1 + 57)) {
      uint64_t v11 = "com.apple.assistant.sync_homekit_urgent";
    }
    else {
      uint64_t v11 = "com.apple.assistant.sync_homekit_now";
    }
    notify_post(v11);
    [v8 _signpostAssistantSyncDataNotification];
  }
  else
  {
    id v12 = (void *)MEMORY[0x230FBD990](v5);
    id v13 = WeakRetained;
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      int v15 = HMFGetLogIdentifier();
      int v17 = 138543618;
      id v18 = v15;
      __int16 v19 = 2048;
      uint64_t v20 = [v13 assistantGenerationCounter];
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Generated sync data with siri generation counter: %tu", (uint8_t *)&v17, 0x16u);
    }
  }
  uint64_t v16 = *(void *)(a1 + 40);
  if (v16) {
    (*(void (**)(void))(v16 + 16))();
  }
  [WeakRetained setPostSyncDataUpdatedNotification:1];
}

- (void)_incrementAssistantGenerationCounter
{
  id v3 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v3);

  [(HMDHomeManager *)self setAssistantGenerationCounter:[(HMDHomeManager *)self assistantGenerationCounter] + 1];
  unint64_t v4 = [(HMDHomeManager *)self assistantGenerationCounter];
  [(HMDHomeManager *)self _setHomekitAssistantConfigurationVersion:v4];
}

- (void)__setLastSyncedAssistantConfigurationVersion:(unint64_t)a3
{
  id v4 = [NSNumber numberWithUnsignedLong:a3];
  [(HMDHomeManager *)self _setHomeConfigurationKey:@"kLastSyncedAssistantConfigurationVersionKey" value:v4];
}

- (void)_setHomekitAssistantNumEntities:(unint64_t)a3
{
  uint64_t v4 = [NSNumber numberWithUnsignedInteger:a3];
  [(HMDHomeManager *)self _setHomeConfigurationKey:@"kAssistantConfigurationNumberOfEntitiesKey" value:v4];
}

- (void)_setHomekitAssistantConfigurationVersion:(unint64_t)a3
{
  id v4 = [NSNumber numberWithUnsignedLong:a3];
  [(HMDHomeManager *)self _setHomeConfigurationKey:@"kAssistantConfigurationVersionKey" value:v4];
}

- (void)_setAssistantHashingData:(id)a3
{
}

- (void)_saveAssistantHashingData:(id)a3
{
  id v4 = a3;
  [(HMDHomeManager *)self _setHomeConfigurationKey:@"kAssistantTeamIdentifier" value:v4 applicationIdentifier:@"com.apple.homed.notbackedup"];
  [(HMDHomeManager *)self _setAssistantHashingData:v4];
}

- (id)_getAssistantHashingData
{
  id v3 = (id)CFPreferencesCopyAppValue(@"kAssistantTeamIdentifier", @"com.apple.homed.notbackedup");
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  if (v5)
  {
    id v6 = v5;
    id v7 = v3;
  }
  else
  {
    id v7 = [(HMDHomeManager *)self __generateAssistantTeamIdentifier];
  }

  return v7;
}

- (id)__generateAssistantTeamIdentifier
{
  id v3 = [MEMORY[0x263F08C38] UUID];
  id v4 = objc_msgSend(v3, "hm_convertToData");

  [(HMDHomeManager *)self _saveAssistantHashingData:v4];
  [(HMDHomeManager *)self setAssistantIdentifierChanged:1];
  return v4;
}

- (void)performInitialGraphLoad:(id)a3
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = HMFUptime();
  double v7 = v6;
  id v8 = (void *)MEMORY[0x230FBD990](v5);
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138544386;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = @"homeManagerInitStart";
    *(_WORD *)&buf[22] = 2112;
    __int16 v56 = @"Starting replay of all models in the home graph";
    *(_WORD *)id v57 = 2114;
    *(void *)&v57[2] = @"state";
    *(_WORD *)&v57[10] = 2112;
    *(void *)&v57[12] = @"homeManagerLoadingInitialGraph";
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
  }
  id v12 = [MEMORY[0x263F499E0] sharedInstance];
  id v13 = objc_alloc(MEMORY[0x263F499F0]);
  double v62 = @"state";
  id v63 = @"homeManagerLoadingInitialGraph";
  uint64_t v14 = [NSDictionary dictionaryWithObjects:&v63 forKeys:&v62 count:1];
  int v15 = (void *)[v13 initWithTag:@"homeManagerInitStart" data:v14];
  uint64_t v16 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v12 submitTaggedEvent:v15 processorList:v16];

  int v17 = [(HMDHomeManager *)v9 backingStore];
  [v17 cdlsReplayAllModelsStartingAt:v4 isInitialGraphLoad:1];

  id v18 = (void *)MEMORY[0x230FBD990]();
  __int16 v19 = v9;
  uint64_t v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543362;
    *(void *)&uint8_t buf[4] = v21;
    _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Replay of all models in the home graph, resolving startup future.", buf, 0xCu);
  }
  id v54 = v4;
  if (v19)
  {
    BOOL v22 = (void *)MEMORY[0x230FBD990]();
    BOOL v23 = v19;
    id v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Loading locally persisted incoming invitations", buf, 0xCu);
    }
    __int16 v26 = [MEMORY[0x263EFF980] array];
    __int16 v27 = [(HMDHomeManager *)v23 backingStore];
    id v28 = [v27 context];
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __50__HMDHomeManager_Startup__loadIncomingInvitations__block_invoke;
    __int16 v56 = (__CFString *)&unk_264A2F820;
    *(void *)id v57 = v23;
    id v29 = v26;
    *(void *)&v57[8] = v29;
    [v28 unsafeSynchronousBlock:buf];

    uint64_t v30 = (void *)MEMORY[0x230FBD990]();
    __int16 v31 = v23;
    uint64_t v32 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      uint64_t v33 = HMFGetLogIdentifier();
      id v34 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v29, "count"));
      *(_DWORD *)v64 = 138543618;
      v65 = v33;
      __int16 v66 = 2112;
      uint64_t v67 = v34;
      _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_INFO, "%{public}@Loaded %@ incoming invitations", v64, 0x16u);
    }
    id v35 = *(void **)&v57[8];
    id v36 = v29;
  }
  else
  {
    id v36 = 0;
  }
  [(HMDHomeManager *)v19 setIncomingInvitations:v36];

  uint64_t v37 = [(HMDHomeManager *)v19 startupPromise];
  id v38 = [MEMORY[0x263F42538] futureWithNoValue];
  [v37 resolveWithFuture:v38];

  __int16 v39 = (void *)MEMORY[0x230FBD990]();
  uint64_t v40 = v19;
  id v41 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
  {
    id v42 = HMFGetLogIdentifier();
    __int16 v43 = NSString;
    HMFUptime();
    __int16 v45 = objc_msgSend(v43, "stringWithFormat:", @"%.3f", v44 - v7);
    *(_DWORD *)buf = 138544898;
    *(void *)&uint8_t buf[4] = v42;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = @"homeManagerInitStart";
    *(_WORD *)&buf[22] = 2112;
    __int16 v56 = @"Loaded initial home graph.";
    *(_WORD *)id v57 = 2114;
    *(void *)&v57[2] = @"state";
    *(_WORD *)&v57[10] = 2112;
    *(void *)&v57[12] = @"homeManagerLoadedInitialGraph";
    __int16 v58 = 2114;
    id v59 = @"duration";
    __int16 v60 = 2112;
    double v61 = v45;
    _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
  }
  unint64_t v46 = [MEMORY[0x263F499E0] sharedInstance];
  id v47 = objc_alloc(MEMORY[0x263F499F0]);
  char v48 = NSString;
  HMFUptime();
  char v50 = objc_msgSend(v48, "stringWithFormat:", @"%.3f", v49 - v7);
  id v51 = HMDTaggedLoggingCreateDictionary();
  __int16 v52 = objc_msgSend(v47, "initWithTag:data:", @"homeManagerInitStart", v51, @"state", @"homeManagerLoadedInitialGraph", @"duration", v50);
  uint64_t v53 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v46 submitTaggedEvent:v52 processorList:v53];
}

void __50__HMDHomeManager_Startup__loadIncomingInvitations__block_invoke(uint64_t a1)
{
  uint64_t v2 = +[HMCContext currentContext];
  id v3 = [v2 findHomeManagerWithError:0];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = [v3 incomingInvitations];
    uint64_t v9 = MEMORY[0x263EF8330];
    uint64_t v10 = 3221225472;
    uint64_t v11 = __50__HMDHomeManager_Startup__loadIncomingInvitations__block_invoke_2;
    id v12 = &unk_264A24398;
    double v6 = *(void **)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 32);
    id v14 = v6;
    objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &v9);

    objc_msgSend(v2, "rollback", v9, v10, v11, v12, v13);
  }
  else
  {
    uint64_t v7 = _HMFPreconditionFailure();
    __50__HMDHomeManager_Startup__loadIncomingInvitations__block_invoke_2(v7, v8);
  }
}

void __50__HMDHomeManager_Startup__loadIncomingInvitations__block_invoke_2(uint64_t a1, void *a2)
{
  v49[1] = *MEMORY[0x263EF8340];
  id v2 = a2;
  id v3 = objc_alloc(MEMORY[0x263F425F0]);
  id v4 = [v2 inviterPairingPublicKey];
  uint64_t v5 = [v3 initWithPairingKeyData:v4];

  id v6 = objc_alloc(MEMORY[0x263F425E8]);
  uint64_t v7 = [v2 inviterPairingIdentifier];
  id v42 = (void *)v5;
  __int16 v43 = (void *)[v6 initWithIdentifier:v7 publicKey:v5 privateKey:0];

  id v8 = [v2 inviterUserID];
  uint64_t v9 = +[HMDAccountHandle accountHandleForDestination:v8];

  uint64_t v10 = [v2 inviterMergeID];
  uint64_t v11 = +[HMDAccountIdentifier accountIdentifierForSenderCorrelationIdentifier:v10];

  id v12 = [HMDAccount alloc];
  id v41 = (void *)v9;
  v49[0] = v9;
  uint64_t v13 = [MEMORY[0x263EFF8C0] arrayWithObjects:v49 count:1];
  uint64_t v40 = (void *)v11;
  uint64_t v14 = [(HMDAccount *)v12 initWithIdentifier:v11 handles:v13 devices:MEMORY[0x263EFFA68]];

  int v15 = [HMDIncomingHomeInvitation alloc];
  uint64_t v16 = [v2 modelID];
  int v17 = [v2 invitationState];
  uint64_t v18 = [v17 integerValue];
  __int16 v19 = [v2 homeName];
  uint64_t v20 = [v2 homeModelID];
  uint64_t v21 = [v2 inviterMergeID];
  BOOL v22 = [v2 expiryDate];
  __int16 v39 = (void *)v14;
  BOOL v23 = [(HMDIncomingHomeInvitation *)v15 initWithInviterAccount:v14 invitationIdentifier:v16 invitationState:v18 homeName:v19 homeUUID:v20 inviterIdentity:v43 inviterMergeID:v21 expiryDate:v22];

  id v24 = [v2 idsIdentifier];
  [(HMDHomeInvitation *)v23 setIdsInvitationUUID:v24];

  uint64_t v25 = [v2 shareURL];
  [(HMDHomeInvitation *)v23 setShareURL:v25];

  __int16 v26 = [v2 homeHasCameras];
  -[HMDIncomingHomeInvitation setHomeHasCameras:](v23, "setHomeHasCameras:", [v26 BOOLValue]);

  __int16 v27 = [v2 inviteePrivilege];
  -[HMDIncomingHomeInvitation setInviteePrivilege:](v23, "setInviteePrivilege:", [v27 integerValue]);

  id v28 = [v2 restrictedGuestSchedule];
  [(HMDIncomingHomeInvitation *)v23 setRestrictedGuestSchedule:v28];

  id v29 = (void *)MEMORY[0x263F08928];
  uint64_t v30 = [MEMORY[0x263EFFA08] setWithObject:objc_opt_class()];
  __int16 v31 = [v2 shareToken];
  id v44 = 0;
  uint64_t v32 = [v29 _strictlyUnarchivedObjectOfClasses:v30 fromData:v31 error:&v44];
  id v33 = v44;

  if (v33)
  {
    id v34 = (void *)MEMORY[0x230FBD990]();
    id v35 = *(id *)(a1 + 32);
    id v36 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      unint64_t v46 = v37;
      __int16 v47 = 2112;
      id v48 = v33;
      _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_ERROR, "%{public}@Unarchive share token from store failed with error %@", buf, 0x16u);
    }
  }
  [(HMDHomeInvitation *)v23 setShareToken:v32];
  [*(id *)(a1 + 40) addObject:v23];
}

- (void)initHomeManagerStartup
{
  id v4 = 0;
  id v3 = [MEMORY[0x263F42538] futureWithPromise:&v4];
  [(HMDHomeManager *)self setStartupCompleted:v3];

  [(HMDHomeManager *)self setStartupPromise:v4];
}

- (BOOL)deviceAddressBelongsToResidentOfCurrentHome:(id)a3
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  id v6 = v5;
  if (v5)
  {
    uint64_t v7 = [v5 home];
    id v8 = v7;
    if (v7)
    {
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      uint64_t v9 = [v7 residentDeviceManager];
      uint64_t v10 = [v9 residentDevices];

      id obj = v10;
      uint64_t v11 = [v10 countByEnumeratingWithState:&v28 objects:v32 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v27 = *(void *)v29;
        id v24 = v8;
        uint64_t v25 = v6;
        while (2)
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v29 != v27) {
              objc_enumerationMutation(obj);
            }
            uint64_t v14 = *(void **)(*((void *)&v28 + 1) + 8 * i);
            int v15 = objc_msgSend(v4, "idsIdentifier", v24, v25);
            uint64_t v16 = [v14 messageAddress];
            int v17 = [v16 idsIdentifier];
            if ([v15 isEqual:v17])
            {

LABEL_17:
              BOOL v22 = 1;
              id v8 = v24;
              id v6 = v25;
              goto LABEL_18;
            }
            uint64_t v18 = [v4 idsDestination];
            __int16 v19 = [v14 messageAddress];
            uint64_t v20 = [v19 idsDestination];
            char v21 = [v18 isEqualToString:v20];

            if (v21) {
              goto LABEL_17;
            }
          }
          uint64_t v12 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
          BOOL v22 = 0;
          id v8 = v24;
          id v6 = v25;
          if (v12) {
            continue;
          }
          break;
        }
      }
      else
      {
        BOOL v22 = 0;
      }
LABEL_18:
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 0;
  }

  return v22;
}

- (BOOL)isCurrentDeviceResident
{
  id v2 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  BOOL v3 = v2 != 0;

  return v3;
}

- (id)multiUserSettingsForMultiUserSettingsMetricsEventDispatcherDataSource
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  [(HMDHomeManager *)self homes];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v25 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v25)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v26 = 0;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v24 = *(void *)v30;
    do
    {
      for (uint64_t i = 0; i != v25; ++i)
      {
        if (*(void *)v30 != v24) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = [*(id *)(*((void *)&v29 + 1) + 8 * i) multiUserSettings];
        uint64_t v11 = [v10 numSharedUsers];
        v8 += [v11 unsignedIntValue];

        uint64_t v12 = [v10 numUsersWithSettings];
        v7 += [v12 unsignedIntValue];

        uint64_t v13 = [v10 numUsersWithIdentifyVoiceOff];
        v6 += [v13 unsignedIntValue];

        uint64_t v14 = [v10 numUsersWithPlayBackInfluencesForYouOff];
        v5 += [v14 unsignedIntValue];

        int v15 = [v10 numUsersCloudShareTrustNotConfigured];
        v28 += [v15 unsignedIntValue];

        uint64_t v16 = [v10 numUsersSharedBackingStoreNotStarted];
        v27 += [v16 unsignedIntValue];

        int v17 = [v10 numUsersSharedBackingStoreRunning];
        v26 += [v17 unsignedIntValue];

        uint64_t v18 = [v10 numUsersSharedBackingStoreNotRunningDueToError];
        v2 += [v18 unsignedIntValue];

        __int16 v19 = [v10 numUsersSharedBackingStoreNotRunningDueToStopped];
        v3 += [v19 unsignedIntValue];

        uint64_t v20 = [v10 numUsersSharedBackingStoreSharedZoneWaitingForShareInvitation];
        v4 += [v20 unsignedIntValue];
      }
      uint64_t v25 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
    }
    while (v25);
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v26 = 0;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  char v21 = (void *)[objc_alloc(MEMORY[0x263F0E570]) initWithNumSharedUsers:v8 numUsersWithSettings:v7 numUsersWithIdentifyVoiceOff:v6 numUsersWithPlayBackInfluencesForYouOff:v5 numUsersCloudShareTrustNotConfigured:v28 numUsersSharedBackingStoreNotStarted:v27 numUsersSharedBackingStoreRunning:v26 numUsersSharedBackingStoreNotRunningDueToError:v2 numUsersSharedBackingStoreNotRunningDueToStopped:v3 numUsersSharedBackingStoreSharedZoneWaitingForShareInvitation:v4];

  return v21;
}

- (void)resetTTSUHH2SettingsMigrationKey
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)MEMORY[0x230FBD990](self, a2);
  uint64_t v4 = self;
  uint64_t v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = HMFGetLogIdentifier();
    int v8 = 138543362;
    uint64_t v9 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Going to delete the TTSU HH2 settings migration key", (uint8_t *)&v8, 0xCu);
  }
  uint64_t v7 = [(HMDHomeManager *)v4 userDefaults];
  [v7 removeObjectForKey:@"mi.hh2"];
}

- (void)purgeAllRecordZones:(id)a3 fromDatabase:(id)a4 completionHandler:(id)a5
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = (void *)MEMORY[0x230FBD990]();
  uint64_t v12 = self;
  uint64_t v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    uint64_t v26 = v14;
    __int16 v27 = 2048;
    uint64_t v28 = [v8 count];
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Going to purge all the zones : %lu", buf, 0x16u);
  }
  id v15 = objc_alloc(MEMORY[0x263EFD740]);
  uint64_t v16 = [v8 allKeys];
  int v17 = (void *)[v15 initWithRecordZonesToSave:0 recordZoneIDsToDelete:v16];

  [v17 setMarkZonesAsUserPurged:1];
  uint64_t v19 = MEMORY[0x263EF8330];
  uint64_t v20 = 3221225472;
  char v21 = __82__HMDHomeManager_ResetConfig__purgeAllRecordZones_fromDatabase_completionHandler___block_invoke;
  BOOL v22 = &unk_264A29468;
  BOOL v23 = v12;
  id v24 = v10;
  id v18 = v10;
  [v17 setModifyRecordZonesCompletionBlock:&v19];
  objc_msgSend(v9, "addOperation:", v17, v19, v20, v21, v22, v23);
}

void __82__HMDHomeManager_ResetConfig__purgeAllRecordZones_fromDatabase_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = *(id *)(a1 + 32);
  uint64_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = HMFGetLogIdentifier();
    int v16 = 138543874;
    int v17 = v13;
    __int16 v18 = 2112;
    id v19 = v8;
    __int16 v20 = 2112;
    id v21 = v9;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] :Purging for zones:%@ finished with error: %@", (uint8_t *)&v16, 0x20u);
  }
  uint64_t v14 = _Block_copy(*(const void **)(a1 + 40));
  id v15 = v14;
  if (v14) {
    (*((void (**)(void *, id))v14 + 2))(v14, v9);
  }
}

- (void)purgeShares:(id)a3 fromDatabase:(id)a4 completionHandler:(id)a5
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = (void *)MEMORY[0x230FBD990]();
  uint64_t v12 = self;
  uint64_t v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = [v8 count];
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : purgeShares %ld", buf, 0x16u);
  }
  id v15 = (void *)[objc_alloc(MEMORY[0x263EFD748]) initWithRecordsToSave:0 recordIDsToDelete:v8];
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  uint64_t v22 = __Block_byref_object_copy__227460;
  BOOL v23 = __Block_byref_object_dispose__227461;
  id v24 = 0;
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 3221225472;
  v20[2] = __74__HMDHomeManager_ResetConfig__purgeShares_fromDatabase_completionHandler___block_invoke;
  v20[3] = &unk_264A29418;
  v20[4] = v12;
  v20[5] = buf;
  [v15 setPerRecordDeleteBlock:v20];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = __74__HMDHomeManager_ResetConfig__purgeShares_fromDatabase_completionHandler___block_invoke_154;
  v17[3] = &unk_264A29440;
  void v17[4] = v12;
  id v19 = buf;
  id v16 = v10;
  id v18 = v16;
  [v15 setModifyRecordsCompletionBlock:v17];
  [v9 addOperation:v15];

  _Block_object_dispose(buf, 8);
}

void __74__HMDHomeManager_ResetConfig__purgeShares_fromDatabase_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  id v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v11 = HMFGetLogIdentifier();
      uint64_t v12 = [v5 hmbDescription];
      int v14 = 138543874;
      id v15 = v11;
      __int16 v16 = 2112;
      id v17 = v12;
      __int16 v18 = 2114;
      id v19 = v6;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] Failed to delete record with ID %@: %{public}@", (uint8_t *)&v14, 0x20u);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = HMFGetLogIdentifier();
      int v14 = 138543618;
      id v15 = v13;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_DEBUG, "%{public}@[Reset Config] Successfully deleted record with ID: %@", (uint8_t *)&v14, 0x16u);
    }
  }
}

void __74__HMDHomeManager_ResetConfig__purgeShares_fromDatabase_completionHandler___block_invoke_154(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = *(id *)(a1 + 32);
  uint64_t v12 = HMFGetOSLogHandle();
  uint64_t v13 = v12;
  if (v9)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v14 = HMFGetLogIdentifier();
      int v18 = 138543618;
      id v19 = v14;
      __int16 v20 = 2114;
      id v21 = v9;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] purgeShares CKModifyRecordsOperation failed: %{public}@", (uint8_t *)&v18, 0x16u);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a4);
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      int v18 = 138543362;
      id v19 = v15;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] purgeShares CKModifyRecordsOperation succeeded", (uint8_t *)&v18, 0xCu);
    }
  }
  __int16 v16 = _Block_copy(*(const void **)(a1 + 40));
  id v17 = v16;
  if (v16) {
    (*((void (**)(void *, void))v16 + 2))(v16, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }
}

- (void)purgeAllSharesFromZones:(id)a3 fromDatabase:(id)a4 dispatchGroup:(id)a5
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  id v26 = a3;
  id v27 = a4;
  group = a5;
  id v8 = (void *)MEMORY[0x230FBD990]();
  uint64_t v28 = self;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v26;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] Going to purge all the zones : %@", buf, 0x16u);
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  unint64_t v46 = __Block_byref_object_copy__227460;
  __int16 v47 = __Block_byref_object_dispose__227461;
  id v48 = 0;
  id v11 = objc_alloc_init(MEMORY[0x263EFF980]);
  [v26 allKeys];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v13 = [v12 countByEnumeratingWithState:&v36 objects:v44 count:16];
  if (v13)
  {
    uint64_t v30 = *(void *)v37;
    uint64_t v29 = *MEMORY[0x263EFD500];
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v37 != v30) {
          objc_enumerationMutation(v12);
        }
        id v15 = *(void **)(*((void *)&v36 + 1) + 8 * i);
        __int16 v16 = (void *)[objc_alloc(MEMORY[0x263EFD7E8]) initWithRecordName:v29 zoneID:v15];
        [v11 addObject:v16];
        id v17 = [v12 lastObject];
        int v18 = [v15 isEqual:v17];

        if ((unint64_t)[v11 count] > 0x63) {
          int v19 = 1;
        }
        else {
          int v19 = v18;
        }
        if (v19 == 1)
        {
          dispatch_group_enter(group);
          __int16 v20 = (void *)MEMORY[0x230FBD990]();
          id v21 = v28;
          HMFGetOSLogHandle();
          uint64_t v22 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            id v23 = (id)objc_claimAutoreleasedReturnValue();
            uint64_t v24 = [v11 count];
            *(_DWORD *)uint64_t v40 = 138543618;
            id v41 = v23;
            __int16 v42 = 2048;
            uint64_t v43 = v24;
            _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] purging batch of shares [%lu]", v40, 0x16u);
          }
          v32[0] = MEMORY[0x263EF8330];
          v32[1] = 3221225472;
          v32[2] = __82__HMDHomeManager_ResetConfig__purgeAllSharesFromZones_fromDatabase_dispatchGroup___block_invoke;
          v32[3] = &unk_264A293F0;
          uint64_t v34 = buf;
          v32[4] = v21;
          char v35 = v18;
          uint64_t v33 = group;
          [(HMDHomeManager *)v21 purgeShares:v11 fromDatabase:v27 completionHandler:v32];
          id v25 = objc_alloc_init(MEMORY[0x263EFF980]);

          id v11 = v25;
        }
      }
      uint64_t v13 = [v12 countByEnumeratingWithState:&v36 objects:v44 count:16];
    }
    while (v13);
  }

  _Block_object_dispose(buf, 8);
}

void __82__HMDHomeManager_ResetConfig__purgeAllSharesFromZones_fromDatabase_dispatchGroup___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v4 = a2;
  if (v4)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = *(id *)(a1 + 32);
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      int v20 = 138543618;
      id v21 = v8;
      __int16 v22 = 2112;
      id v23 = v4;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] purgeShares returned error %@. Will try to continue.", (uint8_t *)&v20, 0x16u);
    }
  }
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = *(id *)(a1 + 32);
    id v12 = HMFGetOSLogHandle();
    uint64_t v13 = v12;
    if (v9)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v14 = HMFGetLogIdentifier();
        id v15 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        int v20 = 138543618;
        id v21 = v14;
        __int16 v22 = 2112;
        id v23 = v15;
        __int16 v16 = "%{public}@[Reset Config] :Purging shares of zones on HH2 failed with error: %@";
        id v17 = v13;
        os_log_type_t v18 = OS_LOG_TYPE_ERROR;
        uint32_t v19 = 22;
LABEL_11:
        _os_log_impl(&dword_22F52A000, v17, v18, v16, (uint8_t *)&v20, v19);
      }
    }
    else if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v14 = HMFGetLogIdentifier();
      int v20 = 138543362;
      id v21 = v14;
      __int16 v16 = "%{public}@[Reset Config] :Purging shares of zones on HH2 succeeded";
      id v17 = v13;
      os_log_type_t v18 = OS_LOG_TYPE_INFO;
      uint32_t v19 = 12;
      goto LABEL_11;
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

- (BOOL)fetchAndRemoveNextBatchOfZonesFromDatabase:(id)a3
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = [MEMORY[0x263EFD6D0] fetchAllRecordZonesOperation];
  [v6 setDatabase:v4];
  id v7 = [MEMORY[0x263F08B88] currentThread];
  uint64_t v8 = [v7 qualityOfService];
  uint64_t v9 = [v6 configuration];
  [v9 setQualityOfService:v8];

  id v10 = dispatch_group_create();
  dispatch_group_enter(v10);
  uint64_t v29 = 0;
  uint64_t v30 = &v29;
  uint64_t v31 = 0x2020000000;
  char v32 = 0;
  uint64_t v21 = MEMORY[0x263EF8330];
  uint64_t v22 = 3221225472;
  id v23 = __74__HMDHomeManager_ResetConfig__fetchAndRemoveNextBatchOfZonesFromDatabase___block_invoke;
  uint64_t v24 = &unk_264A293C8;
  id v25 = self;
  id v11 = v4;
  id v26 = v11;
  uint64_t v28 = &v29;
  id v12 = v10;
  id v27 = v12;
  [v6 setFetchRecordZonesCompletionBlock:&v21];
  uint64_t v13 = objc_msgSend(v11, "operationQueue", v21, v22, v23, v24, v25);
  [v13 addOperation:v6];

  dispatch_time_t v14 = dispatch_time(0, 30000000000);
  if (dispatch_group_wait(v12, v14))
  {
    id v15 = (void *)MEMORY[0x230FBD990]();
    __int16 v16 = self;
    HMFGetOSLogHandle();
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v18 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543362;
      uint64_t v34 = v18;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] :Timed out while waiting to fetch all cloud zones from HH2 container. Give up.", buf, 0xCu);
    }
  }
  BOOL v19 = *((unsigned char *)v30 + 24) != 0;

  _Block_object_dispose(&v29, 8);

  return v19;
}

void __74__HMDHomeManager_ResetConfig__fetchAndRemoveNextBatchOfZonesFromDatabase___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    id v11 = [v5 allKeys];
    *(_DWORD *)buf = 138543874;
    uint64_t v22 = v10;
    __int16 v23 = 2112;
    uint64_t v24 = v11;
    __int16 v25 = 2112;
    id v26 = v6;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] :All fetched keys for removal %@, error: %@", buf, 0x20u);
  }
  if ([*(id *)(a1 + 40) databaseScope] == 3 && objc_msgSend(v5, "count"))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    [*(id *)(a1 + 32) purgeAllSharesFromZones:v5 fromDatabase:*(void *)(a1 + 40) dispatchGroup:*(void *)(a1 + 48)];
LABEL_11:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
    goto LABEL_12;
  }
  if ((unint64_t)[v5 count] < 2)
  {
    dispatch_time_t v14 = (void *)MEMORY[0x230FBD990]();
    id v15 = *(id *)(a1 + 32);
    __int16 v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      id v17 = HMFGetLogIdentifier();
      os_log_type_t v18 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v22 = v17;
      __int16 v23 = 2112;
      uint64_t v24 = v18;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] No more zones found for removal in database %@", buf, 0x16u);
    }
    goto LABEL_11;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  id v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 3221225472;
  v19[2] = __74__HMDHomeManager_ResetConfig__fetchAndRemoveNextBatchOfZonesFromDatabase___block_invoke_148;
  v19[3] = &unk_264A2F370;
  void v19[4] = v12;
  id v20 = *(id *)(a1 + 48);
  [v12 purgeAllRecordZones:v5 fromDatabase:v13 completionHandler:v19];

LABEL_12:
}

void __74__HMDHomeManager_ResetConfig__fetchAndRemoveNextBatchOfZonesFromDatabase___block_invoke_148(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    int v8 = 138543618;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] :Purging of zones on HH2 finished with error: %@", (uint8_t *)&v8, 0x16u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

- (void)fetchAndRemoveAllZonesFromDatabase:(id)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = HMFGetLogIdentifier();
    *(_DWORD *)buf = 138543618;
    id v17 = v8;
    __int16 v18 = 2112;
    id v19 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] Fetching and removing all zones from database %@", buf, 0x16u);
  }
  if ([(HMDHomeManager *)v6 fetchAndRemoveNextBatchOfZonesFromDatabase:v4])
  {
    int v9 = 1;
    while (1)
    {
      __int16 v10 = (void *)MEMORY[0x230FBD990]();
      id v11 = v6;
      uint64_t v12 = HMFGetOSLogHandle();
      uint64_t v13 = v12;
      if (v9 == 101) {
        break;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        dispatch_time_t v14 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543618;
        id v17 = v14;
        __int16 v18 = 1024;
        LODWORD(v19) = v9;
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] Found something in batch %d. Trying again in case there is more", buf, 0x12u);
      }
      ++v9;
      if (![(HMDHomeManager *)v11 fetchAndRemoveNextBatchOfZonesFromDatabase:v4])goto LABEL_13; {
    }
      }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v15 = HMFGetLogIdentifier();
      *(_DWORD *)buf = 138543618;
      id v17 = v15;
      __int16 v18 = 1024;
      LODWORD(v19) = 101;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] Went through too many batches [%d]. Giving up.", buf, 0x12u);
    }
  }
LABEL_13:
}

- (void)performCleanupOnHH2Container
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    int v13 = 138543618;
    dispatch_time_t v14 = v6;
    __int16 v15 = 2112;
    __int16 v16 = @"com.apple.homekit.config";
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Perform clean up on HH2 container. : %@", (uint8_t *)&v13, 0x16u);
  }
  id v7 = objc_alloc(MEMORY[0x263EFD620]);
  int v8 = (void *)[v7 initWithContainerIdentifier:@"com.apple.homekit.config" environment:cloudKitContainerEnvironment];
  int v9 = objc_opt_new();
  [v9 setUseZoneWidePCS:1];
  __int16 v10 = (void *)[objc_alloc(MEMORY[0x263EFD610]) initWithContainerID:v8 options:v9];
  id v11 = [v10 privateCloudDatabase];
  [(HMDHomeManager *)v4 fetchAndRemoveAllZonesFromDatabase:v11];

  uint64_t v12 = [v10 sharedCloudDatabase];
  [(HMDHomeManager *)v4 fetchAndRemoveAllZonesFromDatabase:v12];
}

- (void)cleanupLocalConfiguration
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = HMFGetLogIdentifier();
    int v13 = 138543362;
    dispatch_time_t v14 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : cleaning up local configuration", (uint8_t *)&v13, 0xCu);
  }
  [(HMDHomeManager *)v4 _eraseLocalHomeConfiguration];
  id v7 = [MEMORY[0x263F35AD0] systemStore];
  [v7 removeControllerKeyPairWithError:0];
  int v8 = (void *)MEMORY[0x230FBD990]();
  int v9 = v4;
  __int16 v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = HMFGetLogIdentifier();
    uint64_t v12 = HMFBooleanToString();
    int v13 = 138543618;
    dispatch_time_t v14 = v11;
    __int16 v15 = 2112;
    __int16 v16 = v12;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Controller key removal status : %@", (uint8_t *)&v13, 0x16u);
  }
}

- (void)resetHomeConfigForHH2:(BOOL)a3 message:(id)a4
{
  BOOL v4 = a3;
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v6 = a4;
  id v7 = (void *)MEMORY[0x230FBD990]();
  int v8 = self;
  int v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v10 = HMFGetLogIdentifier();
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v10;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Reset config is invoked", (uint8_t *)&buf, 0xCu);
  }
  id v11 = (void *)MEMORY[0x230FBD990]();
  uint64_t v12 = [v6 qualityOfService];
  if (v8)
  {
    uint64_t v13 = v12;
    dispatch_time_t v14 = +[HMDAppleAccountManager sharedManager];
    __int16 v15 = [v14 account];
    __int16 v16 = [v15 handles];
    uint64_t v17 = [v16 firstObject];

    if (v17)
    {
      id v41 = v11;
      BOOL v18 = v4;
      id v19 = [HMDRemoteAccountMessageDestination alloc];
      uint64_t v20 = [(HMDHomeManager *)v8 messageTargetUUID];
      uint64_t v21 = [(HMDRemoteAccountMessageDestination *)v19 initWithTarget:v20 handle:v17 multicast:1];

      [(HMDRemoteAccountMessageDestination *)v21 setRestrictToResidentCapable:1];
      uint64_t v22 = +[HMDRemoteMessage secureMessageWithName:@"HMD.EL.reset" qualityOfService:v13 destination:v21 messagePayload:MEMORY[0x263EFFA78]];
      __int16 v23 = (void *)MEMORY[0x230FBD990]();
      uint64_t v24 = v8;
      __int16 v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        id v26 = HMFGetLogIdentifier();
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v26;
        _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Signaling all resident devices to reset hindsight configuration", (uint8_t *)&buf, 0xCu);
      }
      uint64_t v27 = [(HMDHomeManager *)v24 messageDispatcher];
      *(void *)&long long buf = MEMORY[0x263EF8330];
      *((void *)&buf + 1) = 3221225472;
      uint64_t v43 = __67__HMDHomeManager_ResetConfig___resetHindsightWithQualityOfService___block_invoke;
      id v44 = &unk_264A2F3E8;
      __int16 v45 = v24;
      [v27 sendMessage:v22 completionHandler:&buf];

      BOOL v4 = v18;
      id v11 = v41;
    }
    else
    {
      uint64_t v28 = (void *)MEMORY[0x230FBD990]();
      uint64_t v29 = v8;
      uint64_t v30 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = HMFGetLogIdentifier();
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v31;
        _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Can't notify residents to reset hindsight configuration because the current account is missing or has no handles", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  char v32 = (void *)MEMORY[0x230FBD990](+[HMDAuditHH2KeysForBackupOperation resetHH2KeyBackupOperationFromUserDefault]);
  [(HMDHomeManager *)v8 performCleanupOnHH2Container];
  uint64_t v33 = (void *)MEMORY[0x230FBD990]();
  [(HMDHomeManager *)v8 cleanupLocalConfiguration];
  if (v4)
  {
    uint64_t v34 = (void *)MEMORY[0x230FBD990]();
    [(HMDHomeManager *)v8 _eraseLocalMetadata];
  }
  uint64_t v35 = (void *)MEMORY[0x230FBD990]();
  [(HMDHomeManager *)v8 deleteZonesFromLegacyAndCameraContainers];
  long long v36 = (void *)MEMORY[0x230FBD990]();
  [(HMDHomeManager *)v8 waitForHH2SentinelZoneToBeRemoved];
  long long v37 = (void *)MEMORY[0x230FBD990]([v6 respondWithSuccess]);
  long long v38 = v8;
  long long v39 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = HMFGetLogIdentifier();
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v40;
    _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Reset config is finished", (uint8_t *)&buf, 0xCu);
  }
  [(id)objc_opt_class() relaunchHomedDueToResetConfigurationWithDelay:2.0];
}

void __67__HMDHomeManager_ResetConfig___resetHindsightWithQualityOfService___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = a2;
  BOOL v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  id v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = HMFGetLogIdentifier();
      int v13 = 138543618;
      dispatch_time_t v14 = v8;
      __int16 v15 = 2114;
      id v16 = v3;
      int v9 = "%{public}@Failed to signal resident devices to reset hindsight configuration: %{public}@";
      __int16 v10 = v7;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
      uint32_t v12 = 22;
LABEL_6:
      _os_log_impl(&dword_22F52A000, v10, v11, v9, (uint8_t *)&v13, v12);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v8 = HMFGetLogIdentifier();
    int v13 = 138543362;
    dispatch_time_t v14 = v8;
    int v9 = "%{public}@Sent reset hindsight configuration message successfully";
    __int16 v10 = v7;
    os_log_type_t v11 = OS_LOG_TYPE_INFO;
    uint32_t v12 = 12;
    goto LABEL_6;
  }
}

- (id)createCloudDatabaseAndPerformInitialSync:(id)a3
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    long long v39 = v8;
    __int16 v40 = 2112;
    id v41 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Creating cloud database from container : [%@]", buf, 0x16u);
  }
  id v9 = objc_alloc(MEMORY[0x263EFD620]);
  __int16 v10 = (void *)[v9 initWithContainerIdentifier:@"com.apple.willow.config" environment:cloudKitContainerEnvironment];
  os_log_type_t v11 = (void *)[objc_alloc(MEMORY[0x263F49260]) initWithContainerID:v10];
  id v12 = objc_alloc(MEMORY[0x263F49258]);
  int v13 = +[HMDDatabase defaultDatabase];
  dispatch_time_t v14 = [v13 localDatabase];
  __int16 v15 = (void *)[v12 initWithLocalDatabase:v14 configuration:v11];

  id v16 = (void *)MEMORY[0x230FBD990]();
  uint64_t v17 = v6;
  BOOL v18 = HMFGetOSLogHandle();
  id v19 = v18;
  if (v15)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      long long v39 = v20;
      __int16 v40 = 2112;
      id v41 = v15;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Going to performInitialCloudSync for %@", buf, 0x16u);
    }
    uint64_t v21 = dispatch_group_create();
    dispatch_group_enter(v21);
    uint64_t v22 = [v15 performInitialCloudSync];
    v35[0] = MEMORY[0x263EF8330];
    v35[1] = 3221225472;
    v35[2] = __72__HMDHomeManager_ResetConfig__createCloudDatabaseAndPerformInitialSync___block_invoke;
    v35[3] = &unk_264A2CED0;
    v35[4] = v17;
    id v23 = v15;
    id v36 = v23;
    uint64_t v24 = v21;
    long long v37 = v24;
    id v25 = (id)[v22 addCompletionBlock:v35];
    dispatch_time_t v26 = dispatch_time(0, 30000000000);
    if (dispatch_group_wait(v24, v26))
    {
      uint64_t v27 = (void *)MEMORY[0x230FBD990]();
      uint64_t v28 = v17;
      uint64_t v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        uint64_t v30 = v34 = v4;
        *(_DWORD *)long long buf = 138543618;
        long long v39 = v30;
        __int16 v40 = 2112;
        id v41 = v23;
        _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Timed out while waiting to perform initial sync on %@", buf, 0x16u);

        id v4 = v34;
      }
    }
    id v31 = v23;
  }
  else
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      char v32 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      long long v39 = v32;
      __int16 v40 = 2112;
      id v41 = v4;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Failed to create cloud database with containerID %@", buf, 0x16u);
    }
  }

  return v15;
}

void __72__HMDHomeManager_ResetConfig__createCloudDatabaseAndPerformInitialSync___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    __int16 v10 = HMFGetLogIdentifier();
    uint64_t v11 = *(void *)(a1 + 40);
    int v12 = 138543874;
    int v13 = v10;
    __int16 v14 = 2112;
    uint64_t v15 = v11;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Initial cloud sync finished on %@ with error: %@", (uint8_t *)&v12, 0x20u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

- (id)deleteLocalZone:(id)a3 localDatabase:(id)a4 containerID:(id)a5
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = (void *)MEMORY[0x230FBD990]();
  int v12 = self;
  int v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    __int16 v14 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    dispatch_time_t v26 = v14;
    __int16 v27 = 2112;
    id v28 = v8;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Going to open local zone [%@] and delete it", buf, 0x16u);
  }
  id v15 = objc_alloc_init(MEMORY[0x263F49308]);
  [v15 setCreateIfNeeded:0];
  id v24 = 0;
  __int16 v16 = [v9 openZoneWithZoneID:v8 configuration:v15 error:&v24];
  id v17 = v24;
  if (v16)
  {
    uint64_t v18 = [v9 removeZone:v16];
  }
  else
  {
    id v19 = (void *)MEMORY[0x230FBD990]();
    uint64_t v20 = v12;
    uint64_t v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543874;
      dispatch_time_t v26 = v22;
      __int16 v27 = 2112;
      id v28 = v8;
      __int16 v29 = 2112;
      id v30 = v17;
      _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Failed to open local zone with zoneID %@: %@", buf, 0x20u);
    }
    uint64_t v18 = 0;
  }

  return v18;
}

- (void)deleteAllZonesFromContainer:(id)a3
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    __int16 v52 = v8;
    __int16 v53 = 2112;
    id v54 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Asked to delete all the zones from container : [%@]", buf, 0x16u);
  }
  id v9 = [(HMDHomeManager *)v6 createCloudDatabaseAndPerformInitialSync:v4];
  id v10 = (void *)MEMORY[0x230FBD990]();
  uint64_t v11 = v6;
  int v12 = HMFGetOSLogHandle();
  int v13 = v12;
  if (v9)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      __int16 v14 = HMFGetLogIdentifier();
      id v15 = NSNumber;
      __int16 v16 = [v9 privateZoneIDs];
      id v17 = objc_msgSend(v15, "numberWithUnsignedInteger:", objc_msgSend(v16, "count"));
      *(_DWORD *)long long buf = 138543874;
      __int16 v52 = v14;
      __int16 v53 = 2112;
      id v54 = v4;
      __int16 v55 = 2112;
      __int16 v56 = v17;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : [%@] There are %@ zones", buf, 0x20u);
    }
    uint64_t v18 = [MEMORY[0x263EFF980] array];
    id v19 = [v9 privateZoneIDs];
    v48[0] = MEMORY[0x263EF8330];
    v48[1] = 3221225472;
    v48[2] = __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke;
    v48[3] = &unk_264A29378;
    v48[4] = v11;
    id v20 = v9;
    id v49 = v20;
    id v21 = v18;
    id v50 = v21;
    objc_msgSend(v19, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v48);

    uint64_t v22 = [v20 localDatabase];
    id v23 = [v22 fetchZonesWithError:0];

    if ([v23 count])
    {
      id v24 = dispatch_group_create();
      dispatch_group_enter(v24);
      v44[0] = MEMORY[0x263EF8330];
      v44[1] = 3221225472;
      v44[2] = __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_133;
      v44[3] = &unk_264A293A0;
      v44[4] = v11;
      id v45 = v20;
      id v25 = v4;
      id v46 = v25;
      id v26 = v21;
      id v47 = v26;
      objc_msgSend(v23, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v44);
      __int16 v27 = (void *)MEMORY[0x263F58190];
      id v28 = [MEMORY[0x263F581B8] immediateScheduler];
      __int16 v29 = [v27 combineAllFutures:v26 ignoringErrors:1 scheduler:v28];
      v42[0] = MEMORY[0x263EF8330];
      v42[1] = 3221225472;
      v42[2] = __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_2;
      v42[3] = &unk_264A2E1A0;
      v42[4] = v11;
      id v30 = v24;
      uint64_t v43 = v30;
      id v31 = (id)[v29 addCompletionBlock:v42];

      char v32 = (void *)MEMORY[0x230FBD990]();
      uint64_t v33 = v11;
      id v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v35 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        __int16 v52 = v35;
        __int16 v53 = 2112;
        id v54 = v25;
        _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Finished deleting zones for container : %@", buf, 0x16u);
      }
      dispatch_group_wait(v30, 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      long long v37 = (void *)MEMORY[0x230FBD990]();
      long long v38 = v11;
      long long v39 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        __int16 v40 = HMFGetLogIdentifier();
        id v41 = [v20 containerID];
        *(_DWORD *)long long buf = 138543618;
        __int16 v52 = v40;
        __int16 v53 = 2112;
        id v54 = v41;
        _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : [%@] No local zones to delete", buf, 0x16u);
      }
    }
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v36 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      __int16 v52 = v36;
      __int16 v53 = 2112;
      id v54 = v4;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Unable to create cloud database for container : %@", buf, 0x16u);
    }
  }
}

void __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke(id *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = a1[4];
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    id v8 = [a1[5] containerID];
    id v9 = [v3 name];
    int v11 = 138543874;
    int v12 = v7;
    __int16 v13 = 2112;
    __int16 v14 = v8;
    __int16 v15 = 2112;
    __int16 v16 = v9;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : [%@] Going to delete [%@]", (uint8_t *)&v11, 0x20u);
  }
  id v10 = [a1[5] removePrivateZoneWithID:v3];
  [a1[6] addObject:v10];
}

void __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_133(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = a2;
  id v6 = [v4 localDatabase];
  id v8 = [v3 deleteLocalZone:v5 localDatabase:v6 containerID:*(void *)(a1 + 48)];

  id v7 = v8;
  if (v8)
  {
    [*(id *)(a1 + 56) addObject:v8];
    id v7 = v8;
  }
}

void __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    int v11 = 138543618;
    int v12 = v10;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : >> Deleting cloud & local zones finished with error: %@", (uint8_t *)&v11, 0x16u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

- (void)deleteZonesFromLegacyAndCameraContainers
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v10 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Asked to delete all zones from legacy & camera containers", buf, 0xCu);
  }
  id v7 = [(id)objc_opt_class() getContainersToCleanUp];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __71__HMDHomeManager_ResetConfig__deleteZonesFromLegacyAndCameraContainers__block_invoke;
  v8[3] = &unk_264A29350;
  void v8[4] = v4;
  objc_msgSend(v7, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v8);
}

uint64_t __71__HMDHomeManager_ResetConfig__deleteZonesFromLegacyAndCameraContainers__block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) deleteAllZonesFromContainer:a2];
}

- (void)_eraseLocalMetadata
{
  id v3 = [(HMDHomeManager *)self mobileAssetManager];
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  v4[2] = __50__HMDHomeManager_ResetConfig___eraseLocalMetadata__block_invoke;
  v4[3] = &unk_264A2F7F8;
  v4[4] = self;
  [v3 purgeAllInstalledAssetsWithCompletion:v4];

  +[HMDHAPMetadata updateLocalMetadataWithBuiltinMetadata];
}

void __50__HMDHomeManager_ResetConfig___eraseLocalMetadata__block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    int v6 = 138543362;
    id v7 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Finished purging mobile assets]", (uint8_t *)&v6, 0xCu);
  }
}

- (void)_eraseLocalHomeConfigurationAndDeleteMetadata:(BOOL)a3 reason:(unint64_t)a4 completionQueue:(id)a5 completion:(id)a6
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v9 = a5;
  id v10 = a6;
  uint64_t v11 = (void *)MEMORY[0x230FBD990]();
  int v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    __int16 v13 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v28 = v13;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Resetting local configuration, users and keys for all homes", buf, 0xCu);
  }
  id v14 = dispatch_group_create();
  dispatch_group_enter(v14);
  objc_initWeak((id *)buf, self);
  uint64_t v15 = [(HMDHomeManager *)self syncManager];
  v24[0] = MEMORY[0x263EF8330];
  v24[1] = 3221225472;
  v24[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke;
  v24[3] = &unk_264A2C148;
  objc_copyWeak(&v26, (id *)buf);
  __int16 v16 = v14;
  id v25 = v16;
  [v15 pauseAndWaitForCurrentOperationCompletion:v24];

  uint64_t v17 = [(HMDHomeManager *)self workQueue];
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 3221225472;
  v20[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_125;
  v20[3] = &unk_264A29328;
  objc_copyWeak(v23, (id *)buf);
  v23[1] = (id)a4;
  id v21 = v9;
  id v22 = v10;
  id v18 = v9;
  id v19 = v10;
  dispatch_group_notify(v16, v17, v20);

  objc_destroyWeak(v23);
  objc_destroyWeak(&v26);
  objc_destroyWeak((id *)buf);
}

void __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id obj = [WeakRetained homes];
    uint64_t v4 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v18;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v18 != v6) {
            objc_enumerationMutation(obj);
          }
          uint64_t v8 = *(void **)(*((void *)&v17 + 1) + 8 * v7);
          dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
          id v9 = [v8 name];
          id v10 = (void *)MEMORY[0x263F42568];
          v14[0] = MEMORY[0x263EF8330];
          v14[1] = 3221225472;
          v14[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_2;
          v14[3] = &unk_264A2AEE8;
          void v14[4] = v3;
          id v15 = v9;
          id v16 = *(id *)(a1 + 32);
          id v11 = v9;
          int v12 = [v10 messageWithName:@"kResetConfigRequestKey" messagePayload:0 responseHandler:v14];
          [v3 _removeHome:v8 withMessage:v12 saveToStore:0 notifyUsers:0 shouldRemovePairings:1];

          ++v7;
        }
        while (v5 != v7);
        uint64_t v5 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v5);
    }

    [v3 setHomeManagerZoneFirstFetch:1];
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
}

void __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_125(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (!WeakRetained) {
    goto LABEL_14;
  }
  [WeakRetained setPrimaryHomeUUID:0];
  [v3 _updateCurrentHomeIfNecessary];
  uint64_t v4 = [MEMORY[0x263F35AD0] systemStore];
  int v5 = [v4 removeControllerKeyPairWithError:0];
  uint64_t v6 = (void *)MEMORY[0x230FBD990]();
  uint64_t v7 = HMFGetOSLogHandle();
  uint64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v23 = v9;
      id v10 = "%{public}@[Reset Config] : Removed controller key";
      id v11 = v8;
      os_log_type_t v12 = OS_LOG_TYPE_INFO;
LABEL_7:
      _os_log_impl(&dword_22F52A000, v11, v12, v10, buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    id v9 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v23 = v9;
    id v10 = "%{public}@[Reset Config] : Failed removing controller key";
    id v11 = v8;
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
    goto LABEL_7;
  }

  __int16 v13 = (void *)MEMORY[0x230FBD990]([v3 _eraseLocalHomeConfigurationWithReason:*(void *)(a1 + 56)]);
  id v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    id v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v23 = v15;
    _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Completed configuration reset", buf, 0xCu);
  }
  id v16 = [v3 syncManager];
  [v16 cancelOperations];

  long long v17 = [v3 syncManager];
  [v17 resume];

  long long v18 = *(void **)(a1 + 40);
  if (v18)
  {
    long long v19 = *(NSObject **)(a1 + 32);
    if (v19)
    {
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_126;
      block[3] = &unk_264A2DFA0;
      id v21 = v18;
      dispatch_async(v19, block);
    }
  }

LABEL_14:
}

uint64_t __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_126(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    uint64_t v11 = *(void *)(a1 + 40);
    int v12 = 138543874;
    __int16 v13 = v10;
    __int16 v14 = 2112;
    uint64_t v15 = v11;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Removed home %@ - error %@", (uint8_t *)&v12, 0x20u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

- (void)_eraseLocalHomeConfigurationAndDeleteMetadata:(BOOL)a3 completionQueue:(id)a4 completion:(id)a5
{
}

- (void)_eraseLocalHomeConfigurationAfterSignOut
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x230FBD990](self, a2);
  uint64_t v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    int v7 = 138543362;
    id v8 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Erase local data on this device since we signed out of iCloud", (uint8_t *)&v7, 0xCu);
  }
  +[HMDPersistentStore resetConfiguration:2];
  [(HMDHomeManager *)v4 resetTTSUHH2SettingsMigrationKey];
  +[HMDAuditHH2KeysForBackupOperation resetHH2KeyBackupOperationFromUserDefault];
  [(HMDHomeManager *)v4 removeAllHomeKitPairingIdentitiesAfterSignOut];
  [(HMDHomeManager *)v4 _eraseLocalHomeConfiguration];
  [(HMDHomeManager *)v4 _eraseLocalMetadata];
  [(id)objc_opt_class() relaunchHomedDueToResetConfigurationWithDelay:2.0];
}

- (void)_eraseLocalHomeConfiguration
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x230FBD990](self, a2);
  uint64_t v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v30 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Resetting local configuration and accessory keys for all homes", buf, 0xCu);
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v6 = [(HMDHomeManager *)self homes];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v25 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        int v12 = [v11 name];
        __int16 v13 = [(HMDHomeManager *)self uuid];
        id v14 = [(HMDHomeManager *)self removeName:v12 namespace:v13];

        uint64_t v15 = [(HMDHomeManager *)self nameValidator];
        __int16 v16 = [v11 uuid];
        id v17 = (id)[v15 removeNamespace:v16];

        uint64_t v18 = [v11 uuid];
        [(HMDHomeManager *)self _removeConfigurationVersionForHome:v18];
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v24 objects:v28 count:16];
    }
    while (v8);
  }

  [(HMDHomeManager *)self setPrimaryHomeUUID:0];
  [(HMDHomeManager *)self setRecoveryVersion:0];
  [(HMDHomeManager *)self _updateCurrentHomeIfNecessary];
  long long v19 = [(HMDHomeManager *)self backingStore];
  long long v20 = [v19 lookup];
  [v20 resetObjects];

  id v21 = (void *)MEMORY[0x230FBD990]([(HMDHomeManager *)self _eraseLocalHomeConfigurationWithReason:1]);
  uint64_t v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    id v23 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v30 = v23;
    _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Completed erasing local home configuration", buf, 0xCu);
  }
}

- (void)_eraseLocalHomeConfigurationWithReason:(unint64_t)a3
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  +[HMDHomeManager _eraseAllAccessoryKeysAndIdentifiers];
  uint64_t v4 = [(HMDHomeManager *)self messageDispatcher];
  [v4 reset];

  id v5 = [(HMDHomeManager *)self identityRegistry];
  [v5 reset];

  id v6 = [(HMDHomeManager *)self accountRegistry];
  [v6 reset];

  [MEMORY[0x263F35AD0] systemStore];
  v51 = id v60 = 0;
  [v51 updateCurrentiCloudIdentifier:0 controllerPairingIdentifier:0 error:&v60];
  id v50 = v60;
  uint64_t v7 = (void *)MEMORY[0x263EFF980];
  uint64_t v8 = [(HMDHomeManager *)self homes];
  uint64_t v9 = objc_msgSend(v7, "arrayWithCapacity:", objc_msgSend(v8, "count"));

  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id v48 = self;
  id v10 = [(HMDHomeManager *)self homes];
  uint64_t v11 = [v10 countByEnumeratingWithState:&v56 objects:v64 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v57;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v57 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void **)(*((void *)&v56 + 1) + 8 * i);
        *(void *)long long buf = 0;
        __int16 v16 = [MEMORY[0x263F42538] futureWithPromise:buf];
        v54[0] = MEMORY[0x263EF8330];
        v54[1] = 3221225472;
        v54[2] = __70__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationWithReason___block_invoke;
        v54[3] = &unk_264A2F7F8;
        id v55 = *(id *)buf;
        [v15 stopThreadNetworkWithCompletion:1 completion:v54];
        [v9 addObject:v16];
        [v15 resetConfiguration];
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v56 objects:v64 count:16];
    }
    while (v12);
  }

  [(HMDHomeManager *)v48 setHomes:MEMORY[0x263EFFA68]];
  id v17 = [(HMDHomeManager *)v48 accessoryBrowserInternal];
  [v17 resetConfiguration];

  uint64_t v18 = (void *)MEMORY[0x230FBD990]();
  long long v19 = v48;
  long long v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    id v21 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v21;
    __int16 v62 = 2048;
    unint64_t v63 = a3;
    _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@_eraseLocalHomeConfigurationWithReason: ==== reason is... %lu", buf, 0x16u);
  }
  +[HMDPersistentStore resetConfiguration:a3];
  uint64_t v22 = [(HMDHomeManager *)v19 lastEventStore];
  [v22 resetEventStore];

  id v23 = [(HMDHomeManager *)v19 cloudZones];
  [v23 removeAllObjects];

  [(HMDHomeManager *)v19 setAppData:0];
  long long v24 = [(HMDHomeManager *)v19 pendingResponsesForAccessoryFinder];
  [v24 removeAllObjects];

  long long v25 = [(HMDHomeManager *)v19 associatedRemotePeers];
  [v25 removeAllObjects];

  long long v26 = [(HMDHomeManager *)v19 unassociatedRemotePeers];
  [v26 removeAllObjects];

  long long v27 = [(HMDHomeManager *)v19 pendingRemoteSessions];
  [v27 removeAllObjects];

  id v28 = [(HMDHomeManager *)v19 pendingResidentSetupSessions];
  [v28 removeAllObjects];

  uint64_t v29 = [(HMDHomeManager *)v19 uuidsOfRemovedHomes];
  [v29 removeAllObjects];

  id v30 = [(HMDHomeManager *)v19 incomingInvitations];
  [v30 removeAllObjects];

  [(HMDHomeManager *)v19 updateHomeKitInUsePreferences];
  uint64_t v31 = +[HMDBulletinBoard sharedBulletinBoard];
  [v31 removeAllBulletins];
  [v31 refreshHomeBadgeNumber];
  [(HMDHomeManager *)v19 _eraseLocalMetadata];
  [(HMDHomeManager *)v19 _checkForRemotePeers];
  [(HMDHomeManager *)v19 assistantSyncDataChanged:@"kResetConfigRequestKey"];
  CFPreferencesSetAppValue(@"HMDAssistantLastHashingKey", 0, @"com.apple.homed");
  char v32 = [(HMDHomeManager *)v19 uuid];
  [(HMDHomeManager *)v19 updateGenerationCounterWithReason:@"Erase local home configuration" sourceUUID:v32 shouldNotifyClients:1];

  uint64_t v33 = [MEMORY[0x263F08A00] defaultCenter];
  [v33 postNotificationName:@"HMDHomeManagerLocalHomeDataRemovedNotification" object:0];

  id v52 = 0;
  id v53 = 0;
  id v34 = (void *)MEMORY[0x230FBD990]();
  uint64_t v35 = v19;
  id v36 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    long long v37 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v37;
    _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_DEFAULT, "%{public}@Waiting for thread network shutdown to complete", buf, 0xCu);
  }
  long long v38 = [MEMORY[0x263F42538] allSettled:v9];
  char v39 = [v38 waitForResult:&v53 orError:&v52 withTimeout:4.0];

  __int16 v40 = (void *)MEMORY[0x230FBD990]();
  id v41 = v35;
  uint64_t v42 = HMFGetOSLogHandle();
  uint64_t v43 = v42;
  if (v39)
  {
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      id v44 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v44;
      id v45 = "%{public}@Thread network shutdown completed - continuing with reset config";
      id v46 = v43;
      os_log_type_t v47 = OS_LOG_TYPE_DEFAULT;
LABEL_17:
      _os_log_impl(&dword_22F52A000, v46, v47, v45, buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
  {
    id v44 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v44;
    id v45 = "%{public}@Gave up waiting for thread network shutdown";
    id v46 = v43;
    os_log_type_t v47 = OS_LOG_TYPE_ERROR;
    goto LABEL_17;
  }
}

uint64_t __70__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationWithReason___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) fulfillWithValue:0];
}

- (void)_eraseConfiguration:(BOOL)a3 completionHandler:(id)a4
{
  BOOL v4 = a3;
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v6 = a4;
  uint64_t v7 = (void *)MEMORY[0x230FBD990]();
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v15 = v9;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Resetting local configuration for all homes and all devices", buf, 0xCu);
  }
  id v10 = [(HMDHomeManager *)self workQueue];
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  void v12[2] = __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke;
  v12[3] = &unk_264A29300;
  id v13 = v6;
  id v11 = v6;
  [(HMDHomeManager *)self _eraseLocalHomeConfigurationAndDeleteMetadata:v4 completionQueue:v10 completion:v12];
}

uint64_t __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)_handleResetConfiguration:(id)a3
{
  id v4 = a3;
  +[HMDResetConfigPostCleanup writePostCleanupRecordWithReason:1 steps:-1];
  +[HMDHH2FrameworkSwitch setHH2EnablementPreferenceKey:0];
  uint64_t v5 = [v4 BOOLForKey:@"kResetConfigMetadataKey"];
  id v6 = (void *)[objc_alloc(MEMORY[0x263F424F0]) initWithName:@"Reset Config" parent:0 options:1];
  [v6 begin];
  id v7 = v6;
  [(HMDHomeManager *)self resetHomeConfigForHH2:v5 message:v4];
  __HMFActivityScopeLeave();
}

+ (id)getContainersToCleanUp
{
  v6[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x263EFFA08];
  v6[0] = @"com.apple.homekit";
  v6[1] = @"com.apple.homekit.camera.clips";
  v6[2] = @"com.apple.willow.config";
  id v3 = [MEMORY[0x263EFF8C0] arrayWithObjects:v6 count:3];
  id v4 = [v2 setWithArray:v3];

  return v4;
}

+ (void)relaunchHomedDueToResetConfigurationWithDelay:(double)a3
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)MEMORY[0x230FBD990](a1, a2);
  id v6 = a1;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v12 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Scheduling homed relaunch due to reset configuration. (Either user logged out or user issued reset-config SPI", buf, 0xCu);
  }
  dispatch_time_t v9 = dispatch_time(0, (uint64_t)a3);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __77__HMDHomeManager_ResetConfig__relaunchHomedDueToResetConfigurationWithDelay___block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = v6;
  dispatch_after(v9, MEMORY[0x263EF83A0], block);
}

void __77__HMDHomeManager_ResetConfig__relaunchHomedDueToResetConfigurationWithDelay___block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = +[HMDLaunchHandler sharedHandler];
  id v3 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:@"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"];
  [v2 registerRelaunchClientWithUUID:v3];

  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = HMFGetLogIdentifier();
    int v8 = 138543362;
    dispatch_time_t v9 = v7;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Going to relaunch homed due to resetConfiguration", (uint8_t *)&v8, 0xCu);
  }
  _Exit(0);
}

+ (void)_eraseAllAccessoryKeysAndIdentifiers
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v3 = [MEMORY[0x263F35AD0] systemStore];
  id v26 = 0;
  int v4 = [v3 removeAllAccessoryKeys:&v26];
  id v5 = v26;
  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = a1;
  int v8 = HMFGetOSLogHandle();
  dispatch_time_t v9 = v8;
  if (v4)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
      goto LABEL_7;
    }
    uint64_t v10 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v28 = v10;
    id v11 = "%{public}@[Reset Config] : Removed all accessory keys from controller";
    uint64_t v12 = v9;
    os_log_type_t v13 = OS_LOG_TYPE_INFO;
    uint32_t v14 = 12;
  }
  else
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    uint64_t v10 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v28 = v10;
    __int16 v29 = 2112;
    id v30 = v5;
    id v11 = "%{public}@[Reset Config] : Could not remove all accessory keys from controller (%@)";
    uint64_t v12 = v9;
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    uint32_t v14 = 22;
  }
  _os_log_impl(&dword_22F52A000, v12, v13, v11, buf, v14);

LABEL_7:
  id v25 = v5;
  int v15 = [v3 deleteAllPeripheralIdentifiers:&v25];
  id v16 = v25;

  id v17 = (void *)MEMORY[0x230FBD990]();
  id v18 = v7;
  long long v19 = HMFGetOSLogHandle();
  BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v20)
    {
      id v21 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v28 = v21;
      uint64_t v22 = "%{public}@[Reset Config] : Removed all Bluetooth peripheral identifiers.";
      id v23 = v19;
      uint32_t v24 = 12;
LABEL_12:
      _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_DEFAULT, v22, buf, v24);
    }
  }
  else if (v20)
  {
    id v21 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v28 = v21;
    __int16 v29 = 2112;
    id v30 = v16;
    uint64_t v22 = "%{public}@[Reset Config] : Could not remove all Bluetooth peripheral identifiers (%@).";
    id v23 = v19;
    uint32_t v24 = 22;
    goto LABEL_12;
  }
}

- (void)_sendFragmentedMessage:(id)a3 messageIndex:(unint64_t)a4 messageIdentity:(id)a5 userID:(id)a6 destination:(id)a7 completionHandler:(id)a8
{
  id v14 = a3;
  id v15 = a5;
  id v16 = a6;
  id v27 = a7;
  id v17 = a8;
  objc_initWeak(&location, self);
  id v18 = [(HMDHomeManager *)self messageDispatcher];
  long long v19 = [v14 objectAtIndexedSubscript:a4];
  BOOL v20 = [(HMDHomeManager *)self uuid];
  id v21 = [(HMDHomeManager *)self workQueue];
  v28[0] = MEMORY[0x263EF8330];
  v28[1] = 3221225472;
  v28[2] = __124__HMDHomeManager_FragmentMessage___sendFragmentedMessage_messageIndex_messageIdentity_userID_destination_completionHandler___block_invoke;
  v28[3] = &unk_264A29538;
  objc_copyWeak(v34, &location);
  v34[1] = (id)a4;
  id v22 = v14;
  id v29 = v22;
  id v23 = v15;
  id v30 = v23;
  id v24 = v17;
  id v33 = v24;
  id v25 = v16;
  id v31 = v25;
  id v26 = v27;
  id v32 = v26;
  [v18 sendSecureMessage:v19 target:v20 userID:v25 destination:v26 responseQueue:v21 responseHandler:v28];

  objc_destroyWeak(v34);
  objc_destroyWeak(&location);
}

void __124__HMDHomeManager_FragmentMessage___sendFragmentedMessage_messageIndex_messageIdentity_userID_destination_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    uint64_t v8 = *(void *)(a1 + 80);
    dispatch_time_t v9 = (void *)MEMORY[0x230FBD990]();
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      uint64_t v12 = [*(id *)(a1 + 32) count];
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138544130;
      id v34 = v11;
      __int16 v35 = 2048;
      id v36 = (void *)(v8 + 1);
      __int16 v37 = 2048;
      uint64_t v38 = v12;
      __int16 v39 = 2112;
      uint64_t v40 = v13;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Sent packet %tu/%tu with identity %@", buf, 0x2Au);
    }
    if (v5)
    {
      id v30 = v6;
      id v14 = (void *)MEMORY[0x230FBD990]();
      id v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        id v16 = HMFGetLogIdentifier();
        id v17 = [v5 localizedDescription];
        uint64_t v18 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138543874;
        id v34 = v16;
        __int16 v35 = 2112;
        id v36 = v17;
        __int16 v37 = 2112;
        uint64_t v38 = v18;
        _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Received %@ from user %@, cancel message", buf, 0x20u);
      }
      uint64_t v19 = *(void *)(a1 + 40);
      v31[0] = @"kHomeDataFragmentIdentityKey";
      v31[1] = @"kHomeDataFragmentNumberKey";
      v32[0] = v19;
      v32[1] = &unk_26E473588;
      BOOL v20 = [NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:2];
      id v21 = [MEMORY[0x263F42568] messageWithName:@"kHomeDataFragmentedSyncRequestKey" messagePayload:v20];
      id v22 = [WeakRetained messageDispatcher];
      id v23 = [WeakRetained uuid];
      uint64_t v24 = *(void *)(a1 + 48);
      uint64_t v25 = *(void *)(a1 + 56);
      id v26 = [WeakRetained workQueue];
      [v22 sendSecureMessage:v21 target:v23 userID:v24 destination:v25 responseQueue:v26 responseHandler:&__block_literal_global_228589];

      uint64_t v27 = *(void *)(a1 + 64);
      id v6 = v30;
      if (v27) {
        (*(void (**)(uint64_t, id, id))(v27 + 16))(v27, v5, v30);
      }
    }
    else
    {
      uint64_t v28 = *(void *)(a1 + 80);
      if (v28 == [*(id *)(a1 + 32) count] - 1
        || objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseCancelKey"))
      {
        uint64_t v29 = *(void *)(a1 + 64);
        if (v29) {
          (*(void (**)(uint64_t, void, id))(v29 + 16))(v29, 0, v6);
        }
      }
      else
      {
        [WeakRetained _sendFragmentedMessage:*(void *)(a1 + 32) messageIndex:*(void *)(a1 + 80) + 1 messageIdentity:*(void *)(a1 + 40) userID:*(void *)(a1 + 48) destination:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 64)];
      }
    }
  }
}

- (void)_fragmentationStream:(id)a3 didReceiveData:(id)a4 transactionIdentifier:(unsigned __int16)a5 error:(id)a6
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  id v9 = a3;
  id v10 = a4;
  id v11 = a6;
  if (v10)
  {
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    uint64_t v12 = [(HMDHomeManager *)self pendingFragmentationStream];
    uint64_t v13 = [v12 allKeys];

    id v14 = (id)[v13 countByEnumeratingWithState:&v41 objects:v53 count:16];
    if (v14)
    {
      id v39 = v11;
      id v40 = v10;
      id v15 = 0;
      uint64_t v16 = *(void *)v42;
LABEL_4:
      id v17 = 0;
      uint64_t v18 = v15;
      while (1)
      {
        if (*(void *)v42 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v19 = *(void **)(*((void *)&v41 + 1) + 8 * (void)v17);
        BOOL v20 = [(HMDHomeManager *)self pendingFragmentationStream];
        id v15 = [v20 objectForKeyedSubscript:v19];

        id v21 = [v15 fragmentationStream];

        if (v21 == v9) {
          break;
        }
        id v17 = (char *)v17 + 1;
        uint64_t v18 = v15;
        if (v14 == v17)
        {
          id v14 = (id)[v13 countByEnumeratingWithState:&v41 objects:v53 count:16];
          if (v14) {
            goto LABEL_4;
          }
          id v11 = v39;
          id v10 = v40;
          goto LABEL_24;
        }
      }
      id v14 = v19;

      if (v14) {
        BOOL v22 = v15 == 0;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        id v11 = v39;
        id v10 = v40;
        goto LABEL_25;
      }
      id v23 = (void *)MEMORY[0x263F42568];
      uint64_t v24 = [v15 lastMessage];
      uint64_t v25 = [v23 messageWithMessage:v24 messagePayload:0];
      uint64_t v13 = (void *)[v25 mutableCopy];

      id v26 = [v15 lastMessage];
      uint64_t v27 = [v26 destination];
      [v13 setDestination:v27];

      uint64_t v28 = [v15 lastMessage];
      uint64_t v29 = [v28 remoteSenderContext];
      [v13 setRemoteSenderContext:v29];

      [v15 close];
      id v30 = [(HMDHomeManager *)self pendingFragmentationStream];
      [v30 removeObjectForKey:v14];

      id v31 = [v15 lastMessage];
      id v32 = [v31 stringForKey:@"kDataFragmentMessageNameKey"];

      id v33 = (void *)MEMORY[0x230FBD990]();
      id v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        id v36 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        id v50 = v36;
        __int16 v51 = 2112;
        id v52 = v32;
        _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_INFO, "%{public}@Full message received with name %@, calling the handle method.", buf, 0x16u);
      }
      id v10 = v40;
      if ([v32 isEqualToString:@"kMetadataDataSyncRequestKey"])
      {
        os_log_type_t v47 = @"kHAPMetadataDataKey";
        id v48 = v40;
        __int16 v37 = [NSDictionary dictionaryWithObjects:&v48 forKeys:&v47 count:1];
        [v13 setMessagePayload:v37];

        [(HMDHomeManager *)self _handleMetadataSync:v13];
      }
      else
      {
        id v45 = @"kHomeDataKey";
        id v46 = v40;
        uint64_t v38 = [NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1];
        [v13 setMessagePayload:v38];

        [(HMDHomeManager *)self _handleHomeDataSync:v13];
      }
      id v11 = v39;
    }
    else
    {
      id v15 = 0;
    }
LABEL_24:

LABEL_25:
  }
}

- (void)_fragmentationStream:(id)a3 didCloseWithError:(id)a4
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v5 = a3;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v6 = [(HMDHomeManager *)self pendingFragmentationStream];
  id v7 = [v6 allKeys];

  id v8 = (id)[v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
  id v9 = 0;
  if (v8)
  {
    uint64_t v10 = *(void *)v18;
LABEL_3:
    id v11 = 0;
    uint64_t v12 = v9;
    while (1)
    {
      if (*(void *)v18 != v10) {
        objc_enumerationMutation(v7);
      }
      uint64_t v13 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v11);
      id v14 = [(HMDHomeManager *)self pendingFragmentationStream];
      id v9 = [v14 objectForKeyedSubscript:v13];

      id v15 = [v9 fragmentationStream];

      if (v15 == v5) {
        break;
      }
      id v11 = (char *)v11 + 1;
      uint64_t v12 = v9;
      if (v8 == v11)
      {
        id v8 = (id)[v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v8) {
          goto LABEL_3;
        }
        goto LABEL_15;
      }
    }
    id v8 = v13;

    if (v8) {
      BOOL v16 = v9 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16)
    {
      [v9 close];
      id v7 = [(HMDHomeManager *)self pendingFragmentationStream];
      [v7 removeObjectForKey:v8];
      goto LABEL_15;
    }
  }
  else
  {
LABEL_15:
  }
}

- (void)sendFragmentedMessageForData:(id)a3 objectUUID:(id)a4 withMessageName:(id)a5 toUser:(id)a6 destination:(id)a7 completionHandler:(id)a8
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v44 = a4;
  id v43 = a5;
  id v15 = a6;
  id v16 = a7;
  long long v17 = (void (**)(id, void *, void))a8;
  long long v18 = [MEMORY[0x263F08C38] UUID];
  id v45 = [v18 UUIDString];

  long long v19 = objc_msgSend(MEMORY[0x263F359B8], "fragmentationPacketsForData:maxLength:transactionIdentifier:", v14, maximumDataSyncFragmentSize, -[HMDHomeManager _nextTransactionIdentifier](self, "_nextTransactionIdentifier"));
  if (v19)
  {
    id v36 = self;
    uint64_t v38 = v17;
    id v39 = v16;
    id v40 = v15;
    id v41 = v14;
    long long v20 = [MEMORY[0x263EFF980] array];
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    __int16 v37 = v19;
    id v21 = v19;
    uint64_t v22 = [v21 countByEnumeratingWithState:&v46 objects:v52 count:16];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v42 = *(void *)v47;
      uint64_t v24 = 1;
      do
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          id v26 = v20;
          if (*(void *)v47 != v42) {
            objc_enumerationMutation(v21);
          }
          uint64_t v27 = *(void **)(*((void *)&v46 + 1) + 8 * i);
          v50[0] = @"kHomeUUID";
          v50[1] = @"kHomeDataFragmentIdentityKey";
          v51[0] = v44;
          v51[1] = v45;
          v50[2] = @"kHomeDataFragmentKey";
          uint64_t v28 = [v27 serialize];
          v51[2] = v28;
          v50[3] = @"kHomeDataFragmentNumberKey";
          uint64_t v29 = [NSNumber numberWithUnsignedInteger:v24 + i];
          v51[3] = v29;
          void v50[4] = @"kHomeDataFragmentTotalCountKey";
          id v30 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v21, "count"));
          v50[5] = @"kDataFragmentMessageNameKey";
          v51[4] = v30;
          v51[5] = v43;
          id v31 = [NSDictionary dictionaryWithObjects:v51 forKeys:v50 count:6];

          id v32 = [MEMORY[0x263F42590] messageWithName:@"kHomeDataFragmentedSyncRequestKey" messagePayload:v31];
          [v32 setRemoteRestriction:17];
          long long v20 = v26;
          [v26 addObject:v32];
        }
        v24 += i;
        uint64_t v23 = [v21 countByEnumeratingWithState:&v46 objects:v52 count:16];
      }
      while (v23);
    }

    id v16 = v39;
    id v15 = v40;
    long long v17 = v38;
    [(HMDHomeManager *)v36 _sendFragmentedMessage:v20 messageIndex:0 messageIdentity:v45 userID:v40 destination:v39 completionHandler:v38];
    id v14 = v41;
    long long v19 = v37;
    goto LABEL_14;
  }
  id v33 = (void *)MEMORY[0x230FBD990]();
  id v34 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    __int16 v35 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v54 = v35;
    _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_ERROR, "%{public}@Failed to fragment data sync, aborting", buf, 0xCu);
  }
  if (v17)
  {
    long long v20 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    v17[2](v17, v20, 0);
LABEL_14:
  }
}

- (void)_maybeConfigureDuplicateUserModelChecker
{
  id v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __85__HMDHomeManager_HH2DuplicateUserModelsFix___maybeConfigureDuplicateUserModelChecker__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

void __85__HMDHomeManager_HH2DuplicateUserModelsFix___maybeConfigureDuplicateUserModelChecker__block_invoke(uint64_t a1)
{
}

- (void)_scheduleNextCheck
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v2 = [a1 workQueue];
    dispatch_assert_queue_V2(v2);

    id v3 = [a1 idsServerBag];
    int v4 = [v3 hh2SuppressDuplicateUserModelBulletins];

    if (v4)
    {
      id v5 = (void *)MEMORY[0x230FBD990]();
      id v6 = a1;
      id v7 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v33 = v8;
        _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Duplicate user model checker is disabled via server flags", buf, 0xCu);
      }
    }
    else
    {
      id v9 = [MEMORY[0x263EFF910] now];
      uint64_t v10 = [MEMORY[0x263EFF8F0] currentCalendar];
      id v11 = [v10 components:0x200000 fromDate:v9];
      if (isInternalBuild())
      {
        uint64_t v12 = [MEMORY[0x263F42608] sharedPreferences];
        uint64_t v13 = [v12 preferenceForKey:@"hh2DuplicateUserModelsFixHour"];
        id v14 = [v13 numberValue];

        if (v14) {
          uint64_t v15 = [v14 integerValue];
        }
        else {
          uint64_t v15 = 14;
        }
        long long v17 = [v12 preferenceForKey:@"hh2DuplicateUserModelsFixMinute"];
        long long v18 = [v17 numberValue];

        if (v18) {
          uint64_t v16 = [v18 integerValue];
        }
        else {
          uint64_t v16 = 0;
        }
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v15 = 14;
      }
      [v11 setHour:v15];
      [v11 setMinute:v16];
      long long v19 = [v10 nextDateAfterDate:v9 matchingComponents:v11 options:1024];
      uint64_t v20 = [v19 timeIntervalSinceDate:v9];
      double v22 = v21;
      uint64_t v23 = (void *)MEMORY[0x230FBD990](v20);
      id v24 = a1;
      uint64_t v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        id v26 = HMFGetLogIdentifier();
        uint64_t v27 = objc_msgSend(v19, "hmf_localTimeDescription");
        *(_DWORD *)long long buf = 138543874;
        id v33 = v26;
        __int16 v34 = 2112;
        __int16 v35 = v27;
        __int16 v36 = 2048;
        unint64_t v37 = (unint64_t)v22;
        _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_INFO, "%{public}@Setting duplicate user model checker timer for %@ (%llu seconds from now)", buf, 0x20u);
      }
      objc_initWeak((id *)buf, v24);
      dispatch_time_t v28 = dispatch_time(0, (uint64_t)(v22 * 1000000000.0));
      uint64_t v29 = [v24 workQueue];
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = __63__HMDHomeManager_HH2DuplicateUserModelsFix___scheduleNextCheck__block_invoke;
      block[3] = &unk_264A2C170;
      objc_copyWeak(&v31, (id *)buf);
      dispatch_after(v28, v29, block);

      objc_destroyWeak(&v31);
      objc_destroyWeak((id *)buf);
    }
  }
}

void __63__HMDHomeManager_HH2DuplicateUserModelsFix___scheduleNextCheck__block_invoke(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v30 = WeakRetained;
    uint64_t v2 = [WeakRetained workQueue];
    dispatch_assert_queue_V2(v2);

    id v3 = [v30 idsServerBag];
    int v4 = [v3 hh2SuppressDuplicateUserModelBulletins];

    if (v4)
    {
      id v5 = (void *)MEMORY[0x230FBD990]();
      id v6 = v30;
      id v7 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        __int16 v35 = v8;
        id v9 = "%{public}@Duplicate user model checker is disabled via server flags";
LABEL_14:
        _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, v9, buf, 0xCu);
      }
    }
    else
    {
      if (isThisDeviceDesignatedFMFDevice())
      {
        uint64_t v10 = [v30 backingStore];
        id v11 = [v10 context];
        uint64_t v12 = [v11 managedObjectContext];

        uint64_t v13 = (void *)MEMORY[0x230FBD990]();
        id v14 = v30;
        uint64_t v15 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          uint64_t v16 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          __int16 v35 = v16;
          _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Running duplicate user model checker", buf, 0xCu);
        }
        long long v17 = [(id)objc_opt_class() _findDuplicateUserModelsWithContext:v12];
        uint64_t v18 = [v17 count];
        long long v19 = (void *)MEMORY[0x230FBD990]();
        id v20 = v14;
        double v21 = HMFGetOSLogHandle();
        double v22 = v21;
        if (v18)
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            uint64_t v23 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            __int16 v35 = v23;
            __int16 v36 = 2112;
            unint64_t v37 = v17;
            _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Duplicate user models found: %@", buf, 0x16u);
          }
          id v24 = +[HMDBulletinBoard sharedBulletinBoard];
          uint64_t v25 = [[HMDHomeKitVersion alloc] initWithVersionString:@"10.3.1"];
          v31[0] = MEMORY[0x263EF8330];
          v31[1] = 3221225472;
          void v31[2] = __58__HMDHomeManager_HH2DuplicateUserModelsFix___performCheck__block_invoke;
          v31[3] = &unk_264A2AE28;
          v31[4] = v20;
          id v32 = v25;
          id v33 = v24;
          id v26 = v24;
          uint64_t v27 = v25;
          objc_msgSend(v17, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v31);

          -[HMDHomeManager _scheduleNextCheck](v20);
        }
        else
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            uint64_t v29 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543362;
            __int16 v35 = v29;
            _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@No duplicate user models found", buf, 0xCu);
          }
        }
        goto LABEL_16;
      }
      id v5 = (void *)MEMORY[0x230FBD990]();
      id v28 = v30;
      id v7 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        __int16 v35 = v8;
        id v9 = "%{public}@Skipping duplicate user model checker as this device is not currently the FMF device";
        goto LABEL_14;
      }
    }

LABEL_16:
    id WeakRetained = v30;
  }
}

void __58__HMDHomeManager_HH2DuplicateUserModelsFix___performCheck__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v3 = a2;
  int v4 = *(void **)(a1 + 32);
  id v5 = [v3 homeModelID];
  id v6 = [v4 _homeWithUUID:v5];

  if (v6)
  {
    id v7 = [v3 userMergeID];
    id v8 = [v6 userWithMergeID:v7];

    if (!v8)
    {
      long long v19 = (void *)MEMORY[0x230FBD990]();
      id v20 = *(id *)(a1 + 32);
      double v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        double v22 = HMFGetLogIdentifier();
        uint64_t v23 = [v3 userMergeID];
        *(_DWORD *)long long buf = 138543618;
        __int16 v36 = v22;
        __int16 v37 = 2112;
        uint64_t v38 = v23;
        _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find user with mergeID %@", buf, 0x16u);
      }
      goto LABEL_20;
    }
    id v9 = [v6 residentDeviceManager];
    uint64_t v10 = [v9 primaryResidentDevice];

    if (v10)
    {
      id v11 = [v10 device];
      uint64_t v12 = [v11 version];
      char v13 = [v12 isAtLeastVersion:*(void *)(a1 + 40)];

      if (v13)
      {
        [*(id *)(a1 + 48) insertHH2DuplicateUserModelBulletinForHome:v6 user:v8];
LABEL_19:

LABEL_20:
        goto LABEL_21;
      }
      id v24 = (void *)MEMORY[0x230FBD990]();
      id v28 = *(id *)(a1 + 32);
      uint64_t v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        id v30 = HMFGetLogIdentifier();
        id v31 = [v10 device];
        [v31 version];
        id v32 = v34 = v24;
        uint64_t v33 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138544130;
        __int16 v36 = v30;
        __int16 v37 = 2112;
        uint64_t v38 = v6;
        __int16 v39 = 2112;
        id v40 = v32;
        __int16 v41 = 2112;
        uint64_t v42 = v33;
        _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, "%{public}@Primary resident for home %@ is too old to fix duplicate user models: %@ < %@", buf, 0x2Au);

        id v24 = v34;
      }
    }
    else
    {
      id v24 = (void *)MEMORY[0x230FBD990]();
      id v25 = *(id *)(a1 + 32);
      id v26 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        __int16 v36 = v27;
        __int16 v37 = 2112;
        uint64_t v38 = v6;
        _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find primary resident for home %@", buf, 0x16u);
      }
    }
    goto LABEL_19;
  }
  id v14 = (void *)MEMORY[0x230FBD990]();
  id v15 = *(id *)(a1 + 32);
  uint64_t v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    long long v17 = HMFGetLogIdentifier();
    uint64_t v18 = [v3 homeModelID];
    *(_DWORD *)long long buf = 138543618;
    __int16 v36 = v17;
    __int16 v37 = 2112;
    uint64_t v38 = v18;
    _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find home with uuid %@", buf, 0x16u);
  }
LABEL_21:
}

+ (id)_findDuplicateUserModelsWithContext:(id)a3
{
  id v4 = a3;
  id v5 = [MEMORY[0x263EFF980] array];
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke;
  v10[3] = &unk_264A2E458;
  id v12 = v5;
  id v13 = a1;
  id v11 = v4;
  id v6 = v5;
  id v7 = v4;
  [v7 performBlockAndWait:v10];
  id v8 = (void *)[v6 copy];

  return v8;
}

void __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke(uint64_t a1)
{
  v51[3] = *MEMORY[0x263EF8340];
  id v1 = *(id *)(a1 + 32);
  uint64_t v2 = self;
  id v3 = +[_MKFUser fetchRequest];
  id v4 = [MEMORY[0x263F08A98] predicateWithFormat:@"(%K.%K == YES) AND (%K != %@)", @"home", @"owned", @"privilege", &unk_26E473738];
  [v3 setPredicate:v4];

  v51[0] = @"accountIdentifier";
  v51[1] = @"idsMergeIdentifier";
  v51[2] = @"privilege";
  id v5 = [MEMORY[0x263EFF8C0] arrayWithObjects:v51 count:3];
  [v3 setPropertiesToFetch:v5];

  id v50 = @"home";
  id v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v50 count:1];
  [v3 setRelationshipKeyPathsForPrefetching:v6];

  [v3 setFetchBatchSize:10];
  id v44 = 0;
  id v7 = [v1 executeFetchRequest:v3 error:&v44];
  id v8 = v44;
  id v9 = v8;
  if (v7)
  {

    uint64_t v10 = [MEMORY[0x263F08968] strongToStrongObjectsMapTable];
    v42[0] = MEMORY[0x263EF8330];
    v42[1] = 3221225472;
    v42[2] = __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke_2;
    v42[3] = &unk_264A2AE50;
    id v11 = v10;
    id v43 = v11;
    id v28 = v7;
    objc_msgSend(v7, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v42);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v31 = v11;
    id obj = [v11 keyEnumerator];
    uint64_t v12 = [obj countByEnumeratingWithState:&v38 objects:v45 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v39 != v14) {
            objc_enumerationMutation(obj);
          }
          uint64_t v16 = *(void *)(*((void *)&v38 + 1) + 8 * i);
          long long v17 = (void *)MEMORY[0x230FBD990]();
          uint64_t v18 = [v31 objectForKey:v16];
          long long v19 = objc_msgSend(MEMORY[0x263EFF9C0], "setWithCapacity:", objc_msgSend(v18, "count"));
          id v20 = [MEMORY[0x263EFF9A0] dictionary];
          v34[0] = MEMORY[0x263EF8330];
          v34[1] = 3221225472;
          id v34[2] = __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke_3;
          v34[3] = &unk_264A2AE78;
          uint64_t v21 = *(void *)(a1 + 48);
          id v36 = v19;
          uint64_t v37 = v21;
          id v35 = v20;
          id v22 = v19;
          id v23 = v20;
          objc_msgSend(v18, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v34);
          v32[0] = MEMORY[0x263EF8330];
          v32[1] = 3221225472;
          void v32[2] = __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke_57;
          v32[3] = &unk_264A2AEA0;
          v32[4] = v16;
          id v33 = *(id *)(a1 + 40);
          [v23 enumerateKeysAndObjectsUsingBlock:v32];
        }
        uint64_t v13 = [obj countByEnumeratingWithState:&v38 objects:v45 count:16];
      }
      while (v13);
    }

    id v7 = v28;
  }
  else
  {
    id v24 = (void *)MEMORY[0x230FBD990]();
    id v25 = v2;
    id v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      long long v47 = v27;
      __int16 v48 = 2112;
      long long v49 = v9;
      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch shared users: %@", buf, 0x16u);
    }
  }
}

void __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = [v3 home];
  id v4 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:");
  if (v4)
  {
    id v5 = v4;
    [v4 addObject:v3];
  }
  else
  {
    id v5 = [MEMORY[0x263EFF980] arrayWithObject:v3];

    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

void __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke_3(id *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = self;
  id v5 = [v3 idsMergeIdentifier];
  if (v5)
  {
    id v6 = v5;
    goto LABEL_17;
  }
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = v4;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    int v27 = 138543618;
    id v28 = v10;
    __int16 v29 = 2112;
    id v30 = v3;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@User has no idsMergeIdentifier: %@", (uint8_t *)&v27, 0x16u);
  }
  id v11 = [v3 accountIdentifier];
  uint64_t v12 = v11;
  if (v11)
  {
    uint64_t v13 = [v11 senderCorrelationIdentifier];
    uint64_t v14 = (void *)MEMORY[0x230FBD990]();
    id v15 = v8;
    uint64_t v16 = HMFGetOSLogHandle();
    long long v17 = v16;
    if (v13)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = HMFGetLogIdentifier();
        int v27 = 138543618;
        id v28 = v18;
        __int16 v29 = 2112;
        id v30 = v3;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Using accountIdentifier as idsMergeIdentifier for user: %@", (uint8_t *)&v27, 0x16u);
      }
      id v6 = v13;
      goto LABEL_16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      long long v19 = HMFGetLogIdentifier();
      int v27 = 138543618;
      id v28 = v19;
      __int16 v29 = 2112;
      id v30 = v3;
      id v20 = "%{public}@User accountIdentifier doesn't contain a mergeID: %@";
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x230FBD990]();
    id v15 = v8;
    long long v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      long long v19 = HMFGetLogIdentifier();
      int v27 = 138543618;
      id v28 = v19;
      __int16 v29 = 2112;
      id v30 = v3;
      id v20 = "%{public}@User has no accountIdentifier: %@";
LABEL_14:
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v27, 0x16u);
    }
  }

  id v6 = 0;
LABEL_16:

LABEL_17:
  if (v6)
  {
    uint64_t v21 = [a1[4] objectForKeyedSubscript:v6];

    if (!v21)
    {
      if ([a1[5] containsObject:v6]) {
        [a1[4] setObject:v3 forKeyedSubscript:v6];
      }
      else {
        [a1[5] addObject:v6];
      }
    }
  }
  else
  {
    id v22 = (void *)MEMORY[0x230FBD990]();
    id v23 = a1[6];
    id v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      id v25 = HMFGetLogIdentifier();
      id v26 = [v3 debugDescription];
      int v27 = 138543618;
      id v28 = v25;
      __int16 v29 = 2112;
      id v30 = v26;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_DEBUG, "%{public}@%@", (uint8_t *)&v27, 0x16u);
    }
  }
}

void __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke_57(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [HMDHH2DuplicateUserModelTuple alloc];
  id v5 = [*(id *)(a1 + 32) modelID];
  id v6 = [(HMDHH2DuplicateUserModelTuple *)v4 initWithHomeModelID:v5 userMergeID:v3];

  [*(id *)(a1 + 40) addObject:v6];
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_cloudReachabilityMonitor, 0);
  objc_storeStrong((id *)&self->_reachabilityMonitor, 0);
  objc_storeStrong((id *)&self->_workContext, 0);
  objc_storeStrong((id *)&self->_startupPromise, 0);
  objc_storeStrong((id *)&self->_configuringStateController, 0);
  objc_storeStrong((id *)&self->_currentHomeConfigurations, 0);
  objc_storeStrong((id *)&self->_matterXPCListener, 0);
  objc_storeStrong((id *)&self->_chipXPCListener, 0);
  objc_storeStrong((id *)&self->_homeUUIDsByWalletKeyAssertionXPCConnection, 0);
  objc_storeStrong((id *)&self->_mediaGroupParticipantDataLocalStorage, 0);
  objc_storeStrong((id *)&self->_userDeviceCapabilitiesRequestManager, 0);
  objc_storeStrong((id *)&self->_mobileAssetManager, 0);
  objc_storeStrong((id *)&self->_lastEventStoreController, 0);
  objc_storeStrong((id *)&self->_lastEventStore, 0);
  objc_storeStrong((id *)&self->_accessoryBrowserInternal, 0);
  objc_storeStrong((id *)&self->_biomeEventManager, 0);
  objc_storeStrong((id *)&self->_debounceRegenerateAssistantSyncDataTimer, 0);
  objc_storeStrong((id *)&self->_matterSoftwareUpdateProviderDelegate, 0);
  objc_storeStrong((id *)&self->_accessoryFirmwareUpdateManager, 0);
  objc_storeStrong((id *)&self->_legacyAccessoryPairingController, 0);
  objc_storeStrong((id *)&self->_cloudAccount, 0);
  objc_storeStrong((id *)&self->_syncManager, 0);
  objc_storeStrong(&self->_mkfContext, 0);
  objc_storeStrong((id *)&self->_siriEndpointOnboardingManager, 0);
  objc_storeStrong((id *)&self->_hh2FrameworkSwitch, 0);
  objc_storeStrong((id *)&self->_accessorySetupManager, 0);
  objc_storeStrong((id *)&self->_currentAccessorySetupMetricDispatcher, 0);
  objc_storeStrong((id *)&self->_userDefaults, 0);
  objc_storeStrong((id *)&self->_residentMesh, 0);
  objc_storeStrong((id *)&self->_appData, 0);
  objc_storeStrong((id *)&self->_watchPushDelayTimer, 0);
  objc_storeStrong((id *)&self->_pendingFragmentationStream, 0);
  objc_storeStrong((id *)&self->_remoteAccessHealthMonitorTimer, 0);
  objc_storeStrong((id *)&self->_clientConnectionQueue, 0);
  objc_storeStrong((id *)&self->_clientConnection, 0);
  objc_storeStrong((id *)&self->_incomingInvitations, 0);
  objc_storeStrong((id *)&self->_accountRegistry, 0);
  objc_storeStrong((id *)&self->_fmfHandler, 0);
  objc_storeStrong((id *)&self->_locationHandler, 0);
  objc_storeStrong((id *)&self->_cloudDataSyncStateFilter, 0);
  objc_storeStrong((id *)&self->_cloudOperationRetryTimer, 0);
  objc_storeStrong((id *)&self->_identityRegistry, 0);
  objc_storeStrong((id *)&self->_dialogCancelationContexts, 0);
  objc_storeStrong((id *)&self->_msgFilterChain, 0);
  objc_storeStrong((id *)&self->_pendingResidentSetupSessions, 0);
  objc_storeStrong((id *)&self->_pendingRemoteSessions, 0);
  objc_storeStrong((id *)&self->_pendingDataSyncAcks, 0);
  objc_storeStrong((id *)&self->_dataTag, 0);
  objc_storeStrong((id *)&self->_backingStore, 0);
  objc_storeStrong((id *)&self->_watchManager, 0);
  objc_storeStrong((id *)&self->_setupActivity, 0);
  objc_storeStrong((id *)&self->_idsFirewallManager, 0);
  objc_storeStrong((id *)&self->_idsInvitationManager, 0);
  objc_storeStrong((id *)&self->_notificationCenter, 0);
  objc_storeStrong((id *)&self->_powerManager, 0);
  objc_storeStrong((id *)&self->_pendingResponsesForAccessoryFinder, 0);
  objc_storeStrong((id *)&self->_accessoryFinderTimer, 0);
  objc_storeStrong((id *)&self->_nameValidator, 0);
  objc_storeStrong((id *)&self->_pairedSync, 0);
  objc_storeStrong((id *)&self->_watchSyncRetryContextByRetryTimer, 0);
  objc_storeStrong((id *)&self->_watchSyncRetryContextBySyncIdentifier, 0);
  objc_storeStrong((id *)&self->_watchSyncStateMap, 0);
  objc_storeStrong((id *)&self->_associatedWatchPeers, 0);
  objc_storeStrong((id *)&self->_fullSyncedWatchPeers, 0);
  objc_storeStrong((id *)&self->_associatedRemotePeers, 0);
  objc_storeStrong((id *)&self->_unassociatedRemotePeers, 0);
  objc_storeStrong((id *)&self->_messageDispatcher, 0);
  objc_storeStrong((id *)&self->_workQueue, 0);
  objc_storeStrong((id *)&self->_primaryHomeUUID, 0);
  objc_storeStrong((id *)&self->_uuidsOfRemovedHomes, 0);
  objc_storeStrong((id *)&self->_cloudZones, 0);
  objc_storeStrong((id *)&self->_uuid, 0);
  objc_storeStrong((id *)&self->_homeManagerObjectChangeHandler, 0);
  objc_storeStrong(&self->_wifiManagerFactory, 0);
  objc_storeStrong((id *)&self->_defaultDatabase, 0);
  objc_storeStrong((id *)&self->_hapKeyStore, 0);
  objc_storeStrong((id *)&self->_pendingSharedUserAcceptLogEventBuilders, 0);
  objc_storeStrong((id *)&self->_widgetTimelineRefresher, 0);
  objc_storeStrong((id *)&self->_selfRemovalWatchdog, 0);
  objc_storeStrong((id *)&self->_sharedUserLastSyncManager, 0);
  objc_storeStrong((id *)&self->_lastRemovedCurrentAccessoryUUID, 0);
  objc_storeStrong((id *)&self->_multiUserSettingsMetricEventDispatcher, 0);
  objc_storeStrong((id *)&self->_siriEndPointSettingsSyncManager, 0);
  objc_storeStrong((id *)&self->_eventRouterAssertionController, 0);
  objc_storeStrong((id *)&self->_eventRouterXPCServer, 0);
  objc_storeStrong((id *)&self->_loggingMemoryEventForwarder, 0);
  objc_storeStrong((id *)&self->_memoryEventRouter, 0);
  objc_storeStrong((id *)&self->_registrationForwardingEventRouter, 0);
  objc_storeStrong((id *)&self->_bonjourBrowserHelperLastCompletionDate, 0);
  objc_storeStrong((id *)&self->_connectionsManager, 0);
  objc_storeStrong((id *)&self->_microLocationManager, 0);
  objc_storeStrong((id *)&self->_microLocationLogEventObserver, 0);
  objc_storeStrong((id *)&self->_biomeLogEventObserver, 0);
  objc_storeStrong((id *)&self->_duetSubscriber, 0);
  objc_storeStrong((id *)&self->_bonjourBrowser, 0);
  objc_storeStrong((id *)&self->_cameraClipsQuotaMessenger, 0);
  objc_storeStrong((id *)&self->_memoryTracker, 0);
  objc_storeStrong((id *)&self->_accessorySetupCoordinator, 0);
  objc_storeStrong((id *)&self->_appleMediaAccessoryDiagnosticInfoController, 0);
  objc_storeStrong((id *)&self->_multiUserStatusController, 0);
  objc_storeStrong((id *)&self->_userCloudShareManager, 0);
  objc_storeStrong((id *)&self->_unprocessedOperationModelIdentifiers, 0);
  objc_storeStrong((id *)&self->_remoteAccountManager, 0);
  objc_storeStrong((id *)&self->_darwinNotificationProvider, 0);
  objc_storeStrong((id *)&self->_demoAccessories, 0);
  objc_storeStrong((id *)&self->_mergeIDsOfUsersOfRemovedSharedHomes, 0);
  objc_storeStrong((id *)&self->_accessorySetupMetricDispatchers, 0);
  objc_storeStrong((id *)&self->_deviceSetupSessions, 0);
  objc_storeStrong((id *)&self->_userPushCacheMap, 0);
  objc_storeStrong((id *)&self->_companionManager, 0);
  objc_storeStrong((id *)&self->_pendingHomesBeingRemoved, 0);
  objc_storeStrong((id *)&self->_memoryMonitorLogEventTimer, 0);
  objc_storeStrong((id *)&self->_periodicMobileCatalogUpdateTimer, 0);
  objc_storeStrong((id *)&self->_debounceHomesUpdateTimer, 0);
  objc_storeStrong((id *)&self->_bgOpsManager, 0);
  objc_storeStrong((id *)&self->_appleAccountManager, 0);
  objc_storeStrong((id *)&self->_logEventSubmitter, 0);
  objc_storeStrong((id *)&self->_metricsManager, 0);
  objc_storeStrong((id *)&self->_cameraLoadBalancer, 0);
  objc_storeStrong((id *)&self->_lookup, 0);
  objc_storeStrong((id *)&self->_capabilitiesController, 0);
  objc_storeStrong((id *)&self->_idsServerBag, 0);
  objc_storeStrong((id *)&self->_mtsXPCServer, 0);
  objc_storeStrong((id *)&self->_chipDataSource, 0);
  objc_storeStrong((id *)&self->_compositeSettingsControllerManager, 0);
  objc_storeStrong((id *)&self->_gatherer, 0);
  objc_storeStrong((id *)&self->_widgetConfigurationReader, 0);
  objc_storeStrong((id *)&self->_softwareUpdateManager, 0);
  objc_storeStrong((id *)&self->_startupCompleted, 0);
  objc_storeStrong((id *)&self->_overrideCurrentHomeUUIDToNil, 0);
  objc_storeStrong((id *)&self->_currentHomeUUIDOverride, 0);
  objc_storeStrong((id *)&self->_currentHomeUUID, 0);
  objc_storeStrong((id *)&self->_sharedUserPrivateSettingsManager, 0);
  objc_storeStrong((id *)&self->_homeSharedUserCloudShareManager, 0);
  objc_storeStrong((id *)&self->_homeOwnerCloudShareManager, 0);
  objc_storeStrong((id *)&self->_logger, 0);
  objc_storeStrong((id *)&self->_homes, 0);
}

- (void)setCloudReachabilityMonitor:(id)a3
{
}

- (HMFNetMonitor)cloudReachabilityMonitor
{
  return self->_cloudReachabilityMonitor;
}

- (void)setReachabilityMonitor:(id)a3
{
}

- (HMFNetMonitor)reachabilityMonitor
{
  return self->_reachabilityMonitor;
}

- (void)setIsOwnerPingPending:(BOOL)a3
{
  self->_isOwnerPingPending = a3;
}

- (BOOL)isOwnerPingPending
{
  return self->_isOwnerPingPending;
}

- (HMFAsyncContext)workContext
{
  return (HMFAsyncContext *)objc_getProperty(self, a2, 1216, 1);
}

- (BOOL)firstCloudKitImportComplete
{
  return self->_firstCloudKitImportComplete;
}

- (BOOL)deviceAccountHasSettled
{
  return self->_deviceAccountHasSettled;
}

- (BOOL)startupHasCompleted
{
  return self->_startupHasCompleted;
}

- (HMFPromise)startupPromise
{
  return (HMFPromise *)objc_getProperty(self, a2, 1208, 1);
}

- (void)setAssistantIdentifierChanged:(BOOL)a3
{
  self->_assistantIdentifierChanged = a3;
}

- (BOOL)assistantIdentifierChanged
{
  return self->_assistantIdentifierChanged;
}

- (void)setConfiguringStateController:(id)a3
{
}

- (HMDDeviceSetupConfiguringController)configuringStateController
{
  return self->_configuringStateController;
}

- (void)setCurrentHomeConfigurations:(id)a3
{
}

- (NSMutableDictionary)currentHomeConfigurations
{
  return self->_currentHomeConfigurations;
}

- (HMDMatterXPCListener)matterXPCListener
{
  return self->_matterXPCListener;
}

- (HMDCHIPXPCListener)chipXPCListener
{
  return self->_chipXPCListener;
}

- (NSMapTable)homeUUIDsByWalletKeyAssertionXPCConnection
{
  return (NSMapTable *)objc_getProperty(self, a2, 1168, 1);
}

- (void)setMediaGroupParticipantDataLocalStorage:(id)a3
{
}

- (HMDMediaGroupParticipantLocalDataStorage)mediaGroupParticipantDataLocalStorage
{
  return (HMDMediaGroupParticipantLocalDataStorage *)objc_getProperty(self, a2, 1160, 1);
}

- (HMDUserDeviceCapabilitiesRequestManager)userDeviceCapabilitiesRequestManager
{
  return self->_userDeviceCapabilitiesRequestManager;
}

- (void)setMobileAssetManager:(id)a3
{
}

- (HMDMobileAssetManager)mobileAssetManager
{
  return self->_mobileAssetManager;
}

- (void)setLastEventStoreController:(id)a3
{
}

- (HMDLastEventStoreController)lastEventStoreController
{
  return self->_lastEventStoreController;
}

- (void)setLastEventStore:(id)a3
{
}

- (HMELastEventStore)lastEventStore
{
  return self->_lastEventStore;
}

- (void)setAccessoryBrowserInternal:(id)a3
{
}

- (HMDAccessoryBrowser)accessoryBrowserInternal
{
  return self->_accessoryBrowserInternal;
}

- (void)setBiomeEventManager:(id)a3
{
}

- (HMDBiomeEventManager)biomeEventManager
{
  return (HMDBiomeEventManager *)objc_getProperty(self, a2, 1112, 1);
}

- (HMFTimer)debounceRegenerateAssistantSyncDataTimer
{
  return self->_debounceRegenerateAssistantSyncDataTimer;
}

- (HMDMatterSoftwareUpdateProviderDelegate)matterSoftwareUpdateProviderDelegate
{
  return self->_matterSoftwareUpdateProviderDelegate;
}

- (HMDAccessoryFirmwareUpdateManager)accessoryFirmwareUpdateManager
{
  return self->_accessoryFirmwareUpdateManager;
}

- (void)setSiriSyncNotificationTime:(unint64_t)a3
{
  self->_siriSyncNotificationTime = a3;
}

- (unint64_t)siriSyncNotificationTime
{
  return self->_siriSyncNotificationTime;
}

- (HMDAppleAccessoryPairingController)legacyAccessoryPairingController
{
  return self->_legacyAccessoryPairingController;
}

- (HMDCloudAccount)cloudAccount
{
  return self->_cloudAccount;
}

- (HMDSyncOperationManager)syncManager
{
  return self->_syncManager;
}

- (void)setHh2MigrationInProgress:(BOOL)a3
{
  self->_hh2MigrationInProgress = a3;
}

- (BOOL)isHH2MigrationInProgress
{
  return self->_hh2MigrationInProgress;
}

- (void)setMkfContext:(id)a3
{
}

- (id)mkfContext
{
  return objc_getProperty(self, a2, 1048, 1);
}

- (HMDSiriEndpointOnboardingManager)siriEndpointOnboardingManager
{
  return (HMDSiriEndpointOnboardingManager *)objc_getProperty(self, a2, 1040, 1);
}

- (void)setHh2FrameworkSwitch:(id)a3
{
}

- (HMDHH2FrameworkSwitch)hh2FrameworkSwitch
{
  return self->_hh2FrameworkSwitch;
}

- (HMDAccessorySetupManager)accessorySetupManager
{
  return self->_accessorySetupManager;
}

- (void)setCurrentAccessorySetupMetricDispatcher:(id)a3
{
}

- (HMDCurrentAccessorySetupMetricDispatcher)currentAccessorySetupMetricDispatcher
{
  return self->_currentAccessorySetupMetricDispatcher;
}

- (NSUserDefaults)userDefaults
{
  return self->_userDefaults;
}

- (void)setResidentMesh:(id)a3
{
}

- (HMDResidentMesh)residentMesh
{
  return self->_residentMesh;
}

- (void)setAppData:(id)a3
{
}

- (HMDApplicationData)appData
{
  return self->_appData;
}

- (void)setNeedToCleanUpKeys:(BOOL)a3
{
  self->_needToCleanUpKeys = a3;
}

- (BOOL)needToCleanUpKeys
{
  return self->_needToCleanUpKeys;
}

- (void)setCloudkitAccountStatusDetermined:(BOOL)a3
{
  self->_cloudkitAccountStatusDetermined = a3;
}

- (BOOL)cloudkitAccountStatusDetermined
{
  return self->_cloudkitAccountStatusDetermined;
}

- (HMFTimer)watchPushDelayTimer
{
  return self->_watchPushDelayTimer;
}

- (void)setHomeDataLoadedFromArchive:(BOOL)a3
{
  self->_homeDataLoadedFromArchive = a3;
}

- (BOOL)homeDataLoadedFromArchive
{
  return self->_homeDataLoadedFromArchive;
}

- (void)setPendingFragmentationStream:(id)a3
{
}

- (NSMutableDictionary)pendingFragmentationStream
{
  return self->_pendingFragmentationStream;
}

- (unsigned)nextRequestTransactionIdentifier
{
  return self->_nextRequestTransactionIdentifier;
}

- (void)setRemoteAccessHealthMonitorTimer:(id)a3
{
}

- (HMFTimer)remoteAccessHealthMonitorTimer
{
  return self->_remoteAccessHealthMonitorTimer;
}

- (void)setAccountStatusIsAuthenticated:(BOOL)a3
{
  self->_accountStatusIsAuthenticated = a3;
}

- (BOOL)accountStatusIsAuthenticated
{
  return self->_accountStatusIsAuthenticated;
}

- (void)setClientConnectionQueue:(id)a3
{
}

- (OS_dispatch_queue)clientConnectionQueue
{
  return self->_clientConnectionQueue;
}

- (void)setClientConnection:(id)a3
{
}

- (HMDClientConnection)clientConnection
{
  return self->_clientConnection;
}

- (void)setCompanionReachable:(BOOL)a3
{
  self->_companionReachable = a3;
}

- (BOOL)companionReachable
{
  return self->_companionReachable;
}

- (void)setIgnoreFirstTimeReachabilityChanged:(BOOL)a3
{
  self->_ignoreFirstTimeReachabilityChanged = a3;
}

- (BOOL)ignoreFirstTimeReachabilityChanged
{
  return self->_ignoreFirstTimeReachabilityChanged;
}

- (void)setIncomingInvitations:(id)a3
{
}

- (NSMutableArray)incomingInvitations
{
  return self->_incomingInvitations;
}

- (HMDAccountRegistry)accountRegistry
{
  return self->_accountRegistry;
}

- (void)setFmfHandler:(id)a3
{
}

- (HMDFMFHandler)fmfHandler
{
  return self->_fmfHandler;
}

- (void)setLocationHandler:(id)a3
{
}

- (HMDLocation)locationHandler
{
  return self->_locationHandler;
}

- (void)setUploadMetadataToCloud:(BOOL)a3
{
  self->_uploadMetadataToCloud = a3;
}

- (BOOL)uploadMetadataToCloud
{
  return self->_uploadMetadataToCloud;
}

- (void)setCloudDataSyncStateFilter:(id)a3
{
}

- (HMDCloudDataSyncStateFilter)cloudDataSyncStateFilter
{
  return self->_cloudDataSyncStateFilter;
}

- (void)setCloudOperationRetryTimer:(id)a3
{
}

- (OS_dispatch_source)cloudOperationRetryTimer
{
  return self->_cloudOperationRetryTimer;
}

- (void)setLastAnswerForShouldCloudSyncData:(BOOL)a3
{
  self->_lastAnswerForShouldCloudSyncData = a3;
}

- (BOOL)lastAnswerForShouldCloudSyncData
{
  return self->_lastAnswerForShouldCloudSyncData;
}

- (void)setForceFetchHomeManagerZone:(BOOL)a3
{
  self->_forceFetchHomeManagerZone = a3;
}

- (BOOL)forceFetchHomeManagerZone
{
  return self->_forceFetchHomeManagerZone;
}

- (void)setUploadHomeDataToCloud:(BOOL)a3
{
  self->_uploadHomeDataToCloud = a3;
}

- (BOOL)uploadHomeDataToCloud
{
  return self->_uploadHomeDataToCloud;
}

- (void)setUploadToCloudIsPending:(BOOL)a3
{
  self->_uploadToCloudIsPending = a3;
}

- (BOOL)uploadToCloudIsPending
{
  return self->_uploadToCloudIsPending;
}

- (void)setCloudOperationRetryCount:(unint64_t)a3
{
  self->_cloudOperationRetryCount = a3;
}

- (unint64_t)cloudOperationRetryCount
{
  return self->_cloudOperationRetryCount;
}

- (void)setBackOffOperationInProgress:(BOOL)a3
{
  self->_backOffOperationInProgress = a3;
}

- (BOOL)backOffOperationInProgress
{
  return self->_backOffOperationInProgress;
}

- (void)setAccountStatusFailedDueToNetworkFailure:(BOOL)a3
{
  self->_accountStatusFailedDueToNetworkFailure = a3;
}

- (BOOL)accountStatusFailedDueToNetworkFailure
{
  return self->_accountStatusFailedDueToNetworkFailure;
}

- (void)setAccountActive:(BOOL)a3
{
  self->_accountActive = a3;
}

- (BOOL)accountActive
{
  return self->_accountActive;
}

- (void)setIdentityRegistry:(id)a3
{
}

- (HMDIdentityRegistry)identityRegistry
{
  return self->_identityRegistry;
}

- (void)setDialogCancelationContexts:(id)a3
{
}

- (NSMutableSet)dialogCancelationContexts
{
  return self->_dialogCancelationContexts;
}

- (void)setMsgFilterChain:(id)a3
{
}

- (HMDMessageFilterChain)msgFilterChain
{
  return self->_msgFilterChain;
}

- (void)setPendingResidentSetupSessions:(id)a3
{
}

- (NSMutableSet)pendingResidentSetupSessions
{
  return self->_pendingResidentSetupSessions;
}

- (void)setPendingRemoteSessions:(id)a3
{
}

- (NSMutableDictionary)pendingRemoteSessions
{
  return self->_pendingRemoteSessions;
}

- (void)setPendingDataSyncAcks:(id)a3
{
}

- (NSMutableDictionary)pendingDataSyncAcks
{
  return self->_pendingDataSyncAcks;
}

- (void)setRecoveryVersion:(int64_t)a3
{
  self->_recoveryVersion = a3;
}

- (int64_t)recoveryVersion
{
  return self->_recoveryVersion;
}

- (void)setDataTag:(id)a3
{
}

- (NSUUID)dataTag
{
  return self->_dataTag;
}

- (void)setBackingStore:(id)a3
{
}

- (HMDBackingStore)backingStore
{
  return self->_backingStore;
}

- (HMDWatchManager)watchManager
{
  return self->_watchManager;
}

- (void)setHomepodSetupRetryCount:(unint64_t)a3
{
  self->_homepodSetupRetryCount = a3;
}

- (unint64_t)homepodSetupRetryCount
{
  return self->_homepodSetupRetryCount;
}

- (void)setSetupActivity:(id)a3
{
}

- (HMFActivity)setupActivity
{
  return self->_setupActivity;
}

- (void)setIdsFirewallManager:(id)a3
{
}

- (HMDIDSFirewallManager)idsFirewallManager
{
  return self->_idsFirewallManager;
}

- (void)setIdsInvitationManager:(id)a3
{
}

- (HMDIDSInvitationManager)idsInvitationManager
{
  return self->_idsInvitationManager;
}

- (void)setNotificationCenter:(id)a3
{
}

- (NSNotificationCenter)notificationCenter
{
  return self->_notificationCenter;
}

- (void)setPowerManager:(id)a3
{
}

- (HMDPowerManager)powerManager
{
  return self->_powerManager;
}

- (void)setPendingResponsesForAccessoryFinder:(id)a3
{
}

- (NSMutableArray)pendingResponsesForAccessoryFinder
{
  return self->_pendingResponsesForAccessoryFinder;
}

- (void)setAccessoryFinderTimer:(id)a3
{
}

- (OS_dispatch_source)accessoryFinderTimer
{
  return self->_accessoryFinderTimer;
}

- (void)setNameValidator:(id)a3
{
}

- (HMDNameValidator)nameValidator
{
  return self->_nameValidator;
}

- (void)setAssistantGenerationCounter:(unint64_t)a3
{
  self->_assistantGenerationCounter = a3;
}

- (unint64_t)assistantGenerationCounter
{
  return self->_assistantGenerationCounter;
}

- (void)setGenerationCounterToken:(int)a3
{
  self->_generationCounterToken = a3;
}

- (int)generationCounterToken
{
  return self->_generationCounterToken;
}

- (HMDPairedSync)pairedSync
{
  return self->_pairedSync;
}

- (NSMapTable)watchSyncRetryContextByRetryTimer
{
  return (NSMapTable *)objc_getProperty(self, a2, 720, 1);
}

- (NSMutableDictionary)watchSyncRetryContextBySyncIdentifier
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 712, 1);
}

- (NSMutableDictionary)watchSyncStateMap
{
  return self->_watchSyncStateMap;
}

- (NSMutableDictionary)associatedWatchPeers
{
  return self->_associatedWatchPeers;
}

- (void)setFullSyncedWatchPeers:(id)a3
{
}

- (NSMutableSet)fullSyncedWatchPeers
{
  return self->_fullSyncedWatchPeers;
}

- (void)setAssociatedRemotePeers:(id)a3
{
}

- (NSMutableDictionary)associatedRemotePeers
{
  return self->_associatedRemotePeers;
}

- (void)setUnassociatedRemotePeers:(id)a3
{
}

- (NSMutableSet)unassociatedRemotePeers
{
  return self->_unassociatedRemotePeers;
}

- (void)setMessageDispatcher:(id)a3
{
}

- (HMDMessageDispatcher)messageDispatcher
{
  return self->_messageDispatcher;
}

- (void)setWorkQueue:(id)a3
{
}

- (OS_dispatch_queue)workQueue
{
  return self->_workQueue;
}

- (void)setPrimaryHomeUUID:(id)a3
{
}

- (NSUUID)primaryHomeUUID
{
  return self->_primaryHomeUUID;
}

- (void)setUuidsOfRemovedHomes:(id)a3
{
}

- (NSMutableArray)uuidsOfRemovedHomes
{
  return self->_uuidsOfRemovedHomes;
}

- (void)setCloudZones:(id)a3
{
}

- (NSMutableArray)cloudZones
{
  return self->_cloudZones;
}

- (void)setHomeManagerZoneFirstFetch:(BOOL)a3
{
  self->_homeManagerZoneFirstFetch = a3;
}

- (BOOL)isHomeManagerZoneFirstFetch
{
  return self->_homeManagerZoneFirstFetch;
}

- (NSUUID)uuid
{
  return self->_uuid;
}

- (HMDHomeManagerObjectChangeHandler)homeManagerObjectChangeHandler
{
  return self->_homeManagerObjectChangeHandler;
}

- (id)wifiManagerFactory
{
  return objc_getProperty(self, a2, 608, 1);
}

- (void)setInitialPCSStatusFetchCompleted:(BOOL)a3
{
  self->_initialPCSStatusFetchCompleted = a3;
}

- (BOOL)initialPCSStatusFetchCompleted
{
  return self->_initialPCSStatusFetchCompleted;
}

- (void)setDefaultDatabase:(id)a3
{
}

- (HMDDatabase)defaultDatabase
{
  return self->_defaultDatabase;
}

- (void)setHapKeyStore:(id)a3
{
}

- (HAPKeyStore)hapKeyStore
{
  return self->_hapKeyStore;
}

- (void)setPendingSharedUserAcceptLogEventBuilders:(id)a3
{
}

- (NSMutableDictionary)pendingSharedUserAcceptLogEventBuilders
{
  return self->_pendingSharedUserAcceptLogEventBuilders;
}

- (void)setDidCreateAddACWGKeysOperation:(BOOL)a3
{
  self->_didCreateAddACWGKeysOperation = a3;
}

- (BOOL)didCreateAddACWGKeysOperation
{
  return self->_didCreateAddACWGKeysOperation;
}

- (HMDWidgetTimelineRefresher)widgetTimelineRefresher
{
  return (HMDWidgetTimelineRefresher *)objc_getProperty(self, a2, 576, 1);
}

- (void)setHasAccessoryBrowsingBeenRequested:(BOOL)a3
{
  self->_hasAccessoryBrowsingBeenRequested = a3;
}

- (BOOL)hasAccessoryBrowsingBeenRequested
{
  return self->_hasAccessoryBrowsingBeenRequested;
}

- (void)setSelfRemovalWatchdog:(id)a3
{
}

- (HMDSelfRemovalWatchdog)selfRemovalWatchdog
{
  return self->_selfRemovalWatchdog;
}

- (void)setSharedUserLastSyncManager:(id)a3
{
}

- (HMDHomeManagerHH2SharedUserLastSyncManager)sharedUserLastSyncManager
{
  return self->_sharedUserLastSyncManager;
}

- (void)setLastRemovedCurrentAccessoryUUID:(id)a3
{
}

- (NSUUID)lastRemovedCurrentAccessoryUUID
{
  return (NSUUID *)objc_getProperty(self, a2, 552, 1);
}

- (void)setMissingHomeDataRecord:(BOOL)a3
{
  self->_missingHomeDataRecord = a3;
}

- (BOOL)missingHomeDataRecord
{
  return self->_missingHomeDataRecord;
}

- (HMDMultiUserSettingsMetricsEventDispatcher)multiUserSettingsMetricEventDispatcher
{
  return (HMDMultiUserSettingsMetricsEventDispatcher *)objc_getProperty(self, a2, 544, 1);
}

- (void)setSiriEndPointSettingsSyncManager:(id)a3
{
}

- (HMDSiriEndpointSettingsSyncManager)siriEndPointSettingsSyncManager
{
  return (HMDSiriEndpointSettingsSyncManager *)objc_getProperty(self, a2, 536, 1);
}

- (void)setEventRouterAssertionController:(id)a3
{
}

- (HMDRemoteEventRouterAssertionController)eventRouterAssertionController
{
  return self->_eventRouterAssertionController;
}

- (void)setEventRouterXPCServer:(id)a3
{
}

- (HMDXPCEventRouterServer)eventRouterXPCServer
{
  return self->_eventRouterXPCServer;
}

- (void)setLoggingMemoryEventForwarder:(id)a3
{
}

- (HMDLoggingEventForwarder)loggingMemoryEventForwarder
{
  return self->_loggingMemoryEventForwarder;
}

- (void)setMemoryEventRouter:(id)a3
{
}

- (HMEMemoryEventBus)memoryEventRouter
{
  return self->_memoryEventRouter;
}

- (void)setRegistrationForwardingEventRouter:(id)a3
{
}

- (HMEDelegatingEventRouter)registrationForwardingEventRouter
{
  return self->_registrationForwardingEventRouter;
}

- (void)setBonjourBrowserHelperLastCompletionDate:(id)a3
{
}

- (NSDate)bonjourBrowserHelperLastCompletionDate
{
  return self->_bonjourBrowserHelperLastCompletionDate;
}

- (HMDHomeManagerXPCClientConnectionsManager)connectionsManager
{
  return (HMDHomeManagerXPCClientConnectionsManager *)objc_getProperty(self, a2, 480, 1);
}

- (void)setMicroLocationManager:(id)a3
{
}

- (HMDMicroLocationManager)microLocationManager
{
  return (HMDMicroLocationManager *)objc_getProperty(self, a2, 472, 1);
}

- (void)setMicroLocationLogEventObserver:(id)a3
{
}

- (HMDMicroLocationLogEventObserver)microLocationLogEventObserver
{
  return (HMDMicroLocationLogEventObserver *)objc_getProperty(self, a2, 464, 1);
}

- (void)setBiomeLogEventObserver:(id)a3
{
}

- (HMDBiomeLogEventObserver)biomeLogEventObserver
{
  return (HMDBiomeLogEventObserver *)objc_getProperty(self, a2, 456, 1);
}

- (void)setDuetSubscriber:(id)a3
{
}

- (HMDDuetPredictionSubscriber)duetSubscriber
{
  return (HMDDuetPredictionSubscriber *)objc_getProperty(self, a2, 448, 1);
}

- (void)setBonjourBrowser:(id)a3
{
}

- (HMDBonjourBrowserHelper)bonjourBrowser
{
  return self->_bonjourBrowser;
}

- (HMDCameraClipsQuotaMessenger)cameraClipsQuotaMessenger
{
  return (HMDCameraClipsQuotaMessenger *)objc_getProperty(self, a2, 432, 1);
}

- (HMDMemoryUtilizationTracker)memoryTracker
{
  return self->_memoryTracker;
}

- (HMDAccessorySetupCoordinator)accessorySetupCoordinator
{
  return (HMDAccessorySetupCoordinator *)objc_getProperty(self, a2, 416, 1);
}

- (HMDAppleMediaAccessoryDiagnosticInfoController)appleMediaAccessoryDiagnosticInfoController
{
  return self->_appleMediaAccessoryDiagnosticInfoController;
}

- (HMDMultiUserStatusController)multiUserStatusController
{
  return self->_multiUserStatusController;
}

- (HMDUserCloudShareManager)userCloudShareManager
{
  return self->_userCloudShareManager;
}

- (void)setUnprocessedOperationModelIdentifiers:(id)a3
{
}

- (NSMutableSet)unprocessedOperationModelIdentifiers
{
  return self->_unprocessedOperationModelIdentifiers;
}

- (HMDRemoteAccountManager)remoteAccountManager
{
  return self->_remoteAccountManager;
}

- (HMDarwinNotificationProvider)darwinNotificationProvider
{
  return self->_darwinNotificationProvider;
}

- (void)setSpeakersAreConfiguredInOwnedHomes:(BOOL)a3
{
  self->_speakersAreConfiguredInOwnedHomes = a3;
}

- (BOOL)speakersAreConfiguredInOwnedHomes
{
  return self->_speakersAreConfiguredInOwnedHomes;
}

- (void)setSpeakersAreConfigured:(BOOL)a3
{
  self->_speakersAreConfigured = a3;
}

- (BOOL)speakersAreConfigured
{
  return self->_speakersAreConfigured;
}

- (void)setDemoAccessories:(id)a3
{
}

- (NSDictionary)demoAccessories
{
  return self->_demoAccessories;
}

- (NSMutableSet)mergeIDsOfUsersOfRemovedSharedHomes
{
  return self->_mergeIDsOfUsersOfRemovedSharedHomes;
}

- (NSMutableArray)accessorySetupMetricDispatchers
{
  return self->_accessorySetupMetricDispatchers;
}

- (NSMutableArray)deviceSetupSessions
{
  return self->_deviceSetupSessions;
}

- (NSMutableDictionary)userPushCacheMap
{
  return self->_userPushCacheMap;
}

- (void)setCacheUseAllowed:(BOOL)a3
{
  self->_cacheUseAllowed = a3;
}

- (BOOL)cacheUseAllowed
{
  return self->_cacheUseAllowed;
}

- (void)setResidentEnabledState:(int64_t)a3
{
  self->_residentEnabledState = a3;
}

- (int64_t)residentEnabledState
{
  return self->_residentEnabledState;
}

- (HMDCompanionManager)companionManager
{
  return self->_companionManager;
}

- (void)setPendingHomesBeingRemoved:(id)a3
{
}

- (NSMutableSet)pendingHomesBeingRemoved
{
  return self->_pendingHomesBeingRemoved;
}

- (void)setMemoryMonitorLogEventTimer:(id)a3
{
}

- (HMFTimer)memoryMonitorLogEventTimer
{
  return self->_memoryMonitorLogEventTimer;
}

- (void)setPeriodicMobileCatalogUpdateTimer:(id)a3
{
}

- (HMFTimer)periodicMobileCatalogUpdateTimer
{
  return self->_periodicMobileCatalogUpdateTimer;
}

- (void)setDebounceHomesUpdateTimer:(id)a3
{
}

- (HMFTimer)debounceHomesUpdateTimer
{
  return self->_debounceHomesUpdateTimer;
}

- (HMDBackgroundOperationManager)bgOpsManager
{
  return (HMDBackgroundOperationManager *)objc_getProperty(self, a2, 272, 1);
}

- (void)setAppleAccountManager:(id)a3
{
}

- (HMDAppleAccountManager)appleAccountManager
{
  return self->_appleAccountManager;
}

- (void)setLogEventSubmitter:(id)a3
{
}

- (HMMLogEventSubmitting)logEventSubmitter
{
  return self->_logEventSubmitter;
}

- (HMDMetricsManager)metricsManager
{
  return self->_metricsManager;
}

- (void)setHasFinishedStartingUp:(BOOL)a3
{
  self->_hasFinishedStartingUp = a3;
}

- (BOOL)hasFinishedStartingUp
{
  return self->_hasFinishedStartingUp;
}

- (void)setHasLoadedData:(BOOL)a3
{
  self->_hasLoadedData = a3;
}

- (BOOL)hasLoadedData
{
  return self->_hasLoadedData;
}

- (HMDCameraRecordingLoadBalancer)cameraLoadBalancer
{
  return self->_cameraLoadBalancer;
}

- (HMDHomeManagerObjectLookup)lookup
{
  return self->_lookup;
}

- (HMDCapabilitiesController)capabilitiesController
{
  return self->_capabilitiesController;
}

- (void)setIdsServerBag:(id)a3
{
}

- (HMDIDSServerBag)idsServerBag
{
  return (HMDIDSServerBag *)objc_getProperty(self, a2, 216, 1);
}

- (HMDMTSXPCServer)mtsXPCServer
{
  return (HMDMTSXPCServer *)objc_getProperty(self, a2, 208, 1);
}

- (HMDCHIPDataSource)chipDataSource
{
  return (HMDCHIPDataSource *)objc_getProperty(self, a2, 200, 1);
}

- (HMDCompositeSettingsControllerManager)compositeSettingsControllerManager
{
  return (HMDCompositeSettingsControllerManager *)objc_getProperty(self, a2, 192, 1);
}

- (void)setGatherer:(id)a3
{
}

- (HMDAssistantGather)gatherer
{
  return self->_gatherer;
}

- (unint64_t)status
{
  return self->_status;
}

- (HMDWidgetConfigurationReader)widgetConfigurationReader
{
  return self->_widgetConfigurationReader;
}

- (HMDSoftwareUpdateManager)softwareUpdateManager
{
  return self->_softwareUpdateManager;
}

- (BOOL)demoFinalized
{
  return self->_demoFinalized;
}

- (void)setHaveQueuedUpdateAccessories:(BOOL)a3
{
  self->_haveQueuedUpdateAccessories = a3;
}

- (BOOL)haveQueuedUpdateAccessories
{
  return self->_haveQueuedUpdateAccessories;
}

- (void)setPcsEnabled:(BOOL)a3
{
  self->_pcsEnabled = a3;
}

- (BOOL)pcsEnabled
{
  return self->_pcsEnabled;
}

- (unint64_t)homeDatabaseSize
{
  return self->_homeDatabaseSize;
}

- (void)removeSharedUserAcceptEventBuilderForHomeUuid:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v7 = v4;
    p_lock = &self->_lock;
    os_unfair_lock_lock_with_options();
    id v6 = [(HMDHomeManager *)self pendingSharedUserAcceptLogEventBuilders];
    [v6 removeObjectForKey:v7];

    os_unfair_lock_unlock(p_lock);
    id v4 = v7;
  }
}

- (id)sharedUserAcceptEventBuilderForHomeUuid:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    p_lock = &self->_lock;
    os_unfair_lock_lock_with_options();
    id v6 = [(HMDHomeManager *)self pendingSharedUserAcceptLogEventBuilders];
    id v7 = [v6 objectForKeyedSubscript:v4];

    os_unfair_lock_unlock(p_lock);
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

- (void)addSharedUserAcceptEventBuilder:(id)a3 forHomeUuid:(id)a4
{
  id v11 = a3;
  id v6 = a4;
  if (v11 && v6)
  {
    p_lock = &self->_lock;
    os_unfair_lock_lock_with_options();
    id v8 = [(HMDHomeManager *)self pendingSharedUserAcceptLogEventBuilders];

    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x263EFF9A0]);
      [(HMDHomeManager *)self setPendingSharedUserAcceptLogEventBuilders:v9];
    }
    uint64_t v10 = [(HMDHomeManager *)self pendingSharedUserAcceptLogEventBuilders];
    [v10 setObject:v11 forKeyedSubscript:v6];

    os_unfair_lock_unlock(p_lock);
  }
}

- (void)_signpostAssistantSyncDataRequestHandled
{
  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    *(_WORD *)id v3 = 0;
    _os_signpost_emit_with_name_impl(&dword_22F52A000, logger, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AssistantSyncDataRequestHandled", "", v3, 2u);
  }
}

- (void)_signpostAssistantSyncDataNotification
{
  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    *(_WORD *)id v3 = 0;
    _os_signpost_emit_with_name_impl(&dword_22F52A000, logger, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NotifyAssistantSyncDataReadiness", "", v3, 2u);
  }
}

- (void)_handlePrepareForDiagnosticExtension:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ((isInternalBuild() & 1) == 0)
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      int v18 = 138543618;
      long long v19 = v10;
      __int16 v20 = 2112;
      id v21 = v4;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_FAULT, "%{public}@Should never call _handlePrepareForDiagnosticExtension in non-internal builds: %@", (uint8_t *)&v18, 0x16u);
    }
    id v11 = (void *)MEMORY[0x263F087E8];
    uint64_t v12 = 52;
    goto LABEL_10;
  }
  id v5 = [v4 name];
  char v6 = [v5 isEqualToString:*MEMORY[0x263F0CBC0]];

  if ((v6 & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      int v18 = 138543618;
      long long v19 = v16;
      __int16 v20 = 2112;
      id v21 = v4;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Received bad message in _handlePrepareForDiagnosticExtension: %@", (uint8_t *)&v18, 0x16u);
    }
    id v11 = (void *)MEMORY[0x263F087E8];
    uint64_t v12 = 3;
LABEL_10:
    long long v17 = [v11 hmErrorWithCode:v12];
    [v4 respondWithError:v17];

    goto LABEL_11;
  }
  [(HMDHomeManager *)self prepareForDiagnosticExtension:v4];
LABEL_11:
}

- (void)_handleDumpDatabase:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ((isInternalBuild() & 1) == 0)
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      int v18 = 138543618;
      long long v19 = v10;
      __int16 v20 = 2112;
      id v21 = v4;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_FAULT, "%{public}@Should never call _handleDumpDatabase in non-internal builds: %@", (uint8_t *)&v18, 0x16u);
    }
    id v11 = (void *)MEMORY[0x263F087E8];
    uint64_t v12 = 52;
    goto LABEL_10;
  }
  id v5 = [v4 name];
  char v6 = [v5 isEqualToString:*MEMORY[0x263F0CA48]];

  if ((v6 & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      int v18 = 138543618;
      long long v19 = v16;
      __int16 v20 = 2112;
      id v21 = v4;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Received bad message in _handleDumpDatabase: %@", (uint8_t *)&v18, 0x16u);
    }
    id v11 = (void *)MEMORY[0x263F087E8];
    uint64_t v12 = 3;
LABEL_10:
    long long v17 = [v11 hmErrorWithCode:v12];
    [v4 respondWithError:v17];

    goto LABEL_11;
  }
  [(HMDHomeManager *)self handleDumpDatabaseMessage:v4];
LABEL_11:
}

- (BOOL)expectingInvitationResponseForIdentifier:(id)a3
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (v4)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v5 = [(HMDHomeManager *)self homes];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v26;
      uint64_t v20 = *(void *)v26;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v26 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v25 + 1) + 8 * i);
          long long v21 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          id v11 = [v10 outgoingInvitations];
          uint64_t v12 = [v11 countByEnumeratingWithState:&v21 objects:v29 count:16];
          if (v12)
          {
            uint64_t v13 = v12;
            uint64_t v14 = *(void *)v22;
            while (2)
            {
              for (uint64_t j = 0; j != v13; ++j)
              {
                if (*(void *)v22 != v14) {
                  objc_enumerationMutation(v11);
                }
                uint64_t v16 = [*(id *)(*((void *)&v21 + 1) + 8 * j) identifier];
                char v17 = [v16 isEqual:v4];

                if (v17)
                {

                  BOOL v18 = 1;
                  goto LABEL_21;
                }
              }
              uint64_t v13 = [v11 countByEnumeratingWithState:&v21 objects:v29 count:16];
              if (v13) {
                continue;
              }
              break;
            }
          }

          uint64_t v8 = v20;
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
        BOOL v18 = 0;
      }
      while (v7);
    }
    else
    {
      BOOL v18 = 0;
    }
LABEL_21:
  }
  else
  {
    BOOL v18 = 0;
  }

  return v18;
}

- (BOOL)userWithMergeIdIsMemberOfAHome:(id)a3
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v40 = self;
  id obj = [(HMDHomeManager *)self homes];
  uint64_t v41 = [obj countByEnumeratingWithState:&v51 objects:v61 count:16];
  if (v41)
  {
    uint64_t v5 = *(void *)v52;
    uint64_t v38 = *(void *)v52;
    while (2)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v52 != v5)
        {
          uint64_t v7 = v6;
          objc_enumerationMutation(obj);
          uint64_t v6 = v7;
        }
        uint64_t v39 = v6;
        uint64_t v8 = *(void **)(*((void *)&v51 + 1) + 8 * v6);
        id v9 = [v8 userWithMergeID:v4];
        BOOL v10 = v9 == 0;

        if (!v10) {
          goto LABEL_33;
        }
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        id v11 = [v8 pendingUsers];
        uint64_t v12 = [v11 countByEnumeratingWithState:&v47 objects:v60 count:16];
        if (v12)
        {
          uint64_t v13 = *(void *)v48;
          while (2)
          {
            for (uint64_t i = 0; i != v12; ++i)
            {
              if (*(void *)v48 != v13) {
                objc_enumerationMutation(v11);
              }
              id v15 = *(void **)(*((void *)&v47 + 1) + 8 * i);
              uint64_t v16 = [v15 account];
              char v17 = [v16 senderCorrelationIdentifier];
              if ([v17 isEqualToString:v4])
              {

                goto LABEL_32;
              }
              BOOL v18 = [v15 mergeIdentifier];
              char v19 = [v18 isEqualToString:v4];

              if (v19) {
                goto LABEL_32;
              }
            }
            uint64_t v12 = [v11 countByEnumeratingWithState:&v47 objects:v60 count:16];
            if (v12) {
              continue;
            }
            break;
          }
        }

        uint64_t v20 = [(HMDHomeManager *)v40 sharedUserLastSyncManager];
        char v21 = [v20 isManagingUserWithMergeID:v4];

        if (v21) {
          goto LABEL_33;
        }
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        id v11 = [v8 removedUsers];
        uint64_t v22 = [v11 countByEnumeratingWithState:&v43 objects:v59 count:16];
        if (v22)
        {
          uint64_t v23 = *(void *)v44;
LABEL_19:
          uint64_t v24 = 0;
          while (1)
          {
            if (*(void *)v44 != v23) {
              objc_enumerationMutation(v11);
            }
            long long v25 = [*(id *)(*((void *)&v43 + 1) + 8 * v24) mergeID];
            char v26 = [v25 isEqualToString:v4];

            if (v26) {
              break;
            }
            if (v22 == ++v24)
            {
              uint64_t v22 = [v11 countByEnumeratingWithState:&v43 objects:v59 count:16];
              if (v22) {
                goto LABEL_19;
              }
              goto LABEL_25;
            }
          }
LABEL_32:

LABEL_33:
          goto LABEL_34;
        }
LABEL_25:

        uint64_t v5 = v38;
        uint64_t v6 = v39 + 1;
      }
      while (v39 + 1 != v41);
      uint64_t v41 = [obj countByEnumeratingWithState:&v51 objects:v61 count:16];
      uint64_t v5 = v38;
      if (v41) {
        continue;
      }
      break;
    }
  }

  p_lock = &v40->_lock;
  os_unfair_lock_lock_with_options();
  if ([(NSMutableSet *)v40->_mergeIDsOfUsersOfRemovedSharedHomes containsObject:v4])
  {
    long long v28 = (void *)MEMORY[0x230FBD990]();
    __int16 v29 = v40;
    HMFGetOSLogHandle();
    id v30 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      uint64_t v31 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      long long v56 = v31;
      __int16 v57 = 2112;
      id v58 = v4;
      _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_INFO, "%{public}@Merge ID %@ found in list of removed homes", buf, 0x16u);
    }
    os_unfair_lock_unlock(p_lock);
LABEL_34:
    BOOL v32 = 1;
  }
  else
  {
    os_unfair_lock_unlock(p_lock);
    __int16 v34 = (void *)MEMORY[0x230FBD990]();
    id v35 = v40;
    id v36 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      long long v56 = v37;
      __int16 v57 = 2112;
      id v58 = v4;
      _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_DEFAULT, "%{public}@Home Membership Verifier unable to find user with mergeID %@", buf, 0x16u);
    }
    BOOL v32 = 0;
  }

  return v32;
}

- (void)receivedRemoteMessageOverTransportType:(int)a3 remoteMessageSenderContext:(id)a4
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v6 = a4;
  if (a3 == 6)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v7 = [(HMDHomeManager *)self homes];
    uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v13;
LABEL_4:
      uint64_t v11 = 0;
      while (1)
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        if ([*(id *)(*((void *)&v12 + 1) + 8 * v11) receivedRemoteMessageOverTransportType:6 remoteMessageSenderContext:v6])break; {
        if (v9 == ++v11)
        }
        {
          uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
          if (v9) {
            goto LABEL_4;
          }
          break;
        }
      }
    }
  }
}

- (void)setFirstCloudKitImportComplete:(BOOL)a3
{
  self->_firstCloudKitImportComplete = a3;
}

- (void)setDeviceAccountHasSettled:(BOOL)a3
{
  self->_deviceAccountHasSettled = a3;
}

- (void)setStartupHasCompleted:(BOOL)a3
{
  self->_startupHasCompleted = a3;
}

- (void)setStartupPromise:(id)a3
{
}

- (HMFFuture)startupCompleted
{
  return self->_startupCompleted;
}

- (void)setStartupCompleted:(id)a3
{
}

- (id)createCurrentResidentCapabilities
{
  uint64_t v163 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self idsServerBag];
  uint64_t v4 = [v3 homeSafetySecurityEnabled];

  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    uint64_t v9 = [(HMDHomeManager *)v6 idsServerBag];
    uint64_t v10 = HMFBooleanToString();
    *(_DWORD *)long long buf = 138543874;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2112;
    v162 = v10;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@self.idsServerBag: %@, homeSafetySecurityEnabled: %@", buf, 0x20u);
  }
  uint64_t v11 = [[HMDMobileGestaltClient alloc] initWithHomeSafetySecurityEnabled:v4];
  long long v12 = [MEMORY[0x263F42620] productInfo];
  long long v13 = +[HMDHomeKitVersion currentVersion];
  id v14 = v12;
  long long v15 = v11;
  id v16 = v13;
  if (productIsResidentCapable(v14))
  {
    BOOL v156 = productSupportsCameraRecording(v14);
    BOOL v17 = productSupportsRouterManagement(v14);
    uint64_t v18 = 2;
    if (!v17) {
      uint64_t v18 = 0;
    }
    uint64_t v157 = v18;
    if (productSupportsShortcutActions(v14)) {
      uint64_t v19 = 4;
    }
    else {
      uint64_t v19 = 0;
    }
    BOOL v20 = productSupportsMediaActions(v14);
    uint64_t v21 = 8;
    if (!v20) {
      uint64_t v21 = 0;
    }
    uint64_t v159 = v21;
    if (productSupportsFirmwareUpdate(v14)) {
      uint64_t v22 = 32;
    }
    else {
      uint64_t v22 = 0;
    }
    BOOL v23 = productSupportsResidentFirmwareUpdate(v14);
    uint64_t v24 = 64;
    if (!v23) {
      uint64_t v24 = 0;
    }
    uint64_t v151 = v24;
    BOOL v25 = productSupportsCameraActivityZones(v14);
    uint64_t v26 = 128;
    if (!v25) {
      uint64_t v26 = 0;
    }
    uint64_t v150 = v26;
    BOOL v27 = productSupportsCameraActivityZones(v14);
    uint64_t v28 = 256;
    if (!v27) {
      uint64_t v28 = 0;
    }
    uint64_t v149 = v28;
    BOOL v29 = productSupportsCameraActivityZones(v14);
    uint64_t v30 = 512;
    if (!v29) {
      uint64_t v30 = 0;
    }
    uint64_t v148 = v30;
    BOOL v31 = productSupportsCameraActivityZones(v14);
    uint64_t v32 = 1024;
    if (!v31) {
      uint64_t v32 = 0;
    }
    uint64_t v147 = v32;
    BOOL v33 = productSupportsAnnounce(v14);
    uint64_t v34 = 2048;
    if (!v33) {
      uint64_t v34 = 0;
    }
    uint64_t v146 = v34;
    BOOL v35 = productSupportsWakeOnLAN(v14);
    uint64_t v36 = 4096;
    if (!v35) {
      uint64_t v36 = 0;
    }
    uint64_t v145 = v36;
    BOOL v37 = productSupportsLockNotificationContext(v14);
    uint64_t v38 = 0x2000;
    if (!v37) {
      uint64_t v38 = 0;
    }
    uint64_t v144 = v38;
    BOOL v39 = productSupportsLockNotificationContext(v14);
    uint64_t v40 = 0x4000;
    if (!v39) {
      uint64_t v40 = 0;
    }
    uint64_t v143 = v40;
    BOOL v41 = productSupportsLockNotificationContext(v14);
    uint64_t v42 = 0x8000;
    if (!v41) {
      uint64_t v42 = 0;
    }
    uint64_t v142 = v42;
    BOOL v43 = productSupportsLockNotificationContext(v14);
    uint64_t v44 = 0x10000;
    if (!v43) {
      uint64_t v44 = 0;
    }
    uint64_t v141 = v44;
    BOOL v45 = productSupportsLockNotificationContext(v14);
    uint64_t v46 = 0x20000;
    if (!v45) {
      uint64_t v46 = 0;
    }
    uint64_t v140 = v46;
    BOOL v47 = productSupportsSiriEndpointSetup(v14);
    uint64_t v48 = 0x80000;
    if (!v47) {
      uint64_t v48 = 0;
    }
    uint64_t v139 = v48;
    BOOL v49 = productSupportsCustomMediaApplicationDestination(v14);
    uint64_t v50 = 0x100000;
    if (!v49) {
      uint64_t v50 = 0;
    }
    uint64_t v138 = v50;
    BOOL v51 = productSupportsUnifiedMediaNotifications(v14);
    uint64_t v52 = 0x200000;
    if (!v51) {
      uint64_t v52 = 0;
    }
    uint64_t v137 = v52;
    BOOL v53 = productSupportsHomeHub(v14, v15);
    uint64_t v54 = 0x400000;
    if (!v53) {
      uint64_t v54 = 0;
    }
    uint64_t v136 = v54;
    BOOL AccessoryCommunication = productSupportsResidentFirstAccessoryCommunication(v14);
    uint64_t v56 = 0x800000;
    if (!AccessoryCommunication) {
      uint64_t v56 = 0;
    }
    uint64_t v135 = v56;
    BOOL v57 = productSupportsThreadNetworkCredentialSharing(v14, v15, v16);
    uint64_t v58 = 0x1000000;
    if (!v57) {
      uint64_t v58 = 0;
    }
    uint64_t v134 = v58;
    BOOL v59 = productSupportsMatterSharedAdminPairing(v14, v15, v16);
    uint64_t v60 = 0x2000000;
    if (!v59) {
      uint64_t v60 = 0;
    }
    uint64_t v133 = v60;
    memset(buf, 0, sizeof(buf));
    id v61 = v14;
    uint64_t v62 = [v61 softwareVersion];
    unint64_t v63 = v62;
    if (v62) {
      [v62 operatingSystemVersion];
    }
    else {
      memset(buf, 0, sizeof(buf));
    }

    uint64_t v65 = [v61 productPlatform];
    uint64_t v66 = [v61 productClass];

    if ((v66 | 2) == 6 && v65 == 4) {
      unint64_t v131 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 26;
    }
    else {
      unint64_t v131 = 0;
    }
    memset(buf, 0, sizeof(buf));
    id v67 = v61;
    uint64_t v68 = [v67 softwareVersion];
    v69 = v68;
    if (v68) {
      [v68 operatingSystemVersion];
    }
    else {
      memset(buf, 0, sizeof(buf));
    }

    uint64_t v70 = [v67 productPlatform];
    uint64_t v71 = [v67 productClass];

    uint64_t v160 = v22;
    if ((v71 | 2) == 6
      && v70 == 4
      && (HMFOperatingSystemVersionCompare() != 1
       || _os_feature_enabled_impl()
       || CFPreferencesGetAppBooleanValue(@"MatterTTU", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0)))
    {
      uint64_t v130 = 0x8000000;
    }
    else
    {
      uint64_t v130 = 0;
    }
    id v72 = v67;
    uint64_t v73 = v15;
    id v74 = v16;
    memset(buf, 0, sizeof(buf));
    v75 = [v72 softwareVersion];
    __int16 v76 = v75;
    if (v75) {
      [v75 operatingSystemVersion];
    }
    else {
      memset(buf, 0, sizeof(buf));
    }

    if (HMFOperatingSystemVersionCompare() == 1)
    {

      uint64_t v132 = 0;
    }
    else
    {
      BOOL IsResidentCapable = productIsResidentCapable(v72);

      uint64_t v78 = 0x10000000;
      if (!IsResidentCapable) {
        uint64_t v78 = 0;
      }
      uint64_t v132 = v78;
    }
    memset(buf, 0, sizeof(buf));
    id v79 = v72;
    id v80 = [v79 softwareVersion];
    v81 = v80;
    if (v80) {
      [v80 operatingSystemVersion];
    }
    else {
      memset(buf, 0, sizeof(buf));
    }

    uint64_t v82 = [v79 productPlatform];
    uint64_t v83 = [v79 productClass];

    if ((v83 | 2) == 6 && v82 == 4) {
      unint64_t v155 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 29;
    }
    else {
      unint64_t v155 = 0;
    }
    memset(buf, 0, sizeof(buf));
    id v84 = v79;
    v85 = [v84 softwareVersion];
    v86 = v85;
    if (v85) {
      [v85 operatingSystemVersion];
    }
    else {
      memset(buf, 0, sizeof(buf));
    }

    uint64_t v87 = [v84 productPlatform];
    uint64_t v88 = [v84 productClass];

    if ((v88 | 2) == 6
      && v87 == 4
      && (HMFOperatingSystemVersionCompare() != 1 || _os_feature_enabled_impl()))
    {
      uint64_t v152 = 0x40000000;
    }
    else
    {
      uint64_t v152 = 0;
    }
    memset(buf, 0, sizeof(buf));
    id v89 = v84;
    id v90 = [v89 softwareVersion];
    v91 = v90;
    if (v90) {
      [v90 operatingSystemVersion];
    }
    else {
      memset(buf, 0, sizeof(buf));
    }

    uint64_t v92 = [v89 productPlatform];
    uint64_t v93 = [v89 productClass];

    if ((v93 | 2) == 6 && v92 == 4) {
      unint64_t v154 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 31;
    }
    else {
      unint64_t v154 = 0;
    }
    BOOL v94 = productSupportsMatterOwnerCertFetch(v89, v73, v74);
    uint64_t v95 = 0x100000000;
    if (!v94) {
      uint64_t v95 = 0;
    }
    uint64_t v158 = v95;
    memset(buf, 0, sizeof(buf));
    id v96 = v89;
    v97 = [v96 softwareVersion];
    v98 = v97;
    if (v97) {
      [v97 operatingSystemVersion];
    }
    else {
      memset(buf, 0, sizeof(buf));
    }

    uint64_t v99 = [v96 productPlatform];
    uint64_t v100 = [v96 productClass];

    if ((v100 | 2) == 6)
    {
      uint64_t v101 = v19;
      if (v99 == 4) {
        unint64_t v153 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 33;
      }
      else {
        unint64_t v153 = 0;
      }
    }
    else
    {
      unint64_t v153 = 0;
      uint64_t v101 = v19;
    }
    memset(buf, 0, sizeof(buf));
    id v102 = v96;
    id v103 = [v102 softwareVersion];
    id v104 = v103;
    if (v103) {
      [v103 operatingSystemVersion];
    }
    else {
      memset(buf, 0, sizeof(buf));
    }

    uint64_t v105 = [v102 productPlatform];
    uint64_t v106 = [v102 productClass];

    if ((v106 | 2) == 6)
    {
      uint64_t v107 = v157;
      if (v105 != 4) {
        goto LABEL_119;
      }
      if (HMFOperatingSystemVersionCompare() != 1)
      {
        unint64_t v108 = 0x400000000;
        goto LABEL_122;
      }
      if (isInternalBuild()) {
        unint64_t v108 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 34;
      }
      else {
LABEL_119:
      }
        unint64_t v108 = 0;
    }
    else
    {
      unint64_t v108 = 0;
      uint64_t v107 = v157;
    }
LABEL_122:
    memset(buf, 0, sizeof(buf));
    id v109 = v102;
    v110 = [v109 softwareVersion];
    id v111 = v110;
    if (v110) {
      [v110 operatingSystemVersion];
    }
    else {
      memset(buf, 0, sizeof(buf));
    }
    uint64_t v112 = v107 | v156;
    uint64_t v113 = v101 | v159;

    uint64_t v114 = [v109 productPlatform];
    uint64_t v115 = [v109 productClass];

    if ((v115 | 2) == 6 && v114 == 4 && HMFOperatingSystemVersionCompare() != 1)
    {
      v128 = +[HMDCoreData featuresDataSource];
      int v129 = [v128 isRVCEnabled];

      if (v129) {
        uint64_t v116 = 0x800000000;
      }
      else {
        uint64_t v116 = 0;
      }
    }
    else
    {
      uint64_t v116 = 0;
    }
    memset(buf, 0, sizeof(buf));
    id v117 = v109;
    __int16 v118 = [v117 softwareVersion];
    uint64_t v119 = v118;
    if (v118) {
      [v118 operatingSystemVersion];
    }
    else {
      memset(buf, 0, sizeof(buf));
    }
    uint64_t v120 = v112 | v113 | v160;

    uint64_t v121 = [v117 productPlatform];
    uint64_t v122 = [v117 productClass];

    if ((v122 | 2) == 6
      && v121 == 4
      && HMFOperatingSystemVersionCompare() != 1
      && _os_feature_enabled_impl())
    {
      if (isInternalBuild()) {
        unint64_t v123 = 0x1000000000;
      }
      else {
        unint64_t v123 = (unint64_t)(CFPreferencesGetAppBooleanValue(@"UWBUnlock", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0) != 0) << 36;
      }
    }
    else
    {
      unint64_t v123 = 0;
    }
    unint64_t v124 = v120 | v151 | v150 | v149 | v148 | v147 | v146 | v145 | v144 | v143 | v142 | v141 | v140 | v139 | v138 | v137 | v136 | v135 | v134 | v133 | v131 | v130 | v132 | v155 | v152 | v154 | v158 | v153 | v108 | v116 | v123;
    id v125 = objc_alloc(MEMORY[0x263F0E6C0]);
    id v126 = [MEMORY[0x263F08C38] UUID];
    v64 = (void *)[v125 initWithTagUUID:v126 capabilities:v124];

    goto LABEL_140;
  }
  v64 = 0;
LABEL_140:

  return v64;
}

- (id)createCurrentAccessoryCapabilities
{
  uint64_t v132 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self idsServerBag];
  uint64_t v4 = [v3 homeSafetySecurityEnabled];

  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    uint64_t v9 = [(HMDHomeManager *)v6 idsServerBag];
    uint64_t v10 = HMFBooleanToString();
    *(_DWORD *)long long buf = 138543874;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2112;
    unint64_t v131 = v10;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@self.idsServerBag: %@, homeSafetySecurityEnabled: %@", buf, 0x20u);
  }
  uint64_t v11 = [[HMDMobileGestaltClient alloc] initWithHomeSafetySecurityEnabled:v4];
  long long v12 = [MEMORY[0x263F42620] productInfo];
  id v13 = +[HMDHomeKitVersion currentVersion];
  id v14 = v11;
  id v15 = v12;
  BOOL v127 = productSupportsKeychainSync(v15);
  BOOL v126 = productSupportsDeviceSetup(v15);
  BOOL v125 = productSupportsKeyTransferClient(v15, v14, v13);
  BOOL v124 = productSupportsKeyTransferServer(v15);
  BOOL v122 = productSupportsKeychainSync(v15);
  int v121 = productSupportsCloudDataSync(v15);
  BOOL v123 = productSupportsWholeHouseAudio(v15);
  BOOL v120 = productSupportsAssistantAccessControl(v15);
  BOOL v119 = productSupportsHomeInvitation(v15);
  BOOL v118 = productSupportsTargetControl(v15);
  BOOL v16 = productSupportsMultiUser(v15);
  BOOL v117 = productSupportsHomeLevelLocationServiceSetting(v15);
  BOOL v115 = productSupportsCompanionInitiatedRestart(v15);
  BOOL v113 = productSupportsMusicAlarm(v15);
  BOOL v111 = productSupportsAnnounce(v15);
  int v109 = productSupportsAudioAnalysis(v15, v14);
  BOOL v107 = productSupportsThirdPartyMusic(v15);
  BOOL v105 = productSupportsPreferredMediaUser(v15);
  BOOL v103 = productSupportsThirdPartyMusic(v15);
  BOOL v101 = productSupportsUserMediaSettings(v15);
  BOOL v99 = productSupportsCoordinationDoorbellChime(v15);
  BOOL v96 = productSupportsHomeHub(v15, v14);
  int v94 = productSupportsAudioReturnChannel(v15, v14);
  BOOL v92 = productSupportsUserMediaSettings(v15);
  BOOL v90 = productSupportsCaptiveNetworks(v15);
  v128 = v13;
  BOOL v17 = productSupportsMessagedHomePodSettings(v15, v13);
  BOOL v88 = productSupportsMediaActions(v15);
  int v129 = v14;
  int v18 = productSupportsDropIn(v15, v14);
  int v86 = productSupportsRMVonAppleTV(v15);
  BOOL v19 = productSupportsJustSiri(v15);
  memset(buf, 0, sizeof(buf));
  id v20 = v15;
  uint64_t v21 = [v20 softwareVersion];
  uint64_t v22 = v21;
  if (v21) {
    [v21 operatingSystemVersion];
  }
  else {
    memset(buf, 0, sizeof(buf));
  }

  uint64_t v23 = [v20 productPlatform];
  uint64_t v24 = [v20 productClass];

  unint64_t v25 = 0;
  if (v24 == 6 && v23 == 4) {
    unint64_t v25 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 31;
  }
  unint64_t v98 = v25;
  BOOL v26 = productSupportsCoordinationFreeDoorbellChime(v20);
  BOOL v27 = productSupportsCompanionInitiatedObliterate(v20);
  id v28 = v20;
  uint64_t v29 = [v28 productPlatform];
  uint64_t v30 = [v28 productClass];
  memset(buf, 0, sizeof(buf));
  BOOL v31 = [v28 softwareVersion];

  if (v31) {
    [v31 operatingSystemVersion];
  }
  else {
    memset(buf, 0, sizeof(buf));
  }

  unint64_t v32 = 0;
  if (v30 == 4 && v29 == 4) {
    unint64_t v32 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 34;
  }
  unint64_t v85 = v32;
  [v28 productClass];
  memset(buf, 0, sizeof(buf));
  id v33 = v28;
  uint64_t v34 = [v33 softwareVersion];
  BOOL v35 = v34;
  if (v34) {
    [v34 operatingSystemVersion];
  }
  else {
    memset(buf, 0, sizeof(buf));
  }

  uint64_t v36 = [v33 productPlatform];
  uint64_t v37 = [v33 productClass];

  unint64_t v38 = 0;
  if (v37 == 6 && v36 == 4) {
    unint64_t v38 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 36;
  }
  unint64_t v84 = v38;
  if (v27) {
    uint64_t v39 = 0x200000000;
  }
  else {
    uint64_t v39 = 0;
  }
  uint64_t v40 = 0x100000000;
  if (!v26) {
    uint64_t v40 = 0;
  }
  uint64_t v82 = v40;
  uint64_t v83 = v39;
  if (v19) {
    uint64_t v41 = 0x40000000;
  }
  else {
    uint64_t v41 = 0;
  }
  if (v86) {
    uint64_t v42 = 0x20000000;
  }
  else {
    uint64_t v42 = 0;
  }
  uint64_t v43 = 0x10000000;
  if (!v18) {
    uint64_t v43 = 0;
  }
  uint64_t v80 = v43;
  uint64_t v81 = v41;
  uint64_t v44 = 0x8000000;
  if (!v88) {
    uint64_t v44 = 0;
  }
  uint64_t v87 = v42;
  uint64_t v89 = v44;
  uint64_t v45 = 0x4000000;
  if (!v17) {
    uint64_t v45 = 0;
  }
  uint64_t v79 = v45;
  if (v90) {
    uint64_t v46 = 0x2000000;
  }
  else {
    uint64_t v46 = 0;
  }
  uint64_t v47 = 0x1000000;
  if (!v92) {
    uint64_t v47 = 0;
  }
  uint64_t v91 = v46;
  uint64_t v93 = v47;
  if (v94) {
    uint64_t v48 = 0x800000;
  }
  else {
    uint64_t v48 = 0;
  }
  uint64_t v49 = 0x400000;
  if (!v96) {
    uint64_t v49 = 0;
  }
  uint64_t v95 = v48;
  uint64_t v97 = v49;
  if (v99) {
    uint64_t v50 = 0x200000;
  }
  else {
    uint64_t v50 = 0;
  }
  uint64_t v51 = 0x100000;
  if (!v101) {
    uint64_t v51 = 0;
  }
  uint64_t v100 = v50;
  uint64_t v102 = v51;
  if (v103) {
    uint64_t v52 = 0x80000;
  }
  else {
    uint64_t v52 = 0;
  }
  uint64_t v53 = 0x20000;
  if (!v105) {
    uint64_t v53 = 0;
  }
  uint64_t v104 = v52;
  uint64_t v106 = v53;
  if (v107) {
    uint64_t v54 = 0x10000;
  }
  else {
    uint64_t v54 = 0;
  }
  uint64_t v55 = 0x8000;
  if (!v109) {
    uint64_t v55 = 0;
  }
  uint64_t v108 = v54;
  uint64_t v110 = v55;
  if (v111) {
    uint64_t v56 = 0x4000;
  }
  else {
    uint64_t v56 = 0;
  }
  uint64_t v57 = 0x2000;
  if (!v113) {
    uint64_t v57 = 0;
  }
  uint64_t v112 = v56;
  uint64_t v114 = v57;
  uint64_t v58 = 4096;
  if (!v115) {
    uint64_t v58 = 0;
  }
  uint64_t v116 = v58;
  if (v117) {
    uint64_t v59 = 2048;
  }
  else {
    uint64_t v59 = 0;
  }
  if (v16) {
    uint64_t v60 = 1024;
  }
  else {
    uint64_t v60 = 0;
  }
  if (v118) {
    uint64_t v61 = 512;
  }
  else {
    uint64_t v61 = 0;
  }
  if (v119) {
    uint64_t v62 = 256;
  }
  else {
    uint64_t v62 = 0;
  }
  if (v120) {
    uint64_t v63 = 128;
  }
  else {
    uint64_t v63 = 0;
  }
  uint64_t v64 = 2;
  if (!v126) {
    uint64_t v64 = 0;
  }
  uint64_t v65 = v64 | v127;
  uint64_t v66 = 4;
  if (!v125) {
    uint64_t v66 = 0;
  }
  uint64_t v67 = v65 | v66;
  uint64_t v68 = 8;
  if (!v124) {
    uint64_t v68 = 0;
  }
  uint64_t v69 = 16;
  if (!v122) {
    uint64_t v69 = 0;
  }
  uint64_t v70 = v68 | v69;
  uint64_t v71 = 32;
  if (!v121) {
    uint64_t v71 = 0;
  }
  uint64_t v72 = v67 | v70 | v71;
  if (v123) {
    uint64_t v73 = 64;
  }
  else {
    uint64_t v73 = 0;
  }

  uint64_t v74 = v72 | v73 | v63 | v62 | v61 | v60 | v59 | v116 | v114 | v112 | v110 | v108 | v106 | v104 | v102 | v100 | v97 | v95 | v93 | v91 | v79 | v89 | v80 | v87 | v81 | v98 | v82 | v83 | v85 | v84;
  id v75 = objc_alloc(MEMORY[0x263F0DF30]);
  __int16 v76 = [MEMORY[0x263F08C38] UUID];
  double v77 = (void *)[v75 initWithTagUUID:v76 capabilities:v74];

  return v77;
}

- (id)currentAccessoryHomeUUID
{
  uint64_t v2 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  if (v4)
  {
    uint64_t v5 = [v4 home];
    id v6 = [v5 uuid];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

- (id)currentAccessoryUUID
{
  uint64_t v2 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  if (v4)
  {
    uint64_t v5 = [v4 uuid];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

- (id)currentAccessoryHome
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  if (v3)
  {
    id v4 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
    uint64_t v5 = [v4 home];
  }
  else
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    uint64_t v7 = self;
    uint64_t v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      int v11 = 138543362;
      long long v12 = v9;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to get current accessory home due to no current accessory", (uint8_t *)&v11, 0xCu);
    }
    uint64_t v5 = 0;
  }

  return v5;
}

- (id)currentMediaGroupsAggregateCunsumer
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self currentAccessoryHome];
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = [v3 mediaGroupsAggregateConsumer];
  }
  else
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    uint64_t v7 = self;
    uint64_t v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      int v11 = 138543362;
      long long v12 = v9;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to get current media groups aggregate consumer due to no current accessory home", (uint8_t *)&v11, 0xCu);
    }
    uint64_t v5 = 0;
  }

  return v5;
}

- (void)mediaGroupParticipantLocalDataStorage:(id)a3 didChangeDestinationIdentifier:(id)a4 forDestinationControllerIdentifier:(id)a5
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  int v11 = [(HMDHomeManager *)self currentMediaGroupsAggregateCunsumer];
  long long v12 = v11;
  if (v11)
  {
    if (v9) {
      [v11 unstageNullDestinationForCurrentDestinationController];
    }
    else {
      [v11 stageNullDestinationForCurrentDestinationControllerIdentifier:v10];
    }
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      BOOL v16 = HMFGetLogIdentifier();
      int v17 = 138543362;
      int v18 = v16;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to stage current destination controller change due to no current consumer", (uint8_t *)&v17, 0xCu);
    }
  }
}

- (id)topicNameForMediaGroupParticipantDataLocalStorage:(id)a3
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  id v6 = v5;
  if (v5)
  {
    uint64_t v7 = [v5 home];
    id v8 = v7;
    if (v7)
    {
      id v9 = (void *)MEMORY[0x263F0DFA8];
      uint64_t v10 = *MEMORY[0x263F0B2F0];
      int v11 = [v7 uuid];
      long long v12 = [v6 uuid];
      uint64_t v13 = [v9 topicFromSuffixID:v10 homeUUID:v11 accessoryUUID:v12];
    }
    else
    {
      int v18 = (void *)MEMORY[0x230FBD990]();
      uint64_t v19 = self;
      id v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        uint64_t v21 = HMFGetLogIdentifier();
        int v23 = 138543362;
        uint64_t v24 = v21;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Failed to get media group participant data topic name due to no home on current accessory", (uint8_t *)&v23, 0xCu);
      }
      uint64_t v13 = 0;
    }
  }
  else
  {
    id v14 = (void *)MEMORY[0x230FBD990]();
    id v15 = self;
    BOOL v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      int v17 = HMFGetLogIdentifier();
      int v23 = 138543362;
      uint64_t v24 = v17;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Failed to get media group participant data topic name due to no current accessory", (uint8_t *)&v23, 0xCu);
    }
    uint64_t v13 = 0;
  }

  return v13;
}

- (BOOL)isStartThreadNetworkInProgress
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v3 = [(HMDHomeManager *)self homes];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v15 objects:v23 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v16;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        if ([v8 startThreadNetworkInProgress])
        {
          uint64_t v10 = (void *)MEMORY[0x230FBD990]();
          int v11 = self;
          long long v12 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            uint64_t v13 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            id v20 = v13;
            __int16 v21 = 2112;
            uint64_t v22 = v8;
            _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@thread start in progress for %@", buf, 0x16u);
          }
          BOOL v9 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v15 objects:v23 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  BOOL v9 = 0;
LABEL_13:

  return v9;
}

- (BOOL)isCurrentResidentDeviceRunningThreadNetwork:(id)a3
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a3)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    id v3 = [(HMDHomeManager *)self homes];
    uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v9;
      while (2)
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v9 != v5) {
            objc_enumerationMutation(v3);
          }
          if ([*(id *)(*((void *)&v8 + 1) + 8 * i) isCurrentDeviceAvailableResident])
          {
            LOBYTE(v4) = 1;
            goto LABEL_12;
          }
        }
        uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

- (id)accessorySetupMetricDispatchersForHome:(id)a3
{
  id v4 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  accessorySetupMetricDispatchers = self->_accessorySetupMetricDispatchers;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = __57__HMDHomeManager_accessorySetupMetricDispatchersForHome___block_invoke;
  v10[3] = &unk_264A2BD20;
  id v7 = v4;
  id v11 = v7;
  long long v8 = [(NSMutableArray *)accessorySetupMetricDispatchers na_filter:v10];

  os_unfair_lock_unlock(p_lock);
  return v8;
}

uint64_t __57__HMDHomeManager_accessorySetupMetricDispatchersForHome___block_invoke(uint64_t a1, void *a2)
{
  return [a2 hasHome:*(void *)(a1 + 32)];
}

- (id)firstSetupSessionIdentifierOutputStartTime:(double *)a3
{
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  if ([(NSMutableArray *)self->_accessorySetupMetricDispatchers count])
  {
    uint64_t v6 = [(NSMutableArray *)self->_accessorySetupMetricDispatchers firstObject];
    id v7 = v6;
    if (a3)
    {
      long long v8 = [v6 trackingInfo];
      *a3 = (double)(unint64_t)[v8 startTime];
    }
    long long v9 = [v7 setupSessionIdentifier];
  }
  else
  {
    long long v9 = 0;
    if (a3) {
      *a3 = 0.0;
    }
  }
  os_unfair_lock_unlock(p_lock);
  return v9;
}

- (void)removeAccessorySetupMetricDispatcherForAccessoryUUID:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    os_unfair_lock_lock_with_options();
    accessorySetupMetricDispatchers = self->_accessorySetupMetricDispatchers;
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    v7[2] = __71__HMDHomeManager_removeAccessorySetupMetricDispatcherForAccessoryUUID___block_invoke;
    v7[3] = &unk_264A2BD20;
    id v8 = v4;
    uint64_t v6 = [(NSMutableArray *)accessorySetupMetricDispatchers na_firstObjectPassingTest:v7];
    if (v6) {
      [(NSMutableArray *)self->_accessorySetupMetricDispatchers removeObject:v6];
    }

    os_unfair_lock_unlock(&self->_lock);
  }
}

uint64_t __71__HMDHomeManager_removeAccessorySetupMetricDispatcherForAccessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 trackingInfo];
  id v4 = [v3 accessoryUUID];
  uint64_t v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v5;
}

- (void)addAccessorySetupMetricDispatcher:(id)a3
{
  id v8 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  if (!self->_accessorySetupMetricDispatchers)
  {
    uint64_t v5 = [MEMORY[0x263EFF980] array];
    accessorySetupMetricDispatchers = self->_accessorySetupMetricDispatchers;
    self->_accessorySetupMetricDispatchers = v5;
  }
  id v7 = [(HMDHomeManager *)self accessorySetupMetricDispatchers];
  [v7 addObject:v8];

  os_unfair_lock_unlock(p_lock);
}

- (id)accessorySetupMetricDispatcherForAccessoryUUID:(id)a3
{
  id v4 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  uint64_t v6 = [(HMDHomeManager *)self accessorySetupMetricDispatchers];
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = __65__HMDHomeManager_accessorySetupMetricDispatcherForAccessoryUUID___block_invoke;
  v10[3] = &unk_264A2BD20;
  id v7 = v4;
  id v11 = v7;
  id v8 = objc_msgSend(v6, "na_firstObjectPassingTest:", v10);

  os_unfair_lock_unlock(p_lock);
  return v8;
}

uint64_t __65__HMDHomeManager_accessorySetupMetricDispatcherForAccessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 trackingInfo];
  id v4 = [v3 accessoryUUID];
  uint64_t v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(void *)(a1 + 32));

  return v5;
}

- (void)_handleEnableUARPPacketCaptureRequest:(id)a3
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = [v4 BOOLForKey:*MEMORY[0x263F0CA80]];
  uint64_t v6 = [v4 stringForKey:*MEMORY[0x263F0CA90]];
  id v7 = (void *)v6;
  if (v5) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    long long v9 = [(HMDHomeManager *)self accessoryFirmwareUpdateManager];
    long long v10 = v9;
    if (v5)
    {
      char v11 = [v9 startUARPPacketCapture:v7];

      if ((v11 & 1) == 0)
      {
        long long v12 = (void *)MEMORY[0x230FBD990]();
        uint64_t v13 = self;
        id v14 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          long long v15 = HMFGetLogIdentifier();
          int v20 = 138543618;
          __int16 v21 = v15;
          __int16 v22 = 2112;
          int v23 = @"Request to enable UARP packet capture failed";
          long long v16 = "%{public}@%@";
          long long v17 = v14;
          uint32_t v18 = 22;
LABEL_11:
          _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v20, v18);

          goto LABEL_12;
        }
        goto LABEL_12;
      }
    }
    else
    {
      [v9 stopUARPPacketCapture];
    }
    [v4 respondWithSuccess];
    goto LABEL_15;
  }
  long long v12 = (void *)MEMORY[0x230FBD990]();
  uint64_t v13 = self;
  id v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    long long v15 = HMFGetLogIdentifier();
    int v20 = 138543362;
    __int16 v21 = v15;
    long long v16 = "%{public}@Request to enable UARP packet capture is missing capture path";
    long long v17 = v14;
    uint32_t v18 = 12;
    goto LABEL_11;
  }
LABEL_12:

  uint64_t v19 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
  [v4 respondWithError:v19];

LABEL_15:
}

- (void)_handleHH2SentinelZonePresent:(id)a3
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = (void *)MEMORY[0x230FBD990]();
  uint64_t v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    BOOL v8 = HMFGetLogIdentifier();
    int v10 = 138543362;
    char v11 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@HH2 sentinel zone detected", (uint8_t *)&v10, 0xCu);
  }
  long long v9 = [(HMDHomeManager *)v6 uuid];
  [(HMDHomeManager *)v6 updateGenerationCounterWithReason:@"HH2 sentinel zone detected" sourceUUID:v9 shouldNotifyClients:1];
}

- (void)handleCheckIsUsingProductionObjectModelMessage:(id)a3
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (isInternalBuild())
  {
    BOOL v5 = +[HMDCoreData isUsingProductionObjectModel];
    uint64_t v6 = objc_msgSend(NSNumber, "numberWithBool:", v5, *MEMORY[0x263F0CC90]);
    uint64_t v13 = v6;
    id v7 = [NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
    [v4 respondWithPayload:v7];
  }
  else
  {
    BOOL v8 = (void *)MEMORY[0x230FBD990]();
    long long v9 = self;
    int v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      char v11 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      long long v15 = v11;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Not supported in non-internal builds", buf, 0xCu);
    }
    uint64_t v6 = [MEMORY[0x263F087E8] hmErrorWithCode:10];
    [v4 respondWithError:v6];
  }
}

- (void)handleDeleteModelMessage:(id)a3
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v4 = a3;
  char v5 = isInternalBuild();
  uint64_t v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  BOOL v8 = HMFGetOSLogHandle();
  long long v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v10 = HMFGetLogIdentifier();
      char v11 = [v4 shortDescription];
      uint64_t v12 = [v4 messagePayload];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v30 = v10;
      __int16 v31 = 2112;
      unint64_t v32 = v11;
      __int16 v33 = 2112;
      uint64_t v34 = v12;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Asked to delete the modelID from working store: %@ / %@", buf, 0x20u);
    }
    uint64_t v13 = [v4 messagePayload];
    id v14 = objc_msgSend(v13, "hmf_UUIDForKey:", *MEMORY[0x263F0CB70]);

    if (v14)
    {
      long long v15 = [(HMDHomeManager *)v7 backingStore];
      uint64_t v16 = [v15 context];
      long long v17 = [v16 managedObjectContext];

      v24[0] = MEMORY[0x263EF8330];
      v24[1] = 3221225472;
      v24[2] = __43__HMDHomeManager_handleDeleteModelMessage___block_invoke;
      v24[3] = &unk_264A2E610;
      id v25 = v14;
      id v26 = v17;
      BOOL v27 = v7;
      id v28 = v4;
      id v18 = v17;
      [v18 performBlock:v24];
    }
    else
    {
      int v20 = (void *)MEMORY[0x230FBD990]();
      __int16 v21 = v7;
      __int16 v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        int v23 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v30 = v23;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@Model id was not missing from the message payload", buf, 0xCu);
      }
      id v18 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
      [v4 respondWithError:v18];
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v30 = v19;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Not supported in non-internal builds", buf, 0xCu);
    }
    id v14 = [MEMORY[0x263F087E8] hmErrorWithCode:10];
    [v4 respondWithError:v14];
  }
}

void __43__HMDHomeManager_handleDeleteModelMessage___block_invoke(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 40);
  id v50 = *(id *)(a1 + 32);
  id v49 = v2;
  if (isInternalBuild())
  {
    uint64_t v46 = v1;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    id obj = +[HMDCoreData managedObjectModel];
    uint64_t v3 = [obj countByEnumeratingWithState:&v54 objects:v64 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v51 = *(void *)v55;
LABEL_4:
      uint64_t v5 = 0;
      while (1)
      {
        if (*(void *)v55 != v51) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v54 + 1) + 8 * v5);
        id v7 = [v6 propertiesByName];
        BOOL v8 = [v7 objectForKeyedSubscript:@"modelID"];

        if (v8)
        {
          long long v9 = (void *)MEMORY[0x230FBD990]();
          id v10 = objc_alloc(MEMORY[0x263EFF260]);
          char v11 = [v6 name];
          uint64_t v12 = (void *)[v10 initWithEntityName:v11];

          uint64_t v13 = [MEMORY[0x263F08A98] predicateWithFormat:@"modelID == %@", v50];
          [v12 setPredicate:v13];
          id v53 = 0;
          id v14 = [v49 executeFetchRequest:v12 error:&v53];
          id v15 = v53;
          uint64_t v16 = (void *)MEMORY[0x230FBD990]();
          long long v17 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            id v18 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            uint64_t v61 = v18;
            __int16 v62 = 2112;
            uint64_t v63 = v14;
            _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@fetchedObjects : %@", buf, 0x16u);
          }
          if ([v14 count]
            && ([v14 firstObject],
                uint64_t v19 = objc_claimAutoreleasedReturnValue(),
                objc_opt_class(),
                char isKindOfClass = objc_opt_isKindOfClass(),
                v19,
                (isKindOfClass & 1) != 0))
          {
            uint64_t v47 = [v14 firstObject];
            int v21 = 0;
          }
          else
          {
            int v21 = 1;
          }

          if (!v21) {
            break;
          }
        }
        if (v4 == ++v5)
        {
          uint64_t v4 = [obj countByEnumeratingWithState:&v54 objects:v64 count:16];
          if (v4) {
            goto LABEL_4;
          }
          goto LABEL_17;
        }
      }
    }
    else
    {
LABEL_17:
      uint64_t v47 = 0;
    }

    uint64_t v1 = v46;
    __int16 v22 = (void *)v47;
  }
  else
  {
    __int16 v22 = 0;
  }

  if (v22)
  {
    int v23 = [v22 debugDescription];
    uint64_t v24 = (void *)MEMORY[0x230FBD990]();
    id v25 = *(id *)(v1 + 48);
    id v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      BOOL v27 = HMFGetLogIdentifier();
      *(_DWORD *)uint64_t v64 = 138543618;
      uint64_t v65 = v27;
      __int16 v66 = 2112;
      uint64_t v67 = v23;
      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Found the entity to delete: %@", v64, 0x16u);
    }
    id v28 = v22;
    [*(id *)(v1 + 40) deleteObject:v22];
    uint64_t v58 = @"entity";
    uint64_t v59 = v23;
    uint64_t v29 = [NSDictionary dictionaryWithObjects:&v59 forKeys:&v58 count:1];
    uint64_t v30 = *(void **)(v1 + 40);
    id v52 = 0;
    char v31 = [v30 save:&v52];
    id v32 = v52;
    __int16 v33 = (void *)MEMORY[0x230FBD990]();
    uint64_t v34 = v1;
    id v35 = *(id *)(v1 + 48);
    uint64_t v36 = HMFGetOSLogHandle();
    uint64_t v37 = v36;
    if (v31)
    {
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        unint64_t v38 = HMFGetLogIdentifier();
        *(_DWORD *)uint64_t v64 = 138543618;
        uint64_t v65 = v38;
        __int16 v66 = 2112;
        uint64_t v67 = v23;
        _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@Successfully deleted the entity: %@", v64, 0x16u);
      }
      [*(id *)(v34 + 56) respondWithPayload:v29];
    }
    else
    {
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        uint64_t v45 = HMFGetLogIdentifier();
        *(_DWORD *)uint64_t v64 = 138543618;
        uint64_t v65 = v45;
        __int16 v66 = 2112;
        uint64_t v67 = v23;
        _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_ERROR, "%{public}@Unable to delete the entity: %@", v64, 0x16u);
      }
      [*(id *)(v34 + 56) respondWithPayload:v29 error:v32];
    }

    __int16 v22 = v28;
  }
  else
  {
    uint64_t v39 = (void *)MEMORY[0x230FBD990]();
    id v40 = *(id *)(v1 + 48);
    uint64_t v41 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      uint64_t v42 = HMFGetLogIdentifier();
      uint64_t v43 = *(void **)(v1 + 32);
      *(_DWORD *)uint64_t v64 = 138543618;
      uint64_t v65 = v42;
      __int16 v66 = 2112;
      uint64_t v67 = v43;
      _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_ERROR, "%{public}@Could not fetch model with modelID from working store: %@", v64, 0x16u);
    }
    uint64_t v44 = *(void **)(v1 + 56);
    int v23 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v44 respondWithError:v23];
  }
}

- (void)handleRollPreferredHH2ControllerKeyMessage:(id)a3
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  uint64_t v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    BOOL v8 = HMFGetLogIdentifier();
    long long v9 = [v4 shortDescription];
    int v13 = 138543618;
    id v14 = v8;
    __int16 v15 = 2112;
    uint64_t v16 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling roll preferred HH2 controller key message: %@", (uint8_t *)&v13, 0x16u);
  }
  id v10 = [MEMORY[0x263F35AD0] systemStore];
  int v11 = [v10 triggerPreferredHH2ControllerKeyRoll];

  if (v11)
  {
    [v4 respondWithSuccess];
  }
  else
  {
    uint64_t v12 = [MEMORY[0x263F087E8] hmfErrorWithCode:15];
    [v4 respondWithError:v12];
  }
}

- (void)_handleKeyRoll:(id)a3
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 messagePayload];
  uint64_t v6 = objc_msgSend(v5, "hmf_stringForKey:", *MEMORY[0x263F0C978]);

  if (v6)
  {
    id v7 = [(HMDHomeManager *)self accessoriesMatchingIdentifier:v6];
    if ([v7 count])
    {
      BOOL v8 = [v7 firstObject];
      long long v9 = objc_alloc_init(HMDHH2Migrator);
      id v10 = [MEMORY[0x263F35AD0] systemStore];
      id v35 = 0;
      id v36 = 0;
      char v11 = [v10 getOrCreateHH2ControllerKey:&v36 secretKey:0 keyPair:0 username:&v35];
      id v12 = v36;
      id v13 = v35;

      if (v11)
      {
        id v14 = (void *)[objc_alloc(MEMORY[0x263F425F0]) initWithPairingKeyData:v12];
        id v33 = v13;
        __int16 v15 = (void *)[objc_alloc(MEMORY[0x263F35A78]) initWithIdentifier:v13 publicKey:v14 privateKey:0 permissions:1];
        uint64_t v16 = [v8 home];
        uint64_t v17 = [v16 owner];
        [v17 pairingIdentity];
        id v32 = v12;
        v19 = id v18 = v9;

        [(HMDHH2Migrator *)v18 scheduleAccessoryKeyMigration:v8 oldPairingIdentity:v19 hh2PairingIdentity:v15];
        [v4 respondWithSuccess];

        long long v9 = v18;
        id v12 = v32;

        id v13 = v33;
      }
      else
      {
        id v28 = (void *)MEMORY[0x230FBD990]();
        uint64_t v29 = self;
        uint64_t v30 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          char v31 = v34 = v13;
          *(_DWORD *)long long buf = 138543362;
          unint64_t v38 = v31;
          _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@FATAL Error : Unable to create HH2 Controller key", buf, 0xCu);

          id v13 = v34;
        }

        id v14 = [MEMORY[0x263F087E8] hmErrorWithCode:10];
        [v4 respondWithError:v14];
      }
    }
    else
    {
      uint64_t v24 = (void *)MEMORY[0x230FBD990]();
      id v25 = self;
      id v26 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        BOOL v27 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        unint64_t v38 = v27;
        _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_ERROR, "%{public}@Did not find the accessory with that identifier", buf, 0xCu);
      }
      BOOL v8 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      [v4 respondWithError:v8];
    }
  }
  else
  {
    int v20 = (void *)MEMORY[0x230FBD990]();
    int v21 = self;
    __int16 v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      int v23 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      unint64_t v38 = v23;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_ERROR, "%{public}@accessory identifier cannot be nil", buf, 0xCu);
    }
    id v7 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v4 respondWithError:v7];
  }
}

- (id)hapMetadataForMicroLocationLogEventObserver:(id)a3
{
  return +[HMDHAPMetadata getSharedInstance];
}

- (id)hapMetadataForBiomeLogEventObserver:(id)a3
{
  return +[HMDHAPMetadata getSharedInstance];
}

- (void)handleSiriSyncDataRequest:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __44__HMDHomeManager_handleSiriSyncDataRequest___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __44__HMDHomeManager_handleSiriSyncDataRequest___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleAssistantSyncDataRequest:*(void *)(a1 + 40)];
}

- (void)assistantSyncDataChanged:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __43__HMDHomeManager_assistantSyncDataChanged___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __43__HMDHomeManager_assistantSyncDataChanged___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _assistantSyncDataChanged:*(void *)(a1 + 40)];
}

- (void)setPostSyncDataUpdatedNotification:(BOOL)a3
{
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_postSyncDataUpdatedNotification = a3;
  os_unfair_lock_unlock(p_lock);
}

- (BOOL)postSyncDataUpdatedNotification
{
  uint64_t v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_postSyncDataUpdatedNotification;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)__handleProcessMemoryPressureEvent:(id)a3
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)int v23 = 138543362;
    *(void *)&void v23[4] = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_FAULT, "%{public}@Received process memory pressure notification", v23, 0xCu);
  }
  long long v9 = [v4 userInfo];
  id v10 = objc_msgSend(v9, "hmf_stringForKey:", *MEMORY[0x263F42040]);

  if (v10)
  {
    *(void *)int v23 = 0;
    [(HMDHomeManager *)v6 dataSyncInProgressWithState:v23 withMessage:0];
    char v11 = [(HMDHomeManager *)v6 logEventSubmitter];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v12 = v11;
    }
    else {
      id v12 = 0;
    }
    id v13 = v12;

    id v14 = [MEMORY[0x263F42560] memoryMonitor];
    objc_msgSend(v13, "handleMemoryPressureState:", objc_msgSend(v14, "lastProcessMemoryState"));

    __int16 v15 = [(HMDHomeManager *)v6 logEventSubmitter];
    uint64_t v16 = HMHomeManagerDataSyncStateToString();
    uint64_t v17 = +[HMDProcessMemoryPressureNotificationLogEvent createEventWithProcessMemoryState:v10 dataSyncState:v16];
    [v15 submitLogEvent:v17];

    id v18 = [(HMDHomeManager *)v6 memoryTracker];
    [v18 trackMemoryUsageWithReason:2];
  }
  else
  {
    uint64_t v19 = (void *)MEMORY[0x230FBD990]();
    int v20 = v6;
    int v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      __int16 v22 = HMFGetLogIdentifier();
      *(_DWORD *)int v23 = 138543362;
      *(void *)&void v23[4] = v22;
      _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@Notification does not contain process memory state", v23, 0xCu);
    }
  }
}

- (void)_handleCurrentAccessoryAddedNotification:(id)a3
{
  id v4 = [(HMDHomeManager *)self capabilitiesController];
  [v4 currentAccessoryDidBecomeAvailable];

  [(HMDHomeManager *)self _updateCurrentHomeIfNecessary];
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __59__HMDHomeManager__handleCurrentAccessoryAddedNotification___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v5, block);
}

uint64_t __59__HMDHomeManager__handleCurrentAccessoryAddedNotification___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) postFinishSetupForCurrentAccessoryFollowUpIfNeeded];
}

- (void)_handleCurrentAccessoryRemovedNotification:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __61__HMDHomeManager__handleCurrentAccessoryRemovedNotification___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  long long v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __61__HMDHomeManager__handleCurrentAccessoryRemovedNotification___block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  uint64_t v3 = objc_msgSend(v2, "hmf_UUIDForKey:", @"HMDLastRemovedCurrentAccessoryUUIDKey");

  if (v3)
  {
    id v4 = (os_unfair_lock_s *)(*(void *)(a1 + 40) + 48);
    os_unfair_lock_lock_with_options();
    uint64_t v5 = [*(id *)(a1 + 40) lastRemovedCurrentAccessoryUUID];
    char v6 = objc_msgSend(v3, "hmf_isEqualToUUID:", v5);

    if (v6)
    {
      os_unfair_lock_unlock(v4);
      id v7 = [*(id *)(a1 + 40) capabilitiesController];
      [v7 didRemoveCurrentAccessory:v3];
    }
    else
    {
      [*(id *)(a1 + 40) setLastRemovedCurrentAccessoryUUID:v3];
      os_unfair_lock_unlock(v4);
      id v13 = [*(id *)(a1 + 40) capabilitiesController];
      [v13 didRemoveCurrentAccessory:v3];

      id v14 = (void *)MEMORY[0x230FBD990]();
      id v15 = *(id *)(a1 + 40);
      uint64_t v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = HMFGetLogIdentifier();
        int v22 = 138543618;
        int v23 = v17;
        __int16 v24 = 2112;
        id v25 = v3;
        _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Last removed current accessory changed to %@", (uint8_t *)&v22, 0x16u);
      }
      id v18 = [*(id *)(a1 + 40) userDefaults];
      uint64_t v19 = [v3 UUIDString];
      [v18 setObject:v19 forKey:@"HMDLastRemovedCurrentAccessoryUUIDKey"];

      [*(id *)(a1 + 40) resetTTSUHH2SettingsMigrationKey];
      int v20 = *(void **)(a1 + 40);
      int v21 = [v20 uuid];
      [v20 _updateGenerationCounterWithReason:@"CurrentAccessoryRemoved" sourceUUID:v21 shouldNotifyClients:1];
    }
    [*(id *)(a1 + 40) postFinishSetupForCurrentAccessoryFollowUpIfNeeded];
  }
  else
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = *(id *)(a1 + 40);
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      char v11 = HMFGetLogIdentifier();
      id v12 = *(void **)(a1 + 32);
      int v22 = 138543618;
      int v23 = v11;
      __int16 v24 = 2112;
      id v25 = v12;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Last removed current accessory uuid missing from notification : %@", (uint8_t *)&v22, 0x16u);
    }
  }
}

- (unint64_t)numHomes
{
  uint64_t v2 = [(HMDHomeManager *)self homes];
  unint64_t v3 = [v2 count];

  return v3;
}

- (BOOL)isSignedIntoiCloud
{
  uint64_t v2 = +[HMDAppleAccountManager sharedManager];
  char v3 = [v2 isLoggedInToPrimaryAccount];

  return v3;
}

- (id)upstreamTopicsForTopic:(id)a3
{
  return +[HMDHomeEventsGenerated upstreamTopicsForTopic:a3];
}

- (id)expandedTopicsForTopics:(id)a3
{
  return +[HMDHomeEventsGenerated expandedTopicsWithTopics:a3 homeManager:self];
}

- (id)delegatingRouter:(id)a3 upstreamTopicsFor:(id)a4
{
  return +[HMDHomeEventsGenerated upstreamTopicsForTopic:a4];
}

- (id)delegatingRouter:(id)a3 filteredTopics:(id)a4 forRouter:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  char v11 = (void *)MEMORY[0x230FBD990]();
  id v12 = [MEMORY[0x263EFF8C0] array];
  id v13 = [(HMDHomeManager *)self registrationForwardingEventRouter];

  if (v13 == v8)
  {
    id v14 = v10;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v15 = v14;
    }
    else {
      id v15 = 0;
    }
    id v16 = v15;

    uint64_t v17 = [(HMDHomeManager *)self memoryEventRouter];
    id v18 = [v17 synchronousSubscriptionProvider];

    if (v18 == v14)
    {
      id v21 = v9;
    }
    else
    {
      if (!v16) {
        goto LABEL_11;
      }
      uint64_t v19 = [v16 identifier];

      if (!v19) {
        goto LABEL_11;
      }
      uint64_t v20 = [v16 identifier];
      id v21 = +[HMDHomeEventsGenerated forwardingTopicsWithTopics:v9 forHomeRouterWithUUID:v20];

      id v12 = (void *)v20;
    }

    id v12 = v21;
LABEL_11:
  }

  return v12;
}

- (id)_currentHome
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  char v3 = [(HMDHomeManager *)self homes];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v16;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        id v9 = [v8 uuid];
        id v10 = [(HMDHomeManager *)self currentHomeUUID];
        char v11 = objc_msgSend(v9, "hmf_isEqualToUUID:", v10);

        if (v11)
        {
          id v12 = v8;
          goto LABEL_11;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  char v3 = [(HMDHomeManager *)self homes];
  id v12 = [v3 firstObject];
LABEL_11:
  id v13 = v12;

  return v13;
}

- (BOOL)isNetworkConnectionAvailable
{
  char v3 = [(HMDHomeManager *)self reachabilityMonitor];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = [(HMDHomeManager *)self reachabilityMonitor];
  char v5 = [v4 isReachable];

  return v5;
}

- (BOOL)isCloudAccountActive
{
  return 0;
}

- (BOOL)legacyZoneHasRecordsAvailable
{
  return 0;
}

- (void)multiUserStatusController:(id)a3 statusDidChange:(int64_t)a4
{
  id v5 = [(HMDHomeManager *)self uuid];
  [(HMDHomeManager *)self updateGenerationCounterWithReason:@"MultiUserStatusChanged" sourceUUID:v5 shouldNotifyClients:1];
}

- (void)handleRemoteUserClientCloudShareRepairRequest:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self userCloudShareManager];
  [v5 handleRemoteUserClientCloudShareRepairRequest:v4];
}

- (void)handleRemoteUserClientCloudShareRequest:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self userCloudShareManager];
  [v5 handleRemoteUserClientCloudShareRequest:v4];
}

- (id)modelObjectWithChangeType:(unint64_t)a3 version:(int64_t)a4
{
  uint64_t v6 = objc_opt_class();
  id v7 = [(HMDHomeManager *)self uuid];
  id v8 = [v6 emptyModelObjectWithChangeType:a3 homeManagerUUID:v7];

  id v9 = [(HMDHomeManager *)self primaryHomeUUID];

  if (v9)
  {
    id v10 = [(HMDHomeManager *)self primaryHomeUUID];
    char v11 = [v10 UUIDString];
    [v8 setPrimaryHomeUUID:v11];
  }
  id v12 = [(HMDHomeManager *)self cloudZones];
  id v13 = +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:v12];
  [v8 setCloudZoneInformation:v13];

  return v8;
}

- (id)modelObjectWithChangeType:(unint64_t)a3
{
  return [(HMDHomeManager *)self modelObjectWithChangeType:a3 version:4];
}

- (id)backingStoreObjects:(int64_t)a3
{
  id v5 = [MEMORY[0x263EFF980] array];
  uint64_t v6 = [(HMDHomeManager *)self modelObjectWithChangeType:1 version:a3];
  [v5 addObject:v6];

  if (a3 >= 3)
  {
    id v7 = [(HMDHomeManager *)self appData];

    if (v7)
    {
      id v8 = [(HMDHomeManager *)self appData];
      id v9 = [v8 modelObjectWithChangeType:1];
      [v5 addObject:v9];
    }
  }
  return v5;
}

- (void)transactionObjectRemoved:(id)a3 message:(id)a4
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    char v11 = HMFGetLogIdentifier();
    int v39 = 138543618;
    id v40 = v11;
    __int16 v41 = 2112;
    id v42 = v6;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@transactionObjectRemoved: %@", (uint8_t *)&v39, 0x16u);
  }
  id v12 = v6;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v13 = v12;
  }
  else {
    id v13 = 0;
  }
  id v14 = v13;

  if (v14)
  {
    long long v15 = (void *)MEMORY[0x230FBD990]();
    long long v16 = v9;
    long long v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      long long v18 = HMFGetLogIdentifier();
      int v39 = 138543618;
      id v40 = v18;
      __int16 v41 = 2112;
      id v42 = v14;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@transactionObjectRemoved HMDHomeManagerHomeModel: %@", (uint8_t *)&v39, 0x16u);
    }
    [(HMDHomeManager *)v16 dm_transactionObjectRemoved:v12 message:v7];
    goto LABEL_37;
  }
  id v19 = v12;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  id v21 = v20;

  id v22 = v19;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v23 = v22;
  }
  else {
    int v23 = 0;
  }
  id v24 = v23;

  if (v24)
  {
    [(HMDHomeManager *)v9 processSharedHomeModelRemoved:v24 message:v7];
LABEL_37:

    goto LABEL_38;
  }
  id v25 = v22;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  id v27 = v26;

  if (v27)
  {
    [(HMDHomeManager *)v9 processCloudZoneModelRemoved:v27 message:v7];
    goto LABEL_37;
  }
  id v28 = v25;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  id v30 = v29;

  if (v30)
  {
    [(HMDHomeManager *)v9 processAppDataModelRemove:v30 message:v7];
    goto LABEL_37;
  }
  id v31 = v28;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v32 = v31;
  }
  else {
    id v32 = 0;
  }
  id v33 = v32;

  if (v33)
  {
    id v34 = [(HMDHomeManager *)v9 appleAccountManager];
    id v35 = [v34 account];
    id v36 = [v35 modelIdentifier];
    uint64_t v37 = [v33 uuid];
    if ([v36 isEqual:v37])
    {
    }
    else
    {
      char v38 = [v34 isModelCurrentAccount:v33];

      if ((v38 & 1) == 0)
      {
LABEL_36:

        goto LABEL_37;
      }
    }
    [v34 processAccountModelRemove:v33 message:v7];
    goto LABEL_36;
  }
LABEL_38:
}

- (void)transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5
{
  id v41 = a3;
  id v8 = a4;
  id v9 = a5;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v10 = v8;
  }
  else {
    id v10 = 0;
  }
  if (!v10)
  {
    id v11 = v8;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v12 = v11;
    }
    else {
      id v12 = 0;
    }
    id v13 = v12;

    id v14 = v11;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      long long v15 = v14;
    }
    else {
      long long v15 = 0;
    }
    id v16 = v15;

    if (v16)
    {
      [(HMDHomeManager *)self processSharedHomeModelUpdate:v16 message:v9];
      goto LABEL_40;
    }
    id v17 = v14;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      long long v18 = v17;
    }
    else {
      long long v18 = 0;
    }
    id v19 = v18;

    if (v19)
    {
      [(HMDHomeManager *)self processHomeManagerModelUpdate:v19 message:v9];
      goto LABEL_40;
    }
    id v20 = v17;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v21 = v20;
    }
    else {
      id v21 = 0;
    }
    id v22 = v21;

    if (v22)
    {
      int v23 = [v22 parentUUID];
      id v24 = [(HMDHomeManager *)self _homeWithUUID:v23];

      [v24 transactionObjectUpdated:v41 newValues:v22 message:v9];
LABEL_24:

      goto LABEL_40;
    }
    id v25 = v20;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    id v27 = v26;

    if (v27)
    {
      [(HMDHomeManager *)self processCloudZoneModelAdd:v27 message:v9];
      goto LABEL_40;
    }
    id v28 = v25;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    id v30 = v29;

    if (v30)
    {
      [(HMDHomeManager *)self processAppDataModelUpdate:v30 message:v9];
      goto LABEL_40;
    }
    id v31 = v28;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v32 = v31;
    }
    else {
      id v32 = 0;
    }
    id v33 = v32;

    if (v33)
    {
      [(HMDHomeManager *)self processMetadataModel:v33 message:v9];
      goto LABEL_40;
    }
    id v34 = v31;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v35 = v34;
    }
    else {
      id v35 = 0;
    }
    id v36 = v35;

    if (!v36) {
      goto LABEL_41;
    }
    id v24 = [(HMDHomeManager *)self appleAccountManager];
    uint64_t v37 = [v24 account];
    char v38 = [v37 modelIdentifier];
    int v39 = [v36 uuid];
    if ([v38 isEqual:v39])
    {
    }
    else
    {
      char v40 = [v24 isModelCurrentAccount:v36];

      if ((v40 & 1) == 0) {
        goto LABEL_24;
      }
    }
    [v24 processAccountModel:v36 message:v9];
    goto LABEL_24;
  }
  [(HMDHomeManager *)self dm_transactionObjectUpdated:v41 newValues:v8 message:v9];
LABEL_40:

LABEL_41:
}

- (id)userWithMergeID:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = [*(id *)(*((void *)&v13 + 1) + 8 * i) userWithMergeID:v4];
        if (v10)
        {
          id v11 = (void *)v10;
          goto LABEL_11;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  id v11 = 0;
LABEL_11:

  return v11;
}

- (void)archiveServerToken:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __37__HMDHomeManager_archiveServerToken___block_invoke;
  block[3] = &unk_264A2F7F8;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, block);
}

id __37__HMDHomeManager_archiveServerToken___block_invoke(uint64_t a1)
{
  return +[HMDPersistentStore archiveCloudServerTokenData:*(void *)(a1 + 32)];
}

- (void)_remoteAccessHealthMonitorTimerDidFire:(id)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v19 = v7;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Remote access health monitor timer fired, checking state for all homes", buf, 0xCu);
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v8 = [(HMDHomeManager *)self homes];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v14;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v14 != v11) {
          objc_enumerationMutation(v8);
        }
        [*(id *)(*((void *)&v13 + 1) + 8 * v12++) remoteAccessHealthMonitorTimerDidFire];
      }
      while (v10 != v12);
      uint64_t v10 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v10);
  }
}

- (void)timerDidFire:(id)a3
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = [(HMDHomeManager *)self remoteAccessHealthMonitorTimer];

  if (v6 == v4)
  {
    [(HMDHomeManager *)self _remoteAccessHealthMonitorTimerDidFire:v4];
  }
  else
  {
    id v7 = [(HMDHomeManager *)self watchPushDelayTimer];

    if (v7 == v4)
    {
      long long v15 = (void *)MEMORY[0x230FBD990]();
      long long v16 = self;
      id v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = HMFGetLogIdentifier();
        int v27 = 138543362;
        id v28 = v18;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Watch push delay timer fired, pushing to watches", (uint8_t *)&v27, 0xCu);
      }
      [(HMDHomeManager *)v16 _sendHomeDataToAllWatchesWithCompletion:0];
    }
    else
    {
      id v8 = [(HMDHomeManager *)self debounceHomesUpdateTimer];

      if (v8 == v4)
      {
        id v19 = (void *)MEMORY[0x230FBD990]();
        uint64_t v20 = self;
        id v21 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          id v22 = HMFGetLogIdentifier();
          int v27 = 138543362;
          id v28 = v22;
          _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Debounce homes update timer has fired, posting homed did update notification", (uint8_t *)&v27, 0xCu);
        }
        [(HMDHomeManager *)v20 _notifyXPCClientsOfHomeConfigurationChange];
      }
      else
      {
        id v9 = [(HMDHomeManager *)self memoryMonitorLogEventTimer];

        if (v9 == v4)
        {
          int v23 = (void *)MEMORY[0x230FBD990]();
          id v24 = self;
          id v25 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v26 = HMFGetLogIdentifier();
            int v27 = 138543362;
            id v28 = v26;
            _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Memory monitor log event timer has fired", (uint8_t *)&v27, 0xCu);
          }
          [(HMDHomeManager *)v24 _monitorMemoryUsage];
          [(HMDHomeManager *)v24 _updateHomesDiscoveredBonjourServicesMetrics];
        }
        else
        {
          id v10 = [(HMDHomeManager *)self debounceRegenerateAssistantSyncDataTimer];

          if (v10 == v4)
          {
            uint64_t v11 = (void *)MEMORY[0x230FBD990]();
            uint64_t v12 = self;
            long long v13 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              long long v14 = HMFGetLogIdentifier();
              int v27 = 138543362;
              id v28 = v14;
              _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Debounce Siri sync timer has fired, re-generating Siri sync data", (uint8_t *)&v27, 0xCu);
            }
            [(HMDHomeManager *)v12 _generateAssistantSyncDataAndIncrementVersion:1 requestSync:1 urgent:0 completion:0];
          }
        }
      }
    }
  }
}

- (void)setupSession:(id)a3 didCloseWithError:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __49__HMDHomeManager_setupSession_didCloseWithError___block_invoke;
  block[3] = &unk_264A2F2F8;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

void __49__HMDHomeManager_setupSession_didCloseWithError___block_invoke(uint64_t a1)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = HMFGetLogIdentifier();
    id v6 = [*(id *)(a1 + 40) identifier];
    id v7 = *(void **)(a1 + 48);
    *(_DWORD *)long long buf = 138543874;
    uint64_t v72 = v5;
    __int16 v73 = 2112;
    uint64_t v74 = v6;
    __int16 v75 = 2112;
    __int16 v76 = v7;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Setup Session : %@, closed with error: %@", buf, 0x20u);
  }
  id v8 = [*(id *)(a1 + 40) setupTrackingInfo];
  id v9 = [v8 accessoryUUID];
  if (v9
    && ([*(id *)(a1 + 32) accessorySetupMetricDispatcherForAccessoryUUID:v9],
        id v10 = (HMDAccessorySetupMetricDispatcher *)objc_claimAutoreleasedReturnValue(),
        [(HMDAccessorySetupMetricDispatcher *)v10 updateTrackingInfo:v8],
        v10))
  {
    int v70 = 0;
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = *(id *)(a1 + 32);
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      long long v14 = HMFGetLogIdentifier();
      long long v15 = [*(id *)(a1 + 40) identifier];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v72 = v14;
      __int16 v73 = 2112;
      uint64_t v74 = v15;
      __int16 v75 = 2112;
      __int16 v76 = v9;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Setup Session : %@, did not find existing setup metric dispatcher for accessory uuid: %@", buf, 0x20u);
    }
    long long v16 = [HMDAccessorySetupMetricDispatcher alloc];
    id v17 = [*(id *)(a1 + 32) workQueue];
    uint64_t v18 = [*(id *)(a1 + 40) identifier];
    id v10 = [(HMDAccessorySetupMetricDispatcher *)v16 initWithQueue:v17 trackingInfo:v8 setupSessionIdentifier:v18 homeManager:*(void *)(a1 + 32)];

    [(HMDAccessorySetupMetricDispatcher *)v10 setDelegate:*(void *)(a1 + 32)];
    int v70 = 1;
  }
  if ([*(id *)(a1 + 40) role] == 1)
  {
    id v19 = [*(id *)(a1 + 32) currentAccessorySetupMetricDispatcher];

    if (v19)
    {
      uint64_t v20 = [*(id *)(a1 + 32) currentAccessorySetupMetricDispatcher];
      [v20 markSetupBeginStage:2 error:*(void *)(a1 + 48)];
    }
  }
  if (!*(void *)(a1 + 48))
  {
    if (v9)
    {
      id v21 = [*(id *)(a1 + 32) accessoryWithUUID:v9];
      LODWORD(context) = v21 != 0;
      if (v21)
      {
        id v22 = (void *)MEMORY[0x230FBD990]();
        id v23 = *(id *)(a1 + 32);
        id v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          id v25 = HMFGetLogIdentifier();
          uint64_t v26 = [*(id *)(a1 + 40) identifier];
          *(_DWORD *)long long buf = 138543874;
          uint64_t v72 = v25;
          __int16 v73 = 2112;
          uint64_t v74 = v26;
          __int16 v75 = 2112;
          __int16 v76 = v21;
          _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Submitting Repair Setup Session metric : %@ as accessory is already in the home %@", buf, 0x20u);
        }
        [(HMDAccessorySetupMetricDispatcher *)v10 markRepairSessionComplete];
      }
    }
    else
    {
      int v27 = (void *)MEMORY[0x230FBD990]();
      id v28 = *(id *)(a1 + 32);
      uint64_t v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        id v30 = HMFGetLogIdentifier();
        id v31 = [*(id *)(a1 + 40) identifier];
        *(_DWORD *)long long buf = 138543618;
        uint64_t v72 = v30;
        __int16 v73 = 2112;
        uint64_t v74 = v31;
        _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Submitting Setup Session metric : %@ as accessory was not provided in setup payload", buf, 0x16u);
      }
      LODWORD(context) = 1;
    }
    id v32 = objc_msgSend(v8, "accessoryIDSIdentifier", context);

    if (v32)
    {
      id v33 = objc_alloc(MEMORY[0x263F08C38]);
      id v34 = [v8 accessoryIDSIdentifier];
      id v35 = (void *)[v33 initWithUUIDString:v34];

      if (v35)
      {
        id v36 = [*(id *)(a1 + 32) accessoryWithIDSIdentifier:v35];
        if (v36)
        {
          contexta = (void *)MEMORY[0x230FBD990]();
          id v37 = *(id *)(a1 + 32);
          char v38 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
          {
            int v39 = HMFGetLogIdentifier();
            char v40 = objc_msgSend(*(id *)(a1 + 40), "identifier", contexta);
            *(_DWORD *)long long buf = 138543874;
            uint64_t v72 = v39;
            __int16 v73 = 2112;
            uint64_t v74 = v40;
            __int16 v75 = 2112;
            __int16 v76 = v36;
            _os_log_impl(&dword_22F52A000, v38, OS_LOG_TYPE_INFO, "%{public}@Submitting Repair Setup Session metric : %@ as accessory with matching IDS identifier is already in the home %@", buf, 0x20u);
          }
          [(HMDAccessorySetupMetricDispatcher *)v10 markRepairSessionComplete];
          LODWORD(contexta) = 1;
        }
      }
    }
    id v41 = objc_msgSend(v8, "accessoryCategory", contexta);
    id v42 = [v41 categoryType];
    int v43 = [v42 isEqualToString:*MEMORY[0x263F0B030]];

    if (v43)
    {
      uint64_t v44 = (void *)MEMORY[0x230FBD990]();
      id v45 = *(id *)(a1 + 32);
      uint64_t v46 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        uint64_t v47 = HMFGetLogIdentifier();
        uint64_t v48 = [*(id *)(a1 + 40) identifier];
        *(_DWORD *)long long buf = 138543874;
        uint64_t v72 = v47;
        __int16 v73 = 2112;
        uint64_t v74 = v48;
        __int16 v75 = 2112;
        __int16 v76 = v9;
        _os_log_impl(&dword_22F52A000, v46, OS_LOG_TYPE_INFO, "%{public}@Submitting Setup Session metric : %@ as accessory is an ATV %@", buf, 0x20u);
      }
    }
    else if (!contextb)
    {
      id v49 = [*(id *)(a1 + 32) eventRouterAssertionController];
      id v50 = [v49 takeEventRouterAssertion];

      [(HMDAccessorySetupMetricDispatcher *)v10 addRemoteEventRouterAssertion:v50];
      if (v70) {
        [*(id *)(a1 + 32) addAccessorySetupMetricDispatcher:v10];
      }

      goto LABEL_40;
    }
    [(HMDAccessorySetupMetricDispatcher *)v10 submit];
    [*(id *)(a1 + 32) removeAccessorySetupMetricDispatcherForAccessoryUUID:v9];
LABEL_40:
    uint64_t v51 = [*(id *)(a1 + 40) setupTrackingInfo];
    objc_msgSend(*(id *)(a1 + 32), "setSetupEndTimestamp:", (double)(unint64_t)objc_msgSend(v51, "endTime"));

    goto LABEL_41;
  }
  [(HMDAccessorySetupMetricDispatcher *)v10 submit];
  [*(id *)(a1 + 32) removeAccessorySetupMetricDispatcherForAccessoryUUID:v9];
LABEL_41:
  id v52 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 48);
  os_unfair_lock_lock_with_options();
  id v53 = [*(id *)(a1 + 32) deviceSetupSessions];
  [v53 removeObject:*(void *)(a1 + 40)];

  os_unfair_lock_unlock(v52);
  if (!*(void *)(a1 + 48) && [*(id *)(a1 + 40) role] == 1)
  {
    long long v54 = [MEMORY[0x263F35AD0] systemStore];
    long long v55 = [v54 getLocalPairingIdentity:0];
    BOOL v56 = v55 == 0;

    if (!v56)
    {
      long long v57 = (void *)MEMORY[0x230FBD990]();
      id v58 = *(id *)(a1 + 32);
      uint64_t v59 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
      {
        uint64_t v60 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v72 = v60;
        _os_log_impl(&dword_22F52A000, v59, OS_LOG_TYPE_INFO, "%{public}@Resetting legacy key transfer and starting cloud fetch", buf, 0xCu);
      }
      uint64_t v61 = [MEMORY[0x263EFF9A0] dictionary];
      [v61 setObject:*(void *)(a1 + 48) forKeyedSubscript:@"TTSU.error"];
      __int16 v62 = *(void **)(a1 + 32);
      uint64_t v63 = (void *)[v61 copy];
      logAndPostNotification(@"TTSU.Finished.NotificationKey", v62, v63);

      uint64_t v64 = [*(id *)(a1 + 32) userDefaults];
      [v64 setBool:1 forKey:@"TTSU.Finished"];
    }
  }
  if ([*(id *)(a1 + 40) role] == 1)
  {
    uint64_t v65 = [*(id *)(a1 + 32) currentAccessorySetupMetricDispatcher];
    [v65 markSetupEndStage:2 error:*(void *)(a1 + 48)];

    if ([*(id *)(a1 + 32) firstCloudKitImportComplete])
    {
      __int16 v66 = [*(id *)(a1 + 32) currentAccessorySetupMetricDispatcher];
      [v66 markSetupEndStage:13 error:*(void *)(a1 + 48)];
    }
  }
}

- (void)setupSession:(id)a3 didReceiveAccessoryWithUUID:(id)a4
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = self;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    id v12 = [v6 identifier];
    int v18 = 138543874;
    id v19 = v11;
    __int16 v20 = 2112;
    id v21 = v12;
    __int16 v22 = 2112;
    id v23 = v7;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Setup Session : %@, received accessory uuid: %@", (uint8_t *)&v18, 0x20u);
  }
  if (![v6 role])
  {
    id v13 = [HMDAccessorySetupMetricDispatcher alloc];
    long long v14 = [(HMDHomeManager *)v9 workQueue];
    long long v15 = [v6 setupTrackingInfo];
    long long v16 = [v6 identifier];
    id v17 = [(HMDAccessorySetupMetricDispatcher *)v13 initWithQueue:v14 trackingInfo:v15 setupSessionIdentifier:v16 homeManager:v9];

    [(HMDAccessorySetupMetricDispatcher *)v17 setDelegate:v9];
    [(HMDHomeManager *)v9 addAccessorySetupMetricDispatcher:v17];
  }
}

- (void)__handleCompanionUpdated:(id)a3
{
  id v4 = +[HMDCompanionManager sharedManager];
  id v5 = [v4 companion];

  id v6 = [(HMDHomeManager *)self workQueue];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __43__HMDHomeManager___handleCompanionUpdated___block_invoke;
  v8[3] = &unk_264A2F820;
  id v9 = v5;
  id v10 = self;
  id v7 = v5;
  dispatch_async(v6, v8);
}

void __43__HMDHomeManager___handleCompanionUpdated___block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    id v4 = HMFGetLogIdentifier();
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543618;
    id v25 = v4;
    __int16 v26 = 2112;
    uint64_t v27 = v5;
    _os_log_impl(&dword_22F52A000, v3, OS_LOG_TYPE_DEBUG, "%{public}@Received notification that the companion changed: %@", buf, 0x16u);
  }
  id v6 = (void *)MEMORY[0x230FBD990]([*(id *)(a1 + 40) _checkAndInformCompanionDevice]);
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v25 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Electing companion based off of changed companion device", buf, 0xCu);
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v9 = objc_msgSend(*(id *)(a1 + 40), "homes", 0);
  uint64_t v10 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v20 != v12) {
          objc_enumerationMutation(v9);
        }
        long long v14 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        long long v15 = *(void **)(a1 + 40);
        long long v16 = [v14 uuid];
        [v15 electRemoteAccessPeerForHome:v16];

        if (*(void *)(a1 + 32))
        {
          id v17 = [v14 primaryResident];
          int v18 = [v17 device];
        }
        else
        {
          int v18 = 0;
        }
        [v14 resubscribeForNotificationsOnResident:v18];
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v11);
  }
}

- (void)_handleUpdatedCurrentDevice:(id)a3
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v32 = v8;
    __int16 v33 = 2112;
    id v34 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Received notification that current device was updated: %@", buf, 0x16u);
  }
  if (v4) {
    [(HMDHomeManager *)self startLocalTransport];
  }
  else {
    [(HMDHomeManager *)self stopLocalTransport];
  }
  id v9 = +[HMDDeviceCapabilities deviceCapabilities];
  int v10 = [v9 isResidentCapable];

  if (v10)
  {
    if (v4)
    {
      [(HMDHomeManager *)self notifyClientsResidentCapable:1];
      if (![(HMDHomeManager *)self residentEnabledState])
      {
        uint64_t v11 = [v4 productInfo];
        uint64_t v12 = [v11 productClass];

        if (v12 == 3)
        {
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          id v13 = [(HMDHomeManager *)self homes];
          uint64_t v14 = [v13 countByEnumeratingWithState:&v26 objects:v30 count:16];
          if (v14)
          {
            uint64_t v15 = *(void *)v27;
            while (2)
            {
              for (uint64_t i = 0; i != v14; ++i)
              {
                if (*(void *)v27 != v15) {
                  objc_enumerationMutation(v13);
                }
                id v17 = *(void **)(*((void *)&v26 + 1) + 8 * i);
                if ([v17 isOwnerUser])
                {
                  int v18 = [v17 residentCapableDevices];
                  int v19 = [v18 containsObject:v4];

                  if (v19)
                  {
                    long long v22 = (void *)MEMORY[0x230FBD990]();
                    id v23 = self;
                    uint64_t v24 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                    {
                      id v25 = HMFGetLogIdentifier();
                      *(_DWORD *)long long buf = 138543362;
                      id v32 = v25;
                      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Found ourselves as a resident in one or more homes, enabling ourselves as a resident device", buf, 0xCu);
                    }
                    uint64_t v14 = 1;
                    goto LABEL_25;
                  }
                }
              }
              uint64_t v14 = [v13 countByEnumeratingWithState:&v26 objects:v30 count:16];
              if (v14) {
                continue;
              }
              break;
            }
          }
LABEL_25:

          long long v20 = self;
          uint64_t v21 = v14;
        }
        else
        {
          long long v20 = self;
          uint64_t v21 = 1;
        }
        [(HMDHomeManager *)v20 _updateResidentEnabledOnThisDevice:v21 forceNotify:0 message:0];
      }
    }
    else
    {
      [(HMDHomeManager *)self notifyClientsResidentCapable:0];
    }
  }
}

- (void)__handleUpdatedCurrentDevice:(id)a3
{
  id v4 = [a3 userInfo];
  uint64_t v5 = [v4 objectForKeyedSubscript:@"HMDDeviceNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  if ([v7 isCurrentDevice])
  {
    id v8 = [(HMDHomeManager *)self workQueue];
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    v9[2] = __47__HMDHomeManager___handleUpdatedCurrentDevice___block_invoke;
    v9[3] = &unk_264A2F820;
    v9[4] = self;
    id v10 = v7;
    dispatch_async(v8, v9);
  }
}

uint64_t __47__HMDHomeManager___handleUpdatedCurrentDevice___block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) _handleUpdatedCurrentDevice:*(void *)(a1 + 40)];
  uint64_t v2 = *(void **)(a1 + 32);
  return [v2 postFinishSetupForCurrentAccessoryFollowUpIfNeeded];
}

- (void)__handleDeviceCapabilitiesUpdated:(id)a3
{
  v19[1] = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self appleAccountManager];
  id v6 = [v5 device];

  if (v6)
  {
    id v7 = [v4 object];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v8 = v7;
    }
    else {
      id v8 = 0;
    }
    id v9 = v8;

    if (v9)
    {
      id v10 = [v6 capabilities];

      if (v10 == v9)
      {
        uint64_t v11 = [v4 userInfo];
        uint64_t v12 = (void *)MEMORY[0x263EFFA08];
        v19[0] = objc_opt_class();
        id v13 = [MEMORY[0x263EFF8C0] arrayWithObjects:v19 count:1];
        uint64_t v14 = [v12 setWithArray:v13];
        uint64_t v15 = objc_msgSend(v11, "hmf_arrayForKey:ofClasses:", @"HMDDeviceCapabilitiesUpdatedDifferingFieldsNotificationKey", v14);

        if ([v15 count])
        {
          long long v16 = [(HMDHomeManager *)self workQueue];
          v17[0] = MEMORY[0x263EF8330];
          v17[1] = 3221225472;
          v17[2] = __52__HMDHomeManager___handleDeviceCapabilitiesUpdated___block_invoke;
          v17[3] = &unk_264A2F820;
          void v17[4] = self;
          id v18 = v6;
          dispatch_async(v16, v17);
        }
      }
    }
  }
}

uint64_t __52__HMDHomeManager___handleDeviceCapabilitiesUpdated___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleUpdatedCurrentDevice:*(void *)(a1 + 40)];
}

- (void)verifyCurrentDeviceResidentStatus
{
  id v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager_verifyCurrentDeviceResidentStatus__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __51__HMDHomeManager_verifyCurrentDeviceResidentStatus__block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) isResidentCapable];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v3 isResidentEnabled];
    return [v3 _updateResidentEnabledOnThisDevice:v4 forceNotify:1 message:0];
  }
  return result;
}

- (void)__accountRegistryRemovedAccount:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __50__HMDHomeManager___accountRegistryRemovedAccount___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __50__HMDHomeManager___accountRegistryRemovedAccount___block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:@"HMDAccountNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = *(id *)(a1 + 40);
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    int v14 = 138543618;
    uint64_t v15 = v9;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Received notification that account was removed: %@", (uint8_t *)&v14, 0x16u);
  }
  if ([v5 isCurrentAccount])
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = *(id *)(a1 + 40);
    uint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int v14 = 138543362;
      uint64_t v15 = v13;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@The removed account is the current account", (uint8_t *)&v14, 0xCu);
    }
    [*(id *)(a1 + 40) stopLocalTransport];
    +[HMDHH2FrameworkSwitch switchBackToHH1AndDoNotLaunchDueToPrimaryAccountRemoval];
  }
}

- (void)__accountRegistryAddedAccount:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __48__HMDHomeManager___accountRegistryAddedAccount___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __48__HMDHomeManager___accountRegistryAddedAccount___block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:@"HMDAccountNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = *(id *)(a1 + 40);
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    int v14 = 138543618;
    uint64_t v15 = v9;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Received notification that account was added: %@", (uint8_t *)&v14, 0x16u);
  }
  id v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    int v14 = 138543362;
    uint64_t v15 = v13;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Not migrating triggers to owning device in HH2 mode.", (uint8_t *)&v14, 0xCu);
  }
}

- (void)_handleFetchDevicesMessage:(id)a3
{
  v14[1] = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  uint64_t v13 = *MEMORY[0x263F0C9F0];
  id v6 = (void *)MEMORY[0x263EFFA08];
  id v7 = [(HMDHomeManager *)self appleAccountManager];
  id v8 = [v7 account];
  id v9 = [v8 devices];
  id v10 = [v6 setWithArray:v9];
  id v11 = encodeRootObjectForIncomingXPCMessage(v10, 0);
  v14[0] = v11;
  uint64_t v12 = [NSDictionary dictionaryWithObjects:v14 forKeys:&v13 count:1];
  [v4 respondWithPayload:v12];
}

- (void)_notifyXPCClientsOfUpdatedDevices
{
  v26[1] = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v3);

  id v4 = (void *)MEMORY[0x263F42568];
  uint64_t v5 = *MEMORY[0x263F0C9F8];
  uint64_t v25 = *MEMORY[0x263F0C9F0];
  id v6 = (void *)MEMORY[0x263EFFA08];
  id v7 = [(HMDHomeManager *)self appleAccountManager];
  id v8 = [v7 account];
  id v9 = [v8 devices];
  id v10 = [v6 setWithArray:v9];
  id v11 = encodeRootObjectForIncomingXPCMessage(v10, 0);
  v26[0] = v11;
  uint64_t v12 = [NSDictionary dictionaryWithObjects:v26 forKeys:&v25 count:1];
  uint64_t v13 = [v4 entitledMessageWithName:v5 messagePayload:v12];

  int v14 = (void *)MEMORY[0x230FBD990]();
  uint64_t v15 = self;
  __int16 v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    id v17 = HMFGetLogIdentifier();
    uint64_t v18 = [v13 shortDescription];
    int v21 = 138543618;
    long long v22 = v17;
    __int16 v23 = 2112;
    uint64_t v24 = v18;
    _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Notifying clients of updated devices with message: %@", (uint8_t *)&v21, 0x16u);
  }
  int v19 = [(HMDHomeManager *)v15 messageDispatcher];
  long long v20 = [(HMDHomeManager *)v15 uuid];
  [v19 sendMessage:v13 target:v20];
}

- (void)__accountRemovedDevice:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __41__HMDHomeManager___accountRemovedDevice___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __41__HMDHomeManager___accountRemovedDevice___block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  uint64_t v5 = [*(id *)(a1 + 32) userInfo];
  id v6 = [v5 objectForKeyedSubscript:@"HMDDeviceNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }
  id v8 = v7;

  if ([v4 isCurrentAccount])
  {
    id v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = *(id *)(a1 + 40);
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v25 = v12;
      __int16 v26 = 2112;
      id v27 = v8;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Received notification that device was removed from our account: %@", buf, 0x16u);
    }
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v13 = objc_msgSend(*(id *)(a1 + 40), "homes", 0);
    uint64_t v14 = [v13 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v20;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v20 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = *(void **)(*((void *)&v19 + 1) + 8 * i);
          if ([v18 isOwnerUser]) {
            [v18 removeResidentCapableDevice:v8];
          }
        }
        uint64_t v15 = [v13 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }
      while (v15);
    }

    [*(id *)(a1 + 40) _checkForRemotePeers];
    [*(id *)(a1 + 40) _notifyXPCClientsOfUpdatedDevices];
  }
}

- (void)__handleDeviceUpdatedNotification:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __52__HMDHomeManager___handleDeviceUpdatedNotification___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __52__HMDHomeManager___handleDeviceUpdatedNotification___block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = *(id *)(a1 + 40);
  id v7 = HMFGetOSLogHandle();
  id v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      int v14 = 138543618;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      id v17 = v4;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Received notification that device updated: %@", (uint8_t *)&v14, 0x16u);
    }
    [*(id *)(a1 + 40) _notifyXPCClientsOfUpdatedDevices];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      id v11 = [*(id *)(a1 + 32) object];
      uint64_t v12 = [*(id *)(a1 + 32) object];
      int v14 = 138543874;
      uint64_t v15 = v10;
      __int16 v16 = 2112;
      id v17 = v11;
      __int16 v18 = 2112;
      id v19 = (id)objc_opt_class();
      id v13 = v19;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Notification object was not an HMDDevice: %@ (%@)", (uint8_t *)&v14, 0x20u);
    }
  }
}

- (void)__accountAddedDevice:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __39__HMDHomeManager___accountAddedDevice___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __39__HMDHomeManager___accountAddedDevice___block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  uint64_t v5 = [*(id *)(a1 + 32) userInfo];
  id v6 = [v5 objectForKeyedSubscript:@"HMDDeviceNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }
  id v8 = v7;

  if ([v4 isCurrentAccount])
  {
    id v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = *(id *)(a1 + 40);
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      int v13 = 138543618;
      int v14 = v12;
      __int16 v15 = 2112;
      id v16 = v8;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Received notification that device was added to our account: %@", (uint8_t *)&v13, 0x16u);
    }
    [*(id *)(a1 + 40) _checkForRemotePeers];
    [*(id *)(a1 + 40) _notifyXPCClientsOfUpdatedDevices];
  }
}

- (id)updatedUUIDForDiscoveredUnpairedAccessory:(id)a3
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  if (!v7)
  {
    int v13 = 0;
    goto LABEL_24;
  }
  id v8 = [v7 sensorManager];
  id v9 = v8;
  if (v8)
  {
    id v10 = [v8 derivedHAPAccessoryIdentifier];
    if (v10)
    {
      id v11 = [v4 identifier];
      int v12 = [v11 isEqualToString:v10];

      if (v12)
      {
        int v13 = [v9 derivedSensorUUID];
        int v14 = (void *)MEMORY[0x230FBD990]();
        __int16 v15 = self;
        id v16 = HMFGetOSLogHandle();
        uint64_t v17 = v16;
        if (v13)
        {
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            __int16 v18 = HMFGetLogIdentifier();
            id v19 = [v4 uuid];
            int v27 = 138543874;
            uint64_t v28 = v18;
            __int16 v29 = 2112;
            id v30 = v19;
            __int16 v31 = 2112;
            id v32 = v13;
            _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Updating unpaired sensor accessory UUID from %@ to %@", (uint8_t *)&v27, 0x20u);
          }
          id v20 = v13;
        }
        else
        {
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            uint64_t v25 = HMFGetLogIdentifier();
            int v27 = 138543362;
            uint64_t v28 = v25;
            _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Unexpectedly did not get a derived sensor UUID for the current accessory", (uint8_t *)&v27, 0xCu);
          }
        }

        goto LABEL_22;
      }
    }
    else
    {
      long long v21 = (void *)MEMORY[0x230FBD990]();
      long long v22 = self;
      __int16 v23 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = HMFGetLogIdentifier();
        int v27 = 138543362;
        uint64_t v28 = v24;
        _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unexpectedly did not get a derived sensor identifier for the current accessory", (uint8_t *)&v27, 0xCu);
      }
    }
    int v13 = 0;
LABEL_22:

    goto LABEL_23;
  }
  int v13 = 0;
LABEL_23:

LABEL_24:
  return v13;
}

- (void)accessoryBrowserDidFindNewAccessory
{
  id v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __53__HMDHomeManager_accessoryBrowserDidFindNewAccessory__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __53__HMDHomeManager_accessoryBrowserDidFindNewAccessory__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processAnyPendingRequestsForRemoteAccess:0];
}

- (void)_removeAccessAllowedWhenLockedFileFromDisk
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = objc_alloc(NSURL);
  id v4 = [(HMDHomeManager *)self accessAllowedWhenLockedSettingFileName];
  uint64_t v5 = (void *)[v3 initFileURLWithPath:v4];

  id v6 = [MEMORY[0x263F08850] defaultManager];
  id v12 = 0;
  [v6 removeItemAtURL:v5 error:&v12];
  id v7 = v12;

  if (v7)
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = self;
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      int v14 = v11;
      __int16 v15 = 2112;
      id v16 = v7;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while removing access allowed when locked setting file from disk : %@", buf, 0x16u);
    }
  }
}

- (void)_migrateAccessAllowedWhenLockedSettingIfNeeded
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self accessAllowedWhenLockedSettingFileName];
  id v4 = [MEMORY[0x263F08850] defaultManager];
  char v5 = [v4 fileExistsAtPath:v3];

  if (v5)
  {
    id v48 = 0;
    id v6 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v3 options:2 error:&v48];
    id v7 = v48;
    if (v6)
    {
      id v8 = (void *)MEMORY[0x263F08928];
      id v9 = [(id)objc_opt_class() allowedClassesForAccessAllowedWhenLockedArchive];
      id v47 = v7;
      id v10 = [v8 unarchivedObjectOfClasses:v9 fromData:v6 error:&v47];
      id v11 = v47;

      if (v10)
      {
        id v12 = v10;
        objc_opt_class();
        int v13 = objc_opt_isKindOfClass() & 1;
        if (v13) {
          int v14 = v12;
        }
        else {
          int v14 = 0;
        }
        id v15 = v14;

        id v16 = (void *)MEMORY[0x230FBD990]();
        uint64_t v17 = self;
        __int16 v18 = HMFGetOSLogHandle();
        id v19 = v18;
        if (v13)
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            id v20 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            id v50 = v20;
            __int16 v51 = 2112;
            id v52 = v12;
            _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Found HH1 accessAllowedWhenLocked setting : %@", buf, 0x16u);
          }
          long long v21 = [v12 objectForKeyedSubscript:@"kAccessAllowedWhenLockedKey"];
          if (v21)
          {
            long long v22 = [(HMDHomeManager *)v17 backingStore];
            __int16 v23 = [v22 context];

            uint64_t v24 = [v23 managedObjectContext];
            v44[0] = MEMORY[0x263EF8330];
            v44[1] = 3221225472;
            v44[2] = __64__HMDHomeManager__migrateAccessAllowedWhenLockedSettingIfNeeded__block_invoke;
            v44[3] = &unk_264A2F2F8;
            v44[4] = v17;
            id v45 = v21;
            id v46 = v24;
            id v25 = v24;
            [v25 performBlockAndWait:v44];
            [(HMDHomeManager *)v17 _removeAccessAllowedWhenLockedFileFromDisk];
          }
          else
          {
            int v39 = (void *)MEMORY[0x230FBD990]();
            char v40 = v17;
            id v41 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              id v42 = v43 = v39;
              *(_DWORD *)long long buf = 138543618;
              id v50 = v42;
              __int16 v51 = 2112;
              id v52 = v12;
              _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_ERROR, "%{public}@That's weird. accessAllowedWhenLocked dictionary contain nil value kAccessAllowedWhenLockedKey : %@", buf, 0x16u);

              int v39 = v43;
            }
          }
        }
        else
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            char v38 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            id v50 = v38;
            __int16 v51 = 2112;
            id v52 = v12;
            _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Unarchived data is the wrong type : %@", buf, 0x16u);
          }
        }
      }
      else
      {
        id v34 = (void *)MEMORY[0x230FBD990]();
        uint64_t v35 = self;
        id v36 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          id v37 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          id v50 = v37;
          __int16 v51 = 2112;
          id v52 = v11;
          _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_ERROR, "%{public}@Unable to unarchive from disk : %@", buf, 0x16u);
        }
      }

      id v7 = v11;
    }
    else
    {
      id v30 = (void *)MEMORY[0x230FBD990]();
      __int16 v31 = self;
      id v32 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543874;
        id v50 = v33;
        __int16 v51 = 2112;
        id v52 = v3;
        __int16 v53 = 2112;
        id v54 = v7;
        _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_ERROR, "%{public}@Unable to read data from file : %@ / %@", buf, 0x20u);
      }
    }
  }
  else
  {
    __int16 v26 = (void *)MEMORY[0x230FBD990]();
    int v27 = self;
    uint64_t v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      __int16 v29 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v50 = v29;
      __int16 v51 = 2112;
      id v52 = v3;
      _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@HH1 accessAllowedWhenLocked setting file do not exist : %@", buf, 0x16u);
    }
  }
}

uint64_t __64__HMDHomeManager__migrateAccessAllowedWhenLockedSettingIfNeeded__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) BOOLValue];
  uint64_t v4 = *(void *)(a1 + 48);
  return [v2 _updateAccessAllowedWhenLockedToLocalStore:v3 managedObjectContext:v4];
}

- (BOOL)_updateAccessAllowedWhenLockedToLocalStore:(BOOL)a3 managedObjectContext:(id)a4
{
  BOOL v4 = a3;
  uint64_t v45 = *MEMORY[0x263EF8340];
  id v6 = a4;
  id v7 = (void *)MEMORY[0x230FBD990](objc_msgSend(v6, "hmd_assertIsExecuting"));
  id v8 = self;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    id v11 = HMFBooleanToString();
    *(_DWORD *)long long buf = 138543618;
    char v38 = v10;
    __int16 v39 = 2112;
    id v40 = v11;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Going to store accessAllowedWhenLocked (%@) to local store", buf, 0x16u);
  }
  id v12 = +[MKFLocalSettings fetchRequest];
  id v36 = 0;
  int v13 = [v6 executeFetchRequest:v12 error:&v36];
  id v14 = v36;

  id v15 = [v13 firstObject];
  if (!v15)
  {
    id v16 = (void *)MEMORY[0x230FBD990]();
    uint64_t v17 = v8;
    __int16 v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      id v19 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      char v38 = v19;
      __int16 v39 = 2112;
      id v40 = v14;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Did not find MKFLocalSettings in local store. Inserting a new one. error if any: %@", buf, 0x16u);
    }
    id v15 = [[MKFLocalSettings alloc] initWithContext:v6];
  }
  id v20 = [NSNumber numberWithBool:v4];
  [(MKFLocalSettings *)v15 setAccessAllowedWhenLocked:v20];

  id v35 = v14;
  int v21 = [v6 save:&v35];
  id v22 = v35;

  __int16 v23 = (void *)MEMORY[0x230FBD990]([v6 reset]);
  uint64_t v24 = v8;
  id v25 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v34 = v6;
    v27 = BOOL v26 = v4;
    HMFBooleanToString();
    uint64_t v33 = v23;
    v29 = id v28 = v22;
    HMFBooleanToString();
    v31 = id v30 = v13;
    *(_DWORD *)long long buf = 138544130;
    char v38 = v27;
    __int16 v39 = 2112;
    id v40 = v29;
    __int16 v41 = 2112;
    id v42 = v28;
    __int16 v43 = 2112;
    uint64_t v44 = v31;
    _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_INFO, "%{public}@Storing access when locked setting (%@) saved to local store with error : %@, Success : %@", buf, 0x2Au);

    int v13 = v30;
    id v22 = v28;
    __int16 v23 = v33;

    BOOL v4 = v26;
    id v6 = v34;
  }

  if (v21) {
    [(HMDHomeManager *)v24 setAccessAllowedWhenLocked:v4];
  }

  return v21;
}

- (void)_readAccessAllowedWhenLockedSettingFromLocalStore
{
  uint64_t v3 = (void *)MEMORY[0x230FBD990](self, a2);
  [(HMDHomeManager *)self _migrateAccessAllowedWhenLockedSettingIfNeeded];
  BOOL v4 = [(HMDHomeManager *)self backingStore];
  char v5 = [v4 context];

  id v6 = [v5 managedObjectContext];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __67__HMDHomeManager__readAccessAllowedWhenLockedSettingFromLocalStore__block_invoke;
  v8[3] = &unk_264A2F820;
  id v9 = v6;
  id v10 = self;
  id v7 = v6;
  [v7 performBlockAndWait:v8];
}

void __67__HMDHomeManager__readAccessAllowedWhenLockedSettingFromLocalStore__block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = +[MKFLocalSettings fetchRequest];
  id v16 = 0;
  BOOL v4 = [v2 executeFetchRequest:v3 error:&v16];
  id v5 = v16;

  id v6 = [v4 firstObject];
  id v7 = v6;
  if (v6
    && ([v6 accessAllowedWhenLocked],
        id v8 = objc_claimAutoreleasedReturnValue(),
        v8,
        v8))
  {
    id v9 = [v7 accessAllowedWhenLocked];
    objc_msgSend(*(id *)(a1 + 40), "setAccessAllowedWhenLocked:", objc_msgSend(v9, "BOOLValue"));

    id v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = *(id *)(a1 + 40);
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v13 = HMFGetLogIdentifier();
      [*(id *)(a1 + 40) isAccessAllowedWhenLocked];
      id v14 = HMFBooleanToString();
      *(_DWORD *)long long buf = 138543618;
      __int16 v18 = v13;
      __int16 v19 = 2112;
      id v20 = v14;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Access allowed when locked: %@", buf, 0x16u);
    }
  }
  else
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = *(id *)(a1 + 40);
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v18 = v15;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Did not find accessAllowedWhenLocked in local store.", buf, 0xCu);
    }
  }
}

- (void)_saveAccessAllowedWhenLockedToLocalStore:(BOOL)a3 message:(id)a4
{
  id v6 = a4;
  id v7 = [(HMDHomeManager *)self backingStore];
  id v8 = [v7 context];

  id v9 = [v8 managedObjectContext];
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  void v12[2] = __67__HMDHomeManager__saveAccessAllowedWhenLockedToLocalStore_message___block_invoke;
  v12[3] = &unk_264A2B1D8;
  BOOL v15 = a3;
  void v12[4] = self;
  id v13 = v9;
  id v14 = v6;
  id v10 = v6;
  id v11 = v9;
  [v11 performBlock:v12];
}

void __67__HMDHomeManager__saveAccessAllowedWhenLockedToLocalStore_message___block_invoke(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _updateAccessAllowedWhenLockedToLocalStore:*(unsigned __int8 *)(a1 + 56) managedObjectContext:*(void *)(a1 + 40)])
  {
    [*(id *)(a1 + 32) setAccessAllowedWhenLocked:*(unsigned __int8 *)(a1 + 56)];
    [*(id *)(a1 + 48) respondWithSuccess];
    uint64_t v2 = *(void **)(a1 + 32);
    uint64_t v3 = *(unsigned __int8 *)(a1 + 56);
    [v2 notifySPIClientsAboutAccessAllowedWhenLocked:v3];
  }
  else
  {
    BOOL v4 = *(void **)(a1 + 48);
    id v5 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2711];
    [v4 respondWithError:v5];
  }
}

- (void)notifySPIClientsAboutAccessAllowedWhenLocked:(BOOL)a3
{
  v18[1] = *MEMORY[0x263EF8340];
  uint64_t v17 = @"kAccessAllowedWhenLockedKey";
  BOOL v4 = [NSNumber numberWithBool:a3];
  v18[0] = v4;
  id v5 = [NSDictionary dictionaryWithObjects:v18 forKeys:&v17 count:1];

  id v6 = [MEMORY[0x263F42568] entitledMessageWithName:*MEMORY[0x263F0C970] messagePayload:v5];
  id v7 = [(HMDHomeManager *)self messageDispatcher];
  id v8 = [(HMDHomeManager *)self uuid];
  [v7 sendMessage:v6 target:v8];

  id v9 = (void *)MEMORY[0x230FBD990]();
  id v10 = self;
  id v11 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    id v12 = HMFGetLogIdentifier();
    int v13 = 138543618;
    id v14 = v12;
    __int16 v15 = 2112;
    id v16 = v5;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending accessAllowedWhenLocked settings to all entitled clients : [%@]", (uint8_t *)&v13, 0x16u);
  }
}

- (id)accessAllowedWhenLockedSettingFileName
{
  uint64_t v2 = NSString;
  id v3 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
  BOOL v4 = [v2 stringWithFormat:@"%@/AllowedAccessWhenLockedSetting.plist", v3];

  return v4;
}

- (void)_handleAccessAllowedWhenLockedRequest:(id)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v17 = v8;
    __int16 v18 = 2112;
    id v19 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Asked to update access allowed when locked : %@", buf, 0x16u);
  }
  char v15 = 0;
  uint64_t v9 = [v4 BOOLForKey:@"kAccessAllowedWhenLockedKey" keyPresent:&v15];
  if (v15)
  {
    [(HMDHomeManager *)v6 _saveAccessAllowedWhenLockedToLocalStore:v9 message:v4];
  }
  else
  {
    id v10 = (void *)MEMORY[0x230FBD990](v9);
    id v11 = v6;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v17 = v13;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the key in the message", buf, 0xCu);
    }
    id v14 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v4 respondWithError:v14];
  }
}

- (void)_checkForSelfRemoval
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (+[HMDDeviceCapabilities isAppleMediaAccessory])
  {
    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = self;
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      char v15 = v6;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Checking for pending self removal", buf, 0xCu);
    }
    id v7 = [(HMDHomeManager *)v4 backingStore];
    id v8 = [v7 context];
    uint64_t v9 = [v8 managedObjectContext];

    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = __38__HMDHomeManager__checkForSelfRemoval__block_invoke;
    v11[3] = &unk_264A2F820;
    id v12 = v9;
    int v13 = v4;
    id v10 = v9;
    [v10 performBlock:v11];
  }
}

void __38__HMDHomeManager__checkForSelfRemoval__block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "hmd_coreData");
  id v3 = [v2 localStore];

  if (v3)
  {
    id v4 = [v3 metadata];
    id v5 = objc_msgSend(v4, "hmf_UUIDForKey:", @"HMDLastRemovedCurrentAccessoryMetadataKey");
    if (v5)
    {
      id v6 = (void *)MEMORY[0x230FBD990]();
      id v7 = *(id *)(a1 + 40);
      id v8 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        __int16 v18 = v9;
        __int16 v19 = 2112;
        uint64_t v20 = v5;
        _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Found for pending self removal for: %@", buf, 0x16u);
      }
      id v10 = [*(id *)(a1 + 40) workQueue];
      v15[0] = MEMORY[0x263EF8330];
      v15[1] = 3221225472;
      v15[2] = __38__HMDHomeManager__checkForSelfRemoval__block_invoke_1250;
      v15[3] = &unk_264A2F820;
      v15[4] = *(void *)(a1 + 40);
      id v16 = v5;
      dispatch_async(v10, v15);
    }
  }
  else
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = *(id *)(a1 + 40);
    int v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v18 = v14;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Could not find local store when processing removal for AppleMediaAccessory", buf, 0xCu);
    }
  }
}

void __38__HMDHomeManager__checkForSelfRemoval__block_invoke_1250(uint64_t a1)
{
  uint64_t v2 = [HMDSelfRemovalWatchdog alloc];
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) workQueue];
  id v5 = [(HMDSelfRemovalWatchdog *)v2 initWithCurrentAccessoryUUID:v3 workQueue:v4];
  [*(id *)(a1 + 32) setSelfRemovalWatchdog:v5];

  id v6 = [*(id *)(a1 + 32) selfRemovalWatchdog];
  [v6 configure];

  objc_initWeak(&location, *(id *)(a1 + 32));
  id v7 = [*(id *)(a1 + 32) selfRemovalWatchdog];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __38__HMDHomeManager__checkForSelfRemoval__block_invoke_2;
  v8[3] = &unk_264A2CB70;
  objc_copyWeak(&v10, &location);
  id v9 = *(id *)(a1 + 40);
  [v7 startWithCompletion:v8];

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void __38__HMDHomeManager__checkForSelfRemoval__block_invoke_2(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = [WeakRetained workQueue];
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  v4[2] = __38__HMDHomeManager__checkForSelfRemoval__block_invoke_3;
  v4[3] = &unk_264A2F820;
  v4[4] = WeakRetained;
  id v5 = *(id *)(a1 + 32);
  dispatch_async(v3, v4);
}

void __38__HMDHomeManager__checkForSelfRemoval__block_invoke_3(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x230FBD990]([*(id *)(a1 + 32) setSelfRemovalWatchdog:0]);
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138543618;
    int v13 = v5;
    __int16 v14 = 2112;
    uint64_t v15 = v6;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Posting notification about current accessory removal %@", buf, 0x16u);
  }
  id v7 = [*(id *)(a1 + 32) notificationCenter];
  uint64_t v8 = *(void *)(a1 + 40);
  id v10 = @"HMDLastRemovedCurrentAccessoryUUIDKey";
  uint64_t v11 = v8;
  id v9 = [NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  [v7 postNotificationName:@"HMDHomeManagerDidRemoveCurrentAccessoryNotification" object:0 userInfo:v9];
}

- (BOOL)dataSyncInProgressWithState:(unint64_t *)a3 withMessage:(id)a4
{
  return 0;
}

- (unint64_t)statusForMessage:(id)a3
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v37 = 0;
  id v5 = [(HMDHomeManager *)self appleAccountManager];
  uint64_t v6 = +[HMDDeviceCapabilities deviceCapabilities];
  int v7 = [v6 supportsDeviceSetup];

  if (v7)
  {
    uint64_t v8 = [v5 accountContext];

    if (v8)
    {
      id v9 = [v5 device];

      if (v9) {
        goto LABEL_10;
      }
      id v10 = (void *)MEMORY[0x230FBD990]();
      uint64_t v11 = self;
      id v12 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO)) {
        goto LABEL_9;
      }
      int v13 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v39 = v13;
      __int16 v14 = "%{public}@Device setup required, haven't resolved current device yet";
    }
    else
    {
      id v10 = (void *)MEMORY[0x230FBD990]();
      uint64_t v11 = self;
      id v12 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
LABEL_9:

        uint64_t v37 = 16;
        goto LABEL_10;
      }
      int v13 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v39 = v13;
      __int16 v14 = "%{public}@Device setup required, no active account";
    }
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, v14, buf, 0xCu);

    goto LABEL_9;
  }
LABEL_10:
  char v36 = 0;
  uint64_t v15 = [(HMDHomeManager *)self determineDataSyncSateForHH2:&v36 homeManagerDataSyncState:0 homeManagerStatus:&v37];
  if (v36)
  {
    char v16 = v37;
    uint64_t v17 = (void *)MEMORY[0x230FBD990](v15);
    __int16 v18 = self;
    __int16 v19 = HMFGetOSLogHandle();
    BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
    if ((v16 & 0x10) != 0)
    {
      if (v20)
      {
        id v22 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        __int16 v39 = v22;
        _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Suppressing busy status while device setup required", buf, 0xCu);
      }
    }
    else
    {
      if (v20)
      {
        uint64_t v21 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        __int16 v39 = v21;
        _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Busy, data sync in progress", buf, 0xCu);
      }
      v37 |= 1uLL;
    }
  }
  __int16 v23 = [v5 accountContext];

  if (!v23)
  {
    uint64_t v24 = (void *)MEMORY[0x230FBD990]();
    id v25 = self;
    BOOL v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      int v27 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v39 = v27;
      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@No account", buf, 0xCu);
    }
    v37 |= 0x20uLL;
  }
  id v28 = (void *)MEMORY[0x230FBD990]();
  __int16 v29 = self;
  id v30 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    __int16 v31 = HMFGetLogIdentifier();
    id v32 = [NSNumber numberWithUnsignedInteger:v37];
    [v5 isLoggedInToPrimaryAccount];
    uint64_t v33 = HMFBooleanToString();
    *(_DWORD *)long long buf = 138543874;
    __int16 v39 = v31;
    __int16 v40 = 2112;
    __int16 v41 = v32;
    __int16 v42 = 2112;
    __int16 v43 = v33;
    _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_INFO, "%{public}@status : %@, %@", buf, 0x20u);
  }
  unint64_t v34 = v37;

  return v34;
}

- (id)_statusPayloadForMessage:(id)a3
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v39 = 0;
  uint64_t v38 = [(HMDHomeManager *)self statusForMessage:v4];
  char v37 = 0;
  id v5 = (void *)MEMORY[0x230FBD990]([(HMDHomeManager *)self determineDataSyncSateForHH2:&v37 homeManagerDataSyncState:&v39 homeManagerStatus:&v38]);
  uint64_t v6 = self;
  int v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    id v9 = HMFBooleanToString();
    id v10 = HMHomeManagerDataSyncStateToString();
    uint64_t v11 = HMHomeManagerStatusToString();
    *(_DWORD *)long long buf = 138544130;
    __int16 v43 = v8;
    __int16 v44 = 2112;
    uint64_t v45 = v9;
    __int16 v46 = 2112;
    id v47 = v10;
    __int16 v48 = 2112;
    id v49 = v11;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@[CloudProgress: %@] [dataSyncState: %@] [HomeManager status : %@]", buf, 0x2Au);
  }
  id v12 = [(HMDHomeManager *)v6 multiUserStatusController];
  [v12 didUpdateDataSyncState:v39];

  if (enableRetailDemoSetup || [(HMDHomeManager *)v6 demoFinalized])
  {
    uint64_t v38 = 0;
    uint64_t v39 = 1;
  }
  if (isInternalBuild())
  {
    int v13 = [MEMORY[0x263F42608] sharedPreferences];
    __int16 v14 = [v13 preferenceForKey:@"HMDHomeManagerForceOverrideDataSyncStateAndStatus"];
    int v15 = [v14 BOOLValue];

    if (v15)
    {
      char v16 = [MEMORY[0x263F42608] sharedPreferences];
      uint64_t v17 = [v16 preferenceForKey:@"HMDHomeManagerDataSyncStateOverride"];
      __int16 v18 = [v17 numberValue];
      uint64_t v39 = [v18 unsignedIntegerValue];

      __int16 v19 = [MEMORY[0x263F42608] sharedPreferences];
      BOOL v20 = [v19 preferenceForKey:@"HMDHomeManagerStatusOverride"];
      uint64_t v21 = [v20 numberValue];
      uint64_t v38 = [v21 unsignedIntegerValue];
    }
  }
  id v22 = [(HMDHomeManager *)v6 metricsManager];
  __int16 v23 = [v22 deviceStateManager];
  [v23 updateWithDataSyncState:v39];

  uint64_t v24 = [(HMDHomeManager *)v6 metricsManager];
  id v25 = [v24 deviceStateManager];
  [v25 updateWithHomeManagerStatus:v38];

  BOOL v26 = [(HMDHomeManager *)v6 metricsManager];
  int v27 = [v26 deviceStateManager];
  id v28 = [(HMDHomeManager *)v6 hh2FrameworkSwitch];
  objc_msgSend(v27, "updateHH2SentinelZoneExists:", objc_msgSend(v28, "checkExistenceOfHH2SentinelZone"));

  v40[0] = *MEMORY[0x263F0C9D0];
  __int16 v29 = [NSNumber numberWithUnsignedInteger:v39];
  v41[0] = v29;
  v40[1] = *MEMORY[0x263F0CC50];
  id v30 = [NSNumber numberWithUnsignedInteger:v38];
  v41[1] = v30;
  v40[2] = @"kConfigGenerationCounterKey";
  __int16 v31 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[HMDHomeManager generationCounter](v6, "generationCounter"));
  v41[2] = v31;
  v40[3] = *MEMORY[0x263F0CB80];
  id v32 = NSNumber;
  uint64_t v33 = [(HMDHomeManager *)v6 multiUserStatusController];
  unint64_t v34 = objc_msgSend(v32, "numberWithInteger:", objc_msgSend(v33, "multiUserState"));
  v41[3] = v34;
  id v35 = [NSDictionary dictionaryWithObjects:v41 forKeys:v40 count:4];

  return v35;
}

- (void)_notifyClientsOfUpdatedStatus
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v3);

  id v4 = [(HMDHomeManager *)self uuid];
  [(HMDHomeManager *)self _updateGenerationCounterWithReason:@"DataSyncStatusUpdate" sourceUUID:v4 shouldNotifyClients:0];

  id v5 = objc_alloc(MEMORY[0x263F42568]);
  uint64_t v6 = *MEMORY[0x263F0CC58];
  int v7 = [(HMDHomeManager *)self messageDestination];
  uint64_t v8 = [(HMDHomeManager *)self _statusPayloadForMessage:0];
  id v9 = (void *)[v5 initWithName:v6 destination:v7 payload:v8];

  id v10 = (void *)MEMORY[0x230FBD990]();
  uint64_t v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = HMFGetLogIdentifier();
    __int16 v14 = [v9 messagePayload];
    int v17 = 138543618;
    __int16 v18 = v13;
    __int16 v19 = 2112;
    BOOL v20 = v14;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Notifying clients of updated status message payload: %@", (uint8_t *)&v17, 0x16u);
  }
  int v15 = [(HMDHomeManager *)v11 messageDispatcher];
  [v15 sendMessage:v9];

  char v16 = [(HMDHomeManager *)v11 notificationCenter];
  [v16 postNotificationName:@"HMDHomeManagerDataSyncInProgressChangedNotification" object:v11];
}

- (BOOL)areThereAnyTTSUSessionsOngoing
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  p_lock = &self->_lock;
  uint64_t v4 = os_unfair_lock_lock_with_options();
  id v5 = (void *)MEMORY[0x230FBD990](v4);
  uint64_t v6 = self;
  HMFGetOSLogHandle();
  int v7 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    id v9 = NSNumber;
    id v10 = [(HMDHomeManager *)v6 deviceSetupSessions];
    uint64_t v11 = objc_msgSend(v9, "numberWithUnsignedInteger:", objc_msgSend(v10, "count"));
    int v15 = 138543618;
    id v16 = v8;
    __int16 v17 = 2112;
    __int16 v18 = v11;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Ongoing TTSU sessions : %@", (uint8_t *)&v15, 0x16u);
  }
  id v12 = [(HMDHomeManager *)v6 deviceSetupSessions];
  char v13 = objc_msgSend(v12, "hmf_isEmpty");

  os_unfair_lock_unlock(p_lock);
  return v13 ^ 1;
}

- (void)_handleDeviceSetupSessionOpen:(id)a3
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  id v4 = a3;
  __int16 v46 = [v4 uuidForKey:*MEMORY[0x263F0C698]];
  uint64_t v5 = [v4 numberForKey:*MEMORY[0x263F0C6B0]];
  id v47 = (void *)v5;
  if (v46) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    int v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      __int16 v51 = v10;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Invalid message parameters", buf, 0xCu);
    }
    uint64_t v11 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v4 respondWithError:v11];
  }
  else
  {
    id v12 = [v4 activity];
    [(HMDHomeManager *)self setSetupActivity:v12];

    char v13 = (void *)MEMORY[0x230FBD990]();
    __int16 v14 = self;
    int v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v17 = HMFGetLogIdentifier();
      [(HMDHomeManager *)v14 setupStartTimestamp];
      *(_DWORD *)long long buf = 138543618;
      __int16 v51 = v17;
      __int16 v52 = 2048;
      uint64_t v53 = v18;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Noting setup start system time: %f", buf, 0x16u);
    }
    uint64_t v19 = [(HMDHomeManager *)v14 setupActivity];
    [v19 begin];

    BOOL v20 = [(HMDHomeManager *)v14 appleAccountManager];
    uint64_t v11 = [v20 device];

    uint64_t v21 = [(HMDHomeManager *)v14 setupActivity];
    v48[0] = @"currentHomeUUID";
    id v22 = [(HMDHomeManager *)v14 currentHomeUUID];
    __int16 v23 = HMDailyRotatedUUID();
    uint64_t v24 = [v23 UUIDString];
    id v25 = (void *)v24;
    BOOL v26 = @"nil current home UUID";
    if (v24) {
      BOOL v26 = (__CFString *)v24;
    }
    v49[0] = v26;
    v48[1] = @"productClass";
    int v27 = NSNumber;
    id v28 = [v11 productInfo];
    __int16 v29 = objc_msgSend(v27, "numberWithInteger:", objc_msgSend(v28, "productClass"));
    v49[1] = v29;
    v48[2] = @"productType";
    id v30 = [NSNumber numberWithLong:MGGetProductType()];
    void v49[2] = v30;
    id v31 = (id)[NSDictionary dictionaryWithObjects:v49 forKeys:v48 count:3];

    id v32 = [(HMDHomeManager *)v14 setupActivity];
    [v32 markWithReason:@"HMDHomeManager._handleDeviceSetupSessionOpen"];

    uint64_t v33 = [v47 integerValue];
    if (+[HMDDeviceSetupSession isRoleSupported:v33])
    {
      unint64_t v34 = [[HMDDeviceSetupSession alloc] initWithIdentifier:v46 role:v33 homeManager:v14];
      id v35 = [(HMDDeviceSetupSession *)v34 setupTrackingInfo];
      -[HMDHomeManager setSetupStartTimestamp:](v14, "setSetupStartTimestamp:", (double)(unint64_t)[v35 startTime]);

      [(HMDDeviceSetupSession *)v34 setDelegate:v14];
      os_unfair_lock_lock_with_options();
      char v36 = [(HMDHomeManager *)v14 deviceSetupSessions];
      [v36 addObject:v34];

      os_unfair_lock_unlock(&v14->_lock);
      char v37 = (void *)MEMORY[0x230FBD990]();
      uint64_t v38 = v14;
      uint64_t v39 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        __int16 v40 = HMFGetLogIdentifier();
        __int16 v41 = [(HMDDeviceSetupSession *)v34 identifier];
        *(_DWORD *)long long buf = 138543618;
        __int16 v51 = v40;
        __int16 v52 = 2112;
        uint64_t v53 = (uint64_t)v41;
        _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_INFO, "%{public}@New TTSU session created: [%@]", buf, 0x16u);
      }
      [v4 respondWithSuccess];
    }
    else
    {
      __int16 v42 = (void *)MEMORY[0x230FBD990]();
      __int16 v43 = v14;
      __int16 v44 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v45 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        __int16 v51 = v45;
        __int16 v52 = 2048;
        uint64_t v53 = v33;
        _os_log_impl(&dword_22F52A000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Unsupported role: %tu", buf, 0x16u);
      }
      unint64_t v34 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
      [v4 respondWithError:v34];
    }
  }
}

- (void)_handleDeviceSetupSessionClose:(id)a3
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  BOOL v6 = self;
  int v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = HMFGetLogIdentifier();
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Received HMDHomeManager close session message", (uint8_t *)&buf, 0xCu);
  }
  id v9 = [v4 uuidForKey:*MEMORY[0x263F0C698]];
  if (v9)
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v50 = 0x2020000000;
    char v51 = 0;
    id v10 = (void *)MEMORY[0x230FBD990]();
    uint64_t v11 = v6;
    HMFGetOSLogHandle();
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v13 = (id)objc_claimAutoreleasedReturnValue();
      __int16 v14 = [(HMDHomeManager *)v11 deviceSetupSessions];
      *(_DWORD *)__int16 v43 = 138543874;
      id v44 = v13;
      __int16 v45 = 2112;
      id v46 = v9;
      __int16 v47 = 2048;
      uint64_t v48 = [v14 count];
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@HMDHomeManager close session %@. Total current sessions %lu", v43, 0x20u);
    }
    int v15 = [(HMDHomeManager *)v11 deviceSetupSessions];
    uint64_t v35 = MEMORY[0x263EF8330];
    uint64_t v36 = 3221225472;
    char v37 = __49__HMDHomeManager__handleDeviceSetupSessionClose___block_invoke;
    uint64_t v38 = &unk_264A2BCF8;
    id v16 = v9;
    id v39 = v16;
    __int16 v40 = v11;
    id v17 = v4;
    id v41 = v17;
    p_long long buf = &buf;
    objc_msgSend(v15, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &v35);

    if (!*(unsigned char *)(*((void *)&buf + 1) + 24))
    {
      uint64_t v24 = (void *)MEMORY[0x230FBD990](v18, v19, v20, v21, v22, v23);
      id v25 = v11;
      HMFGetOSLogHandle();
      BOOL v26 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v27 = (id)objc_claimAutoreleasedReturnValue();
        id v28 = [(HMDHomeManager *)v25 deviceSetupSessions];
        uint64_t v29 = [v28 count];
        *(_DWORD *)__int16 v43 = 138543874;
        id v44 = v27;
        __int16 v45 = 2112;
        id v46 = v16;
        __int16 v47 = 2048;
        uint64_t v48 = v29;
        _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Didn't close session %@ due to session not found (already closed?). Total current sessions %lu", v43, 0x20u);
      }
      [v17 respondWithSuccess];
    }

    _Block_object_dispose(&buf, 8);
  }
  else
  {
    id v30 = (void *)MEMORY[0x230FBD990]();
    id v31 = v6;
    id v32 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = HMFGetLogIdentifier();
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v33;
      _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_ERROR, "%{public}@Received close session message without UUID. Respond with error.", (uint8_t *)&buf, 0xCu);
    }
    unint64_t v34 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v4 respondWithError:v34];
  }
}

void __49__HMDHomeManager__handleDeviceSetupSessionClose___block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v6 = a2;
  int v7 = [v6 identifier];
  int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    id v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = *(id *)(a1 + 40);
    uint64_t v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      id v13 = [v6 identifier];
      int v14 = 138543618;
      int v15 = v12;
      __int16 v16 = 2112;
      id v17 = v13;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Found close session: %@", (uint8_t *)&v14, 0x16u);
    }
    [v6 close:*(void *)(a1 + 48)];
    *a4 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
}

- (void)_handleRemoveAllHomeKitPairingIdentities:(id)a3
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  int v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v35 = v8;
    __int16 v36 = 2112;
    id v37 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Going to delete all the HomeKit pairing identities before TTSU: %@", buf, 0x16u);
  }
  id v9 = [MEMORY[0x263F35AD0] systemStore];
  if (!v9)
  {
    uint64_t v22 = (void *)MEMORY[0x230FBD990]();
    uint64_t v23 = v6;
    uint64_t v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      id v25 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v35 = v25;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Could not find key chain store instance.", buf, 0xCu);
    }
    uint64_t v20 = (void *)MEMORY[0x263F087E8];
    uint64_t v21 = 20;
    goto LABEL_13;
  }
  id v10 = [MEMORY[0x263EFB210] defaultStore];
  uint64_t v11 = objc_msgSend(v10, "aa_primaryAppleAccount");

  if (v11)
  {
    id v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = v6;
    int v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v15 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v35 = v15;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Cannot remove all the keys as the primary account is logged in.", buf, 0xCu);
    }
    __int16 v16 = (void *)MEMORY[0x230FBD990]();
    id v17 = v13;
    uint64_t v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v35 = v19;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_FAULT, "%{public}@Remove All HomeKit Pairing Identity was called with a logged in Account : 🤯", buf, 0xCu);
    }
    uint64_t v20 = (void *)MEMORY[0x263F087E8];
    uint64_t v21 = 10;
LABEL_13:
    id v26 = [v20 hmErrorWithCode:v21];
    [v4 respondWithError:v26];
    goto LABEL_14;
  }
  id v33 = 0;
  uint64_t v27 = [v9 removeControllerKeyPairLeaveTombstone:0 error:&v33];
  id v26 = v33;
  if (v27)
  {
    [v4 respondWithSuccess];
  }
  else
  {
    id v28 = (void *)MEMORY[0x230FBD990]();
    uint64_t v29 = v6;
    id v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      id v31 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v35 = v31;
      __int16 v36 = 2112;
      id v37 = v26;
      _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove all the HomeKit pairing identities : %@", buf, 0x16u);
    }
    id v32 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
    [v4 respondWithError:v32];
  }
LABEL_14:
}

- (void)removeAllHomeKitPairingIdentitiesAfterSignOut
{
  id v3 = [MEMORY[0x263F42568] messageWithName:@"removeAllHomeKitPairingIdentitiesDueToSignOut" messagePayload:MEMORY[0x263EFFA78]];
  [(HMDHomeManager *)self _handleRemoveAllHomeKitPairingIdentities:v3];
}

- (double)setupEndTimestamp
{
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  double setupEndTimestamp = self->_setupEndTimestamp;
  os_unfair_lock_unlock(p_lock);
  return setupEndTimestamp;
}

- (void)setSetupEndTimestamp:(double)a3
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)MEMORY[0x230FBD990](self, a2);
  id v6 = self;
  int v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = HMFGetLogIdentifier();
    int v12 = 138543618;
    id v13 = v8;
    __int16 v14 = 2048;
    double v15 = a3;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Saving current accessory setup end timestamp: %f", (uint8_t *)&v12, 0x16u);
  }
  id v9 = [(HMDHomeManager *)v6 userDefaults];
  id v10 = v9;
  if (fabs(a3) >= 2.22044605e-16)
  {
    uint64_t v11 = [NSNumber numberWithDouble:a3];
    [v10 setObject:v11 forKey:@"HMDCurrentAccessorySetupEndUptimeKey"];
  }
  else
  {
    [v9 removeObjectForKey:@"HMDCurrentAccessorySetupEndUptimeKey"];
  }

  os_unfair_lock_lock_with_options();
  v6->_double setupEndTimestamp = a3;
  os_unfair_lock_unlock(&v6->_lock);
}

- (double)setupStartTimestamp
{
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  double setupStartTimestamp = self->_setupStartTimestamp;
  os_unfair_lock_unlock(p_lock);
  return setupStartTimestamp;
}

- (void)setSetupStartTimestamp:(double)a3
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)MEMORY[0x230FBD990](self, a2);
  id v6 = self;
  int v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = HMFGetLogIdentifier();
    int v12 = 138543618;
    id v13 = v8;
    __int16 v14 = 2048;
    double v15 = a3;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Saving current accessory setup timestamp: %f", (uint8_t *)&v12, 0x16u);
  }
  id v9 = [(HMDHomeManager *)v6 userDefaults];
  id v10 = v9;
  if (fabs(a3) >= 2.22044605e-16)
  {
    uint64_t v11 = [NSNumber numberWithDouble:a3];
    [v10 setObject:v11 forKey:@"HMDCurrentAccessorySetupStartUptimeKey"];
  }
  else
  {
    [v9 removeObjectForKey:@"HMDCurrentAccessorySetupStartUptimeKey"];

    [(HMDHomeManager *)v6 setSetupEndTimestamp:0.0];
  }
  os_unfair_lock_lock_with_options();
  v6->_double setupStartTimestamp = a3;
  os_unfair_lock_unlock(&v6->_lock);
}

- (void)pingDevice:(id)a3 secure:(BOOL)a4 restrictToLocalNetwork:(BOOL)a5 completionHandler:(id)a6
{
  BOOL v7 = a5;
  id v10 = a3;
  id v11 = a6;
  int v12 = [HMDRemoteDeviceMessageDestination alloc];
  id v13 = [(HMDHomeManager *)self uuid];
  __int16 v14 = [(HMDRemoteDeviceMessageDestination *)v12 initWithTarget:v13 device:v10];

  if (a4)
  {
    if (v7) {
      uint64_t v15 = 8;
    }
    else {
      uint64_t v15 = -1;
    }
    uint64_t v16 = +[HMDRemoteMessage secureMessageWithName:@"kPingInternalRequestKey" qualityOfService:25 destination:v14 messagePayload:MEMORY[0x263EFFA78] restriction:v15];
  }
  else
  {
    id v17 = [v10 globalHandles];
    uint64_t v18 = [v17 count];

    if (v18 == 1)
    {
      uint64_t v19 = [v10 globalHandles];
      uint64_t v20 = [v19 firstObject];
      [(HMDRemoteDeviceMessageDestination *)v14 setPreferredHandle:v20];
    }
    if (v7) {
      uint64_t v21 = 8;
    }
    else {
      uint64_t v21 = -1;
    }
    uint64_t v16 = +[HMDRemoteMessage messageWithName:@"kPingInternalRequestKey" qualityOfService:25 destination:v14 messagePayload:MEMORY[0x263EFFA78] restriction:v21];
  }
  uint64_t v22 = (void *)v16;
  objc_initWeak(&location, self);
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 3221225472;
  v25[2] = __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke;
  v25[3] = &unk_264A2EAE0;
  objc_copyWeak(&v27, &location);
  id v23 = v11;
  id v26 = v23;
  [v22 setResponseHandler:v25];
  uint64_t v24 = [(HMDHomeManager *)self messageDispatcher];
  [v24 sendMessage:v22 completionHandler:0];

  objc_destroyWeak(&v27);
  objc_destroyWeak(&location);
}

void __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = WeakRetained;
  id v10 = HMFGetOSLogHandle();
  id v11 = v10;
  if (v5)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v22 = v12;
      __int16 v23 = 2112;
      id v24 = v5;
      id v13 = "%{public}@Failed to respond to ping with error: %@";
      __int16 v14 = v11;
      os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
      uint32_t v16 = 22;
LABEL_6:
      _os_log_impl(&dword_22F52A000, v14, v15, v13, buf, v16);
    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v12 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v22 = v12;
    id v13 = "%{public}@Successfully responded to ping";
    __int16 v14 = v11;
    os_log_type_t v15 = OS_LOG_TYPE_INFO;
    uint32_t v16 = 12;
    goto LABEL_6;
  }

  if (v9 && *(void *)(a1 + 32))
  {
    id v17 = [v9 workQueue];
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 3221225472;
    void v18[2] = __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke_1226;
    v18[3] = &unk_264A2F870;
    id v20 = *(id *)(a1 + 32);
    id v19 = v5;
    dispatch_async(v17, v18);
  }
}

uint64_t __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke_1226(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

- (void)_handlePing:(id)a3
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kIdentifierKey"];
  if (v5)
  {
    id v33 = v4;
    unint64_t v34 = self;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v6 = [(HMDHomeManager *)self accountRegistry];
    BOOL v7 = [v6 accounts];

    id obj = v7;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v43 objects:v52 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v36 = *(void *)v44;
      while (2)
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v44 != v36) {
            objc_enumerationMutation(obj);
          }
          id v11 = *(void **)(*((void *)&v43 + 1) + 8 * i);
          long long v39 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          int v12 = [v11 devices];
          uint64_t v13 = [v12 countByEnumeratingWithState:&v39 objects:v51 count:16];
          if (v13)
          {
            uint64_t v14 = v13;
            uint64_t v15 = *(void *)v40;
LABEL_9:
            uint64_t v16 = 0;
            while (1)
            {
              if (*(void *)v40 != v15) {
                objc_enumerationMutation(v12);
              }
              id v17 = *(void **)(*((void *)&v39 + 1) + 8 * v16);
              uint64_t v18 = [v17 identifier];
              char v19 = [v18 isEqual:v5];

              if (v19) {
                break;
              }
              if (v14 == ++v16)
              {
                uint64_t v14 = [v12 countByEnumeratingWithState:&v39 objects:v51 count:16];
                if (v14) {
                  goto LABEL_9;
                }
                goto LABEL_15;
              }
            }
            id v20 = v17;

            if (!v20) {
              continue;
            }

            id v4 = v33;
            if ([v33 BOOLForKey:*MEMORY[0x263F0CB78]])
            {
              uint64_t v29 = +[HMDSecureRemoteMessageTransport defaultTransport];
              id v30 = [v29 deviceMonitor];

              [v30 startMonitoringDevice:v20 withInitialReachability:0 forClient:v34];
            }
            uint64_t v31 = [v33 BOOLForKey:*MEMORY[0x263F0CC20]];
            uint64_t v32 = [v33 BOOLForKey:*MEMORY[0x263F0CB60]];
            v37[0] = MEMORY[0x263EF8330];
            v37[1] = 3221225472;
            v37[2] = __30__HMDHomeManager__handlePing___block_invoke;
            v37[3] = &unk_264A2F3E8;
            id v38 = v33;
            [(HMDHomeManager *)v34 pingDevice:v20 secure:v31 restrictToLocalNetwork:v32 completionHandler:v37];

            goto LABEL_29;
          }
LABEL_15:
        }
        uint64_t v9 = [obj countByEnumeratingWithState:&v43 objects:v52 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }

    uint64_t v21 = (void *)MEMORY[0x230FBD990]();
    uint64_t v22 = v34;
    __int16 v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      id v24 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v48 = v24;
      __int16 v49 = 2112;
      uint64_t v50 = v5;
      _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to find device with identifier: %@", buf, 0x16u);
    }
    id v20 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    id v4 = v33;
  }
  else
  {
    uint64_t v25 = (void *)MEMORY[0x230FBD990]();
    id v26 = self;
    id v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      id v28 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v48 = v28;
      _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@Message is missing device identifier", buf, 0xCu);
    }
    id v20 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
  }
  [v4 respondWithError:v20];
LABEL_29:
}

void __30__HMDHomeManager__handlePing___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = [*(id *)(a1 + 32) responseHandler];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) responseHandler];
    ((void (**)(void, id, void))v4)[2](v4, v5, 0);
  }
}

- (void)_handleRemoveAccount:(id)a3
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 messagePayload];
  id v6 = [v5 valueForKey:@"kIdentifierKey"];

  if (v6)
  {
    BOOL v7 = [v4 uuidForKey:@"kIdentifierKey"];
    if (v7)
    {
      uint64_t v67 = v4;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      uint64_t v8 = [(HMDHomeManager *)self accountRegistry];
      uint64_t v9 = [v8 accounts];

      uint64_t v10 = [v9 countByEnumeratingWithState:&v69 objects:v77 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)v70;
LABEL_5:
        uint64_t v13 = 0;
        while (1)
        {
          if (*(void *)v70 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void **)(*((void *)&v69 + 1) + 8 * v13);
          uint64_t v15 = [v14 identifier];
          uint64_t v16 = [v15 identifier];
          char v17 = objc_msgSend(v16, "hmf_isEqualToUUID:", v7);

          if (v17) {
            break;
          }
          if (v11 == ++v13)
          {
            uint64_t v11 = [v9 countByEnumeratingWithState:&v69 objects:v77 count:16];
            if (v11) {
              goto LABEL_5;
            }
            goto LABEL_11;
          }
        }
        id v25 = v14;

        if (!v25) {
          goto LABEL_24;
        }
        id v4 = v67;
        goto LABEL_19;
      }
LABEL_11:

LABEL_24:
      unint64_t v34 = (void *)MEMORY[0x230FBD990]();
      uint64_t v35 = self;
      uint64_t v36 = HMFGetOSLogHandle();
      id v4 = v67;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        id v37 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v74 = v37;
        __int16 v75 = 2112;
        __int16 v76 = v7;
        _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to find matching account with identifier: %@", buf, 0x16u);
      }
      id v25 = [v67 responseHandler];

      if (!v25) {
        goto LABEL_45;
      }
      id v38 = (void *)MEMORY[0x263F087E8];
      uint64_t v39 = 2;
    }
    else
    {
      long long v40 = (void *)MEMORY[0x230FBD990]();
      long long v41 = self;
      long long v42 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        long long v43 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v74 = v43;
        _os_log_impl(&dword_22F52A000, v42, OS_LOG_TYPE_ERROR, "%{public}@Message is missing account identifier", buf, 0xCu);
      }
      id v25 = [v4 responseHandler];

      if (!v25) {
        goto LABEL_45;
      }
      id v38 = (void *)MEMORY[0x263F087E8];
      uint64_t v39 = 3;
    }
    goto LABEL_32;
  }
  uint64_t v18 = [v4 messagePayload];
  uint64_t v19 = *MEMORY[0x263F0C9E0];
  id v20 = [v18 valueForKey:*MEMORY[0x263F0C9E0]];

  if (!v20)
  {
    long long v46 = (void *)MEMORY[0x230FBD990]();
    __int16 v47 = self;
    uint64_t v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      __int16 v49 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v74 = v49;
      uint64_t v50 = "%{public}@Message is missing account identifier";
LABEL_41:
      _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_ERROR, v50, buf, 0xCu);
    }
LABEL_42:

    uint64_t v55 = [v4 responseHandler];

    if (!v55)
    {
      id v25 = 0;
      goto LABEL_46;
    }
    BOOL v7 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    long long v44 = [v4 responseHandler];
    v44[2](v44, v7, 0);
    goto LABEL_44;
  }
  uint64_t v21 = [v4 stringForKey:v19];
  if (!v21)
  {
    long long v46 = (void *)MEMORY[0x230FBD990]();
    __int16 v47 = self;
    uint64_t v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      __int16 v49 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v74 = v49;
      uint64_t v50 = "%{public}@Message is missing account handle";
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  BOOL v7 = (void (**)(void, void, void))v21;
  uint64_t v22 = +[HMDAccountHandle accountHandleForDestination:v21];
  if (!v22)
  {
    BOOL v56 = (void *)MEMORY[0x230FBD990]();
    long long v57 = self;
    id v58 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      uint64_t v59 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v74 = v59;
      __int16 v75 = 2112;
      __int16 v76 = v7;
      _os_log_impl(&dword_22F52A000, v58, OS_LOG_TYPE_ERROR, "%{public}@Invalid account handle: %@", buf, 0x16u);
    }
    id v25 = [v4 responseHandler];

    if (!v25) {
      goto LABEL_45;
    }
    id v38 = (void *)MEMORY[0x263F087E8];
    uint64_t v39 = 19;
LABEL_32:
    long long v44 = [v38 hmErrorWithCode:v39];
    long long v45 = [v4 responseHandler];
    v45[2](v45, v44, 0);

LABEL_44:
    id v25 = 0;
    goto LABEL_45;
  }
  __int16 v23 = (void *)v22;
  char v68 = 0;
  id v24 = +[HMDAccountRegistry sharedRegistry];
  id v25 = [v24 accountForHandle:v23 exists:&v68];

  if (!v68)
  {
    uint64_t v60 = (void *)MEMORY[0x230FBD990]();
    uint64_t v61 = self;
    __int16 v62 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      uint64_t v63 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v74 = v63;
      __int16 v75 = 2112;
      __int16 v76 = v23;
      _os_log_impl(&dword_22F52A000, v62, OS_LOG_TYPE_ERROR, "%{public}@Failed to find account with handle: %@", buf, 0x16u);
    }
    uint64_t v64 = [v4 responseHandler];

    if (v64)
    {
      uint64_t v65 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      __int16 v66 = [v4 responseHandler];
      ((void (**)(void, void *, void))v66)[2](v66, v65, 0);
    }
    goto LABEL_45;
  }

LABEL_19:
  int v26 = [v25 isCurrentAccount];
  id v27 = (void *)MEMORY[0x230FBD990]();
  id v28 = self;
  uint64_t v29 = HMFGetOSLogHandle();
  id v30 = v29;
  if (v26)
  {
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v74 = v31;
      _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Cannot remove current account", buf, 0xCu);
    }
    uint64_t v32 = [v4 responseHandler];

    if (v32)
    {
      BOOL v7 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
      id v33 = [v4 responseHandler];
      v33[2](v33, v7, 0);

LABEL_45:
    }
  }
  else
  {
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      char v51 = HMFGetLogIdentifier();
      uint64_t v52 = [v25 shortDescription];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v74 = v51;
      __int16 v75 = 2112;
      __int16 v76 = v52;
      _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_DEFAULT, "%{public}@Removing account: %@", buf, 0x16u);
    }
    uint64_t v53 = [(HMDHomeManager *)v28 remoteAccountManager];
    [v53 removeAccount:v25];

    uint64_t v54 = [v4 responseHandler];

    if (v54)
    {
      BOOL v7 = [v4 responseHandler];
      v7[2](v7, 0, 0);
      goto LABEL_45;
    }
  }
LABEL_46:
}

- (void)_handleResolveAccount:(id)a3
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 stringForKey:*MEMORY[0x263F0C9E0]];
  if (v5)
  {
    id v6 = +[HMDAccountHandle accountHandleForDestination:v5];
    if (v6)
    {
      objc_initWeak((id *)location, self);
      BOOL v7 = +[HMDAccountRegistry sharedRegistry];
      v20[0] = MEMORY[0x263EF8330];
      v20[1] = 3221225472;
      v20[2] = __40__HMDHomeManager__handleResolveAccount___block_invoke;
      v20[3] = &unk_264A2BCD0;
      objc_copyWeak(&v22, (id *)location);
      id v21 = v4;
      [v7 _resolveAccountForHandle:v6 completionHandler:v20];

      objc_destroyWeak(&v22);
      objc_destroyWeak((id *)location);
    }
    else
    {
      uint64_t v14 = (void *)MEMORY[0x230FBD990]();
      uint64_t v15 = self;
      uint64_t v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        char v17 = HMFGetLogIdentifier();
        *(_DWORD *)id location = 138543618;
        *(void *)&location[4] = v17;
        __int16 v24 = 2112;
        id v25 = v5;
        _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Invalid account handle: %@", location, 0x16u);
      }
      id v6 = [v4 responseHandler];

      if (v6)
      {
        uint64_t v18 = [MEMORY[0x263F087E8] hmErrorWithCode:19];
        uint64_t v19 = [v4 responseHandler];
        ((void (**)(void, void *, void))v19)[2](v19, v18, 0);

        id v6 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v8 = (void *)MEMORY[0x230FBD990]();
  uint64_t v9 = self;
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = HMFGetLogIdentifier();
    *(_DWORD *)id location = 138543362;
    *(void *)&location[4] = v11;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Message is missing account handle", location, 0xCu);
  }
  uint64_t v12 = [v4 responseHandler];

  if (v12)
  {
    id v6 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    uint64_t v13 = [v4 responseHandler];
    ((void (**)(void, void *, void))v13)[2](v13, v6, 0);

LABEL_12:
  }
}

void __40__HMDHomeManager__handleResolveAccount___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = WeakRetained;
  uint64_t v10 = HMFGetOSLogHandle();
  uint64_t v11 = v10;
  if (v5)
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    uint64_t v12 = HMFGetLogIdentifier();
    uint64_t v13 = [v5 shortDescription];
    int v16 = 138543618;
    char v17 = v12;
    __int16 v18 = 2112;
    id v19 = v13;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Resolved account: %@", (uint8_t *)&v16, 0x16u);
  }
  else
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    uint64_t v12 = HMFGetLogIdentifier();
    int v16 = 138543618;
    char v17 = v12;
    __int16 v18 = 2112;
    id v19 = v6;
    _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_ERROR, "%{public}@Failed to resolved account with error: %@", (uint8_t *)&v16, 0x16u);
  }

LABEL_7:
  uint64_t v14 = [*(id *)(a1 + 32) responseHandler];

  if (v14)
  {
    uint64_t v15 = [*(id *)(a1 + 32) responseHandler];
    ((void (**)(void, id, void))v15)[2](v15, v6, 0);
  }
}

- (void)_removeCurrentResidentDeviceFromHomes:(id)a3
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = +[HMDDeviceCapabilities deviceCapabilities];
  int v6 = [v5 isResidentCapable];

  if (v6)
  {
    BOOL v7 = [(HMDHomeManager *)self appleAccountManager];
    id v8 = [v7 device];

    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v21 = v4;
    id v9 = v4;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v26 objects:v31 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v27 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void **)(*((void *)&v26 + 1) + 8 * i);
          if (v8)
          {
LABEL_8:
            if ([v14 isOwnerUser]) {
              [v14 removeResidentCapableDevice:v8];
            }
          }
          else
          {
            long long v24 = 0u;
            long long v25 = 0u;
            long long v22 = 0u;
            long long v23 = 0u;
            uint64_t v15 = [v14 residentCapableDevices];
            uint64_t v16 = [v15 countByEnumeratingWithState:&v22 objects:v30 count:16];
            if (v16)
            {
              uint64_t v17 = v16;
              uint64_t v18 = *(void *)v23;
LABEL_12:
              uint64_t v19 = 0;
              while (1)
              {
                if (*(void *)v23 != v18) {
                  objc_enumerationMutation(v15);
                }
                uint64_t v20 = *(void **)(*((void *)&v22 + 1) + 8 * v19);
                if ([v20 isCurrentDevice]) {
                  break;
                }
                if (v17 == ++v19)
                {
                  uint64_t v17 = [v15 countByEnumeratingWithState:&v22 objects:v30 count:16];
                  if (v17) {
                    goto LABEL_12;
                  }
                  goto LABEL_18;
                }
              }
              id v8 = v20;

              if (v8) {
                goto LABEL_8;
              }
            }
            else
            {
LABEL_18:

              id v8 = 0;
            }
          }
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v26 objects:v31 count:16];
      }
      while (v11);
    }

    id v4 = v21;
  }
}

- (void)_addCurrentResidentDeviceToHomes:(id)a3
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([(HMDHomeManager *)self isResidentEnabled])
  {
    id v5 = [(HMDHomeManager *)self appleAccountManager];
    int v6 = [v5 device];

    BOOL v7 = [(HMDHomeManager *)self capabilitiesController];
    id v8 = [v7 currentResidentCapabilities];

    if (v8)
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      id v9 = v4;
      uint64_t v10 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)v19;
        do
        {
          for (uint64_t i = 0; i != v11; ++i)
          {
            if (*(void *)v19 != v12) {
              objc_enumerationMutation(v9);
            }
            uint64_t v14 = *(void **)(*((void *)&v18 + 1) + 8 * i);
            if (objc_msgSend(v14, "isOwnerUser", (void)v18)
              && [v14 hasReachableAccessories])
            {
              [v14 addResidentCapableDevice:v6];
            }
          }
          uint64_t v11 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      long long v24 = v17;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Not adding ourselves as a resident as we are disabled as a resident", buf, 0xCu);
    }
  }
}

- (void)handleHomeCurrentDeviceResidentEligibleNotification:(id)a3
{
  id v4 = a3;
  id v5 = +[HMDDeviceCapabilities deviceCapabilities];
  int v6 = [v5 isResidentCapable];

  if (v6)
  {
    BOOL v7 = [v4 object];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v8 = v7;
    }
    else {
      id v8 = 0;
    }
    id v9 = v8;

    if ([v9 hasReachableAccessories])
    {
      uint64_t v10 = [(HMDHomeManager *)self workQueue];
      v11[0] = MEMORY[0x263EF8330];
      v11[1] = 3221225472;
      v11[2] = __70__HMDHomeManager_handleHomeCurrentDeviceResidentEligibleNotification___block_invoke;
      v11[3] = &unk_264A2F820;
      void v11[4] = self;
      id v12 = v9;
      dispatch_async(v10, v11);
    }
  }
}

void __70__HMDHomeManager_handleHomeCurrentDeviceResidentEligibleNotification___block_invoke(uint64_t a1)
{
  v3[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = *(void *)(a1 + 40);
  uint64_t v2 = [MEMORY[0x263EFF8C0] arrayWithObjects:v3 count:1];
  [v1 _addCurrentResidentDeviceToHomes:v2];
}

- (void)_updateResidentEnabledOnThisDevice:(BOOL)a3 forceNotify:(BOOL)a4 message:(id)a5
{
  BOOL v5 = a4;
  BOOL v6 = a3;
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v8 = a5;
  if (![(HMDHomeManager *)self isResidentCapable])
  {
    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    uint64_t v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
LABEL_15:

      uint64_t v14 = [(HMDHomeManager *)v16 homes];
      [(HMDHomeManager *)v16 _removeCurrentResidentDeviceFromHomes:v14];
      goto LABEL_16;
    }
    long long v18 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v35 = v18;
    long long v19 = "%{public}@Not resident capable, removing ourselves as a resident from all homes";
    long long v20 = v17;
    os_log_type_t v21 = OS_LOG_TYPE_INFO;
LABEL_14:
    _os_log_impl(&dword_22F52A000, v20, v21, v19, buf, 0xCu);

    goto LABEL_15;
  }
  uint64_t v9 = [(HMDHomeManager *)self residentEnabledState];
  if (!v6)
  {
    if (v9 != 1)
    {
      BOOL v5 = 1;
      uint64_t v9 = [(HMDHomeManager *)self setResidentEnabledState:1];
    }
    uint64_t v15 = (void *)MEMORY[0x230FBD990](v9);
    uint64_t v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    long long v18 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v35 = v18;
    long long v19 = "%{public}@Disabled as a resident device, removing ourselves as a resident from all homes";
    long long v20 = v17;
    os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_14;
  }
  if (v9 != 2)
  {
    uint64_t v9 = [(HMDHomeManager *)self setResidentEnabledState:2];
    BOOL v5 = 1;
  }
  uint64_t v10 = (void *)MEMORY[0x230FBD990](v9);
  uint64_t v11 = self;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v35 = v13;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Enabled as a resident device, adding ourselves as a resident to all homes", buf, 0xCu);
  }
  uint64_t v14 = [(HMDHomeManager *)v11 homes];
  [(HMDHomeManager *)v11 _addCurrentResidentDeviceToHomes:v14];
LABEL_16:

  if (v8 || v5)
  {
    uint64_t v32 = @"kResidentEnabledKey";
    long long v22 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"));
    id v33 = v22;
    long long v23 = [NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];

    long long v24 = (void *)MEMORY[0x263F42568];
    uint64_t v25 = [v8 identifier];
    long long v26 = [v24 entitledMessageWithName:@"kResidentEnabledForThisDeviceUpdatedNotificationKey" identifier:v25 messagePayload:v23];

    long long v27 = [(HMDHomeManager *)self messageDispatcher];
    long long v28 = [(HMDHomeManager *)self uuid];
    v30[0] = MEMORY[0x263EF8330];
    v30[1] = 3221225472;
    v30[2] = __73__HMDHomeManager__updateResidentEnabledOnThisDevice_forceNotify_message___block_invoke;
    v30[3] = &unk_264A2F7F8;
    id v31 = v8;
    [v27 sendMessage:v26 target:v28 andInvokeCompletionHandler:v30];

    long long v29 = [(HMDHomeManager *)self notificationCenter];
    [v29 postNotificationName:@"HMDHomeManagerResidentEnabledChangedNotification" object:self userInfo:v23];
  }
}

void __73__HMDHomeManager__updateResidentEnabledOnThisDevice_forceNotify_message___block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) responseHandler];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) responseHandler];
    (*((void (**)(id, void, void))v3 + 2))(v3, 0, 0);
  }
}

- (void)_handleEnableResidentForThisDeviceRequest:(id)a3
{
  id v4 = a3;
  char v9 = 0;
  uint64_t v5 = [v4 BOOLForKey:@"kResidentEnabledKey" keyPresent:&v9];
  if (v9)
  {
    [(HMDHomeManager *)self _updateResidentEnabledOnThisDevice:v5 forceNotify:0 message:v4];
  }
  else
  {
    BOOL v6 = [v4 responseHandler];

    if (v6)
    {
      BOOL v7 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      id v8 = [v4 responseHandler];
      ((void (**)(void, void *, void))v8)[2](v8, v7, 0);
    }
  }
}

- (void)notifyClientsResidentCapable:(BOOL)a3
{
  BOOL v3 = a3;
  v12[1] = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)MEMORY[0x263F42568];
  uint64_t v11 = @"kResidentCapableDeviceKey";
  BOOL v6 = objc_msgSend(NSNumber, "numberWithBool:");
  v12[0] = v6;
  BOOL v7 = [NSDictionary dictionaryWithObjects:v12 forKeys:&v11 count:1];
  id v8 = [v5 entitledMessageWithName:@"kResidentDeviceCapableUpdatedNotificationKey" messagePayload:v7];

  char v9 = [(HMDHomeManager *)self messageDispatcher];
  uint64_t v10 = [(HMDHomeManager *)self uuid];
  [v9 sendMessage:v8 target:v10 andInvokeCompletionHandler:0];

  if (v3 && [(HMDHomeManager *)self isResidentEnabled]) {
    [(HMDHomeManager *)self _updateResidentEnabledOnThisDevice:1 forceNotify:1 message:0];
  }
}

- (BOOL)isResidentEnabled
{
  BOOL v3 = [(HMDHomeManager *)self isResidentCapable];
  if (v3) {
    LOBYTE(v3) = [(HMDHomeManager *)self residentEnabledState] == 2;
  }
  return v3;
}

- (BOOL)isResidentCapable
{
  uint64_t v2 = +[HMDDeviceCapabilities deviceCapabilities];
  char v3 = [v2 isResidentCapable];

  return v3;
}

- (void)processAppDataModelRemove:(id)a3 message:(id)a4
{
  id v5 = a4;
  [(HMDHomeManager *)self setAppData:0];
  [v5 respondWithPayload:0];
}

- (void)processAppDataModelUpdate:(id)a3 message:(id)a4
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self appData];

  if (v8)
  {
    char v9 = [(HMDHomeManager *)self appData];
    [v9 updateWithModel:v6];
  }
  else
  {
    uint64_t v10 = [HMDApplicationData alloc];
    uint64_t v11 = [v6 appDataDictionary];
    id v12 = [(HMDHomeManager *)self uuid];
    uint64_t v13 = [(HMDApplicationData *)v10 initWithDictionary:v11 parentUUID:v12];
    [(HMDHomeManager *)self setAppData:v13];

    uint64_t v14 = (void *)MEMORY[0x230FBD990]();
    uint64_t v15 = self;
    uint64_t v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      long long v18 = [v6 appDataDictionary];
      int v20 = 138543618;
      os_log_type_t v21 = v17;
      __int16 v22 = 2112;
      long long v23 = v18;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Updating the application data : %@", (uint8_t *)&v20, 0x16u);
    }
  }
  long long v19 = [v7 transactionResult];
  [v19 markChanged];
  [v7 respondWithPayload:0];
  logAndPostNotification(@"HMDHomeManagerDidUpdateApplicationData", self, 0);
}

- (void)_setAppDataWithMessage:(id)a3
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x263EFF9A0];
  id v6 = [v4 messagePayload];
  id v7 = objc_msgSend(v5, "dictionaryWithCapacity:", objc_msgSend(v6, "count"));

  id v8 = @"com.apple.homekit-entitledclient.identifer";
  char v9 = [v4 dictionaryForKey:@"kAppDataInformationKey"];
  uint64_t v10 = [(HMDHomeManager *)self appData];
  uint64_t v11 = (HMDApplicationData *)[v10 copy];
  id v12 = (void *)MEMORY[0x230FBD990]();
  uint64_t v13 = self;
  uint64_t v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = HMFGetLogIdentifier();
    int v24 = 138543618;
    uint64_t v25 = v15;
    __int16 v26 = 2112;
    long long v27 = v9;
    _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Client needs to set home manager appData to %@", (uint8_t *)&v24, 0x16u);
  }
  if (v9)
  {
    if (!v11)
    {
      uint64_t v16 = [HMDApplicationData alloc];
      uint64_t v17 = [(HMDHomeManager *)v13 uuid];
      uint64_t v11 = [(HMDApplicationData *)v16 initWithParentUUID:v17];
    }
    [(HMDApplicationData *)v11 setApplicationData:v9 forIdentifier:@"com.apple.homekit-entitledclient.identifer"];
    long long v18 = [(HMDApplicationData *)v11 modelObjectWithChangeType:1];
    long long v19 = v18;
    if (!v10) {
      [v18 setObjectChangeType:1];
    }
    [v7 setObject:v9 forKey:@"kAppDataInformationKey"];
    if (!v19) {
      goto LABEL_13;
    }
  }
  else
  {
    [(HMDApplicationData *)v11 removeApplicationDataForIdentifier:@"com.apple.homekit-entitledclient.identifer"];
    if (!v11
      || ([(HMDApplicationData *)v11 modelObjectWithChangeType:1],
          (long long v19 = objc_claimAutoreleasedReturnValue()) == 0))
    {
LABEL_13:
      [v4 respondWithPayload:0];
      goto LABEL_14;
    }
  }
  int v20 = [(HMDHomeManager *)v13 backingStore];
  os_log_type_t v21 = [v4 name];
  __int16 v22 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
  long long v23 = [v20 transaction:v21 options:v22];

  [v23 add:v19 withMessage:v4];
  [v23 run];

LABEL_14:
}

- (void)setAppDataWithMessage:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __40__HMDHomeManager_setAppDataWithMessage___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __40__HMDHomeManager_setAppDataWithMessage___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setAppDataWithMessage:*(void *)(a1 + 40)];
}

- (void)_handleSetAppData:(id)a3
{
  id v4 = a3;
  if (!-[HMDHomeManager _redirectAppDataRequestToResidentWithMessage:](self, "_redirectAppDataRequestToResidentWithMessage:"))[(HMDHomeManager *)self _setAppDataWithMessage:v4]; {
}
  }

- (BOOL)_redirectAppDataRequestToResidentWithMessage:(id)a3
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = [(HMDHomeManager *)self primaryHomeUUID];

  if (v6)
  {
    id v7 = [(HMDHomeManager *)self primaryHomeUUID];
    id v8 = [(HMDHomeManager *)self _homeWithUUID:v7];

    if (v8)
    {
      if ([v8 isOwnerUser])
      {
        char v9 = (void *)[v4 mutableCopy];
        [v9 setName:@"HMDHomeSetHomeManagerAppData"];
        uint64_t v34 = MEMORY[0x263EF8330];
        uint64_t v35 = 3221225472;
        uint64_t v36 = __63__HMDHomeManager__redirectAppDataRequestToResidentWithMessage___block_invoke;
        id v37 = &unk_264A2D870;
        id v38 = self;
        id v39 = v4;
        [v9 setResponseHandler:&v34];
        uint64_t v10 = [HMDRemoteHomeMessageDestination alloc];
        uint64_t v11 = objc_msgSend(v8, "uuid", v34, v35, v36, v37, v38);
        id v12 = [v8 uuid];
        uint64_t v13 = [(HMDRemoteHomeMessageDestination *)v10 initWithTarget:v11 homeUUID:v12];

        uint64_t v14 = (void *)MEMORY[0x230FBD990]([v9 setDestination:v13]);
        uint64_t v15 = self;
        uint64_t v16 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          uint64_t v17 = HMFGetLogIdentifier();
          long long v18 = [v8 shortDescription];
          long long v19 = [v9 shortDescription];
          *(_DWORD *)long long buf = 138543874;
          long long v41 = v17;
          __int16 v42 = 2112;
          long long v43 = v18;
          __int16 v44 = 2112;
          long long v45 = v19;
          _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Redirecting app data request to home %@ with message %@", buf, 0x20u);
        }
        int v20 = [(HMDHomeManager *)v15 messageDispatcher];
        [v20 sendMessage:v9];

        BOOL v21 = 1;
        goto LABEL_16;
      }
      __int16 v26 = (void *)MEMORY[0x230FBD990]();
      long long v27 = self;
      uint64_t v28 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        long long v29 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v41 = v29;
        id v30 = "%{public}@Not redirecting app data request, we are not owners in the primary home";
        id v31 = v28;
        os_log_type_t v32 = OS_LOG_TYPE_INFO;
        goto LABEL_14;
      }
    }
    else
    {
      __int16 v26 = (void *)MEMORY[0x230FBD990]();
      long long v27 = self;
      uint64_t v28 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        long long v29 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v41 = v29;
        id v30 = "%{public}@Not redirecting app data request, unable to find primary home";
        id v31 = v28;
        os_log_type_t v32 = OS_LOG_TYPE_ERROR;
LABEL_14:
        _os_log_impl(&dword_22F52A000, v31, v32, v30, buf, 0xCu);
      }
    }

    BOOL v21 = 0;
LABEL_16:

    goto LABEL_17;
  }
  __int16 v22 = (void *)MEMORY[0x230FBD990]();
  long long v23 = self;
  int v24 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    uint64_t v25 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v41 = v25;
    _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Not redirecting app data request, no primary home", buf, 0xCu);
  }
  BOOL v21 = 0;
LABEL_17:

  return v21;
}

void __63__HMDHomeManager__redirectAppDataRequestToResidentWithMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = v5;
    id v8 = [v7 domain];
    if ([v8 isEqualToString:*MEMORY[0x263F0C710]])
    {
      if ([v7 code] == 23)
      {

LABEL_17:
        __int16 v26 = (void *)MEMORY[0x230FBD990]();
        id v27 = *(id *)(a1 + 32);
        uint64_t v28 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          long long v29 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v36 = v29;
          __int16 v37 = 2112;
          id v38 = v7;
          _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@App data request redirect request failed, handling locally: %@", buf, 0x16u);
        }
        [*(id *)(a1 + 32) setAppDataWithMessage:*(void *)(a1 + 40)];
        goto LABEL_20;
      }
      uint64_t v25 = [v7 code];

      if (v25 == 8) {
        goto LABEL_17;
      }
    }
    else
    {
    }
    id v18 = v7;
    long long v19 = [v18 domain];
    if ([v19 isEqualToString:*MEMORY[0x263F41FD8]])
    {
      uint64_t v20 = [v18 code];

      if (v20 == 14) {
        goto LABEL_17;
      }
    }
    else
    {
    }
    BOOL v21 = (void *)MEMORY[0x230FBD990]();
    id v22 = *(id *)(a1 + 32);
    long long v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      int v24 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v36 = v24;
      __int16 v37 = 2112;
      id v38 = v18;
      _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@App data request redirect request failed: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 40) respondWithError:v18];
  }
  else
  {
    char v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = *(id *)(a1 + 32);
    uint64_t v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v36 = v12;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@App data redirect request succeeded", buf, 0xCu);
    }
    uint64_t v13 = [*(id *)(a1 + 32) backingStore];
    uint64_t v14 = [v13 context];

    v30[0] = MEMORY[0x263EF8330];
    v30[1] = 3221225472;
    v30[2] = __63__HMDHomeManager__redirectAppDataRequestToResidentWithMessage___block_invoke_1223;
    v30[3] = &unk_264A2E610;
    id v31 = v14;
    id v15 = *(id *)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 32);
    id v32 = v15;
    uint64_t v33 = v16;
    id v34 = v6;
    id v17 = v14;
    [v17 performBlock:v30];
  }
LABEL_20:
}

void __63__HMDHomeManager__redirectAppDataRequestToResidentWithMessage___block_invoke_1223(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) findHomeManagerWithError:0];
  if (!v2) {
    _HMFPreconditionFailure();
  }
  char v3 = (void *)v2;
  id v4 = [*(id *)(a1 + 40) dictionaryForKey:@"kAppDataInformationKey"];
  id v5 = [v3 appDataDictionary];
  char v6 = HMFEqualObjects();

  if ((v6 & 1) == 0)
  {
    [v3 setAppDataDictionary:v4];
    id v7 = [*(id *)(a1 + 32) managedObjectContext];
    id v14 = 0;
    char v8 = objc_msgSend(v7, "hmd_saveWithTransactionAuthor:error:", 11, &v14);
    id v9 = v14;

    if ((v8 & 1) == 0)
    {
      id v10 = (void *)MEMORY[0x230FBD990]();
      id v11 = *(id *)(a1 + 48);
      id v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v16 = v13;
        __int16 v17 = 2112;
        id v18 = v9;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to save local HMDHomeManager.appDataDictionary: %@", buf, 0x16u);
      }
      [*(id *)(a1 + 32) reset];
    }
  }
  [*(id *)(a1 + 40) respondWithPayload:*(void *)(a1 + 56)];
}

- (void)_teardownRemoteAccessForHomeCommon:(id)a3 isCompanion:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = [(HMDHomeManager *)self _homeWithUUID:v6];
  char v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    id v11 = [v6 UUIDString];
    *(_DWORD *)long long buf = 138543618;
    id v34 = v10;
    __int16 v35 = 2112;
    uint64_t v36 = v11;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Tearing down any previously setup remote access for home: %@", buf, 0x16u);
  }
  id v12 = [(HMDHomeManager *)self messageDispatcher];
  uint64_t v13 = v12;
  if (v4) {
    [v12 setCompanionDevice:0 forHome:v7];
  }
  else {
    [v12 setRemoteAccessDevice:0 forHome:v7];
  }

  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v14 = [(HMDHomeManager *)self pendingRemoteSessions];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v29;
LABEL_8:
    uint64_t v18 = 0;
    while (1)
    {
      if (*(void *)v29 != v17) {
        objc_enumerationMutation(v14);
      }
      uint64_t v19 = *(void **)(*((void *)&v28 + 1) + 8 * v18);
      uint64_t v20 = [(HMDHomeManager *)self pendingRemoteSessions];
      BOOL v21 = [v20 objectForKeyedSubscript:v19];

      if ([v21 isEqual:v6]) {
        break;
      }

      if (v16 == ++v18)
      {
        uint64_t v16 = [v14 countByEnumeratingWithState:&v28 objects:v32 count:16];
        if (v16) {
          goto LABEL_8;
        }
        goto LABEL_14;
      }
    }
    id v22 = v19;

    if (!v22) {
      goto LABEL_20;
    }
    long long v23 = (void *)MEMORY[0x230FBD990]();
    int v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      __int16 v26 = [v22 UUIDString];
      *(_DWORD *)long long buf = 138543618;
      id v34 = v25;
      __int16 v35 = 2112;
      uint64_t v36 = v26;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Clearing pending remote session with identifier %@", buf, 0x16u);
    }
    id v27 = [(HMDHomeManager *)self pendingRemoteSessions];
    [v27 removeObjectForKey:v22];
  }
  else
  {
LABEL_14:
    id v22 = v14;
  }

LABEL_20:
}

- (void)_teardownRemoteAccessForHomeThroughCompanion:(id)a3
{
  id v3 = a3;
  isWatch();
}

- (void)_teardownRemoteAccessForHome:(id)a3
{
  id v7 = a3;
  BOOL v4 = -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:");
  id v5 = [v4 residentDeviceManager];
  char v6 = [v5 isResidentAvailable];

  if ((v6 & 1) == 0) {
    [(HMDHomeManager *)self _teardownRemoteAccessForHomeCommon:v7 isCompanion:0];
  }
}

- (void)teardownRemoteAccessForHome:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __46__HMDHomeManager_teardownRemoteAccessForHome___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __46__HMDHomeManager_teardownRemoteAccessForHome___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _teardownRemoteAccessForHome:*(void *)(a1 + 40)];
}

- (void)addIssuerKeyToMessagePayload:(id)a3 invitation:(id)a4 completion:(id)a5
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (_os_feature_enabled_impl())
  {
    id v11 = [MEMORY[0x263F42530] internalOnlyInitializer];
    id v12 = (void *)MEMORY[0x230FBD990]();
    uint64_t v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = HMFGetLogIdentifier();
      uint64_t v16 = [v11 UUID];
      uint64_t v17 = [v9 homeUUID];
      *(_DWORD *)long long buf = 138543874;
      long long v30 = v15;
      __int16 v31 = 2112;
      id v32 = v16;
      __int16 v33 = 2112;
      id v34 = v17;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Creating ACWG Issuer key for newly accepted shared home: %@", buf, 0x20u);
    }
    uint64_t v18 = +[HMDCoreData sharedInstance];
    uint64_t v19 = [v9 homeUUID];
    uint64_t v20 = [v18 contextWithHomeUUID:v19];

    BOOL v21 = +[HMDACWGKeyManager shared];
    id v22 = [v9 homeUUID];
    v24[0] = MEMORY[0x263EF8330];
    v24[1] = 3221225472;
    v24[2] = __69__HMDHomeManager_addIssuerKeyToMessagePayload_invitation_completion___block_invoke;
    v24[3] = &unk_264A2BCA8;
    void v24[4] = v13;
    id v25 = v11;
    id v26 = v9;
    id v28 = v10;
    id v27 = v8;
    id v23 = v11;
    [v21 getOrCreateIssuerKeyAndSaveToSharedUserReverseShareWithHomeUUID:v22 context:v20 flow:v23 completionHandler:v24];
  }
  else
  {
    (*((void (**)(id, void))v10 + 2))(v10, 0);
  }
}

void __69__HMDHomeManager_addIssuerKeyToMessagePayload_invitation_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = +[HMDNIST256Utilities publicKeyExternalRepresentationFromKeyPairExternalRepresentation:v5];
    id v8 = (void *)MEMORY[0x230FBD990]([*(id *)(a1 + 56) setObject:v7 forKeyedSubscript:@"HMDIssuerPublicKeyExternalRepresentationKey"]);
    id v9 = *(id *)(a1 + 32);
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = HMFGetLogIdentifier();
      id v12 = [*(id *)(a1 + 40) UUID];
      int v20 = 138543874;
      BOOL v21 = v11;
      __int16 v22 = 2112;
      id v23 = v12;
      __int16 v24 = 2112;
      id v25 = v7;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Added issuerPublicKeyER to payload. issuerPublicKeyER: %@", (uint8_t *)&v20, 0x20u);
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = *(id *)(a1 + 32);
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      uint64_t v17 = [*(id *)(a1 + 40) UUID];
      uint64_t v18 = *(void **)(a1 + 48);
      int v20 = 138544130;
      BOOL v21 = v16;
      __int16 v22 = 2112;
      id v23 = v17;
      __int16 v24 = 2112;
      id v25 = v18;
      __int16 v26 = 2112;
      id v27 = v6;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to create Issuer Key while accepting home invitation: %@, with error: %@", (uint8_t *)&v20, 0x2Au);
    }
    uint64_t v19 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, id))(v19 + 16))(v19, v6);
      goto LABEL_10;
    }
    id v7 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
    (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v7);
  }

LABEL_10:
}

- (void)sendRequestForInvitation:(id)a3 homeUUID:(id)a4 payload:(id)a5 invitationState:(int64_t)a6 responseHandler:(id)a7
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a7;
  uint64_t v16 = [v13 UUIDString];
  [v14 setValue:v16 forKey:@"kHomeUUID"];

  uint64_t v17 = (void *)MEMORY[0x230FBD990]();
  uint64_t v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    uint64_t v19 = v27 = v15;
    [v12 idsInvitationUUID];
    int v20 = v28 = v17;
    BOOL v21 = [v20 UUIDString];
    __int16 v22 = [v12 identifier];
    [v22 UUIDString];
    id v23 = v29 = self;
    [v13 UUIDString];
    __int16 v24 = v30 = a6;
    *(_DWORD *)long long buf = 138544130;
    id v32 = v19;
    __int16 v33 = 2112;
    id v34 = v21;
    __int16 v35 = 2112;
    uint64_t v36 = v23;
    __int16 v37 = 2112;
    id v38 = v24;
    _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Accept/decline request to admin for idsInviteUUID %@, homeInviteUUID %@ homeUUID %@", buf, 0x2Au);

    uint64_t v17 = v28;
    a6 = v30;

    self = v29;
    id v15 = v27;
  }

  id v25 = [v12 idsInvitationUUID];
  __int16 v26 = [v12 identifier];
  [(HMDHomeManager *)self _sendAcceptOrDeclineRequestToAdminForIDSInvitationIdentifier:v25 homeInviteUUID:v26 payload:v14 invitationState:a6 responseHandler:v15];
}

- (void)__sendUpdateRequestToAdminForInvitation:(id)a3 homeUUID:(id)a4 invitationState:(int64_t)a5 authStatus:(id)a6 reverseShareInvitation:(id)a7 logEventBuilder:(id)a8
{
  v68[2] = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v48 = a4;
  id v47 = a6;
  id v15 = a7;
  id v49 = a8;
  v67[0] = @"kInvitationIdentifierKey";
  uint64_t v16 = [v14 identifier];
  uint64_t v17 = [v16 UUIDString];
  v67[1] = @"kInvitationStateKey";
  v68[0] = v17;
  uint64_t v18 = [NSNumber numberWithInteger:a5];
  v68[1] = v18;
  uint64_t v19 = [NSDictionary dictionaryWithObjects:v68 forKeys:v67 count:2];
  int v20 = (void *)[v19 mutableCopy];

  if (a5 != 3)
  {
LABEL_21:
    objc_initWeak((id *)buf, self);
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = __133__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus_reverseShareInvitation_logEventBuilder___block_invoke;
    aBlock[3] = &unk_264A2BC58;
    objc_copyWeak(v61, (id *)buf);
    aBlock[4] = self;
    id v44 = v14;
    id v59 = v44;
    v61[1] = (id)a5;
    id v45 = v49;
    id v60 = v45;
    uint64_t v46 = _Block_copy(aBlock);
    if (a5 == 3)
    {
      objc_initWeak(&location, self);
      v50[0] = MEMORY[0x263EF8330];
      v50[1] = 3221225472;
      v50[2] = __133__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus_reverseShareInvitation_logEventBuilder___block_invoke_1214;
      v50[3] = &unk_264A2BC80;
      objc_copyWeak(v56, &location);
      id v51 = v45;
      id v52 = v44;
      id v53 = v48;
      id v54 = v20;
      v56[1] = (id)3;
      id v55 = v46;
      [(HMDHomeManager *)self addIssuerKeyToMessagePayload:v54 invitation:v52 completion:v50];

      objc_destroyWeak(v56);
      objc_destroyWeak(&location);
    }
    else
    {
      [(HMDHomeManager *)self sendRequestForInvitation:v44 homeUUID:v48 payload:v20 invitationState:a5 responseHandler:v46];
    }

    objc_destroyWeak(v61);
    objc_destroyWeak((id *)buf);
    goto LABEL_25;
  }
  if (!v15)
  {
LABEL_8:
    if (![(HMDHomeManager *)self addHH2KeyInResponsePayload:v20 invitation:v14])
    {
      id v32 = (void *)MEMORY[0x230FBD990]();
      __int16 v33 = self;
      id v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        __int16 v35 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v64 = v35;
        _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_ERROR, "%{public}@Failed to get or create HH2 Controller key", buf, 0xCu);
      }
    }
    uint64_t v36 = [(HMDHomeManager *)self appleAccountManager];
    __int16 v37 = [v36 account];
    id v38 = [v37 primaryHandle];

    if (v38)
    {
      uint64_t v39 = +[HMDAccountHandleFormatter defaultFormatter];
      long long v40 = [v39 stringForObjectValue:v38];

      if (v40) {
        [v20 setObject:v40 forKeyedSubscript:@"kUserIDKey"];
      }
    }
    long long v41 = [v14 inviterAccount];
    if (v41)
    {
      __int16 v42 = +[HMDIdentityRegistry sharedRegistry];
      long long v43 = [v14 inviterIdentity];
      [v42 registerIdentity:v43 account:v41 object:v14];
    }
    if (v47) {
      [v47 addToPayload:v20];
    }

    goto LABEL_21;
  }
  BOOL v21 = (void *)MEMORY[0x263F08910];
  __int16 v22 = [v15 token];
  id v62 = 0;
  id v23 = [v21 archivedDataWithRootObject:v22 requiringSecureCoding:1 error:&v62];
  id v24 = v62;

  if (!v24)
  {
    int64_t v30 = [v15 url];
    __int16 v31 = [v30 absoluteString];
    [v20 setObject:v31 forKeyedSubscript:@"HMDHomeInvitationShareURLKey"];

    [v20 setObject:v23 forKeyedSubscript:@"HMDHomeInvitationShareTokenKey"];
    goto LABEL_8;
  }
  id v25 = (void *)MEMORY[0x230FBD990]();
  __int16 v26 = self;
  id v27 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    uint64_t v28 = HMFGetLogIdentifier();
    long long v29 = [v15 token];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v64 = v28;
    __int16 v65 = 2112;
    __int16 v66 = v29;
    _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@Failed to encode reverse share token %@", buf, 0x16u);
  }

LABEL_25:
}

void __133__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus_reverseShareInvitation_logEventBuilder___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = *(id *)(a1 + 32);
    id v10 = HMFGetOSLogHandle();
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if (v6)
    {
      if (v11)
      {
        id v12 = HMFGetLogIdentifier();
        id v13 = [*(id *)(a1 + 40) describeWithFormat];
        int v36 = 138543874;
        __int16 v37 = v12;
        __int16 v38 = 2112;
        uint64_t v39 = v13;
        __int16 v40 = 2112;
        id v41 = v6;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Failed to modify invitation state for invite %@ due to error %@", (uint8_t *)&v36, 0x20u);
      }
      uint64_t v14 = [v6 code];
      uint64_t v15 = [v6 code];
      uint64_t v16 = [v6 code];
      uint64_t v17 = [v6 code];
      if (v15 == 1006 || v17 == 1008)
      {
        __int16 v26 = (void *)MEMORY[0x230FBD990](v17);
        id v27 = *(id *)(a1 + 32);
        uint64_t v28 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          long long v29 = HMFGetLogIdentifier();
          int64_t v30 = [*(id *)(a1 + 40) describeWithFormat];
          int v36 = 138543618;
          __int16 v37 = v29;
          __int16 v38 = 2112;
          uint64_t v39 = v30;
          _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@Updating invitation (%@) to expired since sender could not find it or it was expired", (uint8_t *)&v36, 0x16u);
        }
        [*(id *)(a1 + 40) expire];
      }
      else if (v16 == 1007)
      {
        uint64_t v18 = (void *)MEMORY[0x230FBD990]();
        id v19 = *(id *)(a1 + 32);
        int v20 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          BOOL v21 = HMFGetLogIdentifier();
          __int16 v22 = [*(id *)(a1 + 40) describeWithFormat];
          int v36 = 138543618;
          __int16 v37 = v21;
          __int16 v38 = 2112;
          uint64_t v39 = v22;
          _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Updating invitation (%@) to accepted and pending to match sender state", (uint8_t *)&v36, 0x16u);
        }
        [WeakRetained _postIncomingInvitationStateChangedNotification:*(void *)(a1 + 40) newInvitationState:5];
      }
      else if (v14 == 2)
      {
        __int16 v31 = (void *)MEMORY[0x230FBD990]();
        id v32 = *(id *)(a1 + 32);
        __int16 v33 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          id v34 = HMFGetLogIdentifier();
          __int16 v35 = [*(id *)(a1 + 40) describeWithFormat];
          int v36 = 138543618;
          __int16 v37 = v34;
          __int16 v38 = 2112;
          uint64_t v39 = v35;
          _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@Inviter did not find invitation (%@), ignoring response", (uint8_t *)&v36, 0x16u);
        }
      }
    }
    else
    {
      if (v11)
      {
        id v23 = HMFGetLogIdentifier();
        id v24 = [*(id *)(a1 + 40) describeWithFormat];
        int v36 = 138543618;
        __int16 v37 = v23;
        __int16 v38 = 2112;
        uint64_t v39 = v24;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Modified invitation state for invite %@", (uint8_t *)&v36, 0x16u);
      }
      if (*(void *)(a1 + 64) == 3)
      {
        [*(id *)(a1 + 48) markSendAcceptanceToOwnerEnd];
        [WeakRetained _postIncomingInvitationStateChangedNotification:*(void *)(a1 + 40) newInvitationState:3];
        id v25 = [*(id *)(a1 + 40) homeUUID];
        [WeakRetained _maybeCreateLegacyHomeAcceptedZone:v25];
      }
    }
  }
}

void __133__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus_reverseShareInvitation_logEventBuilder___block_invoke_1214(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (!a2 && WeakRetained)
  {
    id v5 = WeakRetained;
    [*(id *)(a1 + 32) markSendAcceptanceToOwnerBegin];
    [v5 sendRequestForInvitation:*(void *)(a1 + 40) homeUUID:*(void *)(a1 + 48) payload:*(void *)(a1 + 56) invitationState:*(void *)(a1 + 80) responseHandler:*(void *)(a1 + 64)];
    id WeakRetained = v5;
  }
}

- (void)_sendAcceptOrDeclineRequestToAdminForIDSInvitationIdentifier:(id)a3 homeInviteUUID:(id)a4 payload:(id)a5 invitationState:(int64_t)a6 responseHandler:(id)a7
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a7;
  if (a6 == 4)
  {
    uint64_t v16 = [(HMDHomeManager *)self idsInvitationManager];
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 3221225472;
    void v18[2] = __134__HMDHomeManager__sendAcceptOrDeclineRequestToAdminForIDSInvitationIdentifier_homeInviteUUID_payload_invitationState_responseHandler___block_invoke_2;
    v18[3] = &unk_264A2BC30;
    uint64_t v17 = &v19;
    id v19 = v15;
    [v16 declineInvitationWithIDSIdentifier:v12 homeInvitationID:v13 completionBlock:v18];
    goto LABEL_5;
  }
  if (a6 == 3)
  {
    uint64_t v16 = [(HMDHomeManager *)self idsInvitationManager];
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 3221225472;
    v20[2] = __134__HMDHomeManager__sendAcceptOrDeclineRequestToAdminForIDSInvitationIdentifier_homeInviteUUID_payload_invitationState_responseHandler___block_invoke;
    v20[3] = &unk_264A2BC30;
    uint64_t v17 = &v21;
    id v21 = v15;
    [v16 acceptInvitationWithIDSIdentifier:v12 homeInvitationID:v13 dictionary:v14 completionBlock:v20];
LABEL_5:
  }
}

uint64_t __134__HMDHomeManager__sendAcceptOrDeclineRequestToAdminForIDSInvitationIdentifier_homeInviteUUID_payload_invitationState_responseHandler___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, __CFString *, uint64_t))(result + 16))(result, @"IncomingInvitationAccepted", a4);
  }
  return result;
}

uint64_t __134__HMDHomeManager__sendAcceptOrDeclineRequestToAdminForIDSInvitationIdentifier_homeInviteUUID_payload_invitationState_responseHandler___block_invoke_2(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, __CFString *, void))(result + 16))(result, @"IncomingInvitationDeclined", 0);
  }
  return result;
}

- (BOOL)getOrCreateControllerPublicKey:(id *)a3 controllerUsername:(id *)a4 error:(id *)a5
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v23 = 0;
  id v9 = [(HMDHomeManager *)self getOrCreateLocalPairingIdentity:&v23];
  id v10 = v23;
  BOOL v11 = v10;
  if (v10)
  {
    if (a5) {
      *a5 = v10;
    }
    id v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
      goto LABEL_7;
    }
    id v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v25 = v15;
    __int16 v26 = 2112;
    id v27 = v11;
    uint64_t v16 = "%{public}@Failed to get or create local pairing identity: %@";
    uint64_t v17 = v14;
    os_log_type_t v18 = OS_LOG_TYPE_INFO;
    uint32_t v19 = 22;
    goto LABEL_6;
  }
  if (!v9)
  {
    id v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    id v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v25 = v15;
    uint64_t v16 = "%{public}@Unable to get identity but no error provided";
    uint64_t v17 = v14;
    os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
    uint32_t v19 = 12;
LABEL_6:
    _os_log_impl(&dword_22F52A000, v17, v18, v16, buf, v19);

LABEL_7:
    BOOL v20 = 0;
    goto LABEL_14;
  }
  if (a3)
  {
    id v21 = [v9 publicKey];
    *a3 = [v21 data];
  }
  if (a4)
  {
    *a4 = [v9 identifier];
  }
  BOOL v20 = 1;
LABEL_14:

  return v20;
}

- (id)getOrCreateLocalPairingIdentity:(id *)a3
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  id v4 = [MEMORY[0x263F35AD0] systemStore];
  id v67 = 0;
  id v68 = 0;
  id v65 = 0;
  id v66 = 0;
  int v5 = [v4 getAllAvailableControllerPublicKeys:&v68 secretKeys:&v67 userNames:&v66 error:&v65];
  id v6 = v68;
  id v7 = v67;
  id v8 = v66;
  id v9 = (HMDHomeManagerModel *)v65;

  if (v5) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10 && v6 != 0 && v8 != 0)
  {
    if ([v8 count])
    {
      uint64_t v13 = [v8 count];
      if (v13 == [v6 count])
      {
        id v14 = [v6 objectAtIndexedSubscript:0];
        id v15 = [v7 objectAtIndexedSubscript:0];
        id v16 = [v8 objectAtIndexedSubscript:0];
        if ((unint64_t)[v8 count] < 2)
        {
          uint64_t v42 = [MEMORY[0x263F35AD0] systemStore];
          long long v43 = [v42 activeControllerPairingIdentifier];

          if (v43)
          {
LABEL_34:
            __int16 v40 = a3;
            goto LABEL_35;
          }
          id v57 = v7;
          uint64_t v17 = (void *)MEMORY[0x230FBD990]();
          id v44 = self;
          uint32_t v19 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v20 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            long long v72 = v20;
            __int16 v73 = 2112;
            id v74 = v16;
            id v21 = "%{public}@Setting controller key as active as none was found: %@";
            goto LABEL_32;
          }
        }
        else
        {
          id v57 = v7;
          uint64_t v17 = (void *)MEMORY[0x230FBD990]();
          os_log_type_t v18 = self;
          uint32_t v19 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v20 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            long long v72 = v20;
            __int16 v73 = 2112;
            id v74 = v16;
            id v21 = "%{public}@Found multiple controller keys, using first entry as the controller username: %@";
LABEL_32:
            _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_DEFAULT, v21, buf, 0x16u);
          }
        }

        id v45 = [MEMORY[0x263F35AD0] systemStore];
        [v45 updateActiveControllerPairingIdentifier:v16];

        id v7 = v57;
        goto LABEL_34;
      }
    }
  }
  __int16 v22 = +[HMDDeviceCapabilities deviceCapabilities];
  int v23 = [v22 supportsKeychainSync];

  if (!v23)
  {
    int64_t v30 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
    id v16 = 0;
    id v15 = 0;
    id v14 = 0;
LABEL_24:

    goto LABEL_26;
  }
  id v58 = v7;
  id v24 = (void *)MEMORY[0x230FBD990]();
  id v25 = self;
  __int16 v26 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    id v27 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v72 = v27;
    _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Local controller key does not exist, creating one", buf, 0xCu);
  }
  uint64_t v28 = [MEMORY[0x263F35AD0] systemStore];
  id v63 = 0;
  id v64 = 0;
  uint64_t v61 = v9;
  id v62 = 0;
  int v29 = [v28 getControllerPublicKey:&v64 secretKey:&v63 username:&v62 allowCreation:1 error:&v61];
  id v14 = v64;
  id v15 = v63;
  id v16 = v62;
  int64_t v30 = v61;

  if (v29)
  {
    __int16 v31 = (void *)MEMORY[0x230FBD990]();
    id v32 = v25;
    __int16 v33 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      id v34 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      long long v72 = v34;
      _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_DEFAULT, "%{public}@Created new local controller key, forcing push to HomeManager zone to anchor key...", buf, 0xCu);
    }
    __int16 v35 = [HMDHomeManagerModel alloc];
    int v36 = [(HMDHomeManager *)v32 uuid];
    id v9 = [(HMDBackingStoreModelObject *)v35 initWithObjectChangeType:1 uuid:v36 parentUUID:0];

    [(HMDHomeManagerModel *)v9 setControllerKeyIdentifier:v16];
    __int16 v37 = [(HMDHomeManager *)v32 backingStore];
    __int16 v38 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v39 = [v37 transaction:@"HMD.hm" options:v38];

    [v39 add:v9 withMessage:0];
    [v39 run];

    id v7 = v58;
    goto LABEL_24;
  }
  id v7 = v58;
LABEL_26:
  __int16 v40 = a3;
  if (v30)
  {
    if (a3)
    {
      int64_t v30 = v30;
      id v41 = 0;
      *a3 = v30;
      goto LABEL_43;
    }
    goto LABEL_42;
  }
LABEL_35:
  if (v14 && v15 && v16)
  {
    uint64_t v46 = (void *)[objc_alloc(MEMORY[0x263F425F0]) initWithPairingKeyData:v14];
    id v47 = (void *)[objc_alloc(MEMORY[0x263F425F0]) initWithPairingKeyData:v15];
    id v41 = (void *)[objc_alloc(MEMORY[0x263F35A78]) initWithIdentifier:v16 publicKey:v46 privateKey:v47 permissions:0];

    int64_t v30 = 0;
    goto LABEL_43;
  }
  if (v40)
  {
    id v59 = (void *)MEMORY[0x263F087E8];
    uint64_t v48 = *MEMORY[0x263F0C710];
    uint64_t v69 = *MEMORY[0x263F08320];
    id v49 = [MEMORY[0x263F086E0] mainBundle];
    uint64_t v50 = [v49 localizedStringForKey:@"Unable to get local pairing identity" value:&stru_26E2EB898 table:0];
    long long v70 = v50;
    [NSDictionary dictionaryWithObjects:&v70 forKeys:&v69 count:1];
    id v51 = v15;
    id v52 = v14;
    id v53 = v6;
    v55 = id v54 = v7;
    *a3 = [v59 errorWithDomain:v48 code:2 userInfo:v55];

    id v7 = v54;
    id v6 = v53;
    id v14 = v52;
    id v15 = v51;
  }
  int64_t v30 = 0;
LABEL_42:
  id v41 = 0;
LABEL_43:

  return v41;
}

- (id)hh1UserIDsForCurrentUserForHomeUUID:(id)a3
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = [MEMORY[0x263EFF980] array];
  id v6 = [(HMDHomeManager *)self hapKeyStore];
  id v7 = v6;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    id v8 = [MEMORY[0x263F35AD0] systemStore];
  }
  id v9 = v8;

  BOOL v10 = [v9 allAccessoryPairingKeys];
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 3221225472;
  v20[2] = __54__HMDHomeManager_hh1UserIDsForCurrentUserForHomeUUID___block_invoke;
  v20[3] = &unk_264A2BC08;
  id v11 = v9;
  id v21 = v11;
  id v12 = v4;
  id v22 = v12;
  id v13 = v5;
  id v23 = v13;
  objc_msgSend(v10, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v20);

  id v14 = (void *)MEMORY[0x230FBD990]();
  id v15 = self;
  id v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v25 = v17;
    __int16 v26 = 2112;
    id v27 = v13;
    _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Possible HH1 User UUIDs: %@", buf, 0x16u);
  }
  os_log_type_t v18 = (void *)[v13 copy];

  return v18;
}

void __54__HMDHomeManager_hh1UserIDsForCurrentUserForHomeUUID___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v7 = v3;
  int v5 = [v3 identifier];
  LOBYTE(v4) = [v4 isHH2KeyType:v5];

  if ((v4 & 1) == 0)
  {
    id v6 = +[HMDUser UUIDWithUserID:0 forHomeIdentifier:*(void *)(a1 + 40) uuid:0 pairingIdentity:v7];
    [*(id *)(a1 + 48) addObject:v6];
  }
}

- (void)migrateSharedUserFromIncomingInvitation:(id)a3
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (([v4 isAccepted] & 1) == 0) {
    _HMFPreconditionFailure();
  }
  int v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Going to do shared user migration from incoming invitation : %@", buf, 0x16u);
  }
  id v9 = [v4 homeUUID];
  BOOL v10 = [(HMDHomeManager *)v6 hh1UserIDsForCurrentUserForHomeUUID:v9];

  *(void *)long long buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  uint64_t v46 = __Block_byref_object_copy__242964;
  id v47 = __Block_byref_object_dispose__242965;
  id v48 = 0;
  id v11 = [(HMDHomeManager *)v6 defaultDatabase];
  id v12 = v11;
  if (v11)
  {
    id v13 = v11;
  }
  else
  {
    id v13 = +[HMDDatabase defaultDatabase];
  }
  id v14 = v13;

  uint64_t v33 = MEMORY[0x263EF8330];
  uint64_t v34 = 3221225472;
  __int16 v35 = __58__HMDHomeManager_migrateSharedUserFromIncomingInvitation___block_invoke;
  int v36 = &unk_264A2BBE0;
  id v15 = v14;
  id v37 = v15;
  id v16 = v4;
  id v38 = v16;
  uint64_t v39 = v6;
  __int16 v40 = buf;
  uint64_t v17 = objc_msgSend(v10, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &v33);
  uint64_t v18 = *(void *)(*(void *)&buf[8] + 40);
  if (v18)
  {
    uint32_t v19 = +[HMDUser localSharedZoneForSharedUserUUID:database:](HMDUser, "localSharedZoneForSharedUserUUID:database:", v18, v15, v33, v34, v35, v36, v37);
    if (v19)
    {
      uint64_t v20 = *(void *)(*(void *)&buf[8] + 40);
      id v21 = [v16 homeUUID];
      id v22 = [(HMDHomeManager *)v6 backingStore];
      id v23 = [v22 context];
      +[HMDUser migrateHH1SettingsToHH2ForSharedUserWithUUID:v20 homeUUID:v21 sharedZone:v19 backingStoreContext:v23];
    }
    else
    {
      uint64_t v28 = (void *)MEMORY[0x230FBD990]();
      int v29 = v6;
      HMFGetOSLogHandle();
      int64_t v30 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        __int16 v31 = HMFGetLogIdentifier();
        id v32 = *(void **)(*(void *)&buf[8] + 40);
        *(_DWORD *)id v41 = 138543618;
        uint64_t v42 = v31;
        __int16 v43 = 2112;
        id v44 = v32;
        _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_INFO, "%{public}@could not open shared zone using user UUID : %@", v41, 0x16u);
      }
    }
  }
  else
  {
    id v24 = (void *)MEMORY[0x230FBD990](v17);
    id v25 = v6;
    HMFGetOSLogHandle();
    __int16 v26 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      id v27 = HMFGetLogIdentifier();
      *(_DWORD *)id v41 = 138543618;
      uint64_t v42 = v27;
      __int16 v43 = 2112;
      id v44 = v16;
      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Unable to migrate shared user settings from incoming invitation: %@", v41, 0x16u);
    }
  }

  _Block_object_dispose(buf, 8);
}

void __58__HMDHomeManager_migrateSharedUserFromIncomingInvitation___block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = +[HMDUser localPrivateZoneForSharedUserUUID:v7 database:*(void *)(a1 + 32)];
  if (v8)
  {
    id v9 = [*(id *)(a1 + 40) homeUUID];
    BOOL v10 = [*(id *)(a1 + 48) backingStore];
    id v11 = [v10 context];
    +[HMDUser migrateHH1SettingsToHH2ForSharedUserWithUUID:v7 homeUUID:v9 privateZone:v8 backingStoreContext:v11];

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
    *a4 = 1;
  }
  else
  {
    id v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = *(id *)(a1 + 48);
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      int v16 = 138543618;
      uint64_t v17 = v15;
      __int16 v18 = 2112;
      id v19 = v7;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@could not open private zone using user UUID : %@", (uint8_t *)&v16, 0x16u);
    }
  }
}

- (BOOL)_submitSpamReportToIDS:(id)a3
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = [MEMORY[0x263EFF9A0] dictionary];
  id v6 = +[HMDAppleAccountManager sharedManager];
  id v7 = [v6 account];
  id v8 = [v7 handles];
  id v9 = [v8 firstObject];
  BOOL v10 = [v9 remoteDestinationString];

  uint64_t v11 = [v4 inviterUserID];
  if (!v11) {
    goto LABEL_15;
  }
  id v12 = (void *)v11;
  uint64_t v13 = [v4 homeName];
  if (!v13) {
    goto LABEL_14;
  }
  id v14 = (void *)v13;
  uint64_t v15 = [v4 identifier];
  if (!v15)
  {

LABEL_14:
    goto LABEL_15;
  }
  int v16 = (void *)v15;
  uint64_t v17 = [v4 startDate];

  if (v17 && v10)
  {
    __int16 v18 = [v4 inviterUserID];
    [v5 setObject:v18 forKeyedSubscript:*MEMORY[0x263F4A108]];

    id v19 = [v4 homeName];
    [v5 setObject:v19 forKeyedSubscript:@"home-name"];

    uint64_t v20 = [v4 identifier];
    id v21 = [v20 UUIDString];
    [v5 setObject:v21 forKeyedSubscript:*MEMORY[0x263F4A0F8]];

    id v22 = NSNumber;
    id v23 = [v4 startDate];
    [v23 timeIntervalSince1970];
    id v25 = [v22 numberWithInteger:(uint64_t)v24];
    [v5 setObject:v25 forKeyedSubscript:*MEMORY[0x263F4A118]];

    [v5 setObject:v10 forKeyedSubscript:*MEMORY[0x263F4A100]];
    __int16 v26 = (void *)MEMORY[0x230FBD990]([v5 setObject:@"HomeKitInviteSpam" forKeyedSubscript:*MEMORY[0x263F4A110]]);
    id v27 = self;
    uint64_t v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      int v29 = HMFGetLogIdentifier();
      int v44 = 138543618;
      id v45 = v29;
      __int16 v46 = 2112;
      id v47 = v5;
      _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@Reporting invitation as spam: %@", (uint8_t *)&v44, 0x16u);
    }
    int64_t v30 = +[HMDIDSServiceManager sharedManager];
    __int16 v31 = [v30 service];

    id v32 = (void *)[v5 copy];
    char v33 = [v31 reportSpamMessage:v32];

    if ((v33 & 1) == 0)
    {
      uint64_t v34 = (void *)MEMORY[0x230FBD990]();
      __int16 v35 = v27;
      int v36 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
      {
        id v37 = HMFGetLogIdentifier();
        int v44 = 138543362;
        id v45 = v37;
        _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_FAULT, "%{public}@Spam report was rejected for some reason. Please file a bug.", (uint8_t *)&v44, 0xCu);
      }
    }

    goto LABEL_18;
  }
LABEL_15:
  id v38 = (void *)MEMORY[0x230FBD990]();
  uint64_t v39 = self;
  __int16 v40 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    id v41 = HMFGetLogIdentifier();
    uint64_t v42 = [v4 identifier];
    int v44 = 138543874;
    id v45 = v41;
    __int16 v46 = 2112;
    id v47 = v42;
    __int16 v48 = 2112;
    uint64_t v49 = v10;
    _os_log_impl(&dword_22F52A000, v40, OS_LOG_TYPE_ERROR, "%{public}@Unexpected nil value for invitation %@, reporter %@", (uint8_t *)&v44, 0x20u);
  }
  char v33 = 0;
LABEL_18:

  return v33;
}

- (void)_processLocalRequestToUpdateHomeInvitation:(id)a3 newState:(int64_t)a4 authStatus:(id)a5 logEventBuilder:(id)a6
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v56 = a5;
  id v57 = a6;
  uint64_t v11 = [v10 identifier];
  id v12 = [v11 UUIDString];

  uint64_t v13 = (void *)MEMORY[0x230FBD990]();
  id v14 = self;
  uint64_t v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    int v16 = HMFGetLogIdentifier();
    uint64_t v17 = [v10 identifier];
    __int16 v18 = [v17 UUIDString];
    id v19 = [MEMORY[0x263F0E3B0] homeInvitationStateDescription:a4];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v69 = v16;
    __int16 v70 = 2112;
    long long v71 = v18;
    __int16 v72 = 2112;
    __int16 v73 = v19;
    _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@[HomeManager] Processing request to update invitation %@ to state %@", buf, 0x20u);
  }
  uint64_t v20 = +[HMDBulletinBoard sharedBulletinBoard];
  [v20 removeBulletinWithRecordID:v12];

  v66[0] = @"kBulletinRecordIDKey";
  v66[1] = @"kInvitationIdentifierKey";
  v67[0] = v12;
  v67[1] = v12;
  v66[2] = @"kInvitationStateKey";
  id v21 = [NSNumber numberWithInteger:a4];
  void v67[2] = v21;
  v66[3] = @"kHomeName";
  id v22 = [v10 homeName];
  v67[3] = v22;
  v66[4] = @"kHomeUUID";
  id v23 = [v10 homeUUID];
  double v24 = [v23 UUIDString];
  v67[4] = v24;
  id v25 = [NSDictionary dictionaryWithObjects:v67 forKeys:v66 count:5];
  [(HMDHomeManager *)v14 dismissBulletinOnAllMyTransientDevicesWithContext:v25];

  __int16 v26 = [v10 resolutionHandler];

  if (v26)
  {
    if (a4 == 3) {
      [v10 accept];
    }
    else {
      [v10 decline];
    }
  }
  else
  {
    if (a4 == 3)
    {
      id v27 = [v10 inviterUserID];
      uint64_t v28 = +[HMDAccountHandle accountHandleForDestination:v27];

      id v55 = [[HMDUser alloc] initWithAccountHandle:v28 home:0 pairingIdentity:0 privilege:3];
      int v29 = [(HMDHomeManager *)v14 idsFirewallManager];
      int64_t v30 = [(HMDUser *)v55 userID];
      [v29 handleDidAddUserWithUserID:v30];

      objc_initWeak((id *)buf, v14);
      __int16 v31 = [(HMDHomeManager *)v14 homeSharedUserCloudShareManager];
      id v32 = [v10 homeUUID];
      char v33 = [v31 grantAccessForOwner:v55 sharedUserDataWithHomeModelID:v32 logEventBuilder:v57];
      v61[0] = MEMORY[0x263EF8330];
      v61[1] = 3221225472;
      id v61[2] = __97__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus_logEventBuilder___block_invoke;
      v61[3] = &unk_264A2BB90;
      v61[4] = v14;
      id v34 = v10;
      id v62 = v34;
      objc_copyWeak(v65, (id *)buf);
      v65[1] = (id)3;
      id v63 = v56;
      id v35 = v57;
      id v64 = v35;
      int v36 = [v33 then:v61];
      v58[0] = MEMORY[0x263EF8330];
      v58[1] = 3221225472;
      v58[2] = __97__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus_logEventBuilder___block_invoke_3;
      v58[3] = &unk_264A2BBB8;
      v58[4] = v14;
      id v37 = v34;
      id v59 = v37;
      id v60 = v35;
      id v38 = (id)[v36 recover:v58];

      objc_destroyWeak(v65);
      objc_destroyWeak((id *)buf);

      [(HMDHomeManager *)v14 _postIncomingInvitationStateChangedNotification:v37 newInvitationState:5];
      uint64_t v39 = [(HMDHomeManager *)v14 uuidsOfRemovedHomes];
      __int16 v40 = [v37 homeUUID];
      LODWORD(v36) = [v39 containsObject:v40];

      if (v36)
      {
        id v41 = [(HMDHomeManager *)v14 uuidsOfRemovedHomes];
        uint64_t v42 = [v37 homeUUID];
        [v41 removeObject:v42];

        __int16 v43 = (void *)MEMORY[0x230FBD990]();
        int v44 = v14;
        id v45 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          __int16 v46 = HMFGetLogIdentifier();
          id v47 = [v37 homeUUID];
          __int16 v48 = [v47 UUIDString];
          *(_DWORD *)long long buf = 138543618;
          uint64_t v69 = v46;
          __int16 v70 = 2112;
          long long v71 = v48;
          _os_log_impl(&dword_22F52A000, v45, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);
        }
      }
      uint64_t v49 = [v37 homeUUID];
      uint64_t v50 = [(HMDHomeManager *)v14 _homeWithUUID:v49];
      id v51 = [v50 owner];
      id v52 = [v51 account];
      id v53 = [v52 senderCorrelationIdentifier];

      [(HMDHomeManager *)v14 _stopTrackingRemovedHomeUserMergeId:v53];
    }
    else
    {
      [v57 cancel];
      id v54 = [v10 homeUUID];
      [(HMDHomeManager *)v14 __sendUpdateRequestToAdminForInvitation:v10 homeUUID:v54 invitationState:a4 authStatus:v56 reverseShareInvitation:0 logEventBuilder:0];

      [(HMDHomeManager *)v14 _removeIncomingInvitation:v10];
      [(HMDHomeManager *)v14 _postIncomingInvitationStateChangedNotification:v10 newInvitationState:a4];
    }
    [(HMDHomeManager *)v14 _updateIncomingInvitesPresent];
  }
}

uint64_t __97__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus_logEventBuilder___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v21 = v7;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Created reverse share successful, proceeding to send invitation acceptance", buf, 0xCu);
  }
  id v8 = *(void **)(a1 + 32);
  id v9 = [*(id *)(a1 + 40) homeUUID];
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  void v14[2] = __97__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus_logEventBuilder___block_invoke_1195;
  v14[3] = &unk_264A2BB68;
  objc_copyWeak(v19, (id *)(a1 + 64));
  id v10 = *(id *)(a1 + 40);
  uint64_t v11 = *(void **)(a1 + 72);
  id v15 = v10;
  v19[1] = v11;
  id v16 = *(id *)(a1 + 48);
  id v12 = v3;
  id v17 = v12;
  id v18 = *(id *)(a1 + 56);
  [v8 _queryLegacyHomeAndAcceptedZoneExists:v9 completion:v14];

  objc_destroyWeak(v19);
  return 1;
}

uint64_t __97__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus_logEventBuilder___block_invoke_3(id *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = a1[4];
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v7 = HMFGetLogIdentifier();
    id v8 = [a1[5] identifier];
    id v9 = [v8 UUIDString];
    int v11 = 138543874;
    id v12 = v7;
    __int16 v13 = 2112;
    id v14 = v9;
    __int16 v15 = 2112;
    id v16 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to grant share access back to owner for invite with identifier %@ due to error %@", (uint8_t *)&v11, 0x20u);
  }
  [a1[6] markError:v3];

  return 1;
}

void __97__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus_logEventBuilder___block_invoke_1195(uint64_t a1, int a2, char a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (a2 && (a3 & 1) == 0)
    {
      id v7 = (void *)MEMORY[0x230FBD990]();
      [WeakRetained migrateSharedUserFromIncomingInvitation:*(void *)(a1 + 32)];
    }
    id v8 = [WeakRetained workQueue];
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = __97__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus_logEventBuilder___block_invoke_2;
    v11[3] = &unk_264A2BB40;
    void v11[4] = WeakRetained;
    id v9 = *(id *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 72);
    id v12 = v9;
    uint64_t v16 = v10;
    id v13 = *(id *)(a1 + 40);
    id v14 = *(id *)(a1 + 48);
    id v15 = *(id *)(a1 + 56);
    dispatch_async(v8, v11);
  }
}

void __97__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus_logEventBuilder___block_invoke_2(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  id v3 = (void *)a1[5];
  id v4 = [v3 homeUUID];
  objc_msgSend(v2, "__sendUpdateRequestToAdminForInvitation:homeUUID:invitationState:authStatus:reverseShareInvitation:logEventBuilder:", v3, v4, a1[9], a1[6], a1[7], a1[8]);
}

- (BOOL)addHH2KeyInResponsePayload:(id)a3 invitation:(id)a4
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [MEMORY[0x263F35AD0] systemStore];
  id v65 = 0;
  id v66 = 0;
  LODWORD(v9) = [v8 getOrCreateHH2ControllerKey:&v66 secretKey:0 keyPair:0 username:&v65];
  id v10 = v66;
  id v11 = v65;

  if (v9)
  {
    id v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = self;
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = HMFGetLogIdentifier();
      uint64_t v16 = [v7 inviterIdentity];
      *(_DWORD *)long long buf = 138543618;
      id v68 = v15;
      __int16 v69 = 2114;
      id v70 = v16;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Owner's pairing identity: %{public}@", buf, 0x16u);
    }
    uint64_t v17 = (void *)MEMORY[0x230FBD990]();
    id v18 = v13;
    id v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543874;
      id v68 = v20;
      __int16 v69 = 2114;
      id v70 = v10;
      __int16 v71 = 2114;
      id v72 = v11;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Shared user's HH2 controller key [%{public}@] [%{public}@] before sending invite accept", buf, 0x20u);
    }
    id v21 = [v7 inviterIdentity];
    uint64_t v22 = [v21 identifier];
    char v23 = HMFEqualObjects();

    if (v23)
    {
      double v24 = [MEMORY[0x263F35AD0] systemStore];
      id v25 = [v24 allHH2PairingKeys];

      __int16 v26 = (void *)MEMORY[0x230FBD990]();
      id v27 = v18;
      uint64_t v28 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        int v29 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543874;
        id v68 = v29;
        __int16 v69 = 2114;
        id v70 = v11;
        __int16 v71 = 2114;
        id v72 = v25;
        _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@Looks like Owner and shared user has the same pairing identity : %{public}@, HH2 key list: %{public}@", buf, 0x20u);
      }
      v63[0] = MEMORY[0x263EF8330];
      v63[1] = 3221225472;
      v63[2] = __56__HMDHomeManager_addHH2KeyInResponsePayload_invitation___block_invoke;
      v63[3] = &unk_264A2BB18;
      id v30 = v7;
      id v64 = v30;
      __int16 v31 = objc_msgSend(v25, "na_filter:", v63);

      id v32 = (void *)MEMORY[0x230FBD990]();
      char v33 = v27;
      id v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v60 = v7;
        id v35 = v6;
        id v37 = v36 = v31;
        id v38 = [v30 inviterIdentity];
        uint64_t v39 = [v38 identifier];
        *(_DWORD *)long long buf = 138543874;
        id v68 = v37;
        __int16 v69 = 2114;
        id v70 = v39;
        __int16 v71 = 2114;
        id v72 = v36;
        _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_INFO, "%{public}@All HH2 keys after removing %{public}@ / %{public}@", buf, 0x20u);

        __int16 v31 = v36;
        id v6 = v35;
        id v7 = v60;
      }

      if (objc_msgSend(v31, "hmf_isEmpty"))
      {
        __int16 v40 = [MEMORY[0x263F35AD0] systemStore];
        id v61 = v11;
        id v62 = v10;
        uint64_t v41 = [v40 createHH2ControllerKey:&v62 secretKey:0 keyPair:0 username:&v61];
        id v42 = v62;

        id v43 = v61;
        if (v41)
        {
          int v44 = (void *)MEMORY[0x230FBD990]();
          id v45 = v33;
          __int16 v46 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_FAULT))
          {
            id v47 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543362;
            id v68 = v47;
            _os_log_impl(&dword_22F52A000, v46, OS_LOG_TYPE_FAULT, "%{public}@This makes me sad. :( I need a break. Unable to create a brand new HH2 pairing key.", buf, 0xCu);
          }
          __int16 v48 = (void *)MEMORY[0x230FBD990]();
          id v9 = v45;
          uint64_t v49 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            uint64_t v50 = HMFGetLogIdentifier();
            id v51 = [NSNumber numberWithInt:v41];
            *(_DWORD *)long long buf = 138543618;
            id v68 = v50;
            __int16 v69 = 2112;
            id v70 = v51;
            _os_log_impl(&dword_22F52A000, v49, OS_LOG_TYPE_ERROR, "%{public}@This makes me sad. :( I need a break. Unable to create a brand new HH2 pairing key. %@", buf, 0x16u);
          }
          LOBYTE(v9) = 0;
        }
        else
        {
          [v6 setObject:v42 forKeyedSubscript:@"kControllerPublicKey"];
          [v6 setObject:v43 forKeyedSubscript:@"kControllerPairingNameKey"];
          LOBYTE(v9) = 1;
        }
        id v11 = v43;
        id v10 = v42;
      }
      else
      {
        id v52 = [v31 firstObject];
        id v53 = (void *)MEMORY[0x230FBD990]();
        id v54 = v33;
        id v55 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
        {
          id v56 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          id v68 = v56;
          __int16 v69 = 2114;
          id v70 = v52;
          _os_log_impl(&dword_22F52A000, v55, OS_LOG_TYPE_INFO, "%{public}@Key chosen by the shared user: %{public}@", buf, 0x16u);
        }
        id v57 = [v52 publicKey];
        id v9 = [v57 data];
        [v6 setObject:v9 forKeyedSubscript:@"kControllerPublicKey"];

        id v58 = [v52 identifier];
        [v6 setObject:v58 forKeyedSubscript:@"kControllerPairingNameKey"];

        LOBYTE(v9) = 1;
      }
    }
    else
    {
      [v6 setObject:v10 forKeyedSubscript:@"kControllerPublicKey"];
      [v6 setObject:v11 forKeyedSubscript:@"kControllerPairingNameKey"];
      LOBYTE(v9) = 1;
    }
  }

  return (char)v9;
}

uint64_t __56__HMDHomeManager_addHH2KeyInResponsePayload_invitation___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 inviterIdentity];
  id v5 = [v4 identifier];
  id v6 = [v3 identifier];

  LODWORD(v3) = HMFEqualObjects();
  return v3 ^ 1;
}

- (void)_processRequestToUpdateHomeInvitation:(id)a3 invitationState:(int64_t)a4 homeUUID:(id)a5 authStatus:(id)a6 messageName:(id)a7 message:(id)a8
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = [(HMDHomeManager *)self incomingInvitations];
  uint64_t v20 = objc_msgSend(v19, "hmf_firstObjectWithValue:forKeyPath:", v14, @"identifier");

  if (v20)
  {
    id v21 = +[HMDHomeInviteLogEvent updateWithInvitationState:a4 isFMFDevice:isThisDeviceDesignatedFMFDevice()];
    if (v21)
    {
      uint64_t v22 = [(HMDHomeManager *)self logEventSubmitter];
      [v22 submitLogEvent:v21];
    }
    if ((unint64_t)a4 <= 7 && ((1 << a4) & 0xD8) != 0)
    {
      char v23 = [v20 identifier];
      uint64_t v89 = [v23 UUIDString];

      int v24 = [v20 isExpired];
      if (a4 == 7 || v24)
      {
        id v82 = v17;
        id v84 = v16;
        id v86 = v15;
        id v88 = v14;
        uint64_t v80 = v18;
        id v52 = [v18 numberForKey:@"kInvitationResponseOptionsKey"];
        char v53 = [v52 integerValue];

        id v54 = (void *)MEMORY[0x230FBD990]();
        id v55 = self;
        id v56 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
        {
          uint64_t v78 = v54;
          id v57 = HMFGetLogIdentifier();
          [v20 isExpired];
          id v58 = HMFBooleanToString();
          id v59 = HMFBooleanToString();
          id v60 = HMFBooleanToString();
          *(_DWORD *)long long buf = 138544130;
          BOOL v103 = v57;
          __int16 v104 = 2112;
          BOOL v105 = v58;
          __int16 v106 = 2112;
          BOOL v107 = v59;
          __int16 v108 = 2112;
          int v109 = v60;
          _os_log_impl(&dword_22F52A000, v56, OS_LOG_TYPE_INFO, "%{public}@Invitation has expired (%@) or was ignored (%@) / reported as spam (%@), removing and notifying clients.", buf, 0x2Au);

          id v54 = v78;
        }

        if (v53) {
          [(HMDHomeManager *)v55 _submitSpamReportToIDS:v20];
        }
        v100[0] = @"kBulletinRecordIDKey";
        v100[1] = @"kInvitationIdentifierKey";
        v101[0] = v89;
        v101[1] = v89;
        v100[2] = @"kInvitationStateKey";
        id v61 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v20, "invitationState"));
        v101[2] = v61;
        v100[3] = @"kHomeName";
        id v62 = [v20 homeName];
        v101[3] = v62;
        v100[4] = @"kHomeUUID";
        id v63 = [v20 homeUUID];
        id v64 = [v63 UUIDString];
        v101[4] = v64;
        id v65 = [NSDictionary dictionaryWithObjects:v101 forKeys:v100 count:5];
        [(HMDHomeManager *)v55 dismissBulletinOnAllMyTransientDevicesWithContext:v65];

        if ([v20 isExpired]) {
          uint64_t v66 = 6;
        }
        else {
          uint64_t v66 = 7;
        }
        [(HMDHomeManager *)v55 _postIncomingInvitationStateChangedNotification:v20 newInvitationState:v66];
        [(HMDHomeManager *)v55 _removeIncomingInvitation:v20];
        if (a4 == 3)
        {
          id v67 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:23 userInfo:0];
        }
        else
        {
          id v67 = 0;
        }
        id v15 = v86;
        id v14 = v88;
        id v17 = v82;
        id v16 = v84;
        id v18 = v80;
        [v80 respondWithPayload:0 error:v67];
      }
      else if (a4 == 3)
      {
        uint64_t v79 = v18;
        id v81 = v17;
        uint64_t v83 = v16;
        id v85 = v15;
        id v87 = v14;
        id v25 = [HMDSharedUserInviteAcceptLogEventBuilder alloc];
        __int16 v26 = [v20 homeUUID];
        id v27 = [v20 identifier];
        uint64_t v28 = [v20 inviteePrivilege];
        int v29 = [(HMDHomeManager *)self wifiManagerFactory];
        id v30 = v29[2]();
        __int16 v31 = [(HMDSharedUserInviteAcceptLogEventBuilder *)v25 initWithHomeUUID:v26 homeManager:self sessionIdentifier:v27 invitationType:v28 wifiManager:v30];

        id v32 = [v20 homeUUID];
        [(HMDHomeManager *)self addSharedUserAcceptEventBuilder:v31 forHomeUuid:v32];

        char v33 = (void *)MEMORY[0x230FBD990]();
        id v34 = self;
        id v35 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          int v36 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          BOOL v103 = v36;
          _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_INFO, "%{public}@Creating HH2 controller key before accepting owner's cloud share", buf, 0xCu);
        }
        id v37 = [MEMORY[0x263F35AD0] systemStore];
        char v38 = [v37 getOrCreateHH2ControllerKey:0 secretKey:0 keyPair:0 username:0];

        if (v38)
        {
          uint64_t v39 = [HMDCoreDataCloudShareInvitation alloc];
          __int16 v40 = [v20 shareURL];
          uint64_t v41 = [v20 shareToken];
          id v42 = [(HMDCoreDataCloudShareInvitation *)v39 initWithURL:v40 token:v41];

          [(HMDSharedUserInviteAcceptLogEventBuilder *)v31 markJoinOwnerShareBegin];
          __int16 v76 = [(HMDHomeManager *)v34 homeSharedUserCloudShareManager];
          uint64_t v75 = [v20 homeUUID];
          uint64_t v74 = [v76 acceptShareInvitation:v42 homeWithHomeModelID:v75];
          [(HMDHomeManager *)v34 workContext];
          v43 = uint64_t v77 = v31;
          v94[0] = MEMORY[0x263EF8330];
          v94[1] = 3221225472;
          v94[2] = __112__HMDHomeManager__processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke;
          v94[3] = &unk_264A2BAC8;
          v94[4] = v34;
          id v95 = v20;
          BOOL v96 = v77;
          uint64_t v99 = 3;
          id v16 = v83;
          id v97 = v83;
          id v18 = v79;
          id v98 = v79;
          v90[0] = MEMORY[0x263EF8330];
          v90[1] = 3221225472;
          v90[2] = __112__HMDHomeManager__processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke_1192;
          v90[3] = &unk_264A2BAF0;
          v90[4] = v34;
          id v91 = v95;
          BOOL v92 = v96;
          id v93 = v98;
          id v44 = (id)[v74 inContext:v43 then:v94 orRecover:v90];

          id v45 = v77;
          id v15 = v85;
          id v14 = v87;
        }
        else
        {
          __int16 v69 = v31;
          id v70 = (void *)MEMORY[0x230FBD990]();
          __int16 v71 = v34;
          id v72 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
          {
            uint64_t v73 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543362;
            BOOL v103 = v73;
            _os_log_impl(&dword_22F52A000, v72, OS_LOG_TYPE_ERROR, "%{public}@Failed to create HH2 controller key before accepting invitation", buf, 0xCu);
          }
          id v42 = [MEMORY[0x263F087E8] hmErrorWithCode:10];
          id v45 = v69;
          [(HMDSharedUserInviteLogEventBuilder *)v69 markError:v42];
          id v18 = v79;
          [v79 respondWithError:v42];
          id v15 = v85;
          id v14 = v87;
          id v16 = v83;
        }

        id v17 = v81;
      }
      else
      {
        [(HMDHomeManager *)self _processLocalRequestToUpdateHomeInvitation:v20 newState:a4 authStatus:v16 logEventBuilder:0];
        [v18 respondWithPayload:0];
      }
    }
    else
    {
      id v68 = [MEMORY[0x263F087E8] hmErrorWithCode:43];
      [v18 respondWithError:v68];
    }
  }
  else
  {
    __int16 v46 = v18;
    id v47 = (void *)MEMORY[0x230FBD990]();
    __int16 v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      uint64_t v50 = v49 = v17;
      id v51 = [v14 UUIDString];
      *(_DWORD *)long long buf = 138543618;
      BOOL v103 = v50;
      __int16 v104 = 2112;
      BOOL v105 = v51;
      _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_INFO, "%{public}@Invalid invite identifier specified %@", buf, 0x16u);

      id v17 = v49;
    }

    id v21 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
    id v18 = v46;
    [v46 respondWithError:v21];
  }
}

uint64_t __112__HMDHomeManager__processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    id v8 = [*(id *)(a1 + 40) homeName];
    id v9 = [*(id *)(a1 + 40) homeUUID];
    id v10 = [v9 UUIDString];
    int v12 = 138543874;
    id v13 = v7;
    __int16 v14 = 2112;
    id v15 = v8;
    __int16 v16 = 2112;
    id v17 = v10;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Joined cloud share successfully for invitation, continue to process invitation for home %@/%@", (uint8_t *)&v12, 0x20u);
  }
  [*(id *)(a1 + 48) markJoinOwnerShareEnd];
  [*(id *)(a1 + 32) _processLocalRequestToUpdateHomeInvitation:*(void *)(a1 + 40) newState:*(void *)(a1 + 72) authStatus:*(void *)(a1 + 56) logEventBuilder:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) _removeIncomingInvitation:*(void *)(a1 + 40)];
  [*(id *)(a1 + 64) respondWithPayload:0];

  return 1;
}

uint64_t __112__HMDHomeManager__processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke_1192(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v7 = HMFGetLogIdentifier();
    id v8 = [*(id *)(a1 + 40) homeName];
    id v9 = [*(id *)(a1 + 40) homeUUID];
    id v10 = [v9 UUIDString];
    int v14 = 138544130;
    id v15 = v7;
    __int16 v16 = 2112;
    id v17 = v8;
    __int16 v18 = 2112;
    id v19 = v10;
    __int16 v20 = 2112;
    id v21 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to accept cloud share for invitation home %@/%@ due to %@", (uint8_t *)&v14, 0x2Au);
  }
  [*(id *)(a1 + 48) markError:v3];
  id v11 = *(void **)(a1 + 56);
  int v12 = [MEMORY[0x263F087E8] hmErrorWithCode:-1];
  [v11 respondWithError:v12];

  return 1;
}

- (void)processRequestToUpdateHomeInvitation:(id)a3 invitationState:(int64_t)a4 homeUUID:(id)a5 authStatus:(id)a6 messageName:(id)a7 message:(id)a8
{
  id v14 = a3;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __111__HMDHomeManager_processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke;
  block[3] = &unk_264A2BAA0;
  void block[4] = self;
  id v26 = v14;
  id v30 = v18;
  int64_t v31 = a4;
  id v27 = v15;
  id v28 = v16;
  id v29 = v17;
  id v20 = v18;
  id v21 = v17;
  id v22 = v16;
  id v23 = v15;
  id v24 = v14;
  dispatch_async(v19, block);
}

uint64_t __111__HMDHomeManager_processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processRequestToUpdateHomeInvitation:*(void *)(a1 + 40) invitationState:*(void *)(a1 + 80) homeUUID:*(void *)(a1 + 48) authStatus:*(void *)(a1 + 56) messageName:*(void *)(a1 + 64) message:*(void *)(a1 + 72)];
}

- (void)_handleRequestToUpdateHomeInvitationFromLocalUser:(id)a3
{
  id v11 = a3;
  id v4 = [v11 uuidForKey:@"kInvitationIdentifierKey"];
  id v5 = [v11 numberForKey:@"kInvitationStateKey"];
  id v6 = [v11 uuidForKey:@"kHomeUUID"];
  id v7 = [MEMORY[0x263F0E8C8] authWithMessage:v11];
  if (v4 && v5 && v6)
  {
    uint64_t v8 = [v5 integerValue];
    id v9 = [v11 name];
    [(HMDHomeManager *)self _processRequestToUpdateHomeInvitation:v4 invitationState:v8 homeUUID:v6 authStatus:v7 messageName:v9 message:v11];
  }
  else
  {
    id v9 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:3 userInfo:0];
    id v10 = [v11 responseHandler];
    ((void (**)(void, void *, void))v10)[2](v10, v9, 0);
  }
}

- (void)_handleRequestToCancelHomeInvitation:(id)a3 saveReason:(id)a4
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 identifier];
  id v9 = [v8 UUIDString];

  id v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = self;
  int v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    id v14 = [v6 describeWithFormat];
    int v16 = 138543618;
    id v17 = v13;
    __int16 v18 = 2112;
    id v19 = v14;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Updating invitation %@ to canceled due to request from inviter", (uint8_t *)&v16, 0x16u);
  }
  id v15 = +[HMDBulletinBoard sharedBulletinBoard];
  [v15 removeBulletinWithRecordID:v9];

  [(HMDHomeManager *)v11 _postIncomingInvitationStateChangedNotification:v6 newInvitationState:1];
  [(HMDHomeManager *)v11 _removeIncomingInvitation:v6];
}

- (void)_handleRequestToUpdateHomeInvitationFromInviter:(id)a3
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kInvitationIdentifierKey"];
  uint64_t v6 = [v4 numberForKey:@"kInvitationStateKey"];
  id v7 = (void *)v6;
  if (!v5 || !v6)
  {
    id v9 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:3 userInfo:0];
    [v4 respondWithError:v9];
    goto LABEL_12;
  }
  uint64_t v8 = [(HMDHomeManager *)self incomingInvitations];
  id v9 = objc_msgSend(v8, "hmf_firstObjectWithValue:forKeyPath:", v5, @"identifier");

  if (!v9)
  {
    id v11 = (void *)MEMORY[0x230FBD990]();
    int v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      id v14 = [v5 UUIDString];
      int v19 = 138543618;
      uint64_t v20 = v13;
      __int16 v21 = 2112;
      id v22 = v14;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Invalid invite identifier specified %@", (uint8_t *)&v19, 0x16u);
    }
    id v15 = (void *)MEMORY[0x263F087E8];
    uint64_t v16 = *MEMORY[0x263F0C710];
    uint64_t v17 = 2;
    goto LABEL_11;
  }
  if ([v7 integerValue] != 1)
  {
    id v15 = (void *)MEMORY[0x263F087E8];
    uint64_t v16 = *MEMORY[0x263F0C710];
    uint64_t v17 = 43;
LABEL_11:
    __int16 v18 = [v15 errorWithDomain:v16 code:v17 userInfo:0];
    [v4 respondWithError:v18];

    goto LABEL_12;
  }
  id v10 = [v4 name];
  [(HMDHomeManager *)self _handleRequestToCancelHomeInvitation:v9 saveReason:v10];

LABEL_12:
}

- (void)_pruneExpiredIncomingInvitations
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v2 = [(HMDHomeManager *)self incomingInvitations];
  id v3 = (void *)[v2 copy];

  id obj = v3;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v26 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v28 != v26) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        uint64_t v8 = [MEMORY[0x263EFF910] date];
        id v9 = [v7 endDate];
        uint64_t v10 = [v8 compare:v9];

        if (v10 != -1)
        {
          [v7 updateInvitationState:6];
          id v11 = [v7 identifier];
          int v12 = (void *)MEMORY[0x230FBD990]();
          id v13 = self;
          id v14 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            id v15 = HMFGetLogIdentifier();
            uint64_t v16 = [v7 describeWithFormat];
            *(_DWORD *)long long buf = 138543618;
            id v32 = v15;
            __int16 v33 = 2112;
            id v34 = v16;
            _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Pruning invitation %@ as expired", buf, 0x16u);
          }
          uint64_t v17 = +[HMDBulletinBoard sharedBulletinBoard];
          __int16 v18 = [v11 UUIDString];
          [v17 removeBulletinWithRecordID:v18];

          -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v13, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v7, [v7 invitationState]);
          int v19 = (void *)MEMORY[0x230FBD990]([(HMDHomeManager *)v13 _removeIncomingInvitation:v7]);
          uint64_t v20 = v13;
          __int16 v21 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            id v22 = HMFGetLogIdentifier();
            uint64_t v23 = [(HMDHomeManager *)v20 incomingInvitations];
            *(_DWORD *)long long buf = 138543618;
            id v32 = v22;
            __int16 v33 = 2112;
            id v34 = v23;
            _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Incoming invitations after pruning: %@", buf, 0x16u);
          }
        }
      }
      uint64_t v5 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
    }
    while (v5);
  }
}

- (int64_t)numberOfPendingIncomingInvitation
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v2 = [(HMDHomeManager *)self incomingInvitations];
  id v3 = (void *)[v2 copy];

  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    int64_t v6 = 0;
    uint64_t v7 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v3);
        }
        if ([*(id *)(*((void *)&v10 + 1) + 8 * i) invitationState] == 2) {
          ++v6;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
  else
  {
    int64_t v6 = 0;
  }

  return v6;
}

- (HMDSharedUserPrivateSettingsManager)sharedUserPrivateSettingsManager
{
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  sharedUserPrivateSettingsManager = self->_sharedUserPrivateSettingsManager;
  if (!sharedUserPrivateSettingsManager)
  {
    uint64_t v5 = [HMDSharedUserPrivateSettingsManager alloc];
    int64_t v6 = +[HMDCoreData sharedInstance];
    uint64_t v7 = +[HMDCoreDataCloudTransform sharedInstance];
    uint64_t v8 = [(HMDSharedUserPrivateSettingsManager *)v5 initWithCoreData:v6 cloudTransform:v7 homeManager:self];
    id v9 = self->_sharedUserPrivateSettingsManager;
    self->_sharedUserPrivateSettingsManager = v8;

    sharedUserPrivateSettingsManager = self->_sharedUserPrivateSettingsManager;
  }
  long long v10 = sharedUserPrivateSettingsManager;
  os_unfair_lock_unlock(p_lock);
  return v10;
}

- (void)setHomeSharedUserCloudShareManager:(id)a3
{
  uint64_t v4 = (HMDHomeSharedUserCloudShareManager *)a3;
  os_unfair_lock_lock_with_options();
  homeSharedUserCloudShareManager = self->_homeSharedUserCloudShareManager;
  self->_homeSharedUserCloudShareManager = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (HMDHomeSharedUserCloudShareManager)homeSharedUserCloudShareManager
{
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  homeSharedUserCloudShareManager = self->_homeSharedUserCloudShareManager;
  if (!homeSharedUserCloudShareManager)
  {
    uint64_t v5 = +[HMDCoreData sharedInstance];
    int64_t v6 = [HMDHomeSharedUserCloudShareManager alloc];
    uint64_t v7 = [v5 container];
    uint64_t v8 = [v5 cloudSharedStore];
    id v9 = [v5 cloudPrivateStore];
    long long v10 = (void *)[v5 newManagedObjectContext];
    long long v11 = [(HMDHomeSharedUserCloudShareManager *)v6 initWithContainer:v7 sharedStore:v8 privateStore:v9 moc:v10];
    long long v12 = self->_homeSharedUserCloudShareManager;
    self->_homeSharedUserCloudShareManager = v11;

    homeSharedUserCloudShareManager = self->_homeSharedUserCloudShareManager;
  }
  long long v13 = homeSharedUserCloudShareManager;
  os_unfair_lock_unlock(p_lock);
  return v13;
}

- (void)setHomeOwnerCloudShareManager:(id)a3
{
  uint64_t v4 = (HMDHomeOwnerCloudShareManager *)a3;
  os_unfair_lock_lock_with_options();
  homeOwnerCloudShareManager = self->_homeOwnerCloudShareManager;
  self->_homeOwnerCloudShareManager = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (HMDHomeOwnerCloudShareManager)homeOwnerCloudShareManager
{
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  homeOwnerCloudShareManager = self->_homeOwnerCloudShareManager;
  if (!homeOwnerCloudShareManager)
  {
    uint64_t v5 = +[HMDCoreData sharedInstance];
    int64_t v6 = [HMDHomeOwnerCloudShareManager alloc];
    uint64_t v7 = [v5 container];
    uint64_t v8 = [v5 cloudSharedStore];
    id v9 = [v5 cloudPrivateStore];
    long long v10 = (void *)[v5 newManagedObjectContext];
    long long v11 = +[HMDCoreDataCloudTransform sharedInstance];
    long long v12 = [(HMDHomeOwnerCloudShareManager *)v6 initWithContainer:v7 sharedStore:v8 privateStore:v9 moc:v10 cloudTransform:v11 homeManager:self];
    long long v13 = self->_homeOwnerCloudShareManager;
    self->_homeOwnerCloudShareManager = v12;

    homeOwnerCloudShareManager = self->_homeOwnerCloudShareManager;
  }
  id v14 = homeOwnerCloudShareManager;
  os_unfair_lock_unlock(p_lock);
  return v14;
}

- (void)auditAccessForUsersForHome:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __45__HMDHomeManager_auditAccessForUsersForHome___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __45__HMDHomeManager_auditAccessForUsersForHome___block_invoke(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _homeWithUUID:*(void *)(a1 + 40)];
  [v1 auditAccessForUsers];
}

- (void)_removeIncomingInvitation:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = [(HMDHomeManager *)self backingStore];
    id v6 = [v5 context];
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 3221225472;
    void v14[2] = __44__HMDHomeManager__removeIncomingInvitation___block_invoke;
    v14[3] = &unk_264A2F7F8;
    id v7 = v4;
    id v15 = v7;
    [v6 performBlock:v14];

    os_unfair_lock_lock_with_options();
    id v8 = [(HMDHomeManager *)self incomingInvitations];
    [v8 removeObject:v7];

    os_unfair_lock_unlock(&self->_lock);
    [(HMDHomeManager *)self _updateIncomingInvitesPresent];
    id v9 = v15;
  }
  else
  {
    long long v10 = (void *)MEMORY[0x230FBD990]();
    long long v11 = self;
    long long v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      long long v13 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v17 = v13;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Unexpected nil invitation", buf, 0xCu);
    }
    id v9 = +[HMDTTRManager sharedManager];
    [v9 requestRadarWithDisplayReason:@"nil invitation detected" radarTitle:@"Unexpected nil invitation detected" componentName:@"HomeKit" componentVersion:@"Users+Invitations" componentID:938670];
  }
}

void __44__HMDHomeManager__removeIncomingInvitation___block_invoke(uint64_t a1)
{
  id v10 = +[HMCContext currentContext];
  uint64_t v2 = [v10 findHomeManagerWithError:0];
  if (v2)
  {
    id v3 = (void *)v2;
    id v4 = [*(id *)(a1 + 32) identifier];
    uint64_t v5 = [v3 findIncomingInvitationsRelationWithModelID:v4];

    id v6 = v10;
    if (v5)
    {
      [v10 deleteObject:v5];
      id v6 = v10;
    }
    [v6 save];
  }
  else
  {
    id v7 = (HMDHomeManager *)_HMFPreconditionFailure();
    [(HMDHomeManager *)v7 _addIncomingInvitation:v9];
  }
}

- (void)_addIncomingInvitation:(id)a3
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self backingStore];
  id v6 = [v5 context];
  uint64_t v16 = MEMORY[0x263EF8330];
  uint64_t v17 = 3221225472;
  uint64_t v18 = __41__HMDHomeManager__addIncomingInvitation___block_invoke;
  int v19 = &unk_264A2F820;
  id v7 = v4;
  id v20 = v7;
  __int16 v21 = self;
  [v6 performBlock:&v16];

  p_lock = &self->_lock;
  uint64_t v9 = os_unfair_lock_lock_with_options();
  id v10 = (void *)MEMORY[0x230FBD990](v9);
  long long v11 = self;
  HMFGetOSLogHandle();
  long long v12 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    id v14 = objc_msgSend(v7, "describeWithFormat", v16, v17, v18, v19);
    *(_DWORD *)long long buf = 138543618;
    id v23 = v13;
    __int16 v24 = 2112;
    id v25 = v14;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Added the invitation object to the list : %@", buf, 0x16u);
  }
  id v15 = [(HMDHomeManager *)v11 incomingInvitations];
  [v15 addObject:v7];

  os_unfair_lock_unlock(p_lock);
  [(HMDHomeManager *)v11 _updateIncomingInvitesPresent];
}

void __41__HMDHomeManager__addIncomingInvitation___block_invoke(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v2 = +[HMCContext currentContext];
  uint64_t v3 = [v2 findHomeManagerWithError:0];
  if (!v3) {
    _HMFPreconditionFailure();
  }
  id v4 = (void *)v3;
  uint64_t v5 = [*(id *)(a1 + 32) identifier];
  id v6 = [v4 materializeOrCreateIncomingInvitationsRelationWithModelID:v5 createdNew:0];

  id v7 = [*(id *)(a1 + 32) idsInvitationUUID];
  [v6 setIdsIdentifier:v7];

  SEL v8 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "invitationState"));
  [v6 setInvitationState:v8];

  uint64_t v9 = [*(id *)(a1 + 32) endDate];
  [v6 setExpiryDate:v9];

  id v10 = [*(id *)(a1 + 32) homeName];
  [v6 setHomeName:v10];

  long long v11 = [*(id *)(a1 + 32) homeUUID];
  [v6 setHomeModelID:v11];

  long long v12 = [*(id *)(a1 + 32) inviterMergeID];
  [v6 setInviterMergeID:v12];

  id v13 = [*(id *)(a1 + 32) inviterIdentity];
  id v14 = [v13 identifier];
  [v6 setInviterPairingIdentifier:v14];

  id v15 = [*(id *)(a1 + 32) inviterIdentity];
  uint64_t v16 = [v15 publicKey];
  uint64_t v17 = [v16 data];
  [v6 setInviterPairingPublicKey:v17];

  uint64_t v18 = [*(id *)(a1 + 32) inviterUserID];
  [v6 setInviterUserID:v18];

  int v19 = [*(id *)(a1 + 32) shareURL];
  [v6 setShareURL:v19];

  id v20 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "homeHasCameras"));
  [v6 setHomeHasCameras:v20];

  __int16 v21 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "inviteePrivilege"));
  [v6 setInviteePrivilege:v21];

  id v22 = [*(id *)(a1 + 32) restrictedGuestSchedule];
  [v6 populateWorkingStoreFromRestrictedGuestSchedule:v22];

  id v23 = (void *)MEMORY[0x230FBD990]();
  id v24 = *(id *)(a1 + 40);
  id v25 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    uint64_t v26 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v37 = v26;
    _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_INFO, "%{public}@Adding RG payload to invitation and running CD transaction", buf, 0xCu);
  }
  long long v27 = (void *)MEMORY[0x263F08910];
  long long v28 = [*(id *)(a1 + 32) shareToken];
  id v35 = 0;
  long long v29 = [v27 archivedDataWithRootObject:v28 requiringSecureCoding:1 error:&v35];
  id v30 = v35;

  if (v30)
  {
    int64_t v31 = (void *)MEMORY[0x230FBD990]();
    id v32 = *(id *)(a1 + 40);
    __int16 v33 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      id v34 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v37 = v34;
      __int16 v38 = 2112;
      id v39 = v30;
      _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_ERROR, "%{public}@Archiving share token on invitation failed with error %@", buf, 0x16u);
    }
  }
  [v6 setShareToken:v29];
  [v2 save];
}

- (void)_handleGetTLVForJSON:(id)a3
{
  v12[1] = *MEMORY[0x263EF8340];
  id v3 = a3;
  id v4 = [v3 dataForKey:*MEMORY[0x263F0CB40]];
  if (v4)
  {
    id v10 = 0;
    uint64_t v5 = +[HMDNetworkRouterFirewallRuleManagerUtils dumpTLVsFromJSONData:v4 error:&v10];
    id v6 = v10;
    id v7 = v6;
    if (v5)
    {
      uint64_t v11 = *MEMORY[0x263F0CB48];
      v12[0] = v5;
      SEL v8 = [NSDictionary dictionaryWithObjects:v12 forKeys:&v11 count:1];
      [v3 respondWithPayload:v8];
    }
    else
    {
      if (!v6)
      {
        id v7 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      }
      [v3 respondWithError:v7];
    }
  }
  else
  {
    uint64_t v9 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    [v3 respondWithError:v9];
  }
}

- (void)_handleNetworkFirewallFetchCloudChangesRequest:(id)a3
{
  id v4 = a3;
  char v5 = [v4 BOOLForKey:*MEMORY[0x263F0D350]];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke;
  v7[3] = &unk_264A2BA78;
  char v9 = v5;
  id v8 = v4;
  id v6 = v4;
  [(HMDHomeManager *)self __startupFirewallRuleManagerForMessage:v6 completion:v7];
}

void __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 40);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  v4[2] = __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke_2;
  v4[3] = &unk_264A2BA50;
  id v5 = *(id *)(a1 + 32);
  [a2 forceFetchCloudChangesAndForceChangeNotifications:v3 completion:v4];
}

uint64_t __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (a2) {
    a3 = 0;
  }
  return [v3 respondWithPayload:0 error:a3];
}

- (void)_handleNetworkFirewallRemoveLocalRulesRequest:(id)a3
{
  id v4 = a3;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke;
  v6[3] = &unk_264A2BA28;
  id v7 = v4;
  id v5 = v4;
  [(HMDHomeManager *)self __startupFirewallRuleManagerForMessage:v5 completion:v6];
}

void __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke(uint64_t a1, void *a2)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  void v3[2] = __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke_2;
  v3[3] = &unk_264A2F3E8;
  id v4 = *(id *)(a1 + 32);
  [a2 removeAllLocalRulesWithCompletion:v3];
}

uint64_t __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)_handleNetworkFirewallDumpPairedMetadataRequest:(id)a3
{
  id v4 = a3;
  id v5 = [v4 stringForKey:*MEMORY[0x263F0D330]];
  id v6 = [v4 stringForKey:*MEMORY[0x263F0D338]];
  id v7 = [v4 stringForKey:*MEMORY[0x263F0D318]];
  char v8 = [v4 BOOLForKey:*MEMORY[0x263F0D320]];
  char v9 = [v4 BOOLForKey:*MEMORY[0x263F0D340]];
  if ((v5 != 0) != (v6 != 0)) {
    goto LABEL_8;
  }
  if (v7 && v6 == 0) {
    goto LABEL_8;
  }
  char v11 = v9;
  if (!v7)
  {
    long long v12 = 0;
    goto LABEL_11;
  }
  long long v12 = (void *)[objc_alloc(MEMORY[0x263F42670]) initWithVersionString:v7];
  if (v12)
  {
LABEL_11:
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    v15[2] = __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke;
    v15[3] = &unk_264A2BA00;
    id v16 = v4;
    id v17 = v5;
    id v18 = v6;
    id v19 = v12;
    char v20 = v8;
    char v21 = v11;
    id v14 = v12;
    [(HMDHomeManager *)self __startupFirewallRuleManagerForMessage:v16 completion:v15];

    goto LABEL_9;
  }
LABEL_8:
  id v13 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
  [v4 respondWithError:v13];

LABEL_9:
}

void __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke(uint64_t a1, void *a2)
{
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke_2;
  aBlock[3] = &unk_264A2B960;
  id v7 = *(id *)(a1 + 32);
  id v4 = a2;
  id v5 = _Block_copy(aBlock);
  [v4 dumpPairedMetadataForProductGroup:*(void *)(a1 + 40) productNumber:*(void *)(a1 + 48) firmwareVersion:*(void *)(a1 + 56) ignoreOverrides:*(unsigned __int8 *)(a1 + 64) rawOutput:*(unsigned __int8 *)(a1 + 65) completion:v5];
}

void __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  v19[1] = *MEMORY[0x263EF8340];
  id v5 = a2;
  if (v5)
  {
    id v6 = (void *)MEMORY[0x263F087E8];
    id v7 = a3;
    char v8 = [v5 domain];
    uint64_t v9 = [v5 code];
    uint64_t v18 = *MEMORY[0x263F08320];
    id v10 = [v5 debugDescription];
    v19[0] = v10;
    char v11 = [NSDictionary dictionaryWithObjects:v19 forKeys:&v18 count:1];
    long long v12 = [v6 errorWithDomain:v8 code:v9 userInfo:v11];

    [*(id *)(a1 + 32) respondWithError:v12];
  }
  else
  {
    id v13 = *(void **)(a1 + 32);
    uint64_t v16 = *MEMORY[0x263F0D348];
    id v17 = a3;
    id v14 = NSDictionary;
    id v15 = a3;
    long long v12 = [v14 dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    [v13 respondWithPayload:v12];
  }
}

- (void)_handleNetworkFirewallDumpLocalRulesRequest:(id)a3
{
  id v4 = a3;
  id v5 = [v4 stringForKey:*MEMORY[0x263F0D2F8]];
  id v6 = [v4 stringForKey:*MEMORY[0x263F0D300]];
  id v7 = [v4 stringForKey:*MEMORY[0x263F0D2E0]];
  char v8 = [v4 BOOLForKey:*MEMORY[0x263F0D2E8]];
  char v9 = [v4 BOOLForKey:*MEMORY[0x263F0D308]];
  if (v6) {
    BOOL v10 = v5 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10) {
    goto LABEL_11;
  }
  if (v7 && v6 == 0) {
    goto LABEL_11;
  }
  char v12 = v9;
  if (!v7)
  {
    id v13 = 0;
    goto LABEL_14;
  }
  id v13 = (void *)[objc_alloc(MEMORY[0x263F42670]) initWithVersionString:v7];
  if (v13)
  {
LABEL_14:
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 3221225472;
    v16[2] = __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke;
    v16[3] = &unk_264A2BA00;
    id v17 = v4;
    id v18 = v6;
    id v19 = v5;
    id v20 = v13;
    char v21 = v8;
    char v22 = v12;
    id v15 = v13;
    [(HMDHomeManager *)self __startupFirewallRuleManagerForMessage:v17 completion:v16];

    goto LABEL_12;
  }
LABEL_11:
  id v14 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
  [v4 respondWithError:v14];

LABEL_12:
}

void __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke_2;
  aBlock[3] = &unk_264A2B960;
  id v8 = *(id *)(a1 + 32);
  id v4 = _Block_copy(aBlock);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  if (v6)
  {
    [v3 dumpLocalRulesForProductGroup:v5 productNumber:v6 firmwareVersion:*(void *)(a1 + 56) ignoreOverrides:*(unsigned __int8 *)(a1 + 64) rawOutput:*(unsigned __int8 *)(a1 + 65) completion:v4];
  }
  else if (v5)
  {
    objc_msgSend(v3, "dumpLocalRulesForProductGroup:ignoreOverrides:rawOutput:completion:");
  }
  else
  {
    [v3 dumpAllLocalRulesIgnoringOverrides:*(unsigned __int8 *)(a1 + 64) != 0 rawOutput:*(unsigned __int8 *)(a1 + 65) != 0 completion:v4];
  }
}

void __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  v19[1] = *MEMORY[0x263EF8340];
  id v5 = a2;
  if (v5)
  {
    uint64_t v6 = (void *)MEMORY[0x263F087E8];
    id v7 = a3;
    id v8 = [v5 domain];
    uint64_t v9 = [v5 code];
    uint64_t v18 = *MEMORY[0x263F08320];
    BOOL v10 = [v5 debugDescription];
    v19[0] = v10;
    char v11 = [NSDictionary dictionaryWithObjects:v19 forKeys:&v18 count:1];
    char v12 = [v6 errorWithDomain:v8 code:v9 userInfo:v11];

    [*(id *)(a1 + 32) respondWithError:v12];
  }
  else
  {
    id v13 = *(void **)(a1 + 32);
    uint64_t v16 = *MEMORY[0x263F0D310];
    id v17 = a3;
    id v14 = NSDictionary;
    id v15 = a3;
    char v12 = [v14 dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    [v13 respondWithPayload:v12];
  }
}

- (void)_handleNetworkFirewallRemoveOverridesRequest:(id)a3
{
  id v4 = a3;
  id v5 = [v4 stringForKey:*MEMORY[0x263F0D370]];
  uint64_t v6 = [v4 stringForKey:*MEMORY[0x263F0D378]];
  if (v6) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    id v8 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v4 respondWithError:v8];
  }
  else
  {
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    v9[2] = __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke;
    v9[3] = &unk_264A2B9D8;
    id v10 = v4;
    id v11 = v5;
    id v12 = v6;
    [(HMDHomeManager *)self __startupFirewallRuleManagerForMessage:v10 completion:v9];
  }
}

void __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke(uint64_t a1, void *a2)
{
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke_2;
  aBlock[3] = &unk_264A2F3E8;
  id v8 = *(id *)(a1 + 32);
  id v4 = a2;
  id v5 = _Block_copy(aBlock);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    [v4 removeOverridesForProductGroup:v6 productNumber:*(void *)(a1 + 48) completion:v5];
  }
  else {
    [v4 removeAllOverridesWithCompletion:v5];
  }
}

uint64_t __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)_handleNetworkFirewallAddOverridesRequest:(id)a3
{
  id v4 = a3;
  id v5 = [v4 dataForKey:*MEMORY[0x263F0D290]];
  if (v5)
  {
    char v6 = [v4 BOOLForKey:*MEMORY[0x263F0D2A0]];
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3221225472;
    void v8[2] = __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke;
    v8[3] = &unk_264A2B9B0;
    id v9 = v4;
    char v11 = v6;
    id v10 = v5;
    [(HMDHomeManager *)self __startupFirewallRuleManagerForMessage:v9 completion:v8];
  }
  else
  {
    BOOL v7 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v4 respondWithError:v7];
  }
}

void __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke(uint64_t a1, void *a2)
{
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke_2;
  aBlock[3] = &unk_264A2F3E8;
  id v8 = *(id *)(a1 + 32);
  id v4 = a2;
  id v5 = _Block_copy(aBlock);
  uint64_t v6 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 48)) {
    [v4 setOverrides:v6 completion:v5];
  }
  else {
    [v4 addOverrides:v6 completion:v5];
  }
}

uint64_t __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) respondWithPayload:0 error:a2];
}

- (void)_handleNetworkFirewallDumpCloudRecordsRequest:(id)a3
{
  id v4 = a3;
  id v5 = [v4 stringForKey:*MEMORY[0x263F0D2B8]];
  uint64_t v6 = [v4 stringForKey:*MEMORY[0x263F0D2C0]];
  char v7 = [v4 BOOLForKey:*MEMORY[0x263F0D2C8]];
  char v8 = [v4 BOOLForKey:*MEMORY[0x263F0D2A8]];
  char v9 = [v4 BOOLForKey:*MEMORY[0x263F0D2D8]];
  if (!v5 || [v5 length])
  {
    if (v6)
    {
      uint64_t v10 = [v6 length];
      if (v5) {
        char v11 = 1;
      }
      else {
        char v11 = v8;
      }
      if (v5) {
        BOOL v12 = v10 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12 || (v11 & 1) == 0) {
        goto LABEL_15;
      }
LABEL_16:
      v14[0] = MEMORY[0x263EF8330];
      v14[1] = 3221225472;
      void v14[2] = __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke;
      v14[3] = &unk_264A2B988;
      id v15 = v4;
      char v18 = v8;
      id v16 = v5;
      char v19 = v7;
      id v17 = v6;
      char v20 = v9;
      [(HMDHomeManager *)self __startupFirewallRuleManagerForMessage:v15 completion:v14];

      goto LABEL_17;
    }
    if (v5 || (v8 & 1) != 0) {
      goto LABEL_16;
    }
  }
LABEL_15:
  id v13 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
  [v4 respondWithError:v13];

LABEL_17:
}

void __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke(uint64_t a1, void *a2)
{
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke_2;
  aBlock[3] = &unk_264A2B960;
  id v8 = *(id *)(a1 + 32);
  id v4 = a2;
  id v5 = _Block_copy(aBlock);
  uint64_t v6 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 56)) {
    [v4 listCloudRecordsForProductGroup:v6 rawOutput:*(unsigned __int8 *)(a1 + 57) completion:v5];
  }
  else {
    [v4 dumpCloudRecordsForProductGroup:v6 productNumber:*(void *)(a1 + 48) rawOutput:*(unsigned __int8 *)(a1 + 57) verifySignatures:*(unsigned __int8 *)(a1 + 58) completion:v5];
  }
}

void __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  v19[1] = *MEMORY[0x263EF8340];
  id v5 = a2;
  if (v5)
  {
    uint64_t v6 = (void *)MEMORY[0x263F087E8];
    id v7 = a3;
    id v8 = [v5 domain];
    uint64_t v9 = [v5 code];
    uint64_t v18 = *MEMORY[0x263F08320];
    uint64_t v10 = [v5 debugDescription];
    v19[0] = v10;
    char v11 = [NSDictionary dictionaryWithObjects:v19 forKeys:&v18 count:1];
    BOOL v12 = [v6 errorWithDomain:v8 code:v9 userInfo:v11];

    [*(id *)(a1 + 32) respondWithError:v12];
  }
  else
  {
    id v13 = *(void **)(a1 + 32);
    uint64_t v16 = *MEMORY[0x263F0D2D0];
    id v17 = a3;
    id v14 = NSDictionary;
    id v15 = a3;
    BOOL v12 = [v14 dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    [v13 respondWithPayload:v12];
  }
}

- (void)__startupFirewallRuleManagerForMessage:(id)a3 completion:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [HMDTransientRuleManagerClient alloc];
  uint64_t v9 = [v6 identifier];
  uint64_t v10 = [v9 UUIDString];
  char v11 = [(HMDTransientRuleManagerClient *)v8 initWithDescription:v10];

  BOOL v12 = +[HMDNetworkRouterFirewallRuleManager sharedInstance];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke;
  v17[3] = &unk_264A2B938;
  void v17[4] = self;
  id v18 = v6;
  id v19 = v12;
  char v20 = v11;
  id v21 = v7;
  id v13 = v7;
  id v14 = v11;
  id v15 = v12;
  id v16 = v6;
  [v15 startupForClient:v14 completion:v17];
}

void __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v16 = v7;
      __int16 v17 = 2112;
      id v18 = v3;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to start up rule manager: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 40) respondWithError:v3];
  }
  else
  {
    id v8 = [*(id *)(a1 + 40) responseHandler];
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke_1177;
    v11[3] = &unk_264A2B910;
    id v12 = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 56);
    id v14 = v8;
    uint64_t v9 = *(void **)(a1 + 40);
    id v10 = v8;
    [v9 setResponseHandler:v11];
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke_1177(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) shutdownForClient:*(void *)(a1 + 40)];
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

- (void)_logState:(id)a3 key:(id)a4 indent:(id)a5
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  char v11 = v10;
  if (v10) {
    [v10 indentationByLevels:1];
  }
  else {
  id v32 = [MEMORY[0x263F42640] indentation];
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v29 = v11;
    id v30 = v9;
    id v31 = v8;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id v12 = v8;
    uint64_t v13 = [v12 countByEnumeratingWithState:&v38 objects:v51 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v39;
      uint64_t v33 = *MEMORY[0x263F41FA8];
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v39 != v15) {
            objc_enumerationMutation(v12);
          }
          __int16 v17 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            if (([v17 isEqualToString:v33] & 1) == 0)
            {
              id v18 = [v12 objectForKey:v17];
              [(HMDHomeManager *)self _logState:v18 key:v17 indent:v32];
            }
          }
          else
          {
            uint64_t v19 = (void *)MEMORY[0x230FBD990]();
            char v20 = self;
            id v21 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              char v22 = HMFGetLogIdentifier();
              uint64_t v23 = objc_opt_class();
              *(_DWORD *)long long buf = 138544130;
              id v44 = v22;
              __int16 v45 = 2112;
              uint64_t v46 = v23;
              __int16 v47 = 2112;
              __int16 v48 = v17;
              __int16 v49 = 2112;
              id v50 = v12;
              _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@Cannot include key of non-NSString class %@: %@ in %@", buf, 0x2Au);
            }
          }
        }
        uint64_t v14 = [v12 countByEnumeratingWithState:&v38 objects:v51 count:16];
      }
      while (v14);
    }

    id v9 = v30;
    id v8 = v31;
    char v11 = v29;
LABEL_27:

    goto LABEL_28;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v24 = v8;
    uint64_t v25 = [v24 countByEnumeratingWithState:&v34 objects:v42 count:16];
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v27 = *(void *)v35;
      do
      {
        for (uint64_t j = 0; j != v26; ++j)
        {
          if (*(void *)v35 != v27) {
            objc_enumerationMutation(v24);
          }
          [(HMDHomeManager *)self _logState:*(void *)(*((void *)&v34 + 1) + 8 * j) key:v9 indent:v11];
        }
        uint64_t v26 = [v24 countByEnumeratingWithState:&v34 objects:v42 count:16];
      }
      while (v26);
    }
    goto LABEL_27;
  }
LABEL_28:
}

- (void)_dumpToLog:(id)a3 withState:(id)a4
{
  id v6 = a4;
  [(HMDHomeManager *)self _logState:a3 key:0 indent:0];
  [(HMDHomeManager *)self _logState:v6 key:0 indent:0];
}

- (id)_destinationFromMessage:(id)a3
{
  id v4 = a3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __42__HMDHomeManager__destinationFromMessage___block_invoke;
  aBlock[3] = &unk_264A2B8C0;
  void aBlock[4] = self;
  id v5 = v4;
  id v25 = v5;
  id v6 = (void (**)(void *, __CFString *))_Block_copy(aBlock);
  id v7 = [v5 uuidForKey:@"HomeUtilRemoteMessageTargetKey"];
  if (v7)
  {
    id v8 = [v5 stringForKey:@"HomeUtilRemoteMessageDestinationKey"];
    if (v8)
    {
      id v9 = +[HMDDeviceHandle deviceHandleForDestination:v8];
      if (v9)
      {
        id v10 = [(HMDHomeManager *)self accountRegistry];
        char v11 = [v10 deviceForHandle:v9];

        id v12 = [[HMDRemoteDeviceMessageDestination alloc] initWithTarget:v7 device:v11];
      }
      else
      {
        char v11 = +[HMDAccountHandle accountHandleForDestination:v8];
        if (v11)
        {
          uint64_t v13 = [v5 dictionaryForKey:@"HomeUtilRemoteMessageDeviceCapabilitiesKey"];
          id v12 = [[HMDRemoteAccountMessageDestination alloc] initWithTarget:v7 handle:v11 multicast:v13 == 0 deviceCapabilities:v13];
        }
        else
        {
          uint64_t v13 = [v8 componentsSeparatedByString:@":"];
          if ((unint64_t)[v13 count] >= 2
            && ([v13 objectAtIndexedSubscript:0],
                uint64_t v14 = objc_claimAutoreleasedReturnValue(),
                int v15 = [v14 isEqualToString:@"home"],
                v14,
                v15))
          {
            id v16 = objc_alloc(MEMORY[0x263F08C38]);
            __int16 v17 = [v13 objectAtIndexedSubscript:1];
            id v18 = (void *)[v16 initWithUUIDString:v17];

            if (v18)
            {
              if ((unint64_t)[v13 count] < 3)
              {
                id v12 = [[HMDRemoteHomeMessageDestination alloc] initWithTarget:v7 homeUUID:v18];
              }
              else
              {
                id v19 = objc_alloc_init(MEMORY[0x263F08A30]);
                [v19 setNumberStyle:1];
                char v20 = [v13 objectAtIndexedSubscript:2];
                uint64_t v23 = v19;
                id v21 = [v19 numberFromString:v20];

                if (v21)
                {
                  id v12 = [[HMDRemoteHomeMessageDestination alloc] initWithTarget:v7 homeUUID:v18 queueTimeout:v21];
                }
                else
                {
                  v6[2](v6, @"Home destination queueTimeout is not a valid number");
                  id v12 = 0;
                }
              }
            }
            else
            {
              v6[2](v6, @"Home destination has an invalid homeUUID");
              id v12 = 0;
            }
          }
          else
          {
            v6[2](v6, @"Unknown device, account or home destination");
            id v12 = 0;
          }
        }
      }
    }
    else
    {
      v6[2](v6, @"Remote destination string is missing");
      id v12 = 0;
    }
  }
  else
  {
    v6[2](v6, @"Target UUID is missing");
    id v12 = 0;
  }

  return v12;
}

void __42__HMDHomeManager__destinationFromMessage___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v7 = HMFGetLogIdentifier();
    int v10 = 138543618;
    char v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@HomeUtilRemoteMessageRequest: Invalid parameter: %@", (uint8_t *)&v10, 0x16u);
  }
  id v8 = *(void **)(a1 + 40);
  id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:3 description:v3 reason:0 suggestion:0];
  [v8 respondWithError:v9];
}

- (void)_handleClearMobileAssetsInfoRequest:(id)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v19 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Received request to clear mobile assets info", buf, 0xCu);
  }
  id v9 = [(HMDHomeManager *)v6 mobileAssetManager];

  if (v9)
  {
    int v10 = [(HMDHomeManager *)v6 mobileAssetManager];
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 3221225472;
    v16[2] = __54__HMDHomeManager__handleClearMobileAssetsInfoRequest___block_invoke;
    v16[3] = &unk_264A2F3E8;
    id v17 = v4;
    [v10 clearLocalInfoWithCompletion:v16];

    char v11 = v17;
  }
  else
  {
    __int16 v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = v6;
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v15 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v19 = v15;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@No mobile asset manager, bailing", buf, 0xCu);
    }
    char v11 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v4 respondWithError:v11];
  }
}

uint64_t __54__HMDHomeManager__handleClearMobileAssetsInfoRequest___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 respondWithError:a2];
  }
  else {
    return [v2 respondWithSuccess];
  }
}

- (void)_handleUpdateMobileAssetsRequest:(id)a3
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v20 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Received request to update mobile assets", buf, 0xCu);
  }
  id v9 = [(HMDHomeManager *)v6 mobileAssetManager];

  if (v9)
  {
    uint64_t v10 = [v4 BOOLForKey:*MEMORY[0x263F0CAD8]];
    char v11 = [(HMDHomeManager *)v6 mobileAssetManager];
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 3221225472;
    v17[2] = __51__HMDHomeManager__handleUpdateMobileAssetsRequest___block_invoke;
    v17[3] = &unk_264A2B8E8;
    void v17[4] = v6;
    id v18 = v4;
    [v11 updateAssetsWithForce:v10 completion:v17];
  }
  else
  {
    __int16 v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = v6;
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v15 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v20 = v15;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@No mobile asset manager, bailing", buf, 0xCu);
    }
    id v16 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v4 respondWithError:v16];
  }
}

void __51__HMDHomeManager__handleUpdateMobileAssetsRequest___block_invoke(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v7 = a4;
  if (!v7)
  {
    __int16 v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = *(id *)(a1 + 32);
    uint64_t v14 = HMFGetOSLogHandle();
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
    if (a3 | a2)
    {
      if (v15)
      {
        id v16 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543874;
        uint64_t v27 = v16;
        __int16 v28 = 2048;
        unint64_t v29 = a2;
        __int16 v30 = 2048;
        uint64_t v31 = a3;
        id v17 = "%{public}@Updating mobile assets succeeded, old version %lu, new version %lu";
        id v18 = v14;
        uint32_t v19 = 32;
LABEL_10:
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, v17, buf, v19);
      }
    }
    else if (v15)
    {
      id v16 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v27 = v16;
      id v17 = "%{public}@Updating mobile assets succeeded and didn't find any updates";
      id v18 = v14;
      uint32_t v19 = 12;
      goto LABEL_10;
    }

    uint64_t v20 = *(void **)(a1 + 40);
    uint64_t v21 = objc_msgSend(NSNumber, "numberWithInteger:", a2, *MEMORY[0x263F0CBA0]);
    v25[0] = v21;
    v24[1] = *MEMORY[0x263F0CB98];
    char v22 = [NSNumber numberWithInteger:a3];
    v25[1] = v22;
    uint64_t v23 = [NSDictionary dictionaryWithObjects:v25 forKeys:v24 count:2];
    [v20 respondWithPayload:v23];

    goto LABEL_12;
  }
  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = *(id *)(a1 + 32);
  uint64_t v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    char v11 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v27 = v11;
    __int16 v28 = 2112;
    unint64_t v29 = (unint64_t)v7;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_ERROR, "%{public}@Updating mobile assets failed with error: %@", buf, 0x16u);
  }
  [*(id *)(a1 + 40) respondWithError:v7];
LABEL_12:
}

- (void)_handleHomeUtilRemoteMessageRequest:(id)a3
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v4 = a3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke;
  aBlock[3] = &unk_264A2B8C0;
  void aBlock[4] = self;
  id v5 = v4;
  id v29 = v5;
  id v6 = (void (**)(void *, __CFString *))_Block_copy(aBlock);
  id v7 = [v5 stringForKey:@"HomeUtilRemoteMessageMessageNameKey"];
  if (v7)
  {
    id v8 = [(HMDHomeManager *)self _destinationFromMessage:v5];
    if (v8)
    {
      id v9 = [v5 dictionaryForKey:@"HomeUtilRemoteMessagePayloadKey"];
      uint64_t v10 = [v5 numberForKey:@"HomeUtilRemoteMessageRestrictionKey"];
      id v24 = v10;
      if (v10) {
        uint64_t v11 = [v10 unsignedIntegerValue];
      }
      else {
        uint64_t v11 = -1;
      }
      uint64_t v12 = [v5 BOOLForKey:@"HomeUtilRemoteMessageIsSecureKey"];
      int v13 = [v5 BOOLForKey:@"HomeUtilRemoteMessageIsOnewayKey"];
      char v14 = v13;
      if (v13) {
        uint64_t v15 = 3;
      }
      else {
        uint64_t v15 = 0;
      }
      id v16 = [[HMDRemoteMessage alloc] initWithName:v7 destination:v8 payload:v9 type:v15 timeout:v12 secure:v11 restriction:0.0];
      if ((v14 & 1) == 0)
      {
        id v17 = [v5 responseHandler];
        [(HMDRemoteMessage *)v16 setResponseHandler:v17];
      }
      id v18 = (void *)MEMORY[0x230FBD990]();
      uint32_t v19 = self;
      uint64_t v20 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v21 = uint64_t v23 = v9;
        *(_DWORD *)long long buf = 138543618;
        uint64_t v31 = v21;
        __int16 v32 = 2112;
        uint64_t v33 = v16;
        _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@HomeUtilRemoteMessageRequest: Sending message: %@", buf, 0x16u);

        id v9 = v23;
      }

      char v22 = [(HMDHomeManager *)v19 messageDispatcher];
      v25[0] = MEMORY[0x263EF8330];
      v25[1] = 3221225472;
      void v25[2] = __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke_1147;
      v25[3] = &unk_264A2F320;
      uint64_t v27 = v15;
      id v26 = v5;
      [v22 sendMessage:v16 completionHandler:v25];
    }
  }
  else
  {
    v6[2](v6, @"Message name is missing");
  }
}

void __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v7 = HMFGetLogIdentifier();
    int v10 = 138543618;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@HomeUtilRemoteMessageRequest: Invalid parameter: %@", (uint8_t *)&v10, 0x16u);
  }
  id v8 = *(void **)(a1 + 40);
  id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:3 description:v3 reason:0 suggestion:0];
  [v8 respondWithError:v9];
}

uint64_t __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke_1147(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 40) == 3) {
    return [*(id *)(result + 32) respondWithPayload:0 error:a2];
  }
  return result;
}

- (void)_handleTestModeConfigRequest:(id)a3
{
  id v7 = a3;
  id v4 = [v7 dictionaryForKey:@"kConfigTestingOverrideKey"];
  id v5 = [(HMDHomeManager *)self _processTestModeConfiguration:v4];

  if (v5)
  {
    [v7 respondWithError:v5];
  }
  else
  {
    id v6 = [(HMDHomeManager *)self accessoryBrowserInternal];
    [v6 _handleTestModeConfigRequest:v7];
  }
}

- (id)_processTestModeConfiguration:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    id v6 = objc_msgSend(v4, "hmf_dictionaryForKey:", @"kConfigTestingOverrideCurrentHomeKey");
    id v7 = [(HMDHomeManager *)self _processTestModeCurrentHomeOverride:v6];

    if (!v7)
    {
      id v8 = objc_msgSend(v5, "hmf_dictionaryForKey:", @"kConfigTestingOverrideHomeLocationStatusKey");
      id v7 = [(HMDHomeManager *)self _processTestModeHomeLocationStatusOverride:v8];

      if (!v7)
      {
        id v9 = objc_msgSend(v5, "hmf_dictionaryForKey:", @"kConfigTestingOverrideHomeAccessControlKey");
        id v7 = [(HMDHomeManager *)self _processTestModeHomeAccessControlOverride:v9];

        if (!v7)
        {
          int v10 = objc_msgSend(v5, "hmf_dictionaryForKey:", @"kConfigTestingOverrideSkipHH2MigrationCheckDictionaryKey");
          id v7 = [(HMDHomeManager *)self _processTestModeSkipHH2MigrationOverride:v10];

          if (!v7)
          {
            uint64_t v11 = objc_msgSend(v5, "hmf_dictionaryForKey:", @"kConfigTestingUpdateHomeLocationKey");
            id v7 = [(HMDHomeManager *)self _processTestModeUpdateHomeLocation:v11];
          }
        }
      }
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

- (id)_processTestModeSkipHH2MigrationOverride:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    id v6 = objc_msgSend(v4, "hmf_UUIDForKey:", @"kHomeUUID");
    id v7 = [(HMDHomeManager *)self _homeWithUUID:v6];
    id v8 = v7;
    if (v7) {
      [v7 _processTestModeSkipHH2MigrationOverride:v5];
    }
    else {
    id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

- (id)_processTestModeHomeAccessControlOverride:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    id v6 = objc_msgSend(v4, "hmf_UUIDForKey:", @"kHomeUUID");
    id v7 = [(HMDHomeManager *)self _homeWithUUID:v6];
    id v8 = v7;
    if (v7)
    {
      id v9 = [v7 _processTestModeHomeAccessControlOverride:v5];
      if (!v9)
      {
        int v10 = [(HMDHomeManager *)self uuid];
        [(HMDHomeManager *)self updateGenerationCounterWithReason:@"kTestModeHomeAccessControlOverride" sourceUUID:v10 shouldNotifyClients:1];

        id v9 = 0;
      }
    }
    else
    {
      id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

- (id)_processTestModeUpdateHomeLocation:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    id v6 = objc_msgSend(v4, "hmf_UUIDForKey:", @"kHomeUUID");
    id v7 = [(HMDHomeManager *)self _homeWithUUID:v6];
    id v8 = v7;
    if (v7) {
      [v7 _processTestModeUpdateHomeLocation:v5];
    }
    else {
    id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

- (id)_processTestModeHomeLocationStatusOverride:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    id v6 = objc_msgSend(v4, "hmf_UUIDForKey:", @"kHomeUUID");
    id v7 = [(HMDHomeManager *)self _homeWithUUID:v6];
    id v8 = v7;
    if (v7) {
      [v7 _processTestModeHomeLocationStatusOverride:v5];
    }
    else {
    id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

- (id)_processTestModeCurrentHomeOverride:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (!v4)
  {
    id v6 = 0;
    goto LABEL_12;
  }
  if (objc_msgSend(v4, "hmf_BOOLForKey:", @"kConfigTestingResetOverrideKey"))
  {
    [(HMDHomeManager *)self setOverrideCurrentHomeUUIDToNil:0];
  }
  else
  {
    if (objc_msgSend(v5, "hmf_BOOLForKey:", @"kConfigTestingOverrideToNilKey"))
    {
      id v7 = [MEMORY[0x263F42508] BOOLeanWithBool:1];
      [(HMDHomeManager *)self setOverrideCurrentHomeUUIDToNil:v7];
    }
    else
    {
      id v7 = objc_msgSend(v5, "hmf_UUIDForKey:", @"kHomeUUID");
      uint64_t v8 = [(HMDHomeManager *)self _homeWithUUID:v7];
      if (!v8)
      {
        id v6 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
        goto LABEL_11;
      }
      id v9 = (void *)v8;
      [(HMDHomeManager *)self setCurrentHomeUUIDOverride:v7];
      int v10 = [MEMORY[0x263F42508] BOOLeanWithBool:0];
      [(HMDHomeManager *)self setOverrideCurrentHomeUUIDToNil:v10];
    }
  }
  id v7 = [(HMDHomeManager *)self __computedCurrentHomeUUID];
  [(HMDHomeManager *)self _notifyCurrentHomeUpdated:v7 isLocalUpdate:1];
  id v6 = 0;
LABEL_11:

LABEL_12:
  return v6;
}

- (void)finalizeRetailDemoModeWithAllowEditing:(BOOL)a3 completionHandler:(id)a4
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v5 = (void (**)(id, void, void *))a4;
  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = self;
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    id v9 = HMFGetLogIdentifier();
    int v11 = 138543362;
    __int16 v12 = v9;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@Demo mode is not supported in HH2", (uint8_t *)&v11, 0xCu);
  }
  int v10 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
  v5[2](v5, 0, v10);
}

- (void)configureRetailDemoModeWithKeyPair:(id)a3 controllerName:(id)a4 demoAccessories:(id)a5 completionHandler:(id)a6
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = (void (**)(id, void *))a6;
  uint64_t v14 = (void *)MEMORY[0x230FBD990]();
  uint64_t v15 = self;
  id v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    id v17 = HMFGetLogIdentifier();
    int v19 = 138543362;
    uint64_t v20 = v17;
    _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Demo mode is not supported in HH2", (uint8_t *)&v19, 0xCu);
  }
  id v18 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
  v13[2](v13, v18);
}

- (void)_handleSysdiagnoseRequest:(id)a3
{
}

- (id)_dumpHomeManagerData
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  id v85 = [MEMORY[0x263EFF9A0] dictionaryWithCapacity:7];
  id v3 = [MEMORY[0x263F089D8] string];
  uint64_t v83 = [MEMORY[0x263F086E0] mainBundle];
  id v4 = [v83 infoDictionary];
  id v5 = [v4 objectForKey:*MEMORY[0x263EFFB70]];
  [v3 appendFormat:@"homed: %@  ", v5];

  id v6 = +[HMDHAPMetadata getSharedInstance];
  id v7 = +[HMDHAPMetadata getBuiltinInstance];
  uint64_t v8 = [v6 schemaVersion];
  id v82 = v6;
  id v9 = [v6 version];
  id v10 = [v7 schemaVersion];
  id v81 = v7;
  id v11 = [v7 version];
  [v3 appendFormat:@"Metadata - Current: %@/%@   Builtin: %@/%@\n", v8, v9, v10, v11];

  id v84 = v3;
  [v85 setObject:v3 forKeyedSubscript:*MEMORY[0x263F41EF8]];
  id v12 = NSString;
  uint64_t v13 = [(HMDHomeManager *)self primaryHomeUUID];
  uint64_t v14 = [v13 UUIDString];
  uint64_t v15 = [(HMDHomeManager *)self currentHomeUUID];
  id v16 = [v15 UUIDString];
  [(HMDHomeManager *)self isAccessAllowedWhenLocked];
  id v17 = HMFBooleanToString();
  id v18 = getLastSyncedAssistantConfigurationVersion();
  int v19 = getAssistantConfigurationSnapshot();
  uint64_t v20 = [v12 stringWithFormat:@"Primary Home: %@, Current Home: %@, Allow locked access: %@, Siri lastSyncedVersion: %@  currentSyncSnapshot: %@", v14, v16, v17, v18, v19];

  uint64_t v21 = self;
  uint64_t v79 = (void *)v20;
  [v85 setObject:v20 forKeyedSubscript:*MEMORY[0x263F41F08]];
  char v22 = [(HMDHomeManager *)self syncManager];
  uint64_t v23 = [v22 dumpState];
  [v85 setObject:v23 forKeyedSubscript:*MEMORY[0x263F41FB0]];

  id v24 = [(HMDHomeManager *)self appData];
  id v25 = [v24 dumpState];
  [v85 setObject:v25 forKeyedSubscript:*MEMORY[0x263F41E98]];

  id v26 = [(HMDHomeManager *)self homes];
  uint64_t v27 = [v26 count];

  if (v27)
  {
    __int16 v28 = (void *)MEMORY[0x263EFF980];
    id v29 = [(HMDHomeManager *)self homes];
    __int16 v30 = objc_msgSend(v28, "arrayWithCapacity:", objc_msgSend(v29, "count"));

    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    uint64_t v31 = [(HMDHomeManager *)self homes];
    uint64_t v32 = [v31 countByEnumeratingWithState:&v98 objects:v105 count:16];
    if (v32)
    {
      uint64_t v33 = v32;
      uint64_t v34 = *(void *)v99;
      do
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (*(void *)v99 != v34) {
            objc_enumerationMutation(v31);
          }
          long long v36 = [*(id *)(*((void *)&v98 + 1) + 8 * i) dumpState];
          [v30 addObject:v36];
        }
        uint64_t v33 = [v31 countByEnumeratingWithState:&v98 objects:v105 count:16];
      }
      while (v33);
    }

    [v85 setObject:v30 forKey:*MEMORY[0x263F41F00]];
  }
  long long v37 = [MEMORY[0x263F35AD0] systemStore];
  long long v38 = [v37 dumpState];
  [v85 setObject:v38 forKey:*MEMORY[0x263F41F30]];

  long long v39 = [MEMORY[0x263EFF9A0] dictionaryWithCapacity:2];
  long long v40 = [MEMORY[0x263EFF980] array];
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v41 = [(HMDHomeManager *)v21 incomingInvitations];
  id v42 = (void *)[v41 copy];

  uint64_t v43 = [v42 countByEnumeratingWithState:&v94 objects:v104 count:16];
  if (v43)
  {
    uint64_t v44 = v43;
    uint64_t v45 = *(void *)v95;
    do
    {
      for (uint64_t j = 0; j != v44; ++j)
      {
        if (*(void *)v95 != v45) {
          objc_enumerationMutation(v42);
        }
        __int16 v47 = [*(id *)(*((void *)&v94 + 1) + 8 * j) describeWithFormat];
        [v40 addObject:v47];
      }
      uint64_t v44 = [v42 countByEnumeratingWithState:&v94 objects:v104 count:16];
    }
    while (v44);
  }

  uint64_t v77 = v40;
  uint64_t v78 = v39;
  [v39 setObject:v40 forKeyedSubscript:*MEMORY[0x263F41F20]];
  __int16 v48 = [MEMORY[0x263EFF980] array];
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  uint64_t v80 = v21;
  __int16 v49 = [(HMDHomeManager *)v21 homes];
  uint64_t v50 = [v49 countByEnumeratingWithState:&v90 objects:v103 count:16];
  if (v50)
  {
    uint64_t v51 = v50;
    uint64_t v52 = *(void *)v91;
    do
    {
      for (uint64_t k = 0; k != v51; ++k)
      {
        if (*(void *)v91 != v52) {
          objc_enumerationMutation(v49);
        }
        id v54 = *(void **)(*((void *)&v90 + 1) + 8 * k);
        long long v86 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        id v55 = [v54 outgoingInvitations];
        uint64_t v56 = [v55 countByEnumeratingWithState:&v86 objects:v102 count:16];
        if (v56)
        {
          uint64_t v57 = v56;
          uint64_t v58 = *(void *)v87;
          do
          {
            for (uint64_t m = 0; m != v57; ++m)
            {
              if (*(void *)v87 != v58) {
                objc_enumerationMutation(v55);
              }
              id v60 = [*(id *)(*((void *)&v86 + 1) + 8 * m) describeWithFormat];
              [v48 addObject:v60];
            }
            uint64_t v57 = [v55 countByEnumeratingWithState:&v86 objects:v102 count:16];
          }
          while (v57);
        }
      }
      uint64_t v51 = [v49 countByEnumeratingWithState:&v90 objects:v103 count:16];
    }
    while (v51);
  }

  [v78 setObject:v48 forKeyedSubscript:*MEMORY[0x263F41F48]];
  [v85 setObject:v78 forKeyedSubscript:*MEMORY[0x263F41F28]];
  id v61 = NSString;
  BOOL v62 = (_os_feature_enabled_impl() & 1) != 0
     || CFPreferencesGetAppBooleanValue(@"MatterTTU", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0) != 0;
  id v63 = objc_msgSend(v61, "stringWithFormat:", @"%d", v62);
  [v85 setObject:v63 forKeyedSubscript:@"HM_FEATURE_MATTER_TTU_ENABLED_FEATURE_OR_PROFILE"];

  id v64 = NSString;
  if (_os_feature_enabled_impl()) {
    BOOL v65 = (isInternalBuild() & 1) != 0
  }
       || CFPreferencesGetAppBooleanValue(@"UWBUnlock", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0) != 0;
  else {
    BOOL v65 = 0;
  }
  uint64_t v66 = objc_msgSend(v64, "stringWithFormat:", @"%d", v65);
  [v85 setObject:v66 forKeyedSubscript:@"HM_FEATURE_UWB_ENABLED_FEATURE_AND_PROFILE"];

  id v67 = objc_msgSend(NSString, "stringWithFormat:", @"%d", isFeatureMatteriPhoneOnlyPairingControlEnabled());
  [v85 setObject:v67 forKeyedSubscript:@"iPhoneOnlyPairingAndControl (iPOP)"];

  id v68 = +[HMDHomeKeyDataRecorder sharedRecorder];
  __int16 v69 = [v68 records];
  [v85 setObject:v69 forKeyedSubscript:@"Home Key Change Records"];

  id v70 = [(HMDHomeManager *)v80 bgOpsManager];
  __int16 v71 = [v70 dumpState];
  [v85 setObject:v71 forKeyedSubscript:@"Background operations"];

  id v72 = [(HMDHomeManager *)v80 mobileAssetManager];
  uint64_t v73 = [v72 dumpState];
  [v85 setObject:v73 forKeyedSubscript:@"MobileAssetManager"];

  id v74 = objc_alloc_init(MEMORY[0x263F11058]);
  uint64_t v75 = [v74 storedValuesByKey];
  [v85 setObject:v75 forKeyedSubscript:@"System Commissioner Key-Value Store"];

  return v85;
}

- (void)_handleNetworkMismatchInfo:(id)a3
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (isInternalBuild())
  {
    id v5 = +[HMDMainDriver driver];
    id v6 = [v5 currentWiFiNetworkInfo];
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    void v12[2] = __45__HMDHomeManager__handleNetworkMismatchInfo___block_invoke;
    v12[3] = &unk_264A2CEA8;
    void v12[4] = self;
    id v13 = v4;
    [(HMDHomeManager *)self findAccessoriesNotOnWiFiWithCurrentWiFi:v6 completionHandler:v12];
  }
  else
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    uint64_t v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v15 = v10;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@Not internal build NetworkMismatchInfo message not allowed", buf, 0xCu);
    }
    id v11 = [MEMORY[0x263F087E8] hmErrorWithCode:10];
    [v4 respondWithError:v11];
  }
}

void __45__HMDHomeManager__handleNetworkMismatchInfo___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = HMFGetLogIdentifier();
    int v8 = 138543618;
    id v9 = v7;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@wifi mismatch accessories %@", (uint8_t *)&v8, 0x16u);
  }
  [*(id *)(a1 + 40) respondWithSuccess];
}

- (void)_handleDiagnosticInfo:(id)a3
{
  v21[1] = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (isInternalBuild())
  {
    id v5 = [(HMDHomeManager *)self appleMediaAccessoryDiagnosticInfoController];
    v21[0] = *MEMORY[0x263F0CA10];
    id v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:v21 count:1];
    id v7 = [v5 diagnosticInfoDataWithAdditionalKeys:v6];

    int v8 = +[HMDAppleMediaAccessoryDiagnosticInfoController diagnosticInfoDescriptionWithData:v7];
    id v9 = (void *)MEMORY[0x230FBD990]();
    __int16 v10 = self;
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = HMFGetLogIdentifier();
      int v17 = 138543618;
      id v18 = v12;
      __int16 v19 = 2112;
      uint64_t v20 = v8;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Obtained diagnostic Info %@", (uint8_t *)&v17, 0x16u);
    }
    [v4 respondWithPayload:v8];
  }
  else
  {
    id v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = self;
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      int v17 = 138543362;
      id v18 = v16;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Not internal build DiagnosticInfo message not allowed", (uint8_t *)&v17, 0xCu);
    }
    id v7 = [MEMORY[0x263F087E8] hmErrorWithCode:10];
    [v4 respondWithError:v7];
  }
}

- (void)_handleDumpState:(id)a3
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 arrayForKey:@"kDumpStateRequestedConfigurationKey"];
  if ([v5 count]) {
    char v6 = [v5 containsObject:*MEMORY[0x263F0E9B0]];
  }
  else {
    char v6 = 1;
  }
  id v7 = [v4 activity];
  int v8 = [(HMDHomeManager *)self _getRequestedState:v5 activity:v7];

  id v9 = (void *)MEMORY[0x263F0CA68];
  if ((v6 & 1) != 0 || [v5 containsObject:*MEMORY[0x263F0CA78]])
  {
    __int16 v10 = +[HMDXPCMessageCountTracker sharedTracker];
    id v11 = [v10 stateDump];
    [v8 setObject:v11 forKeyedSubscript:@"XPC Message Count Tracker"];

    uint64_t v12 = +[HMDXPCMessageTransport defaultTransport];
    id v13 = [v12 stateDump];
    [v8 setObject:v13 forKeyedSubscript:@"Default XPC Transport"];

    uint64_t v14 = +[HMDXPCMessageTransport accessorySetupTransport];
    uint64_t v15 = [v14 stateDump];
    [v8 setObject:v15 forKeyedSubscript:@"Accessory Setup XPC Transport"];

    if (v6)
    {
      uint64_t v16 = [(HMDHomeManager *)self compositeSettingsControllerManager];
      int v17 = [v16 dumpStateInfo];
      [v8 setObject:v17 forKeyedSubscript:*MEMORY[0x263F0CA58]];

LABEL_11:
      uint64_t v21 = [MEMORY[0x263EFF9A0] dictionary];
      char v22 = [(HMDHomeManager *)self eventRouterXPCServer];
      uint64_t v23 = [v22 dumpStateDescription];
      [v21 setObject:v23 forKeyedSubscript:@"XPCServer"];

      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      id v24 = [(HMDHomeManager *)self homes];
      id v25 = (void *)[v24 copy];

      uint64_t v26 = [v25 countByEnumeratingWithState:&v38 objects:v42 count:16];
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = *(void *)v39;
        do
        {
          uint64_t v29 = 0;
          do
          {
            if (*(void *)v39 != v28) {
              objc_enumerationMutation(v25);
            }
            __int16 v30 = [*(id *)(*((void *)&v38 + 1) + 8 * v29) eventRouterDumpStateInfo];
            [v21 addEntriesFromDictionary:v30];

            ++v29;
          }
          while (v27 != v29);
          uint64_t v27 = [v25 countByEnumeratingWithState:&v38 objects:v42 count:16];
        }
        while (v27);
      }

      uint64_t v31 = (void *)[v21 copy];
      [v8 setObject:v31 forKeyedSubscript:*MEMORY[0x263F0CA68]];

      goto LABEL_19;
    }
  }
  uint64_t v18 = *MEMORY[0x263F0CA58];
  if ([v5 containsObject:*MEMORY[0x263F0CA58]])
  {
    __int16 v19 = [(HMDHomeManager *)self compositeSettingsControllerManager];
    uint64_t v20 = [v19 dumpStateInfo];
    [v8 setObject:v20 forKeyedSubscript:v18];
  }
  if ([v5 containsObject:*v9]) {
    goto LABEL_11;
  }
LABEL_19:
  uint64_t v32 = [(HMDHomeManager *)self _dumpHomeManagerData];
  if ([v5 containsObject:*MEMORY[0x263F0CA60]]
    && [v4 isEntitledForStateDump])
  {
    [v8 setObject:v32 forKeyedSubscript:*MEMORY[0x263F0E9B8]];
  }
  else
  {
    [(HMDHomeManager *)self _dumpToLog:v32 withState:v8];
  }
  uint64_t v33 = [NSNumber numberWithBool:1];
  [v8 setObject:v33 forKeyedSubscript:*MEMORY[0x263F0CB28]];

  uint64_t v34 = NSNumber;
  long long v35 = [(HMDHomeManager *)self fmfHandler];
  long long v36 = objc_msgSend(v34, "numberWithBool:", objc_msgSend(v35, "isThisDesignatedFMFDevice"));
  [v8 setObject:v36 forKeyedSubscript:*MEMORY[0x263F0CB38]];

  long long v37 = (void *)[v8 copy];
  [v4 respondWithPayload:v37];
}

- (id)_getRequestedState:(id)a3 activity:(id)a4
{
  uint64_t v421 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v310 = a4;
  v309 = (void *)[objc_alloc(MEMORY[0x263F424F0]) initWithName:@"getRequestedState" parent:v310];
  char v6 = objc_opt_new();
  id v314 = v5;
  v315 = v6;
  if ([v5 count] && (objc_msgSend(v5, "containsObject:", *MEMORY[0x263F0E9B0]) & 1) == 0)
  {
    if (![v5 containsObject:@"kDumpStateConfigDescriptionKey"]) {
      goto LABEL_44;
    }
    char v336 = 0;
  }
  else
  {
    char v336 = 1;
  }
  id v7 = [MEMORY[0x263EFF980] array];
  int v8 = [NSString stringWithFormat:@"%@: %lu", @"maximumHomes", maximumHomes];
  [v7 addObject:v8];

  id v9 = [NSString stringWithFormat:@"%@: %lu", @"maximumAccessoriesPerHome", maximumAccessoriesPerHome];
  [v7 addObject:v9];

  __int16 v10 = [NSString stringWithFormat:@"%@: %lu", @"maximumRoomsPerHome", maximumRoomsPerHome];
  [v7 addObject:v10];

  id v11 = [NSString stringWithFormat:@"%@: %lu", @"maximumZonesPerHome", maximumZonesPerHome];
  [v7 addObject:v11];

  uint64_t v12 = [NSString stringWithFormat:@"%@: %lu", @"maximumTriggersPerHome", maximumTriggersPerHome];
  [v7 addObject:v12];

  id v13 = [NSString stringWithFormat:@"%@: %lu", @"maximumActionSetsPerHome", maximumActionSetsPerHome];
  [v7 addObject:v13];

  uint64_t v14 = [NSString stringWithFormat:@"%@: %lu", @"maximumServiceGroupsPerHome", maximumServiceGroupsPerHome];
  [v7 addObject:v14];

  uint64_t v15 = [NSString stringWithFormat:@"%@: %lu", @"maximumUsersPerHome", maximumUsersPerHome];
  [v7 addObject:v15];

  uint64_t v16 = [NSString stringWithFormat:@"%@: %lu", @"maximumRoomsPerZone", maximumRoomsPerZone];
  [v7 addObject:v16];

  int v17 = [NSString stringWithFormat:@"%@: %lu", @"maximumActionsPerActionSet", maximumActionsPerActionSet];
  [v7 addObject:v17];

  uint64_t v18 = [NSString stringWithFormat:@"%@: %lu", @"maximumServicesPerServiceGroup", maximumServicesPerServiceGroup];
  [v7 addObject:v18];

  __int16 v19 = [NSString stringWithFormat:@"%@: %lu", @"maximumAccessoriesPerBridge", maximumAccessoriesPerBridge];
  [v7 addObject:v19];

  uint64_t v20 = [NSString stringWithFormat:@"%@: %lu", @"maximumServicesPerAccessory", maximumServicesPerAccessory];
  [v7 addObject:v20];

  uint64_t v21 = [NSString stringWithFormat:@"%@: %lu", @"maximumCharacteristicsPerService", maximumCharacteristicsPerService];
  [v7 addObject:v21];

  char v22 = [NSString stringWithFormat:@"%@: %lu", @"maximumDataSyncFragmentSize", maximumDataSyncFragmentSize];
  [v7 addObject:v22];

  uint64_t v23 = [NSString stringWithFormat:@"%@: %f", @"minimumTimerRecurrence", minimumTimerRecurrence];
  [v7 addObject:v23];

  id v24 = [NSString stringWithFormat:@"%@: %lu", @"cloudPushBatchLimit", cloudPushBatchLimit];
  [v7 addObject:v24];

  id v25 = [NSString stringWithFormat:@"%@: %lu", @"maxCloudOperationRetries", maxCloudOperationRetries];
  [v7 addObject:v25];

  uint64_t v26 = [NSString stringWithFormat:@"%@: %lu", @"cloudUploadTimerInterval", cloudUploadTimerInterval];
  [v7 addObject:v26];

  uint64_t v27 = [NSString stringWithFormat:@"%@: %lu", @"cloudZoneUploadTimerInitialInterval", cloudZoneUploadTimerInitialInterval];
  [v7 addObject:v27];

  uint64_t v28 = [NSString stringWithFormat:@"%@: %lu", @"cloudZoneUploadTimerInterval", cloudZoneUploadTimerInterval];
  [v7 addObject:v28];

  uint64_t v29 = [NSString stringWithFormat:@"%@: %llu", @"aggressiveControllerKeyPollInterval", aggressiveControllerKeyPollInterval];
  [v7 addObject:v29];

  __int16 v30 = [NSString stringWithFormat:@"%@: %llu", @"watchdogControllerKeyPollTimeout", watchdogControllerKeyPollTimeout];
  [v7 addObject:v30];

  uint64_t v31 = [NSString stringWithFormat:@"%@: %llu", @"controllerKeyPollInterval", controllerKeyPollInterval];
  [v7 addObject:v31];

  uint64_t v32 = [NSString stringWithFormat:@"%@: %llu", @"keychainPopupTimerInterval", keychainPopupTimerInterval];
  [v7 addObject:v32];

  uint64_t v33 = [NSString stringWithFormat:@"%@: %llu", @"checkRemoteAccessTimeout", checkRemoteAccessTimeout];
  [v7 addObject:v33];

  uint64_t v34 = [NSString stringWithFormat:@"%@: %llu", @"hrsCommitTimeout", hrsCommitTimeoutNanoseconds];
  [v7 addObject:v34];

  long long v35 = [NSString stringWithFormat:@"%@: %llu", @"hrsIdleClientTimeout", hrsIdleClientTimeoutNanoseconds];
  [v7 addObject:v35];

  long long v36 = [NSString stringWithFormat:@"%@: %llu", @"hrsIdleServertTimeout", hrsIdleServertTimeoutNanoseconds];
  [v7 addObject:v36];

  long long v37 = [NSString stringWithFormat:@"%@: %llu", @"hrsSendInternalRequestTimeout", hrsSendInternalRequestTimeoutNanoseconds];
  [v7 addObject:v37];

  long long v38 = [NSString stringWithFormat:@"%@: %llu", @"hrsSendInternalRequestToWatchTimeout", hrsSendInternalRequestToWatchTimeoutNanoseconds];
  [v7 addObject:v38];

  long long v39 = [NSString stringWithFormat:@"%@: %llu", @"hrsSendUserRequestTimeout", hrsSendUserRequestTimeoutNanoseconds];
  [v7 addObject:v39];

  long long v40 = [NSString stringWithFormat:@"%@: %tu", @"maximumSecureRemoteStreams", maximumSecureRemoteStreams];
  [v7 addObject:v40];

  long long v41 = [NSString stringWithFormat:@"%@: %f", @"secureSessionMessageTimeout", secureSessionMessageTimeout];
  [v7 addObject:v41];

  id v42 = [NSString stringWithFormat:@"%@: %llu", @"DeviceConnectionKeepAliveTimerPeriod", deviceConnectionKeepAliveTimerPeriod];
  [v7 addObject:v42];

  uint64_t v43 = [NSString stringWithFormat:@"%@: %llu", @"DeviceConnectionKeepAliveResponseTimeoutPeriod", deviceConnectionKeepAliveResponseTimeoutPeriod];
  [v7 addObject:v43];

  uint64_t v44 = [NSString stringWithFormat:@"%@: %@", @"SupportedResolutions", supportedResolutions];
  [v7 addObject:v44];

  uint64_t v45 = [NSString stringWithFormat:@"%@: %@", @"SupportedVideoCodecs", supportedVideoCodecs];
  [v7 addObject:v45];

  uint64_t v46 = [NSString stringWithFormat:@"%@: %@", @"SupportedAudioCodecs", supportedAudioCodecs];
  [v7 addObject:v46];

  __int16 v47 = [NSString stringWithFormat:@"%@: %@", @"SupportedSRTPAuths", supportedSRTPAuths];
  [v7 addObject:v47];

  __int16 v48 = NSString;
  __int16 v49 = HMFBooleanToString();
  uint64_t v50 = [v48 stringWithFormat:@"%@: %@", @"CameraStreamNetworkAdaptation", v49];
  [v7 addObject:v50];

  uint64_t v51 = [NSString stringWithFormat:@"%@: %@", @"RTPPtime", rtpPtime];
  [v7 addObject:v51];

  uint64_t v52 = [NSString stringWithFormat:@"%@: %@", @"SnapshotResolution", snapshotResolution];
  [v7 addObject:v52];

  char v53 = [NSString stringWithFormat:@"%@: %tu", @"MaximumSimultaneousRemoteStreams", maximumSimultaneousRemoteStreams];
  [v7 addObject:v53];

  id v54 = [NSString stringWithFormat:@"%@: %g", @"SnapshotCacheValidPeriod", snapshotCacheValidPeriod];
  [v7 addObject:v54];

  id v55 = [NSString stringWithFormat:@"%@: %llu", @"BulletinSecureTriggerTimeoutInSeconds", bulletinSecureTriggerTimeoutInSeconds];
  [v7 addObject:v55];

  uint64_t v56 = [NSString stringWithFormat:@"%@: %llu", @"BroadcastKeyRefreshTimeInSeconds", broadcastKeyRefreshTimeInSeconds];
  [v7 addObject:v56];

  uint64_t v57 = [NSString stringWithFormat:@"%@: %tu", @"BluetoothGSNMaxValue", bluetoothGSNMaxValue];
  [v7 addObject:v57];

  uint64_t v58 = [NSString stringWithFormat:@"%@: %llu", @"btleReachabilityTimer", btleReachabilityTimerNanoseconds];
  [v7 addObject:v58];

  id v59 = [NSString stringWithFormat:@"%@: %llu", @"btleReachabilityLeeway", btleReachabilityLeewayNanoseconds];
  [v7 addObject:v59];

  id v60 = [NSString stringWithFormat:@"%@: %lu", @"btleReachabilityProbeReduceFactor", btleReachabilityProbeReduceFactor];
  [v7 addObject:v60];

  id v61 = [NSString stringWithFormat:@"%@: %llu", @"remotePendingResponseTimer", remotePendingResponseTimerNanoseconds];
  [v7 addObject:v61];

  BOOL v62 = [NSString stringWithFormat:@"%@: %llu", @"remotePendingResponseLeeway", remotePendingResponseLeewayNanoseconds];
  [v7 addObject:v62];

  id v63 = [NSString stringWithFormat:@"%@: %lu", @"remotePendingResponseDecayScale", remotePendingResponseDecayScale];
  [v7 addObject:v63];

  id v64 = [NSString stringWithFormat:@"%@: %lf", @"remoteDeviceMonitorHealthTimerTimeInterval", remoteDeviceMonitorHealthTimerTimeInterval];
  [v7 addObject:v64];

  BOOL v65 = [NSString stringWithFormat:@"%@: %lf", @"remoteDeviceMonitorRetryTimerMinimumTimeInterval", remoteDeviceMonitorRetryTimerMinimumTimeInterval];
  [v7 addObject:v65];

  uint64_t v66 = [NSString stringWithFormat:@"%@: %lf", @"remoteDeviceMonitorRetryTimerMaximumTimeInterval", remoteDeviceMonitorRetryTimerMaximumTimeInterval];
  [v7 addObject:v66];

  id v67 = [NSString stringWithFormat:@"%@: %tu", @"remoteDeviceMonitorRetryTimerFactor", remoteDeviceMonitorRetryTimerFactor];
  [v7 addObject:v67];

  id v68 = [NSString stringWithFormat:@"%@: %lf", @"accessoryConnectivityWaitPeriod", accessoryConnectivityWaitPeriod];
  [v7 addObject:v68];

  __int16 v69 = [NSString stringWithFormat:@"%@: %llu", @"cloudDataSyncInProgressWaitPeriod", cloudDataSyncInProgressWaitPeriod];
  [v7 addObject:v69];

  id v70 = [NSString stringWithFormat:@"%@: %llu", @"controllerKeyNotLandingWaitPeriod", controllerKeyNotLandingWaitPeriod];
  [v7 addObject:v70];

  __int16 v71 = [NSString stringWithFormat:@"%@: %llu", @"controllerKeyNotLandingShortCircuitWaitPeriod", controllerKeyNotLandingShortCircuitWaitPeriod];
  [v7 addObject:v71];

  id v72 = [NSString stringWithFormat:@"%@: %lf", @"assistantClientReadWriteTimeout", assistantClientReadWriteTimeoutSeconds];
  [v7 addObject:v72];

  uint64_t v73 = [NSString stringWithFormat:@"%@: %lf", @"assistantClientActionSetTimeout", assistantClientActionSetTimeoutSeconds];
  [v7 addObject:v73];

  id v74 = [NSString stringWithFormat:@"%@: %lf", @"disableNotificationsDeferPeriod", disableNotificationsDeferPeriod];
  [v7 addObject:v74];

  uint64_t v75 = [NSString stringWithFormat:@"%@: %lf", @"coalesceNotificationsPeriod", coalesceNotificationsPeriod];
  [v7 addObject:v75];

  __int16 v76 = [NSString stringWithFormat:@"%@: %lf", @"delayNotificationsPeriod", delayNotificationsPeriod];
  [v7 addObject:v76];

  uint64_t v77 = [NSString stringWithFormat:@"%@: %lf", @"pendingResponseTickPeriod", pendingResponseTickPeriod];
  [v7 addObject:v77];

  uint64_t v78 = [NSString stringWithFormat:@"%@: %lf", @"pendingResponseMaxPeriod", pendingResponseMaxPeriod];
  [v7 addObject:v78];

  uint64_t v79 = [NSString stringWithFormat:@"%@: %lf", @"kRemoteReachabilitNotificationsDeferPeriod", remoteReachabilityNotificationsDeferPeriod];
  [v7 addObject:v79];

  uint64_t v80 = [NSString stringWithFormat:@"%@: %lf", @"kRemoteReachabilityDeregistrationDeferPeriod", remoteReachabilityDeregistrationDeferPeriod];
  [v7 addObject:v80];

  if (skipAuthPromptDialog) {
    id v81 = @"YES";
  }
  else {
    id v81 = @"NO";
  }
  id v82 = [NSString stringWithFormat:@"%@: %@", @"allowSkipMFIPrompt", v81];
  [v7 addObject:v82];

  if (showAuthDialog) {
    uint64_t v83 = @"YES";
  }
  else {
    uint64_t v83 = @"NO";
  }
  id v84 = [NSString stringWithFormat:@"%@: %@", @"showAuthDialog", v83];
  [v7 addObject:v84];

  if (disableCloudDataSync) {
    id v85 = @"YES";
  }
  else {
    id v85 = @"NO";
  }
  long long v86 = [NSString stringWithFormat:@"%@: %@", @"DisableCloudDataSync", v85];
  [v7 addObject:v86];

  if (disableLegacyCloudDataSync) {
    long long v87 = @"YES";
  }
  else {
    long long v87 = @"NO";
  }
  long long v88 = [NSString stringWithFormat:@"%@: %@", @"DisableLegacyCloudDataSync", v87];
  [v7 addObject:v88];

  if (enableWakeNotifications) {
    long long v89 = @"YES";
  }
  else {
    long long v89 = @"NO";
  }
  long long v90 = [NSString stringWithFormat:@"%@: %@", @"EnableWakeNotifications", v89];
  [v7 addObject:v90];

  long long v91 = [NSString stringWithFormat:@"%@: %lf", @"pairingInterruptionGracePeriod", pairingInterruptionGracePeriod];
  [v7 addObject:v91];

  long long v92 = [NSString stringWithFormat:@"%@: %lf", @"pairingReconfirmWaitPeriod", pairingReconfirmWaitPeriod];
  [v7 addObject:v92];

  long long v93 = [NSString stringWithFormat:@"%@: %lf", @"vendorInfoFetchPeriod", vendorInfoFetchPeriod];
  [v7 addObject:v93];

  long long v94 = [NSString stringWithFormat:@"%@: %lf", @"attestationInfoFetchPeriod", attestationInfoFetchPeriod];
  [v7 addObject:v94];

  long long v95 = [NSString stringWithFormat:@"%@: %lf", @"keyTransferBroadcastMaximumDelay", keyTransferBroadcastMaximumDelay];
  [v7 addObject:v95];

  long long v96 = [NSString stringWithFormat:@"%@: %@", @"vendorInfoDatabaseServerURLOverride", vendorInfoDatabaseServerURLOverride];
  [v7 addObject:v96];

  long long v97 = [NSString stringWithFormat:@"%@: %@", @"appleConfigurationServer", appleConfigurationServer];
  [v7 addObject:v97];

  long long v98 = [NSString stringWithFormat:@"%@: %@", @"homeKitConfigurationPath", homeKitConfigurationPath];
  [v7 addObject:v98];

  long long v99 = [NSString stringWithFormat:@"%@: %lf", @"mediaBrowserProcessingInterval", mediaBrowserProcessingInterval];
  [v7 addObject:v99];

  long long v100 = [NSString stringWithFormat:@"%@: %lf", @"disableReprivsionBrowsingPeriodInMinutes", disableReprivsionBrowsingPeriodInMinutes];
  [v7 addObject:v100];

  long long v101 = [NSString stringWithFormat:@"%@: %lf", @"authServerRetryTimeIntervalInSeconds", authServerRetryTimeIntervalInSeconds];
  [v7 addObject:v101];

  uint64_t v102 = [NSString stringWithFormat:@"%@: %tu", @"authServerRetryCount", authServerRetryCount];
  BOOL v103 = v7;
  [v7 addObject:v102];

  long long v405 = 0u;
  long long v406 = 0u;
  long long v403 = 0u;
  long long v404 = 0u;
  id obj = (id)preferredPrimaryForHome;
  uint64_t v104 = [obj countByEnumeratingWithState:&v403 objects:v420 count:16];
  if (v104)
  {
    uint64_t v105 = v104;
    uint64_t v106 = *(void *)v404;
    do
    {
      for (uint64_t i = 0; i != v105; ++i)
      {
        if (*(void *)v404 != v106) {
          objc_enumerationMutation(obj);
        }
        __int16 v108 = *(void **)(*((void *)&v403 + 1) + 8 * i);
        int v109 = NSString;
        uint64_t v110 = [v108 UUIDString];
        BOOL v111 = [(id)preferredPrimaryForHome objectForKey:v108];
        uint64_t v112 = [v111 UUIDString];
        BOOL v113 = [v109 stringWithFormat:@"%@: %@: %@", @"preferredPrimaryForHome", v110, v112];
        [v103 addObject:v113];
      }
      uint64_t v105 = [obj countByEnumeratingWithState:&v403 objects:v420 count:16];
    }
    while (v105);
  }

  if (disableWACBrowser) {
    uint64_t v114 = @"YES";
  }
  else {
    uint64_t v114 = @"NO";
  }
  BOOL v115 = [NSString stringWithFormat:@"%@: %@", @"disableWACBrowser", v114];
  uint64_t v116 = v103;
  [v103 addObject:v115];

  if (delayBatchedReadWrite) {
    BOOL v117 = @"YES";
  }
  else {
    BOOL v117 = @"NO";
  }
  BOOL v118 = [NSString stringWithFormat:@"%@: %@", @"delayBatchedReadWrite", v117];
  [v103 addObject:v118];

  if (enableNetworkLogging) {
    BOOL v119 = @"YES";
  }
  else {
    BOOL v119 = @"NO";
  }
  BOOL v120 = [NSString stringWithFormat:@"%@: %@", @"enableNetworkLogging", v119];
  [v103 addObject:v120];

  int v121 = NSString;
  BOOL v122 = CKContainerEnvironmentString();
  BOOL v123 = [v121 stringWithFormat:@"%@: %@", @"cloudKitEnvironment", v122];
  [v103 addObject:v123];

  if (allowAnonymousServerConnections) {
    BOOL v124 = @"YES";
  }
  else {
    BOOL v124 = @"NO";
  }
  BOOL v125 = [NSString stringWithFormat:@"%@: %@", @"allowAnonymousServerConnections", v124];
  [v116 addObject:v125];

  BOOL v126 = [NSString stringWithFormat:@"%@: %tu", @"presenceFeedRefreshInMinutes", presenceFeedRefreshInMinutes];
  [v116 addObject:v126];

  BOOL v127 = [NSString stringWithFormat:@"%@: %tu", @"presenceMonitorAuditInMinutes", presenceMonitorAuditInMinutes];
  [v116 addObject:v127];

  v128 = [NSString stringWithFormat:@"%@: %tu", @"presenceMonitorRefreshGracePeriodInMinutes", presenceMonitorRefreshGracePeriodInMinutes];
  [v116 addObject:v128];

  int v129 = [NSString stringWithFormat:@"%@: %tu", @"startCharacteristicsMonitorWaitPeriod", startCharacteristicsMonitorWaitPeriod];
  [v116 addObject:v129];

  uint64_t v130 = [NSString stringWithFormat:@"%@: %tu", @"requestHomeDataSyncRetryPeriodInMinutes", requestHomeDataSyncRetryPeriodInMinutes];
  [v116 addObject:v130];

  unint64_t v131 = (void *)[v116 copy];
  id v5 = v314;
  char v6 = v315;
  if ([v131 count]) {
    [v315 setObject:v131 forKeyedSubscript:@"kDumpStateConfigDescriptionKey"];
  }

  if (v336)
  {
    char v132 = 1;
    goto LABEL_46;
  }
LABEL_44:
  if (![v5 containsObject:@"kDumpStateUnassociatedAccyDescriptionKey"]) {
    goto LABEL_50;
  }
  char v132 = 0;
LABEL_46:
  uint64_t v133 = [(HMDHomeManager *)self accessoryBrowserInternal];
  uint64_t v134 = [v133 dumpUnassociatedAccessories];

  if ([v134 count]) {
    [v6 setObject:v134 forKeyedSubscript:@"kDumpStateUnassociatedAccyDescriptionKey"];
  }

  if (v132)
  {
    char v320 = 1;
    goto LABEL_52;
  }
LABEL_50:
  if (![v5 containsObject:@"kDumpStatePairedAccyDescriptionKey"]) {
    goto LABEL_72;
  }
  char v320 = 0;
LABEL_52:
  uint64_t v135 = (void *)MEMORY[0x263EFF980];
  uint64_t v136 = [(HMDHomeManager *)self homes];
  uint64_t v137 = objc_msgSend(v135, "arrayWithCapacity:", objc_msgSend(v136, "count"));

  long long v401 = 0u;
  long long v402 = 0u;
  long long v399 = 0u;
  long long v400 = 0u;
  v323 = [(HMDHomeManager *)self homes];
  id obja = (id)[(__CFString *)v323 countByEnumeratingWithState:&v399 objects:v419 count:16];
  if (obja)
  {
    uint64_t v337 = *(void *)v400;
    uint64_t v333 = *MEMORY[0x263F41F00];
    uint64_t v330 = *MEMORY[0x263F41FA8];
    uint64_t v327 = *MEMORY[0x263F41F70];
    uint64_t v324 = *MEMORY[0x263F41E70];
    do
    {
      for (uint64_t j = 0; j != obja; uint64_t j = (char *)j + 1)
      {
        uint64_t v139 = v137;
        if (*(void *)v400 != v337) {
          objc_enumerationMutation(v323);
        }
        uint64_t v140 = *(void **)(*((void *)&v399 + 1) + 8 * (void)j);
        uint64_t v141 = [MEMORY[0x263EFF9A0] dictionaryWithCapacity:3];
        uint64_t v142 = [v140 accessories];
        uint64_t v143 = NSString;
        uint64_t v144 = [v140 name];
        uint64_t v145 = [v143 stringWithFormat:@"Home: %@", v144];
        [v141 setObject:v145 forKeyedSubscript:v333];

        uint64_t v146 = [v140 primaryResident];
        uint64_t v147 = [v146 dumpState];

        uint64_t v148 = NSString;
        uint64_t v149 = [v147 objectForKeyedSubscript:v330];
        uint64_t v150 = [v148 stringWithFormat:@"Resident: %@", v149];
        [v141 setObject:v150 forKeyedSubscript:v327];

        uint64_t v151 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v142, "count"));
        long long v395 = 0u;
        long long v396 = 0u;
        long long v397 = 0u;
        long long v398 = 0u;
        id v152 = v142;
        uint64_t v153 = [v152 countByEnumeratingWithState:&v395 objects:v418 count:16];
        if (v153)
        {
          uint64_t v154 = v153;
          uint64_t v155 = *(void *)v396;
          do
          {
            for (uint64_t k = 0; k != v154; ++k)
            {
              if (*(void *)v396 != v155) {
                objc_enumerationMutation(v152);
              }
              uint64_t v157 = [*(id *)(*((void *)&v395 + 1) + 8 * k) dumpSimpleState];
              [v151 addObject:v157];
            }
            uint64_t v154 = [v152 countByEnumeratingWithState:&v395 objects:v418 count:16];
          }
          while (v154);
        }

        if ([v151 count])
        {
          uint64_t v158 = (void *)[v151 copy];
          [v141 setObject:v158 forKeyedSubscript:v324];
        }
        uint64_t v137 = v139;
        [v139 addObject:v141];
      }
      id obja = (id)[(__CFString *)v323 countByEnumeratingWithState:&v399 objects:v419 count:16];
    }
    while (obja);
  }

  char v6 = v315;
  if ([v137 count])
  {
    uint64_t v159 = (void *)[v137 copy];
    [v315 setObject:v159 forKeyedSubscript:@"kDumpStatePairedAccyDescriptionKey"];
  }
  id v5 = v314;
  if (v320)
  {
    char v321 = 1;
    goto LABEL_74;
  }
LABEL_72:
  if (![v5 containsObject:@"kDumpStateHomePodLocalSettingsKey"]) {
    goto LABEL_94;
  }
  char v321 = 0;
LABEL_74:
  uint64_t v160 = [MEMORY[0x263EFF9A0] dictionary];
  long long v391 = 0u;
  long long v392 = 0u;
  long long v393 = 0u;
  long long v394 = 0u;
  v323 = [(HMDHomeManager *)self homes];
  uint64_t v331 = [(__CFString *)v323 countByEnumeratingWithState:&v391 objects:v417 count:16];
  if (v331)
  {
    uint64_t v325 = *(void *)v392;
    v328 = v160;
    do
    {
      uint64_t v161 = 0;
      do
      {
        if (*(void *)v392 != v325) {
          objc_enumerationMutation(v323);
        }
        uint64_t v338 = v161;
        v162 = *(void **)(*((void *)&v391 + 1) + 8 * v161);
        id objb = [MEMORY[0x263EFF9A0] dictionary];
        long long v387 = 0u;
        long long v388 = 0u;
        long long v389 = 0u;
        long long v390 = 0u;
        v334 = v162;
        uint64_t v163 = [v162 appleMediaAccessories];
        uint64_t v164 = [v163 countByEnumeratingWithState:&v387 objects:v416 count:16];
        if (v164)
        {
          uint64_t v165 = v164;
          uint64_t v166 = *(void *)v388;
          do
          {
            for (uint64_t m = 0; m != v165; ++m)
            {
              if (*(void *)v388 != v166) {
                objc_enumerationMutation(v163);
              }
              v168 = *(void **)(*((void *)&v387 + 1) + 8 * m);
              v169 = (void *)MEMORY[0x230FBD990]();
              if (v168)
              {
                v170 = NSString;
                v171 = [v168 name];
                v172 = [v168 uuid];
                v173 = [v172 UUIDString];
                v174 = [v170 stringWithFormat:@"HomePod: %@ uuid: %@", v171, v173];

                v175 = [v168 dumpStateLocalSettings];
                [objb setObject:v175 forKeyedSubscript:v174];
              }
            }
            uint64_t v165 = [v163 countByEnumeratingWithState:&v387 objects:v416 count:16];
          }
          while (v165);
        }

        v176 = NSString;
        v177 = [v334 name];
        v178 = [v334 uuid];
        v179 = [v178 UUIDString];
        v180 = [v176 stringWithFormat:@"home: %@ uuid: %@", v177, v179];

        uint64_t v160 = v328;
        [v328 setObject:objb forKeyedSubscript:v180];

        uint64_t v161 = v338 + 1;
        char v6 = v315;
      }
      while (v338 + 1 != v331);
      uint64_t v331 = [(__CFString *)v323 countByEnumeratingWithState:&v391 objects:v417 count:16];
    }
    while (v331);
  }

  if ([v160 count]) {
    [v6 setObject:v160 forKeyedSubscript:@"kDumpStateHomePodLocalSettingsKey"];
  }

  id v5 = v314;
  if (v321)
  {
    char v181 = 1;
    goto LABEL_96;
  }
LABEL_94:
  if (![v5 containsObject:@"kDumpStateResidentMeshKey"]) {
    goto LABEL_101;
  }
  char v181 = 0;
LABEL_96:
  v182 = [MEMORY[0x263F089D8] string];
  v183 = [(HMDHomeManager *)self residentMesh];

  if (v183)
  {
    v184 = [(HMDHomeManager *)self residentMesh];
    v185 = [v184 stateDump];
    [v182 appendString:v185];
  }
  else
  {
    [v182 appendString:@"No Resident mesh (not resident capable device, or hasn't completely started up)."];
  }
  [v315 setObject:v182 forKeyedSubscript:@"kDumpStateResidentMeshKey"];

  if (v181)
  {
    char v308 = 1;
    goto LABEL_103;
  }
LABEL_101:
  v186 = v315;
  if (![v5 containsObject:@"kDumpStateAccountsDescriptionKey"]) {
    goto LABEL_146;
  }
  char v308 = 0;
LABEL_103:
  v187 = [MEMORY[0x263F089D8] string];
  v188 = [(HMDHomeManager *)self appleAccountManager];
  v189 = [v188 device];

  if (v189)
  {
    v190 = [v189 name];
    v191 = [v189 identifier];
    v192 = [v191 UUIDString];
    [v187 appendFormat:@"Current Device %@(%@)\n", v190, v192];
  }
  v307 = v189;
  long long v385 = 0u;
  long long v386 = 0u;
  long long v383 = 0u;
  long long v384 = 0u;
  v193 = [(HMDHomeManager *)self accountRegistry];
  v194 = [v193 accounts];

  id v312 = v194;
  uint64_t v316 = [v194 countByEnumeratingWithState:&v383 objects:v415 count:16];
  if (v316)
  {
    uint64_t v313 = *(void *)v384;
    do
    {
      uint64_t v195 = 0;
      do
      {
        if (*(void *)v384 != v313)
        {
          uint64_t v196 = v195;
          objc_enumerationMutation(v312);
          uint64_t v195 = v196;
        }
        uint64_t v317 = v195;
        v197 = *(void **)(*((void *)&v383 + 1) + 8 * v195);
        v198 = [v197 shortDescription];
        [v187 appendFormat:@"Account %@:\n", v198];

        long long v381 = 0u;
        long long v382 = 0u;
        long long v379 = 0u;
        long long v380 = 0u;
        v199 = [v197 handles];
        uint64_t v200 = [v199 countByEnumeratingWithState:&v379 objects:v414 count:16];
        if (v200)
        {
          uint64_t v201 = v200;
          uint64_t v202 = *(void *)v380;
          do
          {
            for (uint64_t n = 0; n != v201; ++n)
            {
              if (*(void *)v380 != v202) {
                objc_enumerationMutation(v199);
              }
              v204 = *(void **)(*((void *)&v379 + 1) + 8 * n);
              v205 = [v204 remoteDestinationString];
              v206 = [v204 identifier];
              v207 = [v206 UUIDString];
              [v187 appendFormat:@"\tHandle %@(%@)\n", v205, v207];
            }
            uint64_t v201 = [v199 countByEnumeratingWithState:&v379 objects:v414 count:16];
          }
          while (v201);
        }

        v208 = [v197 devices];
        uint64_t v209 = [v208 count];

        if (v209)
        {
          long long v377 = 0u;
          long long v378 = 0u;
          long long v375 = 0u;
          long long v376 = 0u;
          id v318 = [v197 devices];
          uint64_t v322 = [v318 countByEnumeratingWithState:&v375 objects:v413 count:16];
          if (v322)
          {
            uint64_t v319 = *(void *)v376;
            do
            {
              uint64_t v210 = 0;
              do
              {
                if (*(void *)v376 != v319) {
                  objc_enumerationMutation(v318);
                }
                v211 = *(void **)(*((void *)&v375 + 1) + 8 * v210);
                id objc = [v211 name];
                v212 = [v211 identifier];
                v339 = [v212 UUIDString];
                [v211 version];
                v332 = v212;
                v329 = uint64_t v335 = v210;
                if (v329)
                {
                  v323 = [v211 version];
                  v326 = v323;
                }
                else
                {
                  v326 = @"Unknown";
                }
                v213 = [v211 productInfo];
                [v213 productPlatform];
                v214 = HMFProductPlatformToString();
                v215 = [v211 productInfo];
                [v215 productClass];
                v216 = HMFProductClassToString();
                v217 = [v211 productInfo];
                v218 = [v217 softwareVersion];
                v219 = [v218 versionString];
                [v187 appendFormat:@"\tDevice %@(%@), Version = %@, Platforuint64_t m = %@, Class = %@, OS = %@\n", objc, v339, v326, v214, v216, v219];

                if (v329) {
                long long v373 = 0u;
                }
                long long v374 = 0u;
                long long v371 = 0u;
                long long v372 = 0u;
                v220 = [v211 handles];
                uint64_t v221 = [v220 countByEnumeratingWithState:&v371 objects:v412 count:16];
                if (v221)
                {
                  uint64_t v222 = v221;
                  uint64_t v223 = *(void *)v372;
                  do
                  {
                    for (iuint64_t i = 0; ii != v222; ++ii)
                    {
                      if (*(void *)v372 != v223) {
                        objc_enumerationMutation(v220);
                      }
                      [v187 appendFormat:@"\t\tHandle %@\n", *(void *)(*((void *)&v371 + 1) + 8 * ii)];
                    }
                    uint64_t v222 = [v220 countByEnumeratingWithState:&v371 objects:v412 count:16];
                  }
                  while (v222);
                }

                v225 = [v211 capabilities];

                if (v225)
                {
                  v226 = [v211 capabilities];
                  [v187 appendFormat:@"\t\t%@\n", v226];
                }
                uint64_t v210 = v335 + 1;
              }
              while (v335 + 1 != v322);
              uint64_t v322 = [v318 countByEnumeratingWithState:&v375 objects:v413 count:16];
            }
            while (v322);
          }
        }
        uint64_t v195 = v317 + 1;
        id v5 = v314;
      }
      while (v317 + 1 != v316);
      uint64_t v316 = [v312 countByEnumeratingWithState:&v383 objects:v415 count:16];
    }
    while (v316);
  }

  v186 = v315;
  if ([v187 length]) {
    [v315 setObject:v187 forKeyedSubscript:@"kDumpStateAccountsDescriptionKey"];
  }

  if (v308)
  {
    char v227 = 1;
    goto LABEL_148;
  }
LABEL_146:
  if (![v5 containsObject:@"kDumpStateRegisteredPairedAccyDescriptionKey"]) {
    goto LABEL_152;
  }
  char v227 = 0;
LABEL_148:
  v228 = [(HMDHomeManager *)self accessoryBrowserInternal];
  v229 = [v228 dumpRegisteredPairedAccessories];

  if ([v229 length]) {
    [v186 setObject:v229 forKeyedSubscript:@"kDumpStateRegisteredPairedAccyDescriptionKey"];
  }

  if (v227)
  {
    char v230 = 1;
    goto LABEL_155;
  }
LABEL_152:
  if (([v5 containsObject:@"kDumpStateRegisteredPairedAccyDescriptionKey"] & 1) == 0
    && ![v5 containsObject:@"kDumpStateUnassociatedAccyDescriptionKey"])
  {
    goto LABEL_159;
  }
  char v230 = 0;
LABEL_155:
  v231 = [(HMDHomeManager *)self accessoryBrowser];
  v232 = [v231 dumpBrowsingConnections];

  if ([v232 length]) {
    [v186 setObject:v232 forKeyedSubscript:@"kDumpStateBrowsingConnectionsDescriptionKey"];
  }

  if (v230)
  {
    v233 = self;
    v234 = [(HMDHomeManager *)self messageDispatcher];
    v235 = [v234 secureRemoteTransport];
    v236 = [v235 dumpState];
    [v186 setObject:v236 forKeyedSubscript:@"RemoteMessaging"];

    char v340 = 1;
    goto LABEL_163;
  }
LABEL_159:
  if ([v5 containsObject:@"kDumpStateRemoteMessagingKey"])
  {
    v237 = [(HMDHomeManager *)self messageDispatcher];
    v238 = [v237 secureRemoteTransport];
    v239 = [v238 dumpState];
    [v186 setObject:v239 forKeyedSubscript:@"RemoteMessaging"];
  }
  if (![v5 containsObject:@"kDumpStateActionSetDescriptionKey"])
  {
    isWatch();
    goto LABEL_175;
  }
  char v340 = 0;
  v233 = self;
LABEL_163:
  v240 = [MEMORY[0x263EFF9A0] dictionary];
  long long v367 = 0u;
  long long v368 = 0u;
  long long v369 = 0u;
  long long v370 = 0u;
  id objd = [(HMDHomeManager *)v233 homes];
  uint64_t v241 = [objd countByEnumeratingWithState:&v367 objects:v411 count:16];
  if (v241)
  {
    uint64_t v242 = v241;
    uint64_t v243 = *(void *)v368;
    do
    {
      for (juint64_t j = 0; jj != v242; ++jj)
      {
        if (*(void *)v368 != v243) {
          objc_enumerationMutation(objd);
        }
        v245 = *(void **)(*((void *)&v367 + 1) + 8 * jj);
        v246 = NSString;
        v247 = [v245 name];
        v248 = [v245 uuid];
        v249 = [v246 stringWithFormat:@"%@/%@", v247, v248];

        v250 = [v245 dumpActionSetDescription];
        [v240 setObject:v250 forKeyedSubscript:v249];
      }
      uint64_t v242 = [objd countByEnumeratingWithState:&v367 objects:v411 count:16];
    }
    while (v242);
  }

  v186 = v315;
  if ([v240 count])
  {
    v251 = (void *)[v240 copy];
    [v315 setObject:v251 forKeyedSubscript:@"kDumpStateActionSetDescriptionKey"];
  }
  isWatch();
  id v5 = v314;
  if (v340)
  {
    char v252 = 1;
    goto LABEL_177;
  }
LABEL_175:
  if (![v5 containsObject:@"kDumpStateCharacteristicNotificationRegistryKey"]) {
    goto LABEL_188;
  }
  char v252 = 0;
LABEL_177:
  v253 = [MEMORY[0x263F089D8] string];
  long long v363 = 0u;
  long long v364 = 0u;
  long long v365 = 0u;
  long long v366 = 0u;
  v254 = [(HMDHomeManager *)self homes];
  uint64_t v255 = [v254 countByEnumeratingWithState:&v363 objects:v410 count:16];
  if (v255)
  {
    uint64_t v256 = v255;
    uint64_t v257 = *(void *)v364;
    do
    {
      for (kuint64_t k = 0; kk != v256; ++kk)
      {
        if (*(void *)v364 != v257) {
          objc_enumerationMutation(v254);
        }
        v259 = [*(id *)(*((void *)&v363 + 1) + 8 * kk) dumpCharacteristicNotificationRegistry];
        [v253 appendString:v259];
      }
      uint64_t v256 = [v254 countByEnumeratingWithState:&v363 objects:v410 count:16];
    }
    while (v256);
  }

  v186 = v315;
  if ([v253 length]) {
    [v315 setObject:v253 forKeyedSubscript:@"kDumpStateCharacteristicNotificationRegistryKey"];
  }

  if (v252)
  {
    char v341 = 1;
    goto LABEL_190;
  }
LABEL_188:
  if (![v5 containsObject:@"kDumpStateMediaSessionsKey"]) {
    goto LABEL_201;
  }
  char v341 = 0;
LABEL_190:
  v260 = [MEMORY[0x263EFF9A0] dictionary];
  long long v359 = 0u;
  long long v360 = 0u;
  long long v361 = 0u;
  long long v362 = 0u;
  id obje = [(HMDHomeManager *)self homes];
  uint64_t v261 = [obje countByEnumeratingWithState:&v359 objects:v409 count:16];
  if (v261)
  {
    uint64_t v262 = v261;
    uint64_t v263 = *(void *)v360;
    do
    {
      for (muint64_t m = 0; mm != v262; ++mm)
      {
        if (*(void *)v360 != v263) {
          objc_enumerationMutation(obje);
        }
        v265 = *(void **)(*((void *)&v359 + 1) + 8 * mm);
        v266 = NSString;
        v267 = [v265 name];
        v268 = [v265 uuid];
        v269 = [v266 stringWithFormat:@"%@/%@", v267, v268];

        v270 = [v265 dumpMediaSessionDescription];
        [v260 setObject:v270 forKeyedSubscript:v269];
      }
      uint64_t v262 = [obje countByEnumeratingWithState:&v359 objects:v409 count:16];
    }
    while (v262);
  }

  v186 = v315;
  if ([v260 count])
  {
    v271 = (void *)[v260 copy];
    [v315 setObject:v271 forKeyedSubscript:@"kDumpStateMediaSessionsKey"];
  }
  id v5 = v314;
  if (v341)
  {
    v272 = self;
    v273 = [(HMDHomeManager *)self syncManager];
    v274 = [v273 dumpState];
    [v315 setObject:v274 forKeyedSubscript:*MEMORY[0x263F41FB0]];

    uint64_t v275 = *MEMORY[0x263F41E98];
    v276 = [(HMDHomeManager *)self appData];
    v277 = [v276 dumpState];
    [v315 setObject:v277 forKeyedSubscript:v275];

    v278 = [MEMORY[0x263F35AD0] systemStore];
    v279 = [v278 dumpState];
    [v315 setObject:v279 forKeyedSubscript:*MEMORY[0x263F41F30]];

    int objf = 1;
LABEL_209:
    v289 = [MEMORY[0x263EFF980] array];
    long long v355 = 0u;
    long long v356 = 0u;
    long long v357 = 0u;
    long long v358 = 0u;
    v290 = v272->_homes;
    uint64_t v291 = [(NSMutableArray *)v290 countByEnumeratingWithState:&v355 objects:v408 count:16];
    if (v291)
    {
      uint64_t v292 = v291;
      uint64_t v293 = *(void *)v356;
      do
      {
        for (nuint64_t n = 0; nn != v292; ++nn)
        {
          if (*(void *)v356 != v293) {
            objc_enumerationMutation(v290);
          }
          v295 = *(void **)(*((void *)&v355 + 1) + 8 * nn);
          long long v351 = 0u;
          long long v352 = 0u;
          long long v353 = 0u;
          long long v354 = 0u;
          v296 = [v295 accessories];
          uint64_t v297 = [v296 countByEnumeratingWithState:&v351 objects:v407 count:16];
          if (v297)
          {
            uint64_t v298 = v297;
            uint64_t v299 = *(void *)v352;
            do
            {
              for (uint64_t i1 = 0; i1 != v298; ++i1)
              {
                if (*(void *)v352 != v299) {
                  objc_enumerationMutation(v296);
                }
                v301 = [*(id *)(*((void *)&v351 + 1) + 8 * i1) dumpNetworkState];
                if (v301) {
                  [v289 addObject:v301];
                }
              }
              uint64_t v298 = [v296 countByEnumeratingWithState:&v351 objects:v407 count:16];
            }
            while (v298);
          }
        }
        uint64_t v292 = [(NSMutableArray *)v290 countByEnumeratingWithState:&v355 objects:v408 count:16];
      }
      while (v292);
    }

    v186 = v315;
    [v315 setObject:v289 forKeyedSubscript:@"kDumpStateNetworkKey"];

    id v5 = v314;
    if (objf)
    {
      v302 = [MEMORY[0x263EFF9A0] dictionary];
      v303 = [(HMDHomeManager *)self homes];
      v349[0] = MEMORY[0x263EF8330];
      v349[1] = 3221225472;
      v349[2] = __46__HMDHomeManager__getRequestedState_activity___block_invoke;
      v349[3] = &unk_264A2B898;
      id v304 = v302;
      id v350 = v304;
      objc_msgSend(v303, "na_each:", v349);

      [v315 setObject:v304 forKeyedSubscript:@"kDumpStateBulletinNotificationRegistrationsKey"];
    }
    goto LABEL_227;
  }
LABEL_201:
  uint64_t v280 = *MEMORY[0x263F41FB0];
  if ([v5 containsObject:*MEMORY[0x263F41FB0]])
  {
    v281 = [(HMDHomeManager *)self syncManager];
    v282 = [v281 dumpState];
    [v186 setObject:v282 forKeyedSubscript:v280];
  }
  uint64_t v283 = *MEMORY[0x263F41E98];
  if ([v5 containsObject:*MEMORY[0x263F41E98]])
  {
    v284 = [(HMDHomeManager *)self appData];
    v285 = [v284 dumpState];
    [v186 setObject:v285 forKeyedSubscript:v283];
  }
  uint64_t v286 = *MEMORY[0x263F41F30];
  if ([v5 containsObject:*MEMORY[0x263F41F30]])
  {
    v287 = [MEMORY[0x263F35AD0] systemStore];
    v288 = [v287 dumpState];
    [v186 setObject:v288 forKeyedSubscript:v286];
  }
  if ([v5 containsObject:@"kDumpStateNetworkKey"])
  {
    int objf = 0;
    v272 = self;
    goto LABEL_209;
  }
LABEL_227:
  [v309 invalidate];
  id v305 = v186;

  return v305;
}

void __46__HMDHomeManager__getRequestedState_activity___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = [v3 dumpBulletinNotificationRegistrationsState];
  id v4 = *(void **)(a1 + 32);
  id v5 = [v3 name];

  [v4 setObject:v6 forKeyedSubscript:v5];
}

- (void)_handleQueryVersionInformation:(id)a3
{
  v18[1] = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x263F089D8];
  id v4 = a3;
  id v5 = [v3 string];
  id v6 = [MEMORY[0x263F086E0] mainBundle];
  id v7 = [v6 infoDictionary];
  int v8 = [v7 objectForKey:*MEMORY[0x263EFFB70]];
  [v5 appendFormat:@"homed: %@\n", v8];

  id v9 = +[HMDHAPMetadata getSharedInstance];
  __int16 v10 = +[HMDHAPMetadata getBuiltinInstance];
  id v11 = [v9 schemaVersion];
  uint64_t v12 = [v9 version];
  id v13 = [v10 schemaVersion];
  uint64_t v14 = [v10 version];
  [v5 appendFormat:@"Metadata - Current: %@/%@   Builtin: %@/%@\n", v11, v12, v13, v14];

  int v17 = @"kHomeKitVersionStringKey";
  v18[0] = v5;
  uint64_t v15 = [NSDictionary dictionaryWithObjects:v18 forKeys:&v17 count:1];
  uint64_t v16 = [v4 responseHandler];

  ((void (**)(void, void, void *))v16)[2](v16, 0, v15);
}

- (void)_handleContactStoreChanged
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v3 = [(HMDHomeManager *)self incomingInvitations];
  id v4 = (void *)[v3 copy];

  uint64_t v5 = [v4 countByEnumeratingWithState:&v24 objects:v33 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    int v7 = 0;
    uint64_t v8 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v25 != v8) {
          objc_enumerationMutation(v4);
        }
        v7 |= [*(id *)(*((void *)&v24 + 1) + 8 * i) refreshDisplayName];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v24 objects:v33 count:16];
    }
    while (v6);
    int v10 = v7 & 1;
  }
  else
  {
    int v10 = 0;
  }

  id v11 = (void *)MEMORY[0x230FBD990]();
  uint64_t v12 = self;
  id v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    __int16 v30 = v14;
    __int16 v31 = 1024;
    int v32 = v10;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Handling contact store changed with saveToStore: %{BOOL}d", buf, 0x12u);
  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v15 = [(HMDHomeManager *)v12 homes];
  uint64_t v16 = [v15 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)v21;
    do
    {
      for (uint64_t j = 0; j != v17; ++j)
      {
        if (*(void *)v21 != v18) {
          objc_enumerationMutation(v15);
        }
        [*(id *)(*((void *)&v20 + 1) + 8 * j) refreshUserDisplayNames];
      }
      uint64_t v17 = [v15 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v17);
  }
}

- (void)handleContactStoreChanged:(id)a3
{
  id v4 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __44__HMDHomeManager_handleContactStoreChanged___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v4, block);
}

uint64_t __44__HMDHomeManager_handleContactStoreChanged___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleContactStoreChanged];
}

- (void)processMetadataModel:(id)a3 message:(id)a4
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v53 = a4;
  uint64_t v6 = [v53 transactionResult];
  int v7 = (void *)MEMORY[0x230FBD990]();
  uint64_t v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    int v10 = +[HMDBackingStoreTransactionOptions stringForHMDBackingStoreTransactionSource:](HMDBackingStoreTransactionActions, "stringForHMDBackingStoreTransactionSource:", [v6 source]);
    *(_DWORD *)long long buf = 138543618;
    uint64_t v56 = v9;
    __int16 v57 = 2112;
    unint64_t v58 = (unint64_t)v10;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Receiving metadata model from %@", buf, 0x16u);
  }
  id v11 = [v5 metadataVersion];
  unint64_t v12 = [v11 unsignedIntegerValue];

  id v13 = [v5 schemaVersion];
  uint64_t v14 = [v13 unsignedIntegerValue];

  uint64_t v15 = +[HMDHAPMetadata getSharedInstance];
  uint64_t v16 = [v15 version];
  unint64_t v17 = [v16 unsignedIntegerValue];

  uint64_t v18 = +[HMDHAPMetadata getSharedInstance];
  __int16 v19 = [v18 schemaVersion];
  uint64_t v20 = [v19 unsignedIntegerValue];

  long long v21 = (void *)MEMORY[0x230FBD990]();
  long long v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    long long v23 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138544386;
    uint64_t v56 = v23;
    __int16 v57 = 2048;
    unint64_t v58 = v12;
    __int16 v59 = 2048;
    uint64_t v60 = v14;
    __int16 v61 = 2048;
    unint64_t v62 = v17;
    __int16 v63 = 2048;
    uint64_t v64 = v20;
    _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@The new metadata has version %tu, schema version %tu, current version %tu, schema %tu", buf, 0x34u);
  }
  if (v20 != v14)
  {
    long long v37 = (void *)MEMORY[0x230FBD990]();
    long long v38 = HMFGetOSLogHandle();
    long long v24 = v6;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      long long v39 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v56 = v39;
      _os_log_impl(&dword_22F52A000, v38, OS_LOG_TYPE_ERROR, "%{public}@Schema is compatible, not processing this metadata.", buf, 0xCu);
    }
    __int16 v31 = v53;
    goto LABEL_34;
  }
  long long v24 = v6;
  if (v12 <= v17)
  {
    if (v12 >= v17)
    {
      __int16 v31 = v53;
      if (+[HMDHAPMetadata shouldUploadToCloudAfterHomedReady]|| v12 == v17)
      {
        __int16 v47 = (void *)MEMORY[0x230FBD990]();
        __int16 v48 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
        {
          __int16 v49 = HMFGetLogIdentifier();
          BOOL v50 = +[HMDHAPMetadata shouldUploadToCloudAfterHomedReady];
          uint64_t v51 = "NO";
          if (v50) {
            uint64_t v51 = "YES";
          }
          *(_DWORD *)long long buf = 138543618;
          uint64_t v56 = v49;
          __int16 v57 = 2080;
          unint64_t v58 = (unint64_t)v51;
          _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_INFO, "%{public}@Metadata should be uploaded to cloud after homed is ready: %s", buf, 0x16u);
        }
        [v6 markChanged];
        goto LABEL_33;
      }
      uint64_t v45 = [v53 responseHandler];

      if (v45)
      {
        long long v36 = [v53 responseHandler];
        uint64_t v46 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
        ((void (**)(void, void *, void))v36)[2](v36, v46, 0);

        goto LABEL_27;
      }
    }
    else
    {
      __int16 v31 = v53;
      if ([v6 source] == 2)
      {
        long long v36 = +[HMDPersistentStore loadPlainMetadataDictionary];
        [(HMDHomeManager *)self handleMetadataDictionary:v36 message:0];
LABEL_27:
      }
    }
LABEL_33:
    +[HMDHAPMetadata resetShouldUploadToCloudAfterHomedReady];
    goto LABEL_34;
  }
  long long v25 = [v5 rawPlist];
  id v54 = 0;
  long long v26 = +[HMDHAPMetadata metadataWithDictionary:v25 error:&v54];
  id v27 = v54;

  uint64_t v28 = (void *)MEMORY[0x230FBD990]();
  uint64_t v29 = HMFGetOSLogHandle();
  __int16 v30 = v29;
  if (!v27 && v26)
  {
    __int16 v31 = v53;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      int v32 = HMFGetLogIdentifier();
      uint64_t v33 = [v26 version];
      uint64_t v34 = [v26 schemaVersion];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v56 = v32;
      __int16 v57 = 2112;
      unint64_t v58 = (unint64_t)v33;
      __int16 v59 = 2112;
      uint64_t v60 = (uint64_t)v34;
      _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_INFO, "%{public}@Updating current metadata to the new metadata %@/%@.", buf, 0x20u);
    }
    long long v35 = [v5 metadataDictionary];
    +[HMDHAPMetadata updateLocalMetadataWithMetadata:v35];

    long long v36 = +[HMDHAPMetadata getSharedInstance];

    [v6 markSaveToAssistant];
    [v6 markChanged];
    [(HMDHomeManager *)self _pushMetadataChangesToUsers];
    [(HMDHomeManager *)self pushMetadataToAllWatches];
    [(HMDHomeManager *)self _notifyMetadata:v36 limitToSPIClients:0 message:v53 invokeResponseHandler:1];
    [(HMDHomeManager *)self _notifyMetadata:v36 limitToSPIClients:1 message:v53 invokeResponseHandler:0];
    goto LABEL_27;
  }
  __int16 v31 = v53;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    long long v40 = HMFGetLogIdentifier();
    long long v41 = [v5 rawPlist];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v56 = v40;
    __int16 v57 = 2112;
    unint64_t v58 = (unint64_t)v41;
    _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to init metadata with dictionary %@", buf, 0x16u);
  }
  id v42 = [v53 responseHandler];

  if (v42)
  {
    uint64_t v43 = [v53 responseHandler];
    uint64_t v44 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    ((void (**)(void, void *, void))v43)[2](v43, v44, 0);
  }
LABEL_34:
}

- (void)_notifyMetadata:(id)a3 limitToSPIClients:(BOOL)a4 message:(id)a5 invokeResponseHandler:(BOOL)a6
{
  BOOL v7 = a4;
  void v29[3] = *MEMORY[0x263EF8340];
  id v10 = a5;
  v28[0] = @"kMetadataInfoVersionKey";
  id v11 = a3;
  unint64_t v12 = [v11 version];
  v29[0] = v12;
  v28[1] = @"kMetadataInfoSchemaVersionKey";
  id v13 = [v11 schemaVersion];
  v29[1] = v13;
  v28[2] = @"kHAPMetadataDataKey";
  uint64_t v14 = [v11 xpcData:v7];

  v29[2] = v14;
  uint64_t v15 = [NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:3];

  if (v7)
  {
    uint64_t v16 = (void *)MEMORY[0x263F42568];
    unint64_t v17 = [v10 identifier];
    uint64_t v18 = [v16 entitledMessageWithName:@"kMetadataChangedNotificationKey" identifier:v17 messagePayload:v15];
  }
  else
  {
    __int16 v19 = (void *)MEMORY[0x263F42590];
    uint64_t v20 = [(HMDHomeManager *)self messageDestination];
    uint64_t v18 = [v19 messageWithName:@"kMetadataChangedNotificationKey" destination:v20 payload:v15];

    long long v21 = [v10 identifier];
    [v18 setIdentifier:v21];

    objc_msgSend(v18, "setRemote:", objc_msgSend(v10, "isRemote"));
  }
  long long v22 = [(HMDHomeManager *)self messageDispatcher];
  long long v23 = [(HMDHomeManager *)self uuid];
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 3221225472;
  void v25[2] = __82__HMDHomeManager__notifyMetadata_limitToSPIClients_message_invokeResponseHandler___block_invoke;
  v25[3] = &unk_264A2B870;
  BOOL v27 = a6;
  id v26 = v10;
  id v24 = v10;
  [v22 sendMessage:v18 target:v23 andInvokeCompletionHandler:v25];
}

uint64_t __82__HMDHomeManager__notifyMetadata_limitToSPIClients_message_invokeResponseHandler___block_invoke(uint64_t result)
{
  if (*(unsigned char *)(result + 40)) {
    return [*(id *)(result + 32) respondWithPayload:0];
  }
  return result;
}

- (void)handleMetadataDictionary:(id)a3 message:(id)a4
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = +[HMDHAPMetadataModel modelWithDictionary:v6];
  if (v8)
  {
    id v9 = [(HMDHomeManager *)self backingStore];
    id v10 = +[HMDBackingStoreTransactionOptions defaultMetadataCloudOptions];
    id v11 = [v9 transaction:@"MetadataUpdate" options:v10];

    [v11 add:v8 withMessage:v7];
    [v11 run];
  }
  else
  {
    unint64_t v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v18 = 138543618;
      __int16 v19 = v14;
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate metadata model object from dictionary %@", (uint8_t *)&v18, 0x16u);
    }
    uint64_t v15 = [v7 responseHandler];

    if (v15)
    {
      uint64_t v16 = [v7 responseHandler];
      unint64_t v17 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      ((void (**)(void, void *, void))v16)[2](v16, v17, 0);
    }
  }
}

- (void)_handleHomeManagerSyncWalletKeysPassSerialNumbersMessage:(id)a3
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v4 = (__CFString *)a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = [MEMORY[0x263F42530] internalOnlyInitializer];
  id v7 = (void *)MEMORY[0x230FBD990]();
  uint64_t v8 = self;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    id v11 = [v6 UUID];
    *(_DWORD *)long long buf = 138543874;
    long long v25 = v10;
    __int16 v26 = 2112;
    BOOL v27 = v11;
    __int16 v28 = 2112;
    uint64_t v29 = v4;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Handling message to sync wallet keys pass serial numbers: %@", buf, 0x20u);
  }
  unint64_t v12 = [(__CFString *)v4 arrayForKey:@"HMDHomeMangerMessageKeyHomeWalletKeysPassSerialNumbers"];
  id v13 = objc_msgSend(v12, "na_map:", &__block_literal_global_1031);

  if (v13)
  {
    uint64_t v14 = [MEMORY[0x263EFFA08] setWithArray:v13];
    [(HMDHomeManager *)v8 removeHomeWalletKeysExcludingSerialNumbers:v14 flow:v6];
    uint64_t v22 = @"kDataSyncResponseAckKey";
    uint64_t v23 = MEMORY[0x263EFFA88];
    uint64_t v15 = [NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    [(__CFString *)v4 respondWithPayload:v15];
  }
  else
  {
    uint64_t v16 = (void *)MEMORY[0x230FBD990]();
    unint64_t v17 = v8;
    int v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      __int16 v19 = HMFGetLogIdentifier();
      __int16 v20 = [v6 UUID];
      id v21 = [(__CFString *)v4 messagePayload];
      *(_DWORD *)long long buf = 138544130;
      long long v25 = v19;
      __int16 v26 = 2112;
      BOOL v27 = v20;
      __int16 v28 = 2112;
      uint64_t v29 = @"HMDHomeMangerMessageKeyHomeWalletKeysPassSerialNumbers";
      __int16 v30 = 2112;
      __int16 v31 = v21;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Payload of message to sync wallet keys pass serial numbers is missing key %@: %@", buf, 0x2Au);
    }
    uint64_t v14 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [(__CFString *)v4 respondWithError:v14];
  }
}

id __75__HMDHomeManager__handleHomeManagerSyncWalletKeysPassSerialNumbersMessage___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  return v4;
}

- (void)_handleMetadataSync:(id)a3
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([v4 remoteRestriction] == 4)
  {
    id v5 = [v4 dataForKey:@"kHAPMetadataDataKey"];
    objc_msgSend(v5, "hmd_uncompressedData");
    id v6 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();

    id v7 = (void *)MEMORY[0x263F08928];
    uint64_t v8 = +[HMDHAPMetadataModel allowedTypes];
    id v28 = 0;
    id v9 = [v7 unarchivedObjectOfClasses:v8 fromData:v6 error:&v28];
    id v10 = v28;

    if (v6 && v9)
    {
      [(HMDHomeManager *)self handleMetadataDictionary:v9 message:0];
      id v11 = [v4 responseHandler];

      if (!v11)
      {
LABEL_19:

        goto LABEL_20;
      }
      unint64_t v12 = [v4 responseHandler];
      uint64_t v29 = @"kDataSyncResponseAckKey";
      uint64_t v30 = MEMORY[0x263EFFA88];
      id v13 = [NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
      v12[2](v12, 0, v13);
    }
    else
    {
      __int16 v19 = (void *)MEMORY[0x230FBD990]();
      __int16 v20 = self;
      id v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v34 = v22;
        _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_ERROR, "%{public}@Failed to receive metadata update", buf, 0xCu);
      }
      if (v6)
      {
        uint64_t v23 = (void *)MEMORY[0x230FBD990]();
        id v24 = v20;
        long long v25 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          __int16 v26 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v34 = v26;
          __int16 v35 = 2112;
          id v36 = v10;
          _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive hap metadata model from metadata data: %@", buf, 0x16u);
        }
      }
      BOOL v27 = [v4 responseHandler];

      if (!v27) {
        goto LABEL_19;
      }
      unint64_t v12 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      id v13 = [v4 responseHandler];
      v13[2](v13, v12, 0);
    }

    goto LABEL_19;
  }
  uint64_t v14 = (void *)MEMORY[0x230FBD990]();
  uint64_t v15 = self;
  uint64_t v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    unint64_t v17 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v34 = v17;
    __int16 v35 = 2112;
    id v36 = v4;
    _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Dropping metadata sync: %@", buf, 0x16u);
  }
  int v18 = [v4 responseHandler];

  if (v18)
  {
    id v6 = [v4 responseHandler];
    __int16 v31 = @"kDataSyncResponseAckKey";
    uint64_t v32 = MEMORY[0x263EFFA88];
    id v10 = [NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
    ((void (**)(void, void, id))v6)[2](v6, 0, v10);
LABEL_20:
  }
}

- (void)_handleSetMetadata:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 stringForKey:@"kMetadataPlistPathKey"];
  id v10 = (id)v5;
  if (v5)
  {
    id v6 = NSURL;
    id v7 = [@"file://" stringByAppendingString:v5];
    uint64_t v8 = [v6 URLWithString:v7];

    id v9 = [NSDictionary dictionaryWithContentsOfURL:v8];
    [(HMDHomeManager *)self handleMetadataDictionary:v9 message:v4];

    id v4 = (id)v8;
  }
  else
  {
    +[HMDHAPMetadata updateLocalMetadataWithBuiltinMetadata];
    [v4 respondWithPayload:0];
  }
}

- (void)_handleQueryMetadata:(id)a3
{
  v16[1] = *MEMORY[0x263EF8340];
  id v3 = a3;
  id v4 = [v3 stringForKey:@"kMetadataPlistPathKey"];
  if (!v4)
  {
    uint64_t v8 = [v3 numberForKey:@"kMetadataDictionaryTypeKey"];
    int v9 = [v8 unsignedIntegerValue];
    if (v9 == 1)
    {
      uint64_t v10 = +[HMDHAPMetadata getSharedInstance];
    }
    else
    {
      if (v9)
      {
        uint64_t v5 = 0;
        goto LABEL_10;
      }
      uint64_t v10 = +[HMDHAPMetadata getBuiltinInstance];
    }
    uint64_t v5 = (void *)v10;
LABEL_10:

    goto LABEL_11;
  }
  id v14 = 0;
  uint64_t v5 = +[HMDHAPMetadata metadataWithPath:v4 error:&v14];
  id v6 = v14;
  if (v6)
  {
    id v7 = v6;
    [v3 respondWithError:v6];
    goto LABEL_15;
  }
LABEL_11:
  uint64_t v11 = [v5 rawPlist];
  unint64_t v12 = (void *)v11;
  if (v11)
  {
    uint64_t v15 = @"kMetadataDictionaryKey";
    v16[0] = v11;
    id v13 = [NSDictionary dictionaryWithObjects:v16 forKeys:&v15 count:1];
    [v3 respondWithPayload:v13];

    id v7 = 0;
  }
  else
  {
    id v7 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:1001 userInfo:0];
    [v3 respondWithError:v7];
  }

LABEL_15:
}

- (void)idsServerBagDidUpdate:(id)a3
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v14 = v8;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@idsServerBagDidUpdate delegate called", buf, 0xCu);
  }
  int v9 = [(HMDHomeManager *)v6 capabilitiesController];
  [v9 updateCurrentAccessoryCapabilities];

  uint64_t v10 = [(HMDHomeManager *)v6 workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __40__HMDHomeManager_idsServerBagDidUpdate___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = v6;
  dispatch_async(v10, block);

  uint64_t v11 = [(HMDHomeManager *)v6 uuid];
  [(HMDHomeManager *)v6 updateGenerationCounterWithReason:@"IDS server bag updated" sourceUUID:v11 shouldNotifyClients:1];
}

void __40__HMDHomeManager_idsServerBagDidUpdate___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) notificationCenter];
  [v2 postNotificationName:@"HMDHomeManagerServerBagUpdatedNotification" object:*(void *)(a1 + 32) userInfo:0];
}

- (void)_handleRemoteSessionTornDownNotification:(id)a3
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 userInfo];
  id v6 = objc_msgSend(v5, "hmf_UUIDForKey:", @"kHomeUUID");

  if (v6)
  {
    id v7 = [(HMDHomeManager *)self _homeWithUUID:v6];
    uint64_t v8 = [v7 residentDeviceManager];
    char v9 = [v8 isResidentAvailable];

    if ((v9 & 1) == 0)
    {
      uint64_t v10 = (void *)MEMORY[0x230FBD990]();
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        unint64_t v12 = HMFGetLogIdentifier();
        int v24 = 138543618;
        long long v25 = v12;
        __int16 v26 = 2112;
        BOOL v27 = v7;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Receive notification that remote access was torn down for home %@", (uint8_t *)&v24, 0x16u);
      }
      if (v7)
      {
        id v13 = (void *)MEMORY[0x230FBD990]();
        id v14 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          uint64_t v15 = HMFGetLogIdentifier();
          uint64_t v16 = [v7 name];
          unint64_t v17 = [v7 uuid];
          int v18 = [v17 UUIDString];
          int v24 = 138543874;
          long long v25 = v15;
          __int16 v26 = 2112;
          BOOL v27 = v16;
          __int16 v28 = 2112;
          uint64_t v29 = v18;
          _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Re-electing new resident device for home: %@ (%@)", (uint8_t *)&v24, 0x20u);
        }
        __int16 v19 = [v7 uuid];
        [(HMDHomeManager *)self _teardownRemoteAccessForHome:v19];

        __int16 v20 = [v7 uuid];
        [(HMDHomeManager *)self _electRemoteAccessPeerForHome:v20];
      }
    }
  }
  else
  {
    id v21 = (void *)MEMORY[0x230FBD990]();
    uint64_t v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = HMFGetLogIdentifier();
      int v24 = 138543362;
      long long v25 = v23;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Receive notification that remote access was torn down for an unknown home, re-checking if we need to spin up remote access for any of our homes", (uint8_t *)&v24, 0xCu);
    }
    [(HMDHomeManager *)self _checkForRemotePeers];
  }
}

- (void)_electCompanionForRemoteAccess:(id)a3
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self _homeWithUUID:v4];
  if (v5)
  {
    id v6 = [(HMDHomeManager *)self associatedRemotePeers];
    id v7 = [v6 objectForKeyedSubscript:v4];

    if ([v7 count])
    {
      uint64_t v8 = [v7 anyObject];
      char v9 = +[HMDDevice deviceWithDestination:v8];
      uint64_t v10 = [(HMDHomeManager *)self messageDispatcher];
      [v10 setCompanionDevice:v9 forHome:v5];
    }
    else
    {
      id v14 = (void *)MEMORY[0x230FBD990]();
      uint64_t v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = HMFGetLogIdentifier();
        int v17 = 138543618;
        int v18 = v16;
        __int16 v19 = 2112;
        id v20 = v4;
        _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@There are no remote peers for this home: %@", (uint8_t *)&v17, 0x16u);
      }
      [(HMDHomeManager *)self _teardownRemoteAccessForHomeThroughCompanion:v4];
    }
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x230FBD990]();
    unint64_t v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int v17 = 138543618;
      int v18 = v13;
      __int16 v19 = 2112;
      id v20 = v4;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Home with UUID not found: %@", (uint8_t *)&v17, 0x16u);
    }
  }
}

- (void)_electRemoteAccessDeviceForHome:(id)a3 retryCount:(unint64_t)a4
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  id v48 = a3;
  id v4 = -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:");
  id v57 = v4;
  if (v4)
  {
    if ([v4 isResidentSupported])
    {
      uint64_t v5 = (void *)MEMORY[0x230FBD990]();
      id v6 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        id v7 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v48;
        _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Skipping electing remote access for home, %@, with a resident device", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v8 = [(HMDHomeManager *)self associatedRemotePeers];
      __int16 v47 = [v8 objectForKeyedSubscript:v48];

      if ([v47 count])
      {
        char v9 = [(HMDHomeManager *)self pendingRemoteSessions];
        uint64_t v46 = [v9 allValues];

        if ([v46 containsObject:v48])
        {
          uint64_t v10 = (void *)MEMORY[0x230FBD990]();
          uint64_t v11 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            unint64_t v12 = HMFGetLogIdentifier();
            id v13 = [v48 UUIDString];
            *(_DWORD *)long long buf = 138543618;
            *(void *)&uint8_t buf[4] = v12;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v13;
            _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@We have a pending election for home: %@, dropping this request", buf, 0x16u);
          }
        }
        else
        {
          id v14 = [(HMDHomeManager *)self identifiersOfAccessoriesForHome:v57];
          __int16 v49 = [v14 allObjects];

          id v53 = [MEMORY[0x263F08C38] UUID];
          uint64_t v15 = [(HMDHomeManager *)self pendingRemoteSessions];
          [v15 setObject:v48 forKeyedSubscript:v53];

          uint64_t v16 = (void *)MEMORY[0x230FBD990]();
          int v17 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            int v18 = HMFGetLogIdentifier();
            __int16 v19 = [v53 UUIDString];
            *(_DWORD *)long long buf = 138544130;
            *(void *)&uint8_t buf[4] = v18;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v57;
            *(_WORD *)&buf[22] = 2112;
            long long v99 = v19;
            LOWORD(v100) = 2048;
            *(void *)((char *)&v100 + 2) = [v47 count];
            _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Spinning up remote access for home, %@, for session %@, pinging total of %lu peers", buf, 0x2Au);
          }
          v84[0] = 0;
          v84[1] = v84;
          v84[2] = 0x2020000000;
          char v85 = 0;
          *(void *)long long buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x3032000000;
          long long v99 = __Block_byref_object_copy__242964;
          *(void *)&long long v100 = __Block_byref_object_dispose__242965;
          *((void *)&v100 + 1) = 0;
          v82[0] = 0;
          v82[1] = v82;
          v82[2] = 0x3032000000;
          v82[3] = __Block_byref_object_copy__242964;
          v82[4] = __Block_byref_object_dispose__242965;
          id v83 = 0;
          group = dispatch_group_create();
          long long v78 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          id obj = v47;
          uint64_t v20 = [obj countByEnumeratingWithState:&v78 objects:v97 count:16];
          if (v20)
          {
            int v51 = 0;
            uint64_t v56 = *(void *)v79;
            do
            {
              for (uint64_t i = 0; i != v20; ++i)
              {
                if (*(void *)v79 != v56) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v22 = *(void *)(*((void *)&v78 + 1) + 8 * i);
                uint64_t v23 = [v57 users];
                int v24 = objc_msgSend(v23, "hmf_firstObjectWithValue:forKeyPath:", v22, @"userID");

                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  id v25 = v24;
                  if ([v25 configurationState] == 2)
                  {
                    long long v90 = @"kRequestedCapabilitiesKey";
                    long long v88 = @"kHomedVersionKey";
                    id v26 = (id)homedVersion;
                    id v89 = v26;
                    BOOL v27 = [NSDictionary dictionaryWithObjects:&v89 forKeys:&v88 count:1];
                    long long v91 = v27;
                    __int16 v28 = [NSDictionary dictionaryWithObjects:&v91 forKeys:&v90 count:1];

                    v86[0] = @"kHomeUUID";
                    uint64_t v29 = [v57 uuid];
                    uint64_t v30 = [v29 UUIDString];
                    v87[0] = v30;
                    v87[1] = v49;
                    v86[1] = @"kAccessoryIdentitiesKey";
                    v86[2] = @"kRemoteSessionIdentifierKey";
                    __int16 v31 = [v53 UUIDString];
                    v87[2] = v31;
                    uint64_t v32 = [NSDictionary dictionaryWithObjects:v87 forKeys:v86 count:3];

                    uint64_t v33 = [MEMORY[0x263F42568] internalMessageWithName:@"kAreYouAtHomeRequestKey" messagePayload:v32];
                    dispatch_group_enter(group);
                    objc_initWeak((id *)location, self);
                    uint64_t v34 = [(HMDHomeManager *)self workQueue];
                    v68[0] = MEMORY[0x263EF8330];
                    v68[1] = 3221225472;
                    v68[2] = __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke;
                    v68[3] = &unk_264A2B800;
                    v68[4] = self;
                    id v35 = v33;
                    id v69 = v35;
                    uint64_t v70 = v22;
                    objc_copyWeak(v77, (id *)location);
                    id v71 = v57;
                    id v74 = buf;
                    uint64_t v75 = v82;
                    id v36 = v53;
                    v77[1] = (id)a4;
                    id v72 = v36;
                    __int16 v76 = v84;
                    uint64_t v73 = group;
                    [(HMDHomeManager *)self electDeviceForUser:v22 destination:v22 deviceCapabilities:v28 queue:v34 completionHandler:v68];

                    objc_destroyWeak(v77);
                    objc_destroyWeak((id *)location);
                  }
                  else
                  {
                    long long v40 = (void *)MEMORY[0x230FBD990]();
                    HMFGetOSLogHandle();
                    long long v41 = (id)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      id v42 = (id)objc_claimAutoreleasedReturnValue();
                      uint64_t v43 = [v25 displayName];
                      *(_DWORD *)id location = 138543618;
                      *(void *)&location[4] = v42;
                      __int16 v93 = 2112;
                      long long v94 = v43;
                      _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_INFO, "%{public}@Skipping resident %@ since it is disabled", location, 0x16u);
                    }
                    ++v51;
                  }
                }
                else
                {
                  uint64_t v37 = (void *)MEMORY[0x230FBD990]();
                  HMFGetOSLogHandle();
                  long long v38 = (id)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
                  {
                    long long v39 = HMFGetLogIdentifier();
                    *(_DWORD *)id location = 138543874;
                    *(void *)&location[4] = v39;
                    __int16 v93 = 2112;
                    long long v94 = v24;
                    __int16 v95 = 2112;
                    uint64_t v96 = v22;
                    _os_log_impl(&dword_22F52A000, v38, OS_LOG_TYPE_ERROR, "%{public}@Found user %@ when looking for a resident user if userID %@", location, 0x20u);
                  }
                }
              }
              uint64_t v20 = [obj countByEnumeratingWithState:&v78 objects:v97 count:16];
            }
            while (v20);
          }
          else
          {
            int v51 = 0;
          }

          uint64_t v44 = [(HMDHomeManager *)self workQueue];
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_1021;
          block[3] = &unk_264A2B828;
          id v59 = v53;
          uint64_t v60 = self;
          int v67 = v51;
          id v61 = obj;
          id v62 = v48;
          uint64_t v64 = buf;
          id v63 = v57;
          uint64_t v65 = v84;
          unint64_t v66 = a4;
          id v45 = v53;
          dispatch_group_notify(group, v44, block);

          _Block_object_dispose(v82, 8);
          _Block_object_dispose(buf, 8);

          _Block_object_dispose(v84, 8);
        }
      }
    }
    id v4 = v57;
  }
}

void __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
    if (WeakRetained)
    {
      uint64_t v11 = (void *)MEMORY[0x230FBD990]();
      unint64_t v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        id v13 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v38 = v13;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Failed to elect device for remote session", buf, 0xCu);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
  }
  else
  {
    id v14 = [*(id *)(a1 + 32) messageDispatcher];
    uint64_t v25 = *(void *)(a1 + 40);
    uint64_t v15 = [*(id *)(a1 + 32) uuid];
    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v16 = [v8 destination];
    int v17 = [*(id *)(a1 + 32) workQueue];
    v26[0] = MEMORY[0x263EF8330];
    v26[1] = 3221225472;
    void v26[2] = __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_2;
    v26[3] = &unk_264A2B7D8;
    objc_copyWeak(v36, (id *)(a1 + 104));
    id v18 = v8;
    uint64_t v19 = *(void *)(a1 + 32);
    id v27 = v18;
    uint64_t v28 = v19;
    id v20 = *(id *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 48);
    id v29 = v20;
    uint64_t v30 = v21;
    id v31 = v9;
    long long v34 = *(_OWORD *)(a1 + 80);
    id v22 = *(id *)(a1 + 64);
    v36[1] = *(id *)(a1 + 112);
    uint64_t v23 = *(void *)(a1 + 96);
    id v32 = v22;
    uint64_t v35 = v23;
    id v33 = *(id *)(a1 + 72);
    [v14 sendSecureMessage:v25 target:v15 userID:v24 destination:v16 responseQueue:v17 responseHandler:v26];

    objc_destroyWeak(v36);
  }
}

void __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_1021(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    id v4 = HMFGetLogIdentifier();
    uint64_t v5 = [*(id *)(a1 + 32) UUIDString];
    int v26 = 138543618;
    id v27 = v4;
    __int16 v28 = 2112;
    id v29 = v5;
    _os_log_impl(&dword_22F52A000, v3, OS_LOG_TYPE_INFO, "%{public}@Remote access election completed for session %@", (uint8_t *)&v26, 0x16u);
  }
  id v6 = [*(id *)(a1 + 40) pendingRemoteSessions];
  [v6 removeObjectForKey:*(void *)(a1 + 32)];

  uint64_t v7 = *(int *)(a1 + 96);
  if ([*(id *)(a1 + 48) count] == v7)
  {
    [*(id *)(a1 + 40) _teardownRemoteAccessForHome:*(void *)(a1 + 56)];
    return;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      uint64_t v11 = [*(id *)(a1 + 64) uuid];
      unint64_t v12 = [v11 UUIDString];
      id v13 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) userID];
      int v26 = 138543874;
      id v27 = v10;
      __int16 v28 = 2112;
      id v29 = v12;
      __int16 v30 = 2112;
      uint64_t v31 = (uint64_t)v13;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Setting up remote access for home, %@, with resident %@", (uint8_t *)&v26, 0x20u);
    }
    id v14 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) userID];
    uint64_t v15 = +[HMDDevice deviceWithDestination:v14];

    uint64_t v16 = [*(id *)(a1 + 40) messageDispatcher];
    [v16 setRemoteAccessDevice:v15 forHome:*(void *)(a1 + 64)];

LABEL_9:
    return;
  }
  int v17 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
  id v18 = (void *)MEMORY[0x230FBD990]();
  uint64_t v19 = HMFGetOSLogHandle();
  BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
  if (!v17)
  {
    if (v20)
    {
      uint64_t v24 = HMFGetLogIdentifier();
      uint64_t v25 = [*(id *)(a1 + 64) uuid];
      int v26 = 138543618;
      id v27 = v24;
      __int16 v28 = 2112;
      id v29 = v25;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Not setting up remote access for home, %@, as no available residents were found", (uint8_t *)&v26, 0x16u);
    }
    uint64_t v15 = [*(id *)(a1 + 40) messageDispatcher];
    [v15 setRemoteAccessDevice:0 forHome:*(void *)(a1 + 64)];
    goto LABEL_9;
  }
  if (v20)
  {
    uint64_t v21 = HMFGetLogIdentifier();
    id v22 = [*(id *)(a1 + 56) UUIDString];
    uint64_t v23 = *(void *)(a1 + 88) + 1;
    int v26 = 138543874;
    id v27 = v21;
    __int16 v28 = 2112;
    id v29 = v22;
    __int16 v30 = 2048;
    uint64_t v31 = v23;
    _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Failed to setup remote session for home with UUID %@, retry attempt %ld", (uint8_t *)&v26, 0x20u);
  }
  [*(id *)(a1 + 40) _electRemoteAccessPeerForHome:*(void *)(a1 + 56) retryCount:*(void *)(a1 + 88) + 1];
}

void __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 112));
  if (WeakRetained)
  {
    if (!v5 && v6)
    {
      int v8 = objc_msgSend(v6, "hmf_BOOLForKey:", @"kAtHomeStateKey");
      uint64_t v9 = objc_msgSend(v6, "hmf_UUIDForKey:", @"kRemoteSessionIdentifierKey");
      uint64_t v10 = (void *)v9;
      if (!v8 || !v9)
      {
        id v36 = (void *)MEMORY[0x230FBD990]();
        uint64_t v37 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          long long v38 = HMFGetLogIdentifier();
          uint64_t v39 = *(void **)(a1 + 72);
          *(_DWORD *)long long buf = 138543618;
          id v55 = v38;
          __int16 v56 = 2112;
          id v57 = v39;
          _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@Received response that %@ is not at home", buf, 0x16u);
        }
        goto LABEL_44;
      }
      uint64_t v11 = [*(id *)(a1 + 32) destination];
      unint64_t v12 = [WeakRetained pendingRemoteSessions];
      id v13 = [v12 objectForKeyedSubscript:v10];

      if (!v13)
      {
        long long v40 = (void *)MEMORY[0x230FBD990]();
        long long v41 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v43 = id v42 = v11;
          *(_DWORD *)long long buf = 138543618;
          id v55 = v43;
          __int16 v56 = 2112;
          id v57 = v42;
          _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_INFO, "%{public}@Received response that %@ is at home, dropping setting up remote access since we tore the session down", buf, 0x16u);

          uint64_t v11 = v42;
        }

        goto LABEL_43;
      }
      id v14 = *(void **)(a1 + 40);
      uint64_t v15 = [*(id *)(a1 + 48) uuid];
      uint64_t v16 = [v14 _homeWithUUID:v15];

      int v17 = [v16 users];
      id v18 = objc_msgSend(v17, "hmf_firstObjectWithValue:forKeyPath:", *(void *)(a1 + 56), @"userID");

      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      id v20 = v19;

      if (!v20 || [v20 configurationState] != 2)
      {
LABEL_42:

LABEL_43:
LABEL_44:

        goto LABEL_45;
      }
      context = (void *)MEMORY[0x230FBD990]();
      uint64_t v21 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v48 = v16;
        uint64_t v23 = v22 = v11;
        *(_DWORD *)long long buf = 138543618;
        id v55 = v23;
        __int16 v56 = 2112;
        id v57 = v22;
        _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Received response that %@ is at home", buf, 0x16u);

        uint64_t v11 = v22;
        uint64_t v16 = v48;
      }

      uint64_t v24 = [*(id *)(a1 + 64) objectForKeyedSubscript:@"kHomedVersionKey"];
      if (v24) {
        uint64_t v25 = (void *)v24;
      }
      else {
        uint64_t v25 = &unk_26E474768;
      }
      uint64_t v26 = *(void *)(*(void *)(a1 + 88) + 8);
      uint64_t v28 = *(void *)(v26 + 40);
      id v27 = (id *)(v26 + 40);
      if (v28)
      {
        id v29 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
        if (!v29 || [v29 compare:v25] != -1)
        {
          contexta = (void *)MEMORY[0x230FBD990]();
          __int16 v30 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            uint64_t v31 = v49 = v11;
            *(_DWORD *)long long buf = 138543874;
            id v55 = v31;
            __int16 v56 = 2112;
            id v57 = v49;
            __int16 v58 = 2112;
            id v59 = v25;
            _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_INFO, "%{public}@Dropping resident %@ (%@) as a resident with a higher homed version was found", buf, 0x20u);

            uint64_t v11 = v49;
          }

          goto LABEL_41;
        }
        __int16 v47 = (void *)MEMORY[0x230FBD990]();
        int contextb = HMFGetOSLogHandle();
        if (os_log_type_enabled(contextb, OS_LOG_TYPE_INFO))
        {
          uint64_t v46 = HMFGetLogIdentifier();
          [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) userID];
          uint64_t v44 = v50 = v11;
          uint64_t v45 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
          *(_DWORD *)long long buf = 138544386;
          id v55 = v46;
          __int16 v56 = 2112;
          id v57 = v50;
          __int16 v58 = 2112;
          id v59 = v25;
          __int16 v60 = 2112;
          id v61 = v44;
          __int16 v62 = 2112;
          uint64_t v63 = v45;
          _os_log_impl(&dword_22F52A000, contextb, OS_LOG_TYPE_INFO, "%{public}@Preferring %@ (%@) over %@ (%@) due to higher homed version", buf, 0x34u);

          uint64_t v11 = v50;
        }

        id v27 = (id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
      }
      objc_storeStrong(v27, v19);
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40), v25);
LABEL_41:

      goto LABEL_42;
    }
    uint64_t v32 = (void *)MEMORY[0x230FBD990]();
    id v33 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      long long v34 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v55 = v34;
      _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@Failed to send secure message to elect device for remote session", buf, 0xCu);
    }
    if (v5)
    {
      uint64_t v10 = [v5 domain];
      if (![v10 isEqualToString:*MEMORY[0x263F08410]]
        || [v5 code] != -6722 && objc_msgSend(v5, "code") != -6752)
      {
        goto LABEL_44;
      }
      unint64_t v35 = *(void *)(a1 + 120);

      if (v35 <= 1) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 1;
      }
    }
  }
LABEL_45:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
}

- (void)_electRemoteAccessPeerForHome:(id)a3
{
}

- (void)_electRemoteGatewayForHomesAfterReachabilityChanges
{
  id v2 = self;
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v28 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Reachability changed from not reachable to reachable, checking remote access setup for all homes", buf, 0xCu);
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id obj = [(HMDHomeManager *)v2 homes];
  uint64_t v6 = [obj countByEnumeratingWithState:&v23 objects:v33 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v24;
    uint64_t v21 = v2;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        uint64_t v11 = (void *)MEMORY[0x230FBD990]();
        unint64_t v12 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          id v13 = HMFGetLogIdentifier();
          id v14 = [v10 name];
          uint64_t v15 = [v10 uuid];
          [v15 UUIDString];
          uint64_t v16 = v7;
          v18 = uint64_t v17 = v8;
          *(_DWORD *)long long buf = 138543874;
          uint64_t v28 = v13;
          __int16 v29 = 2112;
          __int16 v30 = v14;
          __int16 v31 = 2112;
          uint64_t v32 = v18;
          _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Triggering election of resident device for remote access for home %@ (%@)", buf, 0x20u);

          uint64_t v8 = v17;
          uint64_t v7 = v16;
          id v2 = v21;
        }
        uint64_t v19 = [v10 uuid];
        [(HMDHomeManager *)v2 _teardownRemoteAccessForHome:v19];

        id v20 = [v10 uuid];
        [(HMDHomeManager *)v2 _electRemoteAccessPeerForHome:v20];
      }
      uint64_t v7 = [obj countByEnumeratingWithState:&v23 objects:v33 count:16];
    }
    while (v7);
  }
}

- (void)_updateHomesAboutNetworkConnectivity:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * v9++), "updateNetworkConnectivity:companionReachable:", v3, -[HMDHomeManager companionReachable](self, "companionReachable"));
      }
      while (v7 != v9);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v7);
  }
}

- (void)_findRemotePeerContainingAccessories:(id)a3 forHome:(id)a4
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  id v34 = a3;
  id v6 = a4;
  if (!isAppleTV())
  {
    id v36 = v6;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    id obj = [(HMDHomeManager *)self unassociatedRemotePeers];
    uint64_t v7 = [obj countByEnumeratingWithState:&v42 objects:v54 count:16];
    if (v7)
    {
      uint64_t v37 = *(void *)v43;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v43 != v37) {
            objc_enumerationMutation(obj);
          }
          uint64_t v9 = *(void **)(*((void *)&v42 + 1) + 8 * i);
          long long v10 = [v9 capabilities];
          char v11 = [v10 isResidentCapable];

          if ((v11 & 1) == 0)
          {
            long long v12 = [(HMDHomeManager *)self pendingResidentSetupSessions];
            long long v13 = [v9 remoteDestinationString];
            int v14 = [v12 containsObject:v13];

            if (v14)
            {
              uint64_t v15 = (void *)MEMORY[0x230FBD990]();
              uint64_t v16 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
              {
                uint64_t v17 = HMFGetLogIdentifier();
                id v18 = [v36 uuid];
                uint64_t v19 = [v18 UUIDString];
                *(_DWORD *)long long buf = 138543874;
                __int16 v49 = v17;
                __int16 v50 = 2112;
                int v51 = v9;
                __int16 v52 = 2112;
                id v53 = v19;
                _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@We have a pending request to look for unpaired accessories to device, %@, for home: %@, dropping this request", buf, 0x20u);
              }
            }
            else
            {
              id v20 = [(HMDHomeManager *)self pendingResidentSetupSessions];
              uint64_t v21 = [v9 remoteDestinationString];
              [v20 addObject:v21];

              v46[0] = @"kAccessoryIdentitiesKey";
              v46[1] = @"kHomeUUID";
              v47[0] = v34;
              id v22 = [v36 uuid];
              long long v23 = [v22 UUIDString];
              v47[1] = v23;
              long long v24 = [NSDictionary dictionaryWithObjects:v47 forKeys:v46 count:2];

              long long v25 = [HMDRemoteDeviceMessageDestination alloc];
              long long v26 = [(HMDHomeManager *)self uuid];
              id v27 = [(HMDRemoteDeviceMessageDestination *)v25 initWithTarget:v26 device:v9];

              uint64_t v28 = (void *)MEMORY[0x230FBD990]();
              __int16 v29 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
              {
                __int16 v30 = HMFGetLogIdentifier();
                __int16 v31 = [v36 uuid];
                *(_DWORD *)long long buf = 138543874;
                __int16 v49 = v30;
                __int16 v50 = 2112;
                int v51 = v9;
                __int16 v52 = 2112;
                id v53 = v31;
                _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Requesting remote gateway, %@, to look for accessories in home %@", buf, 0x20u);
              }
              uint64_t v32 = [MEMORY[0x263F42568] internalMessageWithName:@"kDoYouSeeUnpairedAccessoriesKey" destination:v27 messagePayload:v24];
              objc_initWeak((id *)buf, self);
              v38[0] = MEMORY[0x263EF8330];
              v38[1] = 3221225472;
              v38[2] = __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke;
              v38[3] = &unk_264A2E890;
              objc_copyWeak(&v41, (id *)buf);
              id v39 = v36;
              long long v40 = v9;
              [v32 setResponseHandler:v38];
              id v33 = [(HMDHomeManager *)self messageDispatcher];
              [v33 sendMessage:v32 completionHandler:0];

              objc_destroyWeak(&v41);
              objc_destroyWeak((id *)buf);
            }
          }
        }
        uint64_t v7 = [obj countByEnumeratingWithState:&v42 objects:v54 count:16];
      }
      while (v7);
    }

    id v6 = v36;
  }
}

void __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v9 = [WeakRetained workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke_2;
    block[3] = &unk_264A2E908;
    id v13 = v5;
    id v14 = v6;
    id v10 = *(id *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    id v15 = v10;
    uint64_t v16 = v11;
    id v17 = v8;
    dispatch_async(v9, block);
  }
}

void __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke_2(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 32) || (uint64_t v7 = *(void **)(a1 + 40)) == 0)
  {
    id v2 = (void *)MEMORY[0x230FBD990]();
    BOOL v3 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      id v4 = HMFGetLogIdentifier();
      uint64_t v5 = *(void *)(a1 + 56);
      uint64_t v6 = *(void *)(a1 + 32);
      int v14 = 138543874;
      id v15 = v4;
      __int16 v16 = 2112;
      uint64_t v17 = v5;
      __int16 v18 = 2112;
      uint64_t v19 = v6;
      _os_log_impl(&dword_22F52A000, v3, OS_LOG_TYPE_INFO, "%{public}@Remote peer, %@, failed to look for accessories with error:%@", (uint8_t *)&v14, 0x20u);
    }
  }
  else
  {
    int v8 = objc_msgSend(v7, "hmf_BOOLForKey:", @"kAtHomeStateKey");
    uint64_t v9 = objc_msgSend(*(id *)(a1 + 40), "hmf_stringForKey:", @"kDeviceNameKey");
    id v10 = (void *)v9;
    if (v8) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11) {
      [*(id *)(a1 + 48) addUnconfiguredResidentDevice:*(void *)(a1 + 56)];
    }
  }
  long long v12 = [*(id *)(a1 + 64) pendingResidentSetupSessions];
  id v13 = [*(id *)(a1 + 56) remoteDestinationString];
  [v12 removeObject:v13];
}

- (void)atHomeLevelChanged:(int64_t)a3 formerLevel:(int64_t)a4 home:(id)a5
{
  uint64_t v6 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __54__HMDHomeManager_atHomeLevelChanged_formerLevel_home___block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v6, block);
}

uint64_t __54__HMDHomeManager_atHomeLevelChanged_formerLevel_home___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateCurrentHomeIfNecessary];
}

- (void)_accessoriesAreLocallyReachableOnTransientDevice:(BOOL)a3 forHome:(id)a4
{
  BOOL v4 = a3;
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v6 = a4;
  uint64_t v7 = (void *)MEMORY[0x230FBD990]();
  int v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = HMFGetLogIdentifier();
    if (v4) {
      id v10 = "";
    }
    else {
      id v10 = "not ";
    }
    BOOL v11 = [v6 UUIDString];
    long long v12 = [(HMDHomeManager *)self unassociatedRemotePeers];
    int v21 = 138544130;
    id v22 = v9;
    __int16 v23 = 2080;
    long long v24 = v10;
    __int16 v25 = 2112;
    long long v26 = v11;
    __int16 v27 = 2048;
    uint64_t v28 = [v12 count];
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Accessories are %slocally reachable for home %@, peers %lu", (uint8_t *)&v21, 0x2Au);
  }
  if (v4)
  {
    isWatch();
    id v13 = [(HMDHomeManager *)self _homeWithUUID:v6];
    int v14 = [v13 isOwnerUser];
    if (v13)
    {
      int v15 = v14;
      __int16 v16 = [(HMDHomeManager *)self unassociatedRemotePeers];
      if ([v16 count]) {
        int v17 = v15;
      }
      else {
        int v17 = 0;
      }
      if (v17 != 1 || ![v13 allowsRemoteAccess]) {
        goto LABEL_16;
      }
      __int16 v18 = [v13 currentUser];
      int v19 = [v18 isRemoteAccessAllowed];

      if (v19)
      {
        uint64_t v20 = [(HMDHomeManager *)self identifiersOfAccessoriesForHome:v13];
        __int16 v16 = [v20 allObjects];

        if ([v16 count]) {
          [(HMDHomeManager *)self _findRemotePeerContainingAccessories:v16 forHome:v13];
        }
LABEL_16:
      }
    }
  }
}

- (void)_removeFromAssociatedPeers:(id)a3 home:(id)a4
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  [(HMDHomeManager *)self _remotePeers];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = [v8 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v21;
    while (2)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v21 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        int v14 = objc_msgSend(v13, "remoteDestinationString", (void)v20);
        int v15 = [v14 isEqualToString:v6];

        if (v15)
        {
          __int16 v16 = [(HMDHomeManager *)self unassociatedRemotePeers];
          [v16 addObject:v13];

          if (v7)
          {
            int v17 = [(HMDHomeManager *)self associatedRemotePeers];
            __int16 v18 = [v7 uuid];
            int v19 = [v17 objectForKeyedSubscript:v18];

            if (v19) {
              [v19 removeObject:v6];
            }
          }
          goto LABEL_14;
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }
LABEL_14:
}

- (void)_removeFromUnassociatedPeers:(id)a3 home:(id)a4
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self _remotePeers];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v24 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        int v14 = [v13 remoteDestinationString];
        int v15 = [v14 isEqualToString:v6];

        if (v15)
        {
          __int16 v16 = [(HMDHomeManager *)self unassociatedRemotePeers];
          [v16 removeObject:v13];

          int v17 = [v13 remoteDestinationString];
          [v7 removeUnconfiguredResidentDeviceWithUserID:v17];

          if (v7)
          {
            __int16 v18 = [(HMDHomeManager *)self associatedRemotePeers];
            int v19 = [v7 uuid];
            long long v20 = [v18 objectForKeyedSubscript:v19];

            if (!v20)
            {
              long long v20 = [MEMORY[0x263EFF9C0] set];
              long long v21 = [(HMDHomeManager *)self associatedRemotePeers];
              long long v22 = [v7 uuid];
              [v21 setObject:v20 forKeyedSubscript:v22];
            }
            [v20 addObject:v6];
          }
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v10);
  }
}

- (void)removeFromUnassociatedPeers:(id)a3 home:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager_removeFromUnassociatedPeers_home___block_invoke;
  block[3] = &unk_264A2F2F8;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t __51__HMDHomeManager_removeFromUnassociatedPeers_home___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeFromUnassociatedPeers:*(void *)(a1 + 40) home:*(void *)(a1 + 48)];
}

- (void)_checkForRemotePeersAndRegisterForRemoteNotifications:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v203 = *MEMORY[0x263EF8340];
  uint64_t v5 = [(HMDHomeManager *)self unassociatedRemotePeers];
  [v5 removeAllObjects];

  id v6 = [(HMDHomeManager *)self associatedRemotePeers];
  [v6 removeAllObjects];

  isWatch();
  id v7 = [(HMDHomeManager *)self appleAccountManager];
  id v8 = [v7 account];

  if (v8)
  {
    id v9 = [MEMORY[0x263EFF980] array];
    long long v183 = 0u;
    long long v184 = 0u;
    long long v185 = 0u;
    long long v186 = 0u;
    uint64_t v154 = self;
    id v10 = [(HMDHomeManager *)self homes];
    uint64_t v11 = [v10 countByEnumeratingWithState:&v183 objects:v202 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v184;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v184 != v13) {
            objc_enumerationMutation(v10);
          }
          int v15 = [*(id *)(*((void *)&v183 + 1) + 8 * i) users];
          [v9 addObjectsFromArray:v15];
        }
        uint64_t v12 = [v10 countByEnumeratingWithState:&v183 objects:v202 count:16];
      }
      while (v12);
    }

    __int16 v16 = v154;
    int v17 = [(HMDHomeManager *)v154 _remotePeers];
    __int16 v18 = [MEMORY[0x263F42620] productInfo];
    uint64_t v19 = [v18 productClass];

    BOOL v141 = v3;
    if (v19 == 1)
    {
      long long v20 = [(HMDHomeManager *)v154 watchManager];
      long long v21 = [v20 watches];

      long long v22 = objc_msgSend(MEMORY[0x263EFF9C0], "setWithCapacity:", objc_msgSend(v21, "count"));
      long long v179 = 0u;
      long long v180 = 0u;
      long long v181 = 0u;
      long long v182 = 0u;
      id v23 = v21;
      uint64_t v24 = [v23 countByEnumeratingWithState:&v179 objects:v201 count:16];
      if (v24)
      {
        uint64_t v25 = v24;
        uint64_t v26 = *(void *)v180;
        do
        {
          for (uint64_t j = 0; j != v25; ++j)
          {
            if (*(void *)v180 != v26) {
              objc_enumerationMutation(v23);
            }
            uint64_t v28 = [*(id *)(*((void *)&v179 + 1) + 8 * j) remoteDestinationString];
            [v22 addObject:v28];
          }
          uint64_t v25 = [v23 countByEnumeratingWithState:&v179 objects:v201 count:16];
        }
        while (v25);
      }
      uint64_t v148 = v17;

      long long v177 = 0u;
      long long v178 = 0u;
      long long v175 = 0u;
      long long v176 = 0u;
      uint64_t v29 = [(HMDHomeManager *)v154 homes];
      uint64_t v30 = [v29 countByEnumeratingWithState:&v175 objects:v200 count:16];
      if (v30)
      {
        uint64_t v31 = v30;
        uint64_t v32 = *(void *)v176;
        do
        {
          for (uint64_t k = 0; k != v31; ++k)
          {
            if (*(void *)v176 != v32) {
              objc_enumerationMutation(v29);
            }
            [*(id *)(*((void *)&v175 + 1) + 8 * k) auditDestinationsForNotifications:v22];
          }
          uint64_t v31 = [v29 countByEnumeratingWithState:&v175 objects:v200 count:16];
        }
        while (v31);
      }
      id obj = v23;
      uint64_t v150 = v9;

      long long v173 = 0u;
      long long v174 = 0u;
      long long v171 = 0u;
      long long v172 = 0u;
      __int16 v16 = v154;
      id v34 = [(HMDHomeManager *)v154 fullSyncedWatchPeers];
      unint64_t v35 = (void *)[v34 copy];

      uint64_t v36 = [v35 countByEnumeratingWithState:&v171 objects:v199 count:16];
      if (v36)
      {
        uint64_t v37 = v36;
        uint64_t v38 = *(void *)v172;
        do
        {
          for (uint64_t m = 0; m != v37; ++m)
          {
            if (*(void *)v172 != v38) {
              objc_enumerationMutation(v35);
            }
            long long v40 = *(void **)(*((void *)&v171 + 1) + 8 * m);
            if (([v22 containsObject:v40] & 1) == 0)
            {
              id v41 = (void *)MEMORY[0x230FBD990]();
              long long v42 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                long long v43 = HMFGetLogIdentifier();
                *(_DWORD *)long long buf = 138543618;
                v189 = v43;
                __int16 v190 = 2112;
                uint64_t v191 = (uint64_t)v40;
                _os_log_impl(&dword_22F52A000, v42, OS_LOG_TYPE_INFO, "%{public}@Fully synced watch %@ is no more paired", buf, 0x16u);
              }
              long long v44 = [(HMDHomeManager *)v154 fullSyncedWatchPeers];
              [v44 removeObject:v40];
            }
          }
          uint64_t v37 = [v35 countByEnumeratingWithState:&v171 objects:v199 count:16];
        }
        while (v37);
      }

      int v17 = v148;
      id v9 = v150;
    }
    uint64_t v149 = [MEMORY[0x263EFF9C0] set];
    long long v45 = (void *)MEMORY[0x230FBD990]();
    uint64_t v46 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      __int16 v47 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      v189 = v47;
      _os_log_impl(&dword_22F52A000, v46, OS_LOG_TYPE_INFO, "%{public}@Checking for updated list of devices for remote access", buf, 0xCu);
    }
    long long v169 = 0u;
    long long v170 = 0u;
    long long v167 = 0u;
    long long v168 = 0u;
    id obja = v17;
    uint64_t v152 = [obja countByEnumeratingWithState:&v167 objects:v198 count:16];
    if (v152)
    {
      id v48 = *(id *)v168;
      id v144 = *(id *)v168;
      do
      {
        for (uint64_t n = 0; n != v152; ++n)
        {
          if (*(id *)v168 != v48) {
            objc_enumerationMutation(obja);
          }
          __int16 v50 = *(void **)(*((void *)&v167 + 1) + 8 * n);
          int v51 = [v50 remoteDestinationString];

          if (v51)
          {
            __int16 v52 = [v50 remoteDestinationString];
            [v149 addObject:v52];
          }
          id v53 = (void *)MEMORY[0x230FBD990]();
          id v54 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
          {
            uint64_t v55 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            v189 = v55;
            __int16 v190 = 2112;
            uint64_t v191 = (uint64_t)v50;
            _os_log_impl(&dword_22F52A000, v54, OS_LOG_TYPE_INFO, "%{public}@Detected device: %@", buf, 0x16u);
          }
          __int16 v56 = [v50 remoteDestinationString];
          id v57 = v9;
          __int16 v58 = objc_msgSend(v9, "hmf_firstObjectWithValue:forKeyPath:", v56, @"userID");

          isWatch();
          if (v58 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            id v59 = v58;
            if (([v59 updateWithDevice:v50] & 1) != 0 || !objc_msgSend(v59, "configurationState"))
            {
              [v59 setConfigurationState:2];
            }
            else
            {
              long long v165 = 0u;
              long long v166 = 0u;
              long long v163 = 0u;
              long long v164 = 0u;
              __int16 v60 = [(HMDHomeManager *)v16 homes];
              uint64_t v61 = [v60 countByEnumeratingWithState:&v163 objects:v197 count:16];
              if (v61)
              {
                uint64_t v62 = v61;
                uint64_t v63 = *(void *)v164;
                do
                {
                  for (iuint64_t i = 0; ii != v62; ++ii)
                  {
                    if (*(void *)v164 != v63) {
                      objc_enumerationMutation(v60);
                    }
                    uint64_t v65 = [*(id *)(*((void *)&v163 + 1) + 8 * ii) usersPendingUserManagementOperations];
                    if ([v65 containsObject:v59])
                    {
                      uint64_t v66 = [v59 configurationState];

                      if (v66 == 1) {
                        [v59 setConfigurationState:2];
                      }
                    }
                    else
                    {
                    }
                  }
                  uint64_t v62 = [v60 countByEnumeratingWithState:&v163 objects:v197 count:16];
                }
                while (v62);
              }

              __int16 v16 = v154;
              id v48 = v144;
            }
          }
          else
          {
            int v67 = [(HMDHomeManager *)v16 unassociatedRemotePeers];
            [v67 addObject:v50];

            id v68 = (void *)MEMORY[0x230FBD990]();
            id v69 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
            {
              uint64_t v70 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              v189 = v70;
              __int16 v190 = 2112;
              uint64_t v191 = (uint64_t)v50;
              _os_log_impl(&dword_22F52A000, v69, OS_LOG_TYPE_INFO, "%{public}@Adding remote peer, %@, to unassociated list", buf, 0x16u);
            }
          }

          id v9 = v57;
        }
        uint64_t v152 = [obja countByEnumeratingWithState:&v167 objects:v198 count:16];
      }
      while (v152);
    }

    id v71 = (void *)MEMORY[0x230FBD990]();
    id v72 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
    {
      uint64_t v73 = HMFGetLogIdentifier();
      id v74 = [(HMDHomeManager *)v16 unassociatedRemotePeers];
      uint64_t v75 = [v74 count];
      *(_DWORD *)long long buf = 138543618;
      v189 = v73;
      __int16 v190 = 2048;
      uint64_t v191 = v75;
      _os_log_impl(&dword_22F52A000, v72, OS_LOG_TYPE_INFO, "%{public}@Total unassociated peers %ld", buf, 0x16u);
    }
    __int16 v76 = [(HMDHomeManager *)v16 appleAccountManager];
    uint64_t v77 = [v76 device];
    long long v78 = [v77 identifier];

    uint64_t v140 = [MEMORY[0x263EFF980] array];
    long long v159 = 0u;
    long long v160 = 0u;
    long long v161 = 0u;
    long long v162 = 0u;
    id v145 = v9;
    BOOL v79 = v141;
    uint64_t v151 = [v145 countByEnumeratingWithState:&v159 objects:v196 count:16];
    if (v151)
    {
      uint64_t v81 = *(void *)v160;
      *(void *)&long long v80 = 138543362;
      long long v139 = v80;
      uint64_t v142 = v78;
      uint64_t v143 = *(void *)v160;
      do
      {
        for (juint64_t j = 0; jj != v151; ++jj)
        {
          if (*(void *)v160 != v81) {
            objc_enumerationMutation(v145);
          }
          id v83 = *(void **)(*((void *)&v159 + 1) + 8 * jj);
          id v84 = objc_msgSend(v78, "UUIDString", v139);
          char v85 = [v83 pairingUsername];
          int v86 = [v84 isEqualToString:v85];

          if (!v86)
          {
            if (shouldLogPrivateInformation())
            {
              uint64_t v153 = [v83 userID];
            }
            else
            {
              long long v91 = @"...";
              uint64_t v153 = @"...";
            }
            long long v92 = [v83 home];
            __int16 v93 = (void *)MEMORY[0x230FBD990]();
            long long v94 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
            {
              __int16 v95 = HMFGetLogIdentifier();
              uint64_t v96 = [v83 home];
              long long v97 = [v96 name];
              [v83 isRemoteGateway];
              long long v98 = HMFBooleanToString();
              *(_DWORD *)long long buf = 138544130;
              v189 = v95;
              __int16 v190 = 2112;
              uint64_t v191 = (uint64_t)v153;
              __int16 v192 = 2112;
              v193 = v97;
              __int16 v194 = 2112;
              uint64_t v195 = v98;
              _os_log_impl(&dword_22F52A000, v94, OS_LOG_TYPE_INFO, "%{public}@Existing user: %@, for home: %@, isRemoteGateway: %@", buf, 0x2Au);

              long long v78 = v142;
              uint64_t v81 = v143;

              __int16 v16 = v154;
            }

            if (![v83 isRemoteGateway]) {
              goto LABEL_110;
            }
            int v99 = [v92 isOwnerUser];
            if ((v99 & 1) == 0) {
              isWatch();
            }
            long long v100 = [v83 userID];
            int v101 = [v149 containsObject:v100];
            if ((v101 | v99))
            {
              int v102 = v101;

              if (!v102)
              {
LABEL_91:
                __int16 v16 = v154;
                if (v99)
                {
                  BOOL v103 = (void *)MEMORY[0x230FBD990]();
                  uint64_t v104 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v104, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v105 = HMFGetLogIdentifier();
                    uint64_t v106 = [v83 userID];
                    *(_DWORD *)long long buf = 138543618;
                    v189 = v105;
                    __int16 v190 = 2112;
                    uint64_t v191 = (uint64_t)v106;
                    _os_log_impl(&dword_22F52A000, v104, OS_LOG_TYPE_INFO, "%{public}@Previous associated remote peer %@ has been removed", buf, 0x16u);

                    __int16 v16 = v154;
                  }

                  BOOL v107 = (void *)MEMORY[0x230FBD990]([v140 addObject:v83]);
                  __int16 v108 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
                  {
                    int v109 = HMFGetLogIdentifier();
                    *(_DWORD *)long long buf = v139;
                    v189 = v109;
                    _os_log_impl(&dword_22F52A000, v108, OS_LOG_TYPE_DEBUG, "%{public}@Remove resident device", buf, 0xCu);
                  }
                }
                goto LABEL_110;
              }
            }
            else
            {
              uint64_t v110 = [v83 userID];

              if (!v110) {
                goto LABEL_91;
              }
            }
            BOOL v111 = (void *)MEMORY[0x230FBD990]();
            uint64_t v112 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
            {
              BOOL v113 = HMFGetLogIdentifier();
              uint64_t v114 = [v83 userID];
              BOOL v115 = [v83 home];
              uint64_t v116 = [v115 name];
              *(_DWORD *)long long buf = 138543874;
              v189 = v113;
              __int16 v190 = 2112;
              uint64_t v191 = (uint64_t)v114;
              __int16 v192 = 2112;
              v193 = v116;
              _os_log_impl(&dword_22F52A000, v112, OS_LOG_TYPE_INFO, "%{public}@Adding remote peer %@ for home %@", buf, 0x20u);

              BOOL v79 = v141;
              long long v78 = v142;

              uint64_t v81 = v143;
            }

            BOOL v117 = [(HMDHomeManager *)v154 associatedRemotePeers];
            BOOL v118 = [v92 uuid];
            BOOL v119 = [v117 objectForKeyedSubscript:v118];

            if (!v119)
            {
              BOOL v119 = [MEMORY[0x263EFF9C0] set];
              BOOL v120 = [(HMDHomeManager *)v154 associatedRemotePeers];
              int v121 = [v92 uuid];
              [v120 setObject:v119 forKeyedSubscript:v121];
            }
            BOOL v122 = [v83 userID];
            [v119 addObject:v122];

            id v123 = [v83 userID];
            if (([v149 containsObject:v123] | v99))
            {
LABEL_108:
            }
            else
            {
              objc_opt_class();
              char isKindOfClass = objc_opt_isKindOfClass();

              if (isKindOfClass)
              {
                id v123 = v83;
                if (![v123 configurationState])
                {
                  BOOL v125 = (void *)MEMORY[0x230FBD990]();
                  BOOL v126 = HMFGetOSLogHandle();
                  if (os_log_type_enabled(v126, OS_LOG_TYPE_INFO))
                  {
                    BOOL v127 = HMFGetLogIdentifier();
                    v128 = [v123 userID];
                    *(_DWORD *)long long buf = 138543618;
                    v189 = v127;
                    __int16 v190 = 2112;
                    uint64_t v191 = (uint64_t)v128;
                    _os_log_impl(&dword_22F52A000, v126, OS_LOG_TYPE_INFO, "%{public}@[HMDHomeManager] Unknown configuration state, enabling '%@'", buf, 0x16u);

                    uint64_t v81 = v143;
                  }

                  [v123 setConfigurationState:2];
                }
                goto LABEL_108;
              }
            }

            __int16 v16 = v154;
LABEL_110:

            continue;
          }
          long long v87 = (void *)MEMORY[0x230FBD990]();
          long long v88 = v16;
          id v89 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
          {
            long long v90 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            v189 = v90;
            __int16 v190 = 2112;
            uint64_t v191 = (uint64_t)v83;
            _os_log_impl(&dword_22F52A000, v89, OS_LOG_TYPE_INFO, "%{public}@Skipping resident user representing ourselves: %@", buf, 0x16u);

            __int16 v16 = v154;
          }
        }
        uint64_t v151 = [v145 countByEnumeratingWithState:&v159 objects:v196 count:16];
      }
      while (v151);
    }

    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    int v129 = [(HMDHomeManager *)v16 homes];
    uint64_t v130 = [v129 countByEnumeratingWithState:&v155 objects:v187 count:16];
    if (v130)
    {
      uint64_t v131 = v130;
      uint64_t v132 = *(void *)v156;
      do
      {
        for (kuint64_t k = 0; kk != v131; ++kk)
        {
          if (*(void *)v156 != v132) {
            objc_enumerationMutation(v129);
          }
          uint64_t v134 = *(void **)(*((void *)&v155 + 1) + 8 * kk);
          uint64_t v135 = [(HMDHomeManager *)v154 unassociatedRemotePeers];
          objc_msgSend(v134, "notifyNewRemotePeersFound:remoteUsersRemoved:forceRemoteNotificationRegistration:", objc_msgSend(v135, "count") != 0, v140, v79);
        }
        uint64_t v131 = [v129 countByEnumeratingWithState:&v155 objects:v187 count:16];
      }
      while (v131);
    }
  }
  else
  {
    uint64_t v136 = (void *)MEMORY[0x230FBD990]();
    uint64_t v137 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v137, OS_LOG_TYPE_INFO))
    {
      uint64_t v138 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      v189 = v138;
      _os_log_impl(&dword_22F52A000, v137, OS_LOG_TYPE_INFO, "%{public}@No active IDS account, cannot check for remote peers.", buf, 0xCu);
    }
  }
}

- (id)_remotePeers
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  isWatch();
  BOOL v3 = [(HMDHomeManager *)self appleAccountManager];
  BOOL v4 = [v3 account];
  uint64_t v5 = [v4 devices];

  id v6 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v5, "count"));
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v7 = [(HMDHomeManager *)self appleAccountManager];
  id v8 = [v7 account];
  id v9 = [v8 devices];

  uint64_t v10 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v20 != v12) {
          objc_enumerationMutation(v9);
        }
        int v14 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        int v15 = [v14 capabilities];
        if ([v15 isRemoteGatewayCapable])
        {
          char v16 = [v14 isCurrentDevice];

          if ((v16 & 1) == 0) {
            [v6 addObject:v14];
          }
        }
        else
        {
        }
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v11);
  }

  int v17 = (void *)[v6 copy];
  return v17;
}

- (void)_checkForRemotePeers
{
  BOOL v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __38__HMDHomeManager__checkForRemotePeers__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __38__HMDHomeManager__checkForRemotePeers__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _checkForRemotePeersAndRegisterForRemoteNotifications:0];
}

- (void)checkForRemotePeers
{
  BOOL v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __37__HMDHomeManager_checkForRemotePeers__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __37__HMDHomeManager_checkForRemotePeers__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _checkForRemotePeers];
}

- (BOOL)isPairedWithWatch
{
  id v2 = [(HMDHomeManager *)self watchManager];
  char v3 = [v2 isPairedWithWatch];

  return v3;
}

- (void)_checkAndInformCompanionDevice
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  char v3 = [(HMDHomeManager *)self companionManager];
  BOOL v4 = [v3 companion];

  if ((v4 != 0) != [(HMDHomeManager *)self companionReachable])
  {
    [(HMDHomeManager *)self setCompanionReachable:v4 != 0];
    uint64_t v5 = +[HMDWatchSystemState sharedState];
    [v5 setCompanionReachable:v4 != 0];

    id v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      long long v21 = v8;
      __int16 v22 = 1024;
      BOOL v23 = [(HMDHomeManager *)self companionReachable];
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Companion is reachable: %d", buf, 0x12u);
    }
    [(HMDHomeManager *)self _checkForRemotePeers];
    if (![(HMDHomeManager *)self companionReachable])
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      id v9 = [(HMDHomeManager *)self homes];
      uint64_t v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)v16;
        do
        {
          uint64_t v13 = 0;
          do
          {
            if (*(void *)v16 != v12) {
              objc_enumerationMutation(v9);
            }
            int v14 = [*(id *)(*((void *)&v15 + 1) + 8 * v13) uuid];
            [(HMDHomeManager *)self _teardownRemoteAccessForHomeThroughCompanion:v14];

            ++v13;
          }
          while (v11 != v13);
          uint64_t v11 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }
        while (v11);
      }
    }
  }
}

- (HMDDevice)companionDevice
{
  id v2 = [(HMDHomeManager *)self companionManager];
  char v3 = [v2 companion];

  return (HMDDevice *)v3;
}

- (void)_handleHomeUtilCommandWalletMessage:(id)a3
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (isInternalBuild())
  {
    uint64_t v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      int v14 = v8;
      __int16 v15 = 2112;
      id v16 = v4;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@homeUtilCommandWallet message: %@", buf, 0x16u);
    }
    id v9 = [v4 dataForKey:@"HomeUtil.Command.Wallet"];
    if (v9)
    {
      v11[0] = MEMORY[0x263EF8330];
      v11[1] = 3221225472;
      v11[2] = __54__HMDHomeManager__handleHomeUtilCommandWalletMessage___block_invoke;
      v11[3] = &unk_264A2B7B0;
      id v12 = v4;
      +[HMDHomeUtilPassCommandHandler handlePassCommandForData:v9 completionHandler:v11];
      uint64_t v10 = v12;
    }
    else
    {
      uint64_t v10 = [MEMORY[0x263F087E8] hmfErrorWithCode:3 reason:@"Command data was nil"];
      [v4 respondWithError:v10];
    }
  }
}

void __54__HMDHomeManager__handleHomeUtilCommandWalletMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    [*(id *)(a1 + 32) respondWithError:v6];
  }
  else
  {
    id v7 = *(void **)(a1 + 32);
    if (v5)
    {
      id v9 = @"result";
      v10[0] = v5;
      id v8 = [NSDictionary dictionaryWithObjects:v10 forKeys:&v9 count:1];
      [v7 respondWithPayload:v8];
    }
    else
    {
      [v7 respondWithSuccess];
    }
  }
}

- (void)syncWalletKeyPassSerialNumbersToWatch:(id)a3 withCompletion:(id)a4
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = (void (**)(void))a4;
  id v8 = [v6 version];
  id v9 = (void *)[objc_alloc(MEMORY[0x263F42670]) initWithVersionString:@"8.0"];
  char v10 = [v8 isAtLeastVersion:v9];

  if (v10)
  {
    uint64_t v11 = [v6 remoteDestinationString];
    id v12 = [(HMDHomeManager *)self homes];
    uint64_t v13 = objc_msgSend(v12, "na_map:", &__block_literal_global_997);

    int v14 = (void *)MEMORY[0x230FBD990]();
    __int16 v15 = self;
    id v16 = HMFGetOSLogHandle();
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
    if (v13)
    {
      if (v17)
      {
        long long v18 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543874;
        long long v42 = v18;
        __int16 v43 = 2112;
        long long v44 = v13;
        __int16 v45 = 2112;
        uint64_t v46 = v11;
        _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Syncing wallet key pass serial numbers: %@ to watch: %@", buf, 0x20u);
      }
      long long v19 = [(HMDHomeManager *)v15 uuid];
      long long v20 = +[HMDMessageDispatcher destinationWithTarget:v19 userID:0 destination:v11 multicast:0];

      if (v20)
      {
        id v39 = @"HMDHomeMangerMessageKeyHomeWalletKeysPassSerialNumbers";
        long long v40 = v13;
        long long v21 = [NSDictionary dictionaryWithObjects:&v40 forKeys:&v39 count:1];
        __int16 v22 = [MEMORY[0x263F42590] messageWithName:@"HMDHomeManagerSyncWalletKeysPassSerialNumbersMessage" qualityOfService:17 destination:v20 payload:v21];
        [v22 setSecureRemote:1];
        [v22 setRemoteRestriction:4];
        objc_initWeak((id *)buf, v15);
        BOOL v23 = [(HMDHomeManager *)v15 workQueue];
        uint64_t v31 = MEMORY[0x263EF8330];
        uint64_t v32 = 3221225472;
        id v33 = __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_998;
        id v34 = &unk_264A2B788;
        id v24 = v23;
        id v35 = v24;
        objc_copyWeak(&v38, (id *)buf);
        id v36 = v11;
        uint64_t v37 = v7;
        [v22 setResponseHandler:&v31];
        uint64_t v25 = [(HMDHomeManager *)v15 messageDispatcher];
        [v25 sendMessage:v22];

        objc_destroyWeak(&v38);
        objc_destroyWeak((id *)buf);
      }
      else
      {
        __int16 v27 = (void *)MEMORY[0x230FBD990]();
        uint64_t v28 = v15;
        uint64_t v29 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v30 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          long long v42 = v30;
          __int16 v43 = 2112;
          long long v44 = v11;
          _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot sync wallet pass serial numbers to watch: could not create message destination for deviceId: %@", buf, 0x16u);
        }
        v7[2](v7);
      }
    }
    else
    {
      if (v17)
      {
        uint64_t v26 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        long long v42 = v26;
        __int16 v43 = 2112;
        long long v44 = v11;
        _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Did not find any wallet key pass serial numbers to sync to watch: %@", buf, 0x16u);
      }
      v7[2](v7);
    }
  }
  else
  {
    v7[2](v7);
  }
}

void __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_998(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_2;
  block[3] = &unk_264A2B760;
  objc_copyWeak(&v16, (id *)(a1 + 56));
  id v12 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = v8;
  id v13 = v6;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v7, block);

  objc_destroyWeak(&v16);
}

void __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_2(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    int v3 = objc_msgSend(*(id *)(a1 + 40), "hmf_BOOLForKey:", @"kDataSyncResponseAckKey");
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = WeakRetained;
    id v6 = HMFGetOSLogHandle();
    id v7 = v6;
    if (v3)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        id v8 = HMFGetLogIdentifier();
        uint64_t v9 = *(void *)(a1 + 32);
        int v17 = 138543618;
        long long v18 = v8;
        __int16 v19 = 2112;
        uint64_t v20 = v9;
        id v10 = "%{public}@Successfully synced wallet key pass serial numbers to watch: %@";
        uint64_t v11 = v7;
        os_log_type_t v12 = OS_LOG_TYPE_INFO;
        uint32_t v13 = 22;
LABEL_9:
        _os_log_impl(&dword_22F52A000, v11, v12, v10, (uint8_t *)&v17, v13);
      }
    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v8 = HMFGetLogIdentifier();
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 48);
      int v17 = 138543874;
      long long v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = v15;
      __int16 v21 = 2112;
      uint64_t v22 = v16;
      id v10 = "%{public}@Failed to sync wallet key pass serials numbers to watch %@:%@";
      uint64_t v11 = v7;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 32;
      goto LABEL_9;
    }
LABEL_10:

    goto LABEL_11;
  }
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    uint64_t v14 = *(void *)(a1 + 32);
    int v17 = 138543618;
    long long v18 = v7;
    __int16 v19 = 2112;
    uint64_t v20 = v14;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@HomeManager became nil while syncing wallet key pass serial numbers to watch: %@", (uint8_t *)&v17, 0x16u);
    goto LABEL_10;
  }
LABEL_11:

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

id __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v2 = [a2 walletKeyManager];
  int v3 = [v2 passSerialNumber];

  return v3;
}

- (void)_sendHomeDataToWatch:(id)a3 migrateToHH2:(BOOL)a4 completionHandler:(id)a5
{
  BOOL v74 = a4;
  uint64_t v119 = *MEMORY[0x263EF8340];
  id v80 = a3;
  id v70 = a5;
  val = self;
  id v7 = [(HMDHomeManager *)self watchManager];
  id v71 = [v7 connectedWatchFromDeviceID:v80];

  if (![(HMDHomeManager *)self accountActive]
    || ([v71 capabilities],
        id v8 = objc_claimAutoreleasedReturnValue(),
        int v9 = [v8 supportsCloudDataSync],
        v8,
        !v9))
  {
    context = (void *)MEMORY[0x230FBD990]();
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v116 = __Block_byref_object_copy__242964;
    BOOL v117 = __Block_byref_object_dispose__242965;
    id v118 = (id)[objc_alloc(MEMORY[0x263F425C0]) initWithName:@"com.apple.homed.push-home-to-watch"];
    group = dispatch_group_create();
    uint64_t v15 = [v71 version];
    uint64_t v16 = (void *)[objc_alloc(MEMORY[0x263F42670]) initWithVersionString:@"4.0"];
    unsigned int v73 = [v15 isAtLeastVersion:v16];

    int v17 = [(HMDHomeManager *)val associatedWatchPeers];
    uint64_t v77 = [v17 objectForKeyedSubscript:v80];

    objc_initWeak(&location, val);
    [(HMDHomeManager *)val homes];
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v18 = [obj countByEnumeratingWithState:&v97 objects:v114 count:16];
    if (v18)
    {
      char v19 = 0;
      uint64_t v76 = *(void *)v98;
      do
      {
        uint64_t v79 = v18;
        for (uint64_t i = 0; i != v79; ++i)
        {
          if (*(void *)v98 != v76) {
            objc_enumerationMutation(obj);
          }
          __int16 v21 = *(void **)(*((void *)&v97 + 1) + 8 * i);
          uint64_t v22 = (void *)[v21 configurationVersion];
          uint64_t v23 = [v77 homeConfig];
          id v24 = [v21 uuid];
          uint64_t v25 = [v23 objectForKeyedSubscript:v24];

          char v26 = [v21 watchSkipVersionCheck];
          if (v25) {
            char v27 = v26;
          }
          else {
            char v27 = 1;
          }
          if ((v27 & 1) != 0 || (void *)[v25 integerValue] != v22)
          {
            id v33 = (void *)MEMORY[0x230FBD990]();
            id v34 = val;
            HMFGetOSLogHandle();
            id v35 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v36 = (id)objc_claimAutoreleasedReturnValue();
              uint64_t v37 = [v21 name];
              *(_DWORD *)uint64_t v106 = 138543874;
              id v107 = v36;
              __int16 v108 = 2112;
              int v109 = v37;
              __int16 v110 = 2112;
              id v111 = v80;
              _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_INFO, "%{public}@Sending over the data for home %@ to watch %@", v106, 0x20u);
            }
            id v38 = [(HMDHomeManager *)v34 _prepareDataForDevicesOnSameAccountForHome:v21 remoteGateway:0 isAtLeastV4:v73 migrateToHH2:v74];
            v92[0] = MEMORY[0x263EF8330];
            v92[1] = 3221225472;
            v92[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke;
            v92[3] = &unk_264A2B6C8;
            objc_copyWeak(v96, &location);
            id v93 = v80;
            long long v94 = v21;
            v96[1] = v22;
            __int16 v95 = v34;
            [(HMDHomeManager *)v34 _pushChangesToWatch:v93 payload:v38 group:group completionHandler:v92];

            objc_destroyWeak(v96);
            char v19 = 1;
          }
          else
          {
            uint64_t v28 = (void *)MEMORY[0x230FBD990]();
            uint64_t v29 = val;
            HMFGetOSLogHandle();
            uint64_t v30 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              id v31 = (id)objc_claimAutoreleasedReturnValue();
              uint64_t v32 = [v21 name];
              *(_DWORD *)uint64_t v106 = 138544130;
              id v107 = v31;
              __int16 v108 = 2112;
              int v109 = v32;
              __int16 v110 = 2112;
              id v111 = v25;
              __int16 v112 = 2048;
              BOOL v113 = v22;
              _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_INFO, "%{public}@Not sending home data for %@ as the config versions match (W: %@, C: %ld)", v106, 0x2Au);
            }
          }
        }
        uint64_t v18 = [obj countByEnumeratingWithState:&v97 objects:v114 count:16];
      }
      while (v18);

      if (v19)
      {
        char v39 = 1;
LABEL_39:
        id v68 = [(HMDHomeManager *)val workQueue];
        block[0] = MEMORY[0x263EF8330];
        block[1] = 3221225472;
        block[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_994;
        block[3] = &unk_264A2B718;
        void block[4] = val;
        id v82 = v80;
        char v85 = buf;
        id v84 = v70;
        char v86 = v39;
        id v83 = v71;
        dispatch_group_notify(group, v68, block);

        objc_destroyWeak(&location);
        _Block_object_dispose(buf, 8);

        goto LABEL_40;
      }
    }
    else
    {
    }
    long long v40 = [(HMDHomeManager *)val primaryHomeUUID];
    if (!v40) {
      goto LABEL_30;
    }
    id v41 = [v77 primaryHome];
    long long v42 = [(HMDHomeManager *)val primaryHomeUUID];
    char v43 = HMFEqualObjects();

    if ((v43 & 1) == 0)
    {
      __int16 v49 = (void *)MEMORY[0x230FBD990]();
      __int16 v50 = val;
      HMFGetOSLogHandle();
      int v51 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v52 = (id)objc_claimAutoreleasedReturnValue();
        id v53 = [v77 primaryHome];
        id v54 = [v53 UUIDString];
        uint64_t v55 = [(HMDHomeManager *)v50 primaryHomeUUID];
        __int16 v56 = [v55 UUIDString];
        *(_DWORD *)uint64_t v106 = 138543874;
        id v107 = v52;
        __int16 v108 = 2112;
        int v109 = v54;
        __int16 v110 = 2112;
        id v111 = v56;
        _os_log_impl(&dword_22F52A000, v51, OS_LOG_TYPE_INFO, "%{public}@Primary home has been updated from %@ to %@, sending primary home update", v106, 0x20u);
      }
      id v57 = [(HMDHomeManager *)v50 primaryHomeUUID];
      uint64_t v104 = @"kPrimaryHomeUUIDKey";
      __int16 v58 = [v57 UUIDString];
      uint64_t v105 = v58;
      id v59 = [NSDictionary dictionaryWithObjects:&v105 forKeys:&v104 count:1];

      int v102 = @"kHomeDataKey";
      __int16 v60 = encodeRootObjectForRemoteDeviceOnSameAccountMigrateToHH2(v59, v73, 0);
      BOOL v103 = v60;
      uint64_t v61 = [NSDictionary dictionaryWithObjects:&v103 forKeys:&v102 count:1];

      uint64_t v62 = (void *)MEMORY[0x230FBD990]();
      uint64_t v63 = v50;
      HMFGetOSLogHandle();
      uint64_t v64 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v65 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v66 = [v57 UUIDString];
        *(_DWORD *)uint64_t v106 = 138543874;
        id v107 = v65;
        __int16 v108 = 2112;
        int v109 = v66;
        __int16 v110 = 2112;
        id v111 = v80;
        _os_log_impl(&dword_22F52A000, v64, OS_LOG_TYPE_INFO, "%{public}@Sending over the data for primary home update to %@ to watch %@", v106, 0x20u);
      }
      v87[0] = MEMORY[0x263EF8330];
      v87[1] = 3221225472;
      v87[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_993;
      void v87[3] = &unk_264A2B6F0;
      objc_copyWeak(&v91, &location);
      id v88 = v80;
      id v67 = v57;
      id v89 = v67;
      long long v90 = v63;
      [(HMDHomeManager *)v63 _pushChangesToWatch:v88 payload:v61 group:group completionHandler:v87];

      objc_destroyWeak(&v91);
    }
    else
    {
LABEL_30:
      long long v44 = (void *)MEMORY[0x230FBD990]();
      HMFGetOSLogHandle();
      __int16 v45 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        id v46 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v47 = [v77 primaryHome];
        id v48 = [(HMDHomeManager *)val primaryHomeUUID];
        *(_DWORD *)uint64_t v106 = 138543874;
        id v107 = v46;
        __int16 v108 = 2112;
        int v109 = v47;
        __int16 v110 = 2112;
        id v111 = v48;
        _os_log_impl(&dword_22F52A000, v45, OS_LOG_TYPE_INFO, "%{public}@Not sending primary home update as they match: (W: %@, C: %@)", v106, 0x20u);
      }
    }
    char v39 = 0;
    goto LABEL_39;
  }
  id v10 = (void *)MEMORY[0x230FBD990]();
  uint64_t v11 = val;
  os_log_type_t v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint32_t v13 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v71;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Paired watch %@ supports cloud data sync - skipping sending home data", buf, 0x16u);
  }
  if (v70)
  {
    uint64_t v14 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    (*((void (**)(id, void, void *))v70 + 2))(v70, 0, v14);
  }
LABEL_40:
}

void __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke(uint64_t a1, int a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    if (a2)
    {
      id v6 = [WeakRetained associatedWatchPeers];
      id v7 = [v6 objectForKeyedSubscript:*(void *)(a1 + 32)];

      id v8 = [NSNumber numberWithInteger:*(void *)(a1 + 64)];
      int v9 = [*(id *)(a1 + 40) uuid];
      [v7 setConfigVersion:v8 forHome:v9];

      id v10 = (void *)MEMORY[0x230FBD990]();
      id v11 = *(id *)(a1 + 48);
      os_log_type_t v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint32_t v13 = HMFGetLogIdentifier();
        uint64_t v14 = *(void **)(a1 + 32);
        uint64_t v15 = [*(id *)(a1 + 40) name];
        int v22 = 138543874;
        uint64_t v23 = v13;
        __int16 v24 = 2112;
        uint64_t v25 = v14;
        __int16 v26 = 2112;
        char v27 = v15;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Received ACK from watch %@ for data corresponding to home %@", (uint8_t *)&v22, 0x20u);
      }
    }
    else
    {
      uint64_t v16 = (void *)MEMORY[0x230FBD990]();
      id v17 = *(id *)(a1 + 48);
      uint64_t v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        char v19 = HMFGetLogIdentifier();
        uint64_t v20 = [*(id *)(a1 + 40) name];
        __int16 v21 = *(void **)(a1 + 32);
        int v22 = 138543874;
        uint64_t v23 = v19;
        __int16 v24 = 2112;
        uint64_t v25 = v20;
        __int16 v26 = 2112;
        char v27 = v21;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to send data for home %@ to watch %@", (uint8_t *)&v22, 0x20u);
      }
    }
  }
}

void __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_993(uint64_t a1, int a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    if (a2)
    {
      id v6 = [WeakRetained associatedWatchPeers];
      id v7 = [v6 objectForKeyedSubscript:*(void *)(a1 + 32)];

      id v8 = (void *)MEMORY[0x230FBD990]([v7 setPrimaryHome:*(void *)(a1 + 40)]);
      id v9 = *(id *)(a1 + 48);
      id v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = HMFGetLogIdentifier();
        uint64_t v12 = *(void *)(a1 + 32);
        uint64_t v13 = *(void *)(a1 + 40);
        int v20 = 138543874;
        __int16 v21 = v11;
        __int16 v22 = 2112;
        uint64_t v23 = v12;
        __int16 v24 = 2112;
        uint64_t v25 = v13;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Received ACK from watch %@ for primary home update to %@", (uint8_t *)&v20, 0x20u);
      }
    }
    else
    {
      uint64_t v14 = (void *)MEMORY[0x230FBD990]();
      id v15 = *(id *)(a1 + 48);
      uint64_t v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        id v17 = HMFGetLogIdentifier();
        uint64_t v19 = *(void *)(a1 + 32);
        uint64_t v18 = *(void *)(a1 + 40);
        int v20 = 138543874;
        __int16 v21 = v17;
        __int16 v22 = 2112;
        uint64_t v23 = v18;
        __int16 v24 = 2112;
        uint64_t v25 = v19;
        _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to primary home update %@ to watch %@", (uint8_t *)&v20, 0x20u);
      }
    }
  }
}

void __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_994(uint64_t a1)
{
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_2;
  aBlock[3] = &unk_264A2C428;
  id v2 = *(void **)(a1 + 40);
  void aBlock[4] = *(void *)(a1 + 32);
  id v8 = v2;
  long long v6 = *(_OWORD *)(a1 + 56);
  id v3 = (id)v6;
  long long v9 = v6;
  id v4 = _Block_copy(aBlock);
  id v5 = v4;
  if (*(unsigned char *)(a1 + 72)) {
    [*(id *)(a1 + 32) syncWalletKeyPassSerialNumbersToWatch:*(void *)(a1 + 48) withCompletion:v4];
  }
  else {
    (*((void (**)(void *))v4 + 2))(v4);
  }
}

uint64_t __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 40);
    int v10 = 138543618;
    id v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Finished pushing home data changes to watch: %@", (uint8_t *)&v10, 0x16u);
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0;

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1, 0);
  }
  return result;
}

- (void)_sendHomeDataToWatch:(id)a3 completionHandler:(id)a4
{
}

- (void)_sendHomeDataToAllWatchesMigrateToHH2:(BOOL)a3 completionHandler:(id)a4
{
  BOOL v4 = a3;
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v6 = (void (**)(void))a4;
  uint64_t v7 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v7);

  if (isiOSDevice())
  {
    uint64_t v26 = v6;
    id v8 = [(HMDHomeManager *)self associatedWatchPeers];
    long long v9 = (void *)MEMORY[0x230FBD990]();
    int v10 = self;
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      __int16 v12 = HMFGetLogIdentifier();
      uint64_t v13 = [v8 allKeys];
      *(_DWORD *)long long buf = 138543618;
      char v43 = v12;
      __int16 v44 = 2112;
      __int16 v45 = v13;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Syncing home data to watches: %@", buf, 0x16u);
    }
    uint64_t v14 = dispatch_group_create();
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id obj = v8;
    uint64_t v15 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v37;
      do
      {
        uint64_t v18 = 0;
        do
        {
          if (*(void *)v37 != v17) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = *(void *)(*((void *)&v36 + 1) + 8 * v18);
          dispatch_group_enter(v14);
          v34[0] = MEMORY[0x263EF8330];
          v34[1] = 3221225472;
          id v34[2] = __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke;
          v34[3] = &unk_264A2ED68;
          id v35 = v14;
          [(HMDHomeManager *)v10 _sendHomeDataToWatch:v19 migrateToHH2:v4 completionHandler:v34];

          ++v18;
        }
        while (v16 != v18);
        uint64_t v16 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
      }
      while (v16);
    }

    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    int v20 = [(HMDHomeManager *)v10 homes];
    uint64_t v21 = [v20 countByEnumeratingWithState:&v30 objects:v40 count:16];
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = *(void *)v31;
      do
      {
        uint64_t v24 = 0;
        do
        {
          if (*(void *)v31 != v23) {
            objc_enumerationMutation(v20);
          }
          [*(id *)(*((void *)&v30 + 1) + 8 * v24++) setWatchSkipVersionCheck:0];
        }
        while (v22 != v24);
        uint64_t v22 = [v20 countByEnumeratingWithState:&v30 objects:v40 count:16];
      }
      while (v22);
    }

    uint64_t v25 = [(HMDHomeManager *)v10 workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke_2;
    block[3] = &unk_264A2DFA0;
    uint64_t v6 = v26;
    uint64_t v29 = v26;
    dispatch_group_notify(v14, v25, block);
  }
  else if (v6)
  {
    v6[2](v6);
  }
}

void __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke(uint64_t a1)
{
}

uint64_t __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

- (void)_sendHomeDataToAllWatchesWithCompletion:(id)a3
{
}

- (void)sendHomeDataToAllWatchesWithCompletion:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __57__HMDHomeManager_sendHomeDataToAllWatchesWithCompletion___block_invoke;
  v7[3] = &unk_264A2F870;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __57__HMDHomeManager_sendHomeDataToAllWatchesWithCompletion___block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    int v8 = 138543362;
    long long v9 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Syncing home data to all watches", (uint8_t *)&v8, 0xCu);
  }
  id v6 = [*(id *)(a1 + 32) watchPushDelayTimer];
  [v6 suspend];

  return [*(id *)(a1 + 32) _sendHomeDataToAllWatchesWithCompletion:*(void *)(a1 + 40)];
}

- (void)_scheduleSendHomeDataToAllWatches
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (isiOSDevice())
  {
    id v3 = [(HMDHomeManager *)self watchPushDelayTimer];
    [v3 resume];

    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      int v7 = 138543362;
      int v8 = v6;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Kicking watch push delay", (uint8_t *)&v7, 0xCu);
    }
  }
}

- (void)_handleAreYouAtHome:(id)a3
{
  id v3 = (void *)MEMORY[0x263F087E8];
  id v4 = a3;
  id v5 = [v3 hmErrorWithCode:52 description:@"This device does not support legacy remote sessions" reason:0 suggestion:0];
  [v4 respondWithError:v5];
}

- (void)cloudHomeSettingsUpdated:(id)a3
{
  id v4 = [(HMDHomeManager *)self uuid];
  [(HMDHomeManager *)self updateGenerationCounterWithReason:@"iCloud Switch Toggle" sourceUUID:v4 shouldNotifyClients:1];
}

- (void)_handleUpdateiCloudSwitchState:(id)a3
{
  id v4 = a3;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __49__HMDHomeManager__handleUpdateiCloudSwitchState___block_invoke;
  aBlock[3] = &unk_264A2CB70;
  objc_copyWeak(&v13, &location);
  id v5 = v4;
  id v12 = v5;
  id v6 = _Block_copy(aBlock);
  char v10 = 0;
  uint64_t v7 = [v5 BOOLForKey:@"kiCloudSwitchStateKey" keyPresent:&v10];
  if (v10 && (uint64_t v8 = v7, [(HMDHomeManager *)self accountActive]))
  {
    uint64_t v9 = +[HMDAppleAccountSettings sharedSettings];
    [v9 updateHomeEnabled:v8 completionHandler:v6];
  }
  else
  {
    uint64_t v9 = +[HMDAppleAccountSettings sharedSettings];
    [v9 updateHomeEnabled:0 completionHandler:v6];
  }

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
}

void __49__HMDHomeManager__handleUpdateiCloudSwitchState___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = WeakRetained;
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      int v11 = 138543618;
      id v12 = v8;
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to update iCloud state with error: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  uint64_t v9 = [*(id *)(a1 + 32) responseHandler];

  if (v9)
  {
    char v10 = [*(id *)(a1 + 32) responseHandler];
    ((void (**)(void, id, void))v10)[2](v10, v3, 0);
  }
}

- (void)_handleQueryiCloudSwitchState:(id)a3
{
  v10[1] = *MEMORY[0x263EF8340];
  id v3 = a3;
  id v4 = +[HMDAppleAccountSettings sharedSettings];
  uint64_t v5 = [v4 isHomeEnabled];

  id v6 = [v3 responseHandler];

  uint64_t v9 = @"kiCloudSwitchStateKey";
  uint64_t v7 = [NSNumber numberWithBool:v5];
  v10[0] = v7;
  uint64_t v8 = [NSDictionary dictionaryWithObjects:v10 forKeys:&v9 count:1];
  ((void (**)(void, void, void *))v6)[2](v6, 0, v8);
}

- (void)_auditDuplicatePreviouslyAddedAccessory:(id)a3
{
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = v5;
  id v7 = v4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = v8;

  if (v6 | v9)
  {
    dispatch_time_t v10 = dispatch_time(0, 60000000000);
    int v11 = [(HMDHomeManager *)self workQueue];
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    void v12[2] = __58__HMDHomeManager__auditDuplicatePreviouslyAddedAccessory___block_invoke;
    v12[3] = &unk_264A2E610;
    void v12[4] = self;
    id v13 = v7;
    id v14 = (id)v6;
    id v15 = (id)v9;
    dispatch_after(v10, v11, v12);
  }
}

void __58__HMDHomeManager__auditDuplicatePreviouslyAddedAccessory___block_invoke(uint64_t a1)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  uint64_t v56 = a1;
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v70 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Auditing accessories", buf, 0xCu);
  }
  uint64_t v6 = a1;
  id v7 = [*(id *)(a1 + 40) home];

  if (v7)
  {
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    id obj = [*(id *)(a1 + 32) homes];
    uint64_t v8 = [obj countByEnumeratingWithState:&v65 objects:v78 count:16];
    if (!v8) {
      goto LABEL_43;
    }
    uint64_t v10 = v8;
    uint64_t v11 = *(void *)v66;
    *(void *)&long long v9 = 138544130;
    long long v53 = v9;
    uint64_t v54 = *(void *)v66;
    while (1)
    {
      uint64_t v12 = 0;
      uint64_t v55 = v10;
      do
      {
        if (*(void *)v66 != v11) {
          objc_enumerationMutation(obj);
        }
        id v13 = *(void **)(*((void *)&v65 + 1) + 8 * v12);
        if (!objc_msgSend(v13, "isOwnerUser", v53)) {
          goto LABEL_41;
        }
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        id v14 = [v13 accessories];
        uint64_t v15 = [v14 countByEnumeratingWithState:&v61 objects:v77 count:16];
        if (!v15)
        {
LABEL_40:

          goto LABEL_41;
        }
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v62;
        uint64_t v58 = v12;
        uint64_t v59 = *(void *)v62;
LABEL_12:
        uint64_t v18 = 0;
        uint64_t v60 = v16;
        while (1)
        {
          if (*(void *)v62 != v17) {
            objc_enumerationMutation(v14);
          }
          uint64_t v19 = *(void **)(*((void *)&v61 + 1) + 8 * v18);
          int v20 = *(void **)(v6 + 48);
          if (!v20) {
            goto LABEL_20;
          }
          uint64_t v21 = [v20 serialNumber];
          if (!v21) {
            goto LABEL_20;
          }
          uint64_t v22 = (void *)v21;
          uint64_t v23 = v14;
          [*(id *)(v6 + 48) uuid];
          uint64_t v25 = v24 = v6;
          uint64_t v26 = [v19 uuid];
          if (!objc_msgSend(v25, "hmf_isEqualToUUID:", v26)) {
            break;
          }

          id v14 = v23;
          uint64_t v6 = v24;
          uint64_t v17 = v59;
          uint64_t v16 = v60;
LABEL_20:
          long long v30 = *(void **)(v6 + 56);
          if (v30) {
            BOOL v31 = v19 == v30;
          }
          else {
            BOOL v31 = 1;
          }
          if (!v31)
          {
            id v32 = v19;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              long long v33 = v32;
            }
            else {
              long long v33 = 0;
            }
            id v34 = v33;

            if (v34)
            {
              id v35 = [*(id *)(v6 + 56) identifier];
              long long v36 = [v34 identifier];
              int v37 = [v35 isEqual:v36];

              if (v37)
              {
                long long v38 = (void *)MEMORY[0x230FBD990]();
                long long v39 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
                {
                  long long v40 = HMFGetLogIdentifier();
                  id v41 = *(void **)(v56 + 56);
                  long long v42 = [v41 identifier];
                  *(_DWORD *)long long buf = v53;
                  id v70 = v40;
                  __int16 v71 = 2112;
                  id v72 = v34;
                  __int16 v73 = 2112;
                  BOOL v74 = v41;
                  __int16 v75 = 2112;
                  uint64_t v76 = v42;
                  _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_INFO, "%{public}@Found an existing media accessory (%@) match the newly added hap accessory (%@) with device identifier %@, trying to remove it.", buf, 0x2Au);
                }

                uint64_t v11 = v54;
                uint64_t v10 = v55;
                uint64_t v12 = v58;
                uint64_t v6 = v56;
LABEL_39:
                [v32 sendRemovalRequest];
                id v14 = v32;
                goto LABEL_40;
              }
            }
          }
          if (v16 == ++v18)
          {
            uint64_t v16 = [v14 countByEnumeratingWithState:&v61 objects:v77 count:16];
            if (v16) {
              goto LABEL_12;
            }
            uint64_t v11 = v54;
            uint64_t v10 = v55;
            uint64_t v12 = v58;
            goto LABEL_40;
          }
        }
        char v27 = [*(id *)(v24 + 48) serialNumber];
        uint64_t v28 = [v19 serialNumber];
        int v29 = [v27 isEqual:v28];

        id v14 = v23;
        uint64_t v6 = v24;
        uint64_t v17 = v59;
        uint64_t v16 = v60;
        if (!v29) {
          goto LABEL_20;
        }
        char v43 = (void *)MEMORY[0x230FBD990]();
        __int16 v44 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          __int16 v45 = HMFGetLogIdentifier();
          uint64_t v46 = *(void **)(v56 + 48);
          uint64_t v47 = [v46 serialNumber];
          *(_DWORD *)long long buf = v53;
          id v70 = v45;
          __int16 v71 = 2112;
          id v72 = v19;
          __int16 v73 = 2112;
          BOOL v74 = v46;
          __int16 v75 = 2112;
          uint64_t v76 = v47;
          _os_log_impl(&dword_22F52A000, v44, OS_LOG_TYPE_INFO, "%{public}@Found an existing accessory (%@) match the newly added accessory (%@) with serialNumber %@, trying to remove it.", buf, 0x2Au);
        }
        id v32 = v19;

        uint64_t v11 = v54;
        uint64_t v10 = v55;
        uint64_t v12 = v58;
        uint64_t v6 = v56;
        if (v32) {
          goto LABEL_39;
        }
LABEL_41:
        ++v12;
      }
      while (v12 != v10);
      uint64_t v10 = [obj countByEnumeratingWithState:&v65 objects:v78 count:16];
      if (!v10)
      {
LABEL_43:

        return;
      }
    }
  }
  id v48 = (void *)MEMORY[0x230FBD990]();
  id v49 = *(id *)(a1 + 32);
  __int16 v50 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
  {
    int v51 = HMFGetLogIdentifier();
    id v52 = *(void **)(a1 + 40);
    *(_DWORD *)long long buf = 138543618;
    id v70 = v51;
    __int16 v71 = 2112;
    id v72 = v52;
    _os_log_impl(&dword_22F52A000, v50, OS_LOG_TYPE_ERROR, "%{public}@Skipping audit as accessory (%@) or home has been removed", buf, 0x16u);
  }
}

- (void)auditDuplicatePreviouslyAddedAccessory:(id)a3
{
  id v4 = [a3 userInfo];
  uint64_t v5 = [v4 objectForKeyedSubscript:@"HMDAccessoryNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = v6;

  [(HMDHomeManager *)self _auditDuplicatePreviouslyAddedAccessory:v7];
}

- (void)_handleRetrieveVendorIdentifier:(id)a3
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = a3;
  id v4 = [v3 responseHandler];

  if (v4)
  {
    uint64_t v5 = [v3 stringForKey:@"kCompanionApplicationIdentifierKey"];
    if (!v5) {
      goto LABEL_8;
    }
    uint64_t v6 = +[HMDApplicationVendorIDStore sharedStore];
    id v7 = [v6 vendorIDForApplication:v5];

    uint64_t v8 = (void *)MEMORY[0x230FBD990]();
    long long v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543874;
      int v20 = v10;
      __int16 v21 = 2112;
      uint64_t v22 = v7;
      __int16 v23 = 2112;
      uint64_t v24 = v5;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Retrieved vendor ID %@ for application bundle ID: %@", buf, 0x20u);
    }
    if (v7
      && (uint64_t v17 = @"kCompanionApplicationVendorIdentifierKey",
          uint64_t v18 = v7,
          [NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1],
          uint64_t v11 = objc_claimAutoreleasedReturnValue(),
          v7,
          v11))
    {
      uint64_t v12 = 0;
    }
    else
    {
LABEL_8:
      uint64_t v12 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
      uint64_t v11 = 0;
    }
    id v13 = [v3 responseHandler];
    ((void (**)(void, void *, void *))v13)[2](v13, v12, v11);
  }
  else
  {
    id v14 = (void *)MEMORY[0x230FBD990]();
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      int v20 = v16;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@No response handler set for the retrieve vendor identifier message", buf, 0xCu);
    }
  }
}

- (BOOL)_removeAndAddKeyPair:(id)a3 userName:(id)a4 eraseReason:(unint64_t)a5
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  [(HMDHomeManager *)self _eraseLocalHomeConfigurationWithReason:a5];
  uint64_t v10 = [MEMORY[0x263F35AD0] systemStore];
  int v11 = [v10 removeControllerKeyPairWithError:0];
  uint64_t v12 = (void *)MEMORY[0x230FBD990]();
  id v13 = HMFGetOSLogHandle();
  id v14 = v13;
  if (v11)
  {
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
      goto LABEL_7;
    }
    uint64_t v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v40 = v15;
    uint64_t v16 = "%{public}@Removed controller key from store";
    uint64_t v17 = v14;
    os_log_type_t v18 = OS_LOG_TYPE_INFO;
  }
  else
  {
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    uint64_t v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v40 = v15;
    uint64_t v16 = "%{public}@Failed removing controller key from store";
    uint64_t v17 = v14;
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  }
  _os_log_impl(&dword_22F52A000, v17, v18, v16, buf, 0xCu);

LABEL_7:
  id v38 = 0;
  int v19 = [v10 saveKeyPair:v8 username:v9 syncable:0 error:&v38];
  id v20 = v38;
  __int16 v21 = v20;
  if (v19)
  {
    id v36 = v20;
    id v37 = 0;
    LODWORD(v22) = [v10 deserializeKeyPair:v8 publicKey:&v37 secretKey:0 error:&v36];
    id v23 = v37;
    id v24 = v36;

    if (v22)
    {
      uint64_t v25 = [(HMDHomeManager *)self appleAccountManager];
      uint64_t v26 = [v25 account];

      if (v26)
      {
        char v27 = (void *)[objc_alloc(MEMORY[0x263F425F0]) initWithPairingKeyData:v23];
        uint64_t v28 = (void *)[objc_alloc(MEMORY[0x263F35A78]) initWithIdentifier:v9 publicKey:v27 privateKey:0 permissions:0];
        int v29 = +[HMDIdentityRegistry sharedRegistry];
        [v29 registerIdentity:v28 account:v26 object:v26];
      }
    }
    else
    {
      id v32 = (void *)MEMORY[0x230FBD990]();
      long long v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        id v34 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        long long v40 = v34;
        _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@Deserialize of key pair failed", buf, 0xCu);
      }
    }

    __int16 v21 = v24;
  }
  else
  {
    uint64_t v22 = (void *)MEMORY[0x230FBD990]();
    long long v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      BOOL v31 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      long long v40 = v31;
      _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_INFO, "%{public}@Failed to save key pair", buf, 0xCu);
    }
    LOBYTE(v22) = 0;
  }

  return (char)v22;
}

- (void)__handleAppleAccountUpdated:(id)a3 previousAccount:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __62__HMDHomeManager___handleAppleAccountUpdated_previousAccount___block_invoke;
  block[3] = &unk_264A2F2F8;
  id v12 = v7;
  id v13 = v6;
  id v14 = self;
  id v9 = v6;
  id v10 = v7;
  dispatch_async(v8, block);
}

void __62__HMDHomeManager___handleAppleAccountUpdated_previousAccount___block_invoke(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v2 = [MEMORY[0x263F35AD0] systemStore];
  id v3 = [v2 getLocalPairingIdentity:0];

  if (*(void *)(a1 + 32)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = +[HMDIdentityRegistry sharedRegistry];
    [v5 deregisterIdentity:v3 object:*(void *)(a1 + 32)];
  }
  if (*(void *)(a1 + 40) && v3)
  {
    id v6 = +[HMDIdentityRegistry sharedRegistry];
    [v6 registerIdentity:v3 account:*(void *)(a1 + 40) object:*(void *)(a1 + 40)];
  }
  [*(id *)(a1 + 48) _notifyClientsOfUpdatedStatus];
  uint64_t v7 = [*(id *)(a1 + 48) postFinishSetupForCurrentAccessoryFollowUpIfNeeded];
  if (*(void *)(a1 + 40))
  {
    id v8 = (void *)MEMORY[0x230FBD990](v7);
    id v9 = *(id *)(a1 + 48);
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = HMFGetLogIdentifier();
      int v25 = 138543362;
      uint64_t v26 = v11;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Handling account sign in", (uint8_t *)&v25, 0xCu);
    }
    BOOL v12 = isWatch();
    id v13 = (void *)MEMORY[0x230FBD990](v12);
    id v14 = *(id *)(a1 + 48);
    uint64_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = HMFGetLogIdentifier();
      int v25 = 138543362;
      uint64_t v26 = v16;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Clearing CloudKit account status", (uint8_t *)&v25, 0xCu);
    }
    [*(id *)(a1 + 48) setCloudkitAccountStatusDetermined:0];
    [*(id *)(a1 + 48) setBackOffOperationInProgress:0];
    uint64_t v17 = [*(id *)(a1 + 48) multiUserStatusController];
    [v17 didChangeHasActiveAccountState:0];

    os_log_type_t v18 = [*(id *)(a1 + 48) notificationCenter];
    [v18 postNotificationName:@"HMDHomeManagerKeyTransferResetTimerNotification" object:*(void *)(a1 + 48) userInfo:0];
  }
  else if (*(void *)(a1 + 32))
  {
    int v19 = (void *)MEMORY[0x230FBD990](v7);
    id v20 = *(id *)(a1 + 48);
    __int16 v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = HMFGetLogIdentifier();
      int v25 = 138543362;
      uint64_t v26 = v22;
      _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Handling account sign out", (uint8_t *)&v25, 0xCu);
    }
    id v23 = [*(id *)(a1 + 48) multiUserStatusController];
    [v23 didChangeHasActiveAccountState:0];

    [*(id *)(a1 + 48) _eraseLocalHomeConfigurationAfterSignOut];
    [*(id *)(a1 + 48) setBackOffOperationInProgress:0];
    [*(id *)(a1 + 48) setCloudkitAccountStatusDetermined:0];
    id v24 = +[HMDPersistentStore archiveCloudServerTokenData:0];
    [*(id *)(a1 + 48) updatePowerAssertion];
  }
}

- (void)__handleAppleAccountUpdated:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 userInfo];
  id v6 = [v5 objectForKeyedSubscript:@"HMDAccountNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  id v12 = v7;

  id v8 = [v4 userInfo];

  id v9 = [v8 objectForKeyedSubscript:@"HMDPreviousAccountNotificationKey"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v10 = v9;
  }
  else {
    id v10 = 0;
  }
  id v11 = v10;

  [(HMDHomeManager *)self __handleAppleAccountUpdated:v12 previousAccount:v11];
}

- (void)__checkForBootTimeLogout
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self appleAccountManager];
  int v4 = [v3 didProcessAccountSignOut];

  if (v4)
  {
    uint64_t v5 = [(HMDHomeManager *)self appleAccountManager];
    id v6 = [v5 lastSignedOutAccount];

    uint64_t v7 = [MEMORY[0x263EFB210] defaultStore];
    id v8 = objc_msgSend(v7, "aa_primaryAppleAccount");

    if (v8)
    {
      id v9 = (void *)MEMORY[0x230FBD990]();
      id v10 = self;
      id v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = HMFGetLogIdentifier();
        int v20 = 138543362;
        __int16 v21 = v12;
        _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Relaunching due to account sign out and sign in that occurred during boot", (uint8_t *)&v20, 0xCu);
      }
      id v13 = +[HMDMainDriver driver];
      [v13 relaunch];
    }
    else
    {
      id v14 = (void *)MEMORY[0x230FBD990]();
      uint64_t v15 = self;
      uint64_t v16 = HMFGetOSLogHandle();
      BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      if (v6)
      {
        if (v17)
        {
          os_log_type_t v18 = HMFGetLogIdentifier();
          int v20 = 138543362;
          __int16 v21 = v18;
          _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Handling account sign out that occurred during boot", (uint8_t *)&v20, 0xCu);
        }
        [(HMDHomeManager *)v15 __handleAppleAccountUpdated:0 previousAccount:v6];
      }
      else
      {
        if (v17)
        {
          int v19 = HMFGetLogIdentifier();
          int v20 = 138543362;
          __int16 v21 = v19;
          _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Handling account sign out that occurred before boot", (uint8_t *)&v20, 0xCu);
        }
        [(HMDHomeManager *)v15 _eraseLocalHomeConfigurationAfterSignOut];
      }
    }
  }
}

- (BOOL)setLocalPairingIdentity:(id)a3 error:(id *)a4
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v6 = a3;
  uint64_t v7 = [MEMORY[0x263F35AD0] systemStore];
  id v8 = [v7 getLocalPairingIdentity:0];
  if ([v8 isEqual:v6])
  {
    id v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = self;
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      int v22 = 138543362;
      id v23 = v12;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Skipping updating pairing identity, it matches current identity", (uint8_t *)&v22, 0xCu);
    }
LABEL_9:
    BOOL v16 = 1;
    goto LABEL_13;
  }
  if ([v7 saveLocalPairingIdentity:v6 syncable:0 error:a4])
  {
    id v13 = [(HMDHomeManager *)self appleAccountManager];
    id v14 = [v13 account];

    if (v14)
    {
      uint64_t v15 = +[HMDIdentityRegistry sharedRegistry];
      [v15 registerIdentity:v6 account:v14 object:v14];
    }
    goto LABEL_9;
  }
  BOOL v17 = (void *)MEMORY[0x230FBD990]();
  os_log_type_t v18 = self;
  int v19 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = HMFGetLogIdentifier();
    int v22 = 138543362;
    id v23 = v20;
    _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to save local pairing identity", (uint8_t *)&v22, 0xCu);
  }
  BOOL v16 = 0;
LABEL_13:

  return v16;
}

- (void)_handleCompanionKeysSync:(id)a3
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 dataForKey:@"kControllerKeyPairKey"];
  id v6 = [v4 stringForKey:@"kControllerPairingNameKey"];
  uint64_t v7 = [v4 dataForKey:@"kControllerUniqueDeviceIdSaltKey"];
  id v8 = [v4 dataForKey:@"kControllerAssistantTeamIdentifierKey"];
  id v9 = [v4 responseHandler];

  if (v9)
  {
    if (v5 && v7 && v8)
    {
      long long v30 = v6;
      if ([(HMDHomeManager *)self _removeAndAddKeyPair:v5 userName:v6 eraseReason:1])
      {
        id v10 = +[HMDHAPMetadata getSharedInstance];
        v31[0] = @"kHomedVersionKey";
        id v11 = (id)homedVersion;
        v32[0] = v11;
        v31[1] = @"kMetadataInfoVersionKey";
        id v12 = [v10 version];
        v32[1] = v12;
        void v31[2] = @"kMetadataInfoSchemaVersionKey";
        id v13 = [v10 schemaVersion];
        void v32[2] = v13;
        id v14 = [NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:3];

        [(HMDHomeManager *)self _setUniqueDeviceIdSalt:v7];
        [(HMDHomeManager *)self _saveAssistantHashingData:v8];
      }
      else
      {
        id v23 = (void *)MEMORY[0x230FBD990]();
        uint64_t v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          int v25 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          id v34 = v25;
          _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Failed to save the key pair to keychain", buf, 0xCu);
        }
        id v14 = 0;
      }
      uint64_t v26 = (void *)MEMORY[0x230FBD990]();
      uint64_t v27 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        uint64_t v28 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v34 = v28;
        _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_INFO, "%{public}@Answering Companion Sync request", buf, 0xCu);
      }
      int v29 = [v4 responseHandler];
      ((void (**)(void, void, void *))v29)[2](v29, 0, v14);

      id v6 = v30;
    }
    else
    {
      os_log_type_t v18 = (void *)MEMORY[0x230FBD990]();
      int v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        int v20 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v34 = v20;
        _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@Key pair/salts are missing the companion key sync message", buf, 0xCu);
      }
      __int16 v21 = [v4 responseHandler];
      int v22 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      ((void (**)(void, void *, void))v21)[2](v21, v22, 0);
    }
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    BOOL v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      BOOL v17 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v34 = v17;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@No response handler", buf, 0xCu);
    }
  }
}

- (void)_handleHomesConfigSync:(id)a3
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = +[HMDHAPMetadata getSharedInstance];
  id v6 = [MEMORY[0x263EFF9A0] dictionary];
  id v7 = (id)homedVersion;
  [v6 setObject:v7 forKeyedSubscript:@"kHomedVersionKey"];

  id v8 = [v5 version];
  [v6 setObject:v8 forKeyedSubscript:@"kMetadataInfoVersionKey"];

  id v9 = [v5 schemaVersion];
  [v6 setObject:v9 forKeyedSubscript:@"kMetadataInfoSchemaVersionKey"];

  id v10 = [(HMDHomeManager *)self primaryHomeUUID];

  if (v10)
  {
    id v11 = [(HMDHomeManager *)self primaryHomeUUID];
    id v12 = [v11 UUIDString];
    [v6 setObject:v12 forKeyedSubscript:@"kPrimaryHomeUUIDKey"];
  }
  id v13 = [v4 messagePayload];
  id v14 = objc_msgSend(v13, "hmf_UUIDForKey:", @"kCurrentHomeUUIDKey");

  if (v14) {
    [(HMDHomeManager *)self _notifyCurrentHomeUpdated:v14 isLocalUpdate:0];
  }
  uint64_t v15 = [(HMDHomeManager *)self _prepareHomesVersionDict];
  if (v15) {
    [v6 setObject:v15 forKeyedSubscript:@"kHomeConfigHomesKey"];
  }
  BOOL v16 = [v4 remoteSourceDevice];
  BOOL v17 = [v16 version];
  os_log_type_t v18 = [[HMDHomeKitVersion alloc] initWithVersionString:@"4.1.1"];
  int v19 = [v17 isAtLeastVersion:v18];

  if (!v19)
  {
    int v25 = (void *)MEMORY[0x230FBD990]();
    uint64_t v26 = self;
    uint64_t v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v41 = v28;
      _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_INFO, "%{public}@Responding with legacy pairing identity", buf, 0xCu);
    }
    int v29 = [MEMORY[0x263F35AD0] systemStore];
    id v37 = 0;
    id v38 = 0;
    id v36 = 0;
    [v29 getControllerPublicKey:0 secretKey:0 keyPair:&v38 username:&v37 allowCreation:0 error:&v36];
    id v22 = v38;
    id v23 = v37;
    id v21 = v36;

    if (v22) {
      [v6 setObject:v22 forKeyedSubscript:@"kControllerKeyPairKey"];
    }
    if (v23) {
      [v6 setObject:v23 forKeyedSubscript:@"kControllerPairingNameKey"];
    }
    goto LABEL_16;
  }
  int v20 = [MEMORY[0x263F35AD0] systemStore];
  id v39 = 0;
  id v21 = [v20 getLocalPairingIdentity:&v39];
  id v22 = v39;

  if (v21)
  {
    id v23 = [v21 publicPairingIdentity];
    uint64_t v24 = encodeRootObject();
    [v6 setObject:v24 forKeyedSubscript:@"pairingIdentity"];

LABEL_16:
    goto LABEL_17;
  }
  id v32 = (void *)MEMORY[0x230FBD990]();
  long long v33 = self;
  id v34 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v35 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v41 = v35;
    __int16 v42 = 2112;
    id v43 = v22;
    _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to get local pairing identity with error: %@", buf, 0x16u);
  }
  id v21 = 0;
LABEL_17:

  long long v30 = +[HMDHomeManager getUniqueDeviceIdSalt];
  if (v30) {
    [v6 setObject:v30 forKeyedSubscript:@"kControllerUniqueDeviceIdSaltKey"];
  }
  BOOL v31 = [v4 responseHandler];
  ((void (**)(void, void, void *))v31)[2](v31, 0, v6);
}

- (id)_prepareHomesVersionDict
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = [MEMORY[0x263EFF9A0] dictionary];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = [(HMDHomeManager *)self homes];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        id v10 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v9, "configurationVersion"));
        id v11 = [v9 uuid];
        id v12 = [v11 UUIDString];
        [v3 setObject:v10 forKeyedSubscript:v12];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  if ([v3 count]) {
    id v13 = (void *)[v3 copy];
  }
  else {
    id v13 = 0;
  }

  return v13;
}

- (void)processTransactionsFromHomeDataSync:(id)a3 accessories:(id)a4 version:(int64_t)a5 completion:(id)a6
{
  v66[1] = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v43 = a4;
  __int16 v42 = (void (**)(void))a6;
  v66[0] = v10;
  id v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:v66 count:1];
  [(HMDHomeManager *)self _associateAccessories:v43 withHomes:v11];

  [v10 fixupHomeAfterDecoding];
  id v12 = [v10 uuid];
  id v13 = [(HMDHomeManager *)self _homeWithUUID:v12];

  uint64_t v41 = [v10 sharedHomeSourceVersion];
  id v14 = (void *)MEMORY[0x230FBD990]();
  id v15 = [(HMDHomeManager *)self _loadCloudTransactionForRemoteHome:v10 localHome:v13 cachedHome:0 version:a5];
  if ([v15 count])
  {
    long long v16 = [(HMDHomeManager *)self _findHomeModel:v15];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      long long v17 = v16;
    }
    else {
      long long v17 = 0;
    }
    id v40 = v17;

    if (!v13 && v40)
    {
      long long v18 = (void *)[v15 mutableCopy];
      [v18 removeObject:v40];
      uint64_t v19 = [v18 copy];

      id v15 = (id)v19;
    }
    objc_initWeak(&location, self);
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke;
    aBlock[3] = &unk_264A2B650;
    objc_copyWeak(&v62, &location);
    id v20 = v10;
    id v59 = v20;
    id v21 = v42;
    long long v61 = v21;
    id v22 = v41;
    id v60 = v22;
    id v23 = _Block_copy(aBlock);
    v51[0] = MEMORY[0x263EF8330];
    v51[1] = 3221225472;
    v51[2] = __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_974;
    v51[3] = &unk_264A2B678;
    objc_copyWeak(&v57, &location);
    uint64_t v24 = v21;
    uint64_t v55 = v24;
    id v25 = v22;
    id v52 = v25;
    id v53 = v20;
    id v15 = v15;
    id v54 = v15;
    id v26 = v23;
    id v56 = v26;
    uint64_t v27 = _Block_copy(v51);
    uint64_t v28 = v27;
    if (v13)
    {
      (*((void (**)(void *, void))v27 + 2))(v27, 0);
    }
    else
    {
      if (v40)
      {
        long long v33 = [(HMDHomeManager *)self backingStore];
        id v34 = +[HMDBackingStoreTransactionOptions defaultIDSOptions];
        uint64_t v35 = [v33 transaction:@"kTransactionUpdate" options:v34];

        [v35 add:v40 withMessage:0];
        v44[0] = MEMORY[0x263EF8330];
        v44[1] = 3221225472;
        v44[2] = __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_975;
        v44[3] = &unk_264A2B6A0;
        objc_copyWeak(&v50, &location);
        uint64_t v47 = v24;
        id v45 = v25;
        id v46 = v15;
        id v48 = v26;
        id v49 = v28;
        [v35 run:v44];

        objc_destroyWeak(&v50);
      }
      else
      {
        id v36 = (void *)MEMORY[0x230FBD990]();
        id v37 = self;
        HMFGetOSLogHandle();
        id v38 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          id v39 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          long long v65 = v39;
          _os_log_impl(&dword_22F52A000, v38, OS_LOG_TYPE_ERROR, "%{public}@Must have home model to create home because it does not already exist", buf, 0xCu);
        }
        if (!v24) {
          goto LABEL_21;
        }
        uint64_t v35 = [MEMORY[0x263F087E8] hmErrorWithCode:52];
        ((void (*)(void (**)(void), void, void, void *))v24[2])(v24, 0, 0, v35);
      }
    }
LABEL_21:

    objc_destroyWeak(&v57);
    objc_destroyWeak(&v62);
    objc_destroyWeak(&location);

    goto LABEL_22;
  }
  int v29 = (void *)MEMORY[0x230FBD990]();
  long long v30 = self;
  BOOL v31 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    id v32 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v65 = v32;
    _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_INFO, "%{public}@No changes to home", buf, 0xCu);
  }
  if (v42) {
    v42[2]();
  }
LABEL_22:
}

void __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v5 = [*(id *)(a1 + 32) uuid];
    uint64_t v6 = [WeakRetained _homeWithUUID:v5];

    uint64_t v7 = [WeakRetained incomingInvitations];
    id v8 = [v6 uuid];
    id v9 = objc_msgSend(v7, "hmf_firstObjectWithValue:forKeyPath:", v8, @"homeUUID");

    if (v9)
    {
      id v10 = (void *)MEMORY[0x230FBD990]();
      id v11 = WeakRetained;
      id v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = id v18 = v3;
        id v14 = [v6 uuid];
        [v14 UUIDString];
        v15 = uint64_t v19 = v10;
        long long v16 = [v9 describeWithFormat];
        *(_DWORD *)long long buf = 138543874;
        id v21 = v13;
        __int16 v22 = 2112;
        id v23 = v15;
        __int16 v24 = 2112;
        id v25 = v16;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Found home with UUID %@ in invite %@, removing it since it was accepted", buf, 0x20u);

        id v10 = v19;
        id v3 = v18;
      }

      [v11 _postIncomingInvitationStateChangedNotification:v9 newInvitationState:3];
      [v11 _removeIncomingInvitation:v9];
    }
  }
  uint64_t v17 = *(void *)(a1 + 48);
  if (v17) {
    (*(void (**)(uint64_t, uint64_t, void, void))(v17 + 16))(v17, 1, *(void *)(a1 + 40), 0);
  }
}

void __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_974(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  uint64_t v5 = WeakRetained;
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6) {
      (*(void (**)(uint64_t, void, void, id))(v6 + 16))(v6, 0, *(void *)(a1 + 32), v3);
    }
  }
  else if (WeakRetained)
  {
    uint64_t v7 = [*(id *)(a1 + 40) uuid];
    id v8 = [v5 _homeWithUUID:v7];

    id v9 = [v8 sharedHomeUpdateHandler];
    [v9 pause];

    uint64_t v19 = v8;
    id v10 = [v8 backingStore];
    id v11 = +[HMDBackingStoreTransactionOptions defaultIDSOptions];
    id v12 = [v10 transaction:@"kTransactionUpdate" options:v11];

    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v13 = *(id *)(a1 + 48);
    uint64_t v14 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v21;
      do
      {
        uint64_t v17 = 0;
        do
        {
          if (*(void *)v21 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = *(void *)(*((void *)&v20 + 1) + 8 * v17);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            [v12 add:v18 withMessage:0];
          }
          ++v17;
        }
        while (v15 != v17);
        uint64_t v15 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v15);
    }

    [v12 run:*(void *)(a1 + 64)];
  }
}

void __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_975(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (v6)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4) {
      (*(void (**)(uint64_t, void, void, id))(v4 + 16))(v4, 0, *(void *)(a1 + 32), v6);
    }
  }
  else if (WeakRetained)
  {
    if ([*(id *)(a1 + 40) count]) {
      uint64_t v5 = *(void *)(a1 + 64);
    }
    else {
      uint64_t v5 = *(void *)(a1 + 56);
    }
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0);
  }
}

- (void)_processSharedHomeModel:(id)a3 message:(id)a4
{
  v45[7] = *MEMORY[0x263EF8340];
  id v31 = a3;
  id v29 = a4;
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x3032000000;
  v39[3] = __Block_byref_object_copy__242964;
  v39[4] = __Block_byref_object_dispose__242965;
  id v40 = (id)[objc_alloc(MEMORY[0x263F425C0]) initWithName:@"com.apple.homed.handle-home-sync"];
  id v6 = (void *)MEMORY[0x263EFFA08];
  v45[0] = objc_opt_class();
  v45[1] = objc_opt_class();
  v45[2] = objc_opt_class();
  v45[3] = objc_opt_class();
  void v45[4] = objc_opt_class();
  v45[5] = objc_opt_class();
  v45[6] = objc_opt_class();
  uint64_t v7 = [MEMORY[0x263EFF8C0] arrayWithObjects:v45 count:7];
  long long v30 = [v6 setWithArray:v7];

  id v8 = objc_alloc(MEMORY[0x263F08928]);
  id v9 = [v31 homeData];
  id v38 = 0;
  id v10 = (void *)[v8 initForReadingFromData:v9 error:&v38];
  id v11 = v38;

  [v10 _allowDecodingCyclesInSecureMode];
  uint64_t v12 = *MEMORY[0x263F081D0];
  id v37 = v11;
  id v13 = [v10 decodeTopLevelObjectOfClasses:v30 forKey:v12 error:&v37];
  id v28 = v37;

  if (!v13)
  {
    uint64_t v14 = (void *)MEMORY[0x230FBD990]();
    uint64_t v15 = self;
    HMFGetOSLogHandle();
    uint64_t v16 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      __int16 v42 = v17;
      __int16 v43 = 2112;
      id v44 = v28;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive home from shared home model's home data: %@", buf, 0x16u);
    }
  }
  id v18 = v13;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  id v20 = v19;

  long long v21 = [v20 objectForKeyedSubscript:@"kHomeDataBlobKey"];
  long long v22 = [v20 objectForKeyedSubscript:@"kAccessoriesDataBlobKey"];
  long long v23 = objc_msgSend(v20, "hmf_numberForKey:", @"kHomeDataVersionKey");
  __int16 v24 = v23;
  if (v23)
  {
    uint64_t v25 = [v23 integerValue];
    if (!v21) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v25 = 0;
  if (v21)
  {
LABEL_12:
    -[HMDHomeManager setHomeDataLoadedFromArchive:](self, "setHomeDataLoadedFromArchive:", 1, v28);
    uint64_t v26 = [v21 zoneID];
    uint64_t v27 = [v21 ownerName];
    [(HMDHomeManager *)self _addCloudZone:v26 ownerName:v27];

    objc_initWeak((id *)buf, self);
    v32[0] = MEMORY[0x263EF8330];
    v32[1] = 3221225472;
    void v32[2] = __50__HMDHomeManager__processSharedHomeModel_message___block_invoke;
    void v32[3] = &unk_264A2B628;
    objc_copyWeak(&v36, (id *)buf);
    id v33 = v21;
    id v34 = v29;
    uint64_t v35 = v39;
    [(HMDHomeManager *)self processTransactionsFromHomeDataSync:v33 accessories:v22 version:v25 completion:v32];

    objc_destroyWeak(&v36);
    objc_destroyWeak((id *)buf);
  }
LABEL_13:

  _Block_object_dispose(v39, 8);
}

void __50__HMDHomeManager__processSharedHomeModel_message___block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  v37[1] = *MEMORY[0x263EF8340];
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v10 = WeakRetained;
  if (!v8 && WeakRetained)
  {
    id v11 = [*(id *)(a1 + 32) uuid];
    uint64_t v12 = [v10 _homeWithUUID:v11];

    if (v12)
    {
      id v13 = v7;
      uint64_t v14 = [*(id *)(a1 + 40) name];
      char v15 = [v14 isEqualToString:@"kTransactionUpdate"];

      if ((v15 & 1) == 0)
      {
        uint64_t v16 = [*(id *)(a1 + 40) destination];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        id v18 = v17;

        uint64_t v19 = [v18 device];

        uint64_t v20 = [v19 version];

        id v13 = (id)v20;
      }
      long long v21 = [v12 sharedHomeUpdateHandler];
      v31[0] = MEMORY[0x263EF8330];
      v31[1] = 3221225472;
      void v31[2] = __50__HMDHomeManager__processSharedHomeModel_message___block_invoke_2;
      void v31[3] = &unk_264A2B600;
      objc_copyWeak(&v34, (id *)(a1 + 56));
      id v32 = *(id *)(a1 + 40);
      char v35 = a2;
      id v22 = v12;
      id v33 = v22;
      [v21 receivedHomeDataFromSourceVersion:v13 forceUpdateVersion:a2 completion:v31];

      long long v23 = [v22 presenceFeeder];
      [v23 homeDataProcessed];

      objc_destroyWeak(&v34);
    }

    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    uint64_t v26 = [*(id *)(a1 + 40) responseHandler];

    if (v26)
    {
      id v36 = @"kDataSyncResponseAckKey";
      v37[0] = MEMORY[0x263EFFA88];
      uint64_t v27 = [NSDictionary dictionaryWithObjects:v37 forKeys:&v36 count:1];
      id v28 = [*(id *)(a1 + 40) responseHandler];
      ((void (**)(void, void, void *))v28)[2](v28, 0, v27);
    }
    goto LABEL_16;
  }
  __int16 v24 = [*(id *)(a1 + 40) responseHandler];

  if (v24)
  {
    uint64_t v25 = [*(id *)(a1 + 40) responseHandler];
    ((void (**)(void, id, void))v25)[2](v25, v8, 0);
  }
LABEL_16:
  uint64_t v29 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v30 = *(void **)(v29 + 40);
  *(void *)(v29 + 40) = 0;
}

void __50__HMDHomeManager__processSharedHomeModel_message___block_invoke_2(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v11 = WeakRetained;
    uint64_t v5 = [*(id *)(a1 + 32) name];
    if (([v5 isEqualToString:@"kTransactionUpdate"] & 1) == 0)
    {
      int v6 = *(unsigned __int8 *)(a1 + 56);

      if (!v6 && !a2) {
        goto LABEL_7;
      }
      uint64_t v5 = [*(id *)(a1 + 40) sharedHomeModel];
      id v7 = [v11 backingStore];
      id v8 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      id v9 = [v7 transaction:@"kTransactionIDSUpdate" options:v8];

      [v9 add:v5 withMessage:0];
      [v9 save:&__block_literal_global_968];
    }
LABEL_7:
    id v10 = [*(id *)(a1 + 40) sharedHomeUpdateHandler];
    [v10 resume];

    id WeakRetained = v11;
  }
}

- (void)processSharedHomeModelUpdate:(id)a3 message:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  objc_initWeak(&location, self);
  id v8 = [(HMDHomeManager *)self workQueue];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  v11[2] = __55__HMDHomeManager_processSharedHomeModelUpdate_message___block_invoke;
  v11[3] = &unk_264A2B5D8;
  objc_copyWeak(&v14, &location);
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, v11);

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

void __55__HMDHomeManager_processSharedHomeModelUpdate_message___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _processSharedHomeModel:*(void *)(a1 + 32) message:*(void *)(a1 + 40)];
}

- (id)_loadCloudTransactionForRemoteHome:(id)a3 localHome:(id)a4 cachedHome:(id)a5 version:(int64_t)a6
{
  uint64_t v209 = *MEMORY[0x263EF8340];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id v144 = v10;
  uint64_t v140 = [v10 backingStoreObjects:a6];
  uint64_t v142 = v9;
  id v12 = [v9 backingStoreObjects:a6];
  long long v157 = (void *)[v12 mutableCopy];

  BOOL v141 = v11;
  int64_t v147 = a6;
  uint64_t v148 = [v11 backingStoreObjects:a6];
  id v13 = (void *)MEMORY[0x230FBD990]();
  id v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    char v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v201 = v15;
    __int16 v202 = 2048;
    int64_t v203 = a6;
    _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Received data with home-data-version %tu", buf, 0x16u);
  }
  long long v192 = 0u;
  long long v193 = 0u;
  long long v190 = 0u;
  long long v191 = 0u;
  id obj = (id)[v157 copy];
  uint64_t v16 = [obj countByEnumeratingWithState:&v190 objects:v208 count:16];
  if (v16)
  {
    id v17 = (id)v16;
    uint64_t v18 = *(void *)v191;
    uint64_t v149 = *(void *)v191;
    do
    {
      uint64_t v19 = 0;
      id v150 = v17;
      do
      {
        if (*(void *)v191 != v18) {
          objc_enumerationMutation(obj);
        }
        id v20 = *(id *)(*((void *)&v190 + 1) + 8 * (void)v19);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          long long v21 = v20;
        }
        else {
          long long v21 = 0;
        }
        id v22 = v21;

        if (v22)
        {
          if (![v22 propertyWasSet:@"uniqueIdentifier"]
            || ([v22 uniqueIdentifier],
                long long v23 = objc_claimAutoreleasedReturnValue(),
                v23,
                !v23))
          {
            id v155 = v22;
            uint64_t v41 = v19;
            __int16 v42 = (void *)MEMORY[0x230FBD990]();
            __int16 v43 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
            {
              id v44 = HMFGetLogIdentifier();
              id v45 = (objc_class *)objc_opt_class();
              id v46 = NSStringFromClass(v45);
              uint64_t v47 = [v20 bsoType];
              id v48 = [v20 uuid];
              id v49 = [v48 UUIDString];
              *(_DWORD *)long long buf = 138544130;
              uint64_t v201 = v44;
              __int16 v202 = 2112;
              int64_t v203 = (int64_t)v46;
              __int16 v204 = 2112;
              v205 = v47;
              __int16 v206 = 2112;
              v207 = v49;
              _os_log_impl(&dword_22F52A000, v43, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Got %@/%@ object (uuid: %@) from remote that has a null / unset uniqueIdentifier (no way to recover).", buf, 0x2Au);

              id v17 = v150;
              uint64_t v18 = v149;
            }
            [v157 removeObject:v20];
            uint64_t v19 = v41;
            goto LABEL_62;
          }
        }
        __int16 v24 = [v20 uuid];

        if (!v24)
        {
          id v155 = v22;
          id v50 = (HMDUserModel *)v20;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            int v51 = v50;
          }
          else {
            int v51 = 0;
          }
          id v52 = v51;

          if (v52)
          {
            long long v184 = 0u;
            long long v185 = 0u;
            long long v182 = 0u;
            long long v183 = 0u;
            id v53 = [v144 users];
            uint64_t v54 = [v53 countByEnumeratingWithState:&v182 objects:v198 count:16];
            uint64_t v55 = v50;
            if (v54)
            {
              uint64_t v56 = v54;
              long long v162 = v50;
              uint64_t v146 = v19;
              uint64_t v57 = *(void *)v183;
              while (2)
              {
                for (uint64_t i = 0; i != v56; ++i)
                {
                  if (*(void *)v183 != v57) {
                    objc_enumerationMutation(v53);
                  }
                  id v59 = *(void **)(*((void *)&v182 + 1) + 8 * i);
                  id v60 = [v59 pairingUsername];
                  long long v61 = [(HMDUserModel *)v52 pairingIdentity];
                  id v62 = [v61 objectForKey:@"HAP.identifier"];
                  int v63 = [v60 isEqual:v62];

                  if (v63)
                  {
                    long long v64 = [HMDUserModel alloc];
                    long long v65 = [(HMDBackingStoreModelObject *)v52 bsoDataVersion];
                    uint64_t v66 = [(HMDBackingStoreModelObject *)v52 objectChangeType];
                    long long v67 = [v59 uuid];
                    long long v68 = [(HMDBackingStoreModelObject *)v52 parentUUID];
                    uint64_t v55 = [(HMDBackingStoreModelObject *)v64 initWithVersion:v65 changeType:v66 uuid:v67 parentUUID:v68];

                    id v69 = [(HMDBackingStoreModelObject *)v55 merge:v52];
                    goto LABEL_48;
                  }
                }
                uint64_t v56 = [v53 countByEnumeratingWithState:&v182 objects:v198 count:16];
                if (v56) {
                  continue;
                }
                break;
              }
              uint64_t v55 = v52;
LABEL_48:
              uint64_t v18 = v149;
              uint64_t v19 = v146;
              id v50 = v162;
            }

            id v70 = [(HMDBackingStoreModelObject *)v55 uuid];

            id v17 = v150;
            if (v70) {
              goto LABEL_61;
            }
            __int16 v71 = (void *)MEMORY[0x230FBD990]();
            id v72 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
            {
              id v88 = HMFGetLogIdentifier();
              id v89 = (objc_class *)objc_opt_class();
              long long v90 = NSStringFromClass(v89);
              id v91 = [(HMDBackingStoreModelObject *)v50 bsoType];
              *(_DWORD *)long long buf = 138543874;
              uint64_t v201 = v88;
              __int16 v202 = 2112;
              int64_t v203 = (int64_t)v90;
              __int16 v204 = 2112;
              v205 = v91;
              _os_log_impl(&dword_22F52A000, v72, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Got %@/%@ object from remote that has a null UUID (tried to match via pairing ID and failed).", buf, 0x20u);

              uint64_t v18 = v149;
            }
          }
          else
          {
            __int16 v71 = (void *)MEMORY[0x230FBD990]();
            id v72 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
            {
              __int16 v73 = HMFGetLogIdentifier();
              BOOL v74 = (objc_class *)objc_opt_class();
              __int16 v75 = NSStringFromClass(v74);
              uint64_t v76 = [(HMDBackingStoreModelObject *)v50 bsoType];
              *(_DWORD *)long long buf = 138543874;
              uint64_t v201 = v73;
              __int16 v202 = 2112;
              int64_t v203 = (int64_t)v75;
              __int16 v204 = 2112;
              v205 = v76;
              _os_log_impl(&dword_22F52A000, v72, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Got %@/%@ object from remote that has a null UUID (and no way to recover).", buf, 0x20u);
            }
            uint64_t v55 = 0;
          }

          [v157 removeObject:v50];
LABEL_61:

LABEL_62:
          id v22 = v155;
          goto LABEL_63;
        }
        if (v147 <= 3)
        {
          uint64_t v25 = (HMDUserModel *)v20;
          objc_opt_class();
          uint64_t v26 = (objc_opt_isKindOfClass() & 1) != 0 ? v25 : 0;
          uint64_t v27 = v26;

          if (v27)
          {
            long long v188 = 0u;
            long long v189 = 0u;
            long long v186 = 0u;
            long long v187 = 0u;
            id v161 = [v144 users];
            uint64_t v28 = [v161 countByEnumeratingWithState:&v186 objects:v199 count:16];
            if (v28)
            {
              uint64_t v29 = v28;
              uint64_t v143 = v25;
              id v154 = v22;
              id v145 = v19;
              uint64_t v30 = *(void *)v187;
              while (2)
              {
                for (uint64_t j = 0; j != v29; ++j)
                {
                  if (*(void *)v187 != v30) {
                    objc_enumerationMutation(v161);
                  }
                  id v32 = *(void **)(*((void *)&v186 + 1) + 8 * j);
                  id v33 = [v32 uuid];
                  id v34 = [(HMDBackingStoreModelObject *)v27 uuid];
                  if ([v33 isEqual:v34])
                  {
                  }
                  else
                  {
                    char v35 = [v32 pairingUsername];
                    [(HMDUserModel *)v27 pairingIdentity];
                    long long v159 = v32;
                    id v37 = v36 = v29;
                    [v37 objectForKey:@"HAP.identifier"];
                    v39 = id v38 = v27;
                    int v40 = [v35 isEqual:v39];

                    uint64_t v27 = v38;
                    uint64_t v29 = v36;

                    if (v40)
                    {
                      uint64_t v77 = (void *)MEMORY[0x230FBD990]();
                      long long v78 = HMFGetOSLogHandle();
                      if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
                      {
                        uint64_t v79 = HMFGetLogIdentifier();
                        *(_DWORD *)long long buf = 138543874;
                        uint64_t v201 = v79;
                        __int16 v202 = 2112;
                        int64_t v203 = (int64_t)v159;
                        __int16 v204 = 2112;
                        v205 = v38;
                        _os_log_impl(&dword_22F52A000, v78, OS_LOG_TYPE_INFO, "%{public}@Found an existing user %@, MERGING properties from %@", buf, 0x20u);
                      }
                      id v80 = [HMDUserModel alloc];
                      uint64_t v81 = [(HMDBackingStoreModelObject *)v38 bsoDataVersion];
                      uint64_t v82 = [(HMDBackingStoreModelObject *)v38 objectChangeType];
                      id v83 = [v159 uuid];
                      id v84 = [(HMDBackingStoreModelObject *)v38 parentUUID];
                      char v85 = [(HMDBackingStoreModelObject *)v80 initWithVersion:v81 changeType:v82 uuid:v83 parentUUID:v84];

                      id v86 = [(HMDBackingStoreModelObject *)v85 merge:v38];
                      long long v87 = v85;

                      [v157 removeObject:v143];
                      [v157 addObject:v87];

                      uint64_t v25 = v87;
                      goto LABEL_57;
                    }
                  }
                }
                uint64_t v29 = [v161 countByEnumeratingWithState:&v186 objects:v199 count:16];
                if (v29) {
                  continue;
                }
                break;
              }
              uint64_t v25 = v27;
LABEL_57:
              uint64_t v18 = v149;
              id v17 = v150;
              uint64_t v19 = v145;
              id v22 = v154;
            }
            else
            {
              id v17 = v150;
            }
          }
        }
LABEL_63:

        uint64_t v19 = (char *)v19 + 1;
      }
      while (v19 != v17);
      uint64_t v92 = [obj countByEnumeratingWithState:&v190 objects:v208 count:16];
      id v17 = (id)v92;
    }
    while (v92);
  }

  objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v157, "count") + objc_msgSend(v140, "count"));
  id v163 = (id)objc_claimAutoreleasedReturnValue();
  long long v178 = 0u;
  long long v179 = 0u;
  long long v180 = 0u;
  long long v181 = 0u;
  id v151 = v140;
  uint64_t v160 = [v151 countByEnumeratingWithState:&v178 objects:v197 count:16];
  if (v160)
  {
    uint64_t v156 = *(void *)v179;
    do
    {
      for (uint64_t k = 0; k != v160; ++k)
      {
        if (*(void *)v179 != v156) {
          objc_enumerationMutation(v151);
        }
        long long v94 = *(void **)(*((void *)&v178 + 1) + 8 * k);
        long long v174 = 0u;
        long long v175 = 0u;
        long long v176 = 0u;
        long long v177 = 0u;
        id v95 = v157;
        uint64_t v96 = [v95 countByEnumeratingWithState:&v174 objects:v196 count:16];
        if (v96)
        {
          uint64_t v97 = v96;
          uint64_t v98 = *(void *)v175;
LABEL_75:
          uint64_t v99 = 0;
          while (1)
          {
            if (*(void *)v175 != v98) {
              objc_enumerationMutation(v95);
            }
            long long v100 = *(void **)(*((void *)&v174 + 1) + 8 * v99);
            int v101 = [v94 uuid];
            int v102 = [v100 uuid];
            char v103 = [v101 isEqual:v102];

            if (v103) {
              break;
            }
            if (v97 == ++v99)
            {
              uint64_t v97 = [v95 countByEnumeratingWithState:&v174 objects:v196 count:16];
              if (v97) {
                goto LABEL_75;
              }
              goto LABEL_81;
            }
          }
          id v104 = v100;

          if (!v104) {
            goto LABEL_92;
          }
          [v95 removeObject:v104];
          id obja = v104;
          [v104 setObjectChangeType:2];
          long long v172 = 0u;
          long long v173 = 0u;
          long long v170 = 0u;
          long long v171 = 0u;
          id v105 = v148;
          uint64_t v106 = [v105 countByEnumeratingWithState:&v170 objects:v195 count:16];
          if (v106)
          {
            uint64_t v107 = v106;
            uint64_t v108 = *(void *)v171;
LABEL_85:
            uint64_t v109 = 0;
            while (1)
            {
              if (*(void *)v171 != v108) {
                objc_enumerationMutation(v105);
              }
              __int16 v110 = *(void **)(*((void *)&v170 + 1) + 8 * v109);
              id v111 = [v94 uuid];
              __int16 v112 = [v110 uuid];
              char v113 = [v111 isEqual:v112];

              if (v113) {
                break;
              }
              if (v107 == ++v109)
              {
                uint64_t v107 = [v105 countByEnumeratingWithState:&v170 objects:v195 count:16];
                if (v107) {
                  goto LABEL_85;
                }
                goto LABEL_91;
              }
            }
            id v118 = v110;

            if (!v118) {
              goto LABEL_101;
            }
            id v169 = 0;
            uint64_t v119 = obja;
            [(HMDBackingStoreModelObject *)v118 diff:obja differingFields:&v169];
            BOOL v120 = (HMDUserModel *)v169;
            if ([(HMDUserModel *)v120 count])
            {
              int v121 = (void *)MEMORY[0x230FBD990]();
              BOOL v122 = self;
              id v123 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
              {
                BOOL v124 = HMFGetLogIdentifier();
                *(_DWORD *)long long buf = 138543874;
                uint64_t v201 = v124;
                __int16 v202 = 2112;
                int64_t v203 = (int64_t)obja;
                __int16 v204 = 2112;
                v205 = v120;
                _os_log_impl(&dword_22F52A000, v123, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Object was changed since last push or fetch: object %@ has diff %@", buf, 0x20u);
              }
              [v163 addObject:obja];
              [(HMDBackingStoreModelObject *)v118 dumpDebug:@"CACHED: "];
              [obja dumpDebug:@"REMOTE: "];
            }
          }
          else
          {
LABEL_91:

LABEL_101:
            id v168 = 0;
            uint64_t v119 = obja;
            [v94 diff:obja differingFields:&v168];
            id v118 = (HMDUserModel *)v168;
            if ([(HMDUserModel *)v118 count])
            {
              BOOL v125 = (void *)MEMORY[0x230FBD990]();
              BOOL v126 = self;
              BOOL v127 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v127, OS_LOG_TYPE_INFO))
              {
                v128 = HMFGetLogIdentifier();
                *(_DWORD *)long long buf = 138543874;
                uint64_t v201 = v128;
                __int16 v202 = 2112;
                int64_t v203 = (int64_t)obja;
                __int16 v204 = 2112;
                v205 = v118;
                _os_log_impl(&dword_22F52A000, v127, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Change from cloud: object %@ has diff %@", buf, 0x20u);
              }
              [v163 addObject:obja];
              [v94 dumpDebug:@"LOCAL: "];
              [obja dumpDebug:@"REMOTE: "];
            }
          }
        }
        else
        {
LABEL_81:

LABEL_92:
          uint64_t v114 = (void *)MEMORY[0x230FBD990]();
          BOOL v115 = self;
          uint64_t v116 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
          {
            BOOL v117 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            uint64_t v201 = v117;
            __int16 v202 = 2112;
            int64_t v203 = (int64_t)v94;
            _os_log_impl(&dword_22F52A000, v116, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Change from cloud: local object %@ deleted", buf, 0x16u);
          }
          [v94 setObjectChangeType:3];
          [v163 addObject:v94];
          [v94 dumpDebug:@"LOCAL:"];
        }
      }
      uint64_t v160 = [v151 countByEnumeratingWithState:&v178 objects:v197 count:16];
    }
    while (v160);
  }

  long long v166 = 0u;
  long long v167 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  id v129 = v157;
  uint64_t v130 = [v129 countByEnumeratingWithState:&v164 objects:v194 count:16];
  if (v130)
  {
    uint64_t v131 = v130;
    uint64_t v132 = *(void *)v165;
    do
    {
      for (uint64_t m = 0; m != v131; ++m)
      {
        if (*(void *)v165 != v132) {
          objc_enumerationMutation(v129);
        }
        uint64_t v134 = *(void **)(*((void *)&v164 + 1) + 8 * m);
        uint64_t v135 = (void *)MEMORY[0x230FBD990]();
        uint64_t v136 = self;
        uint64_t v137 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v137, OS_LOG_TYPE_INFO))
        {
          uint64_t v138 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v201 = v138;
          __int16 v202 = 2112;
          int64_t v203 = (int64_t)v134;
          _os_log_impl(&dword_22F52A000, v137, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Change from cloud: remote object %@ added", buf, 0x16u);
        }
        [v134 setObjectChangeType:1];
        [v163 addObject:v134];
        [v134 dumpDebug:@"REMOTE: "];
      }
      uint64_t v131 = [v129 countByEnumeratingWithState:&v164 objects:v194 count:16];
    }
    while (v131);
  }

  return v163;
}

- (BOOL)_shouldDecodeMessage:(id)a3 error:(id *)a4
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v37 = [v6 remoteUserPairingIdentity];
  id v7 = [v6 remoteSenderContext];
  id v8 = [v7 mergeID];

  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v36 = self;
  id v9 = [(HMDHomeManager *)self homes];
  uint64_t v10 = [v9 countByEnumeratingWithState:&v42 objects:v51 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v43;
    while (2)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v43 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        char v15 = [v6 matchingRemoteIdentityUserForHome:v14];

        if (v15)
        {
          uint64_t v30 = (void *)MEMORY[0x230FBD990]();
          id v31 = v36;
          id v32 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v28 = HMFGetLogIdentifier();
            uint64_t v29 = [v14 name];
            *(_DWORD *)long long buf = 138543618;
            id v48 = v28;
            __int16 v49 = 2112;
            id v50 = v29;
            _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_DEBUG, "%{public}@Received home sync from owner of known home %@", buf, 0x16u);

LABEL_27:
          }
          goto LABEL_28;
        }
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v42 objects:v51 count:16];
      if (v11) {
        continue;
      }
      break;
    }
  }
  char v35 = a4;

  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v16 = [(HMDHomeManager *)v36 incomingInvitations];
  id v9 = (void *)[v16 copy];

  uint64_t v17 = [v9 countByEnumeratingWithState:&v38 objects:v46 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v39;
LABEL_11:
    uint64_t v20 = 0;
    while (1)
    {
      if (*(void *)v39 != v19) {
        objc_enumerationMutation(v9);
      }
      long long v21 = *(void **)(*((void *)&v38 + 1) + 8 * v20);
      id v22 = [v21 inviterIdentity];
      int v23 = [v22 isEqual:v37];

      __int16 v24 = [v21 inviterMergeID];
      int v25 = [v24 isEqual:v8];

      if ([v21 isAccepted] && (v23 | v25) != 0) {
        break;
      }
      if (v18 == ++v20)
      {
        uint64_t v18 = [v9 countByEnumeratingWithState:&v38 objects:v46 count:16];
        if (v18) {
          goto LABEL_11;
        }
        goto LABEL_21;
      }
    }
    uint64_t v30 = (void *)MEMORY[0x230FBD990]();
    id v31 = v36;
    id v32 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v48 = v28;
      __int16 v49 = 2112;
      id v50 = v21;
      _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_DEBUG, "%{public}@Received home sync from accepted invitation %@", buf, 0x16u);
      goto LABEL_27;
    }
LABEL_28:

    BOOL v27 = 1;
  }
  else
  {
LABEL_21:

    if (v35)
    {
      [MEMORY[0x263F087E8] hmErrorWithCode:17];
      BOOL v27 = 0;
      id *v35 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      BOOL v27 = 0;
    }
  }

  return v27;
}

- (void)_handleHomeDataSync:(id)a3
{
  uint64_t v209 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  id v171 = 0;
  BOOL v6 = [(HMDHomeManager *)self _shouldDecodeMessage:v4 error:&v171];
  id v7 = v171;
  if (v6)
  {
    id v8 = [v4 dataForKey:@"kHomeDataKey"];
    if (!v8)
    {
      uint64_t v58 = (void *)MEMORY[0x230FBD990]();
      id v59 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        id v60 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v196 = v60;
        _os_log_impl(&dword_22F52A000, v59, OS_LOG_TYPE_ERROR, "%{public}@Failed to receive home data", buf, 0xCu);
      }
      long long v61 = [v4 responseHandler];

      if (!v61) {
        goto LABEL_96;
      }
      id v62 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      int v63 = [v4 responseHandler];
      ((void (**)(void, void *, void))v63)[2](v63, v62, 0);
LABEL_95:

LABEL_96:
      goto LABEL_97;
    }
    uint64_t v160 = v5;
    uint64_t v159 = [objc_alloc(MEMORY[0x263F425C0]) initWithName:@"com.apple.homed.handle-home-sync"];
    objc_msgSend(v8, "hmd_uncompressedData");
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!v9) {
      id v9 = v8;
    }
    uint64_t v10 = (void *)MEMORY[0x263EFFA08];
    v184[0] = objc_opt_class();
    v184[1] = objc_opt_class();
    v184[2] = objc_opt_class();
    v184[3] = objc_opt_class();
    v184[4] = objc_opt_class();
    v184[5] = objc_opt_class();
    v184[6] = objc_opt_class();
    uint64_t v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:v184 count:7];
    uint64_t v12 = [v10 setWithArray:v11];

    id v170 = 0;
    id v13 = (void *)[objc_alloc(MEMORY[0x263F08928]) initForReadingFromData:v9 error:&v170];
    id v162 = v170;
    [v13 _allowDecodingCyclesInSecureMode];
    long long v157 = v13;
    long long v158 = (void *)v12;
    id v14 = [v13 decodeObjectOfClasses:v12 forKey:*MEMORY[0x263F081D0]];
    if (!v14)
    {
      char v15 = (void *)MEMORY[0x230FBD990]();
      uint64_t v16 = self;
      uint64_t v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v19 = uint64_t v18 = v8;
        *(_DWORD *)long long buf = 138543618;
        uint64_t v196 = v19;
        __int16 v197 = 2112;
        id v198 = v162;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive home from uncompressed data: %@", buf, 0x16u);

        id v8 = v18;
      }
    }
    id v161 = v9;
    id v20 = v14;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      long long v21 = v20;
    }
    else {
      long long v21 = 0;
    }
    id v22 = v21;

    uint64_t v156 = v22;
    int v23 = [v22 objectForKeyedSubscript:@"kHomeDataBlobKey"];
    [v23 _removeCorruptAccessories];
    long long v182 = @"kDataSyncResponseAckKey";
    uint64_t v183 = MEMORY[0x263EFFA88];
    uint64_t v155 = [NSDictionary dictionaryWithObjects:&v183 forKeys:&v182 count:1];
    if (!v23) {
      goto LABEL_87;
    }
    id v154 = v20;
    id v150 = v8;
    id v151 = v7;
    __int16 v24 = self;
    uint64_t v153 = v23;
    id v25 = v23;
    id v152 = v4;
    id v163 = v4;
    long long v167 = v24;
    id v169 = v25;
    long long v176 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    long long v179 = 0u;
    id obj = [(HMDHomeManager *)v167 homes];
    uint64_t v26 = [obj countByEnumeratingWithState:&v176 objects:buf count:16];
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = *(void *)v177;
      while (2)
      {
        for (uint64_t i = 0; i != v27; ++i)
        {
          if (*(void *)v177 != v28) {
            objc_enumerationMutation(obj);
          }
          uint64_t v30 = *(void **)(*((void *)&v176 + 1) + 8 * i);
          id v31 = (void *)MEMORY[0x230FBD990]();
          id v32 = v167;
          id v33 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
          {
            id v34 = HMFGetLogIdentifier();
            char v35 = [v169 uuid];
            *(_DWORD *)long long v189 = 138543874;
            long long v190 = v34;
            __int16 v191 = 2112;
            id v192 = v35;
            __int16 v193 = 2112;
            __int16 v194 = v30;
            _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_DEBUG, "%{public}@Looking for home uuid %@, currentHome:  %@", v189, 0x20u);
          }
          uint64_t v36 = [v30 uuid];
          if (v36)
          {
            id v37 = (void *)v36;
            long long v38 = [v30 uuid];
            long long v39 = [v169 uuid];
            int v40 = objc_msgSend(v38, "hmf_isEqualToUUID:", v39);

            if (v40)
            {
              long long v64 = [v30 owner];
              id v52 = [v64 pairingIdentity];

              long long v65 = [v30 owner];
              uint64_t v66 = [v65 account];
              id v43 = [v66 senderCorrelationIdentifier];

              long long v67 = (void *)MEMORY[0x230FBD990]();
              long long v68 = v32;
              id v69 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
              {
                id v70 = HMFGetLogIdentifier();
                *(_DWORD *)long long v189 = 138543618;
                long long v190 = v70;
                __int16 v191 = 2112;
                id v192 = v43;
                _os_log_impl(&dword_22F52A000, v69, OS_LOG_TYPE_DEBUG, "%{public}@Found current home account mergeID %@", v189, 0x16u);
              }
              __int16 v71 = [v30 owner];
              id v72 = [v71 account];

LABEL_44:
              char v73 = 1;
              goto LABEL_53;
            }
          }
        }
        uint64_t v27 = [obj countByEnumeratingWithState:&v176 objects:buf count:16];
        if (v27) {
          continue;
        }
        break;
      }
    }

    long long v174 = 0u;
    long long v175 = 0u;
    long long v172 = 0u;
    long long v173 = 0u;
    long long v41 = [(HMDHomeManager *)v167 incomingInvitations];
    long long v42 = (void *)[v41 copy];

    id obj = v42;
    id v43 = (id)[v42 countByEnumeratingWithState:&v172 objects:v189 count:16];
    if (v43)
    {
      uint64_t v44 = *(void *)v173;
LABEL_26:
      uint64_t v45 = 0;
      while (1)
      {
        if (*(void *)v173 != v44) {
          objc_enumerationMutation(obj);
        }
        id v46 = *(void **)(*((void *)&v172 + 1) + 8 * v45);
        uint64_t v47 = objc_msgSend(v46, "homeUUID", v150);
        if (v47)
        {
          id v48 = (void *)v47;
          __int16 v49 = [v46 homeUUID];
          id v50 = [v169 uuid];
          int v51 = objc_msgSend(v49, "hmf_isEqualToUUID:", v50);

          if (v51) {
            break;
          }
        }
        if (v43 == (id)++v45)
        {
          id v43 = (id)[obj countByEnumeratingWithState:&v172 objects:v189 count:16];
          if (v43) {
            goto LABEL_26;
          }
          goto LABEL_33;
        }
      }
      int v74 = [v46 isAccepted];
      __int16 v75 = (void *)MEMORY[0x230FBD990]();
      uint64_t v76 = v167;
      uint64_t v77 = HMFGetOSLogHandle();
      BOOL v78 = os_log_type_enabled(v77, OS_LOG_TYPE_INFO);
      if (v74)
      {
        if (v78)
        {
          uint64_t v79 = HMFGetLogIdentifier();
          *(_DWORD *)long long v185 = 138543618;
          long long v186 = v79;
          __int16 v187 = 2112;
          long long v188 = v46;
          _os_log_impl(&dword_22F52A000, v77, OS_LOG_TYPE_INFO, "%{public}@Received home sync for invitation: %@", v185, 0x16u);
        }
        id v52 = [v46 inviterIdentity];
        id v72 = [v46 inviterAccount];
        id v43 = [v46 inviterMergeID];
        goto LABEL_44;
      }
      if (v78)
      {
        id v80 = HMFGetLogIdentifier();
        *(_DWORD *)long long v185 = 138543618;
        long long v186 = v80;
        __int16 v187 = 2112;
        long long v188 = v46;
        _os_log_impl(&dword_22F52A000, v77, OS_LOG_TYPE_INFO, "%{public}@Received home sync for unaccepted invitation: %@", v185, 0x16u);
      }
      id v52 = 0;
      id v43 = 0;
    }
    else
    {
LABEL_33:
      id v52 = 0;
    }
    id v72 = 0;
    char v73 = 0;
LABEL_53:

    id v81 = v52;
    id v82 = v43;
    id v83 = v72;
    id v84 = (void *)MEMORY[0x230FBD990]();
    char v85 = v167;
    id v86 = HMFGetOSLogHandle();
    long long v87 = v86;
    if (v73)
    {
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
      {
        id v88 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138544130;
        uint64_t v196 = v88;
        __int16 v197 = 2112;
        id v198 = v163;
        __int16 v199 = 2112;
        id v200 = v81;
        __int16 v201 = 2112;
        id v202 = v82;
        _os_log_impl(&dword_22F52A000, v87, OS_LOG_TYPE_DEBUG, "%{public}@Found owner identity, checking message: %@, against pairing identity: %@, mergeID: %@", buf, 0x2Au);
      }
      id v89 = [v163 remoteSenderContext];
      long long v90 = [v89 mergeID];
      int v91 = [v82 isEqualToString:v90];

      uint64_t v92 = [v81 identifier];
      id v93 = [v163 remoteSenderContext];
      long long v94 = [v93 pairingIdentityIdentifier];
      int v95 = v91 | [v92 isEqualToString:v94];

      if ([v83 isAuthenticated])
      {
        uint64_t v96 = [v163 remoteSourceDevice];
        uint64_t v97 = [v96 account];
        int v98 = [v83 isEqual:v97];

        if ((v98 & v95 & 1) == 0)
        {
LABEL_58:
          uint64_t v99 = (void *)MEMORY[0x230FBD990]();
          long long v100 = v85;
          int v101 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            int v102 = obja = v81;
            [v83 isAuthenticated];
            long long v164 = HMFBooleanToString();
            [v163 remoteSourceDevice];
            char v103 = v168 = v99;
            id v104 = [v103 account];
            id v105 = HMFBooleanToString();
            *(_DWORD *)long long buf = 138544898;
            uint64_t v196 = v102;
            __int16 v197 = 2112;
            id v198 = v169;
            __int16 v199 = 2112;
            id v200 = v163;
            __int16 v201 = 2112;
            id v202 = v83;
            __int16 v203 = 2112;
            __int16 v204 = v164;
            __int16 v205 = 2112;
            __int16 v206 = v104;
            __int16 v207 = 2112;
            v208 = v105;
            _os_log_impl(&dword_22F52A000, v101, OS_LOG_TYPE_ERROR, "%{public}@Received unexpected home data sync for home: %@, message: %@, ownerAccount: %@, ownerAccount.isAuthenticated: %@, sourceDevice.account: %@, isValidOwnerAccountIdentity: %@", buf, 0x48u);

            uint64_t v99 = v168;
            id v81 = obja;
          }

          id v106 = [MEMORY[0x263F087E8] hmErrorWithCode:17];
          char v107 = 0;
          id v8 = v150;
          goto LABEL_68;
        }
      }
      else if ((v95 & 1) == 0)
      {
        goto LABEL_58;
      }
      uint64_t v109 = (void *)MEMORY[0x230FBD990]();
      __int16 v110 = v85;
      id v111 = HMFGetOSLogHandle();
      id v8 = v150;
      if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
      {
        __int16 v112 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v196 = v112;
        __int16 v197 = 2112;
        id v198 = v163;
        _os_log_impl(&dword_22F52A000, v111, OS_LOG_TYPE_DEBUG, "%{public}@Accepting home data sync: %@", buf, 0x16u);
      }
      id v106 = 0;
      char v107 = 1;
    }
    else
    {
      id v8 = v150;
      if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
      {
        uint64_t v108 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v196 = v108;
        __int16 v197 = 2112;
        id v198 = v169;
        _os_log_impl(&dword_22F52A000, v87, OS_LOG_TYPE_ERROR, "%{public}@Unable to determine current owner of home: %@", buf, 0x16u);
      }
      id v106 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      char v107 = 0;
    }
LABEL_68:

    char v113 = (HMDSharedHomeModel *)v106;
    if (v107)
    {
      id v7 = v151;
      id v4 = v152;
      if ([v169 isOwnerUser])
      {
        uint64_t v114 = (void *)MEMORY[0x230FBD990]();
        BOOL v115 = v85;
        uint64_t v116 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
        {
          BOOL v117 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v196 = v117;
          __int16 v197 = 2112;
          id v198 = v169;
          _os_log_impl(&dword_22F52A000, v116, OS_LOG_TYPE_INFO, "%{public}@Dropping remote home sync to owner: %@", buf, 0x16u);
        }
        id v118 = [v163 responseHandler];

        uint64_t v5 = v160;
        int v63 = (void (**)(void, void, void))v161;
        int v23 = v153;
        uint64_t v119 = (void *)v155;
        if (!v118) {
          goto LABEL_92;
        }
        BOOL v120 = [v163 responseHandler];
        v120[2](v120, 0, v155);
LABEL_91:

LABEL_92:
        id v20 = v154;
        goto LABEL_93;
      }
      uint64_t v130 = [v169 uuid];
      uint64_t v131 = [(HMDHomeManager *)v85 _homeWithUUID:v130];

      uint64_t v132 = [v163 destination];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v133 = v132;
      }
      else {
        uint64_t v133 = 0;
      }
      id v134 = v133;

      uint64_t v135 = [v134 device];

      uint64_t v136 = [v135 version];

      LODWORD(v135) = [(HMDHomeManager *)v85 _shouldHandleHomeDataSync:v131 remoteHome:v169 sourceDeviceVersion:v136];
      int v23 = v153;
      id v20 = v154;
      if (!v135)
      {
LABEL_87:
        BOOL v141 = objc_msgSend(v4, "responseHandler", v150);

        uint64_t v5 = v160;
        int v63 = (void (**)(void, void, void))v161;
        uint64_t v119 = (void *)v155;
        if (!v141)
        {
LABEL_94:

          id v62 = (void *)v159;
          goto LABEL_95;
        }
        char v113 = [v4 responseHandler];
        (*(void (**)(HMDSharedHomeModel *, void, uint64_t))&v113->super._bsoDataVersionOverride)(v113, 0, v155);
LABEL_93:

        goto LABEL_94;
      }
      if ([v169 isOwnerUser])
      {
        uint64_t v137 = (void *)MEMORY[0x230FBD990]();
        uint64_t v138 = v85;
        long long v139 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
        {
          uint64_t v140 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v196 = v140;
          __int16 v197 = 2112;
          id v198 = v169;
          _os_log_impl(&dword_22F52A000, v139, OS_LOG_TYPE_ERROR, "%{public}@Received unexpected home data sync for owned home %@", buf, 0x16u);
        }
        int v23 = v153;
        id v20 = v154;
        goto LABEL_87;
      }
      uint64_t v143 = [HMDSharedHomeModel alloc];
      id v144 = [v169 uuid];
      id v145 = [(HMDHomeManager *)v85 uuid];
      char v113 = [(HMDBackingStoreModelObject *)v143 initWithObjectChangeType:1 uuid:v144 parentUUID:v145];

      [(HMDSharedHomeModel *)v113 setHomeData:v161];
      uint64_t v146 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v169, "configurationVersion"));
      [(HMDSharedHomeModel *)v113 setConfigurationVersion:v146];

      int64_t v147 = [(HMDHomeManager *)v85 homes];
      uint64_t v148 = [v147 count];

      if (!v148)
      {
        uint64_t v149 = [v169 uuid];
        [(HMDHomeManager *)v85 setPrimaryHomeUUID:v149];
      }
      -[HMDHomeManager transactionObjectUpdated:newValues:message:](v85, "transactionObjectUpdated:newValues:message:", 0, v113, v163, v150);
      uint64_t v5 = v160;
      int v63 = (void (**)(void, void, void))v161;
    }
    else
    {
      int v121 = [(HMDHomeManager *)v85 uuidsOfRemovedHomes];
      BOOL v122 = [v169 uuid];
      int v123 = [v121 containsObject:v122];

      id v7 = v151;
      id v4 = v152;
      uint64_t v5 = v160;
      if (v123)
      {
        BOOL v124 = (void *)MEMORY[0x230FBD990]();
        BOOL v125 = v85;
        BOOL v126 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v126, OS_LOG_TYPE_INFO))
        {
          BOOL v127 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v196 = v127;
          __int16 v197 = 2112;
          id v198 = v169;
          _os_log_impl(&dword_22F52A000, v126, OS_LOG_TYPE_INFO, "%{public}@Rejecting home data sync, home was removed: %@", buf, 0x16u);
        }
        v128 = [v163 responseHandler];

        int v63 = (void (**)(void, void, void))v161;
        int v23 = v153;
        uint64_t v119 = (void *)v155;
        if (!v128) {
          goto LABEL_92;
        }
        BOOL v120 = [v163 responseHandler];
        long long v180 = @"kDataSyncResponseNAckKey";
        uint64_t v181 = MEMORY[0x263EFFA88];
        id v129 = [NSDictionary dictionaryWithObjects:&v181 forKeys:&v180 count:1];
        ((void (**)(void, void, void *))v120)[2](v120, 0, v129);

        goto LABEL_91;
      }
      uint64_t v142 = [v163 responseHandler];

      if (v142)
      {
        BOOL v120 = [v163 responseHandler];
        ((void (**)(void, HMDSharedHomeModel *, void))v120)[2](v120, v113, 0);
        int v63 = (void (**)(void, void, void))v161;
        int v23 = v153;
        uint64_t v119 = (void *)v155;
        goto LABEL_91;
      }
      int v63 = (void (**)(void, void, void))v161;
    }
    int v23 = v153;
    id v20 = v154;
    uint64_t v119 = (void *)v155;
    goto LABEL_93;
  }
  id v53 = (void *)MEMORY[0x230FBD990]();
  uint64_t v54 = self;
  uint64_t v55 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
  {
    uint64_t v56 = HMFGetLogIdentifier();
    uint64_t v57 = [v4 remoteUserPairingIdentity];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v196 = v56;
    __int16 v197 = 2112;
    id v198 = v57;
    _os_log_impl(&dword_22F52A000, v55, OS_LOG_TYPE_ERROR, "%{public}@Rejecting home data sync - Sync not from trusted account %@", buf, 0x16u);
  }
  [v4 respondWithError:v7];
LABEL_97:
}

- (BOOL)_shouldHandleHomeDataSync:(id)a3 remoteHome:(id)a4 sourceDeviceVersion:(id)a5
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v7 = a3;
  id v8 = a4;
  id v9 = a5;
  if (isWatch())
  {
    uint64_t v10 = (void *)MEMORY[0x230FBD990]();
    uint64_t v11 = HMFGetOSLogHandle();
    BOOL v12 = 1;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v13 = HMFGetLogIdentifier();
      int v30 = 138543362;
      id v31 = v13;
      id v14 = "%{public}@Adding or updating home on the watch";
LABEL_12:
      long long v21 = v11;
      uint32_t v22 = 12;
LABEL_13:
      _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, v14, (uint8_t *)&v30, v22);

      goto LABEL_30;
    }
    goto LABEL_30;
  }
  if (v7)
  {
    char v15 = [v7 sharedHomeUpdateHandler];
    if ([v15 pendingRequestDataFromResident])
    {
      uint64_t v16 = [v7 sharedHomeSourceVersion];
      int v17 = [v9 isGreaterThanVersion:v16];

      if (v17)
      {
        uint64_t v18 = [v8 configurationVersion];
        if (v18 < [v7 configurationVersion])
        {
          uint64_t v10 = (void *)MEMORY[0x230FBD990]();
          uint64_t v11 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v19 = HMFGetLogIdentifier();
            int v30 = 138543874;
            id v31 = v19;
            __int16 v32 = 2048;
            uint64_t v33 = [v7 configurationVersion];
            __int16 v34 = 2048;
            uint64_t v35 = [v8 configurationVersion];
            id v20 = "%{public}@Pending request data from resident is active, Local home is at version %ld and incoming home"
                  " version is at %ld, discarding changes and sending ack";
LABEL_24:
            uint64_t v27 = v11;
            uint32_t v28 = 32;
            goto LABEL_25;
          }
          goto LABEL_26;
        }
        goto LABEL_16;
      }
    }
    else
    {
    }
    uint64_t v23 = [v8 configurationVersion];
    if (v23 <= [v7 configurationVersion])
    {
      uint64_t v10 = (void *)MEMORY[0x230FBD990]();
      uint64_t v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = HMFGetLogIdentifier();
        int v30 = 138543874;
        id v31 = v19;
        __int16 v32 = 2048;
        uint64_t v33 = [v7 configurationVersion];
        __int16 v34 = 2048;
        uint64_t v35 = [v8 configurationVersion];
        id v20 = "%{public}@Local home is at version %ld and incoming home version is at %ld, discarding changes and sending ack";
        goto LABEL_24;
      }
LABEL_26:
      BOOL v12 = 0;
      goto LABEL_30;
    }
LABEL_16:
    if (v9)
    {
      __int16 v24 = [[HMDHomeKitVersion alloc] initWithVersionString:@"3.1"];
      if ([v9 isAtLeastVersion:v24] && objc_msgSend(v7, "expectedConfigurationVersion"))
      {
        uint64_t v25 = [v7 expectedConfigurationVersion];
        uint64_t v26 = [v8 configurationVersion];

        if (v25 > v26)
        {
          uint64_t v10 = (void *)MEMORY[0x230FBD990]();
          uint64_t v11 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v19 = HMFGetLogIdentifier();
            int v30 = 138544130;
            id v31 = v19;
            __int16 v32 = 2048;
            uint64_t v33 = [v7 configurationVersion];
            __int16 v34 = 2048;
            uint64_t v35 = [v7 expectedConfigurationVersion];
            __int16 v36 = 2048;
            uint64_t v37 = [v8 configurationVersion];
            id v20 = "%{public}@Local is config version is at %ld and expected config version %ld and incoming home config v"
                  "ersion is at %ld, discarding changes and sending ack";
            uint64_t v27 = v11;
            uint32_t v28 = 42;
LABEL_25:
            _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_INFO, v20, (uint8_t *)&v30, v28);

            goto LABEL_26;
          }
          goto LABEL_26;
        }
      }
      else
      {
      }
    }
    uint64_t v10 = (void *)MEMORY[0x230FBD990]();
    uint64_t v11 = HMFGetOSLogHandle();
    BOOL v12 = 1;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
      goto LABEL_30;
    }
    id v13 = HMFGetLogIdentifier();
    int v30 = 138544130;
    id v31 = v13;
    __int16 v32 = 2048;
    uint64_t v33 = [v7 configurationVersion];
    __int16 v34 = 2048;
    uint64_t v35 = [v7 expectedConfigurationVersion];
    __int16 v36 = 2048;
    uint64_t v37 = [v8 configurationVersion];
    id v14 = "%{public}@Local is config version is at %ld and expected config version %ld and incoming home config version i"
          "s at %ld, accepting new changes";
    BOOL v12 = 1;
    long long v21 = v11;
    uint32_t v22 = 42;
    goto LABEL_13;
  }
  uint64_t v10 = (void *)MEMORY[0x230FBD990]();
  uint64_t v11 = HMFGetOSLogHandle();
  BOOL v12 = 1;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    int v30 = 138543362;
    id v31 = v13;
    id v14 = "%{public}@Receiving a new shared home";
    goto LABEL_12;
  }
LABEL_30:

  return v12;
}

- (void)fragmentationStream:(id)a3 didReceiveData:(id)a4 transactionIdentifier:(unsigned __int16)a5 error:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a6;
  if (v11)
  {
    id v13 = [(HMDHomeManager *)self workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __81__HMDHomeManager_fragmentationStream_didReceiveData_transactionIdentifier_error___block_invoke;
    block[3] = &unk_264A2B5B0;
    void block[4] = self;
    id v15 = v10;
    id v16 = v11;
    unsigned __int16 v18 = a5;
    id v17 = v12;
    dispatch_async(v13, block);
  }
}

uint64_t __81__HMDHomeManager_fragmentationStream_didReceiveData_transactionIdentifier_error___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fragmentationStream:*(void *)(a1 + 40) didReceiveData:*(void *)(a1 + 48) transactionIdentifier:*(unsigned __int16 *)(a1 + 64) error:*(void *)(a1 + 56)];
}

- (void)fragmentationStream:(id)a3 didCloseWithError:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __56__HMDHomeManager_fragmentationStream_didCloseWithError___block_invoke;
  block[3] = &unk_264A2F2F8;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t __56__HMDHomeManager_fragmentationStream_didCloseWithError___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fragmentationStream:*(void *)(a1 + 40) didCloseWithError:*(void *)(a1 + 48)];
}

- (void)processSharedHomeModelRemoved:(id)a3 message:(id)a4
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 uuid];
  if (v8)
  {
    id v9 = [(HMDHomeManager *)self _homeWithUUID:v8];
    id v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = HMFGetOSLogHandle();
    id v12 = v11;
    if (v9)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        id v13 = HMFGetLogIdentifier();
        int v20 = 138543618;
        long long v21 = v13;
        __int16 v22 = 2112;
        uint64_t v23 = v9;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Attempting to remove home %@ since we are no longer part of the home", (uint8_t *)&v20, 0x16u);
      }
      [(HMDHomeManager *)self _removeHome:v9 withMessage:v7 saveToStore:1 notifyUsers:0 shouldRemovePairings:0];
      goto LABEL_13;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = HMFGetLogIdentifier();
      id v17 = [v8 UUIDString];
      int v20 = 138543618;
      long long v21 = v16;
      __int16 v22 = 2112;
      uint64_t v23 = v17;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Home %@ not found for user", (uint8_t *)&v20, 0x16u);
    }
    unsigned __int16 v18 = [v7 responseHandler];

    if (!v18) {
      goto LABEL_13;
    }
    id v15 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
    uint64_t v19 = [v7 responseHandler];
    v19[2](v19, v15, 0);

LABEL_12:
LABEL_13:

    goto LABEL_14;
  }
  id v14 = [v7 responseHandler];

  if (v14)
  {
    id v9 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:20 userInfo:0];
    id v15 = [v7 responseHandler];
    ((void (**)(void, void *, void))v15)[2](v15, v9, 0);
    goto LABEL_12;
  }
LABEL_14:
}

- (void)_handleUserRemoved:(id)a3
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 uuidForKey:@"kHomeUUID"];
  id v6 = [(HMDHomeManager *)self _homeWithUUID:v5];
  if (v6)
  {
    id v7 = v4;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v8 = v7;
    }
    else {
      id v8 = 0;
    }
    id v9 = v8;

    if ([v7 isRemote] && objc_msgSend(v9, "restriction") != 4)
    {
      id v10 = __isUserInMessagePartOfHome(self, v6, v7);
      if (([v10 isOwner] & 1) == 0)
      {
        id v13 = (void *)MEMORY[0x230FBD990]();
        id v14 = self;
        id v15 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          id v16 = HMFGetLogIdentifier();
          int v20 = 138543618;
          long long v21 = v16;
          __int16 v22 = 2112;
          id v23 = v7;
          _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Only owner can remove homes: %@", (uint8_t *)&v20, 0x16u);
        }
        id v17 = [v7 responseHandler];

        if (v17)
        {
          unsigned __int16 v18 = [v7 responseHandler];
          uint64_t v19 = [MEMORY[0x263F087E8] hmErrorWithCode:17];
          ((void (**)(void, void *, void))v18)[2](v18, v19, 0);
        }
        goto LABEL_17;
      }
    }
    [(HMDHomeManager *)self dmHandleRequestRemoveHome:v7];
LABEL_17:

    goto LABEL_18;
  }
  id v11 = [v4 responseHandler];

  if (v11)
  {
    id v9 = [v4 responseHandler];
    id v12 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    (*((void (**)(id, void *, void))v9 + 2))(v9, v12, 0);

    goto LABEL_17;
  }
LABEL_18:
}

- (void)_handleResetHome:(id)a3
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 uuidForKey:@"kHomeUUID"];
  if (v5)
  {
    uint64_t v6 = [(HMDHomeManager *)self _homeWithUUID:v5];
    if (v6)
    {
      id v7 = (void *)v6;
      id v8 = v4;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v9 = v8;
      }
      else {
        id v9 = 0;
      }
      id v10 = v9;

      if (![v8 isRemote] || objc_msgSend(v10, "restriction") == 4) {
        goto LABEL_10;
      }
      id v11 = __isUserInMessagePartOfHome(self, v7, v8);
      if ([v11 isOwner])
      {

LABEL_10:
        id v12 = (void *)MEMORY[0x230FBD990]();
        id v13 = self;
        id v14 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          id v15 = HMFGetLogIdentifier();
          int v36 = 138543618;
          uint64_t v37 = v15;
          __int16 v38 = 2112;
          id v39 = v7;
          _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Received request to reset configuration for home %@", (uint8_t *)&v36, 0x16u);
        }
        id v16 = (void *)MEMORY[0x230FBD990]();
        id v17 = v13;
        unsigned __int16 v18 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          uint64_t v19 = HMFGetLogIdentifier();
          int v36 = 138543618;
          uint64_t v37 = v19;
          __int16 v38 = 2112;
          id v39 = v7;
          _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Attempting to reset home %@ by removing it", (uint8_t *)&v36, 0x16u);
        }
        [(HMDHomeManager *)v17 _removeHome:v7 withMessage:v8 saveToStore:1 notifyUsers:1 shouldRemovePairings:0];
        goto LABEL_21;
      }
      uint64_t v29 = (void *)MEMORY[0x230FBD990]();
      int v30 = self;
      id v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        __int16 v32 = HMFGetLogIdentifier();
        int v36 = 138543618;
        uint64_t v37 = v32;
        __int16 v38 = 2112;
        id v39 = v8;
        _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_ERROR, "%{public}@Only owner can remove homes: %@", (uint8_t *)&v36, 0x16u);
      }
      uint64_t v33 = [v8 responseHandler];

      if (v33)
      {
        __int16 v34 = [v8 responseHandler];
        uint64_t v35 = [MEMORY[0x263F087E8] hmErrorWithCode:17];
        ((void (**)(void, void *, void))v34)[2](v34, v35, 0);
      }
    }
    else
    {
      uint64_t v24 = (void *)MEMORY[0x230FBD990]();
      uint64_t v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        uint64_t v26 = HMFGetLogIdentifier();
        uint64_t v27 = [v5 UUIDString];
        int v36 = 138543618;
        uint64_t v37 = v26;
        __int16 v38 = 2112;
        id v39 = v27;
        _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_INFO, "%{public}@Cannot reset home %@ since it could not be found", (uint8_t *)&v36, 0x16u);
      }
      id v10 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
      uint32_t v28 = [v4 responseHandler];
      ((void (**)(void, id, void))v28)[2](v28, v10, 0);

      id v7 = 0;
    }
  }
  else
  {
    int v20 = (void *)MEMORY[0x230FBD990]();
    long long v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v22 = HMFGetLogIdentifier();
      id v23 = [v4 name];
      int v36 = 138543618;
      uint64_t v37 = v22;
      __int16 v38 = 2112;
      id v39 = v23;
      _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Bad request for message %@", (uint8_t *)&v36, 0x16u);
    }
    id v7 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:3 userInfo:0];
    id v10 = [v4 responseHandler];
    (*((void (**)(id, void *, void))v10 + 2))(v10, v7, 0);
  }
LABEL_21:
}

- (id)homeUserFromMessage:(id)a3 home:(id)a4
{
  return __isUserInMessagePartOfHome(self, a4, a3);
}

- (void)_removeAllUsersOfHome:(id)a3
{
  v76[1] = *MEMORY[0x263EF8340];
  __int16 v75 = @"kHomeUUID";
  id v50 = a3;
  id v4 = [v50 uuid];
  uint64_t v5 = [v4 UUIDString];
  v76[0] = v5;
  int v51 = [NSDictionary dictionaryWithObjects:v76 forKeys:&v75 count:1];

  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id obj = [(HMDHomeManager *)self associatedWatchPeers];
  uint64_t v6 = [obj countByEnumeratingWithState:&v62 objects:v74 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v63;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v63 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v62 + 1) + 8 * i);
        id v10 = (void *)MEMORY[0x230FBD990]();
        id v11 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          id v12 = HMFGetLogIdentifier();
          id v13 = [v50 name];
          *(_DWORD *)long long buf = 138543874;
          id v69 = v12;
          __int16 v70 = 2112;
          __int16 v71 = v13;
          __int16 v72 = 2112;
          char v73 = v9;
          _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending the remove home for %@ to watch %@", buf, 0x20u);
        }
        id v14 = +[HMDDevice deviceWithDestination:v9];
        id v15 = [HMDRemoteDeviceMessageDestination alloc];
        id v16 = [(HMDHomeManager *)self uuid];
        id v17 = [(HMDRemoteDeviceMessageDestination *)v15 initWithTarget:v16 device:v14];

        unsigned __int16 v18 = [MEMORY[0x263F42568] internalMessageWithName:@"kUserResetHomeConfigRequestKey" destination:v17 messagePayload:v51];
        uint64_t v19 = [(HMDHomeManager *)self messageDispatcher];
        [v19 sendMessage:v18 completionHandler:0];
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v62 objects:v74 count:16];
    }
    while (v6);
  }

  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  int v20 = [v50 users];
  uint64_t v21 = [v20 countByEnumeratingWithState:&v58 objects:v67 count:16];
  if (v21)
  {
    uint64_t v22 = *(void *)v59;
    do
    {
      for (uint64_t j = 0; j != v21; ++j)
      {
        if (*(void *)v59 != v22) {
          objc_enumerationMutation(v20);
        }
        uint64_t v24 = [*(id *)(*((void *)&v58 + 1) + 8 * j) account];
        uint64_t v25 = [v24 senderCorrelationIdentifier];
        [(HMDHomeManager *)self _trackRemovedHomeUserMergeId:v25];
      }
      uint64_t v21 = [v20 countByEnumeratingWithState:&v58 objects:v67 count:16];
    }
    while (v21);
  }

  if ([v50 isOwnerUser])
  {
    uint64_t v26 = [v50 users];
    uint64_t v27 = (void *)[v26 copy];

    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    id v47 = v27;
    uint64_t v28 = [v47 countByEnumeratingWithState:&v54 objects:v66 count:16];
    if (v28)
    {
      id obja = *(id *)v55;
      *(void *)&long long v29 = 138543874;
      long long v46 = v29;
      do
      {
        for (uint64_t k = 0; k != v28; ++k)
        {
          if (*(id *)v55 != obja) {
            objc_enumerationMutation(v47);
          }
          id v31 = *(void **)(*((void *)&v54 + 1) + 8 * k);
          __int16 v32 = objc_msgSend(v50, "currentUser", v46);
          char v33 = [v31 isEqual:v32];

          if ((v33 & 1) == 0)
          {
            objc_opt_class();
            char isKindOfClass = objc_opt_isKindOfClass();
            uint64_t v35 = [(HMDHomeManager *)self uuid];
            int v36 = [v31 userID];
            if (isKindOfClass)
            {
              uint64_t v37 = [v31 userID];
              __int16 v38 = +[HMDMessageDispatcher destinationWithTarget:v35 userID:v36 destination:v37 multicast:0];
            }
            else
            {
              __int16 v38 = +[HMDMessageDispatcher destinationWithTarget:v35 userID:v36 destination:0 multicast:0];
            }

            if (v38)
            {
              id v39 = +[HMDRemoteMessage secureMessageWithName:@"kUserResetHomeConfigRequestKey" destination:v38 messagePayload:v51];
              objc_initWeak((id *)buf, self);
              v52[0] = MEMORY[0x263EF8330];
              v52[1] = 3221225472;
              v52[2] = __40__HMDHomeManager__removeAllUsersOfHome___block_invoke;
              v52[3] = &unk_264A2D420;
              void v52[4] = v31;
              objc_copyWeak(&v53, (id *)buf);
              [v39 setResponseHandler:v52];
              uint64_t v40 = [(HMDHomeManager *)self messageDispatcher];
              [v40 sendMessage:v39 completionHandler:0];

              objc_destroyWeak(&v53);
              objc_destroyWeak((id *)buf);
            }
            else
            {
              long long v41 = (void *)MEMORY[0x230FBD990]();
              long long v42 = self;
              id v43 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v44 = HMFGetLogIdentifier();
                uint64_t v45 = [v31 userID];
                *(_DWORD *)long long buf = v46;
                id v69 = v44;
                __int16 v70 = 2112;
                __int16 v71 = v31;
                __int16 v72 = 2112;
                char v73 = v45;
                _os_log_impl(&dword_22F52A000, v43, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot notify user %@ of home reset: could not create message destination for userID: %@", buf, 0x20u);
              }
            }
          }
        }
        uint64_t v28 = [v47 countByEnumeratingWithState:&v54 objects:v66 count:16];
      }
      while (v28);
    }
  }
}

void __40__HMDHomeManager__removeAllUsersOfHome___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = HMFGetLogIdentifier();
    id v10 = [*(id *)(a1 + 32) home];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v19 = v9;
    __int16 v20 = 2112;
    uint64_t v21 = v10;
    __int16 v22 = 2112;
    id v23 = v5;
    _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Reset home for user %@ with error: %@", buf, 0x20u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && [*(id *)(a1 + 32) isRemoteGateway])
  {
    id v12 = [WeakRetained workQueue];
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    v15[2] = __40__HMDHomeManager__removeAllUsersOfHome___block_invoke_945;
    v15[3] = &unk_264A2F820;
    id v13 = WeakRetained;
    uint64_t v14 = *(void *)(a1 + 32);
    id v16 = v13;
    uint64_t v17 = v14;
    dispatch_async(v12, v15);
  }
}

void __40__HMDHomeManager__removeAllUsersOfHome___block_invoke_945(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) userID];
  id v3 = [*(id *)(a1 + 40) home];
  [v2 _removeFromAssociatedPeers:v4 home:v3];
}

- (void)_sendUserRemoved:(id)a3 fromHome:(id)a4 pairingUsername:(id)a5 pushToCloud:(BOOL)a6 completionHandler:(id)a7
{
  location[2] = *(id *)MEMORY[0x263EF8340];
  id v11 = a3;
  id v12 = a4;
  id v32 = a5;
  id v34 = a7;
  id v13 = (void *)MEMORY[0x263F42568];
  long long v41 = @"kHomeUUID";
  uint64_t v14 = [v12 uuid];
  id v15 = [v14 UUIDString];
  long long v42 = v15;
  id v16 = [NSDictionary dictionaryWithObjects:&v42 forKeys:&v41 count:1];
  char v33 = [v13 internalMessageWithName:@"kUserRemovedRequestKey" messagePayload:v16];

  if ([v11 isRemoteGateway])
  {
    uint64_t v17 = objc_msgSend(v11, "userID", v32, v33);
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v45 = @"kDeviceClassTypeKey";
  long long v46 = @"kDeviceClassTypeTransient";
  v47[0] = @"kRequiredCapabilitiesKey";
  unsigned __int16 v18 = NSDictionary;
  uint64_t v19 = @"kDeviceClassTypeTransient";
  __int16 v20 = [v18 dictionaryWithObjects:&v46 forKeys:&v45 count:1];
  v47[1] = @"kRequestedCapabilitiesKey";
  location[0] = v20;
  v43[0] = @"kHomedVersionKey";
  v43[1] = @"kHomeKitVersionStringKey";
  v44[0] = homedVersion;
  id v21 = (id)homedVersion;
  __int16 v22 = +[HMDHomeKitVersion currentVersion];
  id v23 = [v22 versionString];
  v44[1] = v23;
  uint64_t v24 = [NSDictionary dictionaryWithObjects:v44 forKeys:v43 count:2];
  location[1] = v24;
  uint64_t v25 = [NSDictionary dictionaryWithObjects:location forKeys:v47 count:2];

  objc_initWeak(location, self);
  uint64_t v26 = [v11 userID];
  uint64_t v27 = [(HMDHomeManager *)self workQueue];
  v35[0] = MEMORY[0x263EF8330];
  v35[1] = 3221225472;
  v35[2] = __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke;
  v35[3] = &unk_264A2B588;
  objc_copyWeak(&v40, location);
  id v28 = v34;
  id v39 = v28;
  id v29 = v12;
  id v36 = v29;
  id v30 = v11;
  id v37 = v30;
  id v31 = v33;
  id v38 = v31;
  [(HMDHomeManager *)self electDeviceForUser:v26 destination:v17 deviceCapabilities:v25 queue:v27 completionHandler:v35];

  objc_destroyWeak(&v40);
  objc_destroyWeak(location);
}

void __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (v7)
    {
      id v11 = (void *)MEMORY[0x230FBD990]();
      id v12 = WeakRetained;
      id v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = HMFGetLogIdentifier();
        uint64_t v15 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138543618;
        char v33 = v14;
        __int16 v34 = 2112;
        uint64_t v35 = v15;
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to elect device to send request to remove user from home: %@", buf, 0x16u);
      }
LABEL_14:

      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      goto LABEL_15;
    }
    if (([*(id *)(a1 + 32) containsRemovedUser:*(void *)(a1 + 40)] & 1) == 0)
    {
      id v11 = (void *)MEMORY[0x230FBD990]();
      id v12 = WeakRetained;
      id v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v24 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        char v33 = v24;
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Skipping send remove user message due to the user being removed from removed user list", buf, 0xCu);
      }
      goto LABEL_14;
    }
    uint64_t v27 = [WeakRetained messageDispatcher];
    uint64_t v25 = *(void *)(a1 + 48);
    uint64_t v26 = [WeakRetained uuid];
    id v21 = [*(id *)(a1 + 40) userID];
    __int16 v22 = [v8 destination];
    id v23 = [WeakRetained workQueue];
    v28[0] = MEMORY[0x263EF8330];
    v28[1] = 3221225472;
    v28[2] = __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke_942;
    void v28[3] = &unk_264A2B560;
    objc_copyWeak(&v31, (id *)(a1 + 64));
    id v29 = *(id *)(a1 + 40);
    id v30 = *(id *)(a1 + 56);
    [v27 sendSecureMessage:v25 target:v26 userID:v21 destination:v22 responseQueue:v23 responseHandler:v28];

    objc_destroyWeak(&v31);
  }
  else
  {
    id v16 = (void *)MEMORY[0x230FBD990]();
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      unsigned __int16 v18 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      char v33 = v18;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Lost reference to home manager while electing a device to remove user", buf, 0xCu);
    }
    uint64_t v19 = *(void *)(a1 + 56);
    if (v19)
    {
      __int16 v20 = [MEMORY[0x263F087E8] hmfErrorWithCode:8];
      (*(void (**)(uint64_t, void *, id))(v19 + 16))(v19, v20, v9);
    }
  }
LABEL_15:
}

void __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke_942(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = WeakRetained;
    id v10 = HMFGetOSLogHandle();
    id v11 = v10;
    if (v5)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v12 = HMFGetLogIdentifier();
        int v21 = 138543618;
        __int16 v22 = v12;
        __int16 v23 = 2112;
        id v24 = v5;
        id v13 = "%{public}@User removed message responded with error: %@";
        uint64_t v14 = v11;
        os_log_type_t v15 = OS_LOG_TYPE_ERROR;
LABEL_10:
        _os_log_impl(&dword_22F52A000, v14, v15, v13, (uint8_t *)&v21, 0x16u);
      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      uint64_t v19 = *(void **)(a1 + 32);
      int v21 = 138543618;
      __int16 v22 = v12;
      __int16 v23 = 2112;
      id v24 = v19;
      id v13 = "%{public}@Successfully removed user: %@";
      uint64_t v14 = v11;
      os_log_type_t v15 = OS_LOG_TYPE_INFO;
      goto LABEL_10;
    }

    (*(void (**)(void, id, id, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v5, v6, v20);
    goto LABEL_12;
  }
  id v16 = (void *)MEMORY[0x230FBD990]();
  uint64_t v17 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    unsigned __int16 v18 = HMFGetLogIdentifier();
    int v21 = 138543362;
    __int16 v22 = v18;
    _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_ERROR, "%{public}@Lost reference to home manager while sending remove user message", (uint8_t *)&v21, 0xCu);
  }
LABEL_12:
}

- (void)_sendUserAdded:(id)a3 destination:(id)a4 toHome:(id)a5
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  id v8 = a3;
  long long v41 = (__CFString *)a4;
  id v9 = a5;
  if (shouldLogPrivateInformation())
  {
    id v10 = [v8 userID];
  }
  else
  {
    id v10 = @"...";
    id v11 = @"...";
  }
  int v12 = shouldLogPrivateInformation();
  id v13 = v41;
  if (!v12) {
    id v13 = @"...";
  }
  uint64_t v14 = v13;
  os_log_type_t v15 = (void *)MEMORY[0x230FBD990]();
  id v16 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543874;
    id v48 = v17;
    __int16 v49 = 2112;
    id v50 = v10;
    __int16 v51 = 2112;
    id v52 = v14;
    _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Going to send home configuration to added user %@ at %@ and all resident devices", buf, 0x20u);
  }
  uint64_t v35 = v14;

  if ([v8 isRemoteGateway])
  {
    unsigned __int16 v18 = (void *)MEMORY[0x230FBD990]();
    uint64_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v48 = v20;
      __int16 v49 = 2112;
      id v50 = v10;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Removing resident user %@ from unassociated list", buf, 0x16u);
    }
    int v21 = [v8 userID];
    [(HMDHomeManager *)self _removeFromUnassociatedPeers:v21 home:v9];
  }
  uint64_t v36 = v10;
  id v37 = self;
  __int16 v22 = v8;
  __int16 v23 = [MEMORY[0x263EFF980] array];
  id v40 = [MEMORY[0x263EFF980] array];
  [MEMORY[0x263EFF980] array];
  v39 = id v38 = v9;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v24 = [v9 users];
  uint64_t v25 = [v24 countByEnumeratingWithState:&v42 objects:v46 count:16];
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)v43;
    do
    {
      for (uint64_t i = 0; i != v26; ++i)
      {
        if (*(void *)v43 != v27) {
          objc_enumerationMutation(v24);
        }
        id v29 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        int v30 = [v29 isRemoteGateway];
        id v31 = [v29 userID];
        if (v30)
        {
          id v32 = v23;
LABEL_24:
          [v32 addObject:v31];

          continue;
        }
        char v33 = [v22 userID];
        int v34 = [(HMDHomeDataPushDestination *)v31 isEqualToString:v33];

        if (v41 && v34)
        {
          id v31 = [[HMDHomeDataPushDestination alloc] initWithUser:v29 destination:v41];
          [(HMDHomeDataPushDestination *)v31 setIgnoreConfigCompare:1];
          if ([v29 isAdministrator]) {
            id v32 = v39;
          }
          else {
            id v32 = v40;
          }
          goto LABEL_24;
        }
      }
      uint64_t v26 = [v24 countByEnumeratingWithState:&v42 objects:v46 count:16];
    }
    while (v26);
  }

  [(HMDHomeManager *)v37 _pushChangesForHome:v38 toRemoteDevicesOnSameAccount:v23 addedUser:v22];
  [(HMDHomeManager *)v37 _pushChangesForHome:v38 toRegularUsersOfHome:v40 adminUsersOfHome:v39];
}

- (void)_acceptHomeInviteFromAccount:(id)a3 message:(id)a4 trackInvite:(BOOL)a5
{
  BOOL v5 = a5;
  uint64_t v67 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = [v9 messagePayload];
  id v11 = [v10 objectForKeyedSubscript:@"kRequestedCapabilitiesKey"];

  int v12 = (void *)MEMORY[0x230FBD990]();
  id v13 = self;
  uint64_t v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    os_log_type_t v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v64 = v15;
    _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Handling request for getting controller identity for home invite request", buf, 0xCu);
  }
  if (v8)
  {
    id v16 = [v9 dataForKey:@"kControllerPublicKey"];
    uint64_t v17 = [v9 stringForKey:@"kControllerPairingNameKey"];
    unsigned __int16 v18 = (void (**)(void, void, void))v17;
    if (v16 && v17)
    {
      uint64_t v19 = v11;
      long long v55 = v16;
      uint64_t v20 = (void *)[objc_alloc(MEMORY[0x263F425F0]) initWithPairingKeyData:v16];
      int v21 = (void (**)(void, void, void))[objc_alloc(MEMORY[0x263F35A78]) initWithIdentifier:v18 publicKey:v20 privateKey:0 permissions:0];
      uint64_t v22 = +[HMDIdentityRegistry sharedRegistry];
      [(id)v22 registerIdentity:v21 account:v8 object:v13];

      id v59 = 0;
      id v60 = 0;
      id v58 = 0;
      LOBYTE(v22) = [(HMDHomeManager *)v13 getOrCreateControllerPublicKey:&v60 controllerUsername:&v59 error:&v58];
      id v57 = v60;
      id v56 = v59;
      id v23 = v58;
      id v24 = v23;
      if (v22)
      {
        id v51 = v23;
        if (v5)
        {
          uint64_t v25 = [v9 remoteSenderContext];
          uint64_t v26 = [v25 mergeID];
          uint64_t v27 = [v9 messagePayload];
          id v28 = [(HMDHomeManager *)v13 _trackIncomingInvitationFromAccount:v8 mergeID:v26 idsInvitationIdentifier:0 payload:v27 invitationState:5 error:0];
        }
        id v53 = v8;
        id v29 = (void *)MEMORY[0x230FBD990]();
        int v30 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          id v31 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          long long v64 = v31;
          __int16 v65 = 2112;
          id v66 = v57;
          _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_INFO, "%{public}@Preparing response for request for controller info: %@", buf, 0x16u);
        }
        id v32 = [MEMORY[0x263EFF9A0] dictionary];
        v61[0] = @"kControllerPublicKey";
        char v33 = v57;
        if (!v57)
        {
          char v33 = [MEMORY[0x263EFF9D0] null];
        }
        long long v54 = v20;
        v62[0] = v33;
        v62[1] = v56;
        v61[1] = @"kControllerPairingNameKey";
        id v61[2] = @"kInviteAcceptedKey";
        v62[2] = MEMORY[0x263EFFA88];
        int v34 = objc_msgSend(NSDictionary, "dictionaryWithObjects:forKeys:count:", v62, v61, 3, v51);
        [v32 addEntriesFromDictionary:v34];

        if (!v57) {
        uint64_t v35 = [(HMDHomeManager *)v13 appleAccountManager];
        }
        uint64_t v36 = [v35 account];
        id v37 = [v36 primaryHandle];

        id v8 = v53;
        if (v37)
        {
          id v38 = +[HMDAccountHandleFormatter defaultFormatter];
          id v39 = [v38 stringForObjectValue:v37];

          if (v39) {
            [v32 setObject:v39 forKeyedSubscript:@"kUserIDKey"];
          }
        }
        id v40 = [(HMDHomeManager *)v13 _prepareAnswerForRequestedCapabilities:v19];
        if (v40) {
          [v32 addEntriesFromDictionary:v40];
        }
        [(HMDHomeManager *)v13 _updateIncomingInvitesPresent];
        long long v41 = [v9 responseHandler];
        v41[2](v41, 0, v32);

        uint64_t v20 = v54;
        id v11 = v19;
        id v24 = v52;
      }
      else
      {
        id v32 = [v9 responseHandler];
        ((void (**)(void, void *, void))v32)[2](v32, v24, 0);
        id v11 = v19;
      }

      id v16 = v55;
    }
    else
    {
      id v47 = (void *)MEMORY[0x230FBD990]();
      id v48 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v49 = HMFGetLogIdentifier();
        id v50 = [v9 name];
        *(_DWORD *)long long buf = 138543618;
        long long v64 = v49;
        __int16 v65 = 2112;
        id v66 = v50;
        _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_DEFAULT, "%{public}@Bad request for message %@, missing controller or public key", buf, 0x16u);
      }
      uint64_t v20 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:3 userInfo:0];
      int v21 = [v9 responseHandler];
      ((void (**)(void, void *, void))v21)[2](v21, v20, 0);
    }

    goto LABEL_32;
  }
  long long v42 = (void *)MEMORY[0x230FBD990]();
  long long v43 = v13;
  long long v44 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
  {
    long long v45 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    long long v64 = v45;
    __int16 v65 = 2112;
    id v66 = v9;
    _os_log_impl(&dword_22F52A000, v44, OS_LOG_TYPE_ERROR, "%{public}@Failed to resolve inviter account for message: %@", buf, 0x16u);
  }
  long long v46 = [v9 responseHandler];

  if (v46)
  {
    id v16 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    unsigned __int16 v18 = [v9 responseHandler];
    ((void (**)(void, void *, void))v18)[2](v18, v16, 0);
LABEL_32:
  }
}

- (void)_autoAcceptAllPendingReinvitations
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v3);

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = [(HMDHomeManager *)self incomingInvitations];
  BOOL v5 = (void *)[v4 copy];

  uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if ([v10 invitationState] == 2) {
          [(HMDHomeManager *)self _autoAcceptInviteIfReinvitation:v10];
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v7);
  }
}

- (void)_postIncomingInvitationStateChangedNotification:(id)a3 newInvitationState:(int64_t)a4
{
  v36[1] = *MEMORY[0x263EF8340];
  id v6 = a3;
  uint64_t v7 = [(HMDHomeManager *)self backingStore];
  uint64_t v8 = [v7 context];
  uint64_t v22 = MEMORY[0x263EF8330];
  uint64_t v23 = 3221225472;
  id v24 = __85__HMDHomeManager__postIncomingInvitationStateChangedNotification_newInvitationState___block_invoke;
  uint64_t v25 = &unk_264A2C6A0;
  id v9 = v6;
  id v26 = v9;
  int64_t v27 = a4;
  [v8 performBlock:&v22];

  objc_msgSend(v9, "updateInvitationState:", a4, v22, v23, v24, v25);
  v36[0] = v9;
  id v10 = [MEMORY[0x263EFF8C0] arrayWithObjects:v36 count:1];
  long long v11 = encodeRootObjectForIncomingXPCMessage(v10, 0);

  int v34 = @"kInvitationsDataKey";
  uint64_t v35 = v11;
  long long v12 = [NSDictionary dictionaryWithObjects:&v35 forKeys:&v34 count:1];
  long long v13 = (void *)MEMORY[0x230FBD990]();
  long long v14 = self;
  os_log_type_t v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = HMFGetLogIdentifier();
    uint64_t v17 = [NSNumber numberWithInteger:a4];
    unsigned __int16 v18 = [v9 describeWithFormat];
    *(_DWORD *)long long buf = 138543874;
    id v29 = v16;
    __int16 v30 = 2112;
    id v31 = v17;
    __int16 v32 = 2112;
    char v33 = v18;
    _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Posting incoming state update to clients: %@ / %@", buf, 0x20u);
  }
  uint64_t v19 = [MEMORY[0x263F42568] entitledMessageWithName:@"kUserInvitationsUpdatedNotificationKey" messagePayload:v12];
  uint64_t v20 = [(HMDHomeManager *)v14 messageDispatcher];
  int v21 = [(HMDHomeManager *)v14 uuid];
  [v20 sendMessage:v19 target:v21];
}

void __85__HMDHomeManager__postIncomingInvitationStateChangedNotification_newInvitationState___block_invoke(uint64_t a1)
{
  id v15 = +[HMCContext currentContext];
  uint64_t v2 = [v15 findHomeManagerWithError:0];
  if (v2)
  {
    id v3 = (void *)v2;
    id v4 = [*(id *)(a1 + 32) identifier];
    BOOL v5 = [v3 findIncomingInvitationsRelationWithModelID:v4];

    id v6 = [NSNumber numberWithInteger:*(void *)(a1 + 40)];
    [v5 setInvitationState:v6];

    [v15 save];
  }
  else
  {
    uint64_t v7 = (HMDHomeManager *)_HMFPreconditionFailure();
    [(HMDHomeManager *)v7 _trackIncomingInvitationFromAccount:v9 mergeID:v10 idsInvitationIdentifier:v11 payload:v12 invitationState:v13 error:v14];
  }
}

- (id)_trackIncomingInvitationFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6 invitationState:(int64_t)a7 error:(id *)a8
{
  uint64_t v137 = *MEMORY[0x263EF8340];
  id v12 = (__CFString *)a3;
  uint64_t v108 = (__CFString *)a4;
  id v106 = a5;
  uint64_t v114 = (HMDIncomingHomeInvitation *)a6;
  int64_t v13 = (void *)MEMORY[0x230FBD990]();
  char v113 = self;
  long long v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    id v15 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543874;
    id v125 = v15;
    __int16 v126 = 2112;
    BOOL v127 = v12;
    __int16 v128 = 2112;
    id v129 = v114;
    _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Incoming invitation from account %@ with payload: %@", buf, 0x20u);
  }
  char v107 = [(HMDIncomingHomeInvitation *)v114 hmf_stringForKey:@"kHomeName"];
  uint64_t v16 = [(HMDIncomingHomeInvitation *)v114 hmf_UUIDForKey:@"kHomeUUID"];
  uint64_t v109 = [(HMDIncomingHomeInvitation *)v114 hmf_UUIDForKey:@"kInvitationIdentifierKey"];
  id v105 = [(HMDIncomingHomeInvitation *)v114 hmf_dateForKey:@"kInvitationExpiryDateKey"];
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  uint64_t v17 = [(HMDHomeManager *)v113 incomingInvitations];
  unsigned __int16 v18 = (void *)[v17 copy];

  uint64_t v19 = [v18 countByEnumeratingWithState:&v119 objects:v136 count:16];
  if (!v19)
  {
LABEL_14:
    id v26 = v18;
    goto LABEL_19;
  }
  uint64_t v20 = *(void *)v120;
LABEL_5:
  uint64_t v21 = 0;
  while (1)
  {
    if (*(void *)v120 != v20) {
      objc_enumerationMutation(v18);
    }
    uint64_t v22 = *(void **)(*((void *)&v119 + 1) + 8 * v21);
    uint64_t v23 = [v22 homeUUID];
    if (([v23 isEqual:v16] & 1) == 0)
    {

      goto LABEL_12;
    }
    id v24 = [v22 inviterAccount];
    char v25 = [v24 isRelatedToAccount:v12];

    if (v25) {
      break;
    }
LABEL_12:
    if (v19 == ++v21)
    {
      uint64_t v19 = [v18 countByEnumeratingWithState:&v119 objects:v136 count:16];
      if (v19) {
        goto LABEL_5;
      }
      goto LABEL_14;
    }
  }
  id v26 = v22;

  if (!v26) {
    goto LABEL_20;
  }
  int64_t v27 = (void *)MEMORY[0x230FBD990]();
  id v28 = v113;
  id v29 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    __int16 v30 = HMFGetLogIdentifier();
    id v31 = [v26 describeWithFormat];
    __int16 v32 = [(__CFString *)v12 shortDescription];
    *(_DWORD *)long long buf = 138544130;
    id v125 = v30;
    __int16 v126 = 2112;
    BOOL v127 = v31;
    __int16 v128 = 2112;
    id v129 = v32;
    __int16 v130 = 2112;
    id v131 = v16;
    _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_INFO, "%{public}@Replacing existing invitation %@ with the new incoming from account %@ for home %@", buf, 0x2Au);
  }
  char v33 = +[HMDBulletinBoard sharedBulletinBoard];
  int v34 = [v26 identifier];
  uint64_t v35 = [v34 UUIDString];
  [v33 removeBulletinWithRecordID:v35];

  [(HMDHomeManager *)v28 _postIncomingInvitationStateChangedNotification:v26 newInvitationState:1];
  [(HMDHomeManager *)v28 _removeIncomingInvitation:v26];
LABEL_19:

LABEL_20:
  id v111 = [(HMDIncomingHomeInvitation *)v114 hmf_dataForKey:@"kControllerPublicKey"];
  __int16 v110 = [(HMDIncomingHomeInvitation *)v114 hmf_stringForKey:@"kControllerPairingNameKey"];
  if (!v111 || !v110)
  {
    id v52 = (void *)MEMORY[0x230FBD990]();
    id v53 = v113;
    long long v54 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      long long v55 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v125 = v55;
      __int16 v126 = 2112;
      BOOL v127 = v109;
      _os_log_impl(&dword_22F52A000, v54, OS_LOG_TYPE_DEFAULT, "%{public}@Bad request for invitation with ID %@, missing controller or public key", buf, 0x16u);
    }
    if (a8)
    {
      *a8 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:3 userInfo:0];
    }

LABEL_45:
    val = 0;
    goto LABEL_46;
  }
  int v101 = (void *)[objc_alloc(MEMORY[0x263F425F0]) initWithPairingKeyData:v111];
  long long v100 = (void *)[objc_alloc(MEMORY[0x263F425E8]) initWithIdentifier:v110 publicKey:v101 privateKey:0];
  if ([0 isExpired])
  {
    uint64_t v36 = (void *)MEMORY[0x230FBD990]();
    id v37 = v113;
    id v38 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      id v39 = HMFGetLogIdentifier();
      id v40 = [(__CFString *)v12 shortDescription];
      *(_DWORD *)long long buf = 138543618;
      id v125 = v39;
      __int16 v126 = 2112;
      BOOL v127 = v40;
      _os_log_impl(&dword_22F52A000, v38, OS_LOG_TYPE_INFO, "%{public}@Existing invitation from user (%@) was expired, recreating a new invitation", buf, 0x16u);
    }
    [(HMDHomeManager *)v37 _postIncomingInvitationStateChangedNotification:0 newInvitationState:6];
    [(HMDHomeManager *)v37 _removeIncomingInvitation:0];
  }
  long long v41 = [[HMDIncomingHomeInvitation alloc] initWithInviterAccount:v12 invitationIdentifier:v109 invitationState:a7 homeName:v107 homeUUID:v16 inviterIdentity:v100 inviterMergeID:v108 expiryDate:v105];
  [(HMDHomeInvitation *)v41 setIdsInvitationUUID:v106];
  val = v41;
  long long v42 = v114;
  long long v43 = [(HMDIncomingHomeInvitation *)v42 hmf_stringForKey:@"HMDHomeInvitationShareURLKey"];
  if (!v43)
  {
    id v56 = (void *)MEMORY[0x230FBD990]();
    id v57 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      id v58 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v125 = v58;
      __int16 v126 = 2112;
      BOOL v127 = (__CFString *)val;
      _os_log_impl(&dword_22F52A000, v57, OS_LOG_TYPE_ERROR, "%{public}@Share URL is missing from invitation %@", buf, 0x16u);
    }
    if (a8)
    {
      *a8 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
    }

LABEL_44:
    goto LABEL_45;
  }
  long long v44 = [NSURL URLWithString:v43];
  long long v45 = [(HMDIncomingHomeInvitation *)v42 hmf_dataForKey:@"HMDHomeInvitationShareTokenKey"];
  long long v46 = (void *)MEMORY[0x263F08928];
  id v47 = [MEMORY[0x263EFFA08] setWithObject:objc_opt_class()];
  id location = 0;
  id v48 = [v46 _strictlyUnarchivedObjectOfClasses:v47 fromData:v45 error:&location];
  __int16 v49 = (__CFString *)location;

  if (v49)
  {
    context = (void *)MEMORY[0x230FBD990]();
    id v50 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      id v51 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543874;
      id v125 = v51;
      __int16 v126 = 2112;
      BOOL v127 = v49;
      __int16 v128 = 2112;
      id v129 = val;
      _os_log_impl(&dword_22F52A000, v50, OS_LOG_TYPE_ERROR, "%{public}@Unarchive share token due to error %@ for invitation %@", buf, 0x20u);
    }
    if (a8)
    {
      *a8 = [MEMORY[0x263F087E8] hmErrorWithCode:27];
    }
  }
  else
  {
    [(HMDHomeInvitation *)val setShareURL:v44];
    [(HMDHomeInvitation *)val setShareToken:v48];
  }

  if (v49) {
    goto LABEL_44;
  }
  [(HMDIncomingHomeInvitation *)val setHomeHasCameras:[(HMDIncomingHomeInvitation *)v42 hmf_BOOLForKey:*MEMORY[0x263F0CFB8]]];
  id v60 = [(HMDIncomingHomeInvitation *)v42 hmf_numberForKey:*MEMORY[0x263F0C928]];
  -[HMDIncomingHomeInvitation setInviteePrivilege:](val, "setInviteePrivilege:", [v60 integerValue]);

  id v104 = [(HMDIncomingHomeInvitation *)v42 hmf_dictionaryForKey:*MEMORY[0x263F0D560]];
  long long v61 = (void *)MEMORY[0x230FBD990]();
  long long v62 = v113;
  long long v63 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
  {
    long long v64 = HMFGetLogIdentifier();
    unint64_t v65 = [(HMDIncomingHomeInvitation *)val inviteePrivilege];
    if (v65 > 5) {
      id v66 = @"None";
    }
    else {
      id v66 = off_264A29920[v65];
    }
    uint64_t v67 = v66;
    [(HMDIncomingHomeInvitation *)val homeHasCameras];
    HMFBooleanToString();
    long long v68 = (HMDIncomingHomeInvitation *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)long long buf = 138544130;
    id v125 = v64;
    __int16 v126 = 2112;
    BOOL v127 = v67;
    __int16 v128 = 2112;
    id v129 = v68;
    __int16 v130 = 2112;
    id v131 = v104;
    _os_log_impl(&dword_22F52A000, v63, OS_LOG_TYPE_INFO, "%{public}@Incoming invitation: [Privilege : %@], [HomeHasCameras: %@], [rgSchedule: %@]", buf, 0x2Au);
  }
  if (v104)
  {
    id v69 = (void *)[objc_alloc(MEMORY[0x263F0E6E0]) initWithDictionary:v104];
    [(HMDIncomingHomeInvitation *)val setRestrictedGuestSchedule:v69];

    __int16 v70 = (void *)MEMORY[0x230FBD990]();
    __int16 v71 = v62;
    __int16 v72 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
    {
      char v73 = HMFGetLogIdentifier();
      unint64_t v74 = [(HMDIncomingHomeInvitation *)val inviteePrivilege];
      if (v74 > 5) {
        __int16 v75 = @"None";
      }
      else {
        __int16 v75 = off_264A29920[v74];
      }
      uint64_t v76 = v75;
      uint64_t v77 = [(HMDIncomingHomeInvitation *)val restrictedGuestSchedule];
      *(_DWORD *)long long buf = 138543874;
      id v125 = v73;
      __int16 v126 = 2112;
      BOOL v127 = v76;
      __int16 v128 = 2112;
      id v129 = v77;
      _os_log_impl(&dword_22F52A000, v72, OS_LOG_TYPE_INFO, "%{public}@Unable to parse the RG schedule payload from invitation OR it does not exist. %@ / %@", buf, 0x20u);
    }
  }
  BOOL v78 = (void *)MEMORY[0x230FBD990]();
  uint64_t v79 = v62;
  id v80 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
  {
    id v81 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543874;
    id v125 = v81;
    __int16 v126 = 2112;
    BOOL v127 = v108;
    __int16 v128 = 2112;
    id v129 = (HMDIncomingHomeInvitation *)v109;
    _os_log_impl(&dword_22F52A000, v80, OS_LOG_TYPE_INFO, "%{public}@Received incoming invitation from mergeID %@ for invite %@", buf, 0x20u);
  }
  id v82 = [(HMDHomeManager *)v79 workQueue];
  [(HMDHomeInvitation *)val setClientQueue:v82];

  objc_initWeak(&location, v79);
  objc_initWeak(&from, val);
  v115[0] = MEMORY[0x263EF8330];
  v115[1] = 3221225472;
  v115[2] = __116__HMDHomeManager__trackIncomingInvitationFromAccount_mergeID_idsInvitationIdentifier_payload_invitationState_error___block_invoke;
  v115[3] = &unk_264A2CBC0;
  objc_copyWeak(&v116, &location);
  objc_copyWeak(&v117, &from);
  v115[4] = v79;
  [(HMDHomeInvitation *)val setExpirationHandler:v115];
  [(HMDHomeManager *)v79 _addIncomingInvitation:val];
  contexta = (void *)MEMORY[0x230FBD990]([(HMDHomeManager *)v79 _postIncomingInvitationStateChangedNotification:val newInvitationState:a7]);
  id v83 = v79;
  HMFGetOSLogHandle();
  id v84 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    id v85 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v97 = [(HMDHomeInvitation *)val identifier];
    id v86 = [v97 UUIDString];
    long long v87 = [MEMORY[0x263F0E3B0] homeInvitationStateDescription:a7];
    id v88 = [(__CFString *)v12 shortDescription];
    id v89 = [v16 UUIDString];
    *(_DWORD *)long long buf = 138544642;
    id v125 = v85;
    __int16 v126 = 2112;
    BOOL v127 = v86;
    __int16 v128 = 2112;
    id v129 = v87;
    __int16 v130 = 2112;
    id v131 = v88;
    __int16 v132 = 2112;
    uint64_t v133 = v107;
    __int16 v134 = 2112;
    uint64_t v135 = v89;
    _os_log_impl(&dword_22F52A000, v84, OS_LOG_TYPE_DEFAULT, "%{public}@Tracking incoming invite %@ with state %@ from account %@ for home %@(%@)", buf, 0x3Eu);
  }
  if (isThisDeviceDesignatedFMFDevice()) {
    [(HMDHomeManager *)v83 _autoAcceptInviteIfReinvitation:val];
  }
  objc_destroyWeak(&v117);
  objc_destroyWeak(&v116);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

  if (a7 == 5)
  {
    long long v90 = [(HMDHomeManager *)v83 uuidsOfRemovedHomes];
    int v91 = [v90 containsObject:v16];

    if (v91)
    {
      uint64_t v92 = [(HMDHomeManager *)v83 uuidsOfRemovedHomes];
      [v92 removeObject:v16];

      id v93 = (void *)MEMORY[0x230FBD990]();
      long long v94 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
      {
        int v95 = HMFGetLogIdentifier();
        uint64_t v96 = [v16 UUIDString];
        *(_DWORD *)long long buf = 138543618;
        id v125 = v95;
        __int16 v126 = 2112;
        BOOL v127 = v96;
        _os_log_impl(&dword_22F52A000, v94, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);
      }
    }
    [(HMDHomeManager *)v83 _stopTrackingRemovedHomeUserMergeId:v108];
  }
LABEL_46:

  return val;
}

void __116__HMDHomeManager__trackIncomingInvitationFromAccount_mergeID_idsInvitationIdentifier_payload_invitationState_error___block_invoke(id *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  if (WeakRetained)
  {
    id v3 = objc_loadWeakRetained(a1 + 6);
    id v4 = +[HMDBulletinBoard sharedBulletinBoard];
    BOOL v5 = [v3 identifier];
    id v6 = [v5 UUIDString];
    [v4 removeBulletinWithRecordID:v6];

    objc_msgSend(WeakRetained, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v3, objc_msgSend(v3, "invitationState"));
    uint64_t v7 = (void *)MEMORY[0x230FBD990]([a1[4] _removeIncomingInvitation:v3]);
    id v8 = a1[4];
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = HMFGetLogIdentifier();
      id v11 = [a1[4] incomingInvitations];
      int v12 = 138543618;
      int64_t v13 = v10;
      __int16 v14 = 2112;
      id v15 = v11;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@New incomingInvitations after expiration: %@", (uint8_t *)&v12, 0x16u);
    }
  }
}

- (void)_handleDismissDialogRequest:(id)a3
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = [v4 stringForKey:@"kDialogContextKey"];
  char v16 = 0;
  uint64_t v6 = [v4 BOOLForKey:@"kDialogSelectionKey" keyPresent:&v16];
  if (v5 && v16)
  {
    uint64_t v7 = v6;
    id v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = HMFGetLogIdentifier();
      id v11 = "canceled";
      *(_DWORD *)long long buf = 138543874;
      unsigned __int16 v18 = v10;
      if (v7) {
        id v11 = "accepted";
      }
      __int16 v19 = 2112;
      uint64_t v20 = v5;
      __int16 v21 = 2080;
      uint64_t v22 = v11;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Received message from peer device to dismiss dialog with context %@, selection: %s", buf, 0x20u);
    }
    int v12 = +[HMDUIDialogPresenter sharedUIDialogPresenter];
    int64_t v13 = [(HMDHomeManager *)self workQueue];
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 3221225472;
    void v14[2] = __46__HMDHomeManager__handleDismissDialogRequest___block_invoke;
    v14[3] = &unk_264A2F7F8;
    id v15 = v5;
    [v12 dismissPendingDialogDueToPeerDeviceSelection:v7 context:v15 queue:v13 completionHandler:v14];
  }
}

void __46__HMDHomeManager__handleDismissDialogRequest___block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = HMFGetLogIdentifier();
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543618;
    uint64_t v7 = v4;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_impl(&dword_22F52A000, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Dismissed dialog with context %@", (uint8_t *)&v6, 0x16u);
  }
}

- (void)dismissDialogOnAllMyTransientDevicesWithContext:(id)a3 selection:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v6 = a3;
  uint64_t v7 = [(HMDHomeManager *)self appleAccountManager];
  __int16 v8 = [v7 account];
  uint64_t v9 = [v8 handles];
  uint64_t v10 = [v9 firstObject];

  if (v10)
  {
    id v11 = [HMDRemoteAccountMessageDestination alloc];
    int v12 = [(HMDHomeManager *)self uuid];
    int64_t v13 = [(HMDRemoteAccountMessageDestination *)v11 initWithTarget:v12 handle:v10 multicast:1];

    __int16 v14 = (void *)MEMORY[0x263F42568];
    id v15 = objc_msgSend(NSNumber, "numberWithBool:", v4, @"kDialogContextKey", @"kDialogSelectionKey", v6);
    v24[1] = v15;
    char v16 = [NSDictionary dictionaryWithObjects:v24 forKeys:&v23 count:2];
    uint64_t v17 = [v14 internalMessageWithName:@"kDismissDialogInternalRequestKey" destination:v13 messagePayload:v16];

    unsigned __int16 v18 = [(HMDHomeManager *)self messageDispatcher];
    [v18 sendMessage:v17];
  }
  else
  {
    __int16 v19 = (void *)MEMORY[0x230FBD990]();
    uint64_t v20 = self;
    __int16 v21 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v26 = v22;
      _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot find own account handle to send message to dismiss dialog on all devices", buf, 0xCu);
    }
  }
}

- (void)_handleDismissBulletinRequest:(id)a3
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 stringForKey:@"kBulletinRecordIDKey"];
  if (v5)
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v8 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v36 = v8;
      __int16 v37 = 2112;
      id v38 = v5;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Received message from peer device to dismiss bulletin with record ID %@", buf, 0x16u);
    }
    uint64_t v9 = +[HMDBulletinBoard sharedBulletinBoard];
    [v9 removeBulletinWithRecordID:v5];

    uint64_t v10 = [v4 numberForKey:@"kInvitationStateKey"];
    id v11 = v10;
    if (!v10) {
      goto LABEL_19;
    }
    uint64_t v12 = [v10 unsignedIntegerValue];
    int64_t v13 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v5];
    __int16 v14 = [(HMDHomeManager *)self incomingInvitations];
    id v15 = objc_msgSend(v14, "hmf_firstObjectWithValue:forKeyPath:", v13, @"identifier");

    if (v15)
    {
      if ((unint64_t)(v12 - 6) < 2 || v12 == 4)
      {
        [(HMDHomeManager *)self _postIncomingInvitationStateChangedNotification:v15 newInvitationState:v12];
        [(HMDHomeManager *)self _removeIncomingInvitation:v15];
LABEL_18:
        [(HMDHomeManager *)self _updateIncomingInvitesPresent];

LABEL_19:
        goto LABEL_20;
      }
      if (v12 == 3)
      {
        id v16 = objc_alloc(MEMORY[0x263F08C38]);
        uint64_t v17 = [v4 stringForKey:@"kHomeUUID"];
        unsigned __int16 v18 = (void *)[v16 initWithUUIDString:v17];

        [(HMDHomeManager *)self _postIncomingInvitationStateChangedNotification:v15 newInvitationState:5];
        __int16 v19 = [(HMDHomeManager *)self uuidsOfRemovedHomes];
        int v20 = [v19 containsObject:v18];

        if (v20)
        {
          __int16 v21 = [(HMDHomeManager *)self uuidsOfRemovedHomes];
          [v21 removeObject:v18];

          uint64_t v22 = (void *)MEMORY[0x230FBD990]();
          uint64_t v23 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            id v24 = HMFGetLogIdentifier();
            [v18 UUIDString];
            char v25 = v33 = v22;
            *(_DWORD *)long long buf = 138543618;
            uint64_t v36 = v24;
            __int16 v37 = 2112;
            id v38 = v25;
            _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);

            uint64_t v22 = v33;
          }
        }
        id v26 = [(HMDHomeManager *)self _homeWithUUID:v18];
        uint64_t v27 = [v26 owner];
        id v28 = [v27 account];
        [v28 senderCorrelationIdentifier];
        id v29 = v34 = v18;

        [(HMDHomeManager *)self _stopTrackingRemovedHomeUserMergeId:v29];
        goto LABEL_18;
      }
    }
    __int16 v30 = (void *)MEMORY[0x230FBD990]();
    id v31 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v32 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v36 = v32;
      __int16 v37 = 2112;
      id v38 = v5;
      _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Dismiss bulletin request received with no matching invitation: %@", buf, 0x16u);
    }
    goto LABEL_18;
  }
LABEL_20:
}

- (void)dismissBulletinOnAllMyTransientDevicesWithContext:(id)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [(HMDHomeManager *)self appleAccountManager];
  id v6 = [v5 account];
  uint64_t v7 = [v6 handles];
  __int16 v8 = [v7 firstObject];

  if (v8)
  {
    uint64_t v9 = [HMDRemoteAccountMessageDestination alloc];
    uint64_t v10 = [(HMDHomeManager *)self uuid];
    id v11 = [(HMDRemoteAccountMessageDestination *)v9 initWithTarget:v10 handle:v8 multicast:1];

    uint64_t v12 = [MEMORY[0x263F42568] internalMessageWithName:@"kDismissBulletinInternalRequestKey" destination:v11 messagePayload:v4];
    int64_t v13 = [(HMDHomeManager *)self messageDispatcher];
    [v13 sendMessage:v12];
  }
  else
  {
    __int16 v14 = (void *)MEMORY[0x230FBD990]();
    id v15 = self;
    id v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      int v18 = 138543362;
      __int16 v19 = v17;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot find own account handle to send message to dismiss bulletin on all devices", (uint8_t *)&v18, 0xCu);
    }
  }
}

- (void)_handleAccessHomeInviteFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6 messageResponseHandler:(id)a7
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  uint64_t v17 = [v13 length];
  if (v12 && v17)
  {
    int v18 = +[HMDHomeInviteLogEvent updateWithState:1 isFMFDevice:isThisDeviceDesignatedFMFDevice()];
    if (v18)
    {
      __int16 v19 = [(HMDHomeManager *)self logEventSubmitter];
      [v19 submitLogEvent:v18];
    }
    id v34 = 0;
    BOOL v20 = [(HMDHomeManager *)self shouldAcceptInvitationPayload:v15 error:&v34];
    id v21 = v34;
    if (v20)
    {
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 3221225472;
      aBlock[2] = __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke;
      aBlock[3] = &unk_264A2B538;
      void aBlock[4] = self;
      id v29 = v15;
      id v33 = v16;
      id v22 = v12;
      id v30 = v22;
      id v31 = v13;
      id v32 = v14;
      uint64_t v23 = _Block_copy(aBlock);
      [v22 isOfKnownPersonWithCompletion:v23];
    }
    else if (v16)
    {
      (*((void (**)(id, id, void))v16 + 2))(v16, v21, 0);
    }
  }
  else
  {
    id v24 = (void *)MEMORY[0x230FBD990](v17);
    char v25 = self;
    id v26 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v36 = v27;
      __int16 v37 = 2048;
      uint64_t v38 = [v13 length];
      _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation because of invalid mergeID: %lu or nil account", buf, 0x16u);
    }
    int v18 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:20 userInfo:0];
    if (v16) {
      (*((void (**)(id, void *, void))v16 + 2))(v16, v18, 0);
    }
  }
}

void __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke(id *a1, char a2)
{
  id v4 = [a1[4] workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke_2;
  block[3] = &unk_264A2B510;
  id v5 = a1[5];
  char v14 = a2;
  id v6 = a1[4];
  id v8 = v5;
  id v9 = v6;
  id v13 = a1[9];
  id v10 = a1[6];
  id v11 = a1[7];
  id v12 = a1[8];
  dispatch_async(v4, block);
}

void __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke_2(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "hmf_stringForKey:", @"kHomeName");
  if (*(unsigned char *)(a1 + 80) || ([*(id *)(a1 + 40) shouldAcceptInvitationWithHomeName:v2] & 1) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    id v30 = 0;
    id v8 = [v6 _trackIncomingInvitationFromAccount:v3 mergeID:v4 idsInvitationIdentifier:v5 payload:v7 invitationState:2 error:&v30];
    id v9 = v30;
    int v10 = objc_msgSend(*(id *)(a1 + 32), "hmf_BOOLForKey:", @"HMDHomeSuppressInviteNotificationKey");
    if (v9 && (uint64_t v11 = *(void *)(a1 + 72)) != 0)
    {
      (*(void (**)(void, id, void))(v11 + 16))(*(void *)(a1 + 72), v9, 0);
    }
    else if (v8)
    {
      if (v10)
      {
        id v12 = (void *)MEMORY[0x230FBD990]();
        id v13 = *(id *)(a1 + 40);
        char v14 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          id v15 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          id v32 = v15;
          _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Suppressing home invite notification", buf, 0xCu);
        }
        id v16 = +[HMDHomeInviteLogEvent updateWithState:3 isFMFDevice:isThisDeviceDesignatedFMFDevice()];
        if (v16)
        {
          uint64_t v17 = [*(id *)(a1 + 40) logEventSubmitter];
          [v17 submitLogEvent:v16];
        }
      }
      else
      {
        id v24 = +[HMDBulletinBoard sharedBulletinBoard];
        id v16 = v24;
        if (*(unsigned char *)(a1 + 80))
        {
          id v25 = (id)[v24 insertBulletinForIncomingInvitation:v8];
        }
        else
        {
          id v26 = (void *)MEMORY[0x230FBD990]();
          id v27 = *(id *)(a1 + 40);
          id v28 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            id v29 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543362;
            id v32 = v29;
            _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@Suppressing home invite notification because inviter is not a known person.", buf, 0xCu);
          }
        }
        [v16 refreshHomeBadgeNumber];
      }
    }
    goto LABEL_25;
  }
  int v18 = (void *)MEMORY[0x230FBD990]();
  id v19 = *(id *)(a1 + 40);
  BOOL v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    id v21 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v32 = v21;
    __int16 v33 = 2112;
    id v34 = v2;
    _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload due to invalid home name: %@", buf, 0x16u);
  }
  id v9 = +[HMDHomeInviteLogEvent updateWithState:2 isFMFDevice:isThisDeviceDesignatedFMFDevice()];
  if (v9)
  {
    id v22 = [*(id *)(a1 + 40) logEventSubmitter];
    [v22 submitLogEvent:v9];
  }
  uint64_t v23 = *(void *)(a1 + 72);
  if (v23)
  {
    id v8 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    (*(void (**)(uint64_t, void *, void))(v23 + 16))(v23, v8, 0);
LABEL_25:
  }
}

- (BOOL)shouldAcceptInvitationWithHomeName:(id)a3
{
  return objc_msgSend(a3, "hm_containsAnyTextCheckingTypeInTypes:", 2080) ^ 1;
}

- (BOOL)shouldAcceptInvitationPayload:(id)a3 error:(id *)a4
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  id v6 = a3;
  uint64_t v7 = objc_msgSend(v6, "hmf_stringForKey:", @"kHomeName");
  uint64_t v8 = objc_msgSend(v6, "hmf_UUIDForKey:", @"kHomeUUID");
  id v9 = (void *)v8;
  if (v7 && v8)
  {
    int v10 = [(HMDHomeManager *)self _homeWithUUID:v8];
    if (v10)
    {
      uint64_t v11 = (void *)MEMORY[0x230FBD990]();
      id v12 = self;
      id v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        char v14 = HMFGetLogIdentifier();
        int v35 = 138543618;
        uint64_t v36 = v14;
        __int16 v37 = 2112;
        uint64_t v38 = v9;
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because home already exists for homeUUID: %@", (uint8_t *)&v35, 0x16u);
      }
      if (a4)
      {
        uint64_t v15 = 1;
LABEL_24:
        [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:v15 userInfo:0];
        BOOL v20 = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_26;
      }
    }
    else
    {
      id v21 = +[HMDDeviceCapabilities deviceCapabilities];
      char v22 = [v21 supportsHomeInvitation];

      if (v22)
      {
        uint64_t v23 = [(HMDHomeManager *)self homes];
        unint64_t v24 = [v23 count];
        unint64_t v25 = maximumHomes;

        if (v24 < v25)
        {
          BOOL v20 = 1;
LABEL_26:

          goto LABEL_27;
        }
        id v30 = (void *)MEMORY[0x230FBD990]();
        id v31 = self;
        id v32 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          __int16 v33 = HMFGetLogIdentifier();
          int v35 = 138543362;
          uint64_t v36 = v33;
          _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because invitee has already maximum allowed homes", (uint8_t *)&v35, 0xCu);
        }
        if (a4)
        {
          uint64_t v15 = 49;
          goto LABEL_24;
        }
      }
      else
      {
        id v26 = (void *)MEMORY[0x230FBD990]();
        id v27 = self;
        id v28 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          id v29 = HMFGetLogIdentifier();
          int v35 = 138543362;
          uint64_t v36 = v29;
          _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because device does not support invitations", (uint8_t *)&v35, 0xCu);
        }
        if (a4)
        {
          uint64_t v15 = 10;
          goto LABEL_24;
        }
      }
    }
    BOOL v20 = 0;
    goto LABEL_26;
  }
  id v16 = (void *)MEMORY[0x230FBD990]();
  uint64_t v17 = self;
  int v18 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    id v19 = HMFGetLogIdentifier();
    int v35 = 138543874;
    uint64_t v36 = v19;
    __int16 v37 = 2112;
    uint64_t v38 = v7;
    __int16 v39 = 2112;
    id v40 = v9;
    _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because homeName: %@ or homeUUID: %@ is missing", (uint8_t *)&v35, 0x20u);
  }
  if (a4)
  {
    [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:20 userInfo:0];
    BOOL v20 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    BOOL v20 = 0;
  }
LABEL_27:

  return v20;
}

- (void)_handleAccessHomeInvite:(id)a3
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 remoteSourceID];
  if (v5)
  {
    id v6 = [v4 remoteSourceDevice];
    uint64_t v7 = [v6 account];

    if (v7)
    {
      uint64_t v8 = [v4 messagePayload];
      id v9 = objc_msgSend(v8, "hmf_stringForKey:", @"kHomeName");

      if (v9)
      {
        v23[0] = MEMORY[0x263EF8330];
        v23[1] = 3221225472;
        id v23[2] = __42__HMDHomeManager__handleAccessHomeInvite___block_invoke;
        v23[3] = &unk_264A2B4E8;
        void v23[4] = self;
        id v24 = v7;
        id v25 = v9;
        [v24 isOfKnownPersonWithCompletion:v23];
      }
      else
      {
        int v18 = (void *)MEMORY[0x230FBD990]();
        id v19 = self;
        BOOL v20 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          id v21 = HMFGetLogIdentifier();
          char v22 = [v7 name];
          *(_DWORD *)long long buf = 138543874;
          id v27 = v21;
          __int16 v28 = 2160;
          uint64_t v29 = 1752392040;
          __int16 v30 = 2112;
          id v31 = v22;
          _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@Dropping incompatible HH1 invitation from %{mask.hash}@ due to missing home name", buf, 0x20u);
        }
      }
    }
    else
    {
      char v14 = (void *)MEMORY[0x230FBD990]();
      uint64_t v15 = self;
      id v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v27 = v17;
        _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Dropping incompatible HH1 invitation due account resolve failure", buf, 0xCu);
      }
    }
  }
  else
  {
    int v10 = (void *)MEMORY[0x230FBD990]();
    uint64_t v11 = self;
    id v12 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v27 = v13;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Dropping incompatible HH1 invitation due missing fromID", buf, 0xCu);
    }
  }
}

void __42__HMDHomeManager__handleAccessHomeInvite___block_invoke(uint64_t a1, int a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    uint64_t v8 = [*(id *)(a1 + 40) name];
    int v12 = 138543874;
    id v13 = v7;
    __int16 v14 = 2160;
    uint64_t v15 = 1752392040;
    __int16 v16 = 2112;
    uint64_t v17 = v8;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Posting bulletin for incompatible HH1 invitation from %{mask.hash}@", (uint8_t *)&v12, 0x20u);
  }
  id v9 = +[HMDBulletinBoard sharedBulletinBoard];
  int v10 = [*(id *)(a1 + 40) name];
  if (a2) {
    uint64_t v11 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v11 = 0;
  }
  [v9 insertBulletinForIncompatibleInvitationFromInviterName:v10 homeName:v11];
}

- (void)_handleAddRemoteAccessRequest:(id)a3
{
  uint64_t v3 = (void *)MEMORY[0x263F087E8];
  id v4 = a3;
  id v5 = [v3 hmErrorWithCode:48];
  [v4 respondWithError:v5];
}

- (void)_handleDoYouSeeUnpairedAccessories:(id)a3
{
  uint64_t v3 = (void *)MEMORY[0x263F087E8];
  id v4 = a3;
  id v5 = [v3 hmErrorWithCode:48];
  [v4 respondWithError:v5];
}

- (BOOL)_findAnyAccessoryWithIdentities:(id)a3 inAccessoryServers:(id)a4
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = a4;
  if ([v5 count] && objc_msgSend(v6, "count"))
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v7 = v5;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v15;
      while (2)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v15 != v9) {
            objc_enumerationMutation(v7);
          }
          uint64_t v11 = objc_msgSend(MEMORY[0x263F35860], "serverIdentifierWithUniqueIdentifier:", *(void *)(*((void *)&v14 + 1) + 8 * i), (void)v14);
          char v12 = [v6 containsObject:v11];

          if (v12)
          {
            LOBYTE(v8) = 1;
            goto LABEL_14;
          }
        }
        uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
LABEL_14:
  }
  else
  {
    LOBYTE(v8) = 0;
  }

  return v8;
}

- (void)_startScanningForAccessories:(id)a3
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 stringForKey:@"kHomeUUID"];
  id v6 = (void *)MEMORY[0x230FBD990]();
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    uint64_t v9 = [v4 name];
    int v17 = 138543874;
    uint64_t v18 = v8;
    __int16 v19 = 2112;
    BOOL v20 = v5;
    __int16 v21 = 2112;
    char v22 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Received request to determine if we are at home %@ for message %@", (uint8_t *)&v17, 0x20u);
  }
  int v10 = [(HMDHomeManager *)self accessoryFinderTimer];

  if (!v10)
  {
    [(HMDHomeManager *)self _startAccessoryFinderTimer];
    uint64_t v11 = [(HMDHomeManager *)self accessoryBrowserInternal];
    [v11 stopDiscoveringAccessories];

    char v12 = [(HMDHomeManager *)self accessoryBrowserInternal];
    [v12 startDiscoveringAccessories];

    id v13 = (void *)MEMORY[0x230FBD990]();
    long long v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      long long v15 = HMFGetLogIdentifier();
      int v17 = 138543362;
      uint64_t v18 = v15;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Starting timer to discover all accessories", (uint8_t *)&v17, 0xCu);
    }
  }
  long long v16 = [(HMDHomeManager *)self pendingResponsesForAccessoryFinder];
  [v16 addObject:v4];
}

- (void)_processAnyPendingRequestsForRemoteAccess:(BOOL)a3
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  id v4 = [MEMORY[0x263EFF9C0] set];
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v61 objects:v74 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v62;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v62 != v8) {
          objc_enumerationMutation(v5);
        }
        int v10 = [*(id *)(*((void *)&v61 + 1) + 8 * i) hapAccessoryServerIdentifiers];
        [v4 unionSet:v10];
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v61 objects:v74 count:16];
    }
    while (v7);
  }

  uint64_t v11 = (void *)[v4 mutableCopy];
  char v12 = [(HMDHomeManager *)self accessoryBrowserInternal];
  id v13 = [v12 discoveredAccessoryServers];
  [v11 unionSet:v13];

  long long v54 = [MEMORY[0x263EFF980] array];
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  id obj = [(HMDHomeManager *)self pendingResponsesForAccessoryFinder];
  id v51 = v11;
  uint64_t v56 = [obj countByEnumeratingWithState:&v57 objects:v73 count:16];
  if (v56)
  {
    uint64_t v55 = *(void *)v58;
    uint64_t v49 = *MEMORY[0x263F0C710];
    id v50 = self;
    do
    {
      for (uint64_t j = 0; j != v56; ++j)
      {
        if (*(void *)v58 != v55) {
          objc_enumerationMutation(obj);
        }
        long long v15 = *(void **)(*((void *)&v57 + 1) + 8 * j);
        long long v16 = [v15 name];
        char v17 = [v16 isEqualToString:@"kDoYouSeeUnpairedAccessoriesKey"];

        uint64_t v18 = v11;
        if ((v17 & 1) != 0
          || ([v15 name],
              __int16 v19 = objc_claimAutoreleasedReturnValue(),
              char v20 = [v19 isEqualToString:@"kAreYouAtHomeRequestKey"],
              v19,
              uint64_t v18 = v4,
              (v20 & 1) != 0))
        {
          id v21 = v18;
          char v22 = [v15 arrayForKey:@"kAccessoryIdentitiesKey"];
          BOOL v23 = [(HMDHomeManager *)self _findAnyAccessoryWithIdentities:v22 inAccessoryServers:v21];
          if (v23 || a3)
          {
            id v27 = v4;
            v71[0] = @"kAtHomeStateKey";
            __int16 v28 = [NSNumber numberWithBool:v23];
            v72[0] = v28;
            v71[1] = @"kHomedVersionKey";
            id v29 = (id)homedVersion;
            v72[1] = v29;
            v71[2] = @"kDeviceNameKey";
            __int16 v30 = [MEMORY[0x263F42648] systemInfo];
            id v31 = [v30 name];

            v72[2] = v31;
            uint64_t v32 = [NSDictionary dictionaryWithObjects:v72 forKeys:v71 count:3];

            __int16 v33 = [v15 stringForKey:@"kHomeUUID"];
            id v34 = (void *)MEMORY[0x230FBD990]();
            int v35 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v36 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543874;
              id v66 = v36;
              __int16 v67 = 2112;
              id v68 = v32;
              __int16 v69 = 2112;
              __int16 v70 = v33;
              _os_log_impl(&dword_22F52A000, v35, OS_LOG_TYPE_DEFAULT, "%{public}@Sending response %@ for home %@", buf, 0x20u);
            }
            __int16 v37 = [v15 responseHandler];
            ((void (**)(void, void, void *))v37)[2](v37, 0, v32);

            [v54 addObject:v15];
            id v4 = v27;
            self = v50;
            uint64_t v11 = v51;
          }
          else
          {
            id v24 = (void *)MEMORY[0x230FBD990]();
            id v25 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              id v26 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543618;
              id v66 = v26;
              __int16 v67 = 2112;
              id v68 = v21;
              _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Did not find any of the accessories in the list %@ but there is a timer pending, continuing to scan", buf, 0x16u);
            }
          }
          goto LABEL_27;
        }
        uint64_t v38 = (void *)MEMORY[0x230FBD990]([v54 addObject:v15]);
        __int16 v39 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          id v40 = HMFGetLogIdentifier();
          uint64_t v41 = [v15 name];
          *(_DWORD *)long long buf = 138543618;
          id v66 = v40;
          __int16 v67 = 2112;
          id v68 = v41;
          _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@There is an invalid message in the pending responses for accessory finder %@", buf, 0x16u);
        }
        long long v42 = [v15 responseHandler];

        if (v42)
        {
          id v21 = [MEMORY[0x263F087E8] errorWithDomain:v49 code:3 userInfo:0];
          char v22 = [v15 responseHandler];
          ((void (**)(void, id, void))v22)[2](v22, v21, 0);
LABEL_27:

          continue;
        }
      }
      uint64_t v56 = [obj countByEnumeratingWithState:&v57 objects:v73 count:16];
    }
    while (v56);
  }

  long long v43 = [(HMDHomeManager *)self pendingResponsesForAccessoryFinder];
  [v43 removeObjectsInArray:v54];

  long long v44 = [(HMDHomeManager *)self pendingResponsesForAccessoryFinder];
  uint64_t v45 = [v44 count];

  if (!v45)
  {
    long long v46 = (void *)MEMORY[0x230FBD990]();
    id v47 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      id v48 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v66 = v48;
      _os_log_impl(&dword_22F52A000, v47, OS_LOG_TYPE_DEFAULT, "%{public}@Processed all requests for accessory scan for remote access, stopping scan timer", buf, 0xCu);

      uint64_t v11 = v51;
    }

    [(HMDHomeManager *)self _cancelAccessoryFinderTimer];
  }
}

- (void)processAnyPendingRequestsForRemoteAccess
{
  uint64_t v3 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __58__HMDHomeManager_processAnyPendingRequestsForRemoteAccess__block_invoke;
  block[3] = &unk_264A2F7F8;
  void block[4] = self;
  dispatch_async(v3, block);
}

uint64_t __58__HMDHomeManager_processAnyPendingRequestsForRemoteAccess__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processAnyPendingRequestsForRemoteAccess:0];
}

- (void)_cancelAccessoryFinderTimer
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = [(HMDHomeManager *)self accessoryFinderTimer];

  if (v3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = HMFGetLogIdentifier();
      int v10 = 138543362;
      uint64_t v11 = v6;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Cancelling accessory finder timer", (uint8_t *)&v10, 0xCu);
    }
    uint64_t v7 = [(HMDHomeManager *)self accessoryFinderTimer];
    dispatch_source_cancel(v7);

    [(HMDHomeManager *)self setAccessoryFinderTimer:0];
    uint64_t v8 = [(HMDHomeManager *)self accessoryBrowserInternal];
    [v8 stopDiscoveringAccessories];

    uint64_t v9 = [(HMDHomeManager *)self accessoryBrowserInternal];
    [v9 setManagerDelegate:0];
  }
}

- (void)_startAccessoryFinderTimerExpired
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = HMFGetLogIdentifier();
    int v8 = 138543362;
    uint64_t v9 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Timer expired, and stopping request to discover accessories", (uint8_t *)&v8, 0xCu);
  }
  [(HMDHomeManager *)self _processAnyPendingRequestsForRemoteAccess:1];
  uint64_t v6 = [(HMDHomeManager *)self accessoryBrowserInternal];
  [v6 stopDiscoveringAccessories];

  uint64_t v7 = [(HMDHomeManager *)self accessoryBrowserInternal];
  [v7 setManagerDelegate:0];
}

- (void)_startAccessoryFinderTimer
{
  uint64_t v3 = [(HMDHomeManager *)self workQueue];
  dispatch_source_t v4 = dispatch_source_create(MEMORY[0x263EF8400], 0, 0, v3);
  [(HMDHomeManager *)self setAccessoryFinderTimer:v4];

  id v5 = [(HMDHomeManager *)self accessoryFinderTimer];
  dispatch_time_t v6 = dispatch_time(0, 10000000000);
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);

  objc_initWeak(&location, self);
  uint64_t v7 = [(HMDHomeManager *)self accessoryFinderTimer];
  uint64_t v10 = MEMORY[0x263EF8330];
  uint64_t v11 = 3221225472;
  uint64_t v12 = __44__HMDHomeManager__startAccessoryFinderTimer__block_invoke;
  id v13 = &unk_264A2C170;
  objc_copyWeak(&v14, &location);
  dispatch_source_set_event_handler(v7, &v10);

  int v8 = [(HMDHomeManager *)self accessoryFinderTimer];
  dispatch_resume(v8);

  uint64_t v9 = [(HMDHomeManager *)self accessoryBrowserInternal];
  [v9 setManagerDelegate:self];

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

void __44__HMDHomeManager__startAccessoryFinderTimer__block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _startAccessoryFinderTimerExpired];
    id WeakRetained = v2;
  }
}

- (void)networkMonitorIsUnreachable:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __46__HMDHomeManager_networkMonitorIsUnreachable___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __46__HMDHomeManager_networkMonitorIsUnreachable___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) reachabilityMonitor];
  int v3 = [v2 isEqual:*(void *)(a1 + 40)];

  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    [v4 _reachabilityMonitorChanged:0];
  }
}

- (void)networkMonitorIsReachable:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __44__HMDHomeManager_networkMonitorIsReachable___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __44__HMDHomeManager_networkMonitorIsReachable___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) reachabilityMonitor];
  int v3 = [v2 isEqual:*(void *)(a1 + 40)];

  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    [v4 _reachabilityMonitorChanged:1];
  }
}

- (void)_reachabilityMonitorChanged:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v5 = (void *)MEMORY[0x230FBD990](self, a2);
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    uint64_t v9 = HMFBooleanToString();
    int v10 = 138543618;
    uint64_t v11 = v8;
    __int16 v12 = 2112;
    id v13 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Received network reachability change from system configuration, notifying homes, reachable: %@", (uint8_t *)&v10, 0x16u);
  }
  if (v3 && ![(HMDHomeManager *)v6 ignoreFirstTimeReachabilityChanged]) {
    [(HMDHomeManager *)v6 _electRemoteGatewayForHomesAfterReachabilityChanges];
  }
  [(HMDHomeManager *)v6 _updateHomesAboutNetworkConnectivity:v3];
  [(HMDHomeManager *)v6 setIgnoreFirstTimeReachabilityChanged:0];
}

- (void)_monitorReachability
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  BOOL v3 = [(HMDHomeManager *)self reachabilityMonitor];

  if (!v3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = self;
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      int v24 = 138543362;
      id v25 = v7;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Creating network reachability monitor", (uint8_t *)&v24, 0xCu);
    }
    id v8 = (void *)[objc_alloc(MEMORY[0x263F425B0]) initWithNetAddress:0];
    [(HMDHomeManager *)v5 setReachabilityMonitor:v8];

    uint64_t v9 = [(HMDHomeManager *)v5 reachabilityMonitor];
    [v9 setDelegate:v5];

    int v10 = [(HMDHomeManager *)v5 reachabilityMonitor];
    int v11 = [v10 isReachable];

    if (v11) {
      [(HMDHomeManager *)v5 _reachabilityMonitorChanged:1];
    }
  }
  __int16 v12 = [(HMDHomeManager *)self cloudReachabilityMonitor];

  if (!v12)
  {
    id v13 = [MEMORY[0x263F42608] sharedPreferences];
    uint64_t v14 = [v13 preferenceForKey:@"cloudReachabilityMonitorHostname"];
    uint64_t v15 = [v14 stringValue];

    if (v15) {
      long long v16 = (__CFString *)v15;
    }
    else {
      long long v16 = @"gateway.icloud.com";
    }
    char v17 = (void *)MEMORY[0x230FBD990]();
    uint64_t v18 = self;
    __int16 v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      char v20 = HMFGetLogIdentifier();
      int v24 = 138543618;
      id v25 = v20;
      __int16 v26 = 2112;
      id v27 = v16;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Creating cloud network reachability monitor for host: %@", (uint8_t *)&v24, 0x16u);
    }
    id v21 = (void *)[objc_alloc(MEMORY[0x263F425A0]) initWithHostname:v16];
    char v22 = (void *)[objc_alloc(MEMORY[0x263F425B0]) initWithNetAddress:v21];
    [(HMDHomeManager *)v18 setCloudReachabilityMonitor:v22];

    BOOL v23 = [(HMDHomeManager *)v18 cloudReachabilityMonitor];
    [v23 setDelegate:v18];
  }
}

- (id)eventRouterServerDiagnosticInfo
{
  id v2 = [(HMDHomeManager *)self currentAccessory];
  BOOL v3 = [v2 home];
  id v4 = [v3 eventRouterServerDiagnosticInfo];

  return v4;
}

- (id)currentAccessory
{
  id v2 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    BOOL v3 = v2;
  }
  else {
    BOOL v3 = 0;
  }
  id v4 = v3;

  return v4;
}

- (void)handleVendorInfoUpdated:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  uint64_t v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v9 = [*(id *)(a1 + 32) userInfo];
  int v10 = objc_msgSend(v9, "hmf_arrayForKey:", @"ChangedManufacturer");
  if (v10)
  {
    id v1 = dispatch_group_create();
    v19[0] = 0;
    v19[1] = v19;
    void v19[2] = 0x2020000000;
    char v20 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v2 = [*(id *)(a1 + 40) homes];
    uint64_t v3 = [v2 countByEnumeratingWithState:&v15 objects:v21 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v16;
      do
      {
        uint64_t v5 = 0;
        do
        {
          if (*(void *)v16 != v4) {
            objc_enumerationMutation(v2);
          }
          id v6 = *(void **)(*((void *)&v15 + 1) + 8 * v5);
          dispatch_group_enter(v1);
          v12[0] = MEMORY[0x263EF8330];
          v12[1] = 3221225472;
          void v12[2] = __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_2;
          v12[3] = &unk_264A2B4C0;
          uint64_t v14 = v19;
          id v13 = v1;
          [v6 notifyClientOfVendorInfoUpdatedForManufacturers:v10 withCompletion:v12];

          ++v5;
        }
        while (v3 != v5);
        uint64_t v3 = [v2 countByEnumeratingWithState:&v15 objects:v21 count:16];
      }
      while (v3);
    }

    uint64_t v7 = [*(id *)(a1 + 40) workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_3;
    block[3] = &unk_264A2F0A0;
    void block[4] = *(void *)(a1 + 40);
    void block[5] = v19;
    dispatch_group_notify(v1, v7, block);

    _Block_object_dispose(v19, 8);
  }
}

void __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_2(uint64_t a1, int a2)
{
  if (a2) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_3(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    id v1 = *(void **)(a1 + 32);
    id v2 = [v1 uuid];
    [v1 _updateGenerationCounterWithReason:@"VendorInfoUpdated" sourceUUID:v2 shouldNotifyClients:0];
  }
  id v3 = +[HMDBulletinBoard sharedBulletinBoard];
  [v3 refreshHomeBadgeNumber];
}

- (void)_handleElectDeviceForIDSSession:(id)a3
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 messagePayload];
  id v6 = objc_msgSend(v5, "hmf_dictionaryForKey:", @"kRequiredCapabilitiesKey");

  uint64_t v7 = [v4 messagePayload];
  id v8 = objc_msgSend(v7, "hmf_dictionaryForKey:", @"kRequestedCapabilitiesKey");

  if (isWatch())
  {
    uint64_t v9 = (void *)MEMORY[0x230FBD990]();
    int v10 = self;
    int v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      __int16 v12 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v34 = v12;
      id v13 = "%{public}@### Watch is current device so ignoring IDS Elect";
      uint64_t v14 = v11;
      os_log_type_t v15 = OS_LOG_TYPE_DEBUG;
LABEL_11:
      _os_log_impl(&dword_22F52A000, v14, v15, v13, buf, 0xCu);

      goto LABEL_12;
    }
    goto LABEL_12;
  }
  if (![(HMDHomeManager *)self _capabilitiesAreSupported:v6])
  {
    uint64_t v9 = (void *)MEMORY[0x230FBD990]();
    int v10 = self;
    int v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      __int16 v12 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v34 = v12;
      id v13 = "%{public}@### All capabilities are not met so ignoring IDS Elect";
      uint64_t v14 = v11;
      os_log_type_t v15 = OS_LOG_TYPE_INFO;
      goto LABEL_11;
    }
LABEL_12:

    goto LABEL_17;
  }
  long long v16 = [(HMDHomeManager *)self homes];
  v31[0] = MEMORY[0x263EF8330];
  v31[1] = 3221225472;
  void v31[2] = __50__HMDHomeManager__handleElectDeviceForIDSSession___block_invoke;
  void v31[3] = &unk_264A2B250;
  id v17 = v4;
  id v32 = v17;
  long long v18 = objc_msgSend(v16, "hmf_objectPassingTest:", v31);

  if (v18)
  {
    __int16 v19 = [(HMDHomeManager *)self _scrubRequestedCapabilities:v8 fromMessage:v17];
    char v20 = [(HMDHomeManager *)self _prepareAnswerForRequestedCapabilities:v19];

    id v21 = (void *)MEMORY[0x230FBD990]();
    uint64_t v22 = self;
    BOOL v23 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      int v24 = HMFGetLogIdentifier();
      [v17 shortDescription];
      id v25 = v30 = v21;
      *(_DWORD *)long long buf = 138543874;
      id v34 = v24;
      __int16 v35 = 2114;
      uint64_t v36 = v25;
      __int16 v37 = 2112;
      uint64_t v38 = v20;
      _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Answering %{public}@ request with response: %@", buf, 0x20u);

      id v21 = v30;
    }

    [v17 respondWithPayload:v20];
  }
  else
  {
    __int16 v26 = (void *)MEMORY[0x230FBD990]();
    id v27 = self;
    uint64_t v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      id v29 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v34 = v29;
      _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_ERROR, "%{public}@### Message user not allowed to perform this request", buf, 0xCu);
    }
    char v20 = 0;
  }

LABEL_17:
}

BOOL __50__HMDHomeManager__handleElectDeviceForIDSSession___block_invoke(uint64_t a1, uint64_t a2)
{
  id v2 = [*(id *)(a1 + 32) userForHome:a2];
  BOOL v3 = v2 != 0;

  return v3;
}

- (id)_scrubRequestedCapabilities:(id)a3 fromMessage:(id)a4
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)[v6 mutableCopy];
  uint64_t v9 = [v6 objectForKeyedSubscript:@"kHomeConfigurationVersionKey"];

  if (v9)
  {
    int v10 = objc_msgSend(v6, "hmf_UUIDForKey:", @"kHomeUUID");
    int v11 = [(HMDHomeManager *)self _homeWithUUID:v10];
    if (v11)
    {
      __int16 v12 = [v7 userForHome:v11];

      if (!v12)
      {
        id v13 = (void *)MEMORY[0x230FBD990]();
        uint64_t v14 = self;
        os_log_type_t v15 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          long long v16 = HMFGetLogIdentifier();
          int v19 = 138543362;
          char v20 = v16;
          _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Purging home info request for capabilities from user that is not a part of the home", (uint8_t *)&v19, 0xCu);
        }
        [v8 removeObjectForKey:@"kHomeUUID"];
        [v8 removeObjectForKey:@"kHomeConfigurationVersionKey"];
      }
    }
  }
  id v17 = (void *)[v8 copy];

  return v17;
}

- (id)_prepareAnswerForRequestedCapabilities:(id)a3
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  id v6 = +[HMDHAPMetadata getSharedInstance];
  id v7 = [v4 objectForKeyedSubscript:@"kDeviceClassTypeKey"];

  if (v7)
  {
    id v8 = getDeviceClass();
    [v5 setObject:v8 forKeyedSubscript:@"kDeviceClassTypeKey"];
  }
  uint64_t v9 = [v4 objectForKeyedSubscript:@"kHomedVersionKey"];

  if (v9)
  {
    id v10 = (id)homedVersion;
    [v5 setObject:v10 forKeyedSubscript:@"kHomedVersionKey"];
  }
  int v11 = [v4 objectForKeyedSubscript:@"kHomeConfigurationVersionKey"];

  if (v11)
  {
    __int16 v12 = objc_msgSend(v4, "hmf_UUIDForKey:", @"kHomeUUID");
    id v13 = [(HMDHomeManager *)self currentHomeConfigurations];
    uint64_t v14 = [v13 objectForKeyedSubscript:v12];

    if (v12 && v14)
    {
      os_log_type_t v15 = [v12 UUIDString];
      [v5 setObject:v15 forKeyedSubscript:@"kHomeUUID"];

      [v5 setObject:v14 forKeyedSubscript:@"kHomeConfigurationVersionKey"];
    }
    else
    {
      long long v16 = (void *)MEMORY[0x230FBD990]();
      id v17 = self;
      long long v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        int v19 = HMFGetLogIdentifier();
        int v27 = 138543874;
        uint64_t v28 = v19;
        __int16 v29 = 2114;
        __int16 v30 = v12;
        __int16 v31 = 2114;
        id v32 = v14;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Home UUID %{public}@ or Configuration Version %{public}@ is nil", (uint8_t *)&v27, 0x20u);
      }
    }
  }
  if (v6)
  {
    char v20 = [v6 version];
    [v5 setObject:v20 forKeyedSubscript:@"kMetadataInfoVersionKey"];

    uint64_t v21 = [v6 schemaVersion];
    [v5 setObject:v21 forKeyedSubscript:@"kMetadataInfoSchemaVersionKey"];

    uint64_t v22 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v6, "incomplete") ^ 1);
    [v5 setObject:v22 forKeyedSubscript:@"kMetadataInfoCompletenessKey"];
  }
  BOOL v23 = [v4 objectForKeyedSubscript:@"kHomedSupportedFeaturesKey"];

  if (v23)
  {
    id v24 = (id)homedSupportedFeatures;
    [v5 setObject:v24 forKeyedSubscript:@"kHomedSupportedFeaturesKey"];
  }
  id v25 = (void *)[v5 copy];

  return v25;
}

- (BOOL)_capabilitiesAreSupported:(id)a3
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    id v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v56 = v8;
    __int16 v57 = 2114;
    id v58 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Checking for capabilities %{public}@", buf, 0x16u);
  }
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id v9 = v4;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v50 objects:v61 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v51;
    uint64_t v44 = *(void *)v51;
    uint64_t v45 = v6;
    while (2)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v51 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void **)(*((void *)&v50 + 1) + 8 * i);
        if (objc_msgSend(v14, "isEqualToString:", @"kDeviceClassTypeKey", v44, v45))
        {
          os_log_type_t v15 = objc_msgSend(v9, "hmf_stringForKey:", @"kDeviceClassTypeKey");
          long long v16 = getDeviceClass();
          char v17 = [v15 isEqualToString:v16];

          if ((v17 & 1) == 0) {
            goto LABEL_38;
          }
        }
        else if ([v14 isEqualToString:@"kHomedVersionKey"])
        {
          long long v18 = objc_msgSend(v9, "hmf_numberForKey:", @"kHomedVersionKey");
          id v19 = (id)homedVersion;
          uint64_t v20 = [v18 compare:v19];

          if (v20 == 1) {
            goto LABEL_38;
          }
        }
        else
        {
          if ([v14 isEqualToString:@"kHomeUUID"])
          {
            objc_msgSend(v9, "hmf_UUIDForKey:", @"kHomeUUID");
            id v21 = (id)objc_claimAutoreleasedReturnValue();
            uint64_t v22 = [(HMDHomeManager *)v6 currentHomeConfigurations];
            id v23 = [v22 objectForKeyedSubscript:v21];

            if (!v21 || !v23)
            {
              id v40 = (void *)MEMORY[0x230FBD990]();
              uint64_t v41 = v6;
              long long v42 = HMFGetOSLogHandle();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                long long v43 = HMFGetLogIdentifier();
                *(_DWORD *)long long buf = 138543874;
                uint64_t v56 = v43;
                __int16 v57 = 2114;
                id v58 = v21;
                __int16 v59 = 2114;
                id v60 = v23;
                _os_log_impl(&dword_22F52A000, v42, OS_LOG_TYPE_INFO, "%{public}@Home UUID %{public}@ or Configuration Version %{public}@ is nil", buf, 0x20u);
              }
LABEL_37:

LABEL_38:
              BOOL v34 = 0;
              goto LABEL_40;
            }
          }
          else
          {
            if (![v14 isEqualToString:@"kHomedSupportedFeaturesKey"]) {
              goto LABEL_38;
            }
            id v24 = objc_msgSend(v9, "hmf_arrayForKey:", @"kHomedSupportedFeaturesKey");
            id v23 = (id)homedSupportedFeatures;
            id v25 = (void *)MEMORY[0x230FBD990]();
            __int16 v26 = v6;
            int v27 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v28 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543874;
              uint64_t v56 = v28;
              __int16 v57 = 2114;
              id v58 = v24;
              __int16 v59 = 2114;
              id v60 = v23;
              _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_DEBUG, "%{public}@Checking for required features: %{public}@, ours: %{public}@", buf, 0x20u);
            }
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            id v21 = v24;
            uint64_t v29 = [v21 countByEnumeratingWithState:&v46 objects:v54 count:16];
            if (v29)
            {
              uint64_t v30 = v29;
              uint64_t v31 = *(void *)v47;
              while (2)
              {
                for (uint64_t j = 0; j != v30; ++j)
                {
                  if (*(void *)v47 != v31) {
                    objc_enumerationMutation(v21);
                  }
                  uint64_t v33 = *(void **)(*((void *)&v46 + 1) + 8 * j);
                  if (([v23 containsObject:v33] & 1) == 0)
                  {
                    __int16 v35 = (void *)MEMORY[0x230FBD990]();
                    uint64_t v36 = v26;
                    __int16 v37 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
                    {
                      uint64_t v38 = HMFGetLogIdentifier();
                      *(_DWORD *)long long buf = 138543618;
                      uint64_t v56 = v38;
                      __int16 v57 = 2114;
                      id v58 = v33;
                      _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@### Feature: %{public}@ not supported", buf, 0x16u);
                    }

                    goto LABEL_37;
                  }
                }
                uint64_t v30 = [v21 countByEnumeratingWithState:&v46 objects:v54 count:16];
                if (v30) {
                  continue;
                }
                break;
              }
            }

            uint64_t v12 = v44;
            id v6 = v45;
          }
        }
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v50 objects:v61 count:16];
      BOOL v34 = 1;
      if (v11) {
        continue;
      }
      break;
    }
  }
  else
  {
    BOOL v34 = 1;
  }
LABEL_40:

  return v34;
}

- (void)_removeConfigurationVersionForHome:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __53__HMDHomeManager__removeConfigurationVersionForHome___block_invoke;
  v7[3] = &unk_264A2F820;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __53__HMDHomeManager__removeConfigurationVersionForHome___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) currentHomeConfigurations];
  [v2 removeObjectForKey:*(void *)(a1 + 40)];
}

- (void)_updateHome:(id)a3 configurationVersion:(int64_t)a4
{
  id v6 = a3;
  id v7 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager__updateHome_configurationVersion___block_invoke;
  block[3] = &unk_264A2E458;
  void block[4] = self;
  id v10 = v6;
  int64_t v11 = a4;
  id v8 = v6;
  dispatch_async(v7, block);
}

void __51__HMDHomeManager__updateHome_configurationVersion___block_invoke(uint64_t a1)
{
  id v3 = [NSNumber numberWithInteger:*(void *)(a1 + 48)];
  id v2 = [*(id *)(a1 + 32) currentHomeConfigurations];
  [v2 setObject:v3 forKeyedSubscript:*(void *)(a1 + 40)];
}

- (void)_handleRequestIsUserUsingHomeKit:(id)a3
{
  v13[2] = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 count];

  if (v6)
  {
    v12[0] = @"kHomeKitInUseKey";
    v12[1] = @"kHomeKitUsingCloudKey";
    v13[0] = MEMORY[0x263EFFA88];
    id v7 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHomeManager accountActive](self, "accountActive"));
    v13[1] = v7;
    id v8 = [NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:2];
  }
  else
  {
    v10[0] = @"kHomeKitInUseKey";
    v10[1] = @"kHomeKitUsingCloudKey";
    v11[0] = MEMORY[0x263EFFA80];
    v11[1] = MEMORY[0x263EFFA80];
    id v8 = [NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:2];
  }
  id v9 = [v4 responseHandler];

  ((void (**)(void, void, void *))v9)[2](v9, 0, v8);
}

- (void)processCloudZoneModelRemoved:(id)a3 message:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 uuid];
  id v9 = [(HMDHomeManager *)self _zoneInformationWithUUID:v8];

  if (v9)
  {
    id v10 = [(HMDHomeManager *)self cloudZones];
    [v10 removeObject:v9];

    int64_t v11 = [v7 transactionResult];
    [v11 markChanged];
    uint64_t v12 = [v9 uuid];
    id v13 = [(HMDHomeManager *)self _homeWithZoneID:v12];

    if (v13)
    {
      uint64_t v14 = +[HMDBackingStoreTransactionOptions defaultCloudOptions];
      [(HMDHomeManager *)self scheduleRemovalForHome:v13 message:0 options:v14];
    }
    if ([v6 requiresHomeManagerUpdate])
    {
      os_log_type_t v15 = [(HMDHomeManager *)self backingStore];
      long long v16 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      char v17 = [v15 transaction:@"kHomeManagerUpdatedKey" options:v16];

      long long v18 = [HMDHomeManagerModel alloc];
      id v19 = [(HMDHomeManager *)self uuid];
      uint64_t v20 = [(HMDBackingStoreModelObject *)v18 initWithObjectChangeType:1 uuid:v19 parentUUID:0];

      id v21 = [(HMDHomeManager *)self cloudZones];
      uint64_t v22 = +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:v21];
      [(HMDHomeManagerModel *)v20 setCloudZoneInformation:v22];

      [v17 add:v20 withMessage:0];
      objc_initWeak(&location, self);
      uint64_t v25 = MEMORY[0x263EF8330];
      uint64_t v26 = 3221225472;
      int v27 = __55__HMDHomeManager_processCloudZoneModelRemoved_message___block_invoke;
      uint64_t v28 = &unk_264A2DE60;
      objc_copyWeak(&v29, &location);
      [v17 save:&v25];
      objc_destroyWeak(&v29);
      objc_destroyWeak(&location);
    }
    objc_msgSend(v7, "respondWithPayload:", 0, v25, v26, v27, v28);

    goto LABEL_9;
  }
  id v23 = [v7 responseHandler];

  if (v23)
  {
    int64_t v11 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    id v24 = [v7 responseHandler];
    ((void (**)(void, void *, void))v24)[2](v24, v11, 0);

LABEL_9:
  }
}

void __55__HMDHomeManager_processCloudZoneModelRemoved_message___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      int v9 = 138543618;
      id v10 = v8;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Update zone information in home manager with error %@", (uint8_t *)&v9, 0x16u);
    }
  }
}

- (void)processCloudZoneModelAdd:(id)a3 message:(id)a4
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 uuid];
  int v9 = [(HMDHomeManager *)self _zoneInformationWithUUID:v8];

  id v10 = (void *)MEMORY[0x230FBD990]();
  __int16 v11 = self;
  id v12 = HMFGetOSLogHandle();
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
  if (v9)
  {
    if (v13)
    {
      uint64_t v14 = HMFGetLogIdentifier();
      os_log_type_t v15 = [v6 ownerName];
      *(_DWORD *)long long buf = 138543618;
      BOOL v34 = v14;
      __int16 v35 = 2112;
      uint64_t v36 = v15;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Processing zone model update %@", buf, 0x16u);
    }
    [(HMDCloudZoneInformation *)v9 updateCloudZoneInformationWithModel:v6 message:v7];
  }
  else
  {
    if (v13)
    {
      long long v16 = HMFGetLogIdentifier();
      char v17 = [v6 ownerName];
      *(_DWORD *)long long buf = 138543618;
      BOOL v34 = v16;
      __int16 v35 = 2112;
      uint64_t v36 = v17;
      _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Processing zone model add %@", buf, 0x16u);
    }
    long long v18 = [HMDCloudZoneInformation alloc];
    id v19 = [v6 ownerName];
    uint64_t v20 = [v6 uuid];
    int v9 = [(HMDCloudZoneInformation *)v18 initWithOwnerName:v19 uuid:v20];

    [(HMDCloudZoneInformation *)v9 updateCloudZoneInformationWithModel:v6 message:v7];
    id v21 = [(HMDHomeManager *)v11 cloudZones];
    [v21 addObject:v9];
  }
  uint64_t v22 = [v7 transactionResult];
  [v22 markChanged];
  if ([v6 requiresHomeManagerUpdate])
  {
    id v23 = [(HMDHomeManager *)v11 backingStore];
    id v24 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    uint64_t v25 = [v23 transaction:@"kHomeManagerUpdatedKey" options:v24];

    uint64_t v26 = [HMDHomeManagerModel alloc];
    int v27 = [(HMDHomeManager *)v11 uuid];
    uint64_t v28 = [(HMDBackingStoreModelObject *)v26 initWithObjectChangeType:1 uuid:v27 parentUUID:0];

    id v29 = [(HMDHomeManager *)v11 cloudZones];
    uint64_t v30 = +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:v29];
    [(HMDHomeManagerModel *)v28 setCloudZoneInformation:v30];

    [v25 add:v28 withMessage:0];
    objc_initWeak((id *)buf, v11);
    v31[0] = MEMORY[0x263EF8330];
    v31[1] = 3221225472;
    void v31[2] = __51__HMDHomeManager_processCloudZoneModelAdd_message___block_invoke;
    void v31[3] = &unk_264A2DE60;
    objc_copyWeak(&v32, (id *)buf);
    [v25 save:v31];
    objc_destroyWeak(&v32);
    objc_destroyWeak((id *)buf);
  }
  [v7 respondWithPayload:0];
}

void __51__HMDHomeManager_processCloudZoneModelAdd_message___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = WeakRetained;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      int v9 = 138543618;
      id v10 = v8;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Update zone information in home manager with error %@", (uint8_t *)&v9, 0x16u);
    }
  }
}

- (void)_removeCloudZone:(id)a3 updateHomeManager:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  if (v6)
  {
    id v14 = v6;
    id v7 = [(HMDHomeManager *)self _zoneInformationWithUUID:v6];
    if (v7)
    {
      id v8 = [(HMDHomeManager *)self backingStore];
      int v9 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      id v10 = [v8 transaction:@"kHomeManagerCloudZoneRemovedKey" options:v9];

      __int16 v11 = [HMDCloudZoneInformationModel alloc];
      id v12 = [(HMDHomeManager *)self uuid];
      uint64_t v13 = [(HMDBackingStoreModelObject *)v11 initWithObjectChangeType:3 uuid:v14 parentUUID:v12];

      [(HMDCloudZoneInformationModel *)v13 setRequiresHomeManagerUpdate:v4];
      [v10 add:v13 withMessage:0];
      [v10 run];
    }
    id v6 = v14;
  }
}

- (void)addTransactionAfterPush:(id)a3
{
  if (a3)
  {
    id v4 = a3;
    id v5 = [(HMDHomeManager *)self backingStore];
    id v6 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
    id v12 = [v5 transaction:@"kHomeManagerCloudZoneAddedKey" options:v6];

    id v7 = [HMDCloudZoneInformationModel alloc];
    id v8 = [v4 uuid];
    int v9 = [(HMDHomeManager *)self uuid];
    id v10 = [(HMDBackingStoreModelObject *)v7 initWithObjectChangeType:1 uuid:v8 parentUUID:v9];

    __int16 v11 = [v4 ownerName];

    [(HMDCloudZoneInformationModel *)v10 setOwnerName:v11];
    [(HMDCloudZoneInformationModel *)v10 setRequiresHomeManagerUpdate:1];
    [v12 add:v10 withMessage:0];
    [v12 run];
  }
}

- (void)_addCloudZone:(id)a3 ownerName:(id)a4
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  if (v6)
  {
    if (v7)
    {
      int v9 = [(HMDHomeManager *)self _zoneInformationWithUUID:v6];
      if (!v9)
      {
        int v9 = [[HMDCloudZoneInformation alloc] initWithOwnerName:v8 uuid:v6];
        id v10 = [(HMDHomeManager *)self cloudZones];
        [v10 addObject:v9];
      }
    }
    else
    {
      __int16 v11 = (void *)MEMORY[0x230FBD990]();
      id v12 = self;
      uint64_t v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        id v14 = HMFGetLogIdentifier();
        os_log_type_t v15 = [v6 UUIDString];
        int v16 = 138543618;
        char v17 = v14;
        __int16 v18 = 2112;
        id v19 = v15;
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Cannot add zone because the ownerName was not specified, %@", (uint8_t *)&v16, 0x16u);
      }
    }
  }
}

- (BOOL)zoneFetchFailed
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = [(HMDHomeManager *)self cloudZones];
  id v3 = (void *)[v2 copy];

  uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v3);
        }
        if ([*(id *)(*((void *)&v8 + 1) + 8 * i) didFetchFailed])
        {
          LOBYTE(v4) = 1;
          goto LABEL_11;
        }
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v4;
}

- (BOOL)_zonesFetched
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = [(HMDHomeManager *)self cloudZones];
  id v3 = (void *)[v2 copy];

  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        if ([*(id *)(*((void *)&v10 + 1) + 8 * i) isFirstFetch])
        {
          BOOL v8 = 0;
          goto LABEL_11;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  BOOL v8 = 1;
LABEL_11:

  return v8;
}

- (void)processHomeManagerModelUpdate:(id)a3 message:(id)a4
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  if ([v6 propertyWasSet:@"primaryHomeUUID"])
  {
    BOOL v8 = [v6 primaryHomeUUID];

    if (v8)
    {
      id v9 = objc_alloc(MEMORY[0x263F08C38]);
      long long v10 = [v6 primaryHomeUUID];
      long long v11 = (void *)[v9 initWithUUIDString:v10];

      long long v12 = [(HMDHomeManager *)self primaryHomeUUID];
      char v13 = HMFEqualObjects();

      if ((v13 & 1) == 0)
      {
        id v14 = (void *)MEMORY[0x230FBD990]();
        uint64_t v15 = self;
        int v16 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          char v17 = HMFGetLogIdentifier();
          int v22 = 138543618;
          id v23 = v17;
          __int16 v24 = 2112;
          uint64_t v25 = v11;
          _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Applying primary home UUID: %@", (uint8_t *)&v22, 0x16u);
        }
        [(HMDHomeManager *)v15 setPrimaryHomeUUID:v11];
        __int16 v18 = objc_opt_new();
        id v19 = [(HMDHomeManager *)v15 primaryHomeUUID];
        [v18 setObject:v19 forKeyedSubscript:@"HMDPrimaryHomeUUIDKey"];

        uint64_t v20 = [MEMORY[0x263F08A00] defaultCenter];
        [v20 postNotificationName:@"HMDNotificationPrimaryHomeDidChange" object:v15 userInfo:v18];
      }
    }
  }
  id v21 = [v7 transactionResult];
  [v21 markChanged];
  [v7 respondWithSuccess];
}

- (void)_changePrimaryHome:(id)a3
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = [(HMDHomeManager *)self primaryHomeUUID];
    char v6 = HMFEqualObjects();

    if ((v6 & 1) == 0)
    {
      id v7 = (void *)MEMORY[0x230FBD990]();
      BOOL v8 = self;
      id v9 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        long long v10 = HMFGetLogIdentifier();
        long long v11 = [(HMDHomeManager *)v8 primaryHomeUUID];
        int v19 = 138543874;
        uint64_t v20 = v10;
        __int16 v21 = 2112;
        int v22 = v11;
        __int16 v23 = 2112;
        id v24 = v4;
        _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Updating the primary home from %@ to %@", (uint8_t *)&v19, 0x20u);
      }
      long long v12 = [HMDHomeManagerModel alloc];
      char v13 = [(HMDHomeManager *)v8 uuid];
      id v14 = [(HMDBackingStoreModelObject *)v12 initWithObjectChangeType:1 uuid:v13 parentUUID:0];

      uint64_t v15 = [v4 UUIDString];
      [(HMDHomeManagerModel *)v14 setPrimaryHomeUUID:v15];

      int v16 = [(HMDHomeManager *)v8 backingStore];
      char v17 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      __int16 v18 = [v16 transaction:@"HMD.hm" options:v17];

      [v18 add:v14 withMessage:0];
      [v18 run];
    }
  }
}

- (void)_handleRequestSetPrimaryHome:(id)a3
{
  id v16 = a3;
  id v4 = [v16 uuidForKey:@"kHomeUUID"];
  if (v4)
  {
    uint64_t v5 = [(HMDHomeManager *)self _homeWithUUID:v4];
    if (v5)
    {
      char v6 = [HMDHomeManagerModel alloc];
      id v7 = [(HMDHomeManager *)self uuid];
      BOOL v8 = [(HMDBackingStoreModelObject *)v6 initWithObjectChangeType:1 uuid:v7 parentUUID:0];

      id v9 = [v4 UUIDString];
      [(HMDHomeManagerModel *)v8 setPrimaryHomeUUID:v9];

      long long v10 = [(HMDHomeManager *)self backingStore];
      long long v11 = [v16 name];
      long long v12 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
      char v13 = [v10 transaction:v11 options:v12];

      [v13 add:v8 withMessage:v16];
      [v13 run];
    }
    else
    {
      uint64_t v15 = [v16 responseHandler];

      if (!v15)
      {
        uint64_t v5 = 0;
        goto LABEL_10;
      }
      BOOL v8 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      char v13 = [v16 responseHandler];
      ((void (**)(void, HMDHomeManagerModel *, void))v13)[2](v13, v8, 0);
    }
  }
  else
  {
    id v14 = [v16 responseHandler];

    if (!v14) {
      goto LABEL_11;
    }
    uint64_t v5 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    BOOL v8 = [v16 responseHandler];
    (*(void (**)(HMDHomeManagerModel *, void *, void))&v8->super._bsoDataVersionOverride)(v8, v5, 0);
  }

LABEL_10:
LABEL_11:
}

- (void)processHomeModelRemoved:(id)a3 message:(id)a4
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = self;
  long long v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    long long v11 = HMFGetLogIdentifier();
    int v22 = 138543874;
    __int16 v23 = v11;
    __int16 v24 = 2112;
    id v25 = v6;
    __int16 v26 = 2112;
    id v27 = v7;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Removing home model : %@ due to message: %@", (uint8_t *)&v22, 0x20u);
  }
  long long v12 = [v6 uuid];
  if (v12)
  {
    uint64_t v13 = [(HMDHomeManager *)v9 _homeWithUUID:v12];
    if (v13)
    {
      id v14 = (void *)v13;
      uint64_t v15 = [v7 transactionResult];
      BOOL v16 = [v15 source] == 1;

      [(HMDHomeManager *)v9 _removeHome:v14 withMessage:v7 saveToStore:1 notifyUsers:1 shouldRemovePairings:v16];
    }
    else
    {
      int v19 = [v7 responseHandler];

      if (v19)
      {
        uint64_t v20 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:2 userInfo:0];
        __int16 v21 = [v7 responseHandler];
        ((void (**)(void, void *, void))v21)[2](v21, v20, 0);
      }
      id v14 = 0;
    }
    goto LABEL_11;
  }
  char v17 = [v7 responseHandler];

  if (v17)
  {
    id v14 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F0C710] code:20 userInfo:0];
    __int16 v18 = [v7 responseHandler];
    ((void (**)(void, void *, void))v18)[2](v18, v14, 0);

LABEL_11:
  }
}

- (void)_handleRequestRemoveHome:(id)a3
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 uuidForKey:@"kHomeUUID"];
  id v6 = [(HMDHomeManager *)self _homeWithUUID:v5];
  if (v6)
  {
    if ([v4 isEntitledForSPIAccess])
    {
      [(HMDHomeManager *)self _handleRemoveHomeOperation:v6 message:v4];
    }
    else
    {
      long long v10 = (void *)MEMORY[0x230FBD990]();
      long long v11 = self;
      long long v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        int v22 = v13;
        __int16 v23 = 2112;
        __int16 v24 = v6;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Presenting delete home confirmation dialog to user for %@", buf, 0x16u);
      }
      id v14 = +[HMDUIDialogPresenter sharedUIDialogPresenter];
      uint64_t v15 = [v6 name];
      BOOL v16 = [(HMDHomeManager *)v11 workQueue];
      v17[0] = MEMORY[0x263EF8330];
      v17[1] = 3221225472;
      v17[2] = __43__HMDHomeManager__handleRequestRemoveHome___block_invoke;
      v17[3] = &unk_264A2B498;
      void v17[4] = v11;
      id v18 = v5;
      id v19 = v6;
      id v20 = v4;
      [v14 requestUserPermissionForDeletionOfHomeWithName:v15 withContext:v18 queue:v16 completionHandler:v17];
    }
  }
  else
  {
    id v7 = [v4 responseHandler];

    if (v7)
    {
      BOOL v8 = [v4 responseHandler];
      id v9 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      ((void (**)(void, void *, void))v8)[2](v8, v9, 0);
    }
  }
}

void __43__HMDHomeManager__handleRequestRemoveHome___block_invoke(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = HMFGetLogIdentifier();
    BOOL v8 = (void *)v7;
    id v9 = @"delete home";
    if (a2) {
      id v9 = @"cancel";
    }
    int v21 = 138543618;
    uint64_t v22 = v7;
    __int16 v23 = 2112;
    __int16 v24 = v9;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@User selected %@", (uint8_t *)&v21, 0x16u);
  }
  if (a2)
  {
    long long v10 = [*(id *)(a1 + 56) responseHandler];

    if (!v10) {
      return;
    }
    long long v11 = [*(id *)(a1 + 56) responseHandler];
    long long v12 = [MEMORY[0x263F087E8] hmErrorWithCode:23];
    ((void (**)(void, void *, void))v11)[2](v11, v12, 0);
  }
  else
  {
    uint64_t v13 = [*(id *)(a1 + 32) _homeWithUUID:*(void *)(a1 + 40)];
    if (v13)
    {
      long long v11 = (void (**)(void, void, void))v13;
      [*(id *)(a1 + 32) _handleRemoveHomeOperation:*(void *)(a1 + 48) message:*(void *)(a1 + 56)];
    }
    else
    {
      id v14 = (void *)MEMORY[0x230FBD990]();
      id v15 = *(id *)(a1 + 32);
      BOOL v16 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        char v17 = HMFGetLogIdentifier();
        id v18 = *(__CFString **)(a1 + 40);
        int v21 = 138543618;
        uint64_t v22 = (uint64_t)v17;
        __int16 v23 = 2112;
        __int16 v24 = v18;
        _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Home Removal failed because no home found for %@", (uint8_t *)&v21, 0x16u);
      }
      long long v11 = [*(id *)(a1 + 56) responseHandler];

      if (v11)
      {
        id v19 = [*(id *)(a1 + 56) responseHandler];
        id v20 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
        ((void (**)(void, void *, void))v19)[2](v19, v20, 0);

        long long v11 = 0;
      }
    }
  }
}

- (id)_remoteUserForMessage:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  uint64_t v7 = [v6 senderContext];
  BOOL v8 = [v7 accountHandle];

  if (v8)
  {
    id v9 = [HMDUser alloc];
    long long v10 = [v6 senderContext];
    long long v11 = [v10 accountHandle];
    long long v12 = [(HMDUser *)v9 initWithAccountHandle:v11 home:0 pairingIdentity:0 privilege:2];
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = self;
    id v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      BOOL v16 = HMFGetLogIdentifier();
      int v18 = 138543618;
      id v19 = v16;
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Received message that a shared user migrated to HH2, but there's insufficient info about the sender: %@", (uint8_t *)&v18, 0x16u);
    }
    long long v12 = 0;
  }

  return v12;
}

- (void)_handleSharedUserMovedToHH2:(id)a3
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v4 = [(HMDHomeManager *)self _remoteUserForMessage:a3];
  if (v4)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v5 = [(HMDHomeManager *)self homes];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v11;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v11 != v8) {
            objc_enumerationMutation(v5);
          }
          [*(id *)(*((void *)&v10 + 1) + 8 * v9++) resendOutgoingInvitationToUser:v4];
        }
        while (v7 != v9);
        uint64_t v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v7);
    }
  }
}

- (BOOL)pendingInviteExistsForSenderOfMessage:(id)a3
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v4 = [(HMDHomeManager *)self _remoteUserForMessage:a3];
  if (v4)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v5 = [(HMDHomeManager *)self homes];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v12;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v9 = [*(id *)(*((void *)&v11 + 1) + 8 * i) outgoingInvitationToResendForUser:v4];

          if (v9)
          {
            LOBYTE(v6) = 1;
            goto LABEL_12;
          }
        }
        uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    LOBYTE(v6) = 0;
  }

  return v6;
}

- (void)_handleRemoveAllUsersFromAccessories:(id)a3
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  uint64_t v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v27 = v8;
    __int16 v28 = 2112;
    id v29 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Received request to remove pairings from all the accessories: %@", buf, 0x16u);
  }
  uint64_t v9 = [v4 uuidForKey:@"kHomeUUID"];
  long long v10 = [(HMDHomeManager *)v6 _homeWithUUID:v9];
  if (v10)
  {
    long long v11 = dispatch_get_global_queue(25, 0);
    dispatch_group_t v12 = dispatch_group_create();
    long long v13 = [v10 accessories];
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 3221225472;
    void v21[2] = __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke;
    v21[3] = &unk_264A2B470;
    long long v14 = v12;
    uint64_t v22 = v14;
    id v23 = v11;
    __int16 v24 = v6;
    id v25 = v10;
    uint64_t v15 = v11;
    objc_msgSend(v13, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v21);

    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke_898;
    block[3] = &unk_264A2F2F8;
    int v18 = v14;
    id v19 = v6;
    id v20 = v4;
    uint64_t v16 = v14;
    dispatch_async(v15, block);
  }
  else
  {
    uint64_t v15 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v4 respondWithError:v15];
  }
}

void __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke_2;
  v7[3] = &unk_264A2E610;
  id v4 = *(NSObject **)(a1 + 40);
  id v5 = *(void **)(a1 + 56);
  void v7[4] = *(void *)(a1 + 48);
  id v8 = v3;
  id v9 = v5;
  id v10 = *(id *)(a1 + 32);
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke_898(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id v2 = *(NSObject **)(a1 + 32);
  dispatch_time_t v3 = dispatch_time(0, 5000000000);
  if (dispatch_group_wait(v2, v3))
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 40);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = HMFGetLogIdentifier();
      int v9 = 138543362;
      id v10 = v7;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Timed out while waiting to remove the pairing from the accessories.", (uint8_t *)&v9, 0xCu);
    }
  }
  return [*(id *)(a1 + 48) respondWithSuccess];
}

void __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke_2(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = [*(id *)(a1 + 48) name];
    *(_DWORD *)long long buf = 138543874;
    int v18 = v5;
    __int16 v19 = 2112;
    uint64_t v20 = v6;
    __int16 v21 = 2112;
    uint64_t v22 = v7;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to remove all users and cloud data from accessory: %@ for home: %@", buf, 0x20u);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  id v8 = *(void **)(a1 + 48);
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  v13[2] = __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke_896;
  void v13[3] = &unk_264A2F2F8;
  id v10 = *(id *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 32);
  dispatch_group_t v12 = *(void **)(a1 + 40);
  id v14 = v10;
  uint64_t v15 = v11;
  id v16 = v12;
  [v8 removeAllUsersAndCloudDataFromAccessory:v9 completionHandler:v13];
}

void __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke_896(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 40);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    uint64_t v6 = *(void *)(a1 + 48);
    int v7 = 138543618;
    id v8 = v5;
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Finished removing all users from accessory: %@", (uint8_t *)&v7, 0x16u);
  }
}

- (void)_handleRemoveHomeOperation:(id)a3 message:(id)a4
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 administratorHandler];
  if ([v6 isOwnerUser] && objc_msgSend(v8, "shouldRelayMessages"))
  {
    __int16 v9 = (void *)MEMORY[0x263F42590];
    uint64_t v10 = [v7 messagePayload];
    uint64_t v11 = (void *)[v10 copy];
    v26[0] = MEMORY[0x263EF8330];
    v26[1] = 3221225472;
    void v26[2] = __53__HMDHomeManager__handleRemoveHomeOperation_message___block_invoke;
    v26[3] = &unk_264A2D870;
    void v26[4] = self;
    id v27 = v7;
    dispatch_group_t v12 = [v9 messageWithName:@"kRemoveAllUsersFromAccessoriesRequestKey" messagePayload:v11 responseHandler:v26];

    id v25 = 0;
    long long v13 = [v8 operationForMessage:v12 error:&v25];
    id v14 = v25;
    uint64_t v15 = (void *)MEMORY[0x230FBD990]();
    id v16 = self;
    char v17 = HMFGetOSLogHandle();
    int v18 = v17;
    if (v13)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        __int16 v19 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        id v29 = v19;
        __int16 v30 = 2112;
        id v31 = v6;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Adding HMDHomeAdministratorConfigurationOperation to remove home: %@", buf, 0x16u);
      }
      [v8 addOperation:v13];
    }
    else
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        __int16 v24 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543874;
        id v29 = v24;
        __int16 v30 = 2112;
        id v31 = v6;
        __int16 v32 = 2112;
        id v33 = v14;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to create operation to remove home: %@ with error: %@", buf, 0x20u);
      }
    }
  }
  else
  {
    uint64_t v20 = (void *)MEMORY[0x230FBD990]();
    __int16 v21 = self;
    uint64_t v22 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v29 = v23;
      __int16 v30 = 2112;
      id v31 = v6;
      _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Removing Home locally : %@", buf, 0x16u);
    }
    [(HMDHomeManager *)v21 dmHandleRequestRemoveHome:v7];
  }
}

void __53__HMDHomeManager__handleRemoveHomeOperation_message___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = *(id *)(a1 + 32);
  __int16 v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = HMFGetLogIdentifier();
    int v11 = 138543874;
    dispatch_group_t v12 = v10;
    __int16 v13 = 2112;
    id v14 = v6;
    __int16 v15 = 2112;
    id v16 = v5;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Accessory pairing removal finished with : %@, error: %@", (uint8_t *)&v11, 0x20u);
  }
  [*(id *)(a1 + 32) dmHandleRequestRemoveHome:*(void *)(a1 + 40)];
}

- (void)scheduleRemovalForHome:(id)a3 message:(id)a4 options:(id)a5
{
  location[3] = *(id *)MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (v8)
  {
    id v11 = v8;
    dispatch_group_t v12 = [v11 name];
    uint64_t v13 = [v9 name];
    id v14 = (void *)v13;
    __int16 v15 = @"kHomeManagerUpdatedKey";
    if (v13) {
      __int16 v15 = (__CFString *)v13;
    }
    id v16 = v15;

    uint64_t v17 = [(HMDHomeManager *)self syncManager];
    objc_initWeak(location, self);
    v27[0] = MEMORY[0x263EF8330];
    v27[1] = 3221225472;
    v27[2] = __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke;
    v27[3] = &unk_264A2B448;
    objc_copyWeak(&v34, location);
    id v18 = v11;
    id v28 = v18;
    __int16 v19 = v16;
    id v29 = v19;
    id v30 = v10;
    id v31 = v9;
    id v20 = v12;
    id v32 = v20;
    id v21 = v17;
    id v33 = v21;
    [v21 pauseAndWaitForCurrentOperationCompletion:v27];

    objc_destroyWeak(&v34);
    objc_destroyWeak(location);

    goto LABEL_9;
  }
  uint64_t v22 = (void *)MEMORY[0x230FBD990]();
  uint64_t v23 = self;
  __int16 v24 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    id v25 = HMFGetLogIdentifier();
    LODWORD(location[0]) = 138543362;
    *(id *)((char *)location + 4) = v25;
    _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Cannot schedule removal of home because the home was not specified", (uint8_t *)location, 0xCu);
  }
  __int16 v26 = [v9 responseHandler];

  if (v26)
  {
    id v18 = [v9 responseHandler];
    id v20 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    (*((void (**)(id, id, void))v18 + 2))(v18, v20, 0);
LABEL_9:
  }
}

void __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke(uint64_t a1)
{
  id v2 = (id *)(a1 + 80);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained)
  {
    id v4 = [*(id *)(a1 + 32) deletedBackingStoreObject];
    id v5 = [WeakRetained backingStore];
    id v6 = [v5 transaction:*(void *)(a1 + 40) options:*(void *)(a1 + 48)];

    [v6 add:v4 withMessage:*(void *)(a1 + 56)];
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    v7[2] = __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke_2;
    v7[3] = &unk_264A2B420;
    objc_copyWeak(&v10, v2);
    id v8 = *(id *)(a1 + 64);
    id v9 = *(id *)(a1 + 72);
    [v6 run:v7];

    objc_destroyWeak(&v10);
  }
  else
  {
    [*(id *)(a1 + 72) resume];
  }
}

void __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = WeakRetained;
  id v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    id v8 = HMFGetLogIdentifier();
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138543874;
    id v11 = v8;
    __int16 v12 = 2112;
    uint64_t v13 = v9;
    __int16 v14 = 2112;
    id v15 = v3;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Resume sync manager after finishing removing home %@ - error %@", (uint8_t *)&v10, 0x20u);
  }
  [*(id *)(a1 + 40) resume];
}

- (void)_removeHome:(id)a3 withMessage:(id)a4 saveToStore:(BOOL)a5 notifyUsers:(BOOL)a6 shouldRemovePairings:(BOOL)a7
{
  BOOL v32 = a7;
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v11 = a3;
  id v12 = a4;
  uint64_t v13 = [v11 uuid];
  __int16 v14 = [v11 owner];
  id v15 = [v14 account];
  uint64_t v16 = [v15 senderCorrelationIdentifier];

  uint64_t v17 = [(HMDHomeManager *)self pendingHomesBeingRemoved];
  [v17 addObject:v13];

  id v18 = [v12 transactionResult];
  __int16 v19 = (void *)MEMORY[0x230FBD990]([v18 markChanged]);
  id v20 = self;
  id v21 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v31 = v18;
    uint64_t v22 = v30 = a5;
    [v11 name];
    v24 = BOOL v23 = a6;
    *(_DWORD *)long long buf = 138543618;
    uint64_t v41 = v22;
    __int16 v42 = 2112;
    long long v43 = v24;
    _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Removing all accessories for home %@", buf, 0x16u);

    a6 = v23;
    a5 = v30;
    id v18 = v31;
  }

  id v25 = [(HMDHomeManager *)v20 workQueue];
  v33[0] = MEMORY[0x263EF8330];
  v33[1] = 3221225472;
  v33[2] = __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke;
  v33[3] = &unk_264A2B3F8;
  v33[4] = v20;
  id v34 = v11;
  BOOL v38 = a6;
  id v35 = v13;
  id v36 = v16;
  BOOL v39 = a5;
  id v37 = v12;
  id v26 = v12;
  id v27 = v16;
  id v28 = v13;
  id v29 = v11;
  [v29 removeAllHomeContentsAndAccessoryPairings:v32 queue:v25 completionHandler:v33];
}

void __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke(uint64_t a1)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = HMFGetLogIdentifier();
    id v6 = [*(id *)(a1 + 40) name];
    *(_DWORD *)long long buf = 138543618;
    id v80 = v5;
    __int16 v81 = 2112;
    id v82 = v6;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Removing home %@", buf, 0x16u);
  }
  id v7 = +[HMDBulletinBoard sharedBulletinBoard];
  [v7 removeBulletinsForHome:*(void *)(a1 + 40)];
  if (*(unsigned char *)(a1 + 72)) {
    [*(id *)(a1 + 32) _removeAllUsersOfHome:*(void *)(a1 + 40)];
  }
  [*(id *)(a1 + 40) unconfigure];
  [*(id *)(a1 + 32) removeHome:*(void *)(a1 + 40)];
  id v8 = [*(id *)(a1 + 32) pendingHomesBeingRemoved];
  [v8 removeObject:*(void *)(a1 + 48)];

  [*(id *)(a1 + 40) stopThreadNetwork:0];
  if ([*(id *)(a1 + 40) isOwnerUser])
  {
    uint64_t v9 = [*(id *)(a1 + 32) homes];
    char v10 = objc_msgSend(v9, "na_any:", &__block_literal_global_894);

    if ((v10 & 1) == 0)
    {
      id v11 = [*(id *)(a1 + 32) workQueue];
      uint64_t v71 = MEMORY[0x263EF8330];
      uint64_t v72 = 3221225472;
      char v73 = __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_2;
      unint64_t v74 = &unk_264A2F820;
      id v12 = *(void **)(a1 + 40);
      uint64_t v75 = *(void *)(a1 + 32);
      id v76 = v12;
      dispatch_async(v11, &v71);
    }
  }
  uint64_t v13 = objc_msgSend(*(id *)(a1 + 40), "uuid", v71, v72, v73, v74, v75);
  __int16 v14 = [*(id *)(a1 + 32) primaryHomeUUID];
  int v15 = [v13 isEqual:v14];

  if (v15)
  {
    uint64_t v16 = [*(id *)(a1 + 32) homes];
    uint64_t v17 = [v16 firstObject];

    id v18 = *(void **)(a1 + 32);
    __int16 v19 = [v17 uuid];
    [v18 _changePrimaryHome:v19];
  }
  id v20 = [*(id *)(a1 + 40) uuid];
  id v21 = [*(id *)(a1 + 32) currentHomeUUID];
  int v22 = [v20 isEqual:v21];

  if (v22) {
    [*(id *)(a1 + 32) _updateCurrentHomeIfNecessary];
  }
  [*(id *)(a1 + 32) updateHomeKitInUsePreferences];
  BOOL v23 = [*(id *)(a1 + 32) nameValidator];
  __int16 v24 = [*(id *)(a1 + 40) uuid];
  id v25 = (id)[v23 removeNamespace:v24];

  id v26 = *(void **)(a1 + 32);
  id v27 = [*(id *)(a1 + 40) uuid];
  [v26 _removeConfigurationVersionForHome:v27];

  id v28 = *(void **)(a1 + 32);
  id v29 = [*(id *)(a1 + 40) name];
  BOOL v30 = [*(id *)(a1 + 32) uuid];
  id v31 = [v28 removeName:v29 namespace:v30];

  if (v31)
  {
    BOOL v32 = (void *)MEMORY[0x230FBD990]();
    id v33 = *(id *)(a1 + 32);
    id v34 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      id v35 = HMFGetLogIdentifier();
      id v36 = [*(id *)(a1 + 40) name];
      *(_DWORD *)long long buf = 138543618;
      id v80 = v35;
      __int16 v81 = 2112;
      id v82 = v36;
      _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove home name '%@' from homeManager namespace", buf, 0x16u);
    }
  }
  if (([*(id *)(a1 + 40) isOwnerUser] & 1) == 0)
  {
    isWatch();
    id v37 = [*(id *)(a1 + 32) uuidsOfRemovedHomes];
    char v38 = [v37 containsObject:*(void *)(a1 + 48)];

    if ((v38 & 1) == 0)
    {
      BOOL v39 = [*(id *)(a1 + 32) uuidsOfRemovedHomes];
      [v39 addObject:*(void *)(a1 + 48)];

      id v40 = (void *)MEMORY[0x230FBD990]();
      id v41 = *(id *)(a1 + 32);
      __int16 v42 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        long long v43 = HMFGetLogIdentifier();
        uint64_t v44 = [*(id *)(a1 + 48) UUIDString];
        *(_DWORD *)long long buf = 138543618;
        id v80 = v43;
        __int16 v81 = 2112;
        id v82 = v44;
        _os_log_impl(&dword_22F52A000, v42, OS_LOG_TYPE_INFO, "%{public}@Adding home with UUID %@ to the uuids of guest homes removed locally", buf, 0x16u);
      }
    }
    [*(id *)(a1 + 32) _trackRemovedHomeUserMergeId:*(void *)(a1 + 56)];
  }
  if (*(unsigned char *)(a1 + 73))
  {
    uint64_t v45 = *(void **)(a1 + 32);
    long long v46 = [*(id *)(a1 + 64) name];
    [v45 assistantSyncDataChanged:v46];
  }
  long long v47 = [*(id *)(a1 + 64) transactionResult];
  BOOL v48 = [v47 source] == 1;
  long long v49 = *(void **)(a1 + 32);
  long long v50 = [*(id *)(a1 + 40) zoneID];
  [v49 _removeCloudZone:v50 updateHomeManager:v48];

  long long v51 = [*(id *)(a1 + 32) compositeSettingsControllerManager];
  long long v52 = [*(id *)(a1 + 40) uuid];
  [v51 removeHomeZone:v52];

  long long v53 = (void *)MEMORY[0x230FBD990]();
  id v54 = *(id *)(a1 + 32);
  uint64_t v55 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
  {
    uint64_t v56 = HMFGetLogIdentifier();
    __int16 v57 = [*(id *)(a1 + 40) name];
    *(_DWORD *)long long buf = 138543618;
    id v80 = v56;
    __int16 v81 = 2112;
    id v82 = v57;
    _os_log_impl(&dword_22F52A000, v55, OS_LOG_TYPE_INFO, "%{public}@Removed home: %@", buf, 0x16u);
  }
  [*(id *)(a1 + 64) respondWithSuccess];
  uint64_t v58 = *(void *)(a1 + 40);
  uint64_t v77 = @"HMDHomeNotificationKey";
  uint64_t v78 = v58;
  __int16 v59 = [NSDictionary dictionaryWithObjects:&v78 forKeys:&v77 count:1];
  logAndPostNotification(@"HMDHomeRemovedNotification", *(void **)(a1 + 32), v59);
  [*(id *)(a1 + 40) handleHomeWasRemoved];
  id v60 = [*(id *)(a1 + 32) lastEventStoreController];
  long long v61 = [*(id *)(a1 + 40) uuid];
  [v60 didRemoveHome:v61];

  if (([*(id *)(a1 + 40) isOwnerUser] & 1) == 0)
  {
    uint64_t v62 = [*(id *)(a1 + 32) homeSharedUserCloudShareManager];
    long long v63 = [*(id *)(a1 + 40) uuid];
    [v62 removeShareForSharedUserDataWithHomeModelID:v63];

    long long v64 = [*(id *)(a1 + 32) homeSharedUserCloudShareManager];
    unint64_t v65 = [*(id *)(a1 + 40) uuid];
    [v64 leaveShareWithSharedHomeModelID:v65];
  }
  id v66 = (void *)MEMORY[0x230FBD990]();
  id v67 = *(id *)(a1 + 32);
  id v68 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
  {
    __int16 v69 = HMFGetLogIdentifier();
    __int16 v70 = *(void **)(a1 + 40);
    *(_DWORD *)long long buf = 138543618;
    id v80 = v69;
    __int16 v81 = 2112;
    id v82 = v70;
    _os_log_impl(&dword_22F52A000, v68, OS_LOG_TYPE_INFO, "%{public}@The home should be gone : %@", buf, 0x16u);
  }
}

void __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_2(uint64_t a1)
{
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_3;
  aBlock[3] = &unk_264A2F3E8;
  void aBlock[4] = *(void *)(a1 + 32);
  id v2 = _Block_copy(aBlock);
  [*(id *)(a1 + 40) removeThreadNetworkPreferredNetworkWithCompletion:v2];
}

void __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)MEMORY[0x230FBD990]();
    id v5 = *(id *)(a1 + 32);
    id v6 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = HMFGetLogIdentifier();
      int v8 = 138543362;
      uint64_t v9 = v7;
      _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to delete preferred Thread network credentials - continuing anyways", (uint8_t *)&v8, 0xCu);
    }
  }
}

uint64_t __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_892(uint64_t a1, void *a2)
{
  return [a2 isOwnerUser];
}

- (void)processHomeModelAdd:(id)a3 message:(id)a4
{
  v258[1] = *MEMORY[0x263EF8340];
  id v7 = a3;
  id v8 = a4;
  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    uint64_t v10 = logger;
    id v11 = [v7 uuid];
    id v12 = [v7 parentUUID];
    *(_DWORD *)long long buf = 138412546;
    v248 = v11;
    __int16 v249 = 2112;
    v250 = v12;
    _os_signpost_emit_with_name_impl(&dword_22F52A000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "identifier=%{signpost.description:attribute}@ parentIdentifier=%{signpost.description:attribute}@ ", buf, 0x16u);
  }
  uint64_t v13 = [(HMDHomeManager *)self setupActivity];

  if (v13)
  {
    __int16 v14 = [(HMDHomeManager *)self setupActivity];
    uint64_t v257 = @"HMDHomeModelUUID";
    int v15 = [v7 uuid];
    uint64_t v16 = HMDailyRotatedUUID();
    uint64_t v17 = [v16 UUIDString];
    id v18 = (void *)v17;
    __int16 v19 = @"no uuid";
    if (v17) {
      __int16 v19 = (__CFString *)v17;
    }
    v258[0] = v19;
    id v20 = (id)[NSDictionary dictionaryWithObjects:v258 forKeys:&v257 count:1];

    id v21 = [(HMDHomeManager *)self setupActivity];
    [v21 markWithReason:@"HMDHomeManager.processHomeModelAdd.processHomeModelAdd"];
  }
  int v22 = [v7 name];
  if (v22)
  {
    id v23 = objc_alloc(MEMORY[0x263F425F0]);
    __int16 v24 = [v7 ownerPublicKey];
    id v25 = (void *)[v23 initWithPairingKeyData:v24];

    id v26 = objc_alloc(MEMORY[0x263F425E8]);
    id v27 = [v7 ownerName];
    uint64_t v28 = [v26 initWithIdentifier:v27 publicKey:v25 privateKey:0];

    id v29 = [v7 ownerUserID];
    BOOL v30 = v7;
    id v31 = (void *)v28;
    BOOL v32 = +[HMDUser ownerWithUserID:v29 home:0 pairingIdentity:v28 homeManager:self];

    char v227 = v32;
    v225 = self;
    if (v32)
    {
      aSelector = a2;
      id v33 = v30;
      id v34 = [v30 ownerUUID];
      if (v34)
      {
        id v35 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v34];
        [v32 setUUID:v35];
      }
      v226 = v8;
      id v36 = [v8 transactionResult];
      id v37 = (void *)MEMORY[0x230FBD990]();
      char v38 = self;
      BOOL v39 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        id v40 = HMFGetLogIdentifier();
        id v41 = v22;
        __int16 v42 = +[HMDBackingStoreTransactionOptions stringForHMDBackingStoreTransactionSource:](HMDBackingStoreTransactionOptions, "stringForHMDBackingStoreTransactionSource:", [v36 source]);
        *(_DWORD *)long long buf = 138543618;
        v248 = v40;
        __int16 v249 = 2112;
        v250 = v42;
        _os_log_impl(&dword_22F52A000, v39, OS_LOG_TYPE_INFO, "%{public}@Process Home Model Add source: %@", buf, 0x16u);

        int v22 = v41;
        BOOL v32 = v227;
      }

      id v7 = v33;
      uint64_t v223 = v22;
      v215 = v36;
      if ([v36 source] == 1)
      {
        long long v43 = [MEMORY[0x263F35AD0] systemStore];
        uint64_t v44 = [(HMDHomeManager *)v38 appleAccountManager];
        uint64_t v45 = [v44 accountContext];
        long long v46 = [v45 identifier];

        if (!v46)
        {
          id v241 = 0;
          id v242 = 0;
          int v47 = [v43 getCurrentiCloudIdentifier:&v242 controllerPairingIdentifier:&v241 error:0];
          long long v46 = (__CFString *)v242;
          id v48 = v241;
          if (!v47 || !-[__CFString length](v46, "length") || ![v48 length])
          {
            long long v49 = (void *)MEMORY[0x230FBD990]();
            long long v50 = v38;
            long long v51 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v53 = id v52 = v7;
              *(_DWORD *)long long buf = 138543362;
              v248 = v53;
              _os_log_impl(&dword_22F52A000, v51, OS_LOG_TYPE_INFO, "%{public}@We don't have an active iCloud account, using the sentinel account identifier to remember the controller key", buf, 0xCu);

              id v7 = v52;
            }

            long long v46 = @"__HomeKit_NoAccount_Identifier__";
            int v22 = v223;
            id v36 = v215;
          }
        }
        BOOL v32 = v227;
        id v54 = objc_msgSend(v227, "pairingUsername", v215);
        [v43 updateCurrentiCloudIdentifier:v46 controllerPairingIdentifier:v54 error:0];
      }
      else if ([v36 source] == 1)
      {
        uint64_t v99 = (void *)MEMORY[0x230FBD990]();
        long long v100 = v38;
        int v101 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
        {
          int v102 = HMFGetLogIdentifier();
          char v103 = (objc_class *)objc_opt_class();
          NSStringFromClass(v103);
          v105 = id v104 = v36;
          id v106 = NSStringFromSelector(aSelector);
          *(_DWORD *)long long buf = 138543874;
          v248 = v102;
          __int16 v249 = 2112;
          v250 = v105;
          __int16 v251 = 2112;
          char v252 = v106;
          _os_log_impl(&dword_22F52A000, v101, OS_LOG_TYPE_INFO, "%{public}@-[%@ %@] Suppressing iCloud identifier update because CoreData storage is enabled", buf, 0x20u);

          id v36 = v104;
          int v22 = v223;
        }

        BOOL v32 = v227;
      }
      char v107 = objc_msgSend(v7, "defaultRoomUUID", v215);

      if (v107)
      {
        id v108 = objc_alloc(MEMORY[0x263F08C38]);
        uint64_t v109 = [v7 defaultRoomUUID];
        uint64_t v110 = [v108 initWithUUIDString:v109];
      }
      else
      {
        uint64_t v110 = 0;
      }
      id v111 = (void *)MEMORY[0x263F0E8C8];
      __int16 v112 = [v7 presenceAuthorizationStatus];
      uint64_t v113 = [v111 authWithNumber:v112];

      uint64_t v114 = [HMDHome alloc];
      BOOL v115 = [v7 uuid];
      v218 = (void *)v113;
      v219 = (void *)v110;
      id v116 = [(HMDHome *)v114 initWithName:v22 uuid:v115 defaultRoomUUID:v110 owner:v32 homeManager:v38 presenceAuth:v113];

      id v117 = [v7 owned];
      -[HMDHome setOwnerUser:](v116, "setOwnerUser:", [v117 BOOLValue]);

      id v118 = [(HMDHomeManager *)v38 nameValidator];
      long long v119 = [(HMDHome *)v116 uuid];
      id v120 = (id)[v118 addNamespace:v119];

      long long v121 = [(HMDHome *)v116 name];
      long long v122 = [(HMDHomeManager *)v38 uuid];
      id v123 = [(HMDHomeManager *)v38 addName:v121 namespace:v122];

      BOOL v124 = [(HMDHome *)v116 roomForEntireHome];
      id v125 = [v124 name];
      __int16 v126 = [(HMDHome *)v116 uuid];
      id v127 = [(HMDHomeManager *)v38 addName:v125 namespace:v126];

      __int16 v128 = (void *)MEMORY[0x230FBD990]();
      id v129 = v38;
      __int16 v130 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v130, OS_LOG_TYPE_INFO))
      {
        id v131 = HMFGetLogIdentifier();
        __int16 v132 = [v32 pairingUsername];
        *(_DWORD *)long long buf = 138543874;
        v248 = v131;
        __int16 v249 = 2112;
        v250 = v22;
        __int16 v251 = 2112;
        char v252 = v132;
        _os_log_impl(&dword_22F52A000, v130, OS_LOG_TYPE_INFO, "%{public}@Created home %@ with administrator %@", buf, 0x20u);

        BOOL v32 = v227;
      }

      uint64_t v133 = [(HMDHome *)v116 uuid];
      [(HMDHomeManager *)v129 _updateHome:v133 configurationVersion:[(HMDHome *)v116 configurationVersion]];

      [(HMDHomeManager *)v129 addHome:v116];
      [(HMDHome *)v116 refreshUserDisplayNames];
      if ([v36 source] == 1)
      {
        id v221 = v7;
        __int16 v134 = (void *)MEMORY[0x230FBD990]();
        uint64_t v135 = v129;
        uint64_t v136 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v136, OS_LOG_TYPE_INFO))
        {
          uint64_t v137 = HMFGetLogIdentifier();
          uint64_t v138 = [(HMDHome *)v116 name];
          *(_DWORD *)long long buf = 138543618;
          v248 = v137;
          __int16 v249 = 2112;
          v250 = v138;
          _os_log_impl(&dword_22F52A000, v136, OS_LOG_TYPE_INFO, "%{public}@Saving addition objects created during creation of home %@", buf, 0x16u);
        }
        long long v139 = [(HMDHome *)v116 backingStore];
        uint64_t v140 = [v226 name];
        BOOL v141 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        uint64_t v142 = [v139 transaction:v140 options:v141];

        uint64_t v143 = [(HMDHome *)v116 backingStoreObjects:4];
        long long v237 = 0u;
        long long v238 = 0u;
        long long v239 = 0u;
        long long v240 = 0u;
        uint64_t v144 = [v143 countByEnumeratingWithState:&v237 objects:v246 count:16];
        if (v144)
        {
          uint64_t v145 = v144;
          uint64_t v146 = *(void *)v238;
          do
          {
            for (uint64_t i = 0; i != v145; ++i)
            {
              if (*(void *)v238 != v146) {
                objc_enumerationMutation(v143);
              }
              id v148 = *(id *)(*((void *)&v237 + 1) + 8 * i);
              objc_opt_class();
              char isKindOfClass = objc_opt_isKindOfClass();

              if ((isKindOfClass & 1) == 0 || !v148) {
                [v142 add:v148 withMessage:0];
              }
            }
            uint64_t v145 = [v143 countByEnumeratingWithState:&v237 objects:v246 count:16];
          }
          while (v145);
        }
        [v142 save];

        id v7 = v221;
        int v22 = v223;
        BOOL v32 = v227;
        id v36 = v216;
      }
      uint64_t v150 = [v36 source];
      [(HMDHome *)v116 configureWithHomeManager:v129 accessoriesPresent:0 uncommittedTransactions:MEMORY[0x263EFFA68] source:v150];
      aSelectorc = (char *)v116;
      if ([(HMDHome *)v116 isOwnerUser])
      {
        id v151 = +[HMDDeviceCapabilities deviceCapabilities];
        int v152 = [v151 isResidentCapable];

        if (v152)
        {
          uint64_t v153 = [(HMDHomeManager *)v129 notificationCenter];
          [v153 addObserver:v129 selector:sel_handleHomeCurrentDeviceResidentEligibleNotification_ name:@"HMDHomeCurrentDeviceHasReachableAccessories" object:v116];

          id v154 = [(HMDHomeManager *)v129 appleAccountManager];
          uint64_t v155 = [v154 device];

          uint64_t v156 = [v226 name];
          long long v157 = v22;
          if ([v156 isEqualToString:@"kAddHomeRequestKey"])
          {
            long long v158 = [(HMDHomeManager *)v129 capabilitiesController];
            uint64_t v159 = [v158 currentResidentCapabilities];
            if (v159)
            {
              uint64_t v160 = (void *)v159;
              BOOL v161 = [(HMDHomeManager *)v129 isResidentEnabled];

              BOOL v32 = v227;
              if (v161)
              {
                id v162 = [aSelectorc residentCapableDevices];
                char v163 = [v162 containsObject:v155];

                if ((v163 & 1) == 0) {
                  [aSelectorc addResidentCapableDevice:v155];
                }
              }
            }
            else
            {

              BOOL v32 = v227;
            }
          }
          else
          {
          }
          int v22 = v157;
          id v116 = (HMDHome *)aSelectorc;
        }
      }
      [(HMDHomeManager *)v129 updateHomeKitInUsePreferences];
      long long v164 = (void *)[v226 mutableCopy];
      [v164 setResponseHandler:0];
      v217 = v164;
      long long v165 = (void *)[v164 copy];
      id v166 = [(HMDHome *)v116 updateHomeWithModel:v7 message:v165];

      long long v167 = [(HMDHome *)v116 zoneID];
      id v168 = [(HMDHome *)v116 ownerName];
      [(HMDHomeManager *)v129 _addCloudZone:v167 ownerName:v168];

      id v169 = (void *)MEMORY[0x230FBD990]();
      id v170 = v129;
      id v171 = HMFGetOSLogHandle();
      v224 = v170;
      if (os_log_type_enabled(v171, OS_LOG_TYPE_INFO))
      {
        long long v172 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        v248 = v172;
        __int16 v249 = 2112;
        v250 = v22;
        _os_log_impl(&dword_22F52A000, v171, OS_LOG_TYPE_INFO, "%{public}@Add home: %@", buf, 0x16u);

        id v170 = v224;
      }

      long long v173 = [(HMDHomeManager *)v170 homes];
      if ([v173 count] == 1)
      {
        long long v174 = v36;
        BOOL v222 = 1;
        id v8 = v226;
      }
      else
      {
        long long v175 = [(HMDHomeManager *)v170 primaryHomeUUID];
        if (v175) {
          BOOL v222 = 0;
        }
        else {
          BOOL v222 = [v36 source] != 1;
        }
        id v8 = v226;
        long long v174 = v36;
      }
      long long v176 = [(HMDHomeManager *)v170 uuidsOfRemovedHomes];
      long long v177 = [(HMDHome *)v116 uuid];
      long long v178 = v170;
      int v179 = [v176 containsObject:v177];

      if (v179)
      {
        long long v180 = [(HMDHomeManager *)v178 uuidsOfRemovedHomes];
        uint64_t v181 = [(HMDHome *)v116 uuid];
        [v180 removeObject:v181];

        long long v182 = (void *)MEMORY[0x230FBD990]();
        uint64_t v183 = v178;
        long long v184 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v184, OS_LOG_TYPE_INFO))
        {
          long long v185 = HMFGetLogIdentifier();
          [(HMDHome *)v116 uuid];
          v187 = long long v186 = v22;
          [v187 UUIDString];
          v189 = id v188 = v7;
          *(_DWORD *)long long buf = 138543618;
          v248 = v185;
          __int16 v249 = 2112;
          v250 = v189;
          _os_log_impl(&dword_22F52A000, v184, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);

          int v22 = v186;
          id v8 = v226;

          id v7 = v188;
          id v116 = (HMDHome *)aSelectorc;

          BOOL v32 = v227;
        }

        long long v178 = v224;
      }
      long long v190 = [(HMDHome *)v116 owner];
      __int16 v191 = [v190 account];
      id v192 = [v191 senderCorrelationIdentifier];
      [(HMDHomeManager *)v178 _stopTrackingRemovedHomeUserMergeId:v192];

      v244[0] = @"kHomeDataKey";
      if ([v8 isEntitledForSPIAccess]) {
        encodeRootObjectForSPIClients(v116);
      }
      else {
      __int16 v193 = encodeRootObjectForIncomingXPCMessage(v116, 0);
      }
      id v25 = v174;
      v245[0] = v193;
      v244[1] = *MEMORY[0x263F0CB30];
      __int16 v194 = [NSNumber numberWithBool:v222];
      v245[1] = v194;
      uint64_t v195 = [NSDictionary dictionaryWithObjects:v245 forKeys:v244 count:2];
      [v8 respondWithPayload:v195];

      uint64_t v196 = v225;
      if (-[HMDHome isOwnerUser](v116, "isOwnerUser") && [v25 source] == 1)
      {
        __int16 v197 = [aSelectorc backingStore];
        id v198 = +[HMDBackingStoreTransactionOptions defaultXPCOptions];
        __int16 v199 = [v197 transaction:@"kBuiltinActionSetsKey" options:v198];

        long long v235 = 0u;
        long long v236 = 0u;
        long long v233 = 0u;
        long long v234 = 0u;
        id obj = [aSelectorc builtInActionSetInfo];
        uint64_t v200 = [obj countByEnumeratingWithState:&v233 objects:v243 count:16];
        if (v200)
        {
          uint64_t v201 = v200;
          uint64_t v202 = *(void *)v234;
          do
          {
            for (uint64_t j = 0; j != v201; ++j)
            {
              if (*(void *)v234 != v202) {
                objc_enumerationMutation(obj);
              }
              __int16 v204 = *(void **)(*((void *)&v233 + 1) + 8 * j);
              __int16 v205 = [HMDActionSetModel alloc];
              __int16 v206 = objc_msgSend(v204, "hmf_UUIDForKey:", @"kActionSetUUID");
              __int16 v207 = [aSelectorc uuid];
              v208 = [(HMDBackingStoreModelObject *)v205 initWithObjectChangeType:1 uuid:v206 parentUUID:v207];

              uint64_t v209 = objc_msgSend(v204, "hmf_stringForKey:", @"kActionSetName");
              [(HMDActionSetModel *)v208 setName:v209];

              uint64_t v210 = objc_msgSend(v204, "hmf_stringForKey:", @"kActionSetType");
              [(HMDActionSetModel *)v208 setType:v210];

              [v199 add:v208 withMessage:0];
            }
            uint64_t v201 = [obj countByEnumeratingWithState:&v233 objects:v243 count:16];
          }
          while (v201);
        }

        [v199 save];
        uint64_t v196 = v225;
        id v8 = v226;
        int v22 = v223;
        BOOL v32 = v227;
        id v25 = v216;
      }
      v211 = [(HMDHomeManager *)v224 notificationCenter];
      [v211 postNotificationName:@"HMDHomeAddedNotification" object:v224 userInfo:0];

      v212 = v196->_logger;
      if (os_signpost_enabled(v212))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl(&dword_22F52A000, v212, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "", buf, 2u);
      }
      id v80 = v219;
      v213 = aSelectorc;
      if (v222)
      {
        v214 = [aSelectorc uuid];
        [(HMDHomeManager *)v224 _changePrimaryHome:v214];

        v213 = aSelectorc;
        [(HMDHomeManager *)v224 _updateCurrentHomeIfNecessary];
      }
    }
    else
    {
      v220 = v30;
      uint64_t v75 = (void *)MEMORY[0x230FBD990]();
      id v76 = self;
      uint64_t v77 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      {
        uint64_t v78 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        v248 = v78;
        __int16 v249 = 2112;
        v250 = v22;
        _os_log_impl(&dword_22F52A000, v77, OS_LOG_TYPE_ERROR, "%{public}@Failed to create owner user while trying to create home with name %@", buf, 0x16u);

        BOOL v32 = 0;
      }

      uint64_t v79 = [v8 responseHandler];

      id v80 = v31;
      if (v79)
      {
        __int16 v81 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
        id v82 = [v8 responseHandler];
        ((void (**)(void, void *, void))v82)[2](v82, v81, 0);

        uint64_t v83 = [(HMDHomeManager *)v76 setupActivity];

        if (v83)
        {
          aSelectorb = [(HMDHomeManager *)v76 setupActivity];
          v253[0] = @"errorCode";
          id v84 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v81, "code"));
          v253[1] = @"HMDHomeModelUUID";
          v254[0] = v84;
          id v85 = [v220 uuid];
          HMDailyRotatedUUID();
          long long v87 = v86 = v22;
          uint64_t v88 = [v87 UUIDString];
          id v89 = v8;
          long long v90 = v25;
          int v91 = (void *)v88;
          uint64_t v92 = @"no uuid";
          if (v88) {
            uint64_t v92 = (__CFString *)v88;
          }
          v254[1] = v92;
          id v93 = (id)[NSDictionary dictionaryWithObjects:v254 forKeys:v253 count:2];

          id v25 = v90;
          id v8 = v89;

          int v22 = v86;
          BOOL v32 = 0;

          id v80 = v31;
          long long v94 = [(HMDHomeManager *)v76 setupActivity];
          [v94 markWithReason:@"HMDHomeManager.processHomeModelAdd.processHomeModelAdd"];

          int v95 = v225->_logger;
          if (os_signpost_enabled(v95))
          {
            uint64_t v96 = v95;
            uint64_t v97 = [v81 stringValueSafe];
            *(_DWORD *)long long buf = 138412290;
            v248 = v97;
            _os_signpost_emit_with_name_impl(&dword_22F52A000, v96, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "Error=%{signpost.description:attribute}@ ", buf, 0xCu);
          }
        }
      }
      int v98 = v225->_logger;
      if (os_signpost_enabled(v98))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl(&dword_22F52A000, v98, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "", buf, 2u);
      }
      id v7 = v220;
    }

LABEL_110:
    goto LABEL_111;
  }
  uint64_t v55 = [v8 responseHandler];

  if (v55)
  {
    BOOL v32 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
    uint64_t v56 = [v8 responseHandler];
    ((void (**)(void, void *, void))v56)[2](v56, v32, 0);

    __int16 v57 = [(HMDHomeManager *)self setupActivity];

    if (v57)
    {
      aSelectora = [(HMDHomeManager *)self setupActivity];
      v255[0] = @"errorCode";
      uint64_t v58 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v32, "code"));
      v256[0] = v58;
      v255[1] = @"domain";
      uint64_t v59 = [v32 domain];
      id v60 = (void *)v59;
      long long v61 = &stru_26E2EB898;
      if (v59) {
        long long v61 = (__CFString *)v59;
      }
      v256[1] = v61;
      v255[2] = @"HMDHomeModelUUID";
      [v7 uuid];
      long long v63 = v62 = v32;
      long long v64 = HMDailyRotatedUUID();
      uint64_t v65 = [v64 UUIDString];
      id v66 = v8;
      id v67 = (void *)v65;
      id v68 = @"no uuid";
      if (v65) {
        id v68 = (__CFString *)v65;
      }
      v256[2] = v68;
      id v69 = (id)[NSDictionary dictionaryWithObjects:v256 forKeys:v255 count:3];

      id v8 = v66;
      BOOL v32 = v62;

      __int16 v70 = [(HMDHomeManager *)self setupActivity];
      [v70 markWithReason:@"HMDHomeManager.processHomeModelAdd.processHomeModelAdd"];

      uint64_t v71 = self->_logger;
      if (os_signpost_enabled(v71))
      {
        uint64_t v72 = v71;
        char v73 = [v62 stringValueSafe];
        *(_DWORD *)long long buf = 138412290;
        v248 = v73;
        _os_signpost_emit_with_name_impl(&dword_22F52A000, v72, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "Error=%{signpost.description:attribute}@ ", buf, 0xCu);
      }
    }
    unint64_t v74 = self->_logger;
    if (os_signpost_enabled(v74))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_22F52A000, v74, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "", buf, 2u);
    }
    int v22 = 0;
    goto LABEL_110;
  }
LABEL_111:
}

- (id)validateHomeName:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v4 = a3;
  unint64_t v5 = HMMaxLengthForNaming();
  if ([v4 length] > v5)
  {
    id v6 = (void *)MEMORY[0x230FBD990]();
    id v7 = self;
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      int v17 = 138543362;
      id v18 = v9;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v17, 0xCu);
    }
    uint64_t v10 = (void *)MEMORY[0x263F087E8];
    uint64_t v11 = 46;
    goto LABEL_7;
  }
  id v12 = [(HMDHomeManager *)self _homeWithName:v4];

  if (v12)
  {
    uint64_t v10 = (void *)MEMORY[0x263F087E8];
    uint64_t v11 = 32;
LABEL_7:
    uint64_t v13 = [v10 hmErrorWithCode:v11];
    goto LABEL_8;
  }
  int v15 = [(HMDHomeManager *)self uuid];
  uint64_t v13 = [(HMDHomeManager *)self addName:v4 namespace:v15];

  if (v13 && [v13 code] == 31)
  {
    uint64_t v16 = [MEMORY[0x263F087E8] hmErrorWithCode:32];

    uint64_t v13 = (void *)v16;
  }
LABEL_8:

  return v13;
}

- (void)_handleRequestAddHome:(id)a3
{
  id v5 = a3;
  id v4 = [(HMDHomeManager *)self hh2FrameworkSwitch];
  [v4 checkExistenceOfHH2SentinelZone];

  [(HMDHomeManager *)self dmHandleRequestAddHome:v5];
}

- (id)_findHomeModel:(id)a3
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = a3;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(id *)(*((void *)&v14 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        id v10 = v9;

        if (v10)
        {

LABEL_17:
          id v12 = v8;
          goto LABEL_18;
        }
        id v8 = v8;
        objc_opt_class();
        uint64_t isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0 && v8) {
          goto LABEL_17;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
      id v12 = 0;
      if (v5) {
        continue;
      }
      break;
    }
  }
  else
  {
    id v12 = 0;
  }
LABEL_18:

  return v12;
}

- (void)_handleCurrentHomeChanged:(id)a3
{
  id v8 = a3;
  uint64_t v4 = [v8 messagePayload];
  uint64_t v5 = objc_msgSend(v4, "hmf_UUIDForKey:", @"kCurrentHomeUUIDKey");

  [(HMDHomeManager *)self _notifyCurrentHomeUpdated:v5 isLocalUpdate:0];
  uint64_t v6 = [v8 responseHandler];

  if (v6)
  {
    id v7 = [v8 responseHandler];
    v7[2](v7, 0, 0);
  }
}

- (void)_sendCurrentHomeToWatch:(id)a3
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 version];
  uint64_t v6 = [[HMDHomeKitVersion alloc] initWithVersionString:@"3.0"];
  char v7 = [v5 isAtLeastVersion:v6];

  if (v7)
  {
    id v8 = [(HMDHomeManager *)self currentHomeUUID];

    if (v8)
    {
      int v22 = @"kCurrentHomeUUIDKey";
      uint64_t v9 = [(HMDHomeManager *)self currentHomeUUID];
      id v10 = [v9 UUIDString];
      id v23 = v10;
      uint64_t v11 = [NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    }
    else
    {
      id v20 = @"kNoCurrentHomeKey";
      uint64_t v21 = MEMORY[0x263EFFA88];
      uint64_t v11 = [NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    }
    long long v15 = [HMDRemoteDeviceMessageDestination alloc];
    long long v16 = [(HMDHomeManager *)self uuid];
    long long v17 = [(HMDRemoteDeviceMessageDestination *)v15 initWithTarget:v16 device:v4];

    id v18 = [MEMORY[0x263F42568] messageWithName:@"kCurrentHomeChangedNotificationKey" qualityOfService:9 destination:v17 payload:v11];
    uint64_t v19 = [(HMDHomeManager *)self messageDispatcher];
    [v19 sendMessage:v18 completionHandler:0];
  }
  else
  {
    id v12 = (void *)MEMORY[0x230FBD990]();
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      long long v14 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v25 = v14;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Not sending current home update to legacy watch", buf, 0xCu);
    }
  }
}

- (void)_notifyCurrentHomeUpdated:(id)a3 isLocalUpdate:(BOOL)a4
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  id v5 = a3;
  uint64_t v6 = [(HMDHomeManager *)self currentHomeUUID];
  if (!HMFEqualObjects())
  {
    if (v5)
    {
      uint64_t v11 = [(HMDHomeManager *)self _homeWithUUID:v5];
      if (isAppleTV() && v11 && ([v11 isOwnerUser] & 1) == 0)
      {
        id v12 = (void *)MEMORY[0x230FBD990]();
        uint64_t v13 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          long long v14 = HMFGetLogIdentifier();
          long long v15 = [v5 UUIDString];
          *(_DWORD *)long long buf = 138543618;
          long long v43 = v14;
          __int16 v44 = 2112;
          id v45 = v15;
          _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Not updating current home since user is not owner of home %@", buf, 0x16u);
        }
LABEL_26:

        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    BOOL v16 = isWatch();
    long long v17 = (void *)MEMORY[0x230FBD990](v16);
    id v18 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543874;
      long long v43 = v19;
      __int16 v44 = 2112;
      id v45 = v6;
      __int16 v46 = 2112;
      id v47 = v5;
      _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Updating the current home from %@ to %@", buf, 0x20u);
    }
    [(HMDHomeManager *)self setCurrentHomeUUID:v5];
    [(HMDHomeManager *)self _updatePreferencesForCurrentHome];
    if (v5)
    {
      id v40 = @"kCurrentHomeUUIDKey";
      id v20 = [v5 UUIDString];
      id v41 = v20;
      uint64_t v21 = [NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
    }
    else
    {
      char v38 = @"kNoCurrentHomeKey";
      uint64_t v39 = MEMORY[0x263EFFA88];
      uint64_t v21 = [NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];
    }
    int v22 = [MEMORY[0x263F42568] entitledMessageWithName:@"kCurrentHomeChangedNotificationKey" messagePayload:v21];
    id v23 = [(HMDHomeManager *)self messageDispatcher];
    __int16 v24 = [(HMDHomeManager *)self uuid];
    [v23 sendMessage:v22 target:v24];

    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v25 = [(HMDHomeManager *)self watchManager];
    uint64_t v26 = [v25 watches];

    uint64_t v27 = [v26 countByEnumeratingWithState:&v33 objects:v37 count:16];
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = *(void *)v34;
      do
      {
        uint64_t v30 = 0;
        do
        {
          if (*(void *)v34 != v29) {
            objc_enumerationMutation(v26);
          }
          [(HMDHomeManager *)self _sendCurrentHomeToWatch:*(void *)(*((void *)&v33 + 1) + 8 * v30++)];
        }
        while (v28 != v30);
        uint64_t v28 = [v26 countByEnumeratingWithState:&v33 objects:v37 count:16];
      }
      while (v28);
    }

    [(HMDHomeManager *)self writeAssistantCurrentHome:v11];
    id v31 = objc_opt_new();
    [v31 setObject:v5 forKeyedSubscript:@"HMDCurrentHomeUUIDKey"];
    [v31 setObject:v6 forKeyedSubscript:@"HMDPreviousHomeUUIDKey"];
    BOOL v32 = [MEMORY[0x263F08A00] defaultCenter];
    [v32 postNotificationName:@"HMDNotificationCurrentHomeDidChange" object:self userInfo:v31];

    goto LABEL_26;
  }
  char v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = self;
  uint64_t v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    long long v43 = v10;
    __int16 v44 = 2112;
    id v45 = v5;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Current home is already %@, not notifying", buf, 0x16u);
  }
LABEL_27:
}

- (void)_updateCurrentHomeIfNecessary
{
  id v3 = [(HMDHomeManager *)self _computedCurrentHomeUUID];
  [(HMDHomeManager *)self _notifyCurrentHomeUpdated:v3 isLocalUpdate:1];
}

- (id)_computedCurrentHomeUUID
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self currentHomeUUID];
  id v4 = [(HMDHomeManager *)self _homeWithUUID:v3];

  if ([v4 homeLocation] != 1)
  {
LABEL_10:
    long long v15 = [(HMDHomeManager *)self __computedCurrentHomeUUID];
    goto LABEL_11;
  }
  id v5 = [(HMDHomeManager *)self _appleMediaAccessoryOfCurrentDevice];
  uint64_t v6 = [v5 home];
  char v7 = v6;
  if (v6)
  {
    id v8 = [v6 uuid];
    uint64_t v9 = [v4 uuid];
    int v10 = objc_msgSend(v8, "hmf_isEqualToUUID:", v9);

    if (!v10)
    {
      BOOL v16 = (void *)MEMORY[0x230FBD990]();
      long long v17 = self;
      id v18 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = HMFGetLogIdentifier();
        int v21 = 138543362;
        int v22 = v19;
        _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_INFO, "%{public}@Current home does not match current accessory home, recalculating...", (uint8_t *)&v21, 0xCu);
      }

      goto LABEL_10;
    }
  }
  uint64_t v11 = (void *)MEMORY[0x230FBD990]();
  id v12 = self;
  uint64_t v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    long long v14 = HMFGetLogIdentifier();
    int v21 = 138543362;
    int v22 = v14;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Last current home still has AtHome status, stay as current home", (uint8_t *)&v21, 0xCu);
  }
  long long v15 = [v4 uuid];

LABEL_11:
  return v15;
}

- (id)__computedCurrentHomeUUID
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self overrideCurrentHomeUUIDToNil];
  id v4 = v3;
  if (v3)
  {
    if ([v3 BOOLValue])
    {
      id v5 = 0;
    }
    else
    {
      id v5 = [(HMDHomeManager *)self currentHomeUUIDOverride];
    }
  }
  else
  {
    uint64_t v6 = [(HMDHomeManager *)self _appleMediaAccessoryOfCurrentDevice];
    char v7 = [v6 home];
    if (v7)
    {
      id v8 = (void *)MEMORY[0x230FBD990]();
      uint64_t v9 = self;
      int v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        __int16 v46 = v11;
        __int16 v47 = 2112;
        uint64_t v48 = v7;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Returning current accessory home %@ as current home", buf, 0x16u);
      }
      id v5 = [v7 uuid];
    }
    else
    {
      uint64_t v39 = v6;
      id v12 = objc_alloc(MEMORY[0x263EFF980]);
      uint64_t v13 = [(HMDHomeManager *)self homes];
      long long v14 = objc_msgSend(v12, "initWithCapacity:", objc_msgSend(v13, "count"));

      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v15 = [(HMDHomeManager *)self homes];
      uint64_t v16 = [v15 countByEnumeratingWithState:&v40 objects:v44 count:16];
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = *(void *)v41;
        while (2)
        {
          for (uint64_t i = 0; i != v17; ++i)
          {
            if (*(void *)v41 != v18) {
              objc_enumerationMutation(v15);
            }
            id v20 = *(void **)(*((void *)&v40 + 1) + 8 * i);
            if ([v20 homeLocation] == 3 || objc_msgSend(v20, "homeLocation") == 1)
            {
              int v21 = [v20 uuid];
              int v22 = [(HMDHomeManager *)self primaryHomeUUID];
              int v23 = [v21 isEqual:v22];

              if (v23)
              {
                uint64_t v30 = (void *)MEMORY[0x230FBD990]();
                id v31 = self;
                BOOL v32 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
                {
                  long long v33 = HMFGetLogIdentifier();
                  *(_DWORD *)long long buf = 138543618;
                  __int16 v46 = v33;
                  __int16 v47 = 2112;
                  uint64_t v48 = v20;
                  _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_INFO, "%{public}@New nominated current home is primary home : %@", buf, 0x16u);
                }
                id v5 = [v20 uuid];

                goto LABEL_27;
              }
              [v14 addObject:v20];
            }
          }
          uint64_t v17 = [v15 countByEnumeratingWithState:&v40 objects:v44 count:16];
          if (v17) {
            continue;
          }
          break;
        }
      }

      if ([v14 count])
      {
        __int16 v24 = (void *)MEMORY[0x230FBD990]([v14 sortUsingComparator:&__block_literal_global_865]);
        id v25 = self;
        uint64_t v26 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          uint64_t v27 = HMFGetLogIdentifier();
          uint64_t v28 = [v14 firstObject];
          *(_DWORD *)long long buf = 138543618;
          __int16 v46 = v27;
          __int16 v47 = 2112;
          uint64_t v48 = v28;
          _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@New nominated current home is %@", buf, 0x16u);
        }
        uint64_t v29 = [v14 firstObject];
        id v5 = [v29 uuid];
      }
      else
      {
        long long v35 = (void *)MEMORY[0x230FBD990]();
        long long v36 = self;
        id v37 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          char v38 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          __int16 v46 = v38;
          _os_log_impl(&dword_22F52A000, v37, OS_LOG_TYPE_INFO, "%{public}@There is no current home", buf, 0xCu);
        }
        id v5 = 0;
      }
LABEL_27:
      uint64_t v6 = v39;
      id v4 = 0;
      char v7 = 0;
    }
  }

  return v5;
}

uint64_t __43__HMDHomeManager___computedCurrentHomeUUID__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = [a2 uuid];
  uint64_t v6 = [v5 UUIDString];
  char v7 = [v4 uuid];

  id v8 = [v7 UUIDString];
  uint64_t v9 = [v6 compare:v8];

  return v9;
}

- (void)_handleConnectivityInfoRequest:(id)a3
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 responseHandler];

  if (v5)
  {
    if ([v4 isEntitledForSPIAccess])
    {
      if ([v4 isRemote])
      {
        uint64_t v6 = (void *)MEMORY[0x230FBD990]();
        char v7 = self;
        id v8 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          id v69 = v9;
          __int16 v70 = 2112;
          id v71 = v4;
          int v10 = "%{public}@This message should only be passed over XPC: %@";
          uint64_t v11 = v8;
          os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
          _os_log_impl(&dword_22F52A000, v11, v12, v10, buf, 0x16u);
        }
LABEL_13:

        uint64_t v17 = [v4 responseHandler];
        uint64_t v18 = [MEMORY[0x263F087E8] hmErrorWithCode:17];
        v17[2](v17, v18, 0);
LABEL_14:

        goto LABEL_15;
      }
      uint64_t v19 = [v4 proxyConnection];
      __int16 v20 = [v19 entitlements];

      if ((v20 & 0x100) != 0)
      {
        uint64_t v17 = [v4 stringForKey:@"kIdentifierKey"];
        int v21 = (void *)MEMORY[0x230FBD990]();
        int v22 = self;
        int v23 = HMFGetOSLogHandle();
        BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
        if (v17)
        {
          id v52 = v4;
          if (v24)
          {
            id v25 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            id v69 = v25;
            __int16 v70 = 2112;
            id v71 = v17;
            _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Received request to retrieve connectivity info for identifier : %@", buf, 0x16u);
          }
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v51 = v22;
          id obj = [(HMDHomeManager *)v22 homes];
          uint64_t v55 = [obj countByEnumeratingWithState:&v60 objects:v67 count:16];
          if (v55)
          {
            uint64_t v54 = *(void *)v61;
            while (2)
            {
              for (uint64_t i = 0; i != v55; ++i)
              {
                if (*(void *)v61 != v54) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v27 = *(void **)(*((void *)&v60 + 1) + 8 * i);
                long long v56 = 0u;
                long long v57 = 0u;
                long long v58 = 0u;
                long long v59 = 0u;
                uint64_t v28 = [v27 accessories];
                uint64_t v29 = (void *)[v28 copy];

                uint64_t v30 = [v29 countByEnumeratingWithState:&v56 objects:v66 count:16];
                if (v30)
                {
                  uint64_t v31 = v30;
                  uint64_t v32 = *(void *)v57;
LABEL_29:
                  uint64_t v33 = 0;
                  while (1)
                  {
                    if (*(void *)v57 != v32) {
                      objc_enumerationMutation(v29);
                    }
                    id v34 = *(id *)(*((void *)&v56 + 1) + 8 * v33);
                    objc_opt_class();
                    id v35 = (objc_opt_isKindOfClass() & 1) != 0 ? v34 : 0;
                    id v36 = v35;

                    id v37 = [v36 identifier];
                    int v38 = HMFAreStringsEqualIgnoringCase();

                    if (v38) {
                      break;
                    }

                    if (v31 == ++v33)
                    {
                      uint64_t v31 = [v29 countByEnumeratingWithState:&v56 objects:v66 count:16];
                      if (v31) {
                        goto LABEL_29;
                      }
                      goto LABEL_41;
                    }
                  }
                  uint64_t v39 = [v36 connectivityInfo];
                  uint64_t v40 = encodeRootObject();
                  if (!v40)
                  {

                    goto LABEL_41;
                  }
                  uint64_t v48 = (void *)v40;
                  id v4 = v52;
                  uint64_t v49 = [v52 responseHandler];
                  uint64_t v64 = *MEMORY[0x263F0B240];
                  uint64_t v65 = v48;
                  long long v50 = [NSDictionary dictionaryWithObjects:&v65 forKeys:&v64 count:1];
                  ((void (**)(void, void, void *))v49)[2](v49, 0, v50);

                  uint64_t v18 = (void (**)(void, void, void))obj;
                  goto LABEL_51;
                }
LABEL_41:
              }
              uint64_t v55 = [obj countByEnumeratingWithState:&v60 objects:v67 count:16];
              if (v55) {
                continue;
              }
              break;
            }
          }

          long long v41 = (void *)MEMORY[0x230FBD990]();
          long long v42 = v51;
          long long v43 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            __int16 v44 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            id v69 = v44;
            __int16 v70 = 2112;
            id v71 = v17;
            _os_log_impl(&dword_22F52A000, v43, OS_LOG_TYPE_INFO, "%{public}@Unable to get connectivity info accessory identifier: %@", buf, 0x16u);
          }
          id v4 = v52;
          uint64_t v18 = [v52 responseHandler];
          id v45 = (void *)MEMORY[0x263F087E8];
          uint64_t v46 = 2;
        }
        else
        {
          if (v24)
          {
            __int16 v47 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            id v69 = v47;
            __int16 v70 = 2112;
            id v71 = v4;
            _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve identifier from message: %@", buf, 0x16u);
          }
          uint64_t v18 = [v4 responseHandler];
          id v45 = (void *)MEMORY[0x263F087E8];
          uint64_t v46 = 3;
        }
        uint64_t v29 = [v45 hmErrorWithCode:v46];
        ((void (**)(void, void *, void))v18)[2](v18, v29, 0);
LABEL_51:

        goto LABEL_14;
      }
      uint64_t v6 = (void *)MEMORY[0x230FBD990]();
      char v7 = self;
      id v8 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
        goto LABEL_13;
      }
      uint64_t v9 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v69 = v9;
      __int16 v70 = 2112;
      id v71 = v4;
      int v10 = "%{public}@Unable to retrieve connectivity info due to insufficient privileges for message: %@";
    }
    else
    {
      uint64_t v6 = (void *)MEMORY[0x230FBD990]();
      char v7 = self;
      id v8 = HMFGetOSLogHandle();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
        goto LABEL_13;
      }
      uint64_t v9 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v69 = v9;
      __int16 v70 = 2112;
      id v71 = v4;
      int v10 = "%{public}@Unable to retrieve connectivity info due to insufficient internal privileges for message: %@";
    }
    uint64_t v11 = v8;
    os_log_type_t v12 = OS_LOG_TYPE_INFO;
    goto LABEL_12;
  }
  uint64_t v13 = (void *)MEMORY[0x230FBD990]();
  long long v14 = self;
  long long v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    id v69 = v16;
    __int16 v70 = 2112;
    id v71 = v4;
    _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@No response handler in _handleConnectivityInfoRequest: %@", buf, 0x16u);
  }
LABEL_15:
}

- (void)_handleForwardedSharedUserInvitationAcceptance:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self idsInvitationManager];
  [v5 handleForwardedAcceptance:v4];
}

- (void)_handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest:(id)a3
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 uuidForKey:@"kIdentifierKey"];
  if (v5)
  {
    uint64_t v6 = [(HMDHomeManager *)self homes];
    v25[0] = MEMORY[0x263EF8330];
    v25[1] = 3221225472;
    void v25[2] = __90__HMDHomeManager__handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest___block_invoke;
    v25[3] = &unk_264A2B2D0;
    id v7 = v5;
    id v26 = v7;
    id v8 = objc_msgSend(v6, "na_firstObjectPassingTest:", v25);

    if (v8)
    {
      uint64_t v9 = [v8 currentUser];
      int v10 = (void *)MEMORY[0x230FBD990]();
      uint64_t v11 = self;
      os_log_type_t v12 = HMFGetOSLogHandle();
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
      if (v9)
      {
        if (v13)
        {
          long long v14 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138544130;
          uint64_t v28 = v14;
          __int16 v29 = 2112;
          id v30 = v9;
          __int16 v31 = 2112;
          uint64_t v32 = v8;
          __int16 v33 = 2112;
          id v34 = v7;
          _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Received request to retrieve pairing identity for current user (%@) in home (%@) with accessory identifier : %@", buf, 0x2Au);
        }
        [v9 fetchPairingIdentityForClientWithMessage:v4];
      }
      else
      {
        if (v13)
        {
          BOOL v24 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v28 = v24;
          __int16 v29 = 2112;
          id v30 = v8;
          _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@No current user in home: %@", buf, 0x16u);
        }
        uint64_t v9 = 0;
      }
    }
    else
    {
      __int16 v20 = (void *)MEMORY[0x230FBD990]();
      int v21 = self;
      int v22 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        int v23 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v28 = v23;
        __int16 v29 = 2112;
        id v30 = v7;
        _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_INFO, "%{public}@Unable to find accessory (%@) in any home", buf, 0x16u);
      }
      uint64_t v9 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      [v4 respondWithError:v9];
    }

    uint64_t v19 = v26;
  }
  else
  {
    long long v15 = (void *)MEMORY[0x230FBD990]();
    uint64_t v16 = self;
    uint64_t v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v28 = v18;
      __int16 v29 = 2112;
      id v30 = v4;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve accessory unique identifier from message: %@", buf, 0x16u);
    }
    uint64_t v19 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v4 respondWithError:v19];
  }
}

BOOL __90__HMDHomeManager__handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest___block_invoke(uint64_t a1, void *a2)
{
  id v2 = [a2 accessoryWithSPIClientIdentifier:*(void *)(a1 + 32)];
  BOOL v3 = v2 != 0;

  return v3;
}

- (void)_handlePairingIdentityRequest:(id)a3
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  id v41 = a3;
  id v4 = [v41 proxyConnection];
  unint64_t v38 = [v4 entitlements];

  id v5 = [v41 stringForKey:@"kIdentifierKey"];
  if (v5)
  {
    uint64_t v6 = (void *)MEMORY[0x230FBD990]();
    uint64_t v40 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v5;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Received request to retrieve pairing identity for identifier : %@", buf, 0x16u);
    }
    long long v51 = 0u;
    long long v52 = 0u;
    long long v50 = 0u;
    long long v49 = 0u;
    id obj = [(HMDHomeManager *)v40 homes];
    uint64_t v37 = [obj countByEnumeratingWithState:&v49 objects:v62 count:16];
    if (v37)
    {
      uint64_t v9 = *(void *)v50;
      uint64_t v36 = *(void *)v50;
      do
      {
        for (uint64_t i = 0; i != v37; ++i)
        {
          if (*(void *)v50 != v9) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void **)(*((void *)&v49 + 1) + 8 * i);
          long long v45 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          os_log_type_t v12 = [v11 accessories];
          BOOL v13 = (void *)[v12 copy];

          uint64_t v14 = [v13 countByEnumeratingWithState:&v45 objects:v61 count:16];
          if (v14)
          {
            uint64_t v15 = *(void *)v46;
            while (2)
            {
              for (uint64_t j = 0; j != v14; ++j)
              {
                if (*(void *)v46 != v15) {
                  objc_enumerationMutation(v13);
                }
                id v17 = *(id *)(*((void *)&v45 + 1) + 8 * j);
                if ([v17 conformsToProtocol:&unk_26E4FFFE0]) {
                  uint64_t v18 = v17;
                }
                else {
                  uint64_t v18 = 0;
                }
                uint64_t v19 = [v18 pairingIdentity];

                __int16 v20 = [v19 identifier];
                int v21 = HMFAreStringsEqualIgnoringCase();

                if (v21)
                {
                  [(HMDHomeManager *)v40 sendPairingIdentity:v19 includePrivateKey:(v38 >> 4) & 1 requestMessage:v41];

                  goto LABEL_32;
                }
              }
              uint64_t v14 = [v13 countByEnumeratingWithState:&v45 objects:v61 count:16];
              if (v14) {
                continue;
              }
              break;
            }
          }

          uint64_t v9 = v36;
        }
        uint64_t v37 = [obj countByEnumeratingWithState:&v49 objects:v62 count:16];
        uint64_t v9 = v36;
      }
      while (v37);
    }

    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    long long v58 = __Block_byref_object_copy__242964;
    long long v59 = __Block_byref_object_dispose__242965;
    id v60 = 0;
    int v22 = [(HMDHomeManager *)v40 backingStore];
    int v23 = [v22 context];
    v42[0] = MEMORY[0x263EF8330];
    v42[1] = 3221225472;
    v42[2] = __48__HMDHomeManager__handlePairingIdentityRequest___block_invoke;
    v42[3] = &unk_264A2F698;
    void v42[4] = v40;
    __int16 v44 = buf;
    id v24 = v5;
    id v43 = v24;
    [v23 unsafeSynchronousBlock:v42];

    uint64_t v25 = *(void *)(*(void *)&buf[8] + 40);
    if (v25)
    {
      [(HMDHomeManager *)v40 sendPairingIdentity:v25 includePrivateKey:(v38 >> 4) & 1 requestMessage:v41];
    }
    else
    {
      __int16 v31 = (void *)MEMORY[0x230FBD990]();
      uint64_t v32 = v40;
      HMFGetOSLogHandle();
      __int16 v33 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        id v34 = HMFGetLogIdentifier();
        *(_DWORD *)long long v53 = 138543618;
        uint64_t v54 = v34;
        __int16 v55 = 2112;
        id v56 = v24;
        _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve pairing identity for accessory: %@", v53, 0x16u);
      }
      uint64_t v35 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
      [v41 respondWithError:v35];
    }
    _Block_object_dispose(buf, 8);
  }
  else
  {
    id v26 = (void *)MEMORY[0x230FBD990]();
    uint64_t v27 = self;
    uint64_t v28 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      __int16 v29 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v29;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v41;
      _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve identifier from message: %@", buf, 0x16u);
    }
    id v30 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
    [v41 respondWithError:v30];
  }
LABEL_32:
}

void __48__HMDHomeManager__handlePairingIdentityRequest___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) homes];
  BOOL v3 = objc_msgSend(v2, "na_flatMap:", &__block_literal_global_860);

  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __48__HMDHomeManager__handlePairingIdentityRequest___block_invoke_3;
  v8[3] = &unk_264A2B3B0;
  id v9 = *(id *)(a1 + 40);
  id v4 = objc_msgSend(v3, "na_firstObjectPassingTest:", v8);
  uint64_t v5 = [v4 pairingIdentity];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

uint64_t __48__HMDHomeManager__handlePairingIdentityRequest___block_invoke_3(uint64_t a1, void *a2)
{
  id v2 = [a2 pairingIdentity];
  BOOL v3 = [v2 identifier];
  uint64_t v4 = HMFAreStringsEqualIgnoringCase();

  return v4;
}

id __48__HMDHomeManager__handlePairingIdentityRequest___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = [a2 uuid];
  BOOL v3 = +[HMCContext findHomeWithModelID:v2];
  uint64_t v4 = [v3 residents];

  return v4;
}

- (void)sendPairingIdentity:(id)a3 includePrivateKey:(BOOL)a4 requestMessage:(id)a5
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a5;
  if (a4)
  {
    id v10 = v8;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    id v12 = v11;

    if (v12)
    {
      id v13 = objc_alloc(MEMORY[0x263F425E8]);
      uint64_t v14 = [v12 identifier];
      uint64_t v15 = [v12 publicKey];
      uint64_t v16 = [v12 privateKey];
      id v17 = (id)[v13 initWithIdentifier:v14 publicKey:v15 privateKey:v16];
    }
    else
    {
      id v17 = v10;
    }
  }
  else
  {
    id v17 = [v8 publicPairingIdentity];
  }
  uint64_t v18 = (void *)MEMORY[0x230FBD990]();
  uint64_t v19 = self;
  __int16 v20 = HMFGetOSLogHandle();
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
  if (v17)
  {
    if (v21)
    {
      int v22 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v34 = v22;
      __int16 v35 = 2112;
      id v36 = v8;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Sending the pairing identity %@ to client", buf, 0x16u);
    }
    uint64_t v23 = encodeRootObject();
    id v24 = (void *)v23;
    if (v23)
    {
      uint64_t v31 = *MEMORY[0x263F0B440];
      uint64_t v32 = v23;
      uint64_t v25 = [NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
      [v9 respondWithPayload:v25];
    }
    else
    {
      uint64_t v27 = (void *)MEMORY[0x230FBD990]();
      uint64_t v28 = v19;
      __int16 v29 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        id v30 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        id v34 = v30;
        __int16 v35 = 2112;
        id v36 = v8;
        _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode the pairing identity : %@", buf, 0x16u);
      }
      uint64_t v25 = [MEMORY[0x263F087E8] hmErrorWithCode:52];
      [v9 respondWithError:v25];
    }
  }
  else
  {
    if (v21)
    {
      id v26 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      id v34 = v26;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve pairing identity", buf, 0xCu);
    }
    id v24 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
    [v9 respondWithError:v24];
  }
}

- (BOOL)hasClientRequestedMediaAccessoryControl:(id)a3
{
  uint64_t v4 = [a3 clientIdentifier];
  if (v4)
  {
    uint64_t v5 = [(HMDHomeManager *)self homes];
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3221225472;
    void v8[2] = __58__HMDHomeManager_hasClientRequestedMediaAccessoryControl___block_invoke;
    v8[3] = &unk_264A2B2D0;
    id v9 = v4;
    char v6 = objc_msgSend(v5, "na_any:", v8);
  }
  else
  {
    char v6 = 0;
  }

  return v6;
}

uint64_t __58__HMDHomeManager_hasClientRequestedMediaAccessoryControl___block_invoke(uint64_t a1, void *a2)
{
  return [a2 isClientIdentifierSubscribedToAppleMediaAccessoryState:*(void *)(a1 + 32)];
}

- (void)_handleRequestRuntimeStateUpdate:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 homeManagerOptions];
  uint64_t v6 = [v4 isEntitledForSPIAccess];
  if ((v5 & 0x8741) != 0)
  {
    uint64_t v7 = v6;
    BOOL v8 = [(HMDHomeManager *)self hasClientRequestedMediaAccessoryControl:v4];
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    v9[2] = __51__HMDHomeManager__handleRequestRuntimeStateUpdate___block_invoke;
    v9[3] = &unk_264A2B368;
    id v10 = v4;
    [(HMDHomeManager *)self _getRuntimeStateUpdateForHomeManager:v7 includeMediaAccessorySessionState:v8 options:v5 includeResidentDeviceState:v7 completion:v9];
  }
  else
  {
    [v4 respondWithPayload:0];
  }
}

void __51__HMDHomeManager__handleRequestRuntimeStateUpdate___block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  BOOL v3 = [*(id *)(a1 + 32) responseHandler];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) responseHandler];
    ((void (**)(void, void, id))v4)[2](v4, 0, v5);
  }
}

- (void)_getRuntimeStateUpdateForHomeManager:(BOOL)a3 includeMediaAccessorySessionState:(BOOL)a4 options:(unint64_t)a5 includeResidentDeviceState:(BOOL)a6 completion:(id)a7
{
  BOOL v27 = a6;
  BOOL v25 = a4;
  uint64_t v45 = *MEMORY[0x263EF8340];
  id v9 = a7;
  if (v9)
  {
    BOOL v22 = a3;
    id v23 = v9;
    id v10 = dispatch_group_create();
    val = self;
    uint64_t v11 = [(HMDHomeManager *)self homes];
    id v12 = objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(v11, "count"));
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id obj = v11;
    uint64_t v13 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
    if (v13)
    {
      uint64_t v14 = *(void *)v41;
      do
      {
        uint64_t v15 = 0;
        do
        {
          if (*(void *)v41 != v14) {
            objc_enumerationMutation(obj);
          }
          uint64_t v16 = *(void **)(*((void *)&v40 + 1) + 8 * v15);
          dispatch_group_enter(v10);
          id v17 = [v16 uuid];
          uint64_t v18 = [v17 UUIDString];

          objc_initWeak(&location, val);
          v34[0] = MEMORY[0x263EF8330];
          v34[1] = 3221225472;
          id v34[2] = __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke;
          v34[3] = &unk_264A2B318;
          objc_copyWeak(&v38, &location);
          id v35 = v12;
          id v19 = v18;
          id v36 = v19;
          uint64_t v37 = v10;
          [v16 getRunTimeStateUpdateWithOptions:a5 includeMediaAccessorySessionState:v25 includeResidentDeviceState:v27 completion:v34];

          objc_destroyWeak(&v38);
          objc_destroyWeak(&location);

          ++v15;
        }
        while (v13 != v15);
        uint64_t v13 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
      }
      while (v13);
    }

    __int16 v20 = [(HMDHomeManager *)val workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_3;
    block[3] = &unk_264A2B340;
    BOOL v33 = v22;
    id v30 = v12;
    uint64_t v31 = val;
    id v32 = v23;
    id v21 = v12;
    dispatch_group_notify(v10, v20, block);

    id v9 = v23;
  }
}

void __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = [WeakRetained workQueue];
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    v7[2] = __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_2;
    v7[3] = &unk_264A2E610;
    id v8 = v3;
    id v9 = a1[4];
    id v10 = a1[5];
    id v11 = a1[6];
    dispatch_async(v6, v7);
  }
}

void __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_3(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    id v2 = *(void **)(a1 + 32);
    id v3 = [*(id *)(a1 + 40) _runtimeState];
    [v2 addEntriesFromDictionary:v3];
  }
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = (id)[*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
}

void __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    [*(id *)(a1 + 40) setObject:v2 forKey:*(void *)(a1 + 48)];
  }
  id v3 = *(NSObject **)(a1 + 56);
  dispatch_group_leave(v3);
}

- (id)_runtimeState
{
  void v15[4] = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self currentHomeUUID];

  if (v3)
  {
    uint64_t v4 = @"kCurrentHomeUUIDKey";
    id v5 = @"kCurrentHomeUUIDKey";
    uint64_t v6 = [(HMDHomeManager *)self currentHomeUUID];
    uint64_t v7 = [v6 UUIDString];
  }
  else
  {
    uint64_t v4 = @"kNoCurrentHomeKey";
    id v8 = @"kNoCurrentHomeKey";
    uint64_t v7 = (void *)MEMORY[0x263EFFA88];
  }
  v14[0] = @"kResidentCapableDeviceKey";
  id v9 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHomeManager isResidentCapable](self, "isResidentCapable"));
  v15[0] = v9;
  v14[1] = @"kResidentEnabledKey";
  id v10 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"));
  v15[1] = v10;
  void v14[2] = @"kAccessAllowedWhenLockedKey";
  id v11 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHomeManager isAccessAllowedWhenLocked](self, "isAccessAllowedWhenLocked"));
  v14[3] = v4;
  v15[2] = v11;
  v15[3] = v7;
  id v12 = [NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:4];

  return v12;
}

- (void)__handleRequestFetchHomeConfiguration:(id)a3
{
  v247[1] = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = [v4 homeManagerOptions];
  unsigned int v6 = [v4 isEntitledForSPIAccess];
  uint64_t v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = self;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    double v11 = [v4 clientName];
    HMHomeManagerOptionsShortDescription();
    v13 = id v12 = v4;
    *(_DWORD *)long long buf = 138543874;
    long long v234 = v10;
    __int16 v235 = 2112;
    double v236 = v11;
    __int16 v237 = 2112;
    long long v238 = v13;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Received fetch from client, %@, with options: %@", buf, 0x20u);

    id v4 = v12;
  }

  uint64_t v14 = (void *)MEMORY[0x263EFF9A0];
  uint64_t v246 = *MEMORY[0x263F0CBA8];
  uint64_t v223 = v5;
  uint64_t v15 = [NSNumber numberWithUnsignedInteger:v5];
  v247[0] = v15;
  uint64_t v16 = [NSDictionary dictionaryWithObjects:v247 forKeys:&v246 count:1];
  id v17 = [v14 dictionaryWithDictionary:v16];

  char v231 = 0;
  uint64_t v18 = [(HMDHomeManager *)v8 determineDataSyncSateForHH2:&v231 homeManagerDataSyncState:0 homeManagerStatus:0];
  if (!v231)
  {
    id v19 = [v4 clientIdentifier];
    int v20 = [v19 isEqual:*MEMORY[0x263F0C7A8]];

    if (v20) {
      uint64_t v18 = [(HMDHomeManager *)v8 _autoAcceptAllPendingReinvitations];
    }
  }
  id v21 = (void *)MEMORY[0x230FBD990](v18);
  BOOL v22 = v8;
  id v23 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    id v24 = HMFGetLogIdentifier();
    HMFBooleanToString();
    id v25 = v4;
    double v26 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
    *(_DWORD *)long long buf = 138543618;
    long long v234 = v24;
    __int16 v235 = 2112;
    double v236 = v26;
    _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Handling fetch home configuration request, data sync in progress : %@", buf, 0x16u);

    id v4 = v25;
  }

  if (![v4 BOOLForKey:@"kCanUseCachedHomeConfigurationKey"])
  {
    id v34 = [v4 numberForKey:@"kConfigGenerationCounterKey"];
    uint64_t v35 = [v4 numberForKey:@"kHAPMetadataVersionKey"];
    id v36 = (void *)v35;
    if (!v34 || !v35)
    {
      double v38 = [MEMORY[0x263F087E8] hmErrorWithCode:20];
      [v4 respondWithError:*(void *)&v38];
      BOOL v33 = v17;
      goto LABEL_128;
    }
    BOOL v33 = v17;
    if (isAppleTV() && v231)
    {
      uint64_t v37 = (void *)MEMORY[0x263F087E8];
      double v38 = [(HMDHomeManager *)v22 _statusPayloadForMessage:v4];
      uint64_t v39 = [v37 hmErrorWithCode:77 userInfo:*(void *)&v38];
      [v4 respondWithError:v39];

LABEL_128:
      goto LABEL_129;
    }
    unsigned int v221 = v6;
    long long v40 = [v4 proxyConnection];
    long long v41 = [v40 processInfo];
    id v230 = 0;
    long long v42 = [v41 clientIdentifierSalt:&v230];
    double v38 = COERCE_DOUBLE(v230);

    BOOL v222 = v4;
    if (!v42)
    {
      long long v57 = (void *)MEMORY[0x230FBD990]();
      long long v58 = v22;
      long long v59 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        id v60 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        long long v234 = v60;
        __int16 v235 = 2112;
        double v236 = v38;
        _os_log_impl(&dword_22F52A000, v59, OS_LOG_TYPE_ERROR, "%{public}@Cannot send out home data because client identifier salt could not be determined: %@", buf, 0x16u);
      }
      [v222 respondWithError:*(void *)&v38];
      goto LABEL_127;
    }
    [v33 setObject:v42 forKeyedSubscript:@"kIdentifierSaltKey"];
    if ([v4 isEntitledForAssistantIdentifiers])
    {
      long long v43 = [(HMDHomeManager *)v22 _getAssistantHashingData];
      [v33 setObject:v43 forKeyedSubscript:*MEMORY[0x263F0C988]];
    }
    v215 = v42;
    double v216 = v38;
    __int16 v44 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[HMDHomeManager generationCounter](v22, "generationCounter"));
    [v33 setObject:v44 forKeyedSubscript:@"kConfigGenerationCounterKey"];

    uint64_t v45 = +[HMDHAPMetadata getSharedInstance];
    long long v46 = [v45 version];

    if (v46)
    {
      long long v47 = [v45 version];
      [v33 setObject:v47 forKeyedSubscript:@"kHAPMetadataVersionKey"];
    }
    long long v48 = [(HMDHomeManager *)v22 _statusPayloadForMessage:v4];
    [v33 addEntriesFromDictionary:v48];

    v219 = v34;
    uint64_t v49 = [v34 unsignedIntegerValue];
    long long v50 = v22;
    uint64_t v51 = v49;
    uint64_t v52 = [(HMDHomeManager *)v50 generationCounter];
    v217 = v36;
    uint64_t v53 = [v36 unsignedIntegerValue];
    v218 = v45;
    uint64_t v54 = [v45 version];
    uint64_t v55 = [v54 unsignedIntegerValue];

    if (v221) {
      int v56 = ![(HMDHomeManager *)v50 cacheUseAllowed];
    }
    else {
      int v56 = 0;
    }
    v220 = v50;
    int v61 = [(HMDHomeManager *)v50 hasClientRequestedMediaAccessoryControl:v222] & v223;
    if (v231) {
      int v61 = 0;
    }
    if (v56)
    {
      int v213 = v61;
      long long v62 = (void *)MEMORY[0x230FBD990]();
      uint64_t v63 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
      {
        uint64_t v64 = HMFGetLogIdentifier();
        HMFBooleanToString();
        double v65 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
        id v66 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543874;
        long long v234 = v64;
        __int16 v235 = 2112;
        double v236 = v65;
        __int16 v237 = 2112;
        long long v238 = v66;
        _os_log_impl(&dword_22F52A000, v63, OS_LOG_TYPE_INFO, "%{public}@Forcing SPI entitled client to not use cached home configuration homeCounterMatch %@  metadataVersionMatch %@", buf, 0x20u);
      }
      BOOL v67 = v53 != v55;

      id v68 = v220;
      unsigned int v69 = v221;
    }
    else
    {
      if (v51 == v52 && v53 == v55)
      {
        __int16 v81 = (void *)MEMORY[0x230FBD990]();
        id v68 = v50;
        id v82 = v50;
        uint64_t v83 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        {
          id v84 = HMFGetLogIdentifier();
          double v85 = COERCE_DOUBLE([(HMDHomeManager *)v82 generationCounter]);
          [v218 version];
          long long v87 = v86 = v33;
          double v88 = [v222 clientIdentifier];
          *(_DWORD *)long long buf = 138544130;
          long long v234 = v84;
          __int16 v235 = 2048;
          double v236 = v85;
          id v68 = v220;
          __int16 v237 = 2112;
          long long v238 = v87;
          __int16 v239 = 2112;
          double v240 = v88;
          _os_log_impl(&dword_22F52A000, v83, OS_LOG_TYPE_DEFAULT, "%{public}@Home manager generation counter %lu/metadata version %@ matches the client(%@)", buf, 0x2Au);

          BOOL v33 = v86;
        }

        int v213 = 1;
        goto LABEL_107;
      }
      int v213 = v61;
      BOOL v67 = v53 != v55;
      BOOL v89 = v51 == v52;
      id v68 = v220;
      unsigned int v69 = v221;
      if (v89)
      {
LABEL_97:
        if ((v67 | v56) != 1)
        {
LABEL_108:
          if (v69)
          {
            int v179 = @"com.apple.homekit-entitledclient.identifer";
            long long v180 = [(HMDHomeManager *)v68 _runtimeState];
            [v33 addEntriesFromDictionary:v180];

            [v33 setObject:MEMORY[0x263EFFA88] forKeyedSubscript:@"kCanCacheHomeConfigurationKey"];
            uint64_t v181 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHomeManager cacheUseAllowed](v68, "cacheUseAllowed"));
            [v33 setObject:v181 forKeyedSubscript:@"kCanUseCachedHomeConfigurationKey"];

            if (![(HMDHomeManager *)v68 cacheUseAllowed]) {
              [(HMDHomeManager *)v68 setCacheUseAllowed:1];
            }
            if (v213) {
              [v33 setObject:MEMORY[0x263EFFA88] forKey:*MEMORY[0x263F0CC18]];
            }
            long long v182 = @"com.apple.homekit-entitledclient.identifer";
          }
          else
          {
            long long v182 = [v222 clientIdentifier];
          }
          uint64_t v183 = [(HMDHomeManager *)v68 appData];
          long long v184 = [v183 applicationDataForIdentifier:v182];

          if (v184)
          {
            long long v185 = (void *)[v184 copy];
            [v33 setObject:v185 forKeyedSubscript:@"kAppDataInformationKey"];
          }
          long long v186 = [NSNumber numberWithBool:1];
          [v33 setObject:v186 forKeyedSubscript:*MEMORY[0x263F0CB28]];

          __int16 v187 = [(HMDHomeManager *)v68 hh2FrameworkSwitch];

          if (v187)
          {
            id v188 = NSNumber;
            long long v189 = [(HMDHomeManager *)v68 hh2FrameworkSwitch];
            long long v190 = objc_msgSend(v188, "numberWithBool:", objc_msgSend(v189, "checkExistenceOfHH2SentinelZone"));
            [v33 setObject:v190 forKeyedSubscript:*MEMORY[0x263F0CC88]];
          }
          __int16 v191 = objc_msgSend(NSNumber, "numberWithBool:", -[HMDHomeManager isHH2MigrationInProgress](v68, "isHH2MigrationInProgress"));
          [v33 setObject:v191 forKeyedSubscript:*MEMORY[0x263F0CB00]];

          id v192 = +[HMDHH2MigratorRecord lastMigrationFailure];
          [v33 setObject:v192 forKeyedSubscript:*MEMORY[0x263F0CAF8]];

          if (_os_feature_enabled_impl())
          {
            __int16 v193 = [(HMDHomeManager *)v68 idsServerBag];
            uint64_t v194 = [v193 isHH2ManualMigrationEnabled];
          }
          else
          {
            uint64_t v194 = 0;
          }
          uint64_t v195 = [MEMORY[0x263F42608] sharedPreferences];
          uint64_t v196 = [v195 preferenceForKey:@"hh2ManualMigrationAvailableOverride"];

          __int16 v197 = [v196 value];

          if (v197)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = __56__HMDHomeManager___handleRequestFetchHomeConfiguration___block_invoke;
            block[3] = &unk_264A2F820;
            void block[4] = v220;
            id v198 = v196;
            id v225 = v198;
            if (__handleRequestFetchHomeConfiguration__onceToken != -1) {
              dispatch_once(&__handleRequestFetchHomeConfiguration__onceToken, block);
            }
            uint64_t v194 = [v198 BOOLValue];
          }
          __int16 v199 = [NSNumber numberWithBool:v194];
          [v33 setObject:v199 forKeyedSubscript:*MEMORY[0x263F0CAE8]];

          uint64_t v200 = [(HMDHomeManager *)v220 idsServerBag];
          uint64_t v201 = [v200 homeSafetySecurityEnabled];

          uint64_t v202 = [NSNumber numberWithBool:v201];
          [v33 setObject:v202 forKeyedSubscript:*MEMORY[0x263F0CB18]];

          __int16 v203 = (void *)[v33 copy];
          [v222 respondWithPayload:v203];

          id v34 = v219;
          double v38 = v216;
          id v36 = v217;
          long long v42 = v215;
LABEL_127:

          id v4 = v222;
          goto LABEL_128;
        }
        int v158 = HMIsHAPMetadataNeededForHMHomeManagerOptions();
        uint64_t v159 = (void *)MEMORY[0x230FBD990]();
        uint64_t v160 = v68;
        BOOL v161 = HMFGetOSLogHandle();
        BOOL v162 = os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT);
        if (v158)
        {
          if (v162)
          {
            char v163 = HMFGetLogIdentifier();
            double v164 = [v218 version];
            *(_DWORD *)long long buf = 138543874;
            long long v234 = v163;
            __int16 v235 = 2112;
            double v236 = v164;
            __int16 v237 = 2112;
            long long v238 = v217;
            _os_log_impl(&dword_22F52A000, v161, OS_LOG_TYPE_DEFAULT, "%{public}@Home manager HAP metadata version %@ does not match client's value of %@", buf, 0x20u);
          }
          [MEMORY[0x263EFF910] timeIntervalSinceReferenceDate];
          double v166 = v165;
          long long v167 = +[HMDHAPMetadata getSharedInstance];
          id v168 = objc_msgSend(v167, "xpcData:", objc_msgSend(v222, "isEntitledForSPIAccess"));
          uint64_t v169 = [MEMORY[0x263EFF910] timeIntervalSinceReferenceDate];
          double v171 = v170;
          long long v172 = (void *)MEMORY[0x230FBD990](v169);
          long long v173 = v160;
          long long v174 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
          {
            long long v175 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            long long v234 = v175;
            __int16 v235 = 2048;
            double v236 = v171 - v166;
            _os_log_impl(&dword_22F52A000, v174, OS_LOG_TYPE_DEFAULT, "%{public}@Time to encode metadata: %.4f s", buf, 0x16u);
          }
          [v33 setObject:v168 forKeyedSubscript:@"kHAPMetadataDataKey"];
          [(HMDHomeManager *)v173 setCacheUseAllowed:0];

          id v68 = v220;
        }
        else
        {
          if (v162)
          {
            long long v176 = HMFGetLogIdentifier();
            HMHomeManagerOptionsToString();
            double v177 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
            long long v178 = [v222 clientName];
            *(_DWORD *)long long buf = 138543874;
            long long v234 = v176;
            __int16 v235 = 2112;
            double v236 = v177;
            __int16 v237 = 2112;
            long long v238 = v178;
            _os_log_impl(&dword_22F52A000, v161, OS_LOG_TYPE_DEFAULT, "%{public}@Client has not requested access to HAP accessories (options %@) - not sending metadata to [%@]", buf, 0x20u);
          }
        }
LABEL_107:
        unsigned int v69 = v221;
        goto LABEL_108;
      }
    }
    __int16 v70 = (void *)MEMORY[0x230FBD990]();
    id v71 = v68;
    uint64_t v72 = HMFGetOSLogHandle();
    v214 = v71;
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      char v73 = HMFGetLogIdentifier();
      double v74 = COERCE_DOUBLE([(HMDHomeManager *)v214 generationCounter]);
      uint64_t v75 = [v222 clientIdentifier];
      double v76 = COERCE_DOUBLE([v219 unsignedIntegerValue]);
      *(_DWORD *)long long buf = 138544386;
      uint64_t v77 = "";
      long long v234 = v73;
      if (v56) {
        uint64_t v77 = " (forced to update anyways)";
      }
      __int16 v235 = 2048;
      double v236 = v74;
      unsigned int v69 = v221;
      __int16 v237 = 2112;
      long long v238 = v75;
      __int16 v239 = 2048;
      double v240 = v76;
      __int16 v241 = 2080;
      id v242 = v77;
      _os_log_impl(&dword_22F52A000, v72, OS_LOG_TYPE_DEFAULT, "%{public}@Home manager generation counter %lu does not match client's (%@) value of %lu%s.", buf, 0x34u);

      id v68 = v220;
      id v71 = v214;
    }

    if ((v223 & 0x9FCD) != 0)
    {
      BOOL v210 = v67;
      int v207 = v56;
      uint64_t v78 = [(HMDHomeManager *)v71 homes];
      uint64_t v79 = v222;
      if (!isAppleTV() || ([v222 isEntitledForSPIAccess] & 1) != 0)
      {
        id v80 = v78;
        goto LABEL_79;
      }
      v211 = v33;
      uint64_t v109 = [(HMDHomeManager *)v71 currentHomeUUID];
      uint64_t v110 = v71;
      id v111 = (void *)MEMORY[0x263EFF980];
      __int16 v112 = [(HMDHomeManager *)v110 homes];
      id v80 = objc_msgSend(v111, "arrayWithCapacity:", objc_msgSend(v112, "count"));

      long long v228 = 0u;
      long long v229 = 0u;
      long long v226 = 0u;
      long long v227 = 0u;
      id v113 = v78;
      uint64_t v114 = [v113 countByEnumeratingWithState:&v226 objects:v245 count:16];
      if (!v114) {
        goto LABEL_78;
      }
      uint64_t v115 = v114;
      uint64_t v116 = *(void *)v227;
      while (1)
      {
        uint64_t v117 = 0;
        do
        {
          if (*(void *)v227 != v116) {
            objc_enumerationMutation(v113);
          }
          id v118 = *(void **)(*((void *)&v226 + 1) + 8 * v117);
          if (v109)
          {
            long long v119 = [v118 uuid];
            char v120 = [v119 isEqual:v109];

            if ((v120 & 1) == 0) {
              goto LABEL_73;
            }
LABEL_72:
            [v80 addObject:v118];
            goto LABEL_73;
          }
          if ([v118 isOwnerUser]) {
            goto LABEL_72;
          }
LABEL_73:
          ++v117;
        }
        while (v115 != v117);
        uint64_t v121 = [v113 countByEnumeratingWithState:&v226 objects:v245 count:16];
        uint64_t v115 = v121;
        if (!v121)
        {
LABEL_78:

          BOOL v33 = v211;
          id v68 = v220;
          uint64_t v79 = v222;
          id v71 = v214;
LABEL_79:
          long long v122 = [(HMDHomeManager *)v71 filterHomes:v80 isSPIEntitled:v221];

          [MEMORY[0x263EFF910] timeIntervalSinceReferenceDate];
          double v124 = v123;
          v212 = v122;
          uint64_t v209 = encodeRootObjectForIncomingXPCMessage(v122, v79);
          id v125 = [(HMDHomeManager *)v71 incomingInvitations];
          __int16 v126 = (void *)[v125 copy];
          id v127 = encodeRootObjectForIncomingXPCMessage(v126, 0);

          uint64_t v128 = [MEMORY[0x263EFF910] timeIntervalSinceReferenceDate];
          double v130 = v129;
          id v131 = (void *)MEMORY[0x230FBD990](v128);
          __int16 v132 = v71;
          uint64_t v133 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v204 = HMFGetLogIdentifier();
            __int16 v206 = v131;
            objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v212, "count"));
            double v134 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
            uint64_t v135 = NSNumber;
            __int16 v205 = [(HMDHomeManager *)v132 homes];
            uint64_t v136 = objc_msgSend(v135, "numberWithUnsignedInteger:", objc_msgSend(v205, "count"));
            objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v127, "length") + objc_msgSend(v209, "length"));
            uint64_t v137 = (char *)objc_claimAutoreleasedReturnValue();
            uint64_t v138 = [v222 clientIdentifier];
            *(_DWORD *)long long buf = 138544642;
            long long v234 = v204;
            __int16 v235 = 2112;
            double v236 = v134;
            __int16 v237 = 2112;
            long long v238 = v136;
            __int16 v239 = 2048;
            double v240 = v130 - v124;
            __int16 v241 = 2112;
            id v242 = v137;
            __int16 v243 = 2112;
            v244 = v138;
            _os_log_impl(&dword_22F52A000, v133, OS_LOG_TYPE_DEFAULT, "%{public}@Number of homes - %@ / %@, Time to encode homes: %.4f s, Size: %@ bytes, client: %@", buf, 0x3Eu);

            id v131 = v206;
            id v71 = v214;

            id v68 = v220;
          }

          long long v139 = v209;
          [v33 setObject:v209 forKeyedSubscript:@"kHomeDataKey"];
          [v33 setObject:v127 forKeyedSubscript:@"kIncomingHomeInvitationsKey"];
          uint64_t v140 = [(HMDHomeManager *)v132 lastRemovedCurrentAccessoryUUID];
          BOOL v141 = [v140 UUIDString];
          [v33 setObject:v141 forKeyedSubscript:*MEMORY[0x263F0CB58]];

          uint64_t v142 = [(HMDHomeManager *)v132 userDefaults];
          uint64_t v143 = [v142 objectForKey:@"HMDHomeManagerSharedHomesNotYetMigratedKey"];

          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            uint64_t v144 = v143;
          }
          else {
            uint64_t v144 = 0;
          }
          id v145 = v144;

          uint64_t v146 = [v145 allKeys];

          [v33 setObject:v146 forKeyedSubscript:*MEMORY[0x263F0CC40]];
          int64_t v147 = [(HMDHomeManager *)v132 primaryHomeUUID];

          unsigned int v69 = v221;
          id v148 = v212;
          if (v147)
          {
            uint64_t v149 = [(HMDHomeManager *)v132 primaryHomeUUID];
            uint64_t v150 = objc_msgSend(v212, "hmf_firstObjectWithUUID:", v149);

            if (v150)
            {
              id v151 = [(HMDHomeManager *)v132 primaryHomeUUID];
              goto LABEL_89;
            }
            long long v139 = v209;
            if ([v212 count])
            {
              uint64_t v150 = [v212 firstObject];
              id v151 = [v150 uuid];
LABEL_89:
              int v152 = v151;
              uint64_t v153 = [v151 UUIDString];
              [v33 setObject:v153 forKeyedSubscript:@"kPrimaryHomeUUIDKey"];

              id v71 = v214;
              long long v139 = v209;
            }
          }
          if (v221)
          {
            id v154 = [(HMDHomeManager *)v132 currentHomeUUID];

            if (v154)
            {
              uint64_t v155 = [(HMDHomeManager *)v132 currentHomeUUID];
              uint64_t v156 = [v155 UUIDString];
              [v33 setObject:v156 forKeyedSubscript:@"kCurrentHomeUUIDKey"];

              id v148 = v212;
            }
            long long v157 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v148, "count"));
            [v33 setObject:v157 forKeyedSubscript:@"kHomeCountKey"];
          }
          int v56 = v207;
LABEL_95:
          BOOL v67 = v210;
          goto LABEL_96;
        }
      }
    }
    if ((v223 & 0x10) != 0)
    {
      BOOL v210 = v67;
      uint64_t v96 = [(HMDHomeManager *)v71 _accessoryOfCurrentDevice];
      double v97 = [v96 home];

      if (v97 != 0.0)
      {
        int v98 = (void *)MEMORY[0x230FBD990]();
        uint64_t v99 = v71;
        long long v100 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
        {
          int v101 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543618;
          long long v234 = v101;
          __int16 v235 = 2112;
          double v236 = v97;
          _os_log_impl(&dword_22F52A000, v100, OS_LOG_TYPE_INFO, "%{public}@Encoding home containing current device's accessory: %@", buf, 0x16u);
        }
        double v232 = v97;
        int v102 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v232 count:1];
        char v103 = encodeRootObjectForIncomingXPCMessage(v102, v222);
        [v33 setObject:v103 forKeyedSubscript:@"kHomeDataKey"];

        id v71 = v214;
        if (v221)
        {
          id v104 = [(HMDHomeManager *)v99 currentHomeUUID];
          id v105 = [*(id *)&v97 uuid];
          int v106 = [v104 isEqual:v105];

          if (v106)
          {
            char v107 = [(HMDHomeManager *)v99 currentHomeUUID];
            id v108 = [v107 UUIDString];
            [v33 setObject:v108 forKeyedSubscript:@"kCurrentHomeUUIDKey"];
          }
        }
      }

      unsigned int v69 = v221;
      goto LABEL_95;
    }
    long long v90 = (void *)MEMORY[0x230FBD990]();
    int v91 = v71;
    uint64_t v92 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      int v208 = v56;
      v94 = BOOL v93 = v67;
      HMHomeManagerOptionsToString();
      double v95 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
      *(_DWORD *)long long buf = 138543618;
      long long v234 = v94;
      __int16 v235 = 2112;
      double v236 = v95;
      _os_log_impl(&dword_22F52A000, v92, OS_LOG_TYPE_DEFAULT, "%{public}@Not sending home data as the client has not requested it in their options: %@", buf, 0x16u);

      BOOL v67 = v93;
      int v56 = v208;
    }

    id v71 = v214;
LABEL_96:
    [(HMDHomeManager *)v71 setCacheUseAllowed:0];
    goto LABEL_97;
  }
  uint64_t v27 = [v4 isEntitledForSPIAccess];
  if (v27 && v223 != -1)
  {
    uint64_t v28 = (void *)MEMORY[0x230FBD990]();
    __int16 v29 = v22;
    id v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      uint64_t v31 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      long long v234 = v31;
      _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_INFO, "%{public}@Client has specified partial options, not using cache", buf, 0xCu);
    }
    uint64_t v27 = 0;
  }
  id v32 = [NSNumber numberWithBool:v27];
  BOOL v33 = v17;
  [v17 setObject:v32 forKeyedSubscript:@"kCanUseCachedHomeConfigurationKey"];

  id v34 = (void *)[v17 copy];
  [v4 respondWithPayload:v34];
LABEL_129:
}

void __56__HMDHomeManager___handleRequestFetchHomeConfiguration___block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = HMFGetLogIdentifier();
    int v6 = [*(id *)(a1 + 40) BOOLValue];
    int v7 = 138543618;
    id v8 = v5;
    __int16 v9 = 1024;
    int v10 = v6;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@hh2ManualMigrationAvailableOverride detected. Setting to %d", (uint8_t *)&v7, 0x12u);
  }
}

- (void)_handleRequestFetchHomeConfiguration:(id)a3
{
  id v6 = a3;
  id v4 = (void *)MEMORY[0x230FBD990]();
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x263F425C0]) initWithName:@"homed.xpc.fetch.homeConfiguration."];
  [(HMDHomeManager *)self __handleRequestFetchHomeConfiguration:v6];
}

- (id)_appleMediaAccessoryOfCurrentDevice
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
    objc_opt_class();
    int v6 = objc_opt_isKindOfClass() & 1;
    if (v6) {
      int v7 = v5;
    }
    else {
      int v7 = 0;
    }
    id v8 = v7;

    if (v6)
    {
      id v9 = v5;
    }
    else
    {
      int v10 = (void *)MEMORY[0x230FBD990]();
      uint64_t v11 = self;
      id v12 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = HMFGetLogIdentifier();
        int v15 = 138543618;
        uint64_t v16 = v13;
        __int16 v17 = 2112;
        id v18 = v5;
        _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to get apple media accessory for current accessory: %@", (uint8_t *)&v15, 0x16u);
      }
      id v9 = 0;
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

- (id)_accessoryOfCurrentDevice
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v2 = [(HMDHomeManager *)self homes];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        id v8 = objc_msgSend(v7, "accessories", 0);
        uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v24 count:16];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = *(void *)v17;
          while (2)
          {
            for (uint64_t j = 0; j != v10; ++j)
            {
              if (*(void *)v17 != v11) {
                objc_enumerationMutation(v8);
              }
              uint64_t v13 = *(void **)(*((void *)&v16 + 1) + 8 * j);
              if ([v13 isCurrentAccessory])
              {
                id v14 = v13;

                goto LABEL_19;
              }
            }
            uint64_t v10 = [v8 countByEnumeratingWithState:&v16 objects:v24 count:16];
            if (v10) {
              continue;
            }
            break;
          }
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v20 objects:v25 count:16];
      id v14 = 0;
    }
    while (v4);
  }
  else
  {
    id v14 = 0;
  }
LABEL_19:

  return v14;
}

- (id)filterHomes:(id)a3 isSPIEntitled:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v6 = a3;
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  void v18[2] = __44__HMDHomeManager_filterHomes_isSPIEntitled___block_invoke;
  v18[3] = &unk_264A2B2D0;
  void v18[4] = self;
  int v7 = objc_msgSend(v6, "na_filter:", v18);
  id v8 = v7;
  if (v4)
  {
    id v9 = v7;
LABEL_5:
    id v12 = v9;
    goto LABEL_9;
  }
  uint64_t v10 = +[HMDAppleAccountSettings sharedSettings];
  char v11 = [v10 isHomeEnabled];

  if (v11)
  {
    objc_msgSend(v8, "na_filter:", &__block_literal_global_844);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_5;
  }
  uint64_t v13 = (void *)MEMORY[0x230FBD990]();
  id v14 = self;
  int v15 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    long long v16 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v20 = v16;
    _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@iCloud switch is disabled", buf, 0xCu);
  }
  id v12 = (void *)MEMORY[0x263EFFA68];
LABEL_9:

  return v12;
}

BOOL __44__HMDHomeManager_filterHomes_isSPIEntitled___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v3 = a2;
  BOOL v4 = [v3 currentUser];

  if (!v4)
  {
    uint64_t v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = *(id *)(a1 + 32);
    int v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      int v10 = 138543618;
      char v11 = v8;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@There is no current user for : %@", (uint8_t *)&v10, 0x16u);
    }
  }

  return v4 != 0;
}

uint64_t __44__HMDHomeManager_filterHomes_isSPIEntitled___block_invoke_842(uint64_t a1, void *a2)
{
  return [a2 isAccessToHomeAllowed];
}

- (id)homesToSendForNonSPIClients
{
  id v3 = [MEMORY[0x263EFF980] array];
  BOOL v4 = [(HMDHomeManager *)self homes];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __45__HMDHomeManager_homesToSendForNonSPIClients__block_invoke;
  v8[3] = &unk_264A2B2A8;
  id v9 = v3;
  id v5 = v3;
  objc_msgSend(v4, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v8);

  id v6 = (void *)[v5 copy];
  return v6;
}

void __45__HMDHomeManager_homesToSendForNonSPIClients__block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isAccessToHomeAllowed]) {
    [*(id *)(a1 + 32) addObject:v3];
  }
}

- (void)_notifyMetricsManagerOfConfigurationChange
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v14 = (id)[objc_alloc(MEMORY[0x263F424F0]) initWithName:@"Generate Home Configuration Log Event"];
  id v3 = (void *)MEMORY[0x230FBD990]();
  BOOL v4 = self;
  HMFGetOSLogHandle();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    int v7 = [v14 identifier];
    id v8 = [v7 shortDescription];
    *(_DWORD *)long long buf = 138543618;
    id v16 = v6;
    __int16 v17 = 2114;
    long long v18 = v8;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Home Configuration got updated. Scheduling of new log event generation.", buf, 0x16u);
  }
  objc_initWeak((id *)buf, v4);
  id v9 = [MEMORY[0x263F42628] defaultScheduler];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = __60__HMDHomeManager__notifyMetricsManagerOfConfigurationChange__block_invoke;
  v11[3] = &unk_264A2C148;
  objc_copyWeak(&v13, (id *)buf);
  id v12 = v14;
  id v10 = (id)[v9 performWithQualityOfService:9 block:v11];

  objc_destroyWeak(&v13);
  objc_destroyWeak((id *)buf);
  __HMFActivityScopeLeave();
}

void __60__HMDHomeManager__notifyMetricsManagerOfConfigurationChange__block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = (void *)MEMORY[0x230FBD990]();
  id v4 = WeakRetained;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    int v7 = [*(id *)(a1 + 32) identifier];
    id v8 = [v7 shortDescription];
    int v16 = 138543618;
    __int16 v17 = v6;
    __int16 v18 = 2114;
    uint64_t v19 = v8;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Starting generation of home configuration log event for analytics", (uint8_t *)&v16, 0x16u);
  }
  id v9 = [v4 metricsManager];
  [v9 homeKitConfigurationChanged];

  id v10 = (void *)MEMORY[0x230FBD990]();
  id v11 = v4;
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    id v14 = [*(id *)(a1 + 32) identifier];
    int v15 = [v14 shortDescription];
    int v16 = 138543618;
    __int16 v17 = v13;
    __int16 v18 = 2114;
    uint64_t v19 = v15;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Finished generation of home configuration log event for analytics", (uint8_t *)&v16, 0x16u);
  }
}

- (void)_registerForMessages
{
  uint64_t v367 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = self;
  id v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id v6 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v366 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Registering for contact store change notifications", buf, 0xCu);
  }
  int v7 = [(HMDHomeManager *)v4 notificationCenter];
  [v7 addObserver:v4 selector:sel_handleContactStoreChanged_ name:*MEMORY[0x263EFE118] object:0];

  id v8 = (void *)MEMORY[0x230FBD990]();
  id v9 = v4;
  id v10 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    id v11 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    long long v366 = v11;
    _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Registering remote account message filter", buf, 0xCu);
  }
  id v12 = [HMDRemoteAccountMessageFilter alloc];
  id v13 = [(HMDHomeManager *)v9 messageDestination];
  v364[0] = @"kAccessHomeInviteRequestKey";
  v364[1] = @"kHomeDataSyncRequestKey";
  v364[2] = @"kHomeDataFragmentedSyncRequestKey";
  v364[3] = @"kUpdateHomeInvitationStateInternalRequestKey";
  v364[4] = @"kUserRemovedRequestKey";
  v364[5] = @"kUserResetHomeConfigRequestKey";
  v364[6] = @"kElectDeviceForIDSSessionKey";
  v364[7] = @"HMDHomeManagerSharedUserMigratedToHH2MessageKey";
  id v14 = [MEMORY[0x263EFF8C0] arrayWithObjects:v364 count:8];
  uint64_t v15 = [(HMDRemoteAccountMessageFilter *)v12 initWithTarget:v13 allowedMessages:v14];

  int v16 = [(HMDHomeManager *)v9 msgFilterChain];
  v296 = (void *)v15;
  [v16 addMessageFilter:v15];

  __int16 v17 = +[HMDRemoteMessagePolicy defaultPolicy];
  [v17 setRequiresSecureMessage:0];
  [v17 setRequiresAccountMessage:0];
  [v17 setTransportRestriction:-1];
  v295 = v17;
  uint64_t v18 = [v17 copy];
  [(HMDHomeManager *)v9 initHomeManagerFrameworkNotify];
  uint64_t v19 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v20 = *MEMORY[0x263F0CAC8];
  uint64_t v21 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v363[0] = v21;
  long long v22 = +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:0];
  v363[1] = v22;
  uint64_t v288 = *MEMORY[0x263F0CF40];
  uint64_t v23 = *MEMORY[0x263F0CF40];
  uint64_t v289 = *MEMORY[0x263F0C7A8];
  v362[0] = *MEMORY[0x263F0C7A8];
  v362[1] = v23;
  id v24 = [MEMORY[0x263EFF8C0] arrayWithObjects:v362 count:2];
  id v25 = +[HMDXPCiCloudSwitchMessagePolicy policyWithBundleIdentifiers:v24];
  v363[2] = v25;
  uint64_t v26 = [MEMORY[0x263EFF8C0] arrayWithObjects:v363 count:3];
  [v19 registerForMessage:v20 receiver:v9 policies:v26 selector:sel__handleRequestFetchHomeConfiguration_];

  uint64_t v27 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v28 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v361[0] = v28;
  __int16 v29 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v361[1] = v29;
  id v30 = [MEMORY[0x263EFF8C0] arrayWithObjects:v361 count:2];
  [v27 registerForMessage:@"kRemoveHomeRequestKey" receiver:v9 policies:v30 selector:sel__handleRequestRemoveHome_];

  uint64_t v31 = +[HMDRemoteMessagePolicy defaultPolicy];
  [v31 setRequiresAccountMessage:1];
  uint64_t v292 = v31;
  uint64_t v32 = [v31 copy];
  BOOL v33 = [(HMDHomeManager *)v9 messageDispatcher];
  id v34 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
  v360[0] = v34;
  v294 = (void *)v32;
  v360[1] = v32;
  uint64_t v35 = [MEMORY[0x263EFF8C0] arrayWithObjects:v360 count:2];
  [v33 registerForMessage:@"kRemoveAllUsersFromAccessoriesRequestKey" receiver:v9 policies:v35 selector:sel__handleRemoveAllUsersFromAccessories_];

  id v36 = [[HMDPendingInvitedUserMessagePolicy alloc] initWithHomeManager:v9];
  uint64_t v37 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v293 = v36;
  v359[0] = v36;
  uint64_t v297 = (void *)v18;
  v359[1] = v18;
  p_cache = HMDProcessRelaunchThresholdLogEvent.cache;
  uint64_t v39 = [MEMORY[0x263EFF8C0] arrayWithObjects:v359 count:2];
  [v37 registerForMessage:@"HMDHomeManagerSharedUserMigratedToHH2MessageKey" receiver:v9 policies:v39 selector:sel__handleSharedUserMovedToHH2_];

  long long v40 = [(HMDHomeManager *)v9 messageDispatcher];
  long long v41 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:1];
  v358[0] = v41;
  long long v42 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v358[1] = v42;
  long long v43 = [MEMORY[0x263EFF8C0] arrayWithObjects:v358 count:2];
  [v40 registerForMessage:@"kAddHomeRequestKey" receiver:v9 policies:v43 selector:sel__handleRequestAddHome_];

  __int16 v44 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v45 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:2];
  v357[0] = v45;
  long long v46 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v357[1] = v46;
  long long v47 = [MEMORY[0x263EFF8C0] arrayWithObjects:v357 count:2];
  [v44 registerForMessage:@"kSetPrimaryHomeRequestKey" receiver:v9 policies:v47 selector:sel__handleRequestSetPrimaryHome_];

  long long v48 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v49 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  long long v356 = v49;
  long long v50 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v356 count:1];
  [v48 registerForMessage:@"kQueryHomeKitUsageStateRequestKey" receiver:v9 policies:v50 selector:sel__handleRequestIsUserUsingHomeKit_];

  uint64_t v51 = +[HMDRemoteMessagePolicy defaultPolicy];
  [v51 setRequiresSecureMessage:0];
  [v51 setAllowsAnonymousMessage:1];
  uint64_t v291 = v51;
  uint64_t v52 = [v51 copy];
  uint64_t v53 = [(HMDHomeManager *)v9 messageDispatcher];
  v290 = (void *)v52;
  uint64_t v355 = v52;
  uint64_t v54 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v355 count:1];
  [v53 registerForMessage:@"kElectDeviceForIDSSessionKey" receiver:v9 policies:v54 selector:sel__handleElectDeviceForIDSSession_];

  uint64_t v55 = +[HMDDeviceCapabilities deviceCapabilities];
  LODWORD(v54) = [v55 supportsHomeInvitation];

  if (v54)
  {
    int v56 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v354 = v18;
    long long v57 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v354 count:1];
    [v56 registerForMessage:@"kAccessHomeInviteRequestKey" receiver:v9 policies:v57 selector:sel__handleAccessHomeInvite_];
  }
  if (isAppleTV())
  {
    long long v58 = +[HMDRemoteMessagePolicy defaultPolicy];
    [v58 setRequiresSecureMessage:0];
    [v58 setRequiresAccountMessage:1];
    [v58 setTransportRestriction:-1];
    long long v59 = (void *)[v58 copy];
    id v60 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v353 = v59;
    int v61 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v353 count:1];
    [v60 registerForMessage:@"kAddRemoteAccessRequestKey" receiver:v9 policies:v61 selector:sel__handleAddRemoteAccessRequest_];

    long long v62 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v352 = v59;
    uint64_t v63 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v352 count:1];
    [v62 registerForMessage:@"kDoYouSeeUnpairedAccessoriesKey" receiver:v9 policies:v63 selector:sel__handleDoYouSeeUnpairedAccessories_];

    uint64_t v64 = +[HMDRemoteMessagePolicy defaultPolicy];
    [v64 setAllowsAnonymousMessage:1];
    double v65 = (void *)[v64 copy];
    id v66 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v351 = v65;
    BOOL v67 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v351 count:1];
    [v66 registerForMessage:@"kAreYouAtHomeRequestKey" receiver:v9 policies:v67 selector:sel__handleAreYouAtHome_];

    p_cache = HMDProcessRelaunchThresholdLogEvent.cache;
  }
  id v68 = +[HMDDeviceCapabilities deviceCapabilities];
  int v69 = [v68 isResidentCapable];

  if (v69)
  {
    __int16 v70 = [(HMDHomeManager *)v9 messageDispatcher];
    id v71 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:7];
    v350[0] = v71;
    uint64_t v72 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v350[1] = v72;
    char v73 = [MEMORY[0x263EFF8C0] arrayWithObjects:v350 count:2];
    [v70 registerForMessage:@"kUpdateResidentEnabledOnThisDeviceRequestKey" receiver:v9 policies:v73 selector:sel__handleEnableResidentForThisDeviceRequest_];

    p_cache = (void **)(HMDProcessRelaunchThresholdLogEvent + 16);
  }
  if (+[HMDDeviceCapabilities supportsDismissUserNotificationAndDialog])
  {
    double v74 = +[HMDRemoteMessagePolicy defaultPolicy];
    [v74 setRequiresSecureMessage:0];
    [v74 setRequiresAccountMessage:1];
    [v74 setTransportRestriction:-1];
    uint64_t v75 = (void *)[v74 copy];
    double v76 = [(HMDHomeManager *)v9 messageDispatcher];
    v349 = v75;
    uint64_t v77 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v349 count:1];
    [v76 registerForMessage:@"kDismissBulletinInternalRequestKey" receiver:v9 policies:v77 selector:sel__handleDismissBulletinRequest_];

    uint64_t v78 = [(HMDHomeManager *)v9 messageDispatcher];
    v348 = v75;
    uint64_t v79 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v348 count:1];
    [v78 registerForMessage:@"kDismissDialogInternalRequestKey" receiver:v9 policies:v79 selector:sel__handleDismissDialogRequest_];

    p_cache = HMDProcessRelaunchThresholdLogEvent.cache;
  }
  if (isiOSDevice() || isWatch())
  {
    id v80 = [(HMDHomeManager *)v9 messageDispatcher];
    __int16 v81 = [p_cache + 393 policyWithEntitlements:5];
    v347 = v81;
    id v82 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v347 count:1];
    [v80 registerForMessage:@"kUpdateAccessAllowedWhenLockedRequestKey" receiver:v9 policies:v82 selector:sel__handleAccessAllowedWhenLockedRequest_];
  }
  uint64_t v83 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  [v83 setAllowsAnonymousMessage:1];
  id v84 = (void *)[v83 copy];
  double v85 = [(HMDHomeManager *)v9 messageDispatcher];
  v346 = v84;
  id v86 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v346 count:1];
  [v85 registerForMessage:@"kUserRemovedRequestKey" receiver:v9 policies:v86 selector:sel__handleUserRemoved_];

  long long v87 = [(HMDHomeManager *)v9 messageDispatcher];
  v345 = v84;
  double v88 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v345 count:1];
  [v87 registerForMessage:@"kUserResetHomeConfigRequestKey" receiver:v9 policies:v88 selector:sel__handleResetHome_];

  isWatch();
  [(HMDHomeManager *)v9 _registerForAppleMediaMessages];
  if (isiOSDevice())
  {
    BOOL v89 = +[HMDRemoteMessagePolicy defaultPolicy];
    [v89 setRequiresSecureMessage:1];
    [v89 setRoles:2];
    long long v90 = (void *)[v89 copy];
    int v91 = [(HMDHomeManager *)v9 messageDispatcher];
    v344 = v90;
    uint64_t v92 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v344 count:1];
    [v91 registerForMessage:@"kRetrieveVendorIdentifierInternalKey" receiver:v9 policies:v92 selector:sel__handleRetrieveVendorIdentifier_];

    if (isInternalBuild())
    {
      BOOL v93 = [(HMDHomeManager *)v9 messageDispatcher];
      uint64_t v94 = *MEMORY[0x263F0CC70];
      double v95 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
      v343 = v95;
      uint64_t v96 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v343 count:1];
      [v93 registerForMessage:v94 receiver:v9 policies:v96 selector:sel__handleKeyRoll_];

      double v97 = [(HMDHomeManager *)v9 messageDispatcher];
      uint64_t v98 = *MEMORY[0x263F0CC00];
      uint64_t v99 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
      v342 = v99;
      long long v100 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v342 count:1];
      [v97 registerForMessage:v98 receiver:v9 policies:v100 selector:sel_handleRollPreferredHH2ControllerKeyMessage_];
    }
  }
  if (isInternalBuild())
  {
    int v101 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v102 = *MEMORY[0x263F0C9D8];
    char v103 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    char v341 = v103;
    id v104 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v341 count:1];
    [v101 registerForMessage:v102 receiver:v9 policies:v104 selector:sel_handleDeleteModelMessage_];

    id v105 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v106 = *MEMORY[0x263F0C9A0];
    char v107 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    char v340 = v107;
    id v108 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v340 count:1];
    [v105 registerForMessage:v106 receiver:v9 policies:v108 selector:sel_handleCheckIsUsingProductionObjectModelMessage_];
  }
  [(HMDHomeManager *)v9 _registerForFrameworkSwitch];
  if (+[HMDAppleAccountSettings supportsCloudSettings])
  {
    uint64_t v109 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v110 = *MEMORY[0x263F0CBE8];
    id v111 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v338[0] = v289;
    v338[1] = v288;
    v339[0] = v111;
    __int16 v112 = [MEMORY[0x263EFF8C0] arrayWithObjects:v338 count:2];
    id v113 = +[HMDXPCiCloudSwitchMessagePolicy policyWithBundleIdentifiers:v112];
    v339[1] = v113;
    uint64_t v114 = [MEMORY[0x263EFF8C0] arrayWithObjects:v339 count:2];
    [v109 registerForMessage:v110 receiver:v9 policies:v114 selector:sel__handleQueryiCloudSwitchState_];

    uint64_t v115 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v116 = *MEMORY[0x263F0CC80];
    uint64_t v117 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v336[1] = v288;
    v337[0] = v117;
    v336[0] = v289;
    id v118 = [MEMORY[0x263EFF8C0] arrayWithObjects:v336 count:2];
    long long v119 = +[HMDXPCiCloudSwitchMessagePolicy policyWithBundleIdentifiers:v118];
    v337[1] = v119;
    char v120 = [MEMORY[0x263EFF8C0] arrayWithObjects:v337 count:2];
    [v115 registerForMessage:v116 receiver:v9 policies:v120 selector:sel__handleUpdateiCloudSwitchState_];
  }
  uint64_t v121 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v122 = *MEMORY[0x263F0CBC8];
  double v123 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  uint64_t v335 = v123;
  double v124 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v335 count:1];
  [v121 registerForMessage:v122 receiver:v9 policies:v124 selector:sel__handleQueryHomeNamespace_];

  id v125 = [(HMDHomeManager *)v9 messageDispatcher];
  __int16 v126 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v334 = v126;
  id v127 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v334 count:1];
  [v125 registerForMessage:@"kResetConfigRequestKey" receiver:v9 policies:v127 selector:sel__handleResetConfiguration_];

  uint64_t v128 = [MEMORY[0x263F42620] productInfo];
  uint64_t v129 = [v128 productVariant];

  if (v129 == 3)
  {
    double v130 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v333 = v130;
    id v131 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v333 count:1];

    __int16 v132 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v133 = *MEMORY[0x263F0CBD0];
    double v134 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v332 = v134;
    uint64_t v135 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v332 count:1];
    [v132 registerForMessage:v133 receiver:v9 policies:v135 selector:sel__handleQueryMetadata_];

    uint64_t v136 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v137 = *MEMORY[0x263F0CC30];
    uint64_t v138 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v331 = v138;
    long long v139 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v331 count:1];
    [v136 registerForMessage:v137 receiver:v9 policies:v139 selector:sel__handleSetMetadata_];

    uint64_t v140 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v141 = *MEMORY[0x263F0CBE0];
    uint64_t v142 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v330 = v142;
    uint64_t v143 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v330 count:1];
    [v140 registerForMessage:v141 receiver:v9 policies:v143 selector:sel__handleQueryVersionInformation_];

    uint64_t v144 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v145 = *MEMORY[0x263F0CA70];
    uint64_t v146 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v329 = v146;
    int64_t v147 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v329 count:1];
    [v144 registerForMessage:v145 receiver:v9 policies:v147 selector:sel__handleDumpState_];

    id v148 = [(HMDHomeManager *)v9 messageDispatcher];
    [v148 registerForMessage:*MEMORY[0x263F0CAB0] receiver:v9 policies:v131 selector:sel__handleDiagnosticInfo_];

    uint64_t v149 = [(HMDHomeManager *)v9 messageDispatcher];
    [v149 registerForMessage:*MEMORY[0x263F0CB90] receiver:v9 policies:v131 selector:sel__handleNetworkMismatchInfo_];
  }
  uint64_t v150 = [(HMDHomeManager *)v9 messageDispatcher];
  id v151 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v328 = v151;
  int v152 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v328 count:1];
  [v150 registerForMessage:@"kUpdateInvitationStateRequestKey" receiver:v9 policies:v152 selector:sel__handleRequestToUpdateHomeInvitationFromLocalUser_];

  uint64_t v153 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v327 = v297;
  id v154 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v327 count:1];
  [v153 registerForMessage:@"kUpdateHomeInvitationStateInternalRequestKey" receiver:v9 policies:v154 selector:sel__handleRequestToUpdateHomeInvitationFromInviter_];

  uint64_t v155 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v156 = *MEMORY[0x263F0CC28];
  long long v157 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:7];
  v326[0] = v157;
  int v158 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v326[1] = v158;
  uint64_t v159 = [MEMORY[0x263EFF8C0] arrayWithObjects:v326 count:2];
  [v155 registerForMessage:v156 receiver:v9 policies:v159 selector:sel__handleSetAppData_];

  uint64_t v160 = [(HMDHomeManager *)v9 messageDispatcher];
  BOOL v161 = +[HMDRemoteMessagePolicy defaultSecurePolicy];
  uint64_t v325 = v161;
  BOOL v162 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v325 count:1];
  [v160 registerForMessage:@"kSystemLogCaptureRequestKey" receiver:v9 policies:v162 selector:sel__handleSysdiagnoseRequest_];

  if (!isWatch())
  {
    char v163 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v164 = *MEMORY[0x263F0C6A0];
    double v165 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v324 = v165;
    double v166 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v324 count:1];
    [v163 registerForMessage:v164 receiver:v9 policies:v166 selector:sel__handleDeviceSetupSessionOpen_];

    long long v167 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v168 = *MEMORY[0x263F0C678];
    uint64_t v169 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v323 = v169;
    double v170 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v323 count:1];
    [v167 registerForMessage:v168 receiver:v9 policies:v170 selector:sel__handleDeviceSetupSessionClose_];
  }
  [(HMDHomeManager *)v9 _registerForConfiguringStateMessages];
  if (isInternalBuild())
  {
    double v171 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v172 = *MEMORY[0x263F0CBF8];
    long long v173 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v322 = v173;
    long long v174 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v322 count:1];
    [v171 registerForMessage:v172 receiver:v9 policies:v174 selector:sel__handleResolveAccount_];

    long long v175 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v176 = *MEMORY[0x263F0CBF0];
    double v177 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    char v321 = v177;
    long long v178 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v321 count:1];
    [v175 registerForMessage:v176 receiver:v9 policies:v178 selector:sel__handleRemoveAccount_];

    int v179 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v180 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    char v320 = v180;
    uint64_t v181 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v320 count:1];
    [v179 registerForMessage:@"kPingInternalRequestKey" receiver:v9 policies:v181 selector:sel__handlePing_];

    long long v182 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v183 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v319 = v183;
    long long v184 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v319 count:1];
    [v182 registerForMessage:@"kConfigTestingMode" receiver:v9 policies:v184 selector:sel__handleTestModeConfigRequest_];

    long long v185 = [(HMDHomeManager *)v9 messageDispatcher];
    long long v186 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    id v318 = v186;
    __int16 v187 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v318 count:1];
    [v185 registerForMessage:@"HomeUtilRemoteMessageRequestMessage" receiver:v9 policies:v187 selector:sel__handleHomeUtilRemoteMessageRequest_];

    id v188 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v189 = *MEMORY[0x263F0CC78];
    long long v190 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v317 = v190;
    __int16 v191 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v317 count:1];
    [v188 registerForMessage:v189 receiver:v9 policies:v191 selector:sel__handleUpdateMobileAssetsRequest_];

    id v192 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v193 = *MEMORY[0x263F0C9A8];
    uint64_t v194 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v316 = v194;
    uint64_t v195 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v316 count:1];
    [v192 registerForMessage:v193 receiver:v9 policies:v195 selector:sel__handleClearMobileAssetsInfoRequest_];
  }
  uint64_t v196 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v197 = *MEMORY[0x263F0CC10];
  id v198 = +[HMDXPCMessagePolicy policyWithEntitlements:1];
  v315 = v198;
  __int16 v199 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v315 count:1];
  [v196 registerForMessage:v197 receiver:v9 policies:v199 selector:sel__handleRequestRuntimeStateUpdate_];

  uint64_t v200 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v201 = *MEMORY[0x263F0CBB0];
  uint64_t v202 = +[HMDXPCMessagePolicy policyWithEntitlements:13];
  id v314 = v202;
  __int16 v203 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v314 count:1];
  [v200 registerForMessage:v201 receiver:v9 policies:v203 selector:sel__handlePairingIdentityRequest_];

  __int16 v204 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v205 = *MEMORY[0x263F0CAB8];
  __int16 v206 = +[HMDXPCMessagePolicy policyWithEntitlements:13];
  uint64_t v313 = v206;
  int v207 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v313 count:1];
  [v204 registerForMessage:v205 receiver:v9 policies:v207 selector:sel__handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest_];

  int v208 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v209 = *MEMORY[0x263F0CAC0];
  BOOL v210 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  id v312 = v210;
  v211 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v312 count:1];
  [v208 registerForMessage:v209 receiver:v9 policies:v211 selector:sel__handleFetchDevicesMessage_];

  if (isInternalBuild())
  {
    v212 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v213 = *MEMORY[0x263F0D2B0];
    v214 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v311 = v214;
    v215 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v311 count:1];
    [v212 registerForMessage:v213 receiver:v9 policies:v215 selector:sel__handleNetworkFirewallDumpCloudRecordsRequest_];

    double v216 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v217 = *MEMORY[0x263F0D298];
    v218 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v310[0] = v218;
    v219 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:3];
    v310[1] = v219;
    v220 = [MEMORY[0x263EFF8C0] arrayWithObjects:v310 count:2];
    [v216 registerForMessage:v217 receiver:v9 policies:v220 selector:sel__handleNetworkFirewallAddOverridesRequest_];

    unsigned int v221 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v222 = *MEMORY[0x263F0D368];
    uint64_t v223 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v309[0] = v223;
    v224 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
    v309[1] = v224;
    id v225 = [MEMORY[0x263EFF8C0] arrayWithObjects:v309 count:2];
    [v221 registerForMessage:v222 receiver:v9 policies:v225 selector:sel__handleNetworkFirewallRemoveOverridesRequest_];

    long long v226 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v227 = *MEMORY[0x263F0D2F0];
    long long v228 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    char v308 = v228;
    long long v229 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v308 count:1];
    [v226 registerForMessage:v227 receiver:v9 policies:v229 selector:sel__handleNetworkFirewallDumpLocalRulesRequest_];

    id v230 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v231 = *MEMORY[0x263F0D328];
    double v232 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v307 = v232;
    long long v233 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v307 count:1];
    [v230 registerForMessage:v231 receiver:v9 policies:v233 selector:sel__handleNetworkFirewallDumpPairedMetadataRequest_];

    long long v234 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v235 = *MEMORY[0x263F0D360];
    double v236 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v306[0] = v236;
    __int16 v237 = +[HMDConfigurationMessagePolicy policyWithOperationTypes:4];
    v306[1] = v237;
    long long v238 = [MEMORY[0x263EFF8C0] arrayWithObjects:v306 count:2];
    [v234 registerForMessage:v235 receiver:v9 policies:v238 selector:sel__handleNetworkFirewallRemoveLocalRulesRequest_];

    __int16 v239 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v240 = *MEMORY[0x263F0D358];
    __int16 v241 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    id v305 = v241;
    id v242 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v305 count:1];
    [v239 registerForMessage:v240 receiver:v9 policies:v242 selector:sel__handleNetworkFirewallFetchCloudChangesRequest_];

    __int16 v243 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v244 = *MEMORY[0x263F0C9C8];
    v245 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    id v304 = v245;
    uint64_t v246 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v304 count:1];
    [v243 registerForMessage:v244 receiver:v9 policies:v246 selector:sel__handleGetTLVForJSON_];
  }
  v247 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v248 = *MEMORY[0x263F0CA88];
  __int16 v249 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  v303 = v249;
  v250 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v303 count:1];
  [v247 registerForMessage:v248 receiver:v9 policies:v250 selector:sel__handleEnableUARPPacketCaptureRequest_];

  if (isInternalBuild())
  {
    __int16 v251 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v252 = *MEMORY[0x263F0CA48];
    v253 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v302 = v253;
    v254 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v302 count:1];
    [v251 registerForMessage:v252 receiver:v9 policies:v254 selector:sel__handleDumpDatabase_];
  }
  if (isInternalBuild())
  {
    uint64_t v255 = [(HMDHomeManager *)v9 messageDispatcher];
    uint64_t v256 = *MEMORY[0x263F0CBC0];
    uint64_t v257 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    v301 = v257;
    v258 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v301 count:1];
    [v255 registerForMessage:v256 receiver:v9 policies:v258 selector:sel__handlePrepareForDiagnosticExtension_];
  }
  v259 = [(HMDHomeManager *)v9 userCloudShareManager];
  v260 = [(HMDHomeManager *)v9 messageDispatcher];
  [v259 configureWithMessageDispatcher:v260];

  uint64_t v261 = [(HMDHomeManager *)v9 messageDispatcher];
  uint64_t v262 = *MEMORY[0x263F0C9C0];
  uint64_t v263 = +[HMDXPCMessagePolicy policyWithEntitlements:261];
  v300 = v263;
  v264 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v300 count:1];
  [v261 registerForMessage:v262 receiver:v9 policies:v264 selector:sel__handleConnectivityInfoRequest_];

  v265 = [(HMDHomeManager *)v9 userDeviceCapabilitiesRequestManager];
  [v265 registerForMessages];

  v266 = +[HMDRemoteMessagePolicy defaultPolicy];
  [v266 setRequiresSecureMessage:0];
  [v266 setRequiresAccountMessage:1];
  [v266 setTransportRestriction:1];
  v267 = [(HMDHomeManager *)v9 messageDispatcher];
  v268 = (void *)[v266 copy];
  uint64_t v299 = v268;
  v269 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v299 count:1];
  [v267 registerForMessage:@"HMDInvitationForwardMessage" receiver:v9 policies:v269 selector:sel__handleForwardedSharedUserInvitationAcceptance_];

  if (isInternalBuild())
  {
    v270 = [(HMDHomeManager *)v9 messageDispatcher];
    v271 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    uint64_t v298 = v271;
    v272 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v298 count:1];
    [v270 registerForMessage:@"HomeUtil.Command.Wallet" receiver:v9 policies:v272 selector:sel__handleHomeUtilCommandWalletMessage_];
  }
  v273 = [(HMDHomeManager *)v9 notificationCenter];
  [v273 addObserver:v9 selector:sel_dataSyncInProgressUpdatedNotification_ name:@"kCloudDataSyncInProgressUpdatedNotification" object:0];

  v274 = [(HMDHomeManager *)v9 notificationCenter];
  [v274 addObserver:v9 selector:sel_handleVendorInfoUpdated_ name:@"kHMDVendorInfoUpdatedNotification" object:0];

  uint64_t v275 = [(HMDHomeManager *)v9 notificationCenter];
  [v275 addObserver:v9 selector:sel_auditDuplicatePreviouslyAddedAccessory_ name:@"HMDHomeThisOwnerDeviceAddedAccessoryNotification" object:0];

  v276 = [(HMDHomeManager *)v9 notificationCenter];
  [v276 addObserver:v9 selector:sel___handleAppleAccountUpdated_ name:@"HMDAppleAccountManagerAccountUpdatedNotification" object:0];

  v277 = [(HMDHomeManager *)v9 notificationCenter];
  v278 = +[HMDAccountRegistry sharedRegistry];
  [v277 addObserver:v9 selector:sel___accountRegistryAddedAccount_ name:@"HMDAccountRegistryAddedAccountNotification" object:v278];

  v279 = [(HMDHomeManager *)v9 notificationCenter];
  uint64_t v280 = +[HMDAccountRegistry sharedRegistry];
  [v279 addObserver:v9 selector:sel___accountRegistryRemovedAccount_ name:@"HMDAccountRegistryRemovedAccountNotification" object:v280];

  v281 = [(HMDHomeManager *)v9 notificationCenter];
  [v281 addObserver:v9 selector:sel___accountAddedDevice_ name:@"HMDAccountAddedDeviceNotification" object:0];

  v282 = [(HMDHomeManager *)v9 notificationCenter];
  [v282 addObserver:v9 selector:sel___handleDeviceUpdatedNotification_ name:@"HMDDeviceUpdatedNotification" object:0];

  uint64_t v283 = [(HMDHomeManager *)v9 notificationCenter];
  [v283 addObserver:v9 selector:sel___accountRemovedDevice_ name:@"HMDAccountRemovedDeviceNotification" object:0];

  v284 = [(HMDHomeManager *)v9 notificationCenter];
  [v284 addObserver:v9 selector:sel___handleProcessMemoryPressureEvent_ name:*MEMORY[0x263F41FF8] object:0];

  v285 = [(HMDHomeManager *)v9 notificationCenter];
  [v285 addObserver:v9 selector:sel___handleHMDFMFStatusUpdateNotification_ name:@"HMDFMFStatusUpdateNotification" object:0];

  uint64_t v286 = [(HMDHomeManager *)v9 notificationCenter];
  v287 = [(HMDHomeManager *)v9 messageDispatcher];
  [v286 addObserver:v9 selector:sel__handleRemoteSessionTornDownNotification_ name:@"HMDMessageDispatcherRemoteSessionTornDownNotification" object:v287];

  [(HMDHomeManager *)v9 registerNotificationsForPowerManagement];
  [(HMDHomeManager *)v9 configureForWalletKey];
}

- (BOOL)_setPrimaryHome:(id)a3 idsDataSync:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v6 = a3;
  int v7 = [(HMDHomeManager *)self primaryHomeUUID];
  id v8 = v6;
  id v9 = [(HMDHomeManager *)self homes];
  uint64_t v10 = [v9 count];

  if (v10)
  {
    if (!v8) {
      goto LABEL_5;
    }
    if (v4)
    {
      isWatch();
LABEL_5:
      id v11 = [(HMDHomeManager *)self homes];
      id v12 = objc_msgSend(v11, "hmf_firstObjectWithUUID:", v7);

      if (!v12)
      {
        id v13 = [(HMDHomeManager *)self homes];
        id v14 = [v13 firstObject];

        uint64_t v15 = [v14 uuid];

        char v16 = HMFEqualObjects();
        if ((v16 & 1) == 0) {
          goto LABEL_12;
        }
LABEL_9:
        BOOL v17 = 0;
        goto LABEL_15;
      }
LABEL_11:
      BOOL v17 = 0;
      uint64_t v15 = v8;
      goto LABEL_15;
    }
    uint64_t v15 = v8;
    if (HMFEqualObjects()) {
      goto LABEL_11;
    }
  }
  else
  {

    uint64_t v15 = 0;
    if (HMFEqualObjects()) {
      goto LABEL_9;
    }
  }
LABEL_12:
  uint64_t v18 = (void *)MEMORY[0x230FBD990]();
  uint64_t v19 = self;
  uint64_t v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    uint64_t v21 = HMFGetLogIdentifier();
    int v23 = 138543874;
    id v24 = v21;
    __int16 v25 = 2112;
    uint64_t v26 = v7;
    __int16 v27 = 2112;
    uint64_t v28 = v15;
    _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Updating the primary home from %@ to %@", (uint8_t *)&v23, 0x20u);
  }
  [(HMDHomeManager *)v19 setPrimaryHomeUUID:v15];
  [(HMDHomeManager *)v19 _updateCurrentHomeIfNecessary];
  BOOL v17 = 1;
LABEL_15:

  return v17;
}

- (BOOL)_associateAccessories:(id)a3 withHomes:(id)a4
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v32 = a4;
  id v6 = [MEMORY[0x263EFF9A0] dictionary];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v37 objects:v46 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    char v10 = 0;
    uint64_t v11 = *(void *)v38;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v38 != v11) {
          objc_enumerationMutation(v7);
        }
        id v13 = *(void **)(*((void *)&v37 + 1) + 8 * i);
        id v14 = [v13 home];
        uint64_t v15 = [v14 uuid];

        if (v15)
        {
          char v16 = objc_msgSend(v6, "hmf_mutableArrayForKey:", v15);
          if (!v16)
          {
            char v16 = [MEMORY[0x263EFF980] array];
            [v6 setObject:v16 forKey:v15];
          }
          [v16 addObject:v13];
        }
        else
        {
          BOOL v17 = (void *)MEMORY[0x230FBD990]();
          uint64_t v18 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v19 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            long long v43 = v19;
            __int16 v44 = 2112;
            uint64_t v45 = v13;
            _os_log_impl(&dword_22F52A000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@###### Unassociated accessory %@ - dropping", buf, 0x16u);
          }
          char v10 = 1;
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v37 objects:v46 count:16];
    }
    while (v9);
  }
  else
  {
    char v10 = 0;
  }

  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v20 = v32;
  uint64_t v21 = [v20 countByEnumeratingWithState:&v33 objects:v41 count:16];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)v34;
    do
    {
      for (uint64_t j = 0; j != v22; ++j)
      {
        if (*(void *)v34 != v23) {
          objc_enumerationMutation(v20);
        }
        __int16 v25 = *(void **)(*((void *)&v33 + 1) + 8 * j);
        uint64_t v26 = [v25 accessories];
        uint64_t v27 = [v26 count];

        if (!v27)
        {
          uint64_t v28 = [v25 uuid];
          uint64_t v29 = objc_msgSend(v6, "hmf_mutableArrayForKey:", v28);

          [v25 setAccessories:v29];
          id v30 = [v25 uuid];
          [v6 removeObjectForKey:v30];
        }
      }
      uint64_t v22 = [v20 countByEnumeratingWithState:&v33 objects:v41 count:16];
    }
    while (v22);
  }

  return v10 & 1;
}

- (void)_auditKeychainEntries
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  int v56 = [MEMORY[0x263EFF9A0] dictionary];
  long long v57 = self;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id obj = [(HMDHomeManager *)self homes];
  uint64_t v52 = [obj countByEnumeratingWithState:&v67 objects:v77 count:16];
  if (v52)
  {
    uint64_t v51 = *(void *)v68;
    do
    {
      uint64_t v3 = 0;
      do
      {
        if (*(void *)v68 != v51) {
          objc_enumerationMutation(obj);
        }
        uint64_t v53 = v3;
        BOOL v4 = *(void **)(*((void *)&v67 + 1) + 8 * v3);
        long long v63 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v58 = [v4 accessories];
        uint64_t v5 = [v58 countByEnumeratingWithState:&v63 objects:v76 count:16];
        if (v5)
        {
          uint64_t v6 = v5;
          uint64_t v7 = *(void *)v64;
          do
          {
            for (uint64_t i = 0; i != v6; ++i)
            {
              if (*(void *)v64 != v7) {
                objc_enumerationMutation(v58);
              }
              id v9 = *(id *)(*((void *)&v63 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                char v10 = v9;
              }
              else {
                char v10 = 0;
              }
              id v11 = v10;

              if (!v11)
              {
                id v15 = v9;
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  char v16 = v15;
                }
                else {
                  char v16 = 0;
                }
                id v12 = v16;

                if (v12)
                {
                  BOOL v17 = [v12 identifier];

                  if (!v17)
                  {
                    uint64_t v18 = (void *)MEMORY[0x230FBD990]();
                    uint64_t v19 = v57;
                    id v20 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v21 = HMFGetLogIdentifier();
                      *(_DWORD *)long long buf = 138543618;
                      char v73 = v21;
                      __int16 v74 = 2112;
                      id v75 = v12;
                      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to add accessory %@ to the audit accessory list since identifier is nil", buf, 0x16u);
                    }
                  }
                }
                goto LABEL_27;
              }
              id v12 = [v11 pairingUsername];
              if (v12 || ([v11 identifier], (id v12 = (id)objc_claimAutoreleasedReturnValue()) != 0))
              {
                id v13 = [v11 publicKey];

                if (v13)
                {
                  id v14 = [v11 publicKey];
                  [v56 setObject:v14 forKey:v12];

LABEL_27:
                  goto LABEL_34;
                }
                uint64_t v22 = (void *)MEMORY[0x230FBD990]();
                uint64_t v23 = v57;
                id v24 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
                {
                  __int16 v25 = HMFGetLogIdentifier();
                  uint64_t v26 = [v11 name];
                  *(_DWORD *)long long buf = 138543618;
                  char v73 = v25;
                  __int16 v74 = 2112;
                  id v75 = v26;
                  _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@A HAP accessory '%@' with a public key - removing from list of of keychain entries", buf, 0x16u);
                }
              }
              else
              {
                uint64_t v27 = (void *)MEMORY[0x230FBD990]();
                uint64_t v28 = v57;
                uint64_t v29 = HMFGetOSLogHandle();
                if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                {
                  id v30 = HMFGetLogIdentifier();
                  uint64_t v31 = [v11 name];
                  *(_DWORD *)long long buf = 138543618;
                  char v73 = v30;
                  __int16 v74 = 2112;
                  id v75 = v31;
                  _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, "%{public}@Failed to add accessory %@ to the audit accessory list for keychain cleanup", buf, 0x16u);
                }
              }
LABEL_34:
            }
            uint64_t v6 = [v58 countByEnumeratingWithState:&v63 objects:v76 count:16];
          }
          while (v6);
        }

        uint64_t v3 = v53 + 1;
      }
      while (v53 + 1 != v52);
      uint64_t v52 = [obj countByEnumeratingWithState:&v67 objects:v77 count:16];
    }
    while (v52);
  }

  id v32 = [MEMORY[0x263F35AD0] systemStore];
  long long v33 = [v32 auditKeysOfManagedAccessories:v56];
  long long v34 = v33;
  if (v33)
  {
    uint64_t v54 = v33;
    uint64_t v55 = v32;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    id v35 = v33;
    uint64_t v36 = [v35 countByEnumeratingWithState:&v59 objects:v71 count:16];
    if (v36)
    {
      uint64_t v37 = v36;
      uint64_t v38 = *(void *)v60;
      do
      {
        for (uint64_t j = 0; j != v37; ++j)
        {
          if (*(void *)v60 != v38) {
            objc_enumerationMutation(v35);
          }
          long long v40 = *(void **)(*((void *)&v59 + 1) + 8 * j);
          long long v41 = (void *)MEMORY[0x230FBD990]();
          long long v42 = v57;
          long long v43 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v44 = HMFGetLogIdentifier();
            uint64_t v45 = [v40 description];
            *(_DWORD *)long long buf = 138543618;
            char v73 = v44;
            __int16 v74 = 2112;
            id v75 = v45;
            _os_log_impl(&dword_22F52A000, v43, OS_LOG_TYPE_DEFAULT, "%{public}@Removed spurious keychain entry: %@", buf, 0x16u);
          }
        }
        uint64_t v37 = [v35 countByEnumeratingWithState:&v59 objects:v71 count:16];
      }
      while (v37);
    }

    long long v34 = v54;
    id v32 = v55;
  }
  else
  {
    long long v46 = (void *)MEMORY[0x230FBD990]();
    uint64_t v47 = v57;
    long long v48 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v49 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      char v73 = v49;
      _os_log_impl(&dword_22F52A000, v48, OS_LOG_TYPE_DEFAULT, "%{public}@Audit keychain entries failed", buf, 0xCu);
    }
  }
}

- (id)_deviceForIdentifier:(id)a3
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v4];
  if (v5)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v6 = [(HMDHomeManager *)self appleAccountManager];
    uint64_t v7 = [v6 account];
    uint64_t v8 = [v7 devices];

    id v9 = (id)[v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v17;
      while (2)
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v10) {
            objc_enumerationMutation(v8);
          }
          id v12 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          id v13 = [v12 identifier];
          int v14 = [v5 isEqual:v13];

          if (v14)
          {
            id v9 = v12;
            goto LABEL_12;
          }
        }
        id v9 = (id)[v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

- (id)_filterAccessories:(id)a3 inHome:(id)a4
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = a4;
  id v18 = [MEMORY[0x263EFF980] array];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v20 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        id v13 = [v12 home];
        int v14 = [v13 uuid];
        id v15 = [v6 uuid];
        int v16 = [v14 isEqual:v15];

        if (v16) {
          [v18 addObject:v12];
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v9);
  }

  return v18;
}

- (id)_filterAccessories:(id)a3 withIdentifiers:(id)a4
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = a4;
  long long v19 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v5, "count"));
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v21 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(id *)(*((void *)&v20 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v13 = v12;
        }
        else {
          id v13 = 0;
        }
        id v14 = v13;

        if (v14)
        {
          id v15 = [v14 uniqueIdentifier];
          int v16 = [v6 containsObject:v15];

          if (v16) {
            [v19 addObject:v12];
          }
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v9);
  }

  long long v17 = (void *)[v19 copy];
  return v17;
}

- (id)identifiersOfAccessories:(id)a3
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = a3;
  id v4 = [MEMORY[0x263EFF9C0] set];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(id *)(*((void *)&v16 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v11 = v10;
        }
        else {
          id v11 = 0;
        }
        id v12 = v11;

        if (v12)
        {
          id v13 = objc_msgSend(v12, "uniqueIdentifier", (void)v16);
          [v4 addObject:v13];
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v7);
  }

  id v14 = (void *)[v4 copy];
  return v14;
}

- (id)identifiersOfAccessoriesForHome:(id)a3
{
  id v4 = [a3 accessories];
  id v5 = [(HMDHomeManager *)self identifiersOfAccessories:v4];

  return v5;
}

- (id)mediaSystemForAppleMediaAccessory:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = [*(id *)(*((void *)&v13 + 1) + 8 * i) mediaSystemForAppleMediaAccessory:v4];
        if (v10)
        {
          id v11 = (void *)v10;
          goto LABEL_11;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  id v11 = 0;
LABEL_11:

  return v11;
}

- (id)destinationIdentifierForMediaSystem:(id)a3 role:(unint64_t)a4
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v6 = a3;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v7 = objc_msgSend(v6, "components", 0);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v33 objects:v43 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v34;
LABEL_3:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v34 != v10) {
        objc_enumerationMutation(v7);
      }
      id v12 = *(void **)(*((void *)&v33 + 1) + 8 * v11);
      long long v13 = [v12 role];
      uint64_t v14 = [v13 type];

      if (v14 == a4) {
        break;
      }
      if (v9 == ++v11)
      {
        uint64_t v9 = [v7 countByEnumeratingWithState:&v33 objects:v43 count:16];
        if (v9) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    id v15 = v12;

    if (!v15) {
      goto LABEL_16;
    }
    long long v16 = [v15 accessory];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      long long v17 = v16;
    }
    else {
      long long v17 = 0;
    }
    id v18 = v17;

    long long v19 = [v18 audioDestination];
    long long v20 = [v19 uniqueIdentifier];

    if (v20)
    {
      id v21 = v20;
    }
    else
    {
      uint64_t v28 = (void *)MEMORY[0x230FBD990]();
      uint64_t v29 = self;
      id v30 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543874;
        uint64_t v38 = v31;
        __int16 v39 = 2112;
        id v40 = v15;
        __int16 v41 = 2112;
        id v42 = v18;
        _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to get destination identifier on component: %@ accessory: %@", buf, 0x20u);
      }
    }
  }
  else
  {
LABEL_9:

LABEL_16:
    long long v22 = (void *)MEMORY[0x230FBD990]();
    long long v23 = self;
    uint64_t v24 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = HMFGetLogIdentifier();
      uint64_t v26 = HMMediaSystemRoleTypeAsString();
      uint64_t v27 = [v6 components];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v38 = v25;
      __int16 v39 = 2112;
      id v40 = v26;
      __int16 v41 = 2112;
      id v42 = v27;
      _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to get destination identifier due to no component with role: %@ components: %@", buf, 0x20u);
    }
    long long v20 = 0;
  }

  return v20;
}

- (void)saveAssociatedGroupDataForPostMigrationStagingWithCurrentAccessory:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 home];
  id v6 = [v5 uuid];

  uint64_t v7 = [(HMDHomeManager *)self userDefaults];
  uint64_t v8 = (void *)v7;
  if (v6 && v7)
  {
    uint64_t v9 = [HMDMediaGroupsStageManager alloc];
    uint64_t v10 = [(HMDHomeManager *)self userDefaults];
    uint64_t v11 = [(HMDMediaGroupsStageManager *)v9 initWithIdentifier:v6 userDefaults:v10];

    [(HMDMediaGroupsStageManager *)v11 saveAssociatedGroupDataForLegacyCurrentAccessory:v4];
  }
  else
  {
    id v12 = (void *)MEMORY[0x230FBD990]();
    long long v13 = self;
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = HMFGetLogIdentifier();
      int v16 = 138543874;
      long long v17 = v15;
      __int16 v18 = 2112;
      long long v19 = v6;
      __int16 v20 = 2112;
      id v21 = v8;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to save associated group data due to missing homeUUID: %@ userDefaults: %@", (uint8_t *)&v16, 0x20u);
    }
  }
}

- (void)migrateLocalStereoPairDataForCurrentMediaSystem:(id)a3
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v37 = v8;
    __int16 v38 = 2112;
    id v39 = v4;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Migrating current media system: %@", buf, 0x16u);
  }
  uint64_t v9 = [v4 configuredName];
  uint64_t v10 = v9;
  if (v9)
  {
    id v11 = v9;
  }
  else
  {
    id v11 = [MEMORY[0x263F0E558] roomNameSentinel];
  }
  id v12 = v11;
  long long v13 = [v4 audioDestination];
  uint64_t v14 = [v13 audioGroupIdentifier];

  id v15 = [(HMDHomeManager *)v6 destinationIdentifierForMediaSystem:v4 role:1];
  int v16 = [(HMDHomeManager *)v6 destinationIdentifierForMediaSystem:v4 role:2];
  long long v17 = [v4 home];
  __int16 v18 = [v17 uuid];

  if (v15 && v16 && v18)
  {
    long long v33 = v14;
    long long v19 = v12;
    id v20 = objc_alloc(MEMORY[0x263F0E558]);
    id v21 = [v4 uuid];
    uint64_t v22 = (void *)[v20 initWithIdentifier:v21 parentIdentifier:v18 name:v12 defaultName:v10 == 0 associatedGroupIdentifier:v33 leftDestinationIdentifier:v15 rightDestinationIdentifier:v16];

    long long v23 = [(HMDHomeManager *)v6 mediaGroupParticipantDataLocalStorage];
    uint64_t v24 = [v4 uuid];
    [v23 updateAudioGroupIdentifier:v24];

    uint64_t v25 = [(HMDHomeManager *)v6 mediaGroupParticipantDataLocalStorage];
    uint64_t v26 = [v22 encodeToProtoBufferData];
    long long v35 = v26;
    uint64_t v27 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v35 count:1];
    [v25 updateBackupGroupData:v27];

    id v12 = v19;
    uint64_t v14 = v33;
  }
  else
  {
    uint64_t v28 = (void *)MEMORY[0x230FBD990]();
    uint64_t v29 = v6;
    id v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      long long v34 = v14;
      v32 = uint64_t v31 = v12;
      *(_DWORD *)long long buf = 138544130;
      uint64_t v37 = v32;
      __int16 v38 = 2112;
      id v39 = v15;
      __int16 v40 = 2112;
      __int16 v41 = v16;
      __int16 v42 = 2112;
      long long v43 = v18;
      _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to migrate current media system due to missing group data dependencies leftDestinationIdentifier: %@ rightDestinationIdentifier: %@ homeIdentifier: %@", buf, 0x2Au);

      id v12 = v31;
      uint64_t v14 = v34;
    }
  }
}

- (void)migrateLocalHomeTheaterDataForCurrentAccessory:(id)a3 currentMediaSystem:(id)a4
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 audioDestinationControllerData];
  if (v8)
  {
    uint64_t v9 = (void *)MEMORY[0x230FBD990]();
    uint64_t v10 = self;
    id v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      int v23 = 138543618;
      uint64_t v24 = v12;
      __int16 v25 = 2112;
      uint64_t v26 = v8;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Migrating current destination controller data: %@", (uint8_t *)&v23, 0x16u);
    }
    long long v13 = [(HMDHomeManager *)v10 mediaGroupParticipantDataLocalStorage];
    [v13 updateDestinationControllerData:v8];
  }
  uint64_t v14 = [v6 audioDestination];
  id v15 = (void *)[v14 mutableCopy];

  if (v15)
  {
    int v16 = [v7 uuid];
    if (v16)
    {
      [v15 setAudioGroupIdentifier:v16];
    }
    else
    {
      long long v17 = [v15 audioGroupIdentifier];
      [v15 setAudioGroupIdentifier:v17];
    }
    __int16 v18 = (void *)MEMORY[0x230FBD990]();
    long long v19 = self;
    id v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      id v21 = HMFGetLogIdentifier();
      int v23 = 138543618;
      uint64_t v24 = v21;
      __int16 v25 = 2112;
      uint64_t v26 = v15;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Migrating current destination: %@", (uint8_t *)&v23, 0x16u);
    }
    uint64_t v22 = [(HMDHomeManager *)v19 mediaGroupParticipantDataLocalStorage];
    [v22 updateMediaDestination:v15];
  }
}

- (void)migrateLocalMediaGroupParticipantData
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self _appleMediaAccessoryOfCurrentDevice];
  if (v3)
  {
    id v4 = [(HMDHomeManager *)self mediaSystemForAppleMediaAccessory:v3];
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = self;
    id v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Migrating local media group participant data for current accessory: %@", (uint8_t *)&v9, 0x16u);
    }
    [(HMDHomeManager *)v6 migrateLocalHomeTheaterDataForCurrentAccessory:v3 currentMediaSystem:v4];
    if (v4) {
      [(HMDHomeManager *)v6 migrateLocalStereoPairDataForCurrentMediaSystem:v4];
    }
    [(HMDHomeManager *)v6 saveAssociatedGroupDataForPostMigrationStagingWithCurrentAccessory:v3];
  }
}

- (void)initalizeMediaGroupParticipantDataLocalStorage
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = [(HMDHomeManager *)self uuid];
  id v4 = [(HMDHomeManager *)self userDefaults];
  id v5 = [(HMDHomeManager *)self eventForwarder];
  uint64_t v6 = [(HMDHomeManager *)self eventStoreReadHandle];
  id v7 = (void *)v6;
  if (v3 && v4 && v5 && v6)
  {
    uint64_t v8 = objc_alloc_init(HMDMediaGroupsAggregatorBackupReceiver);
    int v9 = [[HMDMediaGroupParticipantLocalDataStorage alloc] initWithIdentifier:v3 backUpReciever:v8 userDefaults:v4 eventForwarder:v5 eventStoreReadHandle:v7];
    [(HMDMediaGroupsAggregatorBackupReceiver *)v8 setDelegate:v9];
    [(HMDMediaGroupParticipantLocalDataStorage *)v9 setDataSource:self];
    [(HMDMediaGroupParticipantLocalDataStorage *)v9 setDelegate:self];
    mediaGroupParticipantDataLocalStorage = self->_mediaGroupParticipantDataLocalStorage;
    self->_mediaGroupParticipantDataLocalStorage = v9;
  }
  else
  {
    __int16 v11 = (void *)MEMORY[0x230FBD990]();
    id v12 = self;
    uint64_t v13 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = HMFGetLogIdentifier();
      int v15 = 138544386;
      int v16 = v14;
      __int16 v17 = 2112;
      __int16 v18 = v3;
      __int16 v19 = 2112;
      id v20 = v4;
      __int16 v21 = 2112;
      uint64_t v22 = v5;
      __int16 v23 = 2112;
      uint64_t v24 = v7;
      _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media group participant data local storage with dependencies homeManagerUUID: %@ userDefaults: %@ eventForwarder: %@ eventStoreReadHandle: %@", (uint8_t *)&v15, 0x34u);
    }
  }
}

- (BOOL)_configureHomesImpl:(id)a3 uncommittedTransactions:(id)a4
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v65 = a4;
  [(HMDHomeManager *)self setHomes:v6];
  id v7 = [HMDNameValidator alloc];
  uint64_t v8 = [(HMDHomeManager *)self uuid];
  int v9 = [(HMDNameValidator *)v7 initWithUUID:v8];
  [(HMDHomeManager *)self setNameValidator:v9];

  uint64_t v10 = [(HMDHomeManager *)self notificationCenter];
  [v10 removeObserver:self name:@"HMDHomeCurrentDeviceHasReachableAccessories" object:0];

  long long v64 = [MEMORY[0x263EFF980] array];
  BOOL v60 = [(HMDHomeManager *)self isResidentEnabled];
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  id obj = v6;
  uint64_t v11 = [obj countByEnumeratingWithState:&v68 objects:v78 count:16];
  if (!v11)
  {
    LOBYTE(v14) = 0;
    goto LABEL_35;
  }
  uint64_t v13 = v11;
  int v14 = 0;
  uint64_t v15 = *(void *)v69;
  *(void *)&long long v12 = 138543618;
  long long v59 = v12;
  long long v62 = self;
  do
  {
    uint64_t v16 = 0;
    do
    {
      if (*(void *)v69 != v15) {
        objc_enumerationMutation(obj);
      }
      __int16 v17 = *(void **)(*((void *)&v68 + 1) + 8 * v16);
      __int16 v18 = (void *)MEMORY[0x230FBD990]();
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        long long v67 = v18;
        id v19 = v17;
        id v20 = (void *)MEMORY[0x230FBD990]();
        __int16 v21 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          uint64_t v22 = v13;
          uint64_t v23 = v15;
          uint64_t v25 = v24 = v14;
          uint64_t v26 = [v19 name];
          uint64_t v27 = [v19 ownerName];
          *(_DWORD *)long long buf = 138543874;
          char v73 = v25;
          __int16 v74 = 2112;
          id v75 = v26;
          __int16 v76 = 2112;
          uint64_t v77 = v27;
          _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Found home %@ with administrator %@", buf, 0x20u);

          int v14 = v24;
          uint64_t v15 = v23;
          uint64_t v13 = v22;
          self = v62;
        }

        uint64_t v28 = [(HMDHomeManager *)self nameValidator];
        uint64_t v29 = [v19 uuid];
        id v30 = (id)[v28 addNamespace:v29];

        v14 |= [v19 configureWithHomeManager:self accessoriesPresent:v64 uncommittedTransactions:v65 source:0];
        uint64_t v31 = [v19 name];
        id v32 = [(HMDHomeManager *)self uuid];
        id v33 = [(HMDHomeManager *)self addName:v31 namespace:v32];

        long long v34 = [v19 uuid];
        -[HMDHomeManager _updateHome:configurationVersion:](self, "_updateHome:configurationVersion:", v34, [v19 configurationVersion]);

        if ([v19 isOwnerUser]
          && (+[HMDDeviceCapabilities deviceCapabilities],
              long long v35 = objc_claimAutoreleasedReturnValue(),
              int v36 = [v35 isResidentCapable],
              v35,
              v36))
        {
          int v63 = v14;
          uint64_t v37 = [(HMDHomeManager *)self notificationCenter];
          [v37 addObserver:self selector:sel_handleHomeCurrentDeviceResidentEligibleNotification_ name:@"HMDHomeCurrentDeviceHasReachableAccessories" object:v19];

          __int16 v38 = [(HMDHomeManager *)self appleAccountManager];
          uint64_t v39 = [v38 device];

          __int16 v40 = [(HMDHomeManager *)self capabilitiesController];
          __int16 v41 = [v40 currentResidentCapabilities];
          if (v41 && [(HMDHomeManager *)self isResidentEnabled])
          {
            int v42 = [v19 hasReachableAccessories];

            if (v42)
            {
              long long v43 = [v19 residentCapableDevices];
              uint64_t v44 = (void *)v39;
              char v45 = [v43 containsObject:v39];

              int v14 = v63;
              if ((v45 & 1) == 0)
              {
                context = (void *)MEMORY[0x230FBD990]([v19 addResidentCapableDevice:v44]);
                HMFGetOSLogHandle();
                long long v46 = (HMDHomeManager *)objc_claimAutoreleasedReturnValue();
                int v63 = 1;
                if (os_log_type_enabled(&v46->super.super, OS_LOG_TYPE_INFO))
                {
                  uint64_t v47 = HMFGetLogIdentifier();
                  long long v48 = [v44 name];
                  uint64_t v49 = [v19 name];
                  *(_DWORD *)long long buf = 138543874;
                  char v73 = v47;
                  __int16 v74 = 2112;
                  id v75 = v48;
                  __int16 v76 = 2112;
                  uint64_t v77 = v49;
                  int v63 = 1;
                  _os_log_impl(&dword_22F52A000, &v46->super.super, OS_LOG_TYPE_INFO, "%{public}@Configuration changed: add resident capable device %@ to %@", buf, 0x20u);
                }
                goto LABEL_25;
              }
              goto LABEL_26;
            }
          }
          else
          {
          }
          int v14 = v63;
          if ([(HMDHomeManager *)self isResidentEnabled])
          {
            uint64_t v44 = (void *)v39;
            goto LABEL_26;
          }
          long long v50 = [v19 residentCapableDevices];
          uint64_t v44 = (void *)v39;
          int v51 = [v50 containsObject:v39];

          if (v51)
          {
            context = (void *)MEMORY[0x230FBD990]();
            long long v46 = self;
            uint64_t v52 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
            {
              uint64_t v53 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = v59;
              char v73 = v53;
              __int16 v74 = 2112;
              id v75 = v19;
              _os_log_impl(&dword_22F52A000, v52, OS_LOG_TYPE_INFO, "%{public}@Found ourselves as a resident in home, %@, enabling ourselves as a resident device", buf, 0x16u);
            }
            BOOL v60 = 1;
LABEL_25:
            __int16 v18 = v67;

            int v14 = v63;
          }
          else
          {
LABEL_26:
            __int16 v18 = v67;
          }
        }
        else
        {
          __int16 v18 = v67;
        }
      }
      ++v16;
    }
    while (v13 != v16);
    uint64_t v54 = [obj countByEnumeratingWithState:&v68 objects:v78 count:16];
    uint64_t v13 = v54;
  }
  while (v54);
LABEL_35:

  BOOL v55 = [(HMDHomeManager *)self isResidentEnabled];
  BOOL v56 = v60;
  if (v56 != v55) {
    [(HMDHomeManager *)self _updateResidentEnabledOnThisDevice:v56 forceNotify:0 message:0];
  }
  long long v57 = [(HMDHomeManager *)self idsServerBag];
  [v57 configure];

  [(HMDHomeManager *)self _readAccessAllowedWhenLockedSettingFromLocalStore];
  [(HMDHomeManager *)self _checkForSelfRemoval];

  return v14 & 1;
}

- (BOOL)_configureHomes:(id)a3 uncommittedTransactions:(id)a4
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  [(HMDHomeManager *)self startLocalTransport];
  uint64_t v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  int v9 = +[HMDLocation sharedManager];
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  void v18[2] = __58__HMDHomeManager__configureHomes_uncommittedTransactions___block_invoke;
  v18[3] = &unk_264A2F7F8;
  uint64_t v10 = v8;
  id v19 = v10;
  [v9 beingConfigured:1 completionHandler:v18];

  dispatch_group_wait(v10, 0xFFFFFFFFFFFFFFFFLL);
  BOOL v11 = [(HMDHomeManager *)self _configureHomesImpl:v6 uncommittedTransactions:v7];
  long long v12 = (void *)MEMORY[0x230FBD990]();
  uint64_t v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v14 = HMFGetLogIdentifier();
    uint64_t v15 = HMFBooleanToString();
    *(_DWORD *)long long buf = 138543618;
    __int16 v21 = v14;
    __int16 v22 = 2112;
    uint64_t v23 = v15;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Configured homes with result: %@", buf, 0x16u);
  }
  uint64_t v16 = +[HMDLocation sharedManager];
  [v16 beingConfigured:0 completionHandler:0];

  return v11;
}

void __58__HMDHomeManager__configureHomes_uncommittedTransactions___block_invoke(uint64_t a1)
{
}

- (id)_checkActionSetNameConflict:(id)a3 withNamespaceUUIDs:(id)a4
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHomeManager *)self nameValidator];
  uint64_t v24 = v6;
  int v9 = [v8 despaceName:v6];

  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id obj = v7;
  uint64_t v27 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (!v27)
  {
    __int16 v21 = 0;
    goto LABEL_24;
  }
  uint64_t v26 = *(void *)v34;
  while (2)
  {
    for (uint64_t i = 0; i != v27; ++i)
    {
      if (*(void *)v34 != v26) {
        objc_enumerationMutation(obj);
      }
      BOOL v11 = [(HMDHomeManager *)self _homeWithUUID:*(void *)(*((void *)&v33 + 1) + 8 * i)];
      if (!v11)
      {
        __int16 v21 = [MEMORY[0x263F087E8] hmErrorWithCode:2];
        __int16 v22 = 0;
LABEL_23:

        goto LABEL_24;
      }
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      uint64_t v28 = v11;
      long long v12 = [v11 actionSets];
      uint64_t v13 = [v12 countByEnumeratingWithState:&v29 objects:v37 count:16];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = *(void *)v30;
LABEL_9:
        uint64_t v16 = 0;
        while (1)
        {
          if (*(void *)v30 != v15) {
            objc_enumerationMutation(v12);
          }
          __int16 v17 = *(void **)(*((void *)&v29 + 1) + 8 * v16);
          __int16 v18 = [(HMDHomeManager *)self nameValidator];
          id v19 = [v17 name];
          id v20 = [v18 despaceName:v19];

          if ([v9 isEqualToString:v20]) {
            break;
          }

          if (v14 == ++v16)
          {
            uint64_t v14 = [v12 countByEnumeratingWithState:&v29 objects:v37 count:16];
            if (v14) {
              goto LABEL_9;
            }
            goto LABEL_15;
          }
        }
        __int16 v21 = [MEMORY[0x263F087E8] hmErrorWithCode:31];

        if (!v21) {
          goto LABEL_17;
        }
        __int16 v22 = v28;
        goto LABEL_23;
      }
LABEL_15:

LABEL_17:
    }
    __int16 v21 = 0;
    uint64_t v27 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
    if (v27) {
      continue;
    }
    break;
  }
LABEL_24:

  return v21;
}

- (id)_checkNameConflict:(id)a3 withNamespaceUUIDs:(id)a4
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v6 = a3;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v7 = a4;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v17;
LABEL_3:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v17 != v10) {
        objc_enumerationMutation(v7);
      }
      uint64_t v12 = *(void *)(*((void *)&v16 + 1) + 8 * v11);
      uint64_t v13 = [(HMDHomeManager *)self nameValidator];
      uint64_t v14 = [v13 checkForConflict:v6 namespace:v12];

      if (v14) {
        break;
      }
      if (v9 == ++v11)
      {
        uint64_t v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v9) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v14 = 0;
  }

  return v14;
}

- (id)messageDestination
{
  id v3 = objc_alloc(MEMORY[0x263F42570]);
  id v4 = [(HMDHomeManager *)self messageTargetUUID];
  id v5 = (void *)[v3 initWithTarget:v4];

  return v5;
}

- (void)accessoriesAreLocallyReachableOnTransientDevice:(BOOL)a3 forHome:(id)a4
{
  id v6 = a4;
  id v7 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __74__HMDHomeManager_accessoriesAreLocallyReachableOnTransientDevice_forHome___block_invoke;
  block[3] = &unk_264A2DFC8;
  BOOL v11 = a3;
  void block[4] = self;
  id v10 = v6;
  id v8 = v6;
  dispatch_async(v7, block);
}

uint64_t __74__HMDHomeManager_accessoriesAreLocallyReachableOnTransientDevice_forHome___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _accessoriesAreLocallyReachableOnTransientDevice:*(unsigned __int8 *)(a1 + 48) forHome:*(void *)(a1 + 40)];
}

- (void)_setUniqueDeviceIdSalt:(id)a3
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x230FBD990]();
  id v6 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v7 = HMFGetLogIdentifier();
    int v8 = 138543362;
    uint64_t v9 = v7;
    _os_log_impl(&dword_22F52A000, v6, OS_LOG_TYPE_INFO, "%{public}@Saving the device identifier salt", (uint8_t *)&v8, 0xCu);
  }
  [(HMDHomeManager *)self _setHomeConfigurationKey:@"kUniqueDeviceIdentifierSaltkey" value:v4 applicationIdentifier:@"com.apple.homed.notbackedup"];
}

- (BOOL)_updateAccessoriesConfigured
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  if ([(HMDHomeManager *)self hasLoadedData])
  {
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    uint64_t v98 = self;
    id obj = [(HMDHomeManager *)self homes];
    uint64_t v101 = [obj countByEnumeratingWithState:&v112 objects:v121 count:16];
    if (v101)
    {
      uint64_t v107 = 0;
      char v3 = 0;
      int v106 = 0;
      uint64_t v104 = 0;
      char v103 = 0;
      char v4 = 0;
      uint64_t v100 = *(void *)v113;
      do
      {
        for (uint64_t i = 0; i != v101; ++i)
        {
          if (*(void *)v113 != v100) {
            objc_enumerationMutation(obj);
          }
          id v6 = *(void **)(*((void *)&v112 + 1) + 8 * i);
          long long v108 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          id v105 = v6;
          id v7 = [v6 accessories];
          uint64_t v8 = [v7 countByEnumeratingWithState:&v108 objects:v120 count:16];
          if (v8)
          {
            uint64_t v9 = v8;
            uint64_t v102 = i;
            uint64_t v10 = *(void *)v109;
            do
            {
              for (uint64_t j = 0; j != v9; ++j)
              {
                if (*(void *)v109 != v10) {
                  objc_enumerationMutation(v7);
                }
                id v12 = *(id *)(*((void *)&v108 + 1) + 8 * j);
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  uint64_t v13 = v12;
                }
                else {
                  uint64_t v13 = 0;
                }
                id v14 = v13;

                if (v14)
                {
                  id v15 = v12;
                  objc_opt_class();
                  if (objc_opt_isKindOfClass()) {
                    long long v16 = v15;
                  }
                  else {
                    long long v16 = 0;
                  }
                  id v17 = v16;

                  if ([v17 isHomePod])
                  {
                    switch([v17 homePodVariant])
                    {
                      case 0:
                      case 3:
                        BYTE4(v104) = 1;
                        break;
                      case 1:
                        LOBYTE(v104) = 1;
                        break;
                      case 2:
                        char v103 = 1;
                        break;
                      default:
                        break;
                    }
                    if ([v17 requiresHomeAppForManagement]) {
                      v106 |= [v105 isOwnerUser];
                    }
                    LOBYTE(v107) = 1;
                  }
                  else
                  {
                    HIDWORD(v107) |= [v17 isAppleTV];
                  }
                }
                id v18 = v12;
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  long long v19 = v18;
                }
                else {
                  long long v19 = 0;
                }
                id v20 = v19;

                char v21 = [v20 hasTelevisionService];
                v3 |= v21;
              }
              uint64_t v9 = [v7 countByEnumeratingWithState:&v108 objects:v120 count:16];
            }
            while (v9);
            char v4 = 1;
            uint64_t i = v102;
          }
        }
        uint64_t v101 = [obj countByEnumeratingWithState:&v112 objects:v121 count:16];
      }
      while (v101);
    }
    else
    {
      uint64_t v107 = 0;
      char v3 = 0;
      LOBYTE(v106) = 0;
      uint64_t v104 = 0;
      char v103 = 0;
      char v4 = 0;
    }

    char v22 = v107 ^ HMHomeManagerAreAnySpeakersConfigured();
    if (v22)
    {
      uint64_t v23 = (void *)MEMORY[0x230FBD990]();
      uint64_t v24 = v98;
      uint64_t v25 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        uint64_t v26 = HMFGetLogIdentifier();
        uint64_t v27 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v117 = v26;
        __int16 v118 = 2112;
        long long v119 = v27;
        _os_log_impl(&dword_22F52A000, v25, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for speakers configured: %@", buf, 0x16u);
      }
      uint64_t v28 = (void *)MEMORY[0x263EFFB40];
      if ((v107 & 1) == 0) {
        uint64_t v28 = (void *)MEMORY[0x263EFFB38];
      }
      long long v29 = (void *)MEMORY[0x230FBD990]([(HMDHomeManager *)v24 _setHomeConfigurationKey:*MEMORY[0x263F0EBB8] value:*v28]);
      long long v30 = v24;
      long long v31 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        long long v32 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v117 = v32;
        _os_log_impl(&dword_22F52A000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Posting speakers configured changed notification", buf, 0xCu);
      }
      long long v33 = [(HMDHomeManager *)v30 darwinNotificationProvider];
      [v33 notifyPost:*MEMORY[0x263F0CC48]];
    }
    if ((v103 & 1) != areAnyHomePodMiniConfigured())
    {
      long long v34 = (void *)MEMORY[0x230FBD990]();
      long long v35 = v98;
      long long v36 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        uint64_t v37 = HMFGetLogIdentifier();
        __int16 v38 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v117 = v37;
        __int16 v118 = 2112;
        long long v119 = v38;
        _os_log_impl(&dword_22F52A000, v36, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for HomePod Mini configured: %@", buf, 0x16u);
      }
      uint64_t v39 = (void *)MEMORY[0x263EFFB40];
      if ((v103 & 1) == 0) {
        uint64_t v39 = (void *)MEMORY[0x263EFFB38];
      }
      __int16 v40 = (void *)MEMORY[0x230FBD990]([(HMDHomeManager *)v35 _setHomeConfigurationKey:*MEMORY[0x263F0CD68] value:*v39]);
      __int16 v41 = v35;
      int v42 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        long long v43 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v117 = v43;
        _os_log_impl(&dword_22F52A000, v42, OS_LOG_TYPE_DEFAULT, "%{public}@Posting HomePod Mini configured changed notification", buf, 0xCu);
      }
      uint64_t v44 = [(HMDHomeManager *)v41 darwinNotificationProvider];
      [v44 notifyPost:*MEMORY[0x263F0CB08]];

      char v22 = 1;
    }
    if ((BYTE4(v104) & 1) != areAnyLargeHomePodConfigured())
    {
      char v45 = (void *)MEMORY[0x230FBD990]();
      long long v46 = v98;
      uint64_t v47 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        long long v48 = HMFGetLogIdentifier();
        uint64_t v49 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v117 = v48;
        __int16 v118 = 2112;
        long long v119 = v49;
        _os_log_impl(&dword_22F52A000, v47, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for 2nd Gen HomePods configured: %@", buf, 0x16u);
      }
      long long v50 = (void *)MEMORY[0x263EFFB40];
      if ((v104 & 0x100000000) == 0) {
        long long v50 = (void *)MEMORY[0x263EFFB38];
      }
      int v51 = (void *)MEMORY[0x230FBD990]([(HMDHomeManager *)v46 _setHomeConfigurationKey:*MEMORY[0x263F0CFD0] value:*v50]);
      uint64_t v52 = v46;
      uint64_t v53 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v54 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v117 = v54;
        _os_log_impl(&dword_22F52A000, v53, OS_LOG_TYPE_DEFAULT, "%{public}@Posting 2nd Gen HomePods configured changed notification", buf, 0xCu);
      }
      BOOL v55 = [(HMDHomeManager *)v52 darwinNotificationProvider];
      [v55 notifyPost:*MEMORY[0x263F0CB50]];

      char v22 = 1;
    }
    if ((v104 & 1) != areAnyHomePodsConfigured())
    {
      BOOL v56 = (void *)MEMORY[0x230FBD990]();
      long long v57 = v98;
      long long v58 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        long long v59 = HMFGetLogIdentifier();
        BOOL v60 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v117 = v59;
        __int16 v118 = 2112;
        long long v119 = v60;
        _os_log_impl(&dword_22F52A000, v58, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for HomePods configured: %@", buf, 0x16u);
      }
      long long v61 = (void *)MEMORY[0x263EFFB40];
      if ((v104 & 1) == 0) {
        long long v61 = (void *)MEMORY[0x263EFFB38];
      }
      long long v62 = (void *)MEMORY[0x230FBD990]([(HMDHomeManager *)v57 _setHomeConfigurationKey:*MEMORY[0x263F0CD78] value:*v61]);
      int v63 = v57;
      long long v64 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        id v65 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v117 = v65;
        _os_log_impl(&dword_22F52A000, v64, OS_LOG_TYPE_DEFAULT, "%{public}@Posting HomePods present configured changed notification", buf, 0xCu);
      }
      long long v66 = [(HMDHomeManager *)v63 darwinNotificationProvider];
      [v66 notifyPost:*MEMORY[0x263F0CB10]];

      char v22 = 1;
    }
    [(HMDHomeManager *)v98 setHomePodsPresent:v107 & 1 inOwnedHomes:v106 & 1];
    if ((v3 & 1) != HMHomeManagerAreAnyTelevisionAccessoriesConfigured())
    {
      long long v67 = (void *)MEMORY[0x230FBD990]();
      long long v68 = v98;
      long long v69 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
      {
        long long v70 = HMFGetLogIdentifier();
        long long v71 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v117 = v70;
        __int16 v118 = 2112;
        long long v119 = v71;
        _os_log_impl(&dword_22F52A000, v69, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for televisions configured: %@", buf, 0x16u);
      }
      uint64_t v72 = (void *)MEMORY[0x263EFFB40];
      if ((v3 & 1) == 0) {
        uint64_t v72 = (void *)MEMORY[0x263EFFB38];
      }
      uint64_t v73 = [(HMDHomeManager *)v68 _setHomeConfigurationKey:*MEMORY[0x263F0DB40] value:*v72];
      if (v3)
      {
        __int16 v74 = (void *)MEMORY[0x230FBD990](v73);
        id v75 = v68;
        __int16 v76 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v77 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          uint64_t v117 = v77;
          _os_log_impl(&dword_22F52A000, v76, OS_LOG_TYPE_DEFAULT, "%{public}@Posting Television accessories added notification", buf, 0xCu);
        }
        uint64_t v78 = [(HMDHomeManager *)v75 darwinNotificationProvider];
        [v78 notifyPost:*MEMORY[0x263F0CC60]];
      }
      char v22 = 1;
    }
    if ((BYTE4(v107) & 1) != HMHomeManagerAreAnyAppleTVAccessoriesConfigured())
    {
      uint64_t v79 = (void *)MEMORY[0x230FBD990]();
      id v80 = v98;
      __int16 v81 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
      {
        id v82 = HMFGetLogIdentifier();
        uint64_t v83 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v117 = v82;
        __int16 v118 = 2112;
        long long v119 = v83;
        _os_log_impl(&dword_22F52A000, v81, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for Apple TV accessories configured: %@", buf, 0x16u);
      }
      id v84 = (void *)MEMORY[0x263EFFB40];
      if ((v107 & 0x100000000) == 0) {
        id v84 = (void *)MEMORY[0x263EFFB38];
      }
      uint64_t v85 = [(HMDHomeManager *)v80 _setHomeConfigurationKey:*MEMORY[0x263F0B9E8] value:*v84];
      if ((v107 & 0x100000000) != 0)
      {
        id v86 = (void *)MEMORY[0x230FBD990](v85);
        long long v87 = v80;
        double v88 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v89 = HMFGetLogIdentifier();
          *(_DWORD *)long long buf = 138543362;
          uint64_t v117 = v89;
          _os_log_impl(&dword_22F52A000, v88, OS_LOG_TYPE_DEFAULT, "%{public}@Posting Apple TV accessories added notification", buf, 0xCu);
        }
        long long v90 = [(HMDHomeManager *)v87 darwinNotificationProvider];
        [v90 notifyPost:*MEMORY[0x263F0C980]];
      }
      char v22 = 1;
    }
    if ((v4 & 1) != HMHomeManagerAreAnyAccessoriesConfigured())
    {
      int v91 = (void *)MEMORY[0x230FBD990]();
      uint64_t v92 = v98;
      BOOL v93 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v93, OS_LOG_TYPE_INFO))
      {
        uint64_t v94 = HMFGetLogIdentifier();
        double v95 = HMFBooleanToString();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v117 = v94;
        __int16 v118 = 2112;
        long long v119 = v95;
        _os_log_impl(&dword_22F52A000, v93, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for accessories configured: %@", buf, 0x16u);
      }
      uint64_t v96 = (void *)MEMORY[0x263EFFB40];
      if ((v4 & 1) == 0) {
        uint64_t v96 = (void *)MEMORY[0x263EFFB38];
      }
      [(HMDHomeManager *)v92 _setHomeConfigurationKey:*MEMORY[0x263F0E930] value:*v96];
      char v22 = 1;
    }
  }
  else
  {
    char v22 = 0;
  }
  return v22 & 1;
}

- (void)_updatePreferencesAndPostNotificationIfNecessary
{
  if ([(HMDHomeManager *)self _updateAccessoriesConfigured])
  {
    -[HMDHomeManager _postPreferencesChangedNotification](self);
  }
}

- (void)_postPreferencesChangedNotification
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v2 = (void *)MEMORY[0x230FBD990]();
    id v3 = a1;
    char v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = HMFGetLogIdentifier();
      int v7 = 138543362;
      uint64_t v8 = v5;
      _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Posting preferences changed notification", (uint8_t *)&v7, 0xCu);
    }
    id v6 = [v3 darwinNotificationProvider];
    [v6 notifyPost:*MEMORY[0x263F0CBB8]];
  }
}

- (void)setHomePodsPresent:(BOOL)a3 inOwnedHomes:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v5 = a3;
  uint64_t v26 = *MEMORY[0x263EF8340];
  if ([(HMDHomeManager *)self speakersAreConfigured] != a3) {
    [(HMDHomeManager *)self setSpeakersAreConfigured:v5];
  }
  if (+[HMDDeviceCapabilities supportsHomeApp]
    && [(HMDHomeManager *)self speakersAreConfiguredInOwnedHomes] != v4)
  {
    uint64_t v7 = [(HMDHomeManager *)self setSpeakersAreConfiguredInOwnedHomes:v4];
    if (v4) {
      uint64_t v8 = 2;
    }
    else {
      uint64_t v8 = 1;
    }
    uint64_t v9 = (void *)MEMORY[0x230FBD990](v7);
    uint64_t v10 = self;
    BOOL v11 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v12 = HMFGetLogIdentifier();
      uint64_t v13 = IXStringForAppRemovability();
      [(HMDHomeManager *)v10 speakersAreConfiguredInOwnedHomes];
      id v14 = HMFBooleanToString();
      id v15 = HMFBooleanToString();
      *(_DWORD *)long long buf = 138544130;
      long long v19 = v12;
      __int16 v20 = 2112;
      char v21 = v13;
      __int16 v22 = 2112;
      uint64_t v23 = v14;
      __int16 v24 = 2112;
      uint64_t v25 = v15;
      _os_log_impl(&dword_22F52A000, v11, OS_LOG_TYPE_INFO, "%{public}@Setting Home app removability to %@ because HomePods present in owned homes changed from %@ -> %@", buf, 0x2Au);
    }
    uint64_t v16 = *MEMORY[0x263F0C7A8];
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 3221225472;
    v17[2] = __50__HMDHomeManager_setHomePodsPresent_inOwnedHomes___block_invoke;
    v17[3] = &unk_264A2F320;
    void v17[4] = v10;
    void v17[5] = v8;
    [MEMORY[0x263F4BE78] setRemovability:v8 forAppWithBundleID:v16 completion:v17];
  }
}

void __50__HMDHomeManager_setHomePodsPresent_inOwnedHomes___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = a2;
  BOOL v4 = (void *)MEMORY[0x230FBD990]();
  id v5 = *(id *)(a1 + 32);
  id v6 = HMFGetOSLogHandle();
  uint64_t v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = HMFGetLogIdentifier();
      uint64_t v9 = IXStringForAppRemovability();
      int v14 = 138543874;
      id v15 = v8;
      __int16 v16 = 2112;
      id v17 = v9;
      __int16 v18 = 2112;
      id v19 = v3;
      uint64_t v10 = "%{public}@Failed to set Home app removability to %@: %@";
      BOOL v11 = v7;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 32;
LABEL_6:
      _os_log_impl(&dword_22F52A000, v11, v12, v10, (uint8_t *)&v14, v13);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    uint64_t v9 = IXStringForAppRemovability();
    int v14 = 138543618;
    id v15 = v8;
    __int16 v16 = 2112;
    id v17 = v9;
    uint64_t v10 = "%{public}@Successfully set Home app removability to %@";
    BOOL v11 = v7;
    os_log_type_t v12 = OS_LOG_TYPE_INFO;
    uint32_t v13 = 22;
    goto LABEL_6;
  }
}

- (void)updateHomeKitInUsePreferences
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if ([(HMDHomeManager *)self hasLoadedData])
  {
    BOOL v3 = [(HMDHomeManager *)self _updateIncomingInvitesPresent];
    BOOL v4 = [(HMDHomeManager *)self _updatePreferencesForConfiguredHomes];
    BOOL v5 = [(HMDHomeManager *)self _updatePreferencesForCurrentHome];
    BOOL v6 = [(HMDHomeManager *)self _updateAccessoriesConfigured];
    BOOL v7 = v6;
    if (v3 || v4 || v5 || v6)
    {
      uint64_t v8 = (void *)MEMORY[0x230FBD990]();
      uint64_t v9 = self;
      uint64_t v10 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        BOOL v11 = HMFGetLogIdentifier();
        int v12 = 138544386;
        uint32_t v13 = v11;
        __int16 v14 = 1024;
        BOOL v15 = v3;
        __int16 v16 = 1024;
        BOOL v17 = v4;
        __int16 v18 = 1024;
        BOOL v19 = v5;
        __int16 v20 = 1024;
        BOOL v21 = v7;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Posting preferences changed notification due to change in incomingInvites: %{BOOL}d homes: %{BOOL}d}, currentHome: %{BOOL}d, accessoriesConfigured: %{BOOL}d", (uint8_t *)&v12, 0x24u);
      }
      -[HMDHomeManager _postPreferencesChangedNotification](v9);
    }
  }
}

- (BOOL)_updateIncomingInvitesPresent
{
  BOOL v3 = [(HMDHomeManager *)self hasLoadedData];
  if (v3)
  {
    int v4 = areIncomingInvitesPresent();
    BOOL v5 = [(HMDHomeManager *)self incomingInvitations];
    uint64_t v6 = [v5 count];

    BOOL v7 = +[HMDBulletinBoard sharedBulletinBoard];
    [v7 refreshHomeBadgeNumber];

    if (v4 == (v6 != 0))
    {
      LOBYTE(v3) = 0;
    }
    else
    {
      uint64_t v8 = (void *)MEMORY[0x263EFFB38];
      if (v6) {
        uint64_t v8 = (void *)MEMORY[0x263EFFB40];
      }
      [(HMDHomeManager *)self _setHomeConfigurationKey:*MEMORY[0x263F0EA38] value:*v8];
      LOBYTE(v3) = 1;
    }
  }
  return v3;
}

- (BOOL)_updatePreferencesForCurrentHome
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v4 = [(HMDHomeManager *)self hasLoadedData];
  if (v4)
  {
    id v5 = objc_alloc(MEMORY[0x263F424F0]);
    uint64_t v6 = NSString;
    BOOL v7 = MEMORY[0x230FBBCF0](self, a2);
    uint64_t v8 = [v6 stringWithFormat:@"%@, %s:%ld", v7, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/HomeManager/HMDHomeManager.m", 8180];
    uint64_t v9 = [MEMORY[0x263F424F0] currentActivity];
    BOOL v21 = (void *)[v5 initWithName:v8 parent:v9];

    uint64_t v10 = [(HMDHomeManager *)self currentHomeUUID];
    if (v10)
    {
      BOOL v11 = [(HMDHomeManager *)self currentHomeUUID];
      int v12 = spiClientIdentifierForUUID(v11);
    }
    else
    {
      int v12 = 0;
    }

    uint32_t v13 = HMHomeManagerCurrentHomeSPIClientIdentifier();
    char v14 = HMFEqualObjects();
    if ((v14 & 1) == 0)
    {
      BOOL v15 = (void *)MEMORY[0x230FBD990]();
      __int16 v16 = self;
      HMFGetOSLogHandle();
      BOOL v17 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        __int16 v18 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v23 = v18;
        __int16 v24 = 2112;
        uint64_t v25 = v12;
        _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@Setting the preference for current home SPI client identifier: %@", buf, 0x16u);
      }
      BOOL v19 = [v12 UUIDString];
      [(HMDHomeManager *)v16 _setHomeConfigurationKey:*MEMORY[0x263F0C630] value:v19];
    }
    __HMFActivityScopeLeave();

    LOBYTE(v4) = v14 ^ 1;
  }
  return v4;
}

- (BOOL)_updatePreferencesForConfiguredHomes
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (![(HMDHomeManager *)self hasLoadedData]) {
    return 0;
  }
  id v4 = objc_alloc(MEMORY[0x263F424F0]);
  id v5 = NSString;
  uint64_t v6 = MEMORY[0x230FBBCF0](self, a2);
  BOOL v7 = [v5 stringWithFormat:@"%@, %s:%ld", v6, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/HomeManager/HMDHomeManager.m", 8140];
  uint64_t v8 = [MEMORY[0x263F424F0] currentActivity];
  long long v33 = (void *)[v4 initWithName:v7 parent:v8];

  uint64_t v9 = [(HMDHomeManager *)self homes];
  unint64_t v10 = [v9 count];

  unint64_t v11 = HMHomeManagerConfiguredHomesCount();
  BOOL v12 = v10 != v11;
  if (v10 != v11)
  {
    uint32_t v13 = (void *)MEMORY[0x230FBD990]();
    char v14 = self;
    HMFGetOSLogHandle();
    BOOL v15 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      __int16 v16 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      id v35 = v16;
      __int16 v36 = 2048;
      unint64_t v37 = v10;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for configured homes count: %lu", buf, 0x16u);
    }
    uint64_t v17 = [NSNumber numberWithUnsignedInteger:v10];
    BOOL v18 = v10 > v11;
    BOOL v19 = (void *)MEMORY[0x230FBD990]([(HMDHomeManager *)v14 _setHomeConfigurationKey:*MEMORY[0x263F0C628] value:v17]);
    __int16 v20 = v14;
    if (v18)
    {
      HMFGetOSLogHandle();
      BOOL v21 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v35 = v22;
        _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Posting configured home added notification", buf, 0xCu);
      }
      uint64_t v23 = [(HMDHomeManager *)v20 darwinNotificationProvider];
      [v23 notifyPost:*MEMORY[0x263F0C9B0]];
    }
    else
    {
      HMFGetOSLogHandle();
      __int16 v24 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        id v35 = v25;
        _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_DEFAULT, "%{public}@Posting configured home removed notification", buf, 0xCu);
      }
      uint64_t v23 = [(HMDHomeManager *)v20 darwinNotificationProvider];
      [v23 notifyPost:*MEMORY[0x263F0C9B8]];
    }
  }
  if ((v10 != 0) != areHomesConfigured())
  {
    uint64_t v26 = (void *)MEMORY[0x230FBD990]();
    uint64_t v27 = self;
    HMFGetOSLogHandle();
    uint64_t v28 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v29 = (id)objc_claimAutoreleasedReturnValue();
      long long v30 = HMFBooleanToString();
      *(_DWORD *)long long buf = 138543618;
      id v35 = v29;
      __int16 v36 = 2112;
      unint64_t v37 = (unint64_t)v30;
      _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for are homes configured: %@", buf, 0x16u);
    }
    long long v31 = (void *)MEMORY[0x263EFFB38];
    if (v10) {
      long long v31 = (void *)MEMORY[0x263EFFB40];
    }
    [(HMDHomeManager *)v27 _setHomeConfigurationKey:*MEMORY[0x263F0B9F0] value:*v31];
    BOOL v12 = 1;
  }
  __HMFActivityScopeLeave();

  return v12;
}

- (void)_setHomeConfigurationKey:(id)a3 value:(void *)a4
{
}

- (void)_setHomeConfigurationKey:(id)a3 value:(void *)a4 applicationIdentifier:(__CFString *)a5
{
}

- (id)replaceName:(id)a3 withNewName:(id)a4 inNamespaces:(id)a5
{
  id v8 = a5;
  id v9 = a4;
  id v10 = a3;
  unint64_t v11 = [(HMDHomeManager *)self nameValidator];
  BOOL v12 = [v11 replaceName:v10 withNewName:v9 inNamespaces:v8];

  return v12;
}

- (id)removeName:(id)a3 namespace:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = [(HMDHomeManager *)self nameValidator];
  id v9 = [v8 removeName:v7 namespace:v6];

  return v9;
}

- (id)addName:(id)a3 namespace:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = [(HMDHomeManager *)self nameValidator];
  id v9 = [v8 addName:v7 namespace:v6];

  return v9;
}

- (id)_homeFromEventIdentifier:(id)a3
{
  id v4 = [a3 componentsSeparatedByString:@"/"];
  id v5 = [v4 firstObject];
  id v6 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v5];
  id v7 = [(HMDHomeManager *)self _homeWithUUID:v6];

  return v7;
}

- (id)_zoneInformationWithUUID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self cloudZones];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);

  return v6;
}

- (id)_homeWithZoneID:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self homes];
  id v6 = objc_msgSend(v5, "hmf_firstObjectWithZoneID:", v4);

  return v6;
}

- (id)_homeWithAssistantIdentifier:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v5 = [(HMDHomeManager *)self homes];
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3221225472;
    void v8[2] = __47__HMDHomeManager__homeWithAssistantIdentifier___block_invoke;
    v8[3] = &unk_264A2B250;
    id v9 = v4;
    id v6 = objc_msgSend(v5, "hmf_objectPassingTest:", v8);
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

uint64_t __47__HMDHomeManager__homeWithAssistantIdentifier___block_invoke(uint64_t a1, void *a2)
{
  BOOL v3 = [a2 urlString];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

- (id)_homeWithUniqueIdentifier:(id)a3 forClientIdentifierSalt:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(HMDHomeManager *)self homes];
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  v13[2] = __68__HMDHomeManager__homeWithUniqueIdentifier_forClientIdentifierSalt___block_invoke;
  void v13[3] = &unk_264A2B278;
  id v14 = v7;
  id v15 = v6;
  id v9 = v6;
  id v10 = v7;
  unint64_t v11 = objc_msgSend(v8, "na_firstObjectPassingTest:", v13);

  return v11;
}

uint64_t __68__HMDHomeManager__homeWithUniqueIdentifier_forClientIdentifierSalt___block_invoke(uint64_t a1, void *a2)
{
  BOOL v3 = (void *)MEMORY[0x263F08C38];
  uint64_t v4 = [a2 uuid];
  id v5 = objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v4, *(void *)(a1 + 32));

  uint64_t v6 = [v5 isEqual:*(void *)(a1 + 40)];
  return v6;
}

- (id)_homeWithUUID:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v5 = [(HMDHomeManager *)self homes];
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3221225472;
    void v8[2] = __32__HMDHomeManager__homeWithUUID___block_invoke;
    v8[3] = &unk_264A2B250;
    id v9 = v4;
    uint64_t v6 = objc_msgSend(v5, "hmf_objectPassingTest:", v8);
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

uint64_t __32__HMDHomeManager__homeWithUUID___block_invoke(uint64_t a1, void *a2)
{
  BOOL v3 = [a2 uuid];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

- (id)_homesWithName:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self homes];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  v9[2] = __33__HMDHomeManager__homesWithName___block_invoke;
  v9[3] = &unk_264A2B250;
  id v10 = v4;
  id v6 = v4;
  id v7 = objc_msgSend(v5, "hmf_objectsPassingTest:", v9);

  return v7;
}

uint64_t __33__HMDHomeManager__homesWithName___block_invoke(uint64_t a1, void *a2)
{
  BOOL v3 = [a2 name];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

- (id)_homeWithName:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self homes];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  v9[2] = __32__HMDHomeManager__homeWithName___block_invoke;
  v9[3] = &unk_264A2B250;
  id v10 = v4;
  id v6 = v4;
  id v7 = objc_msgSend(v5, "hmf_objectPassingTest:", v9);

  return v7;
}

uint64_t __32__HMDHomeManager__homeWithName___block_invoke(uint64_t a1, void *a2)
{
  BOOL v3 = [a2 name];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

- (BOOL)checkConflictInHomeNamespaceWithName:(id)a3 options:(unint64_t)a4 namespaceUUID:(id)a5 error:(id *)a6
{
  char v8 = a4;
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a5;
  id v12 = objc_alloc_init(MEMORY[0x263EFF980]);
  if ((v8 & 0xD) != 0)
  {
    if ((v8 & 1) == 0
      || ([(HMDHomeManager *)self nameValidator],
          uint32_t v13 = objc_claimAutoreleasedReturnValue(),
          [v13 validateName:v10],
          id v14 = objc_claimAutoreleasedReturnValue(),
          v13,
          !v14))
    {
      if (v11)
      {
        [v12 addObject:v11];
        if ((v8 & 4) == 0) {
          goto LABEL_26;
        }
      }
      else if ((v8 & 2) != 0)
      {
        id v28 = v10;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        uint64_t v17 = [(HMDHomeManager *)self homes];
        uint64_t v18 = [v17 countByEnumeratingWithState:&v29 objects:v33 count:16];
        if (v18)
        {
          uint64_t v19 = v18;
          uint64_t v20 = *(void *)v30;
          do
          {
            for (uint64_t i = 0; i != v19; ++i)
            {
              if (*(void *)v30 != v20) {
                objc_enumerationMutation(v17);
              }
              uint64_t v22 = [*(id *)(*((void *)&v29 + 1) + 8 * i) uuid];
              [v12 addObject:v22];
            }
            uint64_t v19 = [v17 countByEnumeratingWithState:&v29 objects:v33 count:16];
          }
          while (v19);
        }

        id v10 = v28;
        if ((v8 & 4) == 0) {
          goto LABEL_26;
        }
        uint64_t v23 = [(HMDHomeManager *)self uuid];
        [v12 addObject:v23];
      }
      else
      {
        __int16 v16 = [(HMDHomeManager *)self uuid];
        [v12 addObject:v16];

        if ((v8 & 4) == 0)
        {
LABEL_26:
          if ((v8 & 8) == 0
            || ([(HMDHomeManager *)self _checkActionSetNameConflict:v10 withNamespaceUUIDs:v12], (uint64_t v25 = objc_claimAutoreleasedReturnValue()) == 0))
          {
            BOOL v15 = 1;
            goto LABEL_33;
          }
          uint64_t v26 = v25;
          if (a6) {
            *a6 = v25;
          }

          goto LABEL_31;
        }
      }
      uint64_t v24 = [(HMDHomeManager *)self _checkNameConflict:v10 withNamespaceUUIDs:v12];
      if (!v24) {
        goto LABEL_26;
      }
      id v14 = (void *)v24;
    }
    if (a6) {
      *a6 = v14;
    }

LABEL_31:
    BOOL v15 = 0;
    goto LABEL_33;
  }
  if (!a6) {
    goto LABEL_31;
  }
  [MEMORY[0x263F087E8] hmErrorWithCode:3];
  BOOL v15 = 0;
  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_33:

  return v15;
}

- (void)_handleQueryHomeNamespace:(id)a3
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 stringForKey:*MEMORY[0x263F0CBD8]];
  if (!v5)
  {
    uint32_t v13 = (void *)MEMORY[0x230FBD990]();
    id v14 = self;
    BOOL v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      __int16 v16 = HMFGetLogIdentifier();
      uint64_t v17 = [v4 messagePayload];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v34 = v16;
      __int16 v35 = 2112;
      id v36 = v17;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@No name found in query home namespace message payload: %@", buf, 0x16u);
    }
    id v11 = (void *)MEMORY[0x263F087E8];
    uint64_t v12 = 20;
    goto LABEL_9;
  }
  unint64_t v6 = HMMaxLengthForNaming();
  if ([v5 length] > v6)
  {
    id v7 = (void *)MEMORY[0x230FBD990]();
    char v8 = self;
    id v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v34 = v10;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);
    }
    id v11 = (void *)MEMORY[0x263F087E8];
    uint64_t v12 = 46;
LABEL_9:
    uint64_t v18 = [v11 hmErrorWithCode:v12];
    [v4 respondWithError:v18];
    goto LABEL_18;
  }
  uint64_t v19 = [v4 numberForKey:*MEMORY[0x263F0CB88]];
  uint64_t v20 = [v19 unsignedIntegerValue];

  uint64_t v18 = [v4 uuidForKey:@"kHomeUUID"];
  BOOL v21 = (void *)MEMORY[0x230FBD990]();
  uint64_t v22 = self;
  uint64_t v23 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    uint64_t v24 = HMFGetLogIdentifier();
    uint64_t v25 = HMHomeManagerNameValidationOptionsToString();
    *(_DWORD *)long long buf = 138543874;
    uint64_t v34 = v24;
    __int16 v35 = 2112;
    id v36 = v18;
    __int16 v37 = 2112;
    uint64_t v38 = v25;
    _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_INFO, "%{public}@Validating name for home UUID %@ with options: %@", buf, 0x20u);
  }
  id v32 = 0;
  BOOL v26 = [(HMDHomeManager *)v22 checkConflictInHomeNamespaceWithName:v5 options:v20 namespaceUUID:v18 error:&v32];
  id v27 = v32;
  if (v26)
  {
    [v4 respondWithSuccess];
  }
  else
  {
    id v28 = (void *)MEMORY[0x230FBD990]();
    long long v29 = v22;
    long long v30 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      long long v31 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v34 = v31;
      __int16 v35 = 2112;
      id v36 = v27;
      _os_log_impl(&dword_22F52A000, v30, OS_LOG_TYPE_ERROR, "%{public}@Name validation failed: %@", buf, 0x16u);
    }
    [v4 respondWithError:v27];
  }

LABEL_18:
}

- (void)_stopTrackingRemovedHomeUserMergeId:(id)a3
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v4 = a3;
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  if (v4
    && [(NSMutableSet *)self->_mergeIDsOfUsersOfRemovedSharedHomes containsObject:v4])
  {
    unint64_t v6 = (void *)MEMORY[0x230FBD990]([(NSMutableSet *)self->_mergeIDsOfUsersOfRemovedSharedHomes removeObject:v4]);
    id v7 = self;
    HMFGetOSLogHandle();
    char v8 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      int v10 = 138543618;
      id v11 = v9;
      __int16 v12 = 2112;
      id v13 = v4;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Removing user with mergeID %@ from list of mergeIDs of homes removed locally", (uint8_t *)&v10, 0x16u);
    }
  }
  os_unfair_lock_unlock(p_lock);
}

- (void)_trackRemovedHomeUserMergeId:(id)a3
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v4 = a3;
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  if (v4
    && ([(NSMutableSet *)self->_mergeIDsOfUsersOfRemovedSharedHomes containsObject:v4] & 1) == 0)
  {
    unint64_t v6 = (void *)MEMORY[0x230FBD990]([(NSMutableSet *)self->_mergeIDsOfUsersOfRemovedSharedHomes addObject:v4]);
    id v7 = self;
    HMFGetOSLogHandle();
    char v8 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = HMFGetLogIdentifier();
      int v10 = 138543618;
      id v11 = v9;
      __int16 v12 = 2112;
      id v13 = v4;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Adding user with mergeID %@ to mergeID of homes removed locally", (uint8_t *)&v10, 0x16u);
    }
  }
  os_unfair_lock_unlock(p_lock);
}

- (void)removeHome:(id)a3
{
  id v4 = a3;
  os_unfair_lock_lock_with_options();
  [(NSMutableArray *)self->_homes removeObject:v4];
  os_unfair_lock_unlock(&self->_lock);
}

- (void)addHome:(id)a3
{
  id v4 = a3;
  os_unfair_lock_lock_with_options();
  [(NSMutableArray *)self->_homes addObject:v4];
  os_unfair_lock_unlock(&self->_lock);
}

- (void)setHomes:(id)a3
{
  id v6 = a3;
  os_unfair_lock_lock_with_options();
  id v4 = (NSMutableArray *)[v6 mutableCopy];
  homes = self->_homes;
  self->_homes = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (NSArray)homes
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  id v4 = (void *)[(NSMutableArray *)self->_homes copy];
  os_unfair_lock_unlock(p_lock);
  return (NSArray *)v4;
}

- (void)setCurrentHomeUUID:(id)a3
{
  char v8 = (NSUUID *)a3;
  os_unfair_lock_lock_with_options();
  overrideCurrentHomeUUIDToNil = self->_overrideCurrentHomeUUIDToNil;
  currentHomeUUIDOverride = v8;
  if (overrideCurrentHomeUUIDToNil)
  {
    if ([(HMFBoolean *)overrideCurrentHomeUUIDToNil BOOLValue]) {
      currentHomeUUIDOverride = 0;
    }
    else {
      currentHomeUUIDOverride = self->_currentHomeUUIDOverride;
    }
  }
  id v6 = currentHomeUUIDOverride;
  currentHomeUUID = self->_currentHomeUUID;
  self->_currentHomeUUID = v6;

  os_unfair_lock_unlock(&self->_lock);
}

- (NSUUID)currentHomeUUID
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  id v4 = self->_currentHomeUUID;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (void)setOverrideCurrentHomeUUIDToNil:(id)a3
{
  id v4 = (HMFBoolean *)a3;
  os_unfair_lock_lock_with_options();
  overrideCurrentHomeUUIDToNil = self->_overrideCurrentHomeUUIDToNil;
  self->_overrideCurrentHomeUUIDToNil = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (HMFBoolean)overrideCurrentHomeUUIDToNil
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  id v4 = self->_overrideCurrentHomeUUIDToNil;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (void)setCurrentHomeUUIDOverride:(id)a3
{
  id v4 = (NSUUID *)a3;
  os_unfair_lock_lock_with_options();
  currentHomeUUIDOverride = self->_currentHomeUUIDOverride;
  self->_currentHomeUUIDOverride = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (NSUUID)currentHomeUUIDOverride
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  id v4 = self->_currentHomeUUIDOverride;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (void)sendUnsecureMessage:(id)a3 target:(id)a4 userID:(id)a5 responseQueue:(id)a6 responseHandler:(id)a7
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  BOOL v15 = a6;
  id v16 = a7;
  uint64_t v17 = +[HMDMessageDispatcher destinationWithTarget:v13 userID:v14 destination:0 multicast:1];
  if (v17)
  {
    [v12 setDestination:v17];
    uint64_t v18 = [v12 responseHandler];

    if (v16 && !v18)
    {
      v26[0] = MEMORY[0x263EF8330];
      v26[1] = 3221225472;
      void v26[2] = __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke_2;
      v26[3] = &unk_264A2B228;
      id v27 = v15;
      id v28 = v16;
      [v12 setResponseHandler:v26];
    }
    uint64_t v19 = [(HMDHomeManager *)self messageDispatcher];
    [v19 sendMessage:v12 completionHandler:0];
    goto LABEL_11;
  }
  uint64_t v20 = (void *)MEMORY[0x230FBD990]();
  BOOL v21 = self;
  uint64_t v22 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v23 = HMFGetLogIdentifier();
    [v12 shortDescription];
    v24 = uint64_t v25 = v20;
    *(_DWORD *)long long buf = 138543874;
    id v32 = v23;
    __int16 v33 = 2112;
    uint64_t v34 = v24;
    __int16 v35 = 2112;
    id v36 = v14;
    _os_log_impl(&dword_22F52A000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot send unsecure message %@: could not create message destination for userID: %@", buf, 0x20u);

    uint64_t v20 = v25;
  }

  if (v15 && v16)
  {
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke;
    block[3] = &unk_264A2DFA0;
    id v30 = v16;
    dispatch_async(v15, block);
    uint64_t v19 = v30;
LABEL_11:
  }
}

void __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(a1 + 32);
  if (v7)
  {
    char v8 = *(void **)(a1 + 40);
    if (v8)
    {
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke_3;
      block[3] = &unk_264A2EE80;
      id v12 = v8;
      id v10 = v5;
      id v11 = v6;
      dispatch_async(v7, block);
    }
  }
}

uint64_t __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke_3(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

- (void)sendSecureMessage:(id)a3 target:(id)a4 userID:(id)a5 destination:(id)a6 responseQueue:(id)a7 responseHandler:(id)a8
{
  id v14 = a8;
  id v15 = a7;
  id v16 = a6;
  id v17 = a5;
  id v18 = a4;
  id v19 = a3;
  id v20 = [(HMDHomeManager *)self messageDispatcher];
  [v20 sendSecureMessage:v19 target:v18 userID:v17 destination:v16 responseQueue:v15 responseHandler:v14];
}

- (void)electDeviceForUser:(id)a3 destination:(id)a4 deviceCapabilities:(id)a5 responseTimeout:(double)a6 queue:(id)a7 completionHandler:(id)a8
{
  id v14 = a8;
  id v15 = a7;
  id v16 = a5;
  id v17 = a4;
  id v18 = a3;
  id v19 = [(HMDHomeManager *)self userDeviceCapabilitiesRequestManager];
  [v19 electDeviceForUserID:v18 destination:v17 deviceCapabilities:v16 responseTimeout:v15 responseQueue:v14 completionHandler:a6];
}

- (void)electDeviceForHH1User:(id)a3 destination:(id)a4 deviceCapabilities:(id)a5 queue:(id)a6 completionHandler:(id)a7
{
  id v12 = a7;
  id v13 = a6;
  id v14 = a5;
  id v15 = a4;
  id v16 = a3;
  id v17 = [(HMDHomeManager *)self messageDispatcher];
  [v17 electDeviceForHH1User:v16 destination:v15 deviceCapabilities:v14 responseTimeout:v13 responseQueue:v12 responseHandler:0.0];
}

- (void)electDeviceForUser:(id)a3 destination:(id)a4 deviceCapabilities:(id)a5 queue:(id)a6 completionHandler:(id)a7
{
}

- (void)sendUserRemoved:(id)a3 fromHome:(id)a4 pairingUsername:(id)a5 pushToCloud:(BOOL)a6 completionHandler:(id)a7
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a7;
  objc_initWeak(&location, self);
  id v16 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __89__HMDHomeManager_sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke;
  block[3] = &unk_264A2B200;
  objc_copyWeak(&v26, &location);
  id v22 = v12;
  id v23 = v13;
  BOOL v27 = a6;
  id v24 = v14;
  id v25 = v15;
  id v17 = v15;
  id v18 = v14;
  id v19 = v13;
  id v20 = v12;
  dispatch_async(v16, block);

  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);
}

void __89__HMDHomeManager_sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  [WeakRetained _sendUserRemoved:*(void *)(a1 + 32) fromHome:*(void *)(a1 + 40) pairingUsername:*(void *)(a1 + 48) pushToCloud:*(unsigned __int8 *)(a1 + 72) completionHandler:*(void *)(a1 + 56)];
}

- (void)sendUserAdded:(id)a3 destination:(id)a4 toHome:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  objc_initWeak(&location, self);
  id v11 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager_sendUserAdded_destination_toHome___block_invoke;
  block[3] = &unk_264A2CB98;
  objc_copyWeak(&v19, &location);
  id v16 = v8;
  id v17 = v9;
  id v18 = v10;
  id v12 = v10;
  id v13 = v9;
  id v14 = v8;
  dispatch_async(v11, block);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
}

void __51__HMDHomeManager_sendUserAdded_destination_toHome___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained _sendUserAdded:*(void *)(a1 + 32) destination:*(void *)(a1 + 40) toHome:*(void *)(a1 + 48)];
}

- (void)notifyClientsOfUserSettingsChangeWithReason:(id)a3 sourceUUID:(id)a4
{
  id v6 = (void *)MEMORY[0x263F08A00];
  id v7 = a4;
  id v9 = a3;
  id v8 = [v6 defaultCenter];
  [v8 postNotificationName:@"HMDUserSettingsUpdatedNotificationKey" object:0];

  [(HMDHomeManager *)self updateGenerationCounterWithReason:v9 sourceUUID:v7 shouldNotifyClients:1];
}

- (void)_notifyXPCClientsOfHomeConfigurationChange
{
  BOOL v3 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v3);

  [(HMDHomeManager *)self _updatePreferencesAndPostNotificationIfNecessary];
  if ([(HMDHomeManager *)self _shouldNotifyClientsAboutGenerationCounterUpdate])
  {
    id v4 = (void *)MEMORY[0x263F42568];
    id v5 = [(HMDHomeManager *)self messageDestination];
    id v9 = [v4 messageWithName:@"kHomesDidUpdateNotificationKey" qualityOfService:9 destination:v5 payload:0];

    id v6 = [(HMDHomeManager *)self messageDispatcher];
    [v6 sendMessage:v9];

    id v7 = [(HMDHomeManager *)self logEventSubmitter];
    id v8 = objc_alloc_init(HMDNotifyXPCClientsOfHomeConfigurationChangeLogEvent);
    [v7 submitLogEvent:v8];

    [(HMDHomeManager *)self _notifyMetricsManagerOfConfigurationChange];
    logAndPostNotification(@"HMDHomeManagerNotifiedXPCClientsOfHomeConfigurationChangeNotification", self, 0);
  }
}

- (void)_updateGenerationCounterWithReason:(id)a3 sourceUUID:(id)a4 shouldNotifyClients:(BOOL)a5
{
  BOOL v5 = a5;
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v10);

  id v11 = (void *)MEMORY[0x230FBD990]();
  id v12 = self;
  id v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    id v14 = HMFGetLogIdentifier();
    int v25 = 138544386;
    id v26 = v14;
    __int16 v27 = 2048;
    uint64_t v28 = [(HMDHomeManager *)v12 generationCounter] + 1;
    __int16 v29 = 1024;
    BOOL v30 = v5;
    __int16 v31 = 2114;
    id v32 = v8;
    __int16 v33 = 2114;
    id v34 = v9;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Updating generation counter to %llu (shouldNotifyClients is %d): %{public}@-%{public}@", (uint8_t *)&v25, 0x30u);
  }
  [(HMDHomeManager *)v12 setGenerationCounter:[(HMDHomeManager *)v12 generationCounter] + 1];
  id v15 = [(HMDHomeManager *)v12 userDefaults];
  objc_msgSend(v15, "setInteger:forKey:", -[HMDHomeManager generationCounter](v12, "generationCounter"), @"HMDHomeManagerGenerationCounter");

  if ([(HMDHomeManager *)v12 generationCounterToken] != -1
    && [(HMDHomeManager *)v12 _shouldNotifyClientsAboutGenerationCounterUpdate])
  {
    id v16 = [(HMDHomeManager *)v12 darwinNotificationProvider];
    objc_msgSend(v16, "notifySetState:state:", -[HMDHomeManager generationCounterToken](v12, "generationCounterToken"), -[HMDHomeManager generationCounter](v12, "generationCounter"));

    id v17 = [(HMDHomeManager *)v12 darwinNotificationProvider];
    [v17 notifyPost:*MEMORY[0x263F0CAE0]];
  }
  if ([(HMDHomeManager *)v12 postSyncDataUpdatedNotification])
  {
    id v18 = (void *)MEMORY[0x230FBD990]([(HMDHomeManager *)v12 setPostSyncDataUpdatedNotification:0]);
    id v19 = v12;
    id v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      BOOL v21 = HMFGetLogIdentifier();
      int v25 = 138543362;
      id v26 = v21;
      _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Posting sync data updated notification after updating generation counter", (uint8_t *)&v25, 0xCu);
    }
    notify_post((const char *)*MEMORY[0x263F0BA68]);
  }
  id v22 = [(HMDHomeManager *)v12 logEventSubmitter];
  id v23 = objc_alloc_init(HMDIncrementGenerationCounterLogEvent);
  [v22 submitLogEvent:v23];

  if (v5)
  {
    id v24 = [(HMDHomeManager *)v12 debounceHomesUpdateTimer];
    [v24 resume];
  }
}

- (void)updateGenerationCounterWithReason:(id)a3 sourceUUID:(id)a4 shouldNotifyClients:(BOOL)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = [(HMDHomeManager *)self workQueue];
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  v13[2] = __83__HMDHomeManager_updateGenerationCounterWithReason_sourceUUID_shouldNotifyClients___block_invoke;
  void v13[3] = &unk_264A2B1D8;
  void v13[4] = self;
  id v14 = v8;
  id v15 = v9;
  BOOL v16 = a5;
  id v11 = v9;
  id v12 = v8;
  dispatch_async(v10, v13);
}

uint64_t __83__HMDHomeManager_updateGenerationCounterWithReason_sourceUUID_shouldNotifyClients___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateGenerationCounterWithReason:*(void *)(a1 + 40) sourceUUID:*(void *)(a1 + 48) shouldNotifyClients:*(unsigned __int8 *)(a1 + 56)];
}

- (BOOL)_shouldNotifyClientsAboutGenerationCounterUpdate
{
  return 1;
}

- (void)setGenerationCounter:(unint64_t)a3
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_generationCounter = a3;
  os_unfair_lock_unlock(p_lock);
}

- (unint64_t)generationCounter
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  unint64_t generationCounter = self->_generationCounter;
  os_unfair_lock_unlock(p_lock);
  return generationCounter;
}

- (void)setAccessAllowedWhenLocked:(BOOL)a3
{
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_accessAllowedWhenLocked = a3;
  os_unfair_lock_unlock(p_lock);
}

- (BOOL)isAccessAllowedWhenLocked
{
  id v2 = self;
  p_locuint64_t k = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_accessAllowedWhenLocked;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (BOOL)isDataSyncInProgressWithMessage:(id)a3
{
  return [(HMDHomeManager *)self dataSyncInProgressWithState:0 withMessage:a3];
}

- (BOOL)isDataSyncInProgress
{
  return [(HMDHomeManager *)self isDataSyncInProgressWithMessage:0];
}

- (BOOL)shouldClearDeviceSetupFollowUp
{
  BOOL v3 = [(HMDHomeManager *)self currentAccessoryUUID];
  if (v3)
  {
    BOOL v4 = 1;
  }
  else
  {
    BOOL v5 = [(HMDHomeManager *)self lastRemovedCurrentAccessoryUUID];
    if (v5)
    {
      BOOL v4 = 1;
    }
    else
    {
      id v6 = [(HMDHomeManager *)self appleAccountManager];
      id v7 = [v6 device];
      if (v7
        && [(HMDHomeManager *)self deviceAccountHasSettled]
        && [(HMDHomeManager *)self firstCloudKitImportComplete]
        && [(HMDHomeManager *)self hasManatee])
      {
        id v8 = [(HMDHomeManager *)self appleAccountManager];
        id v9 = [v8 accountContext];
        BOOL v4 = v9 == 0;
      }
      else
      {
        BOOL v4 = 1;
      }
    }
  }

  return v4;
}

- (void)postFinishSetupForCurrentAccessoryFollowUpIfNeeded
{
  BOOL v3 = [(HMDHomeManager *)self workQueue];
  dispatch_assert_queue_V2(v3);

  if (isAppleTV())
  {
    if (![(HMDHomeManager *)self startupHasCompleted])
    {
      objc_initWeak(&location, self);
      BOOL v5 = [(HMDHomeManager *)self startupCompleted];
      v9[0] = MEMORY[0x263EF8330];
      v9[1] = 3221225472;
      v9[2] = __68__HMDHomeManager_postFinishSetupForCurrentAccessoryFollowUpIfNeeded__block_invoke;
      v9[3] = &unk_264A2B1B0;
      objc_copyWeak(&v10, &location);
      id v6 = (id)[v5 then:v9];

      objc_destroyWeak(&v10);
      objc_destroyWeak(&location);
      return;
    }
    if (![(HMDHomeManager *)self initialPCSStatusFetchCompleted]) {
      return;
    }
    if ([(HMDHomeManager *)self shouldClearDeviceSetupFollowUp])
    {
      id v8 = +[HMDDeviceSetupManager sharedManager];
      BOOL v4 = [v8 followUpManager];
      [v4 stopAdvertising:1];
    }
    else
    {
      id v7 = [(HMDHomeManager *)self lastRemovedCurrentAccessoryUUID];

      if (v7) {
        return;
      }
      id v8 = +[HMDDeviceSetupManager sharedManager];
      BOOL v4 = [v8 followUpManager];
      [v4 startAdvertising:1];
    }
  }
}

uint64_t __68__HMDHomeManager_postFinishSetupForCurrentAccessoryFollowUpIfNeeded__block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    BOOL v3 = [WeakRetained workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __68__HMDHomeManager_postFinishSetupForCurrentAccessoryFollowUpIfNeeded__block_invoke_2;
    block[3] = &unk_264A2F7F8;
    void block[4] = v2;
    dispatch_async(v3, block);
  }
  return 1;
}

uint64_t __68__HMDHomeManager_postFinishSetupForCurrentAccessoryFollowUpIfNeeded__block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) postFinishSetupForCurrentAccessoryFollowUpIfNeeded];
}

- (void)dataSyncInProgressUpdatedNotification:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __56__HMDHomeManager_dataSyncInProgressUpdatedNotification___block_invoke;
  v7[3] = &unk_264A2F820;
  id v8 = v4;
  id v9 = self;
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t __56__HMDHomeManager_dataSyncInProgressUpdatedNotification___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userInfo];
  int v3 = objc_msgSend(v2, "hmf_BOOLForKey:", @"HMDHH2FirstCKImportFinished");

  if (v3)
  {
    [*(id *)(a1 + 40) hh2FirstCKImportFinished];
    id v4 = [*(id *)(a1 + 40) currentAccessorySetupMetricDispatcher];
    [v4 markSetupEndStage:13 error:0];

    BOOL v5 = +[HMDUser allLastUserSyncDataArchives];
    if ([v5 count])
    {
      id v6 = [[HMDHomeManagerHH2SharedUserLastSyncManager alloc] initWithHomeManager:*(void *)(a1 + 40) archivePaths:v5];
      [*(id *)(a1 + 40) setSharedUserLastSyncManager:v6];

      id v7 = [*(id *)(a1 + 40) sharedUserLastSyncManager];
      [v7 configure];
    }
    [*(id *)(a1 + 40) postFinishSetupForCurrentAccessoryFollowUpIfNeeded];
    [*(id *)(a1 + 40) scheduleAddACWGKeysOperationIfAllowed];
  }
  id v8 = *(void **)(a1 + 40);
  return [v8 _notifyClientsOfUpdatedStatus];
}

- (void)_removePendingDataSyncAcksForUser:(id)a3 forHome:(id)a4
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v6 = (__CFString *)a3;
  id v7 = a4;
  id v8 = [v7 UUIDString];
  id v9 = [(HMDHomeManager *)self pendingDataSyncAcks];
  id v10 = [v9 objectForKeyedSubscript:v8];

  if (v10)
  {
    [v10 removeObject:v6];
    if (![v10 count])
    {
      int v11 = shouldLogPrivateInformation();
      id v12 = @"...";
      if (v11) {
        id v12 = v6;
      }
      id v13 = v12;
      id v14 = (void *)MEMORY[0x230FBD990]();
      id v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        BOOL v16 = HMFGetLogIdentifier();
        id v17 = [v7 UUIDString];
        int v25 = 138543874;
        id v26 = v16;
        __int16 v27 = 2112;
        uint64_t v28 = v13;
        __int16 v29 = 2112;
        BOOL v30 = v17;
        _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_INFO, "%{public}@Removing pending data sync ack for user %@ for data corresponding to home %@", (uint8_t *)&v25, 0x20u);
      }
      id v18 = [(HMDHomeManager *)self pendingDataSyncAcks];
      [v18 removeObjectForKey:v8];
    }
  }
  id v19 = (void *)MEMORY[0x230FBD990]();
  id v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    BOOL v21 = HMFGetLogIdentifier();
    id v22 = [(HMDHomeManager *)self pendingDataSyncAcks];
    int v25 = 138543618;
    id v26 = v21;
    __int16 v27 = 2112;
    uint64_t v28 = v22;
    _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@Remaining pending data sync acks %@", (uint8_t *)&v25, 0x16u);
  }
  id v23 = [(HMDHomeManager *)self pendingDataSyncAcks];
  id v24 = +[HMDPersistentStore archiveIDSDataSyncJournal:v23];
}

- (void)_addPendingDataSyncAcksForUser:(id)a3 forHome:(id)a4
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v6 = (__CFString *)a3;
  id v7 = a4;
  int v8 = shouldLogPrivateInformation();
  id v9 = @"...";
  if (v8) {
    id v9 = v6;
  }
  id v10 = v9;
  int v11 = (void *)MEMORY[0x230FBD990]();
  id v12 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = HMFGetLogIdentifier();
    id v14 = [v7 UUIDString];
    int v21 = 138543874;
    id v22 = v13;
    __int16 v23 = 2112;
    id v24 = v10;
    __int16 v25 = 2112;
    id v26 = v14;
    _os_log_impl(&dword_22F52A000, v12, OS_LOG_TYPE_INFO, "%{public}@Adding pending data sync ack for user %@ for data corresponding to home %@", (uint8_t *)&v21, 0x20u);
  }
  id v15 = [v7 UUIDString];
  BOOL v16 = [(HMDHomeManager *)self pendingDataSyncAcks];
  id v17 = [v16 objectForKeyedSubscript:v15];

  if (!v17)
  {
    id v17 = [MEMORY[0x263EFF9C0] set];
    id v18 = [(HMDHomeManager *)self pendingDataSyncAcks];
    [v18 setObject:v17 forKeyedSubscript:v15];
  }
  [v17 addObject:v6];
  id v19 = [(HMDHomeManager *)self pendingDataSyncAcks];
  id v20 = +[HMDPersistentStore archiveIDSDataSyncJournal:v19];
}

- (void)pushMetadataToAllWatches
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  int v3 = [(HMDHomeManager *)self associatedWatchPeers];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v12 + 1) + 8 * v7);
        id v9 = [(HMDHomeManager *)self associatedWatchPeers];
        id v10 = [v9 objectForKey:v8];
        int v11 = [v10 metadataConfig];
        [(HMDHomeManager *)self checkAndPushMetadataToUser:v8 destination:v8 userInfo:v11];

        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }
}

- (void)_pushMetadataChangesToUsers
{
  v67[1] = *MEMORY[0x263EF8340];
  isWatch();
  id v36 = +[HMDHAPMetadata getSharedInstance];
  if (v36)
  {
    uint64_t v35 = [(HMDHomeManager *)self _getListOfUsersToPushMetadataChangesTo];
    if ([v35 count]
      || ([(HMDHomeManager *)self associatedWatchPeers],
          int v3 = objc_claimAutoreleasedReturnValue(),
          uint64_t v4 = [v3 count],
          v3,
          v4))
    {
      long long v66 = @"kRequestedCapabilitiesKey";
      v64[0] = @"kMetadataInfoVersionKey";
      uint64_t v5 = [v36 version];
      v65[0] = v5;
      v64[1] = @"kMetadataInfoSchemaVersionKey";
      uint64_t v6 = [v36 schemaVersion];
      v65[1] = v6;
      v64[2] = @"kMetadataInfoCompletenessKey";
      uint64_t v7 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v36, "incomplete") ^ 1);
      id v65[2] = v7;
      v64[3] = @"kHomedVersionKey";
      id v8 = (id)homedVersion;
      v65[3] = v8;
      id v9 = [NSDictionary dictionaryWithObjects:v65 forKeys:v64 count:4];
      v67[0] = v9;
      uint64_t v38 = [NSDictionary dictionaryWithObjects:v67 forKeys:&v66 count:1];

      BOOL v60 = @"kDeviceClassTypeKey";
      long long v61 = @"kDeviceClassTypeTransient";
      v62[0] = @"kRequiredCapabilitiesKey";
      id v10 = [NSDictionary dictionaryWithObjects:&v61 forKeys:&v60 count:1];
      v62[1] = @"kRequestedCapabilitiesKey";
      v63[0] = v10;
      v58[0] = @"kMetadataInfoVersionKey";
      int v11 = [v36 version];
      v59[0] = v11;
      v58[1] = @"kMetadataInfoSchemaVersionKey";
      long long v12 = [v36 schemaVersion];
      v59[1] = v12;
      v58[2] = @"kMetadataInfoCompletenessKey";
      long long v13 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v36, "incomplete") ^ 1);
      v59[2] = v13;
      v58[3] = @"kHomedVersionKey";
      id v14 = (id)homedVersion;
      v59[3] = v14;
      long long v15 = [NSDictionary dictionaryWithObjects:v59 forKeys:v58 count:4];
      v63[1] = v15;
      uint64_t v37 = [NSDictionary dictionaryWithObjects:v63 forKeys:v62 count:2];

      objc_initWeak(&location, self);
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      id v16 = v35;
      uint64_t v17 = [v16 countByEnumeratingWithState:&v46 objects:v57 count:16];
      if (v17)
      {
        uint64_t v39 = *(void *)v47;
        do
        {
          uint64_t v40 = v17;
          for (uint64_t i = 0; i != v40; ++i)
          {
            if (*(void *)v47 != v39) {
              objc_enumerationMutation(v16);
            }
            id v19 = *(void **)(*((void *)&v46 + 1) + 8 * i);
            if (objc_msgSend(v16, "hmf_BOOLForKey:", v19))
            {
              id v20 = v19;
              int v21 = v38;
            }
            else
            {
              id v20 = 0;
              int v21 = v37;
            }
            id v22 = v21;
            __int16 v23 = (void *)MEMORY[0x230FBD990]();
            HMFGetOSLogHandle();
            id v24 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              __int16 v25 = HMFGetLogIdentifier();
              *(_DWORD *)long long buf = 138543874;
              uint64_t v52 = v25;
              __int16 v53 = 2112;
              uint64_t v54 = v19;
              __int16 v55 = 2112;
              id v56 = v20;
              _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Preparing for metadata push to user: %@ with destination: %@", buf, 0x20u);
            }
            id v26 = [(HMDHomeManager *)self workQueue];
            v41[0] = MEMORY[0x263EF8330];
            v41[1] = 3221225472;
            v41[2] = __45__HMDHomeManager__pushMetadataChangesToUsers__block_invoke;
            v41[3] = &unk_264A2B188;
            objc_copyWeak(&v45, &location);
            id v27 = v16;
            id v42 = v27;
            long long v43 = v19;
            uint64_t v44 = self;
            [(HMDHomeManager *)self electDeviceForUser:v19 destination:v20 deviceCapabilities:v22 queue:v26 completionHandler:v41];

            objc_destroyWeak(&v45);
          }
          uint64_t v17 = [v27 countByEnumeratingWithState:&v46 objects:v57 count:16];
        }
        while (v17);
      }

      objc_destroyWeak(&location);
    }
    else
    {
      uint64_t v31 = (void *)MEMORY[0x230FBD990]();
      id v32 = self;
      __int16 v33 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        id v34 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543362;
        uint64_t v52 = v34;
        _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@Not pushing metadata changes to anybody as either there are no users or there are no associated watches with this account.", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v28 = (void *)MEMORY[0x230FBD990]();
    __int16 v29 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      BOOL v30 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v52 = v30;
      _os_log_impl(&dword_22F52A000, v29, OS_LOG_TYPE_ERROR, "%{public}@No metadata to push changes to shared users.", buf, 0xCu);
    }
  }
}

void __45__HMDHomeManager__pushMetadataChangesToUsers__block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  int v11 = WeakRetained;
  if (!v7 && WeakRetained && objc_msgSend(*(id *)(a1 + 32), "hmf_BOOLForKey:", *(void *)(a1 + 40)))
  {
    long long v12 = (void *)MEMORY[0x230FBD990]();
    id v13 = *(id *)(a1 + 48);
    id v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      long long v15 = HMFGetLogIdentifier();
      uint64_t v16 = *(void *)(a1 + 40);
      int v21 = 138543618;
      id v22 = v15;
      __int16 v23 = 2112;
      uint64_t v24 = v16;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Pushing metadata changes to shared user: %@", (uint8_t *)&v21, 0x16u);
    }
    uint64_t v19 = a1 + 40;
    uint64_t v17 = *(void *)(a1 + 40);
    id v18 = *(void **)(v19 + 8);
    id v20 = [v8 destination];
    [v18 checkAndPushMetadataToUser:v17 destination:v20 userInfo:v9];
  }
}

- (id)_getListOfUsersToPushMetadataChangesTo
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  int v3 = [MEMORY[0x263F35AD0] systemStore];
  id v41 = 0;
  id v42 = 0;
  [v3 getControllerPublicKey:0 secretKey:0 username:&v42 allowCreation:0 error:&v41];
  id v4 = v42;
  id v27 = v41;

  uint64_t v5 = [MEMORY[0x263EFF9A0] dictionary];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id obj = [(HMDHomeManager *)self homes];
  uint64_t v6 = [obj countByEnumeratingWithState:&v37 objects:v44 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v38;
    uint64_t v9 = MEMORY[0x263EFFA88];
    uint64_t v28 = *(void *)v38;
    id v29 = v4;
    do
    {
      uint64_t v10 = 0;
      uint64_t v30 = v7;
      do
      {
        if (*(void *)v38 != v8) {
          objc_enumerationMutation(obj);
        }
        int v11 = *(void **)(*((void *)&v37 + 1) + 8 * v10);
        long long v12 = objc_msgSend(v11, "ownerName", v27);
        int v13 = [v12 isEqualToString:v4];

        if (v13)
        {
          uint64_t v32 = v10;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          id v14 = [v11 users];
          uint64_t v15 = [v14 countByEnumeratingWithState:&v33 objects:v43 count:16];
          if (!v15) {
            goto LABEL_20;
          }
          uint64_t v16 = v15;
          uint64_t v17 = *(void *)v34;
          while (1)
          {
            for (uint64_t i = 0; i != v16; ++i)
            {
              if (*(void *)v34 != v17) {
                objc_enumerationMutation(v14);
              }
              uint64_t v19 = *(void **)(*((void *)&v33 + 1) + 8 * i);
              id v20 = [v19 userID];

              if (v20)
              {
                if ([v19 isRemoteGateway])
                {
                  int v21 = [v19 userID];
                  id v22 = v5;
                  uint64_t v23 = v9;
                }
                else
                {
                  uint64_t v24 = [v11 currentUser];
                  char v25 = [v19 isEqual:v24];

                  if (v25) {
                    continue;
                  }
                  int v21 = [v19 userID];
                  id v22 = v5;
                  uint64_t v23 = MEMORY[0x263EFFA80];
                }
                [v22 setObject:v23 forKeyedSubscript:v21];
              }
            }
            uint64_t v16 = [v14 countByEnumeratingWithState:&v33 objects:v43 count:16];
            if (!v16)
            {
LABEL_20:

              uint64_t v8 = v28;
              id v4 = v29;
              uint64_t v7 = v30;
              uint64_t v10 = v32;
              break;
            }
          }
        }
        ++v10;
      }
      while (v10 != v7);
      uint64_t v7 = [obj countByEnumeratingWithState:&v37 objects:v44 count:16];
    }
    while (v7);
  }

  return v5;
}

- (void)checkAndPushMetadataToUser:(id)a3 destination:(id)a4 userInfo:(id)a5
{
  v93[1] = *MEMORY[0x263EF8340];
  id v59 = a3;
  id v58 = a4;
  id v8 = a5;
  isWatch();
  uint64_t v9 = +[HMDHAPMetadata getSharedInstance];
  BOOL v60 = objc_msgSend(v8, "hmf_numberForKey:", @"kMetadataInfoVersionKey");
  uint64_t v10 = objc_msgSend(v8, "hmf_numberForKey:", @"kMetadataInfoSchemaVersionKey");
  int v11 = (void *)v10;
  if (!v9 || !v10 || !v60) {
    goto LABEL_30;
  }
  long long v12 = [v9 schemaVersion];
  if ([v12 isEqualToNumber:v11])
  {
    int v13 = [v9 version];
    unint64_t v14 = [v13 unsignedIntegerValue];
    BOOL v15 = v14 > [v60 unsignedIntegerValue];
  }
  else
  {
    BOOL v15 = 0;
  }

  uint64_t v16 = objc_msgSend(v8, "hmf_numberForKey:", @"kMetadataInfoCompletenessKey");
  uint64_t v17 = v16;
  if (!v16)
  {
    [v9 incomplete];
    goto LABEL_17;
  }
  char v18 = [v16 BOOLValue];
  if ([v9 incomplete] & 1) != 0 || (v18)
  {
LABEL_17:

    if (!v15) {
      goto LABEL_30;
    }
    goto LABEL_18;
  }
  uint64_t v19 = [v9 schemaVersion];
  if (([v19 isEqualToNumber:v11] & 1) == 0)
  {

    goto LABEL_17;
  }
  id v20 = [v9 version];
  uint64_t v21 = [v20 unsignedIntegerValue];
  uint64_t v22 = [v60 unsignedIntegerValue];

  if (v21 != v22) {
    goto LABEL_17;
  }
  uint64_t v23 = (void *)MEMORY[0x230FBD990]();
  uint64_t v24 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    char v25 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v75 = v25;
    _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Remote metadata is incomplete, local metadata is complete - sending...", buf, 0xCu);
  }

LABEL_18:
  id v26 = (void *)MEMORY[0x230FBD990]();
  id v27 = self;
  uint64_t v28 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    id v29 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    id v75 = v29;
    _os_log_impl(&dword_22F52A000, v28, OS_LOG_TYPE_DEFAULT, "%{public}@Push metadata changes to the user", buf, 0xCu);
  }
  context = (void *)MEMORY[0x230FBD990]();
  uint64_t v68 = 0;
  long long v69 = &v68;
  uint64_t v70 = 0x3032000000;
  long long v71 = __Block_byref_object_copy__242964;
  uint64_t v72 = __Block_byref_object_dispose__242965;
  id v73 = (id)[objc_alloc(MEMORY[0x263F425C0]) initWithName:@"com.apple.homed.push-metadata"];
  uint64_t v30 = objc_msgSend(v8, "hmf_numberForKey:", @"kHomedVersionKey");
  BOOL v31 = +[HMDHAPMetadata isHomedVersionSupported:](HMDHAPMetadata, "isHomedVersionSupported:");
  uint64_t v32 = (void *)MEMORY[0x230FBD990]();
  if (v31)
  {
    HMFGetOSLogHandle();
    long long v33 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      long long v34 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543874;
      id v75 = v34;
      __int16 v76 = 2112;
      uint64_t v77 = (uint64_t)v59;
      __int16 v78 = 2112;
      id v79 = v30;
      _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@Push metadata dictionary to user %@ as its version %@ is supported.", buf, 0x20u);
    }
    long long v35 = (void *)MEMORY[0x263F08910];
    long long v36 = +[HMDPersistentStore loadPlainMetadataDictionary];
    long long v37 = [v35 archivedDataWithRootObject:v36 requiringSecureCoding:1 error:0];

    long long v57 = objc_msgSend(v37, "hmd_compressedData");

    long long v38 = +[HMDHAPMetadataModel metadataModelObjectUUID];
    long long v39 = [v38 UUIDString];
    v65[0] = MEMORY[0x263EF8330];
    v65[1] = 3221225472;
    id v65[2] = __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke;
    v65[3] = &unk_264A2B138;
    id v66 = v59;
    long long v67 = &v68;
    [(HMDHomeManager *)v27 sendFragmentedMessageForData:v57 objectUUID:v39 withMessageName:@"kMetadataDataSyncRequestKey" toUser:v66 destination:v58 completionHandler:v65];

    long long v40 = v66;
  }
  else
  {
    HMFGetOSLogHandle();
    id v41 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      id v42 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543874;
      id v75 = v42;
      __int16 v76 = 2112;
      uint64_t v77 = (uint64_t)v59;
      __int16 v78 = 2112;
      id v79 = v30;
      _os_log_impl(&dword_22F52A000, v41, OS_LOG_TYPE_INFO, "%{public}@Sending old metadata data to %@ as it is a legacy device %@.", buf, 0x20u);
    }
    long long v57 = +[HMDHAPMetadata legacyV3DataForIDS];
    long long v43 = (void *)MEMORY[0x263F42568];
    uint64_t v92 = @"kHAPMetadataDataKey";
    v93[0] = v57;
    uint64_t v44 = [NSDictionary dictionaryWithObjects:v93 forKeys:&v92 count:1];
    long long v40 = [v43 internalMessageWithName:@"kMetadataDataSyncRequestKey" messagePayload:v44];

    objc_initWeak((id *)buf, v27);
    uint64_t v45 = [(HMDHomeManager *)v27 messageDispatcher];
    long long v46 = [(HMDHomeManager *)v27 uuid];
    long long v47 = [(HMDHomeManager *)v27 workQueue];
    v61[0] = MEMORY[0x263EF8330];
    v61[1] = 3221225472;
    id v61[2] = __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke_603;
    void v61[3] = &unk_264A2B160;
    objc_copyWeak(&v64, (id *)buf);
    id v62 = v59;
    int v63 = &v68;
    [v45 sendSecureMessage:v40 target:v46 userID:v62 destination:v58 responseQueue:v47 responseHandler:v61];

    objc_destroyWeak(&v64);
    objc_destroyWeak((id *)buf);
  }

  long long v48 = (void *)MEMORY[0x230FBD990]();
  HMFGetOSLogHandle();
  long long v49 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v50 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v51 = [v57 length];
    uint64_t v52 = [v9 schemaVersion];
    __int16 v53 = [v9 version];
    uint64_t v54 = v69[5];
    *(_DWORD *)long long buf = 138545410;
    id v75 = v50;
    __int16 v76 = 2048;
    uint64_t v77 = v51;
    __int16 v78 = 2112;
    id v79 = v59;
    __int16 v80 = 2112;
    id v81 = v58;
    __int16 v82 = 2112;
    uint64_t v83 = v52;
    __int16 v84 = 2112;
    uint64_t v85 = v53;
    __int16 v86 = 2112;
    long long v87 = v11;
    __int16 v88 = 2112;
    BOOL v89 = v60;
    __int16 v90 = 2112;
    uint64_t v91 = v54;
    _os_log_impl(&dword_22F52A000, v49, OS_LOG_TYPE_INFO, "%{public}@Pushing metadata(%lu bytes) change to user %@ (%@) - local %@/%@  remote %@/%@ - creating transaction %@", buf, 0x5Cu);
  }

  _Block_object_dispose(&v68, 8);
LABEL_30:
}

void __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseAckKey"))
  {
    uint64_t v7 = (void *)MEMORY[0x230FBD990]();
    id v8 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = HMFGetLogIdentifier();
      uint64_t v10 = *(void *)(a1 + 32);
      int v13 = 138543618;
      unint64_t v14 = v9;
      __int16 v15 = 2112;
      uint64_t v16 = v10;
      _os_log_impl(&dword_22F52A000, v8, OS_LOG_TYPE_INFO, "%{public}@Received sync from user %@ for metadata update", (uint8_t *)&v13, 0x16u);
    }
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = 0;
}

void __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke_603(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained && objc_msgSend(v6, "hmf_BOOLForKey:", @"kDataSyncResponseAckKey"))
  {
    id v8 = (void *)MEMORY[0x230FBD990]();
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = HMFGetLogIdentifier();
      uint64_t v11 = *(void *)(a1 + 32);
      int v14 = 138543618;
      __int16 v15 = v10;
      __int16 v16 = 2112;
      uint64_t v17 = v11;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Received sync from user %@ for metadata update", (uint8_t *)&v14, 0x16u);
    }
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
  int v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = 0;
}

- (void)_pushChangesForHH2SharedUserLastSync:(id)a3 completion:(id)a4
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  id v5 = a3;
  BOOL v60 = (void (**)(id, uint64_t))a4;
  uint64_t v68 = v5;
  id v6 = [v5 homeUUID];
  int v63 = [(HMDHomeManager *)self _homeWithUUID:v6];

  if (v63)
  {
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    id obj = [v63 users];
    uint64_t v7 = [obj countByEnumeratingWithState:&v75 objects:v95 count:16];
    if (v7)
    {
      uint64_t v66 = *(void *)v76;
LABEL_4:
      uint64_t v8 = 0;
      while (1)
      {
        if (*(void *)v76 != v66) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void **)(*((void *)&v75 + 1) + 8 * v8);
        uint64_t v10 = [v9 uuid];
        uint64_t v11 = [v68 user];
        uint64_t v12 = [v11 uuid];
        if ([v10 isEqual:v12]) {
          break;
        }
        int v13 = [v68 user];
        int v14 = [v13 userID];
        __int16 v15 = [v9 userID];
        char v16 = [v14 isEqual:v15];

        if (v16) {
          goto LABEL_16;
        }
        if (v7 == ++v8)
        {
          uint64_t v7 = [obj countByEnumeratingWithState:&v75 objects:v95 count:16];
          if (v7) {
            goto LABEL_4;
          }
          goto LABEL_11;
        }
      }

LABEL_16:
      id v23 = v9;

      if (!v23) {
        goto LABEL_20;
      }
      uint64_t v24 = (void *)MEMORY[0x230FBD990]();
      char v25 = self;
      id v26 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        id v27 = HMFGetLogIdentifier();
        uint64_t v28 = [v68 homeUUID];
        id v29 = [v68 user];
        *(_DWORD *)long long buf = 138543874;
        *(void *)&uint8_t buf[4] = v27;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v28;
        *(_WORD *)&buf[22] = 2112;
        uint64_t v92 = v29;
        _os_log_impl(&dword_22F52A000, v26, OS_LOG_TYPE_INFO, "%{public}@Do not send because user completed invite for home %@ for hh2 last user data sync %@", buf, 0x20u);
      }
      v60[2](v60, 1);
    }
    else
    {
LABEL_11:

LABEL_20:
      context = (void *)MEMORY[0x230FBD990]();
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      uint64_t v92 = __Block_byref_object_copy__242964;
      BOOL v93 = __Block_byref_object_dispose__242965;
      id v94 = (id)[objc_alloc(MEMORY[0x263F425C0]) initWithName:@"com.apple.homed.push-home-to-hh2-last-user-sync"];
      long long v67 = +[HMDHAPMetadata getSharedInstance];
      uint64_t v30 = (void *)MEMORY[0x230FBD990]();
      BOOL v31 = self;
      if (v67)
      {
        HMFGetOSLogHandle();
        id obja = v31;
        uint64_t v32 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          id v33 = (id)objc_claimAutoreleasedReturnValue();
          long long v34 = [v68 homeUUID];
          long long v35 = [v68 user];
          *(_DWORD *)uint64_t v85 = 138543874;
          id v86 = v33;
          __int16 v87 = 2112;
          __int16 v88 = v34;
          __int16 v89 = 2112;
          __int16 v90 = v35;
          _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_INFO, "%{public}@Pushing last sync home data changes to home: %@ and users: %@", v85, 0x20u);
        }
        v83[0] = @"kRequiredCapabilitiesKey";
        v81[0] = @"kDeviceClassTypeKey";
        v81[1] = @"kHomedVersionKey";
        v82[0] = @"kDeviceClassTypeTransient";
        long long v36 = NSNumber;
        [@"10.0" doubleValue];
        id v62 = objc_msgSend(v36, "numberWithDouble:");
        v82[1] = v62;
        long long v37 = [NSDictionary dictionaryWithObjects:v82 forKeys:v81 count:2];
        v83[1] = @"kRequestedCapabilitiesKey";
        v84[0] = v37;
        v79[0] = @"kHomedVersionKey";
        id v38 = (id)homedVersion;
        v80[0] = v38;
        v80[1] = &unk_26E4744D0;
        v79[1] = @"kHomedSupportedFeaturesKey";
        v79[2] = @"kHomeUUID";
        long long v39 = [v63 uuid];
        long long v40 = [v39 UUIDString];
        v80[2] = v40;
        v79[3] = @"kHomeConfigurationVersionKey";
        id v41 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v63, "configurationVersion"));
        v80[3] = v41;
        v79[4] = @"kMetadataInfoVersionKey";
        id v42 = [v67 version];
        v80[4] = v42;
        v79[5] = @"kMetadataInfoSchemaVersionKey";
        long long v43 = [v67 schemaVersion];
        v80[5] = v43;
        v79[6] = @"kMetadataInfoCompletenessKey";
        uint64_t v44 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v67, "incomplete") ^ 1);
        v80[6] = v44;
        uint64_t v45 = [NSDictionary dictionaryWithObjects:v80 forKeys:v79 count:7];
        v84[1] = v45;
        id v58 = [NSDictionary dictionaryWithObjects:v84 forKeys:v83 count:2];

        long long v46 = [v68 user];
        long long v47 = [v46 account];

        if (v47)
        {
          long long v48 = +[HMDIdentityRegistry sharedRegistry];
          long long v49 = [v68 user];
          id v50 = [v49 pairingIdentity];
          uint64_t v51 = [v68 user];
          [v48 registerIdentity:v50 account:v47 object:v51];
        }
        objc_initWeak((id *)v85, obja);
        uint64_t v52 = [v68 user];
        __int16 v53 = [v52 userID];
        uint64_t v54 = [(HMDHomeManager *)obja workQueue];
        v69[0] = MEMORY[0x263EF8330];
        v69[1] = 3221225472;
        v69[2] = __66__HMDHomeManager__pushChangesForHH2SharedUserLastSync_completion___block_invoke;
        v69[3] = &unk_264A2B110;
        objc_copyWeak(&v74, (id *)v85);
        id v70 = v68;
        uint64_t v72 = v60;
        id v73 = buf;
        id v71 = v63;
        [(HMDHomeManager *)obja electDeviceForHH1User:v53 destination:0 deviceCapabilities:v58 queue:v54 completionHandler:v69];

        objc_destroyWeak(&v74);
        objc_destroyWeak((id *)v85);
      }
      else
      {
        HMFGetOSLogHandle();
        __int16 v55 = v31;
        id v56 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        {
          long long v57 = HMFGetLogIdentifier();
          *(_DWORD *)uint64_t v85 = 138543362;
          id v86 = v57;
          _os_log_impl(&dword_22F52A000, v56, OS_LOG_TYPE_ERROR, "%{public}@No metadata to push changes for home", v85, 0xCu);
        }
        v60[2](v60, 0);
      }

      _Block_object_dispose(buf, 8);
    }
  }
  else
  {
    uint64_t v17 = (void *)MEMORY[0x230FBD990]();
    uint64_t v18 = self;
    uint64_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      id v20 = HMFGetLogIdentifier();
      uint64_t v21 = [v68 homeUUID];
      uint64_t v22 = [v68 user];
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v21;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v92 = v22;
      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Do not send because home no longer exists %@ for hh2 last user data sync %@", buf, 0x20u);
    }
    v60[2](v60, 1);
  }
}

void __66__HMDHomeManager__pushChangesForHH2SharedUserLastSync_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v45 = a3;
  id v44 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v9 = WeakRetained;
  long long v43 = v7;
  long long v46 = WeakRetained;
  if (v7 || !WeakRetained)
  {
    char v25 = (void *)MEMORY[0x230FBD990]();
    id v26 = v9;
    id v27 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = HMFGetLogIdentifier();
      id v29 = [*(id *)(a1 + 32) homeUUID];
      uint64_t v30 = [*(id *)(a1 + 32) user];
      *(_DWORD *)long long buf = 138543874;
      __int16 v55 = v28;
      __int16 v56 = 2112;
      uint64_t v57 = (uint64_t)v29;
      __int16 v58 = 2112;
      id v59 = v30;
      _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@Failed to elect a device for last sync to home: %@ and users: %@", buf, 0x20u);
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    uint64_t v31 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v11 = *(void **)(v31 + 40);
    *(void *)(v31 + 40) = 0;
  }
  else
  {
    uint64_t v10 = [*(id *)(a1 + 32) archive];
    uint64_t v11 = (void *)v10;
    if (v10)
    {
      uint64_t v52 = @"kHomeDataKey";
      uint64_t v53 = v10;
      long long v40 = [NSDictionary dictionaryWithObjects:&v53 forKeys:&v52 count:1];
      id v42 = [MEMORY[0x263F42568] internalMessageWithName:@"kHomeDataSyncRequestKey" messagePayload:v40];
      uint64_t v12 = (void *)MEMORY[0x230FBD990]();
      id v41 = v46;
      int v13 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        int v14 = HMFGetLogIdentifier();
        __int16 v15 = [v42 dataForKey:@"kHomeDataKey"];
        uint64_t v16 = [v15 length];
        uint64_t v17 = [*(id *)(a1 + 32) user];
        *(_DWORD *)long long buf = 138543874;
        __int16 v55 = v14;
        __int16 v56 = 2048;
        uint64_t v57 = v16;
        __int16 v58 = 2112;
        id v59 = v17;
        _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_INFO, "%{public}@Pushing last sync home data changes (%ld bytes) to user: %@", buf, 0x20u);
      }
      id v38 = [v42 dataForKey:@"kHomeDataKey"];
      long long v39 = [*(id *)(a1 + 40) uuid];
      uint64_t v18 = [v39 UUIDString];
      uint64_t v19 = [v42 name];
      id v20 = [*(id *)(a1 + 32) user];
      uint64_t v21 = [v20 userID];
      uint64_t v22 = [v45 destination];
      v47[0] = MEMORY[0x263EF8330];
      v47[1] = 3221225472;
      void v47[2] = __66__HMDHomeManager__pushChangesForHH2SharedUserLastSync_completion___block_invoke_597;
      v47[3] = &unk_264A2B0E8;
      objc_copyWeak(&v51, (id *)(a1 + 64));
      id v48 = *(id *)(a1 + 32);
      id v23 = *(id *)(a1 + 48);
      uint64_t v24 = *(void *)(a1 + 56);
      id v49 = v23;
      uint64_t v50 = v24;
      [v41 sendFragmentedMessageForData:v38 objectUUID:v18 withMessageName:v19 toUser:v21 destination:v22 completionHandler:v47];

      objc_destroyWeak(&v51);
    }
    else
    {
      uint64_t v32 = (void *)MEMORY[0x230FBD990]();
      id v33 = v46;
      long long v34 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        long long v35 = HMFGetLogIdentifier();
        long long v36 = [*(id *)(a1 + 32) homeUUID];
        long long v37 = [*(id *)(a1 + 32) user];
        *(_DWORD *)long long buf = 138543874;
        __int16 v55 = v35;
        __int16 v56 = 2112;
        uint64_t v57 = (uint64_t)v36;
        __int16 v58 = 2112;
        id v59 = v37;
        _os_log_impl(&dword_22F52A000, v34, OS_LOG_TYPE_ERROR, "%{public}@Failed to get archive for home %@, user: %@", buf, 0x20u);
      }
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
      uint64_t v11 = 0;
    }
  }
}

void __66__HMDHomeManager__pushChangesForHH2SharedUserLastSync_completion___block_invoke_597(uint64_t a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = WeakRetained;
    uint64_t v10 = HMFGetOSLogHandle();
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if (v5)
    {
      if (v11)
      {
        uint64_t v12 = HMFGetLogIdentifier();
        int v13 = [*(id *)(a1 + 32) homeUUID];
        int v14 = [*(id *)(a1 + 32) user];
        int v20 = 138544130;
        uint64_t v21 = v12;
        __int16 v22 = 2112;
        id v23 = v13;
        __int16 v24 = 2112;
        char v25 = v14;
        __int16 v26 = 2112;
        id v27 = v5;
        _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Failed to push last sync home data changes to home: %@ and users: %@ with error %@", (uint8_t *)&v20, 0x2Au);
      }
    }
    else if (v11)
    {
      __int16 v15 = HMFGetLogIdentifier();
      uint64_t v16 = [*(id *)(a1 + 32) homeUUID];
      uint64_t v17 = [*(id *)(a1 + 32) user];
      int v20 = 138543874;
      uint64_t v21 = v15;
      __int16 v22 = 2112;
      id v23 = v16;
      __int16 v24 = 2112;
      char v25 = v17;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Pushed last sync home data changes to home: %@ and users: %@", (uint8_t *)&v20, 0x20u);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = 0;
}

- (void)pushChangesForHH2SharedUserLastSync:(id)a3 completion:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __65__HMDHomeManager_pushChangesForHH2SharedUserLastSync_completion___block_invoke;
  block[3] = &unk_264A2EE80;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t __65__HMDHomeManager_pushChangesForHH2SharedUserLastSync_completion___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _pushChangesForHH2SharedUserLastSync:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

- (id)_compressHomeData:(id)a3
{
  v9[1] = *MEMORY[0x263EF8340];
  int v3 = [a3 objectForKey:@"kHomeDataKey"];
  id v4 = v3;
  if (v3)
  {
    uint64_t v8 = @"kHomeDataKey";
    id v5 = objc_msgSend(v3, "hmd_compressedData");
    v9[0] = v5;
    id v6 = [NSDictionary dictionaryWithObjects:v9 forKeys:&v8 count:1];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

- (id)generatePayloadFromHome:(id)a3 forAdmin:(BOOL)a4 user:(id)a5 supportedFeatures:(id)a6
{
  BOOL v8 = a4;
  void v40[4] = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a5;
  id v12 = a6;
  id v13 = [(HMDHomeManager *)self primaryHomeUUID];

  unint64_t v14 = 0x263EFF000uLL;
  if (v13)
  {
    v39[0] = @"kAccessoriesDataBlobKey";
    __int16 v15 = [v10 hapAccessoriesForLegacyDataBlobEncoding];
    v40[0] = v15;
    v39[1] = @"kPrimaryHomeUUIDKey";
    uint64_t v16 = [(HMDHomeManager *)self primaryHomeUUID];
    uint64_t v17 = [v16 UUIDString];
    v40[1] = v17;
    v40[2] = v10;
    v39[2] = @"kHomeDataBlobKey";
    v39[3] = @"kHomeDataVersionKey";
    v40[3] = &unk_26E473780;
    uint64_t v18 = [NSDictionary dictionaryWithObjects:v40 forKeys:v39 count:4];
  }
  else
  {
    v37[0] = @"kAccessoriesDataBlobKey";
    __int16 v15 = [v10 hapAccessoriesForLegacyDataBlobEncoding];
    v38[0] = v15;
    v38[1] = v10;
    v37[1] = @"kHomeDataBlobKey";
    void v37[2] = @"kHomeDataVersionKey";
    v38[2] = &unk_26E473780;
    uint64_t v18 = [NSDictionary dictionaryWithObjects:v38 forKeys:v37 count:3];
  }

  uint64_t v19 = (void *)MEMORY[0x230FBD990]();
  int v20 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    uint64_t v21 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    long long v34 = v21;
    __int16 v35 = 2112;
    id v36 = v11;
    _os_log_impl(&dword_22F52A000, v20, OS_LOG_TYPE_INFO, "%{public}@generatePayloadFromHome: %@", buf, 0x16u);
  }
  if (v8)
  {
    id v22 = v18;
    id v23 = v11;
    id v24 = v12;
    uint64_t v25 = MEMORY[0x230FBD990]();
    id v26 = [[HMDRemoteKeyedArchiver alloc] initForWritingWithRemoteDeviceIsOnSameAccount:0 remoteGateway:0 remoteUserIsAdministrator:1 user:v23 supportedFeatures:v24];
    [v26 encodeObject:v22 forKey:*MEMORY[0x263F081D0]];
    [v26 finishEncoding];
    id v27 = [v26 encodedData];

    uint64_t v28 = (void *)v25;
    unint64_t v14 = 0x263EFF000;
  }
  else
  {
    id v27 = encodeRootObjectForRemote(v18, v11, v12);
  }
  uint64_t v31 = @"kHomeDataKey";
  uint64_t v32 = v27;
  id v29 = [*(id *)(v14 + 2352) dictionaryWithObjects:&v32 forKeys:&v31 count:1];

  return v29;
}

- (id)generateDataForSharedHomeModel:(id)a3
{
  v9[3] = *MEMORY[0x263EF8340];
  v8[0] = @"kAccessoriesDataBlobKey";
  id v3 = a3;
  id v4 = [v3 hapAccessoriesForLegacyDataBlobEncoding];
  v9[0] = v4;
  v9[1] = v3;
  v8[1] = @"kHomeDataBlobKey";
  void v8[2] = @"kHomeDataVersionKey";
  void v9[2] = &unk_26E473780;
  id v5 = [NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:3];

  id v6 = encodeRootObjectForRemoteDeviceOnSameAccountMigrateToHH2(v5, 1, 0);

  return v6;
}

- (id)_prepareDataForDevicesOnSameAccountForHome:(id)a3 remoteGateway:(BOOL)a4 isAtLeastV4:(BOOL)a5 migrateToHH2:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v7 = a5;
  BOOL v8 = a4;
  v25[1] = *MEMORY[0x263EF8340];
  id v10 = (void *)MEMORY[0x263EFF9A0];
  id v11 = a3;
  id v12 = [v10 dictionary];
  id v13 = [v11 hapAccessoriesForLegacyDataBlobEncoding];
  [v12 setObject:v13 forKeyedSubscript:@"kAccessoriesDataBlobKey"];

  [v12 setObject:v11 forKeyedSubscript:@"kHomeDataBlobKey"];
  [v12 setObject:&unk_26E473780 forKeyedSubscript:@"kHomeDataVersionKey"];
  unint64_t v14 = [(HMDHomeManager *)self primaryHomeUUID];
  __int16 v15 = [v14 UUIDString];
  [v12 setObject:v15 forKeyedSubscript:@"kPrimaryHomeUUIDKey"];

  uint64_t v16 = (void *)[v12 copy];
  uint64_t v17 = v16;
  if (v8)
  {
    id v18 = v16;
    uint64_t v19 = (void *)MEMORY[0x230FBD990]();
    id v20 = [[HMDRemoteKeyedArchiver alloc] initForWritingWithRemoteDeviceIsOnSameAccount:1 remoteGateway:1 remoteUserIsAdministrator:0 user:0 supportedFeatures:0];
    [v20 encodeObject:v18 forKey:*MEMORY[0x263F081D0]];
    [v20 finishEncoding];
    uint64_t v21 = [v20 encodedData];
  }
  else
  {
    uint64_t v21 = encodeRootObjectForRemoteDeviceOnSameAccountMigrateToHH2(v16, v7, v6);
  }

  id v24 = @"kHomeDataKey";
  v25[0] = v21;
  id v22 = [NSDictionary dictionaryWithObjects:v25 forKeys:&v24 count:1];

  return v22;
}

- (id)_prepareDataForDevicesOnSameAccountForHome:(id)a3 remoteGateway:(BOOL)a4 isAtLeastV4:(BOOL)a5
{
  return [(HMDHomeManager *)self _prepareDataForDevicesOnSameAccountForHome:a3 remoteGateway:a4 isAtLeastV4:a5 migrateToHH2:0];
}

- (unsigned)_nextTransactionIdentifier
{
  unsigned __int16 nextRequestTransactionIdentifier = self->_nextRequestTransactionIdentifier;
  self->_unsigned __int16 nextRequestTransactionIdentifier = nextRequestTransactionIdentifier + 1;
  return nextRequestTransactionIdentifier;
}

- (void)_pushUserRemovedForHome:(id)a3
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [v4 removedUsers];
  BOOL v6 = (void *)[v5 copy];

  BOOL v7 = (void *)MEMORY[0x230FBD990]();
  BOOL v8 = self;
  id v9 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    id v10 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    long long v40 = v10;
    __int16 v41 = 2112;
    id v42 = v6;
    _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_INFO, "%{public}@Attempting to resend remove message to removed users: %@", buf, 0x16u);
  }
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id obj = v6;
  uint64_t v11 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v35;
    id v29 = v32;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v35 != v12) {
          objc_enumerationMutation(obj);
        }
        unint64_t v14 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        if (objc_msgSend(v14, "isExpired", v29))
        {
          __int16 v15 = (void *)MEMORY[0x230FBD990]();
          uint64_t v16 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            uint64_t v17 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            long long v40 = v17;
            __int16 v41 = 2112;
            id v42 = v14;
            _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_INFO, "%{public}@Removed user has expired: %@", buf, 0x16u);
          }
          id v18 = [v4 removedUsers];
          [v18 removeObject:v14];
        }
        else if ([v14 isRemovalInProgress])
        {
          uint64_t v19 = (void *)MEMORY[0x230FBD990]();
          id v20 = v8;
          uint64_t v21 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            id v22 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            long long v40 = v22;
            __int16 v41 = 2112;
            id v42 = v14;
            _os_log_impl(&dword_22F52A000, v21, OS_LOG_TYPE_INFO, "%{public}@Skipping resending message to user whose removal is already in progress: %@", buf, 0x16u);
          }
        }
        else
        {
          id v23 = (void *)MEMORY[0x230FBD990]([v14 setRemovalInProgress:1]);
          id v24 = HMFGetOSLogHandle();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            uint64_t v25 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            long long v40 = v25;
            __int16 v41 = 2112;
            id v42 = v14;
            _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_INFO, "%{public}@Resending message to removed user: %@", buf, 0x16u);
          }
          objc_initWeak((id *)buf, v4);
          id v26 = [v14 user];
          id v27 = [v14 user];
          uint64_t v28 = [v27 pairingUsername];
          v31[0] = MEMORY[0x263EF8330];
          v31[1] = 3221225472;
          v32[0] = __42__HMDHomeManager__pushUserRemovedForHome___block_invoke;
          v32[1] = &unk_264A2E890;
          void v32[2] = v14;
          objc_copyWeak(&v33, (id *)buf);
          void v32[3] = v8;
          [(HMDHomeManager *)v8 sendUserRemoved:v26 fromHome:v4 pairingUsername:v28 pushToCloud:0 completionHandler:v31];

          objc_destroyWeak(&v33);
          objc_destroyWeak((id *)buf);
        }
      }
      uint64_t v11 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
    }
    while (v11);
  }
}

void __42__HMDHomeManager__pushUserRemovedForHome___block_invoke(id *a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  [a1[4] setRemovalInProgress:0];
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (!WeakRetained)
  {
    id v18 = (void *)MEMORY[0x230FBD990]();
    id v19 = a1[5];
    id v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = HMFGetLogIdentifier();
      int v25 = 138543362;
      id v26 = v21;
      id v22 = "%{public}@Lost reference to home during removed user removal message";
      id v23 = v20;
      uint32_t v24 = 12;
LABEL_15:
      _os_log_impl(&dword_22F52A000, v23, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v25, v24);
    }
LABEL_16:

    goto LABEL_17;
  }
  if (v5 && [v5 code] != 2)
  {
    id v18 = (void *)MEMORY[0x230FBD990]();
    id v19 = a1[5];
    id v20 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = HMFGetLogIdentifier();
      int v25 = 138543618;
      id v26 = v21;
      __int16 v27 = 2112;
      id v28 = v5;
      id v22 = "%{public}@Unable to remove the removed user: %@";
      id v23 = v20;
      uint32_t v24 = 22;
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  if ([v5 code] == 2)
  {
    BOOL v8 = (void *)MEMORY[0x230FBD990]();
    id v9 = a1[5];
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      int v25 = 138543618;
      id v26 = v11;
      __int16 v27 = 2112;
      id v28 = v5;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Treating user removed message error as success: %@", (uint8_t *)&v25, 0x16u);
    }
  }
  uint64_t v12 = (void *)MEMORY[0x230FBD990]();
  id v13 = a1[5];
  unint64_t v14 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    __int16 v15 = HMFGetLogIdentifier();
    id v16 = a1[4];
    int v25 = 138543618;
    id v26 = v15;
    __int16 v27 = 2112;
    id v28 = v16;
    _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_INFO, "%{public}@Successfully removed the removed user: %@", (uint8_t *)&v25, 0x16u);
  }
  uint64_t v17 = [WeakRetained removedUsers];
  [v17 removeObject:a1[4]];

LABEL_17:
}

- (id)_userPushCachedGetDeviceForUser:(id)a3
{
  id v4 = a3;
  id v5 = [v4 uuid];

  if (!v5)
  {
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  id v6 = [(HMDHomeManager *)self userPushCacheMap];
  BOOL v7 = [v4 uuid];
  BOOL v8 = [v6 objectForKeyedSubscript:v7];

  if (v8)
  {
    if (![v8 isExpired])
    {
      uint64_t v11 = [v8 device];
      goto LABEL_8;
    }
    id v9 = [(HMDHomeManager *)self userPushCacheMap];
    id v10 = [v4 uuid];
    [v9 setObject:0 forKeyedSubscript:v10];
  }
  uint64_t v11 = 0;
LABEL_8:

LABEL_9:
  return v11;
}

- (void)_updateUserPushCachedForUser:(id)a3 device:(id)a4
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = [v6 uuid];

  if (v7 && v8)
  {
    id v9 = (void *)MEMORY[0x230FBD990]();
    id v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      uint64_t v12 = [v6 userID];
      int v16 = 138543874;
      uint64_t v17 = v11;
      __int16 v18 = 2112;
      id v19 = v12;
      __int16 v20 = 2112;
      id v21 = v7;
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Caching destination device for %@ to %@", (uint8_t *)&v16, 0x20u);
    }
    id v13 = [[HMDUserPushCache alloc] initWithDevice:v7];
    unint64_t v14 = [(HMDHomeManager *)self userPushCacheMap];
    __int16 v15 = [v6 uuid];
    [v14 setObject:v13 forKeyedSubscript:v15];
  }
}

- (void)updateUserPushCachedForUser:(id)a3 device:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = [(HMDHomeManager *)self workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __53__HMDHomeManager_updateUserPushCachedForUser_device___block_invoke;
  block[3] = &unk_264A2F2F8;
  void block[4] = self;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t __53__HMDHomeManager_updateUserPushCachedForUser_device___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateUserPushCachedForUser:*(void *)(a1 + 40) device:*(void *)(a1 + 48)];
}

- (int64_t)numberOfAccessoryWithNewFirmwareAvailable
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = [(HMDHomeManager *)self homes];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    int64_t v5 = 0;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v2);
        }
        BOOL v8 = [*(id *)(*((void *)&v10 + 1) + 8 * i) namesOfServicesWithNewFirmwareAvailableInHome];
        v5 += [v8 count];
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
  else
  {
    int64_t v5 = 0;
  }

  return v5;
}

- (id)_dataForPersistentStoreIncrementingGeneration:(BOOL)a3 reason:(id)a4
{
  return 0;
}

- (BOOL)_removeLegacyHomeArchive:(id *)a3
{
  return +[HMDPersistentStore removeLegacyHomeArchive:a3];
}

- (BOOL)hasHAPAccessoryInAnyHome
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = [(HMDHomeManager *)self homes];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = [*(id *)(*((void *)&v9 + 1) + 8 * i) hapAccessories];
        uint64_t v7 = [v6 count];

        if (v7)
        {
          LOBYTE(v3) = 1;
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v3;
}

- (id)pairedAccessories
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = [MEMORY[0x263EFF980] array];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v4 = [(HMDHomeManager *)self homes];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        long long v9 = [*(id *)(*((void *)&v11 + 1) + 8 * i) accessories];
        [v3 addObjectsFromArray:v9];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }

  return v3;
}

- (id)accessoriesMatchingIdentifier:(id)a3
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = [MEMORY[0x263EFF980] array];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id obj = [(HMDHomeManager *)self homes];
    uint64_t v19 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
    if (v19)
    {
      uint64_t v18 = *(void *)v25;
      do
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          if (*(void *)v25 != v18) {
            objc_enumerationMutation(obj);
          }
          uint64_t v7 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          long long v20 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          BOOL v8 = [v7 accessories];
          uint64_t v9 = [v8 countByEnumeratingWithState:&v20 objects:v28 count:16];
          if (v9)
          {
            uint64_t v10 = v9;
            uint64_t v11 = *(void *)v21;
            do
            {
              for (uint64_t j = 0; j != v10; ++j)
              {
                if (*(void *)v21 != v11) {
                  objc_enumerationMutation(v8);
                }
                long long v13 = *(void **)(*((void *)&v20 + 1) + 8 * j);
                long long v14 = [v13 identifier];
                int v15 = [v4 isEqual:v14];

                if (v15) {
                  [v5 addObject:v13];
                }
              }
              uint64_t v10 = [v8 countByEnumeratingWithState:&v20 objects:v28 count:16];
            }
            while (v10);
          }
        }
        uint64_t v19 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
      }
      while (v19);
    }
  }
  else
  {
    uint64_t v5 = (void *)MEMORY[0x263EFFA68];
  }

  return v5;
}

- (BOOL)isActive
{
  id v2 = [(HMDHomeManager *)self connectionsManager];
  char v3 = [v2 hasActiveConnections];

  return v3;
}

- (BOOL)badCDPState
{
  id v2 = +[HMDCoreDataCloudTransform sharedInstance];
  char v3 = [v2 badCDPState];

  return v3;
}

- (void)accountAvailabilityChanged:(id)a3
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  uint64_t v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    BOOL v8 = HMFGetLogIdentifier();
    uint64_t v9 = [v4 name];
    int v10 = 138543618;
    uint64_t v11 = v8;
    __int16 v12 = 2114;
    long long v13 = v9;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Received account availability changed notification: %{public}@", (uint8_t *)&v10, 0x16u);
  }
  [(HMDHomeManager *)v6 fetchAndUpdatePCSStatus];
}

- (void)fetchAndUpdatePCSStatus
{
  char v3 = getCKContainer();
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  v4[2] = __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke;
  v4[3] = &unk_264A2B0B8;
  void v4[4] = self;
  [v3 accountInfoWithCompletionHandler:v4];
}

void __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) workQueue];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke_2;
  block[3] = &unk_264A2F2F8;
  void block[4] = *(void *)(a1 + 32);
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, block);
}

void __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke_2(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) initialPCSStatusFetchCompleted];
  if ((v2 & 1) == 0) {
    uint64_t v2 = [*(id *)(a1 + 32) setInitialPCSStatusFetchCompleted:1];
  }
  if (*(void *)(a1 + 40))
  {
    int v3 = [*(id *)(a1 + 32) pcsEnabled];
    objc_msgSend(*(id *)(a1 + 32), "setPcsEnabled:", ((unint64_t)objc_msgSend(*(id *)(a1 + 40), "deviceToDeviceEncryptionAvailability") >> 1) & 1);
    if ([*(id *)(a1 + 32) pcsEnabled])
    {
      id v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
      if (os_signpost_enabled(v4))
      {
        LOWORD(v17) = 0;
        _os_signpost_emit_with_name_impl(&dword_22F52A000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ManateeAvailable", "", (uint8_t *)&v17, 2u);
      }
    }
    id v5 = (void *)MEMORY[0x230FBD990]();
    id v6 = *(id *)(a1 + 32);
    uint64_t v7 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = HMFGetLogIdentifier();
      int v9 = [*(id *)(a1 + 32) pcsEnabled];
      int v10 = @"Disabled";
      if (v9) {
        id v11 = @"Enabled";
      }
      else {
        id v11 = @"Disabled";
      }
      int v17 = 138543874;
      uint64_t v18 = v8;
      long long v20 = v11;
      __int16 v19 = 2112;
      if (v3) {
        int v10 = @"Enabled";
      }
      __int16 v21 = 2112;
      long long v22 = v10;
      _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@Current PCS status: %@, Old PCS Status: %@", (uint8_t *)&v17, 0x20u);
    }
    if (v3 != [*(id *)(a1 + 32) pcsEnabled])
    {
      logAndPostNotification(@"HMDHomeManagerPCSStatusChangedNotification", *(void **)(a1 + 32), 0);
      [*(id *)(a1 + 32) pcsEnabledDidChange];
      [*(id *)(a1 + 32) postFinishSetupForCurrentAccessoryFollowUpIfNeeded];
    }
  }
  else
  {
    id v12 = (void *)MEMORY[0x230FBD990](v2);
    id v13 = *(id *)(a1 + 32);
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v15 = HMFGetLogIdentifier();
      uint64_t v16 = *(__CFString **)(a1 + 48);
      int v17 = 138543618;
      uint64_t v18 = v15;
      __int16 v19 = 2112;
      long long v20 = v16;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch account info: %@", (uint8_t *)&v17, 0x16u);
    }
  }
}

- (void)startWithCompletionHandler:(id)a3
{
  id v4 = a3;
  id v5 = [(HMDHomeManager *)self workQueue];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __45__HMDHomeManager_startWithCompletionHandler___block_invoke;
  v7[3] = &unk_264A2F870;
  void v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void __45__HMDHomeManager_startWithCompletionHandler___block_invoke(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 32) appleAccountManager];
  int v3 = [v2 device];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) capabilitiesController];
    uint64_t v5 = [v4 currentResidentCapabilities];
    if (v5)
    {
      id v6 = (void *)v5;
      uint64_t v7 = [*(id *)(a1 + 32) residentEnabledState];

      if (!v7)
      {
        id v8 = [v3 productInfo];
        uint64_t v9 = [v8 productClass];

        if (v9 == 3)
        {
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          int v10 = objc_msgSend(*(id *)(a1 + 32), "homes", 0);
          uint64_t v11 = [v10 countByEnumeratingWithState:&v26 objects:v32 count:16];
          if (v11)
          {
            uint64_t v12 = *(void *)v27;
            while (2)
            {
              for (uint64_t i = 0; i != v11; ++i)
              {
                if (*(void *)v27 != v12) {
                  objc_enumerationMutation(v10);
                }
                uint64_t v14 = *(void **)(*((void *)&v26 + 1) + 8 * i);
                if ([v14 isOwnerUser])
                {
                  int v15 = [v14 residentCapableDevices];
                  int v16 = [v15 containsObject:v3];

                  if (v16)
                  {
                    int v17 = (void *)MEMORY[0x230FBD990]();
                    id v18 = *(id *)(a1 + 32);
                    __int16 v19 = HMFGetOSLogHandle();
                    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
                    {
                      long long v20 = HMFGetLogIdentifier();
                      *(_DWORD *)long long buf = 138543362;
                      uint64_t v31 = v20;
                      _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_INFO, "%{public}@Found ourselves as a resident in one or more homes, enabling ourselves as a resident device", buf, 0xCu);
                    }
                    uint64_t v11 = 1;
                    goto LABEL_20;
                  }
                }
              }
              uint64_t v11 = [v10 countByEnumeratingWithState:&v26 objects:v32 count:16];
              if (v11) {
                continue;
              }
              break;
            }
          }
LABEL_20:
        }
        else
        {
          uint64_t v11 = 1;
        }
        [*(id *)(a1 + 32) _updateResidentEnabledOnThisDevice:v11 forceNotify:0 message:0];
      }
    }
    else
    {
    }
  }
  __int16 v21 = *(void **)(a1 + 32);
  if (v21[39])
  {
    long long v22 = [v21 notificationCenter];
    [v22 addObserver:*(void *)(a1 + 32) selector:sel___handleCompanionUpdated_ name:@"HMDCompanionManagerUpdatedCompanionNotification" object:*(void *)(*(void *)(a1 + 32) + 312)];

    [*(id *)(a1 + 32) _checkAndInformCompanionDevice];
    __int16 v21 = *(void **)(a1 + 32);
  }
  uint64_t v23 = [v21 chipXPCListener];
  [v23 start];

  long long v24 = [*(id *)(a1 + 32) matterXPCListener];
  [v24 start];

  uint64_t v25 = *(void *)(a1 + 40);
  if (v25) {
    (*(void (**)(void))(v25 + 16))();
  }
}

- (id)accessoryWithIDSIdentifier:(id)a3
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v5 = [(HMDHomeManager *)self homes];
  uint64_t v20 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v20)
  {
    uint64_t v6 = *(void *)v26;
    uint64_t v19 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v26 != v6) {
          objc_enumerationMutation(v5);
        }
        id v8 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        uint64_t v9 = objc_msgSend(v8, "appleMediaAccessories", v19);
        uint64_t v10 = [v9 countByEnumeratingWithState:&v21 objects:v29 count:16];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)v22;
          while (2)
          {
            for (uint64_t j = 0; j != v11; ++j)
            {
              if (*(void *)v22 != v12) {
                objc_enumerationMutation(v9);
              }
              uint64_t v14 = *(void **)(*((void *)&v21 + 1) + 8 * j);
              int v15 = [v14 idsIdentifier];
              char v16 = objc_msgSend(v15, "hmf_isEqualToUUID:", v4);

              if (v16)
              {
                id v17 = v14;

                goto LABEL_19;
              }
            }
            uint64_t v11 = [v9 countByEnumeratingWithState:&v21 objects:v29 count:16];
            if (v11) {
              continue;
            }
            break;
          }
        }

        uint64_t v6 = v19;
      }
      id v17 = 0;
      uint64_t v20 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
    }
    while (v20);
  }
  else
  {
    id v17 = 0;
  }
LABEL_19:

  return v17;
}

- (id)accessoryWithUUID:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v5 = [(HMDHomeManager *)self homes];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = [*(id *)(*((void *)&v13 + 1) + 8 * i) accessoryWithUUID:v4];
        if (v10)
        {
          uint64_t v11 = (void *)v10;
          goto LABEL_11;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  uint64_t v11 = 0;
LABEL_11:

  return v11;
}

- (void)_updateHomesDiscoveredBonjourServicesMetrics
{
  v27[2] = *MEMORY[0x263EF8340];
  if (!isWatch())
  {
    int v3 = [(HMDHomeManager *)self bonjourBrowser];

    if (!v3)
    {
      id v4 = [HMDBonjourBrowserHelper alloc];
      v27[0] = @"_sleep-proxy._udp.";
      v27[1] = @"_meshcop._udp.";
      uint64_t v5 = [MEMORY[0x263EFF8C0] arrayWithObjects:v27 count:2];
      uint64_t v6 = [(HMDHomeManager *)self workQueue];
      uint64_t v7 = [(HMDBonjourBrowserHelper *)v4 initWithServicesOfTypes:v5 browsingTimeInterval:v6 browsingPeriodicity:20.0 workQueue:0.0];
      [(HMDHomeManager *)self setBonjourBrowser:v7];
    }
  }
  uint64_t v8 = [(HMDHomeManager *)self bonjourBrowser];
  if (v8)
  {
    uint64_t v9 = [(HMDHomeManager *)self homes];
    if ([v9 count])
    {
      uint64_t v10 = [(HMDHomeManager *)self bonjourBrowser];
      char v11 = [v10 isStarted];

      if ((v11 & 1) == 0)
      {
        uint64_t v12 = [(HMDHomeManager *)self bonjourBrowserHelperLastCompletionDate];

        if (!v12) {
          goto LABEL_9;
        }
        long long v13 = [MEMORY[0x263EFF910] date];
        long long v14 = [(HMDHomeManager *)self bonjourBrowserHelperLastCompletionDate];
        [v13 timeIntervalSinceDate:v14];
        double v16 = v15;

        id v17 = [MEMORY[0x263F42608] sharedPreferences];
        uint64_t v18 = [v17 preferenceForKey:@"hapBonjourBrowserHelperPeriod"];
        uint64_t v19 = [v18 numberValue];
        [v19 doubleValue];
        double v21 = v20;

        if (v16 >= v21)
        {
LABEL_9:
          objc_initWeak(&location, self);
          long long v22 = [(HMDHomeManager *)self bonjourBrowser];
          v24[0] = MEMORY[0x263EF8330];
          v24[1] = 3221225472;
          void v24[2] = __62__HMDHomeManager__updateHomesDiscoveredBonjourServicesMetrics__block_invoke;
          v24[3] = &unk_264A2DE60;
          objc_copyWeak(&v25, &location);
          [v22 startWithBrowsingCompletion:v24];

          long long v23 = [MEMORY[0x263EFF910] date];
          [(HMDHomeManager *)self setBonjourBrowserHelperLastCompletionDate:v23];

          objc_destroyWeak(&v25);
          objc_destroyWeak(&location);
        }
      }
    }
    else
    {
    }
  }
}

void __62__HMDHomeManager__updateHomesDiscoveredBonjourServicesMetrics__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (!a2)
  {
    uint64_t v5 = NSNumber;
    uint64_t v6 = [WeakRetained bonjourBrowser];
    uint64_t v7 = objc_msgSend(v5, "numberWithUnsignedInteger:", objc_msgSend(v6, "discoveredServicesCountForServiceType:", @"_meshcop._udp."));

    uint64_t v8 = NSNumber;
    uint64_t v9 = [v4 bonjourBrowser];
    uint64_t v10 = objc_msgSend(v8, "numberWithUnsignedInteger:", objc_msgSend(v9, "discoveredServicesCountForServiceType:", @"_sleep-proxy._udp."));

    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    char v11 = objc_msgSend(v4, "homes", 0);
    uint64_t v12 = [v11 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v19 != v14) {
            objc_enumerationMutation(v11);
          }
          double v16 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          if ([v16 homeLocation] == 1)
          {
            [v16 setAvailableBorderRouters:v7];
            [v16 setAvailableBSPsCount:v10];
          }
        }
        uint64_t v13 = [v11 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v13);
    }
  }
  id v17 = [v4 bonjourBrowser];
  [v17 stop];
}

- (void)_monitorMemoryUsage
{
  id v2 = [(HMDHomeManager *)self memoryTracker];
  [v2 trackMemoryUsageWithReason:1];
}

- (void)_auditIDSSentInvitations
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v3 = [MEMORY[0x263EFF9C0] set];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v18 = self;
  id v4 = [(HMDHomeManager *)self homes];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v23 objects:v28 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v24;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v24 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v23 + 1) + 8 * v8);
        long long v19 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        uint64_t v10 = [v9 outgoingInvitations];
        uint64_t v11 = [v10 countByEnumeratingWithState:&v19 objects:v27 count:16];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = *(void *)v20;
          do
          {
            uint64_t v14 = 0;
            do
            {
              if (*(void *)v20 != v13) {
                objc_enumerationMutation(v10);
              }
              double v15 = [*(id *)(*((void *)&v19 + 1) + 8 * v14) idsInvitationUUID];
              if (v15) {
                [v3 addObject:v15];
              }

              ++v14;
            }
            while (v12 != v14);
            uint64_t v12 = [v10 countByEnumeratingWithState:&v19 objects:v27 count:16];
          }
          while (v12);
        }

        ++v8;
      }
      while (v8 != v6);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v23 objects:v28 count:16];
    }
    while (v6);
  }

  double v16 = [(HMDHomeManager *)v18 idsInvitationManager];
  id v17 = (void *)[v3 copy];
  [v16 auditIDSSentInvitationsUsingCurrentInvitationUUIDs:v17];
}

- (void)scheduleAddACWGKeysOperationIfAllowed
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  int v3 = isThisDeviceDesignatedFMFDevice();
  id v4 = [MEMORY[0x263F42530] internalOnlyInitializer];
  uint64_t v5 = (void *)MEMORY[0x230FBD990]();
  uint64_t v6 = self;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    uint64_t v8 = v24 = v5;
    uint64_t v9 = [v4 UUID];
    _os_feature_enabled_impl();
    HMFBooleanToString();
    uint64_t v10 = v25 = v4;
    [(HMDHomeManager *)v6 isFirstCloudImportComplete];
    uint64_t v11 = HMFBooleanToString();
    [(HMDHomeManager *)v6 hasFinishedStartingUp];
    uint64_t v12 = HMFBooleanToString();
    uint64_t v13 = HMFBooleanToString();
    [(HMDHomeManager *)v6 didCreateAddACWGKeysOperation];
    uint64_t v14 = HMFBooleanToString();
    *(_DWORD *)long long buf = 138544898;
    long long v27 = v8;
    __int16 v28 = 2112;
    uint64_t v29 = v9;
    __int16 v30 = 2112;
    uint64_t v31 = v10;
    __int16 v32 = 2112;
    uint64_t v33 = v11;
    __int16 v34 = 2112;
    long long v35 = v12;
    __int16 v36 = 2112;
    long long v37 = v13;
    __int16 v38 = 2112;
    long long v39 = v14;
    _os_log_impl(&dword_22F52A000, v7, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] scheduleAddACWGKeysOperationIfAllowed with HM_FEATURE_UWB_ENABLED: %@, isFirstCloudImportComplete: %@, hasFinishedStartingUp: %@, isFMFDevice: %@, didCreateAddACWGKeysOperation: %@", buf, 0x48u);

    id v4 = v25;
    uint64_t v5 = v24;
  }

  if (_os_feature_enabled_impl()
    && [(HMDHomeManager *)v6 isFirstCloudImportComplete]
    && ([(HMDHomeManager *)v6 hasFinishedStartingUp] & v3) == 1
    && ![(HMDHomeManager *)v6 didCreateAddACWGKeysOperation])
  {
    double v15 = (void *)MEMORY[0x230FBD990]();
    double v16 = v6;
    id v17 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      long long v18 = HMFGetLogIdentifier();
      long long v19 = [v4 UUID];
      *(_DWORD *)long long buf = 138543618;
      long long v27 = v18;
      __int16 v28 = 2112;
      uint64_t v29 = v19;
      _os_log_impl(&dword_22F52A000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Creating addACWGKeysOperation", buf, 0x16u);
    }
    long long v20 = [_TtC13HomeKitDaemon35AddACWGKeysToExistingHomesOperation alloc];
    long long v21 = [(HMDBackgroundOperation *)v20 initWithUserData:MEMORY[0x263EFFA78]];
    [(AddACWGKeysToExistingHomesOperation *)v21 setFlow:v4];
    long long v22 = [(HMDHomeManager *)v16 bgOpsManager];
    [v22 addOperation:v21];

    long long v23 = [(HMDHomeManager *)v16 bgOpsManager];
    [v23 evaluateOperations];

    [(HMDHomeManager *)v16 setDidCreateAddACWGKeysOperation:1];
  }
}

- (void)_loadMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 uncommittedTransactions:(id)a10 backingStoreFactory:(id)a11 reloadData:(BOOL)a12
{
  v457[1] = *MEMORY[0x263EF8340];
  id v426 = a3;
  id v422 = a4;
  id v418 = a5;
  id v425 = a6;
  id v417 = a8;
  id v18 = a9;
  id v423 = a10;
  v419 = (void (**)(id, HMDHomeManager *, id *))a11;
  v420 = v18;
  long long v19 = &OBJC_IVAR___HMDResidentDeviceManagerRoarV3__backingStore;
  long long v20 = &OBJC_IVAR___HMDResidentDeviceManagerRoarV3__backingStore;
  uint64_t v21 = 0x263EFF000;
  if (a12) {
    goto LABEL_35;
  }
  long long v22 = [[HMDSyncOperationManager alloc] initWithClientQueue:self->_workQueue dataSource:self];
  syncManager = self->_syncManager;
  self->_syncManager = v22;

  long long v24 = [[HMDCloudAccount alloc] initWithClientQueue:self->_workQueue];
  cloudAccount = self->_cloudAccount;
  self->_cloudAccount = v24;

  long long v26 = [MEMORY[0x263EFF9A0] dictionary];
  userPushCacheMap = self->_userPushCacheMap;
  self->_userPushCacheMap = v26;

  __int16 v28 = (HMFTimer *)[objc_alloc(MEMORY[0x263F42658]) initWithTimeInterval:0 options:10.0];
  watchPushDelayTimer = self->_watchPushDelayTimer;
  self->_watchPushDelayTimer = v28;

  [(HMFTimer *)self->_watchPushDelayTimer setDelegate:self];
  __int16 v30 = self->_watchPushDelayTimer;
  uint64_t v31 = [(HMDHomeManager *)self workQueue];
  [(HMFTimer *)v30 setDelegateQueue:v31];

  p_messageDispatcher = &self->_messageDispatcher;
  objc_storeStrong((id *)&self->_messageDispatcher, a3);
  __int16 v32 = [[HMDBiomeLogEventObserver alloc] initWithBiomeEventManager:self->_biomeEventManager dataSource:self];
  biomeLogEventObserver = self->_biomeLogEventObserver;
  self->_biomeLogEventObserver = v32;

  __int16 v34 = [[HMDCompositeSettingsControllerManager alloc] initWithDataSource:self];
  compositeSettingsControllerManager = self->_compositeSettingsControllerManager;
  self->_compositeSettingsControllerManager = v34;

  __int16 v36 = [[HMDSiriEndpointOnboardingManager alloc] initWithDataSource:self];
  siriEndpointOnboardingManager = self->_siriEndpointOnboardingManager;
  self->_siriEndpointOnboardingManager = v36;

  __int16 v38 = (void *)MEMORY[0x230FBD990]();
  long long v39 = self;
  HMFGetOSLogHandle();
  uint64_t v40 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v41 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v41;
    _os_log_impl(&dword_22F52A000, v40, OS_LOG_TYPE_INFO, "%{public}@Creating event router broker", buf, 0xCu);
  }
  id v42 = objc_alloc(MEMORY[0x263F49398]);
  id v43 = (id)eventStorePath;
  uint64_t v44 = [v42 initWithFileName:v43];
  lastEventStore = v39->_lastEventStore;
  v39->_lastEventStore = (HMELastEventStore *)v44;

  unint64_t v46 = 0x263EFF000;
  if ([(HMELastEventStore *)v39->_lastEventStore startup])
  {
    long long v47 = [[HMDLastEventStoreController alloc] initWithWithEventStore:v39->_lastEventStore];
    lastEventStoreController = v39->_lastEventStoreController;
    v39->_lastEventStoreController = v47;
  }
  else
  {
    id v49 = (void *)MEMORY[0x230FBD990]();
    uint64_t v50 = v39;
    HMFGetOSLogHandle();
    id v51 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      id v52 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v52;
      _os_log_impl(&dword_22F52A000, v51, OS_LOG_TYPE_FAULT, "%{public}@Unable to start event store", buf, 0xCu);

      unint64_t v46 = 0x263EFF000uLL;
    }
  }
  id v53 = objc_alloc(MEMORY[0x263F49378]);
  uint64_t v54 = [(HMDHomeManager *)v39 workQueue];
  uint64_t v55 = [v53 initWithQueue:v54 dataSource:v39 storeReadHandle:v39->_lastEventStore logCategory:"Router.RegistrationForwarding" identifier:0];
  registrationForwardingEventRouter = v39->_registrationForwardingEventRouter;
  v39->_registrationForwardingEventRouter = (HMEDelegatingEventRouter *)v55;

  id v57 = objc_alloc(MEMORY[0x263F493A0]);
  __int16 v58 = [(HMDHomeManager *)v39 workQueue];
  uint64_t v59 = [v57 initWithQueue:v58 storeReadHandle:v39->_lastEventStore storeWriteHandle:v39->_lastEventStore logCategory:"Router.LocalMemory"];
  memoryEventRouter = v39->_memoryEventRouter;
  v39->_memoryEventRouter = (HMEMemoryEventBus *)v59;

  [(HMEMemoryEventBus *)v39->_memoryEventRouter setDataSource:v39];
  if (objc_opt_respondsToSelector())
  {
    long long v61 = v39->_registrationForwardingEventRouter;
    id v62 = [(HMEMemoryEventBus *)v39->_memoryEventRouter synchronousSubscriptionProvider];
    [(HMEDelegatingEventRouter *)v61 registerSubRouter:v62];
  }
  int v63 = [HMDLoggingEventForwarder alloc];
  id v64 = v39->_memoryEventRouter;
  id v65 = [(HMDHomeManager *)v39 logEventSubmitter];
  uint64_t v66 = [(HMDLoggingEventForwarder *)v63 initWithEventForwarder:v64 logEventSubmitter:v65];
  loggingMemoryEventForwarder = v39->_loggingMemoryEventForwarder;
  v39->_loggingMemoryEventForwarder = (HMDLoggingEventForwarder *)v66;

  [(HMDHomeManager *)v39 initalizeMediaGroupParticipantDataLocalStorage];
  if (isiOSDevice() || isWatch() || isMac())
  {
    uint64_t v68 = [HMDRemoteEventRouterAssertionController alloc];
    long long v69 = [(HMDHomeManager *)v39 workQueue];
    id v70 = [(HMDHomeManager *)v39 notificationCenter];
    id v71 = [(HMDRemoteEventRouterAssertionController *)v68 initWithQueue:v69 notificationCenter:v70];
    [(HMDHomeManager *)v39 setEventRouterAssertionController:v71];

    uint64_t v72 = [(HMDHomeManager *)v39 eventRouterAssertionController];
    [v72 configure];
  }
  objc_storeStrong((id *)&v39->_accessoryBrowserInternal, a4);
  [(HMDAccessoryBrowser *)v39->_accessoryBrowserInternal setUnpairedAccessoryManagerDelegate:v39];
  uint64_t v73 = [MEMORY[0x263EFF980] array];
  homes = v39->_homes;
  v39->_homes = (NSMutableArray *)v73;

  uint64_t v75 = [*(id *)(v46 + 2496) set];
  pendingHomesBeingRemoved = v39->_pendingHomesBeingRemoved;
  v39->_pendingHomesBeingRemoved = (NSMutableSet *)v75;

  long long v77 = objc_alloc_init(HMDPowerManager);
  powerManager = v39->_powerManager;
  v39->_powerManager = v77;

  v39->_accountActive = 0;
  v39->_accountStatusFailedDueToNetworkFailure = 0;
  v39->_uploadToCloudIsPending = 0;
  v39->_uploadHomeDataToCloud = 0;
  objc_storeStrong((id *)&v39->_identityRegistry, a8);
  cloudOperationRetryTimer = v39->_cloudOperationRetryTimer;
  v39->_cloudOperationRetryTimer = 0;

  v39->_lastAnswerForShouldCloudSyncData = 0;
  objc_storeStrong((id *)&v39->_msgFilterChain, a5);
  v39->_cloudOperationRetryCount = 0;
  v39->_backOffOperationInProgress = 0;
  objc_storeStrong((id *)&v39->_accountRegistry, a9);
  [(HMDHomeManager *)v39 _migrateUniqueIdentifierPrefsIfNeeded];
  __int16 v80 = +[HMDAppleAccountSettings sharedSettings];
  [v80 synchronize];

  v39->_companionReachable = 0;
  id v81 = +[HMDWatchSystemState sharedState];
  if (+[HMDDeviceCapabilities isCompanionCapable])
  {
    __int16 v82 = [HMDPairedSync alloc];
    uint64_t v83 = [(HMDHomeManager *)v39 workQueue];
    uint64_t v84 = [(HMDPairedSync *)v82 initWithQueue:v83];
    pairedSync = v39->_pairedSync;
    v39->_pairedSync = (HMDPairedSync *)v84;

    uint64_t v86 = +[HMDWatchManager sharedManager];
    uint64_t v87 = 816;
LABEL_19:
    __int16 v90 = *(Class *)((char *)&v39->super.super.isa + v87);
    *(Class *)((char *)&v39->super.super.isa + v87) = (Class)v86;

    goto LABEL_20;
  }
  __int16 v88 = [MEMORY[0x263F42620] productInfo];
  uint64_t v89 = [v88 productPlatform];

  if (v89 == 3)
  {
    uint64_t v86 = +[HMDCompanionManager sharedManager];
    uint64_t v87 = 312;
    goto LABEL_19;
  }
LABEL_20:
  if (+[HMDSoftwareUpdateManager isSupported])
  {
    uint64_t v91 = objc_alloc_init(HMDSoftwareUpdateManager);
    softwareUpdateManager = v39->_softwareUpdateManager;
    v39->_softwareUpdateManager = v91;
  }
  v39->_uploadMetadataToCloud = 0;
  v39->_cloudkitAccountStatusDetermined = 0;
  v39->_unint64_t generationCounter = 0;
  if (v39->_generationCounterToken == -1)
  {
    BOOL v93 = [(HMDHomeManager *)v39 darwinNotificationProvider];
    int v94 = [v93 notifyRegisterCheck:*MEMORY[0x263F0CAE0] outToken:&v39->_generationCounterToken];

    if (!v94)
    {
      uint64_t v441 = 0;
      double v95 = [(HMDHomeManager *)v39 darwinNotificationProvider];
      [v95 notifyGetState:v39->_generationCounterToken state:&v441];

      if (!v441)
      {
        uint64_t v96 = (void *)MEMORY[0x230FBD990]();
        double v97 = v39;
        HMFGetOSLogHandle();
        uint64_t v98 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          id v99 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v99;
          _os_log_impl(&dword_22F52A000, v98, OS_LOG_TYPE_DEFAULT, "%{public}@Generation counter for notification token is zero - refreshing from persisted configuration", buf, 0xCu);
        }
        uint64_t v100 = [(HMDHomeManager *)v97 userDefaults];
        uint64_t v441 = [v100 integerForKey:@"HMDHomeManagerGenerationCounter"];

        if (!v441)
        {
          uint64_t v101 = (void *)MEMORY[0x230FBD990]();
          uint64_t v102 = v97;
          HMFGetOSLogHandle();
          char v103 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            id v104 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v104;
            _os_log_impl(&dword_22F52A000, v103, OS_LOG_TYPE_DEFAULT, "%{public}@Persisted generation counter is zero - need to invalidate client caches", buf, 0xCu);
          }
        }
      }
      id v105 = (void *)MEMORY[0x230FBD990]();
      int v106 = v39;
      HMFGetOSLogHandle();
      uint64_t v107 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v108 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v108;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v441;
        _os_log_impl(&dword_22F52A000, v107, OS_LOG_TYPE_DEFAULT, "%{public}@Initializing with generation counter %llu", buf, 0x16u);
      }
      v39->_unint64_t generationCounter = v441;
    }
  }
  uint64_t v109 = [*(id *)(v46 + 2496) set];
  unassociatedRemotePeers = v39->_unassociatedRemotePeers;
  v39->_unassociatedRemotePeers = (NSMutableSet *)v109;

  uint64_t v111 = [MEMORY[0x263EFF9A0] dictionary];
  associatedRemotePeers = v39->_associatedRemotePeers;
  v39->_associatedRemotePeers = (NSMutableDictionary *)v111;

  uint64_t v113 = [MEMORY[0x263EFF9A0] dictionary];
  associatedWatchPeers = v39->_associatedWatchPeers;
  v39->_associatedWatchPeers = (NSMutableDictionary *)v113;

  uint64_t v115 = [MEMORY[0x263EFF9A0] dictionary];
  watchSyncStateMap = v39->_watchSyncStateMap;
  v39->_watchSyncStateMap = (NSMutableDictionary *)v115;

  uint64_t v117 = [*(id *)(v46 + 2496) set];
  fullSyncedWatchPeers = v39->_fullSyncedWatchPeers;
  v39->_fullSyncedWatchPeers = (NSMutableSet *)v117;

  uint64_t v119 = [MEMORY[0x263EFF9A0] dictionary];
  watchSyncRetryContextBySyncIdentifier = v39->_watchSyncRetryContextBySyncIdentifier;
  v39->_watchSyncRetryContextBySyncIdentifier = (NSMutableDictionary *)v119;

  uint64_t v121 = [MEMORY[0x263F08968] strongToStrongObjectsMapTable];
  watchSyncRetryContextByRetryTimer = v39->_watchSyncRetryContextByRetryTimer;
  v39->_watchSyncRetryContextByRetryTimer = (NSMapTable *)v121;

  uint64_t v123 = [MEMORY[0x263EFF980] array];
  pendingResponsesForAccessoryFinder = v39->_pendingResponsesForAccessoryFinder;
  v39->_pendingResponsesForAccessoryFinder = (NSMutableArray *)v123;

  uint64_t v125 = [MEMORY[0x263EFF9A0] dictionary];
  pendingRemoteSessions = v39->_pendingRemoteSessions;
  v39->_pendingRemoteSessions = (NSMutableDictionary *)v125;

  uint64_t v127 = [*(id *)(v46 + 2496) set];
  pendingResidentSetupSessions = v39->_pendingResidentSetupSessions;
  v39->_pendingResidentSetupSessions = (NSMutableSet *)v127;

  HMDispatchQueueNameString();
  id v129 = objc_claimAutoreleasedReturnValue();
  double v130 = (const char *)[v129 UTF8String];
  id v131 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v132 = dispatch_queue_create(v130, v131);
  clientConnectionQueue = v39->_clientConnectionQueue;
  v39->_clientConnectionQueue = (OS_dispatch_queue *)v132;

  double v134 = [[HMDClientConnection alloc] initWithHomeManager:v39 queue:v39->_clientConnectionQueue messageDispatcher:*p_messageDispatcher];
  clientConnectiouint64_t n = v39->_clientConnection;
  v39->_clientConnectiouint64_t n = v134;

  uint64_t v136 = [[HMDAssistantGather alloc] initWithHomeManager:v39 queue:v39->_clientConnectionQueue];
  gatherer = v39->_gatherer;
  v39->_gatherer = v136;

  uint64_t v138 = [(HMDHomeManager *)v39 _getAssistantHashingData];
  [(HMDHomeManager *)v39 _setAssistantHashingData:v138];

  long long v139 = +[HMDLaunchHandler sharedHandler];
  [v139 removePersistentRelaunchRegistrationsIfNecessary];

  uint64_t v140 = [MEMORY[0x263EFF9A0] dictionary];
  pendingFragmentationStreauint64_t m = v39->_pendingFragmentationStream;
  v39->_pendingFragmentationStreauint64_t m = (NSMutableDictionary *)v140;

  uint64_t v142 = +[HMDPersistentStore unarchiveIDSDataSyncJournal];
  pendingDataSyncAcks = v39->_pendingDataSyncAcks;
  v39->_pendingDataSyncAcks = (NSMutableDictionary *)v142;

  v39->_ignoreFirstTimeReachabilityChanged = 1;
  uint64_t v144 = [*(id *)(v46 + 2496) set];
  dialogCancelationContexts = v39->_dialogCancelationContexts;
  v39->_dialogCancelationContexts = (NSMutableSet *)v144;

  uint64_t v146 = +[HMDLocation sharedManager];
  locationHandler = v39->_locationHandler;
  v39->_locationHandler = (HMDLocation *)v146;

  uint64_t v148 = +[HMDFMFHandler sharedHandler];
  fmfHandler = v39->_fmfHandler;
  v39->_fmfHandler = (HMDFMFHandler *)v148;

  uint64_t v150 = v39->_fmfHandler;
  v440[0] = MEMORY[0x263EF8330];
  v440[1] = 3221225472;
  v440[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke;
  v440[3] = &unk_264A2F7F8;
  v440[4] = v39;
  [(HMDFMFHandler *)v150 startWithCompletionHandler:v440];
  v39->_needToCleanUpKeys = 0;
  id v151 = [[HMDCHIPDataSource alloc] initWithHomeManager:v39];
  chipDataSource = v39->_chipDataSource;
  v39->_chipDataSource = v151;

  uint64_t v153 = [[HMDAccessorySetupManager alloc] initWithWorkQueue:self->_workQueue homeManager:v39];
  accessorySetupManager = v39->_accessorySetupManager;
  v39->_accessorySetupManager = v153;

  [(HMDAccessorySetupManager *)v39->_accessorySetupManager configure];
  uint64_t v155 = [HMDAccessorySetupCoordinator alloc];
  workQueue = self->_workQueue;
  long long v157 = [(HMDAccessorySetupManager *)v39->_accessorySetupManager messageDispatcher];
  int v158 = [(HMDAccessoryBrowser *)v39->_accessoryBrowserInternal chipAccessoryServerBrowser];
  uint64_t v159 = [(HMDAccessorySetupCoordinator *)v155 initWithWorkQueue:workQueue messageDispatcher:v157 chipAccessoryServerBrowser:v158 chipDataSource:v39->_chipDataSource];
  accessorySetupCoordinator = v39->_accessorySetupCoordinator;
  v39->_accessorySetupCoordinator = (HMDAccessorySetupCoordinator *)v159;

  [(HMDAccessorySetupCoordinator *)v39->_accessorySetupCoordinator configure];
  [(HMDAccessorySetupManager *)v39->_accessorySetupManager setAccessorySetupCoordinator:v39->_accessorySetupCoordinator];
  BOOL v161 = [[HMDMTSPairingServer alloc] initWithAccessoryBrowser:v422];
  BOOL v162 = [[HMDMTSDeviceSetupServer alloc] initWithAccessorySetupManager:v39->_accessorySetupManager];
  char v163 = [[HMDMTSAuthorizationServer alloc] initWithAccountManager:v39->_appleAccountManager];
  uint64_t v164 = [[HMDMTSXPCServer alloc] initWithPairingServer:v161 deviceSetupServer:v162 authorizationServer:v163];
  mtsXPCServer = v39->_mtsXPCServer;
  v39->_mtsXPCServer = v164;

  [(HMDMTSXPCServer *)v39->_mtsXPCServer start];
  double v166 = [HMDCameraRecordingLoadBalancer alloc];
  id v167 = objc_alloc_init(MEMORY[0x263F47CE0]);
  uint64_t v168 = [(HMDCameraRecordingLoadBalancer *)v166 initWithHomeManager:v39 resourceUsageMonitor:v167];
  cameraLoadBalancer = v39->_cameraLoadBalancer;
  v39->_cameraLoadBalancer = (HMDCameraRecordingLoadBalancer *)v168;

  long long v20 = &OBJC_IVAR___HMDResidentDeviceManagerRoarV3__backingStore;
  [(HMDCameraRecordingLoadBalancer *)v39->_cameraLoadBalancer start];
  double v170 = [[HMDCameraClipsQuotaMessenger alloc] initWithWorkQueue:self->_workQueue messageDispatcher:*p_messageDispatcher];
  cameraClipsQuotaMessenger = v39->_cameraClipsQuotaMessenger;
  v39->_cameraClipsQuotaMessenger = v170;

  long long v19 = &OBJC_IVAR___HMDResidentDeviceManagerRoarV3__backingStore;
  [(HMDCameraClipsQuotaMessenger *)v39->_cameraClipsQuotaMessenger configure];

  id v18 = v420;
  uint64_t v21 = v46;
LABEL_35:
  uint64_t v172 = [[HMDMicroLocationManager alloc] initWithLocationManager:*(Class *)((char *)&self->super.super.isa + v19[197])];
  microLocationManager = self->_microLocationManager;
  self->_microLocationManager = v172;

  long long v174 = [[HMDMicroLocationLogEventObserver alloc] initWithDataSource:self microLocationManager:self->_microLocationManager];
  microLocationLogEventObserver = self->_microLocationLogEventObserver;
  self->_microLocationLogEventObserver = v174;

  self->_siriSyncNotificationTime = 0;
  id v176 = v426;
  double v177 = [[HMDIDSInvitationManager alloc] initWithHomeManager:self messageDispatcher:v426 queue:*(Class *)((char *)&self->super.super.isa + v20[190]) remoteAccountManager:self->_remoteAccountManager];
  idsInvitationManager = self->_idsInvitationManager;
  self->_idsInvitationManager = v177;

  int v179 = [[HMDUserDeviceCapabilitiesRequestManager alloc] initWithHomeManager:self accountRegistry:v18 messageDispatcher:v426];
  userDeviceCapabilitiesRequestManager = self->_userDeviceCapabilitiesRequestManager;
  self->_userDeviceCapabilitiesRequestManager = v179;

  uint64_t v181 = [*(id *)(v21 + 2496) set];
  mergeIDsOfUsersOfRemovedSharedHomes = self->_mergeIDsOfUsersOfRemovedSharedHomes;
  self->_mergeIDsOfUsersOfRemovedSharedHomes = v181;

  self->_homeDataLoadedFromArchive = 0;
  self->_accessAllowedWhenLocked = isiOSDevice();
  uint64_t v183 = [*(id *)(v21 + 2496) set];
  unprocessedOperationModelIdentifiers = self->_unprocessedOperationModelIdentifiers;
  self->_unprocessedOperationModelIdentifiers = v183;

  primaryHomeUUID = self->_primaryHomeUUID;
  self->_primaryHomeUUID = 0;

  self->_homeManagerZoneFirstFetch = 1;
  long long v186 = [MEMORY[0x263EFF980] array];
  cloudZones = self->_cloudZones;
  self->_cloudZones = v186;

  dataTag = self->_dataTag;
  self->_dataTag = 0;

  uint64_t v189 = [MEMORY[0x263EFF980] array];
  uuidsOfRemovedHomes = self->_uuidsOfRemovedHomes;
  self->_uuidsOfRemovedHomes = v189;

  self->_residentEnabledState = 0;
  __int16 v191 = getAssistantConfigurationVersion();
  self->_assistantGenerationCounter = [v191 unsignedIntegerValue];

  self->_homeDatabaseSize = 0;
  id v192 = v425;
  uint64_t v193 = [v425 UUIDsOfRemovedHomes];
  if (v193)
  {
    uint64_t v194 = (void *)v193;
    isWatch();

    uint64_t v195 = (void *)MEMORY[0x263EFF980];
    uint64_t v196 = [v425 UUIDsOfRemovedHomes];
    uint64_t v197 = [v195 arrayWithArray:v196];
    id v198 = self->_uuidsOfRemovedHomes;
    self->_uuidsOfRemovedHomes = v197;
  }
  else
  {
    __int16 v199 = [MEMORY[0x263EFF980] array];
    uint64_t v196 = self->_uuidsOfRemovedHomes;
    self->_uuidsOfRemovedHomes = v199;
  }

  uint64_t v200 = +[HMDDeviceCapabilities deviceCapabilities];
  int v201 = [v200 supportsFirmwareUpdate];

  if (v201)
  {
    uint64_t v202 = (void *)MEMORY[0x230FBD990]();
    __int16 v203 = self;
    HMFGetOSLogHandle();
    __int16 v204 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v204, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      id v205 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v205;
      _os_log_impl(&dword_22F52A000, v204, OS_LOG_TYPE_DEBUG, "%{public}@Starting AccessoryFirmwareUpdateManager", buf, 0xCu);
    }
    __int16 v206 = [[HMDAccessoryFirmwareUpdateManager alloc] initWithHomeManager:v203];
    accessoryFirmwareUpdateManager = v203->_accessoryFirmwareUpdateManager;
    v203->_accessoryFirmwareUpdateManager = v206;
  }
  if ((_os_feature_enabled_impl() & 1) != 0
    || CFPreferencesGetAppBooleanValue(@"MatterOTA", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0))
  {
    int v208 = [[HMDMatterSoftwareUpdateProviderDelegate alloc] initWithHomeManager:self accessoryFirmwareUpdateManager:self->_accessoryFirmwareUpdateManager];
    matterSoftwareUpdateProviderDelegate = self->_matterSoftwareUpdateProviderDelegate;
    self->_matterSoftwareUpdateProviderDelegate = v208;
  }
  if (self->_residentEnabledState == 1)
  {
    BOOL v210 = [MEMORY[0x263F42620] productInfo];
    uint64_t v211 = [v210 productClass];

    if (v211 == 4)
    {
      v212 = (void *)MEMORY[0x230FBD990]();
      uint64_t v213 = self;
      HMFGetOSLogHandle();
      v214 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v214, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        id v215 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v215;
        _os_log_impl(&dword_22F52A000, v214, OS_LOG_TYPE_DEFAULT, "%{public}@Force enabling as a resident", buf, 0xCu);
      }
      self->_residentEnabledState = 2;
    }
  }
  if (a12)
  {
    id v216 = [(HMDHomeManager *)self uuid];
    [(HMDHomeManager *)self updateGenerationCounterWithReason:@"ReloadHomeData" sourceUUID:v216 shouldNotifyClients:0];
    id v421 = 0;
  }
  else
  {
    uint64_t v217 = HMFUptime();
    double v219 = v218;
    v220 = (void *)MEMORY[0x230FBD990](v217);
    unsigned int v221 = self;
    HMFGetOSLogHandle();
    uint64_t v222 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v222, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      id v223 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138544386;
      *(void *)&uint8_t buf[4] = v223;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = @"homeManagerInitStart";
      *(_WORD *)&buf[22] = 2112;
      v447 = @"Start backing store setup";
      __int16 v448 = 2114;
      v449 = @"state";
      __int16 v450 = 2112;
      v451 = @"homeManagerLoadingBackingStore";
      _os_log_impl(&dword_22F52A000, v222, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
    }
    v224 = [MEMORY[0x263F499E0] sharedInstance];
    id v225 = objc_alloc(MEMORY[0x263F499F0]);
    v456 = @"state";
    v457[0] = @"homeManagerLoadingBackingStore";
    long long v226 = [NSDictionary dictionaryWithObjects:v457 forKeys:&v456 count:1];
    uint64_t v227 = (void *)[v225 initWithTag:@"homeManagerInitStart" data:v226];
    long long v228 = [MEMORY[0x263F424F0] currentTagProcessorList];
    [v224 submitTaggedEvent:v227 processorList:v228];

    id v439 = 0;
    uint64_t v229 = v419[2](v419, v221, &v439);
    id v216 = v439;
    backingStore = v221->_backingStore;
    v221->_backingStore = (HMDBackingStore *)v229;

    if (!v221->_backingStore)
    {
      v410 = (void *)MEMORY[0x230FBD990]();
      v411 = v221;
      v412 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v412, OS_LOG_TYPE_FAULT))
      {
        v413 = HMFGetLogIdentifier();
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v413;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v216;
        _os_log_impl(&dword_22F52A000, v412, OS_LOG_TYPE_FAULT, "%{public}@Unable to open Home Manager BackingStore zone. Unsurvivable: %@", buf, 0x16u);
      }
      _Exit(1);
    }
    uint64_t v231 = [(HMDHomeManager *)v221 backingStore];
    id v421 = +[HMDHomeManager setupCoreDataUsingBackingStore:v231];

    double v232 = [[HMDHomeManagerObjectLookup alloc] initWithHomeManager:v221];
    long long v233 = [(HMDHomeManager *)v221 backingStore];
    [v233 setLookup:v232];

    long long v234 = [(HMDHomeManager *)v221 backingStore];
    [v234 setHomeManager:v221];

    uint64_t v235 = [(HMDHomeManager *)v221 remoteAccountManager];
    [v235 setBackingStore:v221->_backingStore];

    double v236 = (void *)MEMORY[0x230FBD990]();
    __int16 v237 = v221;
    HMFGetOSLogHandle();
    long long v238 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v238, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v239 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v240 = NSString;
      HMFUptime();
      objc_msgSend(v240, "stringWithFormat:", @"%.3f", v241 - v219);
      id v242 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138544898;
      *(void *)&uint8_t buf[4] = v239;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = @"homeManagerInitStart";
      *(_WORD *)&buf[22] = 2112;
      v447 = @"Backing store setup done";
      __int16 v448 = 2114;
      v449 = @"state";
      __int16 v450 = 2112;
      v451 = @"homeManagerLoadedBackingStore";
      __int16 v452 = 2114;
      v453 = @"duration";
      __int16 v454 = 2112;
      id v455 = v242;
      _os_log_impl(&dword_22F52A000, v238, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
    }
    __int16 v243 = [MEMORY[0x263F499E0] sharedInstance];
    id v244 = objc_alloc(MEMORY[0x263F499F0]);
    v245 = NSString;
    HMFUptime();
    v247 = objc_msgSend(v245, "stringWithFormat:", @"%.3f", v246 - v219);
    uint64_t v248 = HMDTaggedLoggingCreateDictionary();
    __int16 v249 = objc_msgSend(v244, "initWithTag:data:", @"homeManagerInitStart", v248, @"state", @"homeManagerLoadedBackingStore", @"duration", v247);
    v250 = [MEMORY[0x263F424F0] currentTagProcessorList];
    [v243 submitTaggedEvent:v249 processorList:v250];

    v237->_accountActive = 1;
    [(HMDHomeManager *)v237 _registerForMessages];
    [(HMDHomeManager *)v237 __checkForBootTimeLogout];
    id v192 = v425;
    id v176 = v426;
  }

  __int16 v251 = objc_alloc_init(HMDIDSServerBag);
  [(HMDHomeManager *)self setIdsServerBag:v251];

  uint64_t v252 = [(HMDHomeManager *)self idsServerBag];
  [v252 setDelegate:self];

  if ([(HMDHomeManager *)self _configureHomes:MEMORY[0x263EFFA68] uncommittedTransactions:v423])
  {
    _HMFPreconditionFailure();
  }
  v253 = [HMDApplicationData alloc];
  v254 = [v192 applicationData];
  uint64_t v255 = [v254 dictionary];
  uint64_t v256 = [(HMDApplicationData *)v253 initWithDictionary:v255 parentUUID:self->_uuid];
  appData = self->_appData;
  self->_appData = v256;

  if (a12)
  {
    [(HMDHomeManager *)self updatePowerAssertion];
    v258 = [v192 accessories];
    uint64_t v259 = [v258 count];

    if (v259)
    {
      v260 = [(HMDHomeManager *)self accessoryBrowserInternal];
      [v260 startDiscoveringPairedAccessories];
    }
  }
  else
  {
    [(HMDPowerManager *)self->_powerManager start];
    [(HMDHomeManager *)self updatePowerAssertion];
    uint64_t v261 = (void *)MEMORY[0x230FBD990]([(HMDHomeManager *)self _monitorReachability]);
    uint64_t v262 = self;
    HMFGetOSLogHandle();
    uint64_t v263 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v263, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v264 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v264;
      _os_log_impl(&dword_22F52A000, v263, OS_LOG_TYPE_INFO, "%{public}@Starting the mobile asset manager", buf, 0xCu);
    }
    v265 = [(HMDHomeManager *)v262 backingStore];
    v266 = [v265 context];
    uint64_t v267 = +[HMDMobileAssetManagerFactory makeInstanceWithContext:v266];
    mobileAssetManager = v262->_mobileAssetManager;
    v262->_mobileAssetManager = (HMDMobileAssetManager *)v267;

    v269 = [(HMDHomeManager *)v262 mobileAssetManager];
    v438[0] = MEMORY[0x263EF8330];
    v438[1] = 3221225472;
    v438[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_495;
    v438[3] = &unk_264A2F7F8;
    v438[4] = v262;
    [v269 startWithCompletion:v438];

    v270 = [(HMDHomeManager *)v262 notificationCenter];
    [v270 addObserver:v262 selector:sel_accountAvailabilityChanged_ name:*MEMORY[0x263EFD478] object:0];

    v271 = +[HMDXPCMessageTransport defaultTransport];
    v272 = [v271 queue];
    v273 = [(HMDHomeManager *)v262 messageTargetUUID];
    v274 = [(HMDHomeManager *)v262 logEventSubmitter];
    uint64_t v275 = +[HMDHomeManagerXPCClientConnectionsManagerFactory makeInstanceWithQueue:v272 messageDispatcher:v176 messageTargetUUID:v273 accessoryBrowser:v422 logEventSubmitter:v274];
    connectionsManager = v262->_connectionsManager;
    v262->_connectionsManager = (HMDHomeManagerXPCClientConnectionsManager *)v275;

    [(HMDHomeManagerXPCClientConnectionsManager *)v262->_connectionsManager configure];
    v277 = [v192 accessories];
    BOOL v278 = [v277 count] != 0;

    [(HMDAccessoryBrowser *)v262->_accessoryBrowserInternal activate:v278];
    if (isiOSDevice())
    {
      id v279 = objc_alloc(MEMORY[0x263F42658]);
      uint64_t v280 = [v279 initWithTimeInterval:4 options:(double)(unint64_t)checkRemoteAccessTimeout];
      remoteAccessHealthMonitorTimer = v262->_remoteAccessHealthMonitorTimer;
      v262->_remoteAccessHealthMonitorTimer = (HMFTimer *)v280;

      [(HMFTimer *)v262->_remoteAccessHealthMonitorTimer setDelegate:v262];
      v282 = v262->_remoteAccessHealthMonitorTimer;
      uint64_t v283 = [(HMDHomeManager *)v262 workQueue];
      [(HMFTimer *)v282 setDelegateQueue:v283];

      [(HMFTimer *)v262->_remoteAccessHealthMonitorTimer resume];
    }
  }
  residentMesh = self->_residentMesh;
  self->_residentMesh = 0;

  v285 = +[HMDDeviceCapabilities deviceCapabilities];
  int v286 = [v285 isResidentCapable];

  if (v286)
  {
    v287 = (void *)MEMORY[0x230FBD990]();
    uint64_t v288 = self;
    HMFGetOSLogHandle();
    uint64_t v289 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v289, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      id v290 = (id)objc_claimAutoreleasedReturnValue();
      [(HMDHomeManager *)v288 isResidentEnabled];
      HMFBooleanToString();
      id v291 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v290;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v291;
      _os_log_impl(&dword_22F52A000, v289, OS_LOG_TYPE_DEFAULT, "%{public}@Initialize resident mesh: %@", buf, 0x16u);
    }
    uint64_t v292 = [[HMDResidentMesh alloc] initWithHomeManager:v288 residentEnabled:[(HMDHomeManager *)v288 isResidentEnabled]];
    uint64_t v293 = self->_residentMesh;
    self->_residentMesh = v292;
  }
  v294 = (void *)MEMORY[0x230FBD990]();
  v295 = self;
  HMFGetOSLogHandle();
  v296 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v296, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v297 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v297;
    _os_log_impl(&dword_22F52A000, v296, OS_LOG_TYPE_INFO, "%{public}@Refreshing display names of the users and invites", buf, 0xCu);
  }
  [(HMDHomeManager *)v295 _handleContactStoreChanged];
  if (hasAssistantHashingKeyChanged())
  {
    long long v436 = 0u;
    long long v437 = 0u;
    long long v434 = 0u;
    long long v435 = 0u;
    uint64_t v298 = [(HMDHomeManager *)v295 homes];
    uint64_t v299 = [v298 countByEnumeratingWithState:&v434 objects:v445 count:16];
    if (v299)
    {
      uint64_t v300 = v299;
      uint64_t v301 = *(void *)v435;
      do
      {
        for (uint64_t i = 0; i != v300; ++i)
        {
          if (*(void *)v435 != v301) {
            objc_enumerationMutation(v298);
          }
          [*(id *)(*((void *)&v434 + 1) + 8 * i) resetAccessoryHashedRouteIdentifiers];
        }
        uint64_t v300 = [v298 countByEnumeratingWithState:&v434 objects:v445 count:16];
      }
      while (v300);
    }

    [(HMDHomeManager *)v295 assistantSyncDataChanged:@"HMDAssistantEncryptionKeyChanged"];
  }
  else
  {
    v303 = [(HMDHomeManager *)v295 workQueue];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_504;
    block[3] = &unk_264A2F7F8;
    void block[4] = v295;
    dispatch_async(v303, block);
  }
  long long v431 = 0u;
  long long v432 = 0u;
  long long v429 = 0u;
  long long v430 = 0u;
  id v304 = [(HMDHomeManager *)v295 homes];
  uint64_t v305 = [v304 countByEnumeratingWithState:&v429 objects:v444 count:16];
  if (v305)
  {
    uint64_t v306 = v305;
    uint64_t v307 = *(void *)v430;
    do
    {
      for (uint64_t j = 0; j != v306; ++j)
      {
        if (*(void *)v430 != v307) {
          objc_enumerationMutation(v304);
        }
        [*(id *)(*((void *)&v429 + 1) + 8 * j) updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled:1];
      }
      uint64_t v306 = [v304 countByEnumeratingWithState:&v429 objects:v444 count:16];
    }
    while (v306);
  }

  v309 = [MEMORY[0x263F42608] sharedPreferences];
  id v310 = [v309 preferenceForKey:@"memoryMonitorPeriod"];
  v311 = [v310 numberValue];

  id v312 = objc_alloc(MEMORY[0x263F42658]);
  v424 = v311;
  [v311 doubleValue];
  uint64_t v313 = objc_msgSend(v312, "initWithTimeInterval:options:", 12);
  [(HMDHomeManager *)v295 setMemoryMonitorLogEventTimer:v313];

  id v314 = [(HMDHomeManager *)v295 memoryMonitorLogEventTimer];
  [v314 setDelegate:v295];

  v315 = [(HMDHomeManager *)v295 memoryMonitorLogEventTimer];
  uint64_t v316 = [(HMDHomeManager *)v295 workQueue];
  [v315 setDelegateQueue:v316];

  uint64_t v317 = [(HMDHomeManager *)v295 memoryMonitorLogEventTimer];
  [v317 resume];

  id v318 = [HMDDuetPredictionSubscriber alloc];
  uint64_t v319 = [(HMDHomeManager *)v295 workQueue];
  char v320 = [(HMDHomeManager *)v295 messageDispatcher];
  char v321 = [(HMDDuetPredictionSubscriber *)v318 initWithWorkQueue:v319 messageDispatcher:v320];
  [(HMDHomeManager *)v295 setDuetSubscriber:v321];

  uint64_t v322 = [(HMDHomeManager *)v295 duetSubscriber];
  [v322 setDataSource:v295];

  v323 = [(HMDHomeManager *)v295 duetSubscriber];
  [v323 configure];

  if (v295)
  {
    uint64_t v324 = [(HMDHomeManager *)v295 metricsManager];
    uint64_t v325 = [v324 logEventDispatcher];
    v326 = [(HMDHomeManager *)v295 biomeLogEventObserver];
    *(void *)long long buf = objc_opt_class();
    *(void *)&buf[8] = objc_opt_class();
    *(void *)&buf[16] = objc_opt_class();
    uint64_t v327 = [MEMORY[0x263EFF8C0] arrayWithObjects:buf count:3];
    [v325 addObserver:v326 forEventClasses:v327];

    v328 = [(HMDHomeManager *)v295 metricsManager];
    v329 = [v328 logEventDispatcher];
    uint64_t v330 = [(HMDHomeManager *)v295 microLocationLogEventObserver];
    *(void *)long long buf = objc_opt_class();
    *(void *)&buf[8] = objc_opt_class();
    *(void *)&buf[16] = objc_opt_class();
    uint64_t v331 = [MEMORY[0x263EFF8C0] arrayWithObjects:buf count:3];
    [v329 addObserver:v330 forEventClasses:v331];
  }
  [(HMDHomeManager *)v295 _notifyMetricsManagerOfConfigurationChange];
  uint64_t v332 = [(HMDHomeManager *)v295 isResidentEnabled];
  if (v332)
  {
    uint64_t v333 = (void *)MEMORY[0x230FBD990]();
    v334 = v295;
    HMFGetOSLogHandle();
    uint64_t v335 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v335, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v336 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v336;
      _os_log_impl(&dword_22F52A000, v335, OS_LOG_TYPE_INFO, "%{public}@Resident is enabled. Create multi user settings metric event dispatcher, and register for daily event.", buf, 0xCu);
    }
    uint64_t v337 = [HMDMultiUserSettingsMetricsEventDispatcher alloc];
    uuid = self->_uuid;
    v339 = [v334 metricsManager];
    char v340 = [v339 logEventSubmitter];
    char v341 = [v334 metricsManager];
    v342 = [v341 dailyScheduler];
    uint64_t v343 = [(HMDMultiUserSettingsMetricsEventDispatcher *)v337 initWithIdentifier:uuid logEventSubmitter:v340 dailyScheduler:v342];
    id v344 = v334[68];
    v334[68] = (id)v343;

    [v334[68] setDataSource:v334];
    uint64_t v332 = [v334[68] registerForDailyMultiUserSettingsEvents];
  }
  v345 = (void *)MEMORY[0x230FBD990](v332);
  v346 = [HMDAppleAccessoryPairingController alloc];
  v347 = [HMDAppleAccessoryPairingControllerDataSource alloc];
  v348 = [(HMDHomeManager *)v295 backingStore];
  v349 = [v348 context];
  id v350 = [(HMDAppleAccessoryPairingControllerDataSource *)v347 initWithContext:v349];
  uint64_t v351 = [(HMDAppleAccessoryPairingController *)v346 initWithHomeManager:v295 dataSource:v350];
  legacyAccessoryPairingController = v295->_legacyAccessoryPairingController;
  v295->_legacyAccessoryPairingController = (HMDAppleAccessoryPairingController *)v351;

  long long v353 = [(HMDHomeManager *)v295 legacyAccessoryPairingController];
  [v353 start];

  [(HMDHomeManager *)v295 performInitialGraphLoad:v421];
  uint64_t v354 = HMFUptime();
  double v356 = v355;
  long long v357 = (void *)MEMORY[0x230FBD990](v354);
  long long v358 = v295;
  HMFGetOSLogHandle();
  long long v359 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v359, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    id v360 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)long long buf = 138544386;
    *(void *)&uint8_t buf[4] = v360;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = @"homeManagerInitStart";
    *(_WORD *)&buf[22] = 2112;
    v447 = @"Handling Home invitations";
    __int16 v448 = 2114;
    v449 = @"state";
    __int16 v450 = 2112;
    v451 = @"homeManagerHandledlingInvites";
    _os_log_impl(&dword_22F52A000, v359, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
  }
  long long v361 = [MEMORY[0x263F499E0] sharedInstance];
  id v362 = objc_alloc(MEMORY[0x263F499F0]);
  v442 = @"state";
  v443 = @"homeManagerHandledlingInvites";
  long long v363 = [NSDictionary dictionaryWithObjects:&v443 forKeys:&v442 count:1];
  long long v364 = (void *)[v362 initWithTag:@"homeManagerInitStart" data:v363];
  long long v365 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v361 submitTaggedEvent:v364 processorList:v365];

  [(HMDHomeManager *)v358 _pruneExpiredIncomingInvitations];
  [(HMDHomeManager *)v358 _pruneExpiredHomesAwaitingAutoAccept];
  long long v366 = (void *)MEMORY[0x230FBD990]([(HMDHomeManager *)v358 _pruneExpiredHomesNotYetMigrated]);
  uint64_t v367 = v358;
  HMFGetOSLogHandle();
  long long v368 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v368, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    id v369 = (id)objc_claimAutoreleasedReturnValue();
    long long v370 = NSString;
    HMFUptime();
    objc_msgSend(v370, "stringWithFormat:", @"%.3f", v371 - v356);
    id v372 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)long long buf = 138544898;
    *(void *)&uint8_t buf[4] = v369;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = @"homeManagerInitStart";
    *(_WORD *)&buf[22] = 2112;
    v447 = @"Handled Home invitations";
    __int16 v448 = 2114;
    v449 = @"state";
    __int16 v450 = 2112;
    v451 = @"homeManagerHandledInvites";
    __int16 v452 = 2114;
    v453 = @"duration";
    __int16 v454 = 2112;
    id v455 = v372;
    _os_log_impl(&dword_22F52A000, v368, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
  }
  long long v373 = [MEMORY[0x263F499E0] sharedInstance];
  id v374 = objc_alloc(MEMORY[0x263F499F0]);
  long long v375 = NSString;
  HMFUptime();
  long long v377 = objc_msgSend(v375, "stringWithFormat:", @"%.3f", v376 - v356);
  long long v378 = HMDTaggedLoggingCreateDictionary();
  long long v379 = objc_msgSend(v374, "initWithTag:data:", @"homeManagerInitStart", v378, @"state", @"homeManagerHandledInvites", @"duration", v377);
  long long v380 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v373 submitTaggedEvent:v379 processorList:v380];

  [v367 _auditIDSSentInvitations];
  id obj = [HMDXPCEventRouterServer alloc];
  v415 = [v367 messageTargetUUID];
  uint64_t v381 = *MEMORY[0x263F0CA98];
  uint64_t v382 = *MEMORY[0x263F0CAA0];
  long long v383 = [v367 messageDispatcher];
  long long v384 = [v367 workQueue];
  long long v385 = [v367 notificationCenter];
  long long v386 = [v367 registrationForwardingEventRouter];
  long long v387 = [v367 memoryEventRouter];
  long long v388 = [v367 lastEventStore];
  long long v389 = [(HMDXPCEventRouterServer *)obj initWithMessageUUID:v415 dataSource:v367 changeRegistrationsMessageName:v381 updateEventsMessageName:v382 messageDispatcher:v383 queue:v384 notificationCenter:v385 subscriptionProvider:v386 registrationEventRouter:v387 storeReadHandle:v388];
  [v367 setEventRouterXPCServer:v389];

  long long v390 = [v367 eventRouterXPCServer];
  [v390 configure];

  long long v391 = +[HMDDeviceCapabilities deviceCapabilities];
  LODWORD(v387) = [v391 isResidentCapable];

  if (v387)
  {
    long long v392 = (void *)MEMORY[0x230FBD990]();
    long long v393 = v367;
    HMFGetOSLogHandle();
    long long v394 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v394, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      id v395 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v395;
      _os_log_impl(&dword_22F52A000, v394, OS_LOG_TYPE_INFO, "%{public}@Creating siriEndPointSettingsSyncManager", buf, 0xCu);
    }
    long long v396 = [HMDSiriEndpointSettingsSyncManager alloc];
    long long v397 = [v393 memoryEventRouter];
    long long v398 = [v393 notificationCenter];
    long long v399 = [v393 workQueue];
    long long v400 = [(HMDSiriEndpointSettingsSyncManager *)v396 initWithDataSource:v393 subscriptionProvider:v397 notificationCenter:v398 workQueue:v399];
    [v393 setSiriEndPointSettingsSyncManager:v400];

    long long v401 = [v393 siriEndPointSettingsSyncManager];
    [v401 configure];
  }
  long long v402 = +[HMDIDSServiceManager sharedManager];
  long long v403 = [v367 workQueue];
  v428[0] = MEMORY[0x263EF8330];
  v428[1] = 3221225472;
  v428[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_518;
  v428[3] = &unk_264A2B090;
  v428[4] = v367;
  [v402 retrieveFirewallWithQueue:v403 completion:v428];

  [v367 setHasLoadedData:1];
  logAndPostNotification(@"HMDHomeManagerHomeDataLoadedNotification", v367, 0);
  [v367 autoAddWalletKeysOncePerDeviceSetup];
  [v367 updateHomeKitInUsePreferences];
  long long v404 = [v367 capabilitiesController];
  [v404 didFinishConfiguringHomes];

  long long v405 = [[HMDWidgetTimelineRefresher alloc] initWithHomeManager:v367];
  id v406 = v367[72];
  v367[72] = v405;

  [v367[72] configure];
  [v367 _maybeMessageOwnersOfFrameworkSwitch];
  [v367 requestAccessoryBrowsing];
  v407 = [v367 workQueue];
  v427[0] = MEMORY[0x263EF8330];
  v427[1] = 3221225472;
  v427[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_523;
  v427[3] = &unk_264A2F7F8;
  v427[4] = v367;
  dispatch_async(v407, v427);

  v408 = [v367 pairedAccessories];
  +[HMDCameraSnapshotManager cleanStaleSnapshotDirectoriesUsingCurrentAccessories:v408];

  [v367 _maybeConfigureDuplicateUserModelChecker];
  v409 = (void *)MEMORY[0x263EFFB38];
  if (*((unsigned char *)v367 + 55)) {
    v409 = (void *)MEMORY[0x263EFFB40];
  }
  [v367 _setHomeConfigurationKey:*MEMORY[0x263F0E9D8] value:*v409];
}

void __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = HMFGetLogIdentifier();
    int v6 = 138543362;
    uint64_t v7 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@FMF handler is successfully started", (uint8_t *)&v6, 0xCu);
  }
}

void __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_495(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  id v2 = (void *)MEMORY[0x230FBD990]();
  id v3 = *(id *)(a1 + 32);
  id v4 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = HMFGetLogIdentifier();
    int v6 = 138543362;
    uint64_t v7 = v5;
    _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_INFO, "%{public}@Finished starting the mobile asset manager", (uint8_t *)&v6, 0xCu);
  }
}

uint64_t __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_504(uint64_t a1)
{
  return [*(id *)(a1 + 32) _generateAssistantSyncDataAndIncrementVersion:0 requestSync:0 urgent:0 completion:0];
}

void __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_518(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = [HMDIDSFirewallManagerContext alloc];
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = [MEMORY[0x263F08A00] defaultCenter];
    uint64_t v10 = [*(id *)(a1 + 32) workQueue];
    uint64_t v11 = [(HMDIDSFirewallManagerContext *)v7 initWithHomeManager:v8 IDSFirewall:v5 notificationCenter:v9 workQueue:v10];

    uint64_t v12 = [[HMDIDSFirewallManager alloc] initWithContext:v11];
    [*(id *)(a1 + 32) setIdsFirewallManager:v12];

    uint64_t v13 = [*(id *)(a1 + 32) idsFirewallManager];
    [v13 start];
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x230FBD990]();
    id v15 = *(id *)(a1 + 32);
    double v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v17 = HMFGetLogIdentifier();
      int v18 = 138543618;
      long long v19 = v17;
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl(&dword_22F52A000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to retrieve IDSFirewall with error: %@", (uint8_t *)&v18, 0x16u);
    }
  }
}

uint64_t __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_523(uint64_t a1)
{
  return [*(id *)(a1 + 32) postFinishSetupForCurrentAccessoryFollowUpIfNeeded];
}

- (void)requestAccessoryBrowsing
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ([(HMDHomeManager *)self hasLoadedData]
    && [(HMDHomeManager *)self hasAccessoryBrowsingBeenRequested])
  {
    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = self;
    id v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = HMFGetLogIdentifier();
      int v12 = 138543362;
      uint64_t v13 = v6;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Start discovering paired accessories", (uint8_t *)&v12, 0xCu);
    }
    uint64_t v7 = [(HMDHomeManager *)v4 accessoryBrowser];
    [v7 startDiscoveringPairedAccessories];
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x230FBD990]();
    uint64_t v9 = self;
    uint64_t v10 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = HMFGetLogIdentifier();
      int v12 = 138543874;
      uint64_t v13 = v11;
      __int16 v14 = 1024;
      BOOL v15 = [(HMDHomeManager *)v9 hasLoadedData];
      __int16 v16 = 1024;
      BOOL v17 = [(HMDHomeManager *)v9 hasAccessoryBrowsingBeenRequested];
      _os_log_impl(&dword_22F52A000, v10, OS_LOG_TYPE_INFO, "%{public}@Deferring discovery of paired accessories: hasLoadedData %d browsing requested %d", (uint8_t *)&v12, 0x18u);
    }
  }
}

- (void)setAccessoryBrowsingRequested
{
}

- (void)_migrateUniqueIdentifierPrefsIfNeeded
{
  void v7[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *MEMORY[0x263F0E988];
  v7[0] = @"kAssistantTeamIdentifier";
  v7[1] = v2;
  v7[2] = *MEMORY[0x263F0E990];
  v7[3] = @"kUniqueDeviceIdentifierSaltkey";
  CFArrayRef v3 = [MEMORY[0x263EFF8C0] arrayWithObjects:v7 count:4];
  CFStringRef v4 = (const __CFString *)*MEMORY[0x263EFFE70];
  CFStringRef v5 = (const __CFString *)*MEMORY[0x263EFFE50];
  CFDictionaryRef v6 = CFPreferencesCopyMultiple(v3, @"com.apple.homed", (CFStringRef)*MEMORY[0x263EFFE70], (CFStringRef)*MEMORY[0x263EFFE50]);
  if ([(__CFDictionary *)v6 count])
  {
    CFPreferencesSetMultiple(0, v3, @"com.apple.homed", v4, v5);
    CFPreferencesSetMultiple(v6, 0, @"com.apple.homed.notbackedup", v4, v5);
  }
}

- (id)settingsControllerForAccessoryUUID:(id)a3 homeUUID:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  uint64_t v8 = [(HMDHomeManager *)self _accessoryOfCurrentDevice];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  id v10 = v9;

  uint64_t v11 = [v10 uuid];
  char v12 = objc_msgSend(v11, "hmf_isEqualToUUID:", v7);

  if (v12)
  {
    uint64_t v13 = [v10 home];
    __int16 v14 = [v13 uuid];
    int v15 = objc_msgSend(v14, "hmf_isEqualToUUID:", v6);

    if (v15)
    {
      __int16 v16 = [v10 currentAccessorySettingsController];
      goto LABEL_9;
    }
  }
  else
  {
  }
  __int16 v16 = 0;
LABEL_9:

  return v16;
}

- (id)languageListProviderForHomeUUID:(id)a3
{
  CFArrayRef v3 = [(HMDHomeManager *)self _homeWithUUID:a3];
  CFStringRef v4 = [v3 unifiedLanguageValueListSettingDataProvider];

  return v4;
}

- (NSString)currentEventSource
{
  uint64_t v2 = [(HMDHomeManager *)self appleAccountManager];
  CFArrayRef v3 = [v2 device];

  if (v3)
  {
    CFStringRef v4 = [v3 identifier];
    CFStringRef v5 = [v4 UUIDString];
  }
  else
  {
    CFStringRef v4 = [MEMORY[0x263F08C38] UUID];
    id v6 = [v4 UUIDString];
    CFStringRef v5 = [@"DeviceNotDetermined." stringByAppendingString:v6];
  }
  return (NSString *)v5;
}

- (void)invalidate
{
  CFArrayRef v3 = [(HMDHomeManager *)self notificationCenter];
  [v3 removeObserver:self];

  CFStringRef v4 = [(HMDHomeManager *)self messageDispatcher];
  [v4 deregisterReceiver:self];

  if (self->_generationCounterToken != -1)
  {
    CFStringRef v5 = [(HMDHomeManager *)self darwinNotificationProvider];
    [v5 notifyCancel:self->_generationCounterToken];
  }
  [(HMDHomeManager *)self deregisterForSignificantTimeChangeNotification];
}

- (void)dealloc
{
  [(HMDHomeManager *)self invalidate];
  v3.receiver = self;
  v3.super_class = (Class)HMDHomeManager;
  [(HMDHomeManager *)&v3 dealloc];
}

- (HMDHomeManager)initWithMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 metricsManager:(id)a10 darwinNotificationProvider:(id)a11 notificationCenter:(id)a12 backingStoreFactory:(id)a13 wifiManagerFactory:(id)a14 appleAccountManager:(id)a15 remoteAccountManager:(id)a16 userDefaults:(id)a17 biomeEventManager:(id)a18 logEventSubmitter:(id)a19 widgetConfigurationReader:(id)a20 configuringStateController:(id)a21 diagnosticInfoController:(id)a22 currentAccessorySetupMetricDispatcher:(id)a23 uncommittedTransactions:(id)a24
{
  BOOL v218 = a7;
  v271[1] = *MEMORY[0x263EF8340];
  id v243 = a3;
  id v242 = a4;
  id v27 = a5;
  id v241 = a6;
  id v240 = a8;
  id v238 = a9;
  id v237 = a10;
  id v231 = a11;
  id v230 = a12;
  id v236 = a13;
  aBlocuint64_t k = a14;
  id v229 = a15;
  id v228 = a16;
  id v227 = a17;
  id v226 = a18;
  id v225 = a19;
  id v224 = a20;
  id v223 = a21;
  id v222 = a22;
  id v221 = a23;
  id v234 = a24;
  HMFUptime();
  double v29 = v28;
  __int16 v30 = [(HMDHomeManager *)self init];
  if (v30)
  {
    id v220 = v27;
    uint64_t v31 = (void *)MEMORY[0x230FBD990]();
    uint64_t v217 = v30;
    __int16 v32 = v30;
    uint64_t v33 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      __int16 v34 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138544386;
      __int16 v249 = v34;
      __int16 v250 = 2114;
      __int16 v251 = @"homeManagerInitStart";
      __int16 v252 = 2112;
      v253 = @"Initializing HomeManager";
      __int16 v254 = 2114;
      uint64_t v255 = @"state";
      __int16 v256 = 2112;
      uint64_t v257 = @"start";
      _os_log_impl(&dword_22F52A000, v33, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
    }
    long long v35 = [MEMORY[0x263F499E0] sharedInstance];
    id v36 = objc_alloc(MEMORY[0x263F499F0]);
    v270 = @"state";
    v271[0] = @"start";
    long long v37 = [NSDictionary dictionaryWithObjects:v271 forKeys:&v270 count:1];
    __int16 v38 = (void *)[v36 initWithTag:@"homeManagerInitStart" data:v37];
    long long v39 = [MEMORY[0x263F424F0] currentTagProcessorList];
    [v35 submitTaggedEvent:v38 processorList:v39];

    [v237 setHomeManager:v32];
    objc_storeStrong((id *)&v32->_metricsManager, a10);
    objc_storeStrong((id *)&v32->_darwinNotificationProvider, a11);
    objc_storeStrong((id *)&v32->_notificationCenter, a12);
    objc_storeStrong((id *)&v32->_appleAccountManager, a15);
    objc_storeStrong((id *)&v32->_remoteAccountManager, a16);
    objc_storeStrong((id *)&v32->_userDefaults, a17);
    objc_storeStrong((id *)&v32->_biomeEventManager, a18);
    objc_storeStrong((id *)&v32->_logEventSubmitter, a19);
    objc_storeStrong((id *)&v32->_widgetConfigurationReader, a20);
    objc_storeStrong((id *)&v32->_configuringStateController, a21);
    objc_storeStrong((id *)&v32->_appleMediaAccessoryDiagnosticInfoController, a22);
    objc_storeStrong((id *)&v32->_currentAccessorySetupMetricDispatcher, a23);
    uint64_t v40 = _Block_copy(aBlock);
    id wifiManagerFactory = v32->_wifiManagerFactory;
    v32->_id wifiManagerFactory = v40;

    v32->_hh2MigrationInProgress = 0;
    id v42 = +[HMDBackingStoreSingleton sharedInstance];
    [v42 setHomeManager:v32];

    uint64_t v43 = HMFGetOSLogHandle();
    logger = v32->_logger;
    v32->_logger = (OS_os_log *)v43;

    uint64_t v45 = [MEMORY[0x263EFF980] array];
    deviceSetupSessions = v32->_deviceSetupSessions;
    v32->_deviceSetupSessions = (NSMutableArray *)v45;

    dispatch_suspend((dispatch_object_t)v32->_workQueue);
    [(HMDHomeManager *)v32 initHomeManagerStartup];
    v32->_generationCounterTokeuint64_t n = -1;
    long long v47 = [(NSUserDefaults *)v32->_userDefaults objectForKey:@"HMDCurrentAccessorySetupStartUptimeKey"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v48 = v47;
    }
    else {
      id v48 = 0;
    }
    id v49 = v48;

    if (v49)
    {
      [v49 doubleValue];
      double v51 = v50;
      if (fabs(v50) >= 2.22044605e-16)
      {
        double v52 = (double)(clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) / 0x3B9ACA00);
        id v53 = (void *)MEMORY[0x230FBD990]();
        uint64_t v54 = v32;
        uint64_t v55 = HMFGetOSLogHandle();
        BOOL v56 = os_log_type_enabled(v55, OS_LOG_TYPE_INFO);
        if (v51 <= v52)
        {
          if (v56)
          {
            __int16 v58 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            __int16 v249 = v58;
            __int16 v250 = 2048;
            __int16 v251 = *(__CFString **)&v51;
            _os_log_impl(&dword_22F52A000, v55, OS_LOG_TYPE_INFO, "%{public}@Loaded stored current accessory setup timestamp: %f", buf, 0x16u);
          }
          os_unfair_lock_lock_with_options();
          *(double *)&v54[36]._os_unfair_lock_opaque = v51;
          os_unfair_lock_unlock(v54 + 12);
        }
        else
        {
          if (v56)
          {
            id v57 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543362;
            __int16 v249 = v57;
            _os_log_impl(&dword_22F52A000, v55, OS_LOG_TYPE_INFO, "%{public}@Resetting current accessory setup timestamp to 0 as a reboot was detected", buf, 0xCu);
          }
          [(os_unfair_lock_s *)v54 setSetupStartTimestamp:0.0];
        }
      }
    }

    uint64_t v59 = [(NSUserDefaults *)v32->_userDefaults objectForKey:@"HMDCurrentAccessorySetupEndUptimeKey"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v60 = v59;
    }
    else {
      uint64_t v60 = 0;
    }
    id v61 = v60;

    if (v61)
    {
      [v61 doubleValue];
      double v63 = v62;
      if (fabs(v62) >= 2.22044605e-16)
      {
        double v64 = (double)(clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) / 0x3B9ACA00);
        id v65 = (void *)MEMORY[0x230FBD990]();
        uint64_t v66 = v32;
        long long v67 = HMFGetOSLogHandle();
        BOOL v68 = os_log_type_enabled(v67, OS_LOG_TYPE_INFO);
        if (v63 <= v64)
        {
          if (v68)
          {
            id v70 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543618;
            __int16 v249 = v70;
            __int16 v250 = 2048;
            __int16 v251 = *(__CFString **)&v63;
            _os_log_impl(&dword_22F52A000, v67, OS_LOG_TYPE_INFO, "%{public}@Loaded stored current accessory setup end timestamp: %f", buf, 0x16u);
          }
          os_unfair_lock_lock_with_options();
          *(double *)&v66[38]._os_unfair_lock_opaque = v63;
          os_unfair_lock_unlock(v66 + 12);
        }
        else
        {
          if (v68)
          {
            long long v69 = HMFGetLogIdentifier();
            *(_DWORD *)long long buf = 138543362;
            __int16 v249 = v69;
            _os_log_impl(&dword_22F52A000, v67, OS_LOG_TYPE_INFO, "%{public}@Resetting current accessory setup end timestamp to 0 as a reboot was detected", buf, 0xCu);
          }
          [(os_unfair_lock_s *)v66 setSetupEndTimestamp:0.0];
        }
      }
    }

    if ([(HMDHomeManager *)v32 firstCloudKitImportComplete])
    {
      id v71 = [(HMDHomeManager *)v32 currentAccessorySetupMetricDispatcher];
      [v71 markSetupEndStage:13 error:0];
    }
    uint64_t v72 = [[HMDUserCloudShareManager alloc] initWithHomeManager:v32];
    userCloudShareManager = v32->_userCloudShareManager;
    v32->_userCloudShareManager = v72;

    id v74 = [[HMDMultiUserStatusController alloc] initWithQueue:v32->_workQueue delegate:v32];
    multiUserStatusController = v32->_multiUserStatusController;
    v32->_multiUserStatusController = v74;

    long long v76 = objc_alloc_init(HMDIDSServerBag);
    idsServerBag = v32->_idsServerBag;
    v32->_idsServerBag = v76;

    [(HMDIDSServerBag *)v32->_idsServerBag setDelegate:v32];
    long long v78 = [[HMDCapabilitiesController alloc] initWithQueue:v32->_workQueue dataSource:v32];
    capabilitiesController = v32->_capabilitiesController;
    v32->_capabilitiesController = v78;

    __int16 v80 = objc_alloc_init(HMDMemoryUtilizationTracker);
    memoryTracker = v32->_memoryTracker;
    v32->_memoryTracker = v80;

    __int16 v82 = [(HMDHomeManager *)v32 userDefaults];
    uint64_t v83 = [v82 stringForKey:@"HMDLastRemovedCurrentAccessoryUUIDKey"];

    if (v83)
    {
      uint64_t v84 = [objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v83];
      lastRemovedCurrentAccessoryUUID = v32->_lastRemovedCurrentAccessoryUUID;
      v32->_lastRemovedCurrentAccessoryUUID = (NSUUID *)v84;
    }
    id v233 = (id)v83;
    uint64_t v86 = [objc_alloc(MEMORY[0x263F42658]) initWithTimeInterval:0 options:5.0];
    debounceHomesUpdateTimer = v32->_debounceHomesUpdateTimer;
    v32->_debounceHomesUpdateTimer = (HMFTimer *)v86;

    [(HMFTimer *)v32->_debounceHomesUpdateTimer setDelegate:v32];
    __int16 v88 = v32->_debounceHomesUpdateTimer;
    uint64_t v89 = [(HMDHomeManager *)v32 workQueue];
    [(HMFTimer *)v88 setDelegateQueue:v89];

    __int16 v90 = [MEMORY[0x263F42608] sharedPreferences];
    uint64_t v91 = [v90 preferenceForKey:@"assistantSyncDataCoalescePeriodMilliseconds"];
    uint64_t v92 = [v91 numberValue];

    id v232 = v92;
    [v92 doubleValue];
    uint64_t v94 = [objc_alloc(MEMORY[0x263F42658]) initWithTimeInterval:0 options:v93 / 1000.0];
    debounceRegenerateAssistantSyncDataTimer = v32->_debounceRegenerateAssistantSyncDataTimer;
    v32->_debounceRegenerateAssistantSyncDataTimer = (HMFTimer *)v94;

    [(HMFTimer *)v32->_debounceRegenerateAssistantSyncDataTimer setDelegate:v32];
    uint64_t v96 = v32->_debounceRegenerateAssistantSyncDataTimer;
    double v97 = [(HMDHomeManager *)v32 workQueue];
    [(HMFTimer *)v96 setDelegateQueue:v97];

    uint64_t v98 = HMFUptime();
    double v100 = v99;
    uint64_t v101 = (void *)MEMORY[0x230FBD990](v98);
    uint64_t v102 = v32;
    char v103 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
    {
      id v104 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138544386;
      __int16 v249 = v104;
      __int16 v250 = 2114;
      __int16 v251 = @"homeManagerInitStart";
      __int16 v252 = 2112;
      v253 = @"Initialize HH2 FW switch";
      __int16 v254 = 2114;
      uint64_t v255 = @"state";
      __int16 v256 = 2112;
      uint64_t v257 = @"homeManagerHH2FWSwitch";
      _os_log_impl(&dword_22F52A000, v103, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
    }
    id v105 = [MEMORY[0x263F499E0] sharedInstance];
    id v106 = objc_alloc(MEMORY[0x263F499F0]);
    v268 = @"state";
    v269 = @"homeManagerHH2FWSwitch";
    uint64_t v107 = [NSDictionary dictionaryWithObjects:&v269 forKeys:&v268 count:1];
    id v108 = (void *)[v106 initWithTag:@"homeManagerInitStart" data:v107];
    uint64_t v109 = [MEMORY[0x263F424F0] currentTagProcessorList];
    [v105 submitTaggedEvent:v108 processorList:v109];

    long long v110 = (void *)MEMORY[0x230FBD990]();
    [(HMDHomeManager *)v102 initializeHH2FrameworkSwitch];
    uint64_t v111 = +[HMDDeviceSetupManager sharedManager];
    long long v112 = [v111 followUpManager];
    [v112 stopAdvertising:2];

    uint64_t v113 = [(HMDHomeManager *)v102 notificationCenter];
    [v113 addObserver:v102 selector:sel__handleHH2SentinelZonePresent_ name:@"HMDHomeManagerHH2SentinelZonePresent" object:0];

    long long v114 = (void *)MEMORY[0x230FBD990]();
    uint64_t v115 = v102;
    uint64_t v116 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
    {
      uint64_t v117 = HMFGetLogIdentifier();
      __int16 v118 = NSString;
      HMFUptime();
      char v120 = objc_msgSend(v118, "stringWithFormat:", @"%.3f", v119 - v100);
      *(_DWORD *)long long buf = 138544898;
      __int16 v249 = v117;
      __int16 v250 = 2114;
      __int16 v251 = @"homeManagerInitStart";
      __int16 v252 = 2112;
      v253 = @"Initialized HH2 FW switch";
      __int16 v254 = 2114;
      uint64_t v255 = @"state";
      __int16 v256 = 2112;
      uint64_t v257 = @"homeManagerHH2FWSwitchDone";
      __int16 v258 = 2114;
      uint64_t v259 = @"duration";
      __int16 v260 = 2112;
      uint64_t v261 = v120;
      _os_log_impl(&dword_22F52A000, v116, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x48u);
    }
    uint64_t v121 = [MEMORY[0x263F499E0] sharedInstance];
    id v122 = objc_alloc(MEMORY[0x263F499F0]);
    uint64_t v123 = NSString;
    HMFUptime();
    uint64_t v125 = objc_msgSend(v123, "stringWithFormat:", @"%.3f", v124 - v100);
    __int16 v126 = HMDTaggedLoggingCreateDictionary();
    uint64_t v127 = objc_msgSend(v122, "initWithTag:data:", @"homeManagerInitStart", v126, @"state", @"homeManagerHH2FWSwitchDone", @"duration", v125);
    uint64_t v128 = [MEMORY[0x263F424F0] currentTagProcessorList];
    [v121 submitTaggedEvent:v127 processorList:v128];

    uint64_t v129 = HMFUptime();
    double v131 = v130;
    dispatch_queue_t v132 = (void *)MEMORY[0x230FBD990](v129);
    uint64_t v133 = v115;
    double v134 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v135 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138544386;
      __int16 v249 = v135;
      __int16 v250 = 2114;
      __int16 v251 = @"homeManagerInitStart";
      __int16 v252 = 2112;
      v253 = @"Loading Home Manager";
      __int16 v254 = 2114;
      uint64_t v255 = @"state";
      __int16 v256 = 2112;
      uint64_t v257 = @"homeManagerLoading";
      _os_log_impl(&dword_22F52A000, v134, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
    }
    uint64_t v136 = [MEMORY[0x263F499E0] sharedInstance];
    id v137 = objc_alloc(MEMORY[0x263F499F0]);
    v266 = @"state";
    uint64_t v267 = @"homeManagerLoading";
    uint64_t v138 = [NSDictionary dictionaryWithObjects:&v267 forKeys:&v266 count:1];
    long long v139 = (void *)[v137 initWithTag:@"homeManagerInitStart" data:v138];
    uint64_t v140 = [MEMORY[0x263F424F0] currentTagProcessorList];
    [v136 submitTaggedEvent:v139 processorList:v140];

    uint64_t v141 = (void *)MEMORY[0x230FBD990]();
    LOBYTE(v216) = 0;
    [(HMDHomeManager *)v133 _loadMessageDispatcher:v243 accessoryBrowser:v242 messageFilterChain:v220 homeData:v241 localDataDecryptionFailed:v218 identityRegistry:v240 accountRegistry:v238 uncommittedTransactions:v234 backingStoreFactory:v236 reloadData:v216];
    uint64_t v142 = (void *)MEMORY[0x230FBD990]();
    uint64_t v143 = v133;
    uint64_t v144 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v144, OS_LOG_TYPE_INFO))
    {
      uint64_t v145 = HMFGetLogIdentifier();
      uint64_t v146 = NSString;
      HMFUptime();
      uint64_t v148 = objc_msgSend(v146, "stringWithFormat:", @"%.3f", v147 - v131);
      uint64_t v149 = NSNumber;
      uint64_t v150 = [(HMDHomeManager *)v143 homes];
      id v151 = objc_msgSend(v149, "numberWithUnsignedInteger:", objc_msgSend(v150, "count"));
      *(_DWORD *)long long buf = 138545410;
      __int16 v249 = v145;
      __int16 v250 = 2114;
      __int16 v251 = @"homeManagerInitStart";
      __int16 v252 = 2112;
      v253 = @"Loaded Home Manager, resuming work queue";
      __int16 v254 = 2114;
      uint64_t v255 = @"state";
      __int16 v256 = 2112;
      uint64_t v257 = @"homeManagerLoaded";
      __int16 v258 = 2114;
      uint64_t v259 = @"duration";
      __int16 v260 = 2112;
      uint64_t v261 = v148;
      __int16 v262 = 2114;
      uint64_t v263 = @"homesCount";
      __int16 v264 = 2112;
      v265 = v151;
      _os_log_impl(&dword_22F52A000, v144, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x5Cu);
    }
    int v152 = [MEMORY[0x263F499E0] sharedInstance];
    id v153 = objc_alloc(MEMORY[0x263F499F0]);
    id v154 = NSString;
    HMFUptime();
    uint64_t v156 = objc_msgSend(v154, "stringWithFormat:", @"%.3f", v155 - v131);
    long long v157 = NSNumber;
    int v158 = [(HMDHomeManager *)v143 homes];
    uint64_t v159 = objc_msgSend(v157, "numberWithUnsignedInteger:", objc_msgSend(v158, "count"));
    uint64_t v160 = HMDTaggedLoggingCreateDictionary();
    BOOL v161 = objc_msgSend(v153, "initWithTag:data:", @"homeManagerInitStart", v160, @"state", @"homeManagerLoaded", @"duration", v156, @"homesCount", v159);
    BOOL v162 = [MEMORY[0x263F424F0] currentTagProcessorList];
    [v152 submitTaggedEvent:v161 processorList:v162];

    dispatch_resume((dispatch_object_t)v32->_workQueue);
    char v163 = [(HMDHomeManager *)v143 notificationCenter];
    [v163 addObserver:v143 selector:sel_cloudHomeSettingsUpdated_ name:@"HMDAppleAccountSettingsHomeStateUpdatedNotification" object:0];

    uint64_t v164 = [(HMDHomeManager *)v143 notificationCenter];
    [v164 addObserver:v143 selector:sel___handleDeviceCapabilitiesUpdated_ name:@"HMDDeviceCapabilitiiesUpdatedNotification" object:0];

    double v165 = [(HMDHomeManager *)v143 notificationCenter];
    double v166 = [(HMDHomeManager *)v143 appleAccountManager];
    [v165 addObserver:v143 selector:sel___handleUpdatedCurrentDevice_ name:@"HMDAppleAccountManagerDeviceUpdatedNotification" object:v166];

    id v167 = [(HMDHomeManager *)v143 notificationCenter];
    [v167 addObserver:v143 selector:sel__handleCurrentAccessoryRemovedNotification_ name:@"HMDHomeManagerDidRemoveCurrentAccessoryNotification" object:0];

    uint64_t v168 = [(HMDHomeManager *)v143 notificationCenter];
    [v168 addObserver:v143 selector:sel__handleCurrentAccessoryAddedNotification_ name:@"HMDHomeManagerDidAddCurrentAccessoryNotification" object:0];

    uint64_t v169 = [(HMDHomeManager *)v143 notificationCenter];
    [v169 addObserver:v143 selector:sel_handleHomeManagerHasFinishedStartingUp_ name:@"HMDHomeManagerHasFinishedStartingUpNotification" object:0];

    [(HMDHomeManager *)v143 registerForNPSPreferenceChanges];
    [(HMDHomeManager *)v143 checkForRemotePeers];
    [(HMDHomeManager *)v143 registerForSignificantTimeChangeNotification];
    double v170 = +[HMDAppleAccountManager sharedManager];
    LODWORD(v162) = [v170 isLoggedInToPrimaryAccount];

    if (v162)
    {
      double v171 = [(HMDHomeManager *)v143 bgOpsManager];
      [v171 scheduleHH2KeyRollIfNecessary];

      uint64_t v172 = [(HMDHomeManager *)v143 bgOpsManager];
      +[HMDBackgroundOperationManagerHelper makeSureToCreateBackUpOfHH2KeysIfNecessary:v172];
    }
    long long v173 = [HMDSharedUserProfilePhotoManager alloc];
    long long v174 = +[HMDCoreDataCloudTransform sharedInstance];
    long long v175 = [(HMDSharedUserProfilePhotoManager *)v173 initWithCloudTransform:v174 delegate:v143];

    id v176 = (void *)MEMORY[0x230FBD990]([(HMDSharedUserProfilePhotoManager *)v175 configure]);
    double v177 = v143;
    long long v178 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
    {
      int v179 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138544386;
      __int16 v249 = v179;
      __int16 v250 = 2114;
      __int16 v251 = @"homeManagerInitStart";
      __int16 v252 = 2112;
      v253 = @"Fetch and update PCS status";
      __int16 v254 = 2114;
      uint64_t v255 = @"state";
      __int16 v256 = 2112;
      uint64_t v257 = @"homeManagerFetchPCS";
      _os_log_impl(&dword_22F52A000, v178, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
    }
    long long v180 = [MEMORY[0x263F499E0] sharedInstance];
    id v181 = objc_alloc(MEMORY[0x263F499F0]);
    double v246 = @"state";
    v247 = @"homeManagerFetchPCS";
    long long v182 = [NSDictionary dictionaryWithObjects:&v247 forKeys:&v246 count:1];
    uint64_t v183 = (void *)[v181 initWithTag:@"homeManagerInitStart" data:v182];
    long long v184 = [MEMORY[0x263F424F0] currentTagProcessorList];
    [v180 submitTaggedEvent:v183 processorList:v184];

    long long v185 = (void *)MEMORY[0x230FBD990]([(HMDHomeManager *)v177 fetchAndUpdatePCSStatus]);
    long long v186 = v177;
    __int16 v187 = HMFGetOSLogHandle();
    id v27 = v220;
    if (os_log_type_enabled(v187, OS_LOG_TYPE_INFO))
    {
      id v188 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138544386;
      __int16 v249 = v188;
      __int16 v250 = 2114;
      __int16 v251 = @"homeManagerInitStart";
      __int16 v252 = 2112;
      v253 = @"Fetched and updated PCS status";
      __int16 v254 = 2114;
      uint64_t v255 = @"state";
      __int16 v256 = 2112;
      uint64_t v257 = @"homeManagerFetchedPCS";
      _os_log_impl(&dword_22F52A000, v187, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\"", buf, 0x34u);
    }
    uint64_t v189 = [MEMORY[0x263F499E0] sharedInstance];
    id v190 = objc_alloc(MEMORY[0x263F499F0]);
    id v244 = @"state";
    v245 = @"homeManagerFetchedPCS";
    __int16 v191 = [NSDictionary dictionaryWithObjects:&v245 forKeys:&v244 count:1];
    id v192 = (void *)[v190 initWithTag:@"homeManagerInitStart" data:v191];
    uint64_t v193 = [MEMORY[0x263F424F0] currentTagProcessorList];
    [v189 submitTaggedEvent:v192 processorList:v193];

    __int16 v30 = v217;
  }
  uint64_t v194 = (void *)MEMORY[0x230FBD990]();
  uint64_t v195 = v30;
  uint64_t v196 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v196, OS_LOG_TYPE_INFO))
  {
    uint64_t v197 = HMFGetLogIdentifier();
    id v198 = NSString;
    HMFUptime();
    uint64_t v200 = objc_msgSend(v198, "stringWithFormat:", @"%.3f", v199 - v29);
    int v201 = NSNumber;
    uint64_t v202 = [(HMDHomeManager *)v195 homes];
    __int16 v203 = objc_msgSend(v201, "numberWithUnsignedInteger:", objc_msgSend(v202, "count"));
    *(_DWORD *)long long buf = 138545410;
    __int16 v249 = v197;
    __int16 v250 = 2114;
    __int16 v251 = @"homeManagerInitDone";
    __int16 v252 = 2112;
    v253 = @"Initialized HomeManager";
    __int16 v254 = 2114;
    uint64_t v255 = @"state";
    __int16 v256 = 2112;
    uint64_t v257 = @"end";
    __int16 v258 = 2114;
    uint64_t v259 = @"duration";
    __int16 v260 = 2112;
    uint64_t v261 = v200;
    __int16 v262 = 2114;
    uint64_t v263 = @"homesCount";
    __int16 v264 = 2112;
    v265 = v203;
    _os_log_impl(&dword_22F52A000, v196, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\"", buf, 0x5Cu);
  }
  __int16 v204 = [MEMORY[0x263F499E0] sharedInstance];
  id v205 = objc_alloc(MEMORY[0x263F499F0]);
  __int16 v206 = NSString;
  HMFUptime();
  int v208 = objc_msgSend(v206, "stringWithFormat:", @"%.3f", v207 - v29);
  uint64_t v209 = NSNumber;
  BOOL v210 = [(HMDHomeManager *)v195 homes];
  uint64_t v211 = objc_msgSend(v209, "numberWithUnsignedInteger:", objc_msgSend(v210, "count"));
  v212 = HMDTaggedLoggingCreateDictionary();
  uint64_t v213 = objc_msgSend(v205, "initWithTag:data:", @"homeManagerInitDone", v212, @"state", @"end", @"duration", v208, @"homesCount", v211);
  v214 = [MEMORY[0x263F424F0] currentTagProcessorList];
  [v204 submitTaggedEvent:v213 processorList:v214];

  return v195;
}

- (HMDHomeManager)initWithMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 metricsManager:(id)a10 configuringStateController:(id)a11 diagnosticInfoController:(id)a12 currentAccessorySetupMetricDispatcher:(id)a13 uncommittedTransactions:(id)a14
{
  BOOL v36 = a7;
  uint64_t v18 = (objc_class *)MEMORY[0x263F0E2C0];
  id v34 = a14;
  id v33 = a13;
  id v31 = a12;
  id v29 = a11;
  id v19 = a10;
  id v30 = a9;
  id v32 = a8;
  id v28 = a6;
  id v27 = a5;
  id v42 = a4;
  id v41 = a3;
  id v39 = objc_alloc_init(v18);
  __int16 v38 = [MEMORY[0x263F08A00] defaultCenter];
  long long v26 = +[HMDAppleAccountManager sharedManager];
  long long v25 = +[HMDRemoteAccountManager sharedManager];
  long long v24 = [MEMORY[0x263EFFA40] standardUserDefaults];
  long long v23 = objc_alloc_init(HMDBiomeEventManager);
  __int16 v20 = [v19 logEventSubmitter];
  uint64_t v22 = objc_alloc_init(HMDWidgetConfigurationReader);
  long long v37 = -[HMDHomeManager initWithMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:metricsManager:darwinNotificationProvider:notificationCenter:backingStoreFactory:wifiManagerFactory:appleAccountManager:remoteAccountManager:userDefaults:biomeEventManager:logEventSubmitter:widgetConfigurationReader:configuringStateController:diagnosticInfoController:currentAccessorySetupMetricDispatcher:uncommittedTransactions:](self, "initWithMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:metricsManager:darwinNotificationProvider:notificationCenter:backingStoreFactory:wifiManagerFactory:appleAccountManager:remoteAccountManager:userDefaults:biomeEventManager:logEventSubmitter:widgetConfigurationReader:configuringStateController:diagnosticInfoController:currentAccessorySetupMetricDispatcher:uncommittedTransactions:", v41, v42, v27, v28, v36, v32, v30, v19, v39, v38, &__block_literal_global_243852, &__block_literal_global_341_243853, v26,
          v25,
          v24,
          v23,
          v20,
          v22,
          v29,
          v31,
          v33,
          v34);

  return v37;
}

uint64_t __277__HMDHomeManager_initWithMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_metricsManager_configuringStateController_diagnosticInfoController_currentAccessorySetupMetricDispatcher_uncommittedTransactions___block_invoke_2()
{
  return [MEMORY[0x263F42680] sharedManager];
}

id __277__HMDHomeManager_initWithMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_metricsManager_configuringStateController_diagnosticInfoController_currentAccessorySetupMetricDispatcher_uncommittedTransactions___block_invoke()
{
  return +[HMDBackingStore cdlsBackingStoreForHomeManagerWithError:](HMDBackingStore, "cdlsBackingStoreForHomeManagerWithError:");
}

- (HMDHomeManager)init
{
  v23.receiver = self;
  v23.super_class = (Class)HMDHomeManager;
  uint64_t v2 = [(HMDHomeManager *)&v23 init];
  if (v2)
  {
    objc_super v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v4 = dispatch_queue_create("com.apple.hmd.hmgr", v3);
    workQueue = v2->_workQueue;
    v2->_workQueue = (OS_dispatch_queue *)v4;

    uint64_t v6 = [objc_alloc(MEMORY[0x263F42520]) initWithQueue:v2->_workQueue alwaysDispatch:1];
    workContext = v2->_workContext;
    v2->_workContext = (HMFAsyncContext *)v6;

    v2->_lock._os_unfair_lock_opaque = 0;
    uint64_t v8 = [objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:@"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"];
    uuid = v2->_uuid;
    v2->_uuid = (NSUUID *)v8;

    uint64_t v10 = [MEMORY[0x263F08968] strongToStrongObjectsMapTable];
    homeUUIDsByWalletKeyAssertionXPCConnectiouint64_t n = v2->_homeUUIDsByWalletKeyAssertionXPCConnection;
    v2->_homeUUIDsByWalletKeyAssertionXPCConnectiouint64_t n = (NSMapTable *)v10;

    uint64_t v12 = [MEMORY[0x263EFF9A0] dictionary];
    currentHomeConfigurations = v2->_currentHomeConfigurations;
    v2->_currentHomeConfigurations = (NSMutableDictionary *)v12;

    uint64_t v14 = [MEMORY[0x263EFFA40] standardUserDefaults];
    userDefaults = v2->_userDefaults;
    v2->_userDefaults = (NSUserDefaults *)v14;

    __int16 v16 = [[HMDCHIPXPCListener alloc] initWithHomeManager:v2];
    chipXPCListener = v2->_chipXPCListener;
    v2->_chipXPCListener = v16;

    uint64_t v18 = [[HMDMatterXPCListener alloc] initWithHomeManager:v2];
    matterXPCListener = v2->_matterXPCListener;
    v2->_matterXPCListener = v18;

    __int16 v20 = [[HMDBackgroundOperationManager alloc] initWithHomeManager:v2];
    bgOpsManager = v2->_bgOpsManager;
    v2->_bgOpsManager = v20;

    v2->_hasAccessoryBrowsingBeenRequested = 0;
  }
  return v2;
}

+ (id)emptyModelObjectWithChangeType:(unint64_t)a3 homeManagerUUID:(id)a4
{
  id v5 = a4;
  uint64_t v6 = [(HMDBackingStoreModelObject *)[HMDHomeManagerModel alloc] initWithObjectChangeType:a3 uuid:v5 parentUUID:0];

  return v6;
}

+ (id)getAllBackingStoreObjects:(int64_t)a3 primaryHomeUUID:(id)a4 cloudZone:(id)a5 appData:(id)a6
{
  id v9 = a4;
  id v10 = a5;
  id v11 = a6;
  uint64_t v12 = [MEMORY[0x263EFF980] array];
  uint64_t v13 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:@"1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"];
  uint64_t v14 = [(id)objc_opt_class() emptyModelObjectWithChangeType:1 homeManagerUUID:v13];
  if (v9)
  {
    int v15 = [v9 UUIDString];
    [v14 setPrimaryHomeUUID:v15];
  }
  __int16 v16 = +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:v10];
  [v14 setCloudZoneInformation:v16];

  [v12 addObject:v14];
  if (a3 >= 3 && v11)
  {
    BOOL v17 = [v11 modelObjectWithChangeType:1];
    [v12 addObject:v17];
  }
  return v12;
}

+ (id)allowedClassesForAccessAllowedWhenLockedArchive
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x263EFFA08];
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  objc_super v3 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v6 count:3];
  dispatch_queue_t v4 = objc_msgSend(v2, "setWithArray:", v3, v6, v7);

  return v4;
}

+ (id)remotePeerDeviceAddress:(id)a3
{
  objc_super v3 = (void *)IDSCopyIDForDevice();
  if (v3)
  {
    dispatch_queue_t v4 = (void *)[objc_alloc(MEMORY[0x263F089D8]) initWithString:v3];
    objc_msgSend(v4, "replaceOccurrencesOfString:withString:options:range:", @"self-token", @"token", 1, 0, objc_msgSend(v4, "length"));
  }
  else
  {
    dispatch_queue_t v4 = 0;
  }

  return v4;
}

+ (id)saltForDeviceSpecificIdentifier
{
  id v2 = (id)uniqueDeviceId;
  objc_super v3 = objc_msgSend(v2, "hm_generateSHA1");

  return v3;
}

+ (id)createIdentifierSalt:(id)a3 deviceSpecific:(BOOL)a4
{
  id v4 = a3;
  isWatch();
  id v5 = +[HMDHomeManager saltForDeviceSpecificIdentifier];
  if (v5)
  {
    uint64_t v6 = (void *)[v4 mutableCopy];
    [v6 appendData:v5];
    uint64_t v7 = objc_msgSend(v6, "hm_generateSHA1");
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

+ (id)_getIntentGroupClientIdentifierSalt
{
  id v2 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:@"F28CD9BC-565D-4CA8-980A-6B1680D76593"];
  objc_super v3 = objc_msgSend(v2, "hm_convertToData");

  return v3;
}

+ (id)deriveIntentGroupIdentifierFromBaseUUID:(id)a3
{
  objc_super v3 = (void *)MEMORY[0x263F08C38];
  id v4 = a3;
  id v5 = +[HMDHomeManager _getIntentGroupClientIdentifierSalt];
  uint64_t v6 = objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v4, v5);

  return v6;
}

+ (id)getUniqueDeviceIdSalt
{
  id v2 = (void *)CFPreferencesCopyAppValue(@"kUniqueDeviceIdentifierSaltkey", @"com.apple.homed.notbackedup");
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }

  return v3;
}

+ (BOOL)doesSaveReasonNotAffectLocalData:(id)a3
{
  uint64_t v3 = doesSaveReasonNotAffectLocalData__onceToken;
  id v4 = a3;
  if (v3 != -1) {
    dispatch_once(&doesSaveReasonNotAffectLocalData__onceToken, &__block_literal_global_582);
  }
  char v5 = [(id)doesSaveReasonNotAffectLocalData___noLocalReason containsObject:v4];

  return v5;
}

void __51__HMDHomeManager_doesSaveReasonNotAffectLocalData___block_invoke()
{
  v4[1] = *MEMORY[0x263EF8340];
  v0 = (void *)MEMORY[0x263EFFA08];
  v4[0] = @"MetadataUpdate";
  uint64_t v1 = [MEMORY[0x263EFF8C0] arrayWithObjects:v4 count:1];
  uint64_t v2 = [v0 setWithArray:v1];
  uint64_t v3 = (void *)doesSaveReasonNotAffectLocalData___noLocalReason;
  doesSaveReasonNotAffectLocalData___noLocalReasouint64_t n = v2;
}

+ (BOOL)shouldIgnoreExpectedConfigurationVersionUpdateForReason:(id)a3
{
  uint64_t v3 = shouldIgnoreExpectedConfigurationVersionUpdateForReason__pred;
  id v4 = a3;
  if (v3 != -1) {
    dispatch_once(&shouldIgnoreExpectedConfigurationVersionUpdateForReason__pred, &__block_literal_global_580);
  }
  char v5 = [(id)shouldIgnoreExpectedConfigurationVersionUpdateForReason___ignoredReasons containsObject:v4];

  return v5;
}

void __74__HMDHomeManager_shouldIgnoreExpectedConfigurationVersionUpdateForReason___block_invoke()
{
  void v4[2] = *MEMORY[0x263EF8340];
  v0 = (void *)MEMORY[0x263EFFA08];
  v4[0] = @"userUserIDUpdated";
  v4[1] = @"userUpdateAccountIdentifier";
  uint64_t v1 = [MEMORY[0x263EFF8C0] arrayWithObjects:v4 count:2];
  uint64_t v2 = [v0 setWithArray:v1];
  uint64_t v3 = (void *)shouldIgnoreExpectedConfigurationVersionUpdateForReason___ignoredReasons;
  shouldIgnoreExpectedConfigurationVersionUpdateForReason___ignoredReasons = v2;
}

+ (BOOL)shouldIncrementGenerationCounterForReason:(id)a3
{
  uint64_t v3 = shouldIncrementGenerationCounterForReason__onceToken;
  id v4 = a3;
  if (v3 != -1) {
    dispatch_once(&shouldIncrementGenerationCounterForReason__onceToken, &__block_literal_global_578);
  }
  char v5 = [(id)shouldIncrementGenerationCounterForReason__noIncreaseGenerationCounterReasons containsObject:v4];

  return v5 ^ 1;
}

void __60__HMDHomeManager_shouldIncrementGenerationCounterForReason___block_invoke()
{
  void v4[5] = *MEMORY[0x263EF8340];
  v0 = (void *)MEMORY[0x263EFFA08];
  v4[0] = @"HMDApplicationTerminatedSaveReason";
  v4[1] = @"kModifyCharacterisiticNotificationsRequestKey";
  void v4[2] = @"lastSyncedHomeConfigVersion";
  void v4[3] = @"kCharacteristicPreviousValue";
  void v4[4] = @"kCharacteristicValueUpdateStateNumberKey";
  uint64_t v1 = [MEMORY[0x263EFF8C0] arrayWithObjects:v4 count:5];
  uint64_t v2 = [v0 setWithArray:v1];
  uint64_t v3 = (void *)shouldIncrementGenerationCounterForReason__noIncreaseGenerationCounterReasons;
  shouldIncrementGenerationCounterForReason__noIncreaseGenerationCounterReasons = v2;
}

+ (BOOL)doesSaveReasonRequireForceSyncToWatch:(id)a3
{
  uint64_t v3 = doesSaveReasonRequireForceSyncToWatch__pred;
  id v4 = a3;
  if (v3 != -1) {
    dispatch_once(&doesSaveReasonRequireForceSyncToWatch__pred, &__block_literal_global_576);
  }
  char v5 = [(id)doesSaveReasonRequireForceSyncToWatch___watchForceSyncReasons containsObject:v4];

  return v5;
}

void __56__HMDHomeManager_doesSaveReasonRequireForceSyncToWatch___block_invoke()
{
  v4[1] = *MEMORY[0x263EF8340];
  v0 = (void *)MEMORY[0x263EFFA08];
  v4[0] = *MEMORY[0x263F0DBD0];
  uint64_t v1 = [MEMORY[0x263EFF8C0] arrayWithObjects:v4 count:1];
  uint64_t v2 = [v0 setWithArray:v1];
  uint64_t v3 = (void *)doesSaveReasonRequireForceSyncToWatch___watchForceSyncReasons;
  doesSaveReasonRequireForceSyncToWatch___watchForceSyncReasons = v2;
}

+ (BOOL)doesSaveReasonAffectOnlyLocalData:(id)a3
{
  uint64_t v3 = doesSaveReasonAffectOnlyLocalData__pred;
  id v4 = a3;
  if (v3 != -1) {
    dispatch_once(&doesSaveReasonAffectOnlyLocalData__pred, &__block_literal_global_574);
  }
  char v5 = [(id)doesSaveReasonAffectOnlyLocalData___localReason containsObject:v4];

  return v5;
}

void __52__HMDHomeManager_doesSaveReasonAffectOnlyLocalData___block_invoke()
{
  v6[38] = *MEMORY[0x263EF8340];
  v0 = (void *)MEMORY[0x263EFFA08];
  v6[0] = @"kTriggerFiredNotificationKey";
  v6[1] = @"triggerSourceInternalMessage";
  v6[2] = @"kResetConfigRequestKey";
  v6[3] = @"kModifyCharacterisiticNotificationsRequestKey";
  void v6[4] = @"kCharacteristicEnableNotificationRequestKey";
  void v6[5] = @"Incoming invitations updated";
  v6[6] = @"kAccessHomeInviteRequestKey";
  v6[7] = @"kDismissBulletinInternalRequestKey";
  v6[8] = @"kDismissDialogInternalRequestKey";
  v6[9] = @"kApplicationVendorIDStoreUpdate";
  uint64_t v1 = *MEMORY[0x263F0E9C8];
  v6[10] = *MEMORY[0x263F0E998];
  v6[11] = v1;
  v6[12] = @"kExecuteActionSetRequestKey";
  v6[13] = @"HMDApplicationTerminatedSaveReason";
  v6[14] = @"kSearchForNewAccessoriesRequestKey";
  v6[15] = @"kUpdateAccessAllowedWhenLockedRequestKey";
  v6[16] = @"kBulletinBoardNotificationUpdateNotificationKey";
  v6[17] = @"HMDBulletinBoardNotificationServiceGroupUpdatedSaveReason";
  v6[18] = @"kCharacteristicPreviousValue";
  v6[19] = @"kCharacteristicValueUpdateStateNumberKey";
  v6[20] = @"kTransactionUpdate";
  v6[21] = @"HMDHomePresenceMonitorUpdatedReason";
  v6[22] = @"userDisplayNameUpdated";
  v6[23] = @"lastSyncedHomeConfigVersion";
  v6[24] = @"AccessoryHasSymptomsHandlerUpdated";
  v6[25] = @"HMDUserCloudShareIDCodingKey";
  v6[26] = @"Update Shared Home Source Version";
  v6[27] = @"HMDHAPAccessoryUpdateCameraProfileNotificationSettingsReason";
  v6[28] = @"HMDHAPAccessorySaveAuthMethodReason";
  v6[29] = @"Upgraded To HH2";
  uint64_t v2 = *MEMORY[0x263F0B260];
  v6[30] = @"HMDAccessorySoftwareUpdate";
  v6[31] = v2;
  v6[32] = *MEMORY[0x263F0DBD0];
  v6[33] = @"HMDHAPAccessoryWoLUpdateLocallyLabel";
  v6[34] = @"HMDHAPAccessoryUpdateHasPostedBulletinForWalletKeyOnboardingReason";
  v6[35] = @"HMDAppleMediaAccessoryWiFiMACLocalOnlyUpdateLabel";
  v6[36] = @"Add Accessory Locally";
  v6[37] = @"kAccessoryLastSeenKey";
  uint64_t v3 = [MEMORY[0x263EFF8C0] arrayWithObjects:v6 count:38];
  uint64_t v4 = [v0 setWithArray:v3];
  char v5 = (void *)doesSaveReasonAffectOnlyLocalData___localReason;
  doesSaveReasonAffectOnlyLocalData___localReasouint64_t n = v4;
}

+ (BOOL)doesSaveReasonAffectHomeManager:(id)a3
{
  uint64_t v3 = doesSaveReasonAffectHomeManager__pred;
  id v4 = a3;
  if (v3 != -1) {
    dispatch_once(&doesSaveReasonAffectHomeManager__pred, &__block_literal_global_571_243892);
  }
  char v5 = [(id)doesSaveReasonAffectHomeManager___homeManagerReason containsObject:v4];

  return v5;
}

void __50__HMDHomeManager_doesSaveReasonAffectHomeManager___block_invoke()
{
  v4[23] = *MEMORY[0x263EF8340];
  v0 = (void *)MEMORY[0x263EFFA08];
  v4[0] = @"kAddHomeRequestKey";
  v4[1] = @"kRemoveHomeRequestKey";
  void v4[2] = @"kRemoveAllUsersFromAccessoriesRequestKey";
  void v4[3] = @"kHomeManagerUpdatedKey";
  void v4[4] = @"kHomeManagerCloudZoneAddedKey";
  void v4[5] = @"kHomeManagerCloudZoneRemovedKey";
  void v4[6] = @"kSetPrimaryHomeRequestKey";
  v4[7] = @"kUserRemovedRequestKey";
  v4[8] = @"kUserManagementOperationAddedKey";
  v4[9] = @"kUserManagementOperationRemovedKey";
  v4[10] = @"kHomeDataSyncRequestKey";
  v4[11] = @"kHomeDataFragmentedSyncRequestKey";
  v4[12] = *MEMORY[0x263F0CC28];
  v4[13] = @"MetadataUpdate";
  v4[14] = @"Object registration";
  v4[15] = @"Add Account";
  v4[16] = @"Update Devices";
  v4[17] = @"Update Handles";
  v4[18] = @"Remove Account";
  v4[19] = @"Update Device Name";
  v4[20] = @"Update Device";
  v4[21] = @"device pushback";
  v4[22] = @"accountHandle pushback";
  uint64_t v1 = [MEMORY[0x263EFF8C0] arrayWithObjects:v4 count:23];
  uint64_t v2 = [v0 setWithArray:v1];
  uint64_t v3 = (void *)doesSaveReasonAffectHomeManager___homeManagerReason;
  doesSaveReasonAffectHomeManager___homeManagerReasouint64_t n = v2;
}

+ (id)convertSaveReasonToTransationReason:(id)a3
{
  id v3 = a3;
  if (v3)
  {
    if (convertSaveReasonToTransationReason__pred != -1) {
      dispatch_once(&convertSaveReasonToTransationReason__pred, &__block_literal_global_569);
    }
    uint64_t v4 = [(id)convertSaveReasonToTransationReason___reasonMap objectForKey:v3];
    char v5 = (void *)v4;
    if (v4) {
      uint64_t v6 = (void *)v4;
    }
    else {
      uint64_t v6 = v3;
    }
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = @"kUnknownSaveReason";
  }

  return v7;
}

void __54__HMDHomeManager_convertSaveReasonToTransationReason___block_invoke()
{
  v3[3] = *MEMORY[0x263EF8340];
  v2[0] = @"kRemoteUsersDeregistered";
  v2[1] = @"kAddEventTriggerRequestKey";
  v3[0] = @"kRemoveUserRequestKey";
  v3[1] = @"kAddTriggerRequestKey";
  v2[2] = @"kAddTimerTriggerRequestKey";
  void v3[2] = @"kAddTriggerRequestKey";
  uint64_t v0 = [NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:3];
  uint64_t v1 = (void *)convertSaveReasonToTransationReason___reasonMap;
  convertSaveReasonToTransationReason___reasonMap = v0;
}

+ (void)removeAccessoryCacheForIdentifier:(id)a3
{
  id v3 = (void *)MEMORY[0x263F08850];
  id v4 = a3;
  id v7 = [v3 defaultManager];
  char v5 = getBLEAccessoryCachePath();
  uint64_t v6 = [v5 stringByAppendingFormat:@"/%@", v4];

  [v7 removeItemAtPath:v6 error:0];
}

+ (id)getAccessoryCacheForIdentifier:(id)a3
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v3 = a3;
  id v4 = getBLEAccessoryCachePath();
  char v5 = [v4 stringByAppendingFormat:@"/%@", v3];

  id v20 = 0;
  uint64_t v6 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v5 options:2 error:&v20];
  id v7 = v20;
  id v8 = v7;
  if (v6)
  {

    id v19 = 0;
    uint64_t v9 = [MEMORY[0x263F08928] unarchivedObjectOfClass:objc_opt_class() fromData:v6 error:&v19];
    id v8 = v19;
    if (v9) {
      goto LABEL_13;
    }
    id v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    uint64_t v12 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v22 = v12;
    __int16 v23 = 2112;
    id v24 = v8;
    uint64_t v13 = "%{public}@Failed to unarchive accessory cache from data: %@";
    uint64_t v14 = v11;
    uint32_t v15 = 22;
    goto LABEL_9;
  }
  __int16 v16 = [v7 domain];
  if (![v16 isEqualToString:*MEMORY[0x263F07F70]])
  {

    goto LABEL_12;
  }
  uint64_t v17 = [v8 code];

  if (v17 != 260)
  {
    id v10 = (void *)MEMORY[0x230FBD990]();
    id v11 = HMFGetOSLogHandle();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
LABEL_10:

      goto LABEL_12;
    }
    uint64_t v12 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543874;
    uint64_t v22 = v12;
    __int16 v23 = 2112;
    id v24 = v5;
    __int16 v25 = 2112;
    id v26 = v8;
    uint64_t v13 = "%{public}@Unable to load contents of cache file %@ - error %@";
    uint64_t v14 = v11;
    uint32_t v15 = 32;
LABEL_9:
    _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);

    goto LABEL_10;
  }
LABEL_12:
  uint64_t v9 = 0;
LABEL_13:

  return v9;
}

+ (void)saveAccessoryCache:(id)a3 forIdentifier:(id)a4
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = a4;
  id v7 = (void *)MEMORY[0x230FBD990]();
  id v8 = (void *)[objc_alloc(MEMORY[0x263F425C0]) initWithName:@"com.apple.homed.btle-cache-save."];
  uint64_t v9 = getBLEAccessoryCachePath();
  id v10 = [v9 stringByAppendingFormat:@"/%@", v6];

  id v11 = [MEMORY[0x263F08910] archivedDataWithRootObject:v5 requiringSecureCoding:1 error:0];
  uint64_t v12 = v11;
  if (!v11 || ([v11 writeToFile:v10 atomically:1] & 1) == 0)
  {
    uint64_t v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint32_t v15 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v17 = v15;
      __int16 v18 = 2112;
      id v19 = v10;
      _os_log_impl(&dword_22F52A000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed caching to file: %@", buf, 0x16u);
    }
  }
}

+ (id)logCategory
{
  if (logCategory__hmf_once_t13_243911 != -1) {
    dispatch_once(&logCategory__hmf_once_t13_243911, &__block_literal_global_413);
  }
  uint64_t v2 = (void *)logCategory__hmf_once_v14_243912;
  return v2;
}

void __29__HMDHomeManager_logCategory__block_invoke()
{
  uint64_t v0 = HMFCreateOSLogHandle();
  uint64_t v1 = (void *)logCategory__hmf_once_v14_243912;
  logCategory__hmf_once_v14_243912 = v0;
}

- (id)writeMigrationRecordWithShouldSkipKeyRollOperations:(BOOL)a3 forceMigrationFailureForTesting:(BOOL)a4 migrateFromTestDirectory:(BOOL)a5 dryRun:(BOOL)a6
{
  BOOL v6 = a6;
  uint64_t v7 = a5;
  BOOL v8 = a4;
  uint64_t v9 = a3;
  uint64_t v49 = *MEMORY[0x263EF8340];
  id v11 = (void *)MEMORY[0x230FBD990](self, a2);
  uint64_t v12 = self;
  uint64_t v13 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = HMFGetLogIdentifier();
    uint32_t v15 = HMFBooleanToString();
    __int16 v16 = HMFBooleanToString();
    HMFBooleanToString();
    uint64_t v17 = v38 = v7;
    HMFBooleanToString();
    unsigned int v37 = v9;
    BOOL v18 = v8;
    id v19 = v11;
    id v21 = v20 = v6;
    *(_DWORD *)long long buf = 138544386;
    uint64_t v40 = v14;
    __int16 v41 = 2112;
    id v42 = v15;
    __int16 v43 = 2112;
    uint64_t v44 = v16;
    __int16 v45 = 2112;
    unint64_t v46 = v17;
    __int16 v47 = 2112;
    id v48 = v21;
    _os_log_impl(&dword_22F52A000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Going to write migration record to disk with shouldSkipKeyRollOperations: %@ forceMigrationFailureForTesting: %@, migrateFromTestDirectory: %@, dryRun: %@", buf, 0x34u);

    BOOL v6 = v20;
    id v11 = v19;
    BOOL v8 = v18;
    uint64_t v9 = v37;

    uint64_t v7 = v38;
  }

  uint64_t v22 = +[HMDHH2MigratorRecord singleRecord];
  [v22 setShouldSkipKeyRollOperations:v9];
  [v22 setForceMigrationFailureForTesting:v8];
  [v22 setMigrateFromTestDirectory:v7];
  [v22 setDryRun:v6];
  if (([v22 writeNewMigrationRecord] & 1) == 0)
  {
    id v30 = (void *)MEMORY[0x230FBD990]();
    id v31 = v12;
    id v32 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      id v33 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v40 = v33;
      _os_log_impl(&dword_22F52A000, v32, OS_LOG_TYPE_ERROR, "%{public}@Unable to write migration record locally. Cannot start the migration work.", buf, 0xCu);
    }
    uint64_t v34 = [MEMORY[0x263F087E8] hmPrivateErrorWithCode:2702];
    goto LABEL_14;
  }
  char v23 = [v22 isMigrationInProgress];
  id v24 = (void *)MEMORY[0x230FBD990]();
  __int16 v25 = v12;
  id v26 = HMFGetOSLogHandle();
  uint64_t v27 = v26;
  if ((v23 & 1) == 0)
  {
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      long long v35 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      uint64_t v40 = v35;
      _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_ERROR, "%{public}@Not sure what happened here. We tried taking the ownership of the migration but could not. Failing the request...", buf, 0xCu);
    }
    uint64_t v34 = [MEMORY[0x263F087E8] hmErrorWithCode:-1 description:@"Error occurred while trying to take ownership of the migration work" reason:@"Taking the ownership writes the record to disk" suggestion:@"Check why the disk operation failed on HMDHH2MigratorRecord"];
LABEL_14:
    id v29 = (void *)v34;
    goto LABEL_15;
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    id v28 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v40 = v28;
    __int16 v41 = 2112;
    id v42 = v22;
    _os_log_impl(&dword_22F52A000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Successfully wrote migration record : %@", buf, 0x16u);
  }
  id v29 = 0;
LABEL_15:

  return v29;
}

- (void)_handleTestHH2Migration:(id)a3
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ((isInternalBuild() & 1) == 0)
  {
    uint64_t v7 = (void *)MEMORY[0x230FBD990]();
    BOOL v8 = self;
    uint64_t v9 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      id v10 = HMFGetLogIdentifier();
      int v11 = 138543362;
      uint64_t v12 = v10;
      _os_log_impl(&dword_22F52A000, v9, OS_LOG_TYPE_FAULT, "%{public}@Not sure how this message made it through isInternalBuild checks. DEBUG THIS!!!", (uint8_t *)&v11, 0xCu);
    }
    id v5 = [MEMORY[0x263F087E8] hmErrorWithCode:10];
    goto LABEL_7;
  }
  id v5 = -[HMDHomeManager writeMigrationRecordWithShouldSkipKeyRollOperations:forceMigrationFailureForTesting:migrateFromTestDirectory:dryRun:](self, "writeMigrationRecordWithShouldSkipKeyRollOperations:forceMigrationFailureForTesting:migrateFromTestDirectory:dryRun:", 1, 0, 1, [v4 BOOLForKey:*MEMORY[0x263F0CAF0]]);
  if (v5)
  {
LABEL_7:
    [v4 respondWithError:v5];
    goto LABEL_8;
  }
  +[HMDResetConfigPostCleanup writePostCleanupRecordToRemoveAllCoreDataFilesWithReason:5];
  BOOL v6 = [(HMDHomeManager *)self hh2FrameworkSwitch];
  [(id)objc_opt_class() switchToHH2AndRelaunchHomed];

  [v4 respondWithSuccess];
LABEL_8:
}

- (void)waitForHH2SentinelZoneToBeRemoved
{
  id v2 = [(HMDHomeManager *)self hh2FrameworkSwitch];
  [v2 waitForHH2SentinelZoneToBeRemoved];
}

- (void)_handleSwitchSetupMode:(id)a3
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if (_os_feature_enabled_impl())
  {
    uint64_t v5 = *MEMORY[0x263F0CC38];
    BOOL v6 = [v4 numberForKey:*MEMORY[0x263F0CC38]];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = [v6 integerValue];
      keyExistsAndHasValidFormat[0] = 0;
      CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"HHTTSUMode", @"com.apple.homed", keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0]) {
        CFIndex v10 = AppIntegerValue;
      }
      else {
        CFIndex v10 = 0;
      }
      int v11 = [(HMDHomeManager *)self hh2FrameworkSwitch];
      int v12 = [v11 switchToSetupMode:v8];

      if (v12)
      {
        [v4 respondWithSuccess];
      }
      else
      {
        uint64_t v22 = (void *)MEMORY[0x230FBD990]();
        char v23 = self;
        id v24 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v25 = HMFGetLogIdentifier();
          *(_DWORD *)keyExistsAndHasValidFormat = 138543362;
          id v31 = v25;
          _os_log_impl(&dword_22F52A000, v24, OS_LOG_TYPE_DEFAULT, "%{public}@Mode switch will result in a change do not callback message.", keyExistsAndHasValidFormat, 0xCu);
        }
        id v26 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", v10, v5);
        id v29 = v26;
        uint64_t v27 = [NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
        [v4 respondWithPayload:v27];
      }
    }
    else
    {
      uint64_t v17 = (void *)MEMORY[0x230FBD990]();
      BOOL v18 = self;
      id v19 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        BOOL v20 = HMFGetLogIdentifier();
        *(_DWORD *)keyExistsAndHasValidFormat = 138543362;
        id v31 = v20;
        _os_log_impl(&dword_22F52A000, v19, OS_LOG_TYPE_ERROR, "%{public}@No setup mode in request", keyExistsAndHasValidFormat, 0xCu);
      }
      id v21 = [MEMORY[0x263F087E8] hmErrorWithCode:3];
      [v4 respondWithError:v21];

      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x230FBD990]();
    uint64_t v14 = self;
    uint32_t v15 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      __int16 v16 = HMFGetLogIdentifier();
      *(_DWORD *)keyExistsAndHasValidFormat = 138543362;
      id v31 = v16;
      _os_log_impl(&dword_22F52A000, v15, OS_LOG_TYPE_ERROR, "%{public}@Setup mode is not enabled Failing", keyExistsAndHasValidFormat, 0xCu);
    }
    uint64_t v7 = [MEMORY[0x263F087E8] hmErrorWithCode:48];
    [v4 respondWithError:v7];
  }
}

- (void)_handleFetchSetupMode:(id)a3
{
  v8[1] = *MEMORY[0x263EF8340];
  uint64_t v7 = *MEMORY[0x263F0CC38];
  id v3 = NSNumber;
  id v4 = a3;
  uint64_t v5 = [v3 numberWithBool:1];
  v8[0] = v5;
  BOOL v6 = [NSDictionary dictionaryWithObjects:v8 forKeys:&v7 count:1];
  [v4 respondWithPayload:v6];
}

- (void)_registerForFrameworkSwitch
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (isInternalBuild())
  {
    id v3 = (void *)MEMORY[0x230FBD990]();
    id v4 = self;
    uint64_t v5 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      BOOL v6 = HMFGetLogIdentifier();
      *(_DWORD *)long long buf = 138543362;
      BOOL v18 = v6;
      _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for test HH2 migration request message", buf, 0xCu);
    }
    uint64_t v7 = [(HMDHomeManager *)v4 messageDispatcher];
    uint64_t v8 = *MEMORY[0x263F0CC68];
    uint64_t v9 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
    __int16 v16 = v9;
    CFIndex v10 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v16 count:1];
    [v7 registerForMessage:v8 receiver:v4 policies:v10 selector:sel__handleTestHH2Migration_];
  }
  int v11 = [(HMDHomeManager *)self messageDispatcher];
  uint64_t v12 = *MEMORY[0x263F0CAD0];
  uint64_t v13 = +[HMDXPCMessagePolicy policyWithEntitlements:5];
  uint32_t v15 = v13;
  uint64_t v14 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v15 count:1];
  [v11 registerForMessage:v12 receiver:self policies:v14 selector:sel__handleFetchSetupMode_];
}

- (void)initializeHH2FrameworkSwitch
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x230FBD990](self, a2);
  id v4 = self;
  uint64_t v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    BOOL v6 = HMFGetLogIdentifier();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v12 = v6;
    _os_log_impl(&dword_22F52A000, v5, OS_LOG_TYPE_INFO, "%{public}@Initializing framework switch with auto switch enabled", buf, 0xCu);
  }
  objc_initWeak((id *)buf, v4);
  uint64_t v7 = [HMDHH2FrameworkSwitch alloc];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = __66__HMDHomeManager_HH2FrameworkSwitch__initializeHH2FrameworkSwitch__block_invoke;
  v9[3] = &unk_264A2DCA8;
  objc_copyWeak(&v10, (id *)buf);
  uint64_t v8 = [(HMDHH2FrameworkSwitch *)v7 initWithAutoSwitchEnabledWithHomeManager:v4 callBeforeFrameworkSwitchCompletionHandler:v9];
  [(HMDHomeManager *)v4 setHh2FrameworkSwitch:v8];

  objc_destroyWeak(&v10);
  objc_destroyWeak((id *)buf);
}

id __66__HMDHomeManager_HH2FrameworkSwitch__initializeHH2FrameworkSwitch__block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
  {
    id v2 = (void *)MEMORY[0x230FBD990]();
    id v3 = objc_opt_class();
    id v4 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = HMFGetLogIdentifier();
      int v9 = 138543362;
      id v10 = v5;
      _os_log_impl(&dword_22F52A000, v4, OS_LOG_TYPE_ERROR, "%{public}@Home manager died before framework switch completed", (uint8_t *)&v9, 0xCu);
    }
    id v6 = (id)[MEMORY[0x263F42538] futureWithNoValue];
  }
  uint64_t v7 = [MEMORY[0x263F42538] futureWithNoValue];

  return v7;
}

@end